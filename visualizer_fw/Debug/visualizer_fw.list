
visualizer_fw.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000075a4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  08007744  08007744  00017744  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080077e4  080077e4  0002014c  2**0
                  CONTENTS
  4 .ARM          00000008  080077e4  080077e4  000177e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080077ec  080077ec  0002014c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080077ec  080077ec  000177ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080077f0  080077f0  000177f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000014c  20000000  080077f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002158  2000014c  08007940  0002014c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200022a4  08007940  000222a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002014c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002017c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000da24  00000000  00000000  000201bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002dbb  00000000  00000000  0002dbe3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000be0  00000000  00000000  000309a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000008ab  00000000  00000000  00031580  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000188ca  00000000  00000000  00031e2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000115f0  00000000  00000000  0004a6f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008758c  00000000  00000000  0005bce5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003318  00000000  00000000  000e3274  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000081  00000000  00000000  000e658c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000014c 	.word	0x2000014c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800772c 	.word	0x0800772c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000150 	.word	0x20000150
 80001dc:	0800772c 	.word	0x0800772c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800057c:	b480      	push	{r7}
 800057e:	b083      	sub	sp, #12
 8000580:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000582:	2300      	movs	r3, #0
 8000584:	607b      	str	r3, [r7, #4]
 8000586:	4b10      	ldr	r3, [pc, #64]	; (80005c8 <MX_GPIO_Init+0x4c>)
 8000588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800058a:	4a0f      	ldr	r2, [pc, #60]	; (80005c8 <MX_GPIO_Init+0x4c>)
 800058c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000590:	6313      	str	r3, [r2, #48]	; 0x30
 8000592:	4b0d      	ldr	r3, [pc, #52]	; (80005c8 <MX_GPIO_Init+0x4c>)
 8000594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000596:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800059a:	607b      	str	r3, [r7, #4]
 800059c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800059e:	2300      	movs	r3, #0
 80005a0:	603b      	str	r3, [r7, #0]
 80005a2:	4b09      	ldr	r3, [pc, #36]	; (80005c8 <MX_GPIO_Init+0x4c>)
 80005a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005a6:	4a08      	ldr	r2, [pc, #32]	; (80005c8 <MX_GPIO_Init+0x4c>)
 80005a8:	f043 0301 	orr.w	r3, r3, #1
 80005ac:	6313      	str	r3, [r2, #48]	; 0x30
 80005ae:	4b06      	ldr	r3, [pc, #24]	; (80005c8 <MX_GPIO_Init+0x4c>)
 80005b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005b2:	f003 0301 	and.w	r3, r3, #1
 80005b6:	603b      	str	r3, [r7, #0]
 80005b8:	683b      	ldr	r3, [r7, #0]

}
 80005ba:	bf00      	nop
 80005bc:	370c      	adds	r7, #12
 80005be:	46bd      	mov	sp, r7
 80005c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop
 80005c8:	40023800 	.word	0x40023800

080005cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b082      	sub	sp, #8
 80005d0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005d2:	f000 fa15 	bl	8000a00 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005d6:	f000 f817 	bl	8000608 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005da:	f7ff ffcf 	bl	800057c <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80005de:	f005 fec5 	bl	800636c <MX_USB_DEVICE_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
  	if(cdcAvailable()>0)
 80005e2:	f000 f953 	bl	800088c <cdcAvailable>
 80005e6:	4603      	mov	r3, r0
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d0fa      	beq.n	80005e2 <main+0x16>
  	{
  		uint8_t rx_data;

    	rx_data = cdcRead();
 80005ec:	f000 f968 	bl	80008c0 <cdcRead>
 80005f0:	4603      	mov	r3, r0
 80005f2:	71fb      	strb	r3, [r7, #7]
    	cdcPrintf("Rx_Data : %c 0x%X\n", rx_data, rx_data);
 80005f4:	79fb      	ldrb	r3, [r7, #7]
 80005f6:	79fa      	ldrb	r2, [r7, #7]
 80005f8:	4619      	mov	r1, r3
 80005fa:	4802      	ldr	r0, [pc, #8]	; (8000604 <main+0x38>)
 80005fc:	f000 f9d2 	bl	80009a4 <cdcPrintf>
  	if(cdcAvailable()>0)
 8000600:	e7ef      	b.n	80005e2 <main+0x16>
 8000602:	bf00      	nop
 8000604:	08007744 	.word	0x08007744

08000608 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b094      	sub	sp, #80	; 0x50
 800060c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800060e:	f107 0320 	add.w	r3, r7, #32
 8000612:	2230      	movs	r2, #48	; 0x30
 8000614:	2100      	movs	r1, #0
 8000616:	4618      	mov	r0, r3
 8000618:	f006 fc04 	bl	8006e24 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800061c:	f107 030c 	add.w	r3, r7, #12
 8000620:	2200      	movs	r2, #0
 8000622:	601a      	str	r2, [r3, #0]
 8000624:	605a      	str	r2, [r3, #4]
 8000626:	609a      	str	r2, [r3, #8]
 8000628:	60da      	str	r2, [r3, #12]
 800062a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800062c:	2300      	movs	r3, #0
 800062e:	60bb      	str	r3, [r7, #8]
 8000630:	4b27      	ldr	r3, [pc, #156]	; (80006d0 <SystemClock_Config+0xc8>)
 8000632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000634:	4a26      	ldr	r2, [pc, #152]	; (80006d0 <SystemClock_Config+0xc8>)
 8000636:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800063a:	6413      	str	r3, [r2, #64]	; 0x40
 800063c:	4b24      	ldr	r3, [pc, #144]	; (80006d0 <SystemClock_Config+0xc8>)
 800063e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000640:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000644:	60bb      	str	r3, [r7, #8]
 8000646:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000648:	2300      	movs	r3, #0
 800064a:	607b      	str	r3, [r7, #4]
 800064c:	4b21      	ldr	r3, [pc, #132]	; (80006d4 <SystemClock_Config+0xcc>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	4a20      	ldr	r2, [pc, #128]	; (80006d4 <SystemClock_Config+0xcc>)
 8000652:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000656:	6013      	str	r3, [r2, #0]
 8000658:	4b1e      	ldr	r3, [pc, #120]	; (80006d4 <SystemClock_Config+0xcc>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000660:	607b      	str	r3, [r7, #4]
 8000662:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000664:	2301      	movs	r3, #1
 8000666:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000668:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800066c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800066e:	2302      	movs	r3, #2
 8000670:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000672:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000676:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000678:	2319      	movs	r3, #25
 800067a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 800067c:	23c0      	movs	r3, #192	; 0xc0
 800067e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000680:	2302      	movs	r3, #2
 8000682:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000684:	2304      	movs	r3, #4
 8000686:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000688:	f107 0320 	add.w	r3, r7, #32
 800068c:	4618      	mov	r0, r3
 800068e:	f001 ff33 	bl	80024f8 <HAL_RCC_OscConfig>
 8000692:	4603      	mov	r3, r0
 8000694:	2b00      	cmp	r3, #0
 8000696:	d001      	beq.n	800069c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000698:	f000 f81e 	bl	80006d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800069c:	230f      	movs	r3, #15
 800069e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006a0:	2302      	movs	r3, #2
 80006a2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006a4:	2300      	movs	r3, #0
 80006a6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006ac:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006ae:	2300      	movs	r3, #0
 80006b0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80006b2:	f107 030c 	add.w	r3, r7, #12
 80006b6:	2103      	movs	r1, #3
 80006b8:	4618      	mov	r0, r3
 80006ba:	f002 f995 	bl	80029e8 <HAL_RCC_ClockConfig>
 80006be:	4603      	mov	r3, r0
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d001      	beq.n	80006c8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80006c4:	f000 f808 	bl	80006d8 <Error_Handler>
  }
}
 80006c8:	bf00      	nop
 80006ca:	3750      	adds	r7, #80	; 0x50
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	40023800 	.word	0x40023800
 80006d4:	40007000 	.word	0x40007000

080006d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006d8:	b480      	push	{r7}
 80006da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006dc:	b672      	cpsid	i
}
 80006de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006e0:	e7fe      	b.n	80006e0 <Error_Handler+0x8>
	...

080006e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006e4:	b480      	push	{r7}
 80006e6:	b083      	sub	sp, #12
 80006e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006ea:	2300      	movs	r3, #0
 80006ec:	607b      	str	r3, [r7, #4]
 80006ee:	4b10      	ldr	r3, [pc, #64]	; (8000730 <HAL_MspInit+0x4c>)
 80006f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006f2:	4a0f      	ldr	r2, [pc, #60]	; (8000730 <HAL_MspInit+0x4c>)
 80006f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006f8:	6453      	str	r3, [r2, #68]	; 0x44
 80006fa:	4b0d      	ldr	r3, [pc, #52]	; (8000730 <HAL_MspInit+0x4c>)
 80006fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000702:	607b      	str	r3, [r7, #4]
 8000704:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000706:	2300      	movs	r3, #0
 8000708:	603b      	str	r3, [r7, #0]
 800070a:	4b09      	ldr	r3, [pc, #36]	; (8000730 <HAL_MspInit+0x4c>)
 800070c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800070e:	4a08      	ldr	r2, [pc, #32]	; (8000730 <HAL_MspInit+0x4c>)
 8000710:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000714:	6413      	str	r3, [r2, #64]	; 0x40
 8000716:	4b06      	ldr	r3, [pc, #24]	; (8000730 <HAL_MspInit+0x4c>)
 8000718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800071a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800071e:	603b      	str	r3, [r7, #0]
 8000720:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000722:	bf00      	nop
 8000724:	370c      	adds	r7, #12
 8000726:	46bd      	mov	sp, r7
 8000728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072c:	4770      	bx	lr
 800072e:	bf00      	nop
 8000730:	40023800 	.word	0x40023800

08000734 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000734:	b480      	push	{r7}
 8000736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000738:	e7fe      	b.n	8000738 <NMI_Handler+0x4>

0800073a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800073a:	b480      	push	{r7}
 800073c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800073e:	e7fe      	b.n	800073e <HardFault_Handler+0x4>

08000740 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000740:	b480      	push	{r7}
 8000742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000744:	e7fe      	b.n	8000744 <MemManage_Handler+0x4>

08000746 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000746:	b480      	push	{r7}
 8000748:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800074a:	e7fe      	b.n	800074a <BusFault_Handler+0x4>

0800074c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800074c:	b480      	push	{r7}
 800074e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000750:	e7fe      	b.n	8000750 <UsageFault_Handler+0x4>

08000752 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000752:	b480      	push	{r7}
 8000754:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000756:	bf00      	nop
 8000758:	46bd      	mov	sp, r7
 800075a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075e:	4770      	bx	lr

08000760 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000760:	b480      	push	{r7}
 8000762:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000764:	bf00      	nop
 8000766:	46bd      	mov	sp, r7
 8000768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076c:	4770      	bx	lr

0800076e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800076e:	b480      	push	{r7}
 8000770:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000772:	bf00      	nop
 8000774:	46bd      	mov	sp, r7
 8000776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077a:	4770      	bx	lr

0800077c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000780:	f000 f990 	bl	8000aa4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000784:	bf00      	nop
 8000786:	bd80      	pop	{r7, pc}

08000788 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800078c:	4802      	ldr	r0, [pc, #8]	; (8000798 <OTG_FS_IRQHandler+0x10>)
 800078e:	f000 fda7 	bl	80012e0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000792:	bf00      	nop
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	20001a58 	.word	0x20001a58

0800079c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b086      	sub	sp, #24
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80007a4:	4a14      	ldr	r2, [pc, #80]	; (80007f8 <_sbrk+0x5c>)
 80007a6:	4b15      	ldr	r3, [pc, #84]	; (80007fc <_sbrk+0x60>)
 80007a8:	1ad3      	subs	r3, r2, r3
 80007aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80007ac:	697b      	ldr	r3, [r7, #20]
 80007ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80007b0:	4b13      	ldr	r3, [pc, #76]	; (8000800 <_sbrk+0x64>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d102      	bne.n	80007be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80007b8:	4b11      	ldr	r3, [pc, #68]	; (8000800 <_sbrk+0x64>)
 80007ba:	4a12      	ldr	r2, [pc, #72]	; (8000804 <_sbrk+0x68>)
 80007bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80007be:	4b10      	ldr	r3, [pc, #64]	; (8000800 <_sbrk+0x64>)
 80007c0:	681a      	ldr	r2, [r3, #0]
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	4413      	add	r3, r2
 80007c6:	693a      	ldr	r2, [r7, #16]
 80007c8:	429a      	cmp	r2, r3
 80007ca:	d207      	bcs.n	80007dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80007cc:	f006 fb32 	bl	8006e34 <__errno>
 80007d0:	4603      	mov	r3, r0
 80007d2:	220c      	movs	r2, #12
 80007d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80007d6:	f04f 33ff 	mov.w	r3, #4294967295
 80007da:	e009      	b.n	80007f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80007dc:	4b08      	ldr	r3, [pc, #32]	; (8000800 <_sbrk+0x64>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80007e2:	4b07      	ldr	r3, [pc, #28]	; (8000800 <_sbrk+0x64>)
 80007e4:	681a      	ldr	r2, [r3, #0]
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	4413      	add	r3, r2
 80007ea:	4a05      	ldr	r2, [pc, #20]	; (8000800 <_sbrk+0x64>)
 80007ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80007ee:	68fb      	ldr	r3, [r7, #12]
}
 80007f0:	4618      	mov	r0, r3
 80007f2:	3718      	adds	r7, #24
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	20020000 	.word	0x20020000
 80007fc:	00000400 	.word	0x00000400
 8000800:	20000168 	.word	0x20000168
 8000804:	200022a8 	.word	0x200022a8

08000808 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000808:	b480      	push	{r7}
 800080a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800080c:	4b06      	ldr	r3, [pc, #24]	; (8000828 <SystemInit+0x20>)
 800080e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000812:	4a05      	ldr	r2, [pc, #20]	; (8000828 <SystemInit+0x20>)
 8000814:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000818:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800081c:	bf00      	nop
 800081e:	46bd      	mov	sp, r7
 8000820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000824:	4770      	bx	lr
 8000826:	bf00      	nop
 8000828:	e000ed00 	.word	0xe000ed00

0800082c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800082c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000864 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000830:	f7ff ffea 	bl	8000808 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000834:	480c      	ldr	r0, [pc, #48]	; (8000868 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000836:	490d      	ldr	r1, [pc, #52]	; (800086c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000838:	4a0d      	ldr	r2, [pc, #52]	; (8000870 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800083a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800083c:	e002      	b.n	8000844 <LoopCopyDataInit>

0800083e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800083e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000840:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000842:	3304      	adds	r3, #4

08000844 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000844:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000846:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000848:	d3f9      	bcc.n	800083e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800084a:	4a0a      	ldr	r2, [pc, #40]	; (8000874 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800084c:	4c0a      	ldr	r4, [pc, #40]	; (8000878 <LoopFillZerobss+0x22>)
  movs r3, #0
 800084e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000850:	e001      	b.n	8000856 <LoopFillZerobss>

08000852 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000852:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000854:	3204      	adds	r2, #4

08000856 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000856:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000858:	d3fb      	bcc.n	8000852 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800085a:	f006 faf1 	bl	8006e40 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800085e:	f7ff feb5 	bl	80005cc <main>
  bx  lr    
 8000862:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000864:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000868:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800086c:	2000014c 	.word	0x2000014c
  ldr r2, =_sidata
 8000870:	080077f4 	.word	0x080077f4
  ldr r2, =_sbss
 8000874:	2000014c 	.word	0x2000014c
  ldr r4, =_ebss
 8000878:	200022a4 	.word	0x200022a4

0800087c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800087c:	e7fe      	b.n	800087c <ADC_IRQHandler>

0800087e <millis>:
	HAL_Delay(ms);
}


uint32_t millis(void)
{
 800087e:	b580      	push	{r7, lr}
 8000880:	af00      	add	r7, sp, #0
	return HAL_GetTick();
 8000882:	f000 f923 	bl	8000acc <HAL_GetTick>
 8000886:	4603      	mov	r3, r0
}
 8000888:	4618      	mov	r0, r3
 800088a:	bd80      	pop	{r7, pc}

0800088c <cdcAvailable>:
bool rx_full=false;



uint32_t cdcAvailable(void)
{
 800088c:	b480      	push	{r7}
 800088e:	b083      	sub	sp, #12
 8000890:	af00      	add	r7, sp, #0
	uint32_t ret = -1;
 8000892:	f04f 33ff 	mov.w	r3, #4294967295
 8000896:	607b      	str	r3, [r7, #4]

	ret = (rx_in - rx_out) % BUF_SIZE;
 8000898:	4b07      	ldr	r3, [pc, #28]	; (80008b8 <cdcAvailable+0x2c>)
 800089a:	681a      	ldr	r2, [r3, #0]
 800089c:	4b07      	ldr	r3, [pc, #28]	; (80008bc <cdcAvailable+0x30>)
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	1ad3      	subs	r3, r2, r3
 80008a2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80008a6:	607b      	str	r3, [r7, #4]

	return ret;
 80008a8:	687b      	ldr	r3, [r7, #4]
}
 80008aa:	4618      	mov	r0, r3
 80008ac:	370c      	adds	r7, #12
 80008ae:	46bd      	mov	sp, r7
 80008b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b4:	4770      	bx	lr
 80008b6:	bf00      	nop
 80008b8:	2000056c 	.word	0x2000056c
 80008bc:	20000570 	.word	0x20000570

080008c0 <cdcRead>:

uint8_t cdcRead(void)
{
 80008c0:	b480      	push	{r7}
 80008c2:	b083      	sub	sp, #12
 80008c4:	af00      	add	r7, sp, #0
	uint8_t ret = 0;
 80008c6:	2300      	movs	r3, #0
 80008c8:	71fb      	strb	r3, [r7, #7]

	ret = rx_buf[rx_out];
 80008ca:	4b0c      	ldr	r3, [pc, #48]	; (80008fc <cdcRead+0x3c>)
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	4a0c      	ldr	r2, [pc, #48]	; (8000900 <cdcRead+0x40>)
 80008d0:	5cd3      	ldrb	r3, [r2, r3]
 80008d2:	71fb      	strb	r3, [r7, #7]

	if(rx_out != rx_in)
 80008d4:	4b09      	ldr	r3, [pc, #36]	; (80008fc <cdcRead+0x3c>)
 80008d6:	681a      	ldr	r2, [r3, #0]
 80008d8:	4b0a      	ldr	r3, [pc, #40]	; (8000904 <cdcRead+0x44>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	429a      	cmp	r2, r3
 80008de:	d006      	beq.n	80008ee <cdcRead+0x2e>
	{
		rx_out = (rx_out + 1) % BUF_SIZE;
 80008e0:	4b06      	ldr	r3, [pc, #24]	; (80008fc <cdcRead+0x3c>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	3301      	adds	r3, #1
 80008e6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80008ea:	4a04      	ldr	r2, [pc, #16]	; (80008fc <cdcRead+0x3c>)
 80008ec:	6013      	str	r3, [r2, #0]
	}

	return ret;
 80008ee:	79fb      	ldrb	r3, [r7, #7]
}
 80008f0:	4618      	mov	r0, r3
 80008f2:	370c      	adds	r7, #12
 80008f4:	46bd      	mov	sp, r7
 80008f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fa:	4770      	bx	lr
 80008fc:	20000570 	.word	0x20000570
 8000900:	2000016c 	.word	0x2000016c
 8000904:	2000056c 	.word	0x2000056c

08000908 <cdcDataIn>:

void cdcDataIn(uint8_t rx_data)
{
 8000908:	b480      	push	{r7}
 800090a:	b085      	sub	sp, #20
 800090c:	af00      	add	r7, sp, #0
 800090e:	4603      	mov	r3, r0
 8000910:	71fb      	strb	r3, [r7, #7]
	rx_buf[rx_in] = rx_data;
 8000912:	4b0c      	ldr	r3, [pc, #48]	; (8000944 <cdcDataIn+0x3c>)
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	490c      	ldr	r1, [pc, #48]	; (8000948 <cdcDataIn+0x40>)
 8000918:	79fa      	ldrb	r2, [r7, #7]
 800091a:	54ca      	strb	r2, [r1, r3]

	uint8_t next_rx_in = (rx_in + 1) % BUF_SIZE;
 800091c:	4b09      	ldr	r3, [pc, #36]	; (8000944 <cdcDataIn+0x3c>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	b2db      	uxtb	r3, r3
 8000922:	3301      	adds	r3, #1
 8000924:	73fb      	strb	r3, [r7, #15]

	if(next_rx_in != rx_out)
 8000926:	7bfa      	ldrb	r2, [r7, #15]
 8000928:	4b08      	ldr	r3, [pc, #32]	; (800094c <cdcDataIn+0x44>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	429a      	cmp	r2, r3
 800092e:	d002      	beq.n	8000936 <cdcDataIn+0x2e>
	{
		rx_in = next_rx_in;
 8000930:	7bfb      	ldrb	r3, [r7, #15]
 8000932:	4a04      	ldr	r2, [pc, #16]	; (8000944 <cdcDataIn+0x3c>)
 8000934:	6013      	str	r3, [r2, #0]
	}
}
 8000936:	bf00      	nop
 8000938:	3714      	adds	r7, #20
 800093a:	46bd      	mov	sp, r7
 800093c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000940:	4770      	bx	lr
 8000942:	bf00      	nop
 8000944:	2000056c 	.word	0x2000056c
 8000948:	2000016c 	.word	0x2000016c
 800094c:	20000570 	.word	0x20000570

08000950 <cdcWrite>:

uint32_t cdcWrite(uint8_t *p_data, uint32_t len)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b084      	sub	sp, #16
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
 8000958:	6039      	str	r1, [r7, #0]
	uint32_t pre_time = 0;
 800095a:	2300      	movs	r3, #0
 800095c:	60fb      	str	r3, [r7, #12]
	uint8_t ret;

	pre_time = millis();
 800095e:	f7ff ff8e 	bl	800087e <millis>
 8000962:	60f8      	str	r0, [r7, #12]
	while(1)
	{
		ret = CDC_Transmit_FS(p_data, len);
 8000964:	683b      	ldr	r3, [r7, #0]
 8000966:	b29b      	uxth	r3, r3
 8000968:	4619      	mov	r1, r3
 800096a:	6878      	ldr	r0, [r7, #4]
 800096c:	f005 fdce 	bl	800650c <CDC_Transmit_FS>
 8000970:	4603      	mov	r3, r0
 8000972:	72fb      	strb	r3, [r7, #11]

		if(ret == USBD_OK)
 8000974:	7afb      	ldrb	r3, [r7, #11]
 8000976:	2b00      	cmp	r3, #0
 8000978:	d101      	bne.n	800097e <cdcWrite+0x2e>
			{
				return len;
 800097a:	683b      	ldr	r3, [r7, #0]
 800097c:	e00e      	b.n	800099c <cdcWrite+0x4c>
			}
			else if(ret == USBD_FAIL)
 800097e:	7afb      	ldrb	r3, [r7, #11]
 8000980:	2b03      	cmp	r3, #3
 8000982:	d101      	bne.n	8000988 <cdcWrite+0x38>
			{
				return 0;
 8000984:	2300      	movs	r3, #0
 8000986:	e009      	b.n	800099c <cdcWrite+0x4c>
			}

			if(millis() - pre_time >= 100)
 8000988:	f7ff ff79 	bl	800087e <millis>
 800098c:	4602      	mov	r2, r0
 800098e:	68fb      	ldr	r3, [r7, #12]
 8000990:	1ad3      	subs	r3, r2, r3
 8000992:	2b63      	cmp	r3, #99	; 0x63
 8000994:	d800      	bhi.n	8000998 <cdcWrite+0x48>
		ret = CDC_Transmit_FS(p_data, len);
 8000996:	e7e5      	b.n	8000964 <cdcWrite+0x14>
			{
				break;
 8000998:	bf00      	nop
			}
	}

	return 0;
 800099a:	2300      	movs	r3, #0
}
 800099c:	4618      	mov	r0, r3
 800099e:	3710      	adds	r7, #16
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bd80      	pop	{r7, pc}

080009a4 <cdcPrintf>:

uint32_t cdcPrintf(char *fmt, ...)
{
 80009a4:	b40f      	push	{r0, r1, r2, r3}
 80009a6:	b580      	push	{r7, lr}
 80009a8:	b0c4      	sub	sp, #272	; 0x110
 80009aa:	af00      	add	r7, sp, #0
	char buf[256];
	va_list args;
	int len;
	uint32_t ret;

	va_start(args, fmt);
 80009ac:	f507 728e 	add.w	r2, r7, #284	; 0x11c
 80009b0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80009b4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80009b8:	601a      	str	r2, [r3, #0]
	len = vsnprintf(buf, 256, fmt, args);
 80009ba:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80009be:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80009c2:	f107 0008 	add.w	r0, r7, #8
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80009cc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009d0:	f006 fa1a 	bl	8006e08 <vsniprintf>
 80009d4:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c

	ret = cdcWrite((uint8_t *)buf, len);
 80009d8:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 80009dc:	f107 0308 	add.w	r3, r7, #8
 80009e0:	4611      	mov	r1, r2
 80009e2:	4618      	mov	r0, r3
 80009e4:	f7ff ffb4 	bl	8000950 <cdcWrite>
 80009e8:	f8c7 0108 	str.w	r0, [r7, #264]	; 0x108

	va_end(args);

	return ret;
 80009ec:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
}
 80009f0:	4618      	mov	r0, r3
 80009f2:	f507 7788 	add.w	r7, r7, #272	; 0x110
 80009f6:	46bd      	mov	sp, r7
 80009f8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80009fc:	b004      	add	sp, #16
 80009fe:	4770      	bx	lr

08000a00 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a04:	4b0e      	ldr	r3, [pc, #56]	; (8000a40 <HAL_Init+0x40>)
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	4a0d      	ldr	r2, [pc, #52]	; (8000a40 <HAL_Init+0x40>)
 8000a0a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a0e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a10:	4b0b      	ldr	r3, [pc, #44]	; (8000a40 <HAL_Init+0x40>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	4a0a      	ldr	r2, [pc, #40]	; (8000a40 <HAL_Init+0x40>)
 8000a16:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a1a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a1c:	4b08      	ldr	r3, [pc, #32]	; (8000a40 <HAL_Init+0x40>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	4a07      	ldr	r2, [pc, #28]	; (8000a40 <HAL_Init+0x40>)
 8000a22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a26:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a28:	2003      	movs	r0, #3
 8000a2a:	f000 f94f 	bl	8000ccc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a2e:	200f      	movs	r0, #15
 8000a30:	f000 f808 	bl	8000a44 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a34:	f7ff fe56 	bl	80006e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a38:	2300      	movs	r3, #0
}
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	40023c00 	.word	0x40023c00

08000a44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b082      	sub	sp, #8
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a4c:	4b12      	ldr	r3, [pc, #72]	; (8000a98 <HAL_InitTick+0x54>)
 8000a4e:	681a      	ldr	r2, [r3, #0]
 8000a50:	4b12      	ldr	r3, [pc, #72]	; (8000a9c <HAL_InitTick+0x58>)
 8000a52:	781b      	ldrb	r3, [r3, #0]
 8000a54:	4619      	mov	r1, r3
 8000a56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a62:	4618      	mov	r0, r3
 8000a64:	f000 f967 	bl	8000d36 <HAL_SYSTICK_Config>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d001      	beq.n	8000a72 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a6e:	2301      	movs	r3, #1
 8000a70:	e00e      	b.n	8000a90 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	2b0f      	cmp	r3, #15
 8000a76:	d80a      	bhi.n	8000a8e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a78:	2200      	movs	r2, #0
 8000a7a:	6879      	ldr	r1, [r7, #4]
 8000a7c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a80:	f000 f92f 	bl	8000ce2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a84:	4a06      	ldr	r2, [pc, #24]	; (8000aa0 <HAL_InitTick+0x5c>)
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	e000      	b.n	8000a90 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a8e:	2301      	movs	r3, #1
}
 8000a90:	4618      	mov	r0, r3
 8000a92:	3708      	adds	r7, #8
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bd80      	pop	{r7, pc}
 8000a98:	20000000 	.word	0x20000000
 8000a9c:	20000008 	.word	0x20000008
 8000aa0:	20000004 	.word	0x20000004

08000aa4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000aa8:	4b06      	ldr	r3, [pc, #24]	; (8000ac4 <HAL_IncTick+0x20>)
 8000aaa:	781b      	ldrb	r3, [r3, #0]
 8000aac:	461a      	mov	r2, r3
 8000aae:	4b06      	ldr	r3, [pc, #24]	; (8000ac8 <HAL_IncTick+0x24>)
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	4413      	add	r3, r2
 8000ab4:	4a04      	ldr	r2, [pc, #16]	; (8000ac8 <HAL_IncTick+0x24>)
 8000ab6:	6013      	str	r3, [r2, #0]
}
 8000ab8:	bf00      	nop
 8000aba:	46bd      	mov	sp, r7
 8000abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop
 8000ac4:	20000008 	.word	0x20000008
 8000ac8:	20000574 	.word	0x20000574

08000acc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0
  return uwTick;
 8000ad0:	4b03      	ldr	r3, [pc, #12]	; (8000ae0 <HAL_GetTick+0x14>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
}
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000adc:	4770      	bx	lr
 8000ade:	bf00      	nop
 8000ae0:	20000574 	.word	0x20000574

08000ae4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b084      	sub	sp, #16
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000aec:	f7ff ffee 	bl	8000acc <HAL_GetTick>
 8000af0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000af6:	68fb      	ldr	r3, [r7, #12]
 8000af8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000afc:	d005      	beq.n	8000b0a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000afe:	4b0a      	ldr	r3, [pc, #40]	; (8000b28 <HAL_Delay+0x44>)
 8000b00:	781b      	ldrb	r3, [r3, #0]
 8000b02:	461a      	mov	r2, r3
 8000b04:	68fb      	ldr	r3, [r7, #12]
 8000b06:	4413      	add	r3, r2
 8000b08:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000b0a:	bf00      	nop
 8000b0c:	f7ff ffde 	bl	8000acc <HAL_GetTick>
 8000b10:	4602      	mov	r2, r0
 8000b12:	68bb      	ldr	r3, [r7, #8]
 8000b14:	1ad3      	subs	r3, r2, r3
 8000b16:	68fa      	ldr	r2, [r7, #12]
 8000b18:	429a      	cmp	r2, r3
 8000b1a:	d8f7      	bhi.n	8000b0c <HAL_Delay+0x28>
  {
  }
}
 8000b1c:	bf00      	nop
 8000b1e:	bf00      	nop
 8000b20:	3710      	adds	r7, #16
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	20000008 	.word	0x20000008

08000b2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	b085      	sub	sp, #20
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	f003 0307 	and.w	r3, r3, #7
 8000b3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b3c:	4b0c      	ldr	r3, [pc, #48]	; (8000b70 <__NVIC_SetPriorityGrouping+0x44>)
 8000b3e:	68db      	ldr	r3, [r3, #12]
 8000b40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b42:	68ba      	ldr	r2, [r7, #8]
 8000b44:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b48:	4013      	ands	r3, r2
 8000b4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b4c:	68fb      	ldr	r3, [r7, #12]
 8000b4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b50:	68bb      	ldr	r3, [r7, #8]
 8000b52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b54:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b5e:	4a04      	ldr	r2, [pc, #16]	; (8000b70 <__NVIC_SetPriorityGrouping+0x44>)
 8000b60:	68bb      	ldr	r3, [r7, #8]
 8000b62:	60d3      	str	r3, [r2, #12]
}
 8000b64:	bf00      	nop
 8000b66:	3714      	adds	r7, #20
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6e:	4770      	bx	lr
 8000b70:	e000ed00 	.word	0xe000ed00

08000b74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b78:	4b04      	ldr	r3, [pc, #16]	; (8000b8c <__NVIC_GetPriorityGrouping+0x18>)
 8000b7a:	68db      	ldr	r3, [r3, #12]
 8000b7c:	0a1b      	lsrs	r3, r3, #8
 8000b7e:	f003 0307 	and.w	r3, r3, #7
}
 8000b82:	4618      	mov	r0, r3
 8000b84:	46bd      	mov	sp, r7
 8000b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8a:	4770      	bx	lr
 8000b8c:	e000ed00 	.word	0xe000ed00

08000b90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b90:	b480      	push	{r7}
 8000b92:	b083      	sub	sp, #12
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	4603      	mov	r3, r0
 8000b98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	db0b      	blt.n	8000bba <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ba2:	79fb      	ldrb	r3, [r7, #7]
 8000ba4:	f003 021f 	and.w	r2, r3, #31
 8000ba8:	4907      	ldr	r1, [pc, #28]	; (8000bc8 <__NVIC_EnableIRQ+0x38>)
 8000baa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bae:	095b      	lsrs	r3, r3, #5
 8000bb0:	2001      	movs	r0, #1
 8000bb2:	fa00 f202 	lsl.w	r2, r0, r2
 8000bb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000bba:	bf00      	nop
 8000bbc:	370c      	adds	r7, #12
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop
 8000bc8:	e000e100 	.word	0xe000e100

08000bcc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	b083      	sub	sp, #12
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	6039      	str	r1, [r7, #0]
 8000bd6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	db0a      	blt.n	8000bf6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000be0:	683b      	ldr	r3, [r7, #0]
 8000be2:	b2da      	uxtb	r2, r3
 8000be4:	490c      	ldr	r1, [pc, #48]	; (8000c18 <__NVIC_SetPriority+0x4c>)
 8000be6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bea:	0112      	lsls	r2, r2, #4
 8000bec:	b2d2      	uxtb	r2, r2
 8000bee:	440b      	add	r3, r1
 8000bf0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bf4:	e00a      	b.n	8000c0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bf6:	683b      	ldr	r3, [r7, #0]
 8000bf8:	b2da      	uxtb	r2, r3
 8000bfa:	4908      	ldr	r1, [pc, #32]	; (8000c1c <__NVIC_SetPriority+0x50>)
 8000bfc:	79fb      	ldrb	r3, [r7, #7]
 8000bfe:	f003 030f 	and.w	r3, r3, #15
 8000c02:	3b04      	subs	r3, #4
 8000c04:	0112      	lsls	r2, r2, #4
 8000c06:	b2d2      	uxtb	r2, r2
 8000c08:	440b      	add	r3, r1
 8000c0a:	761a      	strb	r2, [r3, #24]
}
 8000c0c:	bf00      	nop
 8000c0e:	370c      	adds	r7, #12
 8000c10:	46bd      	mov	sp, r7
 8000c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c16:	4770      	bx	lr
 8000c18:	e000e100 	.word	0xe000e100
 8000c1c:	e000ed00 	.word	0xe000ed00

08000c20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c20:	b480      	push	{r7}
 8000c22:	b089      	sub	sp, #36	; 0x24
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	60f8      	str	r0, [r7, #12]
 8000c28:	60b9      	str	r1, [r7, #8]
 8000c2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	f003 0307 	and.w	r3, r3, #7
 8000c32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c34:	69fb      	ldr	r3, [r7, #28]
 8000c36:	f1c3 0307 	rsb	r3, r3, #7
 8000c3a:	2b04      	cmp	r3, #4
 8000c3c:	bf28      	it	cs
 8000c3e:	2304      	movcs	r3, #4
 8000c40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c42:	69fb      	ldr	r3, [r7, #28]
 8000c44:	3304      	adds	r3, #4
 8000c46:	2b06      	cmp	r3, #6
 8000c48:	d902      	bls.n	8000c50 <NVIC_EncodePriority+0x30>
 8000c4a:	69fb      	ldr	r3, [r7, #28]
 8000c4c:	3b03      	subs	r3, #3
 8000c4e:	e000      	b.n	8000c52 <NVIC_EncodePriority+0x32>
 8000c50:	2300      	movs	r3, #0
 8000c52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c54:	f04f 32ff 	mov.w	r2, #4294967295
 8000c58:	69bb      	ldr	r3, [r7, #24]
 8000c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c5e:	43da      	mvns	r2, r3
 8000c60:	68bb      	ldr	r3, [r7, #8]
 8000c62:	401a      	ands	r2, r3
 8000c64:	697b      	ldr	r3, [r7, #20]
 8000c66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c68:	f04f 31ff 	mov.w	r1, #4294967295
 8000c6c:	697b      	ldr	r3, [r7, #20]
 8000c6e:	fa01 f303 	lsl.w	r3, r1, r3
 8000c72:	43d9      	mvns	r1, r3
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c78:	4313      	orrs	r3, r2
         );
}
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	3724      	adds	r7, #36	; 0x24
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c84:	4770      	bx	lr
	...

08000c88 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b082      	sub	sp, #8
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	3b01      	subs	r3, #1
 8000c94:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c98:	d301      	bcc.n	8000c9e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c9a:	2301      	movs	r3, #1
 8000c9c:	e00f      	b.n	8000cbe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c9e:	4a0a      	ldr	r2, [pc, #40]	; (8000cc8 <SysTick_Config+0x40>)
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	3b01      	subs	r3, #1
 8000ca4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ca6:	210f      	movs	r1, #15
 8000ca8:	f04f 30ff 	mov.w	r0, #4294967295
 8000cac:	f7ff ff8e 	bl	8000bcc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cb0:	4b05      	ldr	r3, [pc, #20]	; (8000cc8 <SysTick_Config+0x40>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cb6:	4b04      	ldr	r3, [pc, #16]	; (8000cc8 <SysTick_Config+0x40>)
 8000cb8:	2207      	movs	r2, #7
 8000cba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cbc:	2300      	movs	r3, #0
}
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	3708      	adds	r7, #8
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	e000e010 	.word	0xe000e010

08000ccc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b082      	sub	sp, #8
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cd4:	6878      	ldr	r0, [r7, #4]
 8000cd6:	f7ff ff29 	bl	8000b2c <__NVIC_SetPriorityGrouping>
}
 8000cda:	bf00      	nop
 8000cdc:	3708      	adds	r7, #8
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}

08000ce2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ce2:	b580      	push	{r7, lr}
 8000ce4:	b086      	sub	sp, #24
 8000ce6:	af00      	add	r7, sp, #0
 8000ce8:	4603      	mov	r3, r0
 8000cea:	60b9      	str	r1, [r7, #8]
 8000cec:	607a      	str	r2, [r7, #4]
 8000cee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000cf4:	f7ff ff3e 	bl	8000b74 <__NVIC_GetPriorityGrouping>
 8000cf8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cfa:	687a      	ldr	r2, [r7, #4]
 8000cfc:	68b9      	ldr	r1, [r7, #8]
 8000cfe:	6978      	ldr	r0, [r7, #20]
 8000d00:	f7ff ff8e 	bl	8000c20 <NVIC_EncodePriority>
 8000d04:	4602      	mov	r2, r0
 8000d06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d0a:	4611      	mov	r1, r2
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	f7ff ff5d 	bl	8000bcc <__NVIC_SetPriority>
}
 8000d12:	bf00      	nop
 8000d14:	3718      	adds	r7, #24
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}

08000d1a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d1a:	b580      	push	{r7, lr}
 8000d1c:	b082      	sub	sp, #8
 8000d1e:	af00      	add	r7, sp, #0
 8000d20:	4603      	mov	r3, r0
 8000d22:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d28:	4618      	mov	r0, r3
 8000d2a:	f7ff ff31 	bl	8000b90 <__NVIC_EnableIRQ>
}
 8000d2e:	bf00      	nop
 8000d30:	3708      	adds	r7, #8
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}

08000d36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d36:	b580      	push	{r7, lr}
 8000d38:	b082      	sub	sp, #8
 8000d3a:	af00      	add	r7, sp, #0
 8000d3c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d3e:	6878      	ldr	r0, [r7, #4]
 8000d40:	f7ff ffa2 	bl	8000c88 <SysTick_Config>
 8000d44:	4603      	mov	r3, r0
}
 8000d46:	4618      	mov	r0, r3
 8000d48:	3708      	adds	r7, #8
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}
	...

08000d50 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d50:	b480      	push	{r7}
 8000d52:	b089      	sub	sp, #36	; 0x24
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
 8000d58:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d62:	2300      	movs	r3, #0
 8000d64:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d66:	2300      	movs	r3, #0
 8000d68:	61fb      	str	r3, [r7, #28]
 8000d6a:	e159      	b.n	8001020 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000d6c:	2201      	movs	r2, #1
 8000d6e:	69fb      	ldr	r3, [r7, #28]
 8000d70:	fa02 f303 	lsl.w	r3, r2, r3
 8000d74:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d76:	683b      	ldr	r3, [r7, #0]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	697a      	ldr	r2, [r7, #20]
 8000d7c:	4013      	ands	r3, r2
 8000d7e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000d80:	693a      	ldr	r2, [r7, #16]
 8000d82:	697b      	ldr	r3, [r7, #20]
 8000d84:	429a      	cmp	r2, r3
 8000d86:	f040 8148 	bne.w	800101a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d8a:	683b      	ldr	r3, [r7, #0]
 8000d8c:	685b      	ldr	r3, [r3, #4]
 8000d8e:	f003 0303 	and.w	r3, r3, #3
 8000d92:	2b01      	cmp	r3, #1
 8000d94:	d005      	beq.n	8000da2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	685b      	ldr	r3, [r3, #4]
 8000d9a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d9e:	2b02      	cmp	r3, #2
 8000da0:	d130      	bne.n	8000e04 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	689b      	ldr	r3, [r3, #8]
 8000da6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000da8:	69fb      	ldr	r3, [r7, #28]
 8000daa:	005b      	lsls	r3, r3, #1
 8000dac:	2203      	movs	r2, #3
 8000dae:	fa02 f303 	lsl.w	r3, r2, r3
 8000db2:	43db      	mvns	r3, r3
 8000db4:	69ba      	ldr	r2, [r7, #24]
 8000db6:	4013      	ands	r3, r2
 8000db8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	68da      	ldr	r2, [r3, #12]
 8000dbe:	69fb      	ldr	r3, [r7, #28]
 8000dc0:	005b      	lsls	r3, r3, #1
 8000dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc6:	69ba      	ldr	r2, [r7, #24]
 8000dc8:	4313      	orrs	r3, r2
 8000dca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	69ba      	ldr	r2, [r7, #24]
 8000dd0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	685b      	ldr	r3, [r3, #4]
 8000dd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000dd8:	2201      	movs	r2, #1
 8000dda:	69fb      	ldr	r3, [r7, #28]
 8000ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8000de0:	43db      	mvns	r3, r3
 8000de2:	69ba      	ldr	r2, [r7, #24]
 8000de4:	4013      	ands	r3, r2
 8000de6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000de8:	683b      	ldr	r3, [r7, #0]
 8000dea:	685b      	ldr	r3, [r3, #4]
 8000dec:	091b      	lsrs	r3, r3, #4
 8000dee:	f003 0201 	and.w	r2, r3, #1
 8000df2:	69fb      	ldr	r3, [r7, #28]
 8000df4:	fa02 f303 	lsl.w	r3, r2, r3
 8000df8:	69ba      	ldr	r2, [r7, #24]
 8000dfa:	4313      	orrs	r3, r2
 8000dfc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	69ba      	ldr	r2, [r7, #24]
 8000e02:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	685b      	ldr	r3, [r3, #4]
 8000e08:	f003 0303 	and.w	r3, r3, #3
 8000e0c:	2b03      	cmp	r3, #3
 8000e0e:	d017      	beq.n	8000e40 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	68db      	ldr	r3, [r3, #12]
 8000e14:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e16:	69fb      	ldr	r3, [r7, #28]
 8000e18:	005b      	lsls	r3, r3, #1
 8000e1a:	2203      	movs	r2, #3
 8000e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e20:	43db      	mvns	r3, r3
 8000e22:	69ba      	ldr	r2, [r7, #24]
 8000e24:	4013      	ands	r3, r2
 8000e26:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	689a      	ldr	r2, [r3, #8]
 8000e2c:	69fb      	ldr	r3, [r7, #28]
 8000e2e:	005b      	lsls	r3, r3, #1
 8000e30:	fa02 f303 	lsl.w	r3, r2, r3
 8000e34:	69ba      	ldr	r2, [r7, #24]
 8000e36:	4313      	orrs	r3, r2
 8000e38:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	69ba      	ldr	r2, [r7, #24]
 8000e3e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	685b      	ldr	r3, [r3, #4]
 8000e44:	f003 0303 	and.w	r3, r3, #3
 8000e48:	2b02      	cmp	r3, #2
 8000e4a:	d123      	bne.n	8000e94 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e4c:	69fb      	ldr	r3, [r7, #28]
 8000e4e:	08da      	lsrs	r2, r3, #3
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	3208      	adds	r2, #8
 8000e54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e58:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e5a:	69fb      	ldr	r3, [r7, #28]
 8000e5c:	f003 0307 	and.w	r3, r3, #7
 8000e60:	009b      	lsls	r3, r3, #2
 8000e62:	220f      	movs	r2, #15
 8000e64:	fa02 f303 	lsl.w	r3, r2, r3
 8000e68:	43db      	mvns	r3, r3
 8000e6a:	69ba      	ldr	r2, [r7, #24]
 8000e6c:	4013      	ands	r3, r2
 8000e6e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	691a      	ldr	r2, [r3, #16]
 8000e74:	69fb      	ldr	r3, [r7, #28]
 8000e76:	f003 0307 	and.w	r3, r3, #7
 8000e7a:	009b      	lsls	r3, r3, #2
 8000e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e80:	69ba      	ldr	r2, [r7, #24]
 8000e82:	4313      	orrs	r3, r2
 8000e84:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000e86:	69fb      	ldr	r3, [r7, #28]
 8000e88:	08da      	lsrs	r2, r3, #3
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	3208      	adds	r2, #8
 8000e8e:	69b9      	ldr	r1, [r7, #24]
 8000e90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e9a:	69fb      	ldr	r3, [r7, #28]
 8000e9c:	005b      	lsls	r3, r3, #1
 8000e9e:	2203      	movs	r2, #3
 8000ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea4:	43db      	mvns	r3, r3
 8000ea6:	69ba      	ldr	r2, [r7, #24]
 8000ea8:	4013      	ands	r3, r2
 8000eaa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000eac:	683b      	ldr	r3, [r7, #0]
 8000eae:	685b      	ldr	r3, [r3, #4]
 8000eb0:	f003 0203 	and.w	r2, r3, #3
 8000eb4:	69fb      	ldr	r3, [r7, #28]
 8000eb6:	005b      	lsls	r3, r3, #1
 8000eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ebc:	69ba      	ldr	r2, [r7, #24]
 8000ebe:	4313      	orrs	r3, r2
 8000ec0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	69ba      	ldr	r2, [r7, #24]
 8000ec6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	685b      	ldr	r3, [r3, #4]
 8000ecc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	f000 80a2 	beq.w	800101a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	60fb      	str	r3, [r7, #12]
 8000eda:	4b57      	ldr	r3, [pc, #348]	; (8001038 <HAL_GPIO_Init+0x2e8>)
 8000edc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ede:	4a56      	ldr	r2, [pc, #344]	; (8001038 <HAL_GPIO_Init+0x2e8>)
 8000ee0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ee4:	6453      	str	r3, [r2, #68]	; 0x44
 8000ee6:	4b54      	ldr	r3, [pc, #336]	; (8001038 <HAL_GPIO_Init+0x2e8>)
 8000ee8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000eee:	60fb      	str	r3, [r7, #12]
 8000ef0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000ef2:	4a52      	ldr	r2, [pc, #328]	; (800103c <HAL_GPIO_Init+0x2ec>)
 8000ef4:	69fb      	ldr	r3, [r7, #28]
 8000ef6:	089b      	lsrs	r3, r3, #2
 8000ef8:	3302      	adds	r3, #2
 8000efa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000efe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f00:	69fb      	ldr	r3, [r7, #28]
 8000f02:	f003 0303 	and.w	r3, r3, #3
 8000f06:	009b      	lsls	r3, r3, #2
 8000f08:	220f      	movs	r2, #15
 8000f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0e:	43db      	mvns	r3, r3
 8000f10:	69ba      	ldr	r2, [r7, #24]
 8000f12:	4013      	ands	r3, r2
 8000f14:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	4a49      	ldr	r2, [pc, #292]	; (8001040 <HAL_GPIO_Init+0x2f0>)
 8000f1a:	4293      	cmp	r3, r2
 8000f1c:	d019      	beq.n	8000f52 <HAL_GPIO_Init+0x202>
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	4a48      	ldr	r2, [pc, #288]	; (8001044 <HAL_GPIO_Init+0x2f4>)
 8000f22:	4293      	cmp	r3, r2
 8000f24:	d013      	beq.n	8000f4e <HAL_GPIO_Init+0x1fe>
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	4a47      	ldr	r2, [pc, #284]	; (8001048 <HAL_GPIO_Init+0x2f8>)
 8000f2a:	4293      	cmp	r3, r2
 8000f2c:	d00d      	beq.n	8000f4a <HAL_GPIO_Init+0x1fa>
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	4a46      	ldr	r2, [pc, #280]	; (800104c <HAL_GPIO_Init+0x2fc>)
 8000f32:	4293      	cmp	r3, r2
 8000f34:	d007      	beq.n	8000f46 <HAL_GPIO_Init+0x1f6>
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	4a45      	ldr	r2, [pc, #276]	; (8001050 <HAL_GPIO_Init+0x300>)
 8000f3a:	4293      	cmp	r3, r2
 8000f3c:	d101      	bne.n	8000f42 <HAL_GPIO_Init+0x1f2>
 8000f3e:	2304      	movs	r3, #4
 8000f40:	e008      	b.n	8000f54 <HAL_GPIO_Init+0x204>
 8000f42:	2307      	movs	r3, #7
 8000f44:	e006      	b.n	8000f54 <HAL_GPIO_Init+0x204>
 8000f46:	2303      	movs	r3, #3
 8000f48:	e004      	b.n	8000f54 <HAL_GPIO_Init+0x204>
 8000f4a:	2302      	movs	r3, #2
 8000f4c:	e002      	b.n	8000f54 <HAL_GPIO_Init+0x204>
 8000f4e:	2301      	movs	r3, #1
 8000f50:	e000      	b.n	8000f54 <HAL_GPIO_Init+0x204>
 8000f52:	2300      	movs	r3, #0
 8000f54:	69fa      	ldr	r2, [r7, #28]
 8000f56:	f002 0203 	and.w	r2, r2, #3
 8000f5a:	0092      	lsls	r2, r2, #2
 8000f5c:	4093      	lsls	r3, r2
 8000f5e:	69ba      	ldr	r2, [r7, #24]
 8000f60:	4313      	orrs	r3, r2
 8000f62:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f64:	4935      	ldr	r1, [pc, #212]	; (800103c <HAL_GPIO_Init+0x2ec>)
 8000f66:	69fb      	ldr	r3, [r7, #28]
 8000f68:	089b      	lsrs	r3, r3, #2
 8000f6a:	3302      	adds	r3, #2
 8000f6c:	69ba      	ldr	r2, [r7, #24]
 8000f6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f72:	4b38      	ldr	r3, [pc, #224]	; (8001054 <HAL_GPIO_Init+0x304>)
 8000f74:	689b      	ldr	r3, [r3, #8]
 8000f76:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f78:	693b      	ldr	r3, [r7, #16]
 8000f7a:	43db      	mvns	r3, r3
 8000f7c:	69ba      	ldr	r2, [r7, #24]
 8000f7e:	4013      	ands	r3, r2
 8000f80:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	685b      	ldr	r3, [r3, #4]
 8000f86:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d003      	beq.n	8000f96 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000f8e:	69ba      	ldr	r2, [r7, #24]
 8000f90:	693b      	ldr	r3, [r7, #16]
 8000f92:	4313      	orrs	r3, r2
 8000f94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000f96:	4a2f      	ldr	r2, [pc, #188]	; (8001054 <HAL_GPIO_Init+0x304>)
 8000f98:	69bb      	ldr	r3, [r7, #24]
 8000f9a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f9c:	4b2d      	ldr	r3, [pc, #180]	; (8001054 <HAL_GPIO_Init+0x304>)
 8000f9e:	68db      	ldr	r3, [r3, #12]
 8000fa0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fa2:	693b      	ldr	r3, [r7, #16]
 8000fa4:	43db      	mvns	r3, r3
 8000fa6:	69ba      	ldr	r2, [r7, #24]
 8000fa8:	4013      	ands	r3, r2
 8000faa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	685b      	ldr	r3, [r3, #4]
 8000fb0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d003      	beq.n	8000fc0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000fb8:	69ba      	ldr	r2, [r7, #24]
 8000fba:	693b      	ldr	r3, [r7, #16]
 8000fbc:	4313      	orrs	r3, r2
 8000fbe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000fc0:	4a24      	ldr	r2, [pc, #144]	; (8001054 <HAL_GPIO_Init+0x304>)
 8000fc2:	69bb      	ldr	r3, [r7, #24]
 8000fc4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000fc6:	4b23      	ldr	r3, [pc, #140]	; (8001054 <HAL_GPIO_Init+0x304>)
 8000fc8:	685b      	ldr	r3, [r3, #4]
 8000fca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fcc:	693b      	ldr	r3, [r7, #16]
 8000fce:	43db      	mvns	r3, r3
 8000fd0:	69ba      	ldr	r2, [r7, #24]
 8000fd2:	4013      	ands	r3, r2
 8000fd4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	685b      	ldr	r3, [r3, #4]
 8000fda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d003      	beq.n	8000fea <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000fe2:	69ba      	ldr	r2, [r7, #24]
 8000fe4:	693b      	ldr	r3, [r7, #16]
 8000fe6:	4313      	orrs	r3, r2
 8000fe8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000fea:	4a1a      	ldr	r2, [pc, #104]	; (8001054 <HAL_GPIO_Init+0x304>)
 8000fec:	69bb      	ldr	r3, [r7, #24]
 8000fee:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000ff0:	4b18      	ldr	r3, [pc, #96]	; (8001054 <HAL_GPIO_Init+0x304>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ff6:	693b      	ldr	r3, [r7, #16]
 8000ff8:	43db      	mvns	r3, r3
 8000ffa:	69ba      	ldr	r2, [r7, #24]
 8000ffc:	4013      	ands	r3, r2
 8000ffe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	685b      	ldr	r3, [r3, #4]
 8001004:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001008:	2b00      	cmp	r3, #0
 800100a:	d003      	beq.n	8001014 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800100c:	69ba      	ldr	r2, [r7, #24]
 800100e:	693b      	ldr	r3, [r7, #16]
 8001010:	4313      	orrs	r3, r2
 8001012:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001014:	4a0f      	ldr	r2, [pc, #60]	; (8001054 <HAL_GPIO_Init+0x304>)
 8001016:	69bb      	ldr	r3, [r7, #24]
 8001018:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800101a:	69fb      	ldr	r3, [r7, #28]
 800101c:	3301      	adds	r3, #1
 800101e:	61fb      	str	r3, [r7, #28]
 8001020:	69fb      	ldr	r3, [r7, #28]
 8001022:	2b0f      	cmp	r3, #15
 8001024:	f67f aea2 	bls.w	8000d6c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001028:	bf00      	nop
 800102a:	bf00      	nop
 800102c:	3724      	adds	r7, #36	; 0x24
 800102e:	46bd      	mov	sp, r7
 8001030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop
 8001038:	40023800 	.word	0x40023800
 800103c:	40013800 	.word	0x40013800
 8001040:	40020000 	.word	0x40020000
 8001044:	40020400 	.word	0x40020400
 8001048:	40020800 	.word	0x40020800
 800104c:	40020c00 	.word	0x40020c00
 8001050:	40021000 	.word	0x40021000
 8001054:	40013c00 	.word	0x40013c00

08001058 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b086      	sub	sp, #24
 800105c:	af02      	add	r7, sp, #8
 800105e:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	2b00      	cmp	r3, #0
 8001064:	d101      	bne.n	800106a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001066:	2301      	movs	r3, #1
 8001068:	e101      	b.n	800126e <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 8001076:	b2db      	uxtb	r3, r3
 8001078:	2b00      	cmp	r3, #0
 800107a:	d106      	bne.n	800108a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	2200      	movs	r2, #0
 8001080:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001084:	6878      	ldr	r0, [r7, #4]
 8001086:	f005 fb89 	bl	800679c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	2203      	movs	r2, #3
 800108e:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8001092:	68bb      	ldr	r3, [r7, #8]
 8001094:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001098:	d102      	bne.n	80010a0 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	2200      	movs	r2, #0
 800109e:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	4618      	mov	r0, r3
 80010a6:	f001 ff6e 	bl	8002f86 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	6818      	ldr	r0, [r3, #0]
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	7c1a      	ldrb	r2, [r3, #16]
 80010b2:	f88d 2000 	strb.w	r2, [sp]
 80010b6:	3304      	adds	r3, #4
 80010b8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80010ba:	f001 fe4d 	bl	8002d58 <USB_CoreInit>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d005      	beq.n	80010d0 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	2202      	movs	r2, #2
 80010c8:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 80010cc:	2301      	movs	r3, #1
 80010ce:	e0ce      	b.n	800126e <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	2100      	movs	r1, #0
 80010d6:	4618      	mov	r0, r3
 80010d8:	f001 ff66 	bl	8002fa8 <USB_SetCurrentMode>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d005      	beq.n	80010ee <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	2202      	movs	r2, #2
 80010e6:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 80010ea:	2301      	movs	r3, #1
 80010ec:	e0bf      	b.n	800126e <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80010ee:	2300      	movs	r3, #0
 80010f0:	73fb      	strb	r3, [r7, #15]
 80010f2:	e04a      	b.n	800118a <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80010f4:	7bfa      	ldrb	r2, [r7, #15]
 80010f6:	6879      	ldr	r1, [r7, #4]
 80010f8:	4613      	mov	r3, r2
 80010fa:	00db      	lsls	r3, r3, #3
 80010fc:	4413      	add	r3, r2
 80010fe:	009b      	lsls	r3, r3, #2
 8001100:	440b      	add	r3, r1
 8001102:	3315      	adds	r3, #21
 8001104:	2201      	movs	r2, #1
 8001106:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001108:	7bfa      	ldrb	r2, [r7, #15]
 800110a:	6879      	ldr	r1, [r7, #4]
 800110c:	4613      	mov	r3, r2
 800110e:	00db      	lsls	r3, r3, #3
 8001110:	4413      	add	r3, r2
 8001112:	009b      	lsls	r3, r3, #2
 8001114:	440b      	add	r3, r1
 8001116:	3314      	adds	r3, #20
 8001118:	7bfa      	ldrb	r2, [r7, #15]
 800111a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800111c:	7bfa      	ldrb	r2, [r7, #15]
 800111e:	7bfb      	ldrb	r3, [r7, #15]
 8001120:	b298      	uxth	r0, r3
 8001122:	6879      	ldr	r1, [r7, #4]
 8001124:	4613      	mov	r3, r2
 8001126:	00db      	lsls	r3, r3, #3
 8001128:	4413      	add	r3, r2
 800112a:	009b      	lsls	r3, r3, #2
 800112c:	440b      	add	r3, r1
 800112e:	332e      	adds	r3, #46	; 0x2e
 8001130:	4602      	mov	r2, r0
 8001132:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001134:	7bfa      	ldrb	r2, [r7, #15]
 8001136:	6879      	ldr	r1, [r7, #4]
 8001138:	4613      	mov	r3, r2
 800113a:	00db      	lsls	r3, r3, #3
 800113c:	4413      	add	r3, r2
 800113e:	009b      	lsls	r3, r3, #2
 8001140:	440b      	add	r3, r1
 8001142:	3318      	adds	r3, #24
 8001144:	2200      	movs	r2, #0
 8001146:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001148:	7bfa      	ldrb	r2, [r7, #15]
 800114a:	6879      	ldr	r1, [r7, #4]
 800114c:	4613      	mov	r3, r2
 800114e:	00db      	lsls	r3, r3, #3
 8001150:	4413      	add	r3, r2
 8001152:	009b      	lsls	r3, r3, #2
 8001154:	440b      	add	r3, r1
 8001156:	331c      	adds	r3, #28
 8001158:	2200      	movs	r2, #0
 800115a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800115c:	7bfa      	ldrb	r2, [r7, #15]
 800115e:	6879      	ldr	r1, [r7, #4]
 8001160:	4613      	mov	r3, r2
 8001162:	00db      	lsls	r3, r3, #3
 8001164:	4413      	add	r3, r2
 8001166:	009b      	lsls	r3, r3, #2
 8001168:	440b      	add	r3, r1
 800116a:	3320      	adds	r3, #32
 800116c:	2200      	movs	r2, #0
 800116e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001170:	7bfa      	ldrb	r2, [r7, #15]
 8001172:	6879      	ldr	r1, [r7, #4]
 8001174:	4613      	mov	r3, r2
 8001176:	00db      	lsls	r3, r3, #3
 8001178:	4413      	add	r3, r2
 800117a:	009b      	lsls	r3, r3, #2
 800117c:	440b      	add	r3, r1
 800117e:	3324      	adds	r3, #36	; 0x24
 8001180:	2200      	movs	r2, #0
 8001182:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001184:	7bfb      	ldrb	r3, [r7, #15]
 8001186:	3301      	adds	r3, #1
 8001188:	73fb      	strb	r3, [r7, #15]
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	791b      	ldrb	r3, [r3, #4]
 800118e:	7bfa      	ldrb	r2, [r7, #15]
 8001190:	429a      	cmp	r2, r3
 8001192:	d3af      	bcc.n	80010f4 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001194:	2300      	movs	r3, #0
 8001196:	73fb      	strb	r3, [r7, #15]
 8001198:	e044      	b.n	8001224 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800119a:	7bfa      	ldrb	r2, [r7, #15]
 800119c:	6879      	ldr	r1, [r7, #4]
 800119e:	4613      	mov	r3, r2
 80011a0:	00db      	lsls	r3, r3, #3
 80011a2:	4413      	add	r3, r2
 80011a4:	009b      	lsls	r3, r3, #2
 80011a6:	440b      	add	r3, r1
 80011a8:	f203 2355 	addw	r3, r3, #597	; 0x255
 80011ac:	2200      	movs	r2, #0
 80011ae:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80011b0:	7bfa      	ldrb	r2, [r7, #15]
 80011b2:	6879      	ldr	r1, [r7, #4]
 80011b4:	4613      	mov	r3, r2
 80011b6:	00db      	lsls	r3, r3, #3
 80011b8:	4413      	add	r3, r2
 80011ba:	009b      	lsls	r3, r3, #2
 80011bc:	440b      	add	r3, r1
 80011be:	f503 7315 	add.w	r3, r3, #596	; 0x254
 80011c2:	7bfa      	ldrb	r2, [r7, #15]
 80011c4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80011c6:	7bfa      	ldrb	r2, [r7, #15]
 80011c8:	6879      	ldr	r1, [r7, #4]
 80011ca:	4613      	mov	r3, r2
 80011cc:	00db      	lsls	r3, r3, #3
 80011ce:	4413      	add	r3, r2
 80011d0:	009b      	lsls	r3, r3, #2
 80011d2:	440b      	add	r3, r1
 80011d4:	f503 7316 	add.w	r3, r3, #600	; 0x258
 80011d8:	2200      	movs	r2, #0
 80011da:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80011dc:	7bfa      	ldrb	r2, [r7, #15]
 80011de:	6879      	ldr	r1, [r7, #4]
 80011e0:	4613      	mov	r3, r2
 80011e2:	00db      	lsls	r3, r3, #3
 80011e4:	4413      	add	r3, r2
 80011e6:	009b      	lsls	r3, r3, #2
 80011e8:	440b      	add	r3, r1
 80011ea:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 80011ee:	2200      	movs	r2, #0
 80011f0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80011f2:	7bfa      	ldrb	r2, [r7, #15]
 80011f4:	6879      	ldr	r1, [r7, #4]
 80011f6:	4613      	mov	r3, r2
 80011f8:	00db      	lsls	r3, r3, #3
 80011fa:	4413      	add	r3, r2
 80011fc:	009b      	lsls	r3, r3, #2
 80011fe:	440b      	add	r3, r1
 8001200:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8001204:	2200      	movs	r2, #0
 8001206:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001208:	7bfa      	ldrb	r2, [r7, #15]
 800120a:	6879      	ldr	r1, [r7, #4]
 800120c:	4613      	mov	r3, r2
 800120e:	00db      	lsls	r3, r3, #3
 8001210:	4413      	add	r3, r2
 8001212:	009b      	lsls	r3, r3, #2
 8001214:	440b      	add	r3, r1
 8001216:	f503 7319 	add.w	r3, r3, #612	; 0x264
 800121a:	2200      	movs	r2, #0
 800121c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800121e:	7bfb      	ldrb	r3, [r7, #15]
 8001220:	3301      	adds	r3, #1
 8001222:	73fb      	strb	r3, [r7, #15]
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	791b      	ldrb	r3, [r3, #4]
 8001228:	7bfa      	ldrb	r2, [r7, #15]
 800122a:	429a      	cmp	r2, r3
 800122c:	d3b5      	bcc.n	800119a <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	6818      	ldr	r0, [r3, #0]
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	7c1a      	ldrb	r2, [r3, #16]
 8001236:	f88d 2000 	strb.w	r2, [sp]
 800123a:	3304      	adds	r3, #4
 800123c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800123e:	f001 feff 	bl	8003040 <USB_DevInit>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d005      	beq.n	8001254 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	2202      	movs	r2, #2
 800124c:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8001250:	2301      	movs	r3, #1
 8001252:	e00c      	b.n	800126e <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	2200      	movs	r2, #0
 8001258:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	2201      	movs	r2, #1
 800125e:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	4618      	mov	r0, r3
 8001268:	f002 ff43 	bl	80040f2 <USB_DevDisconnect>

  return HAL_OK;
 800126c:	2300      	movs	r3, #0
}
 800126e:	4618      	mov	r0, r3
 8001270:	3710      	adds	r7, #16
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}

08001276 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001276:	b580      	push	{r7, lr}
 8001278:	b084      	sub	sp, #16
 800127a:	af00      	add	r7, sp, #0
 800127c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 800128a:	2b01      	cmp	r3, #1
 800128c:	d101      	bne.n	8001292 <HAL_PCD_Start+0x1c>
 800128e:	2302      	movs	r3, #2
 8001290:	e022      	b.n	80012d8 <HAL_PCD_Start+0x62>
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	2201      	movs	r2, #1
 8001296:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	68db      	ldr	r3, [r3, #12]
 800129e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d009      	beq.n	80012ba <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80012aa:	2b01      	cmp	r3, #1
 80012ac:	d105      	bne.n	80012ba <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012b2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	4618      	mov	r0, r3
 80012c0:	f001 fe50 	bl	8002f64 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	4618      	mov	r0, r3
 80012ca:	f002 fef1 	bl	80040b0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	2200      	movs	r2, #0
 80012d2:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 80012d6:	2300      	movs	r3, #0
}
 80012d8:	4618      	mov	r0, r3
 80012da:	3710      	adds	r7, #16
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}

080012e0 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80012e0:	b590      	push	{r4, r7, lr}
 80012e2:	b08d      	sub	sp, #52	; 0x34
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80012ee:	6a3b      	ldr	r3, [r7, #32]
 80012f0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	4618      	mov	r0, r3
 80012f8:	f002 ffaf 	bl	800425a <USB_GetMode>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b00      	cmp	r3, #0
 8001300:	f040 848c 	bne.w	8001c1c <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4618      	mov	r0, r3
 800130a:	f002 ff13 	bl	8004134 <USB_ReadInterrupts>
 800130e:	4603      	mov	r3, r0
 8001310:	2b00      	cmp	r3, #0
 8001312:	f000 8482 	beq.w	8001c1a <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001316:	69fb      	ldr	r3, [r7, #28]
 8001318:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800131c:	689b      	ldr	r3, [r3, #8]
 800131e:	0a1b      	lsrs	r3, r3, #8
 8001320:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	f8c3 24d4 	str.w	r2, [r3, #1236]	; 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	4618      	mov	r0, r3
 8001330:	f002 ff00 	bl	8004134 <USB_ReadInterrupts>
 8001334:	4603      	mov	r3, r0
 8001336:	f003 0302 	and.w	r3, r3, #2
 800133a:	2b02      	cmp	r3, #2
 800133c:	d107      	bne.n	800134e <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	695a      	ldr	r2, [r3, #20]
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f002 0202 	and.w	r2, r2, #2
 800134c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	4618      	mov	r0, r3
 8001354:	f002 feee 	bl	8004134 <USB_ReadInterrupts>
 8001358:	4603      	mov	r3, r0
 800135a:	f003 0310 	and.w	r3, r3, #16
 800135e:	2b10      	cmp	r3, #16
 8001360:	d161      	bne.n	8001426 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	699a      	ldr	r2, [r3, #24]
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f022 0210 	bic.w	r2, r2, #16
 8001370:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001372:	6a3b      	ldr	r3, [r7, #32]
 8001374:	6a1b      	ldr	r3, [r3, #32]
 8001376:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001378:	69bb      	ldr	r3, [r7, #24]
 800137a:	f003 020f 	and.w	r2, r3, #15
 800137e:	4613      	mov	r3, r2
 8001380:	00db      	lsls	r3, r3, #3
 8001382:	4413      	add	r3, r2
 8001384:	009b      	lsls	r3, r3, #2
 8001386:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800138a:	687a      	ldr	r2, [r7, #4]
 800138c:	4413      	add	r3, r2
 800138e:	3304      	adds	r3, #4
 8001390:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001392:	69bb      	ldr	r3, [r7, #24]
 8001394:	0c5b      	lsrs	r3, r3, #17
 8001396:	f003 030f 	and.w	r3, r3, #15
 800139a:	2b02      	cmp	r3, #2
 800139c:	d124      	bne.n	80013e8 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800139e:	69ba      	ldr	r2, [r7, #24]
 80013a0:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80013a4:	4013      	ands	r3, r2
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d035      	beq.n	8001416 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80013aa:	697b      	ldr	r3, [r7, #20]
 80013ac:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80013ae:	69bb      	ldr	r3, [r7, #24]
 80013b0:	091b      	lsrs	r3, r3, #4
 80013b2:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80013b4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80013b8:	b29b      	uxth	r3, r3
 80013ba:	461a      	mov	r2, r3
 80013bc:	6a38      	ldr	r0, [r7, #32]
 80013be:	f002 fd25 	bl	8003e0c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80013c2:	697b      	ldr	r3, [r7, #20]
 80013c4:	68da      	ldr	r2, [r3, #12]
 80013c6:	69bb      	ldr	r3, [r7, #24]
 80013c8:	091b      	lsrs	r3, r3, #4
 80013ca:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80013ce:	441a      	add	r2, r3
 80013d0:	697b      	ldr	r3, [r7, #20]
 80013d2:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80013d4:	697b      	ldr	r3, [r7, #20]
 80013d6:	695a      	ldr	r2, [r3, #20]
 80013d8:	69bb      	ldr	r3, [r7, #24]
 80013da:	091b      	lsrs	r3, r3, #4
 80013dc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80013e0:	441a      	add	r2, r3
 80013e2:	697b      	ldr	r3, [r7, #20]
 80013e4:	615a      	str	r2, [r3, #20]
 80013e6:	e016      	b.n	8001416 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80013e8:	69bb      	ldr	r3, [r7, #24]
 80013ea:	0c5b      	lsrs	r3, r3, #17
 80013ec:	f003 030f 	and.w	r3, r3, #15
 80013f0:	2b06      	cmp	r3, #6
 80013f2:	d110      	bne.n	8001416 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 80013fa:	2208      	movs	r2, #8
 80013fc:	4619      	mov	r1, r3
 80013fe:	6a38      	ldr	r0, [r7, #32]
 8001400:	f002 fd04 	bl	8003e0c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001404:	697b      	ldr	r3, [r7, #20]
 8001406:	695a      	ldr	r2, [r3, #20]
 8001408:	69bb      	ldr	r3, [r7, #24]
 800140a:	091b      	lsrs	r3, r3, #4
 800140c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001410:	441a      	add	r2, r3
 8001412:	697b      	ldr	r3, [r7, #20]
 8001414:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	699a      	ldr	r2, [r3, #24]
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f042 0210 	orr.w	r2, r2, #16
 8001424:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	4618      	mov	r0, r3
 800142c:	f002 fe82 	bl	8004134 <USB_ReadInterrupts>
 8001430:	4603      	mov	r3, r0
 8001432:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001436:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800143a:	f040 80a7 	bne.w	800158c <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800143e:	2300      	movs	r3, #0
 8001440:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	4618      	mov	r0, r3
 8001448:	f002 fe87 	bl	800415a <USB_ReadDevAllOutEpInterrupt>
 800144c:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800144e:	e099      	b.n	8001584 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001450:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001452:	f003 0301 	and.w	r3, r3, #1
 8001456:	2b00      	cmp	r3, #0
 8001458:	f000 808e 	beq.w	8001578 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001462:	b2d2      	uxtb	r2, r2
 8001464:	4611      	mov	r1, r2
 8001466:	4618      	mov	r0, r3
 8001468:	f002 feab 	bl	80041c2 <USB_ReadDevOutEPInterrupt>
 800146c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800146e:	693b      	ldr	r3, [r7, #16]
 8001470:	f003 0301 	and.w	r3, r3, #1
 8001474:	2b00      	cmp	r3, #0
 8001476:	d00c      	beq.n	8001492 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800147a:	015a      	lsls	r2, r3, #5
 800147c:	69fb      	ldr	r3, [r7, #28]
 800147e:	4413      	add	r3, r2
 8001480:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001484:	461a      	mov	r2, r3
 8001486:	2301      	movs	r3, #1
 8001488:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800148a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800148c:	6878      	ldr	r0, [r7, #4]
 800148e:	f000 fea1 	bl	80021d4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001492:	693b      	ldr	r3, [r7, #16]
 8001494:	f003 0308 	and.w	r3, r3, #8
 8001498:	2b00      	cmp	r3, #0
 800149a:	d00c      	beq.n	80014b6 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800149c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800149e:	015a      	lsls	r2, r3, #5
 80014a0:	69fb      	ldr	r3, [r7, #28]
 80014a2:	4413      	add	r3, r2
 80014a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80014a8:	461a      	mov	r2, r3
 80014aa:	2308      	movs	r3, #8
 80014ac:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80014ae:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80014b0:	6878      	ldr	r0, [r7, #4]
 80014b2:	f000 ff77 	bl	80023a4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80014b6:	693b      	ldr	r3, [r7, #16]
 80014b8:	f003 0310 	and.w	r3, r3, #16
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d008      	beq.n	80014d2 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80014c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014c2:	015a      	lsls	r2, r3, #5
 80014c4:	69fb      	ldr	r3, [r7, #28]
 80014c6:	4413      	add	r3, r2
 80014c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80014cc:	461a      	mov	r2, r3
 80014ce:	2310      	movs	r3, #16
 80014d0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80014d2:	693b      	ldr	r3, [r7, #16]
 80014d4:	f003 0302 	and.w	r3, r3, #2
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d030      	beq.n	800153e <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80014dc:	6a3b      	ldr	r3, [r7, #32]
 80014de:	695b      	ldr	r3, [r3, #20]
 80014e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014e4:	2b80      	cmp	r3, #128	; 0x80
 80014e6:	d109      	bne.n	80014fc <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80014e8:	69fb      	ldr	r3, [r7, #28]
 80014ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	69fa      	ldr	r2, [r7, #28]
 80014f2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80014f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80014fa:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80014fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014fe:	4613      	mov	r3, r2
 8001500:	00db      	lsls	r3, r3, #3
 8001502:	4413      	add	r3, r2
 8001504:	009b      	lsls	r3, r3, #2
 8001506:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800150a:	687a      	ldr	r2, [r7, #4]
 800150c:	4413      	add	r3, r2
 800150e:	3304      	adds	r3, #4
 8001510:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001512:	697b      	ldr	r3, [r7, #20]
 8001514:	78db      	ldrb	r3, [r3, #3]
 8001516:	2b01      	cmp	r3, #1
 8001518:	d108      	bne.n	800152c <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800151a:	697b      	ldr	r3, [r7, #20]
 800151c:	2200      	movs	r2, #0
 800151e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001522:	b2db      	uxtb	r3, r3
 8001524:	4619      	mov	r1, r3
 8001526:	6878      	ldr	r0, [r7, #4]
 8001528:	f005 fa34 	bl	8006994 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800152c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800152e:	015a      	lsls	r2, r3, #5
 8001530:	69fb      	ldr	r3, [r7, #28]
 8001532:	4413      	add	r3, r2
 8001534:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001538:	461a      	mov	r2, r3
 800153a:	2302      	movs	r3, #2
 800153c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800153e:	693b      	ldr	r3, [r7, #16]
 8001540:	f003 0320 	and.w	r3, r3, #32
 8001544:	2b00      	cmp	r3, #0
 8001546:	d008      	beq.n	800155a <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800154a:	015a      	lsls	r2, r3, #5
 800154c:	69fb      	ldr	r3, [r7, #28]
 800154e:	4413      	add	r3, r2
 8001550:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001554:	461a      	mov	r2, r3
 8001556:	2320      	movs	r3, #32
 8001558:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800155a:	693b      	ldr	r3, [r7, #16]
 800155c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001560:	2b00      	cmp	r3, #0
 8001562:	d009      	beq.n	8001578 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001566:	015a      	lsls	r2, r3, #5
 8001568:	69fb      	ldr	r3, [r7, #28]
 800156a:	4413      	add	r3, r2
 800156c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001570:	461a      	mov	r2, r3
 8001572:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001576:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800157a:	3301      	adds	r3, #1
 800157c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800157e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001580:	085b      	lsrs	r3, r3, #1
 8001582:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001584:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001586:	2b00      	cmp	r3, #0
 8001588:	f47f af62 	bne.w	8001450 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4618      	mov	r0, r3
 8001592:	f002 fdcf 	bl	8004134 <USB_ReadInterrupts>
 8001596:	4603      	mov	r3, r0
 8001598:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800159c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80015a0:	f040 80db 	bne.w	800175a <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	4618      	mov	r0, r3
 80015aa:	f002 fdf0 	bl	800418e <USB_ReadDevAllInEpInterrupt>
 80015ae:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80015b0:	2300      	movs	r3, #0
 80015b2:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80015b4:	e0cd      	b.n	8001752 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80015b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015b8:	f003 0301 	and.w	r3, r3, #1
 80015bc:	2b00      	cmp	r3, #0
 80015be:	f000 80c2 	beq.w	8001746 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015c8:	b2d2      	uxtb	r2, r2
 80015ca:	4611      	mov	r1, r2
 80015cc:	4618      	mov	r0, r3
 80015ce:	f002 fe16 	bl	80041fe <USB_ReadDevInEPInterrupt>
 80015d2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80015d4:	693b      	ldr	r3, [r7, #16]
 80015d6:	f003 0301 	and.w	r3, r3, #1
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d057      	beq.n	800168e <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80015de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015e0:	f003 030f 	and.w	r3, r3, #15
 80015e4:	2201      	movs	r2, #1
 80015e6:	fa02 f303 	lsl.w	r3, r2, r3
 80015ea:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80015ec:	69fb      	ldr	r3, [r7, #28]
 80015ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80015f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	43db      	mvns	r3, r3
 80015f8:	69f9      	ldr	r1, [r7, #28]
 80015fa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80015fe:	4013      	ands	r3, r2
 8001600:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001604:	015a      	lsls	r2, r3, #5
 8001606:	69fb      	ldr	r3, [r7, #28]
 8001608:	4413      	add	r3, r2
 800160a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800160e:	461a      	mov	r2, r3
 8001610:	2301      	movs	r3, #1
 8001612:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	799b      	ldrb	r3, [r3, #6]
 8001618:	2b01      	cmp	r3, #1
 800161a:	d132      	bne.n	8001682 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800161c:	6879      	ldr	r1, [r7, #4]
 800161e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001620:	4613      	mov	r3, r2
 8001622:	00db      	lsls	r3, r3, #3
 8001624:	4413      	add	r3, r2
 8001626:	009b      	lsls	r3, r3, #2
 8001628:	440b      	add	r3, r1
 800162a:	3320      	adds	r3, #32
 800162c:	6819      	ldr	r1, [r3, #0]
 800162e:	6878      	ldr	r0, [r7, #4]
 8001630:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001632:	4613      	mov	r3, r2
 8001634:	00db      	lsls	r3, r3, #3
 8001636:	4413      	add	r3, r2
 8001638:	009b      	lsls	r3, r3, #2
 800163a:	4403      	add	r3, r0
 800163c:	331c      	adds	r3, #28
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4419      	add	r1, r3
 8001642:	6878      	ldr	r0, [r7, #4]
 8001644:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001646:	4613      	mov	r3, r2
 8001648:	00db      	lsls	r3, r3, #3
 800164a:	4413      	add	r3, r2
 800164c:	009b      	lsls	r3, r3, #2
 800164e:	4403      	add	r3, r0
 8001650:	3320      	adds	r3, #32
 8001652:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001656:	2b00      	cmp	r3, #0
 8001658:	d113      	bne.n	8001682 <HAL_PCD_IRQHandler+0x3a2>
 800165a:	6879      	ldr	r1, [r7, #4]
 800165c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800165e:	4613      	mov	r3, r2
 8001660:	00db      	lsls	r3, r3, #3
 8001662:	4413      	add	r3, r2
 8001664:	009b      	lsls	r3, r3, #2
 8001666:	440b      	add	r3, r1
 8001668:	3324      	adds	r3, #36	; 0x24
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	2b00      	cmp	r3, #0
 800166e:	d108      	bne.n	8001682 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	6818      	ldr	r0, [r3, #0]
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 800167a:	461a      	mov	r2, r3
 800167c:	2101      	movs	r1, #1
 800167e:	f002 fe1d 	bl	80042bc <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001684:	b2db      	uxtb	r3, r3
 8001686:	4619      	mov	r1, r3
 8001688:	6878      	ldr	r0, [r7, #4]
 800168a:	f005 f908 	bl	800689e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800168e:	693b      	ldr	r3, [r7, #16]
 8001690:	f003 0308 	and.w	r3, r3, #8
 8001694:	2b00      	cmp	r3, #0
 8001696:	d008      	beq.n	80016aa <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800169a:	015a      	lsls	r2, r3, #5
 800169c:	69fb      	ldr	r3, [r7, #28]
 800169e:	4413      	add	r3, r2
 80016a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80016a4:	461a      	mov	r2, r3
 80016a6:	2308      	movs	r3, #8
 80016a8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80016aa:	693b      	ldr	r3, [r7, #16]
 80016ac:	f003 0310 	and.w	r3, r3, #16
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d008      	beq.n	80016c6 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80016b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016b6:	015a      	lsls	r2, r3, #5
 80016b8:	69fb      	ldr	r3, [r7, #28]
 80016ba:	4413      	add	r3, r2
 80016bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80016c0:	461a      	mov	r2, r3
 80016c2:	2310      	movs	r3, #16
 80016c4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80016c6:	693b      	ldr	r3, [r7, #16]
 80016c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d008      	beq.n	80016e2 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80016d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016d2:	015a      	lsls	r2, r3, #5
 80016d4:	69fb      	ldr	r3, [r7, #28]
 80016d6:	4413      	add	r3, r2
 80016d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80016dc:	461a      	mov	r2, r3
 80016de:	2340      	movs	r3, #64	; 0x40
 80016e0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80016e2:	693b      	ldr	r3, [r7, #16]
 80016e4:	f003 0302 	and.w	r3, r3, #2
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d023      	beq.n	8001734 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80016ec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80016ee:	6a38      	ldr	r0, [r7, #32]
 80016f0:	f001 fe0a 	bl	8003308 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80016f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016f6:	4613      	mov	r3, r2
 80016f8:	00db      	lsls	r3, r3, #3
 80016fa:	4413      	add	r3, r2
 80016fc:	009b      	lsls	r3, r3, #2
 80016fe:	3310      	adds	r3, #16
 8001700:	687a      	ldr	r2, [r7, #4]
 8001702:	4413      	add	r3, r2
 8001704:	3304      	adds	r3, #4
 8001706:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001708:	697b      	ldr	r3, [r7, #20]
 800170a:	78db      	ldrb	r3, [r3, #3]
 800170c:	2b01      	cmp	r3, #1
 800170e:	d108      	bne.n	8001722 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8001710:	697b      	ldr	r3, [r7, #20]
 8001712:	2200      	movs	r2, #0
 8001714:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001718:	b2db      	uxtb	r3, r3
 800171a:	4619      	mov	r1, r3
 800171c:	6878      	ldr	r0, [r7, #4]
 800171e:	f005 f94b 	bl	80069b8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001724:	015a      	lsls	r2, r3, #5
 8001726:	69fb      	ldr	r3, [r7, #28]
 8001728:	4413      	add	r3, r2
 800172a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800172e:	461a      	mov	r2, r3
 8001730:	2302      	movs	r3, #2
 8001732:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001734:	693b      	ldr	r3, [r7, #16]
 8001736:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800173a:	2b00      	cmp	r3, #0
 800173c:	d003      	beq.n	8001746 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800173e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001740:	6878      	ldr	r0, [r7, #4]
 8001742:	f000 fcbb 	bl	80020bc <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001748:	3301      	adds	r3, #1
 800174a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800174c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800174e:	085b      	lsrs	r3, r3, #1
 8001750:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001752:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001754:	2b00      	cmp	r3, #0
 8001756:	f47f af2e 	bne.w	80015b6 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4618      	mov	r0, r3
 8001760:	f002 fce8 	bl	8004134 <USB_ReadInterrupts>
 8001764:	4603      	mov	r3, r0
 8001766:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800176a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800176e:	d122      	bne.n	80017b6 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001770:	69fb      	ldr	r3, [r7, #28]
 8001772:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	69fa      	ldr	r2, [r7, #28]
 800177a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800177e:	f023 0301 	bic.w	r3, r3, #1
 8001782:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	f893 34cc 	ldrb.w	r3, [r3, #1228]	; 0x4cc
 800178a:	2b01      	cmp	r3, #1
 800178c:	d108      	bne.n	80017a0 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	2200      	movs	r2, #0
 8001792:	f883 24cc 	strb.w	r2, [r3, #1228]	; 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001796:	2100      	movs	r1, #0
 8001798:	6878      	ldr	r0, [r7, #4]
 800179a:	f000 fea1 	bl	80024e0 <HAL_PCDEx_LPM_Callback>
 800179e:	e002      	b.n	80017a6 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80017a0:	6878      	ldr	r0, [r7, #4]
 80017a2:	f005 f8e9 	bl	8006978 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	695a      	ldr	r2, [r3, #20]
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80017b4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	4618      	mov	r0, r3
 80017bc:	f002 fcba 	bl	8004134 <USB_ReadInterrupts>
 80017c0:	4603      	mov	r3, r0
 80017c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80017c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80017ca:	d112      	bne.n	80017f2 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80017cc:	69fb      	ldr	r3, [r7, #28]
 80017ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80017d2:	689b      	ldr	r3, [r3, #8]
 80017d4:	f003 0301 	and.w	r3, r3, #1
 80017d8:	2b01      	cmp	r3, #1
 80017da:	d102      	bne.n	80017e2 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80017dc:	6878      	ldr	r0, [r7, #4]
 80017de:	f005 f8a5 	bl	800692c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	695a      	ldr	r2, [r3, #20]
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80017f0:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	4618      	mov	r0, r3
 80017f8:	f002 fc9c 	bl	8004134 <USB_ReadInterrupts>
 80017fc:	4603      	mov	r3, r0
 80017fe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001802:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001806:	f040 80b7 	bne.w	8001978 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800180a:	69fb      	ldr	r3, [r7, #28]
 800180c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	69fa      	ldr	r2, [r7, #28]
 8001814:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001818:	f023 0301 	bic.w	r3, r3, #1
 800181c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	2110      	movs	r1, #16
 8001824:	4618      	mov	r0, r3
 8001826:	f001 fd6f 	bl	8003308 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800182a:	2300      	movs	r3, #0
 800182c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800182e:	e046      	b.n	80018be <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001830:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001832:	015a      	lsls	r2, r3, #5
 8001834:	69fb      	ldr	r3, [r7, #28]
 8001836:	4413      	add	r3, r2
 8001838:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800183c:	461a      	mov	r2, r3
 800183e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001842:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001846:	015a      	lsls	r2, r3, #5
 8001848:	69fb      	ldr	r3, [r7, #28]
 800184a:	4413      	add	r3, r2
 800184c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001854:	0151      	lsls	r1, r2, #5
 8001856:	69fa      	ldr	r2, [r7, #28]
 8001858:	440a      	add	r2, r1
 800185a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800185e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001862:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001864:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001866:	015a      	lsls	r2, r3, #5
 8001868:	69fb      	ldr	r3, [r7, #28]
 800186a:	4413      	add	r3, r2
 800186c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001870:	461a      	mov	r2, r3
 8001872:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001876:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001878:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800187a:	015a      	lsls	r2, r3, #5
 800187c:	69fb      	ldr	r3, [r7, #28]
 800187e:	4413      	add	r3, r2
 8001880:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001888:	0151      	lsls	r1, r2, #5
 800188a:	69fa      	ldr	r2, [r7, #28]
 800188c:	440a      	add	r2, r1
 800188e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001892:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001896:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001898:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800189a:	015a      	lsls	r2, r3, #5
 800189c:	69fb      	ldr	r3, [r7, #28]
 800189e:	4413      	add	r3, r2
 80018a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80018a8:	0151      	lsls	r1, r2, #5
 80018aa:	69fa      	ldr	r2, [r7, #28]
 80018ac:	440a      	add	r2, r1
 80018ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80018b2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80018b6:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80018b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018ba:	3301      	adds	r3, #1
 80018bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	791b      	ldrb	r3, [r3, #4]
 80018c2:	461a      	mov	r2, r3
 80018c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d3b2      	bcc.n	8001830 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80018ca:	69fb      	ldr	r3, [r7, #28]
 80018cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80018d0:	69db      	ldr	r3, [r3, #28]
 80018d2:	69fa      	ldr	r2, [r7, #28]
 80018d4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80018d8:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80018dc:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	7bdb      	ldrb	r3, [r3, #15]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d016      	beq.n	8001914 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80018e6:	69fb      	ldr	r3, [r7, #28]
 80018e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80018ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80018f0:	69fa      	ldr	r2, [r7, #28]
 80018f2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80018f6:	f043 030b 	orr.w	r3, r3, #11
 80018fa:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80018fe:	69fb      	ldr	r3, [r7, #28]
 8001900:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001904:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001906:	69fa      	ldr	r2, [r7, #28]
 8001908:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800190c:	f043 030b 	orr.w	r3, r3, #11
 8001910:	6453      	str	r3, [r2, #68]	; 0x44
 8001912:	e015      	b.n	8001940 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001914:	69fb      	ldr	r3, [r7, #28]
 8001916:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800191a:	695b      	ldr	r3, [r3, #20]
 800191c:	69fa      	ldr	r2, [r7, #28]
 800191e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001922:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001926:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800192a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800192c:	69fb      	ldr	r3, [r7, #28]
 800192e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001932:	691b      	ldr	r3, [r3, #16]
 8001934:	69fa      	ldr	r2, [r7, #28]
 8001936:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800193a:	f043 030b 	orr.w	r3, r3, #11
 800193e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001940:	69fb      	ldr	r3, [r7, #28]
 8001942:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	69fa      	ldr	r2, [r7, #28]
 800194a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800194e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001952:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6818      	ldr	r0, [r3, #0]
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	f203 439c 	addw	r3, r3, #1180	; 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001962:	461a      	mov	r2, r3
 8001964:	f002 fcaa 	bl	80042bc <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	695a      	ldr	r2, [r3, #20]
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001976:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4618      	mov	r0, r3
 800197e:	f002 fbd9 	bl	8004134 <USB_ReadInterrupts>
 8001982:	4603      	mov	r3, r0
 8001984:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001988:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800198c:	d123      	bne.n	80019d6 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4618      	mov	r0, r3
 8001994:	f002 fc6f 	bl	8004276 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4618      	mov	r0, r3
 800199e:	f001 fd2c 	bl	80033fa <USB_GetDevSpeed>
 80019a2:	4603      	mov	r3, r0
 80019a4:	461a      	mov	r2, r3
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681c      	ldr	r4, [r3, #0]
 80019ae:	f001 f9c7 	bl	8002d40 <HAL_RCC_GetHCLKFreq>
 80019b2:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80019b8:	461a      	mov	r2, r3
 80019ba:	4620      	mov	r0, r4
 80019bc:	f001 fa30 	bl	8002e20 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80019c0:	6878      	ldr	r0, [r7, #4]
 80019c2:	f004 ff94 	bl	80068ee <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	695a      	ldr	r2, [r3, #20]
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80019d4:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4618      	mov	r0, r3
 80019dc:	f002 fbaa 	bl	8004134 <USB_ReadInterrupts>
 80019e0:	4603      	mov	r3, r0
 80019e2:	f003 0308 	and.w	r3, r3, #8
 80019e6:	2b08      	cmp	r3, #8
 80019e8:	d10a      	bne.n	8001a00 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80019ea:	6878      	ldr	r0, [r7, #4]
 80019ec:	f004 ff71 	bl	80068d2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	695a      	ldr	r2, [r3, #20]
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f002 0208 	and.w	r2, r2, #8
 80019fe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4618      	mov	r0, r3
 8001a06:	f002 fb95 	bl	8004134 <USB_ReadInterrupts>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a10:	2b80      	cmp	r3, #128	; 0x80
 8001a12:	d123      	bne.n	8001a5c <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8001a14:	6a3b      	ldr	r3, [r7, #32]
 8001a16:	699b      	ldr	r3, [r3, #24]
 8001a18:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001a1c:	6a3b      	ldr	r3, [r7, #32]
 8001a1e:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001a20:	2301      	movs	r3, #1
 8001a22:	627b      	str	r3, [r7, #36]	; 0x24
 8001a24:	e014      	b.n	8001a50 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001a26:	6879      	ldr	r1, [r7, #4]
 8001a28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a2a:	4613      	mov	r3, r2
 8001a2c:	00db      	lsls	r3, r3, #3
 8001a2e:	4413      	add	r3, r2
 8001a30:	009b      	lsls	r3, r3, #2
 8001a32:	440b      	add	r3, r1
 8001a34:	f203 2357 	addw	r3, r3, #599	; 0x257
 8001a38:	781b      	ldrb	r3, [r3, #0]
 8001a3a:	2b01      	cmp	r3, #1
 8001a3c:	d105      	bne.n	8001a4a <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8001a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a40:	b2db      	uxtb	r3, r3
 8001a42:	4619      	mov	r1, r3
 8001a44:	6878      	ldr	r0, [r7, #4]
 8001a46:	f000 fb08 	bl	800205a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a4c:	3301      	adds	r3, #1
 8001a4e:	627b      	str	r3, [r7, #36]	; 0x24
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	791b      	ldrb	r3, [r3, #4]
 8001a54:	461a      	mov	r2, r3
 8001a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a58:	4293      	cmp	r3, r2
 8001a5a:	d3e4      	bcc.n	8001a26 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4618      	mov	r0, r3
 8001a62:	f002 fb67 	bl	8004134 <USB_ReadInterrupts>
 8001a66:	4603      	mov	r3, r0
 8001a68:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a6c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001a70:	d13c      	bne.n	8001aec <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001a72:	2301      	movs	r3, #1
 8001a74:	627b      	str	r3, [r7, #36]	; 0x24
 8001a76:	e02b      	b.n	8001ad0 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a7a:	015a      	lsls	r2, r3, #5
 8001a7c:	69fb      	ldr	r3, [r7, #28]
 8001a7e:	4413      	add	r3, r2
 8001a80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001a88:	6879      	ldr	r1, [r7, #4]
 8001a8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a8c:	4613      	mov	r3, r2
 8001a8e:	00db      	lsls	r3, r3, #3
 8001a90:	4413      	add	r3, r2
 8001a92:	009b      	lsls	r3, r3, #2
 8001a94:	440b      	add	r3, r1
 8001a96:	3318      	adds	r3, #24
 8001a98:	781b      	ldrb	r3, [r3, #0]
 8001a9a:	2b01      	cmp	r3, #1
 8001a9c:	d115      	bne.n	8001aca <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8001a9e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	da12      	bge.n	8001aca <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001aa4:	6879      	ldr	r1, [r7, #4]
 8001aa6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001aa8:	4613      	mov	r3, r2
 8001aaa:	00db      	lsls	r3, r3, #3
 8001aac:	4413      	add	r3, r2
 8001aae:	009b      	lsls	r3, r3, #2
 8001ab0:	440b      	add	r3, r1
 8001ab2:	3317      	adds	r3, #23
 8001ab4:	2201      	movs	r2, #1
 8001ab6:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8001ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aba:	b2db      	uxtb	r3, r3
 8001abc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001ac0:	b2db      	uxtb	r3, r3
 8001ac2:	4619      	mov	r1, r3
 8001ac4:	6878      	ldr	r0, [r7, #4]
 8001ac6:	f000 fac8 	bl	800205a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001acc:	3301      	adds	r3, #1
 8001ace:	627b      	str	r3, [r7, #36]	; 0x24
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	791b      	ldrb	r3, [r3, #4]
 8001ad4:	461a      	mov	r2, r3
 8001ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ad8:	4293      	cmp	r3, r2
 8001ada:	d3cd      	bcc.n	8001a78 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	695a      	ldr	r2, [r3, #20]
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001aea:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4618      	mov	r0, r3
 8001af2:	f002 fb1f 	bl	8004134 <USB_ReadInterrupts>
 8001af6:	4603      	mov	r3, r0
 8001af8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001afc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001b00:	d156      	bne.n	8001bb0 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001b02:	2301      	movs	r3, #1
 8001b04:	627b      	str	r3, [r7, #36]	; 0x24
 8001b06:	e045      	b.n	8001b94 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8001b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b0a:	015a      	lsls	r2, r3, #5
 8001b0c:	69fb      	ldr	r3, [r7, #28]
 8001b0e:	4413      	add	r3, r2
 8001b10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001b18:	6879      	ldr	r1, [r7, #4]
 8001b1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b1c:	4613      	mov	r3, r2
 8001b1e:	00db      	lsls	r3, r3, #3
 8001b20:	4413      	add	r3, r2
 8001b22:	009b      	lsls	r3, r3, #2
 8001b24:	440b      	add	r3, r1
 8001b26:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8001b2a:	781b      	ldrb	r3, [r3, #0]
 8001b2c:	2b01      	cmp	r3, #1
 8001b2e:	d12e      	bne.n	8001b8e <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001b30:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	da2b      	bge.n	8001b8e <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8001b36:	69bb      	ldr	r3, [r7, #24]
 8001b38:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 8001b42:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001b46:	429a      	cmp	r2, r3
 8001b48:	d121      	bne.n	8001b8e <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8001b4a:	6879      	ldr	r1, [r7, #4]
 8001b4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b4e:	4613      	mov	r3, r2
 8001b50:	00db      	lsls	r3, r3, #3
 8001b52:	4413      	add	r3, r2
 8001b54:	009b      	lsls	r3, r3, #2
 8001b56:	440b      	add	r3, r1
 8001b58:	f203 2357 	addw	r3, r3, #599	; 0x257
 8001b5c:	2201      	movs	r2, #1
 8001b5e:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8001b60:	6a3b      	ldr	r3, [r7, #32]
 8001b62:	699b      	ldr	r3, [r3, #24]
 8001b64:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001b68:	6a3b      	ldr	r3, [r7, #32]
 8001b6a:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8001b6c:	6a3b      	ldr	r3, [r7, #32]
 8001b6e:	695b      	ldr	r3, [r3, #20]
 8001b70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d10a      	bne.n	8001b8e <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8001b78:	69fb      	ldr	r3, [r7, #28]
 8001b7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	69fa      	ldr	r2, [r7, #28]
 8001b82:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001b86:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b8a:	6053      	str	r3, [r2, #4]
            break;
 8001b8c:	e008      	b.n	8001ba0 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b90:	3301      	adds	r3, #1
 8001b92:	627b      	str	r3, [r7, #36]	; 0x24
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	791b      	ldrb	r3, [r3, #4]
 8001b98:	461a      	mov	r2, r3
 8001b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b9c:	4293      	cmp	r3, r2
 8001b9e:	d3b3      	bcc.n	8001b08 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	695a      	ldr	r2, [r3, #20]
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001bae:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f002 fabd 	bl	8004134 <USB_ReadInterrupts>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001bc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bc4:	d10a      	bne.n	8001bdc <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001bc6:	6878      	ldr	r0, [r7, #4]
 8001bc8:	f004 ff08 	bl	80069dc <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	695a      	ldr	r2, [r3, #20]
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001bda:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4618      	mov	r0, r3
 8001be2:	f002 faa7 	bl	8004134 <USB_ReadInterrupts>
 8001be6:	4603      	mov	r3, r0
 8001be8:	f003 0304 	and.w	r3, r3, #4
 8001bec:	2b04      	cmp	r3, #4
 8001bee:	d115      	bne.n	8001c1c <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001bf8:	69bb      	ldr	r3, [r7, #24]
 8001bfa:	f003 0304 	and.w	r3, r3, #4
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d002      	beq.n	8001c08 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001c02:	6878      	ldr	r0, [r7, #4]
 8001c04:	f004 fef8 	bl	80069f8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	6859      	ldr	r1, [r3, #4]
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	69ba      	ldr	r2, [r7, #24]
 8001c14:	430a      	orrs	r2, r1
 8001c16:	605a      	str	r2, [r3, #4]
 8001c18:	e000      	b.n	8001c1c <HAL_PCD_IRQHandler+0x93c>
      return;
 8001c1a:	bf00      	nop
    }
  }
}
 8001c1c:	3734      	adds	r7, #52	; 0x34
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd90      	pop	{r4, r7, pc}

08001c22 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001c22:	b580      	push	{r7, lr}
 8001c24:	b082      	sub	sp, #8
 8001c26:	af00      	add	r7, sp, #0
 8001c28:	6078      	str	r0, [r7, #4]
 8001c2a:	460b      	mov	r3, r1
 8001c2c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8001c34:	2b01      	cmp	r3, #1
 8001c36:	d101      	bne.n	8001c3c <HAL_PCD_SetAddress+0x1a>
 8001c38:	2302      	movs	r3, #2
 8001c3a:	e012      	b.n	8001c62 <HAL_PCD_SetAddress+0x40>
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2201      	movs	r2, #1
 8001c40:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  hpcd->USB_Address = address;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	78fa      	ldrb	r2, [r7, #3]
 8001c48:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	78fa      	ldrb	r2, [r7, #3]
 8001c50:	4611      	mov	r1, r2
 8001c52:	4618      	mov	r0, r3
 8001c54:	f002 fa06 	bl	8004064 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8001c60:	2300      	movs	r3, #0
}
 8001c62:	4618      	mov	r0, r3
 8001c64:	3708      	adds	r7, #8
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}

08001c6a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001c6a:	b580      	push	{r7, lr}
 8001c6c:	b084      	sub	sp, #16
 8001c6e:	af00      	add	r7, sp, #0
 8001c70:	6078      	str	r0, [r7, #4]
 8001c72:	4608      	mov	r0, r1
 8001c74:	4611      	mov	r1, r2
 8001c76:	461a      	mov	r2, r3
 8001c78:	4603      	mov	r3, r0
 8001c7a:	70fb      	strb	r3, [r7, #3]
 8001c7c:	460b      	mov	r3, r1
 8001c7e:	803b      	strh	r3, [r7, #0]
 8001c80:	4613      	mov	r3, r2
 8001c82:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001c84:	2300      	movs	r3, #0
 8001c86:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001c88:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	da0f      	bge.n	8001cb0 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c90:	78fb      	ldrb	r3, [r7, #3]
 8001c92:	f003 020f 	and.w	r2, r3, #15
 8001c96:	4613      	mov	r3, r2
 8001c98:	00db      	lsls	r3, r3, #3
 8001c9a:	4413      	add	r3, r2
 8001c9c:	009b      	lsls	r3, r3, #2
 8001c9e:	3310      	adds	r3, #16
 8001ca0:	687a      	ldr	r2, [r7, #4]
 8001ca2:	4413      	add	r3, r2
 8001ca4:	3304      	adds	r3, #4
 8001ca6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	2201      	movs	r2, #1
 8001cac:	705a      	strb	r2, [r3, #1]
 8001cae:	e00f      	b.n	8001cd0 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001cb0:	78fb      	ldrb	r3, [r7, #3]
 8001cb2:	f003 020f 	and.w	r2, r3, #15
 8001cb6:	4613      	mov	r3, r2
 8001cb8:	00db      	lsls	r3, r3, #3
 8001cba:	4413      	add	r3, r2
 8001cbc:	009b      	lsls	r3, r3, #2
 8001cbe:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8001cc2:	687a      	ldr	r2, [r7, #4]
 8001cc4:	4413      	add	r3, r2
 8001cc6:	3304      	adds	r3, #4
 8001cc8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	2200      	movs	r2, #0
 8001cce:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001cd0:	78fb      	ldrb	r3, [r7, #3]
 8001cd2:	f003 030f 	and.w	r3, r3, #15
 8001cd6:	b2da      	uxtb	r2, r3
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001cdc:	883a      	ldrh	r2, [r7, #0]
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	78ba      	ldrb	r2, [r7, #2]
 8001ce6:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	785b      	ldrb	r3, [r3, #1]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d004      	beq.n	8001cfa <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	781b      	ldrb	r3, [r3, #0]
 8001cf4:	b29a      	uxth	r2, r3
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001cfa:	78bb      	ldrb	r3, [r7, #2]
 8001cfc:	2b02      	cmp	r3, #2
 8001cfe:	d102      	bne.n	8001d06 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	2200      	movs	r2, #0
 8001d04:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8001d0c:	2b01      	cmp	r3, #1
 8001d0e:	d101      	bne.n	8001d14 <HAL_PCD_EP_Open+0xaa>
 8001d10:	2302      	movs	r3, #2
 8001d12:	e00e      	b.n	8001d32 <HAL_PCD_EP_Open+0xc8>
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2201      	movs	r2, #1
 8001d18:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	68f9      	ldr	r1, [r7, #12]
 8001d22:	4618      	mov	r0, r3
 8001d24:	f001 fb8e 	bl	8003444 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return ret;
 8001d30:	7afb      	ldrb	r3, [r7, #11]
}
 8001d32:	4618      	mov	r0, r3
 8001d34:	3710      	adds	r7, #16
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}

08001d3a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001d3a:	b580      	push	{r7, lr}
 8001d3c:	b084      	sub	sp, #16
 8001d3e:	af00      	add	r7, sp, #0
 8001d40:	6078      	str	r0, [r7, #4]
 8001d42:	460b      	mov	r3, r1
 8001d44:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001d46:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	da0f      	bge.n	8001d6e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d4e:	78fb      	ldrb	r3, [r7, #3]
 8001d50:	f003 020f 	and.w	r2, r3, #15
 8001d54:	4613      	mov	r3, r2
 8001d56:	00db      	lsls	r3, r3, #3
 8001d58:	4413      	add	r3, r2
 8001d5a:	009b      	lsls	r3, r3, #2
 8001d5c:	3310      	adds	r3, #16
 8001d5e:	687a      	ldr	r2, [r7, #4]
 8001d60:	4413      	add	r3, r2
 8001d62:	3304      	adds	r3, #4
 8001d64:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	2201      	movs	r2, #1
 8001d6a:	705a      	strb	r2, [r3, #1]
 8001d6c:	e00f      	b.n	8001d8e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d6e:	78fb      	ldrb	r3, [r7, #3]
 8001d70:	f003 020f 	and.w	r2, r3, #15
 8001d74:	4613      	mov	r3, r2
 8001d76:	00db      	lsls	r3, r3, #3
 8001d78:	4413      	add	r3, r2
 8001d7a:	009b      	lsls	r3, r3, #2
 8001d7c:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8001d80:	687a      	ldr	r2, [r7, #4]
 8001d82:	4413      	add	r3, r2
 8001d84:	3304      	adds	r3, #4
 8001d86:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d8e:	78fb      	ldrb	r3, [r7, #3]
 8001d90:	f003 030f 	and.w	r3, r3, #15
 8001d94:	b2da      	uxtb	r2, r3
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8001da0:	2b01      	cmp	r3, #1
 8001da2:	d101      	bne.n	8001da8 <HAL_PCD_EP_Close+0x6e>
 8001da4:	2302      	movs	r3, #2
 8001da6:	e00e      	b.n	8001dc6 <HAL_PCD_EP_Close+0x8c>
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2201      	movs	r2, #1
 8001dac:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	68f9      	ldr	r1, [r7, #12]
 8001db6:	4618      	mov	r0, r3
 8001db8:	f001 fbcc 	bl	8003554 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  return HAL_OK;
 8001dc4:	2300      	movs	r3, #0
}
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	3710      	adds	r7, #16
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}

08001dce <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001dce:	b580      	push	{r7, lr}
 8001dd0:	b086      	sub	sp, #24
 8001dd2:	af00      	add	r7, sp, #0
 8001dd4:	60f8      	str	r0, [r7, #12]
 8001dd6:	607a      	str	r2, [r7, #4]
 8001dd8:	603b      	str	r3, [r7, #0]
 8001dda:	460b      	mov	r3, r1
 8001ddc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001dde:	7afb      	ldrb	r3, [r7, #11]
 8001de0:	f003 020f 	and.w	r2, r3, #15
 8001de4:	4613      	mov	r3, r2
 8001de6:	00db      	lsls	r3, r3, #3
 8001de8:	4413      	add	r3, r2
 8001dea:	009b      	lsls	r3, r3, #2
 8001dec:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8001df0:	68fa      	ldr	r2, [r7, #12]
 8001df2:	4413      	add	r3, r2
 8001df4:	3304      	adds	r3, #4
 8001df6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001df8:	697b      	ldr	r3, [r7, #20]
 8001dfa:	687a      	ldr	r2, [r7, #4]
 8001dfc:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001dfe:	697b      	ldr	r3, [r7, #20]
 8001e00:	683a      	ldr	r2, [r7, #0]
 8001e02:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8001e04:	697b      	ldr	r3, [r7, #20]
 8001e06:	2200      	movs	r2, #0
 8001e08:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8001e0a:	697b      	ldr	r3, [r7, #20]
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e10:	7afb      	ldrb	r3, [r7, #11]
 8001e12:	f003 030f 	and.w	r3, r3, #15
 8001e16:	b2da      	uxtb	r2, r3
 8001e18:	697b      	ldr	r3, [r7, #20]
 8001e1a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	799b      	ldrb	r3, [r3, #6]
 8001e20:	2b01      	cmp	r3, #1
 8001e22:	d102      	bne.n	8001e2a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001e24:	687a      	ldr	r2, [r7, #4]
 8001e26:	697b      	ldr	r3, [r7, #20]
 8001e28:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	6818      	ldr	r0, [r3, #0]
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	799b      	ldrb	r3, [r3, #6]
 8001e32:	461a      	mov	r2, r3
 8001e34:	6979      	ldr	r1, [r7, #20]
 8001e36:	f001 fc69 	bl	800370c <USB_EPStartXfer>

  return HAL_OK;
 8001e3a:	2300      	movs	r3, #0
}
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	3718      	adds	r7, #24
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bd80      	pop	{r7, pc}

08001e44 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8001e44:	b480      	push	{r7}
 8001e46:	b083      	sub	sp, #12
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
 8001e4c:	460b      	mov	r3, r1
 8001e4e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001e50:	78fb      	ldrb	r3, [r7, #3]
 8001e52:	f003 020f 	and.w	r2, r3, #15
 8001e56:	6879      	ldr	r1, [r7, #4]
 8001e58:	4613      	mov	r3, r2
 8001e5a:	00db      	lsls	r3, r3, #3
 8001e5c:	4413      	add	r3, r2
 8001e5e:	009b      	lsls	r3, r3, #2
 8001e60:	440b      	add	r3, r1
 8001e62:	f503 731a 	add.w	r3, r3, #616	; 0x268
 8001e66:	681b      	ldr	r3, [r3, #0]
}
 8001e68:	4618      	mov	r0, r3
 8001e6a:	370c      	adds	r7, #12
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e72:	4770      	bx	lr

08001e74 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b086      	sub	sp, #24
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	60f8      	str	r0, [r7, #12]
 8001e7c:	607a      	str	r2, [r7, #4]
 8001e7e:	603b      	str	r3, [r7, #0]
 8001e80:	460b      	mov	r3, r1
 8001e82:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e84:	7afb      	ldrb	r3, [r7, #11]
 8001e86:	f003 020f 	and.w	r2, r3, #15
 8001e8a:	4613      	mov	r3, r2
 8001e8c:	00db      	lsls	r3, r3, #3
 8001e8e:	4413      	add	r3, r2
 8001e90:	009b      	lsls	r3, r3, #2
 8001e92:	3310      	adds	r3, #16
 8001e94:	68fa      	ldr	r2, [r7, #12]
 8001e96:	4413      	add	r3, r2
 8001e98:	3304      	adds	r3, #4
 8001e9a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001e9c:	697b      	ldr	r3, [r7, #20]
 8001e9e:	687a      	ldr	r2, [r7, #4]
 8001ea0:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001ea2:	697b      	ldr	r3, [r7, #20]
 8001ea4:	683a      	ldr	r2, [r7, #0]
 8001ea6:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8001ea8:	697b      	ldr	r3, [r7, #20]
 8001eaa:	2200      	movs	r2, #0
 8001eac:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8001eae:	697b      	ldr	r3, [r7, #20]
 8001eb0:	2201      	movs	r2, #1
 8001eb2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001eb4:	7afb      	ldrb	r3, [r7, #11]
 8001eb6:	f003 030f 	and.w	r3, r3, #15
 8001eba:	b2da      	uxtb	r2, r3
 8001ebc:	697b      	ldr	r3, [r7, #20]
 8001ebe:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	799b      	ldrb	r3, [r3, #6]
 8001ec4:	2b01      	cmp	r3, #1
 8001ec6:	d102      	bne.n	8001ece <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001ec8:	687a      	ldr	r2, [r7, #4]
 8001eca:	697b      	ldr	r3, [r7, #20]
 8001ecc:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	6818      	ldr	r0, [r3, #0]
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	799b      	ldrb	r3, [r3, #6]
 8001ed6:	461a      	mov	r2, r3
 8001ed8:	6979      	ldr	r1, [r7, #20]
 8001eda:	f001 fc17 	bl	800370c <USB_EPStartXfer>

  return HAL_OK;
 8001ede:	2300      	movs	r3, #0
}
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	3718      	adds	r7, #24
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bd80      	pop	{r7, pc}

08001ee8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b084      	sub	sp, #16
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
 8001ef0:	460b      	mov	r3, r1
 8001ef2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001ef4:	78fb      	ldrb	r3, [r7, #3]
 8001ef6:	f003 030f 	and.w	r3, r3, #15
 8001efa:	687a      	ldr	r2, [r7, #4]
 8001efc:	7912      	ldrb	r2, [r2, #4]
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d901      	bls.n	8001f06 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001f02:	2301      	movs	r3, #1
 8001f04:	e04f      	b.n	8001fa6 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001f06:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	da0f      	bge.n	8001f2e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f0e:	78fb      	ldrb	r3, [r7, #3]
 8001f10:	f003 020f 	and.w	r2, r3, #15
 8001f14:	4613      	mov	r3, r2
 8001f16:	00db      	lsls	r3, r3, #3
 8001f18:	4413      	add	r3, r2
 8001f1a:	009b      	lsls	r3, r3, #2
 8001f1c:	3310      	adds	r3, #16
 8001f1e:	687a      	ldr	r2, [r7, #4]
 8001f20:	4413      	add	r3, r2
 8001f22:	3304      	adds	r3, #4
 8001f24:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	2201      	movs	r2, #1
 8001f2a:	705a      	strb	r2, [r3, #1]
 8001f2c:	e00d      	b.n	8001f4a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001f2e:	78fa      	ldrb	r2, [r7, #3]
 8001f30:	4613      	mov	r3, r2
 8001f32:	00db      	lsls	r3, r3, #3
 8001f34:	4413      	add	r3, r2
 8001f36:	009b      	lsls	r3, r3, #2
 8001f38:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8001f3c:	687a      	ldr	r2, [r7, #4]
 8001f3e:	4413      	add	r3, r2
 8001f40:	3304      	adds	r3, #4
 8001f42:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	2200      	movs	r2, #0
 8001f48:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	2201      	movs	r2, #1
 8001f4e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f50:	78fb      	ldrb	r3, [r7, #3]
 8001f52:	f003 030f 	and.w	r3, r3, #15
 8001f56:	b2da      	uxtb	r2, r3
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8001f62:	2b01      	cmp	r3, #1
 8001f64:	d101      	bne.n	8001f6a <HAL_PCD_EP_SetStall+0x82>
 8001f66:	2302      	movs	r3, #2
 8001f68:	e01d      	b.n	8001fa6 <HAL_PCD_EP_SetStall+0xbe>
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2201      	movs	r2, #1
 8001f6e:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	68f9      	ldr	r1, [r7, #12]
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f001 ff9f 	bl	8003ebc <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001f7e:	78fb      	ldrb	r3, [r7, #3]
 8001f80:	f003 030f 	and.w	r3, r3, #15
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d109      	bne.n	8001f9c <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6818      	ldr	r0, [r3, #0]
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	7999      	ldrb	r1, [r3, #6]
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8001f96:	461a      	mov	r2, r3
 8001f98:	f002 f990 	bl	80042bc <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8001fa4:	2300      	movs	r3, #0
}
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	3710      	adds	r7, #16
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}

08001fae <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001fae:	b580      	push	{r7, lr}
 8001fb0:	b084      	sub	sp, #16
 8001fb2:	af00      	add	r7, sp, #0
 8001fb4:	6078      	str	r0, [r7, #4]
 8001fb6:	460b      	mov	r3, r1
 8001fb8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001fba:	78fb      	ldrb	r3, [r7, #3]
 8001fbc:	f003 030f 	and.w	r3, r3, #15
 8001fc0:	687a      	ldr	r2, [r7, #4]
 8001fc2:	7912      	ldrb	r2, [r2, #4]
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d901      	bls.n	8001fcc <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001fc8:	2301      	movs	r3, #1
 8001fca:	e042      	b.n	8002052 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001fcc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	da0f      	bge.n	8001ff4 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001fd4:	78fb      	ldrb	r3, [r7, #3]
 8001fd6:	f003 020f 	and.w	r2, r3, #15
 8001fda:	4613      	mov	r3, r2
 8001fdc:	00db      	lsls	r3, r3, #3
 8001fde:	4413      	add	r3, r2
 8001fe0:	009b      	lsls	r3, r3, #2
 8001fe2:	3310      	adds	r3, #16
 8001fe4:	687a      	ldr	r2, [r7, #4]
 8001fe6:	4413      	add	r3, r2
 8001fe8:	3304      	adds	r3, #4
 8001fea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	2201      	movs	r2, #1
 8001ff0:	705a      	strb	r2, [r3, #1]
 8001ff2:	e00f      	b.n	8002014 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001ff4:	78fb      	ldrb	r3, [r7, #3]
 8001ff6:	f003 020f 	and.w	r2, r3, #15
 8001ffa:	4613      	mov	r3, r2
 8001ffc:	00db      	lsls	r3, r3, #3
 8001ffe:	4413      	add	r3, r2
 8002000:	009b      	lsls	r3, r3, #2
 8002002:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8002006:	687a      	ldr	r2, [r7, #4]
 8002008:	4413      	add	r3, r2
 800200a:	3304      	adds	r3, #4
 800200c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	2200      	movs	r2, #0
 8002012:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	2200      	movs	r2, #0
 8002018:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800201a:	78fb      	ldrb	r3, [r7, #3]
 800201c:	f003 030f 	and.w	r3, r3, #15
 8002020:	b2da      	uxtb	r2, r3
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 800202c:	2b01      	cmp	r3, #1
 800202e:	d101      	bne.n	8002034 <HAL_PCD_EP_ClrStall+0x86>
 8002030:	2302      	movs	r3, #2
 8002032:	e00e      	b.n	8002052 <HAL_PCD_EP_ClrStall+0xa4>
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2201      	movs	r2, #1
 8002038:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	68f9      	ldr	r1, [r7, #12]
 8002042:	4618      	mov	r0, r3
 8002044:	f001 ffa8 	bl	8003f98 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2200      	movs	r2, #0
 800204c:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8002050:	2300      	movs	r3, #0
}
 8002052:	4618      	mov	r0, r3
 8002054:	3710      	adds	r7, #16
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}

0800205a <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800205a:	b580      	push	{r7, lr}
 800205c:	b084      	sub	sp, #16
 800205e:	af00      	add	r7, sp, #0
 8002060:	6078      	str	r0, [r7, #4]
 8002062:	460b      	mov	r3, r1
 8002064:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002066:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800206a:	2b00      	cmp	r3, #0
 800206c:	da0c      	bge.n	8002088 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800206e:	78fb      	ldrb	r3, [r7, #3]
 8002070:	f003 020f 	and.w	r2, r3, #15
 8002074:	4613      	mov	r3, r2
 8002076:	00db      	lsls	r3, r3, #3
 8002078:	4413      	add	r3, r2
 800207a:	009b      	lsls	r3, r3, #2
 800207c:	3310      	adds	r3, #16
 800207e:	687a      	ldr	r2, [r7, #4]
 8002080:	4413      	add	r3, r2
 8002082:	3304      	adds	r3, #4
 8002084:	60fb      	str	r3, [r7, #12]
 8002086:	e00c      	b.n	80020a2 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002088:	78fb      	ldrb	r3, [r7, #3]
 800208a:	f003 020f 	and.w	r2, r3, #15
 800208e:	4613      	mov	r3, r2
 8002090:	00db      	lsls	r3, r3, #3
 8002092:	4413      	add	r3, r2
 8002094:	009b      	lsls	r3, r3, #2
 8002096:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800209a:	687a      	ldr	r2, [r7, #4]
 800209c:	4413      	add	r3, r2
 800209e:	3304      	adds	r3, #4
 80020a0:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	68f9      	ldr	r1, [r7, #12]
 80020a8:	4618      	mov	r0, r3
 80020aa:	f001 fdc7 	bl	8003c3c <USB_EPStopXfer>
 80020ae:	4603      	mov	r3, r0
 80020b0:	72fb      	strb	r3, [r7, #11]

  return ret;
 80020b2:	7afb      	ldrb	r3, [r7, #11]
}
 80020b4:	4618      	mov	r0, r3
 80020b6:	3710      	adds	r7, #16
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bd80      	pop	{r7, pc}

080020bc <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b08a      	sub	sp, #40	; 0x28
 80020c0:	af02      	add	r7, sp, #8
 80020c2:	6078      	str	r0, [r7, #4]
 80020c4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80020cc:	697b      	ldr	r3, [r7, #20]
 80020ce:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80020d0:	683a      	ldr	r2, [r7, #0]
 80020d2:	4613      	mov	r3, r2
 80020d4:	00db      	lsls	r3, r3, #3
 80020d6:	4413      	add	r3, r2
 80020d8:	009b      	lsls	r3, r3, #2
 80020da:	3310      	adds	r3, #16
 80020dc:	687a      	ldr	r2, [r7, #4]
 80020de:	4413      	add	r3, r2
 80020e0:	3304      	adds	r3, #4
 80020e2:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	695a      	ldr	r2, [r3, #20]
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	691b      	ldr	r3, [r3, #16]
 80020ec:	429a      	cmp	r2, r3
 80020ee:	d901      	bls.n	80020f4 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80020f0:	2301      	movs	r3, #1
 80020f2:	e06b      	b.n	80021cc <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	691a      	ldr	r2, [r3, #16]
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	695b      	ldr	r3, [r3, #20]
 80020fc:	1ad3      	subs	r3, r2, r3
 80020fe:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	689b      	ldr	r3, [r3, #8]
 8002104:	69fa      	ldr	r2, [r7, #28]
 8002106:	429a      	cmp	r2, r3
 8002108:	d902      	bls.n	8002110 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	689b      	ldr	r3, [r3, #8]
 800210e:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002110:	69fb      	ldr	r3, [r7, #28]
 8002112:	3303      	adds	r3, #3
 8002114:	089b      	lsrs	r3, r3, #2
 8002116:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002118:	e02a      	b.n	8002170 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	691a      	ldr	r2, [r3, #16]
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	695b      	ldr	r3, [r3, #20]
 8002122:	1ad3      	subs	r3, r2, r3
 8002124:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	689b      	ldr	r3, [r3, #8]
 800212a:	69fa      	ldr	r2, [r7, #28]
 800212c:	429a      	cmp	r2, r3
 800212e:	d902      	bls.n	8002136 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	689b      	ldr	r3, [r3, #8]
 8002134:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002136:	69fb      	ldr	r3, [r7, #28]
 8002138:	3303      	adds	r3, #3
 800213a:	089b      	lsrs	r3, r3, #2
 800213c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	68d9      	ldr	r1, [r3, #12]
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	b2da      	uxtb	r2, r3
 8002146:	69fb      	ldr	r3, [r7, #28]
 8002148:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800214e:	9300      	str	r3, [sp, #0]
 8002150:	4603      	mov	r3, r0
 8002152:	6978      	ldr	r0, [r7, #20]
 8002154:	f001 fe1c 	bl	8003d90 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	68da      	ldr	r2, [r3, #12]
 800215c:	69fb      	ldr	r3, [r7, #28]
 800215e:	441a      	add	r2, r3
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	695a      	ldr	r2, [r3, #20]
 8002168:	69fb      	ldr	r3, [r7, #28]
 800216a:	441a      	add	r2, r3
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	015a      	lsls	r2, r3, #5
 8002174:	693b      	ldr	r3, [r7, #16]
 8002176:	4413      	add	r3, r2
 8002178:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800217c:	699b      	ldr	r3, [r3, #24]
 800217e:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002180:	69ba      	ldr	r2, [r7, #24]
 8002182:	429a      	cmp	r2, r3
 8002184:	d809      	bhi.n	800219a <PCD_WriteEmptyTxFifo+0xde>
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	695a      	ldr	r2, [r3, #20]
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800218e:	429a      	cmp	r2, r3
 8002190:	d203      	bcs.n	800219a <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	691b      	ldr	r3, [r3, #16]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d1bf      	bne.n	800211a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	691a      	ldr	r2, [r3, #16]
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	695b      	ldr	r3, [r3, #20]
 80021a2:	429a      	cmp	r2, r3
 80021a4:	d811      	bhi.n	80021ca <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	f003 030f 	and.w	r3, r3, #15
 80021ac:	2201      	movs	r2, #1
 80021ae:	fa02 f303 	lsl.w	r3, r2, r3
 80021b2:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80021b4:	693b      	ldr	r3, [r7, #16]
 80021b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80021ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80021bc:	68bb      	ldr	r3, [r7, #8]
 80021be:	43db      	mvns	r3, r3
 80021c0:	6939      	ldr	r1, [r7, #16]
 80021c2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80021c6:	4013      	ands	r3, r2
 80021c8:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80021ca:	2300      	movs	r3, #0
}
 80021cc:	4618      	mov	r0, r3
 80021ce:	3720      	adds	r7, #32
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bd80      	pop	{r7, pc}

080021d4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b088      	sub	sp, #32
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
 80021dc:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80021e4:	69fb      	ldr	r3, [r7, #28]
 80021e6:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80021e8:	69fb      	ldr	r3, [r7, #28]
 80021ea:	333c      	adds	r3, #60	; 0x3c
 80021ec:	3304      	adds	r3, #4
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	015a      	lsls	r2, r3, #5
 80021f6:	69bb      	ldr	r3, [r7, #24]
 80021f8:	4413      	add	r3, r2
 80021fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021fe:	689b      	ldr	r3, [r3, #8]
 8002200:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	799b      	ldrb	r3, [r3, #6]
 8002206:	2b01      	cmp	r3, #1
 8002208:	d17b      	bne.n	8002302 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800220a:	693b      	ldr	r3, [r7, #16]
 800220c:	f003 0308 	and.w	r3, r3, #8
 8002210:	2b00      	cmp	r3, #0
 8002212:	d015      	beq.n	8002240 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002214:	697b      	ldr	r3, [r7, #20]
 8002216:	4a61      	ldr	r2, [pc, #388]	; (800239c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002218:	4293      	cmp	r3, r2
 800221a:	f240 80b9 	bls.w	8002390 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800221e:	693b      	ldr	r3, [r7, #16]
 8002220:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002224:	2b00      	cmp	r3, #0
 8002226:	f000 80b3 	beq.w	8002390 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	015a      	lsls	r2, r3, #5
 800222e:	69bb      	ldr	r3, [r7, #24]
 8002230:	4413      	add	r3, r2
 8002232:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002236:	461a      	mov	r2, r3
 8002238:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800223c:	6093      	str	r3, [r2, #8]
 800223e:	e0a7      	b.n	8002390 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002240:	693b      	ldr	r3, [r7, #16]
 8002242:	f003 0320 	and.w	r3, r3, #32
 8002246:	2b00      	cmp	r3, #0
 8002248:	d009      	beq.n	800225e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	015a      	lsls	r2, r3, #5
 800224e:	69bb      	ldr	r3, [r7, #24]
 8002250:	4413      	add	r3, r2
 8002252:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002256:	461a      	mov	r2, r3
 8002258:	2320      	movs	r3, #32
 800225a:	6093      	str	r3, [r2, #8]
 800225c:	e098      	b.n	8002390 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800225e:	693b      	ldr	r3, [r7, #16]
 8002260:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002264:	2b00      	cmp	r3, #0
 8002266:	f040 8093 	bne.w	8002390 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800226a:	697b      	ldr	r3, [r7, #20]
 800226c:	4a4b      	ldr	r2, [pc, #300]	; (800239c <PCD_EP_OutXfrComplete_int+0x1c8>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d90f      	bls.n	8002292 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002272:	693b      	ldr	r3, [r7, #16]
 8002274:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002278:	2b00      	cmp	r3, #0
 800227a:	d00a      	beq.n	8002292 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	015a      	lsls	r2, r3, #5
 8002280:	69bb      	ldr	r3, [r7, #24]
 8002282:	4413      	add	r3, r2
 8002284:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002288:	461a      	mov	r2, r3
 800228a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800228e:	6093      	str	r3, [r2, #8]
 8002290:	e07e      	b.n	8002390 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8002292:	683a      	ldr	r2, [r7, #0]
 8002294:	4613      	mov	r3, r2
 8002296:	00db      	lsls	r3, r3, #3
 8002298:	4413      	add	r3, r2
 800229a:	009b      	lsls	r3, r3, #2
 800229c:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80022a0:	687a      	ldr	r2, [r7, #4]
 80022a2:	4413      	add	r3, r2
 80022a4:	3304      	adds	r3, #4
 80022a6:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	6a1a      	ldr	r2, [r3, #32]
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	0159      	lsls	r1, r3, #5
 80022b0:	69bb      	ldr	r3, [r7, #24]
 80022b2:	440b      	add	r3, r1
 80022b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022b8:	691b      	ldr	r3, [r3, #16]
 80022ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022be:	1ad2      	subs	r2, r2, r3
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d114      	bne.n	80022f4 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	691b      	ldr	r3, [r3, #16]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d109      	bne.n	80022e6 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6818      	ldr	r0, [r3, #0]
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 80022dc:	461a      	mov	r2, r3
 80022de:	2101      	movs	r1, #1
 80022e0:	f001 ffec 	bl	80042bc <USB_EP0_OutStart>
 80022e4:	e006      	b.n	80022f4 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	68da      	ldr	r2, [r3, #12]
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	695b      	ldr	r3, [r3, #20]
 80022ee:	441a      	add	r2, r3
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	b2db      	uxtb	r3, r3
 80022f8:	4619      	mov	r1, r3
 80022fa:	6878      	ldr	r0, [r7, #4]
 80022fc:	f004 fab4 	bl	8006868 <HAL_PCD_DataOutStageCallback>
 8002300:	e046      	b.n	8002390 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002302:	697b      	ldr	r3, [r7, #20]
 8002304:	4a26      	ldr	r2, [pc, #152]	; (80023a0 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d124      	bne.n	8002354 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800230a:	693b      	ldr	r3, [r7, #16]
 800230c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002310:	2b00      	cmp	r3, #0
 8002312:	d00a      	beq.n	800232a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	015a      	lsls	r2, r3, #5
 8002318:	69bb      	ldr	r3, [r7, #24]
 800231a:	4413      	add	r3, r2
 800231c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002320:	461a      	mov	r2, r3
 8002322:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002326:	6093      	str	r3, [r2, #8]
 8002328:	e032      	b.n	8002390 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800232a:	693b      	ldr	r3, [r7, #16]
 800232c:	f003 0320 	and.w	r3, r3, #32
 8002330:	2b00      	cmp	r3, #0
 8002332:	d008      	beq.n	8002346 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	015a      	lsls	r2, r3, #5
 8002338:	69bb      	ldr	r3, [r7, #24]
 800233a:	4413      	add	r3, r2
 800233c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002340:	461a      	mov	r2, r3
 8002342:	2320      	movs	r3, #32
 8002344:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	b2db      	uxtb	r3, r3
 800234a:	4619      	mov	r1, r3
 800234c:	6878      	ldr	r0, [r7, #4]
 800234e:	f004 fa8b 	bl	8006868 <HAL_PCD_DataOutStageCallback>
 8002352:	e01d      	b.n	8002390 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d114      	bne.n	8002384 <PCD_EP_OutXfrComplete_int+0x1b0>
 800235a:	6879      	ldr	r1, [r7, #4]
 800235c:	683a      	ldr	r2, [r7, #0]
 800235e:	4613      	mov	r3, r2
 8002360:	00db      	lsls	r3, r3, #3
 8002362:	4413      	add	r3, r2
 8002364:	009b      	lsls	r3, r3, #2
 8002366:	440b      	add	r3, r1
 8002368:	f503 7319 	add.w	r3, r3, #612	; 0x264
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d108      	bne.n	8002384 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6818      	ldr	r0, [r3, #0]
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 800237c:	461a      	mov	r2, r3
 800237e:	2100      	movs	r1, #0
 8002380:	f001 ff9c 	bl	80042bc <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	b2db      	uxtb	r3, r3
 8002388:	4619      	mov	r1, r3
 800238a:	6878      	ldr	r0, [r7, #4]
 800238c:	f004 fa6c 	bl	8006868 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002390:	2300      	movs	r3, #0
}
 8002392:	4618      	mov	r0, r3
 8002394:	3720      	adds	r7, #32
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}
 800239a:	bf00      	nop
 800239c:	4f54300a 	.word	0x4f54300a
 80023a0:	4f54310a 	.word	0x4f54310a

080023a4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b086      	sub	sp, #24
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
 80023ac:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80023b4:	697b      	ldr	r3, [r7, #20]
 80023b6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80023b8:	697b      	ldr	r3, [r7, #20]
 80023ba:	333c      	adds	r3, #60	; 0x3c
 80023bc:	3304      	adds	r3, #4
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	015a      	lsls	r2, r3, #5
 80023c6:	693b      	ldr	r3, [r7, #16]
 80023c8:	4413      	add	r3, r2
 80023ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023ce:	689b      	ldr	r3, [r3, #8]
 80023d0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	4a15      	ldr	r2, [pc, #84]	; (800242c <PCD_EP_OutSetupPacket_int+0x88>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d90e      	bls.n	80023f8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80023da:	68bb      	ldr	r3, [r7, #8]
 80023dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d009      	beq.n	80023f8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	015a      	lsls	r2, r3, #5
 80023e8:	693b      	ldr	r3, [r7, #16]
 80023ea:	4413      	add	r3, r2
 80023ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023f0:	461a      	mov	r2, r3
 80023f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80023f6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80023f8:	6878      	ldr	r0, [r7, #4]
 80023fa:	f004 fa23 	bl	8006844 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	4a0a      	ldr	r2, [pc, #40]	; (800242c <PCD_EP_OutSetupPacket_int+0x88>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d90c      	bls.n	8002420 <PCD_EP_OutSetupPacket_int+0x7c>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	799b      	ldrb	r3, [r3, #6]
 800240a:	2b01      	cmp	r3, #1
 800240c:	d108      	bne.n	8002420 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6818      	ldr	r0, [r3, #0]
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8002418:	461a      	mov	r2, r3
 800241a:	2101      	movs	r1, #1
 800241c:	f001 ff4e 	bl	80042bc <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002420:	2300      	movs	r3, #0
}
 8002422:	4618      	mov	r0, r3
 8002424:	3718      	adds	r7, #24
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}
 800242a:	bf00      	nop
 800242c:	4f54300a 	.word	0x4f54300a

08002430 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002430:	b480      	push	{r7}
 8002432:	b085      	sub	sp, #20
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
 8002438:	460b      	mov	r3, r1
 800243a:	70fb      	strb	r3, [r7, #3]
 800243c:	4613      	mov	r3, r2
 800243e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002446:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002448:	78fb      	ldrb	r3, [r7, #3]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d107      	bne.n	800245e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800244e:	883b      	ldrh	r3, [r7, #0]
 8002450:	0419      	lsls	r1, r3, #16
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	68ba      	ldr	r2, [r7, #8]
 8002458:	430a      	orrs	r2, r1
 800245a:	629a      	str	r2, [r3, #40]	; 0x28
 800245c:	e028      	b.n	80024b0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002464:	0c1b      	lsrs	r3, r3, #16
 8002466:	68ba      	ldr	r2, [r7, #8]
 8002468:	4413      	add	r3, r2
 800246a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800246c:	2300      	movs	r3, #0
 800246e:	73fb      	strb	r3, [r7, #15]
 8002470:	e00d      	b.n	800248e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681a      	ldr	r2, [r3, #0]
 8002476:	7bfb      	ldrb	r3, [r7, #15]
 8002478:	3340      	adds	r3, #64	; 0x40
 800247a:	009b      	lsls	r3, r3, #2
 800247c:	4413      	add	r3, r2
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	0c1b      	lsrs	r3, r3, #16
 8002482:	68ba      	ldr	r2, [r7, #8]
 8002484:	4413      	add	r3, r2
 8002486:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002488:	7bfb      	ldrb	r3, [r7, #15]
 800248a:	3301      	adds	r3, #1
 800248c:	73fb      	strb	r3, [r7, #15]
 800248e:	7bfa      	ldrb	r2, [r7, #15]
 8002490:	78fb      	ldrb	r3, [r7, #3]
 8002492:	3b01      	subs	r3, #1
 8002494:	429a      	cmp	r2, r3
 8002496:	d3ec      	bcc.n	8002472 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002498:	883b      	ldrh	r3, [r7, #0]
 800249a:	0418      	lsls	r0, r3, #16
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6819      	ldr	r1, [r3, #0]
 80024a0:	78fb      	ldrb	r3, [r7, #3]
 80024a2:	3b01      	subs	r3, #1
 80024a4:	68ba      	ldr	r2, [r7, #8]
 80024a6:	4302      	orrs	r2, r0
 80024a8:	3340      	adds	r3, #64	; 0x40
 80024aa:	009b      	lsls	r3, r3, #2
 80024ac:	440b      	add	r3, r1
 80024ae:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80024b0:	2300      	movs	r3, #0
}
 80024b2:	4618      	mov	r0, r3
 80024b4:	3714      	adds	r7, #20
 80024b6:	46bd      	mov	sp, r7
 80024b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024bc:	4770      	bx	lr

080024be <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80024be:	b480      	push	{r7}
 80024c0:	b083      	sub	sp, #12
 80024c2:	af00      	add	r7, sp, #0
 80024c4:	6078      	str	r0, [r7, #4]
 80024c6:	460b      	mov	r3, r1
 80024c8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	887a      	ldrh	r2, [r7, #2]
 80024d0:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80024d2:	2300      	movs	r3, #0
}
 80024d4:	4618      	mov	r0, r3
 80024d6:	370c      	adds	r7, #12
 80024d8:	46bd      	mov	sp, r7
 80024da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024de:	4770      	bx	lr

080024e0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80024e0:	b480      	push	{r7}
 80024e2:	b083      	sub	sp, #12
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
 80024e8:	460b      	mov	r3, r1
 80024ea:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80024ec:	bf00      	nop
 80024ee:	370c      	adds	r7, #12
 80024f0:	46bd      	mov	sp, r7
 80024f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f6:	4770      	bx	lr

080024f8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b086      	sub	sp, #24
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d101      	bne.n	800250a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002506:	2301      	movs	r3, #1
 8002508:	e267      	b.n	80029da <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f003 0301 	and.w	r3, r3, #1
 8002512:	2b00      	cmp	r3, #0
 8002514:	d075      	beq.n	8002602 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002516:	4b88      	ldr	r3, [pc, #544]	; (8002738 <HAL_RCC_OscConfig+0x240>)
 8002518:	689b      	ldr	r3, [r3, #8]
 800251a:	f003 030c 	and.w	r3, r3, #12
 800251e:	2b04      	cmp	r3, #4
 8002520:	d00c      	beq.n	800253c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002522:	4b85      	ldr	r3, [pc, #532]	; (8002738 <HAL_RCC_OscConfig+0x240>)
 8002524:	689b      	ldr	r3, [r3, #8]
 8002526:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800252a:	2b08      	cmp	r3, #8
 800252c:	d112      	bne.n	8002554 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800252e:	4b82      	ldr	r3, [pc, #520]	; (8002738 <HAL_RCC_OscConfig+0x240>)
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002536:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800253a:	d10b      	bne.n	8002554 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800253c:	4b7e      	ldr	r3, [pc, #504]	; (8002738 <HAL_RCC_OscConfig+0x240>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002544:	2b00      	cmp	r3, #0
 8002546:	d05b      	beq.n	8002600 <HAL_RCC_OscConfig+0x108>
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d157      	bne.n	8002600 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002550:	2301      	movs	r3, #1
 8002552:	e242      	b.n	80029da <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800255c:	d106      	bne.n	800256c <HAL_RCC_OscConfig+0x74>
 800255e:	4b76      	ldr	r3, [pc, #472]	; (8002738 <HAL_RCC_OscConfig+0x240>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4a75      	ldr	r2, [pc, #468]	; (8002738 <HAL_RCC_OscConfig+0x240>)
 8002564:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002568:	6013      	str	r3, [r2, #0]
 800256a:	e01d      	b.n	80025a8 <HAL_RCC_OscConfig+0xb0>
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002574:	d10c      	bne.n	8002590 <HAL_RCC_OscConfig+0x98>
 8002576:	4b70      	ldr	r3, [pc, #448]	; (8002738 <HAL_RCC_OscConfig+0x240>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4a6f      	ldr	r2, [pc, #444]	; (8002738 <HAL_RCC_OscConfig+0x240>)
 800257c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002580:	6013      	str	r3, [r2, #0]
 8002582:	4b6d      	ldr	r3, [pc, #436]	; (8002738 <HAL_RCC_OscConfig+0x240>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4a6c      	ldr	r2, [pc, #432]	; (8002738 <HAL_RCC_OscConfig+0x240>)
 8002588:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800258c:	6013      	str	r3, [r2, #0]
 800258e:	e00b      	b.n	80025a8 <HAL_RCC_OscConfig+0xb0>
 8002590:	4b69      	ldr	r3, [pc, #420]	; (8002738 <HAL_RCC_OscConfig+0x240>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4a68      	ldr	r2, [pc, #416]	; (8002738 <HAL_RCC_OscConfig+0x240>)
 8002596:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800259a:	6013      	str	r3, [r2, #0]
 800259c:	4b66      	ldr	r3, [pc, #408]	; (8002738 <HAL_RCC_OscConfig+0x240>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4a65      	ldr	r2, [pc, #404]	; (8002738 <HAL_RCC_OscConfig+0x240>)
 80025a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d013      	beq.n	80025d8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025b0:	f7fe fa8c 	bl	8000acc <HAL_GetTick>
 80025b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025b6:	e008      	b.n	80025ca <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80025b8:	f7fe fa88 	bl	8000acc <HAL_GetTick>
 80025bc:	4602      	mov	r2, r0
 80025be:	693b      	ldr	r3, [r7, #16]
 80025c0:	1ad3      	subs	r3, r2, r3
 80025c2:	2b64      	cmp	r3, #100	; 0x64
 80025c4:	d901      	bls.n	80025ca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80025c6:	2303      	movs	r3, #3
 80025c8:	e207      	b.n	80029da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025ca:	4b5b      	ldr	r3, [pc, #364]	; (8002738 <HAL_RCC_OscConfig+0x240>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d0f0      	beq.n	80025b8 <HAL_RCC_OscConfig+0xc0>
 80025d6:	e014      	b.n	8002602 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025d8:	f7fe fa78 	bl	8000acc <HAL_GetTick>
 80025dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025de:	e008      	b.n	80025f2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80025e0:	f7fe fa74 	bl	8000acc <HAL_GetTick>
 80025e4:	4602      	mov	r2, r0
 80025e6:	693b      	ldr	r3, [r7, #16]
 80025e8:	1ad3      	subs	r3, r2, r3
 80025ea:	2b64      	cmp	r3, #100	; 0x64
 80025ec:	d901      	bls.n	80025f2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80025ee:	2303      	movs	r3, #3
 80025f0:	e1f3      	b.n	80029da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025f2:	4b51      	ldr	r3, [pc, #324]	; (8002738 <HAL_RCC_OscConfig+0x240>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d1f0      	bne.n	80025e0 <HAL_RCC_OscConfig+0xe8>
 80025fe:	e000      	b.n	8002602 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002600:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f003 0302 	and.w	r3, r3, #2
 800260a:	2b00      	cmp	r3, #0
 800260c:	d063      	beq.n	80026d6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800260e:	4b4a      	ldr	r3, [pc, #296]	; (8002738 <HAL_RCC_OscConfig+0x240>)
 8002610:	689b      	ldr	r3, [r3, #8]
 8002612:	f003 030c 	and.w	r3, r3, #12
 8002616:	2b00      	cmp	r3, #0
 8002618:	d00b      	beq.n	8002632 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800261a:	4b47      	ldr	r3, [pc, #284]	; (8002738 <HAL_RCC_OscConfig+0x240>)
 800261c:	689b      	ldr	r3, [r3, #8]
 800261e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002622:	2b08      	cmp	r3, #8
 8002624:	d11c      	bne.n	8002660 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002626:	4b44      	ldr	r3, [pc, #272]	; (8002738 <HAL_RCC_OscConfig+0x240>)
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800262e:	2b00      	cmp	r3, #0
 8002630:	d116      	bne.n	8002660 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002632:	4b41      	ldr	r3, [pc, #260]	; (8002738 <HAL_RCC_OscConfig+0x240>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f003 0302 	and.w	r3, r3, #2
 800263a:	2b00      	cmp	r3, #0
 800263c:	d005      	beq.n	800264a <HAL_RCC_OscConfig+0x152>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	68db      	ldr	r3, [r3, #12]
 8002642:	2b01      	cmp	r3, #1
 8002644:	d001      	beq.n	800264a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002646:	2301      	movs	r3, #1
 8002648:	e1c7      	b.n	80029da <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800264a:	4b3b      	ldr	r3, [pc, #236]	; (8002738 <HAL_RCC_OscConfig+0x240>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	691b      	ldr	r3, [r3, #16]
 8002656:	00db      	lsls	r3, r3, #3
 8002658:	4937      	ldr	r1, [pc, #220]	; (8002738 <HAL_RCC_OscConfig+0x240>)
 800265a:	4313      	orrs	r3, r2
 800265c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800265e:	e03a      	b.n	80026d6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	68db      	ldr	r3, [r3, #12]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d020      	beq.n	80026aa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002668:	4b34      	ldr	r3, [pc, #208]	; (800273c <HAL_RCC_OscConfig+0x244>)
 800266a:	2201      	movs	r2, #1
 800266c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800266e:	f7fe fa2d 	bl	8000acc <HAL_GetTick>
 8002672:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002674:	e008      	b.n	8002688 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002676:	f7fe fa29 	bl	8000acc <HAL_GetTick>
 800267a:	4602      	mov	r2, r0
 800267c:	693b      	ldr	r3, [r7, #16]
 800267e:	1ad3      	subs	r3, r2, r3
 8002680:	2b02      	cmp	r3, #2
 8002682:	d901      	bls.n	8002688 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002684:	2303      	movs	r3, #3
 8002686:	e1a8      	b.n	80029da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002688:	4b2b      	ldr	r3, [pc, #172]	; (8002738 <HAL_RCC_OscConfig+0x240>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f003 0302 	and.w	r3, r3, #2
 8002690:	2b00      	cmp	r3, #0
 8002692:	d0f0      	beq.n	8002676 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002694:	4b28      	ldr	r3, [pc, #160]	; (8002738 <HAL_RCC_OscConfig+0x240>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	691b      	ldr	r3, [r3, #16]
 80026a0:	00db      	lsls	r3, r3, #3
 80026a2:	4925      	ldr	r1, [pc, #148]	; (8002738 <HAL_RCC_OscConfig+0x240>)
 80026a4:	4313      	orrs	r3, r2
 80026a6:	600b      	str	r3, [r1, #0]
 80026a8:	e015      	b.n	80026d6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026aa:	4b24      	ldr	r3, [pc, #144]	; (800273c <HAL_RCC_OscConfig+0x244>)
 80026ac:	2200      	movs	r2, #0
 80026ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026b0:	f7fe fa0c 	bl	8000acc <HAL_GetTick>
 80026b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026b6:	e008      	b.n	80026ca <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80026b8:	f7fe fa08 	bl	8000acc <HAL_GetTick>
 80026bc:	4602      	mov	r2, r0
 80026be:	693b      	ldr	r3, [r7, #16]
 80026c0:	1ad3      	subs	r3, r2, r3
 80026c2:	2b02      	cmp	r3, #2
 80026c4:	d901      	bls.n	80026ca <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80026c6:	2303      	movs	r3, #3
 80026c8:	e187      	b.n	80029da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026ca:	4b1b      	ldr	r3, [pc, #108]	; (8002738 <HAL_RCC_OscConfig+0x240>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f003 0302 	and.w	r3, r3, #2
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d1f0      	bne.n	80026b8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f003 0308 	and.w	r3, r3, #8
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d036      	beq.n	8002750 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	695b      	ldr	r3, [r3, #20]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d016      	beq.n	8002718 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026ea:	4b15      	ldr	r3, [pc, #84]	; (8002740 <HAL_RCC_OscConfig+0x248>)
 80026ec:	2201      	movs	r2, #1
 80026ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026f0:	f7fe f9ec 	bl	8000acc <HAL_GetTick>
 80026f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026f6:	e008      	b.n	800270a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026f8:	f7fe f9e8 	bl	8000acc <HAL_GetTick>
 80026fc:	4602      	mov	r2, r0
 80026fe:	693b      	ldr	r3, [r7, #16]
 8002700:	1ad3      	subs	r3, r2, r3
 8002702:	2b02      	cmp	r3, #2
 8002704:	d901      	bls.n	800270a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002706:	2303      	movs	r3, #3
 8002708:	e167      	b.n	80029da <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800270a:	4b0b      	ldr	r3, [pc, #44]	; (8002738 <HAL_RCC_OscConfig+0x240>)
 800270c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800270e:	f003 0302 	and.w	r3, r3, #2
 8002712:	2b00      	cmp	r3, #0
 8002714:	d0f0      	beq.n	80026f8 <HAL_RCC_OscConfig+0x200>
 8002716:	e01b      	b.n	8002750 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002718:	4b09      	ldr	r3, [pc, #36]	; (8002740 <HAL_RCC_OscConfig+0x248>)
 800271a:	2200      	movs	r2, #0
 800271c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800271e:	f7fe f9d5 	bl	8000acc <HAL_GetTick>
 8002722:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002724:	e00e      	b.n	8002744 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002726:	f7fe f9d1 	bl	8000acc <HAL_GetTick>
 800272a:	4602      	mov	r2, r0
 800272c:	693b      	ldr	r3, [r7, #16]
 800272e:	1ad3      	subs	r3, r2, r3
 8002730:	2b02      	cmp	r3, #2
 8002732:	d907      	bls.n	8002744 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002734:	2303      	movs	r3, #3
 8002736:	e150      	b.n	80029da <HAL_RCC_OscConfig+0x4e2>
 8002738:	40023800 	.word	0x40023800
 800273c:	42470000 	.word	0x42470000
 8002740:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002744:	4b88      	ldr	r3, [pc, #544]	; (8002968 <HAL_RCC_OscConfig+0x470>)
 8002746:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002748:	f003 0302 	and.w	r3, r3, #2
 800274c:	2b00      	cmp	r3, #0
 800274e:	d1ea      	bne.n	8002726 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f003 0304 	and.w	r3, r3, #4
 8002758:	2b00      	cmp	r3, #0
 800275a:	f000 8097 	beq.w	800288c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800275e:	2300      	movs	r3, #0
 8002760:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002762:	4b81      	ldr	r3, [pc, #516]	; (8002968 <HAL_RCC_OscConfig+0x470>)
 8002764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002766:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800276a:	2b00      	cmp	r3, #0
 800276c:	d10f      	bne.n	800278e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800276e:	2300      	movs	r3, #0
 8002770:	60bb      	str	r3, [r7, #8]
 8002772:	4b7d      	ldr	r3, [pc, #500]	; (8002968 <HAL_RCC_OscConfig+0x470>)
 8002774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002776:	4a7c      	ldr	r2, [pc, #496]	; (8002968 <HAL_RCC_OscConfig+0x470>)
 8002778:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800277c:	6413      	str	r3, [r2, #64]	; 0x40
 800277e:	4b7a      	ldr	r3, [pc, #488]	; (8002968 <HAL_RCC_OscConfig+0x470>)
 8002780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002782:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002786:	60bb      	str	r3, [r7, #8]
 8002788:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800278a:	2301      	movs	r3, #1
 800278c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800278e:	4b77      	ldr	r3, [pc, #476]	; (800296c <HAL_RCC_OscConfig+0x474>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002796:	2b00      	cmp	r3, #0
 8002798:	d118      	bne.n	80027cc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800279a:	4b74      	ldr	r3, [pc, #464]	; (800296c <HAL_RCC_OscConfig+0x474>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4a73      	ldr	r2, [pc, #460]	; (800296c <HAL_RCC_OscConfig+0x474>)
 80027a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027a6:	f7fe f991 	bl	8000acc <HAL_GetTick>
 80027aa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027ac:	e008      	b.n	80027c0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027ae:	f7fe f98d 	bl	8000acc <HAL_GetTick>
 80027b2:	4602      	mov	r2, r0
 80027b4:	693b      	ldr	r3, [r7, #16]
 80027b6:	1ad3      	subs	r3, r2, r3
 80027b8:	2b02      	cmp	r3, #2
 80027ba:	d901      	bls.n	80027c0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80027bc:	2303      	movs	r3, #3
 80027be:	e10c      	b.n	80029da <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027c0:	4b6a      	ldr	r3, [pc, #424]	; (800296c <HAL_RCC_OscConfig+0x474>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d0f0      	beq.n	80027ae <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	689b      	ldr	r3, [r3, #8]
 80027d0:	2b01      	cmp	r3, #1
 80027d2:	d106      	bne.n	80027e2 <HAL_RCC_OscConfig+0x2ea>
 80027d4:	4b64      	ldr	r3, [pc, #400]	; (8002968 <HAL_RCC_OscConfig+0x470>)
 80027d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027d8:	4a63      	ldr	r2, [pc, #396]	; (8002968 <HAL_RCC_OscConfig+0x470>)
 80027da:	f043 0301 	orr.w	r3, r3, #1
 80027de:	6713      	str	r3, [r2, #112]	; 0x70
 80027e0:	e01c      	b.n	800281c <HAL_RCC_OscConfig+0x324>
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	689b      	ldr	r3, [r3, #8]
 80027e6:	2b05      	cmp	r3, #5
 80027e8:	d10c      	bne.n	8002804 <HAL_RCC_OscConfig+0x30c>
 80027ea:	4b5f      	ldr	r3, [pc, #380]	; (8002968 <HAL_RCC_OscConfig+0x470>)
 80027ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027ee:	4a5e      	ldr	r2, [pc, #376]	; (8002968 <HAL_RCC_OscConfig+0x470>)
 80027f0:	f043 0304 	orr.w	r3, r3, #4
 80027f4:	6713      	str	r3, [r2, #112]	; 0x70
 80027f6:	4b5c      	ldr	r3, [pc, #368]	; (8002968 <HAL_RCC_OscConfig+0x470>)
 80027f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027fa:	4a5b      	ldr	r2, [pc, #364]	; (8002968 <HAL_RCC_OscConfig+0x470>)
 80027fc:	f043 0301 	orr.w	r3, r3, #1
 8002800:	6713      	str	r3, [r2, #112]	; 0x70
 8002802:	e00b      	b.n	800281c <HAL_RCC_OscConfig+0x324>
 8002804:	4b58      	ldr	r3, [pc, #352]	; (8002968 <HAL_RCC_OscConfig+0x470>)
 8002806:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002808:	4a57      	ldr	r2, [pc, #348]	; (8002968 <HAL_RCC_OscConfig+0x470>)
 800280a:	f023 0301 	bic.w	r3, r3, #1
 800280e:	6713      	str	r3, [r2, #112]	; 0x70
 8002810:	4b55      	ldr	r3, [pc, #340]	; (8002968 <HAL_RCC_OscConfig+0x470>)
 8002812:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002814:	4a54      	ldr	r2, [pc, #336]	; (8002968 <HAL_RCC_OscConfig+0x470>)
 8002816:	f023 0304 	bic.w	r3, r3, #4
 800281a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	689b      	ldr	r3, [r3, #8]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d015      	beq.n	8002850 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002824:	f7fe f952 	bl	8000acc <HAL_GetTick>
 8002828:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800282a:	e00a      	b.n	8002842 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800282c:	f7fe f94e 	bl	8000acc <HAL_GetTick>
 8002830:	4602      	mov	r2, r0
 8002832:	693b      	ldr	r3, [r7, #16]
 8002834:	1ad3      	subs	r3, r2, r3
 8002836:	f241 3288 	movw	r2, #5000	; 0x1388
 800283a:	4293      	cmp	r3, r2
 800283c:	d901      	bls.n	8002842 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800283e:	2303      	movs	r3, #3
 8002840:	e0cb      	b.n	80029da <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002842:	4b49      	ldr	r3, [pc, #292]	; (8002968 <HAL_RCC_OscConfig+0x470>)
 8002844:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002846:	f003 0302 	and.w	r3, r3, #2
 800284a:	2b00      	cmp	r3, #0
 800284c:	d0ee      	beq.n	800282c <HAL_RCC_OscConfig+0x334>
 800284e:	e014      	b.n	800287a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002850:	f7fe f93c 	bl	8000acc <HAL_GetTick>
 8002854:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002856:	e00a      	b.n	800286e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002858:	f7fe f938 	bl	8000acc <HAL_GetTick>
 800285c:	4602      	mov	r2, r0
 800285e:	693b      	ldr	r3, [r7, #16]
 8002860:	1ad3      	subs	r3, r2, r3
 8002862:	f241 3288 	movw	r2, #5000	; 0x1388
 8002866:	4293      	cmp	r3, r2
 8002868:	d901      	bls.n	800286e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800286a:	2303      	movs	r3, #3
 800286c:	e0b5      	b.n	80029da <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800286e:	4b3e      	ldr	r3, [pc, #248]	; (8002968 <HAL_RCC_OscConfig+0x470>)
 8002870:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002872:	f003 0302 	and.w	r3, r3, #2
 8002876:	2b00      	cmp	r3, #0
 8002878:	d1ee      	bne.n	8002858 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800287a:	7dfb      	ldrb	r3, [r7, #23]
 800287c:	2b01      	cmp	r3, #1
 800287e:	d105      	bne.n	800288c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002880:	4b39      	ldr	r3, [pc, #228]	; (8002968 <HAL_RCC_OscConfig+0x470>)
 8002882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002884:	4a38      	ldr	r2, [pc, #224]	; (8002968 <HAL_RCC_OscConfig+0x470>)
 8002886:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800288a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	699b      	ldr	r3, [r3, #24]
 8002890:	2b00      	cmp	r3, #0
 8002892:	f000 80a1 	beq.w	80029d8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002896:	4b34      	ldr	r3, [pc, #208]	; (8002968 <HAL_RCC_OscConfig+0x470>)
 8002898:	689b      	ldr	r3, [r3, #8]
 800289a:	f003 030c 	and.w	r3, r3, #12
 800289e:	2b08      	cmp	r3, #8
 80028a0:	d05c      	beq.n	800295c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	699b      	ldr	r3, [r3, #24]
 80028a6:	2b02      	cmp	r3, #2
 80028a8:	d141      	bne.n	800292e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028aa:	4b31      	ldr	r3, [pc, #196]	; (8002970 <HAL_RCC_OscConfig+0x478>)
 80028ac:	2200      	movs	r2, #0
 80028ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028b0:	f7fe f90c 	bl	8000acc <HAL_GetTick>
 80028b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028b6:	e008      	b.n	80028ca <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028b8:	f7fe f908 	bl	8000acc <HAL_GetTick>
 80028bc:	4602      	mov	r2, r0
 80028be:	693b      	ldr	r3, [r7, #16]
 80028c0:	1ad3      	subs	r3, r2, r3
 80028c2:	2b02      	cmp	r3, #2
 80028c4:	d901      	bls.n	80028ca <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80028c6:	2303      	movs	r3, #3
 80028c8:	e087      	b.n	80029da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028ca:	4b27      	ldr	r3, [pc, #156]	; (8002968 <HAL_RCC_OscConfig+0x470>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d1f0      	bne.n	80028b8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	69da      	ldr	r2, [r3, #28]
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6a1b      	ldr	r3, [r3, #32]
 80028de:	431a      	orrs	r2, r3
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028e4:	019b      	lsls	r3, r3, #6
 80028e6:	431a      	orrs	r2, r3
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028ec:	085b      	lsrs	r3, r3, #1
 80028ee:	3b01      	subs	r3, #1
 80028f0:	041b      	lsls	r3, r3, #16
 80028f2:	431a      	orrs	r2, r3
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028f8:	061b      	lsls	r3, r3, #24
 80028fa:	491b      	ldr	r1, [pc, #108]	; (8002968 <HAL_RCC_OscConfig+0x470>)
 80028fc:	4313      	orrs	r3, r2
 80028fe:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002900:	4b1b      	ldr	r3, [pc, #108]	; (8002970 <HAL_RCC_OscConfig+0x478>)
 8002902:	2201      	movs	r2, #1
 8002904:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002906:	f7fe f8e1 	bl	8000acc <HAL_GetTick>
 800290a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800290c:	e008      	b.n	8002920 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800290e:	f7fe f8dd 	bl	8000acc <HAL_GetTick>
 8002912:	4602      	mov	r2, r0
 8002914:	693b      	ldr	r3, [r7, #16]
 8002916:	1ad3      	subs	r3, r2, r3
 8002918:	2b02      	cmp	r3, #2
 800291a:	d901      	bls.n	8002920 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800291c:	2303      	movs	r3, #3
 800291e:	e05c      	b.n	80029da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002920:	4b11      	ldr	r3, [pc, #68]	; (8002968 <HAL_RCC_OscConfig+0x470>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002928:	2b00      	cmp	r3, #0
 800292a:	d0f0      	beq.n	800290e <HAL_RCC_OscConfig+0x416>
 800292c:	e054      	b.n	80029d8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800292e:	4b10      	ldr	r3, [pc, #64]	; (8002970 <HAL_RCC_OscConfig+0x478>)
 8002930:	2200      	movs	r2, #0
 8002932:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002934:	f7fe f8ca 	bl	8000acc <HAL_GetTick>
 8002938:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800293a:	e008      	b.n	800294e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800293c:	f7fe f8c6 	bl	8000acc <HAL_GetTick>
 8002940:	4602      	mov	r2, r0
 8002942:	693b      	ldr	r3, [r7, #16]
 8002944:	1ad3      	subs	r3, r2, r3
 8002946:	2b02      	cmp	r3, #2
 8002948:	d901      	bls.n	800294e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800294a:	2303      	movs	r3, #3
 800294c:	e045      	b.n	80029da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800294e:	4b06      	ldr	r3, [pc, #24]	; (8002968 <HAL_RCC_OscConfig+0x470>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002956:	2b00      	cmp	r3, #0
 8002958:	d1f0      	bne.n	800293c <HAL_RCC_OscConfig+0x444>
 800295a:	e03d      	b.n	80029d8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	699b      	ldr	r3, [r3, #24]
 8002960:	2b01      	cmp	r3, #1
 8002962:	d107      	bne.n	8002974 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002964:	2301      	movs	r3, #1
 8002966:	e038      	b.n	80029da <HAL_RCC_OscConfig+0x4e2>
 8002968:	40023800 	.word	0x40023800
 800296c:	40007000 	.word	0x40007000
 8002970:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002974:	4b1b      	ldr	r3, [pc, #108]	; (80029e4 <HAL_RCC_OscConfig+0x4ec>)
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	699b      	ldr	r3, [r3, #24]
 800297e:	2b01      	cmp	r3, #1
 8002980:	d028      	beq.n	80029d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800298c:	429a      	cmp	r2, r3
 800298e:	d121      	bne.n	80029d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800299a:	429a      	cmp	r2, r3
 800299c:	d11a      	bne.n	80029d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800299e:	68fa      	ldr	r2, [r7, #12]
 80029a0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80029a4:	4013      	ands	r3, r2
 80029a6:	687a      	ldr	r2, [r7, #4]
 80029a8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80029aa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80029ac:	4293      	cmp	r3, r2
 80029ae:	d111      	bne.n	80029d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029ba:	085b      	lsrs	r3, r3, #1
 80029bc:	3b01      	subs	r3, #1
 80029be:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80029c0:	429a      	cmp	r2, r3
 80029c2:	d107      	bne.n	80029d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029ce:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80029d0:	429a      	cmp	r2, r3
 80029d2:	d001      	beq.n	80029d8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80029d4:	2301      	movs	r3, #1
 80029d6:	e000      	b.n	80029da <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80029d8:	2300      	movs	r3, #0
}
 80029da:	4618      	mov	r0, r3
 80029dc:	3718      	adds	r7, #24
 80029de:	46bd      	mov	sp, r7
 80029e0:	bd80      	pop	{r7, pc}
 80029e2:	bf00      	nop
 80029e4:	40023800 	.word	0x40023800

080029e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b084      	sub	sp, #16
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
 80029f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d101      	bne.n	80029fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80029f8:	2301      	movs	r3, #1
 80029fa:	e0cc      	b.n	8002b96 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80029fc:	4b68      	ldr	r3, [pc, #416]	; (8002ba0 <HAL_RCC_ClockConfig+0x1b8>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f003 0307 	and.w	r3, r3, #7
 8002a04:	683a      	ldr	r2, [r7, #0]
 8002a06:	429a      	cmp	r2, r3
 8002a08:	d90c      	bls.n	8002a24 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a0a:	4b65      	ldr	r3, [pc, #404]	; (8002ba0 <HAL_RCC_ClockConfig+0x1b8>)
 8002a0c:	683a      	ldr	r2, [r7, #0]
 8002a0e:	b2d2      	uxtb	r2, r2
 8002a10:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a12:	4b63      	ldr	r3, [pc, #396]	; (8002ba0 <HAL_RCC_ClockConfig+0x1b8>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f003 0307 	and.w	r3, r3, #7
 8002a1a:	683a      	ldr	r2, [r7, #0]
 8002a1c:	429a      	cmp	r2, r3
 8002a1e:	d001      	beq.n	8002a24 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002a20:	2301      	movs	r3, #1
 8002a22:	e0b8      	b.n	8002b96 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f003 0302 	and.w	r3, r3, #2
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d020      	beq.n	8002a72 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f003 0304 	and.w	r3, r3, #4
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d005      	beq.n	8002a48 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a3c:	4b59      	ldr	r3, [pc, #356]	; (8002ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a3e:	689b      	ldr	r3, [r3, #8]
 8002a40:	4a58      	ldr	r2, [pc, #352]	; (8002ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a42:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002a46:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f003 0308 	and.w	r3, r3, #8
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d005      	beq.n	8002a60 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a54:	4b53      	ldr	r3, [pc, #332]	; (8002ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a56:	689b      	ldr	r3, [r3, #8]
 8002a58:	4a52      	ldr	r2, [pc, #328]	; (8002ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a5a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002a5e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a60:	4b50      	ldr	r3, [pc, #320]	; (8002ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a62:	689b      	ldr	r3, [r3, #8]
 8002a64:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	689b      	ldr	r3, [r3, #8]
 8002a6c:	494d      	ldr	r1, [pc, #308]	; (8002ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f003 0301 	and.w	r3, r3, #1
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d044      	beq.n	8002b08 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	2b01      	cmp	r3, #1
 8002a84:	d107      	bne.n	8002a96 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a86:	4b47      	ldr	r3, [pc, #284]	; (8002ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d119      	bne.n	8002ac6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a92:	2301      	movs	r3, #1
 8002a94:	e07f      	b.n	8002b96 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	2b02      	cmp	r3, #2
 8002a9c:	d003      	beq.n	8002aa6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002aa2:	2b03      	cmp	r3, #3
 8002aa4:	d107      	bne.n	8002ab6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002aa6:	4b3f      	ldr	r3, [pc, #252]	; (8002ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d109      	bne.n	8002ac6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	e06f      	b.n	8002b96 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ab6:	4b3b      	ldr	r3, [pc, #236]	; (8002ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f003 0302 	and.w	r3, r3, #2
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d101      	bne.n	8002ac6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	e067      	b.n	8002b96 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ac6:	4b37      	ldr	r3, [pc, #220]	; (8002ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ac8:	689b      	ldr	r3, [r3, #8]
 8002aca:	f023 0203 	bic.w	r2, r3, #3
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	4934      	ldr	r1, [pc, #208]	; (8002ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ad4:	4313      	orrs	r3, r2
 8002ad6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ad8:	f7fd fff8 	bl	8000acc <HAL_GetTick>
 8002adc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ade:	e00a      	b.n	8002af6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ae0:	f7fd fff4 	bl	8000acc <HAL_GetTick>
 8002ae4:	4602      	mov	r2, r0
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	1ad3      	subs	r3, r2, r3
 8002aea:	f241 3288 	movw	r2, #5000	; 0x1388
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d901      	bls.n	8002af6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002af2:	2303      	movs	r3, #3
 8002af4:	e04f      	b.n	8002b96 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002af6:	4b2b      	ldr	r3, [pc, #172]	; (8002ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8002af8:	689b      	ldr	r3, [r3, #8]
 8002afa:	f003 020c 	and.w	r2, r3, #12
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	009b      	lsls	r3, r3, #2
 8002b04:	429a      	cmp	r2, r3
 8002b06:	d1eb      	bne.n	8002ae0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b08:	4b25      	ldr	r3, [pc, #148]	; (8002ba0 <HAL_RCC_ClockConfig+0x1b8>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f003 0307 	and.w	r3, r3, #7
 8002b10:	683a      	ldr	r2, [r7, #0]
 8002b12:	429a      	cmp	r2, r3
 8002b14:	d20c      	bcs.n	8002b30 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b16:	4b22      	ldr	r3, [pc, #136]	; (8002ba0 <HAL_RCC_ClockConfig+0x1b8>)
 8002b18:	683a      	ldr	r2, [r7, #0]
 8002b1a:	b2d2      	uxtb	r2, r2
 8002b1c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b1e:	4b20      	ldr	r3, [pc, #128]	; (8002ba0 <HAL_RCC_ClockConfig+0x1b8>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f003 0307 	and.w	r3, r3, #7
 8002b26:	683a      	ldr	r2, [r7, #0]
 8002b28:	429a      	cmp	r2, r3
 8002b2a:	d001      	beq.n	8002b30 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	e032      	b.n	8002b96 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f003 0304 	and.w	r3, r3, #4
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d008      	beq.n	8002b4e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b3c:	4b19      	ldr	r3, [pc, #100]	; (8002ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b3e:	689b      	ldr	r3, [r3, #8]
 8002b40:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	68db      	ldr	r3, [r3, #12]
 8002b48:	4916      	ldr	r1, [pc, #88]	; (8002ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b4a:	4313      	orrs	r3, r2
 8002b4c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f003 0308 	and.w	r3, r3, #8
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d009      	beq.n	8002b6e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b5a:	4b12      	ldr	r3, [pc, #72]	; (8002ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b5c:	689b      	ldr	r3, [r3, #8]
 8002b5e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	691b      	ldr	r3, [r3, #16]
 8002b66:	00db      	lsls	r3, r3, #3
 8002b68:	490e      	ldr	r1, [pc, #56]	; (8002ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b6a:	4313      	orrs	r3, r2
 8002b6c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002b6e:	f000 f821 	bl	8002bb4 <HAL_RCC_GetSysClockFreq>
 8002b72:	4602      	mov	r2, r0
 8002b74:	4b0b      	ldr	r3, [pc, #44]	; (8002ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b76:	689b      	ldr	r3, [r3, #8]
 8002b78:	091b      	lsrs	r3, r3, #4
 8002b7a:	f003 030f 	and.w	r3, r3, #15
 8002b7e:	490a      	ldr	r1, [pc, #40]	; (8002ba8 <HAL_RCC_ClockConfig+0x1c0>)
 8002b80:	5ccb      	ldrb	r3, [r1, r3]
 8002b82:	fa22 f303 	lsr.w	r3, r2, r3
 8002b86:	4a09      	ldr	r2, [pc, #36]	; (8002bac <HAL_RCC_ClockConfig+0x1c4>)
 8002b88:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002b8a:	4b09      	ldr	r3, [pc, #36]	; (8002bb0 <HAL_RCC_ClockConfig+0x1c8>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4618      	mov	r0, r3
 8002b90:	f7fd ff58 	bl	8000a44 <HAL_InitTick>

  return HAL_OK;
 8002b94:	2300      	movs	r3, #0
}
 8002b96:	4618      	mov	r0, r3
 8002b98:	3710      	adds	r7, #16
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bd80      	pop	{r7, pc}
 8002b9e:	bf00      	nop
 8002ba0:	40023c00 	.word	0x40023c00
 8002ba4:	40023800 	.word	0x40023800
 8002ba8:	080077a0 	.word	0x080077a0
 8002bac:	20000000 	.word	0x20000000
 8002bb0:	20000004 	.word	0x20000004

08002bb4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002bb4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002bb8:	b090      	sub	sp, #64	; 0x40
 8002bba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	637b      	str	r3, [r7, #52]	; 0x34
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002bc8:	2300      	movs	r3, #0
 8002bca:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002bcc:	4b59      	ldr	r3, [pc, #356]	; (8002d34 <HAL_RCC_GetSysClockFreq+0x180>)
 8002bce:	689b      	ldr	r3, [r3, #8]
 8002bd0:	f003 030c 	and.w	r3, r3, #12
 8002bd4:	2b08      	cmp	r3, #8
 8002bd6:	d00d      	beq.n	8002bf4 <HAL_RCC_GetSysClockFreq+0x40>
 8002bd8:	2b08      	cmp	r3, #8
 8002bda:	f200 80a1 	bhi.w	8002d20 <HAL_RCC_GetSysClockFreq+0x16c>
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d002      	beq.n	8002be8 <HAL_RCC_GetSysClockFreq+0x34>
 8002be2:	2b04      	cmp	r3, #4
 8002be4:	d003      	beq.n	8002bee <HAL_RCC_GetSysClockFreq+0x3a>
 8002be6:	e09b      	b.n	8002d20 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002be8:	4b53      	ldr	r3, [pc, #332]	; (8002d38 <HAL_RCC_GetSysClockFreq+0x184>)
 8002bea:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002bec:	e09b      	b.n	8002d26 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002bee:	4b53      	ldr	r3, [pc, #332]	; (8002d3c <HAL_RCC_GetSysClockFreq+0x188>)
 8002bf0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002bf2:	e098      	b.n	8002d26 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002bf4:	4b4f      	ldr	r3, [pc, #316]	; (8002d34 <HAL_RCC_GetSysClockFreq+0x180>)
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002bfc:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002bfe:	4b4d      	ldr	r3, [pc, #308]	; (8002d34 <HAL_RCC_GetSysClockFreq+0x180>)
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d028      	beq.n	8002c5c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c0a:	4b4a      	ldr	r3, [pc, #296]	; (8002d34 <HAL_RCC_GetSysClockFreq+0x180>)
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	099b      	lsrs	r3, r3, #6
 8002c10:	2200      	movs	r2, #0
 8002c12:	623b      	str	r3, [r7, #32]
 8002c14:	627a      	str	r2, [r7, #36]	; 0x24
 8002c16:	6a3b      	ldr	r3, [r7, #32]
 8002c18:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002c1c:	2100      	movs	r1, #0
 8002c1e:	4b47      	ldr	r3, [pc, #284]	; (8002d3c <HAL_RCC_GetSysClockFreq+0x188>)
 8002c20:	fb03 f201 	mul.w	r2, r3, r1
 8002c24:	2300      	movs	r3, #0
 8002c26:	fb00 f303 	mul.w	r3, r0, r3
 8002c2a:	4413      	add	r3, r2
 8002c2c:	4a43      	ldr	r2, [pc, #268]	; (8002d3c <HAL_RCC_GetSysClockFreq+0x188>)
 8002c2e:	fba0 1202 	umull	r1, r2, r0, r2
 8002c32:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002c34:	460a      	mov	r2, r1
 8002c36:	62ba      	str	r2, [r7, #40]	; 0x28
 8002c38:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c3a:	4413      	add	r3, r2
 8002c3c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c40:	2200      	movs	r2, #0
 8002c42:	61bb      	str	r3, [r7, #24]
 8002c44:	61fa      	str	r2, [r7, #28]
 8002c46:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002c4a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002c4e:	f7fd fb17 	bl	8000280 <__aeabi_uldivmod>
 8002c52:	4602      	mov	r2, r0
 8002c54:	460b      	mov	r3, r1
 8002c56:	4613      	mov	r3, r2
 8002c58:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c5a:	e053      	b.n	8002d04 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c5c:	4b35      	ldr	r3, [pc, #212]	; (8002d34 <HAL_RCC_GetSysClockFreq+0x180>)
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	099b      	lsrs	r3, r3, #6
 8002c62:	2200      	movs	r2, #0
 8002c64:	613b      	str	r3, [r7, #16]
 8002c66:	617a      	str	r2, [r7, #20]
 8002c68:	693b      	ldr	r3, [r7, #16]
 8002c6a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002c6e:	f04f 0b00 	mov.w	fp, #0
 8002c72:	4652      	mov	r2, sl
 8002c74:	465b      	mov	r3, fp
 8002c76:	f04f 0000 	mov.w	r0, #0
 8002c7a:	f04f 0100 	mov.w	r1, #0
 8002c7e:	0159      	lsls	r1, r3, #5
 8002c80:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c84:	0150      	lsls	r0, r2, #5
 8002c86:	4602      	mov	r2, r0
 8002c88:	460b      	mov	r3, r1
 8002c8a:	ebb2 080a 	subs.w	r8, r2, sl
 8002c8e:	eb63 090b 	sbc.w	r9, r3, fp
 8002c92:	f04f 0200 	mov.w	r2, #0
 8002c96:	f04f 0300 	mov.w	r3, #0
 8002c9a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002c9e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002ca2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002ca6:	ebb2 0408 	subs.w	r4, r2, r8
 8002caa:	eb63 0509 	sbc.w	r5, r3, r9
 8002cae:	f04f 0200 	mov.w	r2, #0
 8002cb2:	f04f 0300 	mov.w	r3, #0
 8002cb6:	00eb      	lsls	r3, r5, #3
 8002cb8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002cbc:	00e2      	lsls	r2, r4, #3
 8002cbe:	4614      	mov	r4, r2
 8002cc0:	461d      	mov	r5, r3
 8002cc2:	eb14 030a 	adds.w	r3, r4, sl
 8002cc6:	603b      	str	r3, [r7, #0]
 8002cc8:	eb45 030b 	adc.w	r3, r5, fp
 8002ccc:	607b      	str	r3, [r7, #4]
 8002cce:	f04f 0200 	mov.w	r2, #0
 8002cd2:	f04f 0300 	mov.w	r3, #0
 8002cd6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002cda:	4629      	mov	r1, r5
 8002cdc:	028b      	lsls	r3, r1, #10
 8002cde:	4621      	mov	r1, r4
 8002ce0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002ce4:	4621      	mov	r1, r4
 8002ce6:	028a      	lsls	r2, r1, #10
 8002ce8:	4610      	mov	r0, r2
 8002cea:	4619      	mov	r1, r3
 8002cec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cee:	2200      	movs	r2, #0
 8002cf0:	60bb      	str	r3, [r7, #8]
 8002cf2:	60fa      	str	r2, [r7, #12]
 8002cf4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002cf8:	f7fd fac2 	bl	8000280 <__aeabi_uldivmod>
 8002cfc:	4602      	mov	r2, r0
 8002cfe:	460b      	mov	r3, r1
 8002d00:	4613      	mov	r3, r2
 8002d02:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002d04:	4b0b      	ldr	r3, [pc, #44]	; (8002d34 <HAL_RCC_GetSysClockFreq+0x180>)
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	0c1b      	lsrs	r3, r3, #16
 8002d0a:	f003 0303 	and.w	r3, r3, #3
 8002d0e:	3301      	adds	r3, #1
 8002d10:	005b      	lsls	r3, r3, #1
 8002d12:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002d14:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002d16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d18:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d1c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002d1e:	e002      	b.n	8002d26 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002d20:	4b05      	ldr	r3, [pc, #20]	; (8002d38 <HAL_RCC_GetSysClockFreq+0x184>)
 8002d22:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002d24:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002d28:	4618      	mov	r0, r3
 8002d2a:	3740      	adds	r7, #64	; 0x40
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002d32:	bf00      	nop
 8002d34:	40023800 	.word	0x40023800
 8002d38:	00f42400 	.word	0x00f42400
 8002d3c:	017d7840 	.word	0x017d7840

08002d40 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d40:	b480      	push	{r7}
 8002d42:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d44:	4b03      	ldr	r3, [pc, #12]	; (8002d54 <HAL_RCC_GetHCLKFreq+0x14>)
 8002d46:	681b      	ldr	r3, [r3, #0]
}
 8002d48:	4618      	mov	r0, r3
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d50:	4770      	bx	lr
 8002d52:	bf00      	nop
 8002d54:	20000000 	.word	0x20000000

08002d58 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002d58:	b084      	sub	sp, #16
 8002d5a:	b580      	push	{r7, lr}
 8002d5c:	b084      	sub	sp, #16
 8002d5e:	af00      	add	r7, sp, #0
 8002d60:	6078      	str	r0, [r7, #4]
 8002d62:	f107 001c 	add.w	r0, r7, #28
 8002d66:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002d6a:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8002d6e:	2b01      	cmp	r3, #1
 8002d70:	d123      	bne.n	8002dba <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d76:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	68db      	ldr	r3, [r3, #12]
 8002d82:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8002d86:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002d8a:	687a      	ldr	r2, [r7, #4]
 8002d8c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	68db      	ldr	r3, [r3, #12]
 8002d92:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8002d9a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002d9e:	2b01      	cmp	r3, #1
 8002da0:	d105      	bne.n	8002dae <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	68db      	ldr	r3, [r3, #12]
 8002da6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002dae:	6878      	ldr	r0, [r7, #4]
 8002db0:	f001 fae2 	bl	8004378 <USB_CoreReset>
 8002db4:	4603      	mov	r3, r0
 8002db6:	73fb      	strb	r3, [r7, #15]
 8002db8:	e01b      	b.n	8002df2 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	68db      	ldr	r3, [r3, #12]
 8002dbe:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002dc6:	6878      	ldr	r0, [r7, #4]
 8002dc8:	f001 fad6 	bl	8004378 <USB_CoreReset>
 8002dcc:	4603      	mov	r3, r0
 8002dce:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8002dd0:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d106      	bne.n	8002de6 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ddc:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	639a      	str	r2, [r3, #56]	; 0x38
 8002de4:	e005      	b.n	8002df2 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dea:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8002df2:	7fbb      	ldrb	r3, [r7, #30]
 8002df4:	2b01      	cmp	r3, #1
 8002df6:	d10b      	bne.n	8002e10 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	689b      	ldr	r3, [r3, #8]
 8002dfc:	f043 0206 	orr.w	r2, r3, #6
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	689b      	ldr	r3, [r3, #8]
 8002e08:	f043 0220 	orr.w	r2, r3, #32
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8002e10:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e12:	4618      	mov	r0, r3
 8002e14:	3710      	adds	r7, #16
 8002e16:	46bd      	mov	sp, r7
 8002e18:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002e1c:	b004      	add	sp, #16
 8002e1e:	4770      	bx	lr

08002e20 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8002e20:	b480      	push	{r7}
 8002e22:	b087      	sub	sp, #28
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	60f8      	str	r0, [r7, #12]
 8002e28:	60b9      	str	r1, [r7, #8]
 8002e2a:	4613      	mov	r3, r2
 8002e2c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8002e2e:	79fb      	ldrb	r3, [r7, #7]
 8002e30:	2b02      	cmp	r3, #2
 8002e32:	d165      	bne.n	8002f00 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8002e34:	68bb      	ldr	r3, [r7, #8]
 8002e36:	4a41      	ldr	r2, [pc, #260]	; (8002f3c <USB_SetTurnaroundTime+0x11c>)
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d906      	bls.n	8002e4a <USB_SetTurnaroundTime+0x2a>
 8002e3c:	68bb      	ldr	r3, [r7, #8]
 8002e3e:	4a40      	ldr	r2, [pc, #256]	; (8002f40 <USB_SetTurnaroundTime+0x120>)
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d202      	bcs.n	8002e4a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8002e44:	230f      	movs	r3, #15
 8002e46:	617b      	str	r3, [r7, #20]
 8002e48:	e062      	b.n	8002f10 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8002e4a:	68bb      	ldr	r3, [r7, #8]
 8002e4c:	4a3c      	ldr	r2, [pc, #240]	; (8002f40 <USB_SetTurnaroundTime+0x120>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d306      	bcc.n	8002e60 <USB_SetTurnaroundTime+0x40>
 8002e52:	68bb      	ldr	r3, [r7, #8]
 8002e54:	4a3b      	ldr	r2, [pc, #236]	; (8002f44 <USB_SetTurnaroundTime+0x124>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d202      	bcs.n	8002e60 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8002e5a:	230e      	movs	r3, #14
 8002e5c:	617b      	str	r3, [r7, #20]
 8002e5e:	e057      	b.n	8002f10 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8002e60:	68bb      	ldr	r3, [r7, #8]
 8002e62:	4a38      	ldr	r2, [pc, #224]	; (8002f44 <USB_SetTurnaroundTime+0x124>)
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d306      	bcc.n	8002e76 <USB_SetTurnaroundTime+0x56>
 8002e68:	68bb      	ldr	r3, [r7, #8]
 8002e6a:	4a37      	ldr	r2, [pc, #220]	; (8002f48 <USB_SetTurnaroundTime+0x128>)
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d202      	bcs.n	8002e76 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8002e70:	230d      	movs	r3, #13
 8002e72:	617b      	str	r3, [r7, #20]
 8002e74:	e04c      	b.n	8002f10 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8002e76:	68bb      	ldr	r3, [r7, #8]
 8002e78:	4a33      	ldr	r2, [pc, #204]	; (8002f48 <USB_SetTurnaroundTime+0x128>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d306      	bcc.n	8002e8c <USB_SetTurnaroundTime+0x6c>
 8002e7e:	68bb      	ldr	r3, [r7, #8]
 8002e80:	4a32      	ldr	r2, [pc, #200]	; (8002f4c <USB_SetTurnaroundTime+0x12c>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d802      	bhi.n	8002e8c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8002e86:	230c      	movs	r3, #12
 8002e88:	617b      	str	r3, [r7, #20]
 8002e8a:	e041      	b.n	8002f10 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8002e8c:	68bb      	ldr	r3, [r7, #8]
 8002e8e:	4a2f      	ldr	r2, [pc, #188]	; (8002f4c <USB_SetTurnaroundTime+0x12c>)
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d906      	bls.n	8002ea2 <USB_SetTurnaroundTime+0x82>
 8002e94:	68bb      	ldr	r3, [r7, #8]
 8002e96:	4a2e      	ldr	r2, [pc, #184]	; (8002f50 <USB_SetTurnaroundTime+0x130>)
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	d802      	bhi.n	8002ea2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8002e9c:	230b      	movs	r3, #11
 8002e9e:	617b      	str	r3, [r7, #20]
 8002ea0:	e036      	b.n	8002f10 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8002ea2:	68bb      	ldr	r3, [r7, #8]
 8002ea4:	4a2a      	ldr	r2, [pc, #168]	; (8002f50 <USB_SetTurnaroundTime+0x130>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d906      	bls.n	8002eb8 <USB_SetTurnaroundTime+0x98>
 8002eaa:	68bb      	ldr	r3, [r7, #8]
 8002eac:	4a29      	ldr	r2, [pc, #164]	; (8002f54 <USB_SetTurnaroundTime+0x134>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d802      	bhi.n	8002eb8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8002eb2:	230a      	movs	r3, #10
 8002eb4:	617b      	str	r3, [r7, #20]
 8002eb6:	e02b      	b.n	8002f10 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8002eb8:	68bb      	ldr	r3, [r7, #8]
 8002eba:	4a26      	ldr	r2, [pc, #152]	; (8002f54 <USB_SetTurnaroundTime+0x134>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d906      	bls.n	8002ece <USB_SetTurnaroundTime+0xae>
 8002ec0:	68bb      	ldr	r3, [r7, #8]
 8002ec2:	4a25      	ldr	r2, [pc, #148]	; (8002f58 <USB_SetTurnaroundTime+0x138>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d202      	bcs.n	8002ece <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8002ec8:	2309      	movs	r3, #9
 8002eca:	617b      	str	r3, [r7, #20]
 8002ecc:	e020      	b.n	8002f10 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8002ece:	68bb      	ldr	r3, [r7, #8]
 8002ed0:	4a21      	ldr	r2, [pc, #132]	; (8002f58 <USB_SetTurnaroundTime+0x138>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d306      	bcc.n	8002ee4 <USB_SetTurnaroundTime+0xc4>
 8002ed6:	68bb      	ldr	r3, [r7, #8]
 8002ed8:	4a20      	ldr	r2, [pc, #128]	; (8002f5c <USB_SetTurnaroundTime+0x13c>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d802      	bhi.n	8002ee4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8002ede:	2308      	movs	r3, #8
 8002ee0:	617b      	str	r3, [r7, #20]
 8002ee2:	e015      	b.n	8002f10 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8002ee4:	68bb      	ldr	r3, [r7, #8]
 8002ee6:	4a1d      	ldr	r2, [pc, #116]	; (8002f5c <USB_SetTurnaroundTime+0x13c>)
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d906      	bls.n	8002efa <USB_SetTurnaroundTime+0xda>
 8002eec:	68bb      	ldr	r3, [r7, #8]
 8002eee:	4a1c      	ldr	r2, [pc, #112]	; (8002f60 <USB_SetTurnaroundTime+0x140>)
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d202      	bcs.n	8002efa <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8002ef4:	2307      	movs	r3, #7
 8002ef6:	617b      	str	r3, [r7, #20]
 8002ef8:	e00a      	b.n	8002f10 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8002efa:	2306      	movs	r3, #6
 8002efc:	617b      	str	r3, [r7, #20]
 8002efe:	e007      	b.n	8002f10 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8002f00:	79fb      	ldrb	r3, [r7, #7]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d102      	bne.n	8002f0c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8002f06:	2309      	movs	r3, #9
 8002f08:	617b      	str	r3, [r7, #20]
 8002f0a:	e001      	b.n	8002f10 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8002f0c:	2309      	movs	r3, #9
 8002f0e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	68db      	ldr	r3, [r3, #12]
 8002f14:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	68da      	ldr	r2, [r3, #12]
 8002f20:	697b      	ldr	r3, [r7, #20]
 8002f22:	029b      	lsls	r3, r3, #10
 8002f24:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8002f28:	431a      	orrs	r2, r3
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002f2e:	2300      	movs	r3, #0
}
 8002f30:	4618      	mov	r0, r3
 8002f32:	371c      	adds	r7, #28
 8002f34:	46bd      	mov	sp, r7
 8002f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3a:	4770      	bx	lr
 8002f3c:	00d8acbf 	.word	0x00d8acbf
 8002f40:	00e4e1c0 	.word	0x00e4e1c0
 8002f44:	00f42400 	.word	0x00f42400
 8002f48:	01067380 	.word	0x01067380
 8002f4c:	011a499f 	.word	0x011a499f
 8002f50:	01312cff 	.word	0x01312cff
 8002f54:	014ca43f 	.word	0x014ca43f
 8002f58:	016e3600 	.word	0x016e3600
 8002f5c:	01a6ab1f 	.word	0x01a6ab1f
 8002f60:	01e84800 	.word	0x01e84800

08002f64 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002f64:	b480      	push	{r7}
 8002f66:	b083      	sub	sp, #12
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	689b      	ldr	r3, [r3, #8]
 8002f70:	f043 0201 	orr.w	r2, r3, #1
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002f78:	2300      	movs	r3, #0
}
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	370c      	adds	r7, #12
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f84:	4770      	bx	lr

08002f86 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002f86:	b480      	push	{r7}
 8002f88:	b083      	sub	sp, #12
 8002f8a:	af00      	add	r7, sp, #0
 8002f8c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	689b      	ldr	r3, [r3, #8]
 8002f92:	f023 0201 	bic.w	r2, r3, #1
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002f9a:	2300      	movs	r3, #0
}
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	370c      	adds	r7, #12
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa6:	4770      	bx	lr

08002fa8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b084      	sub	sp, #16
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
 8002fb0:	460b      	mov	r3, r1
 8002fb2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	68db      	ldr	r3, [r3, #12]
 8002fbc:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8002fc4:	78fb      	ldrb	r3, [r7, #3]
 8002fc6:	2b01      	cmp	r3, #1
 8002fc8:	d115      	bne.n	8002ff6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	68db      	ldr	r3, [r3, #12]
 8002fce:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8002fd6:	200a      	movs	r0, #10
 8002fd8:	f7fd fd84 	bl	8000ae4 <HAL_Delay>
      ms += 10U;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	330a      	adds	r3, #10
 8002fe0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8002fe2:	6878      	ldr	r0, [r7, #4]
 8002fe4:	f001 f939 	bl	800425a <USB_GetMode>
 8002fe8:	4603      	mov	r3, r0
 8002fea:	2b01      	cmp	r3, #1
 8002fec:	d01e      	beq.n	800302c <USB_SetCurrentMode+0x84>
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	2bc7      	cmp	r3, #199	; 0xc7
 8002ff2:	d9f0      	bls.n	8002fd6 <USB_SetCurrentMode+0x2e>
 8002ff4:	e01a      	b.n	800302c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8002ff6:	78fb      	ldrb	r3, [r7, #3]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d115      	bne.n	8003028 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	68db      	ldr	r3, [r3, #12]
 8003000:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8003008:	200a      	movs	r0, #10
 800300a:	f7fd fd6b 	bl	8000ae4 <HAL_Delay>
      ms += 10U;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	330a      	adds	r3, #10
 8003012:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8003014:	6878      	ldr	r0, [r7, #4]
 8003016:	f001 f920 	bl	800425a <USB_GetMode>
 800301a:	4603      	mov	r3, r0
 800301c:	2b00      	cmp	r3, #0
 800301e:	d005      	beq.n	800302c <USB_SetCurrentMode+0x84>
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	2bc7      	cmp	r3, #199	; 0xc7
 8003024:	d9f0      	bls.n	8003008 <USB_SetCurrentMode+0x60>
 8003026:	e001      	b.n	800302c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003028:	2301      	movs	r3, #1
 800302a:	e005      	b.n	8003038 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	2bc8      	cmp	r3, #200	; 0xc8
 8003030:	d101      	bne.n	8003036 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003032:	2301      	movs	r3, #1
 8003034:	e000      	b.n	8003038 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003036:	2300      	movs	r3, #0
}
 8003038:	4618      	mov	r0, r3
 800303a:	3710      	adds	r7, #16
 800303c:	46bd      	mov	sp, r7
 800303e:	bd80      	pop	{r7, pc}

08003040 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003040:	b084      	sub	sp, #16
 8003042:	b580      	push	{r7, lr}
 8003044:	b086      	sub	sp, #24
 8003046:	af00      	add	r7, sp, #0
 8003048:	6078      	str	r0, [r7, #4]
 800304a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800304e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003052:	2300      	movs	r3, #0
 8003054:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800305a:	2300      	movs	r3, #0
 800305c:	613b      	str	r3, [r7, #16]
 800305e:	e009      	b.n	8003074 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003060:	687a      	ldr	r2, [r7, #4]
 8003062:	693b      	ldr	r3, [r7, #16]
 8003064:	3340      	adds	r3, #64	; 0x40
 8003066:	009b      	lsls	r3, r3, #2
 8003068:	4413      	add	r3, r2
 800306a:	2200      	movs	r2, #0
 800306c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800306e:	693b      	ldr	r3, [r7, #16]
 8003070:	3301      	adds	r3, #1
 8003072:	613b      	str	r3, [r7, #16]
 8003074:	693b      	ldr	r3, [r7, #16]
 8003076:	2b0e      	cmp	r3, #14
 8003078:	d9f2      	bls.n	8003060 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800307a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800307e:	2b00      	cmp	r3, #0
 8003080:	d11c      	bne.n	80030bc <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	68fa      	ldr	r2, [r7, #12]
 800308c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003090:	f043 0302 	orr.w	r3, r3, #2
 8003094:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800309a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030a6:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030b2:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	639a      	str	r2, [r3, #56]	; 0x38
 80030ba:	e00b      	b.n	80030d4 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030c0:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030cc:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80030da:	461a      	mov	r2, r3
 80030dc:	2300      	movs	r3, #0
 80030de:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80030e0:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80030e4:	2b01      	cmp	r3, #1
 80030e6:	d10d      	bne.n	8003104 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80030e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d104      	bne.n	80030fa <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80030f0:	2100      	movs	r1, #0
 80030f2:	6878      	ldr	r0, [r7, #4]
 80030f4:	f000 f968 	bl	80033c8 <USB_SetDevSpeed>
 80030f8:	e008      	b.n	800310c <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80030fa:	2101      	movs	r1, #1
 80030fc:	6878      	ldr	r0, [r7, #4]
 80030fe:	f000 f963 	bl	80033c8 <USB_SetDevSpeed>
 8003102:	e003      	b.n	800310c <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003104:	2103      	movs	r1, #3
 8003106:	6878      	ldr	r0, [r7, #4]
 8003108:	f000 f95e 	bl	80033c8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800310c:	2110      	movs	r1, #16
 800310e:	6878      	ldr	r0, [r7, #4]
 8003110:	f000 f8fa 	bl	8003308 <USB_FlushTxFifo>
 8003114:	4603      	mov	r3, r0
 8003116:	2b00      	cmp	r3, #0
 8003118:	d001      	beq.n	800311e <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 800311a:	2301      	movs	r3, #1
 800311c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800311e:	6878      	ldr	r0, [r7, #4]
 8003120:	f000 f924 	bl	800336c <USB_FlushRxFifo>
 8003124:	4603      	mov	r3, r0
 8003126:	2b00      	cmp	r3, #0
 8003128:	d001      	beq.n	800312e <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 800312a:	2301      	movs	r3, #1
 800312c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003134:	461a      	mov	r2, r3
 8003136:	2300      	movs	r3, #0
 8003138:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003140:	461a      	mov	r2, r3
 8003142:	2300      	movs	r3, #0
 8003144:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800314c:	461a      	mov	r2, r3
 800314e:	2300      	movs	r3, #0
 8003150:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003152:	2300      	movs	r3, #0
 8003154:	613b      	str	r3, [r7, #16]
 8003156:	e043      	b.n	80031e0 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003158:	693b      	ldr	r3, [r7, #16]
 800315a:	015a      	lsls	r2, r3, #5
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	4413      	add	r3, r2
 8003160:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800316a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800316e:	d118      	bne.n	80031a2 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8003170:	693b      	ldr	r3, [r7, #16]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d10a      	bne.n	800318c <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003176:	693b      	ldr	r3, [r7, #16]
 8003178:	015a      	lsls	r2, r3, #5
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	4413      	add	r3, r2
 800317e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003182:	461a      	mov	r2, r3
 8003184:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003188:	6013      	str	r3, [r2, #0]
 800318a:	e013      	b.n	80031b4 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800318c:	693b      	ldr	r3, [r7, #16]
 800318e:	015a      	lsls	r2, r3, #5
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	4413      	add	r3, r2
 8003194:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003198:	461a      	mov	r2, r3
 800319a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800319e:	6013      	str	r3, [r2, #0]
 80031a0:	e008      	b.n	80031b4 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80031a2:	693b      	ldr	r3, [r7, #16]
 80031a4:	015a      	lsls	r2, r3, #5
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	4413      	add	r3, r2
 80031aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031ae:	461a      	mov	r2, r3
 80031b0:	2300      	movs	r3, #0
 80031b2:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80031b4:	693b      	ldr	r3, [r7, #16]
 80031b6:	015a      	lsls	r2, r3, #5
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	4413      	add	r3, r2
 80031bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031c0:	461a      	mov	r2, r3
 80031c2:	2300      	movs	r3, #0
 80031c4:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80031c6:	693b      	ldr	r3, [r7, #16]
 80031c8:	015a      	lsls	r2, r3, #5
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	4413      	add	r3, r2
 80031ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031d2:	461a      	mov	r2, r3
 80031d4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80031d8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80031da:	693b      	ldr	r3, [r7, #16]
 80031dc:	3301      	adds	r3, #1
 80031de:	613b      	str	r3, [r7, #16]
 80031e0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80031e4:	461a      	mov	r2, r3
 80031e6:	693b      	ldr	r3, [r7, #16]
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d3b5      	bcc.n	8003158 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80031ec:	2300      	movs	r3, #0
 80031ee:	613b      	str	r3, [r7, #16]
 80031f0:	e043      	b.n	800327a <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80031f2:	693b      	ldr	r3, [r7, #16]
 80031f4:	015a      	lsls	r2, r3, #5
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	4413      	add	r3, r2
 80031fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003204:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003208:	d118      	bne.n	800323c <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 800320a:	693b      	ldr	r3, [r7, #16]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d10a      	bne.n	8003226 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003210:	693b      	ldr	r3, [r7, #16]
 8003212:	015a      	lsls	r2, r3, #5
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	4413      	add	r3, r2
 8003218:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800321c:	461a      	mov	r2, r3
 800321e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003222:	6013      	str	r3, [r2, #0]
 8003224:	e013      	b.n	800324e <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003226:	693b      	ldr	r3, [r7, #16]
 8003228:	015a      	lsls	r2, r3, #5
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	4413      	add	r3, r2
 800322e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003232:	461a      	mov	r2, r3
 8003234:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003238:	6013      	str	r3, [r2, #0]
 800323a:	e008      	b.n	800324e <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800323c:	693b      	ldr	r3, [r7, #16]
 800323e:	015a      	lsls	r2, r3, #5
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	4413      	add	r3, r2
 8003244:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003248:	461a      	mov	r2, r3
 800324a:	2300      	movs	r3, #0
 800324c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800324e:	693b      	ldr	r3, [r7, #16]
 8003250:	015a      	lsls	r2, r3, #5
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	4413      	add	r3, r2
 8003256:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800325a:	461a      	mov	r2, r3
 800325c:	2300      	movs	r3, #0
 800325e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003260:	693b      	ldr	r3, [r7, #16]
 8003262:	015a      	lsls	r2, r3, #5
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	4413      	add	r3, r2
 8003268:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800326c:	461a      	mov	r2, r3
 800326e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003272:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003274:	693b      	ldr	r3, [r7, #16]
 8003276:	3301      	adds	r3, #1
 8003278:	613b      	str	r3, [r7, #16]
 800327a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800327e:	461a      	mov	r2, r3
 8003280:	693b      	ldr	r3, [r7, #16]
 8003282:	4293      	cmp	r3, r2
 8003284:	d3b5      	bcc.n	80031f2 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800328c:	691b      	ldr	r3, [r3, #16]
 800328e:	68fa      	ldr	r2, [r7, #12]
 8003290:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003294:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003298:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2200      	movs	r2, #0
 800329e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80032a6:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80032a8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d105      	bne.n	80032bc <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	699b      	ldr	r3, [r3, #24]
 80032b4:	f043 0210 	orr.w	r2, r3, #16
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	699a      	ldr	r2, [r3, #24]
 80032c0:	4b10      	ldr	r3, [pc, #64]	; (8003304 <USB_DevInit+0x2c4>)
 80032c2:	4313      	orrs	r3, r2
 80032c4:	687a      	ldr	r2, [r7, #4]
 80032c6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80032c8:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d005      	beq.n	80032dc <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	699b      	ldr	r3, [r3, #24]
 80032d4:	f043 0208 	orr.w	r2, r3, #8
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80032dc:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80032e0:	2b01      	cmp	r3, #1
 80032e2:	d107      	bne.n	80032f4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	699b      	ldr	r3, [r3, #24]
 80032e8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80032ec:	f043 0304 	orr.w	r3, r3, #4
 80032f0:	687a      	ldr	r2, [r7, #4]
 80032f2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80032f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80032f6:	4618      	mov	r0, r3
 80032f8:	3718      	adds	r7, #24
 80032fa:	46bd      	mov	sp, r7
 80032fc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003300:	b004      	add	sp, #16
 8003302:	4770      	bx	lr
 8003304:	803c3800 	.word	0x803c3800

08003308 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003308:	b480      	push	{r7}
 800330a:	b085      	sub	sp, #20
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
 8003310:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003312:	2300      	movs	r3, #0
 8003314:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	3301      	adds	r3, #1
 800331a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8003322:	d901      	bls.n	8003328 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003324:	2303      	movs	r3, #3
 8003326:	e01b      	b.n	8003360 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	691b      	ldr	r3, [r3, #16]
 800332c:	2b00      	cmp	r3, #0
 800332e:	daf2      	bge.n	8003316 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003330:	2300      	movs	r3, #0
 8003332:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	019b      	lsls	r3, r3, #6
 8003338:	f043 0220 	orr.w	r2, r3, #32
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	3301      	adds	r3, #1
 8003344:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800334c:	d901      	bls.n	8003352 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800334e:	2303      	movs	r3, #3
 8003350:	e006      	b.n	8003360 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	691b      	ldr	r3, [r3, #16]
 8003356:	f003 0320 	and.w	r3, r3, #32
 800335a:	2b20      	cmp	r3, #32
 800335c:	d0f0      	beq.n	8003340 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800335e:	2300      	movs	r3, #0
}
 8003360:	4618      	mov	r0, r3
 8003362:	3714      	adds	r7, #20
 8003364:	46bd      	mov	sp, r7
 8003366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336a:	4770      	bx	lr

0800336c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800336c:	b480      	push	{r7}
 800336e:	b085      	sub	sp, #20
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003374:	2300      	movs	r3, #0
 8003376:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	3301      	adds	r3, #1
 800337c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8003384:	d901      	bls.n	800338a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003386:	2303      	movs	r3, #3
 8003388:	e018      	b.n	80033bc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	691b      	ldr	r3, [r3, #16]
 800338e:	2b00      	cmp	r3, #0
 8003390:	daf2      	bge.n	8003378 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003392:	2300      	movs	r3, #0
 8003394:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2210      	movs	r2, #16
 800339a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	3301      	adds	r3, #1
 80033a0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80033a8:	d901      	bls.n	80033ae <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80033aa:	2303      	movs	r3, #3
 80033ac:	e006      	b.n	80033bc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	691b      	ldr	r3, [r3, #16]
 80033b2:	f003 0310 	and.w	r3, r3, #16
 80033b6:	2b10      	cmp	r3, #16
 80033b8:	d0f0      	beq.n	800339c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80033ba:	2300      	movs	r3, #0
}
 80033bc:	4618      	mov	r0, r3
 80033be:	3714      	adds	r7, #20
 80033c0:	46bd      	mov	sp, r7
 80033c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c6:	4770      	bx	lr

080033c8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80033c8:	b480      	push	{r7}
 80033ca:	b085      	sub	sp, #20
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
 80033d0:	460b      	mov	r3, r1
 80033d2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033de:	681a      	ldr	r2, [r3, #0]
 80033e0:	78fb      	ldrb	r3, [r7, #3]
 80033e2:	68f9      	ldr	r1, [r7, #12]
 80033e4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80033e8:	4313      	orrs	r3, r2
 80033ea:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80033ec:	2300      	movs	r3, #0
}
 80033ee:	4618      	mov	r0, r3
 80033f0:	3714      	adds	r7, #20
 80033f2:	46bd      	mov	sp, r7
 80033f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f8:	4770      	bx	lr

080033fa <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 80033fa:	b480      	push	{r7}
 80033fc:	b087      	sub	sp, #28
 80033fe:	af00      	add	r7, sp, #0
 8003400:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8003406:	693b      	ldr	r3, [r7, #16]
 8003408:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800340c:	689b      	ldr	r3, [r3, #8]
 800340e:	f003 0306 	and.w	r3, r3, #6
 8003412:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d102      	bne.n	8003420 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800341a:	2300      	movs	r3, #0
 800341c:	75fb      	strb	r3, [r7, #23]
 800341e:	e00a      	b.n	8003436 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	2b02      	cmp	r3, #2
 8003424:	d002      	beq.n	800342c <USB_GetDevSpeed+0x32>
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	2b06      	cmp	r3, #6
 800342a:	d102      	bne.n	8003432 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800342c:	2302      	movs	r3, #2
 800342e:	75fb      	strb	r3, [r7, #23]
 8003430:	e001      	b.n	8003436 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8003432:	230f      	movs	r3, #15
 8003434:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8003436:	7dfb      	ldrb	r3, [r7, #23]
}
 8003438:	4618      	mov	r0, r3
 800343a:	371c      	adds	r7, #28
 800343c:	46bd      	mov	sp, r7
 800343e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003442:	4770      	bx	lr

08003444 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8003444:	b480      	push	{r7}
 8003446:	b085      	sub	sp, #20
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
 800344c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	781b      	ldrb	r3, [r3, #0]
 8003456:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	785b      	ldrb	r3, [r3, #1]
 800345c:	2b01      	cmp	r3, #1
 800345e:	d13a      	bne.n	80034d6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003466:	69da      	ldr	r2, [r3, #28]
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	781b      	ldrb	r3, [r3, #0]
 800346c:	f003 030f 	and.w	r3, r3, #15
 8003470:	2101      	movs	r1, #1
 8003472:	fa01 f303 	lsl.w	r3, r1, r3
 8003476:	b29b      	uxth	r3, r3
 8003478:	68f9      	ldr	r1, [r7, #12]
 800347a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800347e:	4313      	orrs	r3, r2
 8003480:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003482:	68bb      	ldr	r3, [r7, #8]
 8003484:	015a      	lsls	r2, r3, #5
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	4413      	add	r3, r2
 800348a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003494:	2b00      	cmp	r3, #0
 8003496:	d155      	bne.n	8003544 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003498:	68bb      	ldr	r3, [r7, #8]
 800349a:	015a      	lsls	r2, r3, #5
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	4413      	add	r3, r2
 80034a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034a4:	681a      	ldr	r2, [r3, #0]
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	689b      	ldr	r3, [r3, #8]
 80034aa:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	791b      	ldrb	r3, [r3, #4]
 80034b2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80034b4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80034b6:	68bb      	ldr	r3, [r7, #8]
 80034b8:	059b      	lsls	r3, r3, #22
 80034ba:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80034bc:	4313      	orrs	r3, r2
 80034be:	68ba      	ldr	r2, [r7, #8]
 80034c0:	0151      	lsls	r1, r2, #5
 80034c2:	68fa      	ldr	r2, [r7, #12]
 80034c4:	440a      	add	r2, r1
 80034c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80034ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80034d2:	6013      	str	r3, [r2, #0]
 80034d4:	e036      	b.n	8003544 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034dc:	69da      	ldr	r2, [r3, #28]
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	781b      	ldrb	r3, [r3, #0]
 80034e2:	f003 030f 	and.w	r3, r3, #15
 80034e6:	2101      	movs	r1, #1
 80034e8:	fa01 f303 	lsl.w	r3, r1, r3
 80034ec:	041b      	lsls	r3, r3, #16
 80034ee:	68f9      	ldr	r1, [r7, #12]
 80034f0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80034f4:	4313      	orrs	r3, r2
 80034f6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80034f8:	68bb      	ldr	r3, [r7, #8]
 80034fa:	015a      	lsls	r2, r3, #5
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	4413      	add	r3, r2
 8003500:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800350a:	2b00      	cmp	r3, #0
 800350c:	d11a      	bne.n	8003544 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800350e:	68bb      	ldr	r3, [r7, #8]
 8003510:	015a      	lsls	r2, r3, #5
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	4413      	add	r3, r2
 8003516:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800351a:	681a      	ldr	r2, [r3, #0]
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	689b      	ldr	r3, [r3, #8]
 8003520:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	791b      	ldrb	r3, [r3, #4]
 8003528:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800352a:	430b      	orrs	r3, r1
 800352c:	4313      	orrs	r3, r2
 800352e:	68ba      	ldr	r2, [r7, #8]
 8003530:	0151      	lsls	r1, r2, #5
 8003532:	68fa      	ldr	r2, [r7, #12]
 8003534:	440a      	add	r2, r1
 8003536:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800353a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800353e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003542:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8003544:	2300      	movs	r3, #0
}
 8003546:	4618      	mov	r0, r3
 8003548:	3714      	adds	r7, #20
 800354a:	46bd      	mov	sp, r7
 800354c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003550:	4770      	bx	lr
	...

08003554 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8003554:	b480      	push	{r7}
 8003556:	b085      	sub	sp, #20
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
 800355c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	781b      	ldrb	r3, [r3, #0]
 8003566:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	785b      	ldrb	r3, [r3, #1]
 800356c:	2b01      	cmp	r3, #1
 800356e:	d161      	bne.n	8003634 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003570:	68bb      	ldr	r3, [r7, #8]
 8003572:	015a      	lsls	r2, r3, #5
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	4413      	add	r3, r2
 8003578:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003582:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003586:	d11f      	bne.n	80035c8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003588:	68bb      	ldr	r3, [r7, #8]
 800358a:	015a      	lsls	r2, r3, #5
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	4413      	add	r3, r2
 8003590:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	68ba      	ldr	r2, [r7, #8]
 8003598:	0151      	lsls	r1, r2, #5
 800359a:	68fa      	ldr	r2, [r7, #12]
 800359c:	440a      	add	r2, r1
 800359e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80035a2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80035a6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80035a8:	68bb      	ldr	r3, [r7, #8]
 80035aa:	015a      	lsls	r2, r3, #5
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	4413      	add	r3, r2
 80035b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	68ba      	ldr	r2, [r7, #8]
 80035b8:	0151      	lsls	r1, r2, #5
 80035ba:	68fa      	ldr	r2, [r7, #12]
 80035bc:	440a      	add	r2, r1
 80035be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80035c2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80035c6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035ce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	781b      	ldrb	r3, [r3, #0]
 80035d4:	f003 030f 	and.w	r3, r3, #15
 80035d8:	2101      	movs	r1, #1
 80035da:	fa01 f303 	lsl.w	r3, r1, r3
 80035de:	b29b      	uxth	r3, r3
 80035e0:	43db      	mvns	r3, r3
 80035e2:	68f9      	ldr	r1, [r7, #12]
 80035e4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80035e8:	4013      	ands	r3, r2
 80035ea:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035f2:	69da      	ldr	r2, [r3, #28]
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	781b      	ldrb	r3, [r3, #0]
 80035f8:	f003 030f 	and.w	r3, r3, #15
 80035fc:	2101      	movs	r1, #1
 80035fe:	fa01 f303 	lsl.w	r3, r1, r3
 8003602:	b29b      	uxth	r3, r3
 8003604:	43db      	mvns	r3, r3
 8003606:	68f9      	ldr	r1, [r7, #12]
 8003608:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800360c:	4013      	ands	r3, r2
 800360e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8003610:	68bb      	ldr	r3, [r7, #8]
 8003612:	015a      	lsls	r2, r3, #5
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	4413      	add	r3, r2
 8003618:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800361c:	681a      	ldr	r2, [r3, #0]
 800361e:	68bb      	ldr	r3, [r7, #8]
 8003620:	0159      	lsls	r1, r3, #5
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	440b      	add	r3, r1
 8003626:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800362a:	4619      	mov	r1, r3
 800362c:	4b35      	ldr	r3, [pc, #212]	; (8003704 <USB_DeactivateEndpoint+0x1b0>)
 800362e:	4013      	ands	r3, r2
 8003630:	600b      	str	r3, [r1, #0]
 8003632:	e060      	b.n	80036f6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003634:	68bb      	ldr	r3, [r7, #8]
 8003636:	015a      	lsls	r2, r3, #5
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	4413      	add	r3, r2
 800363c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003646:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800364a:	d11f      	bne.n	800368c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800364c:	68bb      	ldr	r3, [r7, #8]
 800364e:	015a      	lsls	r2, r3, #5
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	4413      	add	r3, r2
 8003654:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	68ba      	ldr	r2, [r7, #8]
 800365c:	0151      	lsls	r1, r2, #5
 800365e:	68fa      	ldr	r2, [r7, #12]
 8003660:	440a      	add	r2, r1
 8003662:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003666:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800366a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800366c:	68bb      	ldr	r3, [r7, #8]
 800366e:	015a      	lsls	r2, r3, #5
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	4413      	add	r3, r2
 8003674:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	68ba      	ldr	r2, [r7, #8]
 800367c:	0151      	lsls	r1, r2, #5
 800367e:	68fa      	ldr	r2, [r7, #12]
 8003680:	440a      	add	r2, r1
 8003682:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003686:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800368a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003692:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	781b      	ldrb	r3, [r3, #0]
 8003698:	f003 030f 	and.w	r3, r3, #15
 800369c:	2101      	movs	r1, #1
 800369e:	fa01 f303 	lsl.w	r3, r1, r3
 80036a2:	041b      	lsls	r3, r3, #16
 80036a4:	43db      	mvns	r3, r3
 80036a6:	68f9      	ldr	r1, [r7, #12]
 80036a8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80036ac:	4013      	ands	r3, r2
 80036ae:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036b6:	69da      	ldr	r2, [r3, #28]
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	781b      	ldrb	r3, [r3, #0]
 80036bc:	f003 030f 	and.w	r3, r3, #15
 80036c0:	2101      	movs	r1, #1
 80036c2:	fa01 f303 	lsl.w	r3, r1, r3
 80036c6:	041b      	lsls	r3, r3, #16
 80036c8:	43db      	mvns	r3, r3
 80036ca:	68f9      	ldr	r1, [r7, #12]
 80036cc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80036d0:	4013      	ands	r3, r2
 80036d2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80036d4:	68bb      	ldr	r3, [r7, #8]
 80036d6:	015a      	lsls	r2, r3, #5
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	4413      	add	r3, r2
 80036dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036e0:	681a      	ldr	r2, [r3, #0]
 80036e2:	68bb      	ldr	r3, [r7, #8]
 80036e4:	0159      	lsls	r1, r3, #5
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	440b      	add	r3, r1
 80036ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036ee:	4619      	mov	r1, r3
 80036f0:	4b05      	ldr	r3, [pc, #20]	; (8003708 <USB_DeactivateEndpoint+0x1b4>)
 80036f2:	4013      	ands	r3, r2
 80036f4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80036f6:	2300      	movs	r3, #0
}
 80036f8:	4618      	mov	r0, r3
 80036fa:	3714      	adds	r7, #20
 80036fc:	46bd      	mov	sp, r7
 80036fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003702:	4770      	bx	lr
 8003704:	ec337800 	.word	0xec337800
 8003708:	eff37800 	.word	0xeff37800

0800370c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b08a      	sub	sp, #40	; 0x28
 8003710:	af02      	add	r7, sp, #8
 8003712:	60f8      	str	r0, [r7, #12]
 8003714:	60b9      	str	r1, [r7, #8]
 8003716:	4613      	mov	r3, r2
 8003718:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800371e:	68bb      	ldr	r3, [r7, #8]
 8003720:	781b      	ldrb	r3, [r3, #0]
 8003722:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003724:	68bb      	ldr	r3, [r7, #8]
 8003726:	785b      	ldrb	r3, [r3, #1]
 8003728:	2b01      	cmp	r3, #1
 800372a:	f040 817a 	bne.w	8003a22 <USB_EPStartXfer+0x316>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800372e:	68bb      	ldr	r3, [r7, #8]
 8003730:	691b      	ldr	r3, [r3, #16]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d132      	bne.n	800379c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003736:	69bb      	ldr	r3, [r7, #24]
 8003738:	015a      	lsls	r2, r3, #5
 800373a:	69fb      	ldr	r3, [r7, #28]
 800373c:	4413      	add	r3, r2
 800373e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003742:	691b      	ldr	r3, [r3, #16]
 8003744:	69ba      	ldr	r2, [r7, #24]
 8003746:	0151      	lsls	r1, r2, #5
 8003748:	69fa      	ldr	r2, [r7, #28]
 800374a:	440a      	add	r2, r1
 800374c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003750:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003754:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003758:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800375a:	69bb      	ldr	r3, [r7, #24]
 800375c:	015a      	lsls	r2, r3, #5
 800375e:	69fb      	ldr	r3, [r7, #28]
 8003760:	4413      	add	r3, r2
 8003762:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003766:	691b      	ldr	r3, [r3, #16]
 8003768:	69ba      	ldr	r2, [r7, #24]
 800376a:	0151      	lsls	r1, r2, #5
 800376c:	69fa      	ldr	r2, [r7, #28]
 800376e:	440a      	add	r2, r1
 8003770:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003774:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003778:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800377a:	69bb      	ldr	r3, [r7, #24]
 800377c:	015a      	lsls	r2, r3, #5
 800377e:	69fb      	ldr	r3, [r7, #28]
 8003780:	4413      	add	r3, r2
 8003782:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003786:	691b      	ldr	r3, [r3, #16]
 8003788:	69ba      	ldr	r2, [r7, #24]
 800378a:	0151      	lsls	r1, r2, #5
 800378c:	69fa      	ldr	r2, [r7, #28]
 800378e:	440a      	add	r2, r1
 8003790:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003794:	0cdb      	lsrs	r3, r3, #19
 8003796:	04db      	lsls	r3, r3, #19
 8003798:	6113      	str	r3, [r2, #16]
 800379a:	e092      	b.n	80038c2 <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800379c:	69bb      	ldr	r3, [r7, #24]
 800379e:	015a      	lsls	r2, r3, #5
 80037a0:	69fb      	ldr	r3, [r7, #28]
 80037a2:	4413      	add	r3, r2
 80037a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037a8:	691b      	ldr	r3, [r3, #16]
 80037aa:	69ba      	ldr	r2, [r7, #24]
 80037ac:	0151      	lsls	r1, r2, #5
 80037ae:	69fa      	ldr	r2, [r7, #28]
 80037b0:	440a      	add	r2, r1
 80037b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80037b6:	0cdb      	lsrs	r3, r3, #19
 80037b8:	04db      	lsls	r3, r3, #19
 80037ba:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80037bc:	69bb      	ldr	r3, [r7, #24]
 80037be:	015a      	lsls	r2, r3, #5
 80037c0:	69fb      	ldr	r3, [r7, #28]
 80037c2:	4413      	add	r3, r2
 80037c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037c8:	691b      	ldr	r3, [r3, #16]
 80037ca:	69ba      	ldr	r2, [r7, #24]
 80037cc:	0151      	lsls	r1, r2, #5
 80037ce:	69fa      	ldr	r2, [r7, #28]
 80037d0:	440a      	add	r2, r1
 80037d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80037d6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80037da:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80037de:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 80037e0:	69bb      	ldr	r3, [r7, #24]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d11a      	bne.n	800381c <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 80037e6:	68bb      	ldr	r3, [r7, #8]
 80037e8:	691a      	ldr	r2, [r3, #16]
 80037ea:	68bb      	ldr	r3, [r7, #8]
 80037ec:	689b      	ldr	r3, [r3, #8]
 80037ee:	429a      	cmp	r2, r3
 80037f0:	d903      	bls.n	80037fa <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 80037f2:	68bb      	ldr	r3, [r7, #8]
 80037f4:	689a      	ldr	r2, [r3, #8]
 80037f6:	68bb      	ldr	r3, [r7, #8]
 80037f8:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80037fa:	69bb      	ldr	r3, [r7, #24]
 80037fc:	015a      	lsls	r2, r3, #5
 80037fe:	69fb      	ldr	r3, [r7, #28]
 8003800:	4413      	add	r3, r2
 8003802:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003806:	691b      	ldr	r3, [r3, #16]
 8003808:	69ba      	ldr	r2, [r7, #24]
 800380a:	0151      	lsls	r1, r2, #5
 800380c:	69fa      	ldr	r2, [r7, #28]
 800380e:	440a      	add	r2, r1
 8003810:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003814:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003818:	6113      	str	r3, [r2, #16]
 800381a:	e01b      	b.n	8003854 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800381c:	69bb      	ldr	r3, [r7, #24]
 800381e:	015a      	lsls	r2, r3, #5
 8003820:	69fb      	ldr	r3, [r7, #28]
 8003822:	4413      	add	r3, r2
 8003824:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003828:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800382a:	68bb      	ldr	r3, [r7, #8]
 800382c:	6919      	ldr	r1, [r3, #16]
 800382e:	68bb      	ldr	r3, [r7, #8]
 8003830:	689b      	ldr	r3, [r3, #8]
 8003832:	440b      	add	r3, r1
 8003834:	1e59      	subs	r1, r3, #1
 8003836:	68bb      	ldr	r3, [r7, #8]
 8003838:	689b      	ldr	r3, [r3, #8]
 800383a:	fbb1 f3f3 	udiv	r3, r1, r3
 800383e:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8003840:	4ba2      	ldr	r3, [pc, #648]	; (8003acc <USB_EPStartXfer+0x3c0>)
 8003842:	400b      	ands	r3, r1
 8003844:	69b9      	ldr	r1, [r7, #24]
 8003846:	0148      	lsls	r0, r1, #5
 8003848:	69f9      	ldr	r1, [r7, #28]
 800384a:	4401      	add	r1, r0
 800384c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003850:	4313      	orrs	r3, r2
 8003852:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003854:	69bb      	ldr	r3, [r7, #24]
 8003856:	015a      	lsls	r2, r3, #5
 8003858:	69fb      	ldr	r3, [r7, #28]
 800385a:	4413      	add	r3, r2
 800385c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003860:	691a      	ldr	r2, [r3, #16]
 8003862:	68bb      	ldr	r3, [r7, #8]
 8003864:	691b      	ldr	r3, [r3, #16]
 8003866:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800386a:	69b9      	ldr	r1, [r7, #24]
 800386c:	0148      	lsls	r0, r1, #5
 800386e:	69f9      	ldr	r1, [r7, #28]
 8003870:	4401      	add	r1, r0
 8003872:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003876:	4313      	orrs	r3, r2
 8003878:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800387a:	68bb      	ldr	r3, [r7, #8]
 800387c:	791b      	ldrb	r3, [r3, #4]
 800387e:	2b01      	cmp	r3, #1
 8003880:	d11f      	bne.n	80038c2 <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8003882:	69bb      	ldr	r3, [r7, #24]
 8003884:	015a      	lsls	r2, r3, #5
 8003886:	69fb      	ldr	r3, [r7, #28]
 8003888:	4413      	add	r3, r2
 800388a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800388e:	691b      	ldr	r3, [r3, #16]
 8003890:	69ba      	ldr	r2, [r7, #24]
 8003892:	0151      	lsls	r1, r2, #5
 8003894:	69fa      	ldr	r2, [r7, #28]
 8003896:	440a      	add	r2, r1
 8003898:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800389c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80038a0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80038a2:	69bb      	ldr	r3, [r7, #24]
 80038a4:	015a      	lsls	r2, r3, #5
 80038a6:	69fb      	ldr	r3, [r7, #28]
 80038a8:	4413      	add	r3, r2
 80038aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038ae:	691b      	ldr	r3, [r3, #16]
 80038b0:	69ba      	ldr	r2, [r7, #24]
 80038b2:	0151      	lsls	r1, r2, #5
 80038b4:	69fa      	ldr	r2, [r7, #28]
 80038b6:	440a      	add	r2, r1
 80038b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80038bc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80038c0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80038c2:	79fb      	ldrb	r3, [r7, #7]
 80038c4:	2b01      	cmp	r3, #1
 80038c6:	d14b      	bne.n	8003960 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80038c8:	68bb      	ldr	r3, [r7, #8]
 80038ca:	69db      	ldr	r3, [r3, #28]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d009      	beq.n	80038e4 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80038d0:	69bb      	ldr	r3, [r7, #24]
 80038d2:	015a      	lsls	r2, r3, #5
 80038d4:	69fb      	ldr	r3, [r7, #28]
 80038d6:	4413      	add	r3, r2
 80038d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038dc:	461a      	mov	r2, r3
 80038de:	68bb      	ldr	r3, [r7, #8]
 80038e0:	69db      	ldr	r3, [r3, #28]
 80038e2:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80038e4:	68bb      	ldr	r3, [r7, #8]
 80038e6:	791b      	ldrb	r3, [r3, #4]
 80038e8:	2b01      	cmp	r3, #1
 80038ea:	d128      	bne.n	800393e <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80038ec:	69fb      	ldr	r3, [r7, #28]
 80038ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038f2:	689b      	ldr	r3, [r3, #8]
 80038f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d110      	bne.n	800391e <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80038fc:	69bb      	ldr	r3, [r7, #24]
 80038fe:	015a      	lsls	r2, r3, #5
 8003900:	69fb      	ldr	r3, [r7, #28]
 8003902:	4413      	add	r3, r2
 8003904:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	69ba      	ldr	r2, [r7, #24]
 800390c:	0151      	lsls	r1, r2, #5
 800390e:	69fa      	ldr	r2, [r7, #28]
 8003910:	440a      	add	r2, r1
 8003912:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003916:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800391a:	6013      	str	r3, [r2, #0]
 800391c:	e00f      	b.n	800393e <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800391e:	69bb      	ldr	r3, [r7, #24]
 8003920:	015a      	lsls	r2, r3, #5
 8003922:	69fb      	ldr	r3, [r7, #28]
 8003924:	4413      	add	r3, r2
 8003926:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	69ba      	ldr	r2, [r7, #24]
 800392e:	0151      	lsls	r1, r2, #5
 8003930:	69fa      	ldr	r2, [r7, #28]
 8003932:	440a      	add	r2, r1
 8003934:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003938:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800393c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800393e:	69bb      	ldr	r3, [r7, #24]
 8003940:	015a      	lsls	r2, r3, #5
 8003942:	69fb      	ldr	r3, [r7, #28]
 8003944:	4413      	add	r3, r2
 8003946:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	69ba      	ldr	r2, [r7, #24]
 800394e:	0151      	lsls	r1, r2, #5
 8003950:	69fa      	ldr	r2, [r7, #28]
 8003952:	440a      	add	r2, r1
 8003954:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003958:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800395c:	6013      	str	r3, [r2, #0]
 800395e:	e165      	b.n	8003c2c <USB_EPStartXfer+0x520>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003960:	69bb      	ldr	r3, [r7, #24]
 8003962:	015a      	lsls	r2, r3, #5
 8003964:	69fb      	ldr	r3, [r7, #28]
 8003966:	4413      	add	r3, r2
 8003968:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	69ba      	ldr	r2, [r7, #24]
 8003970:	0151      	lsls	r1, r2, #5
 8003972:	69fa      	ldr	r2, [r7, #28]
 8003974:	440a      	add	r2, r1
 8003976:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800397a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800397e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	791b      	ldrb	r3, [r3, #4]
 8003984:	2b01      	cmp	r3, #1
 8003986:	d015      	beq.n	80039b4 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8003988:	68bb      	ldr	r3, [r7, #8]
 800398a:	691b      	ldr	r3, [r3, #16]
 800398c:	2b00      	cmp	r3, #0
 800398e:	f000 814d 	beq.w	8003c2c <USB_EPStartXfer+0x520>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8003992:	69fb      	ldr	r3, [r7, #28]
 8003994:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003998:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800399a:	68bb      	ldr	r3, [r7, #8]
 800399c:	781b      	ldrb	r3, [r3, #0]
 800399e:	f003 030f 	and.w	r3, r3, #15
 80039a2:	2101      	movs	r1, #1
 80039a4:	fa01 f303 	lsl.w	r3, r1, r3
 80039a8:	69f9      	ldr	r1, [r7, #28]
 80039aa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80039ae:	4313      	orrs	r3, r2
 80039b0:	634b      	str	r3, [r1, #52]	; 0x34
 80039b2:	e13b      	b.n	8003c2c <USB_EPStartXfer+0x520>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80039b4:	69fb      	ldr	r3, [r7, #28]
 80039b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039ba:	689b      	ldr	r3, [r3, #8]
 80039bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d110      	bne.n	80039e6 <USB_EPStartXfer+0x2da>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80039c4:	69bb      	ldr	r3, [r7, #24]
 80039c6:	015a      	lsls	r2, r3, #5
 80039c8:	69fb      	ldr	r3, [r7, #28]
 80039ca:	4413      	add	r3, r2
 80039cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	69ba      	ldr	r2, [r7, #24]
 80039d4:	0151      	lsls	r1, r2, #5
 80039d6:	69fa      	ldr	r2, [r7, #28]
 80039d8:	440a      	add	r2, r1
 80039da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80039de:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80039e2:	6013      	str	r3, [r2, #0]
 80039e4:	e00f      	b.n	8003a06 <USB_EPStartXfer+0x2fa>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80039e6:	69bb      	ldr	r3, [r7, #24]
 80039e8:	015a      	lsls	r2, r3, #5
 80039ea:	69fb      	ldr	r3, [r7, #28]
 80039ec:	4413      	add	r3, r2
 80039ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	69ba      	ldr	r2, [r7, #24]
 80039f6:	0151      	lsls	r1, r2, #5
 80039f8:	69fa      	ldr	r2, [r7, #28]
 80039fa:	440a      	add	r2, r1
 80039fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003a00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a04:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8003a06:	68bb      	ldr	r3, [r7, #8]
 8003a08:	68d9      	ldr	r1, [r3, #12]
 8003a0a:	68bb      	ldr	r3, [r7, #8]
 8003a0c:	781a      	ldrb	r2, [r3, #0]
 8003a0e:	68bb      	ldr	r3, [r7, #8]
 8003a10:	691b      	ldr	r3, [r3, #16]
 8003a12:	b298      	uxth	r0, r3
 8003a14:	79fb      	ldrb	r3, [r7, #7]
 8003a16:	9300      	str	r3, [sp, #0]
 8003a18:	4603      	mov	r3, r0
 8003a1a:	68f8      	ldr	r0, [r7, #12]
 8003a1c:	f000 f9b8 	bl	8003d90 <USB_WritePacket>
 8003a20:	e104      	b.n	8003c2c <USB_EPStartXfer+0x520>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8003a22:	69bb      	ldr	r3, [r7, #24]
 8003a24:	015a      	lsls	r2, r3, #5
 8003a26:	69fb      	ldr	r3, [r7, #28]
 8003a28:	4413      	add	r3, r2
 8003a2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a2e:	691b      	ldr	r3, [r3, #16]
 8003a30:	69ba      	ldr	r2, [r7, #24]
 8003a32:	0151      	lsls	r1, r2, #5
 8003a34:	69fa      	ldr	r2, [r7, #28]
 8003a36:	440a      	add	r2, r1
 8003a38:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003a3c:	0cdb      	lsrs	r3, r3, #19
 8003a3e:	04db      	lsls	r3, r3, #19
 8003a40:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003a42:	69bb      	ldr	r3, [r7, #24]
 8003a44:	015a      	lsls	r2, r3, #5
 8003a46:	69fb      	ldr	r3, [r7, #28]
 8003a48:	4413      	add	r3, r2
 8003a4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a4e:	691b      	ldr	r3, [r3, #16]
 8003a50:	69ba      	ldr	r2, [r7, #24]
 8003a52:	0151      	lsls	r1, r2, #5
 8003a54:	69fa      	ldr	r2, [r7, #28]
 8003a56:	440a      	add	r2, r1
 8003a58:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003a5c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003a60:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003a64:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8003a66:	69bb      	ldr	r3, [r7, #24]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d131      	bne.n	8003ad0 <USB_EPStartXfer+0x3c4>
    {
      if (ep->xfer_len > 0U)
 8003a6c:	68bb      	ldr	r3, [r7, #8]
 8003a6e:	691b      	ldr	r3, [r3, #16]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d003      	beq.n	8003a7c <USB_EPStartXfer+0x370>
      {
        ep->xfer_len = ep->maxpacket;
 8003a74:	68bb      	ldr	r3, [r7, #8]
 8003a76:	689a      	ldr	r2, [r3, #8]
 8003a78:	68bb      	ldr	r3, [r7, #8]
 8003a7a:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8003a7c:	68bb      	ldr	r3, [r7, #8]
 8003a7e:	689a      	ldr	r2, [r3, #8]
 8003a80:	68bb      	ldr	r3, [r7, #8]
 8003a82:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8003a84:	69bb      	ldr	r3, [r7, #24]
 8003a86:	015a      	lsls	r2, r3, #5
 8003a88:	69fb      	ldr	r3, [r7, #28]
 8003a8a:	4413      	add	r3, r2
 8003a8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a90:	691a      	ldr	r2, [r3, #16]
 8003a92:	68bb      	ldr	r3, [r7, #8]
 8003a94:	6a1b      	ldr	r3, [r3, #32]
 8003a96:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a9a:	69b9      	ldr	r1, [r7, #24]
 8003a9c:	0148      	lsls	r0, r1, #5
 8003a9e:	69f9      	ldr	r1, [r7, #28]
 8003aa0:	4401      	add	r1, r0
 8003aa2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003aa6:	4313      	orrs	r3, r2
 8003aa8:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003aaa:	69bb      	ldr	r3, [r7, #24]
 8003aac:	015a      	lsls	r2, r3, #5
 8003aae:	69fb      	ldr	r3, [r7, #28]
 8003ab0:	4413      	add	r3, r2
 8003ab2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ab6:	691b      	ldr	r3, [r3, #16]
 8003ab8:	69ba      	ldr	r2, [r7, #24]
 8003aba:	0151      	lsls	r1, r2, #5
 8003abc:	69fa      	ldr	r2, [r7, #28]
 8003abe:	440a      	add	r2, r1
 8003ac0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003ac4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003ac8:	6113      	str	r3, [r2, #16]
 8003aca:	e061      	b.n	8003b90 <USB_EPStartXfer+0x484>
 8003acc:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8003ad0:	68bb      	ldr	r3, [r7, #8]
 8003ad2:	691b      	ldr	r3, [r3, #16]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d123      	bne.n	8003b20 <USB_EPStartXfer+0x414>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8003ad8:	69bb      	ldr	r3, [r7, #24]
 8003ada:	015a      	lsls	r2, r3, #5
 8003adc:	69fb      	ldr	r3, [r7, #28]
 8003ade:	4413      	add	r3, r2
 8003ae0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ae4:	691a      	ldr	r2, [r3, #16]
 8003ae6:	68bb      	ldr	r3, [r7, #8]
 8003ae8:	689b      	ldr	r3, [r3, #8]
 8003aea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003aee:	69b9      	ldr	r1, [r7, #24]
 8003af0:	0148      	lsls	r0, r1, #5
 8003af2:	69f9      	ldr	r1, [r7, #28]
 8003af4:	4401      	add	r1, r0
 8003af6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003afa:	4313      	orrs	r3, r2
 8003afc:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003afe:	69bb      	ldr	r3, [r7, #24]
 8003b00:	015a      	lsls	r2, r3, #5
 8003b02:	69fb      	ldr	r3, [r7, #28]
 8003b04:	4413      	add	r3, r2
 8003b06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b0a:	691b      	ldr	r3, [r3, #16]
 8003b0c:	69ba      	ldr	r2, [r7, #24]
 8003b0e:	0151      	lsls	r1, r2, #5
 8003b10:	69fa      	ldr	r2, [r7, #28]
 8003b12:	440a      	add	r2, r1
 8003b14:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003b18:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003b1c:	6113      	str	r3, [r2, #16]
 8003b1e:	e037      	b.n	8003b90 <USB_EPStartXfer+0x484>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8003b20:	68bb      	ldr	r3, [r7, #8]
 8003b22:	691a      	ldr	r2, [r3, #16]
 8003b24:	68bb      	ldr	r3, [r7, #8]
 8003b26:	689b      	ldr	r3, [r3, #8]
 8003b28:	4413      	add	r3, r2
 8003b2a:	1e5a      	subs	r2, r3, #1
 8003b2c:	68bb      	ldr	r3, [r7, #8]
 8003b2e:	689b      	ldr	r3, [r3, #8]
 8003b30:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b34:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8003b36:	68bb      	ldr	r3, [r7, #8]
 8003b38:	689b      	ldr	r3, [r3, #8]
 8003b3a:	8afa      	ldrh	r2, [r7, #22]
 8003b3c:	fb03 f202 	mul.w	r2, r3, r2
 8003b40:	68bb      	ldr	r3, [r7, #8]
 8003b42:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8003b44:	69bb      	ldr	r3, [r7, #24]
 8003b46:	015a      	lsls	r2, r3, #5
 8003b48:	69fb      	ldr	r3, [r7, #28]
 8003b4a:	4413      	add	r3, r2
 8003b4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b50:	691a      	ldr	r2, [r3, #16]
 8003b52:	8afb      	ldrh	r3, [r7, #22]
 8003b54:	04d9      	lsls	r1, r3, #19
 8003b56:	4b38      	ldr	r3, [pc, #224]	; (8003c38 <USB_EPStartXfer+0x52c>)
 8003b58:	400b      	ands	r3, r1
 8003b5a:	69b9      	ldr	r1, [r7, #24]
 8003b5c:	0148      	lsls	r0, r1, #5
 8003b5e:	69f9      	ldr	r1, [r7, #28]
 8003b60:	4401      	add	r1, r0
 8003b62:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003b66:	4313      	orrs	r3, r2
 8003b68:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8003b6a:	69bb      	ldr	r3, [r7, #24]
 8003b6c:	015a      	lsls	r2, r3, #5
 8003b6e:	69fb      	ldr	r3, [r7, #28]
 8003b70:	4413      	add	r3, r2
 8003b72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b76:	691a      	ldr	r2, [r3, #16]
 8003b78:	68bb      	ldr	r3, [r7, #8]
 8003b7a:	6a1b      	ldr	r3, [r3, #32]
 8003b7c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b80:	69b9      	ldr	r1, [r7, #24]
 8003b82:	0148      	lsls	r0, r1, #5
 8003b84:	69f9      	ldr	r1, [r7, #28]
 8003b86:	4401      	add	r1, r0
 8003b88:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003b8c:	4313      	orrs	r3, r2
 8003b8e:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8003b90:	79fb      	ldrb	r3, [r7, #7]
 8003b92:	2b01      	cmp	r3, #1
 8003b94:	d10d      	bne.n	8003bb2 <USB_EPStartXfer+0x4a6>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8003b96:	68bb      	ldr	r3, [r7, #8]
 8003b98:	68db      	ldr	r3, [r3, #12]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d009      	beq.n	8003bb2 <USB_EPStartXfer+0x4a6>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8003b9e:	68bb      	ldr	r3, [r7, #8]
 8003ba0:	68d9      	ldr	r1, [r3, #12]
 8003ba2:	69bb      	ldr	r3, [r7, #24]
 8003ba4:	015a      	lsls	r2, r3, #5
 8003ba6:	69fb      	ldr	r3, [r7, #28]
 8003ba8:	4413      	add	r3, r2
 8003baa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bae:	460a      	mov	r2, r1
 8003bb0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8003bb2:	68bb      	ldr	r3, [r7, #8]
 8003bb4:	791b      	ldrb	r3, [r3, #4]
 8003bb6:	2b01      	cmp	r3, #1
 8003bb8:	d128      	bne.n	8003c0c <USB_EPStartXfer+0x500>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003bba:	69fb      	ldr	r3, [r7, #28]
 8003bbc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bc0:	689b      	ldr	r3, [r3, #8]
 8003bc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d110      	bne.n	8003bec <USB_EPStartXfer+0x4e0>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8003bca:	69bb      	ldr	r3, [r7, #24]
 8003bcc:	015a      	lsls	r2, r3, #5
 8003bce:	69fb      	ldr	r3, [r7, #28]
 8003bd0:	4413      	add	r3, r2
 8003bd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	69ba      	ldr	r2, [r7, #24]
 8003bda:	0151      	lsls	r1, r2, #5
 8003bdc:	69fa      	ldr	r2, [r7, #28]
 8003bde:	440a      	add	r2, r1
 8003be0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003be4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003be8:	6013      	str	r3, [r2, #0]
 8003bea:	e00f      	b.n	8003c0c <USB_EPStartXfer+0x500>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8003bec:	69bb      	ldr	r3, [r7, #24]
 8003bee:	015a      	lsls	r2, r3, #5
 8003bf0:	69fb      	ldr	r3, [r7, #28]
 8003bf2:	4413      	add	r3, r2
 8003bf4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	69ba      	ldr	r2, [r7, #24]
 8003bfc:	0151      	lsls	r1, r2, #5
 8003bfe:	69fa      	ldr	r2, [r7, #28]
 8003c00:	440a      	add	r2, r1
 8003c02:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003c06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c0a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003c0c:	69bb      	ldr	r3, [r7, #24]
 8003c0e:	015a      	lsls	r2, r3, #5
 8003c10:	69fb      	ldr	r3, [r7, #28]
 8003c12:	4413      	add	r3, r2
 8003c14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	69ba      	ldr	r2, [r7, #24]
 8003c1c:	0151      	lsls	r1, r2, #5
 8003c1e:	69fa      	ldr	r2, [r7, #28]
 8003c20:	440a      	add	r2, r1
 8003c22:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003c26:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003c2a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003c2c:	2300      	movs	r3, #0
}
 8003c2e:	4618      	mov	r0, r3
 8003c30:	3720      	adds	r7, #32
 8003c32:	46bd      	mov	sp, r7
 8003c34:	bd80      	pop	{r7, pc}
 8003c36:	bf00      	nop
 8003c38:	1ff80000 	.word	0x1ff80000

08003c3c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	b087      	sub	sp, #28
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
 8003c44:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003c46:	2300      	movs	r3, #0
 8003c48:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	785b      	ldrb	r3, [r3, #1]
 8003c56:	2b01      	cmp	r3, #1
 8003c58:	d14a      	bne.n	8003cf0 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	781b      	ldrb	r3, [r3, #0]
 8003c5e:	015a      	lsls	r2, r3, #5
 8003c60:	693b      	ldr	r3, [r7, #16]
 8003c62:	4413      	add	r3, r2
 8003c64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003c6e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003c72:	f040 8086 	bne.w	8003d82 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	781b      	ldrb	r3, [r3, #0]
 8003c7a:	015a      	lsls	r2, r3, #5
 8003c7c:	693b      	ldr	r3, [r7, #16]
 8003c7e:	4413      	add	r3, r2
 8003c80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	683a      	ldr	r2, [r7, #0]
 8003c88:	7812      	ldrb	r2, [r2, #0]
 8003c8a:	0151      	lsls	r1, r2, #5
 8003c8c:	693a      	ldr	r2, [r7, #16]
 8003c8e:	440a      	add	r2, r1
 8003c90:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c94:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003c98:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	781b      	ldrb	r3, [r3, #0]
 8003c9e:	015a      	lsls	r2, r3, #5
 8003ca0:	693b      	ldr	r3, [r7, #16]
 8003ca2:	4413      	add	r3, r2
 8003ca4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	683a      	ldr	r2, [r7, #0]
 8003cac:	7812      	ldrb	r2, [r2, #0]
 8003cae:	0151      	lsls	r1, r2, #5
 8003cb0:	693a      	ldr	r2, [r7, #16]
 8003cb2:	440a      	add	r2, r1
 8003cb4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003cb8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003cbc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	3301      	adds	r3, #1
 8003cc2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	f242 7210 	movw	r2, #10000	; 0x2710
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d902      	bls.n	8003cd4 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8003cce:	2301      	movs	r3, #1
 8003cd0:	75fb      	strb	r3, [r7, #23]
          break;
 8003cd2:	e056      	b.n	8003d82 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	781b      	ldrb	r3, [r3, #0]
 8003cd8:	015a      	lsls	r2, r3, #5
 8003cda:	693b      	ldr	r3, [r7, #16]
 8003cdc:	4413      	add	r3, r2
 8003cde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003ce8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003cec:	d0e7      	beq.n	8003cbe <USB_EPStopXfer+0x82>
 8003cee:	e048      	b.n	8003d82 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	781b      	ldrb	r3, [r3, #0]
 8003cf4:	015a      	lsls	r2, r3, #5
 8003cf6:	693b      	ldr	r3, [r7, #16]
 8003cf8:	4413      	add	r3, r2
 8003cfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003d04:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003d08:	d13b      	bne.n	8003d82 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	781b      	ldrb	r3, [r3, #0]
 8003d0e:	015a      	lsls	r2, r3, #5
 8003d10:	693b      	ldr	r3, [r7, #16]
 8003d12:	4413      	add	r3, r2
 8003d14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	683a      	ldr	r2, [r7, #0]
 8003d1c:	7812      	ldrb	r2, [r2, #0]
 8003d1e:	0151      	lsls	r1, r2, #5
 8003d20:	693a      	ldr	r2, [r7, #16]
 8003d22:	440a      	add	r2, r1
 8003d24:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003d28:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003d2c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	781b      	ldrb	r3, [r3, #0]
 8003d32:	015a      	lsls	r2, r3, #5
 8003d34:	693b      	ldr	r3, [r7, #16]
 8003d36:	4413      	add	r3, r2
 8003d38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	683a      	ldr	r2, [r7, #0]
 8003d40:	7812      	ldrb	r2, [r2, #0]
 8003d42:	0151      	lsls	r1, r2, #5
 8003d44:	693a      	ldr	r2, [r7, #16]
 8003d46:	440a      	add	r2, r1
 8003d48:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003d4c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003d50:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	3301      	adds	r3, #1
 8003d56:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	f242 7210 	movw	r2, #10000	; 0x2710
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d902      	bls.n	8003d68 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8003d62:	2301      	movs	r3, #1
 8003d64:	75fb      	strb	r3, [r7, #23]
          break;
 8003d66:	e00c      	b.n	8003d82 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	781b      	ldrb	r3, [r3, #0]
 8003d6c:	015a      	lsls	r2, r3, #5
 8003d6e:	693b      	ldr	r3, [r7, #16]
 8003d70:	4413      	add	r3, r2
 8003d72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003d7c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003d80:	d0e7      	beq.n	8003d52 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8003d82:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d84:	4618      	mov	r0, r3
 8003d86:	371c      	adds	r7, #28
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8e:	4770      	bx	lr

08003d90 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8003d90:	b480      	push	{r7}
 8003d92:	b089      	sub	sp, #36	; 0x24
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	60f8      	str	r0, [r7, #12]
 8003d98:	60b9      	str	r1, [r7, #8]
 8003d9a:	4611      	mov	r1, r2
 8003d9c:	461a      	mov	r2, r3
 8003d9e:	460b      	mov	r3, r1
 8003da0:	71fb      	strb	r3, [r7, #7]
 8003da2:	4613      	mov	r3, r2
 8003da4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8003daa:	68bb      	ldr	r3, [r7, #8]
 8003dac:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8003dae:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d123      	bne.n	8003dfe <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8003db6:	88bb      	ldrh	r3, [r7, #4]
 8003db8:	3303      	adds	r3, #3
 8003dba:	089b      	lsrs	r3, r3, #2
 8003dbc:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	61bb      	str	r3, [r7, #24]
 8003dc2:	e018      	b.n	8003df6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8003dc4:	79fb      	ldrb	r3, [r7, #7]
 8003dc6:	031a      	lsls	r2, r3, #12
 8003dc8:	697b      	ldr	r3, [r7, #20]
 8003dca:	4413      	add	r3, r2
 8003dcc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003dd0:	461a      	mov	r2, r3
 8003dd2:	69fb      	ldr	r3, [r7, #28]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	6013      	str	r3, [r2, #0]
      pSrc++;
 8003dd8:	69fb      	ldr	r3, [r7, #28]
 8003dda:	3301      	adds	r3, #1
 8003ddc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003dde:	69fb      	ldr	r3, [r7, #28]
 8003de0:	3301      	adds	r3, #1
 8003de2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003de4:	69fb      	ldr	r3, [r7, #28]
 8003de6:	3301      	adds	r3, #1
 8003de8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003dea:	69fb      	ldr	r3, [r7, #28]
 8003dec:	3301      	adds	r3, #1
 8003dee:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8003df0:	69bb      	ldr	r3, [r7, #24]
 8003df2:	3301      	adds	r3, #1
 8003df4:	61bb      	str	r3, [r7, #24]
 8003df6:	69ba      	ldr	r2, [r7, #24]
 8003df8:	693b      	ldr	r3, [r7, #16]
 8003dfa:	429a      	cmp	r2, r3
 8003dfc:	d3e2      	bcc.n	8003dc4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8003dfe:	2300      	movs	r3, #0
}
 8003e00:	4618      	mov	r0, r3
 8003e02:	3724      	adds	r7, #36	; 0x24
 8003e04:	46bd      	mov	sp, r7
 8003e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0a:	4770      	bx	lr

08003e0c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	b08b      	sub	sp, #44	; 0x2c
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	60f8      	str	r0, [r7, #12]
 8003e14:	60b9      	str	r1, [r7, #8]
 8003e16:	4613      	mov	r3, r2
 8003e18:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8003e1e:	68bb      	ldr	r3, [r7, #8]
 8003e20:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8003e22:	88fb      	ldrh	r3, [r7, #6]
 8003e24:	089b      	lsrs	r3, r3, #2
 8003e26:	b29b      	uxth	r3, r3
 8003e28:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8003e2a:	88fb      	ldrh	r3, [r7, #6]
 8003e2c:	f003 0303 	and.w	r3, r3, #3
 8003e30:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8003e32:	2300      	movs	r3, #0
 8003e34:	623b      	str	r3, [r7, #32]
 8003e36:	e014      	b.n	8003e62 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8003e38:	69bb      	ldr	r3, [r7, #24]
 8003e3a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e3e:	681a      	ldr	r2, [r3, #0]
 8003e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e42:	601a      	str	r2, [r3, #0]
    pDest++;
 8003e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e46:	3301      	adds	r3, #1
 8003e48:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8003e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e4c:	3301      	adds	r3, #1
 8003e4e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8003e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e52:	3301      	adds	r3, #1
 8003e54:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8003e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e58:	3301      	adds	r3, #1
 8003e5a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8003e5c:	6a3b      	ldr	r3, [r7, #32]
 8003e5e:	3301      	adds	r3, #1
 8003e60:	623b      	str	r3, [r7, #32]
 8003e62:	6a3a      	ldr	r2, [r7, #32]
 8003e64:	697b      	ldr	r3, [r7, #20]
 8003e66:	429a      	cmp	r2, r3
 8003e68:	d3e6      	bcc.n	8003e38 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8003e6a:	8bfb      	ldrh	r3, [r7, #30]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d01e      	beq.n	8003eae <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8003e70:	2300      	movs	r3, #0
 8003e72:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8003e74:	69bb      	ldr	r3, [r7, #24]
 8003e76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e7a:	461a      	mov	r2, r3
 8003e7c:	f107 0310 	add.w	r3, r7, #16
 8003e80:	6812      	ldr	r2, [r2, #0]
 8003e82:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8003e84:	693a      	ldr	r2, [r7, #16]
 8003e86:	6a3b      	ldr	r3, [r7, #32]
 8003e88:	b2db      	uxtb	r3, r3
 8003e8a:	00db      	lsls	r3, r3, #3
 8003e8c:	fa22 f303 	lsr.w	r3, r2, r3
 8003e90:	b2da      	uxtb	r2, r3
 8003e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e94:	701a      	strb	r2, [r3, #0]
      i++;
 8003e96:	6a3b      	ldr	r3, [r7, #32]
 8003e98:	3301      	adds	r3, #1
 8003e9a:	623b      	str	r3, [r7, #32]
      pDest++;
 8003e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e9e:	3301      	adds	r3, #1
 8003ea0:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8003ea2:	8bfb      	ldrh	r3, [r7, #30]
 8003ea4:	3b01      	subs	r3, #1
 8003ea6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8003ea8:	8bfb      	ldrh	r3, [r7, #30]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d1ea      	bne.n	8003e84 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8003eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	372c      	adds	r7, #44	; 0x2c
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eba:	4770      	bx	lr

08003ebc <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8003ebc:	b480      	push	{r7}
 8003ebe:	b085      	sub	sp, #20
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
 8003ec4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	781b      	ldrb	r3, [r3, #0]
 8003ece:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	785b      	ldrb	r3, [r3, #1]
 8003ed4:	2b01      	cmp	r3, #1
 8003ed6:	d12c      	bne.n	8003f32 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8003ed8:	68bb      	ldr	r3, [r7, #8]
 8003eda:	015a      	lsls	r2, r3, #5
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	4413      	add	r3, r2
 8003ee0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	db12      	blt.n	8003f10 <USB_EPSetStall+0x54>
 8003eea:	68bb      	ldr	r3, [r7, #8]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d00f      	beq.n	8003f10 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8003ef0:	68bb      	ldr	r3, [r7, #8]
 8003ef2:	015a      	lsls	r2, r3, #5
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	4413      	add	r3, r2
 8003ef8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	68ba      	ldr	r2, [r7, #8]
 8003f00:	0151      	lsls	r1, r2, #5
 8003f02:	68fa      	ldr	r2, [r7, #12]
 8003f04:	440a      	add	r2, r1
 8003f06:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f0a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003f0e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8003f10:	68bb      	ldr	r3, [r7, #8]
 8003f12:	015a      	lsls	r2, r3, #5
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	4413      	add	r3, r2
 8003f18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	68ba      	ldr	r2, [r7, #8]
 8003f20:	0151      	lsls	r1, r2, #5
 8003f22:	68fa      	ldr	r2, [r7, #12]
 8003f24:	440a      	add	r2, r1
 8003f26:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f2a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003f2e:	6013      	str	r3, [r2, #0]
 8003f30:	e02b      	b.n	8003f8a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8003f32:	68bb      	ldr	r3, [r7, #8]
 8003f34:	015a      	lsls	r2, r3, #5
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	4413      	add	r3, r2
 8003f3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	db12      	blt.n	8003f6a <USB_EPSetStall+0xae>
 8003f44:	68bb      	ldr	r3, [r7, #8]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d00f      	beq.n	8003f6a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8003f4a:	68bb      	ldr	r3, [r7, #8]
 8003f4c:	015a      	lsls	r2, r3, #5
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	4413      	add	r3, r2
 8003f52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	68ba      	ldr	r2, [r7, #8]
 8003f5a:	0151      	lsls	r1, r2, #5
 8003f5c:	68fa      	ldr	r2, [r7, #12]
 8003f5e:	440a      	add	r2, r1
 8003f60:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003f64:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003f68:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8003f6a:	68bb      	ldr	r3, [r7, #8]
 8003f6c:	015a      	lsls	r2, r3, #5
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	4413      	add	r3, r2
 8003f72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	68ba      	ldr	r2, [r7, #8]
 8003f7a:	0151      	lsls	r1, r2, #5
 8003f7c:	68fa      	ldr	r2, [r7, #12]
 8003f7e:	440a      	add	r2, r1
 8003f80:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003f84:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003f88:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003f8a:	2300      	movs	r3, #0
}
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	3714      	adds	r7, #20
 8003f90:	46bd      	mov	sp, r7
 8003f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f96:	4770      	bx	lr

08003f98 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8003f98:	b480      	push	{r7}
 8003f9a:	b085      	sub	sp, #20
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
 8003fa0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	781b      	ldrb	r3, [r3, #0]
 8003faa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	785b      	ldrb	r3, [r3, #1]
 8003fb0:	2b01      	cmp	r3, #1
 8003fb2:	d128      	bne.n	8004006 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003fb4:	68bb      	ldr	r3, [r7, #8]
 8003fb6:	015a      	lsls	r2, r3, #5
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	4413      	add	r3, r2
 8003fbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	68ba      	ldr	r2, [r7, #8]
 8003fc4:	0151      	lsls	r1, r2, #5
 8003fc6:	68fa      	ldr	r2, [r7, #12]
 8003fc8:	440a      	add	r2, r1
 8003fca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003fce:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003fd2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	791b      	ldrb	r3, [r3, #4]
 8003fd8:	2b03      	cmp	r3, #3
 8003fda:	d003      	beq.n	8003fe4 <USB_EPClearStall+0x4c>
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	791b      	ldrb	r3, [r3, #4]
 8003fe0:	2b02      	cmp	r3, #2
 8003fe2:	d138      	bne.n	8004056 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8003fe4:	68bb      	ldr	r3, [r7, #8]
 8003fe6:	015a      	lsls	r2, r3, #5
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	4413      	add	r3, r2
 8003fec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	68ba      	ldr	r2, [r7, #8]
 8003ff4:	0151      	lsls	r1, r2, #5
 8003ff6:	68fa      	ldr	r2, [r7, #12]
 8003ff8:	440a      	add	r2, r1
 8003ffa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ffe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004002:	6013      	str	r3, [r2, #0]
 8004004:	e027      	b.n	8004056 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004006:	68bb      	ldr	r3, [r7, #8]
 8004008:	015a      	lsls	r2, r3, #5
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	4413      	add	r3, r2
 800400e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	68ba      	ldr	r2, [r7, #8]
 8004016:	0151      	lsls	r1, r2, #5
 8004018:	68fa      	ldr	r2, [r7, #12]
 800401a:	440a      	add	r2, r1
 800401c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004020:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004024:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	791b      	ldrb	r3, [r3, #4]
 800402a:	2b03      	cmp	r3, #3
 800402c:	d003      	beq.n	8004036 <USB_EPClearStall+0x9e>
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	791b      	ldrb	r3, [r3, #4]
 8004032:	2b02      	cmp	r3, #2
 8004034:	d10f      	bne.n	8004056 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004036:	68bb      	ldr	r3, [r7, #8]
 8004038:	015a      	lsls	r2, r3, #5
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	4413      	add	r3, r2
 800403e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	68ba      	ldr	r2, [r7, #8]
 8004046:	0151      	lsls	r1, r2, #5
 8004048:	68fa      	ldr	r2, [r7, #12]
 800404a:	440a      	add	r2, r1
 800404c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004050:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004054:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8004056:	2300      	movs	r3, #0
}
 8004058:	4618      	mov	r0, r3
 800405a:	3714      	adds	r7, #20
 800405c:	46bd      	mov	sp, r7
 800405e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004062:	4770      	bx	lr

08004064 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8004064:	b480      	push	{r7}
 8004066:	b085      	sub	sp, #20
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
 800406c:	460b      	mov	r3, r1
 800406e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	68fa      	ldr	r2, [r7, #12]
 800407e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004082:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004086:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800408e:	681a      	ldr	r2, [r3, #0]
 8004090:	78fb      	ldrb	r3, [r7, #3]
 8004092:	011b      	lsls	r3, r3, #4
 8004094:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8004098:	68f9      	ldr	r1, [r7, #12]
 800409a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800409e:	4313      	orrs	r3, r2
 80040a0:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80040a2:	2300      	movs	r3, #0
}
 80040a4:	4618      	mov	r0, r3
 80040a6:	3714      	adds	r7, #20
 80040a8:	46bd      	mov	sp, r7
 80040aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ae:	4770      	bx	lr

080040b0 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80040b0:	b480      	push	{r7}
 80040b2:	b085      	sub	sp, #20
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	68fa      	ldr	r2, [r7, #12]
 80040c6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80040ca:	f023 0303 	bic.w	r3, r3, #3
 80040ce:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040d6:	685b      	ldr	r3, [r3, #4]
 80040d8:	68fa      	ldr	r2, [r7, #12]
 80040da:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80040de:	f023 0302 	bic.w	r3, r3, #2
 80040e2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80040e4:	2300      	movs	r3, #0
}
 80040e6:	4618      	mov	r0, r3
 80040e8:	3714      	adds	r7, #20
 80040ea:	46bd      	mov	sp, r7
 80040ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f0:	4770      	bx	lr

080040f2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80040f2:	b480      	push	{r7}
 80040f4:	b085      	sub	sp, #20
 80040f6:	af00      	add	r7, sp, #0
 80040f8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	68fa      	ldr	r2, [r7, #12]
 8004108:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800410c:	f023 0303 	bic.w	r3, r3, #3
 8004110:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004118:	685b      	ldr	r3, [r3, #4]
 800411a:	68fa      	ldr	r2, [r7, #12]
 800411c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004120:	f043 0302 	orr.w	r3, r3, #2
 8004124:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004126:	2300      	movs	r3, #0
}
 8004128:	4618      	mov	r0, r3
 800412a:	3714      	adds	r7, #20
 800412c:	46bd      	mov	sp, r7
 800412e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004132:	4770      	bx	lr

08004134 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8004134:	b480      	push	{r7}
 8004136:	b085      	sub	sp, #20
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	695b      	ldr	r3, [r3, #20]
 8004140:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	699b      	ldr	r3, [r3, #24]
 8004146:	68fa      	ldr	r2, [r7, #12]
 8004148:	4013      	ands	r3, r2
 800414a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800414c:	68fb      	ldr	r3, [r7, #12]
}
 800414e:	4618      	mov	r0, r3
 8004150:	3714      	adds	r7, #20
 8004152:	46bd      	mov	sp, r7
 8004154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004158:	4770      	bx	lr

0800415a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800415a:	b480      	push	{r7}
 800415c:	b085      	sub	sp, #20
 800415e:	af00      	add	r7, sp, #0
 8004160:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800416c:	699b      	ldr	r3, [r3, #24]
 800416e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004176:	69db      	ldr	r3, [r3, #28]
 8004178:	68ba      	ldr	r2, [r7, #8]
 800417a:	4013      	ands	r3, r2
 800417c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800417e:	68bb      	ldr	r3, [r7, #8]
 8004180:	0c1b      	lsrs	r3, r3, #16
}
 8004182:	4618      	mov	r0, r3
 8004184:	3714      	adds	r7, #20
 8004186:	46bd      	mov	sp, r7
 8004188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418c:	4770      	bx	lr

0800418e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800418e:	b480      	push	{r7}
 8004190:	b085      	sub	sp, #20
 8004192:	af00      	add	r7, sp, #0
 8004194:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041a0:	699b      	ldr	r3, [r3, #24]
 80041a2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041aa:	69db      	ldr	r3, [r3, #28]
 80041ac:	68ba      	ldr	r2, [r7, #8]
 80041ae:	4013      	ands	r3, r2
 80041b0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80041b2:	68bb      	ldr	r3, [r7, #8]
 80041b4:	b29b      	uxth	r3, r3
}
 80041b6:	4618      	mov	r0, r3
 80041b8:	3714      	adds	r7, #20
 80041ba:	46bd      	mov	sp, r7
 80041bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c0:	4770      	bx	lr

080041c2 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80041c2:	b480      	push	{r7}
 80041c4:	b085      	sub	sp, #20
 80041c6:	af00      	add	r7, sp, #0
 80041c8:	6078      	str	r0, [r7, #4]
 80041ca:	460b      	mov	r3, r1
 80041cc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80041d2:	78fb      	ldrb	r3, [r7, #3]
 80041d4:	015a      	lsls	r2, r3, #5
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	4413      	add	r3, r2
 80041da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041de:	689b      	ldr	r3, [r3, #8]
 80041e0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041e8:	695b      	ldr	r3, [r3, #20]
 80041ea:	68ba      	ldr	r2, [r7, #8]
 80041ec:	4013      	ands	r3, r2
 80041ee:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80041f0:	68bb      	ldr	r3, [r7, #8]
}
 80041f2:	4618      	mov	r0, r3
 80041f4:	3714      	adds	r7, #20
 80041f6:	46bd      	mov	sp, r7
 80041f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fc:	4770      	bx	lr

080041fe <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80041fe:	b480      	push	{r7}
 8004200:	b087      	sub	sp, #28
 8004202:	af00      	add	r7, sp, #0
 8004204:	6078      	str	r0, [r7, #4]
 8004206:	460b      	mov	r3, r1
 8004208:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800420e:	697b      	ldr	r3, [r7, #20]
 8004210:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004214:	691b      	ldr	r3, [r3, #16]
 8004216:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8004218:	697b      	ldr	r3, [r7, #20]
 800421a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800421e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004220:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8004222:	78fb      	ldrb	r3, [r7, #3]
 8004224:	f003 030f 	and.w	r3, r3, #15
 8004228:	68fa      	ldr	r2, [r7, #12]
 800422a:	fa22 f303 	lsr.w	r3, r2, r3
 800422e:	01db      	lsls	r3, r3, #7
 8004230:	b2db      	uxtb	r3, r3
 8004232:	693a      	ldr	r2, [r7, #16]
 8004234:	4313      	orrs	r3, r2
 8004236:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004238:	78fb      	ldrb	r3, [r7, #3]
 800423a:	015a      	lsls	r2, r3, #5
 800423c:	697b      	ldr	r3, [r7, #20]
 800423e:	4413      	add	r3, r2
 8004240:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004244:	689b      	ldr	r3, [r3, #8]
 8004246:	693a      	ldr	r2, [r7, #16]
 8004248:	4013      	ands	r3, r2
 800424a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800424c:	68bb      	ldr	r3, [r7, #8]
}
 800424e:	4618      	mov	r0, r3
 8004250:	371c      	adds	r7, #28
 8004252:	46bd      	mov	sp, r7
 8004254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004258:	4770      	bx	lr

0800425a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800425a:	b480      	push	{r7}
 800425c:	b083      	sub	sp, #12
 800425e:	af00      	add	r7, sp, #0
 8004260:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	695b      	ldr	r3, [r3, #20]
 8004266:	f003 0301 	and.w	r3, r3, #1
}
 800426a:	4618      	mov	r0, r3
 800426c:	370c      	adds	r7, #12
 800426e:	46bd      	mov	sp, r7
 8004270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004274:	4770      	bx	lr

08004276 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8004276:	b480      	push	{r7}
 8004278:	b085      	sub	sp, #20
 800427a:	af00      	add	r7, sp, #0
 800427c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	68fa      	ldr	r2, [r7, #12]
 800428c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004290:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004294:	f023 0307 	bic.w	r3, r3, #7
 8004298:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042a0:	685b      	ldr	r3, [r3, #4]
 80042a2:	68fa      	ldr	r2, [r7, #12]
 80042a4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80042a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042ac:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80042ae:	2300      	movs	r3, #0
}
 80042b0:	4618      	mov	r0, r3
 80042b2:	3714      	adds	r7, #20
 80042b4:	46bd      	mov	sp, r7
 80042b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ba:	4770      	bx	lr

080042bc <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 80042bc:	b480      	push	{r7}
 80042be:	b087      	sub	sp, #28
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	60f8      	str	r0, [r7, #12]
 80042c4:	460b      	mov	r3, r1
 80042c6:	607a      	str	r2, [r7, #4]
 80042c8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	333c      	adds	r3, #60	; 0x3c
 80042d2:	3304      	adds	r3, #4
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80042d8:	693b      	ldr	r3, [r7, #16]
 80042da:	4a26      	ldr	r2, [pc, #152]	; (8004374 <USB_EP0_OutStart+0xb8>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	d90a      	bls.n	80042f6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80042e0:	697b      	ldr	r3, [r7, #20]
 80042e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80042ec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80042f0:	d101      	bne.n	80042f6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80042f2:	2300      	movs	r3, #0
 80042f4:	e037      	b.n	8004366 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80042f6:	697b      	ldr	r3, [r7, #20]
 80042f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042fc:	461a      	mov	r2, r3
 80042fe:	2300      	movs	r3, #0
 8004300:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004302:	697b      	ldr	r3, [r7, #20]
 8004304:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004308:	691b      	ldr	r3, [r3, #16]
 800430a:	697a      	ldr	r2, [r7, #20]
 800430c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004310:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004314:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8004316:	697b      	ldr	r3, [r7, #20]
 8004318:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800431c:	691b      	ldr	r3, [r3, #16]
 800431e:	697a      	ldr	r2, [r7, #20]
 8004320:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004324:	f043 0318 	orr.w	r3, r3, #24
 8004328:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800432a:	697b      	ldr	r3, [r7, #20]
 800432c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004330:	691b      	ldr	r3, [r3, #16]
 8004332:	697a      	ldr	r2, [r7, #20]
 8004334:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004338:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800433c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800433e:	7afb      	ldrb	r3, [r7, #11]
 8004340:	2b01      	cmp	r3, #1
 8004342:	d10f      	bne.n	8004364 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8004344:	697b      	ldr	r3, [r7, #20]
 8004346:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800434a:	461a      	mov	r2, r3
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8004350:	697b      	ldr	r3, [r7, #20]
 8004352:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	697a      	ldr	r2, [r7, #20]
 800435a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800435e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8004362:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004364:	2300      	movs	r3, #0
}
 8004366:	4618      	mov	r0, r3
 8004368:	371c      	adds	r7, #28
 800436a:	46bd      	mov	sp, r7
 800436c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004370:	4770      	bx	lr
 8004372:	bf00      	nop
 8004374:	4f54300a 	.word	0x4f54300a

08004378 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004378:	b480      	push	{r7}
 800437a:	b085      	sub	sp, #20
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004380:	2300      	movs	r3, #0
 8004382:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	3301      	adds	r3, #1
 8004388:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8004390:	d901      	bls.n	8004396 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004392:	2303      	movs	r3, #3
 8004394:	e01b      	b.n	80043ce <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	691b      	ldr	r3, [r3, #16]
 800439a:	2b00      	cmp	r3, #0
 800439c:	daf2      	bge.n	8004384 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800439e:	2300      	movs	r3, #0
 80043a0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	691b      	ldr	r3, [r3, #16]
 80043a6:	f043 0201 	orr.w	r2, r3, #1
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	3301      	adds	r3, #1
 80043b2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80043ba:	d901      	bls.n	80043c0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80043bc:	2303      	movs	r3, #3
 80043be:	e006      	b.n	80043ce <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	691b      	ldr	r3, [r3, #16]
 80043c4:	f003 0301 	and.w	r3, r3, #1
 80043c8:	2b01      	cmp	r3, #1
 80043ca:	d0f0      	beq.n	80043ae <USB_CoreReset+0x36>

  return HAL_OK;
 80043cc:	2300      	movs	r3, #0
}
 80043ce:	4618      	mov	r0, r3
 80043d0:	3714      	adds	r7, #20
 80043d2:	46bd      	mov	sp, r7
 80043d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d8:	4770      	bx	lr
	...

080043dc <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b084      	sub	sp, #16
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
 80043e4:	460b      	mov	r3, r1
 80043e6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80043e8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80043ec:	f002 fc9c 	bl	8006d28 <USBD_static_malloc>
 80043f0:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d109      	bne.n	800440c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	32b0      	adds	r2, #176	; 0xb0
 8004402:	2100      	movs	r1, #0
 8004404:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8004408:	2302      	movs	r3, #2
 800440a:	e0d4      	b.n	80045b6 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800440c:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8004410:	2100      	movs	r1, #0
 8004412:	68f8      	ldr	r0, [r7, #12]
 8004414:	f002 fd06 	bl	8006e24 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	32b0      	adds	r2, #176	; 0xb0
 8004422:	68f9      	ldr	r1, [r7, #12]
 8004424:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	32b0      	adds	r2, #176	; 0xb0
 8004432:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	7c1b      	ldrb	r3, [r3, #16]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d138      	bne.n	80044b6 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8004444:	4b5e      	ldr	r3, [pc, #376]	; (80045c0 <USBD_CDC_Init+0x1e4>)
 8004446:	7819      	ldrb	r1, [r3, #0]
 8004448:	f44f 7300 	mov.w	r3, #512	; 0x200
 800444c:	2202      	movs	r2, #2
 800444e:	6878      	ldr	r0, [r7, #4]
 8004450:	f002 fb47 	bl	8006ae2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8004454:	4b5a      	ldr	r3, [pc, #360]	; (80045c0 <USBD_CDC_Init+0x1e4>)
 8004456:	781b      	ldrb	r3, [r3, #0]
 8004458:	f003 020f 	and.w	r2, r3, #15
 800445c:	6879      	ldr	r1, [r7, #4]
 800445e:	4613      	mov	r3, r2
 8004460:	009b      	lsls	r3, r3, #2
 8004462:	4413      	add	r3, r2
 8004464:	009b      	lsls	r3, r3, #2
 8004466:	440b      	add	r3, r1
 8004468:	3324      	adds	r3, #36	; 0x24
 800446a:	2201      	movs	r2, #1
 800446c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800446e:	4b55      	ldr	r3, [pc, #340]	; (80045c4 <USBD_CDC_Init+0x1e8>)
 8004470:	7819      	ldrb	r1, [r3, #0]
 8004472:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004476:	2202      	movs	r2, #2
 8004478:	6878      	ldr	r0, [r7, #4]
 800447a:	f002 fb32 	bl	8006ae2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800447e:	4b51      	ldr	r3, [pc, #324]	; (80045c4 <USBD_CDC_Init+0x1e8>)
 8004480:	781b      	ldrb	r3, [r3, #0]
 8004482:	f003 020f 	and.w	r2, r3, #15
 8004486:	6879      	ldr	r1, [r7, #4]
 8004488:	4613      	mov	r3, r2
 800448a:	009b      	lsls	r3, r3, #2
 800448c:	4413      	add	r3, r2
 800448e:	009b      	lsls	r3, r3, #2
 8004490:	440b      	add	r3, r1
 8004492:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8004496:	2201      	movs	r2, #1
 8004498:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800449a:	4b4b      	ldr	r3, [pc, #300]	; (80045c8 <USBD_CDC_Init+0x1ec>)
 800449c:	781b      	ldrb	r3, [r3, #0]
 800449e:	f003 020f 	and.w	r2, r3, #15
 80044a2:	6879      	ldr	r1, [r7, #4]
 80044a4:	4613      	mov	r3, r2
 80044a6:	009b      	lsls	r3, r3, #2
 80044a8:	4413      	add	r3, r2
 80044aa:	009b      	lsls	r3, r3, #2
 80044ac:	440b      	add	r3, r1
 80044ae:	3326      	adds	r3, #38	; 0x26
 80044b0:	2210      	movs	r2, #16
 80044b2:	801a      	strh	r2, [r3, #0]
 80044b4:	e035      	b.n	8004522 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80044b6:	4b42      	ldr	r3, [pc, #264]	; (80045c0 <USBD_CDC_Init+0x1e4>)
 80044b8:	7819      	ldrb	r1, [r3, #0]
 80044ba:	2340      	movs	r3, #64	; 0x40
 80044bc:	2202      	movs	r2, #2
 80044be:	6878      	ldr	r0, [r7, #4]
 80044c0:	f002 fb0f 	bl	8006ae2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80044c4:	4b3e      	ldr	r3, [pc, #248]	; (80045c0 <USBD_CDC_Init+0x1e4>)
 80044c6:	781b      	ldrb	r3, [r3, #0]
 80044c8:	f003 020f 	and.w	r2, r3, #15
 80044cc:	6879      	ldr	r1, [r7, #4]
 80044ce:	4613      	mov	r3, r2
 80044d0:	009b      	lsls	r3, r3, #2
 80044d2:	4413      	add	r3, r2
 80044d4:	009b      	lsls	r3, r3, #2
 80044d6:	440b      	add	r3, r1
 80044d8:	3324      	adds	r3, #36	; 0x24
 80044da:	2201      	movs	r2, #1
 80044dc:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80044de:	4b39      	ldr	r3, [pc, #228]	; (80045c4 <USBD_CDC_Init+0x1e8>)
 80044e0:	7819      	ldrb	r1, [r3, #0]
 80044e2:	2340      	movs	r3, #64	; 0x40
 80044e4:	2202      	movs	r2, #2
 80044e6:	6878      	ldr	r0, [r7, #4]
 80044e8:	f002 fafb 	bl	8006ae2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80044ec:	4b35      	ldr	r3, [pc, #212]	; (80045c4 <USBD_CDC_Init+0x1e8>)
 80044ee:	781b      	ldrb	r3, [r3, #0]
 80044f0:	f003 020f 	and.w	r2, r3, #15
 80044f4:	6879      	ldr	r1, [r7, #4]
 80044f6:	4613      	mov	r3, r2
 80044f8:	009b      	lsls	r3, r3, #2
 80044fa:	4413      	add	r3, r2
 80044fc:	009b      	lsls	r3, r3, #2
 80044fe:	440b      	add	r3, r1
 8004500:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8004504:	2201      	movs	r2, #1
 8004506:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8004508:	4b2f      	ldr	r3, [pc, #188]	; (80045c8 <USBD_CDC_Init+0x1ec>)
 800450a:	781b      	ldrb	r3, [r3, #0]
 800450c:	f003 020f 	and.w	r2, r3, #15
 8004510:	6879      	ldr	r1, [r7, #4]
 8004512:	4613      	mov	r3, r2
 8004514:	009b      	lsls	r3, r3, #2
 8004516:	4413      	add	r3, r2
 8004518:	009b      	lsls	r3, r3, #2
 800451a:	440b      	add	r3, r1
 800451c:	3326      	adds	r3, #38	; 0x26
 800451e:	2210      	movs	r2, #16
 8004520:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8004522:	4b29      	ldr	r3, [pc, #164]	; (80045c8 <USBD_CDC_Init+0x1ec>)
 8004524:	7819      	ldrb	r1, [r3, #0]
 8004526:	2308      	movs	r3, #8
 8004528:	2203      	movs	r2, #3
 800452a:	6878      	ldr	r0, [r7, #4]
 800452c:	f002 fad9 	bl	8006ae2 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8004530:	4b25      	ldr	r3, [pc, #148]	; (80045c8 <USBD_CDC_Init+0x1ec>)
 8004532:	781b      	ldrb	r3, [r3, #0]
 8004534:	f003 020f 	and.w	r2, r3, #15
 8004538:	6879      	ldr	r1, [r7, #4]
 800453a:	4613      	mov	r3, r2
 800453c:	009b      	lsls	r3, r3, #2
 800453e:	4413      	add	r3, r2
 8004540:	009b      	lsls	r3, r3, #2
 8004542:	440b      	add	r3, r1
 8004544:	3324      	adds	r3, #36	; 0x24
 8004546:	2201      	movs	r2, #1
 8004548:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	2200      	movs	r2, #0
 800454e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004558:	687a      	ldr	r2, [r7, #4]
 800455a:	33b0      	adds	r3, #176	; 0xb0
 800455c:	009b      	lsls	r3, r3, #2
 800455e:	4413      	add	r3, r2
 8004560:	685b      	ldr	r3, [r3, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	2200      	movs	r2, #0
 800456a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	2200      	movs	r2, #0
 8004572:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800457c:	2b00      	cmp	r3, #0
 800457e:	d101      	bne.n	8004584 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8004580:	2302      	movs	r3, #2
 8004582:	e018      	b.n	80045b6 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	7c1b      	ldrb	r3, [r3, #16]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d10a      	bne.n	80045a2 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800458c:	4b0d      	ldr	r3, [pc, #52]	; (80045c4 <USBD_CDC_Init+0x1e8>)
 800458e:	7819      	ldrb	r1, [r3, #0]
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004596:	f44f 7300 	mov.w	r3, #512	; 0x200
 800459a:	6878      	ldr	r0, [r7, #4]
 800459c:	f002 fb90 	bl	8006cc0 <USBD_LL_PrepareReceive>
 80045a0:	e008      	b.n	80045b4 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80045a2:	4b08      	ldr	r3, [pc, #32]	; (80045c4 <USBD_CDC_Init+0x1e8>)
 80045a4:	7819      	ldrb	r1, [r3, #0]
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80045ac:	2340      	movs	r3, #64	; 0x40
 80045ae:	6878      	ldr	r0, [r7, #4]
 80045b0:	f002 fb86 	bl	8006cc0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80045b4:	2300      	movs	r3, #0
}
 80045b6:	4618      	mov	r0, r3
 80045b8:	3710      	adds	r7, #16
 80045ba:	46bd      	mov	sp, r7
 80045bc:	bd80      	pop	{r7, pc}
 80045be:	bf00      	nop
 80045c0:	20000093 	.word	0x20000093
 80045c4:	20000094 	.word	0x20000094
 80045c8:	20000095 	.word	0x20000095

080045cc <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b082      	sub	sp, #8
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
 80045d4:	460b      	mov	r3, r1
 80045d6:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80045d8:	4b3a      	ldr	r3, [pc, #232]	; (80046c4 <USBD_CDC_DeInit+0xf8>)
 80045da:	781b      	ldrb	r3, [r3, #0]
 80045dc:	4619      	mov	r1, r3
 80045de:	6878      	ldr	r0, [r7, #4]
 80045e0:	f002 faa5 	bl	8006b2e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80045e4:	4b37      	ldr	r3, [pc, #220]	; (80046c4 <USBD_CDC_DeInit+0xf8>)
 80045e6:	781b      	ldrb	r3, [r3, #0]
 80045e8:	f003 020f 	and.w	r2, r3, #15
 80045ec:	6879      	ldr	r1, [r7, #4]
 80045ee:	4613      	mov	r3, r2
 80045f0:	009b      	lsls	r3, r3, #2
 80045f2:	4413      	add	r3, r2
 80045f4:	009b      	lsls	r3, r3, #2
 80045f6:	440b      	add	r3, r1
 80045f8:	3324      	adds	r3, #36	; 0x24
 80045fa:	2200      	movs	r2, #0
 80045fc:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80045fe:	4b32      	ldr	r3, [pc, #200]	; (80046c8 <USBD_CDC_DeInit+0xfc>)
 8004600:	781b      	ldrb	r3, [r3, #0]
 8004602:	4619      	mov	r1, r3
 8004604:	6878      	ldr	r0, [r7, #4]
 8004606:	f002 fa92 	bl	8006b2e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800460a:	4b2f      	ldr	r3, [pc, #188]	; (80046c8 <USBD_CDC_DeInit+0xfc>)
 800460c:	781b      	ldrb	r3, [r3, #0]
 800460e:	f003 020f 	and.w	r2, r3, #15
 8004612:	6879      	ldr	r1, [r7, #4]
 8004614:	4613      	mov	r3, r2
 8004616:	009b      	lsls	r3, r3, #2
 8004618:	4413      	add	r3, r2
 800461a:	009b      	lsls	r3, r3, #2
 800461c:	440b      	add	r3, r1
 800461e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8004622:	2200      	movs	r2, #0
 8004624:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8004626:	4b29      	ldr	r3, [pc, #164]	; (80046cc <USBD_CDC_DeInit+0x100>)
 8004628:	781b      	ldrb	r3, [r3, #0]
 800462a:	4619      	mov	r1, r3
 800462c:	6878      	ldr	r0, [r7, #4]
 800462e:	f002 fa7e 	bl	8006b2e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8004632:	4b26      	ldr	r3, [pc, #152]	; (80046cc <USBD_CDC_DeInit+0x100>)
 8004634:	781b      	ldrb	r3, [r3, #0]
 8004636:	f003 020f 	and.w	r2, r3, #15
 800463a:	6879      	ldr	r1, [r7, #4]
 800463c:	4613      	mov	r3, r2
 800463e:	009b      	lsls	r3, r3, #2
 8004640:	4413      	add	r3, r2
 8004642:	009b      	lsls	r3, r3, #2
 8004644:	440b      	add	r3, r1
 8004646:	3324      	adds	r3, #36	; 0x24
 8004648:	2200      	movs	r2, #0
 800464a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800464c:	4b1f      	ldr	r3, [pc, #124]	; (80046cc <USBD_CDC_DeInit+0x100>)
 800464e:	781b      	ldrb	r3, [r3, #0]
 8004650:	f003 020f 	and.w	r2, r3, #15
 8004654:	6879      	ldr	r1, [r7, #4]
 8004656:	4613      	mov	r3, r2
 8004658:	009b      	lsls	r3, r3, #2
 800465a:	4413      	add	r3, r2
 800465c:	009b      	lsls	r3, r3, #2
 800465e:	440b      	add	r3, r1
 8004660:	3326      	adds	r3, #38	; 0x26
 8004662:	2200      	movs	r2, #0
 8004664:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	32b0      	adds	r2, #176	; 0xb0
 8004670:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d01f      	beq.n	80046b8 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800467e:	687a      	ldr	r2, [r7, #4]
 8004680:	33b0      	adds	r3, #176	; 0xb0
 8004682:	009b      	lsls	r3, r3, #2
 8004684:	4413      	add	r3, r2
 8004686:	685b      	ldr	r3, [r3, #4]
 8004688:	685b      	ldr	r3, [r3, #4]
 800468a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	32b0      	adds	r2, #176	; 0xb0
 8004696:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800469a:	4618      	mov	r0, r3
 800469c:	f002 fb52 	bl	8006d44 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	32b0      	adds	r2, #176	; 0xb0
 80046aa:	2100      	movs	r1, #0
 80046ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2200      	movs	r2, #0
 80046b4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80046b8:	2300      	movs	r3, #0
}
 80046ba:	4618      	mov	r0, r3
 80046bc:	3708      	adds	r7, #8
 80046be:	46bd      	mov	sp, r7
 80046c0:	bd80      	pop	{r7, pc}
 80046c2:	bf00      	nop
 80046c4:	20000093 	.word	0x20000093
 80046c8:	20000094 	.word	0x20000094
 80046cc:	20000095 	.word	0x20000095

080046d0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b086      	sub	sp, #24
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
 80046d8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	32b0      	adds	r2, #176	; 0xb0
 80046e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80046e8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80046ea:	2300      	movs	r3, #0
 80046ec:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80046ee:	2300      	movs	r3, #0
 80046f0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80046f2:	2300      	movs	r3, #0
 80046f4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80046f6:	693b      	ldr	r3, [r7, #16]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d101      	bne.n	8004700 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80046fc:	2303      	movs	r3, #3
 80046fe:	e0bf      	b.n	8004880 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	781b      	ldrb	r3, [r3, #0]
 8004704:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004708:	2b00      	cmp	r3, #0
 800470a:	d050      	beq.n	80047ae <USBD_CDC_Setup+0xde>
 800470c:	2b20      	cmp	r3, #32
 800470e:	f040 80af 	bne.w	8004870 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	88db      	ldrh	r3, [r3, #6]
 8004716:	2b00      	cmp	r3, #0
 8004718:	d03a      	beq.n	8004790 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	781b      	ldrb	r3, [r3, #0]
 800471e:	b25b      	sxtb	r3, r3
 8004720:	2b00      	cmp	r3, #0
 8004722:	da1b      	bge.n	800475c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800472a:	687a      	ldr	r2, [r7, #4]
 800472c:	33b0      	adds	r3, #176	; 0xb0
 800472e:	009b      	lsls	r3, r3, #2
 8004730:	4413      	add	r3, r2
 8004732:	685b      	ldr	r3, [r3, #4]
 8004734:	689b      	ldr	r3, [r3, #8]
 8004736:	683a      	ldr	r2, [r7, #0]
 8004738:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800473a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800473c:	683a      	ldr	r2, [r7, #0]
 800473e:	88d2      	ldrh	r2, [r2, #6]
 8004740:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	88db      	ldrh	r3, [r3, #6]
 8004746:	2b07      	cmp	r3, #7
 8004748:	bf28      	it	cs
 800474a:	2307      	movcs	r3, #7
 800474c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800474e:	693b      	ldr	r3, [r7, #16]
 8004750:	89fa      	ldrh	r2, [r7, #14]
 8004752:	4619      	mov	r1, r3
 8004754:	6878      	ldr	r0, [r7, #4]
 8004756:	f001 fd89 	bl	800626c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800475a:	e090      	b.n	800487e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	785a      	ldrb	r2, [r3, #1]
 8004760:	693b      	ldr	r3, [r7, #16]
 8004762:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	88db      	ldrh	r3, [r3, #6]
 800476a:	2b3f      	cmp	r3, #63	; 0x3f
 800476c:	d803      	bhi.n	8004776 <USBD_CDC_Setup+0xa6>
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	88db      	ldrh	r3, [r3, #6]
 8004772:	b2da      	uxtb	r2, r3
 8004774:	e000      	b.n	8004778 <USBD_CDC_Setup+0xa8>
 8004776:	2240      	movs	r2, #64	; 0x40
 8004778:	693b      	ldr	r3, [r7, #16]
 800477a:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800477e:	6939      	ldr	r1, [r7, #16]
 8004780:	693b      	ldr	r3, [r7, #16]
 8004782:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8004786:	461a      	mov	r2, r3
 8004788:	6878      	ldr	r0, [r7, #4]
 800478a:	f001 fd9b 	bl	80062c4 <USBD_CtlPrepareRx>
      break;
 800478e:	e076      	b.n	800487e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004796:	687a      	ldr	r2, [r7, #4]
 8004798:	33b0      	adds	r3, #176	; 0xb0
 800479a:	009b      	lsls	r3, r3, #2
 800479c:	4413      	add	r3, r2
 800479e:	685b      	ldr	r3, [r3, #4]
 80047a0:	689b      	ldr	r3, [r3, #8]
 80047a2:	683a      	ldr	r2, [r7, #0]
 80047a4:	7850      	ldrb	r0, [r2, #1]
 80047a6:	2200      	movs	r2, #0
 80047a8:	6839      	ldr	r1, [r7, #0]
 80047aa:	4798      	blx	r3
      break;
 80047ac:	e067      	b.n	800487e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	785b      	ldrb	r3, [r3, #1]
 80047b2:	2b0b      	cmp	r3, #11
 80047b4:	d851      	bhi.n	800485a <USBD_CDC_Setup+0x18a>
 80047b6:	a201      	add	r2, pc, #4	; (adr r2, 80047bc <USBD_CDC_Setup+0xec>)
 80047b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047bc:	080047ed 	.word	0x080047ed
 80047c0:	08004869 	.word	0x08004869
 80047c4:	0800485b 	.word	0x0800485b
 80047c8:	0800485b 	.word	0x0800485b
 80047cc:	0800485b 	.word	0x0800485b
 80047d0:	0800485b 	.word	0x0800485b
 80047d4:	0800485b 	.word	0x0800485b
 80047d8:	0800485b 	.word	0x0800485b
 80047dc:	0800485b 	.word	0x0800485b
 80047e0:	0800485b 	.word	0x0800485b
 80047e4:	08004817 	.word	0x08004817
 80047e8:	08004841 	.word	0x08004841
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80047f2:	b2db      	uxtb	r3, r3
 80047f4:	2b03      	cmp	r3, #3
 80047f6:	d107      	bne.n	8004808 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80047f8:	f107 030a 	add.w	r3, r7, #10
 80047fc:	2202      	movs	r2, #2
 80047fe:	4619      	mov	r1, r3
 8004800:	6878      	ldr	r0, [r7, #4]
 8004802:	f001 fd33 	bl	800626c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004806:	e032      	b.n	800486e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8004808:	6839      	ldr	r1, [r7, #0]
 800480a:	6878      	ldr	r0, [r7, #4]
 800480c:	f001 fcbd 	bl	800618a <USBD_CtlError>
            ret = USBD_FAIL;
 8004810:	2303      	movs	r3, #3
 8004812:	75fb      	strb	r3, [r7, #23]
          break;
 8004814:	e02b      	b.n	800486e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800481c:	b2db      	uxtb	r3, r3
 800481e:	2b03      	cmp	r3, #3
 8004820:	d107      	bne.n	8004832 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8004822:	f107 030d 	add.w	r3, r7, #13
 8004826:	2201      	movs	r2, #1
 8004828:	4619      	mov	r1, r3
 800482a:	6878      	ldr	r0, [r7, #4]
 800482c:	f001 fd1e 	bl	800626c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004830:	e01d      	b.n	800486e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8004832:	6839      	ldr	r1, [r7, #0]
 8004834:	6878      	ldr	r0, [r7, #4]
 8004836:	f001 fca8 	bl	800618a <USBD_CtlError>
            ret = USBD_FAIL;
 800483a:	2303      	movs	r3, #3
 800483c:	75fb      	strb	r3, [r7, #23]
          break;
 800483e:	e016      	b.n	800486e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004846:	b2db      	uxtb	r3, r3
 8004848:	2b03      	cmp	r3, #3
 800484a:	d00f      	beq.n	800486c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800484c:	6839      	ldr	r1, [r7, #0]
 800484e:	6878      	ldr	r0, [r7, #4]
 8004850:	f001 fc9b 	bl	800618a <USBD_CtlError>
            ret = USBD_FAIL;
 8004854:	2303      	movs	r3, #3
 8004856:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8004858:	e008      	b.n	800486c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800485a:	6839      	ldr	r1, [r7, #0]
 800485c:	6878      	ldr	r0, [r7, #4]
 800485e:	f001 fc94 	bl	800618a <USBD_CtlError>
          ret = USBD_FAIL;
 8004862:	2303      	movs	r3, #3
 8004864:	75fb      	strb	r3, [r7, #23]
          break;
 8004866:	e002      	b.n	800486e <USBD_CDC_Setup+0x19e>
          break;
 8004868:	bf00      	nop
 800486a:	e008      	b.n	800487e <USBD_CDC_Setup+0x1ae>
          break;
 800486c:	bf00      	nop
      }
      break;
 800486e:	e006      	b.n	800487e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8004870:	6839      	ldr	r1, [r7, #0]
 8004872:	6878      	ldr	r0, [r7, #4]
 8004874:	f001 fc89 	bl	800618a <USBD_CtlError>
      ret = USBD_FAIL;
 8004878:	2303      	movs	r3, #3
 800487a:	75fb      	strb	r3, [r7, #23]
      break;
 800487c:	bf00      	nop
  }

  return (uint8_t)ret;
 800487e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004880:	4618      	mov	r0, r3
 8004882:	3718      	adds	r7, #24
 8004884:	46bd      	mov	sp, r7
 8004886:	bd80      	pop	{r7, pc}

08004888 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b084      	sub	sp, #16
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
 8004890:	460b      	mov	r3, r1
 8004892:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800489a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	32b0      	adds	r2, #176	; 0xb0
 80048a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d101      	bne.n	80048b2 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80048ae:	2303      	movs	r3, #3
 80048b0:	e065      	b.n	800497e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	32b0      	adds	r2, #176	; 0xb0
 80048bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80048c0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80048c2:	78fb      	ldrb	r3, [r7, #3]
 80048c4:	f003 020f 	and.w	r2, r3, #15
 80048c8:	6879      	ldr	r1, [r7, #4]
 80048ca:	4613      	mov	r3, r2
 80048cc:	009b      	lsls	r3, r3, #2
 80048ce:	4413      	add	r3, r2
 80048d0:	009b      	lsls	r3, r3, #2
 80048d2:	440b      	add	r3, r1
 80048d4:	3318      	adds	r3, #24
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d02f      	beq.n	800493c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80048dc:	78fb      	ldrb	r3, [r7, #3]
 80048de:	f003 020f 	and.w	r2, r3, #15
 80048e2:	6879      	ldr	r1, [r7, #4]
 80048e4:	4613      	mov	r3, r2
 80048e6:	009b      	lsls	r3, r3, #2
 80048e8:	4413      	add	r3, r2
 80048ea:	009b      	lsls	r3, r3, #2
 80048ec:	440b      	add	r3, r1
 80048ee:	3318      	adds	r3, #24
 80048f0:	681a      	ldr	r2, [r3, #0]
 80048f2:	78fb      	ldrb	r3, [r7, #3]
 80048f4:	f003 010f 	and.w	r1, r3, #15
 80048f8:	68f8      	ldr	r0, [r7, #12]
 80048fa:	460b      	mov	r3, r1
 80048fc:	00db      	lsls	r3, r3, #3
 80048fe:	440b      	add	r3, r1
 8004900:	009b      	lsls	r3, r3, #2
 8004902:	4403      	add	r3, r0
 8004904:	331c      	adds	r3, #28
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	fbb2 f1f3 	udiv	r1, r2, r3
 800490c:	fb01 f303 	mul.w	r3, r1, r3
 8004910:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8004912:	2b00      	cmp	r3, #0
 8004914:	d112      	bne.n	800493c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8004916:	78fb      	ldrb	r3, [r7, #3]
 8004918:	f003 020f 	and.w	r2, r3, #15
 800491c:	6879      	ldr	r1, [r7, #4]
 800491e:	4613      	mov	r3, r2
 8004920:	009b      	lsls	r3, r3, #2
 8004922:	4413      	add	r3, r2
 8004924:	009b      	lsls	r3, r3, #2
 8004926:	440b      	add	r3, r1
 8004928:	3318      	adds	r3, #24
 800492a:	2200      	movs	r2, #0
 800492c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800492e:	78f9      	ldrb	r1, [r7, #3]
 8004930:	2300      	movs	r3, #0
 8004932:	2200      	movs	r2, #0
 8004934:	6878      	ldr	r0, [r7, #4]
 8004936:	f002 f9a2 	bl	8006c7e <USBD_LL_Transmit>
 800493a:	e01f      	b.n	800497c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800493c:	68bb      	ldr	r3, [r7, #8]
 800493e:	2200      	movs	r2, #0
 8004940:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800494a:	687a      	ldr	r2, [r7, #4]
 800494c:	33b0      	adds	r3, #176	; 0xb0
 800494e:	009b      	lsls	r3, r3, #2
 8004950:	4413      	add	r3, r2
 8004952:	685b      	ldr	r3, [r3, #4]
 8004954:	691b      	ldr	r3, [r3, #16]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d010      	beq.n	800497c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004960:	687a      	ldr	r2, [r7, #4]
 8004962:	33b0      	adds	r3, #176	; 0xb0
 8004964:	009b      	lsls	r3, r3, #2
 8004966:	4413      	add	r3, r2
 8004968:	685b      	ldr	r3, [r3, #4]
 800496a:	691b      	ldr	r3, [r3, #16]
 800496c:	68ba      	ldr	r2, [r7, #8]
 800496e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8004972:	68ba      	ldr	r2, [r7, #8]
 8004974:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8004978:	78fa      	ldrb	r2, [r7, #3]
 800497a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800497c:	2300      	movs	r3, #0
}
 800497e:	4618      	mov	r0, r3
 8004980:	3710      	adds	r7, #16
 8004982:	46bd      	mov	sp, r7
 8004984:	bd80      	pop	{r7, pc}

08004986 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004986:	b580      	push	{r7, lr}
 8004988:	b084      	sub	sp, #16
 800498a:	af00      	add	r7, sp, #0
 800498c:	6078      	str	r0, [r7, #4]
 800498e:	460b      	mov	r3, r1
 8004990:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	32b0      	adds	r2, #176	; 0xb0
 800499c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80049a0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	32b0      	adds	r2, #176	; 0xb0
 80049ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d101      	bne.n	80049b8 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80049b4:	2303      	movs	r3, #3
 80049b6:	e01a      	b.n	80049ee <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80049b8:	78fb      	ldrb	r3, [r7, #3]
 80049ba:	4619      	mov	r1, r3
 80049bc:	6878      	ldr	r0, [r7, #4]
 80049be:	f002 f9a0 	bl	8006d02 <USBD_LL_GetRxDataSize>
 80049c2:	4602      	mov	r2, r0
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80049d0:	687a      	ldr	r2, [r7, #4]
 80049d2:	33b0      	adds	r3, #176	; 0xb0
 80049d4:	009b      	lsls	r3, r3, #2
 80049d6:	4413      	add	r3, r2
 80049d8:	685b      	ldr	r3, [r3, #4]
 80049da:	68db      	ldr	r3, [r3, #12]
 80049dc:	68fa      	ldr	r2, [r7, #12]
 80049de:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80049e2:	68fa      	ldr	r2, [r7, #12]
 80049e4:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80049e8:	4611      	mov	r1, r2
 80049ea:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80049ec:	2300      	movs	r3, #0
}
 80049ee:	4618      	mov	r0, r3
 80049f0:	3710      	adds	r7, #16
 80049f2:	46bd      	mov	sp, r7
 80049f4:	bd80      	pop	{r7, pc}

080049f6 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80049f6:	b580      	push	{r7, lr}
 80049f8:	b084      	sub	sp, #16
 80049fa:	af00      	add	r7, sp, #0
 80049fc:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	32b0      	adds	r2, #176	; 0xb0
 8004a08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a0c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d101      	bne.n	8004a18 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8004a14:	2303      	movs	r3, #3
 8004a16:	e025      	b.n	8004a64 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004a1e:	687a      	ldr	r2, [r7, #4]
 8004a20:	33b0      	adds	r3, #176	; 0xb0
 8004a22:	009b      	lsls	r3, r3, #2
 8004a24:	4413      	add	r3, r2
 8004a26:	685b      	ldr	r3, [r3, #4]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d01a      	beq.n	8004a62 <USBD_CDC_EP0_RxReady+0x6c>
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8004a32:	2bff      	cmp	r3, #255	; 0xff
 8004a34:	d015      	beq.n	8004a62 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004a3c:	687a      	ldr	r2, [r7, #4]
 8004a3e:	33b0      	adds	r3, #176	; 0xb0
 8004a40:	009b      	lsls	r3, r3, #2
 8004a42:	4413      	add	r3, r2
 8004a44:	685b      	ldr	r3, [r3, #4]
 8004a46:	689b      	ldr	r3, [r3, #8]
 8004a48:	68fa      	ldr	r2, [r7, #12]
 8004a4a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8004a4e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8004a50:	68fa      	ldr	r2, [r7, #12]
 8004a52:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8004a56:	b292      	uxth	r2, r2
 8004a58:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	22ff      	movs	r2, #255	; 0xff
 8004a5e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8004a62:	2300      	movs	r3, #0
}
 8004a64:	4618      	mov	r0, r3
 8004a66:	3710      	adds	r7, #16
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	bd80      	pop	{r7, pc}

08004a6c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b086      	sub	sp, #24
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8004a74:	2182      	movs	r1, #130	; 0x82
 8004a76:	4818      	ldr	r0, [pc, #96]	; (8004ad8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8004a78:	f000 fd4f 	bl	800551a <USBD_GetEpDesc>
 8004a7c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8004a7e:	2101      	movs	r1, #1
 8004a80:	4815      	ldr	r0, [pc, #84]	; (8004ad8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8004a82:	f000 fd4a 	bl	800551a <USBD_GetEpDesc>
 8004a86:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8004a88:	2181      	movs	r1, #129	; 0x81
 8004a8a:	4813      	ldr	r0, [pc, #76]	; (8004ad8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8004a8c:	f000 fd45 	bl	800551a <USBD_GetEpDesc>
 8004a90:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8004a92:	697b      	ldr	r3, [r7, #20]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d002      	beq.n	8004a9e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8004a98:	697b      	ldr	r3, [r7, #20]
 8004a9a:	2210      	movs	r2, #16
 8004a9c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8004a9e:	693b      	ldr	r3, [r7, #16]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d006      	beq.n	8004ab2 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8004aa4:	693b      	ldr	r3, [r7, #16]
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004aac:	711a      	strb	r2, [r3, #4]
 8004aae:	2200      	movs	r2, #0
 8004ab0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d006      	beq.n	8004ac6 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	2200      	movs	r2, #0
 8004abc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004ac0:	711a      	strb	r2, [r3, #4]
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	2243      	movs	r2, #67	; 0x43
 8004aca:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8004acc:	4b02      	ldr	r3, [pc, #8]	; (8004ad8 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8004ace:	4618      	mov	r0, r3
 8004ad0:	3718      	adds	r7, #24
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	bd80      	pop	{r7, pc}
 8004ad6:	bf00      	nop
 8004ad8:	20000050 	.word	0x20000050

08004adc <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b086      	sub	sp, #24
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8004ae4:	2182      	movs	r1, #130	; 0x82
 8004ae6:	4818      	ldr	r0, [pc, #96]	; (8004b48 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8004ae8:	f000 fd17 	bl	800551a <USBD_GetEpDesc>
 8004aec:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8004aee:	2101      	movs	r1, #1
 8004af0:	4815      	ldr	r0, [pc, #84]	; (8004b48 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8004af2:	f000 fd12 	bl	800551a <USBD_GetEpDesc>
 8004af6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8004af8:	2181      	movs	r1, #129	; 0x81
 8004afa:	4813      	ldr	r0, [pc, #76]	; (8004b48 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8004afc:	f000 fd0d 	bl	800551a <USBD_GetEpDesc>
 8004b00:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8004b02:	697b      	ldr	r3, [r7, #20]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d002      	beq.n	8004b0e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8004b08:	697b      	ldr	r3, [r7, #20]
 8004b0a:	2210      	movs	r2, #16
 8004b0c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8004b0e:	693b      	ldr	r3, [r7, #16]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d006      	beq.n	8004b22 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8004b14:	693b      	ldr	r3, [r7, #16]
 8004b16:	2200      	movs	r2, #0
 8004b18:	711a      	strb	r2, [r3, #4]
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	f042 0202 	orr.w	r2, r2, #2
 8004b20:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d006      	beq.n	8004b36 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	711a      	strb	r2, [r3, #4]
 8004b2e:	2200      	movs	r2, #0
 8004b30:	f042 0202 	orr.w	r2, r2, #2
 8004b34:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2243      	movs	r2, #67	; 0x43
 8004b3a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8004b3c:	4b02      	ldr	r3, [pc, #8]	; (8004b48 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8004b3e:	4618      	mov	r0, r3
 8004b40:	3718      	adds	r7, #24
 8004b42:	46bd      	mov	sp, r7
 8004b44:	bd80      	pop	{r7, pc}
 8004b46:	bf00      	nop
 8004b48:	20000050 	.word	0x20000050

08004b4c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b086      	sub	sp, #24
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8004b54:	2182      	movs	r1, #130	; 0x82
 8004b56:	4818      	ldr	r0, [pc, #96]	; (8004bb8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8004b58:	f000 fcdf 	bl	800551a <USBD_GetEpDesc>
 8004b5c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8004b5e:	2101      	movs	r1, #1
 8004b60:	4815      	ldr	r0, [pc, #84]	; (8004bb8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8004b62:	f000 fcda 	bl	800551a <USBD_GetEpDesc>
 8004b66:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8004b68:	2181      	movs	r1, #129	; 0x81
 8004b6a:	4813      	ldr	r0, [pc, #76]	; (8004bb8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8004b6c:	f000 fcd5 	bl	800551a <USBD_GetEpDesc>
 8004b70:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8004b72:	697b      	ldr	r3, [r7, #20]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d002      	beq.n	8004b7e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8004b78:	697b      	ldr	r3, [r7, #20]
 8004b7a:	2210      	movs	r2, #16
 8004b7c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8004b7e:	693b      	ldr	r3, [r7, #16]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d006      	beq.n	8004b92 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8004b84:	693b      	ldr	r3, [r7, #16]
 8004b86:	2200      	movs	r2, #0
 8004b88:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004b8c:	711a      	strb	r2, [r3, #4]
 8004b8e:	2200      	movs	r2, #0
 8004b90:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d006      	beq.n	8004ba6 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004ba0:	711a      	strb	r2, [r3, #4]
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2243      	movs	r2, #67	; 0x43
 8004baa:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8004bac:	4b02      	ldr	r3, [pc, #8]	; (8004bb8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8004bae:	4618      	mov	r0, r3
 8004bb0:	3718      	adds	r7, #24
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	bd80      	pop	{r7, pc}
 8004bb6:	bf00      	nop
 8004bb8:	20000050 	.word	0x20000050

08004bbc <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8004bbc:	b480      	push	{r7}
 8004bbe:	b083      	sub	sp, #12
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	220a      	movs	r2, #10
 8004bc8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8004bca:	4b03      	ldr	r3, [pc, #12]	; (8004bd8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8004bcc:	4618      	mov	r0, r3
 8004bce:	370c      	adds	r7, #12
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd6:	4770      	bx	lr
 8004bd8:	2000000c 	.word	0x2000000c

08004bdc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8004bdc:	b480      	push	{r7}
 8004bde:	b083      	sub	sp, #12
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
 8004be4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d101      	bne.n	8004bf0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8004bec:	2303      	movs	r3, #3
 8004bee:	e009      	b.n	8004c04 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004bf6:	687a      	ldr	r2, [r7, #4]
 8004bf8:	33b0      	adds	r3, #176	; 0xb0
 8004bfa:	009b      	lsls	r3, r3, #2
 8004bfc:	4413      	add	r3, r2
 8004bfe:	683a      	ldr	r2, [r7, #0]
 8004c00:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8004c02:	2300      	movs	r3, #0
}
 8004c04:	4618      	mov	r0, r3
 8004c06:	370c      	adds	r7, #12
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0e:	4770      	bx	lr

08004c10 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8004c10:	b480      	push	{r7}
 8004c12:	b087      	sub	sp, #28
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	60f8      	str	r0, [r7, #12]
 8004c18:	60b9      	str	r1, [r7, #8]
 8004c1a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	32b0      	adds	r2, #176	; 0xb0
 8004c26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c2a:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8004c2c:	697b      	ldr	r3, [r7, #20]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d101      	bne.n	8004c36 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8004c32:	2303      	movs	r3, #3
 8004c34:	e008      	b.n	8004c48 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8004c36:	697b      	ldr	r3, [r7, #20]
 8004c38:	68ba      	ldr	r2, [r7, #8]
 8004c3a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8004c3e:	697b      	ldr	r3, [r7, #20]
 8004c40:	687a      	ldr	r2, [r7, #4]
 8004c42:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8004c46:	2300      	movs	r3, #0
}
 8004c48:	4618      	mov	r0, r3
 8004c4a:	371c      	adds	r7, #28
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c52:	4770      	bx	lr

08004c54 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8004c54:	b480      	push	{r7}
 8004c56:	b085      	sub	sp, #20
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
 8004c5c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	32b0      	adds	r2, #176	; 0xb0
 8004c68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c6c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d101      	bne.n	8004c78 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8004c74:	2303      	movs	r3, #3
 8004c76:	e004      	b.n	8004c82 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	683a      	ldr	r2, [r7, #0]
 8004c7c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8004c80:	2300      	movs	r3, #0
}
 8004c82:	4618      	mov	r0, r3
 8004c84:	3714      	adds	r7, #20
 8004c86:	46bd      	mov	sp, r7
 8004c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8c:	4770      	bx	lr
	...

08004c90 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b084      	sub	sp, #16
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	32b0      	adds	r2, #176	; 0xb0
 8004ca2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ca6:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8004ca8:	2301      	movs	r3, #1
 8004caa:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8004cac:	68bb      	ldr	r3, [r7, #8]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d101      	bne.n	8004cb6 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8004cb2:	2303      	movs	r3, #3
 8004cb4:	e025      	b.n	8004d02 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8004cb6:	68bb      	ldr	r3, [r7, #8]
 8004cb8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d11f      	bne.n	8004d00 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8004cc0:	68bb      	ldr	r3, [r7, #8]
 8004cc2:	2201      	movs	r2, #1
 8004cc4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8004cc8:	4b10      	ldr	r3, [pc, #64]	; (8004d0c <USBD_CDC_TransmitPacket+0x7c>)
 8004cca:	781b      	ldrb	r3, [r3, #0]
 8004ccc:	f003 020f 	and.w	r2, r3, #15
 8004cd0:	68bb      	ldr	r3, [r7, #8]
 8004cd2:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8004cd6:	6878      	ldr	r0, [r7, #4]
 8004cd8:	4613      	mov	r3, r2
 8004cda:	009b      	lsls	r3, r3, #2
 8004cdc:	4413      	add	r3, r2
 8004cde:	009b      	lsls	r3, r3, #2
 8004ce0:	4403      	add	r3, r0
 8004ce2:	3318      	adds	r3, #24
 8004ce4:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8004ce6:	4b09      	ldr	r3, [pc, #36]	; (8004d0c <USBD_CDC_TransmitPacket+0x7c>)
 8004ce8:	7819      	ldrb	r1, [r3, #0]
 8004cea:	68bb      	ldr	r3, [r7, #8]
 8004cec:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8004cf0:	68bb      	ldr	r3, [r7, #8]
 8004cf2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8004cf6:	6878      	ldr	r0, [r7, #4]
 8004cf8:	f001 ffc1 	bl	8006c7e <USBD_LL_Transmit>

    ret = USBD_OK;
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8004d00:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d02:	4618      	mov	r0, r3
 8004d04:	3710      	adds	r7, #16
 8004d06:	46bd      	mov	sp, r7
 8004d08:	bd80      	pop	{r7, pc}
 8004d0a:	bf00      	nop
 8004d0c:	20000093 	.word	0x20000093

08004d10 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b084      	sub	sp, #16
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	32b0      	adds	r2, #176	; 0xb0
 8004d22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d26:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	32b0      	adds	r2, #176	; 0xb0
 8004d32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d101      	bne.n	8004d3e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8004d3a:	2303      	movs	r3, #3
 8004d3c:	e018      	b.n	8004d70 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	7c1b      	ldrb	r3, [r3, #16]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d10a      	bne.n	8004d5c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8004d46:	4b0c      	ldr	r3, [pc, #48]	; (8004d78 <USBD_CDC_ReceivePacket+0x68>)
 8004d48:	7819      	ldrb	r1, [r3, #0]
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004d50:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004d54:	6878      	ldr	r0, [r7, #4]
 8004d56:	f001 ffb3 	bl	8006cc0 <USBD_LL_PrepareReceive>
 8004d5a:	e008      	b.n	8004d6e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8004d5c:	4b06      	ldr	r3, [pc, #24]	; (8004d78 <USBD_CDC_ReceivePacket+0x68>)
 8004d5e:	7819      	ldrb	r1, [r3, #0]
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004d66:	2340      	movs	r3, #64	; 0x40
 8004d68:	6878      	ldr	r0, [r7, #4]
 8004d6a:	f001 ffa9 	bl	8006cc0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8004d6e:	2300      	movs	r3, #0
}
 8004d70:	4618      	mov	r0, r3
 8004d72:	3710      	adds	r7, #16
 8004d74:	46bd      	mov	sp, r7
 8004d76:	bd80      	pop	{r7, pc}
 8004d78:	20000094 	.word	0x20000094

08004d7c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b086      	sub	sp, #24
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	60f8      	str	r0, [r7, #12]
 8004d84:	60b9      	str	r1, [r7, #8]
 8004d86:	4613      	mov	r3, r2
 8004d88:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d101      	bne.n	8004d94 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8004d90:	2303      	movs	r3, #3
 8004d92:	e01f      	b.n	8004dd4 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	2200      	movs	r2, #0
 8004d98:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	2200      	movs	r2, #0
 8004da0:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	2200      	movs	r2, #0
 8004da8:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8004dac:	68bb      	ldr	r3, [r7, #8]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d003      	beq.n	8004dba <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	68ba      	ldr	r2, [r7, #8]
 8004db6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	2201      	movs	r2, #1
 8004dbe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	79fa      	ldrb	r2, [r7, #7]
 8004dc6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8004dc8:	68f8      	ldr	r0, [r7, #12]
 8004dca:	f001 fe23 	bl	8006a14 <USBD_LL_Init>
 8004dce:	4603      	mov	r3, r0
 8004dd0:	75fb      	strb	r3, [r7, #23]

  return ret;
 8004dd2:	7dfb      	ldrb	r3, [r7, #23]
}
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	3718      	adds	r7, #24
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	bd80      	pop	{r7, pc}

08004ddc <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b084      	sub	sp, #16
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
 8004de4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8004de6:	2300      	movs	r3, #0
 8004de8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d101      	bne.n	8004df4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8004df0:	2303      	movs	r3, #3
 8004df2:	e025      	b.n	8004e40 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	683a      	ldr	r2, [r7, #0]
 8004df8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	32ae      	adds	r2, #174	; 0xae
 8004e06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d00f      	beq.n	8004e30 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	32ae      	adds	r2, #174	; 0xae
 8004e1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e20:	f107 020e 	add.w	r2, r7, #14
 8004e24:	4610      	mov	r0, r2
 8004e26:	4798      	blx	r3
 8004e28:	4602      	mov	r2, r0
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8004e36:	1c5a      	adds	r2, r3, #1
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8004e3e:	2300      	movs	r3, #0
}
 8004e40:	4618      	mov	r0, r3
 8004e42:	3710      	adds	r7, #16
 8004e44:	46bd      	mov	sp, r7
 8004e46:	bd80      	pop	{r7, pc}

08004e48 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b082      	sub	sp, #8
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8004e50:	6878      	ldr	r0, [r7, #4]
 8004e52:	f001 fe2b 	bl	8006aac <USBD_LL_Start>
 8004e56:	4603      	mov	r3, r0
}
 8004e58:	4618      	mov	r0, r3
 8004e5a:	3708      	adds	r7, #8
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	bd80      	pop	{r7, pc}

08004e60 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8004e60:	b480      	push	{r7}
 8004e62:	b083      	sub	sp, #12
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8004e68:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	370c      	adds	r7, #12
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e74:	4770      	bx	lr

08004e76 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004e76:	b580      	push	{r7, lr}
 8004e78:	b084      	sub	sp, #16
 8004e7a:	af00      	add	r7, sp, #0
 8004e7c:	6078      	str	r0, [r7, #4]
 8004e7e:	460b      	mov	r3, r1
 8004e80:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8004e82:	2300      	movs	r3, #0
 8004e84:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d009      	beq.n	8004ea4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	78fa      	ldrb	r2, [r7, #3]
 8004e9a:	4611      	mov	r1, r2
 8004e9c:	6878      	ldr	r0, [r7, #4]
 8004e9e:	4798      	blx	r3
 8004ea0:	4603      	mov	r3, r0
 8004ea2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8004ea4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	3710      	adds	r7, #16
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	bd80      	pop	{r7, pc}

08004eae <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004eae:	b580      	push	{r7, lr}
 8004eb0:	b084      	sub	sp, #16
 8004eb2:	af00      	add	r7, sp, #0
 8004eb4:	6078      	str	r0, [r7, #4]
 8004eb6:	460b      	mov	r3, r1
 8004eb8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8004eba:	2300      	movs	r3, #0
 8004ebc:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004ec4:	685b      	ldr	r3, [r3, #4]
 8004ec6:	78fa      	ldrb	r2, [r7, #3]
 8004ec8:	4611      	mov	r1, r2
 8004eca:	6878      	ldr	r0, [r7, #4]
 8004ecc:	4798      	blx	r3
 8004ece:	4603      	mov	r3, r0
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d001      	beq.n	8004ed8 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8004ed4:	2303      	movs	r3, #3
 8004ed6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8004ed8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004eda:	4618      	mov	r0, r3
 8004edc:	3710      	adds	r7, #16
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	bd80      	pop	{r7, pc}

08004ee2 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8004ee2:	b580      	push	{r7, lr}
 8004ee4:	b084      	sub	sp, #16
 8004ee6:	af00      	add	r7, sp, #0
 8004ee8:	6078      	str	r0, [r7, #4]
 8004eea:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8004ef2:	6839      	ldr	r1, [r7, #0]
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	f001 f90e 	bl	8006116 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2201      	movs	r2, #1
 8004efe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8004f08:	461a      	mov	r2, r3
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8004f16:	f003 031f 	and.w	r3, r3, #31
 8004f1a:	2b02      	cmp	r3, #2
 8004f1c:	d01a      	beq.n	8004f54 <USBD_LL_SetupStage+0x72>
 8004f1e:	2b02      	cmp	r3, #2
 8004f20:	d822      	bhi.n	8004f68 <USBD_LL_SetupStage+0x86>
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d002      	beq.n	8004f2c <USBD_LL_SetupStage+0x4a>
 8004f26:	2b01      	cmp	r3, #1
 8004f28:	d00a      	beq.n	8004f40 <USBD_LL_SetupStage+0x5e>
 8004f2a:	e01d      	b.n	8004f68 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8004f32:	4619      	mov	r1, r3
 8004f34:	6878      	ldr	r0, [r7, #4]
 8004f36:	f000 fb65 	bl	8005604 <USBD_StdDevReq>
 8004f3a:	4603      	mov	r3, r0
 8004f3c:	73fb      	strb	r3, [r7, #15]
      break;
 8004f3e:	e020      	b.n	8004f82 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8004f46:	4619      	mov	r1, r3
 8004f48:	6878      	ldr	r0, [r7, #4]
 8004f4a:	f000 fbcd 	bl	80056e8 <USBD_StdItfReq>
 8004f4e:	4603      	mov	r3, r0
 8004f50:	73fb      	strb	r3, [r7, #15]
      break;
 8004f52:	e016      	b.n	8004f82 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8004f5a:	4619      	mov	r1, r3
 8004f5c:	6878      	ldr	r0, [r7, #4]
 8004f5e:	f000 fc2f 	bl	80057c0 <USBD_StdEPReq>
 8004f62:	4603      	mov	r3, r0
 8004f64:	73fb      	strb	r3, [r7, #15]
      break;
 8004f66:	e00c      	b.n	8004f82 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8004f6e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004f72:	b2db      	uxtb	r3, r3
 8004f74:	4619      	mov	r1, r3
 8004f76:	6878      	ldr	r0, [r7, #4]
 8004f78:	f001 fdf8 	bl	8006b6c <USBD_LL_StallEP>
 8004f7c:	4603      	mov	r3, r0
 8004f7e:	73fb      	strb	r3, [r7, #15]
      break;
 8004f80:	bf00      	nop
  }

  return ret;
 8004f82:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f84:	4618      	mov	r0, r3
 8004f86:	3710      	adds	r7, #16
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	bd80      	pop	{r7, pc}

08004f8c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b086      	sub	sp, #24
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	60f8      	str	r0, [r7, #12]
 8004f94:	460b      	mov	r3, r1
 8004f96:	607a      	str	r2, [r7, #4]
 8004f98:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8004f9e:	7afb      	ldrb	r3, [r7, #11]
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d16e      	bne.n	8005082 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8004faa:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8004fb2:	2b03      	cmp	r3, #3
 8004fb4:	f040 8098 	bne.w	80050e8 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8004fb8:	693b      	ldr	r3, [r7, #16]
 8004fba:	689a      	ldr	r2, [r3, #8]
 8004fbc:	693b      	ldr	r3, [r7, #16]
 8004fbe:	68db      	ldr	r3, [r3, #12]
 8004fc0:	429a      	cmp	r2, r3
 8004fc2:	d913      	bls.n	8004fec <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8004fc4:	693b      	ldr	r3, [r7, #16]
 8004fc6:	689a      	ldr	r2, [r3, #8]
 8004fc8:	693b      	ldr	r3, [r7, #16]
 8004fca:	68db      	ldr	r3, [r3, #12]
 8004fcc:	1ad2      	subs	r2, r2, r3
 8004fce:	693b      	ldr	r3, [r7, #16]
 8004fd0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8004fd2:	693b      	ldr	r3, [r7, #16]
 8004fd4:	68da      	ldr	r2, [r3, #12]
 8004fd6:	693b      	ldr	r3, [r7, #16]
 8004fd8:	689b      	ldr	r3, [r3, #8]
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	bf28      	it	cs
 8004fde:	4613      	movcs	r3, r2
 8004fe0:	461a      	mov	r2, r3
 8004fe2:	6879      	ldr	r1, [r7, #4]
 8004fe4:	68f8      	ldr	r0, [r7, #12]
 8004fe6:	f001 f98a 	bl	80062fe <USBD_CtlContinueRx>
 8004fea:	e07d      	b.n	80050e8 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8004ff2:	f003 031f 	and.w	r3, r3, #31
 8004ff6:	2b02      	cmp	r3, #2
 8004ff8:	d014      	beq.n	8005024 <USBD_LL_DataOutStage+0x98>
 8004ffa:	2b02      	cmp	r3, #2
 8004ffc:	d81d      	bhi.n	800503a <USBD_LL_DataOutStage+0xae>
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d002      	beq.n	8005008 <USBD_LL_DataOutStage+0x7c>
 8005002:	2b01      	cmp	r3, #1
 8005004:	d003      	beq.n	800500e <USBD_LL_DataOutStage+0x82>
 8005006:	e018      	b.n	800503a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8005008:	2300      	movs	r3, #0
 800500a:	75bb      	strb	r3, [r7, #22]
            break;
 800500c:	e018      	b.n	8005040 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8005014:	b2db      	uxtb	r3, r3
 8005016:	4619      	mov	r1, r3
 8005018:	68f8      	ldr	r0, [r7, #12]
 800501a:	f000 fa64 	bl	80054e6 <USBD_CoreFindIF>
 800501e:	4603      	mov	r3, r0
 8005020:	75bb      	strb	r3, [r7, #22]
            break;
 8005022:	e00d      	b.n	8005040 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800502a:	b2db      	uxtb	r3, r3
 800502c:	4619      	mov	r1, r3
 800502e:	68f8      	ldr	r0, [r7, #12]
 8005030:	f000 fa66 	bl	8005500 <USBD_CoreFindEP>
 8005034:	4603      	mov	r3, r0
 8005036:	75bb      	strb	r3, [r7, #22]
            break;
 8005038:	e002      	b.n	8005040 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800503a:	2300      	movs	r3, #0
 800503c:	75bb      	strb	r3, [r7, #22]
            break;
 800503e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8005040:	7dbb      	ldrb	r3, [r7, #22]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d119      	bne.n	800507a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800504c:	b2db      	uxtb	r3, r3
 800504e:	2b03      	cmp	r3, #3
 8005050:	d113      	bne.n	800507a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8005052:	7dba      	ldrb	r2, [r7, #22]
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	32ae      	adds	r2, #174	; 0xae
 8005058:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800505c:	691b      	ldr	r3, [r3, #16]
 800505e:	2b00      	cmp	r3, #0
 8005060:	d00b      	beq.n	800507a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8005062:	7dba      	ldrb	r2, [r7, #22]
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800506a:	7dba      	ldrb	r2, [r7, #22]
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	32ae      	adds	r2, #174	; 0xae
 8005070:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005074:	691b      	ldr	r3, [r3, #16]
 8005076:	68f8      	ldr	r0, [r7, #12]
 8005078:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800507a:	68f8      	ldr	r0, [r7, #12]
 800507c:	f001 f950 	bl	8006320 <USBD_CtlSendStatus>
 8005080:	e032      	b.n	80050e8 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8005082:	7afb      	ldrb	r3, [r7, #11]
 8005084:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005088:	b2db      	uxtb	r3, r3
 800508a:	4619      	mov	r1, r3
 800508c:	68f8      	ldr	r0, [r7, #12]
 800508e:	f000 fa37 	bl	8005500 <USBD_CoreFindEP>
 8005092:	4603      	mov	r3, r0
 8005094:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005096:	7dbb      	ldrb	r3, [r7, #22]
 8005098:	2bff      	cmp	r3, #255	; 0xff
 800509a:	d025      	beq.n	80050e8 <USBD_LL_DataOutStage+0x15c>
 800509c:	7dbb      	ldrb	r3, [r7, #22]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d122      	bne.n	80050e8 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80050a8:	b2db      	uxtb	r3, r3
 80050aa:	2b03      	cmp	r3, #3
 80050ac:	d117      	bne.n	80050de <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80050ae:	7dba      	ldrb	r2, [r7, #22]
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	32ae      	adds	r2, #174	; 0xae
 80050b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80050b8:	699b      	ldr	r3, [r3, #24]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d00f      	beq.n	80050de <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80050be:	7dba      	ldrb	r2, [r7, #22]
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80050c6:	7dba      	ldrb	r2, [r7, #22]
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	32ae      	adds	r2, #174	; 0xae
 80050cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80050d0:	699b      	ldr	r3, [r3, #24]
 80050d2:	7afa      	ldrb	r2, [r7, #11]
 80050d4:	4611      	mov	r1, r2
 80050d6:	68f8      	ldr	r0, [r7, #12]
 80050d8:	4798      	blx	r3
 80050da:	4603      	mov	r3, r0
 80050dc:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80050de:	7dfb      	ldrb	r3, [r7, #23]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d001      	beq.n	80050e8 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80050e4:	7dfb      	ldrb	r3, [r7, #23]
 80050e6:	e000      	b.n	80050ea <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80050e8:	2300      	movs	r3, #0
}
 80050ea:	4618      	mov	r0, r3
 80050ec:	3718      	adds	r7, #24
 80050ee:	46bd      	mov	sp, r7
 80050f0:	bd80      	pop	{r7, pc}

080050f2 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80050f2:	b580      	push	{r7, lr}
 80050f4:	b086      	sub	sp, #24
 80050f6:	af00      	add	r7, sp, #0
 80050f8:	60f8      	str	r0, [r7, #12]
 80050fa:	460b      	mov	r3, r1
 80050fc:	607a      	str	r2, [r7, #4]
 80050fe:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8005100:	7afb      	ldrb	r3, [r7, #11]
 8005102:	2b00      	cmp	r3, #0
 8005104:	d16f      	bne.n	80051e6 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	3314      	adds	r3, #20
 800510a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005112:	2b02      	cmp	r3, #2
 8005114:	d15a      	bne.n	80051cc <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8005116:	693b      	ldr	r3, [r7, #16]
 8005118:	689a      	ldr	r2, [r3, #8]
 800511a:	693b      	ldr	r3, [r7, #16]
 800511c:	68db      	ldr	r3, [r3, #12]
 800511e:	429a      	cmp	r2, r3
 8005120:	d914      	bls.n	800514c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005122:	693b      	ldr	r3, [r7, #16]
 8005124:	689a      	ldr	r2, [r3, #8]
 8005126:	693b      	ldr	r3, [r7, #16]
 8005128:	68db      	ldr	r3, [r3, #12]
 800512a:	1ad2      	subs	r2, r2, r3
 800512c:	693b      	ldr	r3, [r7, #16]
 800512e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8005130:	693b      	ldr	r3, [r7, #16]
 8005132:	689b      	ldr	r3, [r3, #8]
 8005134:	461a      	mov	r2, r3
 8005136:	6879      	ldr	r1, [r7, #4]
 8005138:	68f8      	ldr	r0, [r7, #12]
 800513a:	f001 f8b2 	bl	80062a2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800513e:	2300      	movs	r3, #0
 8005140:	2200      	movs	r2, #0
 8005142:	2100      	movs	r1, #0
 8005144:	68f8      	ldr	r0, [r7, #12]
 8005146:	f001 fdbb 	bl	8006cc0 <USBD_LL_PrepareReceive>
 800514a:	e03f      	b.n	80051cc <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800514c:	693b      	ldr	r3, [r7, #16]
 800514e:	68da      	ldr	r2, [r3, #12]
 8005150:	693b      	ldr	r3, [r7, #16]
 8005152:	689b      	ldr	r3, [r3, #8]
 8005154:	429a      	cmp	r2, r3
 8005156:	d11c      	bne.n	8005192 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8005158:	693b      	ldr	r3, [r7, #16]
 800515a:	685a      	ldr	r2, [r3, #4]
 800515c:	693b      	ldr	r3, [r7, #16]
 800515e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8005160:	429a      	cmp	r2, r3
 8005162:	d316      	bcc.n	8005192 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8005164:	693b      	ldr	r3, [r7, #16]
 8005166:	685a      	ldr	r2, [r3, #4]
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800516e:	429a      	cmp	r2, r3
 8005170:	d20f      	bcs.n	8005192 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005172:	2200      	movs	r2, #0
 8005174:	2100      	movs	r1, #0
 8005176:	68f8      	ldr	r0, [r7, #12]
 8005178:	f001 f893 	bl	80062a2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	2200      	movs	r2, #0
 8005180:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005184:	2300      	movs	r3, #0
 8005186:	2200      	movs	r2, #0
 8005188:	2100      	movs	r1, #0
 800518a:	68f8      	ldr	r0, [r7, #12]
 800518c:	f001 fd98 	bl	8006cc0 <USBD_LL_PrepareReceive>
 8005190:	e01c      	b.n	80051cc <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005198:	b2db      	uxtb	r3, r3
 800519a:	2b03      	cmp	r3, #3
 800519c:	d10f      	bne.n	80051be <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80051a4:	68db      	ldr	r3, [r3, #12]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d009      	beq.n	80051be <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	2200      	movs	r2, #0
 80051ae:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80051b8:	68db      	ldr	r3, [r3, #12]
 80051ba:	68f8      	ldr	r0, [r7, #12]
 80051bc:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80051be:	2180      	movs	r1, #128	; 0x80
 80051c0:	68f8      	ldr	r0, [r7, #12]
 80051c2:	f001 fcd3 	bl	8006b6c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80051c6:	68f8      	ldr	r0, [r7, #12]
 80051c8:	f001 f8bd 	bl	8006346 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d03a      	beq.n	800524c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80051d6:	68f8      	ldr	r0, [r7, #12]
 80051d8:	f7ff fe42 	bl	8004e60 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	2200      	movs	r2, #0
 80051e0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80051e4:	e032      	b.n	800524c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80051e6:	7afb      	ldrb	r3, [r7, #11]
 80051e8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80051ec:	b2db      	uxtb	r3, r3
 80051ee:	4619      	mov	r1, r3
 80051f0:	68f8      	ldr	r0, [r7, #12]
 80051f2:	f000 f985 	bl	8005500 <USBD_CoreFindEP>
 80051f6:	4603      	mov	r3, r0
 80051f8:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80051fa:	7dfb      	ldrb	r3, [r7, #23]
 80051fc:	2bff      	cmp	r3, #255	; 0xff
 80051fe:	d025      	beq.n	800524c <USBD_LL_DataInStage+0x15a>
 8005200:	7dfb      	ldrb	r3, [r7, #23]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d122      	bne.n	800524c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800520c:	b2db      	uxtb	r3, r3
 800520e:	2b03      	cmp	r3, #3
 8005210:	d11c      	bne.n	800524c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8005212:	7dfa      	ldrb	r2, [r7, #23]
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	32ae      	adds	r2, #174	; 0xae
 8005218:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800521c:	695b      	ldr	r3, [r3, #20]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d014      	beq.n	800524c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8005222:	7dfa      	ldrb	r2, [r7, #23]
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800522a:	7dfa      	ldrb	r2, [r7, #23]
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	32ae      	adds	r2, #174	; 0xae
 8005230:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005234:	695b      	ldr	r3, [r3, #20]
 8005236:	7afa      	ldrb	r2, [r7, #11]
 8005238:	4611      	mov	r1, r2
 800523a:	68f8      	ldr	r0, [r7, #12]
 800523c:	4798      	blx	r3
 800523e:	4603      	mov	r3, r0
 8005240:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8005242:	7dbb      	ldrb	r3, [r7, #22]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d001      	beq.n	800524c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8005248:	7dbb      	ldrb	r3, [r7, #22]
 800524a:	e000      	b.n	800524e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800524c:	2300      	movs	r3, #0
}
 800524e:	4618      	mov	r0, r3
 8005250:	3718      	adds	r7, #24
 8005252:	46bd      	mov	sp, r7
 8005254:	bd80      	pop	{r7, pc}

08005256 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005256:	b580      	push	{r7, lr}
 8005258:	b084      	sub	sp, #16
 800525a:	af00      	add	r7, sp, #0
 800525c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800525e:	2300      	movs	r3, #0
 8005260:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	2201      	movs	r2, #1
 8005266:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2200      	movs	r2, #0
 800526e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	2200      	movs	r2, #0
 8005276:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2200      	movs	r2, #0
 800527c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2200      	movs	r2, #0
 8005284:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800528e:	2b00      	cmp	r3, #0
 8005290:	d014      	beq.n	80052bc <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005298:	685b      	ldr	r3, [r3, #4]
 800529a:	2b00      	cmp	r3, #0
 800529c:	d00e      	beq.n	80052bc <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80052a4:	685b      	ldr	r3, [r3, #4]
 80052a6:	687a      	ldr	r2, [r7, #4]
 80052a8:	6852      	ldr	r2, [r2, #4]
 80052aa:	b2d2      	uxtb	r2, r2
 80052ac:	4611      	mov	r1, r2
 80052ae:	6878      	ldr	r0, [r7, #4]
 80052b0:	4798      	blx	r3
 80052b2:	4603      	mov	r3, r0
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d001      	beq.n	80052bc <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80052b8:	2303      	movs	r3, #3
 80052ba:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80052bc:	2340      	movs	r3, #64	; 0x40
 80052be:	2200      	movs	r2, #0
 80052c0:	2100      	movs	r1, #0
 80052c2:	6878      	ldr	r0, [r7, #4]
 80052c4:	f001 fc0d 	bl	8006ae2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2201      	movs	r2, #1
 80052cc:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2240      	movs	r2, #64	; 0x40
 80052d4:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80052d8:	2340      	movs	r3, #64	; 0x40
 80052da:	2200      	movs	r2, #0
 80052dc:	2180      	movs	r1, #128	; 0x80
 80052de:	6878      	ldr	r0, [r7, #4]
 80052e0:	f001 fbff 	bl	8006ae2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2201      	movs	r2, #1
 80052e8:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	2240      	movs	r2, #64	; 0x40
 80052ee:	621a      	str	r2, [r3, #32]

  return ret;
 80052f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80052f2:	4618      	mov	r0, r3
 80052f4:	3710      	adds	r7, #16
 80052f6:	46bd      	mov	sp, r7
 80052f8:	bd80      	pop	{r7, pc}

080052fa <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80052fa:	b480      	push	{r7}
 80052fc:	b083      	sub	sp, #12
 80052fe:	af00      	add	r7, sp, #0
 8005300:	6078      	str	r0, [r7, #4]
 8005302:	460b      	mov	r3, r1
 8005304:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	78fa      	ldrb	r2, [r7, #3]
 800530a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800530c:	2300      	movs	r3, #0
}
 800530e:	4618      	mov	r0, r3
 8005310:	370c      	adds	r7, #12
 8005312:	46bd      	mov	sp, r7
 8005314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005318:	4770      	bx	lr

0800531a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800531a:	b480      	push	{r7}
 800531c:	b083      	sub	sp, #12
 800531e:	af00      	add	r7, sp, #0
 8005320:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005328:	b2db      	uxtb	r3, r3
 800532a:	2b04      	cmp	r3, #4
 800532c:	d006      	beq.n	800533c <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005334:	b2da      	uxtb	r2, r3
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2204      	movs	r2, #4
 8005340:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8005344:	2300      	movs	r3, #0
}
 8005346:	4618      	mov	r0, r3
 8005348:	370c      	adds	r7, #12
 800534a:	46bd      	mov	sp, r7
 800534c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005350:	4770      	bx	lr

08005352 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005352:	b480      	push	{r7}
 8005354:	b083      	sub	sp, #12
 8005356:	af00      	add	r7, sp, #0
 8005358:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005360:	b2db      	uxtb	r3, r3
 8005362:	2b04      	cmp	r3, #4
 8005364:	d106      	bne.n	8005374 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800536c:	b2da      	uxtb	r2, r3
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8005374:	2300      	movs	r3, #0
}
 8005376:	4618      	mov	r0, r3
 8005378:	370c      	adds	r7, #12
 800537a:	46bd      	mov	sp, r7
 800537c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005380:	4770      	bx	lr

08005382 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005382:	b580      	push	{r7, lr}
 8005384:	b082      	sub	sp, #8
 8005386:	af00      	add	r7, sp, #0
 8005388:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005390:	b2db      	uxtb	r3, r3
 8005392:	2b03      	cmp	r3, #3
 8005394:	d110      	bne.n	80053b8 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800539c:	2b00      	cmp	r3, #0
 800539e:	d00b      	beq.n	80053b8 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80053a6:	69db      	ldr	r3, [r3, #28]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d005      	beq.n	80053b8 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80053b2:	69db      	ldr	r3, [r3, #28]
 80053b4:	6878      	ldr	r0, [r7, #4]
 80053b6:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80053b8:	2300      	movs	r3, #0
}
 80053ba:	4618      	mov	r0, r3
 80053bc:	3708      	adds	r7, #8
 80053be:	46bd      	mov	sp, r7
 80053c0:	bd80      	pop	{r7, pc}

080053c2 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80053c2:	b580      	push	{r7, lr}
 80053c4:	b082      	sub	sp, #8
 80053c6:	af00      	add	r7, sp, #0
 80053c8:	6078      	str	r0, [r7, #4]
 80053ca:	460b      	mov	r3, r1
 80053cc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	32ae      	adds	r2, #174	; 0xae
 80053d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d101      	bne.n	80053e4 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80053e0:	2303      	movs	r3, #3
 80053e2:	e01c      	b.n	800541e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80053ea:	b2db      	uxtb	r3, r3
 80053ec:	2b03      	cmp	r3, #3
 80053ee:	d115      	bne.n	800541c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	32ae      	adds	r2, #174	; 0xae
 80053fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80053fe:	6a1b      	ldr	r3, [r3, #32]
 8005400:	2b00      	cmp	r3, #0
 8005402:	d00b      	beq.n	800541c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	32ae      	adds	r2, #174	; 0xae
 800540e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005412:	6a1b      	ldr	r3, [r3, #32]
 8005414:	78fa      	ldrb	r2, [r7, #3]
 8005416:	4611      	mov	r1, r2
 8005418:	6878      	ldr	r0, [r7, #4]
 800541a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800541c:	2300      	movs	r3, #0
}
 800541e:	4618      	mov	r0, r3
 8005420:	3708      	adds	r7, #8
 8005422:	46bd      	mov	sp, r7
 8005424:	bd80      	pop	{r7, pc}

08005426 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8005426:	b580      	push	{r7, lr}
 8005428:	b082      	sub	sp, #8
 800542a:	af00      	add	r7, sp, #0
 800542c:	6078      	str	r0, [r7, #4]
 800542e:	460b      	mov	r3, r1
 8005430:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	32ae      	adds	r2, #174	; 0xae
 800543c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005440:	2b00      	cmp	r3, #0
 8005442:	d101      	bne.n	8005448 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8005444:	2303      	movs	r3, #3
 8005446:	e01c      	b.n	8005482 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800544e:	b2db      	uxtb	r3, r3
 8005450:	2b03      	cmp	r3, #3
 8005452:	d115      	bne.n	8005480 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	32ae      	adds	r2, #174	; 0xae
 800545e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005464:	2b00      	cmp	r3, #0
 8005466:	d00b      	beq.n	8005480 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	32ae      	adds	r2, #174	; 0xae
 8005472:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005478:	78fa      	ldrb	r2, [r7, #3]
 800547a:	4611      	mov	r1, r2
 800547c:	6878      	ldr	r0, [r7, #4]
 800547e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005480:	2300      	movs	r3, #0
}
 8005482:	4618      	mov	r0, r3
 8005484:	3708      	adds	r7, #8
 8005486:	46bd      	mov	sp, r7
 8005488:	bd80      	pop	{r7, pc}

0800548a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800548a:	b480      	push	{r7}
 800548c:	b083      	sub	sp, #12
 800548e:	af00      	add	r7, sp, #0
 8005490:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005492:	2300      	movs	r3, #0
}
 8005494:	4618      	mov	r0, r3
 8005496:	370c      	adds	r7, #12
 8005498:	46bd      	mov	sp, r7
 800549a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549e:	4770      	bx	lr

080054a0 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	b084      	sub	sp, #16
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80054a8:	2300      	movs	r3, #0
 80054aa:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2201      	movs	r2, #1
 80054b0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d00e      	beq.n	80054dc <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80054c4:	685b      	ldr	r3, [r3, #4]
 80054c6:	687a      	ldr	r2, [r7, #4]
 80054c8:	6852      	ldr	r2, [r2, #4]
 80054ca:	b2d2      	uxtb	r2, r2
 80054cc:	4611      	mov	r1, r2
 80054ce:	6878      	ldr	r0, [r7, #4]
 80054d0:	4798      	blx	r3
 80054d2:	4603      	mov	r3, r0
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d001      	beq.n	80054dc <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80054d8:	2303      	movs	r3, #3
 80054da:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80054dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80054de:	4618      	mov	r0, r3
 80054e0:	3710      	adds	r7, #16
 80054e2:	46bd      	mov	sp, r7
 80054e4:	bd80      	pop	{r7, pc}

080054e6 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80054e6:	b480      	push	{r7}
 80054e8:	b083      	sub	sp, #12
 80054ea:	af00      	add	r7, sp, #0
 80054ec:	6078      	str	r0, [r7, #4]
 80054ee:	460b      	mov	r3, r1
 80054f0:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80054f2:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80054f4:	4618      	mov	r0, r3
 80054f6:	370c      	adds	r7, #12
 80054f8:	46bd      	mov	sp, r7
 80054fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fe:	4770      	bx	lr

08005500 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8005500:	b480      	push	{r7}
 8005502:	b083      	sub	sp, #12
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
 8005508:	460b      	mov	r3, r1
 800550a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800550c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800550e:	4618      	mov	r0, r3
 8005510:	370c      	adds	r7, #12
 8005512:	46bd      	mov	sp, r7
 8005514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005518:	4770      	bx	lr

0800551a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800551a:	b580      	push	{r7, lr}
 800551c:	b086      	sub	sp, #24
 800551e:	af00      	add	r7, sp, #0
 8005520:	6078      	str	r0, [r7, #4]
 8005522:	460b      	mov	r3, r1
 8005524:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800552e:	2300      	movs	r3, #0
 8005530:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	885b      	ldrh	r3, [r3, #2]
 8005536:	b29a      	uxth	r2, r3
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	781b      	ldrb	r3, [r3, #0]
 800553c:	b29b      	uxth	r3, r3
 800553e:	429a      	cmp	r2, r3
 8005540:	d920      	bls.n	8005584 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	781b      	ldrb	r3, [r3, #0]
 8005546:	b29b      	uxth	r3, r3
 8005548:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800554a:	e013      	b.n	8005574 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800554c:	f107 030a 	add.w	r3, r7, #10
 8005550:	4619      	mov	r1, r3
 8005552:	6978      	ldr	r0, [r7, #20]
 8005554:	f000 f81b 	bl	800558e <USBD_GetNextDesc>
 8005558:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800555a:	697b      	ldr	r3, [r7, #20]
 800555c:	785b      	ldrb	r3, [r3, #1]
 800555e:	2b05      	cmp	r3, #5
 8005560:	d108      	bne.n	8005574 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8005562:	697b      	ldr	r3, [r7, #20]
 8005564:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8005566:	693b      	ldr	r3, [r7, #16]
 8005568:	789b      	ldrb	r3, [r3, #2]
 800556a:	78fa      	ldrb	r2, [r7, #3]
 800556c:	429a      	cmp	r2, r3
 800556e:	d008      	beq.n	8005582 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8005570:	2300      	movs	r3, #0
 8005572:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	885b      	ldrh	r3, [r3, #2]
 8005578:	b29a      	uxth	r2, r3
 800557a:	897b      	ldrh	r3, [r7, #10]
 800557c:	429a      	cmp	r2, r3
 800557e:	d8e5      	bhi.n	800554c <USBD_GetEpDesc+0x32>
 8005580:	e000      	b.n	8005584 <USBD_GetEpDesc+0x6a>
          break;
 8005582:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8005584:	693b      	ldr	r3, [r7, #16]
}
 8005586:	4618      	mov	r0, r3
 8005588:	3718      	adds	r7, #24
 800558a:	46bd      	mov	sp, r7
 800558c:	bd80      	pop	{r7, pc}

0800558e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800558e:	b480      	push	{r7}
 8005590:	b085      	sub	sp, #20
 8005592:	af00      	add	r7, sp, #0
 8005594:	6078      	str	r0, [r7, #4]
 8005596:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	881a      	ldrh	r2, [r3, #0]
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	781b      	ldrb	r3, [r3, #0]
 80055a4:	b29b      	uxth	r3, r3
 80055a6:	4413      	add	r3, r2
 80055a8:	b29a      	uxth	r2, r3
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	781b      	ldrb	r3, [r3, #0]
 80055b2:	461a      	mov	r2, r3
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	4413      	add	r3, r2
 80055b8:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80055ba:	68fb      	ldr	r3, [r7, #12]
}
 80055bc:	4618      	mov	r0, r3
 80055be:	3714      	adds	r7, #20
 80055c0:	46bd      	mov	sp, r7
 80055c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c6:	4770      	bx	lr

080055c8 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80055c8:	b480      	push	{r7}
 80055ca:	b087      	sub	sp, #28
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80055d4:	697b      	ldr	r3, [r7, #20]
 80055d6:	781b      	ldrb	r3, [r3, #0]
 80055d8:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80055da:	697b      	ldr	r3, [r7, #20]
 80055dc:	3301      	adds	r3, #1
 80055de:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80055e0:	697b      	ldr	r3, [r7, #20]
 80055e2:	781b      	ldrb	r3, [r3, #0]
 80055e4:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80055e6:	8a3b      	ldrh	r3, [r7, #16]
 80055e8:	021b      	lsls	r3, r3, #8
 80055ea:	b21a      	sxth	r2, r3
 80055ec:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80055f0:	4313      	orrs	r3, r2
 80055f2:	b21b      	sxth	r3, r3
 80055f4:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80055f6:	89fb      	ldrh	r3, [r7, #14]
}
 80055f8:	4618      	mov	r0, r3
 80055fa:	371c      	adds	r7, #28
 80055fc:	46bd      	mov	sp, r7
 80055fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005602:	4770      	bx	lr

08005604 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005604:	b580      	push	{r7, lr}
 8005606:	b084      	sub	sp, #16
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]
 800560c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800560e:	2300      	movs	r3, #0
 8005610:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005612:	683b      	ldr	r3, [r7, #0]
 8005614:	781b      	ldrb	r3, [r3, #0]
 8005616:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800561a:	2b40      	cmp	r3, #64	; 0x40
 800561c:	d005      	beq.n	800562a <USBD_StdDevReq+0x26>
 800561e:	2b40      	cmp	r3, #64	; 0x40
 8005620:	d857      	bhi.n	80056d2 <USBD_StdDevReq+0xce>
 8005622:	2b00      	cmp	r3, #0
 8005624:	d00f      	beq.n	8005646 <USBD_StdDevReq+0x42>
 8005626:	2b20      	cmp	r3, #32
 8005628:	d153      	bne.n	80056d2 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	32ae      	adds	r2, #174	; 0xae
 8005634:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005638:	689b      	ldr	r3, [r3, #8]
 800563a:	6839      	ldr	r1, [r7, #0]
 800563c:	6878      	ldr	r0, [r7, #4]
 800563e:	4798      	blx	r3
 8005640:	4603      	mov	r3, r0
 8005642:	73fb      	strb	r3, [r7, #15]
      break;
 8005644:	e04a      	b.n	80056dc <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	785b      	ldrb	r3, [r3, #1]
 800564a:	2b09      	cmp	r3, #9
 800564c:	d83b      	bhi.n	80056c6 <USBD_StdDevReq+0xc2>
 800564e:	a201      	add	r2, pc, #4	; (adr r2, 8005654 <USBD_StdDevReq+0x50>)
 8005650:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005654:	080056a9 	.word	0x080056a9
 8005658:	080056bd 	.word	0x080056bd
 800565c:	080056c7 	.word	0x080056c7
 8005660:	080056b3 	.word	0x080056b3
 8005664:	080056c7 	.word	0x080056c7
 8005668:	08005687 	.word	0x08005687
 800566c:	0800567d 	.word	0x0800567d
 8005670:	080056c7 	.word	0x080056c7
 8005674:	0800569f 	.word	0x0800569f
 8005678:	08005691 	.word	0x08005691
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800567c:	6839      	ldr	r1, [r7, #0]
 800567e:	6878      	ldr	r0, [r7, #4]
 8005680:	f000 fa3c 	bl	8005afc <USBD_GetDescriptor>
          break;
 8005684:	e024      	b.n	80056d0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8005686:	6839      	ldr	r1, [r7, #0]
 8005688:	6878      	ldr	r0, [r7, #4]
 800568a:	f000 fba1 	bl	8005dd0 <USBD_SetAddress>
          break;
 800568e:	e01f      	b.n	80056d0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8005690:	6839      	ldr	r1, [r7, #0]
 8005692:	6878      	ldr	r0, [r7, #4]
 8005694:	f000 fbe0 	bl	8005e58 <USBD_SetConfig>
 8005698:	4603      	mov	r3, r0
 800569a:	73fb      	strb	r3, [r7, #15]
          break;
 800569c:	e018      	b.n	80056d0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800569e:	6839      	ldr	r1, [r7, #0]
 80056a0:	6878      	ldr	r0, [r7, #4]
 80056a2:	f000 fc83 	bl	8005fac <USBD_GetConfig>
          break;
 80056a6:	e013      	b.n	80056d0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80056a8:	6839      	ldr	r1, [r7, #0]
 80056aa:	6878      	ldr	r0, [r7, #4]
 80056ac:	f000 fcb4 	bl	8006018 <USBD_GetStatus>
          break;
 80056b0:	e00e      	b.n	80056d0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80056b2:	6839      	ldr	r1, [r7, #0]
 80056b4:	6878      	ldr	r0, [r7, #4]
 80056b6:	f000 fce3 	bl	8006080 <USBD_SetFeature>
          break;
 80056ba:	e009      	b.n	80056d0 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80056bc:	6839      	ldr	r1, [r7, #0]
 80056be:	6878      	ldr	r0, [r7, #4]
 80056c0:	f000 fd07 	bl	80060d2 <USBD_ClrFeature>
          break;
 80056c4:	e004      	b.n	80056d0 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80056c6:	6839      	ldr	r1, [r7, #0]
 80056c8:	6878      	ldr	r0, [r7, #4]
 80056ca:	f000 fd5e 	bl	800618a <USBD_CtlError>
          break;
 80056ce:	bf00      	nop
      }
      break;
 80056d0:	e004      	b.n	80056dc <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80056d2:	6839      	ldr	r1, [r7, #0]
 80056d4:	6878      	ldr	r0, [r7, #4]
 80056d6:	f000 fd58 	bl	800618a <USBD_CtlError>
      break;
 80056da:	bf00      	nop
  }

  return ret;
 80056dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80056de:	4618      	mov	r0, r3
 80056e0:	3710      	adds	r7, #16
 80056e2:	46bd      	mov	sp, r7
 80056e4:	bd80      	pop	{r7, pc}
 80056e6:	bf00      	nop

080056e8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	b084      	sub	sp, #16
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
 80056f0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80056f2:	2300      	movs	r3, #0
 80056f4:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	781b      	ldrb	r3, [r3, #0]
 80056fa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80056fe:	2b40      	cmp	r3, #64	; 0x40
 8005700:	d005      	beq.n	800570e <USBD_StdItfReq+0x26>
 8005702:	2b40      	cmp	r3, #64	; 0x40
 8005704:	d852      	bhi.n	80057ac <USBD_StdItfReq+0xc4>
 8005706:	2b00      	cmp	r3, #0
 8005708:	d001      	beq.n	800570e <USBD_StdItfReq+0x26>
 800570a:	2b20      	cmp	r3, #32
 800570c:	d14e      	bne.n	80057ac <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005714:	b2db      	uxtb	r3, r3
 8005716:	3b01      	subs	r3, #1
 8005718:	2b02      	cmp	r3, #2
 800571a:	d840      	bhi.n	800579e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800571c:	683b      	ldr	r3, [r7, #0]
 800571e:	889b      	ldrh	r3, [r3, #4]
 8005720:	b2db      	uxtb	r3, r3
 8005722:	2b01      	cmp	r3, #1
 8005724:	d836      	bhi.n	8005794 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	889b      	ldrh	r3, [r3, #4]
 800572a:	b2db      	uxtb	r3, r3
 800572c:	4619      	mov	r1, r3
 800572e:	6878      	ldr	r0, [r7, #4]
 8005730:	f7ff fed9 	bl	80054e6 <USBD_CoreFindIF>
 8005734:	4603      	mov	r3, r0
 8005736:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005738:	7bbb      	ldrb	r3, [r7, #14]
 800573a:	2bff      	cmp	r3, #255	; 0xff
 800573c:	d01d      	beq.n	800577a <USBD_StdItfReq+0x92>
 800573e:	7bbb      	ldrb	r3, [r7, #14]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d11a      	bne.n	800577a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8005744:	7bba      	ldrb	r2, [r7, #14]
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	32ae      	adds	r2, #174	; 0xae
 800574a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800574e:	689b      	ldr	r3, [r3, #8]
 8005750:	2b00      	cmp	r3, #0
 8005752:	d00f      	beq.n	8005774 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8005754:	7bba      	ldrb	r2, [r7, #14]
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800575c:	7bba      	ldrb	r2, [r7, #14]
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	32ae      	adds	r2, #174	; 0xae
 8005762:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005766:	689b      	ldr	r3, [r3, #8]
 8005768:	6839      	ldr	r1, [r7, #0]
 800576a:	6878      	ldr	r0, [r7, #4]
 800576c:	4798      	blx	r3
 800576e:	4603      	mov	r3, r0
 8005770:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8005772:	e004      	b.n	800577e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8005774:	2303      	movs	r3, #3
 8005776:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8005778:	e001      	b.n	800577e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800577a:	2303      	movs	r3, #3
 800577c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	88db      	ldrh	r3, [r3, #6]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d110      	bne.n	80057a8 <USBD_StdItfReq+0xc0>
 8005786:	7bfb      	ldrb	r3, [r7, #15]
 8005788:	2b00      	cmp	r3, #0
 800578a:	d10d      	bne.n	80057a8 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800578c:	6878      	ldr	r0, [r7, #4]
 800578e:	f000 fdc7 	bl	8006320 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8005792:	e009      	b.n	80057a8 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8005794:	6839      	ldr	r1, [r7, #0]
 8005796:	6878      	ldr	r0, [r7, #4]
 8005798:	f000 fcf7 	bl	800618a <USBD_CtlError>
          break;
 800579c:	e004      	b.n	80057a8 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800579e:	6839      	ldr	r1, [r7, #0]
 80057a0:	6878      	ldr	r0, [r7, #4]
 80057a2:	f000 fcf2 	bl	800618a <USBD_CtlError>
          break;
 80057a6:	e000      	b.n	80057aa <USBD_StdItfReq+0xc2>
          break;
 80057a8:	bf00      	nop
      }
      break;
 80057aa:	e004      	b.n	80057b6 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80057ac:	6839      	ldr	r1, [r7, #0]
 80057ae:	6878      	ldr	r0, [r7, #4]
 80057b0:	f000 fceb 	bl	800618a <USBD_CtlError>
      break;
 80057b4:	bf00      	nop
  }

  return ret;
 80057b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80057b8:	4618      	mov	r0, r3
 80057ba:	3710      	adds	r7, #16
 80057bc:	46bd      	mov	sp, r7
 80057be:	bd80      	pop	{r7, pc}

080057c0 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b084      	sub	sp, #16
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
 80057c8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80057ca:	2300      	movs	r3, #0
 80057cc:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80057ce:	683b      	ldr	r3, [r7, #0]
 80057d0:	889b      	ldrh	r3, [r3, #4]
 80057d2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	781b      	ldrb	r3, [r3, #0]
 80057d8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80057dc:	2b40      	cmp	r3, #64	; 0x40
 80057de:	d007      	beq.n	80057f0 <USBD_StdEPReq+0x30>
 80057e0:	2b40      	cmp	r3, #64	; 0x40
 80057e2:	f200 817f 	bhi.w	8005ae4 <USBD_StdEPReq+0x324>
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d02a      	beq.n	8005840 <USBD_StdEPReq+0x80>
 80057ea:	2b20      	cmp	r3, #32
 80057ec:	f040 817a 	bne.w	8005ae4 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80057f0:	7bbb      	ldrb	r3, [r7, #14]
 80057f2:	4619      	mov	r1, r3
 80057f4:	6878      	ldr	r0, [r7, #4]
 80057f6:	f7ff fe83 	bl	8005500 <USBD_CoreFindEP>
 80057fa:	4603      	mov	r3, r0
 80057fc:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80057fe:	7b7b      	ldrb	r3, [r7, #13]
 8005800:	2bff      	cmp	r3, #255	; 0xff
 8005802:	f000 8174 	beq.w	8005aee <USBD_StdEPReq+0x32e>
 8005806:	7b7b      	ldrb	r3, [r7, #13]
 8005808:	2b00      	cmp	r3, #0
 800580a:	f040 8170 	bne.w	8005aee <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800580e:	7b7a      	ldrb	r2, [r7, #13]
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8005816:	7b7a      	ldrb	r2, [r7, #13]
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	32ae      	adds	r2, #174	; 0xae
 800581c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005820:	689b      	ldr	r3, [r3, #8]
 8005822:	2b00      	cmp	r3, #0
 8005824:	f000 8163 	beq.w	8005aee <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8005828:	7b7a      	ldrb	r2, [r7, #13]
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	32ae      	adds	r2, #174	; 0xae
 800582e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005832:	689b      	ldr	r3, [r3, #8]
 8005834:	6839      	ldr	r1, [r7, #0]
 8005836:	6878      	ldr	r0, [r7, #4]
 8005838:	4798      	blx	r3
 800583a:	4603      	mov	r3, r0
 800583c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800583e:	e156      	b.n	8005aee <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	785b      	ldrb	r3, [r3, #1]
 8005844:	2b03      	cmp	r3, #3
 8005846:	d008      	beq.n	800585a <USBD_StdEPReq+0x9a>
 8005848:	2b03      	cmp	r3, #3
 800584a:	f300 8145 	bgt.w	8005ad8 <USBD_StdEPReq+0x318>
 800584e:	2b00      	cmp	r3, #0
 8005850:	f000 809b 	beq.w	800598a <USBD_StdEPReq+0x1ca>
 8005854:	2b01      	cmp	r3, #1
 8005856:	d03c      	beq.n	80058d2 <USBD_StdEPReq+0x112>
 8005858:	e13e      	b.n	8005ad8 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005860:	b2db      	uxtb	r3, r3
 8005862:	2b02      	cmp	r3, #2
 8005864:	d002      	beq.n	800586c <USBD_StdEPReq+0xac>
 8005866:	2b03      	cmp	r3, #3
 8005868:	d016      	beq.n	8005898 <USBD_StdEPReq+0xd8>
 800586a:	e02c      	b.n	80058c6 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800586c:	7bbb      	ldrb	r3, [r7, #14]
 800586e:	2b00      	cmp	r3, #0
 8005870:	d00d      	beq.n	800588e <USBD_StdEPReq+0xce>
 8005872:	7bbb      	ldrb	r3, [r7, #14]
 8005874:	2b80      	cmp	r3, #128	; 0x80
 8005876:	d00a      	beq.n	800588e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8005878:	7bbb      	ldrb	r3, [r7, #14]
 800587a:	4619      	mov	r1, r3
 800587c:	6878      	ldr	r0, [r7, #4]
 800587e:	f001 f975 	bl	8006b6c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8005882:	2180      	movs	r1, #128	; 0x80
 8005884:	6878      	ldr	r0, [r7, #4]
 8005886:	f001 f971 	bl	8006b6c <USBD_LL_StallEP>
 800588a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800588c:	e020      	b.n	80058d0 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800588e:	6839      	ldr	r1, [r7, #0]
 8005890:	6878      	ldr	r0, [r7, #4]
 8005892:	f000 fc7a 	bl	800618a <USBD_CtlError>
              break;
 8005896:	e01b      	b.n	80058d0 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005898:	683b      	ldr	r3, [r7, #0]
 800589a:	885b      	ldrh	r3, [r3, #2]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d10e      	bne.n	80058be <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80058a0:	7bbb      	ldrb	r3, [r7, #14]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d00b      	beq.n	80058be <USBD_StdEPReq+0xfe>
 80058a6:	7bbb      	ldrb	r3, [r7, #14]
 80058a8:	2b80      	cmp	r3, #128	; 0x80
 80058aa:	d008      	beq.n	80058be <USBD_StdEPReq+0xfe>
 80058ac:	683b      	ldr	r3, [r7, #0]
 80058ae:	88db      	ldrh	r3, [r3, #6]
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d104      	bne.n	80058be <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80058b4:	7bbb      	ldrb	r3, [r7, #14]
 80058b6:	4619      	mov	r1, r3
 80058b8:	6878      	ldr	r0, [r7, #4]
 80058ba:	f001 f957 	bl	8006b6c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80058be:	6878      	ldr	r0, [r7, #4]
 80058c0:	f000 fd2e 	bl	8006320 <USBD_CtlSendStatus>

              break;
 80058c4:	e004      	b.n	80058d0 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80058c6:	6839      	ldr	r1, [r7, #0]
 80058c8:	6878      	ldr	r0, [r7, #4]
 80058ca:	f000 fc5e 	bl	800618a <USBD_CtlError>
              break;
 80058ce:	bf00      	nop
          }
          break;
 80058d0:	e107      	b.n	8005ae2 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80058d8:	b2db      	uxtb	r3, r3
 80058da:	2b02      	cmp	r3, #2
 80058dc:	d002      	beq.n	80058e4 <USBD_StdEPReq+0x124>
 80058de:	2b03      	cmp	r3, #3
 80058e0:	d016      	beq.n	8005910 <USBD_StdEPReq+0x150>
 80058e2:	e04b      	b.n	800597c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80058e4:	7bbb      	ldrb	r3, [r7, #14]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d00d      	beq.n	8005906 <USBD_StdEPReq+0x146>
 80058ea:	7bbb      	ldrb	r3, [r7, #14]
 80058ec:	2b80      	cmp	r3, #128	; 0x80
 80058ee:	d00a      	beq.n	8005906 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80058f0:	7bbb      	ldrb	r3, [r7, #14]
 80058f2:	4619      	mov	r1, r3
 80058f4:	6878      	ldr	r0, [r7, #4]
 80058f6:	f001 f939 	bl	8006b6c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80058fa:	2180      	movs	r1, #128	; 0x80
 80058fc:	6878      	ldr	r0, [r7, #4]
 80058fe:	f001 f935 	bl	8006b6c <USBD_LL_StallEP>
 8005902:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005904:	e040      	b.n	8005988 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8005906:	6839      	ldr	r1, [r7, #0]
 8005908:	6878      	ldr	r0, [r7, #4]
 800590a:	f000 fc3e 	bl	800618a <USBD_CtlError>
              break;
 800590e:	e03b      	b.n	8005988 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005910:	683b      	ldr	r3, [r7, #0]
 8005912:	885b      	ldrh	r3, [r3, #2]
 8005914:	2b00      	cmp	r3, #0
 8005916:	d136      	bne.n	8005986 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8005918:	7bbb      	ldrb	r3, [r7, #14]
 800591a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800591e:	2b00      	cmp	r3, #0
 8005920:	d004      	beq.n	800592c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8005922:	7bbb      	ldrb	r3, [r7, #14]
 8005924:	4619      	mov	r1, r3
 8005926:	6878      	ldr	r0, [r7, #4]
 8005928:	f001 f93f 	bl	8006baa <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800592c:	6878      	ldr	r0, [r7, #4]
 800592e:	f000 fcf7 	bl	8006320 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8005932:	7bbb      	ldrb	r3, [r7, #14]
 8005934:	4619      	mov	r1, r3
 8005936:	6878      	ldr	r0, [r7, #4]
 8005938:	f7ff fde2 	bl	8005500 <USBD_CoreFindEP>
 800593c:	4603      	mov	r3, r0
 800593e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005940:	7b7b      	ldrb	r3, [r7, #13]
 8005942:	2bff      	cmp	r3, #255	; 0xff
 8005944:	d01f      	beq.n	8005986 <USBD_StdEPReq+0x1c6>
 8005946:	7b7b      	ldrb	r3, [r7, #13]
 8005948:	2b00      	cmp	r3, #0
 800594a:	d11c      	bne.n	8005986 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800594c:	7b7a      	ldrb	r2, [r7, #13]
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8005954:	7b7a      	ldrb	r2, [r7, #13]
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	32ae      	adds	r2, #174	; 0xae
 800595a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800595e:	689b      	ldr	r3, [r3, #8]
 8005960:	2b00      	cmp	r3, #0
 8005962:	d010      	beq.n	8005986 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8005964:	7b7a      	ldrb	r2, [r7, #13]
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	32ae      	adds	r2, #174	; 0xae
 800596a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800596e:	689b      	ldr	r3, [r3, #8]
 8005970:	6839      	ldr	r1, [r7, #0]
 8005972:	6878      	ldr	r0, [r7, #4]
 8005974:	4798      	blx	r3
 8005976:	4603      	mov	r3, r0
 8005978:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800597a:	e004      	b.n	8005986 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800597c:	6839      	ldr	r1, [r7, #0]
 800597e:	6878      	ldr	r0, [r7, #4]
 8005980:	f000 fc03 	bl	800618a <USBD_CtlError>
              break;
 8005984:	e000      	b.n	8005988 <USBD_StdEPReq+0x1c8>
              break;
 8005986:	bf00      	nop
          }
          break;
 8005988:	e0ab      	b.n	8005ae2 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005990:	b2db      	uxtb	r3, r3
 8005992:	2b02      	cmp	r3, #2
 8005994:	d002      	beq.n	800599c <USBD_StdEPReq+0x1dc>
 8005996:	2b03      	cmp	r3, #3
 8005998:	d032      	beq.n	8005a00 <USBD_StdEPReq+0x240>
 800599a:	e097      	b.n	8005acc <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800599c:	7bbb      	ldrb	r3, [r7, #14]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d007      	beq.n	80059b2 <USBD_StdEPReq+0x1f2>
 80059a2:	7bbb      	ldrb	r3, [r7, #14]
 80059a4:	2b80      	cmp	r3, #128	; 0x80
 80059a6:	d004      	beq.n	80059b2 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80059a8:	6839      	ldr	r1, [r7, #0]
 80059aa:	6878      	ldr	r0, [r7, #4]
 80059ac:	f000 fbed 	bl	800618a <USBD_CtlError>
                break;
 80059b0:	e091      	b.n	8005ad6 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80059b2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	da0b      	bge.n	80059d2 <USBD_StdEPReq+0x212>
 80059ba:	7bbb      	ldrb	r3, [r7, #14]
 80059bc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80059c0:	4613      	mov	r3, r2
 80059c2:	009b      	lsls	r3, r3, #2
 80059c4:	4413      	add	r3, r2
 80059c6:	009b      	lsls	r3, r3, #2
 80059c8:	3310      	adds	r3, #16
 80059ca:	687a      	ldr	r2, [r7, #4]
 80059cc:	4413      	add	r3, r2
 80059ce:	3304      	adds	r3, #4
 80059d0:	e00b      	b.n	80059ea <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80059d2:	7bbb      	ldrb	r3, [r7, #14]
 80059d4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80059d8:	4613      	mov	r3, r2
 80059da:	009b      	lsls	r3, r3, #2
 80059dc:	4413      	add	r3, r2
 80059de:	009b      	lsls	r3, r3, #2
 80059e0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80059e4:	687a      	ldr	r2, [r7, #4]
 80059e6:	4413      	add	r3, r2
 80059e8:	3304      	adds	r3, #4
 80059ea:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80059ec:	68bb      	ldr	r3, [r7, #8]
 80059ee:	2200      	movs	r2, #0
 80059f0:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80059f2:	68bb      	ldr	r3, [r7, #8]
 80059f4:	2202      	movs	r2, #2
 80059f6:	4619      	mov	r1, r3
 80059f8:	6878      	ldr	r0, [r7, #4]
 80059fa:	f000 fc37 	bl	800626c <USBD_CtlSendData>
              break;
 80059fe:	e06a      	b.n	8005ad6 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8005a00:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	da11      	bge.n	8005a2c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005a08:	7bbb      	ldrb	r3, [r7, #14]
 8005a0a:	f003 020f 	and.w	r2, r3, #15
 8005a0e:	6879      	ldr	r1, [r7, #4]
 8005a10:	4613      	mov	r3, r2
 8005a12:	009b      	lsls	r3, r3, #2
 8005a14:	4413      	add	r3, r2
 8005a16:	009b      	lsls	r3, r3, #2
 8005a18:	440b      	add	r3, r1
 8005a1a:	3324      	adds	r3, #36	; 0x24
 8005a1c:	881b      	ldrh	r3, [r3, #0]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d117      	bne.n	8005a52 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8005a22:	6839      	ldr	r1, [r7, #0]
 8005a24:	6878      	ldr	r0, [r7, #4]
 8005a26:	f000 fbb0 	bl	800618a <USBD_CtlError>
                  break;
 8005a2a:	e054      	b.n	8005ad6 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8005a2c:	7bbb      	ldrb	r3, [r7, #14]
 8005a2e:	f003 020f 	and.w	r2, r3, #15
 8005a32:	6879      	ldr	r1, [r7, #4]
 8005a34:	4613      	mov	r3, r2
 8005a36:	009b      	lsls	r3, r3, #2
 8005a38:	4413      	add	r3, r2
 8005a3a:	009b      	lsls	r3, r3, #2
 8005a3c:	440b      	add	r3, r1
 8005a3e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005a42:	881b      	ldrh	r3, [r3, #0]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d104      	bne.n	8005a52 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8005a48:	6839      	ldr	r1, [r7, #0]
 8005a4a:	6878      	ldr	r0, [r7, #4]
 8005a4c:	f000 fb9d 	bl	800618a <USBD_CtlError>
                  break;
 8005a50:	e041      	b.n	8005ad6 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005a52:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	da0b      	bge.n	8005a72 <USBD_StdEPReq+0x2b2>
 8005a5a:	7bbb      	ldrb	r3, [r7, #14]
 8005a5c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005a60:	4613      	mov	r3, r2
 8005a62:	009b      	lsls	r3, r3, #2
 8005a64:	4413      	add	r3, r2
 8005a66:	009b      	lsls	r3, r3, #2
 8005a68:	3310      	adds	r3, #16
 8005a6a:	687a      	ldr	r2, [r7, #4]
 8005a6c:	4413      	add	r3, r2
 8005a6e:	3304      	adds	r3, #4
 8005a70:	e00b      	b.n	8005a8a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005a72:	7bbb      	ldrb	r3, [r7, #14]
 8005a74:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005a78:	4613      	mov	r3, r2
 8005a7a:	009b      	lsls	r3, r3, #2
 8005a7c:	4413      	add	r3, r2
 8005a7e:	009b      	lsls	r3, r3, #2
 8005a80:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005a84:	687a      	ldr	r2, [r7, #4]
 8005a86:	4413      	add	r3, r2
 8005a88:	3304      	adds	r3, #4
 8005a8a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8005a8c:	7bbb      	ldrb	r3, [r7, #14]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d002      	beq.n	8005a98 <USBD_StdEPReq+0x2d8>
 8005a92:	7bbb      	ldrb	r3, [r7, #14]
 8005a94:	2b80      	cmp	r3, #128	; 0x80
 8005a96:	d103      	bne.n	8005aa0 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8005a98:	68bb      	ldr	r3, [r7, #8]
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	601a      	str	r2, [r3, #0]
 8005a9e:	e00e      	b.n	8005abe <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8005aa0:	7bbb      	ldrb	r3, [r7, #14]
 8005aa2:	4619      	mov	r1, r3
 8005aa4:	6878      	ldr	r0, [r7, #4]
 8005aa6:	f001 f89f 	bl	8006be8 <USBD_LL_IsStallEP>
 8005aaa:	4603      	mov	r3, r0
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d003      	beq.n	8005ab8 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8005ab0:	68bb      	ldr	r3, [r7, #8]
 8005ab2:	2201      	movs	r2, #1
 8005ab4:	601a      	str	r2, [r3, #0]
 8005ab6:	e002      	b.n	8005abe <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8005ab8:	68bb      	ldr	r3, [r7, #8]
 8005aba:	2200      	movs	r2, #0
 8005abc:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005abe:	68bb      	ldr	r3, [r7, #8]
 8005ac0:	2202      	movs	r2, #2
 8005ac2:	4619      	mov	r1, r3
 8005ac4:	6878      	ldr	r0, [r7, #4]
 8005ac6:	f000 fbd1 	bl	800626c <USBD_CtlSendData>
              break;
 8005aca:	e004      	b.n	8005ad6 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8005acc:	6839      	ldr	r1, [r7, #0]
 8005ace:	6878      	ldr	r0, [r7, #4]
 8005ad0:	f000 fb5b 	bl	800618a <USBD_CtlError>
              break;
 8005ad4:	bf00      	nop
          }
          break;
 8005ad6:	e004      	b.n	8005ae2 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8005ad8:	6839      	ldr	r1, [r7, #0]
 8005ada:	6878      	ldr	r0, [r7, #4]
 8005adc:	f000 fb55 	bl	800618a <USBD_CtlError>
          break;
 8005ae0:	bf00      	nop
      }
      break;
 8005ae2:	e005      	b.n	8005af0 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8005ae4:	6839      	ldr	r1, [r7, #0]
 8005ae6:	6878      	ldr	r0, [r7, #4]
 8005ae8:	f000 fb4f 	bl	800618a <USBD_CtlError>
      break;
 8005aec:	e000      	b.n	8005af0 <USBD_StdEPReq+0x330>
      break;
 8005aee:	bf00      	nop
  }

  return ret;
 8005af0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005af2:	4618      	mov	r0, r3
 8005af4:	3710      	adds	r7, #16
 8005af6:	46bd      	mov	sp, r7
 8005af8:	bd80      	pop	{r7, pc}
	...

08005afc <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005afc:	b580      	push	{r7, lr}
 8005afe:	b084      	sub	sp, #16
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
 8005b04:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005b06:	2300      	movs	r3, #0
 8005b08:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8005b0e:	2300      	movs	r3, #0
 8005b10:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8005b12:	683b      	ldr	r3, [r7, #0]
 8005b14:	885b      	ldrh	r3, [r3, #2]
 8005b16:	0a1b      	lsrs	r3, r3, #8
 8005b18:	b29b      	uxth	r3, r3
 8005b1a:	3b01      	subs	r3, #1
 8005b1c:	2b06      	cmp	r3, #6
 8005b1e:	f200 8128 	bhi.w	8005d72 <USBD_GetDescriptor+0x276>
 8005b22:	a201      	add	r2, pc, #4	; (adr r2, 8005b28 <USBD_GetDescriptor+0x2c>)
 8005b24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b28:	08005b45 	.word	0x08005b45
 8005b2c:	08005b5d 	.word	0x08005b5d
 8005b30:	08005b9d 	.word	0x08005b9d
 8005b34:	08005d73 	.word	0x08005d73
 8005b38:	08005d73 	.word	0x08005d73
 8005b3c:	08005d13 	.word	0x08005d13
 8005b40:	08005d3f 	.word	0x08005d3f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	687a      	ldr	r2, [r7, #4]
 8005b4e:	7c12      	ldrb	r2, [r2, #16]
 8005b50:	f107 0108 	add.w	r1, r7, #8
 8005b54:	4610      	mov	r0, r2
 8005b56:	4798      	blx	r3
 8005b58:	60f8      	str	r0, [r7, #12]
      break;
 8005b5a:	e112      	b.n	8005d82 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	7c1b      	ldrb	r3, [r3, #16]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d10d      	bne.n	8005b80 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b6c:	f107 0208 	add.w	r2, r7, #8
 8005b70:	4610      	mov	r0, r2
 8005b72:	4798      	blx	r3
 8005b74:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	3301      	adds	r3, #1
 8005b7a:	2202      	movs	r2, #2
 8005b7c:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8005b7e:	e100      	b.n	8005d82 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b88:	f107 0208 	add.w	r2, r7, #8
 8005b8c:	4610      	mov	r0, r2
 8005b8e:	4798      	blx	r3
 8005b90:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	3301      	adds	r3, #1
 8005b96:	2202      	movs	r2, #2
 8005b98:	701a      	strb	r2, [r3, #0]
      break;
 8005b9a:	e0f2      	b.n	8005d82 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	885b      	ldrh	r3, [r3, #2]
 8005ba0:	b2db      	uxtb	r3, r3
 8005ba2:	2b05      	cmp	r3, #5
 8005ba4:	f200 80ac 	bhi.w	8005d00 <USBD_GetDescriptor+0x204>
 8005ba8:	a201      	add	r2, pc, #4	; (adr r2, 8005bb0 <USBD_GetDescriptor+0xb4>)
 8005baa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bae:	bf00      	nop
 8005bb0:	08005bc9 	.word	0x08005bc9
 8005bb4:	08005bfd 	.word	0x08005bfd
 8005bb8:	08005c31 	.word	0x08005c31
 8005bbc:	08005c65 	.word	0x08005c65
 8005bc0:	08005c99 	.word	0x08005c99
 8005bc4:	08005ccd 	.word	0x08005ccd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005bce:	685b      	ldr	r3, [r3, #4]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d00b      	beq.n	8005bec <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005bda:	685b      	ldr	r3, [r3, #4]
 8005bdc:	687a      	ldr	r2, [r7, #4]
 8005bde:	7c12      	ldrb	r2, [r2, #16]
 8005be0:	f107 0108 	add.w	r1, r7, #8
 8005be4:	4610      	mov	r0, r2
 8005be6:	4798      	blx	r3
 8005be8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005bea:	e091      	b.n	8005d10 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005bec:	6839      	ldr	r1, [r7, #0]
 8005bee:	6878      	ldr	r0, [r7, #4]
 8005bf0:	f000 facb 	bl	800618a <USBD_CtlError>
            err++;
 8005bf4:	7afb      	ldrb	r3, [r7, #11]
 8005bf6:	3301      	adds	r3, #1
 8005bf8:	72fb      	strb	r3, [r7, #11]
          break;
 8005bfa:	e089      	b.n	8005d10 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005c02:	689b      	ldr	r3, [r3, #8]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d00b      	beq.n	8005c20 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005c0e:	689b      	ldr	r3, [r3, #8]
 8005c10:	687a      	ldr	r2, [r7, #4]
 8005c12:	7c12      	ldrb	r2, [r2, #16]
 8005c14:	f107 0108 	add.w	r1, r7, #8
 8005c18:	4610      	mov	r0, r2
 8005c1a:	4798      	blx	r3
 8005c1c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005c1e:	e077      	b.n	8005d10 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005c20:	6839      	ldr	r1, [r7, #0]
 8005c22:	6878      	ldr	r0, [r7, #4]
 8005c24:	f000 fab1 	bl	800618a <USBD_CtlError>
            err++;
 8005c28:	7afb      	ldrb	r3, [r7, #11]
 8005c2a:	3301      	adds	r3, #1
 8005c2c:	72fb      	strb	r3, [r7, #11]
          break;
 8005c2e:	e06f      	b.n	8005d10 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005c36:	68db      	ldr	r3, [r3, #12]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d00b      	beq.n	8005c54 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005c42:	68db      	ldr	r3, [r3, #12]
 8005c44:	687a      	ldr	r2, [r7, #4]
 8005c46:	7c12      	ldrb	r2, [r2, #16]
 8005c48:	f107 0108 	add.w	r1, r7, #8
 8005c4c:	4610      	mov	r0, r2
 8005c4e:	4798      	blx	r3
 8005c50:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005c52:	e05d      	b.n	8005d10 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005c54:	6839      	ldr	r1, [r7, #0]
 8005c56:	6878      	ldr	r0, [r7, #4]
 8005c58:	f000 fa97 	bl	800618a <USBD_CtlError>
            err++;
 8005c5c:	7afb      	ldrb	r3, [r7, #11]
 8005c5e:	3301      	adds	r3, #1
 8005c60:	72fb      	strb	r3, [r7, #11]
          break;
 8005c62:	e055      	b.n	8005d10 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005c6a:	691b      	ldr	r3, [r3, #16]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d00b      	beq.n	8005c88 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005c76:	691b      	ldr	r3, [r3, #16]
 8005c78:	687a      	ldr	r2, [r7, #4]
 8005c7a:	7c12      	ldrb	r2, [r2, #16]
 8005c7c:	f107 0108 	add.w	r1, r7, #8
 8005c80:	4610      	mov	r0, r2
 8005c82:	4798      	blx	r3
 8005c84:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005c86:	e043      	b.n	8005d10 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005c88:	6839      	ldr	r1, [r7, #0]
 8005c8a:	6878      	ldr	r0, [r7, #4]
 8005c8c:	f000 fa7d 	bl	800618a <USBD_CtlError>
            err++;
 8005c90:	7afb      	ldrb	r3, [r7, #11]
 8005c92:	3301      	adds	r3, #1
 8005c94:	72fb      	strb	r3, [r7, #11]
          break;
 8005c96:	e03b      	b.n	8005d10 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005c9e:	695b      	ldr	r3, [r3, #20]
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d00b      	beq.n	8005cbc <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005caa:	695b      	ldr	r3, [r3, #20]
 8005cac:	687a      	ldr	r2, [r7, #4]
 8005cae:	7c12      	ldrb	r2, [r2, #16]
 8005cb0:	f107 0108 	add.w	r1, r7, #8
 8005cb4:	4610      	mov	r0, r2
 8005cb6:	4798      	blx	r3
 8005cb8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005cba:	e029      	b.n	8005d10 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005cbc:	6839      	ldr	r1, [r7, #0]
 8005cbe:	6878      	ldr	r0, [r7, #4]
 8005cc0:	f000 fa63 	bl	800618a <USBD_CtlError>
            err++;
 8005cc4:	7afb      	ldrb	r3, [r7, #11]
 8005cc6:	3301      	adds	r3, #1
 8005cc8:	72fb      	strb	r3, [r7, #11]
          break;
 8005cca:	e021      	b.n	8005d10 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005cd2:	699b      	ldr	r3, [r3, #24]
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d00b      	beq.n	8005cf0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005cde:	699b      	ldr	r3, [r3, #24]
 8005ce0:	687a      	ldr	r2, [r7, #4]
 8005ce2:	7c12      	ldrb	r2, [r2, #16]
 8005ce4:	f107 0108 	add.w	r1, r7, #8
 8005ce8:	4610      	mov	r0, r2
 8005cea:	4798      	blx	r3
 8005cec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005cee:	e00f      	b.n	8005d10 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005cf0:	6839      	ldr	r1, [r7, #0]
 8005cf2:	6878      	ldr	r0, [r7, #4]
 8005cf4:	f000 fa49 	bl	800618a <USBD_CtlError>
            err++;
 8005cf8:	7afb      	ldrb	r3, [r7, #11]
 8005cfa:	3301      	adds	r3, #1
 8005cfc:	72fb      	strb	r3, [r7, #11]
          break;
 8005cfe:	e007      	b.n	8005d10 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8005d00:	6839      	ldr	r1, [r7, #0]
 8005d02:	6878      	ldr	r0, [r7, #4]
 8005d04:	f000 fa41 	bl	800618a <USBD_CtlError>
          err++;
 8005d08:	7afb      	ldrb	r3, [r7, #11]
 8005d0a:	3301      	adds	r3, #1
 8005d0c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8005d0e:	bf00      	nop
      }
      break;
 8005d10:	e037      	b.n	8005d82 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	7c1b      	ldrb	r3, [r3, #16]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d109      	bne.n	8005d2e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d22:	f107 0208 	add.w	r2, r7, #8
 8005d26:	4610      	mov	r0, r2
 8005d28:	4798      	blx	r3
 8005d2a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005d2c:	e029      	b.n	8005d82 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8005d2e:	6839      	ldr	r1, [r7, #0]
 8005d30:	6878      	ldr	r0, [r7, #4]
 8005d32:	f000 fa2a 	bl	800618a <USBD_CtlError>
        err++;
 8005d36:	7afb      	ldrb	r3, [r7, #11]
 8005d38:	3301      	adds	r3, #1
 8005d3a:	72fb      	strb	r3, [r7, #11]
      break;
 8005d3c:	e021      	b.n	8005d82 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	7c1b      	ldrb	r3, [r3, #16]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d10d      	bne.n	8005d62 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d4e:	f107 0208 	add.w	r2, r7, #8
 8005d52:	4610      	mov	r0, r2
 8005d54:	4798      	blx	r3
 8005d56:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	3301      	adds	r3, #1
 8005d5c:	2207      	movs	r2, #7
 8005d5e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005d60:	e00f      	b.n	8005d82 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8005d62:	6839      	ldr	r1, [r7, #0]
 8005d64:	6878      	ldr	r0, [r7, #4]
 8005d66:	f000 fa10 	bl	800618a <USBD_CtlError>
        err++;
 8005d6a:	7afb      	ldrb	r3, [r7, #11]
 8005d6c:	3301      	adds	r3, #1
 8005d6e:	72fb      	strb	r3, [r7, #11]
      break;
 8005d70:	e007      	b.n	8005d82 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8005d72:	6839      	ldr	r1, [r7, #0]
 8005d74:	6878      	ldr	r0, [r7, #4]
 8005d76:	f000 fa08 	bl	800618a <USBD_CtlError>
      err++;
 8005d7a:	7afb      	ldrb	r3, [r7, #11]
 8005d7c:	3301      	adds	r3, #1
 8005d7e:	72fb      	strb	r3, [r7, #11]
      break;
 8005d80:	bf00      	nop
  }

  if (err != 0U)
 8005d82:	7afb      	ldrb	r3, [r7, #11]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d11e      	bne.n	8005dc6 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	88db      	ldrh	r3, [r3, #6]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d016      	beq.n	8005dbe <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8005d90:	893b      	ldrh	r3, [r7, #8]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d00e      	beq.n	8005db4 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	88da      	ldrh	r2, [r3, #6]
 8005d9a:	893b      	ldrh	r3, [r7, #8]
 8005d9c:	4293      	cmp	r3, r2
 8005d9e:	bf28      	it	cs
 8005da0:	4613      	movcs	r3, r2
 8005da2:	b29b      	uxth	r3, r3
 8005da4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8005da6:	893b      	ldrh	r3, [r7, #8]
 8005da8:	461a      	mov	r2, r3
 8005daa:	68f9      	ldr	r1, [r7, #12]
 8005dac:	6878      	ldr	r0, [r7, #4]
 8005dae:	f000 fa5d 	bl	800626c <USBD_CtlSendData>
 8005db2:	e009      	b.n	8005dc8 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8005db4:	6839      	ldr	r1, [r7, #0]
 8005db6:	6878      	ldr	r0, [r7, #4]
 8005db8:	f000 f9e7 	bl	800618a <USBD_CtlError>
 8005dbc:	e004      	b.n	8005dc8 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8005dbe:	6878      	ldr	r0, [r7, #4]
 8005dc0:	f000 faae 	bl	8006320 <USBD_CtlSendStatus>
 8005dc4:	e000      	b.n	8005dc8 <USBD_GetDescriptor+0x2cc>
    return;
 8005dc6:	bf00      	nop
  }
}
 8005dc8:	3710      	adds	r7, #16
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	bd80      	pop	{r7, pc}
 8005dce:	bf00      	nop

08005dd0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b084      	sub	sp, #16
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
 8005dd8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8005dda:	683b      	ldr	r3, [r7, #0]
 8005ddc:	889b      	ldrh	r3, [r3, #4]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d131      	bne.n	8005e46 <USBD_SetAddress+0x76>
 8005de2:	683b      	ldr	r3, [r7, #0]
 8005de4:	88db      	ldrh	r3, [r3, #6]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d12d      	bne.n	8005e46 <USBD_SetAddress+0x76>
 8005dea:	683b      	ldr	r3, [r7, #0]
 8005dec:	885b      	ldrh	r3, [r3, #2]
 8005dee:	2b7f      	cmp	r3, #127	; 0x7f
 8005df0:	d829      	bhi.n	8005e46 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8005df2:	683b      	ldr	r3, [r7, #0]
 8005df4:	885b      	ldrh	r3, [r3, #2]
 8005df6:	b2db      	uxtb	r3, r3
 8005df8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005dfc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e04:	b2db      	uxtb	r3, r3
 8005e06:	2b03      	cmp	r3, #3
 8005e08:	d104      	bne.n	8005e14 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8005e0a:	6839      	ldr	r1, [r7, #0]
 8005e0c:	6878      	ldr	r0, [r7, #4]
 8005e0e:	f000 f9bc 	bl	800618a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e12:	e01d      	b.n	8005e50 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	7bfa      	ldrb	r2, [r7, #15]
 8005e18:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8005e1c:	7bfb      	ldrb	r3, [r7, #15]
 8005e1e:	4619      	mov	r1, r3
 8005e20:	6878      	ldr	r0, [r7, #4]
 8005e22:	f000 ff0d 	bl	8006c40 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8005e26:	6878      	ldr	r0, [r7, #4]
 8005e28:	f000 fa7a 	bl	8006320 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8005e2c:	7bfb      	ldrb	r3, [r7, #15]
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d004      	beq.n	8005e3c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	2202      	movs	r2, #2
 8005e36:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e3a:	e009      	b.n	8005e50 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2201      	movs	r2, #1
 8005e40:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e44:	e004      	b.n	8005e50 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8005e46:	6839      	ldr	r1, [r7, #0]
 8005e48:	6878      	ldr	r0, [r7, #4]
 8005e4a:	f000 f99e 	bl	800618a <USBD_CtlError>
  }
}
 8005e4e:	bf00      	nop
 8005e50:	bf00      	nop
 8005e52:	3710      	adds	r7, #16
 8005e54:	46bd      	mov	sp, r7
 8005e56:	bd80      	pop	{r7, pc}

08005e58 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005e58:	b580      	push	{r7, lr}
 8005e5a:	b084      	sub	sp, #16
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]
 8005e60:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005e62:	2300      	movs	r3, #0
 8005e64:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8005e66:	683b      	ldr	r3, [r7, #0]
 8005e68:	885b      	ldrh	r3, [r3, #2]
 8005e6a:	b2da      	uxtb	r2, r3
 8005e6c:	4b4e      	ldr	r3, [pc, #312]	; (8005fa8 <USBD_SetConfig+0x150>)
 8005e6e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8005e70:	4b4d      	ldr	r3, [pc, #308]	; (8005fa8 <USBD_SetConfig+0x150>)
 8005e72:	781b      	ldrb	r3, [r3, #0]
 8005e74:	2b01      	cmp	r3, #1
 8005e76:	d905      	bls.n	8005e84 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8005e78:	6839      	ldr	r1, [r7, #0]
 8005e7a:	6878      	ldr	r0, [r7, #4]
 8005e7c:	f000 f985 	bl	800618a <USBD_CtlError>
    return USBD_FAIL;
 8005e80:	2303      	movs	r3, #3
 8005e82:	e08c      	b.n	8005f9e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e8a:	b2db      	uxtb	r3, r3
 8005e8c:	2b02      	cmp	r3, #2
 8005e8e:	d002      	beq.n	8005e96 <USBD_SetConfig+0x3e>
 8005e90:	2b03      	cmp	r3, #3
 8005e92:	d029      	beq.n	8005ee8 <USBD_SetConfig+0x90>
 8005e94:	e075      	b.n	8005f82 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8005e96:	4b44      	ldr	r3, [pc, #272]	; (8005fa8 <USBD_SetConfig+0x150>)
 8005e98:	781b      	ldrb	r3, [r3, #0]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d020      	beq.n	8005ee0 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8005e9e:	4b42      	ldr	r3, [pc, #264]	; (8005fa8 <USBD_SetConfig+0x150>)
 8005ea0:	781b      	ldrb	r3, [r3, #0]
 8005ea2:	461a      	mov	r2, r3
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8005ea8:	4b3f      	ldr	r3, [pc, #252]	; (8005fa8 <USBD_SetConfig+0x150>)
 8005eaa:	781b      	ldrb	r3, [r3, #0]
 8005eac:	4619      	mov	r1, r3
 8005eae:	6878      	ldr	r0, [r7, #4]
 8005eb0:	f7fe ffe1 	bl	8004e76 <USBD_SetClassConfig>
 8005eb4:	4603      	mov	r3, r0
 8005eb6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8005eb8:	7bfb      	ldrb	r3, [r7, #15]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d008      	beq.n	8005ed0 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8005ebe:	6839      	ldr	r1, [r7, #0]
 8005ec0:	6878      	ldr	r0, [r7, #4]
 8005ec2:	f000 f962 	bl	800618a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	2202      	movs	r2, #2
 8005eca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8005ece:	e065      	b.n	8005f9c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8005ed0:	6878      	ldr	r0, [r7, #4]
 8005ed2:	f000 fa25 	bl	8006320 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	2203      	movs	r2, #3
 8005eda:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8005ede:	e05d      	b.n	8005f9c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8005ee0:	6878      	ldr	r0, [r7, #4]
 8005ee2:	f000 fa1d 	bl	8006320 <USBD_CtlSendStatus>
      break;
 8005ee6:	e059      	b.n	8005f9c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8005ee8:	4b2f      	ldr	r3, [pc, #188]	; (8005fa8 <USBD_SetConfig+0x150>)
 8005eea:	781b      	ldrb	r3, [r3, #0]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d112      	bne.n	8005f16 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2202      	movs	r2, #2
 8005ef4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8005ef8:	4b2b      	ldr	r3, [pc, #172]	; (8005fa8 <USBD_SetConfig+0x150>)
 8005efa:	781b      	ldrb	r3, [r3, #0]
 8005efc:	461a      	mov	r2, r3
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8005f02:	4b29      	ldr	r3, [pc, #164]	; (8005fa8 <USBD_SetConfig+0x150>)
 8005f04:	781b      	ldrb	r3, [r3, #0]
 8005f06:	4619      	mov	r1, r3
 8005f08:	6878      	ldr	r0, [r7, #4]
 8005f0a:	f7fe ffd0 	bl	8004eae <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8005f0e:	6878      	ldr	r0, [r7, #4]
 8005f10:	f000 fa06 	bl	8006320 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8005f14:	e042      	b.n	8005f9c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8005f16:	4b24      	ldr	r3, [pc, #144]	; (8005fa8 <USBD_SetConfig+0x150>)
 8005f18:	781b      	ldrb	r3, [r3, #0]
 8005f1a:	461a      	mov	r2, r3
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	685b      	ldr	r3, [r3, #4]
 8005f20:	429a      	cmp	r2, r3
 8005f22:	d02a      	beq.n	8005f7a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	685b      	ldr	r3, [r3, #4]
 8005f28:	b2db      	uxtb	r3, r3
 8005f2a:	4619      	mov	r1, r3
 8005f2c:	6878      	ldr	r0, [r7, #4]
 8005f2e:	f7fe ffbe 	bl	8004eae <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8005f32:	4b1d      	ldr	r3, [pc, #116]	; (8005fa8 <USBD_SetConfig+0x150>)
 8005f34:	781b      	ldrb	r3, [r3, #0]
 8005f36:	461a      	mov	r2, r3
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8005f3c:	4b1a      	ldr	r3, [pc, #104]	; (8005fa8 <USBD_SetConfig+0x150>)
 8005f3e:	781b      	ldrb	r3, [r3, #0]
 8005f40:	4619      	mov	r1, r3
 8005f42:	6878      	ldr	r0, [r7, #4]
 8005f44:	f7fe ff97 	bl	8004e76 <USBD_SetClassConfig>
 8005f48:	4603      	mov	r3, r0
 8005f4a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8005f4c:	7bfb      	ldrb	r3, [r7, #15]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d00f      	beq.n	8005f72 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8005f52:	6839      	ldr	r1, [r7, #0]
 8005f54:	6878      	ldr	r0, [r7, #4]
 8005f56:	f000 f918 	bl	800618a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	685b      	ldr	r3, [r3, #4]
 8005f5e:	b2db      	uxtb	r3, r3
 8005f60:	4619      	mov	r1, r3
 8005f62:	6878      	ldr	r0, [r7, #4]
 8005f64:	f7fe ffa3 	bl	8004eae <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2202      	movs	r2, #2
 8005f6c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8005f70:	e014      	b.n	8005f9c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8005f72:	6878      	ldr	r0, [r7, #4]
 8005f74:	f000 f9d4 	bl	8006320 <USBD_CtlSendStatus>
      break;
 8005f78:	e010      	b.n	8005f9c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8005f7a:	6878      	ldr	r0, [r7, #4]
 8005f7c:	f000 f9d0 	bl	8006320 <USBD_CtlSendStatus>
      break;
 8005f80:	e00c      	b.n	8005f9c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8005f82:	6839      	ldr	r1, [r7, #0]
 8005f84:	6878      	ldr	r0, [r7, #4]
 8005f86:	f000 f900 	bl	800618a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8005f8a:	4b07      	ldr	r3, [pc, #28]	; (8005fa8 <USBD_SetConfig+0x150>)
 8005f8c:	781b      	ldrb	r3, [r3, #0]
 8005f8e:	4619      	mov	r1, r3
 8005f90:	6878      	ldr	r0, [r7, #4]
 8005f92:	f7fe ff8c 	bl	8004eae <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8005f96:	2303      	movs	r3, #3
 8005f98:	73fb      	strb	r3, [r7, #15]
      break;
 8005f9a:	bf00      	nop
  }

  return ret;
 8005f9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	3710      	adds	r7, #16
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	bd80      	pop	{r7, pc}
 8005fa6:	bf00      	nop
 8005fa8:	20000578 	.word	0x20000578

08005fac <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005fac:	b580      	push	{r7, lr}
 8005fae:	b082      	sub	sp, #8
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]
 8005fb4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8005fb6:	683b      	ldr	r3, [r7, #0]
 8005fb8:	88db      	ldrh	r3, [r3, #6]
 8005fba:	2b01      	cmp	r3, #1
 8005fbc:	d004      	beq.n	8005fc8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8005fbe:	6839      	ldr	r1, [r7, #0]
 8005fc0:	6878      	ldr	r0, [r7, #4]
 8005fc2:	f000 f8e2 	bl	800618a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8005fc6:	e023      	b.n	8006010 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005fce:	b2db      	uxtb	r3, r3
 8005fd0:	2b02      	cmp	r3, #2
 8005fd2:	dc02      	bgt.n	8005fda <USBD_GetConfig+0x2e>
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	dc03      	bgt.n	8005fe0 <USBD_GetConfig+0x34>
 8005fd8:	e015      	b.n	8006006 <USBD_GetConfig+0x5a>
 8005fda:	2b03      	cmp	r3, #3
 8005fdc:	d00b      	beq.n	8005ff6 <USBD_GetConfig+0x4a>
 8005fde:	e012      	b.n	8006006 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	3308      	adds	r3, #8
 8005fea:	2201      	movs	r2, #1
 8005fec:	4619      	mov	r1, r3
 8005fee:	6878      	ldr	r0, [r7, #4]
 8005ff0:	f000 f93c 	bl	800626c <USBD_CtlSendData>
        break;
 8005ff4:	e00c      	b.n	8006010 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	3304      	adds	r3, #4
 8005ffa:	2201      	movs	r2, #1
 8005ffc:	4619      	mov	r1, r3
 8005ffe:	6878      	ldr	r0, [r7, #4]
 8006000:	f000 f934 	bl	800626c <USBD_CtlSendData>
        break;
 8006004:	e004      	b.n	8006010 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8006006:	6839      	ldr	r1, [r7, #0]
 8006008:	6878      	ldr	r0, [r7, #4]
 800600a:	f000 f8be 	bl	800618a <USBD_CtlError>
        break;
 800600e:	bf00      	nop
}
 8006010:	bf00      	nop
 8006012:	3708      	adds	r7, #8
 8006014:	46bd      	mov	sp, r7
 8006016:	bd80      	pop	{r7, pc}

08006018 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006018:	b580      	push	{r7, lr}
 800601a:	b082      	sub	sp, #8
 800601c:	af00      	add	r7, sp, #0
 800601e:	6078      	str	r0, [r7, #4]
 8006020:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006028:	b2db      	uxtb	r3, r3
 800602a:	3b01      	subs	r3, #1
 800602c:	2b02      	cmp	r3, #2
 800602e:	d81e      	bhi.n	800606e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006030:	683b      	ldr	r3, [r7, #0]
 8006032:	88db      	ldrh	r3, [r3, #6]
 8006034:	2b02      	cmp	r3, #2
 8006036:	d004      	beq.n	8006042 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8006038:	6839      	ldr	r1, [r7, #0]
 800603a:	6878      	ldr	r0, [r7, #4]
 800603c:	f000 f8a5 	bl	800618a <USBD_CtlError>
        break;
 8006040:	e01a      	b.n	8006078 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	2201      	movs	r2, #1
 8006046:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800604e:	2b00      	cmp	r3, #0
 8006050:	d005      	beq.n	800605e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	68db      	ldr	r3, [r3, #12]
 8006056:	f043 0202 	orr.w	r2, r3, #2
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	330c      	adds	r3, #12
 8006062:	2202      	movs	r2, #2
 8006064:	4619      	mov	r1, r3
 8006066:	6878      	ldr	r0, [r7, #4]
 8006068:	f000 f900 	bl	800626c <USBD_CtlSendData>
      break;
 800606c:	e004      	b.n	8006078 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800606e:	6839      	ldr	r1, [r7, #0]
 8006070:	6878      	ldr	r0, [r7, #4]
 8006072:	f000 f88a 	bl	800618a <USBD_CtlError>
      break;
 8006076:	bf00      	nop
  }
}
 8006078:	bf00      	nop
 800607a:	3708      	adds	r7, #8
 800607c:	46bd      	mov	sp, r7
 800607e:	bd80      	pop	{r7, pc}

08006080 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006080:	b580      	push	{r7, lr}
 8006082:	b082      	sub	sp, #8
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
 8006088:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	885b      	ldrh	r3, [r3, #2]
 800608e:	2b01      	cmp	r3, #1
 8006090:	d107      	bne.n	80060a2 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	2201      	movs	r2, #1
 8006096:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800609a:	6878      	ldr	r0, [r7, #4]
 800609c:	f000 f940 	bl	8006320 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80060a0:	e013      	b.n	80060ca <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80060a2:	683b      	ldr	r3, [r7, #0]
 80060a4:	885b      	ldrh	r3, [r3, #2]
 80060a6:	2b02      	cmp	r3, #2
 80060a8:	d10b      	bne.n	80060c2 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 80060aa:	683b      	ldr	r3, [r7, #0]
 80060ac:	889b      	ldrh	r3, [r3, #4]
 80060ae:	0a1b      	lsrs	r3, r3, #8
 80060b0:	b29b      	uxth	r3, r3
 80060b2:	b2da      	uxtb	r2, r3
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80060ba:	6878      	ldr	r0, [r7, #4]
 80060bc:	f000 f930 	bl	8006320 <USBD_CtlSendStatus>
}
 80060c0:	e003      	b.n	80060ca <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80060c2:	6839      	ldr	r1, [r7, #0]
 80060c4:	6878      	ldr	r0, [r7, #4]
 80060c6:	f000 f860 	bl	800618a <USBD_CtlError>
}
 80060ca:	bf00      	nop
 80060cc:	3708      	adds	r7, #8
 80060ce:	46bd      	mov	sp, r7
 80060d0:	bd80      	pop	{r7, pc}

080060d2 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80060d2:	b580      	push	{r7, lr}
 80060d4:	b082      	sub	sp, #8
 80060d6:	af00      	add	r7, sp, #0
 80060d8:	6078      	str	r0, [r7, #4]
 80060da:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80060e2:	b2db      	uxtb	r3, r3
 80060e4:	3b01      	subs	r3, #1
 80060e6:	2b02      	cmp	r3, #2
 80060e8:	d80b      	bhi.n	8006102 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80060ea:	683b      	ldr	r3, [r7, #0]
 80060ec:	885b      	ldrh	r3, [r3, #2]
 80060ee:	2b01      	cmp	r3, #1
 80060f0:	d10c      	bne.n	800610c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	2200      	movs	r2, #0
 80060f6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80060fa:	6878      	ldr	r0, [r7, #4]
 80060fc:	f000 f910 	bl	8006320 <USBD_CtlSendStatus>
      }
      break;
 8006100:	e004      	b.n	800610c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8006102:	6839      	ldr	r1, [r7, #0]
 8006104:	6878      	ldr	r0, [r7, #4]
 8006106:	f000 f840 	bl	800618a <USBD_CtlError>
      break;
 800610a:	e000      	b.n	800610e <USBD_ClrFeature+0x3c>
      break;
 800610c:	bf00      	nop
  }
}
 800610e:	bf00      	nop
 8006110:	3708      	adds	r7, #8
 8006112:	46bd      	mov	sp, r7
 8006114:	bd80      	pop	{r7, pc}

08006116 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006116:	b580      	push	{r7, lr}
 8006118:	b084      	sub	sp, #16
 800611a:	af00      	add	r7, sp, #0
 800611c:	6078      	str	r0, [r7, #4]
 800611e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8006120:	683b      	ldr	r3, [r7, #0]
 8006122:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	781a      	ldrb	r2, [r3, #0]
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	3301      	adds	r3, #1
 8006130:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	781a      	ldrb	r2, [r3, #0]
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	3301      	adds	r3, #1
 800613e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8006140:	68f8      	ldr	r0, [r7, #12]
 8006142:	f7ff fa41 	bl	80055c8 <SWAPBYTE>
 8006146:	4603      	mov	r3, r0
 8006148:	461a      	mov	r2, r3
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	3301      	adds	r3, #1
 8006152:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	3301      	adds	r3, #1
 8006158:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800615a:	68f8      	ldr	r0, [r7, #12]
 800615c:	f7ff fa34 	bl	80055c8 <SWAPBYTE>
 8006160:	4603      	mov	r3, r0
 8006162:	461a      	mov	r2, r3
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	3301      	adds	r3, #1
 800616c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	3301      	adds	r3, #1
 8006172:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8006174:	68f8      	ldr	r0, [r7, #12]
 8006176:	f7ff fa27 	bl	80055c8 <SWAPBYTE>
 800617a:	4603      	mov	r3, r0
 800617c:	461a      	mov	r2, r3
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	80da      	strh	r2, [r3, #6]
}
 8006182:	bf00      	nop
 8006184:	3710      	adds	r7, #16
 8006186:	46bd      	mov	sp, r7
 8006188:	bd80      	pop	{r7, pc}

0800618a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800618a:	b580      	push	{r7, lr}
 800618c:	b082      	sub	sp, #8
 800618e:	af00      	add	r7, sp, #0
 8006190:	6078      	str	r0, [r7, #4]
 8006192:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006194:	2180      	movs	r1, #128	; 0x80
 8006196:	6878      	ldr	r0, [r7, #4]
 8006198:	f000 fce8 	bl	8006b6c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800619c:	2100      	movs	r1, #0
 800619e:	6878      	ldr	r0, [r7, #4]
 80061a0:	f000 fce4 	bl	8006b6c <USBD_LL_StallEP>
}
 80061a4:	bf00      	nop
 80061a6:	3708      	adds	r7, #8
 80061a8:	46bd      	mov	sp, r7
 80061aa:	bd80      	pop	{r7, pc}

080061ac <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80061ac:	b580      	push	{r7, lr}
 80061ae:	b086      	sub	sp, #24
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	60f8      	str	r0, [r7, #12]
 80061b4:	60b9      	str	r1, [r7, #8]
 80061b6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80061b8:	2300      	movs	r3, #0
 80061ba:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d036      	beq.n	8006230 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80061c6:	6938      	ldr	r0, [r7, #16]
 80061c8:	f000 f836 	bl	8006238 <USBD_GetLen>
 80061cc:	4603      	mov	r3, r0
 80061ce:	3301      	adds	r3, #1
 80061d0:	b29b      	uxth	r3, r3
 80061d2:	005b      	lsls	r3, r3, #1
 80061d4:	b29a      	uxth	r2, r3
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80061da:	7dfb      	ldrb	r3, [r7, #23]
 80061dc:	68ba      	ldr	r2, [r7, #8]
 80061de:	4413      	add	r3, r2
 80061e0:	687a      	ldr	r2, [r7, #4]
 80061e2:	7812      	ldrb	r2, [r2, #0]
 80061e4:	701a      	strb	r2, [r3, #0]
  idx++;
 80061e6:	7dfb      	ldrb	r3, [r7, #23]
 80061e8:	3301      	adds	r3, #1
 80061ea:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80061ec:	7dfb      	ldrb	r3, [r7, #23]
 80061ee:	68ba      	ldr	r2, [r7, #8]
 80061f0:	4413      	add	r3, r2
 80061f2:	2203      	movs	r2, #3
 80061f4:	701a      	strb	r2, [r3, #0]
  idx++;
 80061f6:	7dfb      	ldrb	r3, [r7, #23]
 80061f8:	3301      	adds	r3, #1
 80061fa:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80061fc:	e013      	b.n	8006226 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80061fe:	7dfb      	ldrb	r3, [r7, #23]
 8006200:	68ba      	ldr	r2, [r7, #8]
 8006202:	4413      	add	r3, r2
 8006204:	693a      	ldr	r2, [r7, #16]
 8006206:	7812      	ldrb	r2, [r2, #0]
 8006208:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800620a:	693b      	ldr	r3, [r7, #16]
 800620c:	3301      	adds	r3, #1
 800620e:	613b      	str	r3, [r7, #16]
    idx++;
 8006210:	7dfb      	ldrb	r3, [r7, #23]
 8006212:	3301      	adds	r3, #1
 8006214:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8006216:	7dfb      	ldrb	r3, [r7, #23]
 8006218:	68ba      	ldr	r2, [r7, #8]
 800621a:	4413      	add	r3, r2
 800621c:	2200      	movs	r2, #0
 800621e:	701a      	strb	r2, [r3, #0]
    idx++;
 8006220:	7dfb      	ldrb	r3, [r7, #23]
 8006222:	3301      	adds	r3, #1
 8006224:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8006226:	693b      	ldr	r3, [r7, #16]
 8006228:	781b      	ldrb	r3, [r3, #0]
 800622a:	2b00      	cmp	r3, #0
 800622c:	d1e7      	bne.n	80061fe <USBD_GetString+0x52>
 800622e:	e000      	b.n	8006232 <USBD_GetString+0x86>
    return;
 8006230:	bf00      	nop
  }
}
 8006232:	3718      	adds	r7, #24
 8006234:	46bd      	mov	sp, r7
 8006236:	bd80      	pop	{r7, pc}

08006238 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006238:	b480      	push	{r7}
 800623a:	b085      	sub	sp, #20
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006240:	2300      	movs	r3, #0
 8006242:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8006248:	e005      	b.n	8006256 <USBD_GetLen+0x1e>
  {
    len++;
 800624a:	7bfb      	ldrb	r3, [r7, #15]
 800624c:	3301      	adds	r3, #1
 800624e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8006250:	68bb      	ldr	r3, [r7, #8]
 8006252:	3301      	adds	r3, #1
 8006254:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8006256:	68bb      	ldr	r3, [r7, #8]
 8006258:	781b      	ldrb	r3, [r3, #0]
 800625a:	2b00      	cmp	r3, #0
 800625c:	d1f5      	bne.n	800624a <USBD_GetLen+0x12>
  }

  return len;
 800625e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006260:	4618      	mov	r0, r3
 8006262:	3714      	adds	r7, #20
 8006264:	46bd      	mov	sp, r7
 8006266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626a:	4770      	bx	lr

0800626c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800626c:	b580      	push	{r7, lr}
 800626e:	b084      	sub	sp, #16
 8006270:	af00      	add	r7, sp, #0
 8006272:	60f8      	str	r0, [r7, #12]
 8006274:	60b9      	str	r1, [r7, #8]
 8006276:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	2202      	movs	r2, #2
 800627c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	687a      	ldr	r2, [r7, #4]
 8006284:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	687a      	ldr	r2, [r7, #4]
 800628a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	68ba      	ldr	r2, [r7, #8]
 8006290:	2100      	movs	r1, #0
 8006292:	68f8      	ldr	r0, [r7, #12]
 8006294:	f000 fcf3 	bl	8006c7e <USBD_LL_Transmit>

  return USBD_OK;
 8006298:	2300      	movs	r3, #0
}
 800629a:	4618      	mov	r0, r3
 800629c:	3710      	adds	r7, #16
 800629e:	46bd      	mov	sp, r7
 80062a0:	bd80      	pop	{r7, pc}

080062a2 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80062a2:	b580      	push	{r7, lr}
 80062a4:	b084      	sub	sp, #16
 80062a6:	af00      	add	r7, sp, #0
 80062a8:	60f8      	str	r0, [r7, #12]
 80062aa:	60b9      	str	r1, [r7, #8]
 80062ac:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	68ba      	ldr	r2, [r7, #8]
 80062b2:	2100      	movs	r1, #0
 80062b4:	68f8      	ldr	r0, [r7, #12]
 80062b6:	f000 fce2 	bl	8006c7e <USBD_LL_Transmit>

  return USBD_OK;
 80062ba:	2300      	movs	r3, #0
}
 80062bc:	4618      	mov	r0, r3
 80062be:	3710      	adds	r7, #16
 80062c0:	46bd      	mov	sp, r7
 80062c2:	bd80      	pop	{r7, pc}

080062c4 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80062c4:	b580      	push	{r7, lr}
 80062c6:	b084      	sub	sp, #16
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	60f8      	str	r0, [r7, #12]
 80062cc:	60b9      	str	r1, [r7, #8]
 80062ce:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	2203      	movs	r2, #3
 80062d4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	687a      	ldr	r2, [r7, #4]
 80062dc:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	687a      	ldr	r2, [r7, #4]
 80062e4:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	68ba      	ldr	r2, [r7, #8]
 80062ec:	2100      	movs	r1, #0
 80062ee:	68f8      	ldr	r0, [r7, #12]
 80062f0:	f000 fce6 	bl	8006cc0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80062f4:	2300      	movs	r3, #0
}
 80062f6:	4618      	mov	r0, r3
 80062f8:	3710      	adds	r7, #16
 80062fa:	46bd      	mov	sp, r7
 80062fc:	bd80      	pop	{r7, pc}

080062fe <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80062fe:	b580      	push	{r7, lr}
 8006300:	b084      	sub	sp, #16
 8006302:	af00      	add	r7, sp, #0
 8006304:	60f8      	str	r0, [r7, #12]
 8006306:	60b9      	str	r1, [r7, #8]
 8006308:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	68ba      	ldr	r2, [r7, #8]
 800630e:	2100      	movs	r1, #0
 8006310:	68f8      	ldr	r0, [r7, #12]
 8006312:	f000 fcd5 	bl	8006cc0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006316:	2300      	movs	r3, #0
}
 8006318:	4618      	mov	r0, r3
 800631a:	3710      	adds	r7, #16
 800631c:	46bd      	mov	sp, r7
 800631e:	bd80      	pop	{r7, pc}

08006320 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006320:	b580      	push	{r7, lr}
 8006322:	b082      	sub	sp, #8
 8006324:	af00      	add	r7, sp, #0
 8006326:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2204      	movs	r2, #4
 800632c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006330:	2300      	movs	r3, #0
 8006332:	2200      	movs	r2, #0
 8006334:	2100      	movs	r1, #0
 8006336:	6878      	ldr	r0, [r7, #4]
 8006338:	f000 fca1 	bl	8006c7e <USBD_LL_Transmit>

  return USBD_OK;
 800633c:	2300      	movs	r3, #0
}
 800633e:	4618      	mov	r0, r3
 8006340:	3708      	adds	r7, #8
 8006342:	46bd      	mov	sp, r7
 8006344:	bd80      	pop	{r7, pc}

08006346 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006346:	b580      	push	{r7, lr}
 8006348:	b082      	sub	sp, #8
 800634a:	af00      	add	r7, sp, #0
 800634c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	2205      	movs	r2, #5
 8006352:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006356:	2300      	movs	r3, #0
 8006358:	2200      	movs	r2, #0
 800635a:	2100      	movs	r1, #0
 800635c:	6878      	ldr	r0, [r7, #4]
 800635e:	f000 fcaf 	bl	8006cc0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006362:	2300      	movs	r3, #0
}
 8006364:	4618      	mov	r0, r3
 8006366:	3708      	adds	r7, #8
 8006368:	46bd      	mov	sp, r7
 800636a:	bd80      	pop	{r7, pc}

0800636c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800636c:	b580      	push	{r7, lr}
 800636e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006370:	2200      	movs	r2, #0
 8006372:	4912      	ldr	r1, [pc, #72]	; (80063bc <MX_USB_DEVICE_Init+0x50>)
 8006374:	4812      	ldr	r0, [pc, #72]	; (80063c0 <MX_USB_DEVICE_Init+0x54>)
 8006376:	f7fe fd01 	bl	8004d7c <USBD_Init>
 800637a:	4603      	mov	r3, r0
 800637c:	2b00      	cmp	r3, #0
 800637e:	d001      	beq.n	8006384 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006380:	f7fa f9aa 	bl	80006d8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8006384:	490f      	ldr	r1, [pc, #60]	; (80063c4 <MX_USB_DEVICE_Init+0x58>)
 8006386:	480e      	ldr	r0, [pc, #56]	; (80063c0 <MX_USB_DEVICE_Init+0x54>)
 8006388:	f7fe fd28 	bl	8004ddc <USBD_RegisterClass>
 800638c:	4603      	mov	r3, r0
 800638e:	2b00      	cmp	r3, #0
 8006390:	d001      	beq.n	8006396 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8006392:	f7fa f9a1 	bl	80006d8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8006396:	490c      	ldr	r1, [pc, #48]	; (80063c8 <MX_USB_DEVICE_Init+0x5c>)
 8006398:	4809      	ldr	r0, [pc, #36]	; (80063c0 <MX_USB_DEVICE_Init+0x54>)
 800639a:	f7fe fc1f 	bl	8004bdc <USBD_CDC_RegisterInterface>
 800639e:	4603      	mov	r3, r0
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d001      	beq.n	80063a8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80063a4:	f7fa f998 	bl	80006d8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80063a8:	4805      	ldr	r0, [pc, #20]	; (80063c0 <MX_USB_DEVICE_Init+0x54>)
 80063aa:	f7fe fd4d 	bl	8004e48 <USBD_Start>
 80063ae:	4603      	mov	r3, r0
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d001      	beq.n	80063b8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80063b4:	f7fa f990 	bl	80006d8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80063b8:	bf00      	nop
 80063ba:	bd80      	pop	{r7, pc}
 80063bc:	200000ac 	.word	0x200000ac
 80063c0:	2000057c 	.word	0x2000057c
 80063c4:	20000018 	.word	0x20000018
 80063c8:	20000098 	.word	0x20000098

080063cc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80063cc:	b580      	push	{r7, lr}
 80063ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80063d0:	2200      	movs	r2, #0
 80063d2:	4905      	ldr	r1, [pc, #20]	; (80063e8 <CDC_Init_FS+0x1c>)
 80063d4:	4805      	ldr	r0, [pc, #20]	; (80063ec <CDC_Init_FS+0x20>)
 80063d6:	f7fe fc1b 	bl	8004c10 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80063da:	4905      	ldr	r1, [pc, #20]	; (80063f0 <CDC_Init_FS+0x24>)
 80063dc:	4803      	ldr	r0, [pc, #12]	; (80063ec <CDC_Init_FS+0x20>)
 80063de:	f7fe fc39 	bl	8004c54 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80063e2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80063e4:	4618      	mov	r0, r3
 80063e6:	bd80      	pop	{r7, pc}
 80063e8:	20001058 	.word	0x20001058
 80063ec:	2000057c 	.word	0x2000057c
 80063f0:	20000858 	.word	0x20000858

080063f4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80063f4:	b480      	push	{r7}
 80063f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80063f8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80063fa:	4618      	mov	r0, r3
 80063fc:	46bd      	mov	sp, r7
 80063fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006402:	4770      	bx	lr

08006404 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8006404:	b480      	push	{r7}
 8006406:	b083      	sub	sp, #12
 8006408:	af00      	add	r7, sp, #0
 800640a:	4603      	mov	r3, r0
 800640c:	6039      	str	r1, [r7, #0]
 800640e:	71fb      	strb	r3, [r7, #7]
 8006410:	4613      	mov	r3, r2
 8006412:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8006414:	79fb      	ldrb	r3, [r7, #7]
 8006416:	2b23      	cmp	r3, #35	; 0x23
 8006418:	d84a      	bhi.n	80064b0 <CDC_Control_FS+0xac>
 800641a:	a201      	add	r2, pc, #4	; (adr r2, 8006420 <CDC_Control_FS+0x1c>)
 800641c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006420:	080064b1 	.word	0x080064b1
 8006424:	080064b1 	.word	0x080064b1
 8006428:	080064b1 	.word	0x080064b1
 800642c:	080064b1 	.word	0x080064b1
 8006430:	080064b1 	.word	0x080064b1
 8006434:	080064b1 	.word	0x080064b1
 8006438:	080064b1 	.word	0x080064b1
 800643c:	080064b1 	.word	0x080064b1
 8006440:	080064b1 	.word	0x080064b1
 8006444:	080064b1 	.word	0x080064b1
 8006448:	080064b1 	.word	0x080064b1
 800644c:	080064b1 	.word	0x080064b1
 8006450:	080064b1 	.word	0x080064b1
 8006454:	080064b1 	.word	0x080064b1
 8006458:	080064b1 	.word	0x080064b1
 800645c:	080064b1 	.word	0x080064b1
 8006460:	080064b1 	.word	0x080064b1
 8006464:	080064b1 	.word	0x080064b1
 8006468:	080064b1 	.word	0x080064b1
 800646c:	080064b1 	.word	0x080064b1
 8006470:	080064b1 	.word	0x080064b1
 8006474:	080064b1 	.word	0x080064b1
 8006478:	080064b1 	.word	0x080064b1
 800647c:	080064b1 	.word	0x080064b1
 8006480:	080064b1 	.word	0x080064b1
 8006484:	080064b1 	.word	0x080064b1
 8006488:	080064b1 	.word	0x080064b1
 800648c:	080064b1 	.word	0x080064b1
 8006490:	080064b1 	.word	0x080064b1
 8006494:	080064b1 	.word	0x080064b1
 8006498:	080064b1 	.word	0x080064b1
 800649c:	080064b1 	.word	0x080064b1
 80064a0:	080064b1 	.word	0x080064b1
 80064a4:	080064b1 	.word	0x080064b1
 80064a8:	080064b1 	.word	0x080064b1
 80064ac:	080064b1 	.word	0x080064b1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80064b0:	bf00      	nop
  }

  return (USBD_OK);
 80064b2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80064b4:	4618      	mov	r0, r3
 80064b6:	370c      	adds	r7, #12
 80064b8:	46bd      	mov	sp, r7
 80064ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064be:	4770      	bx	lr

080064c0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80064c0:	b580      	push	{r7, lr}
 80064c2:	b084      	sub	sp, #16
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	6078      	str	r0, [r7, #4]
 80064c8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80064ca:	6879      	ldr	r1, [r7, #4]
 80064cc:	480e      	ldr	r0, [pc, #56]	; (8006508 <CDC_Receive_FS+0x48>)
 80064ce:	f7fe fbc1 	bl	8004c54 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80064d2:	480d      	ldr	r0, [pc, #52]	; (8006508 <CDC_Receive_FS+0x48>)
 80064d4:	f7fe fc1c 	bl	8004d10 <USBD_CDC_ReceivePacket>

  for(int i=0; i<*Len; i++)
 80064d8:	2300      	movs	r3, #0
 80064da:	60fb      	str	r3, [r7, #12]
 80064dc:	e009      	b.n	80064f2 <CDC_Receive_FS+0x32>
  {
  	cdcDataIn(Buf[i]);
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	687a      	ldr	r2, [r7, #4]
 80064e2:	4413      	add	r3, r2
 80064e4:	781b      	ldrb	r3, [r3, #0]
 80064e6:	4618      	mov	r0, r3
 80064e8:	f7fa fa0e 	bl	8000908 <cdcDataIn>
  for(int i=0; i<*Len; i++)
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	3301      	adds	r3, #1
 80064f0:	60fb      	str	r3, [r7, #12]
 80064f2:	683b      	ldr	r3, [r7, #0]
 80064f4:	681a      	ldr	r2, [r3, #0]
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	429a      	cmp	r2, r3
 80064fa:	d8f0      	bhi.n	80064de <CDC_Receive_FS+0x1e>
  }

  return (USBD_OK);
 80064fc:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80064fe:	4618      	mov	r0, r3
 8006500:	3710      	adds	r7, #16
 8006502:	46bd      	mov	sp, r7
 8006504:	bd80      	pop	{r7, pc}
 8006506:	bf00      	nop
 8006508:	2000057c 	.word	0x2000057c

0800650c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800650c:	b580      	push	{r7, lr}
 800650e:	b084      	sub	sp, #16
 8006510:	af00      	add	r7, sp, #0
 8006512:	6078      	str	r0, [r7, #4]
 8006514:	460b      	mov	r3, r1
 8006516:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8006518:	2300      	movs	r3, #0
 800651a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800651c:	4b0d      	ldr	r3, [pc, #52]	; (8006554 <CDC_Transmit_FS+0x48>)
 800651e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006522:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8006524:	68bb      	ldr	r3, [r7, #8]
 8006526:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800652a:	2b00      	cmp	r3, #0
 800652c:	d001      	beq.n	8006532 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800652e:	2301      	movs	r3, #1
 8006530:	e00b      	b.n	800654a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8006532:	887b      	ldrh	r3, [r7, #2]
 8006534:	461a      	mov	r2, r3
 8006536:	6879      	ldr	r1, [r7, #4]
 8006538:	4806      	ldr	r0, [pc, #24]	; (8006554 <CDC_Transmit_FS+0x48>)
 800653a:	f7fe fb69 	bl	8004c10 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800653e:	4805      	ldr	r0, [pc, #20]	; (8006554 <CDC_Transmit_FS+0x48>)
 8006540:	f7fe fba6 	bl	8004c90 <USBD_CDC_TransmitPacket>
 8006544:	4603      	mov	r3, r0
 8006546:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8006548:	7bfb      	ldrb	r3, [r7, #15]
}
 800654a:	4618      	mov	r0, r3
 800654c:	3710      	adds	r7, #16
 800654e:	46bd      	mov	sp, r7
 8006550:	bd80      	pop	{r7, pc}
 8006552:	bf00      	nop
 8006554:	2000057c 	.word	0x2000057c

08006558 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8006558:	b480      	push	{r7}
 800655a:	b087      	sub	sp, #28
 800655c:	af00      	add	r7, sp, #0
 800655e:	60f8      	str	r0, [r7, #12]
 8006560:	60b9      	str	r1, [r7, #8]
 8006562:	4613      	mov	r3, r2
 8006564:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8006566:	2300      	movs	r3, #0
 8006568:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800656a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800656e:	4618      	mov	r0, r3
 8006570:	371c      	adds	r7, #28
 8006572:	46bd      	mov	sp, r7
 8006574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006578:	4770      	bx	lr
	...

0800657c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800657c:	b480      	push	{r7}
 800657e:	b083      	sub	sp, #12
 8006580:	af00      	add	r7, sp, #0
 8006582:	4603      	mov	r3, r0
 8006584:	6039      	str	r1, [r7, #0]
 8006586:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006588:	683b      	ldr	r3, [r7, #0]
 800658a:	2212      	movs	r2, #18
 800658c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800658e:	4b03      	ldr	r3, [pc, #12]	; (800659c <USBD_FS_DeviceDescriptor+0x20>)
}
 8006590:	4618      	mov	r0, r3
 8006592:	370c      	adds	r7, #12
 8006594:	46bd      	mov	sp, r7
 8006596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659a:	4770      	bx	lr
 800659c:	200000c8 	.word	0x200000c8

080065a0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80065a0:	b480      	push	{r7}
 80065a2:	b083      	sub	sp, #12
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	4603      	mov	r3, r0
 80065a8:	6039      	str	r1, [r7, #0]
 80065aa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80065ac:	683b      	ldr	r3, [r7, #0]
 80065ae:	2204      	movs	r2, #4
 80065b0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80065b2:	4b03      	ldr	r3, [pc, #12]	; (80065c0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80065b4:	4618      	mov	r0, r3
 80065b6:	370c      	adds	r7, #12
 80065b8:	46bd      	mov	sp, r7
 80065ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065be:	4770      	bx	lr
 80065c0:	200000dc 	.word	0x200000dc

080065c4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80065c4:	b580      	push	{r7, lr}
 80065c6:	b082      	sub	sp, #8
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	4603      	mov	r3, r0
 80065cc:	6039      	str	r1, [r7, #0]
 80065ce:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80065d0:	79fb      	ldrb	r3, [r7, #7]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d105      	bne.n	80065e2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80065d6:	683a      	ldr	r2, [r7, #0]
 80065d8:	4907      	ldr	r1, [pc, #28]	; (80065f8 <USBD_FS_ProductStrDescriptor+0x34>)
 80065da:	4808      	ldr	r0, [pc, #32]	; (80065fc <USBD_FS_ProductStrDescriptor+0x38>)
 80065dc:	f7ff fde6 	bl	80061ac <USBD_GetString>
 80065e0:	e004      	b.n	80065ec <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80065e2:	683a      	ldr	r2, [r7, #0]
 80065e4:	4904      	ldr	r1, [pc, #16]	; (80065f8 <USBD_FS_ProductStrDescriptor+0x34>)
 80065e6:	4805      	ldr	r0, [pc, #20]	; (80065fc <USBD_FS_ProductStrDescriptor+0x38>)
 80065e8:	f7ff fde0 	bl	80061ac <USBD_GetString>
  }
  return USBD_StrDesc;
 80065ec:	4b02      	ldr	r3, [pc, #8]	; (80065f8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80065ee:	4618      	mov	r0, r3
 80065f0:	3708      	adds	r7, #8
 80065f2:	46bd      	mov	sp, r7
 80065f4:	bd80      	pop	{r7, pc}
 80065f6:	bf00      	nop
 80065f8:	20001858 	.word	0x20001858
 80065fc:	08007758 	.word	0x08007758

08006600 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006600:	b580      	push	{r7, lr}
 8006602:	b082      	sub	sp, #8
 8006604:	af00      	add	r7, sp, #0
 8006606:	4603      	mov	r3, r0
 8006608:	6039      	str	r1, [r7, #0]
 800660a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800660c:	683a      	ldr	r2, [r7, #0]
 800660e:	4904      	ldr	r1, [pc, #16]	; (8006620 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8006610:	4804      	ldr	r0, [pc, #16]	; (8006624 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8006612:	f7ff fdcb 	bl	80061ac <USBD_GetString>
  return USBD_StrDesc;
 8006616:	4b02      	ldr	r3, [pc, #8]	; (8006620 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8006618:	4618      	mov	r0, r3
 800661a:	3708      	adds	r7, #8
 800661c:	46bd      	mov	sp, r7
 800661e:	bd80      	pop	{r7, pc}
 8006620:	20001858 	.word	0x20001858
 8006624:	08007770 	.word	0x08007770

08006628 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006628:	b580      	push	{r7, lr}
 800662a:	b082      	sub	sp, #8
 800662c:	af00      	add	r7, sp, #0
 800662e:	4603      	mov	r3, r0
 8006630:	6039      	str	r1, [r7, #0]
 8006632:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8006634:	683b      	ldr	r3, [r7, #0]
 8006636:	221a      	movs	r2, #26
 8006638:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800663a:	f000 f843 	bl	80066c4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800663e:	4b02      	ldr	r3, [pc, #8]	; (8006648 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8006640:	4618      	mov	r0, r3
 8006642:	3708      	adds	r7, #8
 8006644:	46bd      	mov	sp, r7
 8006646:	bd80      	pop	{r7, pc}
 8006648:	200000e0 	.word	0x200000e0

0800664c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800664c:	b580      	push	{r7, lr}
 800664e:	b082      	sub	sp, #8
 8006650:	af00      	add	r7, sp, #0
 8006652:	4603      	mov	r3, r0
 8006654:	6039      	str	r1, [r7, #0]
 8006656:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8006658:	79fb      	ldrb	r3, [r7, #7]
 800665a:	2b00      	cmp	r3, #0
 800665c:	d105      	bne.n	800666a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800665e:	683a      	ldr	r2, [r7, #0]
 8006660:	4907      	ldr	r1, [pc, #28]	; (8006680 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006662:	4808      	ldr	r0, [pc, #32]	; (8006684 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006664:	f7ff fda2 	bl	80061ac <USBD_GetString>
 8006668:	e004      	b.n	8006674 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800666a:	683a      	ldr	r2, [r7, #0]
 800666c:	4904      	ldr	r1, [pc, #16]	; (8006680 <USBD_FS_ConfigStrDescriptor+0x34>)
 800666e:	4805      	ldr	r0, [pc, #20]	; (8006684 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006670:	f7ff fd9c 	bl	80061ac <USBD_GetString>
  }
  return USBD_StrDesc;
 8006674:	4b02      	ldr	r3, [pc, #8]	; (8006680 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8006676:	4618      	mov	r0, r3
 8006678:	3708      	adds	r7, #8
 800667a:	46bd      	mov	sp, r7
 800667c:	bd80      	pop	{r7, pc}
 800667e:	bf00      	nop
 8006680:	20001858 	.word	0x20001858
 8006684:	08007784 	.word	0x08007784

08006688 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006688:	b580      	push	{r7, lr}
 800668a:	b082      	sub	sp, #8
 800668c:	af00      	add	r7, sp, #0
 800668e:	4603      	mov	r3, r0
 8006690:	6039      	str	r1, [r7, #0]
 8006692:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006694:	79fb      	ldrb	r3, [r7, #7]
 8006696:	2b00      	cmp	r3, #0
 8006698:	d105      	bne.n	80066a6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800669a:	683a      	ldr	r2, [r7, #0]
 800669c:	4907      	ldr	r1, [pc, #28]	; (80066bc <USBD_FS_InterfaceStrDescriptor+0x34>)
 800669e:	4808      	ldr	r0, [pc, #32]	; (80066c0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80066a0:	f7ff fd84 	bl	80061ac <USBD_GetString>
 80066a4:	e004      	b.n	80066b0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80066a6:	683a      	ldr	r2, [r7, #0]
 80066a8:	4904      	ldr	r1, [pc, #16]	; (80066bc <USBD_FS_InterfaceStrDescriptor+0x34>)
 80066aa:	4805      	ldr	r0, [pc, #20]	; (80066c0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80066ac:	f7ff fd7e 	bl	80061ac <USBD_GetString>
  }
  return USBD_StrDesc;
 80066b0:	4b02      	ldr	r3, [pc, #8]	; (80066bc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80066b2:	4618      	mov	r0, r3
 80066b4:	3708      	adds	r7, #8
 80066b6:	46bd      	mov	sp, r7
 80066b8:	bd80      	pop	{r7, pc}
 80066ba:	bf00      	nop
 80066bc:	20001858 	.word	0x20001858
 80066c0:	08007790 	.word	0x08007790

080066c4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80066c4:	b580      	push	{r7, lr}
 80066c6:	b084      	sub	sp, #16
 80066c8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80066ca:	4b0f      	ldr	r3, [pc, #60]	; (8006708 <Get_SerialNum+0x44>)
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80066d0:	4b0e      	ldr	r3, [pc, #56]	; (800670c <Get_SerialNum+0x48>)
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80066d6:	4b0e      	ldr	r3, [pc, #56]	; (8006710 <Get_SerialNum+0x4c>)
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80066dc:	68fa      	ldr	r2, [r7, #12]
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	4413      	add	r3, r2
 80066e2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d009      	beq.n	80066fe <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80066ea:	2208      	movs	r2, #8
 80066ec:	4909      	ldr	r1, [pc, #36]	; (8006714 <Get_SerialNum+0x50>)
 80066ee:	68f8      	ldr	r0, [r7, #12]
 80066f0:	f000 f814 	bl	800671c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80066f4:	2204      	movs	r2, #4
 80066f6:	4908      	ldr	r1, [pc, #32]	; (8006718 <Get_SerialNum+0x54>)
 80066f8:	68b8      	ldr	r0, [r7, #8]
 80066fa:	f000 f80f 	bl	800671c <IntToUnicode>
  }
}
 80066fe:	bf00      	nop
 8006700:	3710      	adds	r7, #16
 8006702:	46bd      	mov	sp, r7
 8006704:	bd80      	pop	{r7, pc}
 8006706:	bf00      	nop
 8006708:	1fff7a10 	.word	0x1fff7a10
 800670c:	1fff7a14 	.word	0x1fff7a14
 8006710:	1fff7a18 	.word	0x1fff7a18
 8006714:	200000e2 	.word	0x200000e2
 8006718:	200000f2 	.word	0x200000f2

0800671c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800671c:	b480      	push	{r7}
 800671e:	b087      	sub	sp, #28
 8006720:	af00      	add	r7, sp, #0
 8006722:	60f8      	str	r0, [r7, #12]
 8006724:	60b9      	str	r1, [r7, #8]
 8006726:	4613      	mov	r3, r2
 8006728:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800672a:	2300      	movs	r3, #0
 800672c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800672e:	2300      	movs	r3, #0
 8006730:	75fb      	strb	r3, [r7, #23]
 8006732:	e027      	b.n	8006784 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	0f1b      	lsrs	r3, r3, #28
 8006738:	2b09      	cmp	r3, #9
 800673a:	d80b      	bhi.n	8006754 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	0f1b      	lsrs	r3, r3, #28
 8006740:	b2da      	uxtb	r2, r3
 8006742:	7dfb      	ldrb	r3, [r7, #23]
 8006744:	005b      	lsls	r3, r3, #1
 8006746:	4619      	mov	r1, r3
 8006748:	68bb      	ldr	r3, [r7, #8]
 800674a:	440b      	add	r3, r1
 800674c:	3230      	adds	r2, #48	; 0x30
 800674e:	b2d2      	uxtb	r2, r2
 8006750:	701a      	strb	r2, [r3, #0]
 8006752:	e00a      	b.n	800676a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	0f1b      	lsrs	r3, r3, #28
 8006758:	b2da      	uxtb	r2, r3
 800675a:	7dfb      	ldrb	r3, [r7, #23]
 800675c:	005b      	lsls	r3, r3, #1
 800675e:	4619      	mov	r1, r3
 8006760:	68bb      	ldr	r3, [r7, #8]
 8006762:	440b      	add	r3, r1
 8006764:	3237      	adds	r2, #55	; 0x37
 8006766:	b2d2      	uxtb	r2, r2
 8006768:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	011b      	lsls	r3, r3, #4
 800676e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8006770:	7dfb      	ldrb	r3, [r7, #23]
 8006772:	005b      	lsls	r3, r3, #1
 8006774:	3301      	adds	r3, #1
 8006776:	68ba      	ldr	r2, [r7, #8]
 8006778:	4413      	add	r3, r2
 800677a:	2200      	movs	r2, #0
 800677c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800677e:	7dfb      	ldrb	r3, [r7, #23]
 8006780:	3301      	adds	r3, #1
 8006782:	75fb      	strb	r3, [r7, #23]
 8006784:	7dfa      	ldrb	r2, [r7, #23]
 8006786:	79fb      	ldrb	r3, [r7, #7]
 8006788:	429a      	cmp	r2, r3
 800678a:	d3d3      	bcc.n	8006734 <IntToUnicode+0x18>
  }
}
 800678c:	bf00      	nop
 800678e:	bf00      	nop
 8006790:	371c      	adds	r7, #28
 8006792:	46bd      	mov	sp, r7
 8006794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006798:	4770      	bx	lr
	...

0800679c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800679c:	b580      	push	{r7, lr}
 800679e:	b08a      	sub	sp, #40	; 0x28
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80067a4:	f107 0314 	add.w	r3, r7, #20
 80067a8:	2200      	movs	r2, #0
 80067aa:	601a      	str	r2, [r3, #0]
 80067ac:	605a      	str	r2, [r3, #4]
 80067ae:	609a      	str	r2, [r3, #8]
 80067b0:	60da      	str	r2, [r3, #12]
 80067b2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80067bc:	d13a      	bne.n	8006834 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80067be:	2300      	movs	r3, #0
 80067c0:	613b      	str	r3, [r7, #16]
 80067c2:	4b1e      	ldr	r3, [pc, #120]	; (800683c <HAL_PCD_MspInit+0xa0>)
 80067c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067c6:	4a1d      	ldr	r2, [pc, #116]	; (800683c <HAL_PCD_MspInit+0xa0>)
 80067c8:	f043 0301 	orr.w	r3, r3, #1
 80067cc:	6313      	str	r3, [r2, #48]	; 0x30
 80067ce:	4b1b      	ldr	r3, [pc, #108]	; (800683c <HAL_PCD_MspInit+0xa0>)
 80067d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067d2:	f003 0301 	and.w	r3, r3, #1
 80067d6:	613b      	str	r3, [r7, #16]
 80067d8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA8     ------> USB_OTG_FS_SOF
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 80067da:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 80067de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80067e0:	2302      	movs	r3, #2
 80067e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80067e4:	2300      	movs	r3, #0
 80067e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80067e8:	2303      	movs	r3, #3
 80067ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80067ec:	230a      	movs	r3, #10
 80067ee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80067f0:	f107 0314 	add.w	r3, r7, #20
 80067f4:	4619      	mov	r1, r3
 80067f6:	4812      	ldr	r0, [pc, #72]	; (8006840 <HAL_PCD_MspInit+0xa4>)
 80067f8:	f7fa faaa 	bl	8000d50 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80067fc:	4b0f      	ldr	r3, [pc, #60]	; (800683c <HAL_PCD_MspInit+0xa0>)
 80067fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006800:	4a0e      	ldr	r2, [pc, #56]	; (800683c <HAL_PCD_MspInit+0xa0>)
 8006802:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006806:	6353      	str	r3, [r2, #52]	; 0x34
 8006808:	2300      	movs	r3, #0
 800680a:	60fb      	str	r3, [r7, #12]
 800680c:	4b0b      	ldr	r3, [pc, #44]	; (800683c <HAL_PCD_MspInit+0xa0>)
 800680e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006810:	4a0a      	ldr	r2, [pc, #40]	; (800683c <HAL_PCD_MspInit+0xa0>)
 8006812:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006816:	6453      	str	r3, [r2, #68]	; 0x44
 8006818:	4b08      	ldr	r3, [pc, #32]	; (800683c <HAL_PCD_MspInit+0xa0>)
 800681a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800681c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006820:	60fb      	str	r3, [r7, #12]
 8006822:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8006824:	2200      	movs	r2, #0
 8006826:	2100      	movs	r1, #0
 8006828:	2043      	movs	r0, #67	; 0x43
 800682a:	f7fa fa5a 	bl	8000ce2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800682e:	2043      	movs	r0, #67	; 0x43
 8006830:	f7fa fa73 	bl	8000d1a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8006834:	bf00      	nop
 8006836:	3728      	adds	r7, #40	; 0x28
 8006838:	46bd      	mov	sp, r7
 800683a:	bd80      	pop	{r7, pc}
 800683c:	40023800 	.word	0x40023800
 8006840:	40020000 	.word	0x40020000

08006844 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006844:	b580      	push	{r7, lr}
 8006846:	b082      	sub	sp, #8
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	; 0x4e0
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8006858:	4619      	mov	r1, r3
 800685a:	4610      	mov	r0, r2
 800685c:	f7fe fb41 	bl	8004ee2 <USBD_LL_SetupStage>
}
 8006860:	bf00      	nop
 8006862:	3708      	adds	r7, #8
 8006864:	46bd      	mov	sp, r7
 8006866:	bd80      	pop	{r7, pc}

08006868 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006868:	b580      	push	{r7, lr}
 800686a:	b082      	sub	sp, #8
 800686c:	af00      	add	r7, sp, #0
 800686e:	6078      	str	r0, [r7, #4]
 8006870:	460b      	mov	r3, r1
 8006872:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 800687a:	78fa      	ldrb	r2, [r7, #3]
 800687c:	6879      	ldr	r1, [r7, #4]
 800687e:	4613      	mov	r3, r2
 8006880:	00db      	lsls	r3, r3, #3
 8006882:	4413      	add	r3, r2
 8006884:	009b      	lsls	r3, r3, #2
 8006886:	440b      	add	r3, r1
 8006888:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800688c:	681a      	ldr	r2, [r3, #0]
 800688e:	78fb      	ldrb	r3, [r7, #3]
 8006890:	4619      	mov	r1, r3
 8006892:	f7fe fb7b 	bl	8004f8c <USBD_LL_DataOutStage>
}
 8006896:	bf00      	nop
 8006898:	3708      	adds	r7, #8
 800689a:	46bd      	mov	sp, r7
 800689c:	bd80      	pop	{r7, pc}

0800689e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800689e:	b580      	push	{r7, lr}
 80068a0:	b082      	sub	sp, #8
 80068a2:	af00      	add	r7, sp, #0
 80068a4:	6078      	str	r0, [r7, #4]
 80068a6:	460b      	mov	r3, r1
 80068a8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 80068b0:	78fa      	ldrb	r2, [r7, #3]
 80068b2:	6879      	ldr	r1, [r7, #4]
 80068b4:	4613      	mov	r3, r2
 80068b6:	00db      	lsls	r3, r3, #3
 80068b8:	4413      	add	r3, r2
 80068ba:	009b      	lsls	r3, r3, #2
 80068bc:	440b      	add	r3, r1
 80068be:	3320      	adds	r3, #32
 80068c0:	681a      	ldr	r2, [r3, #0]
 80068c2:	78fb      	ldrb	r3, [r7, #3]
 80068c4:	4619      	mov	r1, r3
 80068c6:	f7fe fc14 	bl	80050f2 <USBD_LL_DataInStage>
}
 80068ca:	bf00      	nop
 80068cc:	3708      	adds	r7, #8
 80068ce:	46bd      	mov	sp, r7
 80068d0:	bd80      	pop	{r7, pc}

080068d2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80068d2:	b580      	push	{r7, lr}
 80068d4:	b082      	sub	sp, #8
 80068d6:	af00      	add	r7, sp, #0
 80068d8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 80068e0:	4618      	mov	r0, r3
 80068e2:	f7fe fd4e 	bl	8005382 <USBD_LL_SOF>
}
 80068e6:	bf00      	nop
 80068e8:	3708      	adds	r7, #8
 80068ea:	46bd      	mov	sp, r7
 80068ec:	bd80      	pop	{r7, pc}

080068ee <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80068ee:	b580      	push	{r7, lr}
 80068f0:	b084      	sub	sp, #16
 80068f2:	af00      	add	r7, sp, #0
 80068f4:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80068f6:	2301      	movs	r3, #1
 80068f8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	79db      	ldrb	r3, [r3, #7]
 80068fe:	2b02      	cmp	r3, #2
 8006900:	d001      	beq.n	8006906 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8006902:	f7f9 fee9 	bl	80006d8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800690c:	7bfa      	ldrb	r2, [r7, #15]
 800690e:	4611      	mov	r1, r2
 8006910:	4618      	mov	r0, r3
 8006912:	f7fe fcf2 	bl	80052fa <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800691c:	4618      	mov	r0, r3
 800691e:	f7fe fc9a 	bl	8005256 <USBD_LL_Reset>
}
 8006922:	bf00      	nop
 8006924:	3710      	adds	r7, #16
 8006926:	46bd      	mov	sp, r7
 8006928:	bd80      	pop	{r7, pc}
	...

0800692c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800692c:	b580      	push	{r7, lr}
 800692e:	b082      	sub	sp, #8
 8006930:	af00      	add	r7, sp, #0
 8006932:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800693a:	4618      	mov	r0, r3
 800693c:	f7fe fced 	bl	800531a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	687a      	ldr	r2, [r7, #4]
 800694c:	6812      	ldr	r2, [r2, #0]
 800694e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006952:	f043 0301 	orr.w	r3, r3, #1
 8006956:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	7adb      	ldrb	r3, [r3, #11]
 800695c:	2b00      	cmp	r3, #0
 800695e:	d005      	beq.n	800696c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006960:	4b04      	ldr	r3, [pc, #16]	; (8006974 <HAL_PCD_SuspendCallback+0x48>)
 8006962:	691b      	ldr	r3, [r3, #16]
 8006964:	4a03      	ldr	r2, [pc, #12]	; (8006974 <HAL_PCD_SuspendCallback+0x48>)
 8006966:	f043 0306 	orr.w	r3, r3, #6
 800696a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800696c:	bf00      	nop
 800696e:	3708      	adds	r7, #8
 8006970:	46bd      	mov	sp, r7
 8006972:	bd80      	pop	{r7, pc}
 8006974:	e000ed00 	.word	0xe000ed00

08006978 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006978:	b580      	push	{r7, lr}
 800697a:	b082      	sub	sp, #8
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8006986:	4618      	mov	r0, r3
 8006988:	f7fe fce3 	bl	8005352 <USBD_LL_Resume>
}
 800698c:	bf00      	nop
 800698e:	3708      	adds	r7, #8
 8006990:	46bd      	mov	sp, r7
 8006992:	bd80      	pop	{r7, pc}

08006994 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006994:	b580      	push	{r7, lr}
 8006996:	b082      	sub	sp, #8
 8006998:	af00      	add	r7, sp, #0
 800699a:	6078      	str	r0, [r7, #4]
 800699c:	460b      	mov	r3, r1
 800699e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 80069a6:	78fa      	ldrb	r2, [r7, #3]
 80069a8:	4611      	mov	r1, r2
 80069aa:	4618      	mov	r0, r3
 80069ac:	f7fe fd3b 	bl	8005426 <USBD_LL_IsoOUTIncomplete>
}
 80069b0:	bf00      	nop
 80069b2:	3708      	adds	r7, #8
 80069b4:	46bd      	mov	sp, r7
 80069b6:	bd80      	pop	{r7, pc}

080069b8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80069b8:	b580      	push	{r7, lr}
 80069ba:	b082      	sub	sp, #8
 80069bc:	af00      	add	r7, sp, #0
 80069be:	6078      	str	r0, [r7, #4]
 80069c0:	460b      	mov	r3, r1
 80069c2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 80069ca:	78fa      	ldrb	r2, [r7, #3]
 80069cc:	4611      	mov	r1, r2
 80069ce:	4618      	mov	r0, r3
 80069d0:	f7fe fcf7 	bl	80053c2 <USBD_LL_IsoINIncomplete>
}
 80069d4:	bf00      	nop
 80069d6:	3708      	adds	r7, #8
 80069d8:	46bd      	mov	sp, r7
 80069da:	bd80      	pop	{r7, pc}

080069dc <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80069dc:	b580      	push	{r7, lr}
 80069de:	b082      	sub	sp, #8
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 80069ea:	4618      	mov	r0, r3
 80069ec:	f7fe fd4d 	bl	800548a <USBD_LL_DevConnected>
}
 80069f0:	bf00      	nop
 80069f2:	3708      	adds	r7, #8
 80069f4:	46bd      	mov	sp, r7
 80069f6:	bd80      	pop	{r7, pc}

080069f8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80069f8:	b580      	push	{r7, lr}
 80069fa:	b082      	sub	sp, #8
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8006a06:	4618      	mov	r0, r3
 8006a08:	f7fe fd4a 	bl	80054a0 <USBD_LL_DevDisconnected>
}
 8006a0c:	bf00      	nop
 8006a0e:	3708      	adds	r7, #8
 8006a10:	46bd      	mov	sp, r7
 8006a12:	bd80      	pop	{r7, pc}

08006a14 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8006a14:	b580      	push	{r7, lr}
 8006a16:	b082      	sub	sp, #8
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	781b      	ldrb	r3, [r3, #0]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d13c      	bne.n	8006a9e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8006a24:	4a20      	ldr	r2, [pc, #128]	; (8006aa8 <USBD_LL_Init+0x94>)
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	f8c2 34e0 	str.w	r3, [r2, #1248]	; 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	4a1e      	ldr	r2, [pc, #120]	; (8006aa8 <USBD_LL_Init+0x94>)
 8006a30:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8006a34:	4b1c      	ldr	r3, [pc, #112]	; (8006aa8 <USBD_LL_Init+0x94>)
 8006a36:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8006a3a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8006a3c:	4b1a      	ldr	r3, [pc, #104]	; (8006aa8 <USBD_LL_Init+0x94>)
 8006a3e:	2204      	movs	r2, #4
 8006a40:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8006a42:	4b19      	ldr	r3, [pc, #100]	; (8006aa8 <USBD_LL_Init+0x94>)
 8006a44:	2202      	movs	r2, #2
 8006a46:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8006a48:	4b17      	ldr	r3, [pc, #92]	; (8006aa8 <USBD_LL_Init+0x94>)
 8006a4a:	2200      	movs	r2, #0
 8006a4c:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8006a4e:	4b16      	ldr	r3, [pc, #88]	; (8006aa8 <USBD_LL_Init+0x94>)
 8006a50:	2202      	movs	r2, #2
 8006a52:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8006a54:	4b14      	ldr	r3, [pc, #80]	; (8006aa8 <USBD_LL_Init+0x94>)
 8006a56:	2201      	movs	r2, #1
 8006a58:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8006a5a:	4b13      	ldr	r3, [pc, #76]	; (8006aa8 <USBD_LL_Init+0x94>)
 8006a5c:	2200      	movs	r2, #0
 8006a5e:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8006a60:	4b11      	ldr	r3, [pc, #68]	; (8006aa8 <USBD_LL_Init+0x94>)
 8006a62:	2200      	movs	r2, #0
 8006a64:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8006a66:	4b10      	ldr	r3, [pc, #64]	; (8006aa8 <USBD_LL_Init+0x94>)
 8006a68:	2200      	movs	r2, #0
 8006a6a:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8006a6c:	4b0e      	ldr	r3, [pc, #56]	; (8006aa8 <USBD_LL_Init+0x94>)
 8006a6e:	2200      	movs	r2, #0
 8006a70:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8006a72:	480d      	ldr	r0, [pc, #52]	; (8006aa8 <USBD_LL_Init+0x94>)
 8006a74:	f7fa faf0 	bl	8001058 <HAL_PCD_Init>
 8006a78:	4603      	mov	r3, r0
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d001      	beq.n	8006a82 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8006a7e:	f7f9 fe2b 	bl	80006d8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8006a82:	2180      	movs	r1, #128	; 0x80
 8006a84:	4808      	ldr	r0, [pc, #32]	; (8006aa8 <USBD_LL_Init+0x94>)
 8006a86:	f7fb fd1a 	bl	80024be <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8006a8a:	2240      	movs	r2, #64	; 0x40
 8006a8c:	2100      	movs	r1, #0
 8006a8e:	4806      	ldr	r0, [pc, #24]	; (8006aa8 <USBD_LL_Init+0x94>)
 8006a90:	f7fb fcce 	bl	8002430 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8006a94:	2280      	movs	r2, #128	; 0x80
 8006a96:	2101      	movs	r1, #1
 8006a98:	4803      	ldr	r0, [pc, #12]	; (8006aa8 <USBD_LL_Init+0x94>)
 8006a9a:	f7fb fcc9 	bl	8002430 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8006a9e:	2300      	movs	r3, #0
}
 8006aa0:	4618      	mov	r0, r3
 8006aa2:	3708      	adds	r7, #8
 8006aa4:	46bd      	mov	sp, r7
 8006aa6:	bd80      	pop	{r7, pc}
 8006aa8:	20001a58 	.word	0x20001a58

08006aac <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8006aac:	b580      	push	{r7, lr}
 8006aae:	b084      	sub	sp, #16
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006ab4:	2300      	movs	r3, #0
 8006ab6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006ab8:	2300      	movs	r3, #0
 8006aba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006ac2:	4618      	mov	r0, r3
 8006ac4:	f7fa fbd7 	bl	8001276 <HAL_PCD_Start>
 8006ac8:	4603      	mov	r3, r0
 8006aca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006acc:	7bfb      	ldrb	r3, [r7, #15]
 8006ace:	4618      	mov	r0, r3
 8006ad0:	f000 f942 	bl	8006d58 <USBD_Get_USB_Status>
 8006ad4:	4603      	mov	r3, r0
 8006ad6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006ad8:	7bbb      	ldrb	r3, [r7, #14]
}
 8006ada:	4618      	mov	r0, r3
 8006adc:	3710      	adds	r7, #16
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	bd80      	pop	{r7, pc}

08006ae2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8006ae2:	b580      	push	{r7, lr}
 8006ae4:	b084      	sub	sp, #16
 8006ae6:	af00      	add	r7, sp, #0
 8006ae8:	6078      	str	r0, [r7, #4]
 8006aea:	4608      	mov	r0, r1
 8006aec:	4611      	mov	r1, r2
 8006aee:	461a      	mov	r2, r3
 8006af0:	4603      	mov	r3, r0
 8006af2:	70fb      	strb	r3, [r7, #3]
 8006af4:	460b      	mov	r3, r1
 8006af6:	70bb      	strb	r3, [r7, #2]
 8006af8:	4613      	mov	r3, r2
 8006afa:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006afc:	2300      	movs	r3, #0
 8006afe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006b00:	2300      	movs	r3, #0
 8006b02:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8006b0a:	78bb      	ldrb	r3, [r7, #2]
 8006b0c:	883a      	ldrh	r2, [r7, #0]
 8006b0e:	78f9      	ldrb	r1, [r7, #3]
 8006b10:	f7fb f8ab 	bl	8001c6a <HAL_PCD_EP_Open>
 8006b14:	4603      	mov	r3, r0
 8006b16:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006b18:	7bfb      	ldrb	r3, [r7, #15]
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	f000 f91c 	bl	8006d58 <USBD_Get_USB_Status>
 8006b20:	4603      	mov	r3, r0
 8006b22:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006b24:	7bbb      	ldrb	r3, [r7, #14]
}
 8006b26:	4618      	mov	r0, r3
 8006b28:	3710      	adds	r7, #16
 8006b2a:	46bd      	mov	sp, r7
 8006b2c:	bd80      	pop	{r7, pc}

08006b2e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006b2e:	b580      	push	{r7, lr}
 8006b30:	b084      	sub	sp, #16
 8006b32:	af00      	add	r7, sp, #0
 8006b34:	6078      	str	r0, [r7, #4]
 8006b36:	460b      	mov	r3, r1
 8006b38:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006b3a:	2300      	movs	r3, #0
 8006b3c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006b3e:	2300      	movs	r3, #0
 8006b40:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006b48:	78fa      	ldrb	r2, [r7, #3]
 8006b4a:	4611      	mov	r1, r2
 8006b4c:	4618      	mov	r0, r3
 8006b4e:	f7fb f8f4 	bl	8001d3a <HAL_PCD_EP_Close>
 8006b52:	4603      	mov	r3, r0
 8006b54:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006b56:	7bfb      	ldrb	r3, [r7, #15]
 8006b58:	4618      	mov	r0, r3
 8006b5a:	f000 f8fd 	bl	8006d58 <USBD_Get_USB_Status>
 8006b5e:	4603      	mov	r3, r0
 8006b60:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006b62:	7bbb      	ldrb	r3, [r7, #14]
}
 8006b64:	4618      	mov	r0, r3
 8006b66:	3710      	adds	r7, #16
 8006b68:	46bd      	mov	sp, r7
 8006b6a:	bd80      	pop	{r7, pc}

08006b6c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006b6c:	b580      	push	{r7, lr}
 8006b6e:	b084      	sub	sp, #16
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	6078      	str	r0, [r7, #4]
 8006b74:	460b      	mov	r3, r1
 8006b76:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006b78:	2300      	movs	r3, #0
 8006b7a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006b7c:	2300      	movs	r3, #0
 8006b7e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006b86:	78fa      	ldrb	r2, [r7, #3]
 8006b88:	4611      	mov	r1, r2
 8006b8a:	4618      	mov	r0, r3
 8006b8c:	f7fb f9ac 	bl	8001ee8 <HAL_PCD_EP_SetStall>
 8006b90:	4603      	mov	r3, r0
 8006b92:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006b94:	7bfb      	ldrb	r3, [r7, #15]
 8006b96:	4618      	mov	r0, r3
 8006b98:	f000 f8de 	bl	8006d58 <USBD_Get_USB_Status>
 8006b9c:	4603      	mov	r3, r0
 8006b9e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006ba0:	7bbb      	ldrb	r3, [r7, #14]
}
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	3710      	adds	r7, #16
 8006ba6:	46bd      	mov	sp, r7
 8006ba8:	bd80      	pop	{r7, pc}

08006baa <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006baa:	b580      	push	{r7, lr}
 8006bac:	b084      	sub	sp, #16
 8006bae:	af00      	add	r7, sp, #0
 8006bb0:	6078      	str	r0, [r7, #4]
 8006bb2:	460b      	mov	r3, r1
 8006bb4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006bb6:	2300      	movs	r3, #0
 8006bb8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006bba:	2300      	movs	r3, #0
 8006bbc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006bc4:	78fa      	ldrb	r2, [r7, #3]
 8006bc6:	4611      	mov	r1, r2
 8006bc8:	4618      	mov	r0, r3
 8006bca:	f7fb f9f0 	bl	8001fae <HAL_PCD_EP_ClrStall>
 8006bce:	4603      	mov	r3, r0
 8006bd0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006bd2:	7bfb      	ldrb	r3, [r7, #15]
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	f000 f8bf 	bl	8006d58 <USBD_Get_USB_Status>
 8006bda:	4603      	mov	r3, r0
 8006bdc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006bde:	7bbb      	ldrb	r3, [r7, #14]
}
 8006be0:	4618      	mov	r0, r3
 8006be2:	3710      	adds	r7, #16
 8006be4:	46bd      	mov	sp, r7
 8006be6:	bd80      	pop	{r7, pc}

08006be8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006be8:	b480      	push	{r7}
 8006bea:	b085      	sub	sp, #20
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	6078      	str	r0, [r7, #4]
 8006bf0:	460b      	mov	r3, r1
 8006bf2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006bfa:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8006bfc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	da0b      	bge.n	8006c1c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8006c04:	78fb      	ldrb	r3, [r7, #3]
 8006c06:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006c0a:	68f9      	ldr	r1, [r7, #12]
 8006c0c:	4613      	mov	r3, r2
 8006c0e:	00db      	lsls	r3, r3, #3
 8006c10:	4413      	add	r3, r2
 8006c12:	009b      	lsls	r3, r3, #2
 8006c14:	440b      	add	r3, r1
 8006c16:	3316      	adds	r3, #22
 8006c18:	781b      	ldrb	r3, [r3, #0]
 8006c1a:	e00b      	b.n	8006c34 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8006c1c:	78fb      	ldrb	r3, [r7, #3]
 8006c1e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006c22:	68f9      	ldr	r1, [r7, #12]
 8006c24:	4613      	mov	r3, r2
 8006c26:	00db      	lsls	r3, r3, #3
 8006c28:	4413      	add	r3, r2
 8006c2a:	009b      	lsls	r3, r3, #2
 8006c2c:	440b      	add	r3, r1
 8006c2e:	f203 2356 	addw	r3, r3, #598	; 0x256
 8006c32:	781b      	ldrb	r3, [r3, #0]
  }
}
 8006c34:	4618      	mov	r0, r3
 8006c36:	3714      	adds	r7, #20
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3e:	4770      	bx	lr

08006c40 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8006c40:	b580      	push	{r7, lr}
 8006c42:	b084      	sub	sp, #16
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	6078      	str	r0, [r7, #4]
 8006c48:	460b      	mov	r3, r1
 8006c4a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006c4c:	2300      	movs	r3, #0
 8006c4e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006c50:	2300      	movs	r3, #0
 8006c52:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006c5a:	78fa      	ldrb	r2, [r7, #3]
 8006c5c:	4611      	mov	r1, r2
 8006c5e:	4618      	mov	r0, r3
 8006c60:	f7fa ffdf 	bl	8001c22 <HAL_PCD_SetAddress>
 8006c64:	4603      	mov	r3, r0
 8006c66:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006c68:	7bfb      	ldrb	r3, [r7, #15]
 8006c6a:	4618      	mov	r0, r3
 8006c6c:	f000 f874 	bl	8006d58 <USBD_Get_USB_Status>
 8006c70:	4603      	mov	r3, r0
 8006c72:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006c74:	7bbb      	ldrb	r3, [r7, #14]
}
 8006c76:	4618      	mov	r0, r3
 8006c78:	3710      	adds	r7, #16
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	bd80      	pop	{r7, pc}

08006c7e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8006c7e:	b580      	push	{r7, lr}
 8006c80:	b086      	sub	sp, #24
 8006c82:	af00      	add	r7, sp, #0
 8006c84:	60f8      	str	r0, [r7, #12]
 8006c86:	607a      	str	r2, [r7, #4]
 8006c88:	603b      	str	r3, [r7, #0]
 8006c8a:	460b      	mov	r3, r1
 8006c8c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006c8e:	2300      	movs	r3, #0
 8006c90:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006c92:	2300      	movs	r3, #0
 8006c94:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8006c9c:	7af9      	ldrb	r1, [r7, #11]
 8006c9e:	683b      	ldr	r3, [r7, #0]
 8006ca0:	687a      	ldr	r2, [r7, #4]
 8006ca2:	f7fb f8e7 	bl	8001e74 <HAL_PCD_EP_Transmit>
 8006ca6:	4603      	mov	r3, r0
 8006ca8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006caa:	7dfb      	ldrb	r3, [r7, #23]
 8006cac:	4618      	mov	r0, r3
 8006cae:	f000 f853 	bl	8006d58 <USBD_Get_USB_Status>
 8006cb2:	4603      	mov	r3, r0
 8006cb4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8006cb6:	7dbb      	ldrb	r3, [r7, #22]
}
 8006cb8:	4618      	mov	r0, r3
 8006cba:	3718      	adds	r7, #24
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	bd80      	pop	{r7, pc}

08006cc0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8006cc0:	b580      	push	{r7, lr}
 8006cc2:	b086      	sub	sp, #24
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	60f8      	str	r0, [r7, #12]
 8006cc8:	607a      	str	r2, [r7, #4]
 8006cca:	603b      	str	r3, [r7, #0]
 8006ccc:	460b      	mov	r3, r1
 8006cce:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006cd0:	2300      	movs	r3, #0
 8006cd2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006cd4:	2300      	movs	r3, #0
 8006cd6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8006cde:	7af9      	ldrb	r1, [r7, #11]
 8006ce0:	683b      	ldr	r3, [r7, #0]
 8006ce2:	687a      	ldr	r2, [r7, #4]
 8006ce4:	f7fb f873 	bl	8001dce <HAL_PCD_EP_Receive>
 8006ce8:	4603      	mov	r3, r0
 8006cea:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006cec:	7dfb      	ldrb	r3, [r7, #23]
 8006cee:	4618      	mov	r0, r3
 8006cf0:	f000 f832 	bl	8006d58 <USBD_Get_USB_Status>
 8006cf4:	4603      	mov	r3, r0
 8006cf6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8006cf8:	7dbb      	ldrb	r3, [r7, #22]
}
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	3718      	adds	r7, #24
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	bd80      	pop	{r7, pc}

08006d02 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006d02:	b580      	push	{r7, lr}
 8006d04:	b082      	sub	sp, #8
 8006d06:	af00      	add	r7, sp, #0
 8006d08:	6078      	str	r0, [r7, #4]
 8006d0a:	460b      	mov	r3, r1
 8006d0c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006d14:	78fa      	ldrb	r2, [r7, #3]
 8006d16:	4611      	mov	r1, r2
 8006d18:	4618      	mov	r0, r3
 8006d1a:	f7fb f893 	bl	8001e44 <HAL_PCD_EP_GetRxCount>
 8006d1e:	4603      	mov	r3, r0
}
 8006d20:	4618      	mov	r0, r3
 8006d22:	3708      	adds	r7, #8
 8006d24:	46bd      	mov	sp, r7
 8006d26:	bd80      	pop	{r7, pc}

08006d28 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8006d28:	b480      	push	{r7}
 8006d2a:	b083      	sub	sp, #12
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8006d30:	4b03      	ldr	r3, [pc, #12]	; (8006d40 <USBD_static_malloc+0x18>)
}
 8006d32:	4618      	mov	r0, r3
 8006d34:	370c      	adds	r7, #12
 8006d36:	46bd      	mov	sp, r7
 8006d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3c:	4770      	bx	lr
 8006d3e:	bf00      	nop
 8006d40:	20001f3c 	.word	0x20001f3c

08006d44 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8006d44:	b480      	push	{r7}
 8006d46:	b083      	sub	sp, #12
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	6078      	str	r0, [r7, #4]

}
 8006d4c:	bf00      	nop
 8006d4e:	370c      	adds	r7, #12
 8006d50:	46bd      	mov	sp, r7
 8006d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d56:	4770      	bx	lr

08006d58 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8006d58:	b480      	push	{r7}
 8006d5a:	b085      	sub	sp, #20
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	4603      	mov	r3, r0
 8006d60:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006d62:	2300      	movs	r3, #0
 8006d64:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8006d66:	79fb      	ldrb	r3, [r7, #7]
 8006d68:	2b03      	cmp	r3, #3
 8006d6a:	d817      	bhi.n	8006d9c <USBD_Get_USB_Status+0x44>
 8006d6c:	a201      	add	r2, pc, #4	; (adr r2, 8006d74 <USBD_Get_USB_Status+0x1c>)
 8006d6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d72:	bf00      	nop
 8006d74:	08006d85 	.word	0x08006d85
 8006d78:	08006d8b 	.word	0x08006d8b
 8006d7c:	08006d91 	.word	0x08006d91
 8006d80:	08006d97 	.word	0x08006d97
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8006d84:	2300      	movs	r3, #0
 8006d86:	73fb      	strb	r3, [r7, #15]
    break;
 8006d88:	e00b      	b.n	8006da2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006d8a:	2303      	movs	r3, #3
 8006d8c:	73fb      	strb	r3, [r7, #15]
    break;
 8006d8e:	e008      	b.n	8006da2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006d90:	2301      	movs	r3, #1
 8006d92:	73fb      	strb	r3, [r7, #15]
    break;
 8006d94:	e005      	b.n	8006da2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8006d96:	2303      	movs	r3, #3
 8006d98:	73fb      	strb	r3, [r7, #15]
    break;
 8006d9a:	e002      	b.n	8006da2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8006d9c:	2303      	movs	r3, #3
 8006d9e:	73fb      	strb	r3, [r7, #15]
    break;
 8006da0:	bf00      	nop
  }
  return usb_status;
 8006da2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006da4:	4618      	mov	r0, r3
 8006da6:	3714      	adds	r7, #20
 8006da8:	46bd      	mov	sp, r7
 8006daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dae:	4770      	bx	lr

08006db0 <_vsniprintf_r>:
 8006db0:	b530      	push	{r4, r5, lr}
 8006db2:	4614      	mov	r4, r2
 8006db4:	2c00      	cmp	r4, #0
 8006db6:	b09b      	sub	sp, #108	; 0x6c
 8006db8:	4605      	mov	r5, r0
 8006dba:	461a      	mov	r2, r3
 8006dbc:	da05      	bge.n	8006dca <_vsniprintf_r+0x1a>
 8006dbe:	238b      	movs	r3, #139	; 0x8b
 8006dc0:	6003      	str	r3, [r0, #0]
 8006dc2:	f04f 30ff 	mov.w	r0, #4294967295
 8006dc6:	b01b      	add	sp, #108	; 0x6c
 8006dc8:	bd30      	pop	{r4, r5, pc}
 8006dca:	f44f 7302 	mov.w	r3, #520	; 0x208
 8006dce:	f8ad 300c 	strh.w	r3, [sp, #12]
 8006dd2:	bf14      	ite	ne
 8006dd4:	f104 33ff 	addne.w	r3, r4, #4294967295
 8006dd8:	4623      	moveq	r3, r4
 8006dda:	9302      	str	r3, [sp, #8]
 8006ddc:	9305      	str	r3, [sp, #20]
 8006dde:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006de2:	9100      	str	r1, [sp, #0]
 8006de4:	9104      	str	r1, [sp, #16]
 8006de6:	f8ad 300e 	strh.w	r3, [sp, #14]
 8006dea:	4669      	mov	r1, sp
 8006dec:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006dee:	f000 f99f 	bl	8007130 <_svfiprintf_r>
 8006df2:	1c43      	adds	r3, r0, #1
 8006df4:	bfbc      	itt	lt
 8006df6:	238b      	movlt	r3, #139	; 0x8b
 8006df8:	602b      	strlt	r3, [r5, #0]
 8006dfa:	2c00      	cmp	r4, #0
 8006dfc:	d0e3      	beq.n	8006dc6 <_vsniprintf_r+0x16>
 8006dfe:	9b00      	ldr	r3, [sp, #0]
 8006e00:	2200      	movs	r2, #0
 8006e02:	701a      	strb	r2, [r3, #0]
 8006e04:	e7df      	b.n	8006dc6 <_vsniprintf_r+0x16>
	...

08006e08 <vsniprintf>:
 8006e08:	b507      	push	{r0, r1, r2, lr}
 8006e0a:	9300      	str	r3, [sp, #0]
 8006e0c:	4613      	mov	r3, r2
 8006e0e:	460a      	mov	r2, r1
 8006e10:	4601      	mov	r1, r0
 8006e12:	4803      	ldr	r0, [pc, #12]	; (8006e20 <vsniprintf+0x18>)
 8006e14:	6800      	ldr	r0, [r0, #0]
 8006e16:	f7ff ffcb 	bl	8006db0 <_vsniprintf_r>
 8006e1a:	b003      	add	sp, #12
 8006e1c:	f85d fb04 	ldr.w	pc, [sp], #4
 8006e20:	20000148 	.word	0x20000148

08006e24 <memset>:
 8006e24:	4402      	add	r2, r0
 8006e26:	4603      	mov	r3, r0
 8006e28:	4293      	cmp	r3, r2
 8006e2a:	d100      	bne.n	8006e2e <memset+0xa>
 8006e2c:	4770      	bx	lr
 8006e2e:	f803 1b01 	strb.w	r1, [r3], #1
 8006e32:	e7f9      	b.n	8006e28 <memset+0x4>

08006e34 <__errno>:
 8006e34:	4b01      	ldr	r3, [pc, #4]	; (8006e3c <__errno+0x8>)
 8006e36:	6818      	ldr	r0, [r3, #0]
 8006e38:	4770      	bx	lr
 8006e3a:	bf00      	nop
 8006e3c:	20000148 	.word	0x20000148

08006e40 <__libc_init_array>:
 8006e40:	b570      	push	{r4, r5, r6, lr}
 8006e42:	4d0d      	ldr	r5, [pc, #52]	; (8006e78 <__libc_init_array+0x38>)
 8006e44:	4c0d      	ldr	r4, [pc, #52]	; (8006e7c <__libc_init_array+0x3c>)
 8006e46:	1b64      	subs	r4, r4, r5
 8006e48:	10a4      	asrs	r4, r4, #2
 8006e4a:	2600      	movs	r6, #0
 8006e4c:	42a6      	cmp	r6, r4
 8006e4e:	d109      	bne.n	8006e64 <__libc_init_array+0x24>
 8006e50:	4d0b      	ldr	r5, [pc, #44]	; (8006e80 <__libc_init_array+0x40>)
 8006e52:	4c0c      	ldr	r4, [pc, #48]	; (8006e84 <__libc_init_array+0x44>)
 8006e54:	f000 fc6a 	bl	800772c <_init>
 8006e58:	1b64      	subs	r4, r4, r5
 8006e5a:	10a4      	asrs	r4, r4, #2
 8006e5c:	2600      	movs	r6, #0
 8006e5e:	42a6      	cmp	r6, r4
 8006e60:	d105      	bne.n	8006e6e <__libc_init_array+0x2e>
 8006e62:	bd70      	pop	{r4, r5, r6, pc}
 8006e64:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e68:	4798      	blx	r3
 8006e6a:	3601      	adds	r6, #1
 8006e6c:	e7ee      	b.n	8006e4c <__libc_init_array+0xc>
 8006e6e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e72:	4798      	blx	r3
 8006e74:	3601      	adds	r6, #1
 8006e76:	e7f2      	b.n	8006e5e <__libc_init_array+0x1e>
 8006e78:	080077ec 	.word	0x080077ec
 8006e7c:	080077ec 	.word	0x080077ec
 8006e80:	080077ec 	.word	0x080077ec
 8006e84:	080077f0 	.word	0x080077f0

08006e88 <__retarget_lock_acquire_recursive>:
 8006e88:	4770      	bx	lr

08006e8a <__retarget_lock_release_recursive>:
 8006e8a:	4770      	bx	lr

08006e8c <_free_r>:
 8006e8c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006e8e:	2900      	cmp	r1, #0
 8006e90:	d044      	beq.n	8006f1c <_free_r+0x90>
 8006e92:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006e96:	9001      	str	r0, [sp, #4]
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	f1a1 0404 	sub.w	r4, r1, #4
 8006e9e:	bfb8      	it	lt
 8006ea0:	18e4      	addlt	r4, r4, r3
 8006ea2:	f000 f8df 	bl	8007064 <__malloc_lock>
 8006ea6:	4a1e      	ldr	r2, [pc, #120]	; (8006f20 <_free_r+0x94>)
 8006ea8:	9801      	ldr	r0, [sp, #4]
 8006eaa:	6813      	ldr	r3, [r2, #0]
 8006eac:	b933      	cbnz	r3, 8006ebc <_free_r+0x30>
 8006eae:	6063      	str	r3, [r4, #4]
 8006eb0:	6014      	str	r4, [r2, #0]
 8006eb2:	b003      	add	sp, #12
 8006eb4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006eb8:	f000 b8da 	b.w	8007070 <__malloc_unlock>
 8006ebc:	42a3      	cmp	r3, r4
 8006ebe:	d908      	bls.n	8006ed2 <_free_r+0x46>
 8006ec0:	6825      	ldr	r5, [r4, #0]
 8006ec2:	1961      	adds	r1, r4, r5
 8006ec4:	428b      	cmp	r3, r1
 8006ec6:	bf01      	itttt	eq
 8006ec8:	6819      	ldreq	r1, [r3, #0]
 8006eca:	685b      	ldreq	r3, [r3, #4]
 8006ecc:	1949      	addeq	r1, r1, r5
 8006ece:	6021      	streq	r1, [r4, #0]
 8006ed0:	e7ed      	b.n	8006eae <_free_r+0x22>
 8006ed2:	461a      	mov	r2, r3
 8006ed4:	685b      	ldr	r3, [r3, #4]
 8006ed6:	b10b      	cbz	r3, 8006edc <_free_r+0x50>
 8006ed8:	42a3      	cmp	r3, r4
 8006eda:	d9fa      	bls.n	8006ed2 <_free_r+0x46>
 8006edc:	6811      	ldr	r1, [r2, #0]
 8006ede:	1855      	adds	r5, r2, r1
 8006ee0:	42a5      	cmp	r5, r4
 8006ee2:	d10b      	bne.n	8006efc <_free_r+0x70>
 8006ee4:	6824      	ldr	r4, [r4, #0]
 8006ee6:	4421      	add	r1, r4
 8006ee8:	1854      	adds	r4, r2, r1
 8006eea:	42a3      	cmp	r3, r4
 8006eec:	6011      	str	r1, [r2, #0]
 8006eee:	d1e0      	bne.n	8006eb2 <_free_r+0x26>
 8006ef0:	681c      	ldr	r4, [r3, #0]
 8006ef2:	685b      	ldr	r3, [r3, #4]
 8006ef4:	6053      	str	r3, [r2, #4]
 8006ef6:	440c      	add	r4, r1
 8006ef8:	6014      	str	r4, [r2, #0]
 8006efa:	e7da      	b.n	8006eb2 <_free_r+0x26>
 8006efc:	d902      	bls.n	8006f04 <_free_r+0x78>
 8006efe:	230c      	movs	r3, #12
 8006f00:	6003      	str	r3, [r0, #0]
 8006f02:	e7d6      	b.n	8006eb2 <_free_r+0x26>
 8006f04:	6825      	ldr	r5, [r4, #0]
 8006f06:	1961      	adds	r1, r4, r5
 8006f08:	428b      	cmp	r3, r1
 8006f0a:	bf04      	itt	eq
 8006f0c:	6819      	ldreq	r1, [r3, #0]
 8006f0e:	685b      	ldreq	r3, [r3, #4]
 8006f10:	6063      	str	r3, [r4, #4]
 8006f12:	bf04      	itt	eq
 8006f14:	1949      	addeq	r1, r1, r5
 8006f16:	6021      	streq	r1, [r4, #0]
 8006f18:	6054      	str	r4, [r2, #4]
 8006f1a:	e7ca      	b.n	8006eb2 <_free_r+0x26>
 8006f1c:	b003      	add	sp, #12
 8006f1e:	bd30      	pop	{r4, r5, pc}
 8006f20:	2000229c 	.word	0x2000229c

08006f24 <sbrk_aligned>:
 8006f24:	b570      	push	{r4, r5, r6, lr}
 8006f26:	4e0e      	ldr	r6, [pc, #56]	; (8006f60 <sbrk_aligned+0x3c>)
 8006f28:	460c      	mov	r4, r1
 8006f2a:	6831      	ldr	r1, [r6, #0]
 8006f2c:	4605      	mov	r5, r0
 8006f2e:	b911      	cbnz	r1, 8006f36 <sbrk_aligned+0x12>
 8006f30:	f000 fba6 	bl	8007680 <_sbrk_r>
 8006f34:	6030      	str	r0, [r6, #0]
 8006f36:	4621      	mov	r1, r4
 8006f38:	4628      	mov	r0, r5
 8006f3a:	f000 fba1 	bl	8007680 <_sbrk_r>
 8006f3e:	1c43      	adds	r3, r0, #1
 8006f40:	d00a      	beq.n	8006f58 <sbrk_aligned+0x34>
 8006f42:	1cc4      	adds	r4, r0, #3
 8006f44:	f024 0403 	bic.w	r4, r4, #3
 8006f48:	42a0      	cmp	r0, r4
 8006f4a:	d007      	beq.n	8006f5c <sbrk_aligned+0x38>
 8006f4c:	1a21      	subs	r1, r4, r0
 8006f4e:	4628      	mov	r0, r5
 8006f50:	f000 fb96 	bl	8007680 <_sbrk_r>
 8006f54:	3001      	adds	r0, #1
 8006f56:	d101      	bne.n	8006f5c <sbrk_aligned+0x38>
 8006f58:	f04f 34ff 	mov.w	r4, #4294967295
 8006f5c:	4620      	mov	r0, r4
 8006f5e:	bd70      	pop	{r4, r5, r6, pc}
 8006f60:	200022a0 	.word	0x200022a0

08006f64 <_malloc_r>:
 8006f64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006f68:	1ccd      	adds	r5, r1, #3
 8006f6a:	f025 0503 	bic.w	r5, r5, #3
 8006f6e:	3508      	adds	r5, #8
 8006f70:	2d0c      	cmp	r5, #12
 8006f72:	bf38      	it	cc
 8006f74:	250c      	movcc	r5, #12
 8006f76:	2d00      	cmp	r5, #0
 8006f78:	4607      	mov	r7, r0
 8006f7a:	db01      	blt.n	8006f80 <_malloc_r+0x1c>
 8006f7c:	42a9      	cmp	r1, r5
 8006f7e:	d905      	bls.n	8006f8c <_malloc_r+0x28>
 8006f80:	230c      	movs	r3, #12
 8006f82:	603b      	str	r3, [r7, #0]
 8006f84:	2600      	movs	r6, #0
 8006f86:	4630      	mov	r0, r6
 8006f88:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006f8c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007060 <_malloc_r+0xfc>
 8006f90:	f000 f868 	bl	8007064 <__malloc_lock>
 8006f94:	f8d8 3000 	ldr.w	r3, [r8]
 8006f98:	461c      	mov	r4, r3
 8006f9a:	bb5c      	cbnz	r4, 8006ff4 <_malloc_r+0x90>
 8006f9c:	4629      	mov	r1, r5
 8006f9e:	4638      	mov	r0, r7
 8006fa0:	f7ff ffc0 	bl	8006f24 <sbrk_aligned>
 8006fa4:	1c43      	adds	r3, r0, #1
 8006fa6:	4604      	mov	r4, r0
 8006fa8:	d155      	bne.n	8007056 <_malloc_r+0xf2>
 8006faa:	f8d8 4000 	ldr.w	r4, [r8]
 8006fae:	4626      	mov	r6, r4
 8006fb0:	2e00      	cmp	r6, #0
 8006fb2:	d145      	bne.n	8007040 <_malloc_r+0xdc>
 8006fb4:	2c00      	cmp	r4, #0
 8006fb6:	d048      	beq.n	800704a <_malloc_r+0xe6>
 8006fb8:	6823      	ldr	r3, [r4, #0]
 8006fba:	4631      	mov	r1, r6
 8006fbc:	4638      	mov	r0, r7
 8006fbe:	eb04 0903 	add.w	r9, r4, r3
 8006fc2:	f000 fb5d 	bl	8007680 <_sbrk_r>
 8006fc6:	4581      	cmp	r9, r0
 8006fc8:	d13f      	bne.n	800704a <_malloc_r+0xe6>
 8006fca:	6821      	ldr	r1, [r4, #0]
 8006fcc:	1a6d      	subs	r5, r5, r1
 8006fce:	4629      	mov	r1, r5
 8006fd0:	4638      	mov	r0, r7
 8006fd2:	f7ff ffa7 	bl	8006f24 <sbrk_aligned>
 8006fd6:	3001      	adds	r0, #1
 8006fd8:	d037      	beq.n	800704a <_malloc_r+0xe6>
 8006fda:	6823      	ldr	r3, [r4, #0]
 8006fdc:	442b      	add	r3, r5
 8006fde:	6023      	str	r3, [r4, #0]
 8006fe0:	f8d8 3000 	ldr.w	r3, [r8]
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d038      	beq.n	800705a <_malloc_r+0xf6>
 8006fe8:	685a      	ldr	r2, [r3, #4]
 8006fea:	42a2      	cmp	r2, r4
 8006fec:	d12b      	bne.n	8007046 <_malloc_r+0xe2>
 8006fee:	2200      	movs	r2, #0
 8006ff0:	605a      	str	r2, [r3, #4]
 8006ff2:	e00f      	b.n	8007014 <_malloc_r+0xb0>
 8006ff4:	6822      	ldr	r2, [r4, #0]
 8006ff6:	1b52      	subs	r2, r2, r5
 8006ff8:	d41f      	bmi.n	800703a <_malloc_r+0xd6>
 8006ffa:	2a0b      	cmp	r2, #11
 8006ffc:	d917      	bls.n	800702e <_malloc_r+0xca>
 8006ffe:	1961      	adds	r1, r4, r5
 8007000:	42a3      	cmp	r3, r4
 8007002:	6025      	str	r5, [r4, #0]
 8007004:	bf18      	it	ne
 8007006:	6059      	strne	r1, [r3, #4]
 8007008:	6863      	ldr	r3, [r4, #4]
 800700a:	bf08      	it	eq
 800700c:	f8c8 1000 	streq.w	r1, [r8]
 8007010:	5162      	str	r2, [r4, r5]
 8007012:	604b      	str	r3, [r1, #4]
 8007014:	4638      	mov	r0, r7
 8007016:	f104 060b 	add.w	r6, r4, #11
 800701a:	f000 f829 	bl	8007070 <__malloc_unlock>
 800701e:	f026 0607 	bic.w	r6, r6, #7
 8007022:	1d23      	adds	r3, r4, #4
 8007024:	1af2      	subs	r2, r6, r3
 8007026:	d0ae      	beq.n	8006f86 <_malloc_r+0x22>
 8007028:	1b9b      	subs	r3, r3, r6
 800702a:	50a3      	str	r3, [r4, r2]
 800702c:	e7ab      	b.n	8006f86 <_malloc_r+0x22>
 800702e:	42a3      	cmp	r3, r4
 8007030:	6862      	ldr	r2, [r4, #4]
 8007032:	d1dd      	bne.n	8006ff0 <_malloc_r+0x8c>
 8007034:	f8c8 2000 	str.w	r2, [r8]
 8007038:	e7ec      	b.n	8007014 <_malloc_r+0xb0>
 800703a:	4623      	mov	r3, r4
 800703c:	6864      	ldr	r4, [r4, #4]
 800703e:	e7ac      	b.n	8006f9a <_malloc_r+0x36>
 8007040:	4634      	mov	r4, r6
 8007042:	6876      	ldr	r6, [r6, #4]
 8007044:	e7b4      	b.n	8006fb0 <_malloc_r+0x4c>
 8007046:	4613      	mov	r3, r2
 8007048:	e7cc      	b.n	8006fe4 <_malloc_r+0x80>
 800704a:	230c      	movs	r3, #12
 800704c:	603b      	str	r3, [r7, #0]
 800704e:	4638      	mov	r0, r7
 8007050:	f000 f80e 	bl	8007070 <__malloc_unlock>
 8007054:	e797      	b.n	8006f86 <_malloc_r+0x22>
 8007056:	6025      	str	r5, [r4, #0]
 8007058:	e7dc      	b.n	8007014 <_malloc_r+0xb0>
 800705a:	605b      	str	r3, [r3, #4]
 800705c:	deff      	udf	#255	; 0xff
 800705e:	bf00      	nop
 8007060:	2000229c 	.word	0x2000229c

08007064 <__malloc_lock>:
 8007064:	4801      	ldr	r0, [pc, #4]	; (800706c <__malloc_lock+0x8>)
 8007066:	f7ff bf0f 	b.w	8006e88 <__retarget_lock_acquire_recursive>
 800706a:	bf00      	nop
 800706c:	20002298 	.word	0x20002298

08007070 <__malloc_unlock>:
 8007070:	4801      	ldr	r0, [pc, #4]	; (8007078 <__malloc_unlock+0x8>)
 8007072:	f7ff bf0a 	b.w	8006e8a <__retarget_lock_release_recursive>
 8007076:	bf00      	nop
 8007078:	20002298 	.word	0x20002298

0800707c <__ssputs_r>:
 800707c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007080:	688e      	ldr	r6, [r1, #8]
 8007082:	461f      	mov	r7, r3
 8007084:	42be      	cmp	r6, r7
 8007086:	680b      	ldr	r3, [r1, #0]
 8007088:	4682      	mov	sl, r0
 800708a:	460c      	mov	r4, r1
 800708c:	4690      	mov	r8, r2
 800708e:	d82c      	bhi.n	80070ea <__ssputs_r+0x6e>
 8007090:	898a      	ldrh	r2, [r1, #12]
 8007092:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007096:	d026      	beq.n	80070e6 <__ssputs_r+0x6a>
 8007098:	6965      	ldr	r5, [r4, #20]
 800709a:	6909      	ldr	r1, [r1, #16]
 800709c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80070a0:	eba3 0901 	sub.w	r9, r3, r1
 80070a4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80070a8:	1c7b      	adds	r3, r7, #1
 80070aa:	444b      	add	r3, r9
 80070ac:	106d      	asrs	r5, r5, #1
 80070ae:	429d      	cmp	r5, r3
 80070b0:	bf38      	it	cc
 80070b2:	461d      	movcc	r5, r3
 80070b4:	0553      	lsls	r3, r2, #21
 80070b6:	d527      	bpl.n	8007108 <__ssputs_r+0x8c>
 80070b8:	4629      	mov	r1, r5
 80070ba:	f7ff ff53 	bl	8006f64 <_malloc_r>
 80070be:	4606      	mov	r6, r0
 80070c0:	b360      	cbz	r0, 800711c <__ssputs_r+0xa0>
 80070c2:	6921      	ldr	r1, [r4, #16]
 80070c4:	464a      	mov	r2, r9
 80070c6:	f000 faeb 	bl	80076a0 <memcpy>
 80070ca:	89a3      	ldrh	r3, [r4, #12]
 80070cc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80070d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80070d4:	81a3      	strh	r3, [r4, #12]
 80070d6:	6126      	str	r6, [r4, #16]
 80070d8:	6165      	str	r5, [r4, #20]
 80070da:	444e      	add	r6, r9
 80070dc:	eba5 0509 	sub.w	r5, r5, r9
 80070e0:	6026      	str	r6, [r4, #0]
 80070e2:	60a5      	str	r5, [r4, #8]
 80070e4:	463e      	mov	r6, r7
 80070e6:	42be      	cmp	r6, r7
 80070e8:	d900      	bls.n	80070ec <__ssputs_r+0x70>
 80070ea:	463e      	mov	r6, r7
 80070ec:	6820      	ldr	r0, [r4, #0]
 80070ee:	4632      	mov	r2, r6
 80070f0:	4641      	mov	r1, r8
 80070f2:	f000 faab 	bl	800764c <memmove>
 80070f6:	68a3      	ldr	r3, [r4, #8]
 80070f8:	1b9b      	subs	r3, r3, r6
 80070fa:	60a3      	str	r3, [r4, #8]
 80070fc:	6823      	ldr	r3, [r4, #0]
 80070fe:	4433      	add	r3, r6
 8007100:	6023      	str	r3, [r4, #0]
 8007102:	2000      	movs	r0, #0
 8007104:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007108:	462a      	mov	r2, r5
 800710a:	f000 fad7 	bl	80076bc <_realloc_r>
 800710e:	4606      	mov	r6, r0
 8007110:	2800      	cmp	r0, #0
 8007112:	d1e0      	bne.n	80070d6 <__ssputs_r+0x5a>
 8007114:	6921      	ldr	r1, [r4, #16]
 8007116:	4650      	mov	r0, sl
 8007118:	f7ff feb8 	bl	8006e8c <_free_r>
 800711c:	230c      	movs	r3, #12
 800711e:	f8ca 3000 	str.w	r3, [sl]
 8007122:	89a3      	ldrh	r3, [r4, #12]
 8007124:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007128:	81a3      	strh	r3, [r4, #12]
 800712a:	f04f 30ff 	mov.w	r0, #4294967295
 800712e:	e7e9      	b.n	8007104 <__ssputs_r+0x88>

08007130 <_svfiprintf_r>:
 8007130:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007134:	4698      	mov	r8, r3
 8007136:	898b      	ldrh	r3, [r1, #12]
 8007138:	061b      	lsls	r3, r3, #24
 800713a:	b09d      	sub	sp, #116	; 0x74
 800713c:	4607      	mov	r7, r0
 800713e:	460d      	mov	r5, r1
 8007140:	4614      	mov	r4, r2
 8007142:	d50e      	bpl.n	8007162 <_svfiprintf_r+0x32>
 8007144:	690b      	ldr	r3, [r1, #16]
 8007146:	b963      	cbnz	r3, 8007162 <_svfiprintf_r+0x32>
 8007148:	2140      	movs	r1, #64	; 0x40
 800714a:	f7ff ff0b 	bl	8006f64 <_malloc_r>
 800714e:	6028      	str	r0, [r5, #0]
 8007150:	6128      	str	r0, [r5, #16]
 8007152:	b920      	cbnz	r0, 800715e <_svfiprintf_r+0x2e>
 8007154:	230c      	movs	r3, #12
 8007156:	603b      	str	r3, [r7, #0]
 8007158:	f04f 30ff 	mov.w	r0, #4294967295
 800715c:	e0d0      	b.n	8007300 <_svfiprintf_r+0x1d0>
 800715e:	2340      	movs	r3, #64	; 0x40
 8007160:	616b      	str	r3, [r5, #20]
 8007162:	2300      	movs	r3, #0
 8007164:	9309      	str	r3, [sp, #36]	; 0x24
 8007166:	2320      	movs	r3, #32
 8007168:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800716c:	f8cd 800c 	str.w	r8, [sp, #12]
 8007170:	2330      	movs	r3, #48	; 0x30
 8007172:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8007318 <_svfiprintf_r+0x1e8>
 8007176:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800717a:	f04f 0901 	mov.w	r9, #1
 800717e:	4623      	mov	r3, r4
 8007180:	469a      	mov	sl, r3
 8007182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007186:	b10a      	cbz	r2, 800718c <_svfiprintf_r+0x5c>
 8007188:	2a25      	cmp	r2, #37	; 0x25
 800718a:	d1f9      	bne.n	8007180 <_svfiprintf_r+0x50>
 800718c:	ebba 0b04 	subs.w	fp, sl, r4
 8007190:	d00b      	beq.n	80071aa <_svfiprintf_r+0x7a>
 8007192:	465b      	mov	r3, fp
 8007194:	4622      	mov	r2, r4
 8007196:	4629      	mov	r1, r5
 8007198:	4638      	mov	r0, r7
 800719a:	f7ff ff6f 	bl	800707c <__ssputs_r>
 800719e:	3001      	adds	r0, #1
 80071a0:	f000 80a9 	beq.w	80072f6 <_svfiprintf_r+0x1c6>
 80071a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80071a6:	445a      	add	r2, fp
 80071a8:	9209      	str	r2, [sp, #36]	; 0x24
 80071aa:	f89a 3000 	ldrb.w	r3, [sl]
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	f000 80a1 	beq.w	80072f6 <_svfiprintf_r+0x1c6>
 80071b4:	2300      	movs	r3, #0
 80071b6:	f04f 32ff 	mov.w	r2, #4294967295
 80071ba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80071be:	f10a 0a01 	add.w	sl, sl, #1
 80071c2:	9304      	str	r3, [sp, #16]
 80071c4:	9307      	str	r3, [sp, #28]
 80071c6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80071ca:	931a      	str	r3, [sp, #104]	; 0x68
 80071cc:	4654      	mov	r4, sl
 80071ce:	2205      	movs	r2, #5
 80071d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80071d4:	4850      	ldr	r0, [pc, #320]	; (8007318 <_svfiprintf_r+0x1e8>)
 80071d6:	f7f9 f803 	bl	80001e0 <memchr>
 80071da:	9a04      	ldr	r2, [sp, #16]
 80071dc:	b9d8      	cbnz	r0, 8007216 <_svfiprintf_r+0xe6>
 80071de:	06d0      	lsls	r0, r2, #27
 80071e0:	bf44      	itt	mi
 80071e2:	2320      	movmi	r3, #32
 80071e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80071e8:	0711      	lsls	r1, r2, #28
 80071ea:	bf44      	itt	mi
 80071ec:	232b      	movmi	r3, #43	; 0x2b
 80071ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80071f2:	f89a 3000 	ldrb.w	r3, [sl]
 80071f6:	2b2a      	cmp	r3, #42	; 0x2a
 80071f8:	d015      	beq.n	8007226 <_svfiprintf_r+0xf6>
 80071fa:	9a07      	ldr	r2, [sp, #28]
 80071fc:	4654      	mov	r4, sl
 80071fe:	2000      	movs	r0, #0
 8007200:	f04f 0c0a 	mov.w	ip, #10
 8007204:	4621      	mov	r1, r4
 8007206:	f811 3b01 	ldrb.w	r3, [r1], #1
 800720a:	3b30      	subs	r3, #48	; 0x30
 800720c:	2b09      	cmp	r3, #9
 800720e:	d94d      	bls.n	80072ac <_svfiprintf_r+0x17c>
 8007210:	b1b0      	cbz	r0, 8007240 <_svfiprintf_r+0x110>
 8007212:	9207      	str	r2, [sp, #28]
 8007214:	e014      	b.n	8007240 <_svfiprintf_r+0x110>
 8007216:	eba0 0308 	sub.w	r3, r0, r8
 800721a:	fa09 f303 	lsl.w	r3, r9, r3
 800721e:	4313      	orrs	r3, r2
 8007220:	9304      	str	r3, [sp, #16]
 8007222:	46a2      	mov	sl, r4
 8007224:	e7d2      	b.n	80071cc <_svfiprintf_r+0x9c>
 8007226:	9b03      	ldr	r3, [sp, #12]
 8007228:	1d19      	adds	r1, r3, #4
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	9103      	str	r1, [sp, #12]
 800722e:	2b00      	cmp	r3, #0
 8007230:	bfbb      	ittet	lt
 8007232:	425b      	neglt	r3, r3
 8007234:	f042 0202 	orrlt.w	r2, r2, #2
 8007238:	9307      	strge	r3, [sp, #28]
 800723a:	9307      	strlt	r3, [sp, #28]
 800723c:	bfb8      	it	lt
 800723e:	9204      	strlt	r2, [sp, #16]
 8007240:	7823      	ldrb	r3, [r4, #0]
 8007242:	2b2e      	cmp	r3, #46	; 0x2e
 8007244:	d10c      	bne.n	8007260 <_svfiprintf_r+0x130>
 8007246:	7863      	ldrb	r3, [r4, #1]
 8007248:	2b2a      	cmp	r3, #42	; 0x2a
 800724a:	d134      	bne.n	80072b6 <_svfiprintf_r+0x186>
 800724c:	9b03      	ldr	r3, [sp, #12]
 800724e:	1d1a      	adds	r2, r3, #4
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	9203      	str	r2, [sp, #12]
 8007254:	2b00      	cmp	r3, #0
 8007256:	bfb8      	it	lt
 8007258:	f04f 33ff 	movlt.w	r3, #4294967295
 800725c:	3402      	adds	r4, #2
 800725e:	9305      	str	r3, [sp, #20]
 8007260:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8007328 <_svfiprintf_r+0x1f8>
 8007264:	7821      	ldrb	r1, [r4, #0]
 8007266:	2203      	movs	r2, #3
 8007268:	4650      	mov	r0, sl
 800726a:	f7f8 ffb9 	bl	80001e0 <memchr>
 800726e:	b138      	cbz	r0, 8007280 <_svfiprintf_r+0x150>
 8007270:	9b04      	ldr	r3, [sp, #16]
 8007272:	eba0 000a 	sub.w	r0, r0, sl
 8007276:	2240      	movs	r2, #64	; 0x40
 8007278:	4082      	lsls	r2, r0
 800727a:	4313      	orrs	r3, r2
 800727c:	3401      	adds	r4, #1
 800727e:	9304      	str	r3, [sp, #16]
 8007280:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007284:	4825      	ldr	r0, [pc, #148]	; (800731c <_svfiprintf_r+0x1ec>)
 8007286:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800728a:	2206      	movs	r2, #6
 800728c:	f7f8 ffa8 	bl	80001e0 <memchr>
 8007290:	2800      	cmp	r0, #0
 8007292:	d038      	beq.n	8007306 <_svfiprintf_r+0x1d6>
 8007294:	4b22      	ldr	r3, [pc, #136]	; (8007320 <_svfiprintf_r+0x1f0>)
 8007296:	bb1b      	cbnz	r3, 80072e0 <_svfiprintf_r+0x1b0>
 8007298:	9b03      	ldr	r3, [sp, #12]
 800729a:	3307      	adds	r3, #7
 800729c:	f023 0307 	bic.w	r3, r3, #7
 80072a0:	3308      	adds	r3, #8
 80072a2:	9303      	str	r3, [sp, #12]
 80072a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80072a6:	4433      	add	r3, r6
 80072a8:	9309      	str	r3, [sp, #36]	; 0x24
 80072aa:	e768      	b.n	800717e <_svfiprintf_r+0x4e>
 80072ac:	fb0c 3202 	mla	r2, ip, r2, r3
 80072b0:	460c      	mov	r4, r1
 80072b2:	2001      	movs	r0, #1
 80072b4:	e7a6      	b.n	8007204 <_svfiprintf_r+0xd4>
 80072b6:	2300      	movs	r3, #0
 80072b8:	3401      	adds	r4, #1
 80072ba:	9305      	str	r3, [sp, #20]
 80072bc:	4619      	mov	r1, r3
 80072be:	f04f 0c0a 	mov.w	ip, #10
 80072c2:	4620      	mov	r0, r4
 80072c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80072c8:	3a30      	subs	r2, #48	; 0x30
 80072ca:	2a09      	cmp	r2, #9
 80072cc:	d903      	bls.n	80072d6 <_svfiprintf_r+0x1a6>
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d0c6      	beq.n	8007260 <_svfiprintf_r+0x130>
 80072d2:	9105      	str	r1, [sp, #20]
 80072d4:	e7c4      	b.n	8007260 <_svfiprintf_r+0x130>
 80072d6:	fb0c 2101 	mla	r1, ip, r1, r2
 80072da:	4604      	mov	r4, r0
 80072dc:	2301      	movs	r3, #1
 80072de:	e7f0      	b.n	80072c2 <_svfiprintf_r+0x192>
 80072e0:	ab03      	add	r3, sp, #12
 80072e2:	9300      	str	r3, [sp, #0]
 80072e4:	462a      	mov	r2, r5
 80072e6:	4b0f      	ldr	r3, [pc, #60]	; (8007324 <_svfiprintf_r+0x1f4>)
 80072e8:	a904      	add	r1, sp, #16
 80072ea:	4638      	mov	r0, r7
 80072ec:	f3af 8000 	nop.w
 80072f0:	1c42      	adds	r2, r0, #1
 80072f2:	4606      	mov	r6, r0
 80072f4:	d1d6      	bne.n	80072a4 <_svfiprintf_r+0x174>
 80072f6:	89ab      	ldrh	r3, [r5, #12]
 80072f8:	065b      	lsls	r3, r3, #25
 80072fa:	f53f af2d 	bmi.w	8007158 <_svfiprintf_r+0x28>
 80072fe:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007300:	b01d      	add	sp, #116	; 0x74
 8007302:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007306:	ab03      	add	r3, sp, #12
 8007308:	9300      	str	r3, [sp, #0]
 800730a:	462a      	mov	r2, r5
 800730c:	4b05      	ldr	r3, [pc, #20]	; (8007324 <_svfiprintf_r+0x1f4>)
 800730e:	a904      	add	r1, sp, #16
 8007310:	4638      	mov	r0, r7
 8007312:	f000 f879 	bl	8007408 <_printf_i>
 8007316:	e7eb      	b.n	80072f0 <_svfiprintf_r+0x1c0>
 8007318:	080077b0 	.word	0x080077b0
 800731c:	080077ba 	.word	0x080077ba
 8007320:	00000000 	.word	0x00000000
 8007324:	0800707d 	.word	0x0800707d
 8007328:	080077b6 	.word	0x080077b6

0800732c <_printf_common>:
 800732c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007330:	4616      	mov	r6, r2
 8007332:	4699      	mov	r9, r3
 8007334:	688a      	ldr	r2, [r1, #8]
 8007336:	690b      	ldr	r3, [r1, #16]
 8007338:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800733c:	4293      	cmp	r3, r2
 800733e:	bfb8      	it	lt
 8007340:	4613      	movlt	r3, r2
 8007342:	6033      	str	r3, [r6, #0]
 8007344:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007348:	4607      	mov	r7, r0
 800734a:	460c      	mov	r4, r1
 800734c:	b10a      	cbz	r2, 8007352 <_printf_common+0x26>
 800734e:	3301      	adds	r3, #1
 8007350:	6033      	str	r3, [r6, #0]
 8007352:	6823      	ldr	r3, [r4, #0]
 8007354:	0699      	lsls	r1, r3, #26
 8007356:	bf42      	ittt	mi
 8007358:	6833      	ldrmi	r3, [r6, #0]
 800735a:	3302      	addmi	r3, #2
 800735c:	6033      	strmi	r3, [r6, #0]
 800735e:	6825      	ldr	r5, [r4, #0]
 8007360:	f015 0506 	ands.w	r5, r5, #6
 8007364:	d106      	bne.n	8007374 <_printf_common+0x48>
 8007366:	f104 0a19 	add.w	sl, r4, #25
 800736a:	68e3      	ldr	r3, [r4, #12]
 800736c:	6832      	ldr	r2, [r6, #0]
 800736e:	1a9b      	subs	r3, r3, r2
 8007370:	42ab      	cmp	r3, r5
 8007372:	dc26      	bgt.n	80073c2 <_printf_common+0x96>
 8007374:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007378:	1e13      	subs	r3, r2, #0
 800737a:	6822      	ldr	r2, [r4, #0]
 800737c:	bf18      	it	ne
 800737e:	2301      	movne	r3, #1
 8007380:	0692      	lsls	r2, r2, #26
 8007382:	d42b      	bmi.n	80073dc <_printf_common+0xb0>
 8007384:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007388:	4649      	mov	r1, r9
 800738a:	4638      	mov	r0, r7
 800738c:	47c0      	blx	r8
 800738e:	3001      	adds	r0, #1
 8007390:	d01e      	beq.n	80073d0 <_printf_common+0xa4>
 8007392:	6823      	ldr	r3, [r4, #0]
 8007394:	6922      	ldr	r2, [r4, #16]
 8007396:	f003 0306 	and.w	r3, r3, #6
 800739a:	2b04      	cmp	r3, #4
 800739c:	bf02      	ittt	eq
 800739e:	68e5      	ldreq	r5, [r4, #12]
 80073a0:	6833      	ldreq	r3, [r6, #0]
 80073a2:	1aed      	subeq	r5, r5, r3
 80073a4:	68a3      	ldr	r3, [r4, #8]
 80073a6:	bf0c      	ite	eq
 80073a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80073ac:	2500      	movne	r5, #0
 80073ae:	4293      	cmp	r3, r2
 80073b0:	bfc4      	itt	gt
 80073b2:	1a9b      	subgt	r3, r3, r2
 80073b4:	18ed      	addgt	r5, r5, r3
 80073b6:	2600      	movs	r6, #0
 80073b8:	341a      	adds	r4, #26
 80073ba:	42b5      	cmp	r5, r6
 80073bc:	d11a      	bne.n	80073f4 <_printf_common+0xc8>
 80073be:	2000      	movs	r0, #0
 80073c0:	e008      	b.n	80073d4 <_printf_common+0xa8>
 80073c2:	2301      	movs	r3, #1
 80073c4:	4652      	mov	r2, sl
 80073c6:	4649      	mov	r1, r9
 80073c8:	4638      	mov	r0, r7
 80073ca:	47c0      	blx	r8
 80073cc:	3001      	adds	r0, #1
 80073ce:	d103      	bne.n	80073d8 <_printf_common+0xac>
 80073d0:	f04f 30ff 	mov.w	r0, #4294967295
 80073d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80073d8:	3501      	adds	r5, #1
 80073da:	e7c6      	b.n	800736a <_printf_common+0x3e>
 80073dc:	18e1      	adds	r1, r4, r3
 80073de:	1c5a      	adds	r2, r3, #1
 80073e0:	2030      	movs	r0, #48	; 0x30
 80073e2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80073e6:	4422      	add	r2, r4
 80073e8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80073ec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80073f0:	3302      	adds	r3, #2
 80073f2:	e7c7      	b.n	8007384 <_printf_common+0x58>
 80073f4:	2301      	movs	r3, #1
 80073f6:	4622      	mov	r2, r4
 80073f8:	4649      	mov	r1, r9
 80073fa:	4638      	mov	r0, r7
 80073fc:	47c0      	blx	r8
 80073fe:	3001      	adds	r0, #1
 8007400:	d0e6      	beq.n	80073d0 <_printf_common+0xa4>
 8007402:	3601      	adds	r6, #1
 8007404:	e7d9      	b.n	80073ba <_printf_common+0x8e>
	...

08007408 <_printf_i>:
 8007408:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800740c:	7e0f      	ldrb	r7, [r1, #24]
 800740e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007410:	2f78      	cmp	r7, #120	; 0x78
 8007412:	4691      	mov	r9, r2
 8007414:	4680      	mov	r8, r0
 8007416:	460c      	mov	r4, r1
 8007418:	469a      	mov	sl, r3
 800741a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800741e:	d807      	bhi.n	8007430 <_printf_i+0x28>
 8007420:	2f62      	cmp	r7, #98	; 0x62
 8007422:	d80a      	bhi.n	800743a <_printf_i+0x32>
 8007424:	2f00      	cmp	r7, #0
 8007426:	f000 80d4 	beq.w	80075d2 <_printf_i+0x1ca>
 800742a:	2f58      	cmp	r7, #88	; 0x58
 800742c:	f000 80c0 	beq.w	80075b0 <_printf_i+0x1a8>
 8007430:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007434:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007438:	e03a      	b.n	80074b0 <_printf_i+0xa8>
 800743a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800743e:	2b15      	cmp	r3, #21
 8007440:	d8f6      	bhi.n	8007430 <_printf_i+0x28>
 8007442:	a101      	add	r1, pc, #4	; (adr r1, 8007448 <_printf_i+0x40>)
 8007444:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007448:	080074a1 	.word	0x080074a1
 800744c:	080074b5 	.word	0x080074b5
 8007450:	08007431 	.word	0x08007431
 8007454:	08007431 	.word	0x08007431
 8007458:	08007431 	.word	0x08007431
 800745c:	08007431 	.word	0x08007431
 8007460:	080074b5 	.word	0x080074b5
 8007464:	08007431 	.word	0x08007431
 8007468:	08007431 	.word	0x08007431
 800746c:	08007431 	.word	0x08007431
 8007470:	08007431 	.word	0x08007431
 8007474:	080075b9 	.word	0x080075b9
 8007478:	080074e1 	.word	0x080074e1
 800747c:	08007573 	.word	0x08007573
 8007480:	08007431 	.word	0x08007431
 8007484:	08007431 	.word	0x08007431
 8007488:	080075db 	.word	0x080075db
 800748c:	08007431 	.word	0x08007431
 8007490:	080074e1 	.word	0x080074e1
 8007494:	08007431 	.word	0x08007431
 8007498:	08007431 	.word	0x08007431
 800749c:	0800757b 	.word	0x0800757b
 80074a0:	682b      	ldr	r3, [r5, #0]
 80074a2:	1d1a      	adds	r2, r3, #4
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	602a      	str	r2, [r5, #0]
 80074a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80074ac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80074b0:	2301      	movs	r3, #1
 80074b2:	e09f      	b.n	80075f4 <_printf_i+0x1ec>
 80074b4:	6820      	ldr	r0, [r4, #0]
 80074b6:	682b      	ldr	r3, [r5, #0]
 80074b8:	0607      	lsls	r7, r0, #24
 80074ba:	f103 0104 	add.w	r1, r3, #4
 80074be:	6029      	str	r1, [r5, #0]
 80074c0:	d501      	bpl.n	80074c6 <_printf_i+0xbe>
 80074c2:	681e      	ldr	r6, [r3, #0]
 80074c4:	e003      	b.n	80074ce <_printf_i+0xc6>
 80074c6:	0646      	lsls	r6, r0, #25
 80074c8:	d5fb      	bpl.n	80074c2 <_printf_i+0xba>
 80074ca:	f9b3 6000 	ldrsh.w	r6, [r3]
 80074ce:	2e00      	cmp	r6, #0
 80074d0:	da03      	bge.n	80074da <_printf_i+0xd2>
 80074d2:	232d      	movs	r3, #45	; 0x2d
 80074d4:	4276      	negs	r6, r6
 80074d6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80074da:	485a      	ldr	r0, [pc, #360]	; (8007644 <_printf_i+0x23c>)
 80074dc:	230a      	movs	r3, #10
 80074de:	e012      	b.n	8007506 <_printf_i+0xfe>
 80074e0:	682b      	ldr	r3, [r5, #0]
 80074e2:	6820      	ldr	r0, [r4, #0]
 80074e4:	1d19      	adds	r1, r3, #4
 80074e6:	6029      	str	r1, [r5, #0]
 80074e8:	0605      	lsls	r5, r0, #24
 80074ea:	d501      	bpl.n	80074f0 <_printf_i+0xe8>
 80074ec:	681e      	ldr	r6, [r3, #0]
 80074ee:	e002      	b.n	80074f6 <_printf_i+0xee>
 80074f0:	0641      	lsls	r1, r0, #25
 80074f2:	d5fb      	bpl.n	80074ec <_printf_i+0xe4>
 80074f4:	881e      	ldrh	r6, [r3, #0]
 80074f6:	4853      	ldr	r0, [pc, #332]	; (8007644 <_printf_i+0x23c>)
 80074f8:	2f6f      	cmp	r7, #111	; 0x6f
 80074fa:	bf0c      	ite	eq
 80074fc:	2308      	moveq	r3, #8
 80074fe:	230a      	movne	r3, #10
 8007500:	2100      	movs	r1, #0
 8007502:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007506:	6865      	ldr	r5, [r4, #4]
 8007508:	60a5      	str	r5, [r4, #8]
 800750a:	2d00      	cmp	r5, #0
 800750c:	bfa2      	ittt	ge
 800750e:	6821      	ldrge	r1, [r4, #0]
 8007510:	f021 0104 	bicge.w	r1, r1, #4
 8007514:	6021      	strge	r1, [r4, #0]
 8007516:	b90e      	cbnz	r6, 800751c <_printf_i+0x114>
 8007518:	2d00      	cmp	r5, #0
 800751a:	d04b      	beq.n	80075b4 <_printf_i+0x1ac>
 800751c:	4615      	mov	r5, r2
 800751e:	fbb6 f1f3 	udiv	r1, r6, r3
 8007522:	fb03 6711 	mls	r7, r3, r1, r6
 8007526:	5dc7      	ldrb	r7, [r0, r7]
 8007528:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800752c:	4637      	mov	r7, r6
 800752e:	42bb      	cmp	r3, r7
 8007530:	460e      	mov	r6, r1
 8007532:	d9f4      	bls.n	800751e <_printf_i+0x116>
 8007534:	2b08      	cmp	r3, #8
 8007536:	d10b      	bne.n	8007550 <_printf_i+0x148>
 8007538:	6823      	ldr	r3, [r4, #0]
 800753a:	07de      	lsls	r6, r3, #31
 800753c:	d508      	bpl.n	8007550 <_printf_i+0x148>
 800753e:	6923      	ldr	r3, [r4, #16]
 8007540:	6861      	ldr	r1, [r4, #4]
 8007542:	4299      	cmp	r1, r3
 8007544:	bfde      	ittt	le
 8007546:	2330      	movle	r3, #48	; 0x30
 8007548:	f805 3c01 	strble.w	r3, [r5, #-1]
 800754c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007550:	1b52      	subs	r2, r2, r5
 8007552:	6122      	str	r2, [r4, #16]
 8007554:	f8cd a000 	str.w	sl, [sp]
 8007558:	464b      	mov	r3, r9
 800755a:	aa03      	add	r2, sp, #12
 800755c:	4621      	mov	r1, r4
 800755e:	4640      	mov	r0, r8
 8007560:	f7ff fee4 	bl	800732c <_printf_common>
 8007564:	3001      	adds	r0, #1
 8007566:	d14a      	bne.n	80075fe <_printf_i+0x1f6>
 8007568:	f04f 30ff 	mov.w	r0, #4294967295
 800756c:	b004      	add	sp, #16
 800756e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007572:	6823      	ldr	r3, [r4, #0]
 8007574:	f043 0320 	orr.w	r3, r3, #32
 8007578:	6023      	str	r3, [r4, #0]
 800757a:	4833      	ldr	r0, [pc, #204]	; (8007648 <_printf_i+0x240>)
 800757c:	2778      	movs	r7, #120	; 0x78
 800757e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007582:	6823      	ldr	r3, [r4, #0]
 8007584:	6829      	ldr	r1, [r5, #0]
 8007586:	061f      	lsls	r7, r3, #24
 8007588:	f851 6b04 	ldr.w	r6, [r1], #4
 800758c:	d402      	bmi.n	8007594 <_printf_i+0x18c>
 800758e:	065f      	lsls	r7, r3, #25
 8007590:	bf48      	it	mi
 8007592:	b2b6      	uxthmi	r6, r6
 8007594:	07df      	lsls	r7, r3, #31
 8007596:	bf48      	it	mi
 8007598:	f043 0320 	orrmi.w	r3, r3, #32
 800759c:	6029      	str	r1, [r5, #0]
 800759e:	bf48      	it	mi
 80075a0:	6023      	strmi	r3, [r4, #0]
 80075a2:	b91e      	cbnz	r6, 80075ac <_printf_i+0x1a4>
 80075a4:	6823      	ldr	r3, [r4, #0]
 80075a6:	f023 0320 	bic.w	r3, r3, #32
 80075aa:	6023      	str	r3, [r4, #0]
 80075ac:	2310      	movs	r3, #16
 80075ae:	e7a7      	b.n	8007500 <_printf_i+0xf8>
 80075b0:	4824      	ldr	r0, [pc, #144]	; (8007644 <_printf_i+0x23c>)
 80075b2:	e7e4      	b.n	800757e <_printf_i+0x176>
 80075b4:	4615      	mov	r5, r2
 80075b6:	e7bd      	b.n	8007534 <_printf_i+0x12c>
 80075b8:	682b      	ldr	r3, [r5, #0]
 80075ba:	6826      	ldr	r6, [r4, #0]
 80075bc:	6961      	ldr	r1, [r4, #20]
 80075be:	1d18      	adds	r0, r3, #4
 80075c0:	6028      	str	r0, [r5, #0]
 80075c2:	0635      	lsls	r5, r6, #24
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	d501      	bpl.n	80075cc <_printf_i+0x1c4>
 80075c8:	6019      	str	r1, [r3, #0]
 80075ca:	e002      	b.n	80075d2 <_printf_i+0x1ca>
 80075cc:	0670      	lsls	r0, r6, #25
 80075ce:	d5fb      	bpl.n	80075c8 <_printf_i+0x1c0>
 80075d0:	8019      	strh	r1, [r3, #0]
 80075d2:	2300      	movs	r3, #0
 80075d4:	6123      	str	r3, [r4, #16]
 80075d6:	4615      	mov	r5, r2
 80075d8:	e7bc      	b.n	8007554 <_printf_i+0x14c>
 80075da:	682b      	ldr	r3, [r5, #0]
 80075dc:	1d1a      	adds	r2, r3, #4
 80075de:	602a      	str	r2, [r5, #0]
 80075e0:	681d      	ldr	r5, [r3, #0]
 80075e2:	6862      	ldr	r2, [r4, #4]
 80075e4:	2100      	movs	r1, #0
 80075e6:	4628      	mov	r0, r5
 80075e8:	f7f8 fdfa 	bl	80001e0 <memchr>
 80075ec:	b108      	cbz	r0, 80075f2 <_printf_i+0x1ea>
 80075ee:	1b40      	subs	r0, r0, r5
 80075f0:	6060      	str	r0, [r4, #4]
 80075f2:	6863      	ldr	r3, [r4, #4]
 80075f4:	6123      	str	r3, [r4, #16]
 80075f6:	2300      	movs	r3, #0
 80075f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80075fc:	e7aa      	b.n	8007554 <_printf_i+0x14c>
 80075fe:	6923      	ldr	r3, [r4, #16]
 8007600:	462a      	mov	r2, r5
 8007602:	4649      	mov	r1, r9
 8007604:	4640      	mov	r0, r8
 8007606:	47d0      	blx	sl
 8007608:	3001      	adds	r0, #1
 800760a:	d0ad      	beq.n	8007568 <_printf_i+0x160>
 800760c:	6823      	ldr	r3, [r4, #0]
 800760e:	079b      	lsls	r3, r3, #30
 8007610:	d413      	bmi.n	800763a <_printf_i+0x232>
 8007612:	68e0      	ldr	r0, [r4, #12]
 8007614:	9b03      	ldr	r3, [sp, #12]
 8007616:	4298      	cmp	r0, r3
 8007618:	bfb8      	it	lt
 800761a:	4618      	movlt	r0, r3
 800761c:	e7a6      	b.n	800756c <_printf_i+0x164>
 800761e:	2301      	movs	r3, #1
 8007620:	4632      	mov	r2, r6
 8007622:	4649      	mov	r1, r9
 8007624:	4640      	mov	r0, r8
 8007626:	47d0      	blx	sl
 8007628:	3001      	adds	r0, #1
 800762a:	d09d      	beq.n	8007568 <_printf_i+0x160>
 800762c:	3501      	adds	r5, #1
 800762e:	68e3      	ldr	r3, [r4, #12]
 8007630:	9903      	ldr	r1, [sp, #12]
 8007632:	1a5b      	subs	r3, r3, r1
 8007634:	42ab      	cmp	r3, r5
 8007636:	dcf2      	bgt.n	800761e <_printf_i+0x216>
 8007638:	e7eb      	b.n	8007612 <_printf_i+0x20a>
 800763a:	2500      	movs	r5, #0
 800763c:	f104 0619 	add.w	r6, r4, #25
 8007640:	e7f5      	b.n	800762e <_printf_i+0x226>
 8007642:	bf00      	nop
 8007644:	080077c1 	.word	0x080077c1
 8007648:	080077d2 	.word	0x080077d2

0800764c <memmove>:
 800764c:	4288      	cmp	r0, r1
 800764e:	b510      	push	{r4, lr}
 8007650:	eb01 0402 	add.w	r4, r1, r2
 8007654:	d902      	bls.n	800765c <memmove+0x10>
 8007656:	4284      	cmp	r4, r0
 8007658:	4623      	mov	r3, r4
 800765a:	d807      	bhi.n	800766c <memmove+0x20>
 800765c:	1e43      	subs	r3, r0, #1
 800765e:	42a1      	cmp	r1, r4
 8007660:	d008      	beq.n	8007674 <memmove+0x28>
 8007662:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007666:	f803 2f01 	strb.w	r2, [r3, #1]!
 800766a:	e7f8      	b.n	800765e <memmove+0x12>
 800766c:	4402      	add	r2, r0
 800766e:	4601      	mov	r1, r0
 8007670:	428a      	cmp	r2, r1
 8007672:	d100      	bne.n	8007676 <memmove+0x2a>
 8007674:	bd10      	pop	{r4, pc}
 8007676:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800767a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800767e:	e7f7      	b.n	8007670 <memmove+0x24>

08007680 <_sbrk_r>:
 8007680:	b538      	push	{r3, r4, r5, lr}
 8007682:	4d06      	ldr	r5, [pc, #24]	; (800769c <_sbrk_r+0x1c>)
 8007684:	2300      	movs	r3, #0
 8007686:	4604      	mov	r4, r0
 8007688:	4608      	mov	r0, r1
 800768a:	602b      	str	r3, [r5, #0]
 800768c:	f7f9 f886 	bl	800079c <_sbrk>
 8007690:	1c43      	adds	r3, r0, #1
 8007692:	d102      	bne.n	800769a <_sbrk_r+0x1a>
 8007694:	682b      	ldr	r3, [r5, #0]
 8007696:	b103      	cbz	r3, 800769a <_sbrk_r+0x1a>
 8007698:	6023      	str	r3, [r4, #0]
 800769a:	bd38      	pop	{r3, r4, r5, pc}
 800769c:	20002294 	.word	0x20002294

080076a0 <memcpy>:
 80076a0:	440a      	add	r2, r1
 80076a2:	4291      	cmp	r1, r2
 80076a4:	f100 33ff 	add.w	r3, r0, #4294967295
 80076a8:	d100      	bne.n	80076ac <memcpy+0xc>
 80076aa:	4770      	bx	lr
 80076ac:	b510      	push	{r4, lr}
 80076ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 80076b2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80076b6:	4291      	cmp	r1, r2
 80076b8:	d1f9      	bne.n	80076ae <memcpy+0xe>
 80076ba:	bd10      	pop	{r4, pc}

080076bc <_realloc_r>:
 80076bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80076c0:	4680      	mov	r8, r0
 80076c2:	4614      	mov	r4, r2
 80076c4:	460e      	mov	r6, r1
 80076c6:	b921      	cbnz	r1, 80076d2 <_realloc_r+0x16>
 80076c8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80076cc:	4611      	mov	r1, r2
 80076ce:	f7ff bc49 	b.w	8006f64 <_malloc_r>
 80076d2:	b92a      	cbnz	r2, 80076e0 <_realloc_r+0x24>
 80076d4:	f7ff fbda 	bl	8006e8c <_free_r>
 80076d8:	4625      	mov	r5, r4
 80076da:	4628      	mov	r0, r5
 80076dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80076e0:	f000 f81b 	bl	800771a <_malloc_usable_size_r>
 80076e4:	4284      	cmp	r4, r0
 80076e6:	4607      	mov	r7, r0
 80076e8:	d802      	bhi.n	80076f0 <_realloc_r+0x34>
 80076ea:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80076ee:	d812      	bhi.n	8007716 <_realloc_r+0x5a>
 80076f0:	4621      	mov	r1, r4
 80076f2:	4640      	mov	r0, r8
 80076f4:	f7ff fc36 	bl	8006f64 <_malloc_r>
 80076f8:	4605      	mov	r5, r0
 80076fa:	2800      	cmp	r0, #0
 80076fc:	d0ed      	beq.n	80076da <_realloc_r+0x1e>
 80076fe:	42bc      	cmp	r4, r7
 8007700:	4622      	mov	r2, r4
 8007702:	4631      	mov	r1, r6
 8007704:	bf28      	it	cs
 8007706:	463a      	movcs	r2, r7
 8007708:	f7ff ffca 	bl	80076a0 <memcpy>
 800770c:	4631      	mov	r1, r6
 800770e:	4640      	mov	r0, r8
 8007710:	f7ff fbbc 	bl	8006e8c <_free_r>
 8007714:	e7e1      	b.n	80076da <_realloc_r+0x1e>
 8007716:	4635      	mov	r5, r6
 8007718:	e7df      	b.n	80076da <_realloc_r+0x1e>

0800771a <_malloc_usable_size_r>:
 800771a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800771e:	1f18      	subs	r0, r3, #4
 8007720:	2b00      	cmp	r3, #0
 8007722:	bfbc      	itt	lt
 8007724:	580b      	ldrlt	r3, [r1, r0]
 8007726:	18c0      	addlt	r0, r0, r3
 8007728:	4770      	bx	lr
	...

0800772c <_init>:
 800772c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800772e:	bf00      	nop
 8007730:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007732:	bc08      	pop	{r3}
 8007734:	469e      	mov	lr, r3
 8007736:	4770      	bx	lr

08007738 <_fini>:
 8007738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800773a:	bf00      	nop
 800773c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800773e:	bc08      	pop	{r3}
 8007740:	469e      	mov	lr, r3
 8007742:	4770      	bx	lr
