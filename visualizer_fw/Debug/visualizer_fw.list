
visualizer_fw.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00018fb0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000d024  08019180  08019180  00029180  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080261a4  080261a4  00040368  2**0
                  CONTENTS
  4 .ARM          00000008  080261a4  080261a4  000361a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080261ac  080261ac  00040368  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080261ac  080261ac  000361ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080261b0  080261b0  000361b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000368  20000000  080261b4  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006d64  20000380  0802651c  00040380  2**6
                  ALLOC
 10 ._user_heap_stack 00000604  200070e4  0802651c  000470e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00040368  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00040398  2**0
                  CONTENTS, READONLY
 13 .debug_info   00023f67  00000000  00000000  000403db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00006e80  00000000  00000000  00064342  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002050  00000000  00000000  0006b1c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000184b  00000000  00000000  0006d218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020557  00000000  00000000  0006ea63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0003075a  00000000  00000000  0008efba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00096fe9  00000000  00000000  000bf714  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00009664  00000000  00000000  00156700  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000081  00000000  00000000  0015fd64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000380 	.word	0x20000380
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08019138 	.word	0x08019138

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000384 	.word	0x20000384
 80001dc:	08019138 	.word	0x08019138

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2uiz>:
 8000b78:	004a      	lsls	r2, r1, #1
 8000b7a:	d211      	bcs.n	8000ba0 <__aeabi_d2uiz+0x28>
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d211      	bcs.n	8000ba6 <__aeabi_d2uiz+0x2e>
 8000b82:	d50d      	bpl.n	8000ba0 <__aeabi_d2uiz+0x28>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d40e      	bmi.n	8000bac <__aeabi_d2uiz+0x34>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_d2uiz+0x3a>
 8000bac:	f04f 30ff 	mov.w	r0, #4294967295
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0000 	mov.w	r0, #0
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b9a6 	b.w	8000fbc <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f83c 	bl	8000cf4 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__aeabi_d2lz>:
 8000c88:	b538      	push	{r3, r4, r5, lr}
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	4604      	mov	r4, r0
 8000c90:	460d      	mov	r5, r1
 8000c92:	f7ff ff33 	bl	8000afc <__aeabi_dcmplt>
 8000c96:	b928      	cbnz	r0, 8000ca4 <__aeabi_d2lz+0x1c>
 8000c98:	4620      	mov	r0, r4
 8000c9a:	4629      	mov	r1, r5
 8000c9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ca0:	f000 b80a 	b.w	8000cb8 <__aeabi_d2ulz>
 8000ca4:	4620      	mov	r0, r4
 8000ca6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000caa:	f000 f805 	bl	8000cb8 <__aeabi_d2ulz>
 8000cae:	4240      	negs	r0, r0
 8000cb0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cb4:	bd38      	pop	{r3, r4, r5, pc}
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_d2ulz>:
 8000cb8:	b5d0      	push	{r4, r6, r7, lr}
 8000cba:	4b0c      	ldr	r3, [pc, #48]	; (8000cec <__aeabi_d2ulz+0x34>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	4606      	mov	r6, r0
 8000cc0:	460f      	mov	r7, r1
 8000cc2:	f7ff fca9 	bl	8000618 <__aeabi_dmul>
 8000cc6:	f7ff ff57 	bl	8000b78 <__aeabi_d2uiz>
 8000cca:	4604      	mov	r4, r0
 8000ccc:	f7ff fc2a 	bl	8000524 <__aeabi_ui2d>
 8000cd0:	4b07      	ldr	r3, [pc, #28]	; (8000cf0 <__aeabi_d2ulz+0x38>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	f7ff fca0 	bl	8000618 <__aeabi_dmul>
 8000cd8:	4602      	mov	r2, r0
 8000cda:	460b      	mov	r3, r1
 8000cdc:	4630      	mov	r0, r6
 8000cde:	4639      	mov	r1, r7
 8000ce0:	f7ff fae2 	bl	80002a8 <__aeabi_dsub>
 8000ce4:	f7ff ff48 	bl	8000b78 <__aeabi_d2uiz>
 8000ce8:	4621      	mov	r1, r4
 8000cea:	bdd0      	pop	{r4, r6, r7, pc}
 8000cec:	3df00000 	.word	0x3df00000
 8000cf0:	41f00000 	.word	0x41f00000

08000cf4 <__udivmoddi4>:
 8000cf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cf8:	9e08      	ldr	r6, [sp, #32]
 8000cfa:	460d      	mov	r5, r1
 8000cfc:	4604      	mov	r4, r0
 8000cfe:	460f      	mov	r7, r1
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d14a      	bne.n	8000d9a <__udivmoddi4+0xa6>
 8000d04:	428a      	cmp	r2, r1
 8000d06:	4694      	mov	ip, r2
 8000d08:	d965      	bls.n	8000dd6 <__udivmoddi4+0xe2>
 8000d0a:	fab2 f382 	clz	r3, r2
 8000d0e:	b143      	cbz	r3, 8000d22 <__udivmoddi4+0x2e>
 8000d10:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d14:	f1c3 0220 	rsb	r2, r3, #32
 8000d18:	409f      	lsls	r7, r3
 8000d1a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d1e:	4317      	orrs	r7, r2
 8000d20:	409c      	lsls	r4, r3
 8000d22:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d26:	fa1f f58c 	uxth.w	r5, ip
 8000d2a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d2e:	0c22      	lsrs	r2, r4, #16
 8000d30:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d34:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d38:	fb01 f005 	mul.w	r0, r1, r5
 8000d3c:	4290      	cmp	r0, r2
 8000d3e:	d90a      	bls.n	8000d56 <__udivmoddi4+0x62>
 8000d40:	eb1c 0202 	adds.w	r2, ip, r2
 8000d44:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d48:	f080 811c 	bcs.w	8000f84 <__udivmoddi4+0x290>
 8000d4c:	4290      	cmp	r0, r2
 8000d4e:	f240 8119 	bls.w	8000f84 <__udivmoddi4+0x290>
 8000d52:	3902      	subs	r1, #2
 8000d54:	4462      	add	r2, ip
 8000d56:	1a12      	subs	r2, r2, r0
 8000d58:	b2a4      	uxth	r4, r4
 8000d5a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d5e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d62:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d66:	fb00 f505 	mul.w	r5, r0, r5
 8000d6a:	42a5      	cmp	r5, r4
 8000d6c:	d90a      	bls.n	8000d84 <__udivmoddi4+0x90>
 8000d6e:	eb1c 0404 	adds.w	r4, ip, r4
 8000d72:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d76:	f080 8107 	bcs.w	8000f88 <__udivmoddi4+0x294>
 8000d7a:	42a5      	cmp	r5, r4
 8000d7c:	f240 8104 	bls.w	8000f88 <__udivmoddi4+0x294>
 8000d80:	4464      	add	r4, ip
 8000d82:	3802      	subs	r0, #2
 8000d84:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d88:	1b64      	subs	r4, r4, r5
 8000d8a:	2100      	movs	r1, #0
 8000d8c:	b11e      	cbz	r6, 8000d96 <__udivmoddi4+0xa2>
 8000d8e:	40dc      	lsrs	r4, r3
 8000d90:	2300      	movs	r3, #0
 8000d92:	e9c6 4300 	strd	r4, r3, [r6]
 8000d96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d9a:	428b      	cmp	r3, r1
 8000d9c:	d908      	bls.n	8000db0 <__udivmoddi4+0xbc>
 8000d9e:	2e00      	cmp	r6, #0
 8000da0:	f000 80ed 	beq.w	8000f7e <__udivmoddi4+0x28a>
 8000da4:	2100      	movs	r1, #0
 8000da6:	e9c6 0500 	strd	r0, r5, [r6]
 8000daa:	4608      	mov	r0, r1
 8000dac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000db0:	fab3 f183 	clz	r1, r3
 8000db4:	2900      	cmp	r1, #0
 8000db6:	d149      	bne.n	8000e4c <__udivmoddi4+0x158>
 8000db8:	42ab      	cmp	r3, r5
 8000dba:	d302      	bcc.n	8000dc2 <__udivmoddi4+0xce>
 8000dbc:	4282      	cmp	r2, r0
 8000dbe:	f200 80f8 	bhi.w	8000fb2 <__udivmoddi4+0x2be>
 8000dc2:	1a84      	subs	r4, r0, r2
 8000dc4:	eb65 0203 	sbc.w	r2, r5, r3
 8000dc8:	2001      	movs	r0, #1
 8000dca:	4617      	mov	r7, r2
 8000dcc:	2e00      	cmp	r6, #0
 8000dce:	d0e2      	beq.n	8000d96 <__udivmoddi4+0xa2>
 8000dd0:	e9c6 4700 	strd	r4, r7, [r6]
 8000dd4:	e7df      	b.n	8000d96 <__udivmoddi4+0xa2>
 8000dd6:	b902      	cbnz	r2, 8000dda <__udivmoddi4+0xe6>
 8000dd8:	deff      	udf	#255	; 0xff
 8000dda:	fab2 f382 	clz	r3, r2
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	f040 8090 	bne.w	8000f04 <__udivmoddi4+0x210>
 8000de4:	1a8a      	subs	r2, r1, r2
 8000de6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dea:	fa1f fe8c 	uxth.w	lr, ip
 8000dee:	2101      	movs	r1, #1
 8000df0:	fbb2 f5f7 	udiv	r5, r2, r7
 8000df4:	fb07 2015 	mls	r0, r7, r5, r2
 8000df8:	0c22      	lsrs	r2, r4, #16
 8000dfa:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000dfe:	fb0e f005 	mul.w	r0, lr, r5
 8000e02:	4290      	cmp	r0, r2
 8000e04:	d908      	bls.n	8000e18 <__udivmoddi4+0x124>
 8000e06:	eb1c 0202 	adds.w	r2, ip, r2
 8000e0a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e0e:	d202      	bcs.n	8000e16 <__udivmoddi4+0x122>
 8000e10:	4290      	cmp	r0, r2
 8000e12:	f200 80cb 	bhi.w	8000fac <__udivmoddi4+0x2b8>
 8000e16:	4645      	mov	r5, r8
 8000e18:	1a12      	subs	r2, r2, r0
 8000e1a:	b2a4      	uxth	r4, r4
 8000e1c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e20:	fb07 2210 	mls	r2, r7, r0, r2
 8000e24:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e28:	fb0e fe00 	mul.w	lr, lr, r0
 8000e2c:	45a6      	cmp	lr, r4
 8000e2e:	d908      	bls.n	8000e42 <__udivmoddi4+0x14e>
 8000e30:	eb1c 0404 	adds.w	r4, ip, r4
 8000e34:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e38:	d202      	bcs.n	8000e40 <__udivmoddi4+0x14c>
 8000e3a:	45a6      	cmp	lr, r4
 8000e3c:	f200 80bb 	bhi.w	8000fb6 <__udivmoddi4+0x2c2>
 8000e40:	4610      	mov	r0, r2
 8000e42:	eba4 040e 	sub.w	r4, r4, lr
 8000e46:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e4a:	e79f      	b.n	8000d8c <__udivmoddi4+0x98>
 8000e4c:	f1c1 0720 	rsb	r7, r1, #32
 8000e50:	408b      	lsls	r3, r1
 8000e52:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e56:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e5a:	fa05 f401 	lsl.w	r4, r5, r1
 8000e5e:	fa20 f307 	lsr.w	r3, r0, r7
 8000e62:	40fd      	lsrs	r5, r7
 8000e64:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e68:	4323      	orrs	r3, r4
 8000e6a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e6e:	fa1f fe8c 	uxth.w	lr, ip
 8000e72:	fb09 5518 	mls	r5, r9, r8, r5
 8000e76:	0c1c      	lsrs	r4, r3, #16
 8000e78:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e7c:	fb08 f50e 	mul.w	r5, r8, lr
 8000e80:	42a5      	cmp	r5, r4
 8000e82:	fa02 f201 	lsl.w	r2, r2, r1
 8000e86:	fa00 f001 	lsl.w	r0, r0, r1
 8000e8a:	d90b      	bls.n	8000ea4 <__udivmoddi4+0x1b0>
 8000e8c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e90:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e94:	f080 8088 	bcs.w	8000fa8 <__udivmoddi4+0x2b4>
 8000e98:	42a5      	cmp	r5, r4
 8000e9a:	f240 8085 	bls.w	8000fa8 <__udivmoddi4+0x2b4>
 8000e9e:	f1a8 0802 	sub.w	r8, r8, #2
 8000ea2:	4464      	add	r4, ip
 8000ea4:	1b64      	subs	r4, r4, r5
 8000ea6:	b29d      	uxth	r5, r3
 8000ea8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000eac:	fb09 4413 	mls	r4, r9, r3, r4
 8000eb0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000eb4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000eb8:	45a6      	cmp	lr, r4
 8000eba:	d908      	bls.n	8000ece <__udivmoddi4+0x1da>
 8000ebc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ec0:	f103 35ff 	add.w	r5, r3, #4294967295
 8000ec4:	d26c      	bcs.n	8000fa0 <__udivmoddi4+0x2ac>
 8000ec6:	45a6      	cmp	lr, r4
 8000ec8:	d96a      	bls.n	8000fa0 <__udivmoddi4+0x2ac>
 8000eca:	3b02      	subs	r3, #2
 8000ecc:	4464      	add	r4, ip
 8000ece:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ed2:	fba3 9502 	umull	r9, r5, r3, r2
 8000ed6:	eba4 040e 	sub.w	r4, r4, lr
 8000eda:	42ac      	cmp	r4, r5
 8000edc:	46c8      	mov	r8, r9
 8000ede:	46ae      	mov	lr, r5
 8000ee0:	d356      	bcc.n	8000f90 <__udivmoddi4+0x29c>
 8000ee2:	d053      	beq.n	8000f8c <__udivmoddi4+0x298>
 8000ee4:	b156      	cbz	r6, 8000efc <__udivmoddi4+0x208>
 8000ee6:	ebb0 0208 	subs.w	r2, r0, r8
 8000eea:	eb64 040e 	sbc.w	r4, r4, lr
 8000eee:	fa04 f707 	lsl.w	r7, r4, r7
 8000ef2:	40ca      	lsrs	r2, r1
 8000ef4:	40cc      	lsrs	r4, r1
 8000ef6:	4317      	orrs	r7, r2
 8000ef8:	e9c6 7400 	strd	r7, r4, [r6]
 8000efc:	4618      	mov	r0, r3
 8000efe:	2100      	movs	r1, #0
 8000f00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f04:	f1c3 0120 	rsb	r1, r3, #32
 8000f08:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f0c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f10:	fa25 f101 	lsr.w	r1, r5, r1
 8000f14:	409d      	lsls	r5, r3
 8000f16:	432a      	orrs	r2, r5
 8000f18:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f1c:	fa1f fe8c 	uxth.w	lr, ip
 8000f20:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f24:	fb07 1510 	mls	r5, r7, r0, r1
 8000f28:	0c11      	lsrs	r1, r2, #16
 8000f2a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f2e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f32:	428d      	cmp	r5, r1
 8000f34:	fa04 f403 	lsl.w	r4, r4, r3
 8000f38:	d908      	bls.n	8000f4c <__udivmoddi4+0x258>
 8000f3a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f3e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f42:	d22f      	bcs.n	8000fa4 <__udivmoddi4+0x2b0>
 8000f44:	428d      	cmp	r5, r1
 8000f46:	d92d      	bls.n	8000fa4 <__udivmoddi4+0x2b0>
 8000f48:	3802      	subs	r0, #2
 8000f4a:	4461      	add	r1, ip
 8000f4c:	1b49      	subs	r1, r1, r5
 8000f4e:	b292      	uxth	r2, r2
 8000f50:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f54:	fb07 1115 	mls	r1, r7, r5, r1
 8000f58:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f5c:	fb05 f10e 	mul.w	r1, r5, lr
 8000f60:	4291      	cmp	r1, r2
 8000f62:	d908      	bls.n	8000f76 <__udivmoddi4+0x282>
 8000f64:	eb1c 0202 	adds.w	r2, ip, r2
 8000f68:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f6c:	d216      	bcs.n	8000f9c <__udivmoddi4+0x2a8>
 8000f6e:	4291      	cmp	r1, r2
 8000f70:	d914      	bls.n	8000f9c <__udivmoddi4+0x2a8>
 8000f72:	3d02      	subs	r5, #2
 8000f74:	4462      	add	r2, ip
 8000f76:	1a52      	subs	r2, r2, r1
 8000f78:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f7c:	e738      	b.n	8000df0 <__udivmoddi4+0xfc>
 8000f7e:	4631      	mov	r1, r6
 8000f80:	4630      	mov	r0, r6
 8000f82:	e708      	b.n	8000d96 <__udivmoddi4+0xa2>
 8000f84:	4639      	mov	r1, r7
 8000f86:	e6e6      	b.n	8000d56 <__udivmoddi4+0x62>
 8000f88:	4610      	mov	r0, r2
 8000f8a:	e6fb      	b.n	8000d84 <__udivmoddi4+0x90>
 8000f8c:	4548      	cmp	r0, r9
 8000f8e:	d2a9      	bcs.n	8000ee4 <__udivmoddi4+0x1f0>
 8000f90:	ebb9 0802 	subs.w	r8, r9, r2
 8000f94:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f98:	3b01      	subs	r3, #1
 8000f9a:	e7a3      	b.n	8000ee4 <__udivmoddi4+0x1f0>
 8000f9c:	4645      	mov	r5, r8
 8000f9e:	e7ea      	b.n	8000f76 <__udivmoddi4+0x282>
 8000fa0:	462b      	mov	r3, r5
 8000fa2:	e794      	b.n	8000ece <__udivmoddi4+0x1da>
 8000fa4:	4640      	mov	r0, r8
 8000fa6:	e7d1      	b.n	8000f4c <__udivmoddi4+0x258>
 8000fa8:	46d0      	mov	r8, sl
 8000faa:	e77b      	b.n	8000ea4 <__udivmoddi4+0x1b0>
 8000fac:	3d02      	subs	r5, #2
 8000fae:	4462      	add	r2, ip
 8000fb0:	e732      	b.n	8000e18 <__udivmoddi4+0x124>
 8000fb2:	4608      	mov	r0, r1
 8000fb4:	e70a      	b.n	8000dcc <__udivmoddi4+0xd8>
 8000fb6:	4464      	add	r4, ip
 8000fb8:	3802      	subs	r0, #2
 8000fba:	e742      	b.n	8000e42 <__udivmoddi4+0x14e>

08000fbc <__aeabi_idiv0>:
 8000fbc:	4770      	bx	lr
 8000fbe:	bf00      	nop

08000fc0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b082      	sub	sp, #8
 8000fc4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	607b      	str	r3, [r7, #4]
 8000fca:	4b14      	ldr	r3, [pc, #80]	; (800101c <MX_DMA_Init+0x5c>)
 8000fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fce:	4a13      	ldr	r2, [pc, #76]	; (800101c <MX_DMA_Init+0x5c>)
 8000fd0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000fd4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fd6:	4b11      	ldr	r3, [pc, #68]	; (800101c <MX_DMA_Init+0x5c>)
 8000fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000fde:	607b      	str	r3, [r7, #4]
 8000fe0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	2105      	movs	r1, #5
 8000fe6:	2039      	movs	r0, #57	; 0x39
 8000fe8:	f004 fe4b 	bl	8005c82 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000fec:	2039      	movs	r0, #57	; 0x39
 8000fee:	f004 fe64 	bl	8005cba <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	2105      	movs	r1, #5
 8000ff6:	203b      	movs	r0, #59	; 0x3b
 8000ff8:	f004 fe43 	bl	8005c82 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000ffc:	203b      	movs	r0, #59	; 0x3b
 8000ffe:	f004 fe5c 	bl	8005cba <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 8001002:	2200      	movs	r2, #0
 8001004:	2105      	movs	r1, #5
 8001006:	2045      	movs	r0, #69	; 0x45
 8001008:	f004 fe3b 	bl	8005c82 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 800100c:	2045      	movs	r0, #69	; 0x45
 800100e:	f004 fe54 	bl	8005cba <HAL_NVIC_EnableIRQ>

}
 8001012:	bf00      	nop
 8001014:	3708      	adds	r7, #8
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	40023800 	.word	0x40023800

08001020 <flashInit>:
#ifdef _USE_HW_CLI
static void cliFlash(cli_args_t *args);
#endif

bool flashInit(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	af00      	add	r7, sp, #0

#ifdef _USE_HW_CLI
	cliAdd("flash", cliFlash);
 8001024:	4903      	ldr	r1, [pc, #12]	; (8001034 <flashInit+0x14>)
 8001026:	4804      	ldr	r0, [pc, #16]	; (8001038 <flashInit+0x18>)
 8001028:	f002 f946 	bl	80032b8 <cliAdd>
#endif

	return true;
 800102c:	2301      	movs	r3, #1
}
 800102e:	4618      	mov	r0, r3
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	080011ed 	.word	0x080011ed
 8001038:	08019180 	.word	0x08019180

0800103c <flashErase>:

bool flashErase(uint32_t addr, uint32_t length)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b08c      	sub	sp, #48	; 0x30
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
 8001044:	6039      	str	r1, [r7, #0]
	bool ret = false;
 8001046:	2300      	movs	r3, #0
 8001048:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  HAL_StatusTypeDef status;
  FLASH_EraseInitTypeDef init;
  uint32_t page_error;

  uint16_t start_sector_num = -1;
 800104c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001050:	84fb      	strh	r3, [r7, #38]	; 0x26
  uint16_t sector_count = 0;
 8001052:	2300      	movs	r3, #0
 8001054:	85bb      	strh	r3, [r7, #44]	; 0x2c

  for(int i=0; i<FLASH_SECTOR_MAX; i++)
 8001056:	2300      	movs	r3, #0
 8001058:	62bb      	str	r3, [r7, #40]	; 0x28
 800105a:	e00f      	b.n	800107c <flashErase+0x40>
  {
  	if(flashInSector(i, addr, length) == true)
 800105c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800105e:	b29b      	uxth	r3, r3
 8001060:	683a      	ldr	r2, [r7, #0]
 8001062:	6879      	ldr	r1, [r7, #4]
 8001064:	4618      	mov	r0, r3
 8001066:	f000 f869 	bl	800113c <flashInSector>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	d002      	beq.n	8001076 <flashErase+0x3a>
  	{
  		if(start_sector_num < 0)
  		{
  			start_sector_num = i;
  		}
  		sector_count++;
 8001070:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001072:	3301      	adds	r3, #1
 8001074:	85bb      	strh	r3, [r7, #44]	; 0x2c
  for(int i=0; i<FLASH_SECTOR_MAX; i++)
 8001076:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001078:	3301      	adds	r3, #1
 800107a:	62bb      	str	r3, [r7, #40]	; 0x28
 800107c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800107e:	2b07      	cmp	r3, #7
 8001080:	ddec      	ble.n	800105c <flashErase+0x20>
  	}
  }

  if(sector_count > 0)
 8001082:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001084:	2b00      	cmp	r3, #0
 8001086:	d01f      	beq.n	80010c8 <flashErase+0x8c>
  {
  	HAL_FLASH_Unlock();
 8001088:	f005 fa40 	bl	800650c <HAL_FLASH_Unlock>

    init.TypeErase   = FLASH_TYPEERASE_SECTORS;
 800108c:	2300      	movs	r3, #0
 800108e:	613b      	str	r3, [r7, #16]
    init.Banks       = FLASH_BANK_1;
 8001090:	2301      	movs	r3, #1
 8001092:	617b      	str	r3, [r7, #20]
    init.Sector      = start_sector_num;
 8001094:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001096:	61bb      	str	r3, [r7, #24]
    init.NbSectors   = sector_count;
 8001098:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800109a:	61fb      	str	r3, [r7, #28]
    init.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 800109c:	2302      	movs	r3, #2
 800109e:	623b      	str	r3, [r7, #32]

    status = HAL_FLASHEx_Erase(&init, &page_error);
 80010a0:	f107 020c 	add.w	r2, r7, #12
 80010a4:	f107 0310 	add.w	r3, r7, #16
 80010a8:	4611      	mov	r1, r2
 80010aa:	4618      	mov	r0, r3
 80010ac:	f005 fba0 	bl	80067f0 <HAL_FLASHEx_Erase>
 80010b0:	4603      	mov	r3, r0
 80010b2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    if(status == HAL_OK)
 80010b6:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d102      	bne.n	80010c4 <flashErase+0x88>
    {
    	ret = true;
 80010be:	2301      	movs	r3, #1
 80010c0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    HAL_FLASH_Lock();
 80010c4:	f005 fa44 	bl	8006550 <HAL_FLASH_Lock>
  }

  return ret;
 80010c8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80010cc:	4618      	mov	r0, r3
 80010ce:	3730      	adds	r7, #48	; 0x30
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}

080010d4 <flashWrite>:

bool flashWrite(uint32_t addr, uint8_t *p_data, uint32_t length)
{
 80010d4:	b5b0      	push	{r4, r5, r7, lr}
 80010d6:	b088      	sub	sp, #32
 80010d8:	af00      	add	r7, sp, #0
 80010da:	60f8      	str	r0, [r7, #12]
 80010dc:	60b9      	str	r1, [r7, #8]
 80010de:	607a      	str	r2, [r7, #4]
	bool ret = true;
 80010e0:	2301      	movs	r3, #1
 80010e2:	77fb      	strb	r3, [r7, #31]
	HAL_StatusTypeDef status;

	HAL_FLASH_Unlock();
 80010e4:	f005 fa12 	bl	800650c <HAL_FLASH_Unlock>

	for(int i=0; i<length; i++)
 80010e8:	2300      	movs	r3, #0
 80010ea:	61bb      	str	r3, [r7, #24]
 80010ec:	e01b      	b.n	8001126 <flashWrite+0x52>
	{
		uint16_t data;

		data = p_data[i+0] << 0;
 80010ee:	69bb      	ldr	r3, [r7, #24]
 80010f0:	68ba      	ldr	r2, [r7, #8]
 80010f2:	4413      	add	r3, r2
 80010f4:	781b      	ldrb	r3, [r3, #0]
 80010f6:	82fb      	strh	r3, [r7, #22]

		status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, addr + i, (uint16_t)data);
 80010f8:	69ba      	ldr	r2, [r7, #24]
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	18d1      	adds	r1, r2, r3
 80010fe:	8afb      	ldrh	r3, [r7, #22]
 8001100:	2200      	movs	r2, #0
 8001102:	461c      	mov	r4, r3
 8001104:	4615      	mov	r5, r2
 8001106:	4622      	mov	r2, r4
 8001108:	462b      	mov	r3, r5
 800110a:	2000      	movs	r0, #0
 800110c:	f005 f9aa 	bl	8006464 <HAL_FLASH_Program>
 8001110:	4603      	mov	r3, r0
 8001112:	757b      	strb	r3, [r7, #21]
		if(status != HAL_OK)
 8001114:	7d7b      	ldrb	r3, [r7, #21]
 8001116:	2b00      	cmp	r3, #0
 8001118:	d002      	beq.n	8001120 <flashWrite+0x4c>
		{
			ret = false;
 800111a:	2300      	movs	r3, #0
 800111c:	77fb      	strb	r3, [r7, #31]
			break;
 800111e:	e006      	b.n	800112e <flashWrite+0x5a>
	for(int i=0; i<length; i++)
 8001120:	69bb      	ldr	r3, [r7, #24]
 8001122:	3301      	adds	r3, #1
 8001124:	61bb      	str	r3, [r7, #24]
 8001126:	69bb      	ldr	r3, [r7, #24]
 8001128:	687a      	ldr	r2, [r7, #4]
 800112a:	429a      	cmp	r2, r3
 800112c:	d8df      	bhi.n	80010ee <flashWrite+0x1a>
		}
	}

	HAL_FLASH_Lock();
 800112e:	f005 fa0f 	bl	8006550 <HAL_FLASH_Lock>

	return ret;
 8001132:	7ffb      	ldrb	r3, [r7, #31]
}
 8001134:	4618      	mov	r0, r3
 8001136:	3720      	adds	r7, #32
 8001138:	46bd      	mov	sp, r7
 800113a:	bdb0      	pop	{r4, r5, r7, pc}

0800113c <flashInSector>:

	return ret;
}

bool flashInSector(uint16_t sector_num, uint32_t addr, uint32_t length)
{
 800113c:	b480      	push	{r7}
 800113e:	b08b      	sub	sp, #44	; 0x2c
 8001140:	af00      	add	r7, sp, #0
 8001142:	4603      	mov	r3, r0
 8001144:	60b9      	str	r1, [r7, #8]
 8001146:	607a      	str	r2, [r7, #4]
 8001148:	81fb      	strh	r3, [r7, #14]
	bool ret = false;
 800114a:	2300      	movs	r3, #0
 800114c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint32_t sector_start;
	uint32_t sector_end;
	uint32_t flash_start;
	uint32_t flash_end;

	sector_start = flash_tbl[sector_num].addr;
 8001150:	89fb      	ldrh	r3, [r7, #14]
 8001152:	4a25      	ldr	r2, [pc, #148]	; (80011e8 <flashInSector+0xac>)
 8001154:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001158:	623b      	str	r3, [r7, #32]
	sector_end = flash_tbl[sector_num].addr + flash_tbl[sector_num].length - 1;
 800115a:	89fb      	ldrh	r3, [r7, #14]
 800115c:	4a22      	ldr	r2, [pc, #136]	; (80011e8 <flashInSector+0xac>)
 800115e:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8001162:	89fb      	ldrh	r3, [r7, #14]
 8001164:	4920      	ldr	r1, [pc, #128]	; (80011e8 <flashInSector+0xac>)
 8001166:	00db      	lsls	r3, r3, #3
 8001168:	440b      	add	r3, r1
 800116a:	685b      	ldr	r3, [r3, #4]
 800116c:	4413      	add	r3, r2
 800116e:	3b01      	subs	r3, #1
 8001170:	61fb      	str	r3, [r7, #28]
	flash_start = addr;
 8001172:	68bb      	ldr	r3, [r7, #8]
 8001174:	61bb      	str	r3, [r7, #24]
	flash_end = addr + length - 1;
 8001176:	68ba      	ldr	r2, [r7, #8]
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	4413      	add	r3, r2
 800117c:	3b01      	subs	r3, #1
 800117e:	617b      	str	r3, [r7, #20]

	if(sector_start >= flash_start && sector_start <= flash_end)
 8001180:	6a3a      	ldr	r2, [r7, #32]
 8001182:	69bb      	ldr	r3, [r7, #24]
 8001184:	429a      	cmp	r2, r3
 8001186:	d306      	bcc.n	8001196 <flashInSector+0x5a>
 8001188:	6a3a      	ldr	r2, [r7, #32]
 800118a:	697b      	ldr	r3, [r7, #20]
 800118c:	429a      	cmp	r2, r3
 800118e:	d802      	bhi.n	8001196 <flashInSector+0x5a>
	{
		ret = true;
 8001190:	2301      	movs	r3, #1
 8001192:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

  if (sector_end >= flash_start && sector_end <= flash_end)
 8001196:	69fa      	ldr	r2, [r7, #28]
 8001198:	69bb      	ldr	r3, [r7, #24]
 800119a:	429a      	cmp	r2, r3
 800119c:	d306      	bcc.n	80011ac <flashInSector+0x70>
 800119e:	69fa      	ldr	r2, [r7, #28]
 80011a0:	697b      	ldr	r3, [r7, #20]
 80011a2:	429a      	cmp	r2, r3
 80011a4:	d802      	bhi.n	80011ac <flashInSector+0x70>
  {
    ret = true;
 80011a6:	2301      	movs	r3, #1
 80011a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (flash_start >= sector_start && flash_start <= sector_end)
 80011ac:	69ba      	ldr	r2, [r7, #24]
 80011ae:	6a3b      	ldr	r3, [r7, #32]
 80011b0:	429a      	cmp	r2, r3
 80011b2:	d306      	bcc.n	80011c2 <flashInSector+0x86>
 80011b4:	69ba      	ldr	r2, [r7, #24]
 80011b6:	69fb      	ldr	r3, [r7, #28]
 80011b8:	429a      	cmp	r2, r3
 80011ba:	d802      	bhi.n	80011c2 <flashInSector+0x86>
  {
    ret = true;
 80011bc:	2301      	movs	r3, #1
 80011be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (flash_end >= sector_start && flash_end <= sector_end)
 80011c2:	697a      	ldr	r2, [r7, #20]
 80011c4:	6a3b      	ldr	r3, [r7, #32]
 80011c6:	429a      	cmp	r2, r3
 80011c8:	d306      	bcc.n	80011d8 <flashInSector+0x9c>
 80011ca:	697a      	ldr	r2, [r7, #20]
 80011cc:	69fb      	ldr	r3, [r7, #28]
 80011ce:	429a      	cmp	r2, r3
 80011d0:	d802      	bhi.n	80011d8 <flashInSector+0x9c>
  {
    ret = true;
 80011d2:	2301      	movs	r3, #1
 80011d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return ret;
 80011d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80011dc:	4618      	mov	r0, r3
 80011de:	372c      	adds	r7, #44	; 0x2c
 80011e0:	46bd      	mov	sp, r7
 80011e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e6:	4770      	bx	lr
 80011e8:	20000000 	.word	0x20000000

080011ec <cliFlash>:


#ifdef _USE_HW_CLI

void cliFlash(cli_args_t *args)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b08c      	sub	sp, #48	; 0x30
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
	bool ret = false;
 80011f4:	2300      	movs	r3, #0
 80011f6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if(args->argc == 1 && args->isStr(0, "info") == true)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	881b      	ldrh	r3, [r3, #0]
 80011fe:	2b01      	cmp	r3, #1
 8001200:	d121      	bne.n	8001246 <cliFlash+0x5a>
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	695b      	ldr	r3, [r3, #20]
 8001206:	495c      	ldr	r1, [pc, #368]	; (8001378 <cliFlash+0x18c>)
 8001208:	2000      	movs	r0, #0
 800120a:	4798      	blx	r3
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	d019      	beq.n	8001246 <cliFlash+0x5a>
	{
		for(int i=0; i<FLASH_SECTOR_MAX; i++)
 8001212:	2300      	movs	r3, #0
 8001214:	62bb      	str	r3, [r7, #40]	; 0x28
 8001216:	e010      	b.n	800123a <cliFlash+0x4e>
		{
			cliPrintf("0x%X : %dKB\n", flash_tbl[i].addr, flash_tbl[i].length / 1024);
 8001218:	4a58      	ldr	r2, [pc, #352]	; (800137c <cliFlash+0x190>)
 800121a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800121c:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 8001220:	4a56      	ldr	r2, [pc, #344]	; (800137c <cliFlash+0x190>)
 8001222:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001224:	00db      	lsls	r3, r3, #3
 8001226:	4413      	add	r3, r2
 8001228:	685b      	ldr	r3, [r3, #4]
 800122a:	0a9b      	lsrs	r3, r3, #10
 800122c:	461a      	mov	r2, r3
 800122e:	4854      	ldr	r0, [pc, #336]	; (8001380 <cliFlash+0x194>)
 8001230:	f001 ff32 	bl	8003098 <cliPrintf>
		for(int i=0; i<FLASH_SECTOR_MAX; i++)
 8001234:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001236:	3301      	adds	r3, #1
 8001238:	62bb      	str	r3, [r7, #40]	; 0x28
 800123a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800123c:	2b07      	cmp	r3, #7
 800123e:	ddeb      	ble.n	8001218 <cliFlash+0x2c>
		}

		ret = true;
 8001240:	2301      	movs	r3, #1
 8001242:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	}

	if(args->argc == 2 && args->isStr(0, "read") == true)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	881b      	ldrh	r3, [r3, #0]
 800124a:	2b02      	cmp	r3, #2
 800124c:	d12b      	bne.n	80012a6 <cliFlash+0xba>
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	695b      	ldr	r3, [r3, #20]
 8001252:	494c      	ldr	r1, [pc, #304]	; (8001384 <cliFlash+0x198>)
 8001254:	2000      	movs	r0, #0
 8001256:	4798      	blx	r3
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d023      	beq.n	80012a6 <cliFlash+0xba>
	{
		uint32_t addr;
		uint32_t length;

		addr = (uint32_t)args->getData(1);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	689b      	ldr	r3, [r3, #8]
 8001262:	2001      	movs	r0, #1
 8001264:	4798      	blx	r3
 8001266:	4603      	mov	r3, r0
 8001268:	623b      	str	r3, [r7, #32]
		length = (uint32_t)args->getData(2);
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	689b      	ldr	r3, [r3, #8]
 800126e:	2002      	movs	r0, #2
 8001270:	4798      	blx	r3
 8001272:	4603      	mov	r3, r0
 8001274:	61fb      	str	r3, [r7, #28]

		for(int i=0; i<length; i++)
 8001276:	2300      	movs	r3, #0
 8001278:	627b      	str	r3, [r7, #36]	; 0x24
 800127a:	e00d      	b.n	8001298 <cliFlash+0xac>
		{
			cliPrintf("0x%X : 0x%X\n", addr + i, *((uint8_t *)(addr + i)));
 800127c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800127e:	6a3b      	ldr	r3, [r7, #32]
 8001280:	18d1      	adds	r1, r2, r3
 8001282:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001284:	6a3b      	ldr	r3, [r7, #32]
 8001286:	4413      	add	r3, r2
 8001288:	781b      	ldrb	r3, [r3, #0]
 800128a:	461a      	mov	r2, r3
 800128c:	483e      	ldr	r0, [pc, #248]	; (8001388 <cliFlash+0x19c>)
 800128e:	f001 ff03 	bl	8003098 <cliPrintf>
		for(int i=0; i<length; i++)
 8001292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001294:	3301      	adds	r3, #1
 8001296:	627b      	str	r3, [r7, #36]	; 0x24
 8001298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800129a:	69fa      	ldr	r2, [r7, #28]
 800129c:	429a      	cmp	r2, r3
 800129e:	d8ed      	bhi.n	800127c <cliFlash+0x90>
		}

		ret = true;
 80012a0:	2301      	movs	r3, #1
 80012a2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	}

	if(args->argc == 3 && args->isStr(0, "erase") == true)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	881b      	ldrh	r3, [r3, #0]
 80012aa:	2b03      	cmp	r3, #3
 80012ac:	d121      	bne.n	80012f2 <cliFlash+0x106>
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	695b      	ldr	r3, [r3, #20]
 80012b2:	4936      	ldr	r1, [pc, #216]	; (800138c <cliFlash+0x1a0>)
 80012b4:	2000      	movs	r0, #0
 80012b6:	4798      	blx	r3
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d019      	beq.n	80012f2 <cliFlash+0x106>
	{
		uint32_t addr;
		uint32_t length;

		addr = (uint32_t)args->getData(1);
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	689b      	ldr	r3, [r3, #8]
 80012c2:	2001      	movs	r0, #1
 80012c4:	4798      	blx	r3
 80012c6:	4603      	mov	r3, r0
 80012c8:	61bb      	str	r3, [r7, #24]
		length = (uint32_t)args->getData(2);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	689b      	ldr	r3, [r3, #8]
 80012ce:	2002      	movs	r0, #2
 80012d0:	4798      	blx	r3
 80012d2:	4603      	mov	r3, r0
 80012d4:	617b      	str	r3, [r7, #20]

		if(flashErase(addr, length) == true)
 80012d6:	6979      	ldr	r1, [r7, #20]
 80012d8:	69b8      	ldr	r0, [r7, #24]
 80012da:	f7ff feaf 	bl	800103c <flashErase>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d003      	beq.n	80012ec <cliFlash+0x100>
		{
			cliPrintf("Erase OK\n");
 80012e4:	482a      	ldr	r0, [pc, #168]	; (8001390 <cliFlash+0x1a4>)
 80012e6:	f001 fed7 	bl	8003098 <cliPrintf>
 80012ea:	e002      	b.n	80012f2 <cliFlash+0x106>
		}
		else
		{
			cliPrintf("Erase Fail\n");
 80012ec:	4829      	ldr	r0, [pc, #164]	; (8001394 <cliFlash+0x1a8>)
 80012ee:	f001 fed3 	bl	8003098 <cliPrintf>
		}
	}


  if (args->argc == 3 && args->isStr(0, "write") == true)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	881b      	ldrh	r3, [r3, #0]
 80012f6:	2b03      	cmp	r3, #3
 80012f8:	d127      	bne.n	800134a <cliFlash+0x15e>
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	695b      	ldr	r3, [r3, #20]
 80012fe:	4926      	ldr	r1, [pc, #152]	; (8001398 <cliFlash+0x1ac>)
 8001300:	2000      	movs	r0, #0
 8001302:	4798      	blx	r3
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	d01f      	beq.n	800134a <cliFlash+0x15e>
  {
    uint32_t addr;
    uint32_t data;

    addr   = (uint32_t)args->getData(1);
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	689b      	ldr	r3, [r3, #8]
 800130e:	2001      	movs	r0, #1
 8001310:	4798      	blx	r3
 8001312:	4603      	mov	r3, r0
 8001314:	613b      	str	r3, [r7, #16]
    data   = (uint32_t)args->getData(2);
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	689b      	ldr	r3, [r3, #8]
 800131a:	2002      	movs	r0, #2
 800131c:	4798      	blx	r3
 800131e:	4603      	mov	r3, r0
 8001320:	60fb      	str	r3, [r7, #12]

    if (flashWrite(addr, (uint8_t *)&data, 4) == true)
 8001322:	f107 030c 	add.w	r3, r7, #12
 8001326:	2204      	movs	r2, #4
 8001328:	4619      	mov	r1, r3
 800132a:	6938      	ldr	r0, [r7, #16]
 800132c:	f7ff fed2 	bl	80010d4 <flashWrite>
 8001330:	4603      	mov	r3, r0
 8001332:	2b00      	cmp	r3, #0
 8001334:	d003      	beq.n	800133e <cliFlash+0x152>
    {
      cliPrintf("Write OK\n");
 8001336:	4819      	ldr	r0, [pc, #100]	; (800139c <cliFlash+0x1b0>)
 8001338:	f001 feae 	bl	8003098 <cliPrintf>
 800133c:	e002      	b.n	8001344 <cliFlash+0x158>
    }
    else
    {
      cliPrintf("Write Fail\n");
 800133e:	4818      	ldr	r0, [pc, #96]	; (80013a0 <cliFlash+0x1b4>)
 8001340:	f001 feaa 	bl	8003098 <cliPrintf>
    }

    ret = true;
 8001344:	2301      	movs	r3, #1
 8001346:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  if (ret != true)
 800134a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800134e:	f083 0301 	eor.w	r3, r3, #1
 8001352:	b2db      	uxtb	r3, r3
 8001354:	2b00      	cmp	r3, #0
 8001356:	d00b      	beq.n	8001370 <cliFlash+0x184>
  {
    cliPrintf("flash info\n");
 8001358:	4812      	ldr	r0, [pc, #72]	; (80013a4 <cliFlash+0x1b8>)
 800135a:	f001 fe9d 	bl	8003098 <cliPrintf>
    cliPrintf("flash read  addr length\n");
 800135e:	4812      	ldr	r0, [pc, #72]	; (80013a8 <cliFlash+0x1bc>)
 8001360:	f001 fe9a 	bl	8003098 <cliPrintf>
    cliPrintf("flash erase addr length\n");
 8001364:	4811      	ldr	r0, [pc, #68]	; (80013ac <cliFlash+0x1c0>)
 8001366:	f001 fe97 	bl	8003098 <cliPrintf>
    cliPrintf("flash write addr data\n");
 800136a:	4811      	ldr	r0, [pc, #68]	; (80013b0 <cliFlash+0x1c4>)
 800136c:	f001 fe94 	bl	8003098 <cliPrintf>
  }
}
 8001370:	bf00      	nop
 8001372:	3730      	adds	r7, #48	; 0x30
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}
 8001378:	08019188 	.word	0x08019188
 800137c:	20000000 	.word	0x20000000
 8001380:	08019190 	.word	0x08019190
 8001384:	080191a0 	.word	0x080191a0
 8001388:	080191a8 	.word	0x080191a8
 800138c:	080191b8 	.word	0x080191b8
 8001390:	080191c0 	.word	0x080191c0
 8001394:	080191cc 	.word	0x080191cc
 8001398:	080191d8 	.word	0x080191d8
 800139c:	080191e0 	.word	0x080191e0
 80013a0:	080191ec 	.word	0x080191ec
 80013a4:	080191f8 	.word	0x080191f8
 80013a8:	08019204 	.word	0x08019204
 80013ac:	08019220 	.word	0x08019220
 80013b0:	0801923c 	.word	0x0801923c

080013b4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b08a      	sub	sp, #40	; 0x28
 80013b8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013ba:	f107 0314 	add.w	r3, r7, #20
 80013be:	2200      	movs	r2, #0
 80013c0:	601a      	str	r2, [r3, #0]
 80013c2:	605a      	str	r2, [r3, #4]
 80013c4:	609a      	str	r2, [r3, #8]
 80013c6:	60da      	str	r2, [r3, #12]
 80013c8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013ca:	2300      	movs	r3, #0
 80013cc:	613b      	str	r3, [r7, #16]
 80013ce:	4b37      	ldr	r3, [pc, #220]	; (80014ac <MX_GPIO_Init+0xf8>)
 80013d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d2:	4a36      	ldr	r2, [pc, #216]	; (80014ac <MX_GPIO_Init+0xf8>)
 80013d4:	f043 0304 	orr.w	r3, r3, #4
 80013d8:	6313      	str	r3, [r2, #48]	; 0x30
 80013da:	4b34      	ldr	r3, [pc, #208]	; (80014ac <MX_GPIO_Init+0xf8>)
 80013dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013de:	f003 0304 	and.w	r3, r3, #4
 80013e2:	613b      	str	r3, [r7, #16]
 80013e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013e6:	2300      	movs	r3, #0
 80013e8:	60fb      	str	r3, [r7, #12]
 80013ea:	4b30      	ldr	r3, [pc, #192]	; (80014ac <MX_GPIO_Init+0xf8>)
 80013ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ee:	4a2f      	ldr	r2, [pc, #188]	; (80014ac <MX_GPIO_Init+0xf8>)
 80013f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013f4:	6313      	str	r3, [r2, #48]	; 0x30
 80013f6:	4b2d      	ldr	r3, [pc, #180]	; (80014ac <MX_GPIO_Init+0xf8>)
 80013f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013fe:	60fb      	str	r3, [r7, #12]
 8001400:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001402:	2300      	movs	r3, #0
 8001404:	60bb      	str	r3, [r7, #8]
 8001406:	4b29      	ldr	r3, [pc, #164]	; (80014ac <MX_GPIO_Init+0xf8>)
 8001408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800140a:	4a28      	ldr	r2, [pc, #160]	; (80014ac <MX_GPIO_Init+0xf8>)
 800140c:	f043 0301 	orr.w	r3, r3, #1
 8001410:	6313      	str	r3, [r2, #48]	; 0x30
 8001412:	4b26      	ldr	r3, [pc, #152]	; (80014ac <MX_GPIO_Init+0xf8>)
 8001414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001416:	f003 0301 	and.w	r3, r3, #1
 800141a:	60bb      	str	r3, [r7, #8]
 800141c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800141e:	2300      	movs	r3, #0
 8001420:	607b      	str	r3, [r7, #4]
 8001422:	4b22      	ldr	r3, [pc, #136]	; (80014ac <MX_GPIO_Init+0xf8>)
 8001424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001426:	4a21      	ldr	r2, [pc, #132]	; (80014ac <MX_GPIO_Init+0xf8>)
 8001428:	f043 0302 	orr.w	r3, r3, #2
 800142c:	6313      	str	r3, [r2, #48]	; 0x30
 800142e:	4b1f      	ldr	r3, [pc, #124]	; (80014ac <MX_GPIO_Init+0xf8>)
 8001430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001432:	f003 0302 	and.w	r3, r3, #2
 8001436:	607b      	str	r3, [r7, #4]
 8001438:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800143a:	2200      	movs	r2, #0
 800143c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001440:	481b      	ldr	r0, [pc, #108]	; (80014b0 <MX_GPIO_Init+0xfc>)
 8001442:	f005 fd77 	bl	8006f34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);
 8001446:	2200      	movs	r2, #0
 8001448:	211c      	movs	r1, #28
 800144a:	481a      	ldr	r0, [pc, #104]	; (80014b4 <MX_GPIO_Init+0x100>)
 800144c:	f005 fd72 	bl	8006f34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001450:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001454:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001456:	2301      	movs	r3, #1
 8001458:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800145a:	2300      	movs	r3, #0
 800145c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800145e:	2300      	movs	r3, #0
 8001460:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001462:	f107 0314 	add.w	r3, r7, #20
 8001466:	4619      	mov	r1, r3
 8001468:	4811      	ldr	r0, [pc, #68]	; (80014b0 <MX_GPIO_Init+0xfc>)
 800146a:	f005 fae3 	bl	8006a34 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 800146e:	231c      	movs	r3, #28
 8001470:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001472:	2301      	movs	r3, #1
 8001474:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001476:	2300      	movs	r3, #0
 8001478:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800147a:	2300      	movs	r3, #0
 800147c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800147e:	f107 0314 	add.w	r3, r7, #20
 8001482:	4619      	mov	r1, r3
 8001484:	480b      	ldr	r0, [pc, #44]	; (80014b4 <MX_GPIO_Init+0x100>)
 8001486:	f005 fad5 	bl	8006a34 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 800148a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800148e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001490:	2300      	movs	r3, #0
 8001492:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001494:	2300      	movs	r3, #0
 8001496:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001498:	f107 0314 	add.w	r3, r7, #20
 800149c:	4619      	mov	r1, r3
 800149e:	4806      	ldr	r0, [pc, #24]	; (80014b8 <MX_GPIO_Init+0x104>)
 80014a0:	f005 fac8 	bl	8006a34 <HAL_GPIO_Init>

}
 80014a4:	bf00      	nop
 80014a6:	3728      	adds	r7, #40	; 0x28
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	40023800 	.word	0x40023800
 80014b0:	40020800 	.word	0x40020800
 80014b4:	40020000 	.word	0x40020000
 80014b8:	40020400 	.word	0x40020400

080014bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014c0:	f004 fa4a 	bl	8005958 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014c4:	f000 f826 	bl	8001514 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014c8:	f7ff ff74 	bl	80013b4 <MX_GPIO_Init>
  MX_DMA_Init();
 80014cc:	f7ff fd78 	bl	8000fc0 <MX_DMA_Init>
  MX_USB_DEVICE_Init();
 80014d0:	f013 ff96 	bl	8015400 <MX_USB_DEVICE_Init>
  MX_SDIO_SD_Init();
 80014d4:	f000 f88c 	bl	80015f0 <MX_SDIO_SD_Init>
  //MX_SPI4_Init();
  //MX_I2C2_Init();
  /* USER CODE BEGIN 2 */
  cliInit();
 80014d8:	f001 f8c4 	bl	8002664 <cliInit>
  ledInit();
 80014dc:	f003 fc9c 	bl	8004e18 <ledInit>
  gpioInit();
 80014e0:	f002 fa0c 	bl	80038fc <gpioInit>
  flashInit();
 80014e4:	f7ff fd9c 	bl	8001020 <flashInit>
  spiInit();
 80014e8:	f004 f93c 	bl	8005764 <spiInit>
  i2cInit();
 80014ec:	f002 fb54 	bl	8003b98 <i2cInit>

  if(sdInit() == true)
 80014f0:	f003 fd3c 	bl	8004f6c <sdInit>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d001      	beq.n	80014fe <main+0x42>
  {
  	fatfsInit();
 80014fa:	f002 f801 	bl	8003500 <fatfsInit>
  }

  lcdInit();
 80014fe:	f002 ff93 	bl	8004428 <lcdInit>


  cliOpen(_DEF_UART1, 57600);
 8001502:	f44f 4161 	mov.w	r1, #57600	; 0xe100
 8001506:	2000      	movs	r0, #0
 8001508:	f001 f8f8 	bl	80026fc <cliOpen>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

  	cliMain();
 800150c:	f001 f9ae 	bl	800286c <cliMain>
 8001510:	e7fc      	b.n	800150c <main+0x50>
	...

08001514 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b094      	sub	sp, #80	; 0x50
 8001518:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800151a:	f107 0320 	add.w	r3, r7, #32
 800151e:	2230      	movs	r2, #48	; 0x30
 8001520:	2100      	movs	r1, #0
 8001522:	4618      	mov	r0, r3
 8001524:	f015 fdd4 	bl	80170d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001528:	f107 030c 	add.w	r3, r7, #12
 800152c:	2200      	movs	r2, #0
 800152e:	601a      	str	r2, [r3, #0]
 8001530:	605a      	str	r2, [r3, #4]
 8001532:	609a      	str	r2, [r3, #8]
 8001534:	60da      	str	r2, [r3, #12]
 8001536:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001538:	2300      	movs	r3, #0
 800153a:	60bb      	str	r3, [r7, #8]
 800153c:	4b27      	ldr	r3, [pc, #156]	; (80015dc <SystemClock_Config+0xc8>)
 800153e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001540:	4a26      	ldr	r2, [pc, #152]	; (80015dc <SystemClock_Config+0xc8>)
 8001542:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001546:	6413      	str	r3, [r2, #64]	; 0x40
 8001548:	4b24      	ldr	r3, [pc, #144]	; (80015dc <SystemClock_Config+0xc8>)
 800154a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800154c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001550:	60bb      	str	r3, [r7, #8]
 8001552:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001554:	2300      	movs	r3, #0
 8001556:	607b      	str	r3, [r7, #4]
 8001558:	4b21      	ldr	r3, [pc, #132]	; (80015e0 <SystemClock_Config+0xcc>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4a20      	ldr	r2, [pc, #128]	; (80015e0 <SystemClock_Config+0xcc>)
 800155e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001562:	6013      	str	r3, [r2, #0]
 8001564:	4b1e      	ldr	r3, [pc, #120]	; (80015e0 <SystemClock_Config+0xcc>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800156c:	607b      	str	r3, [r7, #4]
 800156e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001570:	2301      	movs	r3, #1
 8001572:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001574:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001578:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800157a:	2302      	movs	r3, #2
 800157c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800157e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001582:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001584:	2319      	movs	r3, #25
 8001586:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8001588:	23c0      	movs	r3, #192	; 0xc0
 800158a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800158c:	2302      	movs	r3, #2
 800158e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001590:	2304      	movs	r3, #4
 8001592:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001594:	f107 0320 	add.w	r3, r7, #32
 8001598:	4618      	mov	r0, r3
 800159a:	f009 fe29 	bl	800b1f0 <HAL_RCC_OscConfig>
 800159e:	4603      	mov	r3, r0
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d001      	beq.n	80015a8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80015a4:	f000 f81e 	bl	80015e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015a8:	230f      	movs	r3, #15
 80015aa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015ac:	2302      	movs	r3, #2
 80015ae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015b0:	2300      	movs	r3, #0
 80015b2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80015b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015b8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015ba:	2300      	movs	r3, #0
 80015bc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80015be:	f107 030c 	add.w	r3, r7, #12
 80015c2:	2103      	movs	r1, #3
 80015c4:	4618      	mov	r0, r3
 80015c6:	f00a f88b 	bl	800b6e0 <HAL_RCC_ClockConfig>
 80015ca:	4603      	mov	r3, r0
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d001      	beq.n	80015d4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80015d0:	f000 f808 	bl	80015e4 <Error_Handler>
  }
}
 80015d4:	bf00      	nop
 80015d6:	3750      	adds	r7, #80	; 0x50
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	40023800 	.word	0x40023800
 80015e0:	40007000 	.word	0x40007000

080015e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015e4:	b480      	push	{r7}
 80015e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015e8:	b672      	cpsid	i
}
 80015ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015ec:	e7fe      	b.n	80015ec <Error_Handler+0x8>
	...

080015f0 <MX_SDIO_SD_Init>:
DMA_HandleTypeDef hdma_sdio_tx;

/* SDIO init function */

void MX_SDIO_SD_Init(void)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 80015f4:	4b14      	ldr	r3, [pc, #80]	; (8001648 <MX_SDIO_SD_Init+0x58>)
 80015f6:	4a15      	ldr	r2, [pc, #84]	; (800164c <MX_SDIO_SD_Init+0x5c>)
 80015f8:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 80015fa:	4b13      	ldr	r3, [pc, #76]	; (8001648 <MX_SDIO_SD_Init+0x58>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8001600:	4b11      	ldr	r3, [pc, #68]	; (8001648 <MX_SDIO_SD_Init+0x58>)
 8001602:	2200      	movs	r2, #0
 8001604:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8001606:	4b10      	ldr	r3, [pc, #64]	; (8001648 <MX_SDIO_SD_Init+0x58>)
 8001608:	2200      	movs	r2, #0
 800160a:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 800160c:	4b0e      	ldr	r3, [pc, #56]	; (8001648 <MX_SDIO_SD_Init+0x58>)
 800160e:	2200      	movs	r2, #0
 8001610:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8001612:	4b0d      	ldr	r3, [pc, #52]	; (8001648 <MX_SDIO_SD_Init+0x58>)
 8001614:	2200      	movs	r2, #0
 8001616:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8001618:	4b0b      	ldr	r3, [pc, #44]	; (8001648 <MX_SDIO_SD_Init+0x58>)
 800161a:	2200      	movs	r2, #0
 800161c:	619a      	str	r2, [r3, #24]
  if (HAL_SD_Init(&hsd) != HAL_OK)
 800161e:	480a      	ldr	r0, [pc, #40]	; (8001648 <MX_SDIO_SD_Init+0x58>)
 8001620:	f00a fa2a 	bl	800ba78 <HAL_SD_Init>
 8001624:	4603      	mov	r3, r0
 8001626:	2b00      	cmp	r3, #0
 8001628:	d001      	beq.n	800162e <MX_SDIO_SD_Init+0x3e>
  {
    Error_Handler();
 800162a:	f7ff ffdb 	bl	80015e4 <Error_Handler>
  }
  if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 800162e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001632:	4805      	ldr	r0, [pc, #20]	; (8001648 <MX_SDIO_SD_Init+0x58>)
 8001634:	f00b f802 	bl	800c63c <HAL_SD_ConfigWideBusOperation>
 8001638:	4603      	mov	r3, r0
 800163a:	2b00      	cmp	r3, #0
 800163c:	d001      	beq.n	8001642 <MX_SDIO_SD_Init+0x52>
  {
    Error_Handler();
 800163e:	f7ff ffd1 	bl	80015e4 <Error_Handler>
  }
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8001642:	bf00      	nop
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	2000039c 	.word	0x2000039c
 800164c:	40012c00 	.word	0x40012c00

08001650 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001650:	b480      	push	{r7}
 8001652:	b083      	sub	sp, #12
 8001654:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001656:	2300      	movs	r3, #0
 8001658:	607b      	str	r3, [r7, #4]
 800165a:	4b10      	ldr	r3, [pc, #64]	; (800169c <HAL_MspInit+0x4c>)
 800165c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800165e:	4a0f      	ldr	r2, [pc, #60]	; (800169c <HAL_MspInit+0x4c>)
 8001660:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001664:	6453      	str	r3, [r2, #68]	; 0x44
 8001666:	4b0d      	ldr	r3, [pc, #52]	; (800169c <HAL_MspInit+0x4c>)
 8001668:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800166a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800166e:	607b      	str	r3, [r7, #4]
 8001670:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001672:	2300      	movs	r3, #0
 8001674:	603b      	str	r3, [r7, #0]
 8001676:	4b09      	ldr	r3, [pc, #36]	; (800169c <HAL_MspInit+0x4c>)
 8001678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800167a:	4a08      	ldr	r2, [pc, #32]	; (800169c <HAL_MspInit+0x4c>)
 800167c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001680:	6413      	str	r3, [r2, #64]	; 0x40
 8001682:	4b06      	ldr	r3, [pc, #24]	; (800169c <HAL_MspInit+0x4c>)
 8001684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001686:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800168a:	603b      	str	r3, [r7, #0]
 800168c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800168e:	bf00      	nop
 8001690:	370c      	adds	r7, #12
 8001692:	46bd      	mov	sp, r7
 8001694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001698:	4770      	bx	lr
 800169a:	bf00      	nop
 800169c:	40023800 	.word	0x40023800

080016a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016a0:	b480      	push	{r7}
 80016a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80016a4:	e7fe      	b.n	80016a4 <NMI_Handler+0x4>

080016a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016a6:	b480      	push	{r7}
 80016a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016aa:	e7fe      	b.n	80016aa <HardFault_Handler+0x4>

080016ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016ac:	b480      	push	{r7}
 80016ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016b0:	e7fe      	b.n	80016b0 <MemManage_Handler+0x4>

080016b2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016b2:	b480      	push	{r7}
 80016b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016b6:	e7fe      	b.n	80016b6 <BusFault_Handler+0x4>

080016b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016b8:	b480      	push	{r7}
 80016ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016bc:	e7fe      	b.n	80016bc <UsageFault_Handler+0x4>

080016be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016be:	b480      	push	{r7}
 80016c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016c2:	bf00      	nop
 80016c4:	46bd      	mov	sp, r7
 80016c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ca:	4770      	bx	lr

080016cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016cc:	b480      	push	{r7}
 80016ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016d0:	bf00      	nop
 80016d2:	46bd      	mov	sp, r7
 80016d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d8:	4770      	bx	lr

080016da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016da:	b480      	push	{r7}
 80016dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016de:	bf00      	nop
 80016e0:	46bd      	mov	sp, r7
 80016e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e6:	4770      	bx	lr

080016e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016ec:	f004 f986 	bl	80059fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016f0:	bf00      	nop
 80016f2:	bd80      	pop	{r7, pc}

080016f4 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 80016f8:	4802      	ldr	r0, [pc, #8]	; (8001704 <I2C2_EV_IRQHandler+0x10>)
 80016fa:	f006 fa31 	bl	8007b60 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 80016fe:	bf00      	nop
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	200011e0 	.word	0x200011e0

08001708 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 800170c:	4802      	ldr	r0, [pc, #8]	; (8001718 <I2C2_ER_IRQHandler+0x10>)
 800170e:	f006 fb7a 	bl	8007e06 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 8001712:	bf00      	nop
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	200011e0 	.word	0x200011e0

0800171c <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8001720:	4802      	ldr	r0, [pc, #8]	; (800172c <SDIO_IRQHandler+0x10>)
 8001722:	f00a fc21 	bl	800bf68 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 8001726:	bf00      	nop
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	2000039c 	.word	0x2000039c

08001730 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_tx);
 8001734:	4802      	ldr	r0, [pc, #8]	; (8001740 <DMA2_Stream1_IRQHandler+0x10>)
 8001736:	f004 fc11 	bl	8005f5c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 800173a:	bf00      	nop
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	200052f0 	.word	0x200052f0

08001744 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8001748:	4802      	ldr	r0, [pc, #8]	; (8001754 <DMA2_Stream3_IRQHandler+0x10>)
 800174a:	f004 fc07 	bl	8005f5c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800174e:	bf00      	nop
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	20000420 	.word	0x20000420

08001758 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800175c:	4802      	ldr	r0, [pc, #8]	; (8001768 <OTG_FS_IRQHandler+0x10>)
 800175e:	f008 fc3b 	bl	8009fd8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001762:	bf00      	nop
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	20006894 	.word	0x20006894

0800176c <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8001770:	4802      	ldr	r0, [pc, #8]	; (800177c <DMA2_Stream6_IRQHandler+0x10>)
 8001772:	f004 fbf3 	bl	8005f5c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8001776:	bf00      	nop
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	20000480 	.word	0x20000480

08001780 <SPI4_IRQHandler>:

/**
  * @brief This function handles SPI4 global interrupt.
  */
void SPI4_IRQHandler(void)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI4_IRQn 0 */

  /* USER CODE END SPI4_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi4);
 8001784:	4802      	ldr	r0, [pc, #8]	; (8001790 <SPI4_IRQHandler+0x10>)
 8001786:	f00b fcbb 	bl	800d100 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI4_IRQn 1 */

  /* USER CODE END SPI4_IRQn 1 */
}
 800178a:	bf00      	nop
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	20005298 	.word	0x20005298

08001794 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001794:	b480      	push	{r7}
 8001796:	af00      	add	r7, sp, #0
  return 1;
 8001798:	2301      	movs	r3, #1
}
 800179a:	4618      	mov	r0, r3
 800179c:	46bd      	mov	sp, r7
 800179e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a2:	4770      	bx	lr

080017a4 <_kill>:

int _kill(int pid, int sig)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b082      	sub	sp, #8
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
 80017ac:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80017ae:	f015 fd2b 	bl	8017208 <__errno>
 80017b2:	4603      	mov	r3, r0
 80017b4:	2216      	movs	r2, #22
 80017b6:	601a      	str	r2, [r3, #0]
  return -1;
 80017b8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017bc:	4618      	mov	r0, r3
 80017be:	3708      	adds	r7, #8
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}

080017c4 <_exit>:

void _exit (int status)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b082      	sub	sp, #8
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80017cc:	f04f 31ff 	mov.w	r1, #4294967295
 80017d0:	6878      	ldr	r0, [r7, #4]
 80017d2:	f7ff ffe7 	bl	80017a4 <_kill>
  while (1) {}    /* Make sure we hang here */
 80017d6:	e7fe      	b.n	80017d6 <_exit+0x12>

080017d8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b086      	sub	sp, #24
 80017dc:	af00      	add	r7, sp, #0
 80017de:	60f8      	str	r0, [r7, #12]
 80017e0:	60b9      	str	r1, [r7, #8]
 80017e2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017e4:	2300      	movs	r3, #0
 80017e6:	617b      	str	r3, [r7, #20]
 80017e8:	e00a      	b.n	8001800 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80017ea:	f3af 8000 	nop.w
 80017ee:	4601      	mov	r1, r0
 80017f0:	68bb      	ldr	r3, [r7, #8]
 80017f2:	1c5a      	adds	r2, r3, #1
 80017f4:	60ba      	str	r2, [r7, #8]
 80017f6:	b2ca      	uxtb	r2, r1
 80017f8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017fa:	697b      	ldr	r3, [r7, #20]
 80017fc:	3301      	adds	r3, #1
 80017fe:	617b      	str	r3, [r7, #20]
 8001800:	697a      	ldr	r2, [r7, #20]
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	429a      	cmp	r2, r3
 8001806:	dbf0      	blt.n	80017ea <_read+0x12>
  }

  return len;
 8001808:	687b      	ldr	r3, [r7, #4]
}
 800180a:	4618      	mov	r0, r3
 800180c:	3718      	adds	r7, #24
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}

08001812 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001812:	b580      	push	{r7, lr}
 8001814:	b086      	sub	sp, #24
 8001816:	af00      	add	r7, sp, #0
 8001818:	60f8      	str	r0, [r7, #12]
 800181a:	60b9      	str	r1, [r7, #8]
 800181c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800181e:	2300      	movs	r3, #0
 8001820:	617b      	str	r3, [r7, #20]
 8001822:	e009      	b.n	8001838 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001824:	68bb      	ldr	r3, [r7, #8]
 8001826:	1c5a      	adds	r2, r3, #1
 8001828:	60ba      	str	r2, [r7, #8]
 800182a:	781b      	ldrb	r3, [r3, #0]
 800182c:	4618      	mov	r0, r3
 800182e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001832:	697b      	ldr	r3, [r7, #20]
 8001834:	3301      	adds	r3, #1
 8001836:	617b      	str	r3, [r7, #20]
 8001838:	697a      	ldr	r2, [r7, #20]
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	429a      	cmp	r2, r3
 800183e:	dbf1      	blt.n	8001824 <_write+0x12>
  }
  return len;
 8001840:	687b      	ldr	r3, [r7, #4]
}
 8001842:	4618      	mov	r0, r3
 8001844:	3718      	adds	r7, #24
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}

0800184a <_close>:

int _close(int file)
{
 800184a:	b480      	push	{r7}
 800184c:	b083      	sub	sp, #12
 800184e:	af00      	add	r7, sp, #0
 8001850:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001852:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001856:	4618      	mov	r0, r3
 8001858:	370c      	adds	r7, #12
 800185a:	46bd      	mov	sp, r7
 800185c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001860:	4770      	bx	lr

08001862 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001862:	b480      	push	{r7}
 8001864:	b083      	sub	sp, #12
 8001866:	af00      	add	r7, sp, #0
 8001868:	6078      	str	r0, [r7, #4]
 800186a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001872:	605a      	str	r2, [r3, #4]
  return 0;
 8001874:	2300      	movs	r3, #0
}
 8001876:	4618      	mov	r0, r3
 8001878:	370c      	adds	r7, #12
 800187a:	46bd      	mov	sp, r7
 800187c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001880:	4770      	bx	lr

08001882 <_isatty>:

int _isatty(int file)
{
 8001882:	b480      	push	{r7}
 8001884:	b083      	sub	sp, #12
 8001886:	af00      	add	r7, sp, #0
 8001888:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800188a:	2301      	movs	r3, #1
}
 800188c:	4618      	mov	r0, r3
 800188e:	370c      	adds	r7, #12
 8001890:	46bd      	mov	sp, r7
 8001892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001896:	4770      	bx	lr

08001898 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001898:	b480      	push	{r7}
 800189a:	b085      	sub	sp, #20
 800189c:	af00      	add	r7, sp, #0
 800189e:	60f8      	str	r0, [r7, #12]
 80018a0:	60b9      	str	r1, [r7, #8]
 80018a2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80018a4:	2300      	movs	r3, #0
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	3714      	adds	r7, #20
 80018aa:	46bd      	mov	sp, r7
 80018ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b0:	4770      	bx	lr
	...

080018b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b086      	sub	sp, #24
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018bc:	4a14      	ldr	r2, [pc, #80]	; (8001910 <_sbrk+0x5c>)
 80018be:	4b15      	ldr	r3, [pc, #84]	; (8001914 <_sbrk+0x60>)
 80018c0:	1ad3      	subs	r3, r2, r3
 80018c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018c4:	697b      	ldr	r3, [r7, #20]
 80018c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018c8:	4b13      	ldr	r3, [pc, #76]	; (8001918 <_sbrk+0x64>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d102      	bne.n	80018d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018d0:	4b11      	ldr	r3, [pc, #68]	; (8001918 <_sbrk+0x64>)
 80018d2:	4a12      	ldr	r2, [pc, #72]	; (800191c <_sbrk+0x68>)
 80018d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018d6:	4b10      	ldr	r3, [pc, #64]	; (8001918 <_sbrk+0x64>)
 80018d8:	681a      	ldr	r2, [r3, #0]
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	4413      	add	r3, r2
 80018de:	693a      	ldr	r2, [r7, #16]
 80018e0:	429a      	cmp	r2, r3
 80018e2:	d207      	bcs.n	80018f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018e4:	f015 fc90 	bl	8017208 <__errno>
 80018e8:	4603      	mov	r3, r0
 80018ea:	220c      	movs	r2, #12
 80018ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018ee:	f04f 33ff 	mov.w	r3, #4294967295
 80018f2:	e009      	b.n	8001908 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018f4:	4b08      	ldr	r3, [pc, #32]	; (8001918 <_sbrk+0x64>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018fa:	4b07      	ldr	r3, [pc, #28]	; (8001918 <_sbrk+0x64>)
 80018fc:	681a      	ldr	r2, [r3, #0]
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	4413      	add	r3, r2
 8001902:	4a05      	ldr	r2, [pc, #20]	; (8001918 <_sbrk+0x64>)
 8001904:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001906:	68fb      	ldr	r3, [r7, #12]
}
 8001908:	4618      	mov	r0, r3
 800190a:	3718      	adds	r7, #24
 800190c:	46bd      	mov	sp, r7
 800190e:	bd80      	pop	{r7, pc}
 8001910:	20020000 	.word	0x20020000
 8001914:	00000400 	.word	0x00000400
 8001918:	200004e0 	.word	0x200004e0
 800191c:	200070e8 	.word	0x200070e8

08001920 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001920:	b480      	push	{r7}
 8001922:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001924:	4b06      	ldr	r3, [pc, #24]	; (8001940 <SystemInit+0x20>)
 8001926:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800192a:	4a05      	ldr	r2, [pc, #20]	; (8001940 <SystemInit+0x20>)
 800192c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001930:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001934:	bf00      	nop
 8001936:	46bd      	mov	sp, r7
 8001938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193c:	4770      	bx	lr
 800193e:	bf00      	nop
 8001940:	e000ed00 	.word	0xe000ed00

08001944 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001944:	f8df d034 	ldr.w	sp, [pc, #52]	; 800197c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001948:	f7ff ffea 	bl	8001920 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800194c:	480c      	ldr	r0, [pc, #48]	; (8001980 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800194e:	490d      	ldr	r1, [pc, #52]	; (8001984 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001950:	4a0d      	ldr	r2, [pc, #52]	; (8001988 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001952:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001954:	e002      	b.n	800195c <LoopCopyDataInit>

08001956 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001956:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001958:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800195a:	3304      	adds	r3, #4

0800195c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800195c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800195e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001960:	d3f9      	bcc.n	8001956 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001962:	4a0a      	ldr	r2, [pc, #40]	; (800198c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001964:	4c0a      	ldr	r4, [pc, #40]	; (8001990 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001966:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001968:	e001      	b.n	800196e <LoopFillZerobss>

0800196a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800196a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800196c:	3204      	adds	r2, #4

0800196e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800196e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001970:	d3fb      	bcc.n	800196a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001972:	f015 fc4f 	bl	8017214 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001976:	f7ff fda1 	bl	80014bc <main>
  bx  lr    
 800197a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800197c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001980:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001984:	20000368 	.word	0x20000368
  ldr r2, =_sidata
 8001988:	080261b4 	.word	0x080261b4
  ldr r2, =_sbss
 800198c:	20000380 	.word	0x20000380
  ldr r4, =_ebss
 8001990:	200070e4 	.word	0x200070e4

08001994 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001994:	e7fe      	b.n	8001994 <ADC_IRQHandler>

08001996 <delay>:
#include "common.h"



void delay(uint32_t ms)
{
 8001996:	b580      	push	{r7, lr}
 8001998:	b082      	sub	sp, #8
 800199a:	af00      	add	r7, sp, #0
 800199c:	6078      	str	r0, [r7, #4]
	HAL_Delay(ms);
 800199e:	6878      	ldr	r0, [r7, #4]
 80019a0:	f004 f84c 	bl	8005a3c <HAL_Delay>
}
 80019a4:	bf00      	nop
 80019a6:	3708      	adds	r7, #8
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd80      	pop	{r7, pc}

080019ac <millis>:


uint32_t millis(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	af00      	add	r7, sp, #0
	return HAL_GetTick();
 80019b0:	f004 f838 	bl	8005a24 <HAL_GetTick>
 80019b4:	4603      	mov	r3, r0
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	bd80      	pop	{r7, pc}
	...

080019bc <SD_CheckStatus>:
#endif /* _USE_IOCTL == 1 */
};

/* Private functions ---------------------------------------------------------*/
static DSTATUS SD_CheckStatus(BYTE lun)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b082      	sub	sp, #8
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	4603      	mov	r3, r0
 80019c4:	71fb      	strb	r3, [r7, #7]
  Stat = 0;
 80019c6:	4b1d      	ldr	r3, [pc, #116]	; (8001a3c <SD_CheckStatus+0x80>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	701a      	strb	r2, [r3, #0]


  if (sdIsInit() != true)
 80019cc:	f003 fb20 	bl	8005010 <sdIsInit>
 80019d0:	4603      	mov	r3, r0
 80019d2:	f083 0301 	eor.w	r3, r3, #1
 80019d6:	b2db      	uxtb	r3, r3
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d007      	beq.n	80019ec <SD_CheckStatus+0x30>
  {
    Stat |= STA_NOINIT;
 80019dc:	4b17      	ldr	r3, [pc, #92]	; (8001a3c <SD_CheckStatus+0x80>)
 80019de:	781b      	ldrb	r3, [r3, #0]
 80019e0:	b2db      	uxtb	r3, r3
 80019e2:	f043 0301 	orr.w	r3, r3, #1
 80019e6:	b2da      	uxtb	r2, r3
 80019e8:	4b14      	ldr	r3, [pc, #80]	; (8001a3c <SD_CheckStatus+0x80>)
 80019ea:	701a      	strb	r2, [r3, #0]
  }
  if (sdIsDetected() != true)
 80019ec:	f003 fb1c 	bl	8005028 <sdIsDetected>
 80019f0:	4603      	mov	r3, r0
 80019f2:	f083 0301 	eor.w	r3, r3, #1
 80019f6:	b2db      	uxtb	r3, r3
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d007      	beq.n	8001a0c <SD_CheckStatus+0x50>
  {
    Stat |= STA_NODISK;
 80019fc:	4b0f      	ldr	r3, [pc, #60]	; (8001a3c <SD_CheckStatus+0x80>)
 80019fe:	781b      	ldrb	r3, [r3, #0]
 8001a00:	b2db      	uxtb	r3, r3
 8001a02:	f043 0302 	orr.w	r3, r3, #2
 8001a06:	b2da      	uxtb	r2, r3
 8001a08:	4b0c      	ldr	r3, [pc, #48]	; (8001a3c <SD_CheckStatus+0x80>)
 8001a0a:	701a      	strb	r2, [r3, #0]
  }
  if (sdIsReady(10) != true)
 8001a0c:	200a      	movs	r0, #10
 8001a0e:	f003 fb8f 	bl	8005130 <sdIsReady>
 8001a12:	4603      	mov	r3, r0
 8001a14:	f083 0301 	eor.w	r3, r3, #1
 8001a18:	b2db      	uxtb	r3, r3
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d007      	beq.n	8001a2e <SD_CheckStatus+0x72>
  {
    Stat |= STA_NOINIT;
 8001a1e:	4b07      	ldr	r3, [pc, #28]	; (8001a3c <SD_CheckStatus+0x80>)
 8001a20:	781b      	ldrb	r3, [r3, #0]
 8001a22:	b2db      	uxtb	r3, r3
 8001a24:	f043 0301 	orr.w	r3, r3, #1
 8001a28:	b2da      	uxtb	r2, r3
 8001a2a:	4b04      	ldr	r3, [pc, #16]	; (8001a3c <SD_CheckStatus+0x80>)
 8001a2c:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8001a2e:	4b03      	ldr	r3, [pc, #12]	; (8001a3c <SD_CheckStatus+0x80>)
 8001a30:	781b      	ldrb	r3, [r3, #0]
 8001a32:	b2db      	uxtb	r3, r3
}
 8001a34:	4618      	mov	r0, r3
 8001a36:	3708      	adds	r7, #8
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bd80      	pop	{r7, pc}
 8001a3c:	20000044 	.word	0x20000044

08001a40 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b082      	sub	sp, #8
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	4603      	mov	r3, r0
 8001a48:	71fb      	strb	r3, [r7, #7]
  Stat = 0;
 8001a4a:	4b0d      	ldr	r3, [pc, #52]	; (8001a80 <SD_initialize+0x40>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	701a      	strb	r2, [r3, #0]

  if (sdIsInit() != true)
 8001a50:	f003 fade 	bl	8005010 <sdIsInit>
 8001a54:	4603      	mov	r3, r0
 8001a56:	f083 0301 	eor.w	r3, r3, #1
 8001a5a:	b2db      	uxtb	r3, r3
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d007      	beq.n	8001a70 <SD_initialize+0x30>
  {
    Stat |= STA_NOINIT;
 8001a60:	4b07      	ldr	r3, [pc, #28]	; (8001a80 <SD_initialize+0x40>)
 8001a62:	781b      	ldrb	r3, [r3, #0]
 8001a64:	b2db      	uxtb	r3, r3
 8001a66:	f043 0301 	orr.w	r3, r3, #1
 8001a6a:	b2da      	uxtb	r2, r3
 8001a6c:	4b04      	ldr	r3, [pc, #16]	; (8001a80 <SD_initialize+0x40>)
 8001a6e:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8001a70:	4b03      	ldr	r3, [pc, #12]	; (8001a80 <SD_initialize+0x40>)
 8001a72:	781b      	ldrb	r3, [r3, #0]
 8001a74:	b2db      	uxtb	r3, r3
}
 8001a76:	4618      	mov	r0, r3
 8001a78:	3708      	adds	r7, #8
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}
 8001a7e:	bf00      	nop
 8001a80:	20000044 	.word	0x20000044

08001a84 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b082      	sub	sp, #8
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8001a8e:	79fb      	ldrb	r3, [r7, #7]
 8001a90:	4618      	mov	r0, r3
 8001a92:	f7ff ff93 	bl	80019bc <SD_CheckStatus>
 8001a96:	4603      	mov	r3, r0
}
 8001a98:	4618      	mov	r0, r3
 8001a9a:	3708      	adds	r7, #8
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bd80      	pop	{r7, pc}

08001aa0 <SD_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b086      	sub	sp, #24
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	60b9      	str	r1, [r7, #8]
 8001aa8:	607a      	str	r2, [r7, #4]
 8001aaa:	603b      	str	r3, [r7, #0]
 8001aac:	4603      	mov	r3, r0
 8001aae:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	75fb      	strb	r3, [r7, #23]


  if (sdReadBlocks(sector, buff, count, SD_TIMEOUT) == true)
 8001ab4:	f242 7310 	movw	r3, #10000	; 0x2710
 8001ab8:	683a      	ldr	r2, [r7, #0]
 8001aba:	68b9      	ldr	r1, [r7, #8]
 8001abc:	6878      	ldr	r0, [r7, #4]
 8001abe:	f003 fb57 	bl	8005170 <sdReadBlocks>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d001      	beq.n	8001acc <SD_read+0x2c>
  {
    res = RES_OK;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8001acc:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	3718      	adds	r7, #24
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}

08001ad6 <SD_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8001ad6:	b580      	push	{r7, lr}
 8001ad8:	b086      	sub	sp, #24
 8001ada:	af00      	add	r7, sp, #0
 8001adc:	60b9      	str	r1, [r7, #8]
 8001ade:	607a      	str	r2, [r7, #4]
 8001ae0:	603b      	str	r3, [r7, #0]
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	75fb      	strb	r3, [r7, #23]

  if (sdWriteBlocks(sector, (uint8_t *)buff, count, SD_TIMEOUT) == true)
 8001aea:	f242 7310 	movw	r3, #10000	; 0x2710
 8001aee:	683a      	ldr	r2, [r7, #0]
 8001af0:	68b9      	ldr	r1, [r7, #8]
 8001af2:	6878      	ldr	r0, [r7, #4]
 8001af4:	f003 fb86 	bl	8005204 <sdWriteBlocks>
 8001af8:	4603      	mov	r3, r0
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d001      	beq.n	8001b02 <SD_write+0x2c>
  {
    res = RES_OK;
 8001afe:	2300      	movs	r3, #0
 8001b00:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8001b02:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b04:	4618      	mov	r0, r3
 8001b06:	3718      	adds	r7, #24
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}

08001b0c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b08c      	sub	sp, #48	; 0x30
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	4603      	mov	r3, r0
 8001b14:	603a      	str	r2, [r7, #0]
 8001b16:	71fb      	strb	r3, [r7, #7]
 8001b18:	460b      	mov	r3, r1
 8001b1a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  sd_info_t sd_info;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001b22:	4b25      	ldr	r3, [pc, #148]	; (8001bb8 <SD_ioctl+0xac>)
 8001b24:	781b      	ldrb	r3, [r3, #0]
 8001b26:	b2db      	uxtb	r3, r3
 8001b28:	f003 0301 	and.w	r3, r3, #1
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d001      	beq.n	8001b34 <SD_ioctl+0x28>
 8001b30:	2303      	movs	r3, #3
 8001b32:	e03c      	b.n	8001bae <SD_ioctl+0xa2>

  switch (cmd)
 8001b34:	79bb      	ldrb	r3, [r7, #6]
 8001b36:	2b03      	cmp	r3, #3
 8001b38:	d834      	bhi.n	8001ba4 <SD_ioctl+0x98>
 8001b3a:	a201      	add	r2, pc, #4	; (adr r2, 8001b40 <SD_ioctl+0x34>)
 8001b3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b40:	08001b51 	.word	0x08001b51
 8001b44:	08001b59 	.word	0x08001b59
 8001b48:	08001b71 	.word	0x08001b71
 8001b4c:	08001b8b 	.word	0x08001b8b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8001b50:	2300      	movs	r3, #0
 8001b52:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8001b56:	e028      	b.n	8001baa <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    sdGetInfo(&sd_info);
 8001b58:	f107 0308 	add.w	r3, r7, #8
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f003 fa79 	bl	8005054 <sdGetInfo>
    *(DWORD*)buff = sd_info.log_block_numbers;
 8001b62:	6a3a      	ldr	r2, [r7, #32]
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8001b6e:	e01c      	b.n	8001baa <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    sdGetInfo(&sd_info);
 8001b70:	f107 0308 	add.w	r3, r7, #8
 8001b74:	4618      	mov	r0, r3
 8001b76:	f003 fa6d 	bl	8005054 <sdGetInfo>
    *(WORD*)buff = sd_info.log_block_size;
 8001b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b7c:	b29a      	uxth	r2, r3
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8001b82:	2300      	movs	r3, #0
 8001b84:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8001b88:	e00f      	b.n	8001baa <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    sdGetInfo(&sd_info);
 8001b8a:	f107 0308 	add.w	r3, r7, #8
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f003 fa60 	bl	8005054 <sdGetInfo>
    *(DWORD*)buff = sd_info.log_block_size / SD_DEFAULT_BLOCK_SIZE;
 8001b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b96:	0a5a      	lsrs	r2, r3, #9
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8001ba2:	e002      	b.n	8001baa <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8001ba4:	2304      	movs	r3, #4
 8001ba6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8001baa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001bae:	4618      	mov	r0, r3
 8001bb0:	3730      	adds	r7, #48	; 0x30
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	20000044 	.word	0x20000044

08001bbc <hanFontLoad>:
void hanWanFontLoad(char *HanCode, han_font_t *FontPtr);
void hanUniFontLoad(char *HanCode, han_font_t *FontPtr);
uint16_t hanCnvCodeWan2Johab(uint16_t WanCode);

uint16_t hanFontLoad(char *HanCode, han_font_t *FontPtr)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b084      	sub	sp, #16
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
 8001bc4:	6039      	str	r1, [r7, #0]
	// buffer reset
	memset(FontPtr->FontBuffer, 0x00, 32);
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	3306      	adds	r3, #6
 8001bca:	2220      	movs	r2, #32
 8001bcc:	2100      	movs	r1, #0
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f015 fa7e 	bl	80170d0 <memset>

	FontPtr->Code_Type = PHAN_NULL_CODE;
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	809a      	strh	r2, [r3, #4]

	// Identifying if it's a Korean code
	if(!HanCode[0] || HanCode[0] == 0x0A)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	781b      	ldrb	r3, [r3, #0]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d003      	beq.n	8001bea <hanFontLoad+0x2e>
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	781b      	ldrb	r3, [r3, #0]
 8001be6:	2b0a      	cmp	r3, #10
 8001be8:	d107      	bne.n	8001bfa <hanFontLoad+0x3e>
	{
		FontPtr->Code_Type = PHAN_END_CODE;
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	2204      	movs	r2, #4
 8001bee:	809a      	strh	r2, [r3, #4]
		FontPtr->Size_Char = 1;
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	2201      	movs	r2, #1
 8001bf4:	805a      	strh	r2, [r3, #2]
		return PHAN_END_CODE;
 8001bf6:	2304      	movs	r3, #4
 8001bf8:	e03b      	b.n	8001c72 <hanFontLoad+0xb6>
	}
	else if(HanCode[0] & 0x80)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	781b      	ldrb	r3, [r3, #0]
 8001bfe:	b25b      	sxtb	r3, r3
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	da2b      	bge.n	8001c5c <hanFontLoad+0xa0>
	{
		uint32_t utf8_code;

		utf8_code = ((uint8_t)HanCode[0]<<16) | ((uint8_t)HanCode[1]<<8) | ((uint8_t)HanCode[2]<<0);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	781b      	ldrb	r3, [r3, #0]
 8001c08:	041a      	lsls	r2, r3, #16
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	3301      	adds	r3, #1
 8001c0e:	781b      	ldrb	r3, [r3, #0]
 8001c10:	021b      	lsls	r3, r3, #8
 8001c12:	4313      	orrs	r3, r2
 8001c14:	687a      	ldr	r2, [r7, #4]
 8001c16:	3202      	adds	r2, #2
 8001c18:	7812      	ldrb	r2, [r2, #0]
 8001c1a:	4313      	orrs	r3, r2
 8001c1c:	60fb      	str	r3, [r7, #12]

		if(utf8_code >= 0xEAB080 && utf8_code <= 0xED9FB0)
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	4a16      	ldr	r2, [pc, #88]	; (8001c7c <hanFontLoad+0xc0>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d30e      	bcc.n	8001c44 <hanFontLoad+0x88>
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	4a15      	ldr	r2, [pc, #84]	; (8001c80 <hanFontLoad+0xc4>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d80a      	bhi.n	8001c44 <hanFontLoad+0x88>
		{
			FontPtr->Code_Type = PHAN_HANGUL_CODE;
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	2201      	movs	r2, #1
 8001c32:	809a      	strh	r2, [r3, #4]
			FontPtr->Size_Char = 3;
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	2203      	movs	r2, #3
 8001c38:	805a      	strh	r2, [r3, #2]
			hanUniFontLoad(HanCode, FontPtr);
 8001c3a:	6839      	ldr	r1, [r7, #0]
 8001c3c:	6878      	ldr	r0, [r7, #4]
 8001c3e:	f000 f91f 	bl	8001e80 <hanUniFontLoad>
 8001c42:	e009      	b.n	8001c58 <hanFontLoad+0x9c>
		}
		else
		{
			FontPtr->Code_Type = PHAN_HANGUL_CODE;
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	2201      	movs	r2, #1
 8001c48:	809a      	strh	r2, [r3, #4]
			FontPtr->Size_Char = 2;
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	2202      	movs	r2, #2
 8001c4e:	805a      	strh	r2, [r3, #2]
			hanWanFontLoad(HanCode, FontPtr);
 8001c50:	6839      	ldr	r1, [r7, #0]
 8001c52:	6878      	ldr	r0, [r7, #4]
 8001c54:	f000 f816 	bl	8001c84 <hanWanFontLoad>
		}

		return PHAN_HANGUL_CODE;
 8001c58:	2301      	movs	r3, #1
 8001c5a:	e00a      	b.n	8001c72 <hanFontLoad+0xb6>
	}
	else // eng code
	{
		FontPtr->Code_Type = PHAN_ENG_CODE;
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	2202      	movs	r2, #2
 8001c60:	809a      	strh	r2, [r3, #4]
		FontPtr->Size_Char = 1;
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	2201      	movs	r2, #1
 8001c66:	805a      	strh	r2, [r3, #2]
		hanEngFontLoad(HanCode, FontPtr);
 8001c68:	6839      	ldr	r1, [r7, #0]
 8001c6a:	6878      	ldr	r0, [r7, #4]
 8001c6c:	f000 fa30 	bl	80020d0 <hanEngFontLoad>
		return PHAN_ENG_CODE;
 8001c70:	2302      	movs	r3, #2
	}

	return FontPtr->Code_Type;
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	3710      	adds	r7, #16
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}
 8001c7a:	bf00      	nop
 8001c7c:	00eab080 	.word	0x00eab080
 8001c80:	00ed9fb0 	.word	0x00ed9fb0

08001c84 <hanWanFontLoad>:

// 완성형 한글 코드를 기반으로 한글 폰트를 로드
void hanWanFontLoad(char *HanCode, han_font_t *FontPtr)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b084      	sub	sp, #16
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
 8001c8c:	6039      	str	r1, [r7, #0]
	uint16_t wHanCode;

	// static declaration 은 속도를 높이기 위한것임.
	static uint16_t uChosung, uJoongsung, uJongsung, uChoType, uJooType, uJonType;

	wHanCode = (uint16_t)HanCode[0]<<8 | ((uint16_t)HanCode[1] & 0x00FF);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	781b      	ldrb	r3, [r3, #0]
 8001c92:	021b      	lsls	r3, r3, #8
 8001c94:	b21a      	sxth	r2, r3
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	3301      	adds	r3, #1
 8001c9a:	781b      	ldrb	r3, [r3, #0]
 8001c9c:	b21b      	sxth	r3, r3
 8001c9e:	4313      	orrs	r3, r2
 8001ca0:	b21b      	sxth	r3, r3
 8001ca2:	81bb      	strh	r3, [r7, #12]
	wHanCode = hanCnvCodeWan2Johab(wHanCode);
 8001ca4:	89bb      	ldrh	r3, [r7, #12]
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f000 fa3c 	bl	8002124 <hanCnvCodeWan2Johab>
 8001cac:	4603      	mov	r3, r0
 8001cae:	81bb      	strh	r3, [r7, #12]

	// seperate phoneme code
	uChosung = (wHanCode>>10) & 0x001F; // Chosung code
 8001cb0:	89bb      	ldrh	r3, [r7, #12]
 8001cb2:	0a9b      	lsrs	r3, r3, #10
 8001cb4:	b29b      	uxth	r3, r3
 8001cb6:	f003 031f 	and.w	r3, r3, #31
 8001cba:	b29a      	uxth	r2, r3
 8001cbc:	4b63      	ldr	r3, [pc, #396]	; (8001e4c <hanWanFontLoad+0x1c8>)
 8001cbe:	801a      	strh	r2, [r3, #0]
  uJoongsung = (wHanCode>>5) & 0x001F;//Joongsung code
 8001cc0:	89bb      	ldrh	r3, [r7, #12]
 8001cc2:	095b      	lsrs	r3, r3, #5
 8001cc4:	b29b      	uxth	r3, r3
 8001cc6:	f003 031f 	and.w	r3, r3, #31
 8001cca:	b29a      	uxth	r2, r3
 8001ccc:	4b60      	ldr	r3, [pc, #384]	; (8001e50 <hanWanFontLoad+0x1cc>)
 8001cce:	801a      	strh	r2, [r3, #0]
	uJongsung  = wHanCode & 0x001F;    //Jongsung code
 8001cd0:	89bb      	ldrh	r3, [r7, #12]
 8001cd2:	f003 031f 	and.w	r3, r3, #31
 8001cd6:	b29a      	uxth	r2, r3
 8001cd8:	4b5e      	ldr	r3, [pc, #376]	; (8001e54 <hanWanFontLoad+0x1d0>)
 8001cda:	801a      	strh	r2, [r3, #0]

  //make font index
  uChosung   = ChoIdxTbl[uChosung];    //Chosung index
 8001cdc:	4b5b      	ldr	r3, [pc, #364]	; (8001e4c <hanWanFontLoad+0x1c8>)
 8001cde:	881b      	ldrh	r3, [r3, #0]
 8001ce0:	461a      	mov	r2, r3
 8001ce2:	4b5d      	ldr	r3, [pc, #372]	; (8001e58 <hanWanFontLoad+0x1d4>)
 8001ce4:	5c9b      	ldrb	r3, [r3, r2]
 8001ce6:	b29a      	uxth	r2, r3
 8001ce8:	4b58      	ldr	r3, [pc, #352]	; (8001e4c <hanWanFontLoad+0x1c8>)
 8001cea:	801a      	strh	r2, [r3, #0]
  uJoongsung = JooIdxTbl[uJoongsung];  //Joongsung index
 8001cec:	4b58      	ldr	r3, [pc, #352]	; (8001e50 <hanWanFontLoad+0x1cc>)
 8001cee:	881b      	ldrh	r3, [r3, #0]
 8001cf0:	461a      	mov	r2, r3
 8001cf2:	4b5a      	ldr	r3, [pc, #360]	; (8001e5c <hanWanFontLoad+0x1d8>)
 8001cf4:	5c9b      	ldrb	r3, [r3, r2]
 8001cf6:	b29a      	uxth	r2, r3
 8001cf8:	4b55      	ldr	r3, [pc, #340]	; (8001e50 <hanWanFontLoad+0x1cc>)
 8001cfa:	801a      	strh	r2, [r3, #0]
  uJongsung  = JonIdxTbl[uJongsung];   //Jongsung index
 8001cfc:	4b55      	ldr	r3, [pc, #340]	; (8001e54 <hanWanFontLoad+0x1d0>)
 8001cfe:	881b      	ldrh	r3, [r3, #0]
 8001d00:	461a      	mov	r2, r3
 8001d02:	4b57      	ldr	r3, [pc, #348]	; (8001e60 <hanWanFontLoad+0x1dc>)
 8001d04:	5c9b      	ldrb	r3, [r3, r2]
 8001d06:	b29a      	uxth	r2, r3
 8001d08:	4b52      	ldr	r3, [pc, #328]	; (8001e54 <hanWanFontLoad+0x1d0>)
 8001d0a:	801a      	strh	r2, [r3, #0]

  //decide a character type (몇번째 벌을 사용할지 결정)
  uChoType = uJongsung ? ChoTypeCaseJongYes[uJoongsung]:ChoTypeCaseJongNo [uJoongsung];
 8001d0c:	4b51      	ldr	r3, [pc, #324]	; (8001e54 <hanWanFontLoad+0x1d0>)
 8001d0e:	881b      	ldrh	r3, [r3, #0]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d006      	beq.n	8001d22 <hanWanFontLoad+0x9e>
 8001d14:	4b4e      	ldr	r3, [pc, #312]	; (8001e50 <hanWanFontLoad+0x1cc>)
 8001d16:	881b      	ldrh	r3, [r3, #0]
 8001d18:	461a      	mov	r2, r3
 8001d1a:	4b52      	ldr	r3, [pc, #328]	; (8001e64 <hanWanFontLoad+0x1e0>)
 8001d1c:	5c9b      	ldrb	r3, [r3, r2]
 8001d1e:	b29b      	uxth	r3, r3
 8001d20:	e005      	b.n	8001d2e <hanWanFontLoad+0xaa>
 8001d22:	4b4b      	ldr	r3, [pc, #300]	; (8001e50 <hanWanFontLoad+0x1cc>)
 8001d24:	881b      	ldrh	r3, [r3, #0]
 8001d26:	461a      	mov	r2, r3
 8001d28:	4b4f      	ldr	r3, [pc, #316]	; (8001e68 <hanWanFontLoad+0x1e4>)
 8001d2a:	5c9b      	ldrb	r3, [r3, r2]
 8001d2c:	b29b      	uxth	r3, r3
 8001d2e:	4a4f      	ldr	r2, [pc, #316]	; (8001e6c <hanWanFontLoad+0x1e8>)
 8001d30:	8013      	strh	r3, [r2, #0]

  //'ㄱ'(1) 이나 'ㅋ'(16) 인경우는
  uJooType = ((uChosung == 0 || uChosung == 1 || uChosung == 16 ) ? 0: 1) + (uJongsung ? 2 : 0);
 8001d32:	4b46      	ldr	r3, [pc, #280]	; (8001e4c <hanWanFontLoad+0x1c8>)
 8001d34:	881b      	ldrh	r3, [r3, #0]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d009      	beq.n	8001d4e <hanWanFontLoad+0xca>
 8001d3a:	4b44      	ldr	r3, [pc, #272]	; (8001e4c <hanWanFontLoad+0x1c8>)
 8001d3c:	881b      	ldrh	r3, [r3, #0]
 8001d3e:	2b01      	cmp	r3, #1
 8001d40:	d005      	beq.n	8001d4e <hanWanFontLoad+0xca>
 8001d42:	4b42      	ldr	r3, [pc, #264]	; (8001e4c <hanWanFontLoad+0x1c8>)
 8001d44:	881b      	ldrh	r3, [r3, #0]
 8001d46:	2b10      	cmp	r3, #16
 8001d48:	d001      	beq.n	8001d4e <hanWanFontLoad+0xca>
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	e000      	b.n	8001d50 <hanWanFontLoad+0xcc>
 8001d4e:	2300      	movs	r3, #0
 8001d50:	b29b      	uxth	r3, r3
 8001d52:	4a40      	ldr	r2, [pc, #256]	; (8001e54 <hanWanFontLoad+0x1d0>)
 8001d54:	8812      	ldrh	r2, [r2, #0]
 8001d56:	2a00      	cmp	r2, #0
 8001d58:	d001      	beq.n	8001d5e <hanWanFontLoad+0xda>
 8001d5a:	2202      	movs	r2, #2
 8001d5c:	e000      	b.n	8001d60 <hanWanFontLoad+0xdc>
 8001d5e:	2200      	movs	r2, #0
 8001d60:	4413      	add	r3, r2
 8001d62:	b29a      	uxth	r2, r3
 8001d64:	4b42      	ldr	r3, [pc, #264]	; (8001e70 <hanWanFontLoad+0x1ec>)
 8001d66:	801a      	strh	r2, [r3, #0]
  uJonType = JonType[uJoongsung];
 8001d68:	4b39      	ldr	r3, [pc, #228]	; (8001e50 <hanWanFontLoad+0x1cc>)
 8001d6a:	881b      	ldrh	r3, [r3, #0]
 8001d6c:	461a      	mov	r2, r3
 8001d6e:	4b41      	ldr	r3, [pc, #260]	; (8001e74 <hanWanFontLoad+0x1f0>)
 8001d70:	5c9b      	ldrb	r3, [r3, r2]
 8001d72:	b29a      	uxth	r2, r3
 8001d74:	4b40      	ldr	r3, [pc, #256]	; (8001e78 <hanWanFontLoad+0x1f4>)
 8001d76:	801a      	strh	r2, [r3, #0]

  for(i = 0; i<32; i++)
 8001d78:	2300      	movs	r3, #0
 8001d7a:	81fb      	strh	r3, [r7, #14]
 8001d7c:	e035      	b.n	8001dea <hanWanFontLoad+0x166>
  {
    FontPtr->FontBuffer[i]  = K_font[uChoType*20+uChosung][i];
 8001d7e:	4b3b      	ldr	r3, [pc, #236]	; (8001e6c <hanWanFontLoad+0x1e8>)
 8001d80:	881b      	ldrh	r3, [r3, #0]
 8001d82:	461a      	mov	r2, r3
 8001d84:	4613      	mov	r3, r2
 8001d86:	009b      	lsls	r3, r3, #2
 8001d88:	4413      	add	r3, r2
 8001d8a:	009b      	lsls	r3, r3, #2
 8001d8c:	461a      	mov	r2, r3
 8001d8e:	4b2f      	ldr	r3, [pc, #188]	; (8001e4c <hanWanFontLoad+0x1c8>)
 8001d90:	881b      	ldrh	r3, [r3, #0]
 8001d92:	441a      	add	r2, r3
 8001d94:	89fb      	ldrh	r3, [r7, #14]
 8001d96:	4939      	ldr	r1, [pc, #228]	; (8001e7c <hanWanFontLoad+0x1f8>)
 8001d98:	0152      	lsls	r2, r2, #5
 8001d9a:	4413      	add	r3, r2
 8001d9c:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8001da0:	89fb      	ldrh	r3, [r7, #14]
 8001da2:	b2d1      	uxtb	r1, r2
 8001da4:	683a      	ldr	r2, [r7, #0]
 8001da6:	4413      	add	r3, r2
 8001da8:	460a      	mov	r2, r1
 8001daa:	719a      	strb	r2, [r3, #6]
    FontPtr->FontBuffer[i] |= K_font[160 + uJooType*22+uJoongsung][i];
 8001dac:	89fb      	ldrh	r3, [r7, #14]
 8001dae:	683a      	ldr	r2, [r7, #0]
 8001db0:	4413      	add	r3, r2
 8001db2:	7999      	ldrb	r1, [r3, #6]
 8001db4:	4b2e      	ldr	r3, [pc, #184]	; (8001e70 <hanWanFontLoad+0x1ec>)
 8001db6:	881b      	ldrh	r3, [r3, #0]
 8001db8:	461a      	mov	r2, r3
 8001dba:	2316      	movs	r3, #22
 8001dbc:	fb02 f303 	mul.w	r3, r2, r3
 8001dc0:	33a0      	adds	r3, #160	; 0xa0
 8001dc2:	4a23      	ldr	r2, [pc, #140]	; (8001e50 <hanWanFontLoad+0x1cc>)
 8001dc4:	8812      	ldrh	r2, [r2, #0]
 8001dc6:	441a      	add	r2, r3
 8001dc8:	89fb      	ldrh	r3, [r7, #14]
 8001dca:	482c      	ldr	r0, [pc, #176]	; (8001e7c <hanWanFontLoad+0x1f8>)
 8001dcc:	0152      	lsls	r2, r2, #5
 8001dce:	4413      	add	r3, r2
 8001dd0:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8001dd4:	b2da      	uxtb	r2, r3
 8001dd6:	89fb      	ldrh	r3, [r7, #14]
 8001dd8:	430a      	orrs	r2, r1
 8001dda:	b2d1      	uxtb	r1, r2
 8001ddc:	683a      	ldr	r2, [r7, #0]
 8001dde:	4413      	add	r3, r2
 8001de0:	460a      	mov	r2, r1
 8001de2:	719a      	strb	r2, [r3, #6]
  for(i = 0; i<32; i++)
 8001de4:	89fb      	ldrh	r3, [r7, #14]
 8001de6:	3301      	adds	r3, #1
 8001de8:	81fb      	strh	r3, [r7, #14]
 8001dea:	89fb      	ldrh	r3, [r7, #14]
 8001dec:	2b1f      	cmp	r3, #31
 8001dee:	d9c6      	bls.n	8001d7e <hanWanFontLoad+0xfa>
  }

  //combine Jongsung
  if(uJongsung)
 8001df0:	4b18      	ldr	r3, [pc, #96]	; (8001e54 <hanWanFontLoad+0x1d0>)
 8001df2:	881b      	ldrh	r3, [r3, #0]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d025      	beq.n	8001e44 <hanWanFontLoad+0x1c0>
  {
    for(i = 0; i < 32; i++)   FontPtr->FontBuffer[i] |= K_font[248 + uJonType*28+uJongsung][i];
 8001df8:	2300      	movs	r3, #0
 8001dfa:	81fb      	strh	r3, [r7, #14]
 8001dfc:	e01f      	b.n	8001e3e <hanWanFontLoad+0x1ba>
 8001dfe:	89fb      	ldrh	r3, [r7, #14]
 8001e00:	683a      	ldr	r2, [r7, #0]
 8001e02:	4413      	add	r3, r2
 8001e04:	7999      	ldrb	r1, [r3, #6]
 8001e06:	4b1c      	ldr	r3, [pc, #112]	; (8001e78 <hanWanFontLoad+0x1f4>)
 8001e08:	881b      	ldrh	r3, [r3, #0]
 8001e0a:	461a      	mov	r2, r3
 8001e0c:	4613      	mov	r3, r2
 8001e0e:	00db      	lsls	r3, r3, #3
 8001e10:	1a9b      	subs	r3, r3, r2
 8001e12:	009b      	lsls	r3, r3, #2
 8001e14:	33f8      	adds	r3, #248	; 0xf8
 8001e16:	4a0f      	ldr	r2, [pc, #60]	; (8001e54 <hanWanFontLoad+0x1d0>)
 8001e18:	8812      	ldrh	r2, [r2, #0]
 8001e1a:	441a      	add	r2, r3
 8001e1c:	89fb      	ldrh	r3, [r7, #14]
 8001e1e:	4817      	ldr	r0, [pc, #92]	; (8001e7c <hanWanFontLoad+0x1f8>)
 8001e20:	0152      	lsls	r2, r2, #5
 8001e22:	4413      	add	r3, r2
 8001e24:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8001e28:	b2da      	uxtb	r2, r3
 8001e2a:	89fb      	ldrh	r3, [r7, #14]
 8001e2c:	430a      	orrs	r2, r1
 8001e2e:	b2d1      	uxtb	r1, r2
 8001e30:	683a      	ldr	r2, [r7, #0]
 8001e32:	4413      	add	r3, r2
 8001e34:	460a      	mov	r2, r1
 8001e36:	719a      	strb	r2, [r3, #6]
 8001e38:	89fb      	ldrh	r3, [r7, #14]
 8001e3a:	3301      	adds	r3, #1
 8001e3c:	81fb      	strh	r3, [r7, #14]
 8001e3e:	89fb      	ldrh	r3, [r7, #14]
 8001e40:	2b1f      	cmp	r3, #31
 8001e42:	d9dc      	bls.n	8001dfe <hanWanFontLoad+0x17a>
  }
}
 8001e44:	bf00      	nop
 8001e46:	3710      	adds	r7, #16
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd80      	pop	{r7, pc}
 8001e4c:	200004e4 	.word	0x200004e4
 8001e50:	200004e6 	.word	0x200004e6
 8001e54:	200004e8 	.word	0x200004e8
 8001e58:	0801b124 	.word	0x0801b124
 8001e5c:	0801b144 	.word	0x0801b144
 8001e60:	0801b164 	.word	0x0801b164
 8001e64:	0801b1fc 	.word	0x0801b1fc
 8001e68:	0801b1e4 	.word	0x0801b1e4
 8001e6c:	200004ea 	.word	0x200004ea
 8001e70:	200004ec 	.word	0x200004ec
 8001e74:	0801b214 	.word	0x0801b214
 8001e78:	200004ee 	.word	0x200004ee
 8001e7c:	0801d700 	.word	0x0801d700

08001e80 <hanUniFontLoad>:

// 유니코드를 기반으로 한글 폰트를 로드
void hanUniFontLoad(char *HanCode, han_font_t *FontPtr)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b085      	sub	sp, #20
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
 8001e88:	6039      	str	r1, [r7, #0]
  uint16_t utf16;

  //static declaration 은 속도를 높이기 위한것임.
  static uint16_t uChosung, uJoongsung, uJongsung, uChoType, uJooType,uJonType;

  utf16 = (uint8_t)(HanCode[0] & 0x0f) << 12 | (uint8_t)(HanCode[1] & 0x3f) << 6 | (uint8_t)(HanCode[2] & 0x3f);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	781b      	ldrb	r3, [r3, #0]
 8001e8e:	031b      	lsls	r3, r3, #12
 8001e90:	b21a      	sxth	r2, r3
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	3301      	adds	r3, #1
 8001e96:	781b      	ldrb	r3, [r3, #0]
 8001e98:	019b      	lsls	r3, r3, #6
 8001e9a:	b21b      	sxth	r3, r3
 8001e9c:	f403 637c 	and.w	r3, r3, #4032	; 0xfc0
 8001ea0:	b21b      	sxth	r3, r3
 8001ea2:	4313      	orrs	r3, r2
 8001ea4:	b21a      	sxth	r2, r3
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	3302      	adds	r3, #2
 8001eaa:	781b      	ldrb	r3, [r3, #0]
 8001eac:	b21b      	sxth	r3, r3
 8001eae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001eb2:	b21b      	sxth	r3, r3
 8001eb4:	4313      	orrs	r3, r2
 8001eb6:	b21b      	sxth	r3, r3
 8001eb8:	81bb      	strh	r3, [r7, #12]

  //seperate phoneme code
  utf16 -= 0xac00;
 8001eba:	89bb      	ldrh	r3, [r7, #12]
 8001ebc:	f503 43a8 	add.w	r3, r3, #21504	; 0x5400
 8001ec0:	81bb      	strh	r3, [r7, #12]
  uJongsung  = utf16 % 28;
 8001ec2:	89ba      	ldrh	r2, [r7, #12]
 8001ec4:	0893      	lsrs	r3, r2, #2
 8001ec6:	4973      	ldr	r1, [pc, #460]	; (8002094 <hanUniFontLoad+0x214>)
 8001ec8:	fba1 3103 	umull	r3, r1, r1, r3
 8001ecc:	460b      	mov	r3, r1
 8001ece:	00db      	lsls	r3, r3, #3
 8001ed0:	1a5b      	subs	r3, r3, r1
 8001ed2:	009b      	lsls	r3, r3, #2
 8001ed4:	1ad3      	subs	r3, r2, r3
 8001ed6:	b29a      	uxth	r2, r3
 8001ed8:	4b6f      	ldr	r3, [pc, #444]	; (8002098 <hanUniFontLoad+0x218>)
 8001eda:	801a      	strh	r2, [r3, #0]
  utf16 /= 28;
 8001edc:	89bb      	ldrh	r3, [r7, #12]
 8001ede:	089b      	lsrs	r3, r3, #2
 8001ee0:	4a6c      	ldr	r2, [pc, #432]	; (8002094 <hanUniFontLoad+0x214>)
 8001ee2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ee6:	81bb      	strh	r3, [r7, #12]
  uJoongsung = utf16 % 21;
 8001ee8:	89b9      	ldrh	r1, [r7, #12]
 8001eea:	4b6c      	ldr	r3, [pc, #432]	; (800209c <hanUniFontLoad+0x21c>)
 8001eec:	fba3 2301 	umull	r2, r3, r3, r1
 8001ef0:	1aca      	subs	r2, r1, r3
 8001ef2:	0852      	lsrs	r2, r2, #1
 8001ef4:	4413      	add	r3, r2
 8001ef6:	091a      	lsrs	r2, r3, #4
 8001ef8:	4613      	mov	r3, r2
 8001efa:	005b      	lsls	r3, r3, #1
 8001efc:	4413      	add	r3, r2
 8001efe:	00da      	lsls	r2, r3, #3
 8001f00:	1ad2      	subs	r2, r2, r3
 8001f02:	1a8b      	subs	r3, r1, r2
 8001f04:	b29a      	uxth	r2, r3
 8001f06:	4b66      	ldr	r3, [pc, #408]	; (80020a0 <hanUniFontLoad+0x220>)
 8001f08:	801a      	strh	r2, [r3, #0]
  uChosung   = utf16 / 21;
 8001f0a:	89ba      	ldrh	r2, [r7, #12]
 8001f0c:	4b63      	ldr	r3, [pc, #396]	; (800209c <hanUniFontLoad+0x21c>)
 8001f0e:	fba3 1302 	umull	r1, r3, r3, r2
 8001f12:	1ad2      	subs	r2, r2, r3
 8001f14:	0852      	lsrs	r2, r2, #1
 8001f16:	4413      	add	r3, r2
 8001f18:	091b      	lsrs	r3, r3, #4
 8001f1a:	b29a      	uxth	r2, r3
 8001f1c:	4b61      	ldr	r3, [pc, #388]	; (80020a4 <hanUniFontLoad+0x224>)
 8001f1e:	801a      	strh	r2, [r3, #0]

  //make font index
  uChosung   = UniChoIdxTbl[uChosung];    //Chosung index
 8001f20:	4b60      	ldr	r3, [pc, #384]	; (80020a4 <hanUniFontLoad+0x224>)
 8001f22:	881b      	ldrh	r3, [r3, #0]
 8001f24:	461a      	mov	r2, r3
 8001f26:	4b60      	ldr	r3, [pc, #384]	; (80020a8 <hanUniFontLoad+0x228>)
 8001f28:	5c9b      	ldrb	r3, [r3, r2]
 8001f2a:	b29a      	uxth	r2, r3
 8001f2c:	4b5d      	ldr	r3, [pc, #372]	; (80020a4 <hanUniFontLoad+0x224>)
 8001f2e:	801a      	strh	r2, [r3, #0]
  uJoongsung = UniJooIdxTbl[uJoongsung];  //Joongsung index
 8001f30:	4b5b      	ldr	r3, [pc, #364]	; (80020a0 <hanUniFontLoad+0x220>)
 8001f32:	881b      	ldrh	r3, [r3, #0]
 8001f34:	461a      	mov	r2, r3
 8001f36:	4b5d      	ldr	r3, [pc, #372]	; (80020ac <hanUniFontLoad+0x22c>)
 8001f38:	5c9b      	ldrb	r3, [r3, r2]
 8001f3a:	b29a      	uxth	r2, r3
 8001f3c:	4b58      	ldr	r3, [pc, #352]	; (80020a0 <hanUniFontLoad+0x220>)
 8001f3e:	801a      	strh	r2, [r3, #0]
  uJongsung  = UniJonIdxTbl[uJongsung];   //Jongsung index
 8001f40:	4b55      	ldr	r3, [pc, #340]	; (8002098 <hanUniFontLoad+0x218>)
 8001f42:	881b      	ldrh	r3, [r3, #0]
 8001f44:	461a      	mov	r2, r3
 8001f46:	4b5a      	ldr	r3, [pc, #360]	; (80020b0 <hanUniFontLoad+0x230>)
 8001f48:	5c9b      	ldrb	r3, [r3, r2]
 8001f4a:	b29a      	uxth	r2, r3
 8001f4c:	4b52      	ldr	r3, [pc, #328]	; (8002098 <hanUniFontLoad+0x218>)
 8001f4e:	801a      	strh	r2, [r3, #0]

  //decide a character type (몇번째 벌을 사용할지 결정)
  uChoType = uJongsung ? ChoTypeCaseJongYes[uJoongsung]:ChoTypeCaseJongNo [uJoongsung];
 8001f50:	4b51      	ldr	r3, [pc, #324]	; (8002098 <hanUniFontLoad+0x218>)
 8001f52:	881b      	ldrh	r3, [r3, #0]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d006      	beq.n	8001f66 <hanUniFontLoad+0xe6>
 8001f58:	4b51      	ldr	r3, [pc, #324]	; (80020a0 <hanUniFontLoad+0x220>)
 8001f5a:	881b      	ldrh	r3, [r3, #0]
 8001f5c:	461a      	mov	r2, r3
 8001f5e:	4b55      	ldr	r3, [pc, #340]	; (80020b4 <hanUniFontLoad+0x234>)
 8001f60:	5c9b      	ldrb	r3, [r3, r2]
 8001f62:	b29b      	uxth	r3, r3
 8001f64:	e005      	b.n	8001f72 <hanUniFontLoad+0xf2>
 8001f66:	4b4e      	ldr	r3, [pc, #312]	; (80020a0 <hanUniFontLoad+0x220>)
 8001f68:	881b      	ldrh	r3, [r3, #0]
 8001f6a:	461a      	mov	r2, r3
 8001f6c:	4b52      	ldr	r3, [pc, #328]	; (80020b8 <hanUniFontLoad+0x238>)
 8001f6e:	5c9b      	ldrb	r3, [r3, r2]
 8001f70:	b29b      	uxth	r3, r3
 8001f72:	4a52      	ldr	r2, [pc, #328]	; (80020bc <hanUniFontLoad+0x23c>)
 8001f74:	8013      	strh	r3, [r2, #0]

  //'ㄱ'(1) 이나 'ㅋ'(16) 인경우는
  uJooType = ((uChosung == 0 || uChosung == 1 ||uChosung == 16 ) ? 0: 1) + (uJongsung ? 2: 0);
 8001f76:	4b4b      	ldr	r3, [pc, #300]	; (80020a4 <hanUniFontLoad+0x224>)
 8001f78:	881b      	ldrh	r3, [r3, #0]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d009      	beq.n	8001f92 <hanUniFontLoad+0x112>
 8001f7e:	4b49      	ldr	r3, [pc, #292]	; (80020a4 <hanUniFontLoad+0x224>)
 8001f80:	881b      	ldrh	r3, [r3, #0]
 8001f82:	2b01      	cmp	r3, #1
 8001f84:	d005      	beq.n	8001f92 <hanUniFontLoad+0x112>
 8001f86:	4b47      	ldr	r3, [pc, #284]	; (80020a4 <hanUniFontLoad+0x224>)
 8001f88:	881b      	ldrh	r3, [r3, #0]
 8001f8a:	2b10      	cmp	r3, #16
 8001f8c:	d001      	beq.n	8001f92 <hanUniFontLoad+0x112>
 8001f8e:	2301      	movs	r3, #1
 8001f90:	e000      	b.n	8001f94 <hanUniFontLoad+0x114>
 8001f92:	2300      	movs	r3, #0
 8001f94:	b29b      	uxth	r3, r3
 8001f96:	4a40      	ldr	r2, [pc, #256]	; (8002098 <hanUniFontLoad+0x218>)
 8001f98:	8812      	ldrh	r2, [r2, #0]
 8001f9a:	2a00      	cmp	r2, #0
 8001f9c:	d001      	beq.n	8001fa2 <hanUniFontLoad+0x122>
 8001f9e:	2202      	movs	r2, #2
 8001fa0:	e000      	b.n	8001fa4 <hanUniFontLoad+0x124>
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	4413      	add	r3, r2
 8001fa6:	b29a      	uxth	r2, r3
 8001fa8:	4b45      	ldr	r3, [pc, #276]	; (80020c0 <hanUniFontLoad+0x240>)
 8001faa:	801a      	strh	r2, [r3, #0]
  uJonType = JonType[uJoongsung];
 8001fac:	4b3c      	ldr	r3, [pc, #240]	; (80020a0 <hanUniFontLoad+0x220>)
 8001fae:	881b      	ldrh	r3, [r3, #0]
 8001fb0:	461a      	mov	r2, r3
 8001fb2:	4b44      	ldr	r3, [pc, #272]	; (80020c4 <hanUniFontLoad+0x244>)
 8001fb4:	5c9b      	ldrb	r3, [r3, r2]
 8001fb6:	b29a      	uxth	r2, r3
 8001fb8:	4b43      	ldr	r3, [pc, #268]	; (80020c8 <hanUniFontLoad+0x248>)
 8001fba:	801a      	strh	r2, [r3, #0]

  for(i = 0; i<32; i++)
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	81fb      	strh	r3, [r7, #14]
 8001fc0:	e035      	b.n	800202e <hanUniFontLoad+0x1ae>
  {
    FontPtr->FontBuffer[i]  = (uint8_t)K_font[uChoType*20+uChosung][i];
 8001fc2:	4b3e      	ldr	r3, [pc, #248]	; (80020bc <hanUniFontLoad+0x23c>)
 8001fc4:	881b      	ldrh	r3, [r3, #0]
 8001fc6:	461a      	mov	r2, r3
 8001fc8:	4613      	mov	r3, r2
 8001fca:	009b      	lsls	r3, r3, #2
 8001fcc:	4413      	add	r3, r2
 8001fce:	009b      	lsls	r3, r3, #2
 8001fd0:	461a      	mov	r2, r3
 8001fd2:	4b34      	ldr	r3, [pc, #208]	; (80020a4 <hanUniFontLoad+0x224>)
 8001fd4:	881b      	ldrh	r3, [r3, #0]
 8001fd6:	441a      	add	r2, r3
 8001fd8:	89fb      	ldrh	r3, [r7, #14]
 8001fda:	493c      	ldr	r1, [pc, #240]	; (80020cc <hanUniFontLoad+0x24c>)
 8001fdc:	0152      	lsls	r2, r2, #5
 8001fde:	4413      	add	r3, r2
 8001fe0:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8001fe4:	89fb      	ldrh	r3, [r7, #14]
 8001fe6:	b2d1      	uxtb	r1, r2
 8001fe8:	683a      	ldr	r2, [r7, #0]
 8001fea:	4413      	add	r3, r2
 8001fec:	460a      	mov	r2, r1
 8001fee:	719a      	strb	r2, [r3, #6]
    FontPtr->FontBuffer[i] |= (uint8_t)K_font[160 + uJooType*22+uJoongsung][i];
 8001ff0:	89fb      	ldrh	r3, [r7, #14]
 8001ff2:	683a      	ldr	r2, [r7, #0]
 8001ff4:	4413      	add	r3, r2
 8001ff6:	7999      	ldrb	r1, [r3, #6]
 8001ff8:	4b31      	ldr	r3, [pc, #196]	; (80020c0 <hanUniFontLoad+0x240>)
 8001ffa:	881b      	ldrh	r3, [r3, #0]
 8001ffc:	461a      	mov	r2, r3
 8001ffe:	2316      	movs	r3, #22
 8002000:	fb02 f303 	mul.w	r3, r2, r3
 8002004:	33a0      	adds	r3, #160	; 0xa0
 8002006:	4a26      	ldr	r2, [pc, #152]	; (80020a0 <hanUniFontLoad+0x220>)
 8002008:	8812      	ldrh	r2, [r2, #0]
 800200a:	441a      	add	r2, r3
 800200c:	89fb      	ldrh	r3, [r7, #14]
 800200e:	482f      	ldr	r0, [pc, #188]	; (80020cc <hanUniFontLoad+0x24c>)
 8002010:	0152      	lsls	r2, r2, #5
 8002012:	4413      	add	r3, r2
 8002014:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8002018:	b2da      	uxtb	r2, r3
 800201a:	89fb      	ldrh	r3, [r7, #14]
 800201c:	430a      	orrs	r2, r1
 800201e:	b2d1      	uxtb	r1, r2
 8002020:	683a      	ldr	r2, [r7, #0]
 8002022:	4413      	add	r3, r2
 8002024:	460a      	mov	r2, r1
 8002026:	719a      	strb	r2, [r3, #6]
  for(i = 0; i<32; i++)
 8002028:	89fb      	ldrh	r3, [r7, #14]
 800202a:	3301      	adds	r3, #1
 800202c:	81fb      	strh	r3, [r7, #14]
 800202e:	89fb      	ldrh	r3, [r7, #14]
 8002030:	2b1f      	cmp	r3, #31
 8002032:	d9c6      	bls.n	8001fc2 <hanUniFontLoad+0x142>
  }

  //combine Jongsung
  if(uJongsung)
 8002034:	4b18      	ldr	r3, [pc, #96]	; (8002098 <hanUniFontLoad+0x218>)
 8002036:	881b      	ldrh	r3, [r3, #0]
 8002038:	2b00      	cmp	r3, #0
 800203a:	d025      	beq.n	8002088 <hanUniFontLoad+0x208>
  {
    for(i = 0; i < 32; i++)   FontPtr->FontBuffer[i] |= K_font[248 + uJonType*28+uJongsung][i];
 800203c:	2300      	movs	r3, #0
 800203e:	81fb      	strh	r3, [r7, #14]
 8002040:	e01f      	b.n	8002082 <hanUniFontLoad+0x202>
 8002042:	89fb      	ldrh	r3, [r7, #14]
 8002044:	683a      	ldr	r2, [r7, #0]
 8002046:	4413      	add	r3, r2
 8002048:	7999      	ldrb	r1, [r3, #6]
 800204a:	4b1f      	ldr	r3, [pc, #124]	; (80020c8 <hanUniFontLoad+0x248>)
 800204c:	881b      	ldrh	r3, [r3, #0]
 800204e:	461a      	mov	r2, r3
 8002050:	4613      	mov	r3, r2
 8002052:	00db      	lsls	r3, r3, #3
 8002054:	1a9b      	subs	r3, r3, r2
 8002056:	009b      	lsls	r3, r3, #2
 8002058:	33f8      	adds	r3, #248	; 0xf8
 800205a:	4a0f      	ldr	r2, [pc, #60]	; (8002098 <hanUniFontLoad+0x218>)
 800205c:	8812      	ldrh	r2, [r2, #0]
 800205e:	441a      	add	r2, r3
 8002060:	89fb      	ldrh	r3, [r7, #14]
 8002062:	481a      	ldr	r0, [pc, #104]	; (80020cc <hanUniFontLoad+0x24c>)
 8002064:	0152      	lsls	r2, r2, #5
 8002066:	4413      	add	r3, r2
 8002068:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 800206c:	b2da      	uxtb	r2, r3
 800206e:	89fb      	ldrh	r3, [r7, #14]
 8002070:	430a      	orrs	r2, r1
 8002072:	b2d1      	uxtb	r1, r2
 8002074:	683a      	ldr	r2, [r7, #0]
 8002076:	4413      	add	r3, r2
 8002078:	460a      	mov	r2, r1
 800207a:	719a      	strb	r2, [r3, #6]
 800207c:	89fb      	ldrh	r3, [r7, #14]
 800207e:	3301      	adds	r3, #1
 8002080:	81fb      	strh	r3, [r7, #14]
 8002082:	89fb      	ldrh	r3, [r7, #14]
 8002084:	2b1f      	cmp	r3, #31
 8002086:	d9dc      	bls.n	8002042 <hanUniFontLoad+0x1c2>
  }
}
 8002088:	bf00      	nop
 800208a:	3714      	adds	r7, #20
 800208c:	46bd      	mov	sp, r7
 800208e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002092:	4770      	bx	lr
 8002094:	24924925 	.word	0x24924925
 8002098:	200004f0 	.word	0x200004f0
 800209c:	86186187 	.word	0x86186187
 80020a0:	200004f2 	.word	0x200004f2
 80020a4:	200004f4 	.word	0x200004f4
 80020a8:	0801b184 	.word	0x0801b184
 80020ac:	0801b1a4 	.word	0x0801b1a4
 80020b0:	0801b1c4 	.word	0x0801b1c4
 80020b4:	0801b1fc 	.word	0x0801b1fc
 80020b8:	0801b1e4 	.word	0x0801b1e4
 80020bc:	200004f6 	.word	0x200004f6
 80020c0:	200004f8 	.word	0x200004f8
 80020c4:	0801b214 	.word	0x0801b214
 80020c8:	200004fa 	.word	0x200004fa
 80020cc:	0801d700 	.word	0x0801d700

080020d0 <hanEngFontLoad>:

// 영문 코드를 기반으로 영문 폰트를 로드
void hanEngFontLoad(char *HanCode, han_font_t *FontPtr)
{
 80020d0:	b480      	push	{r7}
 80020d2:	b085      	sub	sp, #20
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
 80020d8:	6039      	str	r1, [r7, #0]
  uint16_t i;
  char EngCode;

  EngCode = *HanCode;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	781b      	ldrb	r3, [r3, #0]
 80020de:	737b      	strb	r3, [r7, #13]

  EngCode -= 0x20;  // FONT는 스페이스 부터 시작한다.
 80020e0:	7b7b      	ldrb	r3, [r7, #13]
 80020e2:	3b20      	subs	r3, #32
 80020e4:	737b      	strb	r3, [r7, #13]

  for ( i = 0 ; i < 16 ; i++ )
 80020e6:	2300      	movs	r3, #0
 80020e8:	81fb      	strh	r3, [r7, #14]
 80020ea:	e00f      	b.n	800210c <hanEngFontLoad+0x3c>
  {
     FontPtr->FontBuffer[ i ] = (char)wEngFon[(int)EngCode][i];
 80020ec:	7b7a      	ldrb	r2, [r7, #13]
 80020ee:	89fb      	ldrh	r3, [r7, #14]
 80020f0:	490b      	ldr	r1, [pc, #44]	; (8002120 <hanEngFontLoad+0x50>)
 80020f2:	0112      	lsls	r2, r2, #4
 80020f4:	4413      	add	r3, r2
 80020f6:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 80020fa:	89fb      	ldrh	r3, [r7, #14]
 80020fc:	b2d1      	uxtb	r1, r2
 80020fe:	683a      	ldr	r2, [r7, #0]
 8002100:	4413      	add	r3, r2
 8002102:	460a      	mov	r2, r1
 8002104:	719a      	strb	r2, [r3, #6]
  for ( i = 0 ; i < 16 ; i++ )
 8002106:	89fb      	ldrh	r3, [r7, #14]
 8002108:	3301      	adds	r3, #1
 800210a:	81fb      	strh	r3, [r7, #14]
 800210c:	89fb      	ldrh	r3, [r7, #14]
 800210e:	2b0f      	cmp	r3, #15
 8002110:	d9ec      	bls.n	80020ec <hanEngFontLoad+0x1c>
  }
}
 8002112:	bf00      	nop
 8002114:	bf00      	nop
 8002116:	3714      	adds	r7, #20
 8002118:	46bd      	mov	sp, r7
 800211a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211e:	4770      	bx	lr
 8002120:	08019924 	.word	0x08019924

08002124 <hanCnvCodeWan2Johab>:

// 완성형 코드를 조합형 코드로 변환
uint16_t hanCnvCodeWan2Johab(uint16_t WanCode)
{
 8002124:	b480      	push	{r7}
 8002126:	b085      	sub	sp, #20
 8002128:	af00      	add	r7, sp, #0
 800212a:	4603      	mov	r3, r0
 800212c:	80fb      	strh	r3, [r7, #6]
  int index;
  uint16_t hcode, lcode;

  hcode = (WanCode >> 8) & 0xFF;
 800212e:	88fb      	ldrh	r3, [r7, #6]
 8002130:	0a1b      	lsrs	r3, r3, #8
 8002132:	81fb      	strh	r3, [r7, #14]
  lcode = WanCode & 0x0ff;
 8002134:	88fb      	ldrh	r3, [r7, #6]
 8002136:	b2db      	uxtb	r3, r3
 8002138:	81bb      	strh	r3, [r7, #12]

  index = (hcode - 0x0B0) * 94 + (lcode - 0x0A1);
 800213a:	89fb      	ldrh	r3, [r7, #14]
 800213c:	3bb0      	subs	r3, #176	; 0xb0
 800213e:	225e      	movs	r2, #94	; 0x5e
 8002140:	fb03 f202 	mul.w	r2, r3, r2
 8002144:	89bb      	ldrh	r3, [r7, #12]
 8002146:	3ba1      	subs	r3, #161	; 0xa1
 8002148:	4413      	add	r3, r2
 800214a:	60bb      	str	r3, [r7, #8]

  return wWanToJohabTable[index];
 800214c:	4a05      	ldr	r2, [pc, #20]	; (8002164 <hanCnvCodeWan2Johab+0x40>)
 800214e:	68bb      	ldr	r3, [r7, #8]
 8002150:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002154:	b29b      	uxth	r3, r3
}
 8002156:	4618      	mov	r0, r3
 8002158:	3714      	adds	r7, #20
 800215a:	46bd      	mov	sp, r7
 800215c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002160:	4770      	bx	lr
 8002162:	bf00      	nop
 8002164:	0801b240 	.word	0x0801b240

08002168 <ssd1306Init>:
static void ssd1306DrawPixel(uint8_t x, uint8_t y, uint16_t color);

static uint8_t ssd1306_buffer[SSD1306_WIDTH * SSD1306_HEIGHT / 8];

bool ssd1306Init(void)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b082      	sub	sp, #8
 800216c:	af00      	add	r7, sp, #0
	bool ret;

	ret = ssd1306Reset();
 800216e:	f000 f84f 	bl	8002210 <ssd1306Reset>
 8002172:	4603      	mov	r3, r0
 8002174:	71fb      	strb	r3, [r7, #7]

	return ret;
 8002176:	79fb      	ldrb	r3, [r7, #7]
}
 8002178:	4618      	mov	r0, r3
 800217a:	3708      	adds	r7, #8
 800217c:	46bd      	mov	sp, r7
 800217e:	bd80      	pop	{r7, pc}

08002180 <ssd1306InitDriver>:

bool ssd1306InitDriver(lcd_driver_t *p_driver)
{
 8002180:	b480      	push	{r7}
 8002182:	b083      	sub	sp, #12
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
	p_driver->init = ssd1306Init;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	4a0d      	ldr	r2, [pc, #52]	; (80021c0 <ssd1306InitDriver+0x40>)
 800218c:	601a      	str	r2, [r3, #0]
	p_driver->reset = ssd1306Reset;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	4a0c      	ldr	r2, [pc, #48]	; (80021c4 <ssd1306InitDriver+0x44>)
 8002192:	605a      	str	r2, [r3, #4]
	p_driver->setWindow = ssd1306SetWindow;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	4a0c      	ldr	r2, [pc, #48]	; (80021c8 <ssd1306InitDriver+0x48>)
 8002198:	609a      	str	r2, [r3, #8]
	p_driver->getWidth = ssd1306GetWidth;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	4a0b      	ldr	r2, [pc, #44]	; (80021cc <ssd1306InitDriver+0x4c>)
 800219e:	60da      	str	r2, [r3, #12]
	p_driver->getHeight = ssd1306GetHeight;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	4a0b      	ldr	r2, [pc, #44]	; (80021d0 <ssd1306InitDriver+0x50>)
 80021a4:	611a      	str	r2, [r3, #16]
	p_driver->setCallBack = ssd1306SetCallBack;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	4a0a      	ldr	r2, [pc, #40]	; (80021d4 <ssd1306InitDriver+0x54>)
 80021aa:	615a      	str	r2, [r3, #20]
	p_driver->sendBuffer = ssd1306SendBuffer;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	4a0a      	ldr	r2, [pc, #40]	; (80021d8 <ssd1306InitDriver+0x58>)
 80021b0:	619a      	str	r2, [r3, #24]
	return true;
 80021b2:	2301      	movs	r3, #1
}
 80021b4:	4618      	mov	r0, r3
 80021b6:	370c      	adds	r7, #12
 80021b8:	46bd      	mov	sp, r7
 80021ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021be:	4770      	bx	lr
 80021c0:	08002169 	.word	0x08002169
 80021c4:	08002211 	.word	0x08002211
 80021c8:	0800231d 	.word	0x0800231d
 80021cc:	08002337 	.word	0x08002337
 80021d0:	08002347 	.word	0x08002347
 80021d4:	080023cd 	.word	0x080023cd
 80021d8:	08002359 	.word	0x08002359

080021dc <ssd1306WriteCmd>:

bool ssd1306WriteCmd(uint8_t cmd_data)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b084      	sub	sp, #16
 80021e0:	af02      	add	r7, sp, #8
 80021e2:	4603      	mov	r3, r0
 80021e4:	71fb      	strb	r3, [r7, #7]
	return i2cWriteByte(i2c_ch, i2c_dev, 0x00, cmd_data, 10);
 80021e6:	4b08      	ldr	r3, [pc, #32]	; (8002208 <ssd1306WriteCmd+0x2c>)
 80021e8:	7818      	ldrb	r0, [r3, #0]
 80021ea:	4b08      	ldr	r3, [pc, #32]	; (800220c <ssd1306WriteCmd+0x30>)
 80021ec:	781b      	ldrb	r3, [r3, #0]
 80021ee:	b299      	uxth	r1, r3
 80021f0:	79fb      	ldrb	r3, [r7, #7]
 80021f2:	220a      	movs	r2, #10
 80021f4:	9200      	str	r2, [sp, #0]
 80021f6:	2200      	movs	r2, #0
 80021f8:	f001 fe7a 	bl	8003ef0 <i2cWriteByte>
 80021fc:	4603      	mov	r3, r0
}
 80021fe:	4618      	mov	r0, r3
 8002200:	3708      	adds	r7, #8
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}
 8002206:	bf00      	nop
 8002208:	200004fc 	.word	0x200004fc
 800220c:	20000068 	.word	0x20000068

08002210 <ssd1306Reset>:

bool ssd1306Reset(void)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b082      	sub	sp, #8
 8002214:	af00      	add	r7, sp, #0
	bool ret;

	ret = i2cBegin(i2c_ch, 800);
 8002216:	4b3f      	ldr	r3, [pc, #252]	; (8002314 <ssd1306Reset+0x104>)
 8002218:	781b      	ldrb	r3, [r3, #0]
 800221a:	f44f 7148 	mov.w	r1, #800	; 0x320
 800221e:	4618      	mov	r0, r3
 8002220:	f001 fcee 	bl	8003c00 <i2cBegin>
 8002224:	4603      	mov	r3, r0
 8002226:	71fb      	strb	r3, [r7, #7]

	if(ret != true)
 8002228:	79fb      	ldrb	r3, [r7, #7]
 800222a:	f083 0301 	eor.w	r3, r3, #1
 800222e:	b2db      	uxtb	r3, r3
 8002230:	2b00      	cmp	r3, #0
 8002232:	d001      	beq.n	8002238 <ssd1306Reset+0x28>
	{
		return false;
 8002234:	2300      	movs	r3, #0
 8002236:	e069      	b.n	800230c <ssd1306Reset+0xfc>
	}

	if(i2cIsDeviceReady(i2c_ch, i2c_dev) != true)
 8002238:	4b36      	ldr	r3, [pc, #216]	; (8002314 <ssd1306Reset+0x104>)
 800223a:	781b      	ldrb	r3, [r3, #0]
 800223c:	4a36      	ldr	r2, [pc, #216]	; (8002318 <ssd1306Reset+0x108>)
 800223e:	7812      	ldrb	r2, [r2, #0]
 8002240:	4611      	mov	r1, r2
 8002242:	4618      	mov	r0, r3
 8002244:	f001 fdd8 	bl	8003df8 <i2cIsDeviceReady>
 8002248:	4603      	mov	r3, r0
 800224a:	f083 0301 	eor.w	r3, r3, #1
 800224e:	b2db      	uxtb	r3, r3
 8002250:	2b00      	cmp	r3, #0
 8002252:	d001      	beq.n	8002258 <ssd1306Reset+0x48>
	{
		return false;
 8002254:	2300      	movs	r3, #0
 8002256:	e059      	b.n	800230c <ssd1306Reset+0xfc>
	}

	/* Init LCD */
	  ssd1306WriteCmd(0xAE); //display off
 8002258:	20ae      	movs	r0, #174	; 0xae
 800225a:	f7ff ffbf 	bl	80021dc <ssd1306WriteCmd>
	  ssd1306WriteCmd(0x20); //Set Memory Addressing Mode
 800225e:	2020      	movs	r0, #32
 8002260:	f7ff ffbc 	bl	80021dc <ssd1306WriteCmd>
	  ssd1306WriteCmd(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8002264:	2010      	movs	r0, #16
 8002266:	f7ff ffb9 	bl	80021dc <ssd1306WriteCmd>
	  ssd1306WriteCmd(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 800226a:	20b0      	movs	r0, #176	; 0xb0
 800226c:	f7ff ffb6 	bl	80021dc <ssd1306WriteCmd>
	  ssd1306WriteCmd(0xC8); //Set COM Output Scan Direction
 8002270:	20c8      	movs	r0, #200	; 0xc8
 8002272:	f7ff ffb3 	bl	80021dc <ssd1306WriteCmd>
	  ssd1306WriteCmd(0x00); //---set low column address
 8002276:	2000      	movs	r0, #0
 8002278:	f7ff ffb0 	bl	80021dc <ssd1306WriteCmd>
	  ssd1306WriteCmd(0x10); //---set high column address
 800227c:	2010      	movs	r0, #16
 800227e:	f7ff ffad 	bl	80021dc <ssd1306WriteCmd>
	  ssd1306WriteCmd(0x40); //--set start line address
 8002282:	2040      	movs	r0, #64	; 0x40
 8002284:	f7ff ffaa 	bl	80021dc <ssd1306WriteCmd>
	  ssd1306WriteCmd(0x81); //--set contrast control register
 8002288:	2081      	movs	r0, #129	; 0x81
 800228a:	f7ff ffa7 	bl	80021dc <ssd1306WriteCmd>
	  ssd1306WriteCmd(0xFF);
 800228e:	20ff      	movs	r0, #255	; 0xff
 8002290:	f7ff ffa4 	bl	80021dc <ssd1306WriteCmd>
	  ssd1306WriteCmd(0xA1); //--set segment re-map 0 to 127
 8002294:	20a1      	movs	r0, #161	; 0xa1
 8002296:	f7ff ffa1 	bl	80021dc <ssd1306WriteCmd>
	  ssd1306WriteCmd(0xA6); //--set normal display
 800229a:	20a6      	movs	r0, #166	; 0xa6
 800229c:	f7ff ff9e 	bl	80021dc <ssd1306WriteCmd>
	  ssd1306WriteCmd(0xA8); //--set multiplex ratio(1 to 64)
 80022a0:	20a8      	movs	r0, #168	; 0xa8
 80022a2:	f7ff ff9b 	bl	80021dc <ssd1306WriteCmd>
	  ssd1306WriteCmd(0x3F); //
 80022a6:	203f      	movs	r0, #63	; 0x3f
 80022a8:	f7ff ff98 	bl	80021dc <ssd1306WriteCmd>
	  ssd1306WriteCmd(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80022ac:	20a4      	movs	r0, #164	; 0xa4
 80022ae:	f7ff ff95 	bl	80021dc <ssd1306WriteCmd>
	  ssd1306WriteCmd(0xD3); //-set display offset
 80022b2:	20d3      	movs	r0, #211	; 0xd3
 80022b4:	f7ff ff92 	bl	80021dc <ssd1306WriteCmd>
	  ssd1306WriteCmd(0x00); //-not offset
 80022b8:	2000      	movs	r0, #0
 80022ba:	f7ff ff8f 	bl	80021dc <ssd1306WriteCmd>
	  ssd1306WriteCmd(0xD5); //--set display clock divide ratio/oscillator frequency
 80022be:	20d5      	movs	r0, #213	; 0xd5
 80022c0:	f7ff ff8c 	bl	80021dc <ssd1306WriteCmd>
	  ssd1306WriteCmd(0xF0); //--set divide ratio
 80022c4:	20f0      	movs	r0, #240	; 0xf0
 80022c6:	f7ff ff89 	bl	80021dc <ssd1306WriteCmd>
	  ssd1306WriteCmd(0xD9); //--set pre-charge period
 80022ca:	20d9      	movs	r0, #217	; 0xd9
 80022cc:	f7ff ff86 	bl	80021dc <ssd1306WriteCmd>
	  ssd1306WriteCmd(0x22); //
 80022d0:	2022      	movs	r0, #34	; 0x22
 80022d2:	f7ff ff83 	bl	80021dc <ssd1306WriteCmd>
	  ssd1306WriteCmd(0xDA); //--set com pins hardware configuration
 80022d6:	20da      	movs	r0, #218	; 0xda
 80022d8:	f7ff ff80 	bl	80021dc <ssd1306WriteCmd>
	  ssd1306WriteCmd(0x12);
 80022dc:	2012      	movs	r0, #18
 80022de:	f7ff ff7d 	bl	80021dc <ssd1306WriteCmd>
	  ssd1306WriteCmd(0xDB); //--set vcomh
 80022e2:	20db      	movs	r0, #219	; 0xdb
 80022e4:	f7ff ff7a 	bl	80021dc <ssd1306WriteCmd>
	  ssd1306WriteCmd(0x20); //0x20,0.77xVcc
 80022e8:	2020      	movs	r0, #32
 80022ea:	f7ff ff77 	bl	80021dc <ssd1306WriteCmd>
	  ssd1306WriteCmd(0x8D); //--set DC-DC enable
 80022ee:	208d      	movs	r0, #141	; 0x8d
 80022f0:	f7ff ff74 	bl	80021dc <ssd1306WriteCmd>
	  ssd1306WriteCmd(0x14); //
 80022f4:	2014      	movs	r0, #20
 80022f6:	f7ff ff71 	bl	80021dc <ssd1306WriteCmd>
	  ssd1306WriteCmd(0xAF); //--turn on SSD1306 panel
 80022fa:	20af      	movs	r0, #175	; 0xaf
 80022fc:	f7ff ff6e 	bl	80021dc <ssd1306WriteCmd>

	  ssd1306Fill(black);
 8002300:	2000      	movs	r0, #0
 8002302:	f000 f873 	bl	80023ec <ssd1306Fill>
	  ssd1306UpdateDraw();
 8002306:	f000 f895 	bl	8002434 <ssd1306UpdateDraw>

	  return true;
 800230a:	2301      	movs	r3, #1
}
 800230c:	4618      	mov	r0, r3
 800230e:	3708      	adds	r7, #8
 8002310:	46bd      	mov	sp, r7
 8002312:	bd80      	pop	{r7, pc}
 8002314:	200004fc 	.word	0x200004fc
 8002318:	20000068 	.word	0x20000068

0800231c <ssd1306SetWindow>:

void ssd1306SetWindow(int32_t x0, int32_t y0, int32_t x1, int32_t y1)
{
 800231c:	b480      	push	{r7}
 800231e:	b085      	sub	sp, #20
 8002320:	af00      	add	r7, sp, #0
 8002322:	60f8      	str	r0, [r7, #12]
 8002324:	60b9      	str	r1, [r7, #8]
 8002326:	607a      	str	r2, [r7, #4]
 8002328:	603b      	str	r3, [r7, #0]

}
 800232a:	bf00      	nop
 800232c:	3714      	adds	r7, #20
 800232e:	46bd      	mov	sp, r7
 8002330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002334:	4770      	bx	lr

08002336 <ssd1306GetWidth>:

uint16_t ssd1306GetWidth(void)
{
 8002336:	b480      	push	{r7}
 8002338:	af00      	add	r7, sp, #0
	return LCD_WIDTH;
 800233a:	2380      	movs	r3, #128	; 0x80
}
 800233c:	4618      	mov	r0, r3
 800233e:	46bd      	mov	sp, r7
 8002340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002344:	4770      	bx	lr

08002346 <ssd1306GetHeight>:

uint16_t ssd1306GetHeight(void)
{
 8002346:	b480      	push	{r7}
 8002348:	af00      	add	r7, sp, #0
	return LCD_HEIGHT;
 800234a:	2340      	movs	r3, #64	; 0x40
}
 800234c:	4618      	mov	r0, r3
 800234e:	46bd      	mov	sp, r7
 8002350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002354:	4770      	bx	lr
	...

08002358 <ssd1306SendBuffer>:

bool ssd1306SendBuffer(uint8_t *p_data, uint32_t length, uint32_t timeout_ms)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b088      	sub	sp, #32
 800235c:	af00      	add	r7, sp, #0
 800235e:	60f8      	str	r0, [r7, #12]
 8002360:	60b9      	str	r1, [r7, #8]
 8002362:	607a      	str	r2, [r7, #4]
	uint16_t *p_buf = (uint16_t *)p_data;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	617b      	str	r3, [r7, #20]

	for(int y=0; y<SSD1306_HEIGHT; y++)
 8002368:	2300      	movs	r3, #0
 800236a:	61fb      	str	r3, [r7, #28]
 800236c:	e01a      	b.n	80023a4 <ssd1306SendBuffer+0x4c>
	{
		for(int x=0; x<SSD1306_WIDTH; x++)
 800236e:	2300      	movs	r3, #0
 8002370:	61bb      	str	r3, [r7, #24]
 8002372:	e011      	b.n	8002398 <ssd1306SendBuffer+0x40>
		{
			ssd1306DrawPixel(x, y, p_buf[y * LCD_WIDTH + x]);
 8002374:	69bb      	ldr	r3, [r7, #24]
 8002376:	b2d8      	uxtb	r0, r3
 8002378:	69fb      	ldr	r3, [r7, #28]
 800237a:	b2d9      	uxtb	r1, r3
 800237c:	69fb      	ldr	r3, [r7, #28]
 800237e:	01da      	lsls	r2, r3, #7
 8002380:	69bb      	ldr	r3, [r7, #24]
 8002382:	4413      	add	r3, r2
 8002384:	005b      	lsls	r3, r3, #1
 8002386:	697a      	ldr	r2, [r7, #20]
 8002388:	4413      	add	r3, r2
 800238a:	881b      	ldrh	r3, [r3, #0]
 800238c:	461a      	mov	r2, r3
 800238e:	f000 f88d 	bl	80024ac <ssd1306DrawPixel>
		for(int x=0; x<SSD1306_WIDTH; x++)
 8002392:	69bb      	ldr	r3, [r7, #24]
 8002394:	3301      	adds	r3, #1
 8002396:	61bb      	str	r3, [r7, #24]
 8002398:	69bb      	ldr	r3, [r7, #24]
 800239a:	2b7f      	cmp	r3, #127	; 0x7f
 800239c:	ddea      	ble.n	8002374 <ssd1306SendBuffer+0x1c>
	for(int y=0; y<SSD1306_HEIGHT; y++)
 800239e:	69fb      	ldr	r3, [r7, #28]
 80023a0:	3301      	adds	r3, #1
 80023a2:	61fb      	str	r3, [r7, #28]
 80023a4:	69fb      	ldr	r3, [r7, #28]
 80023a6:	2b3f      	cmp	r3, #63	; 0x3f
 80023a8:	dde1      	ble.n	800236e <ssd1306SendBuffer+0x16>
		}
	}

	ssd1306UpdateDraw();
 80023aa:	f000 f843 	bl	8002434 <ssd1306UpdateDraw>

	if(frameCallBack != NULL)
 80023ae:	4b06      	ldr	r3, [pc, #24]	; (80023c8 <ssd1306SendBuffer+0x70>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d002      	beq.n	80023bc <ssd1306SendBuffer+0x64>
	{
		frameCallBack();
 80023b6:	4b04      	ldr	r3, [pc, #16]	; (80023c8 <ssd1306SendBuffer+0x70>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4798      	blx	r3
	}
	return true;
 80023bc:	2301      	movs	r3, #1
}
 80023be:	4618      	mov	r0, r3
 80023c0:	3720      	adds	r7, #32
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd80      	pop	{r7, pc}
 80023c6:	bf00      	nop
 80023c8:	20000500 	.word	0x20000500

080023cc <ssd1306SetCallBack>:

bool ssd1306SetCallBack(void (*p_func)(void))
{
 80023cc:	b480      	push	{r7}
 80023ce:	b083      	sub	sp, #12
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
	frameCallBack = p_func;
 80023d4:	4a04      	ldr	r2, [pc, #16]	; (80023e8 <ssd1306SetCallBack+0x1c>)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6013      	str	r3, [r2, #0]

	return true;
 80023da:	2301      	movs	r3, #1
}
 80023dc:	4618      	mov	r0, r3
 80023de:	370c      	adds	r7, #12
 80023e0:	46bd      	mov	sp, r7
 80023e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e6:	4770      	bx	lr
 80023e8:	20000500 	.word	0x20000500

080023ec <ssd1306Fill>:

void ssd1306Fill(uint16_t color)
{
 80023ec:	b480      	push	{r7}
 80023ee:	b085      	sub	sp, #20
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	4603      	mov	r3, r0
 80023f4:	80fb      	strh	r3, [r7, #6]
	uint32_t i;

	for(i=0; i<sizeof(ssd1306_buffer); i++)
 80023f6:	2300      	movs	r3, #0
 80023f8:	60fb      	str	r3, [r7, #12]
 80023fa:	e00d      	b.n	8002418 <ssd1306Fill+0x2c>
	{
		ssd1306_buffer[i] = (color > 0) ? 0xFF : 0x00;
 80023fc:	88fb      	ldrh	r3, [r7, #6]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d001      	beq.n	8002406 <ssd1306Fill+0x1a>
 8002402:	21ff      	movs	r1, #255	; 0xff
 8002404:	e000      	b.n	8002408 <ssd1306Fill+0x1c>
 8002406:	2100      	movs	r1, #0
 8002408:	4a09      	ldr	r2, [pc, #36]	; (8002430 <ssd1306Fill+0x44>)
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	4413      	add	r3, r2
 800240e:	460a      	mov	r2, r1
 8002410:	701a      	strb	r2, [r3, #0]
	for(i=0; i<sizeof(ssd1306_buffer); i++)
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	3301      	adds	r3, #1
 8002416:	60fb      	str	r3, [r7, #12]
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800241e:	d3ed      	bcc.n	80023fc <ssd1306Fill+0x10>
	}
}
 8002420:	bf00      	nop
 8002422:	bf00      	nop
 8002424:	3714      	adds	r7, #20
 8002426:	46bd      	mov	sp, r7
 8002428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242c:	4770      	bx	lr
 800242e:	bf00      	nop
 8002430:	20000504 	.word	0x20000504

08002434 <ssd1306UpdateDraw>:

bool ssd1306UpdateDraw(void)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b084      	sub	sp, #16
 8002438:	af02      	add	r7, sp, #8
	uint8_t i;

	for(i=0; i<8; i++)
 800243a:	2300      	movs	r3, #0
 800243c:	71fb      	strb	r3, [r7, #7]
 800243e:	e026      	b.n	800248e <ssd1306UpdateDraw+0x5a>
	{
    ssd1306WriteCmd(0xB0 + i);
 8002440:	79fb      	ldrb	r3, [r7, #7]
 8002442:	3b50      	subs	r3, #80	; 0x50
 8002444:	b2db      	uxtb	r3, r3
 8002446:	4618      	mov	r0, r3
 8002448:	f7ff fec8 	bl	80021dc <ssd1306WriteCmd>
    ssd1306WriteCmd(0x00);
 800244c:	2000      	movs	r0, #0
 800244e:	f7ff fec5 	bl	80021dc <ssd1306WriteCmd>
    ssd1306WriteCmd(0x10);
 8002452:	2010      	movs	r0, #16
 8002454:	f7ff fec2 	bl	80021dc <ssd1306WriteCmd>

    if(i2cWriteBytes(i2c_ch, i2c_dev, 0x40, &ssd1306_buffer[SSD1306_WIDTH * i], SSD1306_WIDTH, 100) == false)
 8002458:	4b11      	ldr	r3, [pc, #68]	; (80024a0 <ssd1306UpdateDraw+0x6c>)
 800245a:	7818      	ldrb	r0, [r3, #0]
 800245c:	4b11      	ldr	r3, [pc, #68]	; (80024a4 <ssd1306UpdateDraw+0x70>)
 800245e:	781b      	ldrb	r3, [r3, #0]
 8002460:	b299      	uxth	r1, r3
 8002462:	79fb      	ldrb	r3, [r7, #7]
 8002464:	01db      	lsls	r3, r3, #7
 8002466:	4a10      	ldr	r2, [pc, #64]	; (80024a8 <ssd1306UpdateDraw+0x74>)
 8002468:	4413      	add	r3, r2
 800246a:	2264      	movs	r2, #100	; 0x64
 800246c:	9201      	str	r2, [sp, #4]
 800246e:	2280      	movs	r2, #128	; 0x80
 8002470:	9200      	str	r2, [sp, #0]
 8002472:	2240      	movs	r2, #64	; 0x40
 8002474:	f001 fd5c 	bl	8003f30 <i2cWriteBytes>
 8002478:	4603      	mov	r3, r0
 800247a:	f083 0301 	eor.w	r3, r3, #1
 800247e:	b2db      	uxtb	r3, r3
 8002480:	2b00      	cmp	r3, #0
 8002482:	d001      	beq.n	8002488 <ssd1306UpdateDraw+0x54>
    {
    	return false;
 8002484:	2300      	movs	r3, #0
 8002486:	e006      	b.n	8002496 <ssd1306UpdateDraw+0x62>
	for(i=0; i<8; i++)
 8002488:	79fb      	ldrb	r3, [r7, #7]
 800248a:	3301      	adds	r3, #1
 800248c:	71fb      	strb	r3, [r7, #7]
 800248e:	79fb      	ldrb	r3, [r7, #7]
 8002490:	2b07      	cmp	r3, #7
 8002492:	d9d5      	bls.n	8002440 <ssd1306UpdateDraw+0xc>
    }
	}

	return true;
 8002494:	2301      	movs	r3, #1
}
 8002496:	4618      	mov	r0, r3
 8002498:	3708      	adds	r7, #8
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}
 800249e:	bf00      	nop
 80024a0:	200004fc 	.word	0x200004fc
 80024a4:	20000068 	.word	0x20000068
 80024a8:	20000504 	.word	0x20000504

080024ac <ssd1306DrawPixel>:

void ssd1306DrawPixel(uint8_t x, uint8_t y, uint16_t color)
{
 80024ac:	b480      	push	{r7}
 80024ae:	b083      	sub	sp, #12
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	4603      	mov	r3, r0
 80024b4:	71fb      	strb	r3, [r7, #7]
 80024b6:	460b      	mov	r3, r1
 80024b8:	71bb      	strb	r3, [r7, #6]
 80024ba:	4613      	mov	r3, r2
 80024bc:	80bb      	strh	r3, [r7, #4]
	if(x>=SSD1306_WIDTH || y>=SSD1306_HEIGHT)
 80024be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	db3d      	blt.n	8002542 <ssd1306DrawPixel+0x96>
 80024c6:	79bb      	ldrb	r3, [r7, #6]
 80024c8:	2b3f      	cmp	r3, #63	; 0x3f
 80024ca:	d83a      	bhi.n	8002542 <ssd1306DrawPixel+0x96>
	{
		return;
	}

	if(color > 0)
 80024cc:	88bb      	ldrh	r3, [r7, #4]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d01a      	beq.n	8002508 <ssd1306DrawPixel+0x5c>
	{
		ssd1306_buffer[x + (y/8) * SSD1306_WIDTH] |= 1 << (y%8);
 80024d2:	79fa      	ldrb	r2, [r7, #7]
 80024d4:	79bb      	ldrb	r3, [r7, #6]
 80024d6:	08db      	lsrs	r3, r3, #3
 80024d8:	b2d8      	uxtb	r0, r3
 80024da:	4603      	mov	r3, r0
 80024dc:	01db      	lsls	r3, r3, #7
 80024de:	4413      	add	r3, r2
 80024e0:	4a1b      	ldr	r2, [pc, #108]	; (8002550 <ssd1306DrawPixel+0xa4>)
 80024e2:	5cd3      	ldrb	r3, [r2, r3]
 80024e4:	b25a      	sxtb	r2, r3
 80024e6:	79bb      	ldrb	r3, [r7, #6]
 80024e8:	f003 0307 	and.w	r3, r3, #7
 80024ec:	2101      	movs	r1, #1
 80024ee:	fa01 f303 	lsl.w	r3, r1, r3
 80024f2:	b25b      	sxtb	r3, r3
 80024f4:	4313      	orrs	r3, r2
 80024f6:	b259      	sxtb	r1, r3
 80024f8:	79fa      	ldrb	r2, [r7, #7]
 80024fa:	4603      	mov	r3, r0
 80024fc:	01db      	lsls	r3, r3, #7
 80024fe:	4413      	add	r3, r2
 8002500:	b2c9      	uxtb	r1, r1
 8002502:	4a13      	ldr	r2, [pc, #76]	; (8002550 <ssd1306DrawPixel+0xa4>)
 8002504:	54d1      	strb	r1, [r2, r3]
 8002506:	e01d      	b.n	8002544 <ssd1306DrawPixel+0x98>
	}
	else
	{
		ssd1306_buffer[x + (y/8) * SSD1306_WIDTH] &= ~(1 << (y%8));
 8002508:	79fa      	ldrb	r2, [r7, #7]
 800250a:	79bb      	ldrb	r3, [r7, #6]
 800250c:	08db      	lsrs	r3, r3, #3
 800250e:	b2d8      	uxtb	r0, r3
 8002510:	4603      	mov	r3, r0
 8002512:	01db      	lsls	r3, r3, #7
 8002514:	4413      	add	r3, r2
 8002516:	4a0e      	ldr	r2, [pc, #56]	; (8002550 <ssd1306DrawPixel+0xa4>)
 8002518:	5cd3      	ldrb	r3, [r2, r3]
 800251a:	b25a      	sxtb	r2, r3
 800251c:	79bb      	ldrb	r3, [r7, #6]
 800251e:	f003 0307 	and.w	r3, r3, #7
 8002522:	2101      	movs	r1, #1
 8002524:	fa01 f303 	lsl.w	r3, r1, r3
 8002528:	b25b      	sxtb	r3, r3
 800252a:	43db      	mvns	r3, r3
 800252c:	b25b      	sxtb	r3, r3
 800252e:	4013      	ands	r3, r2
 8002530:	b259      	sxtb	r1, r3
 8002532:	79fa      	ldrb	r2, [r7, #7]
 8002534:	4603      	mov	r3, r0
 8002536:	01db      	lsls	r3, r3, #7
 8002538:	4413      	add	r3, r2
 800253a:	b2c9      	uxtb	r1, r1
 800253c:	4a04      	ldr	r2, [pc, #16]	; (8002550 <ssd1306DrawPixel+0xa4>)
 800253e:	54d1      	strb	r1, [r2, r3]
 8002540:	e000      	b.n	8002544 <ssd1306DrawPixel+0x98>
		return;
 8002542:	bf00      	nop
	}
}
 8002544:	370c      	adds	r7, #12
 8002546:	46bd      	mov	sp, r7
 8002548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254c:	4770      	bx	lr
 800254e:	bf00      	nop
 8002550:	20000504 	.word	0x20000504

08002554 <cdcAvailable>:
bool rx_full=false;



uint32_t cdcAvailable(void)
{
 8002554:	b480      	push	{r7}
 8002556:	b083      	sub	sp, #12
 8002558:	af00      	add	r7, sp, #0
	uint32_t ret;

	ret = (rx_in - rx_out) % BUF_SIZE;
 800255a:	4b07      	ldr	r3, [pc, #28]	; (8002578 <cdcAvailable+0x24>)
 800255c:	681a      	ldr	r2, [r3, #0]
 800255e:	4b07      	ldr	r3, [pc, #28]	; (800257c <cdcAvailable+0x28>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	1ad3      	subs	r3, r2, r3
 8002564:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002568:	607b      	str	r3, [r7, #4]

	return ret;
 800256a:	687b      	ldr	r3, [r7, #4]
}
 800256c:	4618      	mov	r0, r3
 800256e:	370c      	adds	r7, #12
 8002570:	46bd      	mov	sp, r7
 8002572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002576:	4770      	bx	lr
 8002578:	20000b04 	.word	0x20000b04
 800257c:	20000b08 	.word	0x20000b08

08002580 <cdcRead>:

uint8_t cdcRead(void)
{
 8002580:	b480      	push	{r7}
 8002582:	b083      	sub	sp, #12
 8002584:	af00      	add	r7, sp, #0
	uint8_t ret = 0;
 8002586:	2300      	movs	r3, #0
 8002588:	71fb      	strb	r3, [r7, #7]

	ret = rx_buf[rx_out];
 800258a:	4b0c      	ldr	r3, [pc, #48]	; (80025bc <cdcRead+0x3c>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4a0c      	ldr	r2, [pc, #48]	; (80025c0 <cdcRead+0x40>)
 8002590:	5cd3      	ldrb	r3, [r2, r3]
 8002592:	71fb      	strb	r3, [r7, #7]

	if(rx_out != rx_in)
 8002594:	4b09      	ldr	r3, [pc, #36]	; (80025bc <cdcRead+0x3c>)
 8002596:	681a      	ldr	r2, [r3, #0]
 8002598:	4b0a      	ldr	r3, [pc, #40]	; (80025c4 <cdcRead+0x44>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	429a      	cmp	r2, r3
 800259e:	d006      	beq.n	80025ae <cdcRead+0x2e>
	{
		rx_out = (rx_out + 1) % BUF_SIZE;
 80025a0:	4b06      	ldr	r3, [pc, #24]	; (80025bc <cdcRead+0x3c>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	3301      	adds	r3, #1
 80025a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80025aa:	4a04      	ldr	r2, [pc, #16]	; (80025bc <cdcRead+0x3c>)
 80025ac:	6013      	str	r3, [r2, #0]
	}

	return ret;
 80025ae:	79fb      	ldrb	r3, [r7, #7]
}
 80025b0:	4618      	mov	r0, r3
 80025b2:	370c      	adds	r7, #12
 80025b4:	46bd      	mov	sp, r7
 80025b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ba:	4770      	bx	lr
 80025bc:	20000b08 	.word	0x20000b08
 80025c0:	20000904 	.word	0x20000904
 80025c4:	20000b04 	.word	0x20000b04

080025c8 <cdcDataIn>:

void cdcDataIn(uint8_t rx_data)
{
 80025c8:	b480      	push	{r7}
 80025ca:	b085      	sub	sp, #20
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	4603      	mov	r3, r0
 80025d0:	71fb      	strb	r3, [r7, #7]
	rx_buf[rx_in] = rx_data;
 80025d2:	4b0c      	ldr	r3, [pc, #48]	; (8002604 <cdcDataIn+0x3c>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	490c      	ldr	r1, [pc, #48]	; (8002608 <cdcDataIn+0x40>)
 80025d8:	79fa      	ldrb	r2, [r7, #7]
 80025da:	54ca      	strb	r2, [r1, r3]

	uint8_t next_rx_in = (rx_in + 1) % BUF_SIZE;
 80025dc:	4b09      	ldr	r3, [pc, #36]	; (8002604 <cdcDataIn+0x3c>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	b2db      	uxtb	r3, r3
 80025e2:	3301      	adds	r3, #1
 80025e4:	73fb      	strb	r3, [r7, #15]

	if(next_rx_in != rx_out)
 80025e6:	7bfa      	ldrb	r2, [r7, #15]
 80025e8:	4b08      	ldr	r3, [pc, #32]	; (800260c <cdcDataIn+0x44>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	429a      	cmp	r2, r3
 80025ee:	d002      	beq.n	80025f6 <cdcDataIn+0x2e>
	{
		rx_in = next_rx_in;
 80025f0:	7bfb      	ldrb	r3, [r7, #15]
 80025f2:	4a04      	ldr	r2, [pc, #16]	; (8002604 <cdcDataIn+0x3c>)
 80025f4:	6013      	str	r3, [r2, #0]
	}
}
 80025f6:	bf00      	nop
 80025f8:	3714      	adds	r7, #20
 80025fa:	46bd      	mov	sp, r7
 80025fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002600:	4770      	bx	lr
 8002602:	bf00      	nop
 8002604:	20000b04 	.word	0x20000b04
 8002608:	20000904 	.word	0x20000904
 800260c:	20000b08 	.word	0x20000b08

08002610 <cdcWrite>:

uint32_t cdcWrite(uint8_t *p_data, uint32_t len)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b084      	sub	sp, #16
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
 8002618:	6039      	str	r1, [r7, #0]
	uint32_t pre_time = 0;
 800261a:	2300      	movs	r3, #0
 800261c:	60fb      	str	r3, [r7, #12]
	uint8_t ret;

	pre_time = millis();
 800261e:	f7ff f9c5 	bl	80019ac <millis>
 8002622:	60f8      	str	r0, [r7, #12]
	while(1)
	{
		ret = CDC_Transmit_FS(p_data, len);
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	b29b      	uxth	r3, r3
 8002628:	4619      	mov	r1, r3
 800262a:	6878      	ldr	r0, [r7, #4]
 800262c:	f013 f814 	bl	8015658 <CDC_Transmit_FS>
 8002630:	4603      	mov	r3, r0
 8002632:	72fb      	strb	r3, [r7, #11]

		if(ret == USBD_OK)
 8002634:	7afb      	ldrb	r3, [r7, #11]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d101      	bne.n	800263e <cdcWrite+0x2e>
			{
				return len;
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	e00e      	b.n	800265c <cdcWrite+0x4c>
			}
			else if(ret == USBD_FAIL)
 800263e:	7afb      	ldrb	r3, [r7, #11]
 8002640:	2b03      	cmp	r3, #3
 8002642:	d101      	bne.n	8002648 <cdcWrite+0x38>
			{
				return 0;
 8002644:	2300      	movs	r3, #0
 8002646:	e009      	b.n	800265c <cdcWrite+0x4c>
			}

			if(millis() - pre_time >= 100)
 8002648:	f7ff f9b0 	bl	80019ac <millis>
 800264c:	4602      	mov	r2, r0
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	1ad3      	subs	r3, r2, r3
 8002652:	2b63      	cmp	r3, #99	; 0x63
 8002654:	d800      	bhi.n	8002658 <cdcWrite+0x48>
		ret = CDC_Transmit_FS(p_data, len);
 8002656:	e7e5      	b.n	8002624 <cdcWrite+0x14>
			{
				break;
 8002658:	bf00      	nop
			}
	}

	return 0;
 800265a:	2300      	movs	r3, #0
}
 800265c:	4618      	mov	r0, r3
 800265e:	3710      	adds	r7, #16
 8002660:	46bd      	mov	sp, r7
 8002662:	bd80      	pop	{r7, pc}

08002664 <cliInit>:
void cliShowList(cli_args_t *args);
void cliMemoryDump(cli_args_t *args);


bool cliInit(void)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	af00      	add	r7, sp, #0
  cli_node.is_open = false;
 8002668:	4b1b      	ldr	r3, [pc, #108]	; (80026d8 <cliInit+0x74>)
 800266a:	2200      	movs	r2, #0
 800266c:	721a      	strb	r2, [r3, #8]
  cli_node.is_log  = false;
 800266e:	4b1a      	ldr	r3, [pc, #104]	; (80026d8 <cliInit+0x74>)
 8002670:	2200      	movs	r2, #0
 8002672:	725a      	strb	r2, [r3, #9]
  cli_node.state   = CLI_RX_IDLE;
 8002674:	4b18      	ldr	r3, [pc, #96]	; (80026d8 <cliInit+0x74>)
 8002676:	2200      	movs	r2, #0
 8002678:	741a      	strb	r2, [r3, #16]

  cli_node.hist_line_i     = 0;
 800267a:	4b17      	ldr	r3, [pc, #92]	; (80026d8 <cliInit+0x74>)
 800267c:	2200      	movs	r2, #0
 800267e:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
  cli_node.hist_line_last  = 0;
 8002682:	4b15      	ldr	r3, [pc, #84]	; (80026d8 <cliInit+0x74>)
 8002684:	2200      	movs	r2, #0
 8002686:	f883 2196 	strb.w	r2, [r3, #406]	; 0x196
  cli_node.hist_line_count = 0;
 800268a:	4b13      	ldr	r3, [pc, #76]	; (80026d8 <cliInit+0x74>)
 800268c:	2200      	movs	r2, #0
 800268e:	f883 2197 	strb.w	r2, [r3, #407]	; 0x197
  cli_node.hist_line_new   = false;
 8002692:	4b11      	ldr	r3, [pc, #68]	; (80026d8 <cliInit+0x74>)
 8002694:	2200      	movs	r2, #0
 8002696:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194

  cli_node.cmd_args.getData  = cliArgsGetData;
 800269a:	4b0f      	ldr	r3, [pc, #60]	; (80026d8 <cliInit+0x74>)
 800269c:	4a0f      	ldr	r2, [pc, #60]	; (80026dc <cliInit+0x78>)
 800269e:	f8c3 2474 	str.w	r2, [r3, #1140]	; 0x474
  cli_node.cmd_args.getFloat = cliArgsGetFloat;
 80026a2:	4b0d      	ldr	r3, [pc, #52]	; (80026d8 <cliInit+0x74>)
 80026a4:	4a0e      	ldr	r2, [pc, #56]	; (80026e0 <cliInit+0x7c>)
 80026a6:	f8c3 2478 	str.w	r2, [r3, #1144]	; 0x478
  cli_node.cmd_args.getStr   = cliArgsGetStr;
 80026aa:	4b0b      	ldr	r3, [pc, #44]	; (80026d8 <cliInit+0x74>)
 80026ac:	4a0d      	ldr	r2, [pc, #52]	; (80026e4 <cliInit+0x80>)
 80026ae:	f8c3 247c 	str.w	r2, [r3, #1148]	; 0x47c
  cli_node.cmd_args.isStr    = cliArgsIsStr;
 80026b2:	4b09      	ldr	r3, [pc, #36]	; (80026d8 <cliInit+0x74>)
 80026b4:	4a0c      	ldr	r2, [pc, #48]	; (80026e8 <cliInit+0x84>)
 80026b6:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480

  cliLineClean(&cli_node);
 80026ba:	4807      	ldr	r0, [pc, #28]	; (80026d8 <cliInit+0x74>)
 80026bc:	f000 fb5c 	bl	8002d78 <cliLineClean>


  cliAdd("help", cliShowList);
 80026c0:	490a      	ldr	r1, [pc, #40]	; (80026ec <cliInit+0x88>)
 80026c2:	480b      	ldr	r0, [pc, #44]	; (80026f0 <cliInit+0x8c>)
 80026c4:	f000 fdf8 	bl	80032b8 <cliAdd>
  cliAdd("md"  , cliMemoryDump);
 80026c8:	490a      	ldr	r1, [pc, #40]	; (80026f4 <cliInit+0x90>)
 80026ca:	480b      	ldr	r0, [pc, #44]	; (80026f8 <cliInit+0x94>)
 80026cc:	f000 fdf4 	bl	80032b8 <cliAdd>

  return true;
 80026d0:	2301      	movs	r3, #1
}
 80026d2:	4618      	mov	r0, r3
 80026d4:	bd80      	pop	{r7, pc}
 80026d6:	bf00      	nop
 80026d8:	20000b0c 	.word	0x20000b0c
 80026dc:	08003149 	.word	0x08003149
 80026e0:	08003199 	.word	0x08003199
 80026e4:	080031f1 	.word	0x080031f1
 80026e8:	08003239 	.word	0x08003239
 80026ec:	0800334d 	.word	0x0800334d
 80026f0:	08019254 	.word	0x08019254
 80026f4:	080033bd 	.word	0x080033bd
 80026f8:	0801925c 	.word	0x0801925c

080026fc <cliOpen>:

bool cliOpen(uint8_t ch, uint32_t baud)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b082      	sub	sp, #8
 8002700:	af00      	add	r7, sp, #0
 8002702:	4603      	mov	r3, r0
 8002704:	6039      	str	r1, [r7, #0]
 8002706:	71fb      	strb	r3, [r7, #7]
  cli_node.ch = ch;
 8002708:	4a0a      	ldr	r2, [pc, #40]	; (8002734 <cliOpen+0x38>)
 800270a:	79fb      	ldrb	r3, [r7, #7]
 800270c:	7013      	strb	r3, [r2, #0]
  cli_node.baud = baud;
 800270e:	4a09      	ldr	r2, [pc, #36]	; (8002734 <cliOpen+0x38>)
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	6053      	str	r3, [r2, #4]

  cli_node.is_open = uartOpen(ch, baud);
 8002714:	79fb      	ldrb	r3, [r7, #7]
 8002716:	6839      	ldr	r1, [r7, #0]
 8002718:	4618      	mov	r0, r3
 800271a:	f003 f88b 	bl	8005834 <uartOpen>
 800271e:	4603      	mov	r3, r0
 8002720:	461a      	mov	r2, r3
 8002722:	4b04      	ldr	r3, [pc, #16]	; (8002734 <cliOpen+0x38>)
 8002724:	721a      	strb	r2, [r3, #8]

  return cli_node.is_open;
 8002726:	4b03      	ldr	r3, [pc, #12]	; (8002734 <cliOpen+0x38>)
 8002728:	7a1b      	ldrb	r3, [r3, #8]
}
 800272a:	4618      	mov	r0, r3
 800272c:	3708      	adds	r7, #8
 800272e:	46bd      	mov	sp, r7
 8002730:	bd80      	pop	{r7, pc}
 8002732:	bf00      	nop
 8002734:	20000b0c 	.word	0x20000b0c

08002738 <cliShowLog>:
  cli_node.is_log = false;
  return true;
}

void cliShowLog(cli_t *p_cli)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b084      	sub	sp, #16
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
  if (cli_node.is_log == true)
 8002740:	4b34      	ldr	r3, [pc, #208]	; (8002814 <cliShowLog+0xdc>)
 8002742:	7a5b      	ldrb	r3, [r3, #9]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d061      	beq.n	800280c <cliShowLog+0xd4>
  {
    uartPrintf(p_cli->log_ch, "Cursor  : %d\n", p_cli->line.cursor);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	7a98      	ldrb	r0, [r3, #10]
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	f893 3328 	ldrb.w	r3, [r3, #808]	; 0x328
 8002752:	461a      	mov	r2, r3
 8002754:	4930      	ldr	r1, [pc, #192]	; (8002818 <cliShowLog+0xe0>)
 8002756:	f003 f8c7 	bl	80058e8 <uartPrintf>
    uartPrintf(p_cli->log_ch, "Count   : %d\n", p_cli->line.count);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	7a98      	ldrb	r0, [r3, #10]
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	f893 3329 	ldrb.w	r3, [r3, #809]	; 0x329
 8002764:	461a      	mov	r2, r3
 8002766:	492d      	ldr	r1, [pc, #180]	; (800281c <cliShowLog+0xe4>)
 8002768:	f003 f8be 	bl	80058e8 <uartPrintf>
    uartPrintf(p_cli->log_ch, "buf_len : %d\n", p_cli->line.buf_len);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	7a98      	ldrb	r0, [r3, #10]
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	f893 3327 	ldrb.w	r3, [r3, #807]	; 0x327
 8002776:	461a      	mov	r2, r3
 8002778:	4929      	ldr	r1, [pc, #164]	; (8002820 <cliShowLog+0xe8>)
 800277a:	f003 f8b5 	bl	80058e8 <uartPrintf>
    uartPrintf(p_cli->log_ch, "buf     : %s\n", p_cli->line.buf);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	7a98      	ldrb	r0, [r3, #10]
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	f203 23e7 	addw	r3, r3, #743	; 0x2e7
 8002788:	461a      	mov	r2, r3
 800278a:	4926      	ldr	r1, [pc, #152]	; (8002824 <cliShowLog+0xec>)
 800278c:	f003 f8ac 	bl	80058e8 <uartPrintf>
    uartPrintf(p_cli->log_ch, "line_i  : %d\n", p_cli->hist_line_i);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	7a98      	ldrb	r0, [r3, #10]
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	f993 3195 	ldrsb.w	r3, [r3, #405]	; 0x195
 800279a:	461a      	mov	r2, r3
 800279c:	4922      	ldr	r1, [pc, #136]	; (8002828 <cliShowLog+0xf0>)
 800279e:	f003 f8a3 	bl	80058e8 <uartPrintf>
    uartPrintf(p_cli->log_ch, "line_lt : %d\n", p_cli->hist_line_last);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	7a98      	ldrb	r0, [r3, #10]
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	f893 3196 	ldrb.w	r3, [r3, #406]	; 0x196
 80027ac:	461a      	mov	r2, r3
 80027ae:	491f      	ldr	r1, [pc, #124]	; (800282c <cliShowLog+0xf4>)
 80027b0:	f003 f89a 	bl	80058e8 <uartPrintf>
    uartPrintf(p_cli->log_ch, "line_c  : %d\n", p_cli->hist_line_count);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	7a98      	ldrb	r0, [r3, #10]
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	f893 3197 	ldrb.w	r3, [r3, #407]	; 0x197
 80027be:	461a      	mov	r2, r3
 80027c0:	491b      	ldr	r1, [pc, #108]	; (8002830 <cliShowLog+0xf8>)
 80027c2:	f003 f891 	bl	80058e8 <uartPrintf>

    for (int i=0; i<p_cli->hist_line_count; i++)
 80027c6:	2300      	movs	r3, #0
 80027c8:	60fb      	str	r3, [r7, #12]
 80027ca:	e012      	b.n	80027f2 <cliShowLog+0xba>
    {
      uartPrintf(p_cli->log_ch, "buf %d   : %s\n", i, p_cli->line_buf[i].buf);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	7a98      	ldrb	r0, [r3, #10]
 80027d0:	68fa      	ldr	r2, [r7, #12]
 80027d2:	4613      	mov	r3, r2
 80027d4:	015b      	lsls	r3, r3, #5
 80027d6:	4413      	add	r3, r2
 80027d8:	005b      	lsls	r3, r3, #1
 80027da:	4413      	add	r3, r2
 80027dc:	f503 73cc 	add.w	r3, r3, #408	; 0x198
 80027e0:	687a      	ldr	r2, [r7, #4]
 80027e2:	4413      	add	r3, r2
 80027e4:	68fa      	ldr	r2, [r7, #12]
 80027e6:	4913      	ldr	r1, [pc, #76]	; (8002834 <cliShowLog+0xfc>)
 80027e8:	f003 f87e 	bl	80058e8 <uartPrintf>
    for (int i=0; i<p_cli->hist_line_count; i++)
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	3301      	adds	r3, #1
 80027f0:	60fb      	str	r3, [r7, #12]
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	f893 3197 	ldrb.w	r3, [r3, #407]	; 0x197
 80027f8:	461a      	mov	r2, r3
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	4293      	cmp	r3, r2
 80027fe:	dbe5      	blt.n	80027cc <cliShowLog+0x94>
    }
    uartPrintf(p_cli->log_ch, "\n");
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	7a9b      	ldrb	r3, [r3, #10]
 8002804:	490c      	ldr	r1, [pc, #48]	; (8002838 <cliShowLog+0x100>)
 8002806:	4618      	mov	r0, r3
 8002808:	f003 f86e 	bl	80058e8 <uartPrintf>
  }
}
 800280c:	bf00      	nop
 800280e:	3710      	adds	r7, #16
 8002810:	46bd      	mov	sp, r7
 8002812:	bd80      	pop	{r7, pc}
 8002814:	20000b0c 	.word	0x20000b0c
 8002818:	08019260 	.word	0x08019260
 800281c:	08019270 	.word	0x08019270
 8002820:	08019280 	.word	0x08019280
 8002824:	08019290 	.word	0x08019290
 8002828:	080192a0 	.word	0x080192a0
 800282c:	080192b0 	.word	0x080192b0
 8002830:	080192c0 	.word	0x080192c0
 8002834:	080192d0 	.word	0x080192d0
 8002838:	080192e0 	.word	0x080192e0

0800283c <cliShowPrompt>:

void cliShowPrompt(cli_t *p_cli)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b082      	sub	sp, #8
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
  uartPrintf(p_cli->ch, "\n\r");
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	781b      	ldrb	r3, [r3, #0]
 8002848:	4906      	ldr	r1, [pc, #24]	; (8002864 <cliShowPrompt+0x28>)
 800284a:	4618      	mov	r0, r3
 800284c:	f003 f84c 	bl	80058e8 <uartPrintf>
  uartPrintf(p_cli->ch, CLI_PROMPT_STR);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	781b      	ldrb	r3, [r3, #0]
 8002854:	4904      	ldr	r1, [pc, #16]	; (8002868 <cliShowPrompt+0x2c>)
 8002856:	4618      	mov	r0, r3
 8002858:	f003 f846 	bl	80058e8 <uartPrintf>
}
 800285c:	bf00      	nop
 800285e:	3708      	adds	r7, #8
 8002860:	46bd      	mov	sp, r7
 8002862:	bd80      	pop	{r7, pc}
 8002864:	080192e4 	.word	0x080192e4
 8002868:	080192e8 	.word	0x080192e8

0800286c <cliMain>:

bool cliMain(void)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	af00      	add	r7, sp, #0
  if (cli_node.is_open != true)
 8002870:	4b0e      	ldr	r3, [pc, #56]	; (80028ac <cliMain+0x40>)
 8002872:	7a1b      	ldrb	r3, [r3, #8]
 8002874:	f083 0301 	eor.w	r3, r3, #1
 8002878:	b2db      	uxtb	r3, r3
 800287a:	2b00      	cmp	r3, #0
 800287c:	d001      	beq.n	8002882 <cliMain+0x16>
  {
    return false;
 800287e:	2300      	movs	r3, #0
 8002880:	e012      	b.n	80028a8 <cliMain+0x3c>
  }

  if (uartAvailable(cli_node.ch) > 0)
 8002882:	4b0a      	ldr	r3, [pc, #40]	; (80028ac <cliMain+0x40>)
 8002884:	781b      	ldrb	r3, [r3, #0]
 8002886:	4618      	mov	r0, r3
 8002888:	f002 fff0 	bl	800586c <uartAvailable>
 800288c:	4603      	mov	r3, r0
 800288e:	2b00      	cmp	r3, #0
 8002890:	d009      	beq.n	80028a6 <cliMain+0x3a>
  {
    cliUpdate(&cli_node, uartRead(cli_node.ch));
 8002892:	4b06      	ldr	r3, [pc, #24]	; (80028ac <cliMain+0x40>)
 8002894:	781b      	ldrb	r3, [r3, #0]
 8002896:	4618      	mov	r0, r3
 8002898:	f002 fffb 	bl	8005892 <uartRead>
 800289c:	4603      	mov	r3, r0
 800289e:	4619      	mov	r1, r3
 80028a0:	4802      	ldr	r0, [pc, #8]	; (80028ac <cliMain+0x40>)
 80028a2:	f000 f805 	bl	80028b0 <cliUpdate>
  }

  return true;
 80028a6:	2301      	movs	r3, #1
}
 80028a8:	4618      	mov	r0, r3
 80028aa:	bd80      	pop	{r7, pc}
 80028ac:	20000b0c 	.word	0x20000b0c

080028b0 <cliUpdate>:
{
  return uartWrite(cli_node.ch, p_data, length);
}

bool cliUpdate(cli_t *p_cli, uint8_t rx_data)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b08c      	sub	sp, #48	; 0x30
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
 80028b8:	460b      	mov	r3, r1
 80028ba:	70fb      	strb	r3, [r7, #3]
  bool ret = false;
 80028bc:	2300      	movs	r3, #0
 80028be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t tx_buf[8];
  cli_line_t *line;

  line = &p_cli->line;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	f203 23e7 	addw	r3, r3, #743	; 0x2e7
 80028c8:	61fb      	str	r3, [r7, #28]

  if (p_cli->state == CLI_RX_IDLE)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	7c1b      	ldrb	r3, [r3, #16]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	f040 816d 	bne.w	8002bae <cliUpdate+0x2fe>
  {
    switch(rx_data)
 80028d4:	78fb      	ldrb	r3, [r7, #3]
 80028d6:	2b7f      	cmp	r3, #127	; 0x7f
 80028d8:	d02a      	beq.n	8002930 <cliUpdate+0x80>
 80028da:	2b7f      	cmp	r3, #127	; 0x7f
 80028dc:	f300 80da 	bgt.w	8002a94 <cliUpdate+0x1e4>
 80028e0:	2b1b      	cmp	r3, #27
 80028e2:	d021      	beq.n	8002928 <cliUpdate+0x78>
 80028e4:	2b1b      	cmp	r3, #27
 80028e6:	f300 80d5 	bgt.w	8002a94 <cliUpdate+0x1e4>
 80028ea:	2b08      	cmp	r3, #8
 80028ec:	d062      	beq.n	80029b4 <cliUpdate+0x104>
 80028ee:	2b0d      	cmp	r3, #13
 80028f0:	f040 80d0 	bne.w	8002a94 <cliUpdate+0x1e4>
    {
      // 엔터
      case CLI_KEY_ENTER:
        if (line->count > 0)
 80028f4:	69fb      	ldr	r3, [r7, #28]
 80028f6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d005      	beq.n	800290a <cliUpdate+0x5a>
        {
          cliLineAdd(p_cli);
 80028fe:	6878      	ldr	r0, [r7, #4]
 8002900:	f000 fa54 	bl	8002dac <cliLineAdd>
          cliRunCmd(p_cli);
 8002904:	6878      	ldr	r0, [r7, #4]
 8002906:	f000 fb25 	bl	8002f54 <cliRunCmd>
        }

        line->count = 0;
 800290a:	69fb      	ldr	r3, [r7, #28]
 800290c:	2200      	movs	r2, #0
 800290e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        line->cursor = 0;
 8002912:	69fb      	ldr	r3, [r7, #28]
 8002914:	2200      	movs	r2, #0
 8002916:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        line->buf[0] = 0;
 800291a:	69fb      	ldr	r3, [r7, #28]
 800291c:	2200      	movs	r2, #0
 800291e:	701a      	strb	r2, [r3, #0]
        cliShowPrompt(p_cli);
 8002920:	6878      	ldr	r0, [r7, #4]
 8002922:	f7ff ff8b 	bl	800283c <cliShowPrompt>
        break;
 8002926:	e142      	b.n	8002bae <cliUpdate+0x2fe>


      case CLI_KEY_ESC:
        p_cli->state = CLI_RX_SP1;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2201      	movs	r2, #1
 800292c:	741a      	strb	r2, [r3, #16]
        break;
 800292e:	e13e      	b.n	8002bae <cliUpdate+0x2fe>

      // DEL
      case CLI_KEY_DEL:
        if (line->cursor < line->count)
 8002930:	69fb      	ldr	r3, [r7, #28]
 8002932:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 8002936:	69fb      	ldr	r3, [r7, #28]
 8002938:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800293c:	429a      	cmp	r2, r3
 800293e:	f080 8131 	bcs.w	8002ba4 <cliUpdate+0x2f4>
        {
          uint8_t mov_len;

          mov_len = line->count - line->cursor;
 8002942:	69fb      	ldr	r3, [r7, #28]
 8002944:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
 8002948:	69fb      	ldr	r3, [r7, #28]
 800294a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800294e:	1ad3      	subs	r3, r2, r3
 8002950:	76fb      	strb	r3, [r7, #27]
          for (int i=1; i<mov_len; i++)
 8002952:	2301      	movs	r3, #1
 8002954:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002956:	e013      	b.n	8002980 <cliUpdate+0xd0>
          {
            line->buf[line->cursor + i - 1] = line->buf[line->cursor + i];
 8002958:	69fb      	ldr	r3, [r7, #28]
 800295a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800295e:	461a      	mov	r2, r3
 8002960:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002962:	441a      	add	r2, r3
 8002964:	69fb      	ldr	r3, [r7, #28]
 8002966:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800296a:	4619      	mov	r1, r3
 800296c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800296e:	440b      	add	r3, r1
 8002970:	3b01      	subs	r3, #1
 8002972:	69f9      	ldr	r1, [r7, #28]
 8002974:	5c89      	ldrb	r1, [r1, r2]
 8002976:	69fa      	ldr	r2, [r7, #28]
 8002978:	54d1      	strb	r1, [r2, r3]
          for (int i=1; i<mov_len; i++)
 800297a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800297c:	3301      	adds	r3, #1
 800297e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002980:	7efb      	ldrb	r3, [r7, #27]
 8002982:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002984:	429a      	cmp	r2, r3
 8002986:	dbe7      	blt.n	8002958 <cliUpdate+0xa8>
          }

          line->count--;
 8002988:	69fb      	ldr	r3, [r7, #28]
 800298a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800298e:	3b01      	subs	r3, #1
 8002990:	b2da      	uxtb	r2, r3
 8002992:	69fb      	ldr	r3, [r7, #28]
 8002994:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          line->buf[line->count] = 0;
 8002998:	69fb      	ldr	r3, [r7, #28]
 800299a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800299e:	461a      	mov	r2, r3
 80029a0:	69fb      	ldr	r3, [r7, #28]
 80029a2:	2100      	movs	r1, #0
 80029a4:	5499      	strb	r1, [r3, r2]

          uartPrintf(p_cli->ch, "\x1B[1P");
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	781b      	ldrb	r3, [r3, #0]
 80029aa:	498d      	ldr	r1, [pc, #564]	; (8002be0 <cliUpdate+0x330>)
 80029ac:	4618      	mov	r0, r3
 80029ae:	f002 ff9b 	bl	80058e8 <uartPrintf>
        }
        break;
 80029b2:	e0f7      	b.n	8002ba4 <cliUpdate+0x2f4>

      // 백스페이스
      case CLI_KEY_BACK:
        if (line->count > 0 && line->cursor > 0)
 80029b4:	69fb      	ldr	r3, [r7, #28]
 80029b6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d055      	beq.n	8002a6a <cliUpdate+0x1ba>
 80029be:	69fb      	ldr	r3, [r7, #28]
 80029c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d050      	beq.n	8002a6a <cliUpdate+0x1ba>
        {
          if (line->cursor == line->count)
 80029c8:	69fb      	ldr	r3, [r7, #28]
 80029ca:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 80029ce:	69fb      	ldr	r3, [r7, #28]
 80029d0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80029d4:	429a      	cmp	r2, r3
 80029d6:	d10e      	bne.n	80029f6 <cliUpdate+0x146>
          {
            line->count--;
 80029d8:	69fb      	ldr	r3, [r7, #28]
 80029da:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80029de:	3b01      	subs	r3, #1
 80029e0:	b2da      	uxtb	r2, r3
 80029e2:	69fb      	ldr	r3, [r7, #28]
 80029e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
            line->buf[line->count] = 0;
 80029e8:	69fb      	ldr	r3, [r7, #28]
 80029ea:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80029ee:	461a      	mov	r2, r3
 80029f0:	69fb      	ldr	r3, [r7, #28]
 80029f2:	2100      	movs	r1, #0
 80029f4:	5499      	strb	r1, [r3, r2]
          }

          if (line->cursor < line->count)
 80029f6:	69fb      	ldr	r3, [r7, #28]
 80029f8:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 80029fc:	69fb      	ldr	r3, [r7, #28]
 80029fe:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002a02:	429a      	cmp	r2, r3
 8002a04:	d231      	bcs.n	8002a6a <cliUpdate+0x1ba>
          {
            uint8_t mov_len;

            mov_len = line->count - line->cursor;
 8002a06:	69fb      	ldr	r3, [r7, #28]
 8002a08:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
 8002a0c:	69fb      	ldr	r3, [r7, #28]
 8002a0e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a12:	1ad3      	subs	r3, r2, r3
 8002a14:	76bb      	strb	r3, [r7, #26]

            for (int i=0; i<mov_len; i++)
 8002a16:	2300      	movs	r3, #0
 8002a18:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a1a:	e013      	b.n	8002a44 <cliUpdate+0x194>
            {
              line->buf[line->cursor + i - 1] = line->buf[line->cursor + i];
 8002a1c:	69fb      	ldr	r3, [r7, #28]
 8002a1e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a22:	461a      	mov	r2, r3
 8002a24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a26:	441a      	add	r2, r3
 8002a28:	69fb      	ldr	r3, [r7, #28]
 8002a2a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a2e:	4619      	mov	r1, r3
 8002a30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a32:	440b      	add	r3, r1
 8002a34:	3b01      	subs	r3, #1
 8002a36:	69f9      	ldr	r1, [r7, #28]
 8002a38:	5c89      	ldrb	r1, [r1, r2]
 8002a3a:	69fa      	ldr	r2, [r7, #28]
 8002a3c:	54d1      	strb	r1, [r2, r3]
            for (int i=0; i<mov_len; i++)
 8002a3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a40:	3301      	adds	r3, #1
 8002a42:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a44:	7ebb      	ldrb	r3, [r7, #26]
 8002a46:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002a48:	429a      	cmp	r2, r3
 8002a4a:	dbe7      	blt.n	8002a1c <cliUpdate+0x16c>
            }

            line->count--;
 8002a4c:	69fb      	ldr	r3, [r7, #28]
 8002a4e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002a52:	3b01      	subs	r3, #1
 8002a54:	b2da      	uxtb	r2, r3
 8002a56:	69fb      	ldr	r3, [r7, #28]
 8002a58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
            line->buf[line->count] = 0;
 8002a5c:	69fb      	ldr	r3, [r7, #28]
 8002a5e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002a62:	461a      	mov	r2, r3
 8002a64:	69fb      	ldr	r3, [r7, #28]
 8002a66:	2100      	movs	r1, #0
 8002a68:	5499      	strb	r1, [r3, r2]
          }
        }

        if (line->cursor > 0)
 8002a6a:	69fb      	ldr	r3, [r7, #28]
 8002a6c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	f000 8099 	beq.w	8002ba8 <cliUpdate+0x2f8>
        {
          line->cursor--;
 8002a76:	69fb      	ldr	r3, [r7, #28]
 8002a78:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a7c:	3b01      	subs	r3, #1
 8002a7e:	b2da      	uxtb	r2, r3
 8002a80:	69fb      	ldr	r3, [r7, #28]
 8002a82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          uartPrintf(p_cli->ch, "\b \b\x1B[1P");
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	781b      	ldrb	r3, [r3, #0]
 8002a8a:	4956      	ldr	r1, [pc, #344]	; (8002be4 <cliUpdate+0x334>)
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	f002 ff2b 	bl	80058e8 <uartPrintf>
        }
        break;
 8002a92:	e089      	b.n	8002ba8 <cliUpdate+0x2f8>

      default:
        if ((line->count + 1) < line->buf_len)
 8002a94:	69fb      	ldr	r3, [r7, #28]
 8002a96:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002a9a:	3301      	adds	r3, #1
 8002a9c:	69fa      	ldr	r2, [r7, #28]
 8002a9e:	f892 2040 	ldrb.w	r2, [r2, #64]	; 0x40
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	f280 8082 	bge.w	8002bac <cliUpdate+0x2fc>
        {
          if (line->cursor == line->count)
 8002aa8:	69fb      	ldr	r3, [r7, #28]
 8002aaa:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 8002aae:	69fb      	ldr	r3, [r7, #28]
 8002ab0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002ab4:	429a      	cmp	r2, r3
 8002ab6:	d124      	bne.n	8002b02 <cliUpdate+0x252>
          {
            uartWrite(p_cli->ch, &rx_data, 1);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	781b      	ldrb	r3, [r3, #0]
 8002abc:	1cf9      	adds	r1, r7, #3
 8002abe:	2201      	movs	r2, #1
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	f002 fefa 	bl	80058ba <uartWrite>

            line->buf[line->cursor] = rx_data;
 8002ac6:	69fb      	ldr	r3, [r7, #28]
 8002ac8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002acc:	461a      	mov	r2, r3
 8002ace:	78f9      	ldrb	r1, [r7, #3]
 8002ad0:	69fb      	ldr	r3, [r7, #28]
 8002ad2:	5499      	strb	r1, [r3, r2]
            line->count++;
 8002ad4:	69fb      	ldr	r3, [r7, #28]
 8002ad6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002ada:	3301      	adds	r3, #1
 8002adc:	b2da      	uxtb	r2, r3
 8002ade:	69fb      	ldr	r3, [r7, #28]
 8002ae0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
            line->cursor++;
 8002ae4:	69fb      	ldr	r3, [r7, #28]
 8002ae6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002aea:	3301      	adds	r3, #1
 8002aec:	b2da      	uxtb	r2, r3
 8002aee:	69fb      	ldr	r3, [r7, #28]
 8002af0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
            line->buf[line->count] = 0;
 8002af4:	69fb      	ldr	r3, [r7, #28]
 8002af6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002afa:	461a      	mov	r2, r3
 8002afc:	69fb      	ldr	r3, [r7, #28]
 8002afe:	2100      	movs	r1, #0
 8002b00:	5499      	strb	r1, [r3, r2]
          }
          if (line->cursor < line->count)
 8002b02:	69fb      	ldr	r3, [r7, #28]
 8002b04:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 8002b08:	69fb      	ldr	r3, [r7, #28]
 8002b0a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002b0e:	429a      	cmp	r2, r3
 8002b10:	d24c      	bcs.n	8002bac <cliUpdate+0x2fc>
          {
            uint8_t mov_len;

            mov_len = line->count - line->cursor;
 8002b12:	69fb      	ldr	r3, [r7, #28]
 8002b14:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
 8002b18:	69fb      	ldr	r3, [r7, #28]
 8002b1a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b1e:	1ad3      	subs	r3, r2, r3
 8002b20:	767b      	strb	r3, [r7, #25]
            for (int i=0; i<mov_len; i++)
 8002b22:	2300      	movs	r3, #0
 8002b24:	627b      	str	r3, [r7, #36]	; 0x24
 8002b26:	e013      	b.n	8002b50 <cliUpdate+0x2a0>
            {
              line->buf[line->count - i] = line->buf[line->count - i - 1];
 8002b28:	69fb      	ldr	r3, [r7, #28]
 8002b2a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002b2e:	461a      	mov	r2, r3
 8002b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b32:	1ad3      	subs	r3, r2, r3
 8002b34:	1e5a      	subs	r2, r3, #1
 8002b36:	69fb      	ldr	r3, [r7, #28]
 8002b38:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002b3c:	4619      	mov	r1, r3
 8002b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b40:	1acb      	subs	r3, r1, r3
 8002b42:	69f9      	ldr	r1, [r7, #28]
 8002b44:	5c89      	ldrb	r1, [r1, r2]
 8002b46:	69fa      	ldr	r2, [r7, #28]
 8002b48:	54d1      	strb	r1, [r2, r3]
            for (int i=0; i<mov_len; i++)
 8002b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b4c:	3301      	adds	r3, #1
 8002b4e:	627b      	str	r3, [r7, #36]	; 0x24
 8002b50:	7e7b      	ldrb	r3, [r7, #25]
 8002b52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b54:	429a      	cmp	r2, r3
 8002b56:	dbe7      	blt.n	8002b28 <cliUpdate+0x278>
            }
            line->buf[line->cursor] = rx_data;
 8002b58:	69fb      	ldr	r3, [r7, #28]
 8002b5a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b5e:	461a      	mov	r2, r3
 8002b60:	78f9      	ldrb	r1, [r7, #3]
 8002b62:	69fb      	ldr	r3, [r7, #28]
 8002b64:	5499      	strb	r1, [r3, r2]
            line->count++;
 8002b66:	69fb      	ldr	r3, [r7, #28]
 8002b68:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002b6c:	3301      	adds	r3, #1
 8002b6e:	b2da      	uxtb	r2, r3
 8002b70:	69fb      	ldr	r3, [r7, #28]
 8002b72:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
            line->cursor++;
 8002b76:	69fb      	ldr	r3, [r7, #28]
 8002b78:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b7c:	3301      	adds	r3, #1
 8002b7e:	b2da      	uxtb	r2, r3
 8002b80:	69fb      	ldr	r3, [r7, #28]
 8002b82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
            line->buf[line->count] = 0;
 8002b86:	69fb      	ldr	r3, [r7, #28]
 8002b88:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002b8c:	461a      	mov	r2, r3
 8002b8e:	69fb      	ldr	r3, [r7, #28]
 8002b90:	2100      	movs	r1, #0
 8002b92:	5499      	strb	r1, [r3, r2]

            uartPrintf(p_cli->ch, "\x1B[4h%c\x1B[4l", rx_data);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	781b      	ldrb	r3, [r3, #0]
 8002b98:	78fa      	ldrb	r2, [r7, #3]
 8002b9a:	4913      	ldr	r1, [pc, #76]	; (8002be8 <cliUpdate+0x338>)
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	f002 fea3 	bl	80058e8 <uartPrintf>
          }
        }
        break;
 8002ba2:	e003      	b.n	8002bac <cliUpdate+0x2fc>
        break;
 8002ba4:	bf00      	nop
 8002ba6:	e002      	b.n	8002bae <cliUpdate+0x2fe>
        break;
 8002ba8:	bf00      	nop
 8002baa:	e000      	b.n	8002bae <cliUpdate+0x2fe>
        break;
 8002bac:	bf00      	nop
    }
  }

  switch(p_cli->state)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	7c1b      	ldrb	r3, [r3, #16]
 8002bb2:	3b01      	subs	r3, #1
 8002bb4:	2b03      	cmp	r3, #3
 8002bb6:	f200 80d2 	bhi.w	8002d5e <cliUpdate+0x4ae>
 8002bba:	a201      	add	r2, pc, #4	; (adr r2, 8002bc0 <cliUpdate+0x310>)
 8002bbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bc0:	08002bd1 	.word	0x08002bd1
 8002bc4:	08002bd9 	.word	0x08002bd9
 8002bc8:	08002bed 	.word	0x08002bed
 8002bcc:	08002d55 	.word	0x08002d55
  {
    case CLI_RX_SP1:
      p_cli->state = CLI_RX_SP2;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2202      	movs	r2, #2
 8002bd4:	741a      	strb	r2, [r3, #16]
      break;
 8002bd6:	e0c2      	b.n	8002d5e <cliUpdate+0x4ae>

    case CLI_RX_SP2:
      p_cli->state = CLI_RX_SP3;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2203      	movs	r2, #3
 8002bdc:	741a      	strb	r2, [r3, #16]
      break;
 8002bde:	e0be      	b.n	8002d5e <cliUpdate+0x4ae>
 8002be0:	080192f0 	.word	0x080192f0
 8002be4:	080192f8 	.word	0x080192f8
 8002be8:	08019300 	.word	0x08019300

    case CLI_RX_SP3:
      p_cli->state = CLI_RX_IDLE;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2200      	movs	r2, #0
 8002bf0:	741a      	strb	r2, [r3, #16]

      if (rx_data == CLI_KEY_LEFT)
 8002bf2:	78fb      	ldrb	r3, [r7, #3]
 8002bf4:	2b44      	cmp	r3, #68	; 0x44
 8002bf6:	d11a      	bne.n	8002c2e <cliUpdate+0x37e>
      {
        if (line->cursor > 0)
 8002bf8:	69fb      	ldr	r3, [r7, #28]
 8002bfa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d015      	beq.n	8002c2e <cliUpdate+0x37e>
        {
          line->cursor--;
 8002c02:	69fb      	ldr	r3, [r7, #28]
 8002c04:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c08:	3b01      	subs	r3, #1
 8002c0a:	b2da      	uxtb	r2, r3
 8002c0c:	69fb      	ldr	r3, [r7, #28]
 8002c0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          tx_buf[0] = 0x1B;
 8002c12:	231b      	movs	r3, #27
 8002c14:	733b      	strb	r3, [r7, #12]
          tx_buf[1] = 0x5B;
 8002c16:	235b      	movs	r3, #91	; 0x5b
 8002c18:	737b      	strb	r3, [r7, #13]
          tx_buf[2] = rx_data;
 8002c1a:	78fb      	ldrb	r3, [r7, #3]
 8002c1c:	73bb      	strb	r3, [r7, #14]
          uartWrite(p_cli->ch, tx_buf, 3);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	781b      	ldrb	r3, [r3, #0]
 8002c22:	f107 010c 	add.w	r1, r7, #12
 8002c26:	2203      	movs	r2, #3
 8002c28:	4618      	mov	r0, r3
 8002c2a:	f002 fe46 	bl	80058ba <uartWrite>
        }
      }

      if (rx_data == CLI_KEY_RIGHT)
 8002c2e:	78fb      	ldrb	r3, [r7, #3]
 8002c30:	2b43      	cmp	r3, #67	; 0x43
 8002c32:	d11d      	bne.n	8002c70 <cliUpdate+0x3c0>
      {
        if (line->cursor < line->count)
 8002c34:	69fb      	ldr	r3, [r7, #28]
 8002c36:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 8002c3a:	69fb      	ldr	r3, [r7, #28]
 8002c3c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002c40:	429a      	cmp	r2, r3
 8002c42:	d215      	bcs.n	8002c70 <cliUpdate+0x3c0>
        {
          line->cursor++;
 8002c44:	69fb      	ldr	r3, [r7, #28]
 8002c46:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c4a:	3301      	adds	r3, #1
 8002c4c:	b2da      	uxtb	r2, r3
 8002c4e:	69fb      	ldr	r3, [r7, #28]
 8002c50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

          tx_buf[0] = 0x1B;
 8002c54:	231b      	movs	r3, #27
 8002c56:	733b      	strb	r3, [r7, #12]
          tx_buf[1] = 0x5B;
 8002c58:	235b      	movs	r3, #91	; 0x5b
 8002c5a:	737b      	strb	r3, [r7, #13]
          tx_buf[2] = rx_data;
 8002c5c:	78fb      	ldrb	r3, [r7, #3]
 8002c5e:	73bb      	strb	r3, [r7, #14]
          uartWrite(p_cli->ch, tx_buf, 3);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	781b      	ldrb	r3, [r3, #0]
 8002c64:	f107 010c 	add.w	r1, r7, #12
 8002c68:	2203      	movs	r2, #3
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	f002 fe25 	bl	80058ba <uartWrite>
        }
      }

      if (rx_data == CLI_KEY_UP)
 8002c70:	78fb      	ldrb	r3, [r7, #3]
 8002c72:	2b41      	cmp	r3, #65	; 0x41
 8002c74:	d10c      	bne.n	8002c90 <cliUpdate+0x3e0>
      {
        cliLineChange(p_cli, true);
 8002c76:	2101      	movs	r1, #1
 8002c78:	6878      	ldr	r0, [r7, #4]
 8002c7a:	f000 f8e1 	bl	8002e40 <cliLineChange>
        uartPrintf(p_cli->ch, (char *)p_cli->line.buf);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	781a      	ldrb	r2, [r3, #0]
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	f203 23e7 	addw	r3, r3, #743	; 0x2e7
 8002c88:	4619      	mov	r1, r3
 8002c8a:	4610      	mov	r0, r2
 8002c8c:	f002 fe2c 	bl	80058e8 <uartPrintf>
      }

      if (rx_data == CLI_KEY_DOWN)
 8002c90:	78fb      	ldrb	r3, [r7, #3]
 8002c92:	2b42      	cmp	r3, #66	; 0x42
 8002c94:	d10c      	bne.n	8002cb0 <cliUpdate+0x400>
      {
        cliLineChange(p_cli, false);
 8002c96:	2100      	movs	r1, #0
 8002c98:	6878      	ldr	r0, [r7, #4]
 8002c9a:	f000 f8d1 	bl	8002e40 <cliLineChange>
        uartPrintf(p_cli->ch, (char *)p_cli->line.buf);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	781a      	ldrb	r2, [r3, #0]
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	f203 23e7 	addw	r3, r3, #743	; 0x2e7
 8002ca8:	4619      	mov	r1, r3
 8002caa:	4610      	mov	r0, r2
 8002cac:	f002 fe1c 	bl	80058e8 <uartPrintf>
      }

      if (rx_data == CLI_KEY_HOME)
 8002cb0:	78fb      	ldrb	r3, [r7, #3]
 8002cb2:	2b31      	cmp	r3, #49	; 0x31
 8002cb4:	d10f      	bne.n	8002cd6 <cliUpdate+0x426>
      {
        uartPrintf(p_cli->ch, "\x1B[%dD", line->cursor);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	7818      	ldrb	r0, [r3, #0]
 8002cba:	69fb      	ldr	r3, [r7, #28]
 8002cbc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002cc0:	461a      	mov	r2, r3
 8002cc2:	492b      	ldr	r1, [pc, #172]	; (8002d70 <cliUpdate+0x4c0>)
 8002cc4:	f002 fe10 	bl	80058e8 <uartPrintf>
        line->cursor = 0;
 8002cc8:	69fb      	ldr	r3, [r7, #28]
 8002cca:	2200      	movs	r2, #0
 8002ccc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        p_cli->state = CLI_RX_SP4;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2204      	movs	r2, #4
 8002cd4:	741a      	strb	r2, [r3, #16]
      }

      if (rx_data == CLI_KEY_END)
 8002cd6:	78fb      	ldrb	r3, [r7, #3]
 8002cd8:	2b34      	cmp	r3, #52	; 0x34
 8002cda:	d13f      	bne.n	8002d5c <cliUpdate+0x4ac>
      {
        uint16_t mov_len;

        if (line->cursor < line->count)
 8002cdc:	69fb      	ldr	r3, [r7, #28]
 8002cde:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 8002ce2:	69fb      	ldr	r3, [r7, #28]
 8002ce4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002ce8:	429a      	cmp	r2, r3
 8002cea:	d210      	bcs.n	8002d0e <cliUpdate+0x45e>
        {
          mov_len = line->count - line->cursor;
 8002cec:	69fb      	ldr	r3, [r7, #28]
 8002cee:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002cf2:	b29a      	uxth	r2, r3
 8002cf4:	69fb      	ldr	r3, [r7, #28]
 8002cf6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002cfa:	b29b      	uxth	r3, r3
 8002cfc:	1ad3      	subs	r3, r2, r3
 8002cfe:	82fb      	strh	r3, [r7, #22]
          uartPrintf(p_cli->ch, "\x1B[%dC", mov_len);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	781b      	ldrb	r3, [r3, #0]
 8002d04:	8afa      	ldrh	r2, [r7, #22]
 8002d06:	491b      	ldr	r1, [pc, #108]	; (8002d74 <cliUpdate+0x4c4>)
 8002d08:	4618      	mov	r0, r3
 8002d0a:	f002 fded 	bl	80058e8 <uartPrintf>
        }
        if (line->cursor > line->count)
 8002d0e:	69fb      	ldr	r3, [r7, #28]
 8002d10:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 8002d14:	69fb      	ldr	r3, [r7, #28]
 8002d16:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002d1a:	429a      	cmp	r2, r3
 8002d1c:	d910      	bls.n	8002d40 <cliUpdate+0x490>
        {
          mov_len = line->cursor - line->count;
 8002d1e:	69fb      	ldr	r3, [r7, #28]
 8002d20:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d24:	b29a      	uxth	r2, r3
 8002d26:	69fb      	ldr	r3, [r7, #28]
 8002d28:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002d2c:	b29b      	uxth	r3, r3
 8002d2e:	1ad3      	subs	r3, r2, r3
 8002d30:	82fb      	strh	r3, [r7, #22]
          uartPrintf(p_cli->ch, "\x1B[%dD", mov_len);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	781b      	ldrb	r3, [r3, #0]
 8002d36:	8afa      	ldrh	r2, [r7, #22]
 8002d38:	490d      	ldr	r1, [pc, #52]	; (8002d70 <cliUpdate+0x4c0>)
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	f002 fdd4 	bl	80058e8 <uartPrintf>
        }
        line->cursor = line->count;
 8002d40:	69fb      	ldr	r3, [r7, #28]
 8002d42:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
 8002d46:	69fb      	ldr	r3, [r7, #28]
 8002d48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        p_cli->state = CLI_RX_SP4;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2204      	movs	r2, #4
 8002d50:	741a      	strb	r2, [r3, #16]
      }
      break;
 8002d52:	e003      	b.n	8002d5c <cliUpdate+0x4ac>

    case CLI_RX_SP4:
      p_cli->state = CLI_RX_IDLE;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2200      	movs	r2, #0
 8002d58:	741a      	strb	r2, [r3, #16]
      break;
 8002d5a:	e000      	b.n	8002d5e <cliUpdate+0x4ae>
      break;
 8002d5c:	bf00      	nop
  }

  cliShowLog(p_cli);
 8002d5e:	6878      	ldr	r0, [r7, #4]
 8002d60:	f7ff fcea 	bl	8002738 <cliShowLog>

  return ret;
 8002d64:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8002d68:	4618      	mov	r0, r3
 8002d6a:	3730      	adds	r7, #48	; 0x30
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	bd80      	pop	{r7, pc}
 8002d70:	0801930c 	.word	0x0801930c
 8002d74:	08019314 	.word	0x08019314

08002d78 <cliLineClean>:

void cliLineClean(cli_t *p_cli)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	b083      	sub	sp, #12
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
  p_cli->line.count   = 0;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2200      	movs	r2, #0
 8002d84:	f883 2329 	strb.w	r2, [r3, #809]	; 0x329
  p_cli->line.cursor  = 0;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	f883 2328 	strb.w	r2, [r3, #808]	; 0x328
  p_cli->line.buf_len = CLI_LINE_BUF_MAX - 1;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	223f      	movs	r2, #63	; 0x3f
 8002d94:	f883 2327 	strb.w	r2, [r3, #807]	; 0x327
  p_cli->line.buf[0]  = 0;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	f883 22e7 	strb.w	r2, [r3, #743]	; 0x2e7
}
 8002da0:	bf00      	nop
 8002da2:	370c      	adds	r7, #12
 8002da4:	46bd      	mov	sp, r7
 8002da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002daa:	4770      	bx	lr

08002dac <cliLineAdd>:

void cliLineAdd(cli_t *p_cli)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b082      	sub	sp, #8
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]

  p_cli->line_buf[p_cli->hist_line_last] = p_cli->line;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	f893 3196 	ldrb.w	r3, [r3, #406]	; 0x196
 8002dba:	461a      	mov	r2, r3
 8002dbc:	6879      	ldr	r1, [r7, #4]
 8002dbe:	4613      	mov	r3, r2
 8002dc0:	015b      	lsls	r3, r3, #5
 8002dc2:	4413      	add	r3, r2
 8002dc4:	005b      	lsls	r3, r3, #1
 8002dc6:	4413      	add	r3, r2
 8002dc8:	440b      	add	r3, r1
 8002dca:	f503 72cc 	add.w	r2, r3, #408	; 0x198
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	4610      	mov	r0, r2
 8002dd2:	f203 23e7 	addw	r3, r3, #743	; 0x2e7
 8002dd6:	2243      	movs	r2, #67	; 0x43
 8002dd8:	4619      	mov	r1, r3
 8002dda:	f014 fa4a 	bl	8017272 <memcpy>

  if (p_cli->hist_line_count < CLI_LINE_HIS_MAX)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	f893 3197 	ldrb.w	r3, [r3, #407]	; 0x197
 8002de4:	2b04      	cmp	r3, #4
 8002de6:	d807      	bhi.n	8002df8 <cliLineAdd+0x4c>
  {
    p_cli->hist_line_count++;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	f893 3197 	ldrb.w	r3, [r3, #407]	; 0x197
 8002dee:	3301      	adds	r3, #1
 8002df0:	b2da      	uxtb	r2, r3
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	f883 2197 	strb.w	r2, [r3, #407]	; 0x197
  }

  p_cli->hist_line_i    = p_cli->hist_line_last;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	f893 3196 	ldrb.w	r3, [r3, #406]	; 0x196
 8002dfe:	b25a      	sxtb	r2, r3
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
  p_cli->hist_line_last = (p_cli->hist_line_last + 1) % CLI_LINE_HIS_MAX;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	f893 3196 	ldrb.w	r3, [r3, #406]	; 0x196
 8002e0c:	1c5a      	adds	r2, r3, #1
 8002e0e:	4b0b      	ldr	r3, [pc, #44]	; (8002e3c <cliLineAdd+0x90>)
 8002e10:	fb83 1302 	smull	r1, r3, r3, r2
 8002e14:	1059      	asrs	r1, r3, #1
 8002e16:	17d3      	asrs	r3, r2, #31
 8002e18:	1ac9      	subs	r1, r1, r3
 8002e1a:	460b      	mov	r3, r1
 8002e1c:	009b      	lsls	r3, r3, #2
 8002e1e:	440b      	add	r3, r1
 8002e20:	1ad1      	subs	r1, r2, r3
 8002e22:	b2ca      	uxtb	r2, r1
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	f883 2196 	strb.w	r2, [r3, #406]	; 0x196
  p_cli->hist_line_new  = true;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2201      	movs	r2, #1
 8002e2e:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194
}
 8002e32:	bf00      	nop
 8002e34:	3708      	adds	r7, #8
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bd80      	pop	{r7, pc}
 8002e3a:	bf00      	nop
 8002e3c:	66666667 	.word	0x66666667

08002e40 <cliLineChange>:

void cliLineChange(cli_t *p_cli, int8_t key_up)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b084      	sub	sp, #16
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
 8002e48:	460b      	mov	r3, r1
 8002e4a:	70fb      	strb	r3, [r7, #3]
  uint8_t change_i;


  if (p_cli->hist_line_count == 0)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	f893 3197 	ldrb.w	r3, [r3, #407]	; 0x197
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d076      	beq.n	8002f44 <cliLineChange+0x104>
  {
    return;
  }


  if (p_cli->line.cursor > 0)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	f893 3328 	ldrb.w	r3, [r3, #808]	; 0x328
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d008      	beq.n	8002e72 <cliLineChange+0x32>
  {
    uartPrintf(p_cli->ch, "\x1B[%dD", p_cli->line.cursor);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	7818      	ldrb	r0, [r3, #0]
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	f893 3328 	ldrb.w	r3, [r3, #808]	; 0x328
 8002e6a:	461a      	mov	r2, r3
 8002e6c:	4937      	ldr	r1, [pc, #220]	; (8002f4c <cliLineChange+0x10c>)
 8002e6e:	f002 fd3b 	bl	80058e8 <uartPrintf>
  }
  if (p_cli->line.count > 0)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	f893 3329 	ldrb.w	r3, [r3, #809]	; 0x329
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d008      	beq.n	8002e8e <cliLineChange+0x4e>
  {
    uartPrintf(p_cli->ch, "\x1B[%dP", p_cli->line.count);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	7818      	ldrb	r0, [r3, #0]
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	f893 3329 	ldrb.w	r3, [r3, #809]	; 0x329
 8002e86:	461a      	mov	r2, r3
 8002e88:	4931      	ldr	r1, [pc, #196]	; (8002f50 <cliLineChange+0x110>)
 8002e8a:	f002 fd2d 	bl	80058e8 <uartPrintf>
  }


  if (key_up == true)
 8002e8e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e92:	2b01      	cmp	r3, #1
 8002e94:	d125      	bne.n	8002ee2 <cliLineChange+0xa2>
  {
    if (p_cli->hist_line_new == true)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	f893 3194 	ldrb.w	r3, [r3, #404]	; 0x194
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d006      	beq.n	8002eae <cliLineChange+0x6e>
    {
      p_cli->hist_line_i = p_cli->hist_line_last;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	f893 3196 	ldrb.w	r3, [r3, #406]	; 0x196
 8002ea6:	b25a      	sxtb	r2, r3
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
    }
    p_cli->hist_line_i = (p_cli->hist_line_i + p_cli->hist_line_count - 1) % p_cli->hist_line_count;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	f993 3195 	ldrsb.w	r3, [r3, #405]	; 0x195
 8002eb4:	461a      	mov	r2, r3
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	f893 3197 	ldrb.w	r3, [r3, #407]	; 0x197
 8002ebc:	4413      	add	r3, r2
 8002ebe:	3b01      	subs	r3, #1
 8002ec0:	687a      	ldr	r2, [r7, #4]
 8002ec2:	f892 2197 	ldrb.w	r2, [r2, #407]	; 0x197
 8002ec6:	fb93 f1f2 	sdiv	r1, r3, r2
 8002eca:	fb01 f202 	mul.w	r2, r1, r2
 8002ece:	1a9b      	subs	r3, r3, r2
 8002ed0:	b25a      	sxtb	r2, r3
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
    change_i = p_cli->hist_line_i;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	f993 3195 	ldrsb.w	r3, [r3, #405]	; 0x195
 8002ede:	73fb      	strb	r3, [r7, #15]
 8002ee0:	e013      	b.n	8002f0a <cliLineChange+0xca>
  }
  else
  {
    p_cli->hist_line_i = (p_cli->hist_line_i + 1) % p_cli->hist_line_count;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	f993 3195 	ldrsb.w	r3, [r3, #405]	; 0x195
 8002ee8:	3301      	adds	r3, #1
 8002eea:	687a      	ldr	r2, [r7, #4]
 8002eec:	f892 2197 	ldrb.w	r2, [r2, #407]	; 0x197
 8002ef0:	fb93 f1f2 	sdiv	r1, r3, r2
 8002ef4:	fb01 f202 	mul.w	r2, r1, r2
 8002ef8:	1a9b      	subs	r3, r3, r2
 8002efa:	b25a      	sxtb	r2, r3
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
    change_i = p_cli->hist_line_i;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	f993 3195 	ldrsb.w	r3, [r3, #405]	; 0x195
 8002f08:	73fb      	strb	r3, [r7, #15]
  }

  p_cli->line = p_cli->line_buf[change_i];
 8002f0a:	7bfa      	ldrb	r2, [r7, #15]
 8002f0c:	6879      	ldr	r1, [r7, #4]
 8002f0e:	6878      	ldr	r0, [r7, #4]
 8002f10:	4613      	mov	r3, r2
 8002f12:	015b      	lsls	r3, r3, #5
 8002f14:	4413      	add	r3, r2
 8002f16:	005b      	lsls	r3, r3, #1
 8002f18:	4413      	add	r3, r2
 8002f1a:	4403      	add	r3, r0
 8002f1c:	f503 72cc 	add.w	r2, r3, #408	; 0x198
 8002f20:	f201 23e7 	addw	r3, r1, #743	; 0x2e7
 8002f24:	4611      	mov	r1, r2
 8002f26:	2243      	movs	r2, #67	; 0x43
 8002f28:	4618      	mov	r0, r3
 8002f2a:	f014 f9a2 	bl	8017272 <memcpy>
  p_cli->line.cursor = p_cli->line.count;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	f893 2329 	ldrb.w	r2, [r3, #809]	; 0x329
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	f883 2328 	strb.w	r2, [r3, #808]	; 0x328

  p_cli->hist_line_new = false;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194
 8002f42:	e000      	b.n	8002f46 <cliLineChange+0x106>
    return;
 8002f44:	bf00      	nop
}
 8002f46:	3710      	adds	r7, #16
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	bd80      	pop	{r7, pc}
 8002f4c:	0801930c 	.word	0x0801930c
 8002f50:	0801931c 	.word	0x0801931c

08002f54 <cliRunCmd>:

bool cliRunCmd(cli_t *p_cli)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b084      	sub	sp, #16
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
  bool ret = false;
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	72fb      	strb	r3, [r7, #11]


  if (cliParseArgs(p_cli) == true)
 8002f60:	6878      	ldr	r0, [r7, #4]
 8002f62:	f000 f851 	bl	8003008 <cliParseArgs>
 8002f66:	4603      	mov	r3, r0
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d046      	beq.n	8002ffa <cliRunCmd+0xa6>
  {
    cliPrintf("\r\n");
 8002f6c:	4825      	ldr	r0, [pc, #148]	; (8003004 <cliRunCmd+0xb0>)
 8002f6e:	f000 f893 	bl	8003098 <cliPrintf>

    cliToUpper(p_cli->argv[0]);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8002f78:	4618      	mov	r0, r3
 8002f7a:	f000 f8b1 	bl	80030e0 <cliToUpper>

    for (int i=0; i<p_cli->cmd_count; i++)
 8002f7e:	2300      	movs	r3, #0
 8002f80:	60fb      	str	r3, [r7, #12]
 8002f82:	e033      	b.n	8002fec <cliRunCmd+0x98>
    {
      if (strcmp(p_cli->argv[0], p_cli->cmd_list[i].cmd_str) == 0)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
 8002f8a:	68fa      	ldr	r2, [r7, #12]
 8002f8c:	4613      	mov	r3, r2
 8002f8e:	009b      	lsls	r3, r3, #2
 8002f90:	4413      	add	r3, r2
 8002f92:	009b      	lsls	r3, r3, #2
 8002f94:	f503 734a 	add.w	r3, r3, #808	; 0x328
 8002f98:	687a      	ldr	r2, [r7, #4]
 8002f9a:	4413      	add	r3, r2
 8002f9c:	3304      	adds	r3, #4
 8002f9e:	4619      	mov	r1, r3
 8002fa0:	f7fd f91e 	bl	80001e0 <strcmp>
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d11d      	bne.n	8002fe6 <cliRunCmd+0x92>
      {
        p_cli->cmd_args.argc =  p_cli->argc - 1;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	f8b3 3112 	ldrh.w	r3, [r3, #274]	; 0x112
 8002fb0:	3b01      	subs	r3, #1
 8002fb2:	b29a      	uxth	r2, r3
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	f8a3 246c 	strh.w	r2, [r3, #1132]	; 0x46c
        p_cli->cmd_args.argv = &p_cli->argv[1];
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	f503 728c 	add.w	r2, r3, #280	; 0x118
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	f8c3 2470 	str.w	r2, [r3, #1136]	; 0x470
        p_cli->cmd_list[i].cmd_func(&p_cli->cmd_args);
 8002fc6:	6879      	ldr	r1, [r7, #4]
 8002fc8:	68fa      	ldr	r2, [r7, #12]
 8002fca:	4613      	mov	r3, r2
 8002fcc:	009b      	lsls	r3, r3, #2
 8002fce:	4413      	add	r3, r2
 8002fd0:	009b      	lsls	r3, r3, #2
 8002fd2:	440b      	add	r3, r1
 8002fd4:	f503 734f 	add.w	r3, r3, #828	; 0x33c
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	687a      	ldr	r2, [r7, #4]
 8002fdc:	f202 426c 	addw	r2, r2, #1132	; 0x46c
 8002fe0:	4610      	mov	r0, r2
 8002fe2:	4798      	blx	r3
        break;
 8002fe4:	e009      	b.n	8002ffa <cliRunCmd+0xa6>
    for (int i=0; i<p_cli->cmd_count; i++)
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	3301      	adds	r3, #1
 8002fea:	60fb      	str	r3, [r7, #12]
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	f8b3 332a 	ldrh.w	r3, [r3, #810]	; 0x32a
 8002ff2:	461a      	mov	r2, r3
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	dbc4      	blt.n	8002f84 <cliRunCmd+0x30>
      }
    }
  }

  return ret;
 8002ffa:	7afb      	ldrb	r3, [r7, #11]
}
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	3710      	adds	r7, #16
 8003000:	46bd      	mov	sp, r7
 8003002:	bd80      	pop	{r7, pc}
 8003004:	08019324 	.word	0x08019324

08003008 <cliParseArgs>:

bool cliParseArgs(cli_t *p_cli)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b088      	sub	sp, #32
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
  bool ret = false;
 8003010:	2300      	movs	r3, #0
 8003012:	77fb      	strb	r3, [r7, #31]
  char *tok;
  char *next_ptr;
  uint16_t argc = 0;
 8003014:	2300      	movs	r3, #0
 8003016:	82fb      	strh	r3, [r7, #22]
  static const char *delim = " \f\n\r\t\v";
  char *cmdline;
  char **argv;

  p_cli->argc = 0;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2200      	movs	r2, #0
 800301c:	f8a3 2112 	strh.w	r2, [r3, #274]	; 0x112

  cmdline = (char *)p_cli->line.buf;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	f203 23e7 	addw	r3, r3, #743	; 0x2e7
 8003026:	613b      	str	r3, [r7, #16]
  argv    = p_cli->argv;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	f503 738a 	add.w	r3, r3, #276	; 0x114
 800302e:	60fb      	str	r3, [r7, #12]

  argv[argc] = NULL;
 8003030:	8afb      	ldrh	r3, [r7, #22]
 8003032:	009b      	lsls	r3, r3, #2
 8003034:	68fa      	ldr	r2, [r7, #12]
 8003036:	4413      	add	r3, r2
 8003038:	2200      	movs	r2, #0
 800303a:	601a      	str	r2, [r3, #0]

  for (tok = strtok_r(cmdline, delim, &next_ptr); tok; tok = strtok_r(NULL, delim, &next_ptr))
 800303c:	4b15      	ldr	r3, [pc, #84]	; (8003094 <cliParseArgs+0x8c>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f107 0208 	add.w	r2, r7, #8
 8003044:	4619      	mov	r1, r3
 8003046:	6938      	ldr	r0, [r7, #16]
 8003048:	f014 f884 	bl	8017154 <strtok_r>
 800304c:	61b8      	str	r0, [r7, #24]
 800304e:	e010      	b.n	8003072 <cliParseArgs+0x6a>
  {
    argv[argc++] = tok;
 8003050:	8afb      	ldrh	r3, [r7, #22]
 8003052:	1c5a      	adds	r2, r3, #1
 8003054:	82fa      	strh	r2, [r7, #22]
 8003056:	009b      	lsls	r3, r3, #2
 8003058:	68fa      	ldr	r2, [r7, #12]
 800305a:	4413      	add	r3, r2
 800305c:	69ba      	ldr	r2, [r7, #24]
 800305e:	601a      	str	r2, [r3, #0]
  for (tok = strtok_r(cmdline, delim, &next_ptr); tok; tok = strtok_r(NULL, delim, &next_ptr))
 8003060:	4b0c      	ldr	r3, [pc, #48]	; (8003094 <cliParseArgs+0x8c>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f107 0208 	add.w	r2, r7, #8
 8003068:	4619      	mov	r1, r3
 800306a:	2000      	movs	r0, #0
 800306c:	f014 f872 	bl	8017154 <strtok_r>
 8003070:	61b8      	str	r0, [r7, #24]
 8003072:	69bb      	ldr	r3, [r7, #24]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d1eb      	bne.n	8003050 <cliParseArgs+0x48>
  }

  p_cli->argc = argc;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	8afa      	ldrh	r2, [r7, #22]
 800307c:	f8a3 2112 	strh.w	r2, [r3, #274]	; 0x112

  if (argc > 0)
 8003080:	8afb      	ldrh	r3, [r7, #22]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d001      	beq.n	800308a <cliParseArgs+0x82>
  {
    ret = true;
 8003086:	2301      	movs	r3, #1
 8003088:	77fb      	strb	r3, [r7, #31]
  }

  return ret;
 800308a:	7ffb      	ldrb	r3, [r7, #31]
}
 800308c:	4618      	mov	r0, r3
 800308e:	3720      	adds	r7, #32
 8003090:	46bd      	mov	sp, r7
 8003092:	bd80      	pop	{r7, pc}
 8003094:	2000006c 	.word	0x2000006c

08003098 <cliPrintf>:

void cliPrintf(const char *fmt, ...)
{
 8003098:	b40f      	push	{r0, r1, r2, r3}
 800309a:	b580      	push	{r7, lr}
 800309c:	b084      	sub	sp, #16
 800309e:	af00      	add	r7, sp, #0
  va_list arg;
  va_start (arg, fmt);
 80030a0:	f107 031c 	add.w	r3, r7, #28
 80030a4:	607b      	str	r3, [r7, #4]
  int32_t len;
  cli_t *p_cli = &cli_node;
 80030a6:	4b0d      	ldr	r3, [pc, #52]	; (80030dc <cliPrintf+0x44>)
 80030a8:	60fb      	str	r3, [r7, #12]


  len = vsnprintf(p_cli->print_buffer, 256, fmt, arg);
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	f103 0011 	add.w	r0, r3, #17
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	69ba      	ldr	r2, [r7, #24]
 80030b4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80030b8:	f013 fffc 	bl	80170b4 <vsniprintf>
 80030bc:	60b8      	str	r0, [r7, #8]
  va_end (arg);

  uartWrite(p_cli->ch, (uint8_t *)p_cli->print_buffer, len);
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	7818      	ldrb	r0, [r3, #0]
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	3311      	adds	r3, #17
 80030c6:	68ba      	ldr	r2, [r7, #8]
 80030c8:	4619      	mov	r1, r3
 80030ca:	f002 fbf6 	bl	80058ba <uartWrite>
}
 80030ce:	bf00      	nop
 80030d0:	3710      	adds	r7, #16
 80030d2:	46bd      	mov	sp, r7
 80030d4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80030d8:	b004      	add	sp, #16
 80030da:	4770      	bx	lr
 80030dc:	20000b0c 	.word	0x20000b0c

080030e0 <cliToUpper>:

void cliToUpper(char *str)
{
 80030e0:	b480      	push	{r7}
 80030e2:	b085      	sub	sp, #20
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
  uint16_t i;
  uint8_t  str_ch;

  for (i=0; i<CLI_CMD_NAME_MAX; i++)
 80030e8:	2300      	movs	r3, #0
 80030ea:	81fb      	strh	r3, [r7, #14]
 80030ec:	e018      	b.n	8003120 <cliToUpper+0x40>
  {
    str_ch = str[i];
 80030ee:	89fb      	ldrh	r3, [r7, #14]
 80030f0:	687a      	ldr	r2, [r7, #4]
 80030f2:	4413      	add	r3, r2
 80030f4:	781b      	ldrb	r3, [r3, #0]
 80030f6:	737b      	strb	r3, [r7, #13]

    if (str_ch == 0)
 80030f8:	7b7b      	ldrb	r3, [r7, #13]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d014      	beq.n	8003128 <cliToUpper+0x48>
    {
      break;
    }

    if ((str_ch >= 'a') && (str_ch <= 'z'))
 80030fe:	7b7b      	ldrb	r3, [r7, #13]
 8003100:	2b60      	cmp	r3, #96	; 0x60
 8003102:	d905      	bls.n	8003110 <cliToUpper+0x30>
 8003104:	7b7b      	ldrb	r3, [r7, #13]
 8003106:	2b7a      	cmp	r3, #122	; 0x7a
 8003108:	d802      	bhi.n	8003110 <cliToUpper+0x30>
    {
      str_ch = str_ch - 'a' + 'A';
 800310a:	7b7b      	ldrb	r3, [r7, #13]
 800310c:	3b20      	subs	r3, #32
 800310e:	737b      	strb	r3, [r7, #13]
    }
    str[i] = str_ch;
 8003110:	89fb      	ldrh	r3, [r7, #14]
 8003112:	687a      	ldr	r2, [r7, #4]
 8003114:	4413      	add	r3, r2
 8003116:	7b7a      	ldrb	r2, [r7, #13]
 8003118:	701a      	strb	r2, [r3, #0]
  for (i=0; i<CLI_CMD_NAME_MAX; i++)
 800311a:	89fb      	ldrh	r3, [r7, #14]
 800311c:	3301      	adds	r3, #1
 800311e:	81fb      	strh	r3, [r7, #14]
 8003120:	89fb      	ldrh	r3, [r7, #14]
 8003122:	2b0f      	cmp	r3, #15
 8003124:	d9e3      	bls.n	80030ee <cliToUpper+0xe>
 8003126:	e000      	b.n	800312a <cliToUpper+0x4a>
      break;
 8003128:	bf00      	nop
  }

  if (i == CLI_CMD_NAME_MAX)
 800312a:	89fb      	ldrh	r3, [r7, #14]
 800312c:	2b10      	cmp	r3, #16
 800312e:	d105      	bne.n	800313c <cliToUpper+0x5c>
  {
    str[i-1] = 0;
 8003130:	89fb      	ldrh	r3, [r7, #14]
 8003132:	3b01      	subs	r3, #1
 8003134:	687a      	ldr	r2, [r7, #4]
 8003136:	4413      	add	r3, r2
 8003138:	2200      	movs	r2, #0
 800313a:	701a      	strb	r2, [r3, #0]
  }
}
 800313c:	bf00      	nop
 800313e:	3714      	adds	r7, #20
 8003140:	46bd      	mov	sp, r7
 8003142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003146:	4770      	bx	lr

08003148 <cliArgsGetData>:

int32_t cliArgsGetData(uint8_t index)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b084      	sub	sp, #16
 800314c:	af00      	add	r7, sp, #0
 800314e:	4603      	mov	r3, r0
 8003150:	71fb      	strb	r3, [r7, #7]
  int32_t ret = 0;
 8003152:	2300      	movs	r3, #0
 8003154:	60fb      	str	r3, [r7, #12]
  cli_t *p_cli = &cli_node;
 8003156:	4b0f      	ldr	r3, [pc, #60]	; (8003194 <cliArgsGetData+0x4c>)
 8003158:	60bb      	str	r3, [r7, #8]


  if (index >= p_cli->cmd_args.argc)
 800315a:	79fb      	ldrb	r3, [r7, #7]
 800315c:	b29a      	uxth	r2, r3
 800315e:	68bb      	ldr	r3, [r7, #8]
 8003160:	f8b3 346c 	ldrh.w	r3, [r3, #1132]	; 0x46c
 8003164:	429a      	cmp	r2, r3
 8003166:	d301      	bcc.n	800316c <cliArgsGetData+0x24>
  {
    return 0;
 8003168:	2300      	movs	r3, #0
 800316a:	e00e      	b.n	800318a <cliArgsGetData+0x42>
  }

  ret = (int32_t)strtoul((const char * ) p_cli->cmd_args.argv[index], (char **)NULL, (int) 0);
 800316c:	68bb      	ldr	r3, [r7, #8]
 800316e:	f8d3 2470 	ldr.w	r2, [r3, #1136]	; 0x470
 8003172:	79fb      	ldrb	r3, [r7, #7]
 8003174:	009b      	lsls	r3, r3, #2
 8003176:	4413      	add	r3, r2
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	2200      	movs	r2, #0
 800317c:	2100      	movs	r1, #0
 800317e:	4618      	mov	r0, r3
 8003180:	f013 fe5e 	bl	8016e40 <strtoul>
 8003184:	4603      	mov	r3, r0
 8003186:	60fb      	str	r3, [r7, #12]

  return ret;
 8003188:	68fb      	ldr	r3, [r7, #12]
}
 800318a:	4618      	mov	r0, r3
 800318c:	3710      	adds	r7, #16
 800318e:	46bd      	mov	sp, r7
 8003190:	bd80      	pop	{r7, pc}
 8003192:	bf00      	nop
 8003194:	20000b0c 	.word	0x20000b0c

08003198 <cliArgsGetFloat>:

float cliArgsGetFloat(uint8_t index)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b084      	sub	sp, #16
 800319c:	af00      	add	r7, sp, #0
 800319e:	4603      	mov	r3, r0
 80031a0:	71fb      	strb	r3, [r7, #7]
  float ret = 0.0;
 80031a2:	f04f 0300 	mov.w	r3, #0
 80031a6:	60fb      	str	r3, [r7, #12]
  cli_t *p_cli = &cli_node;
 80031a8:	4b10      	ldr	r3, [pc, #64]	; (80031ec <cliArgsGetFloat+0x54>)
 80031aa:	60bb      	str	r3, [r7, #8]


  if (index >= p_cli->cmd_args.argc)
 80031ac:	79fb      	ldrb	r3, [r7, #7]
 80031ae:	b29a      	uxth	r2, r3
 80031b0:	68bb      	ldr	r3, [r7, #8]
 80031b2:	f8b3 346c 	ldrh.w	r3, [r3, #1132]	; 0x46c
 80031b6:	429a      	cmp	r2, r3
 80031b8:	d302      	bcc.n	80031c0 <cliArgsGetFloat+0x28>
  {
    return 0;
 80031ba:	f04f 0300 	mov.w	r3, #0
 80031be:	e00d      	b.n	80031dc <cliArgsGetFloat+0x44>
  }

  ret = (float)strtof((const char * ) p_cli->cmd_args.argv[index], (char **)NULL);
 80031c0:	68bb      	ldr	r3, [r7, #8]
 80031c2:	f8d3 2470 	ldr.w	r2, [r3, #1136]	; 0x470
 80031c6:	79fb      	ldrb	r3, [r7, #7]
 80031c8:	009b      	lsls	r3, r3, #2
 80031ca:	4413      	add	r3, r2
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	2100      	movs	r1, #0
 80031d0:	4618      	mov	r0, r3
 80031d2:	f013 fd5d 	bl	8016c90 <strtof>
 80031d6:	ed87 0a03 	vstr	s0, [r7, #12]

  return ret;
 80031da:	68fb      	ldr	r3, [r7, #12]
}
 80031dc:	ee07 3a90 	vmov	s15, r3
 80031e0:	eeb0 0a67 	vmov.f32	s0, s15
 80031e4:	3710      	adds	r7, #16
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bd80      	pop	{r7, pc}
 80031ea:	bf00      	nop
 80031ec:	20000b0c 	.word	0x20000b0c

080031f0 <cliArgsGetStr>:

char *cliArgsGetStr(uint8_t index)
{
 80031f0:	b480      	push	{r7}
 80031f2:	b085      	sub	sp, #20
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	4603      	mov	r3, r0
 80031f8:	71fb      	strb	r3, [r7, #7]
  char *ret = NULL;
 80031fa:	2300      	movs	r3, #0
 80031fc:	60fb      	str	r3, [r7, #12]
  cli_t *p_cli = &cli_node;
 80031fe:	4b0d      	ldr	r3, [pc, #52]	; (8003234 <cliArgsGetStr+0x44>)
 8003200:	60bb      	str	r3, [r7, #8]


  if (index >= p_cli->cmd_args.argc)
 8003202:	79fb      	ldrb	r3, [r7, #7]
 8003204:	b29a      	uxth	r2, r3
 8003206:	68bb      	ldr	r3, [r7, #8]
 8003208:	f8b3 346c 	ldrh.w	r3, [r3, #1132]	; 0x46c
 800320c:	429a      	cmp	r2, r3
 800320e:	d301      	bcc.n	8003214 <cliArgsGetStr+0x24>
  {
    return 0;
 8003210:	2300      	movs	r3, #0
 8003212:	e008      	b.n	8003226 <cliArgsGetStr+0x36>
  }

  ret = p_cli->cmd_args.argv[index];
 8003214:	68bb      	ldr	r3, [r7, #8]
 8003216:	f8d3 2470 	ldr.w	r2, [r3, #1136]	; 0x470
 800321a:	79fb      	ldrb	r3, [r7, #7]
 800321c:	009b      	lsls	r3, r3, #2
 800321e:	4413      	add	r3, r2
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	60fb      	str	r3, [r7, #12]

  return ret;
 8003224:	68fb      	ldr	r3, [r7, #12]
}
 8003226:	4618      	mov	r0, r3
 8003228:	3714      	adds	r7, #20
 800322a:	46bd      	mov	sp, r7
 800322c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003230:	4770      	bx	lr
 8003232:	bf00      	nop
 8003234:	20000b0c 	.word	0x20000b0c

08003238 <cliArgsIsStr>:

bool cliArgsIsStr(uint8_t index, char *p_str)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b084      	sub	sp, #16
 800323c:	af00      	add	r7, sp, #0
 800323e:	4603      	mov	r3, r0
 8003240:	6039      	str	r1, [r7, #0]
 8003242:	71fb      	strb	r3, [r7, #7]
  bool ret = false;
 8003244:	2300      	movs	r3, #0
 8003246:	73fb      	strb	r3, [r7, #15]
  cli_t *p_cli = &cli_node;
 8003248:	4b0f      	ldr	r3, [pc, #60]	; (8003288 <cliArgsIsStr+0x50>)
 800324a:	60bb      	str	r3, [r7, #8]


  if (index >= p_cli->cmd_args.argc)
 800324c:	79fb      	ldrb	r3, [r7, #7]
 800324e:	b29a      	uxth	r2, r3
 8003250:	68bb      	ldr	r3, [r7, #8]
 8003252:	f8b3 346c 	ldrh.w	r3, [r3, #1132]	; 0x46c
 8003256:	429a      	cmp	r2, r3
 8003258:	d301      	bcc.n	800325e <cliArgsIsStr+0x26>
  {
    return 0;
 800325a:	2300      	movs	r3, #0
 800325c:	e010      	b.n	8003280 <cliArgsIsStr+0x48>
  }

  if(strcmp(p_str, p_cli->cmd_args.argv[index]) == 0)
 800325e:	68bb      	ldr	r3, [r7, #8]
 8003260:	f8d3 2470 	ldr.w	r2, [r3, #1136]	; 0x470
 8003264:	79fb      	ldrb	r3, [r7, #7]
 8003266:	009b      	lsls	r3, r3, #2
 8003268:	4413      	add	r3, r2
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4619      	mov	r1, r3
 800326e:	6838      	ldr	r0, [r7, #0]
 8003270:	f7fc ffb6 	bl	80001e0 <strcmp>
 8003274:	4603      	mov	r3, r0
 8003276:	2b00      	cmp	r3, #0
 8003278:	d101      	bne.n	800327e <cliArgsIsStr+0x46>
  {
    ret = true;
 800327a:	2301      	movs	r3, #1
 800327c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800327e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003280:	4618      	mov	r0, r3
 8003282:	3710      	adds	r7, #16
 8003284:	46bd      	mov	sp, r7
 8003286:	bd80      	pop	{r7, pc}
 8003288:	20000b0c 	.word	0x20000b0c

0800328c <cliKeepLoop>:

bool cliKeepLoop(void)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b082      	sub	sp, #8
 8003290:	af00      	add	r7, sp, #0
  cli_t *p_cli = &cli_node;
 8003292:	4b08      	ldr	r3, [pc, #32]	; (80032b4 <cliKeepLoop+0x28>)
 8003294:	607b      	str	r3, [r7, #4]


  if (uartAvailable(p_cli->ch) == 0)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	781b      	ldrb	r3, [r3, #0]
 800329a:	4618      	mov	r0, r3
 800329c:	f002 fae6 	bl	800586c <uartAvailable>
 80032a0:	4603      	mov	r3, r0
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d101      	bne.n	80032aa <cliKeepLoop+0x1e>
  {
    return true;
 80032a6:	2301      	movs	r3, #1
 80032a8:	e000      	b.n	80032ac <cliKeepLoop+0x20>
  }
  else
  {
    return false;
 80032aa:	2300      	movs	r3, #0
  }
}
 80032ac:	4618      	mov	r0, r3
 80032ae:	3708      	adds	r7, #8
 80032b0:	46bd      	mov	sp, r7
 80032b2:	bd80      	pop	{r7, pc}
 80032b4:	20000b0c 	.word	0x20000b0c

080032b8 <cliAdd>:

bool cliAdd(const char *cmd_str, void (*p_func)(cli_args_t *))
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b086      	sub	sp, #24
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
 80032c0:	6039      	str	r1, [r7, #0]
  bool ret = true;
 80032c2:	2301      	movs	r3, #1
 80032c4:	75fb      	strb	r3, [r7, #23]
  cli_t *p_cli = &cli_node;
 80032c6:	4b20      	ldr	r3, [pc, #128]	; (8003348 <cliAdd+0x90>)
 80032c8:	613b      	str	r3, [r7, #16]
  uint16_t index;

  if (p_cli->cmd_count >= CLI_CMD_LIST_MAX)
 80032ca:	693b      	ldr	r3, [r7, #16]
 80032cc:	f8b3 332a 	ldrh.w	r3, [r3, #810]	; 0x32a
 80032d0:	2b0f      	cmp	r3, #15
 80032d2:	d901      	bls.n	80032d8 <cliAdd+0x20>
  {
    return false;
 80032d4:	2300      	movs	r3, #0
 80032d6:	e032      	b.n	800333e <cliAdd+0x86>
  }

  index = p_cli->cmd_count;
 80032d8:	693b      	ldr	r3, [r7, #16]
 80032da:	f8b3 332a 	ldrh.w	r3, [r3, #810]	; 0x32a
 80032de:	81fb      	strh	r3, [r7, #14]

  strcpy(p_cli->cmd_list[index].cmd_str, cmd_str);
 80032e0:	89fa      	ldrh	r2, [r7, #14]
 80032e2:	4613      	mov	r3, r2
 80032e4:	009b      	lsls	r3, r3, #2
 80032e6:	4413      	add	r3, r2
 80032e8:	009b      	lsls	r3, r3, #2
 80032ea:	f503 734a 	add.w	r3, r3, #808	; 0x328
 80032ee:	693a      	ldr	r2, [r7, #16]
 80032f0:	4413      	add	r3, r2
 80032f2:	3304      	adds	r3, #4
 80032f4:	6879      	ldr	r1, [r7, #4]
 80032f6:	4618      	mov	r0, r3
 80032f8:	f013 ffb3 	bl	8017262 <strcpy>
  p_cli->cmd_list[index].cmd_func = p_func;
 80032fc:	89fa      	ldrh	r2, [r7, #14]
 80032fe:	6939      	ldr	r1, [r7, #16]
 8003300:	4613      	mov	r3, r2
 8003302:	009b      	lsls	r3, r3, #2
 8003304:	4413      	add	r3, r2
 8003306:	009b      	lsls	r3, r3, #2
 8003308:	440b      	add	r3, r1
 800330a:	f503 734f 	add.w	r3, r3, #828	; 0x33c
 800330e:	683a      	ldr	r2, [r7, #0]
 8003310:	601a      	str	r2, [r3, #0]

  cliToUpper(p_cli->cmd_list[index].cmd_str);
 8003312:	89fa      	ldrh	r2, [r7, #14]
 8003314:	4613      	mov	r3, r2
 8003316:	009b      	lsls	r3, r3, #2
 8003318:	4413      	add	r3, r2
 800331a:	009b      	lsls	r3, r3, #2
 800331c:	f503 734a 	add.w	r3, r3, #808	; 0x328
 8003320:	693a      	ldr	r2, [r7, #16]
 8003322:	4413      	add	r3, r2
 8003324:	3304      	adds	r3, #4
 8003326:	4618      	mov	r0, r3
 8003328:	f7ff feda 	bl	80030e0 <cliToUpper>

  p_cli->cmd_count++;
 800332c:	693b      	ldr	r3, [r7, #16]
 800332e:	f8b3 332a 	ldrh.w	r3, [r3, #810]	; 0x32a
 8003332:	3301      	adds	r3, #1
 8003334:	b29a      	uxth	r2, r3
 8003336:	693b      	ldr	r3, [r7, #16]
 8003338:	f8a3 232a 	strh.w	r2, [r3, #810]	; 0x32a

  return ret;
 800333c:	7dfb      	ldrb	r3, [r7, #23]
}
 800333e:	4618      	mov	r0, r3
 8003340:	3718      	adds	r7, #24
 8003342:	46bd      	mov	sp, r7
 8003344:	bd80      	pop	{r7, pc}
 8003346:	bf00      	nop
 8003348:	20000b0c 	.word	0x20000b0c

0800334c <cliShowList>:

void cliShowList(cli_args_t *args)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b084      	sub	sp, #16
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
  cli_t *p_cli = &cli_node;
 8003354:	4b15      	ldr	r3, [pc, #84]	; (80033ac <cliShowList+0x60>)
 8003356:	60bb      	str	r3, [r7, #8]


  cliPrintf("\r\n");
 8003358:	4815      	ldr	r0, [pc, #84]	; (80033b0 <cliShowList+0x64>)
 800335a:	f7ff fe9d 	bl	8003098 <cliPrintf>
  cliPrintf("---------- cmd list ---------\r\n");
 800335e:	4815      	ldr	r0, [pc, #84]	; (80033b4 <cliShowList+0x68>)
 8003360:	f7ff fe9a 	bl	8003098 <cliPrintf>

  for (int i=0; i<p_cli->cmd_count; i++)
 8003364:	2300      	movs	r3, #0
 8003366:	60fb      	str	r3, [r7, #12]
 8003368:	e012      	b.n	8003390 <cliShowList+0x44>
  {
    cliPrintf(p_cli->cmd_list[i].cmd_str);
 800336a:	68fa      	ldr	r2, [r7, #12]
 800336c:	4613      	mov	r3, r2
 800336e:	009b      	lsls	r3, r3, #2
 8003370:	4413      	add	r3, r2
 8003372:	009b      	lsls	r3, r3, #2
 8003374:	f503 734a 	add.w	r3, r3, #808	; 0x328
 8003378:	68ba      	ldr	r2, [r7, #8]
 800337a:	4413      	add	r3, r2
 800337c:	3304      	adds	r3, #4
 800337e:	4618      	mov	r0, r3
 8003380:	f7ff fe8a 	bl	8003098 <cliPrintf>
    cliPrintf("\r\n");
 8003384:	480a      	ldr	r0, [pc, #40]	; (80033b0 <cliShowList+0x64>)
 8003386:	f7ff fe87 	bl	8003098 <cliPrintf>
  for (int i=0; i<p_cli->cmd_count; i++)
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	3301      	adds	r3, #1
 800338e:	60fb      	str	r3, [r7, #12]
 8003390:	68bb      	ldr	r3, [r7, #8]
 8003392:	f8b3 332a 	ldrh.w	r3, [r3, #810]	; 0x32a
 8003396:	461a      	mov	r2, r3
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	4293      	cmp	r3, r2
 800339c:	dbe5      	blt.n	800336a <cliShowList+0x1e>
  }

  cliPrintf("-----------------------------\r\n");
 800339e:	4806      	ldr	r0, [pc, #24]	; (80033b8 <cliShowList+0x6c>)
 80033a0:	f7ff fe7a 	bl	8003098 <cliPrintf>
}
 80033a4:	bf00      	nop
 80033a6:	3710      	adds	r7, #16
 80033a8:	46bd      	mov	sp, r7
 80033aa:	bd80      	pop	{r7, pc}
 80033ac:	20000b0c 	.word	0x20000b0c
 80033b0:	08019324 	.word	0x08019324
 80033b4:	08019328 	.word	0x08019328
 80033b8:	08019348 	.word	0x08019348

080033bc <cliMemoryDump>:

void cliMemoryDump(cli_args_t *args)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b08c      	sub	sp, #48	; 0x30
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
  int idx, size = 16;
 80033c4:	2310      	movs	r3, #16
 80033c6:	62bb      	str	r3, [r7, #40]	; 0x28
  unsigned int *addr;
  int idx1, i;
  unsigned int *ascptr;
  unsigned char asc[4];

  int    argc = args->argc;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	881b      	ldrh	r3, [r3, #0]
 80033cc:	617b      	str	r3, [r7, #20]
  char **argv = args->argv;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	613b      	str	r3, [r7, #16]


  if(args->argc < 1)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	881b      	ldrh	r3, [r3, #0]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d103      	bne.n	80033e4 <cliMemoryDump+0x28>
  {
    cliPrintf(">> md addr [size] \n");
 80033dc:	4840      	ldr	r0, [pc, #256]	; (80034e0 <cliMemoryDump+0x124>)
 80033de:	f7ff fe5b 	bl	8003098 <cliPrintf>
 80033e2:	e07a      	b.n	80034da <cliMemoryDump+0x11e>
    return;
  }

  if(argc > 1)
 80033e4:	697b      	ldr	r3, [r7, #20]
 80033e6:	2b01      	cmp	r3, #1
 80033e8:	dd09      	ble.n	80033fe <cliMemoryDump+0x42>
  {
    size = (int)strtoul((const char * ) argv[1], (char **)NULL, (int) 0);
 80033ea:	693b      	ldr	r3, [r7, #16]
 80033ec:	3304      	adds	r3, #4
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	2200      	movs	r2, #0
 80033f2:	2100      	movs	r1, #0
 80033f4:	4618      	mov	r0, r3
 80033f6:	f013 fd23 	bl	8016e40 <strtoul>
 80033fa:	4603      	mov	r3, r0
 80033fc:	62bb      	str	r3, [r7, #40]	; 0x28
  }
  addr   = (unsigned int *)strtoul((const char * ) argv[0], (char **)NULL, (int) 0);
 80033fe:	693b      	ldr	r3, [r7, #16]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	2200      	movs	r2, #0
 8003404:	2100      	movs	r1, #0
 8003406:	4618      	mov	r0, r3
 8003408:	f013 fd1a 	bl	8016e40 <strtoul>
 800340c:	4603      	mov	r3, r0
 800340e:	627b      	str	r3, [r7, #36]	; 0x24
  ascptr = (unsigned int *)addr;
 8003410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003412:	61bb      	str	r3, [r7, #24]

  cliPrintf("\n   ");
 8003414:	4833      	ldr	r0, [pc, #204]	; (80034e4 <cliMemoryDump+0x128>)
 8003416:	f7ff fe3f 	bl	8003098 <cliPrintf>
  for (idx = 0; idx<size; idx++)
 800341a:	2300      	movs	r3, #0
 800341c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800341e:	e058      	b.n	80034d2 <cliMemoryDump+0x116>
  {
    if((idx%4) == 0)
 8003420:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003422:	f003 0303 	and.w	r3, r3, #3
 8003426:	2b00      	cmp	r3, #0
 8003428:	d104      	bne.n	8003434 <cliMemoryDump+0x78>
    {
      cliPrintf(" 0x%08X: ", (unsigned int)addr);
 800342a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800342c:	4619      	mov	r1, r3
 800342e:	482e      	ldr	r0, [pc, #184]	; (80034e8 <cliMemoryDump+0x12c>)
 8003430:	f7ff fe32 	bl	8003098 <cliPrintf>
    }
    cliPrintf(" 0x%08X", *(addr));
 8003434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4619      	mov	r1, r3
 800343a:	482c      	ldr	r0, [pc, #176]	; (80034ec <cliMemoryDump+0x130>)
 800343c:	f7ff fe2c 	bl	8003098 <cliPrintf>

    if ((idx%4) == 3)
 8003440:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003442:	425a      	negs	r2, r3
 8003444:	f003 0303 	and.w	r3, r3, #3
 8003448:	f002 0203 	and.w	r2, r2, #3
 800344c:	bf58      	it	pl
 800344e:	4253      	negpl	r3, r2
 8003450:	2b03      	cmp	r3, #3
 8003452:	d138      	bne.n	80034c6 <cliMemoryDump+0x10a>
    {
      cliPrintf ("  |");
 8003454:	4826      	ldr	r0, [pc, #152]	; (80034f0 <cliMemoryDump+0x134>)
 8003456:	f7ff fe1f 	bl	8003098 <cliPrintf>
      for (idx1= 0; idx1< 4; idx1++)
 800345a:	2300      	movs	r3, #0
 800345c:	623b      	str	r3, [r7, #32]
 800345e:	e02c      	b.n	80034ba <cliMemoryDump+0xfe>
 8003460:	69bb      	ldr	r3, [r7, #24]
 8003462:	681b      	ldr	r3, [r3, #0]
      {
        memcpy((char *)asc, (char *)ascptr, 4);
 8003464:	60fb      	str	r3, [r7, #12]
        for (i=0;i<4;i++)
 8003466:	2300      	movs	r3, #0
 8003468:	61fb      	str	r3, [r7, #28]
 800346a:	e01d      	b.n	80034a8 <cliMemoryDump+0xec>
        {
          if (asc[i] > 0x1f && asc[i] < 0x7f)
 800346c:	f107 020c 	add.w	r2, r7, #12
 8003470:	69fb      	ldr	r3, [r7, #28]
 8003472:	4413      	add	r3, r2
 8003474:	781b      	ldrb	r3, [r3, #0]
 8003476:	2b1f      	cmp	r3, #31
 8003478:	d910      	bls.n	800349c <cliMemoryDump+0xe0>
 800347a:	f107 020c 	add.w	r2, r7, #12
 800347e:	69fb      	ldr	r3, [r7, #28]
 8003480:	4413      	add	r3, r2
 8003482:	781b      	ldrb	r3, [r3, #0]
 8003484:	2b7e      	cmp	r3, #126	; 0x7e
 8003486:	d809      	bhi.n	800349c <cliMemoryDump+0xe0>
          {
            cliPrintf("%c", asc[i]);
 8003488:	f107 020c 	add.w	r2, r7, #12
 800348c:	69fb      	ldr	r3, [r7, #28]
 800348e:	4413      	add	r3, r2
 8003490:	781b      	ldrb	r3, [r3, #0]
 8003492:	4619      	mov	r1, r3
 8003494:	4817      	ldr	r0, [pc, #92]	; (80034f4 <cliMemoryDump+0x138>)
 8003496:	f7ff fdff 	bl	8003098 <cliPrintf>
 800349a:	e002      	b.n	80034a2 <cliMemoryDump+0xe6>
          }
          else
          {
            cliPrintf(".");
 800349c:	4816      	ldr	r0, [pc, #88]	; (80034f8 <cliMemoryDump+0x13c>)
 800349e:	f7ff fdfb 	bl	8003098 <cliPrintf>
        for (i=0;i<4;i++)
 80034a2:	69fb      	ldr	r3, [r7, #28]
 80034a4:	3301      	adds	r3, #1
 80034a6:	61fb      	str	r3, [r7, #28]
 80034a8:	69fb      	ldr	r3, [r7, #28]
 80034aa:	2b03      	cmp	r3, #3
 80034ac:	ddde      	ble.n	800346c <cliMemoryDump+0xb0>
          }
        }
        ascptr+=1;
 80034ae:	69bb      	ldr	r3, [r7, #24]
 80034b0:	3304      	adds	r3, #4
 80034b2:	61bb      	str	r3, [r7, #24]
      for (idx1= 0; idx1< 4; idx1++)
 80034b4:	6a3b      	ldr	r3, [r7, #32]
 80034b6:	3301      	adds	r3, #1
 80034b8:	623b      	str	r3, [r7, #32]
 80034ba:	6a3b      	ldr	r3, [r7, #32]
 80034bc:	2b03      	cmp	r3, #3
 80034be:	ddcf      	ble.n	8003460 <cliMemoryDump+0xa4>
      }
      cliPrintf("|\n   ");
 80034c0:	480e      	ldr	r0, [pc, #56]	; (80034fc <cliMemoryDump+0x140>)
 80034c2:	f7ff fde9 	bl	8003098 <cliPrintf>
    }
    addr++;
 80034c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034c8:	3304      	adds	r3, #4
 80034ca:	627b      	str	r3, [r7, #36]	; 0x24
  for (idx = 0; idx<size; idx++)
 80034cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034ce:	3301      	adds	r3, #1
 80034d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80034d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80034d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034d6:	429a      	cmp	r2, r3
 80034d8:	dba2      	blt.n	8003420 <cliMemoryDump+0x64>
  }
}
 80034da:	3730      	adds	r7, #48	; 0x30
 80034dc:	46bd      	mov	sp, r7
 80034de:	bd80      	pop	{r7, pc}
 80034e0:	08019368 	.word	0x08019368
 80034e4:	0801937c 	.word	0x0801937c
 80034e8:	08019384 	.word	0x08019384
 80034ec:	08019390 	.word	0x08019390
 80034f0:	08019398 	.word	0x08019398
 80034f4:	0801939c 	.word	0x0801939c
 80034f8:	080193a0 	.word	0x080193a0
 80034fc:	080193a4 	.word	0x080193a4

08003500 <fatfsInit>:
#ifdef _USE_HW_CLI
static void cliFatfs(cli_args_t *args);
#endif

bool fatfsInit(void)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b082      	sub	sp, #8
 8003504:	af00      	add	r7, sp, #0
	bool ret = false;
 8003506:	2300      	movs	r3, #0
 8003508:	71fb      	strb	r3, [r7, #7]

	if(FATFS_LinkDriver(&SD_Driver, SDPath) == 0)
 800350a:	490d      	ldr	r1, [pc, #52]	; (8003540 <fatfsInit+0x40>)
 800350c:	480d      	ldr	r0, [pc, #52]	; (8003544 <fatfsInit+0x44>)
 800350e:	f00f fec3 	bl	8013298 <FATFS_LinkDriver>
 8003512:	4603      	mov	r3, r0
 8003514:	2b00      	cmp	r3, #0
 8003516:	d10a      	bne.n	800352e <fatfsInit+0x2e>
	{
		if(f_mount(&SDFatFs, (TCHAR const*)SDPath, 0) == FR_OK)
 8003518:	2200      	movs	r2, #0
 800351a:	4909      	ldr	r1, [pc, #36]	; (8003540 <fatfsInit+0x40>)
 800351c:	480a      	ldr	r0, [pc, #40]	; (8003548 <fatfsInit+0x48>)
 800351e:	f00e fab5 	bl	8011a8c <f_mount>
 8003522:	4603      	mov	r3, r0
 8003524:	2b00      	cmp	r3, #0
 8003526:	d102      	bne.n	800352e <fatfsInit+0x2e>
		{
			is_init = true;
 8003528:	4b08      	ldr	r3, [pc, #32]	; (800354c <fatfsInit+0x4c>)
 800352a:	2201      	movs	r2, #1
 800352c:	701a      	strb	r2, [r3, #0]
		}
	}

	#ifdef _USE_HW_CLI
		cliAdd("fatfs", cliFatfs);
 800352e:	4908      	ldr	r1, [pc, #32]	; (8003550 <fatfsInit+0x50>)
 8003530:	4808      	ldr	r0, [pc, #32]	; (8003554 <fatfsInit+0x54>)
 8003532:	f7ff fec1 	bl	80032b8 <cliAdd>
	#endif

	return ret;
 8003536:	79fb      	ldrb	r3, [r7, #7]
}
 8003538:	4618      	mov	r0, r3
 800353a:	3708      	adds	r7, #8
 800353c:	46bd      	mov	sp, r7
 800353e:	bd80      	pop	{r7, pc}
 8003540:	200011c8 	.word	0x200011c8
 8003544:	08019910 	.word	0x08019910
 8003548:	20000f94 	.word	0x20000f94
 800354c:	20000f90 	.word	0x20000f90
 8003550:	0800362d 	.word	0x0800362d
 8003554:	080193b4 	.word	0x080193b4

08003558 <fatfsDir>:


#ifdef _USE_HW_CLI

FRESULT fatfsDir(char *path)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b0d6      	sub	sp, #344	; 0x158
 800355c:	af00      	add	r7, sp, #0
 800355e:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8003562:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8003566:	6018      	str	r0, [r3, #0]
	FRESULT res;
	DIR dir;
	FILINFO fno;

	res = f_opendir(&dir, path);
 8003568:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 800356c:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8003570:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8003574:	6819      	ldr	r1, [r3, #0]
 8003576:	4610      	mov	r0, r2
 8003578:	f00f fa01 	bl	801297e <f_opendir>
 800357c:	4603      	mov	r3, r0
 800357e:	f887 3157 	strb.w	r3, [r7, #343]	; 0x157
	if(res == FR_OK)
 8003582:	f897 3157 	ldrb.w	r3, [r7, #343]	; 0x157
 8003586:	2b00      	cmp	r3, #0
 8003588:	d144      	bne.n	8003614 <fatfsDir+0xbc>
	{
		for(;;)
		{
			res = f_readdir(&dir, &fno);
 800358a:	f107 0208 	add.w	r2, r7, #8
 800358e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8003592:	4611      	mov	r1, r2
 8003594:	4618      	mov	r0, r3
 8003596:	f00f fa9b 	bl	8012ad0 <f_readdir>
 800359a:	4603      	mov	r3, r0
 800359c:	f887 3157 	strb.w	r3, [r7, #343]	; 0x157
			if(res != FR_OK || fno.fname[0] == 0)
 80035a0:	f897 3157 	ldrb.w	r3, [r7, #343]	; 0x157
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d130      	bne.n	800360a <fatfsDir+0xb2>
 80035a8:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80035ac:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80035b0:	7d9b      	ldrb	r3, [r3, #22]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d029      	beq.n	800360a <fatfsDir+0xb2>
				break;

			if(fno.fattrib & AM_DIR)
 80035b6:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80035ba:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80035be:	7a1b      	ldrb	r3, [r3, #8]
 80035c0:	f003 0310 	and.w	r3, r3, #16
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d00c      	beq.n	80035e2 <fatfsDir+0x8a>
			{
				cliPrintf(" %s/%s \n", path, fno.fname);
 80035c8:	f107 0308 	add.w	r3, r7, #8
 80035cc:	f103 0216 	add.w	r2, r3, #22
 80035d0:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80035d4:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80035d8:	6819      	ldr	r1, [r3, #0]
 80035da:	4812      	ldr	r0, [pc, #72]	; (8003624 <fatfsDir+0xcc>)
 80035dc:	f7ff fd5c 	bl	8003098 <cliPrintf>
 80035e0:	e7d3      	b.n	800358a <fatfsDir+0x32>
			}
			else
			{
				cliPrintf(" %s/%32s \t%d bytes\n", path, fno.fname, (int)fno.fsize);
 80035e2:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80035e6:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4618      	mov	r0, r3
 80035ee:	f107 0308 	add.w	r3, r7, #8
 80035f2:	f103 0216 	add.w	r2, r3, #22
 80035f6:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80035fa:	f5a3 71aa 	sub.w	r1, r3, #340	; 0x154
 80035fe:	4603      	mov	r3, r0
 8003600:	6809      	ldr	r1, [r1, #0]
 8003602:	4809      	ldr	r0, [pc, #36]	; (8003628 <fatfsDir+0xd0>)
 8003604:	f7ff fd48 	bl	8003098 <cliPrintf>
			res = f_readdir(&dir, &fno);
 8003608:	e7bf      	b.n	800358a <fatfsDir+0x32>
			}
		}

		f_closedir(&dir);
 800360a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800360e:	4618      	mov	r0, r3
 8003610:	f00f fa38 	bl	8012a84 <f_closedir>
	}

	return res;
 8003614:	f897 3157 	ldrb.w	r3, [r7, #343]	; 0x157
}
 8003618:	4618      	mov	r0, r3
 800361a:	f507 77ac 	add.w	r7, r7, #344	; 0x158
 800361e:	46bd      	mov	sp, r7
 8003620:	bd80      	pop	{r7, pc}
 8003622:	bf00      	nop
 8003624:	080193bc 	.word	0x080193bc
 8003628:	080193c8 	.word	0x080193c8

0800362c <cliFatfs>:

void cliFatfs(cli_args_t *args)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	f5ad 7d1a 	sub.w	sp, sp, #616	; 0x268
 8003632:	af00      	add	r7, sp, #0
 8003634:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8003638:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 800363c:	6018      	str	r0, [r3, #0]
	bool ret = false;
 800363e:	2300      	movs	r3, #0
 8003640:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267

	if(args->argc == 1 && args->isStr(0, "info") == true)
 8003644:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8003648:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	881b      	ldrh	r3, [r3, #0]
 8003650:	2b01      	cmp	r3, #1
 8003652:	d14d      	bne.n	80036f0 <cliFatfs+0xc4>
 8003654:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8003658:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	695b      	ldr	r3, [r3, #20]
 8003660:	4990      	ldr	r1, [pc, #576]	; (80038a4 <cliFatfs+0x278>)
 8003662:	2000      	movs	r0, #0
 8003664:	4798      	blx	r3
 8003666:	4603      	mov	r3, r0
 8003668:	2b00      	cmp	r3, #0
 800366a:	d041      	beq.n	80036f0 <cliFatfs+0xc4>
	{
		cliPrintf("fatfs init \t: %d\n", is_init);
 800366c:	4b8e      	ldr	r3, [pc, #568]	; (80038a8 <cliFatfs+0x27c>)
 800366e:	781b      	ldrb	r3, [r3, #0]
 8003670:	4619      	mov	r1, r3
 8003672:	488e      	ldr	r0, [pc, #568]	; (80038ac <cliFatfs+0x280>)
 8003674:	f7ff fd10 	bl	8003098 <cliPrintf>

		if(is_init == true)
 8003678:	4b8b      	ldr	r3, [pc, #556]	; (80038a8 <cliFatfs+0x27c>)
 800367a:	781b      	ldrb	r3, [r3, #0]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d034      	beq.n	80036ea <cliFatfs+0xbe>
			FATFS *fs;
			DWORD fre_clust, fre_sect, tot_sect;
			FRESULT res;

			/* Get volume information and free clusters of drive 1 */
			res = f_getfree("", &fre_clust, &fs);
 8003680:	f507 7211 	add.w	r2, r7, #580	; 0x244
 8003684:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8003688:	4619      	mov	r1, r3
 800368a:	4889      	ldr	r0, [pc, #548]	; (80038b0 <cliFatfs+0x284>)
 800368c:	f00f fa6d 	bl	8012b6a <f_getfree>
 8003690:	4603      	mov	r3, r0
 8003692:	f887 325f 	strb.w	r3, [r7, #607]	; 0x25f
			if(res == FR_OK)
 8003696:	f897 325f 	ldrb.w	r3, [r7, #607]	; 0x25f
 800369a:	2b00      	cmp	r3, #0
 800369c:	d11f      	bne.n	80036de <cliFatfs+0xb2>
			{
				/* Get total sectors and free sectors */
				tot_sect = (fs->n_fatent - 2) * fs->csize;
 800369e:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 80036a2:	699b      	ldr	r3, [r3, #24]
 80036a4:	3b02      	subs	r3, #2
 80036a6:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 80036aa:	8952      	ldrh	r2, [r2, #10]
 80036ac:	fb02 f303 	mul.w	r3, r2, r3
 80036b0:	f8c7 3258 	str.w	r3, [r7, #600]	; 0x258
				fre_sect = fre_clust * fs->csize;
 80036b4:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 80036b8:	895b      	ldrh	r3, [r3, #10]
 80036ba:	461a      	mov	r2, r3
 80036bc:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 80036c0:	fb02 f303 	mul.w	r3, r2, r3
 80036c4:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254

				/* Print the free space (assuming 512 bytes/sector) */
				cliPrintf("%10lu KiB total drive space.\n%10lu KiB available.\n", tot_sect/2, fre_sect/2);
 80036c8:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 80036cc:	0859      	lsrs	r1, r3, #1
 80036ce:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 80036d2:	085b      	lsrs	r3, r3, #1
 80036d4:	461a      	mov	r2, r3
 80036d6:	4877      	ldr	r0, [pc, #476]	; (80038b4 <cliFatfs+0x288>)
 80036d8:	f7ff fcde 	bl	8003098 <cliPrintf>
 80036dc:	e005      	b.n	80036ea <cliFatfs+0xbe>
			}
			else
			{
				cliPrintf(" err : %d\n", res);
 80036de:	f897 325f 	ldrb.w	r3, [r7, #607]	; 0x25f
 80036e2:	4619      	mov	r1, r3
 80036e4:	4874      	ldr	r0, [pc, #464]	; (80038b8 <cliFatfs+0x28c>)
 80036e6:	f7ff fcd7 	bl	8003098 <cliPrintf>
			}
		}

		ret = true;
 80036ea:	2301      	movs	r3, #1
 80036ec:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
	}

	if(args->argc == 1 && args->isStr(0, "dir") == true)
 80036f0:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80036f4:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	881b      	ldrh	r3, [r3, #0]
 80036fc:	2b01      	cmp	r3, #1
 80036fe:	d11e      	bne.n	800373e <cliFatfs+0x112>
 8003700:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8003704:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	695b      	ldr	r3, [r3, #20]
 800370c:	496b      	ldr	r1, [pc, #428]	; (80038bc <cliFatfs+0x290>)
 800370e:	2000      	movs	r0, #0
 8003710:	4798      	blx	r3
 8003712:	4603      	mov	r3, r0
 8003714:	2b00      	cmp	r3, #0
 8003716:	d012      	beq.n	800373e <cliFatfs+0x112>
	{
		FRESULT res;

		res = fatfsDir("/");
 8003718:	4869      	ldr	r0, [pc, #420]	; (80038c0 <cliFatfs+0x294>)
 800371a:	f7ff ff1d 	bl	8003558 <fatfsDir>
 800371e:	4603      	mov	r3, r0
 8003720:	f887 3253 	strb.w	r3, [r7, #595]	; 0x253
		if(res != FR_OK)
 8003724:	f897 3253 	ldrb.w	r3, [r7, #595]	; 0x253
 8003728:	2b00      	cmp	r3, #0
 800372a:	d005      	beq.n	8003738 <cliFatfs+0x10c>
		{
			cliPrintf(" err : %d\n", res);
 800372c:	f897 3253 	ldrb.w	r3, [r7, #595]	; 0x253
 8003730:	4619      	mov	r1, r3
 8003732:	4861      	ldr	r0, [pc, #388]	; (80038b8 <cliFatfs+0x28c>)
 8003734:	f7ff fcb0 	bl	8003098 <cliPrintf>
		}

		ret = true;
 8003738:	2301      	movs	r3, #1
 800373a:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
	}

	if(args->argc == 1 && args->isStr(0, "test") == true)
 800373e:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8003742:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	881b      	ldrh	r3, [r3, #0]
 800374a:	2b01      	cmp	r3, #1
 800374c:	f040 8095 	bne.w	800387a <cliFatfs+0x24e>
 8003750:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8003754:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	695b      	ldr	r3, [r3, #20]
 800375c:	4959      	ldr	r1, [pc, #356]	; (80038c4 <cliFatfs+0x298>)
 800375e:	2000      	movs	r0, #0
 8003760:	4798      	blx	r3
 8003762:	4603      	mov	r3, r0
 8003764:	2b00      	cmp	r3, #0
 8003766:	f000 8088 	beq.w	800387a <cliFatfs+0x24e>
	{
		FRESULT fp_ret;
		FIL log_file;
		uint32_t pre_time;

		pre_time = millis();
 800376a:	f7fe f91f 	bl	80019ac <millis>
 800376e:	f8c7 024c 	str.w	r0, [r7, #588]	; 0x24c
		fp_ret = f_open(&log_file, "1.csv", FA_CREATE_ALWAYS | FA_WRITE | FA_READ);
 8003772:	f107 0308 	add.w	r3, r7, #8
 8003776:	220b      	movs	r2, #11
 8003778:	4953      	ldr	r1, [pc, #332]	; (80038c8 <cliFatfs+0x29c>)
 800377a:	4618      	mov	r0, r3
 800377c:	f00e f9cc 	bl	8011b18 <f_open>
 8003780:	4603      	mov	r3, r0
 8003782:	f887 324b 	strb.w	r3, [r7, #587]	; 0x24b
		if(fp_ret == FR_OK)
 8003786:	f897 324b 	ldrb.w	r3, [r7, #587]	; 0x24b
 800378a:	2b00      	cmp	r3, #0
 800378c:	d165      	bne.n	800385a <cliFatfs+0x22e>
		{
			f_printf(&log_file, "test1, ");
 800378e:	f107 0308 	add.w	r3, r7, #8
 8003792:	494e      	ldr	r1, [pc, #312]	; (80038cc <cliFatfs+0x2a0>)
 8003794:	4618      	mov	r0, r3
 8003796:	f00f fb15 	bl	8012dc4 <f_printf>
			f_printf(&log_file, "test2, ");
 800379a:	f107 0308 	add.w	r3, r7, #8
 800379e:	494c      	ldr	r1, [pc, #304]	; (80038d0 <cliFatfs+0x2a4>)
 80037a0:	4618      	mov	r0, r3
 80037a2:	f00f fb0f 	bl	8012dc4 <f_printf>
			f_printf(&log_file, "test3, ");
 80037a6:	f107 0308 	add.w	r3, r7, #8
 80037aa:	494a      	ldr	r1, [pc, #296]	; (80038d4 <cliFatfs+0x2a8>)
 80037ac:	4618      	mov	r0, r3
 80037ae:	f00f fb09 	bl	8012dc4 <f_printf>
			f_printf(&log_file, ", ");
 80037b2:	f107 0308 	add.w	r3, r7, #8
 80037b6:	4948      	ldr	r1, [pc, #288]	; (80038d8 <cliFatfs+0x2ac>)
 80037b8:	4618      	mov	r0, r3
 80037ba:	f00f fb03 	bl	8012dc4 <f_printf>
			f_printf(&log_file, "\n");
 80037be:	f107 0308 	add.w	r3, r7, #8
 80037c2:	4946      	ldr	r1, [pc, #280]	; (80038dc <cliFatfs+0x2b0>)
 80037c4:	4618      	mov	r0, r3
 80037c6:	f00f fafd 	bl	8012dc4 <f_printf>

			for(int i=0; i<8; i++)
 80037ca:	2300      	movs	r3, #0
 80037cc:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
 80037d0:	e00c      	b.n	80037ec <cliFatfs+0x1c0>
			{
				f_printf(&log_file, "%d \n", i);
 80037d2:	f107 0308 	add.w	r3, r7, #8
 80037d6:	f8d7 2260 	ldr.w	r2, [r7, #608]	; 0x260
 80037da:	4941      	ldr	r1, [pc, #260]	; (80038e0 <cliFatfs+0x2b4>)
 80037dc:	4618      	mov	r0, r3
 80037de:	f00f faf1 	bl	8012dc4 <f_printf>
			for(int i=0; i<8; i++)
 80037e2:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 80037e6:	3301      	adds	r3, #1
 80037e8:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
 80037ec:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 80037f0:	2b07      	cmp	r3, #7
 80037f2:	ddee      	ble.n	80037d2 <cliFatfs+0x1a6>
			}

			f_rewind(&log_file);
 80037f4:	f107 0308 	add.w	r3, r7, #8
 80037f8:	2100      	movs	r1, #0
 80037fa:	4618      	mov	r0, r3
 80037fc:	f00e feb6 	bl	801256c <f_lseek>


			UINT len;
			uint8_t data;

			while(cliKeepLoop())
 8003800:	e01c      	b.n	800383c <cliFatfs+0x210>
			{
				len = 0;
 8003802:	2300      	movs	r3, #0
 8003804:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
				fp_ret = f_read(&log_file, &data, 1, &len);
 8003808:	f507 730f 	add.w	r3, r7, #572	; 0x23c
 800380c:	f207 213b 	addw	r1, r7, #571	; 0x23b
 8003810:	f107 0008 	add.w	r0, r7, #8
 8003814:	2201      	movs	r2, #1
 8003816:	f00e fb4d 	bl	8011eb4 <f_read>
 800381a:	4603      	mov	r3, r0
 800381c:	f887 324b 	strb.w	r3, [r7, #587]	; 0x24b

				if(fp_ret != FR_OK)
 8003820:	f897 324b 	ldrb.w	r3, [r7, #587]	; 0x24b
 8003824:	2b00      	cmp	r3, #0
 8003826:	d10f      	bne.n	8003848 <cliFatfs+0x21c>
				{
					break;
				}

				if(len == 0)
 8003828:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 800382c:	2b00      	cmp	r3, #0
 800382e:	d00d      	beq.n	800384c <cliFatfs+0x220>
				{
					break;
				}

				cliPrintf("%c", data);
 8003830:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
 8003834:	4619      	mov	r1, r3
 8003836:	482b      	ldr	r0, [pc, #172]	; (80038e4 <cliFatfs+0x2b8>)
 8003838:	f7ff fc2e 	bl	8003098 <cliPrintf>
			while(cliKeepLoop())
 800383c:	f7ff fd26 	bl	800328c <cliKeepLoop>
 8003840:	4603      	mov	r3, r0
 8003842:	2b00      	cmp	r3, #0
 8003844:	d1dd      	bne.n	8003802 <cliFatfs+0x1d6>
 8003846:	e002      	b.n	800384e <cliFatfs+0x222>
					break;
 8003848:	bf00      	nop
 800384a:	e000      	b.n	800384e <cliFatfs+0x222>
					break;
 800384c:	bf00      	nop
			}

			f_close(&log_file);
 800384e:	f107 0308 	add.w	r3, r7, #8
 8003852:	4618      	mov	r0, r3
 8003854:	f00e fe60 	bl	8012518 <f_close>
 8003858:	e002      	b.n	8003860 <cliFatfs+0x234>
		}
		else
		{
			cliPrintf("f_open fail\r\n");
 800385a:	4823      	ldr	r0, [pc, #140]	; (80038e8 <cliFatfs+0x2bc>)
 800385c:	f7ff fc1c 	bl	8003098 <cliPrintf>
		}

		cliPrintf("%d ms\r\n", millis() - pre_time);
 8003860:	f7fe f8a4 	bl	80019ac <millis>
 8003864:	4602      	mov	r2, r0
 8003866:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800386a:	1ad3      	subs	r3, r2, r3
 800386c:	4619      	mov	r1, r3
 800386e:	481f      	ldr	r0, [pc, #124]	; (80038ec <cliFatfs+0x2c0>)
 8003870:	f7ff fc12 	bl	8003098 <cliPrintf>

		ret = true;
 8003874:	2301      	movs	r3, #1
 8003876:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
	}

	if(ret != true)
 800387a:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800387e:	f083 0301 	eor.w	r3, r3, #1
 8003882:	b2db      	uxtb	r3, r3
 8003884:	2b00      	cmp	r3, #0
 8003886:	d008      	beq.n	800389a <cliFatfs+0x26e>
	{
		cliPrintf("fatfs info\n");
 8003888:	4819      	ldr	r0, [pc, #100]	; (80038f0 <cliFatfs+0x2c4>)
 800388a:	f7ff fc05 	bl	8003098 <cliPrintf>
		cliPrintf("fatfs dir\n");
 800388e:	4819      	ldr	r0, [pc, #100]	; (80038f4 <cliFatfs+0x2c8>)
 8003890:	f7ff fc02 	bl	8003098 <cliPrintf>
		cliPrintf("fatfs test\n");
 8003894:	4818      	ldr	r0, [pc, #96]	; (80038f8 <cliFatfs+0x2cc>)
 8003896:	f7ff fbff 	bl	8003098 <cliPrintf>
	}
}
 800389a:	bf00      	nop
 800389c:	f507 771a 	add.w	r7, r7, #616	; 0x268
 80038a0:	46bd      	mov	sp, r7
 80038a2:	bd80      	pop	{r7, pc}
 80038a4:	080193dc 	.word	0x080193dc
 80038a8:	20000f90 	.word	0x20000f90
 80038ac:	080193e4 	.word	0x080193e4
 80038b0:	080193f8 	.word	0x080193f8
 80038b4:	080193fc 	.word	0x080193fc
 80038b8:	08019430 	.word	0x08019430
 80038bc:	0801943c 	.word	0x0801943c
 80038c0:	08019440 	.word	0x08019440
 80038c4:	08019444 	.word	0x08019444
 80038c8:	0801944c 	.word	0x0801944c
 80038cc:	08019454 	.word	0x08019454
 80038d0:	0801945c 	.word	0x0801945c
 80038d4:	08019464 	.word	0x08019464
 80038d8:	0801946c 	.word	0x0801946c
 80038dc:	08019470 	.word	0x08019470
 80038e0:	08019474 	.word	0x08019474
 80038e4:	0801947c 	.word	0x0801947c
 80038e8:	08019480 	.word	0x08019480
 80038ec:	08019490 	.word	0x08019490
 80038f0:	08019498 	.word	0x08019498
 80038f4:	080194a4 	.word	0x080194a4
 80038f8:	080194b0 	.word	0x080194b0

080038fc <gpioInit>:
static void cliGpio(cli_args_t *args);
#endif


bool gpioInit(void)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b082      	sub	sp, #8
 8003900:	af00      	add	r7, sp, #0
	bool ret = true;
 8003902:	2301      	movs	r3, #1
 8003904:	71fb      	strb	r3, [r7, #7]

#ifdef _USE_HW_CLI
	cliAdd("gpio", cliGpio);
 8003906:	4904      	ldr	r1, [pc, #16]	; (8003918 <gpioInit+0x1c>)
 8003908:	4804      	ldr	r0, [pc, #16]	; (800391c <gpioInit+0x20>)
 800390a:	f7ff fcd5 	bl	80032b8 <cliAdd>
#endif

	return ret;
 800390e:	79fb      	ldrb	r3, [r7, #7]
}
 8003910:	4618      	mov	r0, r3
 8003912:	3708      	adds	r7, #8
 8003914:	46bd      	mov	sp, r7
 8003916:	bd80      	pop	{r7, pc}
 8003918:	08003a35 	.word	0x08003a35
 800391c:	080194bc 	.word	0x080194bc

08003920 <gpioPinWrite>:

	return ret;
}

void gpioPinWrite(uint8_t ch, bool value)
{
 8003920:	b590      	push	{r4, r7, lr}
 8003922:	b083      	sub	sp, #12
 8003924:	af00      	add	r7, sp, #0
 8003926:	4603      	mov	r3, r0
 8003928:	460a      	mov	r2, r1
 800392a:	71fb      	strb	r3, [r7, #7]
 800392c:	4613      	mov	r3, r2
 800392e:	71bb      	strb	r3, [r7, #6]
	if(ch >= GPIO_MAX_CH)
 8003930:	79fb      	ldrb	r3, [r7, #7]
 8003932:	2b03      	cmp	r3, #3
 8003934:	d840      	bhi.n	80039b8 <gpioPinWrite+0x98>
	{
		return;
	}

	if(value)
 8003936:	79bb      	ldrb	r3, [r7, #6]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d01e      	beq.n	800397a <gpioPinWrite+0x5a>
	{
		HAL_GPIO_WritePin(gpio_tbl[ch].port, gpio_tbl[ch].pin, gpio_tbl[ch].on_state);
 800393c:	79fa      	ldrb	r2, [r7, #7]
 800393e:	4920      	ldr	r1, [pc, #128]	; (80039c0 <gpioPinWrite+0xa0>)
 8003940:	4613      	mov	r3, r2
 8003942:	005b      	lsls	r3, r3, #1
 8003944:	4413      	add	r3, r2
 8003946:	009b      	lsls	r3, r3, #2
 8003948:	440b      	add	r3, r1
 800394a:	6818      	ldr	r0, [r3, #0]
 800394c:	79fa      	ldrb	r2, [r7, #7]
 800394e:	491c      	ldr	r1, [pc, #112]	; (80039c0 <gpioPinWrite+0xa0>)
 8003950:	4613      	mov	r3, r2
 8003952:	005b      	lsls	r3, r3, #1
 8003954:	4413      	add	r3, r2
 8003956:	009b      	lsls	r3, r3, #2
 8003958:	440b      	add	r3, r1
 800395a:	3304      	adds	r3, #4
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	b299      	uxth	r1, r3
 8003960:	79fa      	ldrb	r2, [r7, #7]
 8003962:	4c17      	ldr	r4, [pc, #92]	; (80039c0 <gpioPinWrite+0xa0>)
 8003964:	4613      	mov	r3, r2
 8003966:	005b      	lsls	r3, r3, #1
 8003968:	4413      	add	r3, r2
 800396a:	009b      	lsls	r3, r3, #2
 800396c:	4423      	add	r3, r4
 800396e:	3309      	adds	r3, #9
 8003970:	781b      	ldrb	r3, [r3, #0]
 8003972:	461a      	mov	r2, r3
 8003974:	f003 fade 	bl	8006f34 <HAL_GPIO_WritePin>
 8003978:	e01f      	b.n	80039ba <gpioPinWrite+0x9a>
	}
	else
	{
		HAL_GPIO_WritePin(gpio_tbl[ch].port, gpio_tbl[ch].pin, gpio_tbl[ch].off_state);
 800397a:	79fa      	ldrb	r2, [r7, #7]
 800397c:	4910      	ldr	r1, [pc, #64]	; (80039c0 <gpioPinWrite+0xa0>)
 800397e:	4613      	mov	r3, r2
 8003980:	005b      	lsls	r3, r3, #1
 8003982:	4413      	add	r3, r2
 8003984:	009b      	lsls	r3, r3, #2
 8003986:	440b      	add	r3, r1
 8003988:	6818      	ldr	r0, [r3, #0]
 800398a:	79fa      	ldrb	r2, [r7, #7]
 800398c:	490c      	ldr	r1, [pc, #48]	; (80039c0 <gpioPinWrite+0xa0>)
 800398e:	4613      	mov	r3, r2
 8003990:	005b      	lsls	r3, r3, #1
 8003992:	4413      	add	r3, r2
 8003994:	009b      	lsls	r3, r3, #2
 8003996:	440b      	add	r3, r1
 8003998:	3304      	adds	r3, #4
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	b299      	uxth	r1, r3
 800399e:	79fa      	ldrb	r2, [r7, #7]
 80039a0:	4c07      	ldr	r4, [pc, #28]	; (80039c0 <gpioPinWrite+0xa0>)
 80039a2:	4613      	mov	r3, r2
 80039a4:	005b      	lsls	r3, r3, #1
 80039a6:	4413      	add	r3, r2
 80039a8:	009b      	lsls	r3, r3, #2
 80039aa:	4423      	add	r3, r4
 80039ac:	330a      	adds	r3, #10
 80039ae:	781b      	ldrb	r3, [r3, #0]
 80039b0:	461a      	mov	r2, r3
 80039b2:	f003 fabf 	bl	8006f34 <HAL_GPIO_WritePin>
 80039b6:	e000      	b.n	80039ba <gpioPinWrite+0x9a>
		return;
 80039b8:	bf00      	nop
	}
}
 80039ba:	370c      	adds	r7, #12
 80039bc:	46bd      	mov	sp, r7
 80039be:	bd90      	pop	{r4, r7, pc}
 80039c0:	08025914 	.word	0x08025914

080039c4 <gpioPinRead>:

bool gpioPinRead(uint8_t ch)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b084      	sub	sp, #16
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	4603      	mov	r3, r0
 80039cc:	71fb      	strb	r3, [r7, #7]
	bool ret = false;
 80039ce:	2300      	movs	r3, #0
 80039d0:	73fb      	strb	r3, [r7, #15]

	if(ch >= GPIO_MAX_CH)
 80039d2:	79fb      	ldrb	r3, [r7, #7]
 80039d4:	2b03      	cmp	r3, #3
 80039d6:	d901      	bls.n	80039dc <gpioPinRead+0x18>
	{
		return false;
 80039d8:	2300      	movs	r3, #0
 80039da:	e024      	b.n	8003a26 <gpioPinRead+0x62>
	}

	if(HAL_GPIO_ReadPin(gpio_tbl[ch].port, gpio_tbl[ch].pin) == gpio_tbl[ch].on_state)
 80039dc:	79fa      	ldrb	r2, [r7, #7]
 80039de:	4914      	ldr	r1, [pc, #80]	; (8003a30 <gpioPinRead+0x6c>)
 80039e0:	4613      	mov	r3, r2
 80039e2:	005b      	lsls	r3, r3, #1
 80039e4:	4413      	add	r3, r2
 80039e6:	009b      	lsls	r3, r3, #2
 80039e8:	440b      	add	r3, r1
 80039ea:	6818      	ldr	r0, [r3, #0]
 80039ec:	79fa      	ldrb	r2, [r7, #7]
 80039ee:	4910      	ldr	r1, [pc, #64]	; (8003a30 <gpioPinRead+0x6c>)
 80039f0:	4613      	mov	r3, r2
 80039f2:	005b      	lsls	r3, r3, #1
 80039f4:	4413      	add	r3, r2
 80039f6:	009b      	lsls	r3, r3, #2
 80039f8:	440b      	add	r3, r1
 80039fa:	3304      	adds	r3, #4
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	b29b      	uxth	r3, r3
 8003a00:	4619      	mov	r1, r3
 8003a02:	f003 fa7f 	bl	8006f04 <HAL_GPIO_ReadPin>
 8003a06:	4603      	mov	r3, r0
 8003a08:	4618      	mov	r0, r3
 8003a0a:	79fa      	ldrb	r2, [r7, #7]
 8003a0c:	4908      	ldr	r1, [pc, #32]	; (8003a30 <gpioPinRead+0x6c>)
 8003a0e:	4613      	mov	r3, r2
 8003a10:	005b      	lsls	r3, r3, #1
 8003a12:	4413      	add	r3, r2
 8003a14:	009b      	lsls	r3, r3, #2
 8003a16:	440b      	add	r3, r1
 8003a18:	3309      	adds	r3, #9
 8003a1a:	781b      	ldrb	r3, [r3, #0]
 8003a1c:	4298      	cmp	r0, r3
 8003a1e:	d101      	bne.n	8003a24 <gpioPinRead+0x60>
	{
		ret = true;
 8003a20:	2301      	movs	r3, #1
 8003a22:	73fb      	strb	r3, [r7, #15]
	}

	return ret;
 8003a24:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a26:	4618      	mov	r0, r3
 8003a28:	3710      	adds	r7, #16
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	bd80      	pop	{r7, pc}
 8003a2e:	bf00      	nop
 8003a30:	08025914 	.word	0x08025914

08003a34 <cliGpio>:


#ifdef _USE_HW_CLI

void cliGpio(cli_args_t *args)
{
 8003a34:	b590      	push	{r4, r7, lr}
 8003a36:	b087      	sub	sp, #28
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
	bool ret = false;
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	75fb      	strb	r3, [r7, #23]

	if(args->argc == 1 && args->isStr(0, "show") == true)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	881b      	ldrh	r3, [r3, #0]
 8003a44:	2b01      	cmp	r3, #1
 8003a46:	d129      	bne.n	8003a9c <cliGpio+0x68>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	695b      	ldr	r3, [r3, #20]
 8003a4c:	4948      	ldr	r1, [pc, #288]	; (8003b70 <cliGpio+0x13c>)
 8003a4e:	2000      	movs	r0, #0
 8003a50:	4798      	blx	r3
 8003a52:	4603      	mov	r3, r0
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d021      	beq.n	8003a9c <cliGpio+0x68>
	{
		while(cliKeepLoop())
 8003a58:	e019      	b.n	8003a8e <cliGpio+0x5a>
		{
			for(int i=0; i<GPIO_MAX_CH; i++)
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	613b      	str	r3, [r7, #16]
 8003a5e:	e00c      	b.n	8003a7a <cliGpio+0x46>
			{
				cliPrintf("%d", gpioPinRead(i));
 8003a60:	693b      	ldr	r3, [r7, #16]
 8003a62:	b2db      	uxtb	r3, r3
 8003a64:	4618      	mov	r0, r3
 8003a66:	f7ff ffad 	bl	80039c4 <gpioPinRead>
 8003a6a:	4603      	mov	r3, r0
 8003a6c:	4619      	mov	r1, r3
 8003a6e:	4841      	ldr	r0, [pc, #260]	; (8003b74 <cliGpio+0x140>)
 8003a70:	f7ff fb12 	bl	8003098 <cliPrintf>
			for(int i=0; i<GPIO_MAX_CH; i++)
 8003a74:	693b      	ldr	r3, [r7, #16]
 8003a76:	3301      	adds	r3, #1
 8003a78:	613b      	str	r3, [r7, #16]
 8003a7a:	693b      	ldr	r3, [r7, #16]
 8003a7c:	2b03      	cmp	r3, #3
 8003a7e:	ddef      	ble.n	8003a60 <cliGpio+0x2c>
			}
			cliPrintf("\n");
 8003a80:	483d      	ldr	r0, [pc, #244]	; (8003b78 <cliGpio+0x144>)
 8003a82:	f7ff fb09 	bl	8003098 <cliPrintf>
			delay(300);
 8003a86:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8003a8a:	f7fd ff84 	bl	8001996 <delay>
		while(cliKeepLoop())
 8003a8e:	f7ff fbfd 	bl	800328c <cliKeepLoop>
 8003a92:	4603      	mov	r3, r0
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d1e0      	bne.n	8003a5a <cliGpio+0x26>
		}

		ret = true;
 8003a98:	2301      	movs	r3, #1
 8003a9a:	75fb      	strb	r3, [r7, #23]
	}

	if(args->argc == 2 && args->isStr(0, "read") == true)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	881b      	ldrh	r3, [r3, #0]
 8003aa0:	2b02      	cmp	r3, #2
 8003aa2:	d124      	bne.n	8003aee <cliGpio+0xba>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	695b      	ldr	r3, [r3, #20]
 8003aa8:	4934      	ldr	r1, [pc, #208]	; (8003b7c <cliGpio+0x148>)
 8003aaa:	2000      	movs	r0, #0
 8003aac:	4798      	blx	r3
 8003aae:	4603      	mov	r3, r0
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d01c      	beq.n	8003aee <cliGpio+0xba>
	{
		uint8_t ch;

		ch = (uint8_t)args->getData(1);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	689b      	ldr	r3, [r3, #8]
 8003ab8:	2001      	movs	r0, #1
 8003aba:	4798      	blx	r3
 8003abc:	4603      	mov	r3, r0
 8003abe:	73fb      	strb	r3, [r7, #15]

		while(cliKeepLoop())
 8003ac0:	e00e      	b.n	8003ae0 <cliGpio+0xac>
		{
			cliPrintf("gpio read %d : %d\n", ch, gpioPinRead(ch));
 8003ac2:	7bfc      	ldrb	r4, [r7, #15]
 8003ac4:	7bfb      	ldrb	r3, [r7, #15]
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	f7ff ff7c 	bl	80039c4 <gpioPinRead>
 8003acc:	4603      	mov	r3, r0
 8003ace:	461a      	mov	r2, r3
 8003ad0:	4621      	mov	r1, r4
 8003ad2:	482b      	ldr	r0, [pc, #172]	; (8003b80 <cliGpio+0x14c>)
 8003ad4:	f7ff fae0 	bl	8003098 <cliPrintf>
			delay(300);
 8003ad8:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8003adc:	f7fd ff5b 	bl	8001996 <delay>
		while(cliKeepLoop())
 8003ae0:	f7ff fbd4 	bl	800328c <cliKeepLoop>
 8003ae4:	4603      	mov	r3, r0
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d1eb      	bne.n	8003ac2 <cliGpio+0x8e>
		}

		ret = true;
 8003aea:	2301      	movs	r3, #1
 8003aec:	75fb      	strb	r3, [r7, #23]
	}

	if(args->argc == 3 && args->isStr(0, "write") == true)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	881b      	ldrh	r3, [r3, #0]
 8003af2:	2b03      	cmp	r3, #3
 8003af4:	d126      	bne.n	8003b44 <cliGpio+0x110>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	695b      	ldr	r3, [r3, #20]
 8003afa:	4922      	ldr	r1, [pc, #136]	; (8003b84 <cliGpio+0x150>)
 8003afc:	2000      	movs	r0, #0
 8003afe:	4798      	blx	r3
 8003b00:	4603      	mov	r3, r0
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d01e      	beq.n	8003b44 <cliGpio+0x110>
	{
		uint8_t ch;
		uint8_t data;

		ch = (uint8_t)args->getData(1);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	689b      	ldr	r3, [r3, #8]
 8003b0a:	2001      	movs	r0, #1
 8003b0c:	4798      	blx	r3
 8003b0e:	4603      	mov	r3, r0
 8003b10:	73bb      	strb	r3, [r7, #14]
		data = (uint8_t)args->getData(2);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	689b      	ldr	r3, [r3, #8]
 8003b16:	2002      	movs	r0, #2
 8003b18:	4798      	blx	r3
 8003b1a:	4603      	mov	r3, r0
 8003b1c:	737b      	strb	r3, [r7, #13]

		gpioPinWrite(ch, data);
 8003b1e:	7b7b      	ldrb	r3, [r7, #13]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	bf14      	ite	ne
 8003b24:	2301      	movne	r3, #1
 8003b26:	2300      	moveq	r3, #0
 8003b28:	b2da      	uxtb	r2, r3
 8003b2a:	7bbb      	ldrb	r3, [r7, #14]
 8003b2c:	4611      	mov	r1, r2
 8003b2e:	4618      	mov	r0, r3
 8003b30:	f7ff fef6 	bl	8003920 <gpioPinWrite>

		cliPrintf("gpio write %d : %d\n", ch, data);
 8003b34:	7bbb      	ldrb	r3, [r7, #14]
 8003b36:	7b7a      	ldrb	r2, [r7, #13]
 8003b38:	4619      	mov	r1, r3
 8003b3a:	4813      	ldr	r0, [pc, #76]	; (8003b88 <cliGpio+0x154>)
 8003b3c:	f7ff faac 	bl	8003098 <cliPrintf>

		ret = true;
 8003b40:	2301      	movs	r3, #1
 8003b42:	75fb      	strb	r3, [r7, #23]
	}

	if(ret != true)
 8003b44:	7dfb      	ldrb	r3, [r7, #23]
 8003b46:	f083 0301 	eor.w	r3, r3, #1
 8003b4a:	b2db      	uxtb	r3, r3
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d00a      	beq.n	8003b66 <cliGpio+0x132>
	{
		cliPrintf("gpio show\n");
 8003b50:	480e      	ldr	r0, [pc, #56]	; (8003b8c <cliGpio+0x158>)
 8003b52:	f7ff faa1 	bl	8003098 <cliPrintf>
		cliPrintf("gpio read ch[0~%d]\n", GPIO_MAX_CH-1);
 8003b56:	2103      	movs	r1, #3
 8003b58:	480d      	ldr	r0, [pc, #52]	; (8003b90 <cliGpio+0x15c>)
 8003b5a:	f7ff fa9d 	bl	8003098 <cliPrintf>
		cliPrintf("gpio write ch[0~%d]\n", GPIO_MAX_CH-1);
 8003b5e:	2103      	movs	r1, #3
 8003b60:	480c      	ldr	r0, [pc, #48]	; (8003b94 <cliGpio+0x160>)
 8003b62:	f7ff fa99 	bl	8003098 <cliPrintf>
	}
}
 8003b66:	bf00      	nop
 8003b68:	371c      	adds	r7, #28
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bd90      	pop	{r4, r7, pc}
 8003b6e:	bf00      	nop
 8003b70:	080194c4 	.word	0x080194c4
 8003b74:	080194cc 	.word	0x080194cc
 8003b78:	080194d0 	.word	0x080194d0
 8003b7c:	080194d4 	.word	0x080194d4
 8003b80:	080194dc 	.word	0x080194dc
 8003b84:	080194f0 	.word	0x080194f0
 8003b88:	080194f8 	.word	0x080194f8
 8003b8c:	0801950c 	.word	0x0801950c
 8003b90:	08019518 	.word	0x08019518
 8003b94:	0801952c 	.word	0x0801952c

08003b98 <i2cInit>:

static void delayUs(uint32_t us);


bool i2cInit(void)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b082      	sub	sp, #8
 8003b9c:	af00      	add	r7, sp, #0
	uint32_t i;

	for(i=0; i<I2C_MAX_CH; i++)
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	607b      	str	r3, [r7, #4]
 8003ba2:	e011      	b.n	8003bc8 <i2cInit+0x30>
	{
		i2c_timeout[i] = 10;
 8003ba4:	4a10      	ldr	r2, [pc, #64]	; (8003be8 <i2cInit+0x50>)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	210a      	movs	r1, #10
 8003baa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		i2c_errcount[i] = 0;
 8003bae:	4a0f      	ldr	r2, [pc, #60]	; (8003bec <i2cInit+0x54>)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2100      	movs	r1, #0
 8003bb4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		is_begin[i] = false;
 8003bb8:	4a0d      	ldr	r2, [pc, #52]	; (8003bf0 <i2cInit+0x58>)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	4413      	add	r3, r2
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	701a      	strb	r2, [r3, #0]
	for(i=0; i<I2C_MAX_CH; i++)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	3301      	adds	r3, #1
 8003bc6:	607b      	str	r3, [r7, #4]
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d0ea      	beq.n	8003ba4 <i2cInit+0xc>
	}

#ifdef _USE_HW_CLI
	cliAdd("i2c", cliI2C);
 8003bce:	4909      	ldr	r1, [pc, #36]	; (8003bf4 <i2cInit+0x5c>)
 8003bd0:	4809      	ldr	r0, [pc, #36]	; (8003bf8 <i2cInit+0x60>)
 8003bd2:	f7ff fb71 	bl	80032b8 <cliAdd>
#endif

	is_init = true;
 8003bd6:	4b09      	ldr	r3, [pc, #36]	; (8003bfc <i2cInit+0x64>)
 8003bd8:	2201      	movs	r2, #1
 8003bda:	701a      	strb	r2, [r3, #0]
	return true;
 8003bdc:	2301      	movs	r3, #1
}
 8003bde:	4618      	mov	r0, r3
 8003be0:	3708      	adds	r7, #8
 8003be2:	46bd      	mov	sp, r7
 8003be4:	bd80      	pop	{r7, pc}
 8003be6:	bf00      	nop
 8003be8:	200011cc 	.word	0x200011cc
 8003bec:	200011d0 	.word	0x200011d0
 8003bf0:	200011dc 	.word	0x200011dc
 8003bf4:	0800410d 	.word	0x0800410d
 8003bf8:	08019544 	.word	0x08019544
 8003bfc:	200011d8 	.word	0x200011d8

08003c00 <i2cBegin>:
{
	return is_init;
}

bool i2cBegin(uint8_t ch, uint32_t freq_khz)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b084      	sub	sp, #16
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	4603      	mov	r3, r0
 8003c08:	6039      	str	r1, [r7, #0]
 8003c0a:	71fb      	strb	r3, [r7, #7]
	bool ret = false;
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	73fb      	strb	r3, [r7, #15]

	I2C_HandleTypeDef *p_handle = i2c_tbl[ch].p_hi2c;
 8003c10:	79fa      	ldrb	r2, [r7, #7]
 8003c12:	4929      	ldr	r1, [pc, #164]	; (8003cb8 <i2cBegin+0xb8>)
 8003c14:	4613      	mov	r3, r2
 8003c16:	009b      	lsls	r3, r3, #2
 8003c18:	4413      	add	r3, r2
 8003c1a:	009b      	lsls	r3, r3, #2
 8003c1c:	440b      	add	r3, r1
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	60bb      	str	r3, [r7, #8]

	if(ch>=I2C_MAX_CH)
 8003c22:	79fb      	ldrb	r3, [r7, #7]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d001      	beq.n	8003c2c <i2cBegin+0x2c>
	{
		return false;
 8003c28:	2300      	movs	r3, #0
 8003c2a:	e041      	b.n	8003cb0 <i2cBegin+0xb0>
	}

	switch(ch)
 8003c2c:	79fb      	ldrb	r3, [r7, #7]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d13d      	bne.n	8003cae <i2cBegin+0xae>
	{
		case _DEF_I2C1:
			i2c_freq[ch] = freq_khz;
 8003c32:	79fb      	ldrb	r3, [r7, #7]
 8003c34:	4921      	ldr	r1, [pc, #132]	; (8003cbc <i2cBegin+0xbc>)
 8003c36:	683a      	ldr	r2, [r7, #0]
 8003c38:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

			hi2c2.Instance = I2C2;
 8003c3c:	4b20      	ldr	r3, [pc, #128]	; (8003cc0 <i2cBegin+0xc0>)
 8003c3e:	4a21      	ldr	r2, [pc, #132]	; (8003cc4 <i2cBegin+0xc4>)
 8003c40:	601a      	str	r2, [r3, #0]
			hi2c2.Init.ClockSpeed = freq_khz * 1000;
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003c48:	fb02 f303 	mul.w	r3, r2, r3
 8003c4c:	4a1c      	ldr	r2, [pc, #112]	; (8003cc0 <i2cBegin+0xc0>)
 8003c4e:	6053      	str	r3, [r2, #4]
			hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003c50:	4b1b      	ldr	r3, [pc, #108]	; (8003cc0 <i2cBegin+0xc0>)
 8003c52:	2200      	movs	r2, #0
 8003c54:	609a      	str	r2, [r3, #8]
			hi2c2.Init.OwnAddress1 = 0;
 8003c56:	4b1a      	ldr	r3, [pc, #104]	; (8003cc0 <i2cBegin+0xc0>)
 8003c58:	2200      	movs	r2, #0
 8003c5a:	60da      	str	r2, [r3, #12]
			hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003c5c:	4b18      	ldr	r3, [pc, #96]	; (8003cc0 <i2cBegin+0xc0>)
 8003c5e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003c62:	611a      	str	r2, [r3, #16]
			hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003c64:	4b16      	ldr	r3, [pc, #88]	; (8003cc0 <i2cBegin+0xc0>)
 8003c66:	2200      	movs	r2, #0
 8003c68:	615a      	str	r2, [r3, #20]
			hi2c2.Init.OwnAddress2 = 0;
 8003c6a:	4b15      	ldr	r3, [pc, #84]	; (8003cc0 <i2cBegin+0xc0>)
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	619a      	str	r2, [r3, #24]
			hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003c70:	4b13      	ldr	r3, [pc, #76]	; (8003cc0 <i2cBegin+0xc0>)
 8003c72:	2200      	movs	r2, #0
 8003c74:	61da      	str	r2, [r3, #28]
			hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003c76:	4b12      	ldr	r3, [pc, #72]	; (8003cc0 <i2cBegin+0xc0>)
 8003c78:	2200      	movs	r2, #0
 8003c7a:	621a      	str	r2, [r3, #32]

			i2cReset(ch);
 8003c7c:	79fb      	ldrb	r3, [r7, #7]
 8003c7e:	4618      	mov	r0, r3
 8003c80:	f000 f824 	bl	8003ccc <i2cReset>

			HAL_I2C_DeInit(p_handle);
 8003c84:	68b8      	ldr	r0, [r7, #8]
 8003c86:	f003 facd 	bl	8007224 <HAL_I2C_DeInit>
			if(HAL_I2C_Init(p_handle) != HAL_OK)
 8003c8a:	68b8      	ldr	r0, [r7, #8]
 8003c8c:	f003 f986 	bl	8006f9c <HAL_I2C_Init>
			{

			}

      /* Enable the Analog I2C Filter */
      HAL_I2CEx_ConfigAnalogFilter(p_handle,I2C_ANALOGFILTER_ENABLE);
 8003c90:	2100      	movs	r1, #0
 8003c92:	68b8      	ldr	r0, [r7, #8]
 8003c94:	f005 ffe1 	bl	8009c5a <HAL_I2CEx_ConfigAnalogFilter>

      /* Configure Digital filter */
      HAL_I2CEx_ConfigDigitalFilter(p_handle, 0);
 8003c98:	2100      	movs	r1, #0
 8003c9a:	68b8      	ldr	r0, [r7, #8]
 8003c9c:	f006 f819 	bl	8009cd2 <HAL_I2CEx_ConfigDigitalFilter>

      ret = true;
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	73fb      	strb	r3, [r7, #15]
      is_begin[ch] = true;
 8003ca4:	79fb      	ldrb	r3, [r7, #7]
 8003ca6:	4a08      	ldr	r2, [pc, #32]	; (8003cc8 <i2cBegin+0xc8>)
 8003ca8:	2101      	movs	r1, #1
 8003caa:	54d1      	strb	r1, [r2, r3]
      break;
 8003cac:	bf00      	nop
	}

	return ret;
 8003cae:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	3710      	adds	r7, #16
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	bd80      	pop	{r7, pc}
 8003cb8:	20000070 	.word	0x20000070
 8003cbc:	200011d4 	.word	0x200011d4
 8003cc0:	200011e0 	.word	0x200011e0
 8003cc4:	40005800 	.word	0x40005800
 8003cc8:	200011dc 	.word	0x200011dc

08003ccc <i2cReset>:
{
	return is_begin[ch];
}

void i2cReset(uint8_t ch)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b08a      	sub	sp, #40	; 0x28
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	4603      	mov	r3, r0
 8003cd4:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStruct;
  i2c_tbl_t *p_pin = &i2c_tbl[ch];
 8003cd6:	79fa      	ldrb	r2, [r7, #7]
 8003cd8:	4613      	mov	r3, r2
 8003cda:	009b      	lsls	r3, r3, #2
 8003cdc:	4413      	add	r3, r2
 8003cde:	009b      	lsls	r3, r3, #2
 8003ce0:	4a44      	ldr	r2, [pc, #272]	; (8003df4 <i2cReset+0x128>)
 8003ce2:	4413      	add	r3, r2
 8003ce4:	623b      	str	r3, [r7, #32]


  GPIO_InitStruct.Pin       = p_pin->scl_pin;
 8003ce6:	6a3b      	ldr	r3, [r7, #32]
 8003ce8:	689b      	ldr	r3, [r3, #8]
 8003cea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode      = GPIO_MODE_OUTPUT_OD;
 8003cec:	2311      	movs	r3, #17
 8003cee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed     = GPIO_SPEED_HIGH;
 8003cf4:	2303      	movs	r3, #3
 8003cf6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(p_pin->scl_port, &GPIO_InitStruct);
 8003cf8:	6a3b      	ldr	r3, [r7, #32]
 8003cfa:	685b      	ldr	r3, [r3, #4]
 8003cfc:	f107 020c 	add.w	r2, r7, #12
 8003d00:	4611      	mov	r1, r2
 8003d02:	4618      	mov	r0, r3
 8003d04:	f002 fe96 	bl	8006a34 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin       = p_pin->sda_pin;
 8003d08:	6a3b      	ldr	r3, [r7, #32]
 8003d0a:	691b      	ldr	r3, [r3, #16]
 8003d0c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode      = GPIO_MODE_OUTPUT_OD;
 8003d0e:	2311      	movs	r3, #17
 8003d10:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
 8003d12:	2300      	movs	r3, #0
 8003d14:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(p_pin->sda_port, &GPIO_InitStruct);
 8003d16:	6a3b      	ldr	r3, [r7, #32]
 8003d18:	68db      	ldr	r3, [r3, #12]
 8003d1a:	f107 020c 	add.w	r2, r7, #12
 8003d1e:	4611      	mov	r1, r2
 8003d20:	4618      	mov	r0, r3
 8003d22:	f002 fe87 	bl	8006a34 <HAL_GPIO_Init>
    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_8);
  }
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
  */

  HAL_GPIO_WritePin(p_pin->scl_port, p_pin->scl_pin, GPIO_PIN_SET);
 8003d26:	6a3b      	ldr	r3, [r7, #32]
 8003d28:	6858      	ldr	r0, [r3, #4]
 8003d2a:	6a3b      	ldr	r3, [r7, #32]
 8003d2c:	689b      	ldr	r3, [r3, #8]
 8003d2e:	b29b      	uxth	r3, r3
 8003d30:	2201      	movs	r2, #1
 8003d32:	4619      	mov	r1, r3
 8003d34:	f003 f8fe 	bl	8006f34 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(p_pin->sda_port, p_pin->sda_pin, GPIO_PIN_SET);
 8003d38:	6a3b      	ldr	r3, [r7, #32]
 8003d3a:	68d8      	ldr	r0, [r3, #12]
 8003d3c:	6a3b      	ldr	r3, [r7, #32]
 8003d3e:	691b      	ldr	r3, [r3, #16]
 8003d40:	b29b      	uxth	r3, r3
 8003d42:	2201      	movs	r2, #1
 8003d44:	4619      	mov	r1, r3
 8003d46:	f003 f8f5 	bl	8006f34 <HAL_GPIO_WritePin>
  delayUs(5);
 8003d4a:	2005      	movs	r0, #5
 8003d4c:	f000 f92a 	bl	8003fa4 <delayUs>

  for (int i = 0; i < 9; i++)
 8003d50:	2300      	movs	r3, #0
 8003d52:	627b      	str	r3, [r7, #36]	; 0x24
 8003d54:	e01a      	b.n	8003d8c <i2cReset+0xc0>
  {

    HAL_GPIO_WritePin(p_pin->scl_port, p_pin->scl_pin, GPIO_PIN_RESET);
 8003d56:	6a3b      	ldr	r3, [r7, #32]
 8003d58:	6858      	ldr	r0, [r3, #4]
 8003d5a:	6a3b      	ldr	r3, [r7, #32]
 8003d5c:	689b      	ldr	r3, [r3, #8]
 8003d5e:	b29b      	uxth	r3, r3
 8003d60:	2200      	movs	r2, #0
 8003d62:	4619      	mov	r1, r3
 8003d64:	f003 f8e6 	bl	8006f34 <HAL_GPIO_WritePin>
    delayUs(5);
 8003d68:	2005      	movs	r0, #5
 8003d6a:	f000 f91b 	bl	8003fa4 <delayUs>
    HAL_GPIO_WritePin(p_pin->scl_port, p_pin->scl_pin, GPIO_PIN_SET);
 8003d6e:	6a3b      	ldr	r3, [r7, #32]
 8003d70:	6858      	ldr	r0, [r3, #4]
 8003d72:	6a3b      	ldr	r3, [r7, #32]
 8003d74:	689b      	ldr	r3, [r3, #8]
 8003d76:	b29b      	uxth	r3, r3
 8003d78:	2201      	movs	r2, #1
 8003d7a:	4619      	mov	r1, r3
 8003d7c:	f003 f8da 	bl	8006f34 <HAL_GPIO_WritePin>
    delayUs(5);
 8003d80:	2005      	movs	r0, #5
 8003d82:	f000 f90f 	bl	8003fa4 <delayUs>
  for (int i = 0; i < 9; i++)
 8003d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d88:	3301      	adds	r3, #1
 8003d8a:	627b      	str	r3, [r7, #36]	; 0x24
 8003d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d8e:	2b08      	cmp	r3, #8
 8003d90:	dde1      	ble.n	8003d56 <i2cReset+0x8a>
  }

  HAL_GPIO_WritePin(p_pin->scl_port, p_pin->scl_pin, GPIO_PIN_RESET);
 8003d92:	6a3b      	ldr	r3, [r7, #32]
 8003d94:	6858      	ldr	r0, [r3, #4]
 8003d96:	6a3b      	ldr	r3, [r7, #32]
 8003d98:	689b      	ldr	r3, [r3, #8]
 8003d9a:	b29b      	uxth	r3, r3
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	4619      	mov	r1, r3
 8003da0:	f003 f8c8 	bl	8006f34 <HAL_GPIO_WritePin>
  delayUs(5);
 8003da4:	2005      	movs	r0, #5
 8003da6:	f000 f8fd 	bl	8003fa4 <delayUs>
  HAL_GPIO_WritePin(p_pin->sda_port, p_pin->sda_pin, GPIO_PIN_RESET);
 8003daa:	6a3b      	ldr	r3, [r7, #32]
 8003dac:	68d8      	ldr	r0, [r3, #12]
 8003dae:	6a3b      	ldr	r3, [r7, #32]
 8003db0:	691b      	ldr	r3, [r3, #16]
 8003db2:	b29b      	uxth	r3, r3
 8003db4:	2200      	movs	r2, #0
 8003db6:	4619      	mov	r1, r3
 8003db8:	f003 f8bc 	bl	8006f34 <HAL_GPIO_WritePin>
  delayUs(5);
 8003dbc:	2005      	movs	r0, #5
 8003dbe:	f000 f8f1 	bl	8003fa4 <delayUs>

  HAL_GPIO_WritePin(p_pin->scl_port, p_pin->scl_pin, GPIO_PIN_SET);
 8003dc2:	6a3b      	ldr	r3, [r7, #32]
 8003dc4:	6858      	ldr	r0, [r3, #4]
 8003dc6:	6a3b      	ldr	r3, [r7, #32]
 8003dc8:	689b      	ldr	r3, [r3, #8]
 8003dca:	b29b      	uxth	r3, r3
 8003dcc:	2201      	movs	r2, #1
 8003dce:	4619      	mov	r1, r3
 8003dd0:	f003 f8b0 	bl	8006f34 <HAL_GPIO_WritePin>
  delayUs(5);
 8003dd4:	2005      	movs	r0, #5
 8003dd6:	f000 f8e5 	bl	8003fa4 <delayUs>
  HAL_GPIO_WritePin(p_pin->sda_port, p_pin->sda_pin, GPIO_PIN_SET);
 8003dda:	6a3b      	ldr	r3, [r7, #32]
 8003ddc:	68d8      	ldr	r0, [r3, #12]
 8003dde:	6a3b      	ldr	r3, [r7, #32]
 8003de0:	691b      	ldr	r3, [r3, #16]
 8003de2:	b29b      	uxth	r3, r3
 8003de4:	2201      	movs	r2, #1
 8003de6:	4619      	mov	r1, r3
 8003de8:	f003 f8a4 	bl	8006f34 <HAL_GPIO_WritePin>
}
 8003dec:	bf00      	nop
 8003dee:	3728      	adds	r7, #40	; 0x28
 8003df0:	46bd      	mov	sp, r7
 8003df2:	bd80      	pop	{r7, pc}
 8003df4:	20000070 	.word	0x20000070

08003df8 <i2cIsDeviceReady>:

bool i2cIsDeviceReady(uint8_t ch, uint8_t dev_addr)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b084      	sub	sp, #16
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	4603      	mov	r3, r0
 8003e00:	460a      	mov	r2, r1
 8003e02:	71fb      	strb	r3, [r7, #7]
 8003e04:	4613      	mov	r3, r2
 8003e06:	71bb      	strb	r3, [r7, #6]
	I2C_HandleTypeDef *p_handle = i2c_tbl[ch].p_hi2c;
 8003e08:	79fa      	ldrb	r2, [r7, #7]
 8003e0a:	490e      	ldr	r1, [pc, #56]	; (8003e44 <i2cIsDeviceReady+0x4c>)
 8003e0c:	4613      	mov	r3, r2
 8003e0e:	009b      	lsls	r3, r3, #2
 8003e10:	4413      	add	r3, r2
 8003e12:	009b      	lsls	r3, r3, #2
 8003e14:	440b      	add	r3, r1
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	60fb      	str	r3, [r7, #12]

	if(HAL_I2C_IsDeviceReady(p_handle, dev_addr << 1, 10, 10) == HAL_OK)
 8003e1a:	79bb      	ldrb	r3, [r7, #6]
 8003e1c:	b29b      	uxth	r3, r3
 8003e1e:	005b      	lsls	r3, r3, #1
 8003e20:	b299      	uxth	r1, r3
 8003e22:	230a      	movs	r3, #10
 8003e24:	220a      	movs	r2, #10
 8003e26:	68f8      	ldr	r0, [r7, #12]
 8003e28:	f003 fd6c 	bl	8007904 <HAL_I2C_IsDeviceReady>
 8003e2c:	4603      	mov	r3, r0
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d103      	bne.n	8003e3a <i2cIsDeviceReady+0x42>
  __ASM volatile ("cpsie i" : : : "memory");
 8003e32:	b662      	cpsie	i
}
 8003e34:	bf00      	nop
	{
		__enable_irq();
		return true;
 8003e36:	2301      	movs	r3, #1
 8003e38:	e000      	b.n	8003e3c <i2cIsDeviceReady+0x44>
	}

	return false;
 8003e3a:	2300      	movs	r3, #0
}
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	3710      	adds	r7, #16
 8003e40:	46bd      	mov	sp, r7
 8003e42:	bd80      	pop	{r7, pc}
 8003e44:	20000070 	.word	0x20000070

08003e48 <i2cReadByte>:

	return ret;
}

bool i2cReadByte(uint8_t ch, uint16_t dev_addr, uint16_t reg_addr, uint8_t *p_data, uint32_t timeout)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b086      	sub	sp, #24
 8003e4c:	af02      	add	r7, sp, #8
 8003e4e:	607b      	str	r3, [r7, #4]
 8003e50:	4603      	mov	r3, r0
 8003e52:	73fb      	strb	r3, [r7, #15]
 8003e54:	460b      	mov	r3, r1
 8003e56:	81bb      	strh	r3, [r7, #12]
 8003e58:	4613      	mov	r3, r2
 8003e5a:	817b      	strh	r3, [r7, #10]
	return i2cReadBytes(ch, dev_addr, reg_addr, p_data, 1, timeout);
 8003e5c:	897a      	ldrh	r2, [r7, #10]
 8003e5e:	89b9      	ldrh	r1, [r7, #12]
 8003e60:	7bf8      	ldrb	r0, [r7, #15]
 8003e62:	69bb      	ldr	r3, [r7, #24]
 8003e64:	9301      	str	r3, [sp, #4]
 8003e66:	2301      	movs	r3, #1
 8003e68:	9300      	str	r3, [sp, #0]
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	f000 f806 	bl	8003e7c <i2cReadBytes>
 8003e70:	4603      	mov	r3, r0
}
 8003e72:	4618      	mov	r0, r3
 8003e74:	3710      	adds	r7, #16
 8003e76:	46bd      	mov	sp, r7
 8003e78:	bd80      	pop	{r7, pc}
	...

08003e7c <i2cReadBytes>:

bool i2cReadBytes(uint8_t ch, uint16_t dev_addr, uint16_t reg_addr, uint8_t *p_data, uint32_t length, uint32_t timeout)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b08c      	sub	sp, #48	; 0x30
 8003e80:	af04      	add	r7, sp, #16
 8003e82:	607b      	str	r3, [r7, #4]
 8003e84:	4603      	mov	r3, r0
 8003e86:	73fb      	strb	r3, [r7, #15]
 8003e88:	460b      	mov	r3, r1
 8003e8a:	81bb      	strh	r3, [r7, #12]
 8003e8c:	4613      	mov	r3, r2
 8003e8e:	817b      	strh	r3, [r7, #10]
	bool ret;
	HAL_StatusTypeDef i2c_ret;
	I2C_HandleTypeDef *p_handle = i2c_tbl[ch].p_hi2c;
 8003e90:	7bfa      	ldrb	r2, [r7, #15]
 8003e92:	4916      	ldr	r1, [pc, #88]	; (8003eec <i2cReadBytes+0x70>)
 8003e94:	4613      	mov	r3, r2
 8003e96:	009b      	lsls	r3, r3, #2
 8003e98:	4413      	add	r3, r2
 8003e9a:	009b      	lsls	r3, r3, #2
 8003e9c:	440b      	add	r3, r1
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	61bb      	str	r3, [r7, #24]

	if(ch>=I2C_MAX_CH)
 8003ea2:	7bfb      	ldrb	r3, [r7, #15]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d001      	beq.n	8003eac <i2cReadBytes+0x30>
	{
		return false;
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	e01a      	b.n	8003ee2 <i2cReadBytes+0x66>
	}

	i2c_ret = HAL_I2C_Mem_Read(p_handle, (uint16_t)(dev_addr << 1), reg_addr, I2C_MEMADD_SIZE_8BIT, p_data, length, timeout);
 8003eac:	89bb      	ldrh	r3, [r7, #12]
 8003eae:	005b      	lsls	r3, r3, #1
 8003eb0:	b299      	uxth	r1, r3
 8003eb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eb4:	b29b      	uxth	r3, r3
 8003eb6:	8978      	ldrh	r0, [r7, #10]
 8003eb8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003eba:	9202      	str	r2, [sp, #8]
 8003ebc:	9301      	str	r3, [sp, #4]
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	9300      	str	r3, [sp, #0]
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	4602      	mov	r2, r0
 8003ec6:	69b8      	ldr	r0, [r7, #24]
 8003ec8:	f003 faea 	bl	80074a0 <HAL_I2C_Mem_Read>
 8003ecc:	4603      	mov	r3, r0
 8003ece:	75fb      	strb	r3, [r7, #23]

	if(i2c_ret == HAL_OK)
 8003ed0:	7dfb      	ldrb	r3, [r7, #23]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d102      	bne.n	8003edc <i2cReadBytes+0x60>
	{
		ret = true;
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	77fb      	strb	r3, [r7, #31]
 8003eda:	e001      	b.n	8003ee0 <i2cReadBytes+0x64>
	}
	else
	{
		ret = false;
 8003edc:	2300      	movs	r3, #0
 8003ede:	77fb      	strb	r3, [r7, #31]
	}

	return ret;
 8003ee0:	7ffb      	ldrb	r3, [r7, #31]
}
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	3720      	adds	r7, #32
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	bd80      	pop	{r7, pc}
 8003eea:	bf00      	nop
 8003eec:	20000070 	.word	0x20000070

08003ef0 <i2cWriteByte>:

	return ret;
}

bool i2cWriteByte(uint8_t ch, uint16_t dev_addr, uint16_t reg_addr, uint8_t data, uint32_t timeout)
{
 8003ef0:	b590      	push	{r4, r7, lr}
 8003ef2:	b085      	sub	sp, #20
 8003ef4:	af02      	add	r7, sp, #8
 8003ef6:	4604      	mov	r4, r0
 8003ef8:	4608      	mov	r0, r1
 8003efa:	4611      	mov	r1, r2
 8003efc:	461a      	mov	r2, r3
 8003efe:	4623      	mov	r3, r4
 8003f00:	71fb      	strb	r3, [r7, #7]
 8003f02:	4603      	mov	r3, r0
 8003f04:	80bb      	strh	r3, [r7, #4]
 8003f06:	460b      	mov	r3, r1
 8003f08:	807b      	strh	r3, [r7, #2]
 8003f0a:	4613      	mov	r3, r2
 8003f0c:	71bb      	strb	r3, [r7, #6]
	return i2cWriteBytes(ch, dev_addr, reg_addr, &data, 1, timeout);
 8003f0e:	1dbc      	adds	r4, r7, #6
 8003f10:	887a      	ldrh	r2, [r7, #2]
 8003f12:	88b9      	ldrh	r1, [r7, #4]
 8003f14:	79f8      	ldrb	r0, [r7, #7]
 8003f16:	69bb      	ldr	r3, [r7, #24]
 8003f18:	9301      	str	r3, [sp, #4]
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	9300      	str	r3, [sp, #0]
 8003f1e:	4623      	mov	r3, r4
 8003f20:	f000 f806 	bl	8003f30 <i2cWriteBytes>
 8003f24:	4603      	mov	r3, r0
}
 8003f26:	4618      	mov	r0, r3
 8003f28:	370c      	adds	r7, #12
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	bd90      	pop	{r4, r7, pc}
	...

08003f30 <i2cWriteBytes>:

bool i2cWriteBytes(uint8_t ch, uint16_t dev_addr, uint16_t reg_addr, uint8_t *p_data, uint32_t length, uint32_t timeout)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b08c      	sub	sp, #48	; 0x30
 8003f34:	af04      	add	r7, sp, #16
 8003f36:	607b      	str	r3, [r7, #4]
 8003f38:	4603      	mov	r3, r0
 8003f3a:	73fb      	strb	r3, [r7, #15]
 8003f3c:	460b      	mov	r3, r1
 8003f3e:	81bb      	strh	r3, [r7, #12]
 8003f40:	4613      	mov	r3, r2
 8003f42:	817b      	strh	r3, [r7, #10]
	bool ret;
	HAL_StatusTypeDef i2c_ret;
	I2C_HandleTypeDef *p_handle = i2c_tbl[ch].p_hi2c;
 8003f44:	7bfa      	ldrb	r2, [r7, #15]
 8003f46:	4916      	ldr	r1, [pc, #88]	; (8003fa0 <i2cWriteBytes+0x70>)
 8003f48:	4613      	mov	r3, r2
 8003f4a:	009b      	lsls	r3, r3, #2
 8003f4c:	4413      	add	r3, r2
 8003f4e:	009b      	lsls	r3, r3, #2
 8003f50:	440b      	add	r3, r1
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	61bb      	str	r3, [r7, #24]

	if(ch>=I2C_MAX_CH)
 8003f56:	7bfb      	ldrb	r3, [r7, #15]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d001      	beq.n	8003f60 <i2cWriteBytes+0x30>
	{
		return false;
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	e01a      	b.n	8003f96 <i2cWriteBytes+0x66>
	}

	i2c_ret = HAL_I2C_Mem_Write(p_handle, (uint16_t)(dev_addr << 1), reg_addr, I2C_MEMADD_SIZE_8BIT, p_data, length, timeout);
 8003f60:	89bb      	ldrh	r3, [r7, #12]
 8003f62:	005b      	lsls	r3, r3, #1
 8003f64:	b299      	uxth	r1, r3
 8003f66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f68:	b29b      	uxth	r3, r3
 8003f6a:	8978      	ldrh	r0, [r7, #10]
 8003f6c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003f6e:	9202      	str	r2, [sp, #8]
 8003f70:	9301      	str	r3, [sp, #4]
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	9300      	str	r3, [sp, #0]
 8003f76:	2301      	movs	r3, #1
 8003f78:	4602      	mov	r2, r0
 8003f7a:	69b8      	ldr	r0, [r7, #24]
 8003f7c:	f003 f996 	bl	80072ac <HAL_I2C_Mem_Write>
 8003f80:	4603      	mov	r3, r0
 8003f82:	75fb      	strb	r3, [r7, #23]

	if(i2c_ret == HAL_OK)
 8003f84:	7dfb      	ldrb	r3, [r7, #23]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d102      	bne.n	8003f90 <i2cWriteBytes+0x60>
	{
		ret = true;
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	77fb      	strb	r3, [r7, #31]
 8003f8e:	e001      	b.n	8003f94 <i2cWriteBytes+0x64>
	}
	else
	{
		ret = false;
 8003f90:	2300      	movs	r3, #0
 8003f92:	77fb      	strb	r3, [r7, #31]
	}

	return ret;
 8003f94:	7ffb      	ldrb	r3, [r7, #31]
}
 8003f96:	4618      	mov	r0, r3
 8003f98:	3720      	adds	r7, #32
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	bd80      	pop	{r7, pc}
 8003f9e:	bf00      	nop
 8003fa0:	20000070 	.word	0x20000070

08003fa4 <delayUs>:
{
	return i2c_errcount[ch];
}

void delayUs(uint32_t us)
{
 8003fa4:	b480      	push	{r7}
 8003fa6:	b085      	sub	sp, #20
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
	volatile uint32_t i;

	for(i=0; i<us*1000; i++)
 8003fac:	2300      	movs	r3, #0
 8003fae:	60fb      	str	r3, [r7, #12]
 8003fb0:	e002      	b.n	8003fb8 <delayUs+0x14>
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	3301      	adds	r3, #1
 8003fb6:	60fb      	str	r3, [r7, #12]
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003fbe:	fb03 f202 	mul.w	r2, r3, r2
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	429a      	cmp	r2, r3
 8003fc6:	d8f4      	bhi.n	8003fb2 <delayUs+0xe>
	{

	}
}
 8003fc8:	bf00      	nop
 8003fca:	bf00      	nop
 8003fcc:	3714      	adds	r7, #20
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd4:	4770      	bx	lr

08003fd6 <HAL_I2C_ErrorCallback>:

void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003fd6:	b480      	push	{r7}
 8003fd8:	b083      	sub	sp, #12
 8003fda:	af00      	add	r7, sp, #0
 8003fdc:	6078      	str	r0, [r7, #4]
	UNUSED(hi2c);
}
 8003fde:	bf00      	nop
 8003fe0:	370c      	adds	r7, #12
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe8:	4770      	bx	lr
	...

08003fec <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b08a      	sub	sp, #40	; 0x28
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ff4:	f107 0314 	add.w	r3, r7, #20
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	601a      	str	r2, [r3, #0]
 8003ffc:	605a      	str	r2, [r3, #4]
 8003ffe:	609a      	str	r2, [r3, #8]
 8004000:	60da      	str	r2, [r3, #12]
 8004002:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C2)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4a29      	ldr	r2, [pc, #164]	; (80040b0 <HAL_I2C_MspInit+0xc4>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d14c      	bne.n	80040a8 <HAL_I2C_MspInit+0xbc>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800400e:	2300      	movs	r3, #0
 8004010:	613b      	str	r3, [r7, #16]
 8004012:	4b28      	ldr	r3, [pc, #160]	; (80040b4 <HAL_I2C_MspInit+0xc8>)
 8004014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004016:	4a27      	ldr	r2, [pc, #156]	; (80040b4 <HAL_I2C_MspInit+0xc8>)
 8004018:	f043 0302 	orr.w	r3, r3, #2
 800401c:	6313      	str	r3, [r2, #48]	; 0x30
 800401e:	4b25      	ldr	r3, [pc, #148]	; (80040b4 <HAL_I2C_MspInit+0xc8>)
 8004020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004022:	f003 0302 	and.w	r3, r3, #2
 8004026:	613b      	str	r3, [r7, #16]
 8004028:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB3     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800402a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800402e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004030:	2312      	movs	r3, #18
 8004032:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004034:	2300      	movs	r3, #0
 8004036:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004038:	2303      	movs	r3, #3
 800403a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800403c:	2304      	movs	r3, #4
 800403e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004040:	f107 0314 	add.w	r3, r7, #20
 8004044:	4619      	mov	r1, r3
 8004046:	481c      	ldr	r0, [pc, #112]	; (80040b8 <HAL_I2C_MspInit+0xcc>)
 8004048:	f002 fcf4 	bl	8006a34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800404c:	2308      	movs	r3, #8
 800404e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004050:	2312      	movs	r3, #18
 8004052:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004054:	2300      	movs	r3, #0
 8004056:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004058:	2303      	movs	r3, #3
 800405a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 800405c:	2309      	movs	r3, #9
 800405e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004060:	f107 0314 	add.w	r3, r7, #20
 8004064:	4619      	mov	r1, r3
 8004066:	4814      	ldr	r0, [pc, #80]	; (80040b8 <HAL_I2C_MspInit+0xcc>)
 8004068:	f002 fce4 	bl	8006a34 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800406c:	2300      	movs	r3, #0
 800406e:	60fb      	str	r3, [r7, #12]
 8004070:	4b10      	ldr	r3, [pc, #64]	; (80040b4 <HAL_I2C_MspInit+0xc8>)
 8004072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004074:	4a0f      	ldr	r2, [pc, #60]	; (80040b4 <HAL_I2C_MspInit+0xc8>)
 8004076:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800407a:	6413      	str	r3, [r2, #64]	; 0x40
 800407c:	4b0d      	ldr	r3, [pc, #52]	; (80040b4 <HAL_I2C_MspInit+0xc8>)
 800407e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004080:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004084:	60fb      	str	r3, [r7, #12]
 8004086:	68fb      	ldr	r3, [r7, #12]

    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8004088:	2200      	movs	r2, #0
 800408a:	2100      	movs	r1, #0
 800408c:	2021      	movs	r0, #33	; 0x21
 800408e:	f001 fdf8 	bl	8005c82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8004092:	2021      	movs	r0, #33	; 0x21
 8004094:	f001 fe11 	bl	8005cba <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 8004098:	2200      	movs	r2, #0
 800409a:	2100      	movs	r1, #0
 800409c:	2022      	movs	r0, #34	; 0x22
 800409e:	f001 fdf0 	bl	8005c82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 80040a2:	2022      	movs	r0, #34	; 0x22
 80040a4:	f001 fe09 	bl	8005cba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80040a8:	bf00      	nop
 80040aa:	3728      	adds	r7, #40	; 0x28
 80040ac:	46bd      	mov	sp, r7
 80040ae:	bd80      	pop	{r7, pc}
 80040b0:	40005800 	.word	0x40005800
 80040b4:	40023800 	.word	0x40023800
 80040b8:	40020400 	.word	0x40020400

080040bc <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b082      	sub	sp, #8
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]

  if(i2cHandle->Instance==I2C2)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4a0d      	ldr	r2, [pc, #52]	; (8004100 <HAL_I2C_MspDeInit+0x44>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d114      	bne.n	80040f8 <HAL_I2C_MspDeInit+0x3c>
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 80040ce:	4b0d      	ldr	r3, [pc, #52]	; (8004104 <HAL_I2C_MspDeInit+0x48>)
 80040d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040d2:	4a0c      	ldr	r2, [pc, #48]	; (8004104 <HAL_I2C_MspDeInit+0x48>)
 80040d4:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80040d8:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB3     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10);
 80040da:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80040de:	480a      	ldr	r0, [pc, #40]	; (8004108 <HAL_I2C_MspDeInit+0x4c>)
 80040e0:	f002 fe2c 	bl	8006d3c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_3);
 80040e4:	2108      	movs	r1, #8
 80040e6:	4808      	ldr	r0, [pc, #32]	; (8004108 <HAL_I2C_MspDeInit+0x4c>)
 80040e8:	f002 fe28 	bl	8006d3c <HAL_GPIO_DeInit>

    /* I2C2 interrupt Deinit */
    HAL_NVIC_DisableIRQ(I2C2_EV_IRQn);
 80040ec:	2021      	movs	r0, #33	; 0x21
 80040ee:	f001 fdf2 	bl	8005cd6 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(I2C2_ER_IRQn);
 80040f2:	2022      	movs	r0, #34	; 0x22
 80040f4:	f001 fdef 	bl	8005cd6 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }
}
 80040f8:	bf00      	nop
 80040fa:	3708      	adds	r7, #8
 80040fc:	46bd      	mov	sp, r7
 80040fe:	bd80      	pop	{r7, pc}
 8004100:	40005800 	.word	0x40005800
 8004104:	40023800 	.word	0x40023800
 8004108:	40020400 	.word	0x40020400

0800410c <cliI2C>:

#ifdef _USE_HW_CLI
void cliI2C(cli_args_t *args)
{
 800410c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800410e:	b0ad      	sub	sp, #180	; 0xb4
 8004110:	af02      	add	r7, sp, #8
 8004112:	6078      	str	r0, [r7, #4]
	bool ret = true;
 8004114:	2301      	movs	r3, #1
 8004116:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7

	uint32_t i;
	uint8_t i2c_data[128];
	uint32_t pre_time;

	if(args->argc == 2)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	881b      	ldrh	r3, [r3, #0]
 800411e:	2b02      	cmp	r3, #2
 8004120:	d16b      	bne.n	80041fa <cliI2C+0xee>
	{
		print_ch = (uint16_t)args->getData(1);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	689b      	ldr	r3, [r3, #8]
 8004126:	2001      	movs	r0, #1
 8004128:	4798      	blx	r3
 800412a:	4603      	mov	r3, r0
 800412c:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
		print_ch = constrain(print_ch, 1, I2C_MAX_CH);
 8004130:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8004134:	2b00      	cmp	r3, #0
 8004136:	d006      	beq.n	8004146 <cliI2C+0x3a>
 8004138:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800413c:	2b01      	cmp	r3, #1
 800413e:	bf28      	it	cs
 8004140:	2301      	movcs	r3, #1
 8004142:	b2db      	uxtb	r3, r3
 8004144:	e000      	b.n	8004148 <cliI2C+0x3c>
 8004146:	2301      	movs	r3, #1
 8004148:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
		print_ch -= 1;
 800414c:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8004150:	3b01      	subs	r3, #1
 8004152:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f

		if(args->isStr(0, "scan") == true)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	695b      	ldr	r3, [r3, #20]
 800415a:	4991      	ldr	r1, [pc, #580]	; (80043a0 <cliI2C+0x294>)
 800415c:	2000      	movs	r0, #0
 800415e:	4798      	blx	r3
 8004160:	4603      	mov	r3, r0
 8004162:	2b00      	cmp	r3, #0
 8004164:	d022      	beq.n	80041ac <cliI2C+0xa0>
		{
			for(i=0x00; i<= 0x7F; i++)
 8004166:	2300      	movs	r3, #0
 8004168:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800416c:	e019      	b.n	80041a2 <cliI2C+0x96>
			{
				if(i2cIsDeviceReady(print_ch, i) == true)
 800416e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004172:	b2da      	uxtb	r2, r3
 8004174:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8004178:	4611      	mov	r1, r2
 800417a:	4618      	mov	r0, r3
 800417c:	f7ff fe3c 	bl	8003df8 <i2cIsDeviceReady>
 8004180:	4603      	mov	r3, r0
 8004182:	2b00      	cmp	r3, #0
 8004184:	d008      	beq.n	8004198 <cliI2C+0x8c>
				{
					cliPrintf("I2C CH%d Addr 0x%X : OK\n", print_ch+1, i);
 8004186:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800418a:	3301      	adds	r3, #1
 800418c:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8004190:	4619      	mov	r1, r3
 8004192:	4884      	ldr	r0, [pc, #528]	; (80043a4 <cliI2C+0x298>)
 8004194:	f7fe ff80 	bl	8003098 <cliPrintf>
			for(i=0x00; i<= 0x7F; i++)
 8004198:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800419c:	3301      	adds	r3, #1
 800419e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80041a2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80041a6:	2b7f      	cmp	r3, #127	; 0x7f
 80041a8:	d9e1      	bls.n	800416e <cliI2C+0x62>
 80041aa:	e0df      	b.n	800436c <cliI2C+0x260>
				}
			}
		}
		else if(args->isStr(0, "begin") == true)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	695b      	ldr	r3, [r3, #20]
 80041b0:	497d      	ldr	r1, [pc, #500]	; (80043a8 <cliI2C+0x29c>)
 80041b2:	2000      	movs	r0, #0
 80041b4:	4798      	blx	r3
 80041b6:	4603      	mov	r3, r0
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	f000 80d7 	beq.w	800436c <cliI2C+0x260>
		{
			i2c_ret = i2cBegin(print_ch, 400);
 80041be:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 80041c2:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80041c6:	4618      	mov	r0, r3
 80041c8:	f7ff fd1a 	bl	8003c00 <i2cBegin>
 80041cc:	4603      	mov	r3, r0
 80041ce:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
			if(i2c_ret == true)
 80041d2:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d007      	beq.n	80041ea <cliI2C+0xde>
			{
				cliPrintf("I2C CH%d Begin OK\n", print_ch + 1);
 80041da:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 80041de:	3301      	adds	r3, #1
 80041e0:	4619      	mov	r1, r3
 80041e2:	4872      	ldr	r0, [pc, #456]	; (80043ac <cliI2C+0x2a0>)
 80041e4:	f7fe ff58 	bl	8003098 <cliPrintf>
 80041e8:	e0c0      	b.n	800436c <cliI2C+0x260>
			}
			else
			{
				cliPrintf("I2C CH%d Begin Fail\n", print_ch + 1);
 80041ea:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 80041ee:	3301      	adds	r3, #1
 80041f0:	4619      	mov	r1, r3
 80041f2:	486f      	ldr	r0, [pc, #444]	; (80043b0 <cliI2C+0x2a4>)
 80041f4:	f7fe ff50 	bl	8003098 <cliPrintf>
 80041f8:	e0b8      	b.n	800436c <cliI2C+0x260>
			}
		}
	}
	else if(args->argc == 5)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	881b      	ldrh	r3, [r3, #0]
 80041fe:	2b05      	cmp	r3, #5
 8004200:	f040 80b1 	bne.w	8004366 <cliI2C+0x25a>
	{
		print_ch = (uint16_t)args->getData(1);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	689b      	ldr	r3, [r3, #8]
 8004208:	2001      	movs	r0, #1
 800420a:	4798      	blx	r3
 800420c:	4603      	mov	r3, r0
 800420e:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
		print_ch = constrain(print_ch, 1, I2C_MAX_CH);
 8004212:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8004216:	2b00      	cmp	r3, #0
 8004218:	d006      	beq.n	8004228 <cliI2C+0x11c>
 800421a:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800421e:	2b01      	cmp	r3, #1
 8004220:	bf28      	it	cs
 8004222:	2301      	movcs	r3, #1
 8004224:	b2db      	uxtb	r3, r3
 8004226:	e000      	b.n	800422a <cliI2C+0x11e>
 8004228:	2301      	movs	r3, #1
 800422a:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
		dev_addr = (uint16_t)args->getData(2);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	689b      	ldr	r3, [r3, #8]
 8004232:	2002      	movs	r0, #2
 8004234:	4798      	blx	r3
 8004236:	4603      	mov	r3, r0
 8004238:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
		reg_addr = (uint16_t)args->getData(3);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	689b      	ldr	r3, [r3, #8]
 8004240:	2003      	movs	r0, #3
 8004242:	4798      	blx	r3
 8004244:	4603      	mov	r3, r0
 8004246:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
		length = (uint16_t)args->getData(4);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	689b      	ldr	r3, [r3, #8]
 800424e:	2004      	movs	r0, #4
 8004250:	4798      	blx	r3
 8004252:	4603      	mov	r3, r0
 8004254:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
		ch = print_ch - 1;
 8004258:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800425c:	3b01      	subs	r3, #1
 800425e:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97

		if(args->isStr(0, "read") == true)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	695b      	ldr	r3, [r3, #20]
 8004266:	4953      	ldr	r1, [pc, #332]	; (80043b4 <cliI2C+0x2a8>)
 8004268:	2000      	movs	r0, #0
 800426a:	4798      	blx	r3
 800426c:	4603      	mov	r3, r0
 800426e:	2b00      	cmp	r3, #0
 8004270:	d03a      	beq.n	80042e8 <cliI2C+0x1dc>
		{
			for(i=0; i<length; i++)
 8004272:	2300      	movs	r3, #0
 8004274:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004278:	e02f      	b.n	80042da <cliI2C+0x1ce>
			{
				i2c_ret = i2cReadByte(ch, dev_addr, reg_addr + i, i2c_data, 100);
 800427a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800427e:	b29a      	uxth	r2, r3
 8004280:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8004284:	4413      	add	r3, r2
 8004286:	b29a      	uxth	r2, r3
 8004288:	f107 030c 	add.w	r3, r7, #12
 800428c:	f8b7 109c 	ldrh.w	r1, [r7, #156]	; 0x9c
 8004290:	f897 0097 	ldrb.w	r0, [r7, #151]	; 0x97
 8004294:	2464      	movs	r4, #100	; 0x64
 8004296:	9400      	str	r4, [sp, #0]
 8004298:	f7ff fdd6 	bl	8003e48 <i2cReadByte>
 800429c:	4603      	mov	r3, r0
 800429e:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f

				if(i2c_ret == true)
 80042a2:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d00b      	beq.n	80042c2 <cliI2C+0x1b6>
				{
          cliPrintf("%d I2C - 0x%02X : 0x%02X\n", print_ch, reg_addr+i, i2c_data[0]);
 80042aa:	f897 109f 	ldrb.w	r1, [r7, #159]	; 0x9f
 80042ae:	f8b7 209a 	ldrh.w	r2, [r7, #154]	; 0x9a
 80042b2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80042b6:	441a      	add	r2, r3
 80042b8:	7b3b      	ldrb	r3, [r7, #12]
 80042ba:	483f      	ldr	r0, [pc, #252]	; (80043b8 <cliI2C+0x2ac>)
 80042bc:	f7fe feec 	bl	8003098 <cliPrintf>
 80042c0:	e006      	b.n	80042d0 <cliI2C+0x1c4>
				}
				else
				{
          cliPrintf("%d I2C - Fail \n", print_ch);
 80042c2:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 80042c6:	4619      	mov	r1, r3
 80042c8:	483c      	ldr	r0, [pc, #240]	; (80043bc <cliI2C+0x2b0>)
 80042ca:	f7fe fee5 	bl	8003098 <cliPrintf>
          break;
 80042ce:	e04d      	b.n	800436c <cliI2C+0x260>
			for(i=0; i<length; i++)
 80042d0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80042d4:	3301      	adds	r3, #1
 80042d6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80042da:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 80042de:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 80042e2:	429a      	cmp	r2, r3
 80042e4:	d3c9      	bcc.n	800427a <cliI2C+0x16e>
 80042e6:	e041      	b.n	800436c <cliI2C+0x260>
				}
			}
		}
		else if(args->isStr(0, "write") == true)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	695b      	ldr	r3, [r3, #20]
 80042ec:	4934      	ldr	r1, [pc, #208]	; (80043c0 <cliI2C+0x2b4>)
 80042ee:	2000      	movs	r0, #0
 80042f0:	4798      	blx	r3
 80042f2:	4603      	mov	r3, r0
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d032      	beq.n	800435e <cliI2C+0x252>
		{
			pre_time = millis();
 80042f8:	f7fd fb58 	bl	80019ac <millis>
 80042fc:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
			i2c_ret = i2cWriteByte(ch, dev_addr, reg_addr, (uint8_t)length, 100);
 8004300:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8004304:	b2db      	uxtb	r3, r3
 8004306:	f8b7 209a 	ldrh.w	r2, [r7, #154]	; 0x9a
 800430a:	f8b7 109c 	ldrh.w	r1, [r7, #156]	; 0x9c
 800430e:	f897 0097 	ldrb.w	r0, [r7, #151]	; 0x97
 8004312:	2464      	movs	r4, #100	; 0x64
 8004314:	9400      	str	r4, [sp, #0]
 8004316:	f7ff fdeb 	bl	8003ef0 <i2cWriteByte>
 800431a:	4603      	mov	r3, r0
 800431c:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f

			if(i2c_ret == true)
 8004320:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8004324:	2b00      	cmp	r3, #0
 8004326:	d013      	beq.n	8004350 <cliI2C+0x244>
			{
				cliPrintf("%d I2C - 0x%02X : 0x%02X, %d ms\n", print_ch, reg_addr, length, millis()-pre_time);
 8004328:	f897 409f 	ldrb.w	r4, [r7, #159]	; 0x9f
 800432c:	f8b7 509a 	ldrh.w	r5, [r7, #154]	; 0x9a
 8004330:	f8b7 6098 	ldrh.w	r6, [r7, #152]	; 0x98
 8004334:	f7fd fb3a 	bl	80019ac <millis>
 8004338:	4602      	mov	r2, r0
 800433a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800433e:	1ad3      	subs	r3, r2, r3
 8004340:	9300      	str	r3, [sp, #0]
 8004342:	4633      	mov	r3, r6
 8004344:	462a      	mov	r2, r5
 8004346:	4621      	mov	r1, r4
 8004348:	481e      	ldr	r0, [pc, #120]	; (80043c4 <cliI2C+0x2b8>)
 800434a:	f7fe fea5 	bl	8003098 <cliPrintf>
 800434e:	e00d      	b.n	800436c <cliI2C+0x260>
			}
			else
			{
				cliPrintf("%d I2C - Fail \n", print_ch);
 8004350:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8004354:	4619      	mov	r1, r3
 8004356:	4819      	ldr	r0, [pc, #100]	; (80043bc <cliI2C+0x2b0>)
 8004358:	f7fe fe9e 	bl	8003098 <cliPrintf>
 800435c:	e006      	b.n	800436c <cliI2C+0x260>
			}
		}
		else
		{
			ret = false;
 800435e:	2300      	movs	r3, #0
 8004360:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 8004364:	e002      	b.n	800436c <cliI2C+0x260>
		}
	}
	else
	{
		ret = false;
 8004366:	2300      	movs	r3, #0
 8004368:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
	}

	if(ret == false)
 800436c:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8004370:	f083 0301 	eor.w	r3, r3, #1
 8004374:	b2db      	uxtb	r3, r3
 8004376:	2b00      	cmp	r3, #0
 8004378:	d00d      	beq.n	8004396 <cliI2C+0x28a>
	{
    cliPrintf( "i2c begin channel[1~%d]\n", I2C_MAX_CH);
 800437a:	2101      	movs	r1, #1
 800437c:	4812      	ldr	r0, [pc, #72]	; (80043c8 <cliI2C+0x2bc>)
 800437e:	f7fe fe8b 	bl	8003098 <cliPrintf>
    cliPrintf( "i2c scan channel[1~%d]\n", I2C_MAX_CH);
 8004382:	2101      	movs	r1, #1
 8004384:	4811      	ldr	r0, [pc, #68]	; (80043cc <cliI2C+0x2c0>)
 8004386:	f7fe fe87 	bl	8003098 <cliPrintf>
    cliPrintf( "i2c read channel dev_addr reg_addr length\n");
 800438a:	4811      	ldr	r0, [pc, #68]	; (80043d0 <cliI2C+0x2c4>)
 800438c:	f7fe fe84 	bl	8003098 <cliPrintf>
    cliPrintf( "i2c write channel dev_addr reg_addr data\n");
 8004390:	4810      	ldr	r0, [pc, #64]	; (80043d4 <cliI2C+0x2c8>)
 8004392:	f7fe fe81 	bl	8003098 <cliPrintf>
	}
}
 8004396:	bf00      	nop
 8004398:	37ac      	adds	r7, #172	; 0xac
 800439a:	46bd      	mov	sp, r7
 800439c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800439e:	bf00      	nop
 80043a0:	08019548 	.word	0x08019548
 80043a4:	08019550 	.word	0x08019550
 80043a8:	0801956c 	.word	0x0801956c
 80043ac:	08019574 	.word	0x08019574
 80043b0:	08019588 	.word	0x08019588
 80043b4:	080195a0 	.word	0x080195a0
 80043b8:	080195a8 	.word	0x080195a8
 80043bc:	080195c4 	.word	0x080195c4
 80043c0:	080195d4 	.word	0x080195d4
 80043c4:	080195dc 	.word	0x080195dc
 80043c8:	08019600 	.word	0x08019600
 80043cc:	0801961c 	.word	0x0801961c
 80043d0:	08019634 	.word	0x08019634
 80043d4:	08019660 	.word	0x08019660

080043d8 <TransferDoneISR>:
#ifdef _USE_HW_CLI
static void cliLcd(cli_args_t *args);
#endif

void TransferDoneISR(void)
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	af00      	add	r7, sp, #0
  fps_time = millis() - fps_pre_time;
 80043dc:	f7fd fae6 	bl	80019ac <millis>
 80043e0:	4602      	mov	r2, r0
 80043e2:	4b0d      	ldr	r3, [pc, #52]	; (8004418 <TransferDoneISR+0x40>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	1ad3      	subs	r3, r2, r3
 80043e8:	4a0c      	ldr	r2, [pc, #48]	; (800441c <TransferDoneISR+0x44>)
 80043ea:	6013      	str	r3, [r2, #0]
  fps_pre_time = millis();
 80043ec:	f7fd fade 	bl	80019ac <millis>
 80043f0:	4603      	mov	r3, r0
 80043f2:	4a09      	ldr	r2, [pc, #36]	; (8004418 <TransferDoneISR+0x40>)
 80043f4:	6013      	str	r3, [r2, #0]

  if (fps_time > 0)
 80043f6:	4b09      	ldr	r3, [pc, #36]	; (800441c <TransferDoneISR+0x44>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d007      	beq.n	800440e <TransferDoneISR+0x36>
  {
    fps_count = 1000 / fps_time;
 80043fe:	4b07      	ldr	r3, [pc, #28]	; (800441c <TransferDoneISR+0x44>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004406:	fbb2 f3f3 	udiv	r3, r2, r3
 800440a:	4a05      	ldr	r2, [pc, #20]	; (8004420 <TransferDoneISR+0x48>)
 800440c:	6013      	str	r3, [r2, #0]
  }

  lcd_request_draw = false;
 800440e:	4b05      	ldr	r3, [pc, #20]	; (8004424 <TransferDoneISR+0x4c>)
 8004410:	2200      	movs	r2, #0
 8004412:	701a      	strb	r2, [r3, #0]
}
 8004414:	bf00      	nop
 8004416:	bd80      	pop	{r7, pc}
 8004418:	20001254 	.word	0x20001254
 800441c:	20001258 	.word	0x20001258
 8004420:	2000125c 	.word	0x2000125c
 8004424:	20001252 	.word	0x20001252

08004428 <lcdInit>:


bool lcdInit(void)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b084      	sub	sp, #16
 800442c:	af02      	add	r7, sp, #8
  backlight_value = 100;
 800442e:	4b25      	ldr	r3, [pc, #148]	; (80044c4 <lcdInit+0x9c>)
 8004430:	2264      	movs	r2, #100	; 0x64
 8004432:	701a      	strb	r2, [r3, #0]
#ifdef _USE_HW_ST7735
  is_init = st7735Init();
  st7735InitDriver(&lcd);
#endif
#ifdef _USE_HW_SSD1306
  is_init = ssd1306Init();
 8004434:	f7fd fe98 	bl	8002168 <ssd1306Init>
 8004438:	4603      	mov	r3, r0
 800443a:	461a      	mov	r2, r3
 800443c:	4b22      	ldr	r3, [pc, #136]	; (80044c8 <lcdInit+0xa0>)
 800443e:	701a      	strb	r2, [r3, #0]
  ssd1306InitDriver(&lcd);
 8004440:	4822      	ldr	r0, [pc, #136]	; (80044cc <lcdInit+0xa4>)
 8004442:	f7fd fe9d 	bl	8002180 <ssd1306InitDriver>
#endif

  lcd.setCallBack(TransferDoneISR);
 8004446:	4b21      	ldr	r3, [pc, #132]	; (80044cc <lcdInit+0xa4>)
 8004448:	695b      	ldr	r3, [r3, #20]
 800444a:	4821      	ldr	r0, [pc, #132]	; (80044d0 <lcdInit+0xa8>)
 800444c:	4798      	blx	r3


  for (int i=0; i<LCD_WIDTH*LCD_HEIGHT; i++)
 800444e:	2300      	movs	r3, #0
 8004450:	607b      	str	r3, [r7, #4]
 8004452:	e007      	b.n	8004464 <lcdInit+0x3c>
  {
    frame_buffer[0][i] = black;
 8004454:	4a1f      	ldr	r2, [pc, #124]	; (80044d4 <lcdInit+0xac>)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2100      	movs	r1, #0
 800445a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  for (int i=0; i<LCD_WIDTH*LCD_HEIGHT; i++)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	3301      	adds	r3, #1
 8004462:	607b      	str	r3, [r7, #4]
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800446a:	dbf3      	blt.n	8004454 <lcdInit+0x2c>
  }
  memset(frame_buffer, 0x00, sizeof(frame_buffer));
 800446c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004470:	2100      	movs	r1, #0
 8004472:	4818      	ldr	r0, [pc, #96]	; (80044d4 <lcdInit+0xac>)
 8004474:	f012 fe2c 	bl	80170d0 <memset>

  p_draw_frame_buf = frame_buffer[frame_index];
 8004478:	4b17      	ldr	r3, [pc, #92]	; (80044d8 <lcdInit+0xb0>)
 800447a:	781b      	ldrb	r3, [r3, #0]
 800447c:	039b      	lsls	r3, r3, #14
 800447e:	4a15      	ldr	r2, [pc, #84]	; (80044d4 <lcdInit+0xac>)
 8004480:	4413      	add	r3, r2
 8004482:	4a16      	ldr	r2, [pc, #88]	; (80044dc <lcdInit+0xb4>)
 8004484:	6013      	str	r3, [r2, #0]


  lcdDrawFillRect(0, 0, LCD_WIDTH, LCD_HEIGHT, black);
 8004486:	2300      	movs	r3, #0
 8004488:	9300      	str	r3, [sp, #0]
 800448a:	2340      	movs	r3, #64	; 0x40
 800448c:	2280      	movs	r2, #128	; 0x80
 800448e:	2100      	movs	r1, #0
 8004490:	2000      	movs	r0, #0
 8004492:	f000 f9dd 	bl	8004850 <lcdDrawFillRect>
  lcdUpdateDraw();
 8004496:	f000 f8c7 	bl	8004628 <lcdUpdateDraw>

  lcdSetBackLight(100);
 800449a:	2064      	movs	r0, #100	; 0x64
 800449c:	f000 f824 	bl	80044e8 <lcdSetBackLight>


  if (is_init != true)
 80044a0:	4b09      	ldr	r3, [pc, #36]	; (80044c8 <lcdInit+0xa0>)
 80044a2:	781b      	ldrb	r3, [r3, #0]
 80044a4:	f083 0301 	eor.w	r3, r3, #1
 80044a8:	b2db      	uxtb	r3, r3
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d001      	beq.n	80044b2 <lcdInit+0x8a>
  {
    return false;
 80044ae:	2300      	movs	r3, #0
 80044b0:	e004      	b.n	80044bc <lcdInit+0x94>
  }

#ifdef _USE_HW_CLI
  cliAdd("lcd", cliLcd);
 80044b2:	490b      	ldr	r1, [pc, #44]	; (80044e0 <lcdInit+0xb8>)
 80044b4:	480b      	ldr	r0, [pc, #44]	; (80044e4 <lcdInit+0xbc>)
 80044b6:	f7fe feff 	bl	80032b8 <cliAdd>
#endif

  return true;
 80044ba:	2301      	movs	r3, #1
}
 80044bc:	4618      	mov	r0, r3
 80044be:	3708      	adds	r7, #8
 80044c0:	46bd      	mov	sp, r7
 80044c2:	bd80      	pop	{r7, pc}
 80044c4:	20000084 	.word	0x20000084
 80044c8:	20001250 	.word	0x20001250
 80044cc:	20001234 	.word	0x20001234
 80044d0:	080043d9 	.word	0x080043d9
 80044d4:	20001280 	.word	0x20001280
 80044d8:	20001251 	.word	0x20001251
 80044dc:	20001260 	.word	0x20001260
 80044e0:	08004c71 	.word	0x08004c71
 80044e4:	08025944 	.word	0x08025944

080044e8 <lcdSetBackLight>:
{
  return backlight_value;
}

void lcdSetBackLight(uint8_t value)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b082      	sub	sp, #8
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	4603      	mov	r3, r0
 80044f0:	71fb      	strb	r3, [r7, #7]
  value = constrain(value, 0, 100);
 80044f2:	79fb      	ldrb	r3, [r7, #7]
 80044f4:	2b64      	cmp	r3, #100	; 0x64
 80044f6:	bf28      	it	cs
 80044f8:	2364      	movcs	r3, #100	; 0x64
 80044fa:	71fb      	strb	r3, [r7, #7]

  if (value != backlight_value)
 80044fc:	4b0c      	ldr	r3, [pc, #48]	; (8004530 <lcdSetBackLight+0x48>)
 80044fe:	781b      	ldrb	r3, [r3, #0]
 8004500:	79fa      	ldrb	r2, [r7, #7]
 8004502:	429a      	cmp	r2, r3
 8004504:	d002      	beq.n	800450c <lcdSetBackLight+0x24>
  {
    backlight_value = value;
 8004506:	4a0a      	ldr	r2, [pc, #40]	; (8004530 <lcdSetBackLight+0x48>)
 8004508:	79fb      	ldrb	r3, [r7, #7]
 800450a:	7013      	strb	r3, [r2, #0]
  }

  if (backlight_value > 0)
 800450c:	4b08      	ldr	r3, [pc, #32]	; (8004530 <lcdSetBackLight+0x48>)
 800450e:	781b      	ldrb	r3, [r3, #0]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d004      	beq.n	800451e <lcdSetBackLight+0x36>
  {
    gpioPinWrite(_PIN_DEF_BL_CTL, _DEF_HIGH);
 8004514:	2101      	movs	r1, #1
 8004516:	2001      	movs	r0, #1
 8004518:	f7ff fa02 	bl	8003920 <gpioPinWrite>
  }
  else
  {
    gpioPinWrite(_PIN_DEF_BL_CTL, _DEF_LOW);
  }
}
 800451c:	e003      	b.n	8004526 <lcdSetBackLight+0x3e>
    gpioPinWrite(_PIN_DEF_BL_CTL, _DEF_LOW);
 800451e:	2100      	movs	r1, #0
 8004520:	2001      	movs	r0, #1
 8004522:	f7ff f9fd 	bl	8003920 <gpioPinWrite>
}
 8004526:	bf00      	nop
 8004528:	3708      	adds	r7, #8
 800452a:	46bd      	mov	sp, r7
 800452c:	bd80      	pop	{r7, pc}
 800452e:	bf00      	nop
 8004530:	20000084 	.word	0x20000084

08004534 <lcdDrawPixel>:
  return p_draw_frame_buf[y_pos * LCD_WIDTH + x_pos];
}

LCD_OPT_DEF void lcdDrawPixel(uint16_t x_pos, uint16_t y_pos, uint32_t rgb_code)
{
  p_draw_frame_buf[y_pos * LCD_WIDTH + x_pos] = rgb_code;
 8004534:	4b03      	ldr	r3, [pc, #12]	; (8004544 <lcdDrawPixel+0x10>)
 8004536:	eb00 11c1 	add.w	r1, r0, r1, lsl #7
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
}
 8004540:	4770      	bx	lr
 8004542:	bf00      	nop
 8004544:	20001260 	.word	0x20001260

08004548 <lcdClearBuffer>:

  lcdUpdateDraw();
}

LCD_OPT_DEF void lcdClearBuffer(uint32_t rgb_code)
{
 8004548:	b510      	push	{r4, lr}
 800454a:	4604      	mov	r4, r0
  uint16_t *p_buf = lcdGetFrameBuffer();
 800454c:	f000 f898 	bl	8004680 <lcdGetFrameBuffer>
 8004550:	f500 517f 	add.w	r1, r0, #16320	; 0x3fc0

  for (int i=0; i<LCD_WIDTH * LCD_HEIGHT; i++)
  {
    p_buf[i] = rgb_code;
 8004554:	b2a2      	uxth	r2, r4
 8004556:	1e83      	subs	r3, r0, #2
 8004558:	313e      	adds	r1, #62	; 0x3e
 800455a:	f823 2f02 	strh.w	r2, [r3, #2]!
  for (int i=0; i<LCD_WIDTH * LCD_HEIGHT; i++)
 800455e:	428b      	cmp	r3, r1
 8004560:	d1fb      	bne.n	800455a <lcdClearBuffer+0x12>
  }
}
 8004562:	bd10      	pop	{r4, pc}

08004564 <lcdGetFps>:
    lcdDrawLine(x1, y1, line[i].x, line[i].y, color);
  }
}

uint32_t lcdGetFps(void)
{
 8004564:	b480      	push	{r7}
 8004566:	af00      	add	r7, sp, #0
  return fps_count;
 8004568:	4b03      	ldr	r3, [pc, #12]	; (8004578 <lcdGetFps+0x14>)
 800456a:	681b      	ldr	r3, [r3, #0]
}
 800456c:	4618      	mov	r0, r3
 800456e:	46bd      	mov	sp, r7
 8004570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004574:	4770      	bx	lr
 8004576:	bf00      	nop
 8004578:	2000125c 	.word	0x2000125c

0800457c <lcdGetFpsTime>:

uint32_t lcdGetFpsTime(void)
{
 800457c:	b480      	push	{r7}
 800457e:	af00      	add	r7, sp, #0
  return fps_time;
 8004580:	4b03      	ldr	r3, [pc, #12]	; (8004590 <lcdGetFpsTime+0x14>)
 8004582:	681b      	ldr	r3, [r3, #0]
}
 8004584:	4618      	mov	r0, r3
 8004586:	46bd      	mov	sp, r7
 8004588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458c:	4770      	bx	lr
 800458e:	bf00      	nop
 8004590:	20001258 	.word	0x20001258

08004594 <lcdDrawAvailable>:

bool lcdDrawAvailable(void)
{
 8004594:	b480      	push	{r7}
 8004596:	af00      	add	r7, sp, #0
  return !lcd_request_draw;
 8004598:	4b08      	ldr	r3, [pc, #32]	; (80045bc <lcdDrawAvailable+0x28>)
 800459a:	781b      	ldrb	r3, [r3, #0]
 800459c:	2b00      	cmp	r3, #0
 800459e:	bf14      	ite	ne
 80045a0:	2301      	movne	r3, #1
 80045a2:	2300      	moveq	r3, #0
 80045a4:	b2db      	uxtb	r3, r3
 80045a6:	f083 0301 	eor.w	r3, r3, #1
 80045aa:	b2db      	uxtb	r3, r3
 80045ac:	f003 0301 	and.w	r3, r3, #1
 80045b0:	b2db      	uxtb	r3, r3
}
 80045b2:	4618      	mov	r0, r3
 80045b4:	46bd      	mov	sp, r7
 80045b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ba:	4770      	bx	lr
 80045bc:	20001252 	.word	0x20001252

080045c0 <lcdRequestDraw>:

bool lcdRequestDraw(void)
{
 80045c0:	b598      	push	{r3, r4, r7, lr}
 80045c2:	af00      	add	r7, sp, #0
  if (is_init != true)
 80045c4:	4b13      	ldr	r3, [pc, #76]	; (8004614 <lcdRequestDraw+0x54>)
 80045c6:	781b      	ldrb	r3, [r3, #0]
 80045c8:	f083 0301 	eor.w	r3, r3, #1
 80045cc:	b2db      	uxtb	r3, r3
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d001      	beq.n	80045d6 <lcdRequestDraw+0x16>
  {
    return false;
 80045d2:	2300      	movs	r3, #0
 80045d4:	e01b      	b.n	800460e <lcdRequestDraw+0x4e>
  }
  if (lcd_request_draw == true)
 80045d6:	4b10      	ldr	r3, [pc, #64]	; (8004618 <lcdRequestDraw+0x58>)
 80045d8:	781b      	ldrb	r3, [r3, #0]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d001      	beq.n	80045e2 <lcdRequestDraw+0x22>
  {
    return false;
 80045de:	2300      	movs	r3, #0
 80045e0:	e015      	b.n	800460e <lcdRequestDraw+0x4e>
  }

  lcd.setWindow(0, 0, LCD_WIDTH-1, LCD_HEIGHT-1);
 80045e2:	4b0e      	ldr	r3, [pc, #56]	; (800461c <lcdRequestDraw+0x5c>)
 80045e4:	689c      	ldr	r4, [r3, #8]
 80045e6:	233f      	movs	r3, #63	; 0x3f
 80045e8:	227f      	movs	r2, #127	; 0x7f
 80045ea:	2100      	movs	r1, #0
 80045ec:	2000      	movs	r0, #0
 80045ee:	47a0      	blx	r4

  lcd_request_draw = true;
 80045f0:	4b09      	ldr	r3, [pc, #36]	; (8004618 <lcdRequestDraw+0x58>)
 80045f2:	2201      	movs	r2, #1
 80045f4:	701a      	strb	r2, [r3, #0]
  lcd.sendBuffer((uint8_t *)frame_buffer[frame_index], LCD_WIDTH * LCD_HEIGHT, 0);
 80045f6:	4b09      	ldr	r3, [pc, #36]	; (800461c <lcdRequestDraw+0x5c>)
 80045f8:	699b      	ldr	r3, [r3, #24]
 80045fa:	4a09      	ldr	r2, [pc, #36]	; (8004620 <lcdRequestDraw+0x60>)
 80045fc:	7812      	ldrb	r2, [r2, #0]
 80045fe:	0392      	lsls	r2, r2, #14
 8004600:	4908      	ldr	r1, [pc, #32]	; (8004624 <lcdRequestDraw+0x64>)
 8004602:	1850      	adds	r0, r2, r1
 8004604:	2200      	movs	r2, #0
 8004606:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800460a:	4798      	blx	r3

  return true;
 800460c:	2301      	movs	r3, #1
}
 800460e:	4618      	mov	r0, r3
 8004610:	bd98      	pop	{r3, r4, r7, pc}
 8004612:	bf00      	nop
 8004614:	20001250 	.word	0x20001250
 8004618:	20001252 	.word	0x20001252
 800461c:	20001234 	.word	0x20001234
 8004620:	20001251 	.word	0x20001251
 8004624:	20001280 	.word	0x20001280

08004628 <lcdUpdateDraw>:

void lcdUpdateDraw(void)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b082      	sub	sp, #8
 800462c:	af00      	add	r7, sp, #0
  uint32_t pre_time;

  if (is_init != true)
 800462e:	4b13      	ldr	r3, [pc, #76]	; (800467c <lcdUpdateDraw+0x54>)
 8004630:	781b      	ldrb	r3, [r3, #0]
 8004632:	f083 0301 	eor.w	r3, r3, #1
 8004636:	b2db      	uxtb	r3, r3
 8004638:	2b00      	cmp	r3, #0
 800463a:	d118      	bne.n	800466e <lcdUpdateDraw+0x46>
  {
    return;
  }

  lcdRequestDraw();
 800463c:	f7ff ffc0 	bl	80045c0 <lcdRequestDraw>

  pre_time = millis();
 8004640:	f7fd f9b4 	bl	80019ac <millis>
 8004644:	6078      	str	r0, [r7, #4]
  while(lcdDrawAvailable() != true)
 8004646:	e009      	b.n	800465c <lcdUpdateDraw+0x34>
  {
    delay(1);
 8004648:	2001      	movs	r0, #1
 800464a:	f7fd f9a4 	bl	8001996 <delay>
    if (millis()-pre_time >= 100)
 800464e:	f7fd f9ad 	bl	80019ac <millis>
 8004652:	4602      	mov	r2, r0
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	1ad3      	subs	r3, r2, r3
 8004658:	2b63      	cmp	r3, #99	; 0x63
 800465a:	d80a      	bhi.n	8004672 <lcdUpdateDraw+0x4a>
  while(lcdDrawAvailable() != true)
 800465c:	f7ff ff9a 	bl	8004594 <lcdDrawAvailable>
 8004660:	4603      	mov	r3, r0
 8004662:	f083 0301 	eor.w	r3, r3, #1
 8004666:	b2db      	uxtb	r3, r3
 8004668:	2b00      	cmp	r3, #0
 800466a:	d1ed      	bne.n	8004648 <lcdUpdateDraw+0x20>
 800466c:	e002      	b.n	8004674 <lcdUpdateDraw+0x4c>
    return;
 800466e:	bf00      	nop
 8004670:	e000      	b.n	8004674 <lcdUpdateDraw+0x4c>
    {
      break;
 8004672:	bf00      	nop
    }
  }
}
 8004674:	3708      	adds	r7, #8
 8004676:	46bd      	mov	sp, r7
 8004678:	bd80      	pop	{r7, pc}
 800467a:	bf00      	nop
 800467c:	20001250 	.word	0x20001250

08004680 <lcdGetFrameBuffer>:

  lcd.setWindow(x, y, w, h);
}

uint16_t *lcdGetFrameBuffer(void)
{
 8004680:	b480      	push	{r7}
 8004682:	af00      	add	r7, sp, #0
  return (uint16_t *)p_draw_frame_buf;
 8004684:	4b03      	ldr	r3, [pc, #12]	; (8004694 <lcdGetFrameBuffer+0x14>)
 8004686:	681b      	ldr	r3, [r3, #0]
}
 8004688:	4618      	mov	r0, r3
 800468a:	46bd      	mov	sp, r7
 800468c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004690:	4770      	bx	lr
 8004692:	bf00      	nop
 8004694:	20001260 	.word	0x20001260

08004698 <lcdDrawLine>:
  return LCD_HEIGHT;
}


void lcdDrawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color)
{
 8004698:	b590      	push	{r4, r7, lr}
 800469a:	b089      	sub	sp, #36	; 0x24
 800469c:	af00      	add	r7, sp, #0
 800469e:	4604      	mov	r4, r0
 80046a0:	4608      	mov	r0, r1
 80046a2:	4611      	mov	r1, r2
 80046a4:	461a      	mov	r2, r3
 80046a6:	4623      	mov	r3, r4
 80046a8:	80fb      	strh	r3, [r7, #6]
 80046aa:	4603      	mov	r3, r0
 80046ac:	80bb      	strh	r3, [r7, #4]
 80046ae:	460b      	mov	r3, r1
 80046b0:	807b      	strh	r3, [r7, #2]
 80046b2:	4613      	mov	r3, r2
 80046b4:	803b      	strh	r3, [r7, #0]
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
 80046b6:	f9b7 2000 	ldrsh.w	r2, [r7]
 80046ba:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80046be:	1ad3      	subs	r3, r2, r3
 80046c0:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80046c4:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80046c8:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 80046cc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80046d0:	1acb      	subs	r3, r1, r3
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	bfb8      	it	lt
 80046d6:	425b      	neglt	r3, r3
 80046d8:	429a      	cmp	r2, r3
 80046da:	bfcc      	ite	gt
 80046dc:	2301      	movgt	r3, #1
 80046de:	2300      	movle	r3, #0
 80046e0:	b2db      	uxtb	r3, r3
 80046e2:	837b      	strh	r3, [r7, #26]

  if (x0 < 0) x0 = 0;
 80046e4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	da01      	bge.n	80046f0 <lcdDrawLine+0x58>
 80046ec:	2300      	movs	r3, #0
 80046ee:	80fb      	strh	r3, [r7, #6]
  if (y0 < 0) y0 = 0;
 80046f0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	da01      	bge.n	80046fc <lcdDrawLine+0x64>
 80046f8:	2300      	movs	r3, #0
 80046fa:	80bb      	strh	r3, [r7, #4]
  if (x1 < 0) x1 = 0;
 80046fc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004700:	2b00      	cmp	r3, #0
 8004702:	da01      	bge.n	8004708 <lcdDrawLine+0x70>
 8004704:	2300      	movs	r3, #0
 8004706:	807b      	strh	r3, [r7, #2]
  if (y1 < 0) y1 = 0;
 8004708:	f9b7 3000 	ldrsh.w	r3, [r7]
 800470c:	2b00      	cmp	r3, #0
 800470e:	da01      	bge.n	8004714 <lcdDrawLine+0x7c>
 8004710:	2300      	movs	r3, #0
 8004712:	803b      	strh	r3, [r7, #0]


  if (steep)
 8004714:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d00b      	beq.n	8004734 <lcdDrawLine+0x9c>
  {
    _swap_int16_t(x0, y0);
 800471c:	88fb      	ldrh	r3, [r7, #6]
 800471e:	833b      	strh	r3, [r7, #24]
 8004720:	88bb      	ldrh	r3, [r7, #4]
 8004722:	80fb      	strh	r3, [r7, #6]
 8004724:	8b3b      	ldrh	r3, [r7, #24]
 8004726:	80bb      	strh	r3, [r7, #4]
    _swap_int16_t(x1, y1);
 8004728:	887b      	ldrh	r3, [r7, #2]
 800472a:	82fb      	strh	r3, [r7, #22]
 800472c:	883b      	ldrh	r3, [r7, #0]
 800472e:	807b      	strh	r3, [r7, #2]
 8004730:	8afb      	ldrh	r3, [r7, #22]
 8004732:	803b      	strh	r3, [r7, #0]
  }

  if (x0 > x1)
 8004734:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004738:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800473c:	429a      	cmp	r2, r3
 800473e:	dd0b      	ble.n	8004758 <lcdDrawLine+0xc0>
  {
    _swap_int16_t(x0, x1);
 8004740:	88fb      	ldrh	r3, [r7, #6]
 8004742:	82bb      	strh	r3, [r7, #20]
 8004744:	887b      	ldrh	r3, [r7, #2]
 8004746:	80fb      	strh	r3, [r7, #6]
 8004748:	8abb      	ldrh	r3, [r7, #20]
 800474a:	807b      	strh	r3, [r7, #2]
    _swap_int16_t(y0, y1);
 800474c:	88bb      	ldrh	r3, [r7, #4]
 800474e:	827b      	strh	r3, [r7, #18]
 8004750:	883b      	ldrh	r3, [r7, #0]
 8004752:	80bb      	strh	r3, [r7, #4]
 8004754:	8a7b      	ldrh	r3, [r7, #18]
 8004756:	803b      	strh	r3, [r7, #0]
  }

  int16_t dx, dy;
  dx = x1 - x0;
 8004758:	887a      	ldrh	r2, [r7, #2]
 800475a:	88fb      	ldrh	r3, [r7, #6]
 800475c:	1ad3      	subs	r3, r2, r3
 800475e:	b29b      	uxth	r3, r3
 8004760:	823b      	strh	r3, [r7, #16]
  dy = abs(y1 - y0);
 8004762:	f9b7 2000 	ldrsh.w	r2, [r7]
 8004766:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800476a:	1ad3      	subs	r3, r2, r3
 800476c:	2b00      	cmp	r3, #0
 800476e:	bfb8      	it	lt
 8004770:	425b      	neglt	r3, r3
 8004772:	81fb      	strh	r3, [r7, #14]

  int16_t err = dx / 2;
 8004774:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004778:	0fda      	lsrs	r2, r3, #31
 800477a:	4413      	add	r3, r2
 800477c:	105b      	asrs	r3, r3, #1
 800477e:	83fb      	strh	r3, [r7, #30]
  int16_t ystep;

  if (y0 < y1)
 8004780:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8004784:	f9b7 3000 	ldrsh.w	r3, [r7]
 8004788:	429a      	cmp	r2, r3
 800478a:	da02      	bge.n	8004792 <lcdDrawLine+0xfa>
  {
    ystep = 1;
 800478c:	2301      	movs	r3, #1
 800478e:	83bb      	strh	r3, [r7, #28]
 8004790:	e02d      	b.n	80047ee <lcdDrawLine+0x156>
  } else {
    ystep = -1;
 8004792:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004796:	83bb      	strh	r3, [r7, #28]
  }

  for (; x0<=x1; x0++)
 8004798:	e029      	b.n	80047ee <lcdDrawLine+0x156>
  {
    if (steep)
 800479a:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d006      	beq.n	80047b0 <lcdDrawLine+0x118>
    {
      lcdDrawPixel(y0, x0, color);
 80047a2:	88bb      	ldrh	r3, [r7, #4]
 80047a4:	88f9      	ldrh	r1, [r7, #6]
 80047a6:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 80047a8:	4618      	mov	r0, r3
 80047aa:	f7ff fec3 	bl	8004534 <lcdDrawPixel>
 80047ae:	e005      	b.n	80047bc <lcdDrawLine+0x124>
    } else
    {
      lcdDrawPixel(x0, y0, color);
 80047b0:	88fb      	ldrh	r3, [r7, #6]
 80047b2:	88b9      	ldrh	r1, [r7, #4]
 80047b4:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 80047b6:	4618      	mov	r0, r3
 80047b8:	f7ff febc 	bl	8004534 <lcdDrawPixel>
    }
    err -= dy;
 80047bc:	8bfa      	ldrh	r2, [r7, #30]
 80047be:	89fb      	ldrh	r3, [r7, #14]
 80047c0:	1ad3      	subs	r3, r2, r3
 80047c2:	b29b      	uxth	r3, r3
 80047c4:	83fb      	strh	r3, [r7, #30]
    if (err < 0)
 80047c6:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	da09      	bge.n	80047e2 <lcdDrawLine+0x14a>
    {
      y0 += ystep;
 80047ce:	88ba      	ldrh	r2, [r7, #4]
 80047d0:	8bbb      	ldrh	r3, [r7, #28]
 80047d2:	4413      	add	r3, r2
 80047d4:	b29b      	uxth	r3, r3
 80047d6:	80bb      	strh	r3, [r7, #4]
      err += dx;
 80047d8:	8bfa      	ldrh	r2, [r7, #30]
 80047da:	8a3b      	ldrh	r3, [r7, #16]
 80047dc:	4413      	add	r3, r2
 80047de:	b29b      	uxth	r3, r3
 80047e0:	83fb      	strh	r3, [r7, #30]
  for (; x0<=x1; x0++)
 80047e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80047e6:	b29b      	uxth	r3, r3
 80047e8:	3301      	adds	r3, #1
 80047ea:	b29b      	uxth	r3, r3
 80047ec:	80fb      	strh	r3, [r7, #6]
 80047ee:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80047f2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80047f6:	429a      	cmp	r2, r3
 80047f8:	ddcf      	ble.n	800479a <lcdDrawLine+0x102>
    }
  }
}
 80047fa:	bf00      	nop
 80047fc:	bf00      	nop
 80047fe:	3724      	adds	r7, #36	; 0x24
 8004800:	46bd      	mov	sp, r7
 8004802:	bd90      	pop	{r4, r7, pc}

08004804 <lcdDrawVLine>:
    }
  }
}

void lcdDrawVLine(int16_t x, int16_t y, int16_t h, uint16_t color)
{
 8004804:	b590      	push	{r4, r7, lr}
 8004806:	b085      	sub	sp, #20
 8004808:	af02      	add	r7, sp, #8
 800480a:	4604      	mov	r4, r0
 800480c:	4608      	mov	r0, r1
 800480e:	4611      	mov	r1, r2
 8004810:	461a      	mov	r2, r3
 8004812:	4623      	mov	r3, r4
 8004814:	80fb      	strh	r3, [r7, #6]
 8004816:	4603      	mov	r3, r0
 8004818:	80bb      	strh	r3, [r7, #4]
 800481a:	460b      	mov	r3, r1
 800481c:	807b      	strh	r3, [r7, #2]
 800481e:	4613      	mov	r3, r2
 8004820:	803b      	strh	r3, [r7, #0]
  lcdDrawLine(x, y, x, y+h-1, color);
 8004822:	88ba      	ldrh	r2, [r7, #4]
 8004824:	887b      	ldrh	r3, [r7, #2]
 8004826:	4413      	add	r3, r2
 8004828:	b29b      	uxth	r3, r3
 800482a:	3b01      	subs	r3, #1
 800482c:	b29b      	uxth	r3, r3
 800482e:	b21c      	sxth	r4, r3
 8004830:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004834:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8004838:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800483c:	883b      	ldrh	r3, [r7, #0]
 800483e:	9300      	str	r3, [sp, #0]
 8004840:	4623      	mov	r3, r4
 8004842:	f7ff ff29 	bl	8004698 <lcdDrawLine>
}
 8004846:	bf00      	nop
 8004848:	370c      	adds	r7, #12
 800484a:	46bd      	mov	sp, r7
 800484c:	bd90      	pop	{r4, r7, pc}
 800484e:	bf00      	nop

08004850 <lcdDrawFillRect>:
{
  lcdDrawLine(x, y, x+w-1, y, color);
}

void lcdDrawFillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 8004850:	b590      	push	{r4, r7, lr}
 8004852:	b085      	sub	sp, #20
 8004854:	af00      	add	r7, sp, #0
 8004856:	4604      	mov	r4, r0
 8004858:	4608      	mov	r0, r1
 800485a:	4611      	mov	r1, r2
 800485c:	461a      	mov	r2, r3
 800485e:	4623      	mov	r3, r4
 8004860:	80fb      	strh	r3, [r7, #6]
 8004862:	4603      	mov	r3, r0
 8004864:	80bb      	strh	r3, [r7, #4]
 8004866:	460b      	mov	r3, r1
 8004868:	807b      	strh	r3, [r7, #2]
 800486a:	4613      	mov	r3, r2
 800486c:	803b      	strh	r3, [r7, #0]
  for (int16_t i=x; i<x+w; i++)
 800486e:	88fb      	ldrh	r3, [r7, #6]
 8004870:	81fb      	strh	r3, [r7, #14]
 8004872:	e00e      	b.n	8004892 <lcdDrawFillRect+0x42>
  {
    lcdDrawVLine(i, y, h, color);
 8004874:	8c3b      	ldrh	r3, [r7, #32]
 8004876:	f9b7 2000 	ldrsh.w	r2, [r7]
 800487a:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800487e:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 8004882:	f7ff ffbf 	bl	8004804 <lcdDrawVLine>
  for (int16_t i=x; i<x+w; i++)
 8004886:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800488a:	b29b      	uxth	r3, r3
 800488c:	3301      	adds	r3, #1
 800488e:	b29b      	uxth	r3, r3
 8004890:	81fb      	strh	r3, [r7, #14]
 8004892:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8004896:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 800489a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800489e:	440b      	add	r3, r1
 80048a0:	429a      	cmp	r2, r3
 80048a2:	dbe7      	blt.n	8004874 <lcdDrawFillRect+0x24>
  }
}
 80048a4:	bf00      	nop
 80048a6:	bf00      	nop
 80048a8:	3714      	adds	r7, #20
 80048aa:	46bd      	mov	sp, r7
 80048ac:	bd90      	pop	{r4, r7, pc}
 80048ae:	bf00      	nop

080048b0 <lcdPrintf>:
{
  lcdDrawFillRect(0, 0, HW_LCD_WIDTH, HW_LCD_HEIGHT, color);
}

void lcdPrintf(int x, int y, uint16_t color,  const char *fmt, ...)
{
 80048b0:	b408      	push	{r3}
 80048b2:	b590      	push	{r4, r7, lr}
 80048b4:	b0d8      	sub	sp, #352	; 0x160
 80048b6:	af02      	add	r7, sp, #8
 80048b8:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80048bc:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80048c0:	6018      	str	r0, [r3, #0]
 80048c2:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80048c6:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80048ca:	6019      	str	r1, [r3, #0]
 80048cc:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80048d0:	f5a3 73a9 	sub.w	r3, r3, #338	; 0x152
 80048d4:	801a      	strh	r2, [r3, #0]
  va_list arg;
  va_start (arg, fmt);
 80048d6:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80048da:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
  int32_t len;
  char print_buffer[256];
  int Size_Char;
  int i, x_Pre = x;
 80048de:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80048e2:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
  han_font_t FontBuf;
  uint8_t font_width;
  uint8_t font_height;


  len = vsnprintf(print_buffer, 255, fmt, arg);
 80048ec:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 80048f0:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80048f4:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
 80048f8:	21ff      	movs	r1, #255	; 0xff
 80048fa:	f012 fbdb 	bl	80170b4 <vsniprintf>
 80048fe:	f8c7 0148 	str.w	r0, [r7, #328]	; 0x148
  va_end (arg);

  if (font_tbl[lcd_font]->data != NULL)
 8004902:	4b80      	ldr	r3, [pc, #512]	; (8004b04 <lcdPrintf+0x254>)
 8004904:	781b      	ldrb	r3, [r3, #0]
 8004906:	461a      	mov	r2, r3
 8004908:	4b7f      	ldr	r3, [pc, #508]	; (8004b08 <lcdPrintf+0x258>)
 800490a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800490e:	685b      	ldr	r3, [r3, #4]
 8004910:	2b00      	cmp	r3, #0
 8004912:	d072      	beq.n	80049fa <lcdPrintf+0x14a>
  {
    for( i=0; i<len; i+=Size_Char )
 8004914:	2300      	movs	r3, #0
 8004916:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800491a:	e067      	b.n	80049ec <lcdPrintf+0x13c>
    {
      disEngFont(x, y, print_buffer[i], font_tbl[lcd_font], color);
 800491c:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8004920:	f5a3 728e 	sub.w	r2, r3, #284	; 0x11c
 8004924:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8004928:	4413      	add	r3, r2
 800492a:	781a      	ldrb	r2, [r3, #0]
 800492c:	4b75      	ldr	r3, [pc, #468]	; (8004b04 <lcdPrintf+0x254>)
 800492e:	781b      	ldrb	r3, [r3, #0]
 8004930:	4619      	mov	r1, r3
 8004932:	4b75      	ldr	r3, [pc, #468]	; (8004b08 <lcdPrintf+0x258>)
 8004934:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
 8004938:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 800493c:	f5a3 71a8 	sub.w	r1, r3, #336	; 0x150
 8004940:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8004944:	f5a3 70a6 	sub.w	r0, r3, #332	; 0x14c
 8004948:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 800494c:	f5a3 73a9 	sub.w	r3, r3, #338	; 0x152
 8004950:	881b      	ldrh	r3, [r3, #0]
 8004952:	9300      	str	r3, [sp, #0]
 8004954:	4623      	mov	r3, r4
 8004956:	6809      	ldr	r1, [r1, #0]
 8004958:	6800      	ldr	r0, [r0, #0]
 800495a:	f000 f92d 	bl	8004bb8 <disEngFont>

      Size_Char = 1;
 800495e:	2301      	movs	r3, #1
 8004960:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
      font_width = font_tbl[lcd_font]->width;
 8004964:	4b67      	ldr	r3, [pc, #412]	; (8004b04 <lcdPrintf+0x254>)
 8004966:	781b      	ldrb	r3, [r3, #0]
 8004968:	461a      	mov	r2, r3
 800496a:	4b67      	ldr	r3, [pc, #412]	; (8004b08 <lcdPrintf+0x258>)
 800496c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004970:	781b      	ldrb	r3, [r3, #0]
 8004972:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
      font_height = font_tbl[lcd_font]->height;
 8004976:	4b63      	ldr	r3, [pc, #396]	; (8004b04 <lcdPrintf+0x254>)
 8004978:	781b      	ldrb	r3, [r3, #0]
 800497a:	461a      	mov	r2, r3
 800497c:	4b62      	ldr	r3, [pc, #392]	; (8004b08 <lcdPrintf+0x258>)
 800497e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004982:	785b      	ldrb	r3, [r3, #1]
 8004984:	f887 3143 	strb.w	r3, [r7, #323]	; 0x143
      x += font_width;
 8004988:	f897 2153 	ldrb.w	r2, [r7, #339]	; 0x153
 800498c:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8004990:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8004994:	f507 71ac 	add.w	r1, r7, #344	; 0x158
 8004998:	f5a1 71a6 	sub.w	r1, r1, #332	; 0x14c
 800499c:	6809      	ldr	r1, [r1, #0]
 800499e:	440a      	add	r2, r1
 80049a0:	601a      	str	r2, [r3, #0]

      if ((x+font_width) > HW_LCD_WIDTH)
 80049a2:	f897 2153 	ldrb.w	r2, [r7, #339]	; 0x153
 80049a6:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80049aa:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	4413      	add	r3, r2
 80049b2:	2b80      	cmp	r3, #128	; 0x80
 80049b4:	dd13      	ble.n	80049de <lcdPrintf+0x12e>
      {
        x  = x_Pre;
 80049b6:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80049ba:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80049be:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80049c2:	601a      	str	r2, [r3, #0]
        y += font_height;
 80049c4:	f897 2143 	ldrb.w	r2, [r7, #323]	; 0x143
 80049c8:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80049cc:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80049d0:	f507 71ac 	add.w	r1, r7, #344	; 0x158
 80049d4:	f5a1 71a8 	sub.w	r1, r1, #336	; 0x150
 80049d8:	6809      	ldr	r1, [r1, #0]
 80049da:	440a      	add	r2, r1
 80049dc:	601a      	str	r2, [r3, #0]
    for( i=0; i<len; i+=Size_Char )
 80049de:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 80049e2:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80049e6:	4413      	add	r3, r2
 80049e8:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80049ec:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 80049f0:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80049f4:	429a      	cmp	r2, r3
 80049f6:	db91      	blt.n	800491c <lcdPrintf+0x6c>
      }

      if( FontBuf.Code_Type == PHAN_END_CODE ) break;
    }
  }
}
 80049f8:	e07b      	b.n	8004af2 <lcdPrintf+0x242>
    for( i=0; i<len; i+=Size_Char )
 80049fa:	2300      	movs	r3, #0
 80049fc:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8004a00:	e06f      	b.n	8004ae2 <lcdPrintf+0x232>
      hanFontLoad( &print_buffer[i], &FontBuf );
 8004a02:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8004a06:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8004a0a:	4413      	add	r3, r2
 8004a0c:	f107 0214 	add.w	r2, r7, #20
 8004a10:	4611      	mov	r1, r2
 8004a12:	4618      	mov	r0, r3
 8004a14:	f7fd f8d2 	bl	8001bbc <hanFontLoad>
      disHanFont( x, y, &FontBuf, color);
 8004a18:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8004a1c:	f5a3 73a9 	sub.w	r3, r3, #338	; 0x152
 8004a20:	881b      	ldrh	r3, [r3, #0]
 8004a22:	f107 0214 	add.w	r2, r7, #20
 8004a26:	f507 71ac 	add.w	r1, r7, #344	; 0x158
 8004a2a:	f5a1 71a8 	sub.w	r1, r1, #336	; 0x150
 8004a2e:	f507 70ac 	add.w	r0, r7, #344	; 0x158
 8004a32:	f5a0 70a6 	sub.w	r0, r0, #332	; 0x14c
 8004a36:	6809      	ldr	r1, [r1, #0]
 8004a38:	6800      	ldr	r0, [r0, #0]
 8004a3a:	f000 f867 	bl	8004b0c <disHanFont>
      Size_Char = FontBuf.Size_Char;
 8004a3e:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8004a42:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8004a46:	885b      	ldrh	r3, [r3, #2]
 8004a48:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
      if (Size_Char >= 2)
 8004a4c:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8004a50:	2b01      	cmp	r3, #1
 8004a52:	dd0e      	ble.n	8004a72 <lcdPrintf+0x1c2>
        font_width = 16;
 8004a54:	2310      	movs	r3, #16
 8004a56:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
        x += 2*8;
 8004a5a:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8004a5e:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8004a62:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 8004a66:	f5a2 72a6 	sub.w	r2, r2, #332	; 0x14c
 8004a6a:	6812      	ldr	r2, [r2, #0]
 8004a6c:	3210      	adds	r2, #16
 8004a6e:	601a      	str	r2, [r3, #0]
 8004a70:	e00d      	b.n	8004a8e <lcdPrintf+0x1de>
        font_width = 8;
 8004a72:	2308      	movs	r3, #8
 8004a74:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
        x += 1*8;
 8004a78:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8004a7c:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8004a80:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 8004a84:	f5a2 72a6 	sub.w	r2, r2, #332	; 0x14c
 8004a88:	6812      	ldr	r2, [r2, #0]
 8004a8a:	3208      	adds	r2, #8
 8004a8c:	601a      	str	r2, [r3, #0]
      if ((x+font_width) > HW_LCD_WIDTH)
 8004a8e:	f897 2153 	ldrb.w	r2, [r7, #339]	; 0x153
 8004a92:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8004a96:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4413      	add	r3, r2
 8004a9e:	2b80      	cmp	r3, #128	; 0x80
 8004aa0:	dd11      	ble.n	8004ac6 <lcdPrintf+0x216>
        x  = x_Pre;
 8004aa2:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8004aa6:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8004aaa:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8004aae:	601a      	str	r2, [r3, #0]
        y += 16;
 8004ab0:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8004ab4:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8004ab8:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 8004abc:	f5a2 72a8 	sub.w	r2, r2, #336	; 0x150
 8004ac0:	6812      	ldr	r2, [r2, #0]
 8004ac2:	3210      	adds	r2, #16
 8004ac4:	601a      	str	r2, [r3, #0]
      if( FontBuf.Code_Type == PHAN_END_CODE ) break;
 8004ac6:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8004aca:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8004ace:	889b      	ldrh	r3, [r3, #4]
 8004ad0:	2b04      	cmp	r3, #4
 8004ad2:	d00d      	beq.n	8004af0 <lcdPrintf+0x240>
    for( i=0; i<len; i+=Size_Char )
 8004ad4:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 8004ad8:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8004adc:	4413      	add	r3, r2
 8004ade:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8004ae2:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 8004ae6:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8004aea:	429a      	cmp	r2, r3
 8004aec:	db89      	blt.n	8004a02 <lcdPrintf+0x152>
}
 8004aee:	e000      	b.n	8004af2 <lcdPrintf+0x242>
      if( FontBuf.Code_Type == PHAN_END_CODE ) break;
 8004af0:	bf00      	nop
}
 8004af2:	bf00      	nop
 8004af4:	f507 77ac 	add.w	r7, r7, #344	; 0x158
 8004af8:	46bd      	mov	sp, r7
 8004afa:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8004afe:	b001      	add	sp, #4
 8004b00:	4770      	bx	lr
 8004b02:	bf00      	nop
 8004b04:	20000085 	.word	0x20000085
 8004b08:	20000088 	.word	0x20000088

08004b0c <disHanFont>:

  return str_len;
}

void disHanFont(int x, int y, han_font_t *FontPtr, uint16_t textcolor)
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b088      	sub	sp, #32
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	60f8      	str	r0, [r7, #12]
 8004b14:	60b9      	str	r1, [r7, #8]
 8004b16:	607a      	str	r2, [r7, #4]
 8004b18:	807b      	strh	r3, [r7, #2]
  uint16_t    i, j, Loop;
  uint16_t  FontSize = FontPtr->Size_Char;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	885b      	ldrh	r3, [r3, #2]
 8004b1e:	833b      	strh	r3, [r7, #24]
  uint16_t index_x;

  if (FontSize > 2)
 8004b20:	8b3b      	ldrh	r3, [r7, #24]
 8004b22:	2b02      	cmp	r3, #2
 8004b24:	d901      	bls.n	8004b2a <disHanFont+0x1e>
  {
    FontSize = 2;
 8004b26:	2302      	movs	r3, #2
 8004b28:	833b      	strh	r3, [r7, #24]
  }

  for ( i = 0 ; i < 16 ; i++ )        // 16 Lines per Font/Char
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	83fb      	strh	r3, [r7, #30]
 8004b2e:	e03a      	b.n	8004ba6 <disHanFont+0x9a>
  {
    index_x = 0;
 8004b30:	2300      	movs	r3, #0
 8004b32:	82fb      	strh	r3, [r7, #22]
    for ( j = 0 ; j < FontSize ; j++ )      // 16 x 16 (2 Bytes)
 8004b34:	2300      	movs	r3, #0
 8004b36:	83bb      	strh	r3, [r7, #28]
 8004b38:	e02e      	b.n	8004b98 <disHanFont+0x8c>
    {
      uint8_t font_data;

      font_data = FontPtr->FontBuffer[i*FontSize +j];
 8004b3a:	8bfb      	ldrh	r3, [r7, #30]
 8004b3c:	8b3a      	ldrh	r2, [r7, #24]
 8004b3e:	fb03 f202 	mul.w	r2, r3, r2
 8004b42:	8bbb      	ldrh	r3, [r7, #28]
 8004b44:	4413      	add	r3, r2
 8004b46:	687a      	ldr	r2, [r7, #4]
 8004b48:	4413      	add	r3, r2
 8004b4a:	799b      	ldrb	r3, [r3, #6]
 8004b4c:	757b      	strb	r3, [r7, #21]

      for( Loop=0; Loop<8; Loop++ )
 8004b4e:	2300      	movs	r3, #0
 8004b50:	837b      	strh	r3, [r7, #26]
 8004b52:	e01b      	b.n	8004b8c <disHanFont+0x80>
      {
        if( (font_data<<Loop) & (0x80))
 8004b54:	7d7a      	ldrb	r2, [r7, #21]
 8004b56:	8b7b      	ldrh	r3, [r7, #26]
 8004b58:	fa02 f303 	lsl.w	r3, r2, r3
 8004b5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d00d      	beq.n	8004b80 <disHanFont+0x74>
        {
          lcdDrawPixel(x + index_x, y + i, textcolor);
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	b29a      	uxth	r2, r3
 8004b68:	8afb      	ldrh	r3, [r7, #22]
 8004b6a:	4413      	add	r3, r2
 8004b6c:	b298      	uxth	r0, r3
 8004b6e:	68bb      	ldr	r3, [r7, #8]
 8004b70:	b29a      	uxth	r2, r3
 8004b72:	8bfb      	ldrh	r3, [r7, #30]
 8004b74:	4413      	add	r3, r2
 8004b76:	b29b      	uxth	r3, r3
 8004b78:	887a      	ldrh	r2, [r7, #2]
 8004b7a:	4619      	mov	r1, r3
 8004b7c:	f7ff fcda 	bl	8004534 <lcdDrawPixel>
        }
        index_x++;
 8004b80:	8afb      	ldrh	r3, [r7, #22]
 8004b82:	3301      	adds	r3, #1
 8004b84:	82fb      	strh	r3, [r7, #22]
      for( Loop=0; Loop<8; Loop++ )
 8004b86:	8b7b      	ldrh	r3, [r7, #26]
 8004b88:	3301      	adds	r3, #1
 8004b8a:	837b      	strh	r3, [r7, #26]
 8004b8c:	8b7b      	ldrh	r3, [r7, #26]
 8004b8e:	2b07      	cmp	r3, #7
 8004b90:	d9e0      	bls.n	8004b54 <disHanFont+0x48>
    for ( j = 0 ; j < FontSize ; j++ )      // 16 x 16 (2 Bytes)
 8004b92:	8bbb      	ldrh	r3, [r7, #28]
 8004b94:	3301      	adds	r3, #1
 8004b96:	83bb      	strh	r3, [r7, #28]
 8004b98:	8bba      	ldrh	r2, [r7, #28]
 8004b9a:	8b3b      	ldrh	r3, [r7, #24]
 8004b9c:	429a      	cmp	r2, r3
 8004b9e:	d3cc      	bcc.n	8004b3a <disHanFont+0x2e>
  for ( i = 0 ; i < 16 ; i++ )        // 16 Lines per Font/Char
 8004ba0:	8bfb      	ldrh	r3, [r7, #30]
 8004ba2:	3301      	adds	r3, #1
 8004ba4:	83fb      	strh	r3, [r7, #30]
 8004ba6:	8bfb      	ldrh	r3, [r7, #30]
 8004ba8:	2b0f      	cmp	r3, #15
 8004baa:	d9c1      	bls.n	8004b30 <disHanFont+0x24>
      }
    }
  }
}
 8004bac:	bf00      	nop
 8004bae:	bf00      	nop
 8004bb0:	3720      	adds	r7, #32
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	bd80      	pop	{r7, pc}
 8004bb6:	bf00      	nop

08004bb8 <disEngFont>:

void disEngFont(int x, int y, char ch, lcd_font_t *font, uint16_t textcolor)
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b088      	sub	sp, #32
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	60f8      	str	r0, [r7, #12]
 8004bc0:	60b9      	str	r1, [r7, #8]
 8004bc2:	603b      	str	r3, [r7, #0]
 8004bc4:	4613      	mov	r3, r2
 8004bc6:	71fb      	strb	r3, [r7, #7]
  uint32_t i, b, j;


  // We gaan door het font
  for (i = 0; i < font->height; i++)
 8004bc8:	2300      	movs	r3, #0
 8004bca:	61fb      	str	r3, [r7, #28]
 8004bcc:	e035      	b.n	8004c3a <disEngFont+0x82>
  {
    b = font->data[(ch - 32) * font->height + i];
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	685a      	ldr	r2, [r3, #4]
 8004bd2:	79fb      	ldrb	r3, [r7, #7]
 8004bd4:	3b20      	subs	r3, #32
 8004bd6:	6839      	ldr	r1, [r7, #0]
 8004bd8:	7849      	ldrb	r1, [r1, #1]
 8004bda:	fb01 f303 	mul.w	r3, r1, r3
 8004bde:	4619      	mov	r1, r3
 8004be0:	69fb      	ldr	r3, [r7, #28]
 8004be2:	440b      	add	r3, r1
 8004be4:	005b      	lsls	r3, r3, #1
 8004be6:	4413      	add	r3, r2
 8004be8:	881b      	ldrh	r3, [r3, #0]
 8004bea:	617b      	str	r3, [r7, #20]
    for (j = 0; j < font->width; j++)
 8004bec:	2300      	movs	r3, #0
 8004bee:	61bb      	str	r3, [r7, #24]
 8004bf0:	e01a      	b.n	8004c28 <disEngFont+0x70>
    {
      if ((b << j) & 0x8000)
 8004bf2:	697a      	ldr	r2, [r7, #20]
 8004bf4:	69bb      	ldr	r3, [r7, #24]
 8004bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8004bfa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d00f      	beq.n	8004c22 <disEngFont+0x6a>
      {
        lcdDrawPixel(x + j, (y + i), textcolor);
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	b29a      	uxth	r2, r3
 8004c06:	69bb      	ldr	r3, [r7, #24]
 8004c08:	b29b      	uxth	r3, r3
 8004c0a:	4413      	add	r3, r2
 8004c0c:	b298      	uxth	r0, r3
 8004c0e:	68bb      	ldr	r3, [r7, #8]
 8004c10:	b29a      	uxth	r2, r3
 8004c12:	69fb      	ldr	r3, [r7, #28]
 8004c14:	b29b      	uxth	r3, r3
 8004c16:	4413      	add	r3, r2
 8004c18:	b29b      	uxth	r3, r3
 8004c1a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8004c1c:	4619      	mov	r1, r3
 8004c1e:	f7ff fc89 	bl	8004534 <lcdDrawPixel>
    for (j = 0; j < font->width; j++)
 8004c22:	69bb      	ldr	r3, [r7, #24]
 8004c24:	3301      	adds	r3, #1
 8004c26:	61bb      	str	r3, [r7, #24]
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	781b      	ldrb	r3, [r3, #0]
 8004c2c:	461a      	mov	r2, r3
 8004c2e:	69bb      	ldr	r3, [r7, #24]
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d3de      	bcc.n	8004bf2 <disEngFont+0x3a>
  for (i = 0; i < font->height; i++)
 8004c34:	69fb      	ldr	r3, [r7, #28]
 8004c36:	3301      	adds	r3, #1
 8004c38:	61fb      	str	r3, [r7, #28]
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	785b      	ldrb	r3, [r3, #1]
 8004c3e:	461a      	mov	r2, r3
 8004c40:	69fb      	ldr	r3, [r7, #28]
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d3c3      	bcc.n	8004bce <disEngFont+0x16>
      }
    }
  }
}
 8004c46:	bf00      	nop
 8004c48:	bf00      	nop
 8004c4a:	3720      	adds	r7, #32
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	bd80      	pop	{r7, pc}

08004c50 <lcdSetFont>:

void lcdSetFont(LcdFont font)
{
 8004c50:	b480      	push	{r7}
 8004c52:	b083      	sub	sp, #12
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	4603      	mov	r3, r0
 8004c58:	71fb      	strb	r3, [r7, #7]
  lcd_font = font;
 8004c5a:	4a04      	ldr	r2, [pc, #16]	; (8004c6c <lcdSetFont+0x1c>)
 8004c5c:	79fb      	ldrb	r3, [r7, #7]
 8004c5e:	7013      	strb	r3, [r2, #0]
}
 8004c60:	bf00      	nop
 8004c62:	370c      	adds	r7, #12
 8004c64:	46bd      	mov	sp, r7
 8004c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6a:	4770      	bx	lr
 8004c6c:	20000085 	.word	0x20000085

08004c70 <cliLcd>:
}

#ifdef _USE_HW_CLI

void cliLcd(cli_args_t *args)
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b086      	sub	sp, #24
 8004c74:	af02      	add	r7, sp, #8
 8004c76:	6078      	str	r0, [r7, #4]
	bool ret = false;
 8004c78:	2300      	movs	r3, #0
 8004c7a:	73fb      	strb	r3, [r7, #15]

	if(args->argc == 1 && args->isStr(0, "test") == true)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	881b      	ldrh	r3, [r3, #0]
 8004c80:	2b01      	cmp	r3, #1
 8004c82:	d163      	bne.n	8004d4c <cliLcd+0xdc>
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	695b      	ldr	r3, [r3, #20]
 8004c88:	4958      	ldr	r1, [pc, #352]	; (8004dec <cliLcd+0x17c>)
 8004c8a:	2000      	movs	r0, #0
 8004c8c:	4798      	blx	r3
 8004c8e:	4603      	mov	r3, r0
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d05b      	beq.n	8004d4c <cliLcd+0xdc>
	{
		lcdSetFont(LCD_FONT_HAN);
 8004c94:	2003      	movs	r0, #3
 8004c96:	f7ff ffdb 	bl	8004c50 <lcdSetFont>

		while(cliKeepLoop())
 8004c9a:	e04b      	b.n	8004d34 <cliLcd+0xc4>
		{
			if(lcdDrawAvailable() == true)
 8004c9c:	f7ff fc7a 	bl	8004594 <lcdDrawAvailable>
 8004ca0:	4603      	mov	r3, r0
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d046      	beq.n	8004d34 <cliLcd+0xc4>
			{
				lcdClearBuffer(black);
 8004ca6:	2000      	movs	r0, #0
 8004ca8:	f7ff fc4e 	bl	8004548 <lcdClearBuffer>

				lcdPrintf(25, 16*0, green, "[LCD Test]");
 8004cac:	4b50      	ldr	r3, [pc, #320]	; (8004df0 <cliLcd+0x180>)
 8004cae:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8004cb2:	2100      	movs	r1, #0
 8004cb4:	2019      	movs	r0, #25
 8004cb6:	f7ff fdfb 	bl	80048b0 <lcdPrintf>

				lcdPrintf(0, 16*1, white, "%d fps", lcdGetFps());
 8004cba:	f7ff fc53 	bl	8004564 <lcdGetFps>
 8004cbe:	4603      	mov	r3, r0
 8004cc0:	9300      	str	r3, [sp, #0]
 8004cc2:	4b4c      	ldr	r3, [pc, #304]	; (8004df4 <cliLcd+0x184>)
 8004cc4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004cc8:	2110      	movs	r1, #16
 8004cca:	2000      	movs	r0, #0
 8004ccc:	f7ff fdf0 	bl	80048b0 <lcdPrintf>
				lcdPrintf(0, 16*2, white, "%d ms", lcdGetFpsTime());
 8004cd0:	f7ff fc54 	bl	800457c <lcdGetFpsTime>
 8004cd4:	4603      	mov	r3, r0
 8004cd6:	9300      	str	r3, [sp, #0]
 8004cd8:	4b47      	ldr	r3, [pc, #284]	; (8004df8 <cliLcd+0x188>)
 8004cda:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004cde:	2120      	movs	r1, #32
 8004ce0:	2000      	movs	r0, #0
 8004ce2:	f7ff fde5 	bl	80048b0 <lcdPrintf>
				lcdPrintf(0, 16*3, white, "%d ms", millis());
 8004ce6:	f7fc fe61 	bl	80019ac <millis>
 8004cea:	4603      	mov	r3, r0
 8004cec:	9300      	str	r3, [sp, #0]
 8004cee:	4b42      	ldr	r3, [pc, #264]	; (8004df8 <cliLcd+0x188>)
 8004cf0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004cf4:	2130      	movs	r1, #48	; 0x30
 8004cf6:	2000      	movs	r0, #0
 8004cf8:	f7ff fdda 	bl	80048b0 <lcdPrintf>

				lcdDrawFillRect(0, 70, 10, 10, red);
 8004cfc:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004d00:	9300      	str	r3, [sp, #0]
 8004d02:	230a      	movs	r3, #10
 8004d04:	220a      	movs	r2, #10
 8004d06:	2146      	movs	r1, #70	; 0x46
 8004d08:	2000      	movs	r0, #0
 8004d0a:	f7ff fda1 	bl	8004850 <lcdDrawFillRect>
				lcdDrawFillRect(10, 70, 10, 10, green);
 8004d0e:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8004d12:	9300      	str	r3, [sp, #0]
 8004d14:	230a      	movs	r3, #10
 8004d16:	220a      	movs	r2, #10
 8004d18:	2146      	movs	r1, #70	; 0x46
 8004d1a:	200a      	movs	r0, #10
 8004d1c:	f7ff fd98 	bl	8004850 <lcdDrawFillRect>
				lcdDrawFillRect(20, 70, 10, 10, blue);
 8004d20:	231f      	movs	r3, #31
 8004d22:	9300      	str	r3, [sp, #0]
 8004d24:	230a      	movs	r3, #10
 8004d26:	220a      	movs	r2, #10
 8004d28:	2146      	movs	r1, #70	; 0x46
 8004d2a:	2014      	movs	r0, #20
 8004d2c:	f7ff fd90 	bl	8004850 <lcdDrawFillRect>

				lcdRequestDraw();
 8004d30:	f7ff fc46 	bl	80045c0 <lcdRequestDraw>
		while(cliKeepLoop())
 8004d34:	f7fe faaa 	bl	800328c <cliKeepLoop>
 8004d38:	4603      	mov	r3, r0
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d1ae      	bne.n	8004c9c <cliLcd+0x2c>
			}
		}

		lcdClearBuffer(black);
 8004d3e:	2000      	movs	r0, #0
 8004d40:	f7ff fc02 	bl	8004548 <lcdClearBuffer>
		lcdUpdateDraw();
 8004d44:	f7ff fc70 	bl	8004628 <lcdUpdateDraw>

		ret = true;
 8004d48:	2301      	movs	r3, #1
 8004d4a:	73fb      	strb	r3, [r7, #15]
	}

	if(args->argc == 2 && args->isStr(0, "bl") == true)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	881b      	ldrh	r3, [r3, #0]
 8004d50:	2b02      	cmp	r3, #2
 8004d52:	d126      	bne.n	8004da2 <cliLcd+0x132>
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	695b      	ldr	r3, [r3, #20]
 8004d58:	4928      	ldr	r1, [pc, #160]	; (8004dfc <cliLcd+0x18c>)
 8004d5a:	2000      	movs	r0, #0
 8004d5c:	4798      	blx	r3
 8004d5e:	4603      	mov	r3, r0
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d01e      	beq.n	8004da2 <cliLcd+0x132>
	{
		char *bl_status;

		bl_status = args->getStr(1);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	691b      	ldr	r3, [r3, #16]
 8004d68:	2001      	movs	r0, #1
 8004d6a:	4798      	blx	r3
 8004d6c:	60b8      	str	r0, [r7, #8]

		if(bl_status != NULL)
 8004d6e:	68bb      	ldr	r3, [r7, #8]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d014      	beq.n	8004d9e <cliLcd+0x12e>
		{
			if(strcmp(bl_status, "on") == 0)
 8004d74:	4922      	ldr	r1, [pc, #136]	; (8004e00 <cliLcd+0x190>)
 8004d76:	68b8      	ldr	r0, [r7, #8]
 8004d78:	f7fb fa32 	bl	80001e0 <strcmp>
 8004d7c:	4603      	mov	r3, r0
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d103      	bne.n	8004d8a <cliLcd+0x11a>
			{
				lcdSetBackLight(100);
 8004d82:	2064      	movs	r0, #100	; 0x64
 8004d84:	f7ff fbb0 	bl	80044e8 <lcdSetBackLight>
 8004d88:	e009      	b.n	8004d9e <cliLcd+0x12e>
			}
			else if(strcmp(bl_status, "off") == 0)
 8004d8a:	491e      	ldr	r1, [pc, #120]	; (8004e04 <cliLcd+0x194>)
 8004d8c:	68b8      	ldr	r0, [r7, #8]
 8004d8e:	f7fb fa27 	bl	80001e0 <strcmp>
 8004d92:	4603      	mov	r3, r0
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d102      	bne.n	8004d9e <cliLcd+0x12e>
			{
				lcdSetBackLight(0);
 8004d98:	2000      	movs	r0, #0
 8004d9a:	f7ff fba5 	bl	80044e8 <lcdSetBackLight>
			else
			{
			}
		}

		ret = true;
 8004d9e:	2301      	movs	r3, #1
 8004da0:	73fb      	strb	r3, [r7, #15]
	}

	if(args->argc == 1 && args->isStr(0, "cb") == true)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	881b      	ldrh	r3, [r3, #0]
 8004da6:	2b01      	cmp	r3, #1
 8004da8:	d10d      	bne.n	8004dc6 <cliLcd+0x156>
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	695b      	ldr	r3, [r3, #20]
 8004dae:	4916      	ldr	r1, [pc, #88]	; (8004e08 <cliLcd+0x198>)
 8004db0:	2000      	movs	r0, #0
 8004db2:	4798      	blx	r3
 8004db4:	4603      	mov	r3, r0
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d005      	beq.n	8004dc6 <cliLcd+0x156>
	{
		lcdClearBuffer(white);
 8004dba:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8004dbe:	f7ff fbc3 	bl	8004548 <lcdClearBuffer>

		ret = true;
 8004dc2:	2301      	movs	r3, #1
 8004dc4:	73fb      	strb	r3, [r7, #15]
	}

	if(ret != true)
 8004dc6:	7bfb      	ldrb	r3, [r7, #15]
 8004dc8:	f083 0301 	eor.w	r3, r3, #1
 8004dcc:	b2db      	uxtb	r3, r3
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d008      	beq.n	8004de4 <cliLcd+0x174>
	{
		cliPrintf("lcd test\n");
 8004dd2:	480e      	ldr	r0, [pc, #56]	; (8004e0c <cliLcd+0x19c>)
 8004dd4:	f7fe f960 	bl	8003098 <cliPrintf>
		cliPrintf("lcd bl on/off\n");
 8004dd8:	480d      	ldr	r0, [pc, #52]	; (8004e10 <cliLcd+0x1a0>)
 8004dda:	f7fe f95d 	bl	8003098 <cliPrintf>
		cliPrintf("lcd cb\n");
 8004dde:	480d      	ldr	r0, [pc, #52]	; (8004e14 <cliLcd+0x1a4>)
 8004de0:	f7fe f95a 	bl	8003098 <cliPrintf>
	}
}
 8004de4:	bf00      	nop
 8004de6:	3710      	adds	r7, #16
 8004de8:	46bd      	mov	sp, r7
 8004dea:	bd80      	pop	{r7, pc}
 8004dec:	08025948 	.word	0x08025948
 8004df0:	08025950 	.word	0x08025950
 8004df4:	0802595c 	.word	0x0802595c
 8004df8:	08025964 	.word	0x08025964
 8004dfc:	0802596c 	.word	0x0802596c
 8004e00:	08025970 	.word	0x08025970
 8004e04:	08025974 	.word	0x08025974
 8004e08:	08025978 	.word	0x08025978
 8004e0c:	0802597c 	.word	0x0802597c
 8004e10:	08025988 	.word	0x08025988
 8004e14:	08025998 	.word	0x08025998

08004e18 <ledInit>:
				{GPIOC, GPIO_PIN_13, GPIO_PIN_RESET, GPIO_PIN_SET},
		};


bool ledInit(void)
{
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b082      	sub	sp, #8
 8004e1c:	af00      	add	r7, sp, #0
	for(int i=0; i<LED_MAX_CH; i++)
 8004e1e:	2300      	movs	r3, #0
 8004e20:	607b      	str	r3, [r7, #4]
 8004e22:	e007      	b.n	8004e34 <ledInit+0x1c>
	{
		ledOff(i);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	b2db      	uxtb	r3, r3
 8004e28:	4618      	mov	r0, r3
 8004e2a:	f000 f813 	bl	8004e54 <ledOff>
	for(int i=0; i<LED_MAX_CH; i++)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	3301      	adds	r3, #1
 8004e32:	607b      	str	r3, [r7, #4]
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	ddf4      	ble.n	8004e24 <ledInit+0xc>
	}

#ifdef _USE_HW_CLI
	cliAdd("led", cliLed);
 8004e3a:	4904      	ldr	r1, [pc, #16]	; (8004e4c <ledInit+0x34>)
 8004e3c:	4804      	ldr	r0, [pc, #16]	; (8004e50 <ledInit+0x38>)
 8004e3e:	f7fe fa3b 	bl	80032b8 <cliAdd>
#endif

	return true;
 8004e42:	2301      	movs	r3, #1
}
 8004e44:	4618      	mov	r0, r3
 8004e46:	3708      	adds	r7, #8
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	bd80      	pop	{r7, pc}
 8004e4c:	08004ecd 	.word	0x08004ecd
 8004e50:	0801968c 	.word	0x0801968c

08004e54 <ledOff>:

	HAL_GPIO_WritePin(led_tbl[ch].port, led_tbl[ch].pin, led_tbl[ch].on_state);
}

void ledOff(uint8_t ch)
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b082      	sub	sp, #8
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	4603      	mov	r3, r0
 8004e5c:	71fb      	strb	r3, [r7, #7]
	if(ch >= LED_MAX_CH) return;
 8004e5e:	79fb      	ldrb	r3, [r7, #7]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d111      	bne.n	8004e88 <ledOff+0x34>

	HAL_GPIO_WritePin(led_tbl[ch].port, led_tbl[ch].pin, led_tbl[ch].off_state);
 8004e64:	79fb      	ldrb	r3, [r7, #7]
 8004e66:	4a0a      	ldr	r2, [pc, #40]	; (8004e90 <ledOff+0x3c>)
 8004e68:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8004e6c:	79fb      	ldrb	r3, [r7, #7]
 8004e6e:	4a08      	ldr	r2, [pc, #32]	; (8004e90 <ledOff+0x3c>)
 8004e70:	00db      	lsls	r3, r3, #3
 8004e72:	4413      	add	r3, r2
 8004e74:	8899      	ldrh	r1, [r3, #4]
 8004e76:	79fb      	ldrb	r3, [r7, #7]
 8004e78:	4a05      	ldr	r2, [pc, #20]	; (8004e90 <ledOff+0x3c>)
 8004e7a:	00db      	lsls	r3, r3, #3
 8004e7c:	4413      	add	r3, r2
 8004e7e:	79db      	ldrb	r3, [r3, #7]
 8004e80:	461a      	mov	r2, r3
 8004e82:	f002 f857 	bl	8006f34 <HAL_GPIO_WritePin>
 8004e86:	e000      	b.n	8004e8a <ledOff+0x36>
	if(ch >= LED_MAX_CH) return;
 8004e88:	bf00      	nop
}
 8004e8a:	3708      	adds	r7, #8
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	bd80      	pop	{r7, pc}
 8004e90:	20000098 	.word	0x20000098

08004e94 <ledToggle>:

void ledToggle(uint8_t ch)
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b082      	sub	sp, #8
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	4603      	mov	r3, r0
 8004e9c:	71fb      	strb	r3, [r7, #7]
	if(ch >= LED_MAX_CH) return;
 8004e9e:	79fb      	ldrb	r3, [r7, #7]
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d10d      	bne.n	8004ec0 <ledToggle+0x2c>

	HAL_GPIO_TogglePin(led_tbl[ch].port, led_tbl[ch].pin);
 8004ea4:	79fb      	ldrb	r3, [r7, #7]
 8004ea6:	4a08      	ldr	r2, [pc, #32]	; (8004ec8 <ledToggle+0x34>)
 8004ea8:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8004eac:	79fb      	ldrb	r3, [r7, #7]
 8004eae:	4906      	ldr	r1, [pc, #24]	; (8004ec8 <ledToggle+0x34>)
 8004eb0:	00db      	lsls	r3, r3, #3
 8004eb2:	440b      	add	r3, r1
 8004eb4:	889b      	ldrh	r3, [r3, #4]
 8004eb6:	4619      	mov	r1, r3
 8004eb8:	4610      	mov	r0, r2
 8004eba:	f002 f854 	bl	8006f66 <HAL_GPIO_TogglePin>
 8004ebe:	e000      	b.n	8004ec2 <ledToggle+0x2e>
	if(ch >= LED_MAX_CH) return;
 8004ec0:	bf00      	nop
}
 8004ec2:	3708      	adds	r7, #8
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	bd80      	pop	{r7, pc}
 8004ec8:	20000098 	.word	0x20000098

08004ecc <cliLed>:


#ifdef _USE_HW_CLI

void cliLed(cli_args_t *args)
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b086      	sub	sp, #24
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
	bool ret = false;
 8004ed4:	2300      	movs	r3, #0
 8004ed6:	75fb      	strb	r3, [r7, #23]

	if(args->argc == 3 && args->isStr(0, "toggle") == true)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	881b      	ldrh	r3, [r3, #0]
 8004edc:	2b03      	cmp	r3, #3
 8004ede:	d133      	bne.n	8004f48 <cliLed+0x7c>
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	695b      	ldr	r3, [r3, #20]
 8004ee4:	491f      	ldr	r1, [pc, #124]	; (8004f64 <cliLed+0x98>)
 8004ee6:	2000      	movs	r0, #0
 8004ee8:	4798      	blx	r3
 8004eea:	4603      	mov	r3, r0
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d02b      	beq.n	8004f48 <cliLed+0x7c>
	{
		uint8_t led_ch;
		uint32_t toggle_time;
		uint32_t pre_time;

		led_ch = (uint8_t)args->getData(1);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	689b      	ldr	r3, [r3, #8]
 8004ef4:	2001      	movs	r0, #1
 8004ef6:	4798      	blx	r3
 8004ef8:	4603      	mov	r3, r0
 8004efa:	75bb      	strb	r3, [r7, #22]
		toggle_time = (uint32_t)args->getData(2);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	689b      	ldr	r3, [r3, #8]
 8004f00:	2002      	movs	r0, #2
 8004f02:	4798      	blx	r3
 8004f04:	4603      	mov	r3, r0
 8004f06:	60fb      	str	r3, [r7, #12]

		if(led_ch > 0)
 8004f08:	7dbb      	ldrb	r3, [r7, #22]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d002      	beq.n	8004f14 <cliLed+0x48>
		{
			led_ch--;
 8004f0e:	7dbb      	ldrb	r3, [r7, #22]
 8004f10:	3b01      	subs	r3, #1
 8004f12:	75bb      	strb	r3, [r7, #22]
		}

		pre_time = millis();
 8004f14:	f7fc fd4a 	bl	80019ac <millis>
 8004f18:	6138      	str	r0, [r7, #16]
		while(cliKeepLoop())
 8004f1a:	e00e      	b.n	8004f3a <cliLed+0x6e>
		{
			if(millis() - pre_time >= toggle_time)
 8004f1c:	f7fc fd46 	bl	80019ac <millis>
 8004f20:	4602      	mov	r2, r0
 8004f22:	693b      	ldr	r3, [r7, #16]
 8004f24:	1ad3      	subs	r3, r2, r3
 8004f26:	68fa      	ldr	r2, [r7, #12]
 8004f28:	429a      	cmp	r2, r3
 8004f2a:	d806      	bhi.n	8004f3a <cliLed+0x6e>
			{
				pre_time = millis();
 8004f2c:	f7fc fd3e 	bl	80019ac <millis>
 8004f30:	6138      	str	r0, [r7, #16]
				ledToggle(led_ch);
 8004f32:	7dbb      	ldrb	r3, [r7, #22]
 8004f34:	4618      	mov	r0, r3
 8004f36:	f7ff ffad 	bl	8004e94 <ledToggle>
		while(cliKeepLoop())
 8004f3a:	f7fe f9a7 	bl	800328c <cliKeepLoop>
 8004f3e:	4603      	mov	r3, r0
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d1eb      	bne.n	8004f1c <cliLed+0x50>
			}
		}

		ret = true;
 8004f44:	2301      	movs	r3, #1
 8004f46:	75fb      	strb	r3, [r7, #23]
	}

	if(ret != true)
 8004f48:	7dfb      	ldrb	r3, [r7, #23]
 8004f4a:	f083 0301 	eor.w	r3, r3, #1
 8004f4e:	b2db      	uxtb	r3, r3
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d003      	beq.n	8004f5c <cliLed+0x90>
	{
		cliPrintf("led toggle ch[1~%d] time_ms\n", LED_MAX_CH);
 8004f54:	2101      	movs	r1, #1
 8004f56:	4804      	ldr	r0, [pc, #16]	; (8004f68 <cliLed+0x9c>)
 8004f58:	f7fe f89e 	bl	8003098 <cliPrintf>
	}
}
 8004f5c:	bf00      	nop
 8004f5e:	3718      	adds	r7, #24
 8004f60:	46bd      	mov	sp, r7
 8004f62:	bd80      	pop	{r7, pc}
 8004f64:	08019690 	.word	0x08019690
 8004f68:	08019698 	.word	0x08019698

08004f6c <sdInit>:
static void cliSd(cli_args_t *args);
#endif


bool sdInit(void)
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b082      	sub	sp, #8
 8004f70:	af00      	add	r7, sp, #0
  bool ret = false;
 8004f72:	2300      	movs	r3, #0
 8004f74:	71fb      	strb	r3, [r7, #7]


  hsd.Instance            = SDIO;
 8004f76:	4b20      	ldr	r3, [pc, #128]	; (8004ff8 <sdInit+0x8c>)
 8004f78:	4a20      	ldr	r2, [pc, #128]	; (8004ffc <sdInit+0x90>)
 8004f7a:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge      = SDIO_CLOCK_EDGE_RISING;
 8004f7c:	4b1e      	ldr	r3, [pc, #120]	; (8004ff8 <sdInit+0x8c>)
 8004f7e:	2200      	movs	r2, #0
 8004f80:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass    = SDIO_CLOCK_BYPASS_DISABLE;
 8004f82:	4b1d      	ldr	r3, [pc, #116]	; (8004ff8 <sdInit+0x8c>)
 8004f84:	2200      	movs	r2, #0
 8004f86:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8004f88:	4b1b      	ldr	r3, [pc, #108]	; (8004ff8 <sdInit+0x8c>)
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide        = SDIO_BUS_WIDE_1B;
 8004f8e:	4b1a      	ldr	r3, [pc, #104]	; (8004ff8 <sdInit+0x8c>)
 8004f90:	2200      	movs	r2, #0
 8004f92:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8004f94:	4b18      	ldr	r3, [pc, #96]	; (8004ff8 <sdInit+0x8c>)
 8004f96:	2200      	movs	r2, #0
 8004f98:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv       = SDIO_TRANSFER_CLK_DIV;
 8004f9a:	4b17      	ldr	r3, [pc, #92]	; (8004ff8 <sdInit+0x8c>)
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	619a      	str	r2, [r3, #24]


  is_detected = false;
 8004fa0:	4b17      	ldr	r3, [pc, #92]	; (8005000 <sdInit+0x94>)
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	701a      	strb	r2, [r3, #0]
  if (gpioPinRead(_PIN_GPIO_SDCARD_DETECT) == true)
 8004fa6:	2000      	movs	r0, #0
 8004fa8:	f7fe fd0c 	bl	80039c4 <gpioPinRead>
 8004fac:	4603      	mov	r3, r0
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d002      	beq.n	8004fb8 <sdInit+0x4c>
  {
    is_detected = true;
 8004fb2:	4b13      	ldr	r3, [pc, #76]	; (8005000 <sdInit+0x94>)
 8004fb4:	2201      	movs	r2, #1
 8004fb6:	701a      	strb	r2, [r3, #0]
  }

  if (is_detected == true)
 8004fb8:	4b11      	ldr	r3, [pc, #68]	; (8005000 <sdInit+0x94>)
 8004fba:	781b      	ldrb	r3, [r3, #0]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d00f      	beq.n	8004fe0 <sdInit+0x74>
  {
    if (HAL_SD_Init(&hsd) == HAL_OK)
 8004fc0:	480d      	ldr	r0, [pc, #52]	; (8004ff8 <sdInit+0x8c>)
 8004fc2:	f006 fd59 	bl	800ba78 <HAL_SD_Init>
 8004fc6:	4603      	mov	r3, r0
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d109      	bne.n	8004fe0 <sdInit+0x74>
    {
      if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) == HAL_OK)
 8004fcc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004fd0:	4809      	ldr	r0, [pc, #36]	; (8004ff8 <sdInit+0x8c>)
 8004fd2:	f007 fb33 	bl	800c63c <HAL_SD_ConfigWideBusOperation>
 8004fd6:	4603      	mov	r3, r0
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d101      	bne.n	8004fe0 <sdInit+0x74>
      {
        ret = true;
 8004fdc:	2301      	movs	r3, #1
 8004fde:	71fb      	strb	r3, [r7, #7]
      }
    }
  }

  is_init = ret;
 8004fe0:	4a08      	ldr	r2, [pc, #32]	; (8005004 <sdInit+0x98>)
 8004fe2:	79fb      	ldrb	r3, [r7, #7]
 8004fe4:	7013      	strb	r3, [r2, #0]


#ifdef _USE_HW_CLI
  cliAdd("sd", cliSd);
 8004fe6:	4908      	ldr	r1, [pc, #32]	; (8005008 <sdInit+0x9c>)
 8004fe8:	4808      	ldr	r0, [pc, #32]	; (800500c <sdInit+0xa0>)
 8004fea:	f7fe f965 	bl	80032b8 <cliAdd>
#endif

  return ret;
 8004fee:	79fb      	ldrb	r3, [r7, #7]
}
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	3708      	adds	r7, #8
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	bd80      	pop	{r7, pc}
 8004ff8:	2000039c 	.word	0x2000039c
 8004ffc:	40012c00 	.word	0x40012c00
 8005000:	20005281 	.word	0x20005281
 8005004:	20005280 	.word	0x20005280
 8005008:	080054f9 	.word	0x080054f9
 800500c:	080196b8 	.word	0x080196b8

08005010 <sdIsInit>:

  return ret;
}

bool sdIsInit(void)
{
 8005010:	b480      	push	{r7}
 8005012:	af00      	add	r7, sp, #0
  return is_init;
 8005014:	4b03      	ldr	r3, [pc, #12]	; (8005024 <sdIsInit+0x14>)
 8005016:	781b      	ldrb	r3, [r3, #0]
}
 8005018:	4618      	mov	r0, r3
 800501a:	46bd      	mov	sp, r7
 800501c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005020:	4770      	bx	lr
 8005022:	bf00      	nop
 8005024:	20005280 	.word	0x20005280

08005028 <sdIsDetected>:

bool sdIsDetected(void)
{
 8005028:	b580      	push	{r7, lr}
 800502a:	af00      	add	r7, sp, #0
  if (gpioPinRead(_PIN_GPIO_SDCARD_DETECT) == true)
 800502c:	2000      	movs	r0, #0
 800502e:	f7fe fcc9 	bl	80039c4 <gpioPinRead>
 8005032:	4603      	mov	r3, r0
 8005034:	2b00      	cmp	r3, #0
 8005036:	d003      	beq.n	8005040 <sdIsDetected+0x18>
  {
    is_detected = true;
 8005038:	4b05      	ldr	r3, [pc, #20]	; (8005050 <sdIsDetected+0x28>)
 800503a:	2201      	movs	r2, #1
 800503c:	701a      	strb	r2, [r3, #0]
 800503e:	e002      	b.n	8005046 <sdIsDetected+0x1e>
  }
  else
  {
    is_detected = false;
 8005040:	4b03      	ldr	r3, [pc, #12]	; (8005050 <sdIsDetected+0x28>)
 8005042:	2200      	movs	r2, #0
 8005044:	701a      	strb	r2, [r3, #0]
  }

  return is_detected;
 8005046:	4b02      	ldr	r3, [pc, #8]	; (8005050 <sdIsDetected+0x28>)
 8005048:	781b      	ldrb	r3, [r3, #0]
}
 800504a:	4618      	mov	r0, r3
 800504c:	bd80      	pop	{r7, pc}
 800504e:	bf00      	nop
 8005050:	20005281 	.word	0x20005281

08005054 <sdGetInfo>:

bool sdGetInfo(sd_info_t *p_info)
{
 8005054:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005058:	b08c      	sub	sp, #48	; 0x30
 800505a:	af00      	add	r7, sp, #0
 800505c:	6078      	str	r0, [r7, #4]
  bool ret = false;
 800505e:	2300      	movs	r3, #0
 8005060:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  sd_info_t *p_sd_info = (sd_info_t *)p_info;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	62bb      	str	r3, [r7, #40]	; 0x28

  HAL_SD_CardInfoTypeDef card_info;


  if (is_init == true)
 8005068:	4b24      	ldr	r3, [pc, #144]	; (80050fc <sdGetInfo+0xa8>)
 800506a:	781b      	ldrb	r3, [r3, #0]
 800506c:	2b00      	cmp	r3, #0
 800506e:	d03d      	beq.n	80050ec <sdGetInfo+0x98>
  {
    HAL_SD_GetCardInfo(&hsd, &card_info);
 8005070:	f107 0308 	add.w	r3, r7, #8
 8005074:	4619      	mov	r1, r3
 8005076:	4822      	ldr	r0, [pc, #136]	; (8005100 <sdGetInfo+0xac>)
 8005078:	f007 fab4 	bl	800c5e4 <HAL_SD_GetCardInfo>

    p_sd_info->card_type          = card_info.CardType;
 800507c:	68ba      	ldr	r2, [r7, #8]
 800507e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005080:	601a      	str	r2, [r3, #0]
    p_sd_info->card_version       = card_info.CardVersion;
 8005082:	68fa      	ldr	r2, [r7, #12]
 8005084:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005086:	605a      	str	r2, [r3, #4]
    p_sd_info->card_class         = card_info.Class;
 8005088:	693a      	ldr	r2, [r7, #16]
 800508a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800508c:	609a      	str	r2, [r3, #8]
    p_sd_info->rel_card_Add       = card_info.RelCardAdd;
 800508e:	697a      	ldr	r2, [r7, #20]
 8005090:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005092:	60da      	str	r2, [r3, #12]
    p_sd_info->block_numbers      = card_info.BlockNbr;
 8005094:	69ba      	ldr	r2, [r7, #24]
 8005096:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005098:	611a      	str	r2, [r3, #16]
    p_sd_info->block_size         = card_info.BlockSize;
 800509a:	69fa      	ldr	r2, [r7, #28]
 800509c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800509e:	615a      	str	r2, [r3, #20]
    p_sd_info->log_block_numbers  = card_info.LogBlockNbr;
 80050a0:	6a3a      	ldr	r2, [r7, #32]
 80050a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050a4:	619a      	str	r2, [r3, #24]
    p_sd_info->log_block_size     = card_info.LogBlockSize;
 80050a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050aa:	61da      	str	r2, [r3, #28]
    p_sd_info->card_size          =  (uint32_t)((uint64_t)p_sd_info->block_numbers * (uint64_t) p_sd_info->block_size / (uint64_t)1024 / (uint64_t)1024);
 80050ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050ae:	691b      	ldr	r3, [r3, #16]
 80050b0:	2200      	movs	r2, #0
 80050b2:	469a      	mov	sl, r3
 80050b4:	4693      	mov	fp, r2
 80050b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050b8:	695b      	ldr	r3, [r3, #20]
 80050ba:	2200      	movs	r2, #0
 80050bc:	4698      	mov	r8, r3
 80050be:	4691      	mov	r9, r2
 80050c0:	fb08 f20b 	mul.w	r2, r8, fp
 80050c4:	fb0a f309 	mul.w	r3, sl, r9
 80050c8:	4413      	add	r3, r2
 80050ca:	fbaa 4508 	umull	r4, r5, sl, r8
 80050ce:	442b      	add	r3, r5
 80050d0:	461d      	mov	r5, r3
 80050d2:	f04f 0200 	mov.w	r2, #0
 80050d6:	f04f 0300 	mov.w	r3, #0
 80050da:	0d22      	lsrs	r2, r4, #20
 80050dc:	ea42 3205 	orr.w	r2, r2, r5, lsl #12
 80050e0:	0d2b      	lsrs	r3, r5, #20
 80050e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050e4:	621a      	str	r2, [r3, #32]
    ret = true;
 80050e6:	2301      	movs	r3, #1
 80050e8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return ret;
 80050ec:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80050f0:	4618      	mov	r0, r3
 80050f2:	3730      	adds	r7, #48	; 0x30
 80050f4:	46bd      	mov	sp, r7
 80050f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80050fa:	bf00      	nop
 80050fc:	20005280 	.word	0x20005280
 8005100:	2000039c 	.word	0x2000039c

08005104 <sdIsBusy>:

bool sdIsBusy(void)
{
 8005104:	b580      	push	{r7, lr}
 8005106:	b082      	sub	sp, #8
 8005108:	af00      	add	r7, sp, #0
  bool is_busy;


  if (HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER )
 800510a:	4808      	ldr	r0, [pc, #32]	; (800512c <sdIsBusy+0x28>)
 800510c:	f007 fb30 	bl	800c770 <HAL_SD_GetCardState>
 8005110:	4603      	mov	r3, r0
 8005112:	2b04      	cmp	r3, #4
 8005114:	d102      	bne.n	800511c <sdIsBusy+0x18>
  {
    is_busy = false;
 8005116:	2300      	movs	r3, #0
 8005118:	71fb      	strb	r3, [r7, #7]
 800511a:	e001      	b.n	8005120 <sdIsBusy+0x1c>
  }
  else
  {
    is_busy = true;
 800511c:	2301      	movs	r3, #1
 800511e:	71fb      	strb	r3, [r7, #7]
  }

  return is_busy;
 8005120:	79fb      	ldrb	r3, [r7, #7]
}
 8005122:	4618      	mov	r0, r3
 8005124:	3708      	adds	r7, #8
 8005126:	46bd      	mov	sp, r7
 8005128:	bd80      	pop	{r7, pc}
 800512a:	bf00      	nop
 800512c:	2000039c 	.word	0x2000039c

08005130 <sdIsReady>:

bool sdIsReady(uint32_t timeout)
{
 8005130:	b580      	push	{r7, lr}
 8005132:	b084      	sub	sp, #16
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
  uint32_t pre_time;

  pre_time = millis();
 8005138:	f7fc fc38 	bl	80019ac <millis>
 800513c:	60f8      	str	r0, [r7, #12]

  while(millis() - pre_time < timeout)
 800513e:	e009      	b.n	8005154 <sdIsReady+0x24>
  {
    if (sdIsBusy() == false)
 8005140:	f7ff ffe0 	bl	8005104 <sdIsBusy>
 8005144:	4603      	mov	r3, r0
 8005146:	f083 0301 	eor.w	r3, r3, #1
 800514a:	b2db      	uxtb	r3, r3
 800514c:	2b00      	cmp	r3, #0
 800514e:	d001      	beq.n	8005154 <sdIsReady+0x24>
    {
      return true;
 8005150:	2301      	movs	r3, #1
 8005152:	e008      	b.n	8005166 <sdIsReady+0x36>
  while(millis() - pre_time < timeout)
 8005154:	f7fc fc2a 	bl	80019ac <millis>
 8005158:	4602      	mov	r2, r0
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	1ad3      	subs	r3, r2, r3
 800515e:	687a      	ldr	r2, [r7, #4]
 8005160:	429a      	cmp	r2, r3
 8005162:	d8ed      	bhi.n	8005140 <sdIsReady+0x10>
    }
  }

  return false;
 8005164:	2300      	movs	r3, #0
}
 8005166:	4618      	mov	r0, r3
 8005168:	3710      	adds	r7, #16
 800516a:	46bd      	mov	sp, r7
 800516c:	bd80      	pop	{r7, pc}
	...

08005170 <sdReadBlocks>:

bool sdReadBlocks(uint32_t block_addr, uint8_t *p_data, uint32_t num_of_blocks, uint32_t timeout_ms)
{
 8005170:	b580      	push	{r7, lr}
 8005172:	b086      	sub	sp, #24
 8005174:	af00      	add	r7, sp, #0
 8005176:	60f8      	str	r0, [r7, #12]
 8005178:	60b9      	str	r1, [r7, #8]
 800517a:	607a      	str	r2, [r7, #4]
 800517c:	603b      	str	r3, [r7, #0]
  bool ret = false;
 800517e:	2300      	movs	r3, #0
 8005180:	75fb      	strb	r3, [r7, #23]
  uint32_t pre_time;


  is_rx_done = false;
 8005182:	4b1e      	ldr	r3, [pc, #120]	; (80051fc <sdReadBlocks+0x8c>)
 8005184:	2200      	movs	r2, #0
 8005186:	701a      	strb	r2, [r3, #0]
  if(HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)p_data, block_addr, num_of_blocks) == HAL_OK)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	68fa      	ldr	r2, [r7, #12]
 800518c:	68b9      	ldr	r1, [r7, #8]
 800518e:	481c      	ldr	r0, [pc, #112]	; (8005200 <sdReadBlocks+0x90>)
 8005190:	f006 fd22 	bl	800bbd8 <HAL_SD_ReadBlocks_DMA>
 8005194:	4603      	mov	r3, r0
 8005196:	2b00      	cmp	r3, #0
 8005198:	d12a      	bne.n	80051f0 <sdReadBlocks+0x80>
  {

    pre_time = millis();
 800519a:	f7fc fc07 	bl	80019ac <millis>
 800519e:	6138      	str	r0, [r7, #16]
    while(is_rx_done == false)
 80051a0:	e007      	b.n	80051b2 <sdReadBlocks+0x42>
    {
      if (millis()-pre_time >= timeout_ms)
 80051a2:	f7fc fc03 	bl	80019ac <millis>
 80051a6:	4602      	mov	r2, r0
 80051a8:	693b      	ldr	r3, [r7, #16]
 80051aa:	1ad3      	subs	r3, r2, r3
 80051ac:	683a      	ldr	r2, [r7, #0]
 80051ae:	429a      	cmp	r2, r3
 80051b0:	d908      	bls.n	80051c4 <sdReadBlocks+0x54>
    while(is_rx_done == false)
 80051b2:	4b12      	ldr	r3, [pc, #72]	; (80051fc <sdReadBlocks+0x8c>)
 80051b4:	781b      	ldrb	r3, [r3, #0]
 80051b6:	b2db      	uxtb	r3, r3
 80051b8:	f083 0301 	eor.w	r3, r3, #1
 80051bc:	b2db      	uxtb	r3, r3
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d1ef      	bne.n	80051a2 <sdReadBlocks+0x32>
 80051c2:	e00d      	b.n	80051e0 <sdReadBlocks+0x70>
      {
        break;
 80051c4:	bf00      	nop
      }
    }
    while(sdIsBusy() == true)
 80051c6:	e00b      	b.n	80051e0 <sdReadBlocks+0x70>
    {
      if (millis()-pre_time >= timeout_ms)
 80051c8:	f7fc fbf0 	bl	80019ac <millis>
 80051cc:	4602      	mov	r2, r0
 80051ce:	693b      	ldr	r3, [r7, #16]
 80051d0:	1ad3      	subs	r3, r2, r3
 80051d2:	683a      	ldr	r2, [r7, #0]
 80051d4:	429a      	cmp	r2, r3
 80051d6:	d803      	bhi.n	80051e0 <sdReadBlocks+0x70>
      {
        is_rx_done = false;
 80051d8:	4b08      	ldr	r3, [pc, #32]	; (80051fc <sdReadBlocks+0x8c>)
 80051da:	2200      	movs	r2, #0
 80051dc:	701a      	strb	r2, [r3, #0]
        break;
 80051de:	e004      	b.n	80051ea <sdReadBlocks+0x7a>
    while(sdIsBusy() == true)
 80051e0:	f7ff ff90 	bl	8005104 <sdIsBusy>
 80051e4:	4603      	mov	r3, r0
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d1ee      	bne.n	80051c8 <sdReadBlocks+0x58>
      }
    }
    ret = is_rx_done;
 80051ea:	4b04      	ldr	r3, [pc, #16]	; (80051fc <sdReadBlocks+0x8c>)
 80051ec:	781b      	ldrb	r3, [r3, #0]
 80051ee:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80051f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80051f2:	4618      	mov	r0, r3
 80051f4:	3718      	adds	r7, #24
 80051f6:	46bd      	mov	sp, r7
 80051f8:	bd80      	pop	{r7, pc}
 80051fa:	bf00      	nop
 80051fc:	20005282 	.word	0x20005282
 8005200:	2000039c 	.word	0x2000039c

08005204 <sdWriteBlocks>:

bool sdWriteBlocks(uint32_t block_addr, uint8_t *p_data, uint32_t num_of_blocks, uint32_t timeout_ms)
{
 8005204:	b580      	push	{r7, lr}
 8005206:	b086      	sub	sp, #24
 8005208:	af00      	add	r7, sp, #0
 800520a:	60f8      	str	r0, [r7, #12]
 800520c:	60b9      	str	r1, [r7, #8]
 800520e:	607a      	str	r2, [r7, #4]
 8005210:	603b      	str	r3, [r7, #0]
  bool ret = false;
 8005212:	2300      	movs	r3, #0
 8005214:	75fb      	strb	r3, [r7, #23]
  uint32_t pre_time;


  is_tx_done = false;
 8005216:	4b1f      	ldr	r3, [pc, #124]	; (8005294 <sdWriteBlocks+0x90>)
 8005218:	2200      	movs	r2, #0
 800521a:	701a      	strb	r2, [r3, #0]
  if(HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)p_data, block_addr, num_of_blocks) == HAL_OK)
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	68fa      	ldr	r2, [r7, #12]
 8005220:	68b9      	ldr	r1, [r7, #8]
 8005222:	481d      	ldr	r0, [pc, #116]	; (8005298 <sdWriteBlocks+0x94>)
 8005224:	f006 fdba 	bl	800bd9c <HAL_SD_WriteBlocks_DMA>
 8005228:	4603      	mov	r3, r0
 800522a:	2b00      	cmp	r3, #0
 800522c:	d12d      	bne.n	800528a <sdWriteBlocks+0x86>
  {
    pre_time = millis();
 800522e:	f7fc fbbd 	bl	80019ac <millis>
 8005232:	6138      	str	r0, [r7, #16]
    while(is_tx_done == false)
 8005234:	e007      	b.n	8005246 <sdWriteBlocks+0x42>
    {
      if (millis()-pre_time >= timeout_ms)
 8005236:	f7fc fbb9 	bl	80019ac <millis>
 800523a:	4602      	mov	r2, r0
 800523c:	693b      	ldr	r3, [r7, #16]
 800523e:	1ad3      	subs	r3, r2, r3
 8005240:	683a      	ldr	r2, [r7, #0]
 8005242:	429a      	cmp	r2, r3
 8005244:	d908      	bls.n	8005258 <sdWriteBlocks+0x54>
    while(is_tx_done == false)
 8005246:	4b13      	ldr	r3, [pc, #76]	; (8005294 <sdWriteBlocks+0x90>)
 8005248:	781b      	ldrb	r3, [r3, #0]
 800524a:	b2db      	uxtb	r3, r3
 800524c:	f083 0301 	eor.w	r3, r3, #1
 8005250:	b2db      	uxtb	r3, r3
 8005252:	2b00      	cmp	r3, #0
 8005254:	d1ef      	bne.n	8005236 <sdWriteBlocks+0x32>
 8005256:	e000      	b.n	800525a <sdWriteBlocks+0x56>
      {
        break;
 8005258:	bf00      	nop
      }
    }
    pre_time = millis();
 800525a:	f7fc fba7 	bl	80019ac <millis>
 800525e:	6138      	str	r0, [r7, #16]
    while(sdIsBusy() == true)
 8005260:	e00b      	b.n	800527a <sdWriteBlocks+0x76>
    {
      if (millis()-pre_time >= timeout_ms)
 8005262:	f7fc fba3 	bl	80019ac <millis>
 8005266:	4602      	mov	r2, r0
 8005268:	693b      	ldr	r3, [r7, #16]
 800526a:	1ad3      	subs	r3, r2, r3
 800526c:	683a      	ldr	r2, [r7, #0]
 800526e:	429a      	cmp	r2, r3
 8005270:	d803      	bhi.n	800527a <sdWriteBlocks+0x76>
      {
        is_tx_done = false;
 8005272:	4b08      	ldr	r3, [pc, #32]	; (8005294 <sdWriteBlocks+0x90>)
 8005274:	2200      	movs	r2, #0
 8005276:	701a      	strb	r2, [r3, #0]
        break;
 8005278:	e004      	b.n	8005284 <sdWriteBlocks+0x80>
    while(sdIsBusy() == true)
 800527a:	f7ff ff43 	bl	8005104 <sdIsBusy>
 800527e:	4603      	mov	r3, r0
 8005280:	2b00      	cmp	r3, #0
 8005282:	d1ee      	bne.n	8005262 <sdWriteBlocks+0x5e>
      }
    }
    ret = is_tx_done;
 8005284:	4b03      	ldr	r3, [pc, #12]	; (8005294 <sdWriteBlocks+0x90>)
 8005286:	781b      	ldrb	r3, [r3, #0]
 8005288:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800528a:	7dfb      	ldrb	r3, [r7, #23]
}
 800528c:	4618      	mov	r0, r3
 800528e:	3718      	adds	r7, #24
 8005290:	46bd      	mov	sp, r7
 8005292:	bd80      	pop	{r7, pc}
 8005294:	20005283 	.word	0x20005283
 8005298:	2000039c 	.word	0x2000039c

0800529c <HAL_SD_RxCpltCallback>:




void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800529c:	b480      	push	{r7}
 800529e:	b083      	sub	sp, #12
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
  is_rx_done = true;
 80052a4:	4b04      	ldr	r3, [pc, #16]	; (80052b8 <HAL_SD_RxCpltCallback+0x1c>)
 80052a6:	2201      	movs	r2, #1
 80052a8:	701a      	strb	r2, [r3, #0]
}
 80052aa:	bf00      	nop
 80052ac:	370c      	adds	r7, #12
 80052ae:	46bd      	mov	sp, r7
 80052b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b4:	4770      	bx	lr
 80052b6:	bf00      	nop
 80052b8:	20005282 	.word	0x20005282

080052bc <HAL_SD_TxCpltCallback>:

void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 80052bc:	b480      	push	{r7}
 80052be:	b083      	sub	sp, #12
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
  is_tx_done = true;
 80052c4:	4b04      	ldr	r3, [pc, #16]	; (80052d8 <HAL_SD_TxCpltCallback+0x1c>)
 80052c6:	2201      	movs	r2, #1
 80052c8:	701a      	strb	r2, [r3, #0]
}
 80052ca:	bf00      	nop
 80052cc:	370c      	adds	r7, #12
 80052ce:	46bd      	mov	sp, r7
 80052d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d4:	4770      	bx	lr
 80052d6:	bf00      	nop
 80052d8:	20005283 	.word	0x20005283

080052dc <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 80052dc:	b580      	push	{r7, lr}
 80052de:	b08c      	sub	sp, #48	; 0x30
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80052e4:	f107 031c 	add.w	r3, r7, #28
 80052e8:	2200      	movs	r2, #0
 80052ea:	601a      	str	r2, [r3, #0]
 80052ec:	605a      	str	r2, [r3, #4]
 80052ee:	609a      	str	r2, [r3, #8]
 80052f0:	60da      	str	r2, [r3, #12]
 80052f2:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDIO)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	4a77      	ldr	r2, [pc, #476]	; (80054d8 <HAL_SD_MspInit+0x1fc>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	f040 80e8 	bne.w	80054d0 <HAL_SD_MspInit+0x1f4>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */
    __HAL_RCC_DMA2_CLK_ENABLE();
 8005300:	2300      	movs	r3, #0
 8005302:	61bb      	str	r3, [r7, #24]
 8005304:	4b75      	ldr	r3, [pc, #468]	; (80054dc <HAL_SD_MspInit+0x200>)
 8005306:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005308:	4a74      	ldr	r2, [pc, #464]	; (80054dc <HAL_SD_MspInit+0x200>)
 800530a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800530e:	6313      	str	r3, [r2, #48]	; 0x30
 8005310:	4b72      	ldr	r3, [pc, #456]	; (80054dc <HAL_SD_MspInit+0x200>)
 8005312:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005314:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005318:	61bb      	str	r3, [r7, #24]
 800531a:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE END SDIO_MspInit 0 */
    /* SDIO clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 800531c:	2300      	movs	r3, #0
 800531e:	617b      	str	r3, [r7, #20]
 8005320:	4b6e      	ldr	r3, [pc, #440]	; (80054dc <HAL_SD_MspInit+0x200>)
 8005322:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005324:	4a6d      	ldr	r2, [pc, #436]	; (80054dc <HAL_SD_MspInit+0x200>)
 8005326:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800532a:	6453      	str	r3, [r2, #68]	; 0x44
 800532c:	4b6b      	ldr	r3, [pc, #428]	; (80054dc <HAL_SD_MspInit+0x200>)
 800532e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005330:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005334:	617b      	str	r3, [r7, #20]
 8005336:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005338:	2300      	movs	r3, #0
 800533a:	613b      	str	r3, [r7, #16]
 800533c:	4b67      	ldr	r3, [pc, #412]	; (80054dc <HAL_SD_MspInit+0x200>)
 800533e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005340:	4a66      	ldr	r2, [pc, #408]	; (80054dc <HAL_SD_MspInit+0x200>)
 8005342:	f043 0301 	orr.w	r3, r3, #1
 8005346:	6313      	str	r3, [r2, #48]	; 0x30
 8005348:	4b64      	ldr	r3, [pc, #400]	; (80054dc <HAL_SD_MspInit+0x200>)
 800534a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800534c:	f003 0301 	and.w	r3, r3, #1
 8005350:	613b      	str	r3, [r7, #16]
 8005352:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005354:	2300      	movs	r3, #0
 8005356:	60fb      	str	r3, [r7, #12]
 8005358:	4b60      	ldr	r3, [pc, #384]	; (80054dc <HAL_SD_MspInit+0x200>)
 800535a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800535c:	4a5f      	ldr	r2, [pc, #380]	; (80054dc <HAL_SD_MspInit+0x200>)
 800535e:	f043 0302 	orr.w	r3, r3, #2
 8005362:	6313      	str	r3, [r2, #48]	; 0x30
 8005364:	4b5d      	ldr	r3, [pc, #372]	; (80054dc <HAL_SD_MspInit+0x200>)
 8005366:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005368:	f003 0302 	and.w	r3, r3, #2
 800536c:	60fb      	str	r3, [r7, #12]
 800536e:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> SDIO_D1
    PA9     ------> SDIO_D2
    PB5     ------> SDIO_D3
    PB7     ------> SDIO_D0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9;
 8005370:	f44f 7350 	mov.w	r3, #832	; 0x340
 8005374:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005376:	2302      	movs	r3, #2
 8005378:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800537a:	2301      	movs	r3, #1
 800537c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800537e:	2301      	movs	r3, #1
 8005380:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8005382:	230c      	movs	r3, #12
 8005384:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005386:	f107 031c 	add.w	r3, r7, #28
 800538a:	4619      	mov	r1, r3
 800538c:	4854      	ldr	r0, [pc, #336]	; (80054e0 <HAL_SD_MspInit+0x204>)
 800538e:	f001 fb51 	bl	8006a34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_5|GPIO_PIN_7;
 8005392:	f248 03a0 	movw	r3, #32928	; 0x80a0
 8005396:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005398:	2302      	movs	r3, #2
 800539a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800539c:	2301      	movs	r3, #1
 800539e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80053a0:	2301      	movs	r3, #1
 80053a2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80053a4:	230c      	movs	r3, #12
 80053a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80053a8:	f107 031c 	add.w	r3, r7, #28
 80053ac:	4619      	mov	r1, r3
 80053ae:	484d      	ldr	r0, [pc, #308]	; (80054e4 <HAL_SD_MspInit+0x208>)
 80053b0:	f001 fb40 	bl	8006a34 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 80053b4:	4b4c      	ldr	r3, [pc, #304]	; (80054e8 <HAL_SD_MspInit+0x20c>)
 80053b6:	4a4d      	ldr	r2, [pc, #308]	; (80054ec <HAL_SD_MspInit+0x210>)
 80053b8:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 80053ba:	4b4b      	ldr	r3, [pc, #300]	; (80054e8 <HAL_SD_MspInit+0x20c>)
 80053bc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80053c0:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80053c2:	4b49      	ldr	r3, [pc, #292]	; (80054e8 <HAL_SD_MspInit+0x20c>)
 80053c4:	2200      	movs	r2, #0
 80053c6:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80053c8:	4b47      	ldr	r3, [pc, #284]	; (80054e8 <HAL_SD_MspInit+0x20c>)
 80053ca:	2200      	movs	r2, #0
 80053cc:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 80053ce:	4b46      	ldr	r3, [pc, #280]	; (80054e8 <HAL_SD_MspInit+0x20c>)
 80053d0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80053d4:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80053d6:	4b44      	ldr	r3, [pc, #272]	; (80054e8 <HAL_SD_MspInit+0x20c>)
 80053d8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80053dc:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80053de:	4b42      	ldr	r3, [pc, #264]	; (80054e8 <HAL_SD_MspInit+0x20c>)
 80053e0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80053e4:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 80053e6:	4b40      	ldr	r3, [pc, #256]	; (80054e8 <HAL_SD_MspInit+0x20c>)
 80053e8:	2220      	movs	r2, #32
 80053ea:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 80053ec:	4b3e      	ldr	r3, [pc, #248]	; (80054e8 <HAL_SD_MspInit+0x20c>)
 80053ee:	2200      	movs	r2, #0
 80053f0:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80053f2:	4b3d      	ldr	r3, [pc, #244]	; (80054e8 <HAL_SD_MspInit+0x20c>)
 80053f4:	2204      	movs	r2, #4
 80053f6:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80053f8:	4b3b      	ldr	r3, [pc, #236]	; (80054e8 <HAL_SD_MspInit+0x20c>)
 80053fa:	2203      	movs	r2, #3
 80053fc:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 80053fe:	4b3a      	ldr	r3, [pc, #232]	; (80054e8 <HAL_SD_MspInit+0x20c>)
 8005400:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8005404:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8005406:	4b38      	ldr	r3, [pc, #224]	; (80054e8 <HAL_SD_MspInit+0x20c>)
 8005408:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800540c:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 800540e:	4836      	ldr	r0, [pc, #216]	; (80054e8 <HAL_SD_MspInit+0x20c>)
 8005410:	f000 fc7c 	bl	8005d0c <HAL_DMA_Init>
 8005414:	4603      	mov	r3, r0
 8005416:	2b00      	cmp	r3, #0
 8005418:	d001      	beq.n	800541e <HAL_SD_MspInit+0x142>
    {
      Error_Handler();
 800541a:	f7fc f8e3 	bl	80015e4 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmarx,hdma_sdio_rx);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	4a31      	ldr	r2, [pc, #196]	; (80054e8 <HAL_SD_MspInit+0x20c>)
 8005422:	641a      	str	r2, [r3, #64]	; 0x40
 8005424:	4a30      	ldr	r2, [pc, #192]	; (80054e8 <HAL_SD_MspInit+0x20c>)
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 800542a:	4b31      	ldr	r3, [pc, #196]	; (80054f0 <HAL_SD_MspInit+0x214>)
 800542c:	4a31      	ldr	r2, [pc, #196]	; (80054f4 <HAL_SD_MspInit+0x218>)
 800542e:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8005430:	4b2f      	ldr	r3, [pc, #188]	; (80054f0 <HAL_SD_MspInit+0x214>)
 8005432:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005436:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005438:	4b2d      	ldr	r3, [pc, #180]	; (80054f0 <HAL_SD_MspInit+0x214>)
 800543a:	2240      	movs	r2, #64	; 0x40
 800543c:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800543e:	4b2c      	ldr	r3, [pc, #176]	; (80054f0 <HAL_SD_MspInit+0x214>)
 8005440:	2200      	movs	r2, #0
 8005442:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005444:	4b2a      	ldr	r3, [pc, #168]	; (80054f0 <HAL_SD_MspInit+0x214>)
 8005446:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800544a:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800544c:	4b28      	ldr	r3, [pc, #160]	; (80054f0 <HAL_SD_MspInit+0x214>)
 800544e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005452:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8005454:	4b26      	ldr	r3, [pc, #152]	; (80054f0 <HAL_SD_MspInit+0x214>)
 8005456:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800545a:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 800545c:	4b24      	ldr	r3, [pc, #144]	; (80054f0 <HAL_SD_MspInit+0x214>)
 800545e:	2220      	movs	r2, #32
 8005460:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 8005462:	4b23      	ldr	r3, [pc, #140]	; (80054f0 <HAL_SD_MspInit+0x214>)
 8005464:	2200      	movs	r2, #0
 8005466:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8005468:	4b21      	ldr	r3, [pc, #132]	; (80054f0 <HAL_SD_MspInit+0x214>)
 800546a:	2204      	movs	r2, #4
 800546c:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800546e:	4b20      	ldr	r3, [pc, #128]	; (80054f0 <HAL_SD_MspInit+0x214>)
 8005470:	2203      	movs	r2, #3
 8005472:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 8005474:	4b1e      	ldr	r3, [pc, #120]	; (80054f0 <HAL_SD_MspInit+0x214>)
 8005476:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800547a:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 800547c:	4b1c      	ldr	r3, [pc, #112]	; (80054f0 <HAL_SD_MspInit+0x214>)
 800547e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8005482:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8005484:	481a      	ldr	r0, [pc, #104]	; (80054f0 <HAL_SD_MspInit+0x214>)
 8005486:	f000 fc41 	bl	8005d0c <HAL_DMA_Init>
 800548a:	4603      	mov	r3, r0
 800548c:	2b00      	cmp	r3, #0
 800548e:	d001      	beq.n	8005494 <HAL_SD_MspInit+0x1b8>
    {
      Error_Handler();
 8005490:	f7fc f8a8 	bl	80015e4 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmatx,hdma_sdio_tx);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	4a16      	ldr	r2, [pc, #88]	; (80054f0 <HAL_SD_MspInit+0x214>)
 8005498:	63da      	str	r2, [r3, #60]	; 0x3c
 800549a:	4a15      	ldr	r2, [pc, #84]	; (80054f0 <HAL_SD_MspInit+0x214>)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 4, 0);
 80054a0:	2200      	movs	r2, #0
 80054a2:	2104      	movs	r1, #4
 80054a4:	2031      	movs	r0, #49	; 0x31
 80054a6:	f000 fbec 	bl	8005c82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 80054aa:	2031      	movs	r0, #49	; 0x31
 80054ac:	f000 fc05 	bl	8005cba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

    /* DMA interrupt init */
    /* DMA2_Stream3_IRQn interrupt configuration */
    HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 3, 0);
 80054b0:	2200      	movs	r2, #0
 80054b2:	2103      	movs	r1, #3
 80054b4:	203b      	movs	r0, #59	; 0x3b
 80054b6:	f000 fbe4 	bl	8005c82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80054ba:	203b      	movs	r0, #59	; 0x3b
 80054bc:	f000 fbfd 	bl	8005cba <HAL_NVIC_EnableIRQ>
    /* DMA2_Stream6_IRQn interrupt configuration */
    HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 3, 0);
 80054c0:	2200      	movs	r2, #0
 80054c2:	2103      	movs	r1, #3
 80054c4:	2045      	movs	r0, #69	; 0x45
 80054c6:	f000 fbdc 	bl	8005c82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 80054ca:	2045      	movs	r0, #69	; 0x45
 80054cc:	f000 fbf5 	bl	8005cba <HAL_NVIC_EnableIRQ>

  /* USER CODE END SDIO_MspInit 1 */
  }
}
 80054d0:	bf00      	nop
 80054d2:	3730      	adds	r7, #48	; 0x30
 80054d4:	46bd      	mov	sp, r7
 80054d6:	bd80      	pop	{r7, pc}
 80054d8:	40012c00 	.word	0x40012c00
 80054dc:	40023800 	.word	0x40023800
 80054e0:	40020000 	.word	0x40020000
 80054e4:	40020400 	.word	0x40020400
 80054e8:	20000420 	.word	0x20000420
 80054ec:	40026458 	.word	0x40026458
 80054f0:	20000480 	.word	0x20000480
 80054f4:	400264a0 	.word	0x400264a0

080054f8 <cliSd>:



#ifdef _USE_HW_CLI
void cliSd(cli_args_t *args)
{
 80054f8:	b590      	push	{r4, r7, lr}
 80054fa:	f5ad 7d07 	sub.w	sp, sp, #540	; 0x21c
 80054fe:	af00      	add	r7, sp, #0
 8005500:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8005504:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8005508:	6018      	str	r0, [r3, #0]
  bool ret = false;
 800550a:	2300      	movs	r3, #0
 800550c:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217


  if (args->argc == 1 && args->isStr(0, "info") == true)
 8005510:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8005514:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	881b      	ldrh	r3, [r3, #0]
 800551c:	2b01      	cmp	r3, #1
 800551e:	f040 8094 	bne.w	800564a <cliSd+0x152>
 8005522:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8005526:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	695b      	ldr	r3, [r3, #20]
 800552e:	4979      	ldr	r1, [pc, #484]	; (8005714 <cliSd+0x21c>)
 8005530:	2000      	movs	r0, #0
 8005532:	4798      	blx	r3
 8005534:	4603      	mov	r3, r0
 8005536:	2b00      	cmp	r3, #0
 8005538:	f000 8087 	beq.w	800564a <cliSd+0x152>
  {
    sd_info_t sd_info;

    cliPrintf("sd init      : %d\n", is_init);
 800553c:	4b76      	ldr	r3, [pc, #472]	; (8005718 <cliSd+0x220>)
 800553e:	781b      	ldrb	r3, [r3, #0]
 8005540:	4619      	mov	r1, r3
 8005542:	4876      	ldr	r0, [pc, #472]	; (800571c <cliSd+0x224>)
 8005544:	f7fd fda8 	bl	8003098 <cliPrintf>
    cliPrintf("sd connected : %d\n", is_detected);
 8005548:	4b75      	ldr	r3, [pc, #468]	; (8005720 <cliSd+0x228>)
 800554a:	781b      	ldrb	r3, [r3, #0]
 800554c:	4619      	mov	r1, r3
 800554e:	4875      	ldr	r0, [pc, #468]	; (8005724 <cliSd+0x22c>)
 8005550:	f7fd fda2 	bl	8003098 <cliPrintf>

    if (is_init == true)
 8005554:	4b70      	ldr	r3, [pc, #448]	; (8005718 <cliSd+0x220>)
 8005556:	781b      	ldrb	r3, [r3, #0]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d073      	beq.n	8005644 <cliSd+0x14c>
    {
      if (sdGetInfo(&sd_info) == true)
 800555c:	f107 030c 	add.w	r3, r7, #12
 8005560:	4618      	mov	r0, r3
 8005562:	f7ff fd77 	bl	8005054 <sdGetInfo>
 8005566:	4603      	mov	r3, r0
 8005568:	2b00      	cmp	r3, #0
 800556a:	d06b      	beq.n	8005644 <cliSd+0x14c>
      {
        cliPrintf("   card_type            : %d\n", sd_info.card_type);
 800556c:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8005570:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	4619      	mov	r1, r3
 8005578:	486b      	ldr	r0, [pc, #428]	; (8005728 <cliSd+0x230>)
 800557a:	f7fd fd8d 	bl	8003098 <cliPrintf>
        cliPrintf("   card_version         : %d\n", sd_info.card_version);
 800557e:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8005582:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8005586:	685b      	ldr	r3, [r3, #4]
 8005588:	4619      	mov	r1, r3
 800558a:	4868      	ldr	r0, [pc, #416]	; (800572c <cliSd+0x234>)
 800558c:	f7fd fd84 	bl	8003098 <cliPrintf>
        cliPrintf("   card_class           : %d\n", sd_info.card_class);
 8005590:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8005594:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8005598:	689b      	ldr	r3, [r3, #8]
 800559a:	4619      	mov	r1, r3
 800559c:	4864      	ldr	r0, [pc, #400]	; (8005730 <cliSd+0x238>)
 800559e:	f7fd fd7b 	bl	8003098 <cliPrintf>
        cliPrintf("   rel_card_Add         : %d\n", sd_info.rel_card_Add);
 80055a2:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80055a6:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80055aa:	68db      	ldr	r3, [r3, #12]
 80055ac:	4619      	mov	r1, r3
 80055ae:	4861      	ldr	r0, [pc, #388]	; (8005734 <cliSd+0x23c>)
 80055b0:	f7fd fd72 	bl	8003098 <cliPrintf>
        cliPrintf("   block_numbers        : %d\n", sd_info.block_numbers);
 80055b4:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80055b8:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80055bc:	691b      	ldr	r3, [r3, #16]
 80055be:	4619      	mov	r1, r3
 80055c0:	485d      	ldr	r0, [pc, #372]	; (8005738 <cliSd+0x240>)
 80055c2:	f7fd fd69 	bl	8003098 <cliPrintf>
        cliPrintf("   block_size           : %d\n", sd_info.block_size);
 80055c6:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80055ca:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80055ce:	695b      	ldr	r3, [r3, #20]
 80055d0:	4619      	mov	r1, r3
 80055d2:	485a      	ldr	r0, [pc, #360]	; (800573c <cliSd+0x244>)
 80055d4:	f7fd fd60 	bl	8003098 <cliPrintf>
        cliPrintf("   log_block_numbers    : %d\n", sd_info.log_block_numbers);
 80055d8:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80055dc:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80055e0:	699b      	ldr	r3, [r3, #24]
 80055e2:	4619      	mov	r1, r3
 80055e4:	4856      	ldr	r0, [pc, #344]	; (8005740 <cliSd+0x248>)
 80055e6:	f7fd fd57 	bl	8003098 <cliPrintf>
        cliPrintf("   log_block_size       : %d\n", sd_info.log_block_size);
 80055ea:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80055ee:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80055f2:	69db      	ldr	r3, [r3, #28]
 80055f4:	4619      	mov	r1, r3
 80055f6:	4853      	ldr	r0, [pc, #332]	; (8005744 <cliSd+0x24c>)
 80055f8:	f7fd fd4e 	bl	8003098 <cliPrintf>
        cliPrintf("   card_size            : %d MB, %d.%d GB\n", sd_info.card_size, sd_info.card_size/1024, ((sd_info.card_size * 10)/1024) % 10);
 80055fc:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8005600:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8005604:	6a18      	ldr	r0, [r3, #32]
 8005606:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800560a:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 800560e:	6a1b      	ldr	r3, [r3, #32]
 8005610:	0a9c      	lsrs	r4, r3, #10
 8005612:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8005616:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 800561a:	6a1a      	ldr	r2, [r3, #32]
 800561c:	4613      	mov	r3, r2
 800561e:	009b      	lsls	r3, r3, #2
 8005620:	4413      	add	r3, r2
 8005622:	005b      	lsls	r3, r3, #1
 8005624:	0a99      	lsrs	r1, r3, #10
 8005626:	4b48      	ldr	r3, [pc, #288]	; (8005748 <cliSd+0x250>)
 8005628:	fba3 2301 	umull	r2, r3, r3, r1
 800562c:	08da      	lsrs	r2, r3, #3
 800562e:	4613      	mov	r3, r2
 8005630:	009b      	lsls	r3, r3, #2
 8005632:	4413      	add	r3, r2
 8005634:	005b      	lsls	r3, r3, #1
 8005636:	1aca      	subs	r2, r1, r3
 8005638:	4613      	mov	r3, r2
 800563a:	4622      	mov	r2, r4
 800563c:	4601      	mov	r1, r0
 800563e:	4843      	ldr	r0, [pc, #268]	; (800574c <cliSd+0x254>)
 8005640:	f7fd fd2a 	bl	8003098 <cliPrintf>
      }
    }
    ret = true;
 8005644:	2301      	movs	r3, #1
 8005646:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
  }

  if (args->argc == 2 && args->isStr(0, "read") == true)
 800564a:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800564e:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	881b      	ldrh	r3, [r3, #0]
 8005656:	2b02      	cmp	r3, #2
 8005658:	d146      	bne.n	80056e8 <cliSd+0x1f0>
 800565a:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800565e:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	695b      	ldr	r3, [r3, #20]
 8005666:	493a      	ldr	r1, [pc, #232]	; (8005750 <cliSd+0x258>)
 8005668:	2000      	movs	r0, #0
 800566a:	4798      	blx	r3
 800566c:	4603      	mov	r3, r0
 800566e:	2b00      	cmp	r3, #0
 8005670:	d03a      	beq.n	80056e8 <cliSd+0x1f0>
  {
    uint32_t number;
    uint32_t buf[512/4];

    number = args->getData(1);
 8005672:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8005676:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	689b      	ldr	r3, [r3, #8]
 800567e:	2001      	movs	r0, #1
 8005680:	4798      	blx	r3
 8005682:	4603      	mov	r3, r0
 8005684:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c

    if (sdReadBlocks(number, (uint8_t *)buf, 1, 100) == true)
 8005688:	f107 010c 	add.w	r1, r7, #12
 800568c:	2364      	movs	r3, #100	; 0x64
 800568e:	2201      	movs	r2, #1
 8005690:	f8d7 020c 	ldr.w	r0, [r7, #524]	; 0x20c
 8005694:	f7ff fd6c 	bl	8005170 <sdReadBlocks>
 8005698:	4603      	mov	r3, r0
 800569a:	2b00      	cmp	r3, #0
 800569c:	d01e      	beq.n	80056dc <cliSd+0x1e4>
    {
      for (int i=0; i<512/4; i++)
 800569e:	2300      	movs	r3, #0
 80056a0:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 80056a4:	e015      	b.n	80056d2 <cliSd+0x1da>
      {
        cliPrintf("%d:%04d : 0x%08X\n", number, i*4, buf[i]);
 80056a6:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 80056aa:	0099      	lsls	r1, r3, #2
 80056ac:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80056b0:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80056b4:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 80056b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80056bc:	460a      	mov	r2, r1
 80056be:	f8d7 120c 	ldr.w	r1, [r7, #524]	; 0x20c
 80056c2:	4824      	ldr	r0, [pc, #144]	; (8005754 <cliSd+0x25c>)
 80056c4:	f7fd fce8 	bl	8003098 <cliPrintf>
      for (int i=0; i<512/4; i++)
 80056c8:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 80056cc:	3301      	adds	r3, #1
 80056ce:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 80056d2:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 80056d6:	2b7f      	cmp	r3, #127	; 0x7f
 80056d8:	dde5      	ble.n	80056a6 <cliSd+0x1ae>
 80056da:	e002      	b.n	80056e2 <cliSd+0x1ea>
      }
    }
    else
    {
      cliPrintf("sdRead Fail\n");
 80056dc:	481e      	ldr	r0, [pc, #120]	; (8005758 <cliSd+0x260>)
 80056de:	f7fd fcdb 	bl	8003098 <cliPrintf>
    }

    ret = true;
 80056e2:	2301      	movs	r3, #1
 80056e4:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
  }

  if (ret != true)
 80056e8:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 80056ec:	f083 0301 	eor.w	r3, r3, #1
 80056f0:	b2db      	uxtb	r3, r3
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d009      	beq.n	800570a <cliSd+0x212>
  {
    cliPrintf("sd info\n");
 80056f6:	4819      	ldr	r0, [pc, #100]	; (800575c <cliSd+0x264>)
 80056f8:	f7fd fcce 	bl	8003098 <cliPrintf>

    if (is_init == true)
 80056fc:	4b06      	ldr	r3, [pc, #24]	; (8005718 <cliSd+0x220>)
 80056fe:	781b      	ldrb	r3, [r3, #0]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d002      	beq.n	800570a <cliSd+0x212>
    {
      cliPrintf("sd read block_number\n");
 8005704:	4816      	ldr	r0, [pc, #88]	; (8005760 <cliSd+0x268>)
 8005706:	f7fd fcc7 	bl	8003098 <cliPrintf>
    }
  }
}
 800570a:	bf00      	nop
 800570c:	f507 7707 	add.w	r7, r7, #540	; 0x21c
 8005710:	46bd      	mov	sp, r7
 8005712:	bd90      	pop	{r4, r7, pc}
 8005714:	080196bc 	.word	0x080196bc
 8005718:	20005280 	.word	0x20005280
 800571c:	080196c4 	.word	0x080196c4
 8005720:	20005281 	.word	0x20005281
 8005724:	080196d8 	.word	0x080196d8
 8005728:	080196ec 	.word	0x080196ec
 800572c:	0801970c 	.word	0x0801970c
 8005730:	0801972c 	.word	0x0801972c
 8005734:	0801974c 	.word	0x0801974c
 8005738:	0801976c 	.word	0x0801976c
 800573c:	0801978c 	.word	0x0801978c
 8005740:	080197ac 	.word	0x080197ac
 8005744:	080197cc 	.word	0x080197cc
 8005748:	cccccccd 	.word	0xcccccccd
 800574c:	080197ec 	.word	0x080197ec
 8005750:	08019818 	.word	0x08019818
 8005754:	08019820 	.word	0x08019820
 8005758:	08019834 	.word	0x08019834
 800575c:	08019844 	.word	0x08019844
 8005760:	08019850 	.word	0x08019850

08005764 <spiInit>:
SPI_HandleTypeDef hspi4;
DMA_HandleTypeDef hdma_spi4_tx;


bool spiInit(void)
{
 8005764:	b480      	push	{r7}
 8005766:	b083      	sub	sp, #12
 8005768:	af00      	add	r7, sp, #0
  bool ret = true;
 800576a:	2301      	movs	r3, #1
 800576c:	70fb      	strb	r3, [r7, #3]


  for (int i=0; i<SPI_MAX_CH; i++)
 800576e:	2300      	movs	r3, #0
 8005770:	607b      	str	r3, [r7, #4]
 8005772:	e03d      	b.n	80057f0 <spiInit+0x8c>
  {
    spi_tbl[i].is_open = false;
 8005774:	4923      	ldr	r1, [pc, #140]	; (8005804 <spiInit+0xa0>)
 8005776:	687a      	ldr	r2, [r7, #4]
 8005778:	4613      	mov	r3, r2
 800577a:	009b      	lsls	r3, r3, #2
 800577c:	4413      	add	r3, r2
 800577e:	009b      	lsls	r3, r3, #2
 8005780:	440b      	add	r3, r1
 8005782:	2200      	movs	r2, #0
 8005784:	701a      	strb	r2, [r3, #0]
    spi_tbl[i].is_tx_done = true;
 8005786:	491f      	ldr	r1, [pc, #124]	; (8005804 <spiInit+0xa0>)
 8005788:	687a      	ldr	r2, [r7, #4]
 800578a:	4613      	mov	r3, r2
 800578c:	009b      	lsls	r3, r3, #2
 800578e:	4413      	add	r3, r2
 8005790:	009b      	lsls	r3, r3, #2
 8005792:	440b      	add	r3, r1
 8005794:	3301      	adds	r3, #1
 8005796:	2201      	movs	r2, #1
 8005798:	701a      	strb	r2, [r3, #0]
    spi_tbl[i].is_error = false;
 800579a:	491a      	ldr	r1, [pc, #104]	; (8005804 <spiInit+0xa0>)
 800579c:	687a      	ldr	r2, [r7, #4]
 800579e:	4613      	mov	r3, r2
 80057a0:	009b      	lsls	r3, r3, #2
 80057a2:	4413      	add	r3, r2
 80057a4:	009b      	lsls	r3, r3, #2
 80057a6:	440b      	add	r3, r1
 80057a8:	3302      	adds	r3, #2
 80057aa:	2200      	movs	r2, #0
 80057ac:	701a      	strb	r2, [r3, #0]
    spi_tbl[i].func_tx = NULL;
 80057ae:	4915      	ldr	r1, [pc, #84]	; (8005804 <spiInit+0xa0>)
 80057b0:	687a      	ldr	r2, [r7, #4]
 80057b2:	4613      	mov	r3, r2
 80057b4:	009b      	lsls	r3, r3, #2
 80057b6:	4413      	add	r3, r2
 80057b8:	009b      	lsls	r3, r3, #2
 80057ba:	440b      	add	r3, r1
 80057bc:	3304      	adds	r3, #4
 80057be:	2200      	movs	r2, #0
 80057c0:	601a      	str	r2, [r3, #0]
    spi_tbl[i].h_dma_rx = NULL;
 80057c2:	4910      	ldr	r1, [pc, #64]	; (8005804 <spiInit+0xa0>)
 80057c4:	687a      	ldr	r2, [r7, #4]
 80057c6:	4613      	mov	r3, r2
 80057c8:	009b      	lsls	r3, r3, #2
 80057ca:	4413      	add	r3, r2
 80057cc:	009b      	lsls	r3, r3, #2
 80057ce:	440b      	add	r3, r1
 80057d0:	3310      	adds	r3, #16
 80057d2:	2200      	movs	r2, #0
 80057d4:	601a      	str	r2, [r3, #0]
    spi_tbl[i].h_dma_tx = NULL;
 80057d6:	490b      	ldr	r1, [pc, #44]	; (8005804 <spiInit+0xa0>)
 80057d8:	687a      	ldr	r2, [r7, #4]
 80057da:	4613      	mov	r3, r2
 80057dc:	009b      	lsls	r3, r3, #2
 80057de:	4413      	add	r3, r2
 80057e0:	009b      	lsls	r3, r3, #2
 80057e2:	440b      	add	r3, r1
 80057e4:	330c      	adds	r3, #12
 80057e6:	2200      	movs	r2, #0
 80057e8:	601a      	str	r2, [r3, #0]
  for (int i=0; i<SPI_MAX_CH; i++)
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	3301      	adds	r3, #1
 80057ee:	607b      	str	r3, [r7, #4]
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	ddbe      	ble.n	8005774 <spiInit+0x10>
  }

  return ret;
 80057f6:	78fb      	ldrb	r3, [r7, #3]
}
 80057f8:	4618      	mov	r0, r3
 80057fa:	370c      	adds	r7, #12
 80057fc:	46bd      	mov	sp, r7
 80057fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005802:	4770      	bx	lr
 8005804:	20005284 	.word	0x20005284

08005808 <HAL_SPI_ErrorCallback>:
}



void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005808:	b480      	push	{r7}
 800580a:	b083      	sub	sp, #12
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
  if (hspi->Instance == spi_tbl[_DEF_SPI1].h_spi->Instance)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681a      	ldr	r2, [r3, #0]
 8005814:	4b06      	ldr	r3, [pc, #24]	; (8005830 <HAL_SPI_ErrorCallback+0x28>)
 8005816:	689b      	ldr	r3, [r3, #8]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	429a      	cmp	r2, r3
 800581c:	d102      	bne.n	8005824 <HAL_SPI_ErrorCallback+0x1c>
  {
    spi_tbl[_DEF_SPI1].is_error = true;
 800581e:	4b04      	ldr	r3, [pc, #16]	; (8005830 <HAL_SPI_ErrorCallback+0x28>)
 8005820:	2201      	movs	r2, #1
 8005822:	709a      	strb	r2, [r3, #2]
  }
}
 8005824:	bf00      	nop
 8005826:	370c      	adds	r7, #12
 8005828:	46bd      	mov	sp, r7
 800582a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582e:	4770      	bx	lr
 8005830:	20005284 	.word	0x20005284

08005834 <uartOpen>:
{
	return true;
}

bool uartOpen(uint8_t ch, uint32_t baud)
{
 8005834:	b480      	push	{r7}
 8005836:	b085      	sub	sp, #20
 8005838:	af00      	add	r7, sp, #0
 800583a:	4603      	mov	r3, r0
 800583c:	6039      	str	r1, [r7, #0]
 800583e:	71fb      	strb	r3, [r7, #7]
	bool ret = false;
 8005840:	2300      	movs	r3, #0
 8005842:	73fb      	strb	r3, [r7, #15]

	switch(ch)
 8005844:	79fb      	ldrb	r3, [r7, #7]
 8005846:	2b00      	cmp	r3, #0
 8005848:	d106      	bne.n	8005858 <uartOpen+0x24>
	{
		case _DEF_UART1:
			is_open[ch] = true;
 800584a:	79fb      	ldrb	r3, [r7, #7]
 800584c:	4a06      	ldr	r2, [pc, #24]	; (8005868 <uartOpen+0x34>)
 800584e:	2101      	movs	r1, #1
 8005850:	54d1      	strb	r1, [r2, r3]
			ret = true;
 8005852:	2301      	movs	r3, #1
 8005854:	73fb      	strb	r3, [r7, #15]
			break;
 8005856:	bf00      	nop
			qbuffer[ch].out = qbuffer[ch].in;
			break;
			#endif
	}

	return ret;
 8005858:	7bfb      	ldrb	r3, [r7, #15]
}
 800585a:	4618      	mov	r0, r3
 800585c:	3714      	adds	r7, #20
 800585e:	46bd      	mov	sp, r7
 8005860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005864:	4770      	bx	lr
 8005866:	bf00      	nop
 8005868:	20005350 	.word	0x20005350

0800586c <uartAvailable>:

uint32_t uartAvailable(uint8_t ch)
{
 800586c:	b580      	push	{r7, lr}
 800586e:	b084      	sub	sp, #16
 8005870:	af00      	add	r7, sp, #0
 8005872:	4603      	mov	r3, r0
 8005874:	71fb      	strb	r3, [r7, #7]
	uint32_t ret;

	switch(ch)
 8005876:	79fb      	ldrb	r3, [r7, #7]
 8005878:	2b00      	cmp	r3, #0
 800587a:	d001      	beq.n	8005880 <uartAvailable+0x14>
 800587c:	2b01      	cmp	r3, #1
		case _DEF_UART2:
			#ifdef _USE_UART2
			qbuffer[ch].in = (qbuffer[ch].len - hdma_usart1_rx.Instance->NDTR);
			ret = qbufferAvailable(&qbuffer[ch]);
			#endif
			break;
 800587e:	e003      	b.n	8005888 <uartAvailable+0x1c>
			ret = cdcAvailable();
 8005880:	f7fc fe68 	bl	8002554 <cdcAvailable>
 8005884:	60f8      	str	r0, [r7, #12]
			break;
 8005886:	bf00      	nop
	}

	return ret;
 8005888:	68fb      	ldr	r3, [r7, #12]
}
 800588a:	4618      	mov	r0, r3
 800588c:	3710      	adds	r7, #16
 800588e:	46bd      	mov	sp, r7
 8005890:	bd80      	pop	{r7, pc}

08005892 <uartRead>:

uint8_t uartRead(uint8_t ch)
{
 8005892:	b580      	push	{r7, lr}
 8005894:	b084      	sub	sp, #16
 8005896:	af00      	add	r7, sp, #0
 8005898:	4603      	mov	r3, r0
 800589a:	71fb      	strb	r3, [r7, #7]
	uint8_t ret;

	switch(ch)
 800589c:	79fb      	ldrb	r3, [r7, #7]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d001      	beq.n	80058a6 <uartRead+0x14>
 80058a2:	2b01      	cmp	r3, #1

		case _DEF_UART2:
			#ifdef _USE_UART2
			qbufferRead(&qbuffer[_DEF_UART2], &ret, 1);
			#endif
			break;
 80058a4:	e004      	b.n	80058b0 <uartRead+0x1e>
			ret = cdcRead();
 80058a6:	f7fc fe6b 	bl	8002580 <cdcRead>
 80058aa:	4603      	mov	r3, r0
 80058ac:	73fb      	strb	r3, [r7, #15]
			break;
 80058ae:	bf00      	nop
	}

	return ret;
 80058b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80058b2:	4618      	mov	r0, r3
 80058b4:	3710      	adds	r7, #16
 80058b6:	46bd      	mov	sp, r7
 80058b8:	bd80      	pop	{r7, pc}

080058ba <uartWrite>:

uint32_t uartWrite(uint8_t ch, uint8_t *p_data, uint32_t length)
{
 80058ba:	b580      	push	{r7, lr}
 80058bc:	b086      	sub	sp, #24
 80058be:	af00      	add	r7, sp, #0
 80058c0:	4603      	mov	r3, r0
 80058c2:	60b9      	str	r1, [r7, #8]
 80058c4:	607a      	str	r2, [r7, #4]
 80058c6:	73fb      	strb	r3, [r7, #15]

	#ifdef _USE_UART2
	HAL_StatusTypeDef status;
	#endif

	switch(ch)
 80058c8:	7bfb      	ldrb	r3, [r7, #15]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d001      	beq.n	80058d2 <uartWrite+0x18>
 80058ce:	2b01      	cmp	r3, #1
			if(status == HAL_OK)
			{
				ret = length;
			}
			#endif
			break;
 80058d0:	e005      	b.n	80058de <uartWrite+0x24>
			ret = cdcWrite(p_data, length);
 80058d2:	6879      	ldr	r1, [r7, #4]
 80058d4:	68b8      	ldr	r0, [r7, #8]
 80058d6:	f7fc fe9b 	bl	8002610 <cdcWrite>
 80058da:	6178      	str	r0, [r7, #20]
			break;
 80058dc:	bf00      	nop
	}

	return ret;
 80058de:	697b      	ldr	r3, [r7, #20]
}
 80058e0:	4618      	mov	r0, r3
 80058e2:	3718      	adds	r7, #24
 80058e4:	46bd      	mov	sp, r7
 80058e6:	bd80      	pop	{r7, pc}

080058e8 <uartPrintf>:

uint32_t uartPrintf(uint8_t ch, char *fmt, ...)
{
 80058e8:	b40e      	push	{r1, r2, r3}
 80058ea:	b580      	push	{r7, lr}
 80058ec:	b0c7      	sub	sp, #284	; 0x11c
 80058ee:	af00      	add	r7, sp, #0
 80058f0:	4602      	mov	r2, r0
 80058f2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80058f6:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 80058fa:	701a      	strb	r2, [r3, #0]
	char buf[256];
	va_list args;
	int len;
	uint32_t ret;

	va_start(args, fmt);
 80058fc:	f507 7294 	add.w	r2, r7, #296	; 0x128
 8005900:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8005904:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005908:	601a      	str	r2, [r3, #0]
	len = vsnprintf(buf, 256, fmt, args);
 800590a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800590e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005912:	f107 0010 	add.w	r0, r7, #16
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 800591c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005920:	f011 fbc8 	bl	80170b4 <vsniprintf>
 8005924:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114

	ret = uartWrite(ch, (uint8_t *)buf, len);
 8005928:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800592c:	f107 0110 	add.w	r1, r7, #16
 8005930:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8005934:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 8005938:	781b      	ldrb	r3, [r3, #0]
 800593a:	4618      	mov	r0, r3
 800593c:	f7ff ffbd 	bl	80058ba <uartWrite>
 8005940:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

	va_end(args);

	return ret;
 8005944:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
}
 8005948:	4618      	mov	r0, r3
 800594a:	f507 778e 	add.w	r7, r7, #284	; 0x11c
 800594e:	46bd      	mov	sp, r7
 8005950:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005954:	b003      	add	sp, #12
 8005956:	4770      	bx	lr

08005958 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005958:	b580      	push	{r7, lr}
 800595a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800595c:	4b0e      	ldr	r3, [pc, #56]	; (8005998 <HAL_Init+0x40>)
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	4a0d      	ldr	r2, [pc, #52]	; (8005998 <HAL_Init+0x40>)
 8005962:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005966:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005968:	4b0b      	ldr	r3, [pc, #44]	; (8005998 <HAL_Init+0x40>)
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	4a0a      	ldr	r2, [pc, #40]	; (8005998 <HAL_Init+0x40>)
 800596e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005972:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005974:	4b08      	ldr	r3, [pc, #32]	; (8005998 <HAL_Init+0x40>)
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	4a07      	ldr	r2, [pc, #28]	; (8005998 <HAL_Init+0x40>)
 800597a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800597e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005980:	2003      	movs	r0, #3
 8005982:	f000 f973 	bl	8005c6c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005986:	2000      	movs	r0, #0
 8005988:	f000 f808 	bl	800599c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800598c:	f7fb fe60 	bl	8001650 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005990:	2300      	movs	r3, #0
}
 8005992:	4618      	mov	r0, r3
 8005994:	bd80      	pop	{r7, pc}
 8005996:	bf00      	nop
 8005998:	40023c00 	.word	0x40023c00

0800599c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800599c:	b580      	push	{r7, lr}
 800599e:	b082      	sub	sp, #8
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80059a4:	4b12      	ldr	r3, [pc, #72]	; (80059f0 <HAL_InitTick+0x54>)
 80059a6:	681a      	ldr	r2, [r3, #0]
 80059a8:	4b12      	ldr	r3, [pc, #72]	; (80059f4 <HAL_InitTick+0x58>)
 80059aa:	781b      	ldrb	r3, [r3, #0]
 80059ac:	4619      	mov	r1, r3
 80059ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80059b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80059b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80059ba:	4618      	mov	r0, r3
 80059bc:	f000 f999 	bl	8005cf2 <HAL_SYSTICK_Config>
 80059c0:	4603      	mov	r3, r0
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d001      	beq.n	80059ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80059c6:	2301      	movs	r3, #1
 80059c8:	e00e      	b.n	80059e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	2b0f      	cmp	r3, #15
 80059ce:	d80a      	bhi.n	80059e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80059d0:	2200      	movs	r2, #0
 80059d2:	6879      	ldr	r1, [r7, #4]
 80059d4:	f04f 30ff 	mov.w	r0, #4294967295
 80059d8:	f000 f953 	bl	8005c82 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80059dc:	4a06      	ldr	r2, [pc, #24]	; (80059f8 <HAL_InitTick+0x5c>)
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80059e2:	2300      	movs	r3, #0
 80059e4:	e000      	b.n	80059e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80059e6:	2301      	movs	r3, #1
}
 80059e8:	4618      	mov	r0, r3
 80059ea:	3708      	adds	r7, #8
 80059ec:	46bd      	mov	sp, r7
 80059ee:	bd80      	pop	{r7, pc}
 80059f0:	20000040 	.word	0x20000040
 80059f4:	200000a4 	.word	0x200000a4
 80059f8:	200000a0 	.word	0x200000a0

080059fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80059fc:	b480      	push	{r7}
 80059fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005a00:	4b06      	ldr	r3, [pc, #24]	; (8005a1c <HAL_IncTick+0x20>)
 8005a02:	781b      	ldrb	r3, [r3, #0]
 8005a04:	461a      	mov	r2, r3
 8005a06:	4b06      	ldr	r3, [pc, #24]	; (8005a20 <HAL_IncTick+0x24>)
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	4413      	add	r3, r2
 8005a0c:	4a04      	ldr	r2, [pc, #16]	; (8005a20 <HAL_IncTick+0x24>)
 8005a0e:	6013      	str	r3, [r2, #0]
}
 8005a10:	bf00      	nop
 8005a12:	46bd      	mov	sp, r7
 8005a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a18:	4770      	bx	lr
 8005a1a:	bf00      	nop
 8005a1c:	200000a4 	.word	0x200000a4
 8005a20:	20005354 	.word	0x20005354

08005a24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005a24:	b480      	push	{r7}
 8005a26:	af00      	add	r7, sp, #0
  return uwTick;
 8005a28:	4b03      	ldr	r3, [pc, #12]	; (8005a38 <HAL_GetTick+0x14>)
 8005a2a:	681b      	ldr	r3, [r3, #0]
}
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a34:	4770      	bx	lr
 8005a36:	bf00      	nop
 8005a38:	20005354 	.word	0x20005354

08005a3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	b084      	sub	sp, #16
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005a44:	f7ff ffee 	bl	8005a24 <HAL_GetTick>
 8005a48:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a54:	d005      	beq.n	8005a62 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005a56:	4b0a      	ldr	r3, [pc, #40]	; (8005a80 <HAL_Delay+0x44>)
 8005a58:	781b      	ldrb	r3, [r3, #0]
 8005a5a:	461a      	mov	r2, r3
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	4413      	add	r3, r2
 8005a60:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8005a62:	bf00      	nop
 8005a64:	f7ff ffde 	bl	8005a24 <HAL_GetTick>
 8005a68:	4602      	mov	r2, r0
 8005a6a:	68bb      	ldr	r3, [r7, #8]
 8005a6c:	1ad3      	subs	r3, r2, r3
 8005a6e:	68fa      	ldr	r2, [r7, #12]
 8005a70:	429a      	cmp	r2, r3
 8005a72:	d8f7      	bhi.n	8005a64 <HAL_Delay+0x28>
  {
  }
}
 8005a74:	bf00      	nop
 8005a76:	bf00      	nop
 8005a78:	3710      	adds	r7, #16
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	bd80      	pop	{r7, pc}
 8005a7e:	bf00      	nop
 8005a80:	200000a4 	.word	0x200000a4

08005a84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005a84:	b480      	push	{r7}
 8005a86:	b085      	sub	sp, #20
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	f003 0307 	and.w	r3, r3, #7
 8005a92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005a94:	4b0c      	ldr	r3, [pc, #48]	; (8005ac8 <__NVIC_SetPriorityGrouping+0x44>)
 8005a96:	68db      	ldr	r3, [r3, #12]
 8005a98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005a9a:	68ba      	ldr	r2, [r7, #8]
 8005a9c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005aa0:	4013      	ands	r3, r2
 8005aa2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005aa8:	68bb      	ldr	r3, [r7, #8]
 8005aaa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005aac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005ab0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005ab4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005ab6:	4a04      	ldr	r2, [pc, #16]	; (8005ac8 <__NVIC_SetPriorityGrouping+0x44>)
 8005ab8:	68bb      	ldr	r3, [r7, #8]
 8005aba:	60d3      	str	r3, [r2, #12]
}
 8005abc:	bf00      	nop
 8005abe:	3714      	adds	r7, #20
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac6:	4770      	bx	lr
 8005ac8:	e000ed00 	.word	0xe000ed00

08005acc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005acc:	b480      	push	{r7}
 8005ace:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005ad0:	4b04      	ldr	r3, [pc, #16]	; (8005ae4 <__NVIC_GetPriorityGrouping+0x18>)
 8005ad2:	68db      	ldr	r3, [r3, #12]
 8005ad4:	0a1b      	lsrs	r3, r3, #8
 8005ad6:	f003 0307 	and.w	r3, r3, #7
}
 8005ada:	4618      	mov	r0, r3
 8005adc:	46bd      	mov	sp, r7
 8005ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae2:	4770      	bx	lr
 8005ae4:	e000ed00 	.word	0xe000ed00

08005ae8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005ae8:	b480      	push	{r7}
 8005aea:	b083      	sub	sp, #12
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	4603      	mov	r3, r0
 8005af0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005af2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	db0b      	blt.n	8005b12 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005afa:	79fb      	ldrb	r3, [r7, #7]
 8005afc:	f003 021f 	and.w	r2, r3, #31
 8005b00:	4907      	ldr	r1, [pc, #28]	; (8005b20 <__NVIC_EnableIRQ+0x38>)
 8005b02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b06:	095b      	lsrs	r3, r3, #5
 8005b08:	2001      	movs	r0, #1
 8005b0a:	fa00 f202 	lsl.w	r2, r0, r2
 8005b0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005b12:	bf00      	nop
 8005b14:	370c      	adds	r7, #12
 8005b16:	46bd      	mov	sp, r7
 8005b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1c:	4770      	bx	lr
 8005b1e:	bf00      	nop
 8005b20:	e000e100 	.word	0xe000e100

08005b24 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8005b24:	b480      	push	{r7}
 8005b26:	b083      	sub	sp, #12
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	4603      	mov	r3, r0
 8005b2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005b2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	db12      	blt.n	8005b5c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005b36:	79fb      	ldrb	r3, [r7, #7]
 8005b38:	f003 021f 	and.w	r2, r3, #31
 8005b3c:	490a      	ldr	r1, [pc, #40]	; (8005b68 <__NVIC_DisableIRQ+0x44>)
 8005b3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b42:	095b      	lsrs	r3, r3, #5
 8005b44:	2001      	movs	r0, #1
 8005b46:	fa00 f202 	lsl.w	r2, r0, r2
 8005b4a:	3320      	adds	r3, #32
 8005b4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8005b50:	f3bf 8f4f 	dsb	sy
}
 8005b54:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8005b56:	f3bf 8f6f 	isb	sy
}
 8005b5a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8005b5c:	bf00      	nop
 8005b5e:	370c      	adds	r7, #12
 8005b60:	46bd      	mov	sp, r7
 8005b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b66:	4770      	bx	lr
 8005b68:	e000e100 	.word	0xe000e100

08005b6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005b6c:	b480      	push	{r7}
 8005b6e:	b083      	sub	sp, #12
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	4603      	mov	r3, r0
 8005b74:	6039      	str	r1, [r7, #0]
 8005b76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005b78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	db0a      	blt.n	8005b96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005b80:	683b      	ldr	r3, [r7, #0]
 8005b82:	b2da      	uxtb	r2, r3
 8005b84:	490c      	ldr	r1, [pc, #48]	; (8005bb8 <__NVIC_SetPriority+0x4c>)
 8005b86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b8a:	0112      	lsls	r2, r2, #4
 8005b8c:	b2d2      	uxtb	r2, r2
 8005b8e:	440b      	add	r3, r1
 8005b90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005b94:	e00a      	b.n	8005bac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005b96:	683b      	ldr	r3, [r7, #0]
 8005b98:	b2da      	uxtb	r2, r3
 8005b9a:	4908      	ldr	r1, [pc, #32]	; (8005bbc <__NVIC_SetPriority+0x50>)
 8005b9c:	79fb      	ldrb	r3, [r7, #7]
 8005b9e:	f003 030f 	and.w	r3, r3, #15
 8005ba2:	3b04      	subs	r3, #4
 8005ba4:	0112      	lsls	r2, r2, #4
 8005ba6:	b2d2      	uxtb	r2, r2
 8005ba8:	440b      	add	r3, r1
 8005baa:	761a      	strb	r2, [r3, #24]
}
 8005bac:	bf00      	nop
 8005bae:	370c      	adds	r7, #12
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb6:	4770      	bx	lr
 8005bb8:	e000e100 	.word	0xe000e100
 8005bbc:	e000ed00 	.word	0xe000ed00

08005bc0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005bc0:	b480      	push	{r7}
 8005bc2:	b089      	sub	sp, #36	; 0x24
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	60f8      	str	r0, [r7, #12]
 8005bc8:	60b9      	str	r1, [r7, #8]
 8005bca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	f003 0307 	and.w	r3, r3, #7
 8005bd2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005bd4:	69fb      	ldr	r3, [r7, #28]
 8005bd6:	f1c3 0307 	rsb	r3, r3, #7
 8005bda:	2b04      	cmp	r3, #4
 8005bdc:	bf28      	it	cs
 8005bde:	2304      	movcs	r3, #4
 8005be0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005be2:	69fb      	ldr	r3, [r7, #28]
 8005be4:	3304      	adds	r3, #4
 8005be6:	2b06      	cmp	r3, #6
 8005be8:	d902      	bls.n	8005bf0 <NVIC_EncodePriority+0x30>
 8005bea:	69fb      	ldr	r3, [r7, #28]
 8005bec:	3b03      	subs	r3, #3
 8005bee:	e000      	b.n	8005bf2 <NVIC_EncodePriority+0x32>
 8005bf0:	2300      	movs	r3, #0
 8005bf2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005bf4:	f04f 32ff 	mov.w	r2, #4294967295
 8005bf8:	69bb      	ldr	r3, [r7, #24]
 8005bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8005bfe:	43da      	mvns	r2, r3
 8005c00:	68bb      	ldr	r3, [r7, #8]
 8005c02:	401a      	ands	r2, r3
 8005c04:	697b      	ldr	r3, [r7, #20]
 8005c06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005c08:	f04f 31ff 	mov.w	r1, #4294967295
 8005c0c:	697b      	ldr	r3, [r7, #20]
 8005c0e:	fa01 f303 	lsl.w	r3, r1, r3
 8005c12:	43d9      	mvns	r1, r3
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005c18:	4313      	orrs	r3, r2
         );
}
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	3724      	adds	r7, #36	; 0x24
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c24:	4770      	bx	lr
	...

08005c28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	b082      	sub	sp, #8
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	3b01      	subs	r3, #1
 8005c34:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005c38:	d301      	bcc.n	8005c3e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005c3a:	2301      	movs	r3, #1
 8005c3c:	e00f      	b.n	8005c5e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005c3e:	4a0a      	ldr	r2, [pc, #40]	; (8005c68 <SysTick_Config+0x40>)
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	3b01      	subs	r3, #1
 8005c44:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005c46:	210f      	movs	r1, #15
 8005c48:	f04f 30ff 	mov.w	r0, #4294967295
 8005c4c:	f7ff ff8e 	bl	8005b6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005c50:	4b05      	ldr	r3, [pc, #20]	; (8005c68 <SysTick_Config+0x40>)
 8005c52:	2200      	movs	r2, #0
 8005c54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005c56:	4b04      	ldr	r3, [pc, #16]	; (8005c68 <SysTick_Config+0x40>)
 8005c58:	2207      	movs	r2, #7
 8005c5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005c5c:	2300      	movs	r3, #0
}
 8005c5e:	4618      	mov	r0, r3
 8005c60:	3708      	adds	r7, #8
 8005c62:	46bd      	mov	sp, r7
 8005c64:	bd80      	pop	{r7, pc}
 8005c66:	bf00      	nop
 8005c68:	e000e010 	.word	0xe000e010

08005c6c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005c6c:	b580      	push	{r7, lr}
 8005c6e:	b082      	sub	sp, #8
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005c74:	6878      	ldr	r0, [r7, #4]
 8005c76:	f7ff ff05 	bl	8005a84 <__NVIC_SetPriorityGrouping>
}
 8005c7a:	bf00      	nop
 8005c7c:	3708      	adds	r7, #8
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	bd80      	pop	{r7, pc}

08005c82 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005c82:	b580      	push	{r7, lr}
 8005c84:	b086      	sub	sp, #24
 8005c86:	af00      	add	r7, sp, #0
 8005c88:	4603      	mov	r3, r0
 8005c8a:	60b9      	str	r1, [r7, #8]
 8005c8c:	607a      	str	r2, [r7, #4]
 8005c8e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005c90:	2300      	movs	r3, #0
 8005c92:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005c94:	f7ff ff1a 	bl	8005acc <__NVIC_GetPriorityGrouping>
 8005c98:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005c9a:	687a      	ldr	r2, [r7, #4]
 8005c9c:	68b9      	ldr	r1, [r7, #8]
 8005c9e:	6978      	ldr	r0, [r7, #20]
 8005ca0:	f7ff ff8e 	bl	8005bc0 <NVIC_EncodePriority>
 8005ca4:	4602      	mov	r2, r0
 8005ca6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005caa:	4611      	mov	r1, r2
 8005cac:	4618      	mov	r0, r3
 8005cae:	f7ff ff5d 	bl	8005b6c <__NVIC_SetPriority>
}
 8005cb2:	bf00      	nop
 8005cb4:	3718      	adds	r7, #24
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	bd80      	pop	{r7, pc}

08005cba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005cba:	b580      	push	{r7, lr}
 8005cbc:	b082      	sub	sp, #8
 8005cbe:	af00      	add	r7, sp, #0
 8005cc0:	4603      	mov	r3, r0
 8005cc2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005cc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005cc8:	4618      	mov	r0, r3
 8005cca:	f7ff ff0d 	bl	8005ae8 <__NVIC_EnableIRQ>
}
 8005cce:	bf00      	nop
 8005cd0:	3708      	adds	r7, #8
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	bd80      	pop	{r7, pc}

08005cd6 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8005cd6:	b580      	push	{r7, lr}
 8005cd8:	b082      	sub	sp, #8
 8005cda:	af00      	add	r7, sp, #0
 8005cdc:	4603      	mov	r3, r0
 8005cde:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8005ce0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	f7ff ff1d 	bl	8005b24 <__NVIC_DisableIRQ>
}
 8005cea:	bf00      	nop
 8005cec:	3708      	adds	r7, #8
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	bd80      	pop	{r7, pc}

08005cf2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005cf2:	b580      	push	{r7, lr}
 8005cf4:	b082      	sub	sp, #8
 8005cf6:	af00      	add	r7, sp, #0
 8005cf8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005cfa:	6878      	ldr	r0, [r7, #4]
 8005cfc:	f7ff ff94 	bl	8005c28 <SysTick_Config>
 8005d00:	4603      	mov	r3, r0
}
 8005d02:	4618      	mov	r0, r3
 8005d04:	3708      	adds	r7, #8
 8005d06:	46bd      	mov	sp, r7
 8005d08:	bd80      	pop	{r7, pc}
	...

08005d0c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	b086      	sub	sp, #24
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005d14:	2300      	movs	r3, #0
 8005d16:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005d18:	f7ff fe84 	bl	8005a24 <HAL_GetTick>
 8005d1c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d101      	bne.n	8005d28 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005d24:	2301      	movs	r3, #1
 8005d26:	e099      	b.n	8005e5c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2202      	movs	r2, #2
 8005d2c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2200      	movs	r2, #0
 8005d34:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	681a      	ldr	r2, [r3, #0]
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	f022 0201 	bic.w	r2, r2, #1
 8005d46:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005d48:	e00f      	b.n	8005d6a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005d4a:	f7ff fe6b 	bl	8005a24 <HAL_GetTick>
 8005d4e:	4602      	mov	r2, r0
 8005d50:	693b      	ldr	r3, [r7, #16]
 8005d52:	1ad3      	subs	r3, r2, r3
 8005d54:	2b05      	cmp	r3, #5
 8005d56:	d908      	bls.n	8005d6a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2220      	movs	r2, #32
 8005d5c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	2203      	movs	r2, #3
 8005d62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8005d66:	2303      	movs	r3, #3
 8005d68:	e078      	b.n	8005e5c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f003 0301 	and.w	r3, r3, #1
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d1e8      	bne.n	8005d4a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005d80:	697a      	ldr	r2, [r7, #20]
 8005d82:	4b38      	ldr	r3, [pc, #224]	; (8005e64 <HAL_DMA_Init+0x158>)
 8005d84:	4013      	ands	r3, r2
 8005d86:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	685a      	ldr	r2, [r3, #4]
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	689b      	ldr	r3, [r3, #8]
 8005d90:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005d96:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	691b      	ldr	r3, [r3, #16]
 8005d9c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005da2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	699b      	ldr	r3, [r3, #24]
 8005da8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005dae:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	6a1b      	ldr	r3, [r3, #32]
 8005db4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005db6:	697a      	ldr	r2, [r7, #20]
 8005db8:	4313      	orrs	r3, r2
 8005dba:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dc0:	2b04      	cmp	r3, #4
 8005dc2:	d107      	bne.n	8005dd4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dcc:	4313      	orrs	r3, r2
 8005dce:	697a      	ldr	r2, [r7, #20]
 8005dd0:	4313      	orrs	r3, r2
 8005dd2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	697a      	ldr	r2, [r7, #20]
 8005dda:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	695b      	ldr	r3, [r3, #20]
 8005de2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005de4:	697b      	ldr	r3, [r7, #20]
 8005de6:	f023 0307 	bic.w	r3, r3, #7
 8005dea:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005df0:	697a      	ldr	r2, [r7, #20]
 8005df2:	4313      	orrs	r3, r2
 8005df4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dfa:	2b04      	cmp	r3, #4
 8005dfc:	d117      	bne.n	8005e2e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e02:	697a      	ldr	r2, [r7, #20]
 8005e04:	4313      	orrs	r3, r2
 8005e06:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d00e      	beq.n	8005e2e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005e10:	6878      	ldr	r0, [r7, #4]
 8005e12:	f000 faab 	bl	800636c <DMA_CheckFifoParam>
 8005e16:	4603      	mov	r3, r0
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d008      	beq.n	8005e2e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2240      	movs	r2, #64	; 0x40
 8005e20:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	2201      	movs	r2, #1
 8005e26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8005e2a:	2301      	movs	r3, #1
 8005e2c:	e016      	b.n	8005e5c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	697a      	ldr	r2, [r7, #20]
 8005e34:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005e36:	6878      	ldr	r0, [r7, #4]
 8005e38:	f000 fa62 	bl	8006300 <DMA_CalcBaseAndBitshift>
 8005e3c:	4603      	mov	r3, r0
 8005e3e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e44:	223f      	movs	r2, #63	; 0x3f
 8005e46:	409a      	lsls	r2, r3
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2200      	movs	r2, #0
 8005e50:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	2201      	movs	r2, #1
 8005e56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005e5a:	2300      	movs	r3, #0
}
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	3718      	adds	r7, #24
 8005e60:	46bd      	mov	sp, r7
 8005e62:	bd80      	pop	{r7, pc}
 8005e64:	f010803f 	.word	0xf010803f

08005e68 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	b086      	sub	sp, #24
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	60f8      	str	r0, [r7, #12]
 8005e70:	60b9      	str	r1, [r7, #8]
 8005e72:	607a      	str	r2, [r7, #4]
 8005e74:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005e76:	2300      	movs	r3, #0
 8005e78:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e7e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005e86:	2b01      	cmp	r3, #1
 8005e88:	d101      	bne.n	8005e8e <HAL_DMA_Start_IT+0x26>
 8005e8a:	2302      	movs	r3, #2
 8005e8c:	e040      	b.n	8005f10 <HAL_DMA_Start_IT+0xa8>
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	2201      	movs	r2, #1
 8005e92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005e9c:	b2db      	uxtb	r3, r3
 8005e9e:	2b01      	cmp	r3, #1
 8005ea0:	d12f      	bne.n	8005f02 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	2202      	movs	r2, #2
 8005ea6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	2200      	movs	r2, #0
 8005eae:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005eb0:	683b      	ldr	r3, [r7, #0]
 8005eb2:	687a      	ldr	r2, [r7, #4]
 8005eb4:	68b9      	ldr	r1, [r7, #8]
 8005eb6:	68f8      	ldr	r0, [r7, #12]
 8005eb8:	f000 f9f4 	bl	80062a4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ec0:	223f      	movs	r2, #63	; 0x3f
 8005ec2:	409a      	lsls	r2, r3
 8005ec4:	693b      	ldr	r3, [r7, #16]
 8005ec6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	681a      	ldr	r2, [r3, #0]
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f042 0216 	orr.w	r2, r2, #22
 8005ed6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d007      	beq.n	8005ef0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	681a      	ldr	r2, [r3, #0]
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f042 0208 	orr.w	r2, r2, #8
 8005eee:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	681a      	ldr	r2, [r3, #0]
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f042 0201 	orr.w	r2, r2, #1
 8005efe:	601a      	str	r2, [r3, #0]
 8005f00:	e005      	b.n	8005f0e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	2200      	movs	r2, #0
 8005f06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005f0a:	2302      	movs	r3, #2
 8005f0c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8005f0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f10:	4618      	mov	r0, r3
 8005f12:	3718      	adds	r7, #24
 8005f14:	46bd      	mov	sp, r7
 8005f16:	bd80      	pop	{r7, pc}

08005f18 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005f18:	b480      	push	{r7}
 8005f1a:	b083      	sub	sp, #12
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005f26:	b2db      	uxtb	r3, r3
 8005f28:	2b02      	cmp	r3, #2
 8005f2a:	d004      	beq.n	8005f36 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2280      	movs	r2, #128	; 0x80
 8005f30:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005f32:	2301      	movs	r3, #1
 8005f34:	e00c      	b.n	8005f50 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	2205      	movs	r2, #5
 8005f3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	681a      	ldr	r2, [r3, #0]
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	f022 0201 	bic.w	r2, r2, #1
 8005f4c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005f4e:	2300      	movs	r3, #0
}
 8005f50:	4618      	mov	r0, r3
 8005f52:	370c      	adds	r7, #12
 8005f54:	46bd      	mov	sp, r7
 8005f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5a:	4770      	bx	lr

08005f5c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005f5c:	b580      	push	{r7, lr}
 8005f5e:	b086      	sub	sp, #24
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005f64:	2300      	movs	r3, #0
 8005f66:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005f68:	4b8e      	ldr	r3, [pc, #568]	; (80061a4 <HAL_DMA_IRQHandler+0x248>)
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	4a8e      	ldr	r2, [pc, #568]	; (80061a8 <HAL_DMA_IRQHandler+0x24c>)
 8005f6e:	fba2 2303 	umull	r2, r3, r2, r3
 8005f72:	0a9b      	lsrs	r3, r3, #10
 8005f74:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f7a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005f7c:	693b      	ldr	r3, [r7, #16]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f86:	2208      	movs	r2, #8
 8005f88:	409a      	lsls	r2, r3
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	4013      	ands	r3, r2
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d01a      	beq.n	8005fc8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f003 0304 	and.w	r3, r3, #4
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d013      	beq.n	8005fc8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	681a      	ldr	r2, [r3, #0]
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	f022 0204 	bic.w	r2, r2, #4
 8005fae:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005fb4:	2208      	movs	r2, #8
 8005fb6:	409a      	lsls	r2, r3
 8005fb8:	693b      	ldr	r3, [r7, #16]
 8005fba:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fc0:	f043 0201 	orr.w	r2, r3, #1
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005fcc:	2201      	movs	r2, #1
 8005fce:	409a      	lsls	r2, r3
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	4013      	ands	r3, r2
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d012      	beq.n	8005ffe <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	695b      	ldr	r3, [r3, #20]
 8005fde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d00b      	beq.n	8005ffe <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005fea:	2201      	movs	r2, #1
 8005fec:	409a      	lsls	r2, r3
 8005fee:	693b      	ldr	r3, [r7, #16]
 8005ff0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ff6:	f043 0202 	orr.w	r2, r3, #2
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006002:	2204      	movs	r2, #4
 8006004:	409a      	lsls	r2, r3
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	4013      	ands	r3, r2
 800600a:	2b00      	cmp	r3, #0
 800600c:	d012      	beq.n	8006034 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f003 0302 	and.w	r3, r3, #2
 8006018:	2b00      	cmp	r3, #0
 800601a:	d00b      	beq.n	8006034 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006020:	2204      	movs	r2, #4
 8006022:	409a      	lsls	r2, r3
 8006024:	693b      	ldr	r3, [r7, #16]
 8006026:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800602c:	f043 0204 	orr.w	r2, r3, #4
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006038:	2210      	movs	r2, #16
 800603a:	409a      	lsls	r2, r3
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	4013      	ands	r3, r2
 8006040:	2b00      	cmp	r3, #0
 8006042:	d043      	beq.n	80060cc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f003 0308 	and.w	r3, r3, #8
 800604e:	2b00      	cmp	r3, #0
 8006050:	d03c      	beq.n	80060cc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006056:	2210      	movs	r2, #16
 8006058:	409a      	lsls	r2, r3
 800605a:	693b      	ldr	r3, [r7, #16]
 800605c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006068:	2b00      	cmp	r3, #0
 800606a:	d018      	beq.n	800609e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006076:	2b00      	cmp	r3, #0
 8006078:	d108      	bne.n	800608c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800607e:	2b00      	cmp	r3, #0
 8006080:	d024      	beq.n	80060cc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006086:	6878      	ldr	r0, [r7, #4]
 8006088:	4798      	blx	r3
 800608a:	e01f      	b.n	80060cc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006090:	2b00      	cmp	r3, #0
 8006092:	d01b      	beq.n	80060cc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006098:	6878      	ldr	r0, [r7, #4]
 800609a:	4798      	blx	r3
 800609c:	e016      	b.n	80060cc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d107      	bne.n	80060bc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	681a      	ldr	r2, [r3, #0]
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	f022 0208 	bic.w	r2, r2, #8
 80060ba:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d003      	beq.n	80060cc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060c8:	6878      	ldr	r0, [r7, #4]
 80060ca:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060d0:	2220      	movs	r2, #32
 80060d2:	409a      	lsls	r2, r3
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	4013      	ands	r3, r2
 80060d8:	2b00      	cmp	r3, #0
 80060da:	f000 808f 	beq.w	80061fc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	f003 0310 	and.w	r3, r3, #16
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	f000 8087 	beq.w	80061fc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060f2:	2220      	movs	r2, #32
 80060f4:	409a      	lsls	r2, r3
 80060f6:	693b      	ldr	r3, [r7, #16]
 80060f8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006100:	b2db      	uxtb	r3, r3
 8006102:	2b05      	cmp	r3, #5
 8006104:	d136      	bne.n	8006174 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	681a      	ldr	r2, [r3, #0]
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	f022 0216 	bic.w	r2, r2, #22
 8006114:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	695a      	ldr	r2, [r3, #20]
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006124:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800612a:	2b00      	cmp	r3, #0
 800612c:	d103      	bne.n	8006136 <HAL_DMA_IRQHandler+0x1da>
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006132:	2b00      	cmp	r3, #0
 8006134:	d007      	beq.n	8006146 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	681a      	ldr	r2, [r3, #0]
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	f022 0208 	bic.w	r2, r2, #8
 8006144:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800614a:	223f      	movs	r2, #63	; 0x3f
 800614c:	409a      	lsls	r2, r3
 800614e:	693b      	ldr	r3, [r7, #16]
 8006150:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	2201      	movs	r2, #1
 8006156:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	2200      	movs	r2, #0
 800615e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006166:	2b00      	cmp	r3, #0
 8006168:	d07e      	beq.n	8006268 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800616e:	6878      	ldr	r0, [r7, #4]
 8006170:	4798      	blx	r3
        }
        return;
 8006172:	e079      	b.n	8006268 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800617e:	2b00      	cmp	r3, #0
 8006180:	d01d      	beq.n	80061be <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800618c:	2b00      	cmp	r3, #0
 800618e:	d10d      	bne.n	80061ac <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006194:	2b00      	cmp	r3, #0
 8006196:	d031      	beq.n	80061fc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800619c:	6878      	ldr	r0, [r7, #4]
 800619e:	4798      	blx	r3
 80061a0:	e02c      	b.n	80061fc <HAL_DMA_IRQHandler+0x2a0>
 80061a2:	bf00      	nop
 80061a4:	20000040 	.word	0x20000040
 80061a8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d023      	beq.n	80061fc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061b8:	6878      	ldr	r0, [r7, #4]
 80061ba:	4798      	blx	r3
 80061bc:	e01e      	b.n	80061fc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d10f      	bne.n	80061ec <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	681a      	ldr	r2, [r3, #0]
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	f022 0210 	bic.w	r2, r2, #16
 80061da:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2201      	movs	r2, #1
 80061e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2200      	movs	r2, #0
 80061e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d003      	beq.n	80061fc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061f8:	6878      	ldr	r0, [r7, #4]
 80061fa:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006200:	2b00      	cmp	r3, #0
 8006202:	d032      	beq.n	800626a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006208:	f003 0301 	and.w	r3, r3, #1
 800620c:	2b00      	cmp	r3, #0
 800620e:	d022      	beq.n	8006256 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2205      	movs	r2, #5
 8006214:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	681a      	ldr	r2, [r3, #0]
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f022 0201 	bic.w	r2, r2, #1
 8006226:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8006228:	68bb      	ldr	r3, [r7, #8]
 800622a:	3301      	adds	r3, #1
 800622c:	60bb      	str	r3, [r7, #8]
 800622e:	697a      	ldr	r2, [r7, #20]
 8006230:	429a      	cmp	r2, r3
 8006232:	d307      	bcc.n	8006244 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	f003 0301 	and.w	r3, r3, #1
 800623e:	2b00      	cmp	r3, #0
 8006240:	d1f2      	bne.n	8006228 <HAL_DMA_IRQHandler+0x2cc>
 8006242:	e000      	b.n	8006246 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8006244:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	2201      	movs	r2, #1
 800624a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	2200      	movs	r2, #0
 8006252:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800625a:	2b00      	cmp	r3, #0
 800625c:	d005      	beq.n	800626a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006262:	6878      	ldr	r0, [r7, #4]
 8006264:	4798      	blx	r3
 8006266:	e000      	b.n	800626a <HAL_DMA_IRQHandler+0x30e>
        return;
 8006268:	bf00      	nop
    }
  }
}
 800626a:	3718      	adds	r7, #24
 800626c:	46bd      	mov	sp, r7
 800626e:	bd80      	pop	{r7, pc}

08006270 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8006270:	b480      	push	{r7}
 8006272:	b083      	sub	sp, #12
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800627e:	b2db      	uxtb	r3, r3
}
 8006280:	4618      	mov	r0, r3
 8006282:	370c      	adds	r7, #12
 8006284:	46bd      	mov	sp, r7
 8006286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628a:	4770      	bx	lr

0800628c <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800628c:	b480      	push	{r7}
 800628e:	b083      	sub	sp, #12
 8006290:	af00      	add	r7, sp, #0
 8006292:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8006298:	4618      	mov	r0, r3
 800629a:	370c      	adds	r7, #12
 800629c:	46bd      	mov	sp, r7
 800629e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a2:	4770      	bx	lr

080062a4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80062a4:	b480      	push	{r7}
 80062a6:	b085      	sub	sp, #20
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	60f8      	str	r0, [r7, #12]
 80062ac:	60b9      	str	r1, [r7, #8]
 80062ae:	607a      	str	r2, [r7, #4]
 80062b0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	681a      	ldr	r2, [r3, #0]
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80062c0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	683a      	ldr	r2, [r7, #0]
 80062c8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	689b      	ldr	r3, [r3, #8]
 80062ce:	2b40      	cmp	r3, #64	; 0x40
 80062d0:	d108      	bne.n	80062e4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	687a      	ldr	r2, [r7, #4]
 80062d8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	68ba      	ldr	r2, [r7, #8]
 80062e0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80062e2:	e007      	b.n	80062f4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	68ba      	ldr	r2, [r7, #8]
 80062ea:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	687a      	ldr	r2, [r7, #4]
 80062f2:	60da      	str	r2, [r3, #12]
}
 80062f4:	bf00      	nop
 80062f6:	3714      	adds	r7, #20
 80062f8:	46bd      	mov	sp, r7
 80062fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fe:	4770      	bx	lr

08006300 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006300:	b480      	push	{r7}
 8006302:	b085      	sub	sp, #20
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	b2db      	uxtb	r3, r3
 800630e:	3b10      	subs	r3, #16
 8006310:	4a14      	ldr	r2, [pc, #80]	; (8006364 <DMA_CalcBaseAndBitshift+0x64>)
 8006312:	fba2 2303 	umull	r2, r3, r2, r3
 8006316:	091b      	lsrs	r3, r3, #4
 8006318:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800631a:	4a13      	ldr	r2, [pc, #76]	; (8006368 <DMA_CalcBaseAndBitshift+0x68>)
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	4413      	add	r3, r2
 8006320:	781b      	ldrb	r3, [r3, #0]
 8006322:	461a      	mov	r2, r3
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	2b03      	cmp	r3, #3
 800632c:	d909      	bls.n	8006342 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8006336:	f023 0303 	bic.w	r3, r3, #3
 800633a:	1d1a      	adds	r2, r3, #4
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	659a      	str	r2, [r3, #88]	; 0x58
 8006340:	e007      	b.n	8006352 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800634a:	f023 0303 	bic.w	r3, r3, #3
 800634e:	687a      	ldr	r2, [r7, #4]
 8006350:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8006356:	4618      	mov	r0, r3
 8006358:	3714      	adds	r7, #20
 800635a:	46bd      	mov	sp, r7
 800635c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006360:	4770      	bx	lr
 8006362:	bf00      	nop
 8006364:	aaaaaaab 	.word	0xaaaaaaab
 8006368:	080259a0 	.word	0x080259a0

0800636c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800636c:	b480      	push	{r7}
 800636e:	b085      	sub	sp, #20
 8006370:	af00      	add	r7, sp, #0
 8006372:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006374:	2300      	movs	r3, #0
 8006376:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800637c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	699b      	ldr	r3, [r3, #24]
 8006382:	2b00      	cmp	r3, #0
 8006384:	d11f      	bne.n	80063c6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8006386:	68bb      	ldr	r3, [r7, #8]
 8006388:	2b03      	cmp	r3, #3
 800638a:	d856      	bhi.n	800643a <DMA_CheckFifoParam+0xce>
 800638c:	a201      	add	r2, pc, #4	; (adr r2, 8006394 <DMA_CheckFifoParam+0x28>)
 800638e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006392:	bf00      	nop
 8006394:	080063a5 	.word	0x080063a5
 8006398:	080063b7 	.word	0x080063b7
 800639c:	080063a5 	.word	0x080063a5
 80063a0:	0800643b 	.word	0x0800643b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063a8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d046      	beq.n	800643e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80063b0:	2301      	movs	r3, #1
 80063b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80063b4:	e043      	b.n	800643e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063ba:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80063be:	d140      	bne.n	8006442 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80063c0:	2301      	movs	r3, #1
 80063c2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80063c4:	e03d      	b.n	8006442 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	699b      	ldr	r3, [r3, #24]
 80063ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80063ce:	d121      	bne.n	8006414 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80063d0:	68bb      	ldr	r3, [r7, #8]
 80063d2:	2b03      	cmp	r3, #3
 80063d4:	d837      	bhi.n	8006446 <DMA_CheckFifoParam+0xda>
 80063d6:	a201      	add	r2, pc, #4	; (adr r2, 80063dc <DMA_CheckFifoParam+0x70>)
 80063d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063dc:	080063ed 	.word	0x080063ed
 80063e0:	080063f3 	.word	0x080063f3
 80063e4:	080063ed 	.word	0x080063ed
 80063e8:	08006405 	.word	0x08006405
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80063ec:	2301      	movs	r3, #1
 80063ee:	73fb      	strb	r3, [r7, #15]
      break;
 80063f0:	e030      	b.n	8006454 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063f6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d025      	beq.n	800644a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80063fe:	2301      	movs	r3, #1
 8006400:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006402:	e022      	b.n	800644a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006408:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800640c:	d11f      	bne.n	800644e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800640e:	2301      	movs	r3, #1
 8006410:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8006412:	e01c      	b.n	800644e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8006414:	68bb      	ldr	r3, [r7, #8]
 8006416:	2b02      	cmp	r3, #2
 8006418:	d903      	bls.n	8006422 <DMA_CheckFifoParam+0xb6>
 800641a:	68bb      	ldr	r3, [r7, #8]
 800641c:	2b03      	cmp	r3, #3
 800641e:	d003      	beq.n	8006428 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8006420:	e018      	b.n	8006454 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8006422:	2301      	movs	r3, #1
 8006424:	73fb      	strb	r3, [r7, #15]
      break;
 8006426:	e015      	b.n	8006454 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800642c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006430:	2b00      	cmp	r3, #0
 8006432:	d00e      	beq.n	8006452 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8006434:	2301      	movs	r3, #1
 8006436:	73fb      	strb	r3, [r7, #15]
      break;
 8006438:	e00b      	b.n	8006452 <DMA_CheckFifoParam+0xe6>
      break;
 800643a:	bf00      	nop
 800643c:	e00a      	b.n	8006454 <DMA_CheckFifoParam+0xe8>
      break;
 800643e:	bf00      	nop
 8006440:	e008      	b.n	8006454 <DMA_CheckFifoParam+0xe8>
      break;
 8006442:	bf00      	nop
 8006444:	e006      	b.n	8006454 <DMA_CheckFifoParam+0xe8>
      break;
 8006446:	bf00      	nop
 8006448:	e004      	b.n	8006454 <DMA_CheckFifoParam+0xe8>
      break;
 800644a:	bf00      	nop
 800644c:	e002      	b.n	8006454 <DMA_CheckFifoParam+0xe8>
      break;   
 800644e:	bf00      	nop
 8006450:	e000      	b.n	8006454 <DMA_CheckFifoParam+0xe8>
      break;
 8006452:	bf00      	nop
    }
  } 
  
  return status; 
 8006454:	7bfb      	ldrb	r3, [r7, #15]
}
 8006456:	4618      	mov	r0, r3
 8006458:	3714      	adds	r7, #20
 800645a:	46bd      	mov	sp, r7
 800645c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006460:	4770      	bx	lr
 8006462:	bf00      	nop

08006464 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8006464:	b580      	push	{r7, lr}
 8006466:	b086      	sub	sp, #24
 8006468:	af00      	add	r7, sp, #0
 800646a:	60f8      	str	r0, [r7, #12]
 800646c:	60b9      	str	r1, [r7, #8]
 800646e:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8006472:	2301      	movs	r3, #1
 8006474:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8006476:	4b23      	ldr	r3, [pc, #140]	; (8006504 <HAL_FLASH_Program+0xa0>)
 8006478:	7e1b      	ldrb	r3, [r3, #24]
 800647a:	2b01      	cmp	r3, #1
 800647c:	d101      	bne.n	8006482 <HAL_FLASH_Program+0x1e>
 800647e:	2302      	movs	r3, #2
 8006480:	e03b      	b.n	80064fa <HAL_FLASH_Program+0x96>
 8006482:	4b20      	ldr	r3, [pc, #128]	; (8006504 <HAL_FLASH_Program+0xa0>)
 8006484:	2201      	movs	r2, #1
 8006486:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8006488:	f24c 3050 	movw	r0, #50000	; 0xc350
 800648c:	f000 f870 	bl	8006570 <FLASH_WaitForLastOperation>
 8006490:	4603      	mov	r3, r0
 8006492:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8006494:	7dfb      	ldrb	r3, [r7, #23]
 8006496:	2b00      	cmp	r3, #0
 8006498:	d12b      	bne.n	80064f2 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	2b00      	cmp	r3, #0
 800649e:	d105      	bne.n	80064ac <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 80064a0:	783b      	ldrb	r3, [r7, #0]
 80064a2:	4619      	mov	r1, r3
 80064a4:	68b8      	ldr	r0, [r7, #8]
 80064a6:	f000 f91b 	bl	80066e0 <FLASH_Program_Byte>
 80064aa:	e016      	b.n	80064da <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	2b01      	cmp	r3, #1
 80064b0:	d105      	bne.n	80064be <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 80064b2:	883b      	ldrh	r3, [r7, #0]
 80064b4:	4619      	mov	r1, r3
 80064b6:	68b8      	ldr	r0, [r7, #8]
 80064b8:	f000 f8ee 	bl	8006698 <FLASH_Program_HalfWord>
 80064bc:	e00d      	b.n	80064da <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	2b02      	cmp	r3, #2
 80064c2:	d105      	bne.n	80064d0 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 80064c4:	683b      	ldr	r3, [r7, #0]
 80064c6:	4619      	mov	r1, r3
 80064c8:	68b8      	ldr	r0, [r7, #8]
 80064ca:	f000 f8c3 	bl	8006654 <FLASH_Program_Word>
 80064ce:	e004      	b.n	80064da <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 80064d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80064d4:	68b8      	ldr	r0, [r7, #8]
 80064d6:	f000 f88b 	bl	80065f0 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80064da:	f24c 3050 	movw	r0, #50000	; 0xc350
 80064de:	f000 f847 	bl	8006570 <FLASH_WaitForLastOperation>
 80064e2:	4603      	mov	r3, r0
 80064e4:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 80064e6:	4b08      	ldr	r3, [pc, #32]	; (8006508 <HAL_FLASH_Program+0xa4>)
 80064e8:	691b      	ldr	r3, [r3, #16]
 80064ea:	4a07      	ldr	r2, [pc, #28]	; (8006508 <HAL_FLASH_Program+0xa4>)
 80064ec:	f023 0301 	bic.w	r3, r3, #1
 80064f0:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80064f2:	4b04      	ldr	r3, [pc, #16]	; (8006504 <HAL_FLASH_Program+0xa0>)
 80064f4:	2200      	movs	r2, #0
 80064f6:	761a      	strb	r2, [r3, #24]
  
  return status;
 80064f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80064fa:	4618      	mov	r0, r3
 80064fc:	3718      	adds	r7, #24
 80064fe:	46bd      	mov	sp, r7
 8006500:	bd80      	pop	{r7, pc}
 8006502:	bf00      	nop
 8006504:	20005358 	.word	0x20005358
 8006508:	40023c00 	.word	0x40023c00

0800650c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800650c:	b480      	push	{r7}
 800650e:	b083      	sub	sp, #12
 8006510:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8006512:	2300      	movs	r3, #0
 8006514:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8006516:	4b0b      	ldr	r3, [pc, #44]	; (8006544 <HAL_FLASH_Unlock+0x38>)
 8006518:	691b      	ldr	r3, [r3, #16]
 800651a:	2b00      	cmp	r3, #0
 800651c:	da0b      	bge.n	8006536 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800651e:	4b09      	ldr	r3, [pc, #36]	; (8006544 <HAL_FLASH_Unlock+0x38>)
 8006520:	4a09      	ldr	r2, [pc, #36]	; (8006548 <HAL_FLASH_Unlock+0x3c>)
 8006522:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8006524:	4b07      	ldr	r3, [pc, #28]	; (8006544 <HAL_FLASH_Unlock+0x38>)
 8006526:	4a09      	ldr	r2, [pc, #36]	; (800654c <HAL_FLASH_Unlock+0x40>)
 8006528:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800652a:	4b06      	ldr	r3, [pc, #24]	; (8006544 <HAL_FLASH_Unlock+0x38>)
 800652c:	691b      	ldr	r3, [r3, #16]
 800652e:	2b00      	cmp	r3, #0
 8006530:	da01      	bge.n	8006536 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8006532:	2301      	movs	r3, #1
 8006534:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8006536:	79fb      	ldrb	r3, [r7, #7]
}
 8006538:	4618      	mov	r0, r3
 800653a:	370c      	adds	r7, #12
 800653c:	46bd      	mov	sp, r7
 800653e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006542:	4770      	bx	lr
 8006544:	40023c00 	.word	0x40023c00
 8006548:	45670123 	.word	0x45670123
 800654c:	cdef89ab 	.word	0xcdef89ab

08006550 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8006550:	b480      	push	{r7}
 8006552:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8006554:	4b05      	ldr	r3, [pc, #20]	; (800656c <HAL_FLASH_Lock+0x1c>)
 8006556:	691b      	ldr	r3, [r3, #16]
 8006558:	4a04      	ldr	r2, [pc, #16]	; (800656c <HAL_FLASH_Lock+0x1c>)
 800655a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800655e:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8006560:	2300      	movs	r3, #0
}
 8006562:	4618      	mov	r0, r3
 8006564:	46bd      	mov	sp, r7
 8006566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656a:	4770      	bx	lr
 800656c:	40023c00 	.word	0x40023c00

08006570 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8006570:	b580      	push	{r7, lr}
 8006572:	b084      	sub	sp, #16
 8006574:	af00      	add	r7, sp, #0
 8006576:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006578:	2300      	movs	r3, #0
 800657a:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800657c:	4b1a      	ldr	r3, [pc, #104]	; (80065e8 <FLASH_WaitForLastOperation+0x78>)
 800657e:	2200      	movs	r2, #0
 8006580:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8006582:	f7ff fa4f 	bl	8005a24 <HAL_GetTick>
 8006586:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8006588:	e010      	b.n	80065ac <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006590:	d00c      	beq.n	80065ac <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	2b00      	cmp	r3, #0
 8006596:	d007      	beq.n	80065a8 <FLASH_WaitForLastOperation+0x38>
 8006598:	f7ff fa44 	bl	8005a24 <HAL_GetTick>
 800659c:	4602      	mov	r2, r0
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	1ad3      	subs	r3, r2, r3
 80065a2:	687a      	ldr	r2, [r7, #4]
 80065a4:	429a      	cmp	r2, r3
 80065a6:	d201      	bcs.n	80065ac <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 80065a8:	2303      	movs	r3, #3
 80065aa:	e019      	b.n	80065e0 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80065ac:	4b0f      	ldr	r3, [pc, #60]	; (80065ec <FLASH_WaitForLastOperation+0x7c>)
 80065ae:	68db      	ldr	r3, [r3, #12]
 80065b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d1e8      	bne.n	800658a <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 80065b8:	4b0c      	ldr	r3, [pc, #48]	; (80065ec <FLASH_WaitForLastOperation+0x7c>)
 80065ba:	68db      	ldr	r3, [r3, #12]
 80065bc:	f003 0301 	and.w	r3, r3, #1
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d002      	beq.n	80065ca <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80065c4:	4b09      	ldr	r3, [pc, #36]	; (80065ec <FLASH_WaitForLastOperation+0x7c>)
 80065c6:	2201      	movs	r2, #1
 80065c8:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 80065ca:	4b08      	ldr	r3, [pc, #32]	; (80065ec <FLASH_WaitForLastOperation+0x7c>)
 80065cc:	68db      	ldr	r3, [r3, #12]
 80065ce:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d003      	beq.n	80065de <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80065d6:	f000 f8a5 	bl	8006724 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80065da:	2301      	movs	r3, #1
 80065dc:	e000      	b.n	80065e0 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 80065de:	2300      	movs	r3, #0
  
}  
 80065e0:	4618      	mov	r0, r3
 80065e2:	3710      	adds	r7, #16
 80065e4:	46bd      	mov	sp, r7
 80065e6:	bd80      	pop	{r7, pc}
 80065e8:	20005358 	.word	0x20005358
 80065ec:	40023c00 	.word	0x40023c00

080065f0 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80065f0:	b480      	push	{r7}
 80065f2:	b085      	sub	sp, #20
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	60f8      	str	r0, [r7, #12]
 80065f8:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80065fc:	4b14      	ldr	r3, [pc, #80]	; (8006650 <FLASH_Program_DoubleWord+0x60>)
 80065fe:	691b      	ldr	r3, [r3, #16]
 8006600:	4a13      	ldr	r2, [pc, #76]	; (8006650 <FLASH_Program_DoubleWord+0x60>)
 8006602:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006606:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8006608:	4b11      	ldr	r3, [pc, #68]	; (8006650 <FLASH_Program_DoubleWord+0x60>)
 800660a:	691b      	ldr	r3, [r3, #16]
 800660c:	4a10      	ldr	r2, [pc, #64]	; (8006650 <FLASH_Program_DoubleWord+0x60>)
 800660e:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8006612:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8006614:	4b0e      	ldr	r3, [pc, #56]	; (8006650 <FLASH_Program_DoubleWord+0x60>)
 8006616:	691b      	ldr	r3, [r3, #16]
 8006618:	4a0d      	ldr	r2, [pc, #52]	; (8006650 <FLASH_Program_DoubleWord+0x60>)
 800661a:	f043 0301 	orr.w	r3, r3, #1
 800661e:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	683a      	ldr	r2, [r7, #0]
 8006624:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8006626:	f3bf 8f6f 	isb	sy
}
 800662a:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 800662c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006630:	f04f 0200 	mov.w	r2, #0
 8006634:	f04f 0300 	mov.w	r3, #0
 8006638:	000a      	movs	r2, r1
 800663a:	2300      	movs	r3, #0
 800663c:	68f9      	ldr	r1, [r7, #12]
 800663e:	3104      	adds	r1, #4
 8006640:	4613      	mov	r3, r2
 8006642:	600b      	str	r3, [r1, #0]
}
 8006644:	bf00      	nop
 8006646:	3714      	adds	r7, #20
 8006648:	46bd      	mov	sp, r7
 800664a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664e:	4770      	bx	lr
 8006650:	40023c00 	.word	0x40023c00

08006654 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8006654:	b480      	push	{r7}
 8006656:	b083      	sub	sp, #12
 8006658:	af00      	add	r7, sp, #0
 800665a:	6078      	str	r0, [r7, #4]
 800665c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800665e:	4b0d      	ldr	r3, [pc, #52]	; (8006694 <FLASH_Program_Word+0x40>)
 8006660:	691b      	ldr	r3, [r3, #16]
 8006662:	4a0c      	ldr	r2, [pc, #48]	; (8006694 <FLASH_Program_Word+0x40>)
 8006664:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006668:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 800666a:	4b0a      	ldr	r3, [pc, #40]	; (8006694 <FLASH_Program_Word+0x40>)
 800666c:	691b      	ldr	r3, [r3, #16]
 800666e:	4a09      	ldr	r2, [pc, #36]	; (8006694 <FLASH_Program_Word+0x40>)
 8006670:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006674:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8006676:	4b07      	ldr	r3, [pc, #28]	; (8006694 <FLASH_Program_Word+0x40>)
 8006678:	691b      	ldr	r3, [r3, #16]
 800667a:	4a06      	ldr	r2, [pc, #24]	; (8006694 <FLASH_Program_Word+0x40>)
 800667c:	f043 0301 	orr.w	r3, r3, #1
 8006680:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	683a      	ldr	r2, [r7, #0]
 8006686:	601a      	str	r2, [r3, #0]
}
 8006688:	bf00      	nop
 800668a:	370c      	adds	r7, #12
 800668c:	46bd      	mov	sp, r7
 800668e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006692:	4770      	bx	lr
 8006694:	40023c00 	.word	0x40023c00

08006698 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8006698:	b480      	push	{r7}
 800669a:	b083      	sub	sp, #12
 800669c:	af00      	add	r7, sp, #0
 800669e:	6078      	str	r0, [r7, #4]
 80066a0:	460b      	mov	r3, r1
 80066a2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80066a4:	4b0d      	ldr	r3, [pc, #52]	; (80066dc <FLASH_Program_HalfWord+0x44>)
 80066a6:	691b      	ldr	r3, [r3, #16]
 80066a8:	4a0c      	ldr	r2, [pc, #48]	; (80066dc <FLASH_Program_HalfWord+0x44>)
 80066aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80066ae:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 80066b0:	4b0a      	ldr	r3, [pc, #40]	; (80066dc <FLASH_Program_HalfWord+0x44>)
 80066b2:	691b      	ldr	r3, [r3, #16]
 80066b4:	4a09      	ldr	r2, [pc, #36]	; (80066dc <FLASH_Program_HalfWord+0x44>)
 80066b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80066ba:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80066bc:	4b07      	ldr	r3, [pc, #28]	; (80066dc <FLASH_Program_HalfWord+0x44>)
 80066be:	691b      	ldr	r3, [r3, #16]
 80066c0:	4a06      	ldr	r2, [pc, #24]	; (80066dc <FLASH_Program_HalfWord+0x44>)
 80066c2:	f043 0301 	orr.w	r3, r3, #1
 80066c6:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	887a      	ldrh	r2, [r7, #2]
 80066cc:	801a      	strh	r2, [r3, #0]
}
 80066ce:	bf00      	nop
 80066d0:	370c      	adds	r7, #12
 80066d2:	46bd      	mov	sp, r7
 80066d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d8:	4770      	bx	lr
 80066da:	bf00      	nop
 80066dc:	40023c00 	.word	0x40023c00

080066e0 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 80066e0:	b480      	push	{r7}
 80066e2:	b083      	sub	sp, #12
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]
 80066e8:	460b      	mov	r3, r1
 80066ea:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80066ec:	4b0c      	ldr	r3, [pc, #48]	; (8006720 <FLASH_Program_Byte+0x40>)
 80066ee:	691b      	ldr	r3, [r3, #16]
 80066f0:	4a0b      	ldr	r2, [pc, #44]	; (8006720 <FLASH_Program_Byte+0x40>)
 80066f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80066f6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 80066f8:	4b09      	ldr	r3, [pc, #36]	; (8006720 <FLASH_Program_Byte+0x40>)
 80066fa:	4a09      	ldr	r2, [pc, #36]	; (8006720 <FLASH_Program_Byte+0x40>)
 80066fc:	691b      	ldr	r3, [r3, #16]
 80066fe:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8006700:	4b07      	ldr	r3, [pc, #28]	; (8006720 <FLASH_Program_Byte+0x40>)
 8006702:	691b      	ldr	r3, [r3, #16]
 8006704:	4a06      	ldr	r2, [pc, #24]	; (8006720 <FLASH_Program_Byte+0x40>)
 8006706:	f043 0301 	orr.w	r3, r3, #1
 800670a:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	78fa      	ldrb	r2, [r7, #3]
 8006710:	701a      	strb	r2, [r3, #0]
}
 8006712:	bf00      	nop
 8006714:	370c      	adds	r7, #12
 8006716:	46bd      	mov	sp, r7
 8006718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671c:	4770      	bx	lr
 800671e:	bf00      	nop
 8006720:	40023c00 	.word	0x40023c00

08006724 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8006724:	b480      	push	{r7}
 8006726:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8006728:	4b2f      	ldr	r3, [pc, #188]	; (80067e8 <FLASH_SetErrorCode+0xc4>)
 800672a:	68db      	ldr	r3, [r3, #12]
 800672c:	f003 0310 	and.w	r3, r3, #16
 8006730:	2b00      	cmp	r3, #0
 8006732:	d008      	beq.n	8006746 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8006734:	4b2d      	ldr	r3, [pc, #180]	; (80067ec <FLASH_SetErrorCode+0xc8>)
 8006736:	69db      	ldr	r3, [r3, #28]
 8006738:	f043 0310 	orr.w	r3, r3, #16
 800673c:	4a2b      	ldr	r2, [pc, #172]	; (80067ec <FLASH_SetErrorCode+0xc8>)
 800673e:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8006740:	4b29      	ldr	r3, [pc, #164]	; (80067e8 <FLASH_SetErrorCode+0xc4>)
 8006742:	2210      	movs	r2, #16
 8006744:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8006746:	4b28      	ldr	r3, [pc, #160]	; (80067e8 <FLASH_SetErrorCode+0xc4>)
 8006748:	68db      	ldr	r3, [r3, #12]
 800674a:	f003 0320 	and.w	r3, r3, #32
 800674e:	2b00      	cmp	r3, #0
 8006750:	d008      	beq.n	8006764 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8006752:	4b26      	ldr	r3, [pc, #152]	; (80067ec <FLASH_SetErrorCode+0xc8>)
 8006754:	69db      	ldr	r3, [r3, #28]
 8006756:	f043 0308 	orr.w	r3, r3, #8
 800675a:	4a24      	ldr	r2, [pc, #144]	; (80067ec <FLASH_SetErrorCode+0xc8>)
 800675c:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 800675e:	4b22      	ldr	r3, [pc, #136]	; (80067e8 <FLASH_SetErrorCode+0xc4>)
 8006760:	2220      	movs	r2, #32
 8006762:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8006764:	4b20      	ldr	r3, [pc, #128]	; (80067e8 <FLASH_SetErrorCode+0xc4>)
 8006766:	68db      	ldr	r3, [r3, #12]
 8006768:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800676c:	2b00      	cmp	r3, #0
 800676e:	d008      	beq.n	8006782 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8006770:	4b1e      	ldr	r3, [pc, #120]	; (80067ec <FLASH_SetErrorCode+0xc8>)
 8006772:	69db      	ldr	r3, [r3, #28]
 8006774:	f043 0304 	orr.w	r3, r3, #4
 8006778:	4a1c      	ldr	r2, [pc, #112]	; (80067ec <FLASH_SetErrorCode+0xc8>)
 800677a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 800677c:	4b1a      	ldr	r3, [pc, #104]	; (80067e8 <FLASH_SetErrorCode+0xc4>)
 800677e:	2240      	movs	r2, #64	; 0x40
 8006780:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8006782:	4b19      	ldr	r3, [pc, #100]	; (80067e8 <FLASH_SetErrorCode+0xc4>)
 8006784:	68db      	ldr	r3, [r3, #12]
 8006786:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800678a:	2b00      	cmp	r3, #0
 800678c:	d008      	beq.n	80067a0 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 800678e:	4b17      	ldr	r3, [pc, #92]	; (80067ec <FLASH_SetErrorCode+0xc8>)
 8006790:	69db      	ldr	r3, [r3, #28]
 8006792:	f043 0302 	orr.w	r3, r3, #2
 8006796:	4a15      	ldr	r2, [pc, #84]	; (80067ec <FLASH_SetErrorCode+0xc8>)
 8006798:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 800679a:	4b13      	ldr	r3, [pc, #76]	; (80067e8 <FLASH_SetErrorCode+0xc4>)
 800679c:	2280      	movs	r2, #128	; 0x80
 800679e:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 80067a0:	4b11      	ldr	r3, [pc, #68]	; (80067e8 <FLASH_SetErrorCode+0xc4>)
 80067a2:	68db      	ldr	r3, [r3, #12]
 80067a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d009      	beq.n	80067c0 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 80067ac:	4b0f      	ldr	r3, [pc, #60]	; (80067ec <FLASH_SetErrorCode+0xc8>)
 80067ae:	69db      	ldr	r3, [r3, #28]
 80067b0:	f043 0301 	orr.w	r3, r3, #1
 80067b4:	4a0d      	ldr	r2, [pc, #52]	; (80067ec <FLASH_SetErrorCode+0xc8>)
 80067b6:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 80067b8:	4b0b      	ldr	r3, [pc, #44]	; (80067e8 <FLASH_SetErrorCode+0xc4>)
 80067ba:	f44f 7280 	mov.w	r2, #256	; 0x100
 80067be:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 80067c0:	4b09      	ldr	r3, [pc, #36]	; (80067e8 <FLASH_SetErrorCode+0xc4>)
 80067c2:	68db      	ldr	r3, [r3, #12]
 80067c4:	f003 0302 	and.w	r3, r3, #2
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d008      	beq.n	80067de <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 80067cc:	4b07      	ldr	r3, [pc, #28]	; (80067ec <FLASH_SetErrorCode+0xc8>)
 80067ce:	69db      	ldr	r3, [r3, #28]
 80067d0:	f043 0320 	orr.w	r3, r3, #32
 80067d4:	4a05      	ldr	r2, [pc, #20]	; (80067ec <FLASH_SetErrorCode+0xc8>)
 80067d6:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 80067d8:	4b03      	ldr	r3, [pc, #12]	; (80067e8 <FLASH_SetErrorCode+0xc4>)
 80067da:	2202      	movs	r2, #2
 80067dc:	60da      	str	r2, [r3, #12]
  }
}
 80067de:	bf00      	nop
 80067e0:	46bd      	mov	sp, r7
 80067e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e6:	4770      	bx	lr
 80067e8:	40023c00 	.word	0x40023c00
 80067ec:	20005358 	.word	0x20005358

080067f0 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 80067f0:	b580      	push	{r7, lr}
 80067f2:	b084      	sub	sp, #16
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	6078      	str	r0, [r7, #4]
 80067f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80067fa:	2301      	movs	r3, #1
 80067fc:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 80067fe:	2300      	movs	r3, #0
 8006800:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8006802:	4b31      	ldr	r3, [pc, #196]	; (80068c8 <HAL_FLASHEx_Erase+0xd8>)
 8006804:	7e1b      	ldrb	r3, [r3, #24]
 8006806:	2b01      	cmp	r3, #1
 8006808:	d101      	bne.n	800680e <HAL_FLASHEx_Erase+0x1e>
 800680a:	2302      	movs	r3, #2
 800680c:	e058      	b.n	80068c0 <HAL_FLASHEx_Erase+0xd0>
 800680e:	4b2e      	ldr	r3, [pc, #184]	; (80068c8 <HAL_FLASHEx_Erase+0xd8>)
 8006810:	2201      	movs	r2, #1
 8006812:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8006814:	f24c 3050 	movw	r0, #50000	; 0xc350
 8006818:	f7ff feaa 	bl	8006570 <FLASH_WaitForLastOperation>
 800681c:	4603      	mov	r3, r0
 800681e:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8006820:	7bfb      	ldrb	r3, [r7, #15]
 8006822:	2b00      	cmp	r3, #0
 8006824:	d148      	bne.n	80068b8 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8006826:	683b      	ldr	r3, [r7, #0]
 8006828:	f04f 32ff 	mov.w	r2, #4294967295
 800682c:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	2b01      	cmp	r3, #1
 8006834:	d115      	bne.n	8006862 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	691b      	ldr	r3, [r3, #16]
 800683a:	b2da      	uxtb	r2, r3
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	685b      	ldr	r3, [r3, #4]
 8006840:	4619      	mov	r1, r3
 8006842:	4610      	mov	r0, r2
 8006844:	f000 f844 	bl	80068d0 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8006848:	f24c 3050 	movw	r0, #50000	; 0xc350
 800684c:	f7ff fe90 	bl	8006570 <FLASH_WaitForLastOperation>
 8006850:	4603      	mov	r3, r0
 8006852:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8006854:	4b1d      	ldr	r3, [pc, #116]	; (80068cc <HAL_FLASHEx_Erase+0xdc>)
 8006856:	691b      	ldr	r3, [r3, #16]
 8006858:	4a1c      	ldr	r2, [pc, #112]	; (80068cc <HAL_FLASHEx_Erase+0xdc>)
 800685a:	f023 0304 	bic.w	r3, r3, #4
 800685e:	6113      	str	r3, [r2, #16]
 8006860:	e028      	b.n	80068b4 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	689b      	ldr	r3, [r3, #8]
 8006866:	60bb      	str	r3, [r7, #8]
 8006868:	e01c      	b.n	80068a4 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	691b      	ldr	r3, [r3, #16]
 800686e:	b2db      	uxtb	r3, r3
 8006870:	4619      	mov	r1, r3
 8006872:	68b8      	ldr	r0, [r7, #8]
 8006874:	f000 f850 	bl	8006918 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8006878:	f24c 3050 	movw	r0, #50000	; 0xc350
 800687c:	f7ff fe78 	bl	8006570 <FLASH_WaitForLastOperation>
 8006880:	4603      	mov	r3, r0
 8006882:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8006884:	4b11      	ldr	r3, [pc, #68]	; (80068cc <HAL_FLASHEx_Erase+0xdc>)
 8006886:	691b      	ldr	r3, [r3, #16]
 8006888:	4a10      	ldr	r2, [pc, #64]	; (80068cc <HAL_FLASHEx_Erase+0xdc>)
 800688a:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 800688e:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 8006890:	7bfb      	ldrb	r3, [r7, #15]
 8006892:	2b00      	cmp	r3, #0
 8006894:	d003      	beq.n	800689e <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8006896:	683b      	ldr	r3, [r7, #0]
 8006898:	68ba      	ldr	r2, [r7, #8]
 800689a:	601a      	str	r2, [r3, #0]
          break;
 800689c:	e00a      	b.n	80068b4 <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800689e:	68bb      	ldr	r3, [r7, #8]
 80068a0:	3301      	adds	r3, #1
 80068a2:	60bb      	str	r3, [r7, #8]
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	68da      	ldr	r2, [r3, #12]
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	689b      	ldr	r3, [r3, #8]
 80068ac:	4413      	add	r3, r2
 80068ae:	68ba      	ldr	r2, [r7, #8]
 80068b0:	429a      	cmp	r2, r3
 80068b2:	d3da      	bcc.n	800686a <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 80068b4:	f000 f878 	bl	80069a8 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80068b8:	4b03      	ldr	r3, [pc, #12]	; (80068c8 <HAL_FLASHEx_Erase+0xd8>)
 80068ba:	2200      	movs	r2, #0
 80068bc:	761a      	strb	r2, [r3, #24]

  return status;
 80068be:	7bfb      	ldrb	r3, [r7, #15]
}
 80068c0:	4618      	mov	r0, r3
 80068c2:	3710      	adds	r7, #16
 80068c4:	46bd      	mov	sp, r7
 80068c6:	bd80      	pop	{r7, pc}
 80068c8:	20005358 	.word	0x20005358
 80068cc:	40023c00 	.word	0x40023c00

080068d0 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 80068d0:	b480      	push	{r7}
 80068d2:	b083      	sub	sp, #12
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	4603      	mov	r3, r0
 80068d8:	6039      	str	r1, [r7, #0]
 80068da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80068dc:	4b0d      	ldr	r3, [pc, #52]	; (8006914 <FLASH_MassErase+0x44>)
 80068de:	691b      	ldr	r3, [r3, #16]
 80068e0:	4a0c      	ldr	r2, [pc, #48]	; (8006914 <FLASH_MassErase+0x44>)
 80068e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80068e6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 80068e8:	4b0a      	ldr	r3, [pc, #40]	; (8006914 <FLASH_MassErase+0x44>)
 80068ea:	691b      	ldr	r3, [r3, #16]
 80068ec:	4a09      	ldr	r2, [pc, #36]	; (8006914 <FLASH_MassErase+0x44>)
 80068ee:	f043 0304 	orr.w	r3, r3, #4
 80068f2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 80068f4:	4b07      	ldr	r3, [pc, #28]	; (8006914 <FLASH_MassErase+0x44>)
 80068f6:	691a      	ldr	r2, [r3, #16]
 80068f8:	79fb      	ldrb	r3, [r7, #7]
 80068fa:	021b      	lsls	r3, r3, #8
 80068fc:	4313      	orrs	r3, r2
 80068fe:	4a05      	ldr	r2, [pc, #20]	; (8006914 <FLASH_MassErase+0x44>)
 8006900:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006904:	6113      	str	r3, [r2, #16]
}
 8006906:	bf00      	nop
 8006908:	370c      	adds	r7, #12
 800690a:	46bd      	mov	sp, r7
 800690c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006910:	4770      	bx	lr
 8006912:	bf00      	nop
 8006914:	40023c00 	.word	0x40023c00

08006918 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8006918:	b480      	push	{r7}
 800691a:	b085      	sub	sp, #20
 800691c:	af00      	add	r7, sp, #0
 800691e:	6078      	str	r0, [r7, #4]
 8006920:	460b      	mov	r3, r1
 8006922:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8006924:	2300      	movs	r3, #0
 8006926:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8006928:	78fb      	ldrb	r3, [r7, #3]
 800692a:	2b00      	cmp	r3, #0
 800692c:	d102      	bne.n	8006934 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 800692e:	2300      	movs	r3, #0
 8006930:	60fb      	str	r3, [r7, #12]
 8006932:	e010      	b.n	8006956 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8006934:	78fb      	ldrb	r3, [r7, #3]
 8006936:	2b01      	cmp	r3, #1
 8006938:	d103      	bne.n	8006942 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800693a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800693e:	60fb      	str	r3, [r7, #12]
 8006940:	e009      	b.n	8006956 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8006942:	78fb      	ldrb	r3, [r7, #3]
 8006944:	2b02      	cmp	r3, #2
 8006946:	d103      	bne.n	8006950 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8006948:	f44f 7300 	mov.w	r3, #512	; 0x200
 800694c:	60fb      	str	r3, [r7, #12]
 800694e:	e002      	b.n	8006956 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8006950:	f44f 7340 	mov.w	r3, #768	; 0x300
 8006954:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8006956:	4b13      	ldr	r3, [pc, #76]	; (80069a4 <FLASH_Erase_Sector+0x8c>)
 8006958:	691b      	ldr	r3, [r3, #16]
 800695a:	4a12      	ldr	r2, [pc, #72]	; (80069a4 <FLASH_Erase_Sector+0x8c>)
 800695c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006960:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8006962:	4b10      	ldr	r3, [pc, #64]	; (80069a4 <FLASH_Erase_Sector+0x8c>)
 8006964:	691a      	ldr	r2, [r3, #16]
 8006966:	490f      	ldr	r1, [pc, #60]	; (80069a4 <FLASH_Erase_Sector+0x8c>)
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	4313      	orrs	r3, r2
 800696c:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 800696e:	4b0d      	ldr	r3, [pc, #52]	; (80069a4 <FLASH_Erase_Sector+0x8c>)
 8006970:	691b      	ldr	r3, [r3, #16]
 8006972:	4a0c      	ldr	r2, [pc, #48]	; (80069a4 <FLASH_Erase_Sector+0x8c>)
 8006974:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8006978:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 800697a:	4b0a      	ldr	r3, [pc, #40]	; (80069a4 <FLASH_Erase_Sector+0x8c>)
 800697c:	691a      	ldr	r2, [r3, #16]
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	00db      	lsls	r3, r3, #3
 8006982:	4313      	orrs	r3, r2
 8006984:	4a07      	ldr	r2, [pc, #28]	; (80069a4 <FLASH_Erase_Sector+0x8c>)
 8006986:	f043 0302 	orr.w	r3, r3, #2
 800698a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 800698c:	4b05      	ldr	r3, [pc, #20]	; (80069a4 <FLASH_Erase_Sector+0x8c>)
 800698e:	691b      	ldr	r3, [r3, #16]
 8006990:	4a04      	ldr	r2, [pc, #16]	; (80069a4 <FLASH_Erase_Sector+0x8c>)
 8006992:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006996:	6113      	str	r3, [r2, #16]
}
 8006998:	bf00      	nop
 800699a:	3714      	adds	r7, #20
 800699c:	46bd      	mov	sp, r7
 800699e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a2:	4770      	bx	lr
 80069a4:	40023c00 	.word	0x40023c00

080069a8 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 80069a8:	b480      	push	{r7}
 80069aa:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 80069ac:	4b20      	ldr	r3, [pc, #128]	; (8006a30 <FLASH_FlushCaches+0x88>)
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d017      	beq.n	80069e8 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80069b8:	4b1d      	ldr	r3, [pc, #116]	; (8006a30 <FLASH_FlushCaches+0x88>)
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	4a1c      	ldr	r2, [pc, #112]	; (8006a30 <FLASH_FlushCaches+0x88>)
 80069be:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80069c2:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80069c4:	4b1a      	ldr	r3, [pc, #104]	; (8006a30 <FLASH_FlushCaches+0x88>)
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	4a19      	ldr	r2, [pc, #100]	; (8006a30 <FLASH_FlushCaches+0x88>)
 80069ca:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80069ce:	6013      	str	r3, [r2, #0]
 80069d0:	4b17      	ldr	r3, [pc, #92]	; (8006a30 <FLASH_FlushCaches+0x88>)
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	4a16      	ldr	r2, [pc, #88]	; (8006a30 <FLASH_FlushCaches+0x88>)
 80069d6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80069da:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80069dc:	4b14      	ldr	r3, [pc, #80]	; (8006a30 <FLASH_FlushCaches+0x88>)
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	4a13      	ldr	r2, [pc, #76]	; (8006a30 <FLASH_FlushCaches+0x88>)
 80069e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80069e6:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 80069e8:	4b11      	ldr	r3, [pc, #68]	; (8006a30 <FLASH_FlushCaches+0x88>)
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d017      	beq.n	8006a24 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 80069f4:	4b0e      	ldr	r3, [pc, #56]	; (8006a30 <FLASH_FlushCaches+0x88>)
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	4a0d      	ldr	r2, [pc, #52]	; (8006a30 <FLASH_FlushCaches+0x88>)
 80069fa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80069fe:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8006a00:	4b0b      	ldr	r3, [pc, #44]	; (8006a30 <FLASH_FlushCaches+0x88>)
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	4a0a      	ldr	r2, [pc, #40]	; (8006a30 <FLASH_FlushCaches+0x88>)
 8006a06:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006a0a:	6013      	str	r3, [r2, #0]
 8006a0c:	4b08      	ldr	r3, [pc, #32]	; (8006a30 <FLASH_FlushCaches+0x88>)
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	4a07      	ldr	r2, [pc, #28]	; (8006a30 <FLASH_FlushCaches+0x88>)
 8006a12:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006a16:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8006a18:	4b05      	ldr	r3, [pc, #20]	; (8006a30 <FLASH_FlushCaches+0x88>)
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	4a04      	ldr	r2, [pc, #16]	; (8006a30 <FLASH_FlushCaches+0x88>)
 8006a1e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006a22:	6013      	str	r3, [r2, #0]
  }
}
 8006a24:	bf00      	nop
 8006a26:	46bd      	mov	sp, r7
 8006a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2c:	4770      	bx	lr
 8006a2e:	bf00      	nop
 8006a30:	40023c00 	.word	0x40023c00

08006a34 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006a34:	b480      	push	{r7}
 8006a36:	b089      	sub	sp, #36	; 0x24
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	6078      	str	r0, [r7, #4]
 8006a3c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006a3e:	2300      	movs	r3, #0
 8006a40:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8006a42:	2300      	movs	r3, #0
 8006a44:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8006a46:	2300      	movs	r3, #0
 8006a48:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006a4a:	2300      	movs	r3, #0
 8006a4c:	61fb      	str	r3, [r7, #28]
 8006a4e:	e159      	b.n	8006d04 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006a50:	2201      	movs	r2, #1
 8006a52:	69fb      	ldr	r3, [r7, #28]
 8006a54:	fa02 f303 	lsl.w	r3, r2, r3
 8006a58:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006a5a:	683b      	ldr	r3, [r7, #0]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	697a      	ldr	r2, [r7, #20]
 8006a60:	4013      	ands	r3, r2
 8006a62:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006a64:	693a      	ldr	r2, [r7, #16]
 8006a66:	697b      	ldr	r3, [r7, #20]
 8006a68:	429a      	cmp	r2, r3
 8006a6a:	f040 8148 	bne.w	8006cfe <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006a6e:	683b      	ldr	r3, [r7, #0]
 8006a70:	685b      	ldr	r3, [r3, #4]
 8006a72:	f003 0303 	and.w	r3, r3, #3
 8006a76:	2b01      	cmp	r3, #1
 8006a78:	d005      	beq.n	8006a86 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006a7a:	683b      	ldr	r3, [r7, #0]
 8006a7c:	685b      	ldr	r3, [r3, #4]
 8006a7e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006a82:	2b02      	cmp	r3, #2
 8006a84:	d130      	bne.n	8006ae8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	689b      	ldr	r3, [r3, #8]
 8006a8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006a8c:	69fb      	ldr	r3, [r7, #28]
 8006a8e:	005b      	lsls	r3, r3, #1
 8006a90:	2203      	movs	r2, #3
 8006a92:	fa02 f303 	lsl.w	r3, r2, r3
 8006a96:	43db      	mvns	r3, r3
 8006a98:	69ba      	ldr	r2, [r7, #24]
 8006a9a:	4013      	ands	r3, r2
 8006a9c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006a9e:	683b      	ldr	r3, [r7, #0]
 8006aa0:	68da      	ldr	r2, [r3, #12]
 8006aa2:	69fb      	ldr	r3, [r7, #28]
 8006aa4:	005b      	lsls	r3, r3, #1
 8006aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8006aaa:	69ba      	ldr	r2, [r7, #24]
 8006aac:	4313      	orrs	r3, r2
 8006aae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	69ba      	ldr	r2, [r7, #24]
 8006ab4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	685b      	ldr	r3, [r3, #4]
 8006aba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006abc:	2201      	movs	r2, #1
 8006abe:	69fb      	ldr	r3, [r7, #28]
 8006ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8006ac4:	43db      	mvns	r3, r3
 8006ac6:	69ba      	ldr	r2, [r7, #24]
 8006ac8:	4013      	ands	r3, r2
 8006aca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006acc:	683b      	ldr	r3, [r7, #0]
 8006ace:	685b      	ldr	r3, [r3, #4]
 8006ad0:	091b      	lsrs	r3, r3, #4
 8006ad2:	f003 0201 	and.w	r2, r3, #1
 8006ad6:	69fb      	ldr	r3, [r7, #28]
 8006ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8006adc:	69ba      	ldr	r2, [r7, #24]
 8006ade:	4313      	orrs	r3, r2
 8006ae0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	69ba      	ldr	r2, [r7, #24]
 8006ae6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006ae8:	683b      	ldr	r3, [r7, #0]
 8006aea:	685b      	ldr	r3, [r3, #4]
 8006aec:	f003 0303 	and.w	r3, r3, #3
 8006af0:	2b03      	cmp	r3, #3
 8006af2:	d017      	beq.n	8006b24 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	68db      	ldr	r3, [r3, #12]
 8006af8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006afa:	69fb      	ldr	r3, [r7, #28]
 8006afc:	005b      	lsls	r3, r3, #1
 8006afe:	2203      	movs	r2, #3
 8006b00:	fa02 f303 	lsl.w	r3, r2, r3
 8006b04:	43db      	mvns	r3, r3
 8006b06:	69ba      	ldr	r2, [r7, #24]
 8006b08:	4013      	ands	r3, r2
 8006b0a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006b0c:	683b      	ldr	r3, [r7, #0]
 8006b0e:	689a      	ldr	r2, [r3, #8]
 8006b10:	69fb      	ldr	r3, [r7, #28]
 8006b12:	005b      	lsls	r3, r3, #1
 8006b14:	fa02 f303 	lsl.w	r3, r2, r3
 8006b18:	69ba      	ldr	r2, [r7, #24]
 8006b1a:	4313      	orrs	r3, r2
 8006b1c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	69ba      	ldr	r2, [r7, #24]
 8006b22:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006b24:	683b      	ldr	r3, [r7, #0]
 8006b26:	685b      	ldr	r3, [r3, #4]
 8006b28:	f003 0303 	and.w	r3, r3, #3
 8006b2c:	2b02      	cmp	r3, #2
 8006b2e:	d123      	bne.n	8006b78 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006b30:	69fb      	ldr	r3, [r7, #28]
 8006b32:	08da      	lsrs	r2, r3, #3
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	3208      	adds	r2, #8
 8006b38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006b3e:	69fb      	ldr	r3, [r7, #28]
 8006b40:	f003 0307 	and.w	r3, r3, #7
 8006b44:	009b      	lsls	r3, r3, #2
 8006b46:	220f      	movs	r2, #15
 8006b48:	fa02 f303 	lsl.w	r3, r2, r3
 8006b4c:	43db      	mvns	r3, r3
 8006b4e:	69ba      	ldr	r2, [r7, #24]
 8006b50:	4013      	ands	r3, r2
 8006b52:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006b54:	683b      	ldr	r3, [r7, #0]
 8006b56:	691a      	ldr	r2, [r3, #16]
 8006b58:	69fb      	ldr	r3, [r7, #28]
 8006b5a:	f003 0307 	and.w	r3, r3, #7
 8006b5e:	009b      	lsls	r3, r3, #2
 8006b60:	fa02 f303 	lsl.w	r3, r2, r3
 8006b64:	69ba      	ldr	r2, [r7, #24]
 8006b66:	4313      	orrs	r3, r2
 8006b68:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006b6a:	69fb      	ldr	r3, [r7, #28]
 8006b6c:	08da      	lsrs	r2, r3, #3
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	3208      	adds	r2, #8
 8006b72:	69b9      	ldr	r1, [r7, #24]
 8006b74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006b7e:	69fb      	ldr	r3, [r7, #28]
 8006b80:	005b      	lsls	r3, r3, #1
 8006b82:	2203      	movs	r2, #3
 8006b84:	fa02 f303 	lsl.w	r3, r2, r3
 8006b88:	43db      	mvns	r3, r3
 8006b8a:	69ba      	ldr	r2, [r7, #24]
 8006b8c:	4013      	ands	r3, r2
 8006b8e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006b90:	683b      	ldr	r3, [r7, #0]
 8006b92:	685b      	ldr	r3, [r3, #4]
 8006b94:	f003 0203 	and.w	r2, r3, #3
 8006b98:	69fb      	ldr	r3, [r7, #28]
 8006b9a:	005b      	lsls	r3, r3, #1
 8006b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8006ba0:	69ba      	ldr	r2, [r7, #24]
 8006ba2:	4313      	orrs	r3, r2
 8006ba4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	69ba      	ldr	r2, [r7, #24]
 8006baa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006bac:	683b      	ldr	r3, [r7, #0]
 8006bae:	685b      	ldr	r3, [r3, #4]
 8006bb0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	f000 80a2 	beq.w	8006cfe <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006bba:	2300      	movs	r3, #0
 8006bbc:	60fb      	str	r3, [r7, #12]
 8006bbe:	4b57      	ldr	r3, [pc, #348]	; (8006d1c <HAL_GPIO_Init+0x2e8>)
 8006bc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006bc2:	4a56      	ldr	r2, [pc, #344]	; (8006d1c <HAL_GPIO_Init+0x2e8>)
 8006bc4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006bc8:	6453      	str	r3, [r2, #68]	; 0x44
 8006bca:	4b54      	ldr	r3, [pc, #336]	; (8006d1c <HAL_GPIO_Init+0x2e8>)
 8006bcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006bce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006bd2:	60fb      	str	r3, [r7, #12]
 8006bd4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006bd6:	4a52      	ldr	r2, [pc, #328]	; (8006d20 <HAL_GPIO_Init+0x2ec>)
 8006bd8:	69fb      	ldr	r3, [r7, #28]
 8006bda:	089b      	lsrs	r3, r3, #2
 8006bdc:	3302      	adds	r3, #2
 8006bde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006be2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006be4:	69fb      	ldr	r3, [r7, #28]
 8006be6:	f003 0303 	and.w	r3, r3, #3
 8006bea:	009b      	lsls	r3, r3, #2
 8006bec:	220f      	movs	r2, #15
 8006bee:	fa02 f303 	lsl.w	r3, r2, r3
 8006bf2:	43db      	mvns	r3, r3
 8006bf4:	69ba      	ldr	r2, [r7, #24]
 8006bf6:	4013      	ands	r3, r2
 8006bf8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	4a49      	ldr	r2, [pc, #292]	; (8006d24 <HAL_GPIO_Init+0x2f0>)
 8006bfe:	4293      	cmp	r3, r2
 8006c00:	d019      	beq.n	8006c36 <HAL_GPIO_Init+0x202>
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	4a48      	ldr	r2, [pc, #288]	; (8006d28 <HAL_GPIO_Init+0x2f4>)
 8006c06:	4293      	cmp	r3, r2
 8006c08:	d013      	beq.n	8006c32 <HAL_GPIO_Init+0x1fe>
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	4a47      	ldr	r2, [pc, #284]	; (8006d2c <HAL_GPIO_Init+0x2f8>)
 8006c0e:	4293      	cmp	r3, r2
 8006c10:	d00d      	beq.n	8006c2e <HAL_GPIO_Init+0x1fa>
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	4a46      	ldr	r2, [pc, #280]	; (8006d30 <HAL_GPIO_Init+0x2fc>)
 8006c16:	4293      	cmp	r3, r2
 8006c18:	d007      	beq.n	8006c2a <HAL_GPIO_Init+0x1f6>
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	4a45      	ldr	r2, [pc, #276]	; (8006d34 <HAL_GPIO_Init+0x300>)
 8006c1e:	4293      	cmp	r3, r2
 8006c20:	d101      	bne.n	8006c26 <HAL_GPIO_Init+0x1f2>
 8006c22:	2304      	movs	r3, #4
 8006c24:	e008      	b.n	8006c38 <HAL_GPIO_Init+0x204>
 8006c26:	2307      	movs	r3, #7
 8006c28:	e006      	b.n	8006c38 <HAL_GPIO_Init+0x204>
 8006c2a:	2303      	movs	r3, #3
 8006c2c:	e004      	b.n	8006c38 <HAL_GPIO_Init+0x204>
 8006c2e:	2302      	movs	r3, #2
 8006c30:	e002      	b.n	8006c38 <HAL_GPIO_Init+0x204>
 8006c32:	2301      	movs	r3, #1
 8006c34:	e000      	b.n	8006c38 <HAL_GPIO_Init+0x204>
 8006c36:	2300      	movs	r3, #0
 8006c38:	69fa      	ldr	r2, [r7, #28]
 8006c3a:	f002 0203 	and.w	r2, r2, #3
 8006c3e:	0092      	lsls	r2, r2, #2
 8006c40:	4093      	lsls	r3, r2
 8006c42:	69ba      	ldr	r2, [r7, #24]
 8006c44:	4313      	orrs	r3, r2
 8006c46:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006c48:	4935      	ldr	r1, [pc, #212]	; (8006d20 <HAL_GPIO_Init+0x2ec>)
 8006c4a:	69fb      	ldr	r3, [r7, #28]
 8006c4c:	089b      	lsrs	r3, r3, #2
 8006c4e:	3302      	adds	r3, #2
 8006c50:	69ba      	ldr	r2, [r7, #24]
 8006c52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006c56:	4b38      	ldr	r3, [pc, #224]	; (8006d38 <HAL_GPIO_Init+0x304>)
 8006c58:	689b      	ldr	r3, [r3, #8]
 8006c5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006c5c:	693b      	ldr	r3, [r7, #16]
 8006c5e:	43db      	mvns	r3, r3
 8006c60:	69ba      	ldr	r2, [r7, #24]
 8006c62:	4013      	ands	r3, r2
 8006c64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006c66:	683b      	ldr	r3, [r7, #0]
 8006c68:	685b      	ldr	r3, [r3, #4]
 8006c6a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d003      	beq.n	8006c7a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8006c72:	69ba      	ldr	r2, [r7, #24]
 8006c74:	693b      	ldr	r3, [r7, #16]
 8006c76:	4313      	orrs	r3, r2
 8006c78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006c7a:	4a2f      	ldr	r2, [pc, #188]	; (8006d38 <HAL_GPIO_Init+0x304>)
 8006c7c:	69bb      	ldr	r3, [r7, #24]
 8006c7e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006c80:	4b2d      	ldr	r3, [pc, #180]	; (8006d38 <HAL_GPIO_Init+0x304>)
 8006c82:	68db      	ldr	r3, [r3, #12]
 8006c84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006c86:	693b      	ldr	r3, [r7, #16]
 8006c88:	43db      	mvns	r3, r3
 8006c8a:	69ba      	ldr	r2, [r7, #24]
 8006c8c:	4013      	ands	r3, r2
 8006c8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006c90:	683b      	ldr	r3, [r7, #0]
 8006c92:	685b      	ldr	r3, [r3, #4]
 8006c94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d003      	beq.n	8006ca4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8006c9c:	69ba      	ldr	r2, [r7, #24]
 8006c9e:	693b      	ldr	r3, [r7, #16]
 8006ca0:	4313      	orrs	r3, r2
 8006ca2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006ca4:	4a24      	ldr	r2, [pc, #144]	; (8006d38 <HAL_GPIO_Init+0x304>)
 8006ca6:	69bb      	ldr	r3, [r7, #24]
 8006ca8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8006caa:	4b23      	ldr	r3, [pc, #140]	; (8006d38 <HAL_GPIO_Init+0x304>)
 8006cac:	685b      	ldr	r3, [r3, #4]
 8006cae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006cb0:	693b      	ldr	r3, [r7, #16]
 8006cb2:	43db      	mvns	r3, r3
 8006cb4:	69ba      	ldr	r2, [r7, #24]
 8006cb6:	4013      	ands	r3, r2
 8006cb8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006cba:	683b      	ldr	r3, [r7, #0]
 8006cbc:	685b      	ldr	r3, [r3, #4]
 8006cbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d003      	beq.n	8006cce <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8006cc6:	69ba      	ldr	r2, [r7, #24]
 8006cc8:	693b      	ldr	r3, [r7, #16]
 8006cca:	4313      	orrs	r3, r2
 8006ccc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006cce:	4a1a      	ldr	r2, [pc, #104]	; (8006d38 <HAL_GPIO_Init+0x304>)
 8006cd0:	69bb      	ldr	r3, [r7, #24]
 8006cd2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006cd4:	4b18      	ldr	r3, [pc, #96]	; (8006d38 <HAL_GPIO_Init+0x304>)
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006cda:	693b      	ldr	r3, [r7, #16]
 8006cdc:	43db      	mvns	r3, r3
 8006cde:	69ba      	ldr	r2, [r7, #24]
 8006ce0:	4013      	ands	r3, r2
 8006ce2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006ce4:	683b      	ldr	r3, [r7, #0]
 8006ce6:	685b      	ldr	r3, [r3, #4]
 8006ce8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d003      	beq.n	8006cf8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8006cf0:	69ba      	ldr	r2, [r7, #24]
 8006cf2:	693b      	ldr	r3, [r7, #16]
 8006cf4:	4313      	orrs	r3, r2
 8006cf6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006cf8:	4a0f      	ldr	r2, [pc, #60]	; (8006d38 <HAL_GPIO_Init+0x304>)
 8006cfa:	69bb      	ldr	r3, [r7, #24]
 8006cfc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006cfe:	69fb      	ldr	r3, [r7, #28]
 8006d00:	3301      	adds	r3, #1
 8006d02:	61fb      	str	r3, [r7, #28]
 8006d04:	69fb      	ldr	r3, [r7, #28]
 8006d06:	2b0f      	cmp	r3, #15
 8006d08:	f67f aea2 	bls.w	8006a50 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006d0c:	bf00      	nop
 8006d0e:	bf00      	nop
 8006d10:	3724      	adds	r7, #36	; 0x24
 8006d12:	46bd      	mov	sp, r7
 8006d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d18:	4770      	bx	lr
 8006d1a:	bf00      	nop
 8006d1c:	40023800 	.word	0x40023800
 8006d20:	40013800 	.word	0x40013800
 8006d24:	40020000 	.word	0x40020000
 8006d28:	40020400 	.word	0x40020400
 8006d2c:	40020800 	.word	0x40020800
 8006d30:	40020c00 	.word	0x40020c00
 8006d34:	40021000 	.word	0x40021000
 8006d38:	40013c00 	.word	0x40013c00

08006d3c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8006d3c:	b480      	push	{r7}
 8006d3e:	b087      	sub	sp, #28
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	6078      	str	r0, [r7, #4]
 8006d44:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006d46:	2300      	movs	r3, #0
 8006d48:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8006d4a:	2300      	movs	r3, #0
 8006d4c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8006d4e:	2300      	movs	r3, #0
 8006d50:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006d52:	2300      	movs	r3, #0
 8006d54:	617b      	str	r3, [r7, #20]
 8006d56:	e0bb      	b.n	8006ed0 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006d58:	2201      	movs	r2, #1
 8006d5a:	697b      	ldr	r3, [r7, #20]
 8006d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8006d60:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8006d62:	683a      	ldr	r2, [r7, #0]
 8006d64:	693b      	ldr	r3, [r7, #16]
 8006d66:	4013      	ands	r3, r2
 8006d68:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8006d6a:	68fa      	ldr	r2, [r7, #12]
 8006d6c:	693b      	ldr	r3, [r7, #16]
 8006d6e:	429a      	cmp	r2, r3
 8006d70:	f040 80ab 	bne.w	8006eca <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8006d74:	4a5c      	ldr	r2, [pc, #368]	; (8006ee8 <HAL_GPIO_DeInit+0x1ac>)
 8006d76:	697b      	ldr	r3, [r7, #20]
 8006d78:	089b      	lsrs	r3, r3, #2
 8006d7a:	3302      	adds	r3, #2
 8006d7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006d80:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8006d82:	697b      	ldr	r3, [r7, #20]
 8006d84:	f003 0303 	and.w	r3, r3, #3
 8006d88:	009b      	lsls	r3, r3, #2
 8006d8a:	220f      	movs	r2, #15
 8006d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8006d90:	68ba      	ldr	r2, [r7, #8]
 8006d92:	4013      	ands	r3, r2
 8006d94:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	4a54      	ldr	r2, [pc, #336]	; (8006eec <HAL_GPIO_DeInit+0x1b0>)
 8006d9a:	4293      	cmp	r3, r2
 8006d9c:	d019      	beq.n	8006dd2 <HAL_GPIO_DeInit+0x96>
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	4a53      	ldr	r2, [pc, #332]	; (8006ef0 <HAL_GPIO_DeInit+0x1b4>)
 8006da2:	4293      	cmp	r3, r2
 8006da4:	d013      	beq.n	8006dce <HAL_GPIO_DeInit+0x92>
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	4a52      	ldr	r2, [pc, #328]	; (8006ef4 <HAL_GPIO_DeInit+0x1b8>)
 8006daa:	4293      	cmp	r3, r2
 8006dac:	d00d      	beq.n	8006dca <HAL_GPIO_DeInit+0x8e>
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	4a51      	ldr	r2, [pc, #324]	; (8006ef8 <HAL_GPIO_DeInit+0x1bc>)
 8006db2:	4293      	cmp	r3, r2
 8006db4:	d007      	beq.n	8006dc6 <HAL_GPIO_DeInit+0x8a>
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	4a50      	ldr	r2, [pc, #320]	; (8006efc <HAL_GPIO_DeInit+0x1c0>)
 8006dba:	4293      	cmp	r3, r2
 8006dbc:	d101      	bne.n	8006dc2 <HAL_GPIO_DeInit+0x86>
 8006dbe:	2304      	movs	r3, #4
 8006dc0:	e008      	b.n	8006dd4 <HAL_GPIO_DeInit+0x98>
 8006dc2:	2307      	movs	r3, #7
 8006dc4:	e006      	b.n	8006dd4 <HAL_GPIO_DeInit+0x98>
 8006dc6:	2303      	movs	r3, #3
 8006dc8:	e004      	b.n	8006dd4 <HAL_GPIO_DeInit+0x98>
 8006dca:	2302      	movs	r3, #2
 8006dcc:	e002      	b.n	8006dd4 <HAL_GPIO_DeInit+0x98>
 8006dce:	2301      	movs	r3, #1
 8006dd0:	e000      	b.n	8006dd4 <HAL_GPIO_DeInit+0x98>
 8006dd2:	2300      	movs	r3, #0
 8006dd4:	697a      	ldr	r2, [r7, #20]
 8006dd6:	f002 0203 	and.w	r2, r2, #3
 8006dda:	0092      	lsls	r2, r2, #2
 8006ddc:	4093      	lsls	r3, r2
 8006dde:	68ba      	ldr	r2, [r7, #8]
 8006de0:	429a      	cmp	r2, r3
 8006de2:	d132      	bne.n	8006e4a <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8006de4:	4b46      	ldr	r3, [pc, #280]	; (8006f00 <HAL_GPIO_DeInit+0x1c4>)
 8006de6:	681a      	ldr	r2, [r3, #0]
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	43db      	mvns	r3, r3
 8006dec:	4944      	ldr	r1, [pc, #272]	; (8006f00 <HAL_GPIO_DeInit+0x1c4>)
 8006dee:	4013      	ands	r3, r2
 8006df0:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8006df2:	4b43      	ldr	r3, [pc, #268]	; (8006f00 <HAL_GPIO_DeInit+0x1c4>)
 8006df4:	685a      	ldr	r2, [r3, #4]
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	43db      	mvns	r3, r3
 8006dfa:	4941      	ldr	r1, [pc, #260]	; (8006f00 <HAL_GPIO_DeInit+0x1c4>)
 8006dfc:	4013      	ands	r3, r2
 8006dfe:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8006e00:	4b3f      	ldr	r3, [pc, #252]	; (8006f00 <HAL_GPIO_DeInit+0x1c4>)
 8006e02:	68da      	ldr	r2, [r3, #12]
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	43db      	mvns	r3, r3
 8006e08:	493d      	ldr	r1, [pc, #244]	; (8006f00 <HAL_GPIO_DeInit+0x1c4>)
 8006e0a:	4013      	ands	r3, r2
 8006e0c:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8006e0e:	4b3c      	ldr	r3, [pc, #240]	; (8006f00 <HAL_GPIO_DeInit+0x1c4>)
 8006e10:	689a      	ldr	r2, [r3, #8]
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	43db      	mvns	r3, r3
 8006e16:	493a      	ldr	r1, [pc, #232]	; (8006f00 <HAL_GPIO_DeInit+0x1c4>)
 8006e18:	4013      	ands	r3, r2
 8006e1a:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8006e1c:	697b      	ldr	r3, [r7, #20]
 8006e1e:	f003 0303 	and.w	r3, r3, #3
 8006e22:	009b      	lsls	r3, r3, #2
 8006e24:	220f      	movs	r2, #15
 8006e26:	fa02 f303 	lsl.w	r3, r2, r3
 8006e2a:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8006e2c:	4a2e      	ldr	r2, [pc, #184]	; (8006ee8 <HAL_GPIO_DeInit+0x1ac>)
 8006e2e:	697b      	ldr	r3, [r7, #20]
 8006e30:	089b      	lsrs	r3, r3, #2
 8006e32:	3302      	adds	r3, #2
 8006e34:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8006e38:	68bb      	ldr	r3, [r7, #8]
 8006e3a:	43da      	mvns	r2, r3
 8006e3c:	482a      	ldr	r0, [pc, #168]	; (8006ee8 <HAL_GPIO_DeInit+0x1ac>)
 8006e3e:	697b      	ldr	r3, [r7, #20]
 8006e40:	089b      	lsrs	r3, r3, #2
 8006e42:	400a      	ands	r2, r1
 8006e44:	3302      	adds	r3, #2
 8006e46:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681a      	ldr	r2, [r3, #0]
 8006e4e:	697b      	ldr	r3, [r7, #20]
 8006e50:	005b      	lsls	r3, r3, #1
 8006e52:	2103      	movs	r1, #3
 8006e54:	fa01 f303 	lsl.w	r3, r1, r3
 8006e58:	43db      	mvns	r3, r3
 8006e5a:	401a      	ands	r2, r3
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006e60:	697b      	ldr	r3, [r7, #20]
 8006e62:	08da      	lsrs	r2, r3, #3
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	3208      	adds	r2, #8
 8006e68:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006e6c:	697b      	ldr	r3, [r7, #20]
 8006e6e:	f003 0307 	and.w	r3, r3, #7
 8006e72:	009b      	lsls	r3, r3, #2
 8006e74:	220f      	movs	r2, #15
 8006e76:	fa02 f303 	lsl.w	r3, r2, r3
 8006e7a:	43db      	mvns	r3, r3
 8006e7c:	697a      	ldr	r2, [r7, #20]
 8006e7e:	08d2      	lsrs	r2, r2, #3
 8006e80:	4019      	ands	r1, r3
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	3208      	adds	r2, #8
 8006e86:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	68da      	ldr	r2, [r3, #12]
 8006e8e:	697b      	ldr	r3, [r7, #20]
 8006e90:	005b      	lsls	r3, r3, #1
 8006e92:	2103      	movs	r1, #3
 8006e94:	fa01 f303 	lsl.w	r3, r1, r3
 8006e98:	43db      	mvns	r3, r3
 8006e9a:	401a      	ands	r2, r3
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	685a      	ldr	r2, [r3, #4]
 8006ea4:	2101      	movs	r1, #1
 8006ea6:	697b      	ldr	r3, [r7, #20]
 8006ea8:	fa01 f303 	lsl.w	r3, r1, r3
 8006eac:	43db      	mvns	r3, r3
 8006eae:	401a      	ands	r2, r3
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	689a      	ldr	r2, [r3, #8]
 8006eb8:	697b      	ldr	r3, [r7, #20]
 8006eba:	005b      	lsls	r3, r3, #1
 8006ebc:	2103      	movs	r1, #3
 8006ebe:	fa01 f303 	lsl.w	r3, r1, r3
 8006ec2:	43db      	mvns	r3, r3
 8006ec4:	401a      	ands	r2, r3
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006eca:	697b      	ldr	r3, [r7, #20]
 8006ecc:	3301      	adds	r3, #1
 8006ece:	617b      	str	r3, [r7, #20]
 8006ed0:	697b      	ldr	r3, [r7, #20]
 8006ed2:	2b0f      	cmp	r3, #15
 8006ed4:	f67f af40 	bls.w	8006d58 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8006ed8:	bf00      	nop
 8006eda:	bf00      	nop
 8006edc:	371c      	adds	r7, #28
 8006ede:	46bd      	mov	sp, r7
 8006ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee4:	4770      	bx	lr
 8006ee6:	bf00      	nop
 8006ee8:	40013800 	.word	0x40013800
 8006eec:	40020000 	.word	0x40020000
 8006ef0:	40020400 	.word	0x40020400
 8006ef4:	40020800 	.word	0x40020800
 8006ef8:	40020c00 	.word	0x40020c00
 8006efc:	40021000 	.word	0x40021000
 8006f00:	40013c00 	.word	0x40013c00

08006f04 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006f04:	b480      	push	{r7}
 8006f06:	b085      	sub	sp, #20
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	6078      	str	r0, [r7, #4]
 8006f0c:	460b      	mov	r3, r1
 8006f0e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	691a      	ldr	r2, [r3, #16]
 8006f14:	887b      	ldrh	r3, [r7, #2]
 8006f16:	4013      	ands	r3, r2
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d002      	beq.n	8006f22 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006f1c:	2301      	movs	r3, #1
 8006f1e:	73fb      	strb	r3, [r7, #15]
 8006f20:	e001      	b.n	8006f26 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006f22:	2300      	movs	r3, #0
 8006f24:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006f26:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f28:	4618      	mov	r0, r3
 8006f2a:	3714      	adds	r7, #20
 8006f2c:	46bd      	mov	sp, r7
 8006f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f32:	4770      	bx	lr

08006f34 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006f34:	b480      	push	{r7}
 8006f36:	b083      	sub	sp, #12
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	6078      	str	r0, [r7, #4]
 8006f3c:	460b      	mov	r3, r1
 8006f3e:	807b      	strh	r3, [r7, #2]
 8006f40:	4613      	mov	r3, r2
 8006f42:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006f44:	787b      	ldrb	r3, [r7, #1]
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d003      	beq.n	8006f52 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006f4a:	887a      	ldrh	r2, [r7, #2]
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006f50:	e003      	b.n	8006f5a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006f52:	887b      	ldrh	r3, [r7, #2]
 8006f54:	041a      	lsls	r2, r3, #16
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	619a      	str	r2, [r3, #24]
}
 8006f5a:	bf00      	nop
 8006f5c:	370c      	adds	r7, #12
 8006f5e:	46bd      	mov	sp, r7
 8006f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f64:	4770      	bx	lr

08006f66 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006f66:	b480      	push	{r7}
 8006f68:	b085      	sub	sp, #20
 8006f6a:	af00      	add	r7, sp, #0
 8006f6c:	6078      	str	r0, [r7, #4]
 8006f6e:	460b      	mov	r3, r1
 8006f70:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	695b      	ldr	r3, [r3, #20]
 8006f76:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006f78:	887a      	ldrh	r2, [r7, #2]
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	4013      	ands	r3, r2
 8006f7e:	041a      	lsls	r2, r3, #16
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	43d9      	mvns	r1, r3
 8006f84:	887b      	ldrh	r3, [r7, #2]
 8006f86:	400b      	ands	r3, r1
 8006f88:	431a      	orrs	r2, r3
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	619a      	str	r2, [r3, #24]
}
 8006f8e:	bf00      	nop
 8006f90:	3714      	adds	r7, #20
 8006f92:	46bd      	mov	sp, r7
 8006f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f98:	4770      	bx	lr
	...

08006f9c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006f9c:	b580      	push	{r7, lr}
 8006f9e:	b084      	sub	sp, #16
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d101      	bne.n	8006fae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006faa:	2301      	movs	r3, #1
 8006fac:	e12b      	b.n	8007206 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006fb4:	b2db      	uxtb	r3, r3
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d106      	bne.n	8006fc8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	2200      	movs	r2, #0
 8006fbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006fc2:	6878      	ldr	r0, [r7, #4]
 8006fc4:	f7fd f812 	bl	8003fec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	2224      	movs	r2, #36	; 0x24
 8006fcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	681a      	ldr	r2, [r3, #0]
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	f022 0201 	bic.w	r2, r2, #1
 8006fde:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	681a      	ldr	r2, [r3, #0]
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006fee:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	681a      	ldr	r2, [r3, #0]
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006ffe:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8007000:	f004 fd26 	bl	800ba50 <HAL_RCC_GetPCLK1Freq>
 8007004:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	685b      	ldr	r3, [r3, #4]
 800700a:	4a81      	ldr	r2, [pc, #516]	; (8007210 <HAL_I2C_Init+0x274>)
 800700c:	4293      	cmp	r3, r2
 800700e:	d807      	bhi.n	8007020 <HAL_I2C_Init+0x84>
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	4a80      	ldr	r2, [pc, #512]	; (8007214 <HAL_I2C_Init+0x278>)
 8007014:	4293      	cmp	r3, r2
 8007016:	bf94      	ite	ls
 8007018:	2301      	movls	r3, #1
 800701a:	2300      	movhi	r3, #0
 800701c:	b2db      	uxtb	r3, r3
 800701e:	e006      	b.n	800702e <HAL_I2C_Init+0x92>
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	4a7d      	ldr	r2, [pc, #500]	; (8007218 <HAL_I2C_Init+0x27c>)
 8007024:	4293      	cmp	r3, r2
 8007026:	bf94      	ite	ls
 8007028:	2301      	movls	r3, #1
 800702a:	2300      	movhi	r3, #0
 800702c:	b2db      	uxtb	r3, r3
 800702e:	2b00      	cmp	r3, #0
 8007030:	d001      	beq.n	8007036 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8007032:	2301      	movs	r3, #1
 8007034:	e0e7      	b.n	8007206 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	4a78      	ldr	r2, [pc, #480]	; (800721c <HAL_I2C_Init+0x280>)
 800703a:	fba2 2303 	umull	r2, r3, r2, r3
 800703e:	0c9b      	lsrs	r3, r3, #18
 8007040:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	685b      	ldr	r3, [r3, #4]
 8007048:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	68ba      	ldr	r2, [r7, #8]
 8007052:	430a      	orrs	r2, r1
 8007054:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	6a1b      	ldr	r3, [r3, #32]
 800705c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	685b      	ldr	r3, [r3, #4]
 8007064:	4a6a      	ldr	r2, [pc, #424]	; (8007210 <HAL_I2C_Init+0x274>)
 8007066:	4293      	cmp	r3, r2
 8007068:	d802      	bhi.n	8007070 <HAL_I2C_Init+0xd4>
 800706a:	68bb      	ldr	r3, [r7, #8]
 800706c:	3301      	adds	r3, #1
 800706e:	e009      	b.n	8007084 <HAL_I2C_Init+0xe8>
 8007070:	68bb      	ldr	r3, [r7, #8]
 8007072:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8007076:	fb02 f303 	mul.w	r3, r2, r3
 800707a:	4a69      	ldr	r2, [pc, #420]	; (8007220 <HAL_I2C_Init+0x284>)
 800707c:	fba2 2303 	umull	r2, r3, r2, r3
 8007080:	099b      	lsrs	r3, r3, #6
 8007082:	3301      	adds	r3, #1
 8007084:	687a      	ldr	r2, [r7, #4]
 8007086:	6812      	ldr	r2, [r2, #0]
 8007088:	430b      	orrs	r3, r1
 800708a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	69db      	ldr	r3, [r3, #28]
 8007092:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8007096:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	685b      	ldr	r3, [r3, #4]
 800709e:	495c      	ldr	r1, [pc, #368]	; (8007210 <HAL_I2C_Init+0x274>)
 80070a0:	428b      	cmp	r3, r1
 80070a2:	d819      	bhi.n	80070d8 <HAL_I2C_Init+0x13c>
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	1e59      	subs	r1, r3, #1
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	685b      	ldr	r3, [r3, #4]
 80070ac:	005b      	lsls	r3, r3, #1
 80070ae:	fbb1 f3f3 	udiv	r3, r1, r3
 80070b2:	1c59      	adds	r1, r3, #1
 80070b4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80070b8:	400b      	ands	r3, r1
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d00a      	beq.n	80070d4 <HAL_I2C_Init+0x138>
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	1e59      	subs	r1, r3, #1
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	685b      	ldr	r3, [r3, #4]
 80070c6:	005b      	lsls	r3, r3, #1
 80070c8:	fbb1 f3f3 	udiv	r3, r1, r3
 80070cc:	3301      	adds	r3, #1
 80070ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80070d2:	e051      	b.n	8007178 <HAL_I2C_Init+0x1dc>
 80070d4:	2304      	movs	r3, #4
 80070d6:	e04f      	b.n	8007178 <HAL_I2C_Init+0x1dc>
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	689b      	ldr	r3, [r3, #8]
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d111      	bne.n	8007104 <HAL_I2C_Init+0x168>
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	1e58      	subs	r0, r3, #1
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	6859      	ldr	r1, [r3, #4]
 80070e8:	460b      	mov	r3, r1
 80070ea:	005b      	lsls	r3, r3, #1
 80070ec:	440b      	add	r3, r1
 80070ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80070f2:	3301      	adds	r3, #1
 80070f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	bf0c      	ite	eq
 80070fc:	2301      	moveq	r3, #1
 80070fe:	2300      	movne	r3, #0
 8007100:	b2db      	uxtb	r3, r3
 8007102:	e012      	b.n	800712a <HAL_I2C_Init+0x18e>
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	1e58      	subs	r0, r3, #1
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	6859      	ldr	r1, [r3, #4]
 800710c:	460b      	mov	r3, r1
 800710e:	009b      	lsls	r3, r3, #2
 8007110:	440b      	add	r3, r1
 8007112:	0099      	lsls	r1, r3, #2
 8007114:	440b      	add	r3, r1
 8007116:	fbb0 f3f3 	udiv	r3, r0, r3
 800711a:	3301      	adds	r3, #1
 800711c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007120:	2b00      	cmp	r3, #0
 8007122:	bf0c      	ite	eq
 8007124:	2301      	moveq	r3, #1
 8007126:	2300      	movne	r3, #0
 8007128:	b2db      	uxtb	r3, r3
 800712a:	2b00      	cmp	r3, #0
 800712c:	d001      	beq.n	8007132 <HAL_I2C_Init+0x196>
 800712e:	2301      	movs	r3, #1
 8007130:	e022      	b.n	8007178 <HAL_I2C_Init+0x1dc>
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	689b      	ldr	r3, [r3, #8]
 8007136:	2b00      	cmp	r3, #0
 8007138:	d10e      	bne.n	8007158 <HAL_I2C_Init+0x1bc>
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	1e58      	subs	r0, r3, #1
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	6859      	ldr	r1, [r3, #4]
 8007142:	460b      	mov	r3, r1
 8007144:	005b      	lsls	r3, r3, #1
 8007146:	440b      	add	r3, r1
 8007148:	fbb0 f3f3 	udiv	r3, r0, r3
 800714c:	3301      	adds	r3, #1
 800714e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007152:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007156:	e00f      	b.n	8007178 <HAL_I2C_Init+0x1dc>
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	1e58      	subs	r0, r3, #1
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	6859      	ldr	r1, [r3, #4]
 8007160:	460b      	mov	r3, r1
 8007162:	009b      	lsls	r3, r3, #2
 8007164:	440b      	add	r3, r1
 8007166:	0099      	lsls	r1, r3, #2
 8007168:	440b      	add	r3, r1
 800716a:	fbb0 f3f3 	udiv	r3, r0, r3
 800716e:	3301      	adds	r3, #1
 8007170:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007174:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007178:	6879      	ldr	r1, [r7, #4]
 800717a:	6809      	ldr	r1, [r1, #0]
 800717c:	4313      	orrs	r3, r2
 800717e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	69da      	ldr	r2, [r3, #28]
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	6a1b      	ldr	r3, [r3, #32]
 8007192:	431a      	orrs	r2, r3
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	430a      	orrs	r2, r1
 800719a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	689b      	ldr	r3, [r3, #8]
 80071a2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80071a6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80071aa:	687a      	ldr	r2, [r7, #4]
 80071ac:	6911      	ldr	r1, [r2, #16]
 80071ae:	687a      	ldr	r2, [r7, #4]
 80071b0:	68d2      	ldr	r2, [r2, #12]
 80071b2:	4311      	orrs	r1, r2
 80071b4:	687a      	ldr	r2, [r7, #4]
 80071b6:	6812      	ldr	r2, [r2, #0]
 80071b8:	430b      	orrs	r3, r1
 80071ba:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	68db      	ldr	r3, [r3, #12]
 80071c2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	695a      	ldr	r2, [r3, #20]
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	699b      	ldr	r3, [r3, #24]
 80071ce:	431a      	orrs	r2, r3
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	430a      	orrs	r2, r1
 80071d6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	681a      	ldr	r2, [r3, #0]
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	f042 0201 	orr.w	r2, r2, #1
 80071e6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	2200      	movs	r2, #0
 80071ec:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	2220      	movs	r2, #32
 80071f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	2200      	movs	r2, #0
 80071fa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	2200      	movs	r2, #0
 8007200:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007204:	2300      	movs	r3, #0
}
 8007206:	4618      	mov	r0, r3
 8007208:	3710      	adds	r7, #16
 800720a:	46bd      	mov	sp, r7
 800720c:	bd80      	pop	{r7, pc}
 800720e:	bf00      	nop
 8007210:	000186a0 	.word	0x000186a0
 8007214:	001e847f 	.word	0x001e847f
 8007218:	003d08ff 	.word	0x003d08ff
 800721c:	431bde83 	.word	0x431bde83
 8007220:	10624dd3 	.word	0x10624dd3

08007224 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8007224:	b580      	push	{r7, lr}
 8007226:	b082      	sub	sp, #8
 8007228:	af00      	add	r7, sp, #0
 800722a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	2b00      	cmp	r3, #0
 8007230:	d101      	bne.n	8007236 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8007232:	2301      	movs	r3, #1
 8007234:	e021      	b.n	800727a <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	2224      	movs	r2, #36	; 0x24
 800723a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	681a      	ldr	r2, [r3, #0]
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	f022 0201 	bic.w	r2, r2, #1
 800724c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800724e:	6878      	ldr	r0, [r7, #4]
 8007250:	f7fc ff34 	bl	80040bc <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	2200      	movs	r2, #0
 8007258:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	2200      	movs	r2, #0
 800725e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	2200      	movs	r2, #0
 8007266:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	2200      	movs	r2, #0
 800726c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	2200      	movs	r2, #0
 8007274:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007278:	2300      	movs	r3, #0
}
 800727a:	4618      	mov	r0, r3
 800727c:	3708      	adds	r7, #8
 800727e:	46bd      	mov	sp, r7
 8007280:	bd80      	pop	{r7, pc}

08007282 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8007282:	b480      	push	{r7}
 8007284:	b083      	sub	sp, #12
 8007286:	af00      	add	r7, sp, #0
 8007288:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	695b      	ldr	r3, [r3, #20]
 8007290:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007294:	2b80      	cmp	r3, #128	; 0x80
 8007296:	d103      	bne.n	80072a0 <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	2200      	movs	r2, #0
 800729e:	611a      	str	r2, [r3, #16]
  }
}
 80072a0:	bf00      	nop
 80072a2:	370c      	adds	r7, #12
 80072a4:	46bd      	mov	sp, r7
 80072a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072aa:	4770      	bx	lr

080072ac <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80072ac:	b580      	push	{r7, lr}
 80072ae:	b088      	sub	sp, #32
 80072b0:	af02      	add	r7, sp, #8
 80072b2:	60f8      	str	r0, [r7, #12]
 80072b4:	4608      	mov	r0, r1
 80072b6:	4611      	mov	r1, r2
 80072b8:	461a      	mov	r2, r3
 80072ba:	4603      	mov	r3, r0
 80072bc:	817b      	strh	r3, [r7, #10]
 80072be:	460b      	mov	r3, r1
 80072c0:	813b      	strh	r3, [r7, #8]
 80072c2:	4613      	mov	r3, r2
 80072c4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80072c6:	f7fe fbad 	bl	8005a24 <HAL_GetTick>
 80072ca:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80072d2:	b2db      	uxtb	r3, r3
 80072d4:	2b20      	cmp	r3, #32
 80072d6:	f040 80d9 	bne.w	800748c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80072da:	697b      	ldr	r3, [r7, #20]
 80072dc:	9300      	str	r3, [sp, #0]
 80072de:	2319      	movs	r3, #25
 80072e0:	2201      	movs	r2, #1
 80072e2:	496d      	ldr	r1, [pc, #436]	; (8007498 <HAL_I2C_Mem_Write+0x1ec>)
 80072e4:	68f8      	ldr	r0, [r7, #12]
 80072e6:	f002 fa35 	bl	8009754 <I2C_WaitOnFlagUntilTimeout>
 80072ea:	4603      	mov	r3, r0
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d001      	beq.n	80072f4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80072f0:	2302      	movs	r3, #2
 80072f2:	e0cc      	b.n	800748e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80072fa:	2b01      	cmp	r3, #1
 80072fc:	d101      	bne.n	8007302 <HAL_I2C_Mem_Write+0x56>
 80072fe:	2302      	movs	r3, #2
 8007300:	e0c5      	b.n	800748e <HAL_I2C_Mem_Write+0x1e2>
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	2201      	movs	r2, #1
 8007306:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	f003 0301 	and.w	r3, r3, #1
 8007314:	2b01      	cmp	r3, #1
 8007316:	d007      	beq.n	8007328 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	681a      	ldr	r2, [r3, #0]
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	f042 0201 	orr.w	r2, r2, #1
 8007326:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	681a      	ldr	r2, [r3, #0]
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007336:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	2221      	movs	r2, #33	; 0x21
 800733c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	2240      	movs	r2, #64	; 0x40
 8007344:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	2200      	movs	r2, #0
 800734c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	6a3a      	ldr	r2, [r7, #32]
 8007352:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007358:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800735e:	b29a      	uxth	r2, r3
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	4a4d      	ldr	r2, [pc, #308]	; (800749c <HAL_I2C_Mem_Write+0x1f0>)
 8007368:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800736a:	88f8      	ldrh	r0, [r7, #6]
 800736c:	893a      	ldrh	r2, [r7, #8]
 800736e:	8979      	ldrh	r1, [r7, #10]
 8007370:	697b      	ldr	r3, [r7, #20]
 8007372:	9301      	str	r3, [sp, #4]
 8007374:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007376:	9300      	str	r3, [sp, #0]
 8007378:	4603      	mov	r3, r0
 800737a:	68f8      	ldr	r0, [r7, #12]
 800737c:	f001 ffc4 	bl	8009308 <I2C_RequestMemoryWrite>
 8007380:	4603      	mov	r3, r0
 8007382:	2b00      	cmp	r3, #0
 8007384:	d052      	beq.n	800742c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8007386:	2301      	movs	r3, #1
 8007388:	e081      	b.n	800748e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800738a:	697a      	ldr	r2, [r7, #20]
 800738c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800738e:	68f8      	ldr	r0, [r7, #12]
 8007390:	f002 fafa 	bl	8009988 <I2C_WaitOnTXEFlagUntilTimeout>
 8007394:	4603      	mov	r3, r0
 8007396:	2b00      	cmp	r3, #0
 8007398:	d00d      	beq.n	80073b6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800739e:	2b04      	cmp	r3, #4
 80073a0:	d107      	bne.n	80073b2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	681a      	ldr	r2, [r3, #0]
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80073b0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80073b2:	2301      	movs	r3, #1
 80073b4:	e06b      	b.n	800748e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073ba:	781a      	ldrb	r2, [r3, #0]
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073c6:	1c5a      	adds	r2, r3, #1
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80073d0:	3b01      	subs	r3, #1
 80073d2:	b29a      	uxth	r2, r3
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073dc:	b29b      	uxth	r3, r3
 80073de:	3b01      	subs	r3, #1
 80073e0:	b29a      	uxth	r2, r3
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	695b      	ldr	r3, [r3, #20]
 80073ec:	f003 0304 	and.w	r3, r3, #4
 80073f0:	2b04      	cmp	r3, #4
 80073f2:	d11b      	bne.n	800742c <HAL_I2C_Mem_Write+0x180>
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d017      	beq.n	800742c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007400:	781a      	ldrb	r2, [r3, #0]
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800740c:	1c5a      	adds	r2, r3, #1
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007416:	3b01      	subs	r3, #1
 8007418:	b29a      	uxth	r2, r3
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007422:	b29b      	uxth	r3, r3
 8007424:	3b01      	subs	r3, #1
 8007426:	b29a      	uxth	r2, r3
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007430:	2b00      	cmp	r3, #0
 8007432:	d1aa      	bne.n	800738a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007434:	697a      	ldr	r2, [r7, #20]
 8007436:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007438:	68f8      	ldr	r0, [r7, #12]
 800743a:	f002 faed 	bl	8009a18 <I2C_WaitOnBTFFlagUntilTimeout>
 800743e:	4603      	mov	r3, r0
 8007440:	2b00      	cmp	r3, #0
 8007442:	d00d      	beq.n	8007460 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007448:	2b04      	cmp	r3, #4
 800744a:	d107      	bne.n	800745c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	681a      	ldr	r2, [r3, #0]
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800745a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800745c:	2301      	movs	r3, #1
 800745e:	e016      	b.n	800748e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	681a      	ldr	r2, [r3, #0]
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800746e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	2220      	movs	r2, #32
 8007474:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	2200      	movs	r2, #0
 800747c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	2200      	movs	r2, #0
 8007484:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007488:	2300      	movs	r3, #0
 800748a:	e000      	b.n	800748e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800748c:	2302      	movs	r3, #2
  }
}
 800748e:	4618      	mov	r0, r3
 8007490:	3718      	adds	r7, #24
 8007492:	46bd      	mov	sp, r7
 8007494:	bd80      	pop	{r7, pc}
 8007496:	bf00      	nop
 8007498:	00100002 	.word	0x00100002
 800749c:	ffff0000 	.word	0xffff0000

080074a0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80074a0:	b580      	push	{r7, lr}
 80074a2:	b08c      	sub	sp, #48	; 0x30
 80074a4:	af02      	add	r7, sp, #8
 80074a6:	60f8      	str	r0, [r7, #12]
 80074a8:	4608      	mov	r0, r1
 80074aa:	4611      	mov	r1, r2
 80074ac:	461a      	mov	r2, r3
 80074ae:	4603      	mov	r3, r0
 80074b0:	817b      	strh	r3, [r7, #10]
 80074b2:	460b      	mov	r3, r1
 80074b4:	813b      	strh	r3, [r7, #8]
 80074b6:	4613      	mov	r3, r2
 80074b8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80074ba:	f7fe fab3 	bl	8005a24 <HAL_GetTick>
 80074be:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80074c6:	b2db      	uxtb	r3, r3
 80074c8:	2b20      	cmp	r3, #32
 80074ca:	f040 8214 	bne.w	80078f6 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80074ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074d0:	9300      	str	r3, [sp, #0]
 80074d2:	2319      	movs	r3, #25
 80074d4:	2201      	movs	r2, #1
 80074d6:	497b      	ldr	r1, [pc, #492]	; (80076c4 <HAL_I2C_Mem_Read+0x224>)
 80074d8:	68f8      	ldr	r0, [r7, #12]
 80074da:	f002 f93b 	bl	8009754 <I2C_WaitOnFlagUntilTimeout>
 80074de:	4603      	mov	r3, r0
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d001      	beq.n	80074e8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80074e4:	2302      	movs	r3, #2
 80074e6:	e207      	b.n	80078f8 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80074ee:	2b01      	cmp	r3, #1
 80074f0:	d101      	bne.n	80074f6 <HAL_I2C_Mem_Read+0x56>
 80074f2:	2302      	movs	r3, #2
 80074f4:	e200      	b.n	80078f8 <HAL_I2C_Mem_Read+0x458>
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	2201      	movs	r2, #1
 80074fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	f003 0301 	and.w	r3, r3, #1
 8007508:	2b01      	cmp	r3, #1
 800750a:	d007      	beq.n	800751c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	681a      	ldr	r2, [r3, #0]
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	f042 0201 	orr.w	r2, r2, #1
 800751a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	681a      	ldr	r2, [r3, #0]
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800752a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	2222      	movs	r2, #34	; 0x22
 8007530:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	2240      	movs	r2, #64	; 0x40
 8007538:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	2200      	movs	r2, #0
 8007540:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007546:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800754c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007552:	b29a      	uxth	r2, r3
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	4a5b      	ldr	r2, [pc, #364]	; (80076c8 <HAL_I2C_Mem_Read+0x228>)
 800755c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800755e:	88f8      	ldrh	r0, [r7, #6]
 8007560:	893a      	ldrh	r2, [r7, #8]
 8007562:	8979      	ldrh	r1, [r7, #10]
 8007564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007566:	9301      	str	r3, [sp, #4]
 8007568:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800756a:	9300      	str	r3, [sp, #0]
 800756c:	4603      	mov	r3, r0
 800756e:	68f8      	ldr	r0, [r7, #12]
 8007570:	f001 ff60 	bl	8009434 <I2C_RequestMemoryRead>
 8007574:	4603      	mov	r3, r0
 8007576:	2b00      	cmp	r3, #0
 8007578:	d001      	beq.n	800757e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800757a:	2301      	movs	r3, #1
 800757c:	e1bc      	b.n	80078f8 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007582:	2b00      	cmp	r3, #0
 8007584:	d113      	bne.n	80075ae <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007586:	2300      	movs	r3, #0
 8007588:	623b      	str	r3, [r7, #32]
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	695b      	ldr	r3, [r3, #20]
 8007590:	623b      	str	r3, [r7, #32]
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	699b      	ldr	r3, [r3, #24]
 8007598:	623b      	str	r3, [r7, #32]
 800759a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	681a      	ldr	r2, [r3, #0]
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80075aa:	601a      	str	r2, [r3, #0]
 80075ac:	e190      	b.n	80078d0 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80075b2:	2b01      	cmp	r3, #1
 80075b4:	d11b      	bne.n	80075ee <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	681a      	ldr	r2, [r3, #0]
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80075c4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80075c6:	2300      	movs	r3, #0
 80075c8:	61fb      	str	r3, [r7, #28]
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	695b      	ldr	r3, [r3, #20]
 80075d0:	61fb      	str	r3, [r7, #28]
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	699b      	ldr	r3, [r3, #24]
 80075d8:	61fb      	str	r3, [r7, #28]
 80075da:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	681a      	ldr	r2, [r3, #0]
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80075ea:	601a      	str	r2, [r3, #0]
 80075ec:	e170      	b.n	80078d0 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80075f2:	2b02      	cmp	r3, #2
 80075f4:	d11b      	bne.n	800762e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	681a      	ldr	r2, [r3, #0]
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007604:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	681a      	ldr	r2, [r3, #0]
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007614:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007616:	2300      	movs	r3, #0
 8007618:	61bb      	str	r3, [r7, #24]
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	695b      	ldr	r3, [r3, #20]
 8007620:	61bb      	str	r3, [r7, #24]
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	699b      	ldr	r3, [r3, #24]
 8007628:	61bb      	str	r3, [r7, #24]
 800762a:	69bb      	ldr	r3, [r7, #24]
 800762c:	e150      	b.n	80078d0 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800762e:	2300      	movs	r3, #0
 8007630:	617b      	str	r3, [r7, #20]
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	695b      	ldr	r3, [r3, #20]
 8007638:	617b      	str	r3, [r7, #20]
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	699b      	ldr	r3, [r3, #24]
 8007640:	617b      	str	r3, [r7, #20]
 8007642:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8007644:	e144      	b.n	80078d0 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800764a:	2b03      	cmp	r3, #3
 800764c:	f200 80f1 	bhi.w	8007832 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007654:	2b01      	cmp	r3, #1
 8007656:	d123      	bne.n	80076a0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007658:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800765a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800765c:	68f8      	ldr	r0, [r7, #12]
 800765e:	f002 fa55 	bl	8009b0c <I2C_WaitOnRXNEFlagUntilTimeout>
 8007662:	4603      	mov	r3, r0
 8007664:	2b00      	cmp	r3, #0
 8007666:	d001      	beq.n	800766c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8007668:	2301      	movs	r3, #1
 800766a:	e145      	b.n	80078f8 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	691a      	ldr	r2, [r3, #16]
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007676:	b2d2      	uxtb	r2, r2
 8007678:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800767e:	1c5a      	adds	r2, r3, #1
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007688:	3b01      	subs	r3, #1
 800768a:	b29a      	uxth	r2, r3
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007694:	b29b      	uxth	r3, r3
 8007696:	3b01      	subs	r3, #1
 8007698:	b29a      	uxth	r2, r3
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800769e:	e117      	b.n	80078d0 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80076a4:	2b02      	cmp	r3, #2
 80076a6:	d14e      	bne.n	8007746 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80076a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076aa:	9300      	str	r3, [sp, #0]
 80076ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076ae:	2200      	movs	r2, #0
 80076b0:	4906      	ldr	r1, [pc, #24]	; (80076cc <HAL_I2C_Mem_Read+0x22c>)
 80076b2:	68f8      	ldr	r0, [r7, #12]
 80076b4:	f002 f84e 	bl	8009754 <I2C_WaitOnFlagUntilTimeout>
 80076b8:	4603      	mov	r3, r0
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d008      	beq.n	80076d0 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80076be:	2301      	movs	r3, #1
 80076c0:	e11a      	b.n	80078f8 <HAL_I2C_Mem_Read+0x458>
 80076c2:	bf00      	nop
 80076c4:	00100002 	.word	0x00100002
 80076c8:	ffff0000 	.word	0xffff0000
 80076cc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	681a      	ldr	r2, [r3, #0]
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80076de:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	691a      	ldr	r2, [r3, #16]
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076ea:	b2d2      	uxtb	r2, r2
 80076ec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076f2:	1c5a      	adds	r2, r3, #1
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80076fc:	3b01      	subs	r3, #1
 80076fe:	b29a      	uxth	r2, r3
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007708:	b29b      	uxth	r3, r3
 800770a:	3b01      	subs	r3, #1
 800770c:	b29a      	uxth	r2, r3
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	691a      	ldr	r2, [r3, #16]
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800771c:	b2d2      	uxtb	r2, r2
 800771e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007724:	1c5a      	adds	r2, r3, #1
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800772e:	3b01      	subs	r3, #1
 8007730:	b29a      	uxth	r2, r3
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800773a:	b29b      	uxth	r3, r3
 800773c:	3b01      	subs	r3, #1
 800773e:	b29a      	uxth	r2, r3
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007744:	e0c4      	b.n	80078d0 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007748:	9300      	str	r3, [sp, #0]
 800774a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800774c:	2200      	movs	r2, #0
 800774e:	496c      	ldr	r1, [pc, #432]	; (8007900 <HAL_I2C_Mem_Read+0x460>)
 8007750:	68f8      	ldr	r0, [r7, #12]
 8007752:	f001 ffff 	bl	8009754 <I2C_WaitOnFlagUntilTimeout>
 8007756:	4603      	mov	r3, r0
 8007758:	2b00      	cmp	r3, #0
 800775a:	d001      	beq.n	8007760 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800775c:	2301      	movs	r3, #1
 800775e:	e0cb      	b.n	80078f8 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	681a      	ldr	r2, [r3, #0]
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800776e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	691a      	ldr	r2, [r3, #16]
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800777a:	b2d2      	uxtb	r2, r2
 800777c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007782:	1c5a      	adds	r2, r3, #1
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800778c:	3b01      	subs	r3, #1
 800778e:	b29a      	uxth	r2, r3
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007798:	b29b      	uxth	r3, r3
 800779a:	3b01      	subs	r3, #1
 800779c:	b29a      	uxth	r2, r3
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80077a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077a4:	9300      	str	r3, [sp, #0]
 80077a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077a8:	2200      	movs	r2, #0
 80077aa:	4955      	ldr	r1, [pc, #340]	; (8007900 <HAL_I2C_Mem_Read+0x460>)
 80077ac:	68f8      	ldr	r0, [r7, #12]
 80077ae:	f001 ffd1 	bl	8009754 <I2C_WaitOnFlagUntilTimeout>
 80077b2:	4603      	mov	r3, r0
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d001      	beq.n	80077bc <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80077b8:	2301      	movs	r3, #1
 80077ba:	e09d      	b.n	80078f8 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	681a      	ldr	r2, [r3, #0]
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80077ca:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	691a      	ldr	r2, [r3, #16]
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077d6:	b2d2      	uxtb	r2, r2
 80077d8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077de:	1c5a      	adds	r2, r3, #1
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80077e8:	3b01      	subs	r3, #1
 80077ea:	b29a      	uxth	r2, r3
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80077f4:	b29b      	uxth	r3, r3
 80077f6:	3b01      	subs	r3, #1
 80077f8:	b29a      	uxth	r2, r3
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	691a      	ldr	r2, [r3, #16]
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007808:	b2d2      	uxtb	r2, r2
 800780a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007810:	1c5a      	adds	r2, r3, #1
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800781a:	3b01      	subs	r3, #1
 800781c:	b29a      	uxth	r2, r3
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007826:	b29b      	uxth	r3, r3
 8007828:	3b01      	subs	r3, #1
 800782a:	b29a      	uxth	r2, r3
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007830:	e04e      	b.n	80078d0 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007832:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007834:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007836:	68f8      	ldr	r0, [r7, #12]
 8007838:	f002 f968 	bl	8009b0c <I2C_WaitOnRXNEFlagUntilTimeout>
 800783c:	4603      	mov	r3, r0
 800783e:	2b00      	cmp	r3, #0
 8007840:	d001      	beq.n	8007846 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8007842:	2301      	movs	r3, #1
 8007844:	e058      	b.n	80078f8 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	691a      	ldr	r2, [r3, #16]
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007850:	b2d2      	uxtb	r2, r2
 8007852:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007858:	1c5a      	adds	r2, r3, #1
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007862:	3b01      	subs	r3, #1
 8007864:	b29a      	uxth	r2, r3
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800786e:	b29b      	uxth	r3, r3
 8007870:	3b01      	subs	r3, #1
 8007872:	b29a      	uxth	r2, r3
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	695b      	ldr	r3, [r3, #20]
 800787e:	f003 0304 	and.w	r3, r3, #4
 8007882:	2b04      	cmp	r3, #4
 8007884:	d124      	bne.n	80078d0 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800788a:	2b03      	cmp	r3, #3
 800788c:	d107      	bne.n	800789e <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	681a      	ldr	r2, [r3, #0]
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800789c:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	691a      	ldr	r2, [r3, #16]
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078a8:	b2d2      	uxtb	r2, r2
 80078aa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078b0:	1c5a      	adds	r2, r3, #1
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80078ba:	3b01      	subs	r3, #1
 80078bc:	b29a      	uxth	r2, r3
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80078c6:	b29b      	uxth	r3, r3
 80078c8:	3b01      	subs	r3, #1
 80078ca:	b29a      	uxth	r2, r3
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	f47f aeb6 	bne.w	8007646 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	2220      	movs	r2, #32
 80078de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	2200      	movs	r2, #0
 80078e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	2200      	movs	r2, #0
 80078ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80078f2:	2300      	movs	r3, #0
 80078f4:	e000      	b.n	80078f8 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 80078f6:	2302      	movs	r3, #2
  }
}
 80078f8:	4618      	mov	r0, r3
 80078fa:	3728      	adds	r7, #40	; 0x28
 80078fc:	46bd      	mov	sp, r7
 80078fe:	bd80      	pop	{r7, pc}
 8007900:	00010004 	.word	0x00010004

08007904 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8007904:	b580      	push	{r7, lr}
 8007906:	b08a      	sub	sp, #40	; 0x28
 8007908:	af02      	add	r7, sp, #8
 800790a:	60f8      	str	r0, [r7, #12]
 800790c:	607a      	str	r2, [r7, #4]
 800790e:	603b      	str	r3, [r7, #0]
 8007910:	460b      	mov	r3, r1
 8007912:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8007914:	f7fe f886 	bl	8005a24 <HAL_GetTick>
 8007918:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 800791a:	2300      	movs	r3, #0
 800791c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007924:	b2db      	uxtb	r3, r3
 8007926:	2b20      	cmp	r3, #32
 8007928:	f040 8111 	bne.w	8007b4e <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800792c:	69fb      	ldr	r3, [r7, #28]
 800792e:	9300      	str	r3, [sp, #0]
 8007930:	2319      	movs	r3, #25
 8007932:	2201      	movs	r2, #1
 8007934:	4988      	ldr	r1, [pc, #544]	; (8007b58 <HAL_I2C_IsDeviceReady+0x254>)
 8007936:	68f8      	ldr	r0, [r7, #12]
 8007938:	f001 ff0c 	bl	8009754 <I2C_WaitOnFlagUntilTimeout>
 800793c:	4603      	mov	r3, r0
 800793e:	2b00      	cmp	r3, #0
 8007940:	d001      	beq.n	8007946 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8007942:	2302      	movs	r3, #2
 8007944:	e104      	b.n	8007b50 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800794c:	2b01      	cmp	r3, #1
 800794e:	d101      	bne.n	8007954 <HAL_I2C_IsDeviceReady+0x50>
 8007950:	2302      	movs	r3, #2
 8007952:	e0fd      	b.n	8007b50 <HAL_I2C_IsDeviceReady+0x24c>
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	2201      	movs	r2, #1
 8007958:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	f003 0301 	and.w	r3, r3, #1
 8007966:	2b01      	cmp	r3, #1
 8007968:	d007      	beq.n	800797a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	681a      	ldr	r2, [r3, #0]
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	f042 0201 	orr.w	r2, r2, #1
 8007978:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	681a      	ldr	r2, [r3, #0]
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007988:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	2224      	movs	r2, #36	; 0x24
 800798e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	2200      	movs	r2, #0
 8007996:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	4a70      	ldr	r2, [pc, #448]	; (8007b5c <HAL_I2C_IsDeviceReady+0x258>)
 800799c:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	681a      	ldr	r2, [r3, #0]
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80079ac:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80079ae:	69fb      	ldr	r3, [r7, #28]
 80079b0:	9300      	str	r3, [sp, #0]
 80079b2:	683b      	ldr	r3, [r7, #0]
 80079b4:	2200      	movs	r2, #0
 80079b6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80079ba:	68f8      	ldr	r0, [r7, #12]
 80079bc:	f001 feca 	bl	8009754 <I2C_WaitOnFlagUntilTimeout>
 80079c0:	4603      	mov	r3, r0
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d00d      	beq.n	80079e2 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80079d4:	d103      	bne.n	80079de <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80079dc:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80079de:	2303      	movs	r3, #3
 80079e0:	e0b6      	b.n	8007b50 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80079e2:	897b      	ldrh	r3, [r7, #10]
 80079e4:	b2db      	uxtb	r3, r3
 80079e6:	461a      	mov	r2, r3
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80079f0:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80079f2:	f7fe f817 	bl	8005a24 <HAL_GetTick>
 80079f6:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	695b      	ldr	r3, [r3, #20]
 80079fe:	f003 0302 	and.w	r3, r3, #2
 8007a02:	2b02      	cmp	r3, #2
 8007a04:	bf0c      	ite	eq
 8007a06:	2301      	moveq	r3, #1
 8007a08:	2300      	movne	r3, #0
 8007a0a:	b2db      	uxtb	r3, r3
 8007a0c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	695b      	ldr	r3, [r3, #20]
 8007a14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007a18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007a1c:	bf0c      	ite	eq
 8007a1e:	2301      	moveq	r3, #1
 8007a20:	2300      	movne	r3, #0
 8007a22:	b2db      	uxtb	r3, r3
 8007a24:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8007a26:	e025      	b.n	8007a74 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007a28:	f7fd fffc 	bl	8005a24 <HAL_GetTick>
 8007a2c:	4602      	mov	r2, r0
 8007a2e:	69fb      	ldr	r3, [r7, #28]
 8007a30:	1ad3      	subs	r3, r2, r3
 8007a32:	683a      	ldr	r2, [r7, #0]
 8007a34:	429a      	cmp	r2, r3
 8007a36:	d302      	bcc.n	8007a3e <HAL_I2C_IsDeviceReady+0x13a>
 8007a38:	683b      	ldr	r3, [r7, #0]
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d103      	bne.n	8007a46 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	22a0      	movs	r2, #160	; 0xa0
 8007a42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	695b      	ldr	r3, [r3, #20]
 8007a4c:	f003 0302 	and.w	r3, r3, #2
 8007a50:	2b02      	cmp	r3, #2
 8007a52:	bf0c      	ite	eq
 8007a54:	2301      	moveq	r3, #1
 8007a56:	2300      	movne	r3, #0
 8007a58:	b2db      	uxtb	r3, r3
 8007a5a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	695b      	ldr	r3, [r3, #20]
 8007a62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007a66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007a6a:	bf0c      	ite	eq
 8007a6c:	2301      	moveq	r3, #1
 8007a6e:	2300      	movne	r3, #0
 8007a70:	b2db      	uxtb	r3, r3
 8007a72:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a7a:	b2db      	uxtb	r3, r3
 8007a7c:	2ba0      	cmp	r3, #160	; 0xa0
 8007a7e:	d005      	beq.n	8007a8c <HAL_I2C_IsDeviceReady+0x188>
 8007a80:	7dfb      	ldrb	r3, [r7, #23]
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d102      	bne.n	8007a8c <HAL_I2C_IsDeviceReady+0x188>
 8007a86:	7dbb      	ldrb	r3, [r7, #22]
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d0cd      	beq.n	8007a28 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	2220      	movs	r2, #32
 8007a90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	695b      	ldr	r3, [r3, #20]
 8007a9a:	f003 0302 	and.w	r3, r3, #2
 8007a9e:	2b02      	cmp	r3, #2
 8007aa0:	d129      	bne.n	8007af6 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	681a      	ldr	r2, [r3, #0]
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007ab0:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007ab2:	2300      	movs	r3, #0
 8007ab4:	613b      	str	r3, [r7, #16]
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	695b      	ldr	r3, [r3, #20]
 8007abc:	613b      	str	r3, [r7, #16]
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	699b      	ldr	r3, [r3, #24]
 8007ac4:	613b      	str	r3, [r7, #16]
 8007ac6:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007ac8:	69fb      	ldr	r3, [r7, #28]
 8007aca:	9300      	str	r3, [sp, #0]
 8007acc:	2319      	movs	r3, #25
 8007ace:	2201      	movs	r2, #1
 8007ad0:	4921      	ldr	r1, [pc, #132]	; (8007b58 <HAL_I2C_IsDeviceReady+0x254>)
 8007ad2:	68f8      	ldr	r0, [r7, #12]
 8007ad4:	f001 fe3e 	bl	8009754 <I2C_WaitOnFlagUntilTimeout>
 8007ad8:	4603      	mov	r3, r0
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d001      	beq.n	8007ae2 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8007ade:	2301      	movs	r3, #1
 8007ae0:	e036      	b.n	8007b50 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	2220      	movs	r2, #32
 8007ae6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	2200      	movs	r2, #0
 8007aee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8007af2:	2300      	movs	r3, #0
 8007af4:	e02c      	b.n	8007b50 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	681a      	ldr	r2, [r3, #0]
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007b04:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007b0e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007b10:	69fb      	ldr	r3, [r7, #28]
 8007b12:	9300      	str	r3, [sp, #0]
 8007b14:	2319      	movs	r3, #25
 8007b16:	2201      	movs	r2, #1
 8007b18:	490f      	ldr	r1, [pc, #60]	; (8007b58 <HAL_I2C_IsDeviceReady+0x254>)
 8007b1a:	68f8      	ldr	r0, [r7, #12]
 8007b1c:	f001 fe1a 	bl	8009754 <I2C_WaitOnFlagUntilTimeout>
 8007b20:	4603      	mov	r3, r0
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d001      	beq.n	8007b2a <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8007b26:	2301      	movs	r3, #1
 8007b28:	e012      	b.n	8007b50 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8007b2a:	69bb      	ldr	r3, [r7, #24]
 8007b2c:	3301      	adds	r3, #1
 8007b2e:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8007b30:	69ba      	ldr	r2, [r7, #24]
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	429a      	cmp	r2, r3
 8007b36:	f4ff af32 	bcc.w	800799e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	2220      	movs	r2, #32
 8007b3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	2200      	movs	r2, #0
 8007b46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8007b4a:	2301      	movs	r3, #1
 8007b4c:	e000      	b.n	8007b50 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8007b4e:	2302      	movs	r3, #2
  }
}
 8007b50:	4618      	mov	r0, r3
 8007b52:	3720      	adds	r7, #32
 8007b54:	46bd      	mov	sp, r7
 8007b56:	bd80      	pop	{r7, pc}
 8007b58:	00100002 	.word	0x00100002
 8007b5c:	ffff0000 	.word	0xffff0000

08007b60 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8007b60:	b580      	push	{r7, lr}
 8007b62:	b088      	sub	sp, #32
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8007b68:	2300      	movs	r3, #0
 8007b6a:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	685b      	ldr	r3, [r3, #4]
 8007b72:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b78:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007b80:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b88:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8007b8a:	7bfb      	ldrb	r3, [r7, #15]
 8007b8c:	2b10      	cmp	r3, #16
 8007b8e:	d003      	beq.n	8007b98 <HAL_I2C_EV_IRQHandler+0x38>
 8007b90:	7bfb      	ldrb	r3, [r7, #15]
 8007b92:	2b40      	cmp	r3, #64	; 0x40
 8007b94:	f040 80b1 	bne.w	8007cfa <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	699b      	ldr	r3, [r3, #24]
 8007b9e:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	695b      	ldr	r3, [r3, #20]
 8007ba6:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8007ba8:	69fb      	ldr	r3, [r7, #28]
 8007baa:	f003 0301 	and.w	r3, r3, #1
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d10d      	bne.n	8007bce <HAL_I2C_EV_IRQHandler+0x6e>
 8007bb2:	693b      	ldr	r3, [r7, #16]
 8007bb4:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8007bb8:	d003      	beq.n	8007bc2 <HAL_I2C_EV_IRQHandler+0x62>
 8007bba:	693b      	ldr	r3, [r7, #16]
 8007bbc:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8007bc0:	d101      	bne.n	8007bc6 <HAL_I2C_EV_IRQHandler+0x66>
 8007bc2:	2301      	movs	r3, #1
 8007bc4:	e000      	b.n	8007bc8 <HAL_I2C_EV_IRQHandler+0x68>
 8007bc6:	2300      	movs	r3, #0
 8007bc8:	2b01      	cmp	r3, #1
 8007bca:	f000 8114 	beq.w	8007df6 <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007bce:	69fb      	ldr	r3, [r7, #28]
 8007bd0:	f003 0301 	and.w	r3, r3, #1
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d00b      	beq.n	8007bf0 <HAL_I2C_EV_IRQHandler+0x90>
 8007bd8:	697b      	ldr	r3, [r7, #20]
 8007bda:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d006      	beq.n	8007bf0 <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8007be2:	6878      	ldr	r0, [r7, #4]
 8007be4:	f002 f81e 	bl	8009c24 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8007be8:	6878      	ldr	r0, [r7, #4]
 8007bea:	f000 fd70 	bl	80086ce <I2C_Master_SB>
 8007bee:	e083      	b.n	8007cf8 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007bf0:	69fb      	ldr	r3, [r7, #28]
 8007bf2:	f003 0308 	and.w	r3, r3, #8
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d008      	beq.n	8007c0c <HAL_I2C_EV_IRQHandler+0xac>
 8007bfa:	697b      	ldr	r3, [r7, #20]
 8007bfc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d003      	beq.n	8007c0c <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 8007c04:	6878      	ldr	r0, [r7, #4]
 8007c06:	f000 fde8 	bl	80087da <I2C_Master_ADD10>
 8007c0a:	e075      	b.n	8007cf8 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007c0c:	69fb      	ldr	r3, [r7, #28]
 8007c0e:	f003 0302 	and.w	r3, r3, #2
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d008      	beq.n	8007c28 <HAL_I2C_EV_IRQHandler+0xc8>
 8007c16:	697b      	ldr	r3, [r7, #20]
 8007c18:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d003      	beq.n	8007c28 <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 8007c20:	6878      	ldr	r0, [r7, #4]
 8007c22:	f000 fe04 	bl	800882e <I2C_Master_ADDR>
 8007c26:	e067      	b.n	8007cf8 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8007c28:	69bb      	ldr	r3, [r7, #24]
 8007c2a:	f003 0304 	and.w	r3, r3, #4
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d036      	beq.n	8007ca0 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	685b      	ldr	r3, [r3, #4]
 8007c38:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007c3c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007c40:	f000 80db 	beq.w	8007dfa <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007c44:	69fb      	ldr	r3, [r7, #28]
 8007c46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d00d      	beq.n	8007c6a <HAL_I2C_EV_IRQHandler+0x10a>
 8007c4e:	697b      	ldr	r3, [r7, #20]
 8007c50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d008      	beq.n	8007c6a <HAL_I2C_EV_IRQHandler+0x10a>
 8007c58:	69fb      	ldr	r3, [r7, #28]
 8007c5a:	f003 0304 	and.w	r3, r3, #4
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d103      	bne.n	8007c6a <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8007c62:	6878      	ldr	r0, [r7, #4]
 8007c64:	f000 f9cc 	bl	8008000 <I2C_MasterTransmit_TXE>
 8007c68:	e046      	b.n	8007cf8 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007c6a:	69fb      	ldr	r3, [r7, #28]
 8007c6c:	f003 0304 	and.w	r3, r3, #4
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	f000 80c2 	beq.w	8007dfa <HAL_I2C_EV_IRQHandler+0x29a>
 8007c76:	697b      	ldr	r3, [r7, #20]
 8007c78:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	f000 80bc 	beq.w	8007dfa <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8007c82:	7bbb      	ldrb	r3, [r7, #14]
 8007c84:	2b21      	cmp	r3, #33	; 0x21
 8007c86:	d103      	bne.n	8007c90 <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8007c88:	6878      	ldr	r0, [r7, #4]
 8007c8a:	f000 fa55 	bl	8008138 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007c8e:	e0b4      	b.n	8007dfa <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8007c90:	7bfb      	ldrb	r3, [r7, #15]
 8007c92:	2b40      	cmp	r3, #64	; 0x40
 8007c94:	f040 80b1 	bne.w	8007dfa <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8007c98:	6878      	ldr	r0, [r7, #4]
 8007c9a:	f000 fac3 	bl	8008224 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007c9e:	e0ac      	b.n	8007dfa <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	685b      	ldr	r3, [r3, #4]
 8007ca6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007caa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007cae:	f000 80a4 	beq.w	8007dfa <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007cb2:	69fb      	ldr	r3, [r7, #28]
 8007cb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d00d      	beq.n	8007cd8 <HAL_I2C_EV_IRQHandler+0x178>
 8007cbc:	697b      	ldr	r3, [r7, #20]
 8007cbe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d008      	beq.n	8007cd8 <HAL_I2C_EV_IRQHandler+0x178>
 8007cc6:	69fb      	ldr	r3, [r7, #28]
 8007cc8:	f003 0304 	and.w	r3, r3, #4
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d103      	bne.n	8007cd8 <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8007cd0:	6878      	ldr	r0, [r7, #4]
 8007cd2:	f000 fb3f 	bl	8008354 <I2C_MasterReceive_RXNE>
 8007cd6:	e00f      	b.n	8007cf8 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007cd8:	69fb      	ldr	r3, [r7, #28]
 8007cda:	f003 0304 	and.w	r3, r3, #4
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	f000 808b 	beq.w	8007dfa <HAL_I2C_EV_IRQHandler+0x29a>
 8007ce4:	697b      	ldr	r3, [r7, #20]
 8007ce6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	f000 8085 	beq.w	8007dfa <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 8007cf0:	6878      	ldr	r0, [r7, #4]
 8007cf2:	f000 fbf7 	bl	80084e4 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007cf6:	e080      	b.n	8007dfa <HAL_I2C_EV_IRQHandler+0x29a>
 8007cf8:	e07f      	b.n	8007dfa <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d004      	beq.n	8007d0c <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	695b      	ldr	r3, [r3, #20]
 8007d08:	61fb      	str	r3, [r7, #28]
 8007d0a:	e007      	b.n	8007d1c <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	699b      	ldr	r3, [r3, #24]
 8007d12:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	695b      	ldr	r3, [r3, #20]
 8007d1a:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007d1c:	69fb      	ldr	r3, [r7, #28]
 8007d1e:	f003 0302 	and.w	r3, r3, #2
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d011      	beq.n	8007d4a <HAL_I2C_EV_IRQHandler+0x1ea>
 8007d26:	697b      	ldr	r3, [r7, #20]
 8007d28:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d00c      	beq.n	8007d4a <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d003      	beq.n	8007d40 <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	699b      	ldr	r3, [r3, #24]
 8007d3e:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8007d40:	69b9      	ldr	r1, [r7, #24]
 8007d42:	6878      	ldr	r0, [r7, #4]
 8007d44:	f000 ffc2 	bl	8008ccc <I2C_Slave_ADDR>
 8007d48:	e05a      	b.n	8007e00 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007d4a:	69fb      	ldr	r3, [r7, #28]
 8007d4c:	f003 0310 	and.w	r3, r3, #16
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d008      	beq.n	8007d66 <HAL_I2C_EV_IRQHandler+0x206>
 8007d54:	697b      	ldr	r3, [r7, #20]
 8007d56:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d003      	beq.n	8007d66 <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 8007d5e:	6878      	ldr	r0, [r7, #4]
 8007d60:	f000 fffc 	bl	8008d5c <I2C_Slave_STOPF>
 8007d64:	e04c      	b.n	8007e00 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8007d66:	7bbb      	ldrb	r3, [r7, #14]
 8007d68:	2b21      	cmp	r3, #33	; 0x21
 8007d6a:	d002      	beq.n	8007d72 <HAL_I2C_EV_IRQHandler+0x212>
 8007d6c:	7bbb      	ldrb	r3, [r7, #14]
 8007d6e:	2b29      	cmp	r3, #41	; 0x29
 8007d70:	d120      	bne.n	8007db4 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007d72:	69fb      	ldr	r3, [r7, #28]
 8007d74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d00d      	beq.n	8007d98 <HAL_I2C_EV_IRQHandler+0x238>
 8007d7c:	697b      	ldr	r3, [r7, #20]
 8007d7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d008      	beq.n	8007d98 <HAL_I2C_EV_IRQHandler+0x238>
 8007d86:	69fb      	ldr	r3, [r7, #28]
 8007d88:	f003 0304 	and.w	r3, r3, #4
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d103      	bne.n	8007d98 <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8007d90:	6878      	ldr	r0, [r7, #4]
 8007d92:	f000 fedd 	bl	8008b50 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007d96:	e032      	b.n	8007dfe <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007d98:	69fb      	ldr	r3, [r7, #28]
 8007d9a:	f003 0304 	and.w	r3, r3, #4
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d02d      	beq.n	8007dfe <HAL_I2C_EV_IRQHandler+0x29e>
 8007da2:	697b      	ldr	r3, [r7, #20]
 8007da4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d028      	beq.n	8007dfe <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8007dac:	6878      	ldr	r0, [r7, #4]
 8007dae:	f000 ff0c 	bl	8008bca <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007db2:	e024      	b.n	8007dfe <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007db4:	69fb      	ldr	r3, [r7, #28]
 8007db6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d00d      	beq.n	8007dda <HAL_I2C_EV_IRQHandler+0x27a>
 8007dbe:	697b      	ldr	r3, [r7, #20]
 8007dc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d008      	beq.n	8007dda <HAL_I2C_EV_IRQHandler+0x27a>
 8007dc8:	69fb      	ldr	r3, [r7, #28]
 8007dca:	f003 0304 	and.w	r3, r3, #4
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d103      	bne.n	8007dda <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8007dd2:	6878      	ldr	r0, [r7, #4]
 8007dd4:	f000 ff1a 	bl	8008c0c <I2C_SlaveReceive_RXNE>
 8007dd8:	e012      	b.n	8007e00 <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007dda:	69fb      	ldr	r3, [r7, #28]
 8007ddc:	f003 0304 	and.w	r3, r3, #4
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d00d      	beq.n	8007e00 <HAL_I2C_EV_IRQHandler+0x2a0>
 8007de4:	697b      	ldr	r3, [r7, #20]
 8007de6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d008      	beq.n	8007e00 <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8007dee:	6878      	ldr	r0, [r7, #4]
 8007df0:	f000 ff4a 	bl	8008c88 <I2C_SlaveReceive_BTF>
 8007df4:	e004      	b.n	8007e00 <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 8007df6:	bf00      	nop
 8007df8:	e002      	b.n	8007e00 <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007dfa:	bf00      	nop
 8007dfc:	e000      	b.n	8007e00 <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007dfe:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8007e00:	3720      	adds	r7, #32
 8007e02:	46bd      	mov	sp, r7
 8007e04:	bd80      	pop	{r7, pc}

08007e06 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8007e06:	b580      	push	{r7, lr}
 8007e08:	b08a      	sub	sp, #40	; 0x28
 8007e0a:	af00      	add	r7, sp, #0
 8007e0c:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	695b      	ldr	r3, [r3, #20]
 8007e14:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	685b      	ldr	r3, [r3, #4]
 8007e1c:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8007e1e:	2300      	movs	r3, #0
 8007e20:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007e28:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8007e2a:	6a3b      	ldr	r3, [r7, #32]
 8007e2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d00d      	beq.n	8007e50 <HAL_I2C_ER_IRQHandler+0x4a>
 8007e34:	69fb      	ldr	r3, [r7, #28]
 8007e36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d008      	beq.n	8007e50 <HAL_I2C_ER_IRQHandler+0x4a>
  {
    error |= HAL_I2C_ERROR_BERR;
 8007e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e40:	f043 0301 	orr.w	r3, r3, #1
 8007e44:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007e4e:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8007e50:	6a3b      	ldr	r3, [r7, #32]
 8007e52:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d00d      	beq.n	8007e76 <HAL_I2C_ER_IRQHandler+0x70>
 8007e5a:	69fb      	ldr	r3, [r7, #28]
 8007e5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d008      	beq.n	8007e76 <HAL_I2C_ER_IRQHandler+0x70>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8007e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e66:	f043 0302 	orr.w	r3, r3, #2
 8007e6a:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8007e74:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8007e76:	6a3b      	ldr	r3, [r7, #32]
 8007e78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d03e      	beq.n	8007efe <HAL_I2C_ER_IRQHandler+0xf8>
 8007e80:	69fb      	ldr	r3, [r7, #28]
 8007e82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d039      	beq.n	8007efe <HAL_I2C_ER_IRQHandler+0xf8>
  {
    tmp1 = CurrentMode;
 8007e8a:	7efb      	ldrb	r3, [r7, #27]
 8007e8c:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e92:	b29b      	uxth	r3, r3
 8007e94:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e9c:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ea2:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8007ea4:	7ebb      	ldrb	r3, [r7, #26]
 8007ea6:	2b20      	cmp	r3, #32
 8007ea8:	d112      	bne.n	8007ed0 <HAL_I2C_ER_IRQHandler+0xca>
 8007eaa:	697b      	ldr	r3, [r7, #20]
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d10f      	bne.n	8007ed0 <HAL_I2C_ER_IRQHandler+0xca>
 8007eb0:	7cfb      	ldrb	r3, [r7, #19]
 8007eb2:	2b21      	cmp	r3, #33	; 0x21
 8007eb4:	d008      	beq.n	8007ec8 <HAL_I2C_ER_IRQHandler+0xc2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8007eb6:	7cfb      	ldrb	r3, [r7, #19]
 8007eb8:	2b29      	cmp	r3, #41	; 0x29
 8007eba:	d005      	beq.n	8007ec8 <HAL_I2C_ER_IRQHandler+0xc2>
 8007ebc:	7cfb      	ldrb	r3, [r7, #19]
 8007ebe:	2b28      	cmp	r3, #40	; 0x28
 8007ec0:	d106      	bne.n	8007ed0 <HAL_I2C_ER_IRQHandler+0xca>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	2b21      	cmp	r3, #33	; 0x21
 8007ec6:	d103      	bne.n	8007ed0 <HAL_I2C_ER_IRQHandler+0xca>
    {
      I2C_Slave_AF(hi2c);
 8007ec8:	6878      	ldr	r0, [r7, #4]
 8007eca:	f001 f877 	bl	8008fbc <I2C_Slave_AF>
 8007ece:	e016      	b.n	8007efe <HAL_I2C_ER_IRQHandler+0xf8>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007ed8:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8007eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007edc:	f043 0304 	orr.w	r3, r3, #4
 8007ee0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8007ee2:	7efb      	ldrb	r3, [r7, #27]
 8007ee4:	2b10      	cmp	r3, #16
 8007ee6:	d002      	beq.n	8007eee <HAL_I2C_ER_IRQHandler+0xe8>
 8007ee8:	7efb      	ldrb	r3, [r7, #27]
 8007eea:	2b40      	cmp	r3, #64	; 0x40
 8007eec:	d107      	bne.n	8007efe <HAL_I2C_ER_IRQHandler+0xf8>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	681a      	ldr	r2, [r3, #0]
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007efc:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8007efe:	6a3b      	ldr	r3, [r7, #32]
 8007f00:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d00d      	beq.n	8007f24 <HAL_I2C_ER_IRQHandler+0x11e>
 8007f08:	69fb      	ldr	r3, [r7, #28]
 8007f0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d008      	beq.n	8007f24 <HAL_I2C_ER_IRQHandler+0x11e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8007f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f14:	f043 0308 	orr.w	r3, r3, #8
 8007f18:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8007f22:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8007f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d008      	beq.n	8007f3c <HAL_I2C_ER_IRQHandler+0x136>
  {
    hi2c->ErrorCode |= error;
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f30:	431a      	orrs	r2, r3
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8007f36:	6878      	ldr	r0, [r7, #4]
 8007f38:	f001 f8b4 	bl	80090a4 <I2C_ITError>
  }
}
 8007f3c:	bf00      	nop
 8007f3e:	3728      	adds	r7, #40	; 0x28
 8007f40:	46bd      	mov	sp, r7
 8007f42:	bd80      	pop	{r7, pc}

08007f44 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007f44:	b480      	push	{r7}
 8007f46:	b083      	sub	sp, #12
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8007f4c:	bf00      	nop
 8007f4e:	370c      	adds	r7, #12
 8007f50:	46bd      	mov	sp, r7
 8007f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f56:	4770      	bx	lr

08007f58 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007f58:	b480      	push	{r7}
 8007f5a:	b083      	sub	sp, #12
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8007f60:	bf00      	nop
 8007f62:	370c      	adds	r7, #12
 8007f64:	46bd      	mov	sp, r7
 8007f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f6a:	4770      	bx	lr

08007f6c <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007f6c:	b480      	push	{r7}
 8007f6e:	b083      	sub	sp, #12
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8007f74:	bf00      	nop
 8007f76:	370c      	adds	r7, #12
 8007f78:	46bd      	mov	sp, r7
 8007f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f7e:	4770      	bx	lr

08007f80 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007f80:	b480      	push	{r7}
 8007f82:	b083      	sub	sp, #12
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8007f88:	bf00      	nop
 8007f8a:	370c      	adds	r7, #12
 8007f8c:	46bd      	mov	sp, r7
 8007f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f92:	4770      	bx	lr

08007f94 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8007f94:	b480      	push	{r7}
 8007f96:	b083      	sub	sp, #12
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	6078      	str	r0, [r7, #4]
 8007f9c:	460b      	mov	r3, r1
 8007f9e:	70fb      	strb	r3, [r7, #3]
 8007fa0:	4613      	mov	r3, r2
 8007fa2:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8007fa4:	bf00      	nop
 8007fa6:	370c      	adds	r7, #12
 8007fa8:	46bd      	mov	sp, r7
 8007faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fae:	4770      	bx	lr

08007fb0 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007fb0:	b480      	push	{r7}
 8007fb2:	b083      	sub	sp, #12
 8007fb4:	af00      	add	r7, sp, #0
 8007fb6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8007fb8:	bf00      	nop
 8007fba:	370c      	adds	r7, #12
 8007fbc:	46bd      	mov	sp, r7
 8007fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc2:	4770      	bx	lr

08007fc4 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007fc4:	b480      	push	{r7}
 8007fc6:	b083      	sub	sp, #12
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8007fcc:	bf00      	nop
 8007fce:	370c      	adds	r7, #12
 8007fd0:	46bd      	mov	sp, r7
 8007fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd6:	4770      	bx	lr

08007fd8 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007fd8:	b480      	push	{r7}
 8007fda:	b083      	sub	sp, #12
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8007fe0:	bf00      	nop
 8007fe2:	370c      	adds	r7, #12
 8007fe4:	46bd      	mov	sp, r7
 8007fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fea:	4770      	bx	lr

08007fec <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007fec:	b480      	push	{r7}
 8007fee:	b083      	sub	sp, #12
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8007ff4:	bf00      	nop
 8007ff6:	370c      	adds	r7, #12
 8007ff8:	46bd      	mov	sp, r7
 8007ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ffe:	4770      	bx	lr

08008000 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8008000:	b580      	push	{r7, lr}
 8008002:	b084      	sub	sp, #16
 8008004:	af00      	add	r7, sp, #0
 8008006:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800800e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008016:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800801c:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008022:	2b00      	cmp	r3, #0
 8008024:	d150      	bne.n	80080c8 <I2C_MasterTransmit_TXE+0xc8>
 8008026:	7bfb      	ldrb	r3, [r7, #15]
 8008028:	2b21      	cmp	r3, #33	; 0x21
 800802a:	d14d      	bne.n	80080c8 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800802c:	68bb      	ldr	r3, [r7, #8]
 800802e:	2b08      	cmp	r3, #8
 8008030:	d01d      	beq.n	800806e <I2C_MasterTransmit_TXE+0x6e>
 8008032:	68bb      	ldr	r3, [r7, #8]
 8008034:	2b20      	cmp	r3, #32
 8008036:	d01a      	beq.n	800806e <I2C_MasterTransmit_TXE+0x6e>
 8008038:	68bb      	ldr	r3, [r7, #8]
 800803a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800803e:	d016      	beq.n	800806e <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	685a      	ldr	r2, [r3, #4]
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800804e:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	2211      	movs	r2, #17
 8008054:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	2200      	movs	r2, #0
 800805a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	2220      	movs	r2, #32
 8008062:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8008066:	6878      	ldr	r0, [r7, #4]
 8008068:	f7ff ff6c 	bl	8007f44 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800806c:	e060      	b.n	8008130 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	685a      	ldr	r2, [r3, #4]
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800807c:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	681a      	ldr	r2, [r3, #0]
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800808c:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	2200      	movs	r2, #0
 8008092:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	2220      	movs	r2, #32
 8008098:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80080a2:	b2db      	uxtb	r3, r3
 80080a4:	2b40      	cmp	r3, #64	; 0x40
 80080a6:	d107      	bne.n	80080b8 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	2200      	movs	r2, #0
 80080ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80080b0:	6878      	ldr	r0, [r7, #4]
 80080b2:	f7ff ff87 	bl	8007fc4 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80080b6:	e03b      	b.n	8008130 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	2200      	movs	r2, #0
 80080bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80080c0:	6878      	ldr	r0, [r7, #4]
 80080c2:	f7ff ff3f 	bl	8007f44 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80080c6:	e033      	b.n	8008130 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80080c8:	7bfb      	ldrb	r3, [r7, #15]
 80080ca:	2b21      	cmp	r3, #33	; 0x21
 80080cc:	d005      	beq.n	80080da <I2C_MasterTransmit_TXE+0xda>
 80080ce:	7bbb      	ldrb	r3, [r7, #14]
 80080d0:	2b40      	cmp	r3, #64	; 0x40
 80080d2:	d12d      	bne.n	8008130 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80080d4:	7bfb      	ldrb	r3, [r7, #15]
 80080d6:	2b22      	cmp	r3, #34	; 0x22
 80080d8:	d12a      	bne.n	8008130 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80080de:	b29b      	uxth	r3, r3
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d108      	bne.n	80080f6 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	685a      	ldr	r2, [r3, #4]
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80080f2:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80080f4:	e01c      	b.n	8008130 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80080fc:	b2db      	uxtb	r3, r3
 80080fe:	2b40      	cmp	r3, #64	; 0x40
 8008100:	d103      	bne.n	800810a <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8008102:	6878      	ldr	r0, [r7, #4]
 8008104:	f000 f88e 	bl	8008224 <I2C_MemoryTransmit_TXE_BTF>
}
 8008108:	e012      	b.n	8008130 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800810e:	781a      	ldrb	r2, [r3, #0]
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800811a:	1c5a      	adds	r2, r3, #1
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008124:	b29b      	uxth	r3, r3
 8008126:	3b01      	subs	r3, #1
 8008128:	b29a      	uxth	r2, r3
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800812e:	e7ff      	b.n	8008130 <I2C_MasterTransmit_TXE+0x130>
 8008130:	bf00      	nop
 8008132:	3710      	adds	r7, #16
 8008134:	46bd      	mov	sp, r7
 8008136:	bd80      	pop	{r7, pc}

08008138 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8008138:	b580      	push	{r7, lr}
 800813a:	b084      	sub	sp, #16
 800813c:	af00      	add	r7, sp, #0
 800813e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008144:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800814c:	b2db      	uxtb	r3, r3
 800814e:	2b21      	cmp	r3, #33	; 0x21
 8008150:	d164      	bne.n	800821c <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008156:	b29b      	uxth	r3, r3
 8008158:	2b00      	cmp	r3, #0
 800815a:	d012      	beq.n	8008182 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008160:	781a      	ldrb	r2, [r3, #0]
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800816c:	1c5a      	adds	r2, r3, #1
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008176:	b29b      	uxth	r3, r3
 8008178:	3b01      	subs	r3, #1
 800817a:	b29a      	uxth	r2, r3
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8008180:	e04c      	b.n	800821c <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	2b08      	cmp	r3, #8
 8008186:	d01d      	beq.n	80081c4 <I2C_MasterTransmit_BTF+0x8c>
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	2b20      	cmp	r3, #32
 800818c:	d01a      	beq.n	80081c4 <I2C_MasterTransmit_BTF+0x8c>
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008194:	d016      	beq.n	80081c4 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	685a      	ldr	r2, [r3, #4]
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80081a4:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	2211      	movs	r2, #17
 80081aa:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	2200      	movs	r2, #0
 80081b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	2220      	movs	r2, #32
 80081b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80081bc:	6878      	ldr	r0, [r7, #4]
 80081be:	f7ff fec1 	bl	8007f44 <HAL_I2C_MasterTxCpltCallback>
}
 80081c2:	e02b      	b.n	800821c <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	685a      	ldr	r2, [r3, #4]
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80081d2:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	681a      	ldr	r2, [r3, #0]
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80081e2:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	2200      	movs	r2, #0
 80081e8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	2220      	movs	r2, #32
 80081ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80081f8:	b2db      	uxtb	r3, r3
 80081fa:	2b40      	cmp	r3, #64	; 0x40
 80081fc:	d107      	bne.n	800820e <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	2200      	movs	r2, #0
 8008202:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8008206:	6878      	ldr	r0, [r7, #4]
 8008208:	f7ff fedc 	bl	8007fc4 <HAL_I2C_MemTxCpltCallback>
}
 800820c:	e006      	b.n	800821c <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	2200      	movs	r2, #0
 8008212:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8008216:	6878      	ldr	r0, [r7, #4]
 8008218:	f7ff fe94 	bl	8007f44 <HAL_I2C_MasterTxCpltCallback>
}
 800821c:	bf00      	nop
 800821e:	3710      	adds	r7, #16
 8008220:	46bd      	mov	sp, r7
 8008222:	bd80      	pop	{r7, pc}

08008224 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8008224:	b580      	push	{r7, lr}
 8008226:	b084      	sub	sp, #16
 8008228:	af00      	add	r7, sp, #0
 800822a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008232:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008238:	2b00      	cmp	r3, #0
 800823a:	d11d      	bne.n	8008278 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008240:	2b01      	cmp	r3, #1
 8008242:	d10b      	bne.n	800825c <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008248:	b2da      	uxtb	r2, r3
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008254:	1c9a      	adds	r2, r3, #2
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 800825a:	e077      	b.n	800834c <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008260:	b29b      	uxth	r3, r3
 8008262:	121b      	asrs	r3, r3, #8
 8008264:	b2da      	uxtb	r2, r3
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008270:	1c5a      	adds	r2, r3, #1
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	651a      	str	r2, [r3, #80]	; 0x50
}
 8008276:	e069      	b.n	800834c <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800827c:	2b01      	cmp	r3, #1
 800827e:	d10b      	bne.n	8008298 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008284:	b2da      	uxtb	r2, r3
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008290:	1c5a      	adds	r2, r3, #1
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	651a      	str	r2, [r3, #80]	; 0x50
}
 8008296:	e059      	b.n	800834c <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800829c:	2b02      	cmp	r3, #2
 800829e:	d152      	bne.n	8008346 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80082a0:	7bfb      	ldrb	r3, [r7, #15]
 80082a2:	2b22      	cmp	r3, #34	; 0x22
 80082a4:	d10d      	bne.n	80082c2 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	681a      	ldr	r2, [r3, #0]
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80082b4:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80082ba:	1c5a      	adds	r2, r3, #1
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	651a      	str	r2, [r3, #80]	; 0x50
}
 80082c0:	e044      	b.n	800834c <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80082c6:	b29b      	uxth	r3, r3
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d015      	beq.n	80082f8 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80082cc:	7bfb      	ldrb	r3, [r7, #15]
 80082ce:	2b21      	cmp	r3, #33	; 0x21
 80082d0:	d112      	bne.n	80082f8 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082d6:	781a      	ldrb	r2, [r3, #0]
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082e2:	1c5a      	adds	r2, r3, #1
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80082ec:	b29b      	uxth	r3, r3
 80082ee:	3b01      	subs	r3, #1
 80082f0:	b29a      	uxth	r2, r3
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80082f6:	e029      	b.n	800834c <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80082fc:	b29b      	uxth	r3, r3
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d124      	bne.n	800834c <I2C_MemoryTransmit_TXE_BTF+0x128>
 8008302:	7bfb      	ldrb	r3, [r7, #15]
 8008304:	2b21      	cmp	r3, #33	; 0x21
 8008306:	d121      	bne.n	800834c <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	685a      	ldr	r2, [r3, #4]
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008316:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	681a      	ldr	r2, [r3, #0]
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008326:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	2200      	movs	r2, #0
 800832c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	2220      	movs	r2, #32
 8008332:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	2200      	movs	r2, #0
 800833a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800833e:	6878      	ldr	r0, [r7, #4]
 8008340:	f7ff fe40 	bl	8007fc4 <HAL_I2C_MemTxCpltCallback>
}
 8008344:	e002      	b.n	800834c <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8008346:	6878      	ldr	r0, [r7, #4]
 8008348:	f7fe ff9b 	bl	8007282 <I2C_Flush_DR>
}
 800834c:	bf00      	nop
 800834e:	3710      	adds	r7, #16
 8008350:	46bd      	mov	sp, r7
 8008352:	bd80      	pop	{r7, pc}

08008354 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8008354:	b580      	push	{r7, lr}
 8008356:	b084      	sub	sp, #16
 8008358:	af00      	add	r7, sp, #0
 800835a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008362:	b2db      	uxtb	r3, r3
 8008364:	2b22      	cmp	r3, #34	; 0x22
 8008366:	f040 80b9 	bne.w	80084dc <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800836e:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008374:	b29b      	uxth	r3, r3
 8008376:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 8008378:	68bb      	ldr	r3, [r7, #8]
 800837a:	2b03      	cmp	r3, #3
 800837c:	d921      	bls.n	80083c2 <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	691a      	ldr	r2, [r3, #16]
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008388:	b2d2      	uxtb	r2, r2
 800838a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008390:	1c5a      	adds	r2, r3, #1
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800839a:	b29b      	uxth	r3, r3
 800839c:	3b01      	subs	r3, #1
 800839e:	b29a      	uxth	r2, r3
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80083a8:	b29b      	uxth	r3, r3
 80083aa:	2b03      	cmp	r3, #3
 80083ac:	f040 8096 	bne.w	80084dc <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	685a      	ldr	r2, [r3, #4]
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80083be:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 80083c0:	e08c      	b.n	80084dc <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083c6:	2b02      	cmp	r3, #2
 80083c8:	d07f      	beq.n	80084ca <I2C_MasterReceive_RXNE+0x176>
 80083ca:	68bb      	ldr	r3, [r7, #8]
 80083cc:	2b01      	cmp	r3, #1
 80083ce:	d002      	beq.n	80083d6 <I2C_MasterReceive_RXNE+0x82>
 80083d0:	68bb      	ldr	r3, [r7, #8]
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d179      	bne.n	80084ca <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80083d6:	6878      	ldr	r0, [r7, #4]
 80083d8:	f001 fb66 	bl	8009aa8 <I2C_WaitOnSTOPRequestThroughIT>
 80083dc:	4603      	mov	r3, r0
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d14c      	bne.n	800847c <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	681a      	ldr	r2, [r3, #0]
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80083f0:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	685a      	ldr	r2, [r3, #4]
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008400:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	691a      	ldr	r2, [r3, #16]
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800840c:	b2d2      	uxtb	r2, r2
 800840e:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008414:	1c5a      	adds	r2, r3, #1
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800841e:	b29b      	uxth	r3, r3
 8008420:	3b01      	subs	r3, #1
 8008422:	b29a      	uxth	r2, r3
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	2220      	movs	r2, #32
 800842c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008436:	b2db      	uxtb	r3, r3
 8008438:	2b40      	cmp	r3, #64	; 0x40
 800843a:	d10a      	bne.n	8008452 <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	2200      	movs	r2, #0
 8008440:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	2200      	movs	r2, #0
 8008448:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 800844a:	6878      	ldr	r0, [r7, #4]
 800844c:	f7ff fdc4 	bl	8007fd8 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8008450:	e044      	b.n	80084dc <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	2200      	movs	r2, #0
 8008456:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	2b08      	cmp	r3, #8
 800845e:	d002      	beq.n	8008466 <I2C_MasterReceive_RXNE+0x112>
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	2b20      	cmp	r3, #32
 8008464:	d103      	bne.n	800846e <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	2200      	movs	r2, #0
 800846a:	631a      	str	r2, [r3, #48]	; 0x30
 800846c:	e002      	b.n	8008474 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	2212      	movs	r2, #18
 8008472:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8008474:	6878      	ldr	r0, [r7, #4]
 8008476:	f7ff fd6f 	bl	8007f58 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800847a:	e02f      	b.n	80084dc <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	685a      	ldr	r2, [r3, #4]
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800848a:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	691a      	ldr	r2, [r3, #16]
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008496:	b2d2      	uxtb	r2, r2
 8008498:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800849e:	1c5a      	adds	r2, r3, #1
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80084a8:	b29b      	uxth	r3, r3
 80084aa:	3b01      	subs	r3, #1
 80084ac:	b29a      	uxth	r2, r3
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	2220      	movs	r2, #32
 80084b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	2200      	movs	r2, #0
 80084be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80084c2:	6878      	ldr	r0, [r7, #4]
 80084c4:	f7fb fd87 	bl	8003fd6 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80084c8:	e008      	b.n	80084dc <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	685a      	ldr	r2, [r3, #4]
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80084d8:	605a      	str	r2, [r3, #4]
}
 80084da:	e7ff      	b.n	80084dc <I2C_MasterReceive_RXNE+0x188>
 80084dc:	bf00      	nop
 80084de:	3710      	adds	r7, #16
 80084e0:	46bd      	mov	sp, r7
 80084e2:	bd80      	pop	{r7, pc}

080084e4 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80084e4:	b580      	push	{r7, lr}
 80084e6:	b084      	sub	sp, #16
 80084e8:	af00      	add	r7, sp, #0
 80084ea:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084f0:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80084f6:	b29b      	uxth	r3, r3
 80084f8:	2b04      	cmp	r3, #4
 80084fa:	d11b      	bne.n	8008534 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	685a      	ldr	r2, [r3, #4]
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800850a:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	691a      	ldr	r2, [r3, #16]
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008516:	b2d2      	uxtb	r2, r2
 8008518:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800851e:	1c5a      	adds	r2, r3, #1
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008528:	b29b      	uxth	r3, r3
 800852a:	3b01      	subs	r3, #1
 800852c:	b29a      	uxth	r2, r3
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8008532:	e0c8      	b.n	80086c6 <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 3U)
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008538:	b29b      	uxth	r3, r3
 800853a:	2b03      	cmp	r3, #3
 800853c:	d129      	bne.n	8008592 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	685a      	ldr	r2, [r3, #4]
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800854c:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	2b04      	cmp	r3, #4
 8008552:	d00a      	beq.n	800856a <I2C_MasterReceive_BTF+0x86>
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	2b02      	cmp	r3, #2
 8008558:	d007      	beq.n	800856a <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	681a      	ldr	r2, [r3, #0]
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008568:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	691a      	ldr	r2, [r3, #16]
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008574:	b2d2      	uxtb	r2, r2
 8008576:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800857c:	1c5a      	adds	r2, r3, #1
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008586:	b29b      	uxth	r3, r3
 8008588:	3b01      	subs	r3, #1
 800858a:	b29a      	uxth	r2, r3
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8008590:	e099      	b.n	80086c6 <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 2U)
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008596:	b29b      	uxth	r3, r3
 8008598:	2b02      	cmp	r3, #2
 800859a:	f040 8081 	bne.w	80086a0 <I2C_MasterReceive_BTF+0x1bc>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	2b01      	cmp	r3, #1
 80085a2:	d002      	beq.n	80085aa <I2C_MasterReceive_BTF+0xc6>
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	2b10      	cmp	r3, #16
 80085a8:	d108      	bne.n	80085bc <I2C_MasterReceive_BTF+0xd8>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	681a      	ldr	r2, [r3, #0]
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80085b8:	601a      	str	r2, [r3, #0]
 80085ba:	e019      	b.n	80085f0 <I2C_MasterReceive_BTF+0x10c>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	2b04      	cmp	r3, #4
 80085c0:	d002      	beq.n	80085c8 <I2C_MasterReceive_BTF+0xe4>
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	2b02      	cmp	r3, #2
 80085c6:	d108      	bne.n	80085da <I2C_MasterReceive_BTF+0xf6>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	681a      	ldr	r2, [r3, #0]
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80085d6:	601a      	str	r2, [r3, #0]
 80085d8:	e00a      	b.n	80085f0 <I2C_MasterReceive_BTF+0x10c>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	2b10      	cmp	r3, #16
 80085de:	d007      	beq.n	80085f0 <I2C_MasterReceive_BTF+0x10c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	681a      	ldr	r2, [r3, #0]
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80085ee:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	691a      	ldr	r2, [r3, #16]
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085fa:	b2d2      	uxtb	r2, r2
 80085fc:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008602:	1c5a      	adds	r2, r3, #1
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800860c:	b29b      	uxth	r3, r3
 800860e:	3b01      	subs	r3, #1
 8008610:	b29a      	uxth	r2, r3
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	691a      	ldr	r2, [r3, #16]
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008620:	b2d2      	uxtb	r2, r2
 8008622:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008628:	1c5a      	adds	r2, r3, #1
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008632:	b29b      	uxth	r3, r3
 8008634:	3b01      	subs	r3, #1
 8008636:	b29a      	uxth	r2, r3
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	685a      	ldr	r2, [r3, #4]
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800864a:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	2220      	movs	r2, #32
 8008650:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800865a:	b2db      	uxtb	r3, r3
 800865c:	2b40      	cmp	r3, #64	; 0x40
 800865e:	d10a      	bne.n	8008676 <I2C_MasterReceive_BTF+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	2200      	movs	r2, #0
 8008664:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	2200      	movs	r2, #0
 800866c:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800866e:	6878      	ldr	r0, [r7, #4]
 8008670:	f7ff fcb2 	bl	8007fd8 <HAL_I2C_MemRxCpltCallback>
}
 8008674:	e027      	b.n	80086c6 <I2C_MasterReceive_BTF+0x1e2>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	2200      	movs	r2, #0
 800867a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	2b08      	cmp	r3, #8
 8008682:	d002      	beq.n	800868a <I2C_MasterReceive_BTF+0x1a6>
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	2b20      	cmp	r3, #32
 8008688:	d103      	bne.n	8008692 <I2C_MasterReceive_BTF+0x1ae>
        hi2c->PreviousState = I2C_STATE_NONE;
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	2200      	movs	r2, #0
 800868e:	631a      	str	r2, [r3, #48]	; 0x30
 8008690:	e002      	b.n	8008698 <I2C_MasterReceive_BTF+0x1b4>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	2212      	movs	r2, #18
 8008696:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8008698:	6878      	ldr	r0, [r7, #4]
 800869a:	f7ff fc5d 	bl	8007f58 <HAL_I2C_MasterRxCpltCallback>
}
 800869e:	e012      	b.n	80086c6 <I2C_MasterReceive_BTF+0x1e2>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	691a      	ldr	r2, [r3, #16]
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086aa:	b2d2      	uxtb	r2, r2
 80086ac:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086b2:	1c5a      	adds	r2, r3, #1
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80086bc:	b29b      	uxth	r3, r3
 80086be:	3b01      	subs	r3, #1
 80086c0:	b29a      	uxth	r2, r3
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80086c6:	bf00      	nop
 80086c8:	3710      	adds	r7, #16
 80086ca:	46bd      	mov	sp, r7
 80086cc:	bd80      	pop	{r7, pc}

080086ce <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80086ce:	b480      	push	{r7}
 80086d0:	b083      	sub	sp, #12
 80086d2:	af00      	add	r7, sp, #0
 80086d4:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80086dc:	b2db      	uxtb	r3, r3
 80086de:	2b40      	cmp	r3, #64	; 0x40
 80086e0:	d117      	bne.n	8008712 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d109      	bne.n	80086fe <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80086ee:	b2db      	uxtb	r3, r3
 80086f0:	461a      	mov	r2, r3
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80086fa:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80086fc:	e067      	b.n	80087ce <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008702:	b2db      	uxtb	r3, r3
 8008704:	f043 0301 	orr.w	r3, r3, #1
 8008708:	b2da      	uxtb	r2, r3
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	611a      	str	r2, [r3, #16]
}
 8008710:	e05d      	b.n	80087ce <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	691b      	ldr	r3, [r3, #16]
 8008716:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800871a:	d133      	bne.n	8008784 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008722:	b2db      	uxtb	r3, r3
 8008724:	2b21      	cmp	r3, #33	; 0x21
 8008726:	d109      	bne.n	800873c <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800872c:	b2db      	uxtb	r3, r3
 800872e:	461a      	mov	r2, r3
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008738:	611a      	str	r2, [r3, #16]
 800873a:	e008      	b.n	800874e <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008740:	b2db      	uxtb	r3, r3
 8008742:	f043 0301 	orr.w	r3, r3, #1
 8008746:	b2da      	uxtb	r2, r3
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008752:	2b00      	cmp	r3, #0
 8008754:	d004      	beq.n	8008760 <I2C_Master_SB+0x92>
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800875a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800875c:	2b00      	cmp	r3, #0
 800875e:	d108      	bne.n	8008772 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008764:	2b00      	cmp	r3, #0
 8008766:	d032      	beq.n	80087ce <I2C_Master_SB+0x100>
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800876c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800876e:	2b00      	cmp	r3, #0
 8008770:	d02d      	beq.n	80087ce <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	685a      	ldr	r2, [r3, #4]
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008780:	605a      	str	r2, [r3, #4]
}
 8008782:	e024      	b.n	80087ce <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008788:	2b00      	cmp	r3, #0
 800878a:	d10e      	bne.n	80087aa <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008790:	b29b      	uxth	r3, r3
 8008792:	11db      	asrs	r3, r3, #7
 8008794:	b2db      	uxtb	r3, r3
 8008796:	f003 0306 	and.w	r3, r3, #6
 800879a:	b2db      	uxtb	r3, r3
 800879c:	f063 030f 	orn	r3, r3, #15
 80087a0:	b2da      	uxtb	r2, r3
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	611a      	str	r2, [r3, #16]
}
 80087a8:	e011      	b.n	80087ce <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80087ae:	2b01      	cmp	r3, #1
 80087b0:	d10d      	bne.n	80087ce <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80087b6:	b29b      	uxth	r3, r3
 80087b8:	11db      	asrs	r3, r3, #7
 80087ba:	b2db      	uxtb	r3, r3
 80087bc:	f003 0306 	and.w	r3, r3, #6
 80087c0:	b2db      	uxtb	r3, r3
 80087c2:	f063 030e 	orn	r3, r3, #14
 80087c6:	b2da      	uxtb	r2, r3
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	611a      	str	r2, [r3, #16]
}
 80087ce:	bf00      	nop
 80087d0:	370c      	adds	r7, #12
 80087d2:	46bd      	mov	sp, r7
 80087d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d8:	4770      	bx	lr

080087da <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80087da:	b480      	push	{r7}
 80087dc:	b083      	sub	sp, #12
 80087de:	af00      	add	r7, sp, #0
 80087e0:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80087e6:	b2da      	uxtb	r2, r3
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d004      	beq.n	8008800 <I2C_Master_ADD10+0x26>
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80087fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d108      	bne.n	8008812 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008804:	2b00      	cmp	r3, #0
 8008806:	d00c      	beq.n	8008822 <I2C_Master_ADD10+0x48>
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800880c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800880e:	2b00      	cmp	r3, #0
 8008810:	d007      	beq.n	8008822 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	685a      	ldr	r2, [r3, #4]
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008820:	605a      	str	r2, [r3, #4]
  }
}
 8008822:	bf00      	nop
 8008824:	370c      	adds	r7, #12
 8008826:	46bd      	mov	sp, r7
 8008828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800882c:	4770      	bx	lr

0800882e <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800882e:	b480      	push	{r7}
 8008830:	b091      	sub	sp, #68	; 0x44
 8008832:	af00      	add	r7, sp, #0
 8008834:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800883c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008844:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800884a:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008852:	b2db      	uxtb	r3, r3
 8008854:	2b22      	cmp	r3, #34	; 0x22
 8008856:	f040 8169 	bne.w	8008b2c <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800885e:	2b00      	cmp	r3, #0
 8008860:	d10f      	bne.n	8008882 <I2C_Master_ADDR+0x54>
 8008862:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008866:	2b40      	cmp	r3, #64	; 0x40
 8008868:	d10b      	bne.n	8008882 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800886a:	2300      	movs	r3, #0
 800886c:	633b      	str	r3, [r7, #48]	; 0x30
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	695b      	ldr	r3, [r3, #20]
 8008874:	633b      	str	r3, [r7, #48]	; 0x30
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	699b      	ldr	r3, [r3, #24]
 800887c:	633b      	str	r3, [r7, #48]	; 0x30
 800887e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008880:	e160      	b.n	8008b44 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008886:	2b00      	cmp	r3, #0
 8008888:	d11d      	bne.n	80088c6 <I2C_Master_ADDR+0x98>
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	691b      	ldr	r3, [r3, #16]
 800888e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8008892:	d118      	bne.n	80088c6 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008894:	2300      	movs	r3, #0
 8008896:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	695b      	ldr	r3, [r3, #20]
 800889e:	62fb      	str	r3, [r7, #44]	; 0x2c
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	699b      	ldr	r3, [r3, #24]
 80088a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80088a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	681a      	ldr	r2, [r3, #0]
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80088b8:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80088be:	1c5a      	adds	r2, r3, #1
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	651a      	str	r2, [r3, #80]	; 0x50
 80088c4:	e13e      	b.n	8008b44 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80088ca:	b29b      	uxth	r3, r3
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d113      	bne.n	80088f8 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80088d0:	2300      	movs	r3, #0
 80088d2:	62bb      	str	r3, [r7, #40]	; 0x28
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	695b      	ldr	r3, [r3, #20]
 80088da:	62bb      	str	r3, [r7, #40]	; 0x28
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	699b      	ldr	r3, [r3, #24]
 80088e2:	62bb      	str	r3, [r7, #40]	; 0x28
 80088e4:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	681a      	ldr	r2, [r3, #0]
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80088f4:	601a      	str	r2, [r3, #0]
 80088f6:	e115      	b.n	8008b24 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80088fc:	b29b      	uxth	r3, r3
 80088fe:	2b01      	cmp	r3, #1
 8008900:	f040 808a 	bne.w	8008a18 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8008904:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008906:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800890a:	d137      	bne.n	800897c <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	681a      	ldr	r2, [r3, #0]
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800891a:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	685b      	ldr	r3, [r3, #4]
 8008922:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008926:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800892a:	d113      	bne.n	8008954 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	681a      	ldr	r2, [r3, #0]
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800893a:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800893c:	2300      	movs	r3, #0
 800893e:	627b      	str	r3, [r7, #36]	; 0x24
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	695b      	ldr	r3, [r3, #20]
 8008946:	627b      	str	r3, [r7, #36]	; 0x24
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	699b      	ldr	r3, [r3, #24]
 800894e:	627b      	str	r3, [r7, #36]	; 0x24
 8008950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008952:	e0e7      	b.n	8008b24 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008954:	2300      	movs	r3, #0
 8008956:	623b      	str	r3, [r7, #32]
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	695b      	ldr	r3, [r3, #20]
 800895e:	623b      	str	r3, [r7, #32]
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	699b      	ldr	r3, [r3, #24]
 8008966:	623b      	str	r3, [r7, #32]
 8008968:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	681a      	ldr	r2, [r3, #0]
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008978:	601a      	str	r2, [r3, #0]
 800897a:	e0d3      	b.n	8008b24 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800897c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800897e:	2b08      	cmp	r3, #8
 8008980:	d02e      	beq.n	80089e0 <I2C_Master_ADDR+0x1b2>
 8008982:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008984:	2b20      	cmp	r3, #32
 8008986:	d02b      	beq.n	80089e0 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8008988:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800898a:	2b12      	cmp	r3, #18
 800898c:	d102      	bne.n	8008994 <I2C_Master_ADDR+0x166>
 800898e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008990:	2b01      	cmp	r3, #1
 8008992:	d125      	bne.n	80089e0 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8008994:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008996:	2b04      	cmp	r3, #4
 8008998:	d00e      	beq.n	80089b8 <I2C_Master_ADDR+0x18a>
 800899a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800899c:	2b02      	cmp	r3, #2
 800899e:	d00b      	beq.n	80089b8 <I2C_Master_ADDR+0x18a>
 80089a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089a2:	2b10      	cmp	r3, #16
 80089a4:	d008      	beq.n	80089b8 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	681a      	ldr	r2, [r3, #0]
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80089b4:	601a      	str	r2, [r3, #0]
 80089b6:	e007      	b.n	80089c8 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	681a      	ldr	r2, [r3, #0]
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80089c6:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80089c8:	2300      	movs	r3, #0
 80089ca:	61fb      	str	r3, [r7, #28]
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	695b      	ldr	r3, [r3, #20]
 80089d2:	61fb      	str	r3, [r7, #28]
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	699b      	ldr	r3, [r3, #24]
 80089da:	61fb      	str	r3, [r7, #28]
 80089dc:	69fb      	ldr	r3, [r7, #28]
 80089de:	e0a1      	b.n	8008b24 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	681a      	ldr	r2, [r3, #0]
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80089ee:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80089f0:	2300      	movs	r3, #0
 80089f2:	61bb      	str	r3, [r7, #24]
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	695b      	ldr	r3, [r3, #20]
 80089fa:	61bb      	str	r3, [r7, #24]
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	699b      	ldr	r3, [r3, #24]
 8008a02:	61bb      	str	r3, [r7, #24]
 8008a04:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	681a      	ldr	r2, [r3, #0]
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008a14:	601a      	str	r2, [r3, #0]
 8008a16:	e085      	b.n	8008b24 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008a1c:	b29b      	uxth	r3, r3
 8008a1e:	2b02      	cmp	r3, #2
 8008a20:	d14d      	bne.n	8008abe <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8008a22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a24:	2b04      	cmp	r3, #4
 8008a26:	d016      	beq.n	8008a56 <I2C_Master_ADDR+0x228>
 8008a28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a2a:	2b02      	cmp	r3, #2
 8008a2c:	d013      	beq.n	8008a56 <I2C_Master_ADDR+0x228>
 8008a2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a30:	2b10      	cmp	r3, #16
 8008a32:	d010      	beq.n	8008a56 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	681a      	ldr	r2, [r3, #0]
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008a42:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	681a      	ldr	r2, [r3, #0]
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008a52:	601a      	str	r2, [r3, #0]
 8008a54:	e007      	b.n	8008a66 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	681a      	ldr	r2, [r3, #0]
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008a64:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	685b      	ldr	r3, [r3, #4]
 8008a6c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008a70:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008a74:	d117      	bne.n	8008aa6 <I2C_Master_ADDR+0x278>
 8008a76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a78:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008a7c:	d00b      	beq.n	8008a96 <I2C_Master_ADDR+0x268>
 8008a7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a80:	2b01      	cmp	r3, #1
 8008a82:	d008      	beq.n	8008a96 <I2C_Master_ADDR+0x268>
 8008a84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a86:	2b08      	cmp	r3, #8
 8008a88:	d005      	beq.n	8008a96 <I2C_Master_ADDR+0x268>
 8008a8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a8c:	2b10      	cmp	r3, #16
 8008a8e:	d002      	beq.n	8008a96 <I2C_Master_ADDR+0x268>
 8008a90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a92:	2b20      	cmp	r3, #32
 8008a94:	d107      	bne.n	8008aa6 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	685a      	ldr	r2, [r3, #4]
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008aa4:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008aa6:	2300      	movs	r3, #0
 8008aa8:	617b      	str	r3, [r7, #20]
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	695b      	ldr	r3, [r3, #20]
 8008ab0:	617b      	str	r3, [r7, #20]
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	699b      	ldr	r3, [r3, #24]
 8008ab8:	617b      	str	r3, [r7, #20]
 8008aba:	697b      	ldr	r3, [r7, #20]
 8008abc:	e032      	b.n	8008b24 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	681a      	ldr	r2, [r3, #0]
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008acc:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	685b      	ldr	r3, [r3, #4]
 8008ad4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008ad8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008adc:	d117      	bne.n	8008b0e <I2C_Master_ADDR+0x2e0>
 8008ade:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ae0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008ae4:	d00b      	beq.n	8008afe <I2C_Master_ADDR+0x2d0>
 8008ae6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ae8:	2b01      	cmp	r3, #1
 8008aea:	d008      	beq.n	8008afe <I2C_Master_ADDR+0x2d0>
 8008aec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008aee:	2b08      	cmp	r3, #8
 8008af0:	d005      	beq.n	8008afe <I2C_Master_ADDR+0x2d0>
 8008af2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008af4:	2b10      	cmp	r3, #16
 8008af6:	d002      	beq.n	8008afe <I2C_Master_ADDR+0x2d0>
 8008af8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008afa:	2b20      	cmp	r3, #32
 8008afc:	d107      	bne.n	8008b0e <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	685a      	ldr	r2, [r3, #4]
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008b0c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008b0e:	2300      	movs	r3, #0
 8008b10:	613b      	str	r3, [r7, #16]
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	695b      	ldr	r3, [r3, #20]
 8008b18:	613b      	str	r3, [r7, #16]
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	699b      	ldr	r3, [r3, #24]
 8008b20:	613b      	str	r3, [r7, #16]
 8008b22:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	2200      	movs	r2, #0
 8008b28:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8008b2a:	e00b      	b.n	8008b44 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008b2c:	2300      	movs	r3, #0
 8008b2e:	60fb      	str	r3, [r7, #12]
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	695b      	ldr	r3, [r3, #20]
 8008b36:	60fb      	str	r3, [r7, #12]
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	699b      	ldr	r3, [r3, #24]
 8008b3e:	60fb      	str	r3, [r7, #12]
 8008b40:	68fb      	ldr	r3, [r7, #12]
}
 8008b42:	e7ff      	b.n	8008b44 <I2C_Master_ADDR+0x316>
 8008b44:	bf00      	nop
 8008b46:	3744      	adds	r7, #68	; 0x44
 8008b48:	46bd      	mov	sp, r7
 8008b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b4e:	4770      	bx	lr

08008b50 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8008b50:	b580      	push	{r7, lr}
 8008b52:	b084      	sub	sp, #16
 8008b54:	af00      	add	r7, sp, #0
 8008b56:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008b5e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008b64:	b29b      	uxth	r3, r3
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d02b      	beq.n	8008bc2 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b6e:	781a      	ldrb	r2, [r3, #0]
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b7a:	1c5a      	adds	r2, r3, #1
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008b84:	b29b      	uxth	r3, r3
 8008b86:	3b01      	subs	r3, #1
 8008b88:	b29a      	uxth	r2, r3
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008b92:	b29b      	uxth	r3, r3
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d114      	bne.n	8008bc2 <I2C_SlaveTransmit_TXE+0x72>
 8008b98:	7bfb      	ldrb	r3, [r7, #15]
 8008b9a:	2b29      	cmp	r3, #41	; 0x29
 8008b9c:	d111      	bne.n	8008bc2 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	685a      	ldr	r2, [r3, #4]
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008bac:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	2221      	movs	r2, #33	; 0x21
 8008bb2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	2228      	movs	r2, #40	; 0x28
 8008bb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8008bbc:	6878      	ldr	r0, [r7, #4]
 8008bbe:	f7ff f9d5 	bl	8007f6c <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8008bc2:	bf00      	nop
 8008bc4:	3710      	adds	r7, #16
 8008bc6:	46bd      	mov	sp, r7
 8008bc8:	bd80      	pop	{r7, pc}

08008bca <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8008bca:	b480      	push	{r7}
 8008bcc:	b083      	sub	sp, #12
 8008bce:	af00      	add	r7, sp, #0
 8008bd0:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008bd6:	b29b      	uxth	r3, r3
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d011      	beq.n	8008c00 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008be0:	781a      	ldrb	r2, [r3, #0]
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bec:	1c5a      	adds	r2, r3, #1
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008bf6:	b29b      	uxth	r3, r3
 8008bf8:	3b01      	subs	r3, #1
 8008bfa:	b29a      	uxth	r2, r3
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8008c00:	bf00      	nop
 8008c02:	370c      	adds	r7, #12
 8008c04:	46bd      	mov	sp, r7
 8008c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c0a:	4770      	bx	lr

08008c0c <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8008c0c:	b580      	push	{r7, lr}
 8008c0e:	b084      	sub	sp, #16
 8008c10:	af00      	add	r7, sp, #0
 8008c12:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008c1a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008c20:	b29b      	uxth	r3, r3
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d02c      	beq.n	8008c80 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	691a      	ldr	r2, [r3, #16]
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c30:	b2d2      	uxtb	r2, r2
 8008c32:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c38:	1c5a      	adds	r2, r3, #1
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008c42:	b29b      	uxth	r3, r3
 8008c44:	3b01      	subs	r3, #1
 8008c46:	b29a      	uxth	r2, r3
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008c50:	b29b      	uxth	r3, r3
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d114      	bne.n	8008c80 <I2C_SlaveReceive_RXNE+0x74>
 8008c56:	7bfb      	ldrb	r3, [r7, #15]
 8008c58:	2b2a      	cmp	r3, #42	; 0x2a
 8008c5a:	d111      	bne.n	8008c80 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	685a      	ldr	r2, [r3, #4]
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008c6a:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	2222      	movs	r2, #34	; 0x22
 8008c70:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	2228      	movs	r2, #40	; 0x28
 8008c76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8008c7a:	6878      	ldr	r0, [r7, #4]
 8008c7c:	f7ff f980 	bl	8007f80 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8008c80:	bf00      	nop
 8008c82:	3710      	adds	r7, #16
 8008c84:	46bd      	mov	sp, r7
 8008c86:	bd80      	pop	{r7, pc}

08008c88 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8008c88:	b480      	push	{r7}
 8008c8a:	b083      	sub	sp, #12
 8008c8c:	af00      	add	r7, sp, #0
 8008c8e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008c94:	b29b      	uxth	r3, r3
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d012      	beq.n	8008cc0 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	691a      	ldr	r2, [r3, #16]
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ca4:	b2d2      	uxtb	r2, r2
 8008ca6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cac:	1c5a      	adds	r2, r3, #1
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008cb6:	b29b      	uxth	r3, r3
 8008cb8:	3b01      	subs	r3, #1
 8008cba:	b29a      	uxth	r2, r3
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8008cc0:	bf00      	nop
 8008cc2:	370c      	adds	r7, #12
 8008cc4:	46bd      	mov	sp, r7
 8008cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cca:	4770      	bx	lr

08008ccc <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8008ccc:	b580      	push	{r7, lr}
 8008cce:	b084      	sub	sp, #16
 8008cd0:	af00      	add	r7, sp, #0
 8008cd2:	6078      	str	r0, [r7, #4]
 8008cd4:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8008cd6:	2300      	movs	r3, #0
 8008cd8:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008ce0:	b2db      	uxtb	r3, r3
 8008ce2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8008ce6:	2b28      	cmp	r3, #40	; 0x28
 8008ce8:	d125      	bne.n	8008d36 <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	685a      	ldr	r2, [r3, #4]
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008cf8:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8008cfa:	683b      	ldr	r3, [r7, #0]
 8008cfc:	f003 0304 	and.w	r3, r3, #4
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d101      	bne.n	8008d08 <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8008d04:	2301      	movs	r3, #1
 8008d06:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8008d08:	683b      	ldr	r3, [r7, #0]
 8008d0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d103      	bne.n	8008d1a <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	68db      	ldr	r3, [r3, #12]
 8008d16:	81bb      	strh	r3, [r7, #12]
 8008d18:	e002      	b.n	8008d20 <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	699b      	ldr	r3, [r3, #24]
 8008d1e:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	2200      	movs	r2, #0
 8008d24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8008d28:	89ba      	ldrh	r2, [r7, #12]
 8008d2a:	7bfb      	ldrb	r3, [r7, #15]
 8008d2c:	4619      	mov	r1, r3
 8008d2e:	6878      	ldr	r0, [r7, #4]
 8008d30:	f7ff f930 	bl	8007f94 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8008d34:	e00e      	b.n	8008d54 <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008d36:	2300      	movs	r3, #0
 8008d38:	60bb      	str	r3, [r7, #8]
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	695b      	ldr	r3, [r3, #20]
 8008d40:	60bb      	str	r3, [r7, #8]
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	699b      	ldr	r3, [r3, #24]
 8008d48:	60bb      	str	r3, [r7, #8]
 8008d4a:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	2200      	movs	r2, #0
 8008d50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8008d54:	bf00      	nop
 8008d56:	3710      	adds	r7, #16
 8008d58:	46bd      	mov	sp, r7
 8008d5a:	bd80      	pop	{r7, pc}

08008d5c <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8008d5c:	b580      	push	{r7, lr}
 8008d5e:	b084      	sub	sp, #16
 8008d60:	af00      	add	r7, sp, #0
 8008d62:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008d6a:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	685a      	ldr	r2, [r3, #4]
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008d7a:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8008d7c:	2300      	movs	r3, #0
 8008d7e:	60bb      	str	r3, [r7, #8]
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	695b      	ldr	r3, [r3, #20]
 8008d86:	60bb      	str	r3, [r7, #8]
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	681a      	ldr	r2, [r3, #0]
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	f042 0201 	orr.w	r2, r2, #1
 8008d96:	601a      	str	r2, [r3, #0]
 8008d98:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	681a      	ldr	r2, [r3, #0]
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008da8:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	685b      	ldr	r3, [r3, #4]
 8008db0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008db4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008db8:	d172      	bne.n	8008ea0 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8008dba:	7bfb      	ldrb	r3, [r7, #15]
 8008dbc:	2b22      	cmp	r3, #34	; 0x22
 8008dbe:	d002      	beq.n	8008dc6 <I2C_Slave_STOPF+0x6a>
 8008dc0:	7bfb      	ldrb	r3, [r7, #15]
 8008dc2:	2b2a      	cmp	r3, #42	; 0x2a
 8008dc4:	d135      	bne.n	8008e32 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	685b      	ldr	r3, [r3, #4]
 8008dce:	b29a      	uxth	r2, r3
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008dd8:	b29b      	uxth	r3, r3
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d005      	beq.n	8008dea <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008de2:	f043 0204 	orr.w	r2, r3, #4
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	685a      	ldr	r2, [r3, #4]
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008df8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dfe:	4618      	mov	r0, r3
 8008e00:	f7fd fa36 	bl	8006270 <HAL_DMA_GetState>
 8008e04:	4603      	mov	r3, r0
 8008e06:	2b01      	cmp	r3, #1
 8008e08:	d049      	beq.n	8008e9e <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e0e:	4a69      	ldr	r2, [pc, #420]	; (8008fb4 <I2C_Slave_STOPF+0x258>)
 8008e10:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e16:	4618      	mov	r0, r3
 8008e18:	f7fd f87e 	bl	8005f18 <HAL_DMA_Abort_IT>
 8008e1c:	4603      	mov	r3, r0
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d03d      	beq.n	8008e9e <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008e28:	687a      	ldr	r2, [r7, #4]
 8008e2a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008e2c:	4610      	mov	r0, r2
 8008e2e:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008e30:	e035      	b.n	8008e9e <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	685b      	ldr	r3, [r3, #4]
 8008e3a:	b29a      	uxth	r2, r3
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008e44:	b29b      	uxth	r3, r3
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d005      	beq.n	8008e56 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e4e:	f043 0204 	orr.w	r2, r3, #4
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	685a      	ldr	r2, [r3, #4]
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008e64:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e6a:	4618      	mov	r0, r3
 8008e6c:	f7fd fa00 	bl	8006270 <HAL_DMA_GetState>
 8008e70:	4603      	mov	r3, r0
 8008e72:	2b01      	cmp	r3, #1
 8008e74:	d014      	beq.n	8008ea0 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e7a:	4a4e      	ldr	r2, [pc, #312]	; (8008fb4 <I2C_Slave_STOPF+0x258>)
 8008e7c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e82:	4618      	mov	r0, r3
 8008e84:	f7fd f848 	bl	8005f18 <HAL_DMA_Abort_IT>
 8008e88:	4603      	mov	r3, r0
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d008      	beq.n	8008ea0 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008e94:	687a      	ldr	r2, [r7, #4]
 8008e96:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8008e98:	4610      	mov	r0, r2
 8008e9a:	4798      	blx	r3
 8008e9c:	e000      	b.n	8008ea0 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008e9e:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008ea4:	b29b      	uxth	r3, r3
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d03e      	beq.n	8008f28 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	695b      	ldr	r3, [r3, #20]
 8008eb0:	f003 0304 	and.w	r3, r3, #4
 8008eb4:	2b04      	cmp	r3, #4
 8008eb6:	d112      	bne.n	8008ede <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	691a      	ldr	r2, [r3, #16]
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ec2:	b2d2      	uxtb	r2, r2
 8008ec4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008eca:	1c5a      	adds	r2, r3, #1
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008ed4:	b29b      	uxth	r3, r3
 8008ed6:	3b01      	subs	r3, #1
 8008ed8:	b29a      	uxth	r2, r3
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	695b      	ldr	r3, [r3, #20]
 8008ee4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ee8:	2b40      	cmp	r3, #64	; 0x40
 8008eea:	d112      	bne.n	8008f12 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	691a      	ldr	r2, [r3, #16]
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ef6:	b2d2      	uxtb	r2, r2
 8008ef8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008efe:	1c5a      	adds	r2, r3, #1
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008f08:	b29b      	uxth	r3, r3
 8008f0a:	3b01      	subs	r3, #1
 8008f0c:	b29a      	uxth	r2, r3
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008f16:	b29b      	uxth	r3, r3
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d005      	beq.n	8008f28 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f20:	f043 0204 	orr.w	r2, r3, #4
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d003      	beq.n	8008f38 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8008f30:	6878      	ldr	r0, [r7, #4]
 8008f32:	f000 f8b7 	bl	80090a4 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8008f36:	e039      	b.n	8008fac <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8008f38:	7bfb      	ldrb	r3, [r7, #15]
 8008f3a:	2b2a      	cmp	r3, #42	; 0x2a
 8008f3c:	d109      	bne.n	8008f52 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	2200      	movs	r2, #0
 8008f42:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	2228      	movs	r2, #40	; 0x28
 8008f48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8008f4c:	6878      	ldr	r0, [r7, #4]
 8008f4e:	f7ff f817 	bl	8007f80 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008f58:	b2db      	uxtb	r3, r3
 8008f5a:	2b28      	cmp	r3, #40	; 0x28
 8008f5c:	d111      	bne.n	8008f82 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	4a15      	ldr	r2, [pc, #84]	; (8008fb8 <I2C_Slave_STOPF+0x25c>)
 8008f62:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	2200      	movs	r2, #0
 8008f68:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	2220      	movs	r2, #32
 8008f6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	2200      	movs	r2, #0
 8008f76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8008f7a:	6878      	ldr	r0, [r7, #4]
 8008f7c:	f7ff f818 	bl	8007fb0 <HAL_I2C_ListenCpltCallback>
}
 8008f80:	e014      	b.n	8008fac <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f86:	2b22      	cmp	r3, #34	; 0x22
 8008f88:	d002      	beq.n	8008f90 <I2C_Slave_STOPF+0x234>
 8008f8a:	7bfb      	ldrb	r3, [r7, #15]
 8008f8c:	2b22      	cmp	r3, #34	; 0x22
 8008f8e:	d10d      	bne.n	8008fac <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	2200      	movs	r2, #0
 8008f94:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	2220      	movs	r2, #32
 8008f9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	2200      	movs	r2, #0
 8008fa2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8008fa6:	6878      	ldr	r0, [r7, #4]
 8008fa8:	f7fe ffea 	bl	8007f80 <HAL_I2C_SlaveRxCpltCallback>
}
 8008fac:	bf00      	nop
 8008fae:	3710      	adds	r7, #16
 8008fb0:	46bd      	mov	sp, r7
 8008fb2:	bd80      	pop	{r7, pc}
 8008fb4:	08009605 	.word	0x08009605
 8008fb8:	ffff0000 	.word	0xffff0000

08008fbc <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8008fbc:	b580      	push	{r7, lr}
 8008fbe:	b084      	sub	sp, #16
 8008fc0:	af00      	add	r7, sp, #0
 8008fc2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008fca:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fd0:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8008fd2:	68bb      	ldr	r3, [r7, #8]
 8008fd4:	2b08      	cmp	r3, #8
 8008fd6:	d002      	beq.n	8008fde <I2C_Slave_AF+0x22>
 8008fd8:	68bb      	ldr	r3, [r7, #8]
 8008fda:	2b20      	cmp	r3, #32
 8008fdc:	d129      	bne.n	8009032 <I2C_Slave_AF+0x76>
 8008fde:	7bfb      	ldrb	r3, [r7, #15]
 8008fe0:	2b28      	cmp	r3, #40	; 0x28
 8008fe2:	d126      	bne.n	8009032 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	4a2e      	ldr	r2, [pc, #184]	; (80090a0 <I2C_Slave_AF+0xe4>)
 8008fe8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	685a      	ldr	r2, [r3, #4]
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008ff8:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009002:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	681a      	ldr	r2, [r3, #0]
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009012:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	2200      	movs	r2, #0
 8009018:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	2220      	movs	r2, #32
 800901e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	2200      	movs	r2, #0
 8009026:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800902a:	6878      	ldr	r0, [r7, #4]
 800902c:	f7fe ffc0 	bl	8007fb0 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8009030:	e031      	b.n	8009096 <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8009032:	7bfb      	ldrb	r3, [r7, #15]
 8009034:	2b21      	cmp	r3, #33	; 0x21
 8009036:	d129      	bne.n	800908c <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	4a19      	ldr	r2, [pc, #100]	; (80090a0 <I2C_Slave_AF+0xe4>)
 800903c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	2221      	movs	r2, #33	; 0x21
 8009042:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	2220      	movs	r2, #32
 8009048:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	2200      	movs	r2, #0
 8009050:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	685a      	ldr	r2, [r3, #4]
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8009062:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800906c:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	681a      	ldr	r2, [r3, #0]
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800907c:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 800907e:	6878      	ldr	r0, [r7, #4]
 8009080:	f7fe f8ff 	bl	8007282 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8009084:	6878      	ldr	r0, [r7, #4]
 8009086:	f7fe ff71 	bl	8007f6c <HAL_I2C_SlaveTxCpltCallback>
}
 800908a:	e004      	b.n	8009096 <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009094:	615a      	str	r2, [r3, #20]
}
 8009096:	bf00      	nop
 8009098:	3710      	adds	r7, #16
 800909a:	46bd      	mov	sp, r7
 800909c:	bd80      	pop	{r7, pc}
 800909e:	bf00      	nop
 80090a0:	ffff0000 	.word	0xffff0000

080090a4 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80090a4:	b580      	push	{r7, lr}
 80090a6:	b084      	sub	sp, #16
 80090a8:	af00      	add	r7, sp, #0
 80090aa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80090b2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80090ba:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80090bc:	7bbb      	ldrb	r3, [r7, #14]
 80090be:	2b10      	cmp	r3, #16
 80090c0:	d002      	beq.n	80090c8 <I2C_ITError+0x24>
 80090c2:	7bbb      	ldrb	r3, [r7, #14]
 80090c4:	2b40      	cmp	r3, #64	; 0x40
 80090c6:	d10a      	bne.n	80090de <I2C_ITError+0x3a>
 80090c8:	7bfb      	ldrb	r3, [r7, #15]
 80090ca:	2b22      	cmp	r3, #34	; 0x22
 80090cc:	d107      	bne.n	80090de <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	681a      	ldr	r2, [r3, #0]
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80090dc:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80090de:	7bfb      	ldrb	r3, [r7, #15]
 80090e0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80090e4:	2b28      	cmp	r3, #40	; 0x28
 80090e6:	d107      	bne.n	80090f8 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	2200      	movs	r2, #0
 80090ec:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	2228      	movs	r2, #40	; 0x28
 80090f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80090f6:	e015      	b.n	8009124 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	685b      	ldr	r3, [r3, #4]
 80090fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009102:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009106:	d00a      	beq.n	800911e <I2C_ITError+0x7a>
 8009108:	7bfb      	ldrb	r3, [r7, #15]
 800910a:	2b60      	cmp	r3, #96	; 0x60
 800910c:	d007      	beq.n	800911e <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	2220      	movs	r2, #32
 8009112:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	2200      	movs	r2, #0
 800911a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	2200      	movs	r2, #0
 8009122:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	685b      	ldr	r3, [r3, #4]
 800912a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800912e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009132:	d162      	bne.n	80091fa <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	685a      	ldr	r2, [r3, #4]
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009142:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009148:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800914c:	b2db      	uxtb	r3, r3
 800914e:	2b01      	cmp	r3, #1
 8009150:	d020      	beq.n	8009194 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009156:	4a6a      	ldr	r2, [pc, #424]	; (8009300 <I2C_ITError+0x25c>)
 8009158:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800915e:	4618      	mov	r0, r3
 8009160:	f7fc feda 	bl	8005f18 <HAL_DMA_Abort_IT>
 8009164:	4603      	mov	r3, r0
 8009166:	2b00      	cmp	r3, #0
 8009168:	f000 8089 	beq.w	800927e <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	681a      	ldr	r2, [r3, #0]
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	f022 0201 	bic.w	r2, r2, #1
 800917a:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	2220      	movs	r2, #32
 8009180:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009188:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800918a:	687a      	ldr	r2, [r7, #4]
 800918c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800918e:	4610      	mov	r0, r2
 8009190:	4798      	blx	r3
 8009192:	e074      	b.n	800927e <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009198:	4a59      	ldr	r2, [pc, #356]	; (8009300 <I2C_ITError+0x25c>)
 800919a:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091a0:	4618      	mov	r0, r3
 80091a2:	f7fc feb9 	bl	8005f18 <HAL_DMA_Abort_IT>
 80091a6:	4603      	mov	r3, r0
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d068      	beq.n	800927e <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	695b      	ldr	r3, [r3, #20]
 80091b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80091b6:	2b40      	cmp	r3, #64	; 0x40
 80091b8:	d10b      	bne.n	80091d2 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	691a      	ldr	r2, [r3, #16]
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091c4:	b2d2      	uxtb	r2, r2
 80091c6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091cc:	1c5a      	adds	r2, r3, #1
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	681a      	ldr	r2, [r3, #0]
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	f022 0201 	bic.w	r2, r2, #1
 80091e0:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	2220      	movs	r2, #32
 80091e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80091f0:	687a      	ldr	r2, [r7, #4]
 80091f2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80091f4:	4610      	mov	r0, r2
 80091f6:	4798      	blx	r3
 80091f8:	e041      	b.n	800927e <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009200:	b2db      	uxtb	r3, r3
 8009202:	2b60      	cmp	r3, #96	; 0x60
 8009204:	d125      	bne.n	8009252 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	2220      	movs	r2, #32
 800920a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	2200      	movs	r2, #0
 8009212:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	695b      	ldr	r3, [r3, #20]
 800921a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800921e:	2b40      	cmp	r3, #64	; 0x40
 8009220:	d10b      	bne.n	800923a <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	691a      	ldr	r2, [r3, #16]
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800922c:	b2d2      	uxtb	r2, r2
 800922e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009234:	1c5a      	adds	r2, r3, #1
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	681a      	ldr	r2, [r3, #0]
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	f022 0201 	bic.w	r2, r2, #1
 8009248:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800924a:	6878      	ldr	r0, [r7, #4]
 800924c:	f7fe fece 	bl	8007fec <HAL_I2C_AbortCpltCallback>
 8009250:	e015      	b.n	800927e <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	695b      	ldr	r3, [r3, #20]
 8009258:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800925c:	2b40      	cmp	r3, #64	; 0x40
 800925e:	d10b      	bne.n	8009278 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	691a      	ldr	r2, [r3, #16]
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800926a:	b2d2      	uxtb	r2, r2
 800926c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009272:	1c5a      	adds	r2, r3, #1
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8009278:	6878      	ldr	r0, [r7, #4]
 800927a:	f7fa feac 	bl	8003fd6 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009282:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8009284:	68bb      	ldr	r3, [r7, #8]
 8009286:	f003 0301 	and.w	r3, r3, #1
 800928a:	2b00      	cmp	r3, #0
 800928c:	d10e      	bne.n	80092ac <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800928e:	68bb      	ldr	r3, [r7, #8]
 8009290:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8009294:	2b00      	cmp	r3, #0
 8009296:	d109      	bne.n	80092ac <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8009298:	68bb      	ldr	r3, [r7, #8]
 800929a:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d104      	bne.n	80092ac <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80092a2:	68bb      	ldr	r3, [r7, #8]
 80092a4:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d007      	beq.n	80092bc <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	685a      	ldr	r2, [r3, #4]
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80092ba:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80092c2:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092c8:	f003 0304 	and.w	r3, r3, #4
 80092cc:	2b04      	cmp	r3, #4
 80092ce:	d113      	bne.n	80092f8 <I2C_ITError+0x254>
 80092d0:	7bfb      	ldrb	r3, [r7, #15]
 80092d2:	2b28      	cmp	r3, #40	; 0x28
 80092d4:	d110      	bne.n	80092f8 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	4a0a      	ldr	r2, [pc, #40]	; (8009304 <I2C_ITError+0x260>)
 80092da:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	2200      	movs	r2, #0
 80092e0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	2220      	movs	r2, #32
 80092e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	2200      	movs	r2, #0
 80092ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80092f2:	6878      	ldr	r0, [r7, #4]
 80092f4:	f7fe fe5c 	bl	8007fb0 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80092f8:	bf00      	nop
 80092fa:	3710      	adds	r7, #16
 80092fc:	46bd      	mov	sp, r7
 80092fe:	bd80      	pop	{r7, pc}
 8009300:	08009605 	.word	0x08009605
 8009304:	ffff0000 	.word	0xffff0000

08009308 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8009308:	b580      	push	{r7, lr}
 800930a:	b088      	sub	sp, #32
 800930c:	af02      	add	r7, sp, #8
 800930e:	60f8      	str	r0, [r7, #12]
 8009310:	4608      	mov	r0, r1
 8009312:	4611      	mov	r1, r2
 8009314:	461a      	mov	r2, r3
 8009316:	4603      	mov	r3, r0
 8009318:	817b      	strh	r3, [r7, #10]
 800931a:	460b      	mov	r3, r1
 800931c:	813b      	strh	r3, [r7, #8]
 800931e:	4613      	mov	r3, r2
 8009320:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	681a      	ldr	r2, [r3, #0]
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009330:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009334:	9300      	str	r3, [sp, #0]
 8009336:	6a3b      	ldr	r3, [r7, #32]
 8009338:	2200      	movs	r2, #0
 800933a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800933e:	68f8      	ldr	r0, [r7, #12]
 8009340:	f000 fa08 	bl	8009754 <I2C_WaitOnFlagUntilTimeout>
 8009344:	4603      	mov	r3, r0
 8009346:	2b00      	cmp	r3, #0
 8009348:	d00d      	beq.n	8009366 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009354:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009358:	d103      	bne.n	8009362 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009360:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009362:	2303      	movs	r3, #3
 8009364:	e05f      	b.n	8009426 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8009366:	897b      	ldrh	r3, [r7, #10]
 8009368:	b2db      	uxtb	r3, r3
 800936a:	461a      	mov	r2, r3
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8009374:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009378:	6a3a      	ldr	r2, [r7, #32]
 800937a:	492d      	ldr	r1, [pc, #180]	; (8009430 <I2C_RequestMemoryWrite+0x128>)
 800937c:	68f8      	ldr	r0, [r7, #12]
 800937e:	f000 fa63 	bl	8009848 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009382:	4603      	mov	r3, r0
 8009384:	2b00      	cmp	r3, #0
 8009386:	d001      	beq.n	800938c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8009388:	2301      	movs	r3, #1
 800938a:	e04c      	b.n	8009426 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800938c:	2300      	movs	r3, #0
 800938e:	617b      	str	r3, [r7, #20]
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	695b      	ldr	r3, [r3, #20]
 8009396:	617b      	str	r3, [r7, #20]
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	699b      	ldr	r3, [r3, #24]
 800939e:	617b      	str	r3, [r7, #20]
 80093a0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80093a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80093a4:	6a39      	ldr	r1, [r7, #32]
 80093a6:	68f8      	ldr	r0, [r7, #12]
 80093a8:	f000 faee 	bl	8009988 <I2C_WaitOnTXEFlagUntilTimeout>
 80093ac:	4603      	mov	r3, r0
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d00d      	beq.n	80093ce <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093b6:	2b04      	cmp	r3, #4
 80093b8:	d107      	bne.n	80093ca <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	681a      	ldr	r2, [r3, #0]
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80093c8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80093ca:	2301      	movs	r3, #1
 80093cc:	e02b      	b.n	8009426 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80093ce:	88fb      	ldrh	r3, [r7, #6]
 80093d0:	2b01      	cmp	r3, #1
 80093d2:	d105      	bne.n	80093e0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80093d4:	893b      	ldrh	r3, [r7, #8]
 80093d6:	b2da      	uxtb	r2, r3
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	611a      	str	r2, [r3, #16]
 80093de:	e021      	b.n	8009424 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80093e0:	893b      	ldrh	r3, [r7, #8]
 80093e2:	0a1b      	lsrs	r3, r3, #8
 80093e4:	b29b      	uxth	r3, r3
 80093e6:	b2da      	uxtb	r2, r3
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80093ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80093f0:	6a39      	ldr	r1, [r7, #32]
 80093f2:	68f8      	ldr	r0, [r7, #12]
 80093f4:	f000 fac8 	bl	8009988 <I2C_WaitOnTXEFlagUntilTimeout>
 80093f8:	4603      	mov	r3, r0
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d00d      	beq.n	800941a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009402:	2b04      	cmp	r3, #4
 8009404:	d107      	bne.n	8009416 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	681a      	ldr	r2, [r3, #0]
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009414:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8009416:	2301      	movs	r3, #1
 8009418:	e005      	b.n	8009426 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800941a:	893b      	ldrh	r3, [r7, #8]
 800941c:	b2da      	uxtb	r2, r3
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8009424:	2300      	movs	r3, #0
}
 8009426:	4618      	mov	r0, r3
 8009428:	3718      	adds	r7, #24
 800942a:	46bd      	mov	sp, r7
 800942c:	bd80      	pop	{r7, pc}
 800942e:	bf00      	nop
 8009430:	00010002 	.word	0x00010002

08009434 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8009434:	b580      	push	{r7, lr}
 8009436:	b088      	sub	sp, #32
 8009438:	af02      	add	r7, sp, #8
 800943a:	60f8      	str	r0, [r7, #12]
 800943c:	4608      	mov	r0, r1
 800943e:	4611      	mov	r1, r2
 8009440:	461a      	mov	r2, r3
 8009442:	4603      	mov	r3, r0
 8009444:	817b      	strh	r3, [r7, #10]
 8009446:	460b      	mov	r3, r1
 8009448:	813b      	strh	r3, [r7, #8]
 800944a:	4613      	mov	r3, r2
 800944c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	681a      	ldr	r2, [r3, #0]
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800945c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	681a      	ldr	r2, [r3, #0]
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800946c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800946e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009470:	9300      	str	r3, [sp, #0]
 8009472:	6a3b      	ldr	r3, [r7, #32]
 8009474:	2200      	movs	r2, #0
 8009476:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800947a:	68f8      	ldr	r0, [r7, #12]
 800947c:	f000 f96a 	bl	8009754 <I2C_WaitOnFlagUntilTimeout>
 8009480:	4603      	mov	r3, r0
 8009482:	2b00      	cmp	r3, #0
 8009484:	d00d      	beq.n	80094a2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009490:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009494:	d103      	bne.n	800949e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	f44f 7200 	mov.w	r2, #512	; 0x200
 800949c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800949e:	2303      	movs	r3, #3
 80094a0:	e0aa      	b.n	80095f8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80094a2:	897b      	ldrh	r3, [r7, #10]
 80094a4:	b2db      	uxtb	r3, r3
 80094a6:	461a      	mov	r2, r3
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80094b0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80094b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094b4:	6a3a      	ldr	r2, [r7, #32]
 80094b6:	4952      	ldr	r1, [pc, #328]	; (8009600 <I2C_RequestMemoryRead+0x1cc>)
 80094b8:	68f8      	ldr	r0, [r7, #12]
 80094ba:	f000 f9c5 	bl	8009848 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80094be:	4603      	mov	r3, r0
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d001      	beq.n	80094c8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80094c4:	2301      	movs	r3, #1
 80094c6:	e097      	b.n	80095f8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80094c8:	2300      	movs	r3, #0
 80094ca:	617b      	str	r3, [r7, #20]
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	695b      	ldr	r3, [r3, #20]
 80094d2:	617b      	str	r3, [r7, #20]
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	699b      	ldr	r3, [r3, #24]
 80094da:	617b      	str	r3, [r7, #20]
 80094dc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80094de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80094e0:	6a39      	ldr	r1, [r7, #32]
 80094e2:	68f8      	ldr	r0, [r7, #12]
 80094e4:	f000 fa50 	bl	8009988 <I2C_WaitOnTXEFlagUntilTimeout>
 80094e8:	4603      	mov	r3, r0
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d00d      	beq.n	800950a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094f2:	2b04      	cmp	r3, #4
 80094f4:	d107      	bne.n	8009506 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	681a      	ldr	r2, [r3, #0]
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009504:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8009506:	2301      	movs	r3, #1
 8009508:	e076      	b.n	80095f8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800950a:	88fb      	ldrh	r3, [r7, #6]
 800950c:	2b01      	cmp	r3, #1
 800950e:	d105      	bne.n	800951c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009510:	893b      	ldrh	r3, [r7, #8]
 8009512:	b2da      	uxtb	r2, r3
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	611a      	str	r2, [r3, #16]
 800951a:	e021      	b.n	8009560 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800951c:	893b      	ldrh	r3, [r7, #8]
 800951e:	0a1b      	lsrs	r3, r3, #8
 8009520:	b29b      	uxth	r3, r3
 8009522:	b2da      	uxtb	r2, r3
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800952a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800952c:	6a39      	ldr	r1, [r7, #32]
 800952e:	68f8      	ldr	r0, [r7, #12]
 8009530:	f000 fa2a 	bl	8009988 <I2C_WaitOnTXEFlagUntilTimeout>
 8009534:	4603      	mov	r3, r0
 8009536:	2b00      	cmp	r3, #0
 8009538:	d00d      	beq.n	8009556 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800953e:	2b04      	cmp	r3, #4
 8009540:	d107      	bne.n	8009552 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	681a      	ldr	r2, [r3, #0]
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009550:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8009552:	2301      	movs	r3, #1
 8009554:	e050      	b.n	80095f8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009556:	893b      	ldrh	r3, [r7, #8]
 8009558:	b2da      	uxtb	r2, r3
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009560:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009562:	6a39      	ldr	r1, [r7, #32]
 8009564:	68f8      	ldr	r0, [r7, #12]
 8009566:	f000 fa0f 	bl	8009988 <I2C_WaitOnTXEFlagUntilTimeout>
 800956a:	4603      	mov	r3, r0
 800956c:	2b00      	cmp	r3, #0
 800956e:	d00d      	beq.n	800958c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009574:	2b04      	cmp	r3, #4
 8009576:	d107      	bne.n	8009588 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	681a      	ldr	r2, [r3, #0]
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009586:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8009588:	2301      	movs	r3, #1
 800958a:	e035      	b.n	80095f8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	681a      	ldr	r2, [r3, #0]
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800959a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800959c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800959e:	9300      	str	r3, [sp, #0]
 80095a0:	6a3b      	ldr	r3, [r7, #32]
 80095a2:	2200      	movs	r2, #0
 80095a4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80095a8:	68f8      	ldr	r0, [r7, #12]
 80095aa:	f000 f8d3 	bl	8009754 <I2C_WaitOnFlagUntilTimeout>
 80095ae:	4603      	mov	r3, r0
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d00d      	beq.n	80095d0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80095be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80095c2:	d103      	bne.n	80095cc <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80095ca:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80095cc:	2303      	movs	r3, #3
 80095ce:	e013      	b.n	80095f8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80095d0:	897b      	ldrh	r3, [r7, #10]
 80095d2:	b2db      	uxtb	r3, r3
 80095d4:	f043 0301 	orr.w	r3, r3, #1
 80095d8:	b2da      	uxtb	r2, r3
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80095e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095e2:	6a3a      	ldr	r2, [r7, #32]
 80095e4:	4906      	ldr	r1, [pc, #24]	; (8009600 <I2C_RequestMemoryRead+0x1cc>)
 80095e6:	68f8      	ldr	r0, [r7, #12]
 80095e8:	f000 f92e 	bl	8009848 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80095ec:	4603      	mov	r3, r0
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d001      	beq.n	80095f6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80095f2:	2301      	movs	r3, #1
 80095f4:	e000      	b.n	80095f8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80095f6:	2300      	movs	r3, #0
}
 80095f8:	4618      	mov	r0, r3
 80095fa:	3718      	adds	r7, #24
 80095fc:	46bd      	mov	sp, r7
 80095fe:	bd80      	pop	{r7, pc}
 8009600:	00010002 	.word	0x00010002

08009604 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8009604:	b580      	push	{r7, lr}
 8009606:	b086      	sub	sp, #24
 8009608:	af00      	add	r7, sp, #0
 800960a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800960c:	2300      	movs	r3, #0
 800960e:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009614:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8009616:	697b      	ldr	r3, [r7, #20]
 8009618:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800961c:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800961e:	4b4b      	ldr	r3, [pc, #300]	; (800974c <I2C_DMAAbort+0x148>)
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	08db      	lsrs	r3, r3, #3
 8009624:	4a4a      	ldr	r2, [pc, #296]	; (8009750 <I2C_DMAAbort+0x14c>)
 8009626:	fba2 2303 	umull	r2, r3, r2, r3
 800962a:	0a1a      	lsrs	r2, r3, #8
 800962c:	4613      	mov	r3, r2
 800962e:	009b      	lsls	r3, r3, #2
 8009630:	4413      	add	r3, r2
 8009632:	00da      	lsls	r2, r3, #3
 8009634:	1ad3      	subs	r3, r2, r3
 8009636:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	2b00      	cmp	r3, #0
 800963c:	d106      	bne.n	800964c <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800963e:	697b      	ldr	r3, [r7, #20]
 8009640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009642:	f043 0220 	orr.w	r2, r3, #32
 8009646:	697b      	ldr	r3, [r7, #20]
 8009648:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 800964a:	e00a      	b.n	8009662 <I2C_DMAAbort+0x5e>
    }
    count--;
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	3b01      	subs	r3, #1
 8009650:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8009652:	697b      	ldr	r3, [r7, #20]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800965c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009660:	d0ea      	beq.n	8009638 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8009662:	697b      	ldr	r3, [r7, #20]
 8009664:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009666:	2b00      	cmp	r3, #0
 8009668:	d003      	beq.n	8009672 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800966a:	697b      	ldr	r3, [r7, #20]
 800966c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800966e:	2200      	movs	r2, #0
 8009670:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8009672:	697b      	ldr	r3, [r7, #20]
 8009674:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009676:	2b00      	cmp	r3, #0
 8009678:	d003      	beq.n	8009682 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800967a:	697b      	ldr	r3, [r7, #20]
 800967c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800967e:	2200      	movs	r2, #0
 8009680:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009682:	697b      	ldr	r3, [r7, #20]
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	681a      	ldr	r2, [r3, #0]
 8009688:	697b      	ldr	r3, [r7, #20]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009690:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8009692:	697b      	ldr	r3, [r7, #20]
 8009694:	2200      	movs	r2, #0
 8009696:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8009698:	697b      	ldr	r3, [r7, #20]
 800969a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800969c:	2b00      	cmp	r3, #0
 800969e:	d003      	beq.n	80096a8 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80096a0:	697b      	ldr	r3, [r7, #20]
 80096a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096a4:	2200      	movs	r2, #0
 80096a6:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 80096a8:	697b      	ldr	r3, [r7, #20]
 80096aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d003      	beq.n	80096b8 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80096b0:	697b      	ldr	r3, [r7, #20]
 80096b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096b4:	2200      	movs	r2, #0
 80096b6:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80096b8:	697b      	ldr	r3, [r7, #20]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	681a      	ldr	r2, [r3, #0]
 80096be:	697b      	ldr	r3, [r7, #20]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	f022 0201 	bic.w	r2, r2, #1
 80096c6:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80096c8:	697b      	ldr	r3, [r7, #20]
 80096ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80096ce:	b2db      	uxtb	r3, r3
 80096d0:	2b60      	cmp	r3, #96	; 0x60
 80096d2:	d10e      	bne.n	80096f2 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80096d4:	697b      	ldr	r3, [r7, #20]
 80096d6:	2220      	movs	r2, #32
 80096d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80096dc:	697b      	ldr	r3, [r7, #20]
 80096de:	2200      	movs	r2, #0
 80096e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80096e4:	697b      	ldr	r3, [r7, #20]
 80096e6:	2200      	movs	r2, #0
 80096e8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80096ea:	6978      	ldr	r0, [r7, #20]
 80096ec:	f7fe fc7e 	bl	8007fec <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80096f0:	e027      	b.n	8009742 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80096f2:	7cfb      	ldrb	r3, [r7, #19]
 80096f4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80096f8:	2b28      	cmp	r3, #40	; 0x28
 80096fa:	d117      	bne.n	800972c <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80096fc:	697b      	ldr	r3, [r7, #20]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	681a      	ldr	r2, [r3, #0]
 8009702:	697b      	ldr	r3, [r7, #20]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	f042 0201 	orr.w	r2, r2, #1
 800970a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800970c:	697b      	ldr	r3, [r7, #20]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	681a      	ldr	r2, [r3, #0]
 8009712:	697b      	ldr	r3, [r7, #20]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800971a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800971c:	697b      	ldr	r3, [r7, #20]
 800971e:	2200      	movs	r2, #0
 8009720:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8009722:	697b      	ldr	r3, [r7, #20]
 8009724:	2228      	movs	r2, #40	; 0x28
 8009726:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800972a:	e007      	b.n	800973c <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 800972c:	697b      	ldr	r3, [r7, #20]
 800972e:	2220      	movs	r2, #32
 8009730:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8009734:	697b      	ldr	r3, [r7, #20]
 8009736:	2200      	movs	r2, #0
 8009738:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 800973c:	6978      	ldr	r0, [r7, #20]
 800973e:	f7fa fc4a 	bl	8003fd6 <HAL_I2C_ErrorCallback>
}
 8009742:	bf00      	nop
 8009744:	3718      	adds	r7, #24
 8009746:	46bd      	mov	sp, r7
 8009748:	bd80      	pop	{r7, pc}
 800974a:	bf00      	nop
 800974c:	20000040 	.word	0x20000040
 8009750:	14f8b589 	.word	0x14f8b589

08009754 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8009754:	b580      	push	{r7, lr}
 8009756:	b084      	sub	sp, #16
 8009758:	af00      	add	r7, sp, #0
 800975a:	60f8      	str	r0, [r7, #12]
 800975c:	60b9      	str	r1, [r7, #8]
 800975e:	603b      	str	r3, [r7, #0]
 8009760:	4613      	mov	r3, r2
 8009762:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009764:	e048      	b.n	80097f8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009766:	683b      	ldr	r3, [r7, #0]
 8009768:	f1b3 3fff 	cmp.w	r3, #4294967295
 800976c:	d044      	beq.n	80097f8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800976e:	f7fc f959 	bl	8005a24 <HAL_GetTick>
 8009772:	4602      	mov	r2, r0
 8009774:	69bb      	ldr	r3, [r7, #24]
 8009776:	1ad3      	subs	r3, r2, r3
 8009778:	683a      	ldr	r2, [r7, #0]
 800977a:	429a      	cmp	r2, r3
 800977c:	d302      	bcc.n	8009784 <I2C_WaitOnFlagUntilTimeout+0x30>
 800977e:	683b      	ldr	r3, [r7, #0]
 8009780:	2b00      	cmp	r3, #0
 8009782:	d139      	bne.n	80097f8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8009784:	68bb      	ldr	r3, [r7, #8]
 8009786:	0c1b      	lsrs	r3, r3, #16
 8009788:	b2db      	uxtb	r3, r3
 800978a:	2b01      	cmp	r3, #1
 800978c:	d10d      	bne.n	80097aa <I2C_WaitOnFlagUntilTimeout+0x56>
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	695b      	ldr	r3, [r3, #20]
 8009794:	43da      	mvns	r2, r3
 8009796:	68bb      	ldr	r3, [r7, #8]
 8009798:	4013      	ands	r3, r2
 800979a:	b29b      	uxth	r3, r3
 800979c:	2b00      	cmp	r3, #0
 800979e:	bf0c      	ite	eq
 80097a0:	2301      	moveq	r3, #1
 80097a2:	2300      	movne	r3, #0
 80097a4:	b2db      	uxtb	r3, r3
 80097a6:	461a      	mov	r2, r3
 80097a8:	e00c      	b.n	80097c4 <I2C_WaitOnFlagUntilTimeout+0x70>
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	699b      	ldr	r3, [r3, #24]
 80097b0:	43da      	mvns	r2, r3
 80097b2:	68bb      	ldr	r3, [r7, #8]
 80097b4:	4013      	ands	r3, r2
 80097b6:	b29b      	uxth	r3, r3
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	bf0c      	ite	eq
 80097bc:	2301      	moveq	r3, #1
 80097be:	2300      	movne	r3, #0
 80097c0:	b2db      	uxtb	r3, r3
 80097c2:	461a      	mov	r2, r3
 80097c4:	79fb      	ldrb	r3, [r7, #7]
 80097c6:	429a      	cmp	r2, r3
 80097c8:	d116      	bne.n	80097f8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	2200      	movs	r2, #0
 80097ce:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	2220      	movs	r2, #32
 80097d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	2200      	movs	r2, #0
 80097dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097e4:	f043 0220 	orr.w	r2, r3, #32
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	2200      	movs	r2, #0
 80097f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80097f4:	2301      	movs	r3, #1
 80097f6:	e023      	b.n	8009840 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80097f8:	68bb      	ldr	r3, [r7, #8]
 80097fa:	0c1b      	lsrs	r3, r3, #16
 80097fc:	b2db      	uxtb	r3, r3
 80097fe:	2b01      	cmp	r3, #1
 8009800:	d10d      	bne.n	800981e <I2C_WaitOnFlagUntilTimeout+0xca>
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	695b      	ldr	r3, [r3, #20]
 8009808:	43da      	mvns	r2, r3
 800980a:	68bb      	ldr	r3, [r7, #8]
 800980c:	4013      	ands	r3, r2
 800980e:	b29b      	uxth	r3, r3
 8009810:	2b00      	cmp	r3, #0
 8009812:	bf0c      	ite	eq
 8009814:	2301      	moveq	r3, #1
 8009816:	2300      	movne	r3, #0
 8009818:	b2db      	uxtb	r3, r3
 800981a:	461a      	mov	r2, r3
 800981c:	e00c      	b.n	8009838 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	699b      	ldr	r3, [r3, #24]
 8009824:	43da      	mvns	r2, r3
 8009826:	68bb      	ldr	r3, [r7, #8]
 8009828:	4013      	ands	r3, r2
 800982a:	b29b      	uxth	r3, r3
 800982c:	2b00      	cmp	r3, #0
 800982e:	bf0c      	ite	eq
 8009830:	2301      	moveq	r3, #1
 8009832:	2300      	movne	r3, #0
 8009834:	b2db      	uxtb	r3, r3
 8009836:	461a      	mov	r2, r3
 8009838:	79fb      	ldrb	r3, [r7, #7]
 800983a:	429a      	cmp	r2, r3
 800983c:	d093      	beq.n	8009766 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800983e:	2300      	movs	r3, #0
}
 8009840:	4618      	mov	r0, r3
 8009842:	3710      	adds	r7, #16
 8009844:	46bd      	mov	sp, r7
 8009846:	bd80      	pop	{r7, pc}

08009848 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8009848:	b580      	push	{r7, lr}
 800984a:	b084      	sub	sp, #16
 800984c:	af00      	add	r7, sp, #0
 800984e:	60f8      	str	r0, [r7, #12]
 8009850:	60b9      	str	r1, [r7, #8]
 8009852:	607a      	str	r2, [r7, #4]
 8009854:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8009856:	e071      	b.n	800993c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	695b      	ldr	r3, [r3, #20]
 800985e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009862:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009866:	d123      	bne.n	80098b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	681a      	ldr	r2, [r3, #0]
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009876:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009880:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	2200      	movs	r2, #0
 8009886:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	2220      	movs	r2, #32
 800988c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	2200      	movs	r2, #0
 8009894:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800989c:	f043 0204 	orr.w	r2, r3, #4
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	2200      	movs	r2, #0
 80098a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80098ac:	2301      	movs	r3, #1
 80098ae:	e067      	b.n	8009980 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098b6:	d041      	beq.n	800993c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80098b8:	f7fc f8b4 	bl	8005a24 <HAL_GetTick>
 80098bc:	4602      	mov	r2, r0
 80098be:	683b      	ldr	r3, [r7, #0]
 80098c0:	1ad3      	subs	r3, r2, r3
 80098c2:	687a      	ldr	r2, [r7, #4]
 80098c4:	429a      	cmp	r2, r3
 80098c6:	d302      	bcc.n	80098ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d136      	bne.n	800993c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80098ce:	68bb      	ldr	r3, [r7, #8]
 80098d0:	0c1b      	lsrs	r3, r3, #16
 80098d2:	b2db      	uxtb	r3, r3
 80098d4:	2b01      	cmp	r3, #1
 80098d6:	d10c      	bne.n	80098f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	695b      	ldr	r3, [r3, #20]
 80098de:	43da      	mvns	r2, r3
 80098e0:	68bb      	ldr	r3, [r7, #8]
 80098e2:	4013      	ands	r3, r2
 80098e4:	b29b      	uxth	r3, r3
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	bf14      	ite	ne
 80098ea:	2301      	movne	r3, #1
 80098ec:	2300      	moveq	r3, #0
 80098ee:	b2db      	uxtb	r3, r3
 80098f0:	e00b      	b.n	800990a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	699b      	ldr	r3, [r3, #24]
 80098f8:	43da      	mvns	r2, r3
 80098fa:	68bb      	ldr	r3, [r7, #8]
 80098fc:	4013      	ands	r3, r2
 80098fe:	b29b      	uxth	r3, r3
 8009900:	2b00      	cmp	r3, #0
 8009902:	bf14      	ite	ne
 8009904:	2301      	movne	r3, #1
 8009906:	2300      	moveq	r3, #0
 8009908:	b2db      	uxtb	r3, r3
 800990a:	2b00      	cmp	r3, #0
 800990c:	d016      	beq.n	800993c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	2200      	movs	r2, #0
 8009912:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	2220      	movs	r2, #32
 8009918:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	2200      	movs	r2, #0
 8009920:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009928:	f043 0220 	orr.w	r2, r3, #32
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	2200      	movs	r2, #0
 8009934:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8009938:	2301      	movs	r3, #1
 800993a:	e021      	b.n	8009980 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800993c:	68bb      	ldr	r3, [r7, #8]
 800993e:	0c1b      	lsrs	r3, r3, #16
 8009940:	b2db      	uxtb	r3, r3
 8009942:	2b01      	cmp	r3, #1
 8009944:	d10c      	bne.n	8009960 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	695b      	ldr	r3, [r3, #20]
 800994c:	43da      	mvns	r2, r3
 800994e:	68bb      	ldr	r3, [r7, #8]
 8009950:	4013      	ands	r3, r2
 8009952:	b29b      	uxth	r3, r3
 8009954:	2b00      	cmp	r3, #0
 8009956:	bf14      	ite	ne
 8009958:	2301      	movne	r3, #1
 800995a:	2300      	moveq	r3, #0
 800995c:	b2db      	uxtb	r3, r3
 800995e:	e00b      	b.n	8009978 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	699b      	ldr	r3, [r3, #24]
 8009966:	43da      	mvns	r2, r3
 8009968:	68bb      	ldr	r3, [r7, #8]
 800996a:	4013      	ands	r3, r2
 800996c:	b29b      	uxth	r3, r3
 800996e:	2b00      	cmp	r3, #0
 8009970:	bf14      	ite	ne
 8009972:	2301      	movne	r3, #1
 8009974:	2300      	moveq	r3, #0
 8009976:	b2db      	uxtb	r3, r3
 8009978:	2b00      	cmp	r3, #0
 800997a:	f47f af6d 	bne.w	8009858 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800997e:	2300      	movs	r3, #0
}
 8009980:	4618      	mov	r0, r3
 8009982:	3710      	adds	r7, #16
 8009984:	46bd      	mov	sp, r7
 8009986:	bd80      	pop	{r7, pc}

08009988 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009988:	b580      	push	{r7, lr}
 800998a:	b084      	sub	sp, #16
 800998c:	af00      	add	r7, sp, #0
 800998e:	60f8      	str	r0, [r7, #12]
 8009990:	60b9      	str	r1, [r7, #8]
 8009992:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009994:	e034      	b.n	8009a00 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8009996:	68f8      	ldr	r0, [r7, #12]
 8009998:	f000 f915 	bl	8009bc6 <I2C_IsAcknowledgeFailed>
 800999c:	4603      	mov	r3, r0
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d001      	beq.n	80099a6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80099a2:	2301      	movs	r3, #1
 80099a4:	e034      	b.n	8009a10 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80099a6:	68bb      	ldr	r3, [r7, #8]
 80099a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099ac:	d028      	beq.n	8009a00 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80099ae:	f7fc f839 	bl	8005a24 <HAL_GetTick>
 80099b2:	4602      	mov	r2, r0
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	1ad3      	subs	r3, r2, r3
 80099b8:	68ba      	ldr	r2, [r7, #8]
 80099ba:	429a      	cmp	r2, r3
 80099bc:	d302      	bcc.n	80099c4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80099be:	68bb      	ldr	r3, [r7, #8]
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d11d      	bne.n	8009a00 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	695b      	ldr	r3, [r3, #20]
 80099ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80099ce:	2b80      	cmp	r3, #128	; 0x80
 80099d0:	d016      	beq.n	8009a00 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	2200      	movs	r2, #0
 80099d6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	2220      	movs	r2, #32
 80099dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	2200      	movs	r2, #0
 80099e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099ec:	f043 0220 	orr.w	r2, r3, #32
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	2200      	movs	r2, #0
 80099f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80099fc:	2301      	movs	r3, #1
 80099fe:	e007      	b.n	8009a10 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	695b      	ldr	r3, [r3, #20]
 8009a06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009a0a:	2b80      	cmp	r3, #128	; 0x80
 8009a0c:	d1c3      	bne.n	8009996 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8009a0e:	2300      	movs	r3, #0
}
 8009a10:	4618      	mov	r0, r3
 8009a12:	3710      	adds	r7, #16
 8009a14:	46bd      	mov	sp, r7
 8009a16:	bd80      	pop	{r7, pc}

08009a18 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009a18:	b580      	push	{r7, lr}
 8009a1a:	b084      	sub	sp, #16
 8009a1c:	af00      	add	r7, sp, #0
 8009a1e:	60f8      	str	r0, [r7, #12]
 8009a20:	60b9      	str	r1, [r7, #8]
 8009a22:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009a24:	e034      	b.n	8009a90 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8009a26:	68f8      	ldr	r0, [r7, #12]
 8009a28:	f000 f8cd 	bl	8009bc6 <I2C_IsAcknowledgeFailed>
 8009a2c:	4603      	mov	r3, r0
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d001      	beq.n	8009a36 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8009a32:	2301      	movs	r3, #1
 8009a34:	e034      	b.n	8009aa0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009a36:	68bb      	ldr	r3, [r7, #8]
 8009a38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a3c:	d028      	beq.n	8009a90 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009a3e:	f7fb fff1 	bl	8005a24 <HAL_GetTick>
 8009a42:	4602      	mov	r2, r0
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	1ad3      	subs	r3, r2, r3
 8009a48:	68ba      	ldr	r2, [r7, #8]
 8009a4a:	429a      	cmp	r2, r3
 8009a4c:	d302      	bcc.n	8009a54 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8009a4e:	68bb      	ldr	r3, [r7, #8]
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d11d      	bne.n	8009a90 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	695b      	ldr	r3, [r3, #20]
 8009a5a:	f003 0304 	and.w	r3, r3, #4
 8009a5e:	2b04      	cmp	r3, #4
 8009a60:	d016      	beq.n	8009a90 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	2200      	movs	r2, #0
 8009a66:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	2220      	movs	r2, #32
 8009a6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	2200      	movs	r2, #0
 8009a74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a7c:	f043 0220 	orr.w	r2, r3, #32
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	2200      	movs	r2, #0
 8009a88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8009a8c:	2301      	movs	r3, #1
 8009a8e:	e007      	b.n	8009aa0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	695b      	ldr	r3, [r3, #20]
 8009a96:	f003 0304 	and.w	r3, r3, #4
 8009a9a:	2b04      	cmp	r3, #4
 8009a9c:	d1c3      	bne.n	8009a26 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8009a9e:	2300      	movs	r3, #0
}
 8009aa0:	4618      	mov	r0, r3
 8009aa2:	3710      	adds	r7, #16
 8009aa4:	46bd      	mov	sp, r7
 8009aa6:	bd80      	pop	{r7, pc}

08009aa8 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8009aa8:	b480      	push	{r7}
 8009aaa:	b085      	sub	sp, #20
 8009aac:	af00      	add	r7, sp, #0
 8009aae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009ab0:	2300      	movs	r3, #0
 8009ab2:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8009ab4:	4b13      	ldr	r3, [pc, #76]	; (8009b04 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	08db      	lsrs	r3, r3, #3
 8009aba:	4a13      	ldr	r2, [pc, #76]	; (8009b08 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8009abc:	fba2 2303 	umull	r2, r3, r2, r3
 8009ac0:	0a1a      	lsrs	r2, r3, #8
 8009ac2:	4613      	mov	r3, r2
 8009ac4:	009b      	lsls	r3, r3, #2
 8009ac6:	4413      	add	r3, r2
 8009ac8:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	3b01      	subs	r3, #1
 8009ace:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d107      	bne.n	8009ae6 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ada:	f043 0220 	orr.w	r2, r3, #32
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8009ae2:	2301      	movs	r3, #1
 8009ae4:	e008      	b.n	8009af8 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009af0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009af4:	d0e9      	beq.n	8009aca <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8009af6:	2300      	movs	r3, #0
}
 8009af8:	4618      	mov	r0, r3
 8009afa:	3714      	adds	r7, #20
 8009afc:	46bd      	mov	sp, r7
 8009afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b02:	4770      	bx	lr
 8009b04:	20000040 	.word	0x20000040
 8009b08:	14f8b589 	.word	0x14f8b589

08009b0c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009b0c:	b580      	push	{r7, lr}
 8009b0e:	b084      	sub	sp, #16
 8009b10:	af00      	add	r7, sp, #0
 8009b12:	60f8      	str	r0, [r7, #12]
 8009b14:	60b9      	str	r1, [r7, #8]
 8009b16:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009b18:	e049      	b.n	8009bae <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	695b      	ldr	r3, [r3, #20]
 8009b20:	f003 0310 	and.w	r3, r3, #16
 8009b24:	2b10      	cmp	r3, #16
 8009b26:	d119      	bne.n	8009b5c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	f06f 0210 	mvn.w	r2, #16
 8009b30:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	2200      	movs	r2, #0
 8009b36:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	2220      	movs	r2, #32
 8009b3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	2200      	movs	r2, #0
 8009b44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	2200      	movs	r2, #0
 8009b54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009b58:	2301      	movs	r3, #1
 8009b5a:	e030      	b.n	8009bbe <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009b5c:	f7fb ff62 	bl	8005a24 <HAL_GetTick>
 8009b60:	4602      	mov	r2, r0
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	1ad3      	subs	r3, r2, r3
 8009b66:	68ba      	ldr	r2, [r7, #8]
 8009b68:	429a      	cmp	r2, r3
 8009b6a:	d302      	bcc.n	8009b72 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8009b6c:	68bb      	ldr	r3, [r7, #8]
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d11d      	bne.n	8009bae <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	695b      	ldr	r3, [r3, #20]
 8009b78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b7c:	2b40      	cmp	r3, #64	; 0x40
 8009b7e:	d016      	beq.n	8009bae <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	2200      	movs	r2, #0
 8009b84:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	2220      	movs	r2, #32
 8009b8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	2200      	movs	r2, #0
 8009b92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b9a:	f043 0220 	orr.w	r2, r3, #32
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	2200      	movs	r2, #0
 8009ba6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009baa:	2301      	movs	r3, #1
 8009bac:	e007      	b.n	8009bbe <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	695b      	ldr	r3, [r3, #20]
 8009bb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009bb8:	2b40      	cmp	r3, #64	; 0x40
 8009bba:	d1ae      	bne.n	8009b1a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009bbc:	2300      	movs	r3, #0
}
 8009bbe:	4618      	mov	r0, r3
 8009bc0:	3710      	adds	r7, #16
 8009bc2:	46bd      	mov	sp, r7
 8009bc4:	bd80      	pop	{r7, pc}

08009bc6 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8009bc6:	b480      	push	{r7}
 8009bc8:	b083      	sub	sp, #12
 8009bca:	af00      	add	r7, sp, #0
 8009bcc:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	695b      	ldr	r3, [r3, #20]
 8009bd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009bd8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009bdc:	d11b      	bne.n	8009c16 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009be6:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	2200      	movs	r2, #0
 8009bec:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	2220      	movs	r2, #32
 8009bf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	2200      	movs	r2, #0
 8009bfa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c02:	f043 0204 	orr.w	r2, r3, #4
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	2200      	movs	r2, #0
 8009c0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8009c12:	2301      	movs	r3, #1
 8009c14:	e000      	b.n	8009c18 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8009c16:	2300      	movs	r3, #0
}
 8009c18:	4618      	mov	r0, r3
 8009c1a:	370c      	adds	r7, #12
 8009c1c:	46bd      	mov	sp, r7
 8009c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c22:	4770      	bx	lr

08009c24 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8009c24:	b480      	push	{r7}
 8009c26:	b083      	sub	sp, #12
 8009c28:	af00      	add	r7, sp, #0
 8009c2a:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c30:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8009c34:	d103      	bne.n	8009c3e <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	2201      	movs	r2, #1
 8009c3a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8009c3c:	e007      	b.n	8009c4e <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c42:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8009c46:	d102      	bne.n	8009c4e <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	2208      	movs	r2, #8
 8009c4c:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8009c4e:	bf00      	nop
 8009c50:	370c      	adds	r7, #12
 8009c52:	46bd      	mov	sp, r7
 8009c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c58:	4770      	bx	lr

08009c5a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8009c5a:	b480      	push	{r7}
 8009c5c:	b083      	sub	sp, #12
 8009c5e:	af00      	add	r7, sp, #0
 8009c60:	6078      	str	r0, [r7, #4]
 8009c62:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009c6a:	b2db      	uxtb	r3, r3
 8009c6c:	2b20      	cmp	r3, #32
 8009c6e:	d129      	bne.n	8009cc4 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	2224      	movs	r2, #36	; 0x24
 8009c74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	681a      	ldr	r2, [r3, #0]
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	f022 0201 	bic.w	r2, r2, #1
 8009c86:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	f022 0210 	bic.w	r2, r2, #16
 8009c96:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	683a      	ldr	r2, [r7, #0]
 8009ca4:	430a      	orrs	r2, r1
 8009ca6:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	681a      	ldr	r2, [r3, #0]
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	f042 0201 	orr.w	r2, r2, #1
 8009cb6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	2220      	movs	r2, #32
 8009cbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8009cc0:	2300      	movs	r3, #0
 8009cc2:	e000      	b.n	8009cc6 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8009cc4:	2302      	movs	r3, #2
  }
}
 8009cc6:	4618      	mov	r0, r3
 8009cc8:	370c      	adds	r7, #12
 8009cca:	46bd      	mov	sp, r7
 8009ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cd0:	4770      	bx	lr

08009cd2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8009cd2:	b480      	push	{r7}
 8009cd4:	b085      	sub	sp, #20
 8009cd6:	af00      	add	r7, sp, #0
 8009cd8:	6078      	str	r0, [r7, #4]
 8009cda:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8009cdc:	2300      	movs	r3, #0
 8009cde:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009ce6:	b2db      	uxtb	r3, r3
 8009ce8:	2b20      	cmp	r3, #32
 8009cea:	d12a      	bne.n	8009d42 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	2224      	movs	r2, #36	; 0x24
 8009cf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	681a      	ldr	r2, [r3, #0]
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	f022 0201 	bic.w	r2, r2, #1
 8009d02:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d0a:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8009d0c:	89fb      	ldrh	r3, [r7, #14]
 8009d0e:	f023 030f 	bic.w	r3, r3, #15
 8009d12:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8009d14:	683b      	ldr	r3, [r7, #0]
 8009d16:	b29a      	uxth	r2, r3
 8009d18:	89fb      	ldrh	r3, [r7, #14]
 8009d1a:	4313      	orrs	r3, r2
 8009d1c:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	89fa      	ldrh	r2, [r7, #14]
 8009d24:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	681a      	ldr	r2, [r3, #0]
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	f042 0201 	orr.w	r2, r2, #1
 8009d34:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	2220      	movs	r2, #32
 8009d3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8009d3e:	2300      	movs	r3, #0
 8009d40:	e000      	b.n	8009d44 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8009d42:	2302      	movs	r3, #2
  }
}
 8009d44:	4618      	mov	r0, r3
 8009d46:	3714      	adds	r7, #20
 8009d48:	46bd      	mov	sp, r7
 8009d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d4e:	4770      	bx	lr

08009d50 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8009d50:	b580      	push	{r7, lr}
 8009d52:	b086      	sub	sp, #24
 8009d54:	af02      	add	r7, sp, #8
 8009d56:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d101      	bne.n	8009d62 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8009d5e:	2301      	movs	r3, #1
 8009d60:	e101      	b.n	8009f66 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 8009d6e:	b2db      	uxtb	r3, r3
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d106      	bne.n	8009d82 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	2200      	movs	r2, #0
 8009d78:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8009d7c:	6878      	ldr	r0, [r7, #4]
 8009d7e:	f00b fdb3 	bl	80158e8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	2203      	movs	r2, #3
 8009d86:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8009d8a:	68bb      	ldr	r3, [r7, #8]
 8009d8c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009d90:	d102      	bne.n	8009d98 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	2200      	movs	r2, #0
 8009d96:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	4618      	mov	r0, r3
 8009d9e:	f004 f942 	bl	800e026 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	6818      	ldr	r0, [r3, #0]
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	7c1a      	ldrb	r2, [r3, #16]
 8009daa:	f88d 2000 	strb.w	r2, [sp]
 8009dae:	3304      	adds	r3, #4
 8009db0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009db2:	f004 f821 	bl	800ddf8 <USB_CoreInit>
 8009db6:	4603      	mov	r3, r0
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d005      	beq.n	8009dc8 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	2202      	movs	r2, #2
 8009dc0:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8009dc4:	2301      	movs	r3, #1
 8009dc6:	e0ce      	b.n	8009f66 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	2100      	movs	r1, #0
 8009dce:	4618      	mov	r0, r3
 8009dd0:	f004 f93a 	bl	800e048 <USB_SetCurrentMode>
 8009dd4:	4603      	mov	r3, r0
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d005      	beq.n	8009de6 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	2202      	movs	r2, #2
 8009dde:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8009de2:	2301      	movs	r3, #1
 8009de4:	e0bf      	b.n	8009f66 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009de6:	2300      	movs	r3, #0
 8009de8:	73fb      	strb	r3, [r7, #15]
 8009dea:	e04a      	b.n	8009e82 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8009dec:	7bfa      	ldrb	r2, [r7, #15]
 8009dee:	6879      	ldr	r1, [r7, #4]
 8009df0:	4613      	mov	r3, r2
 8009df2:	00db      	lsls	r3, r3, #3
 8009df4:	4413      	add	r3, r2
 8009df6:	009b      	lsls	r3, r3, #2
 8009df8:	440b      	add	r3, r1
 8009dfa:	3315      	adds	r3, #21
 8009dfc:	2201      	movs	r2, #1
 8009dfe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8009e00:	7bfa      	ldrb	r2, [r7, #15]
 8009e02:	6879      	ldr	r1, [r7, #4]
 8009e04:	4613      	mov	r3, r2
 8009e06:	00db      	lsls	r3, r3, #3
 8009e08:	4413      	add	r3, r2
 8009e0a:	009b      	lsls	r3, r3, #2
 8009e0c:	440b      	add	r3, r1
 8009e0e:	3314      	adds	r3, #20
 8009e10:	7bfa      	ldrb	r2, [r7, #15]
 8009e12:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8009e14:	7bfa      	ldrb	r2, [r7, #15]
 8009e16:	7bfb      	ldrb	r3, [r7, #15]
 8009e18:	b298      	uxth	r0, r3
 8009e1a:	6879      	ldr	r1, [r7, #4]
 8009e1c:	4613      	mov	r3, r2
 8009e1e:	00db      	lsls	r3, r3, #3
 8009e20:	4413      	add	r3, r2
 8009e22:	009b      	lsls	r3, r3, #2
 8009e24:	440b      	add	r3, r1
 8009e26:	332e      	adds	r3, #46	; 0x2e
 8009e28:	4602      	mov	r2, r0
 8009e2a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8009e2c:	7bfa      	ldrb	r2, [r7, #15]
 8009e2e:	6879      	ldr	r1, [r7, #4]
 8009e30:	4613      	mov	r3, r2
 8009e32:	00db      	lsls	r3, r3, #3
 8009e34:	4413      	add	r3, r2
 8009e36:	009b      	lsls	r3, r3, #2
 8009e38:	440b      	add	r3, r1
 8009e3a:	3318      	adds	r3, #24
 8009e3c:	2200      	movs	r2, #0
 8009e3e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8009e40:	7bfa      	ldrb	r2, [r7, #15]
 8009e42:	6879      	ldr	r1, [r7, #4]
 8009e44:	4613      	mov	r3, r2
 8009e46:	00db      	lsls	r3, r3, #3
 8009e48:	4413      	add	r3, r2
 8009e4a:	009b      	lsls	r3, r3, #2
 8009e4c:	440b      	add	r3, r1
 8009e4e:	331c      	adds	r3, #28
 8009e50:	2200      	movs	r2, #0
 8009e52:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8009e54:	7bfa      	ldrb	r2, [r7, #15]
 8009e56:	6879      	ldr	r1, [r7, #4]
 8009e58:	4613      	mov	r3, r2
 8009e5a:	00db      	lsls	r3, r3, #3
 8009e5c:	4413      	add	r3, r2
 8009e5e:	009b      	lsls	r3, r3, #2
 8009e60:	440b      	add	r3, r1
 8009e62:	3320      	adds	r3, #32
 8009e64:	2200      	movs	r2, #0
 8009e66:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8009e68:	7bfa      	ldrb	r2, [r7, #15]
 8009e6a:	6879      	ldr	r1, [r7, #4]
 8009e6c:	4613      	mov	r3, r2
 8009e6e:	00db      	lsls	r3, r3, #3
 8009e70:	4413      	add	r3, r2
 8009e72:	009b      	lsls	r3, r3, #2
 8009e74:	440b      	add	r3, r1
 8009e76:	3324      	adds	r3, #36	; 0x24
 8009e78:	2200      	movs	r2, #0
 8009e7a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009e7c:	7bfb      	ldrb	r3, [r7, #15]
 8009e7e:	3301      	adds	r3, #1
 8009e80:	73fb      	strb	r3, [r7, #15]
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	791b      	ldrb	r3, [r3, #4]
 8009e86:	7bfa      	ldrb	r2, [r7, #15]
 8009e88:	429a      	cmp	r2, r3
 8009e8a:	d3af      	bcc.n	8009dec <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009e8c:	2300      	movs	r3, #0
 8009e8e:	73fb      	strb	r3, [r7, #15]
 8009e90:	e044      	b.n	8009f1c <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8009e92:	7bfa      	ldrb	r2, [r7, #15]
 8009e94:	6879      	ldr	r1, [r7, #4]
 8009e96:	4613      	mov	r3, r2
 8009e98:	00db      	lsls	r3, r3, #3
 8009e9a:	4413      	add	r3, r2
 8009e9c:	009b      	lsls	r3, r3, #2
 8009e9e:	440b      	add	r3, r1
 8009ea0:	f203 2355 	addw	r3, r3, #597	; 0x255
 8009ea4:	2200      	movs	r2, #0
 8009ea6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8009ea8:	7bfa      	ldrb	r2, [r7, #15]
 8009eaa:	6879      	ldr	r1, [r7, #4]
 8009eac:	4613      	mov	r3, r2
 8009eae:	00db      	lsls	r3, r3, #3
 8009eb0:	4413      	add	r3, r2
 8009eb2:	009b      	lsls	r3, r3, #2
 8009eb4:	440b      	add	r3, r1
 8009eb6:	f503 7315 	add.w	r3, r3, #596	; 0x254
 8009eba:	7bfa      	ldrb	r2, [r7, #15]
 8009ebc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8009ebe:	7bfa      	ldrb	r2, [r7, #15]
 8009ec0:	6879      	ldr	r1, [r7, #4]
 8009ec2:	4613      	mov	r3, r2
 8009ec4:	00db      	lsls	r3, r3, #3
 8009ec6:	4413      	add	r3, r2
 8009ec8:	009b      	lsls	r3, r3, #2
 8009eca:	440b      	add	r3, r1
 8009ecc:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8009ed0:	2200      	movs	r2, #0
 8009ed2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8009ed4:	7bfa      	ldrb	r2, [r7, #15]
 8009ed6:	6879      	ldr	r1, [r7, #4]
 8009ed8:	4613      	mov	r3, r2
 8009eda:	00db      	lsls	r3, r3, #3
 8009edc:	4413      	add	r3, r2
 8009ede:	009b      	lsls	r3, r3, #2
 8009ee0:	440b      	add	r3, r1
 8009ee2:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 8009ee6:	2200      	movs	r2, #0
 8009ee8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8009eea:	7bfa      	ldrb	r2, [r7, #15]
 8009eec:	6879      	ldr	r1, [r7, #4]
 8009eee:	4613      	mov	r3, r2
 8009ef0:	00db      	lsls	r3, r3, #3
 8009ef2:	4413      	add	r3, r2
 8009ef4:	009b      	lsls	r3, r3, #2
 8009ef6:	440b      	add	r3, r1
 8009ef8:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8009efc:	2200      	movs	r2, #0
 8009efe:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8009f00:	7bfa      	ldrb	r2, [r7, #15]
 8009f02:	6879      	ldr	r1, [r7, #4]
 8009f04:	4613      	mov	r3, r2
 8009f06:	00db      	lsls	r3, r3, #3
 8009f08:	4413      	add	r3, r2
 8009f0a:	009b      	lsls	r3, r3, #2
 8009f0c:	440b      	add	r3, r1
 8009f0e:	f503 7319 	add.w	r3, r3, #612	; 0x264
 8009f12:	2200      	movs	r2, #0
 8009f14:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009f16:	7bfb      	ldrb	r3, [r7, #15]
 8009f18:	3301      	adds	r3, #1
 8009f1a:	73fb      	strb	r3, [r7, #15]
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	791b      	ldrb	r3, [r3, #4]
 8009f20:	7bfa      	ldrb	r2, [r7, #15]
 8009f22:	429a      	cmp	r2, r3
 8009f24:	d3b5      	bcc.n	8009e92 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	6818      	ldr	r0, [r3, #0]
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	7c1a      	ldrb	r2, [r3, #16]
 8009f2e:	f88d 2000 	strb.w	r2, [sp]
 8009f32:	3304      	adds	r3, #4
 8009f34:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009f36:	f004 f8d3 	bl	800e0e0 <USB_DevInit>
 8009f3a:	4603      	mov	r3, r0
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d005      	beq.n	8009f4c <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	2202      	movs	r2, #2
 8009f44:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8009f48:	2301      	movs	r3, #1
 8009f4a:	e00c      	b.n	8009f66 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	2200      	movs	r2, #0
 8009f50:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	2201      	movs	r2, #1
 8009f56:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	4618      	mov	r0, r3
 8009f60:	f005 f917 	bl	800f192 <USB_DevDisconnect>

  return HAL_OK;
 8009f64:	2300      	movs	r3, #0
}
 8009f66:	4618      	mov	r0, r3
 8009f68:	3710      	adds	r7, #16
 8009f6a:	46bd      	mov	sp, r7
 8009f6c:	bd80      	pop	{r7, pc}

08009f6e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8009f6e:	b580      	push	{r7, lr}
 8009f70:	b084      	sub	sp, #16
 8009f72:	af00      	add	r7, sp, #0
 8009f74:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8009f82:	2b01      	cmp	r3, #1
 8009f84:	d101      	bne.n	8009f8a <HAL_PCD_Start+0x1c>
 8009f86:	2302      	movs	r3, #2
 8009f88:	e022      	b.n	8009fd0 <HAL_PCD_Start+0x62>
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	2201      	movs	r2, #1
 8009f8e:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	68db      	ldr	r3, [r3, #12]
 8009f96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d009      	beq.n	8009fb2 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8009fa2:	2b01      	cmp	r3, #1
 8009fa4:	d105      	bne.n	8009fb2 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009faa:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	4618      	mov	r0, r3
 8009fb8:	f004 f824 	bl	800e004 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	4618      	mov	r0, r3
 8009fc2:	f005 f8c5 	bl	800f150 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	2200      	movs	r2, #0
 8009fca:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8009fce:	2300      	movs	r3, #0
}
 8009fd0:	4618      	mov	r0, r3
 8009fd2:	3710      	adds	r7, #16
 8009fd4:	46bd      	mov	sp, r7
 8009fd6:	bd80      	pop	{r7, pc}

08009fd8 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8009fd8:	b590      	push	{r4, r7, lr}
 8009fda:	b08d      	sub	sp, #52	; 0x34
 8009fdc:	af00      	add	r7, sp, #0
 8009fde:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009fe6:	6a3b      	ldr	r3, [r7, #32]
 8009fe8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	4618      	mov	r0, r3
 8009ff0:	f005 f983 	bl	800f2fa <USB_GetMode>
 8009ff4:	4603      	mov	r3, r0
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	f040 848c 	bne.w	800a914 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	4618      	mov	r0, r3
 800a002:	f005 f8e7 	bl	800f1d4 <USB_ReadInterrupts>
 800a006:	4603      	mov	r3, r0
 800a008:	2b00      	cmp	r3, #0
 800a00a:	f000 8482 	beq.w	800a912 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800a00e:	69fb      	ldr	r3, [r7, #28]
 800a010:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a014:	689b      	ldr	r3, [r3, #8]
 800a016:	0a1b      	lsrs	r3, r3, #8
 800a018:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	f8c3 24d4 	str.w	r2, [r3, #1236]	; 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	4618      	mov	r0, r3
 800a028:	f005 f8d4 	bl	800f1d4 <USB_ReadInterrupts>
 800a02c:	4603      	mov	r3, r0
 800a02e:	f003 0302 	and.w	r3, r3, #2
 800a032:	2b02      	cmp	r3, #2
 800a034:	d107      	bne.n	800a046 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	695a      	ldr	r2, [r3, #20]
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	f002 0202 	and.w	r2, r2, #2
 800a044:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	4618      	mov	r0, r3
 800a04c:	f005 f8c2 	bl	800f1d4 <USB_ReadInterrupts>
 800a050:	4603      	mov	r3, r0
 800a052:	f003 0310 	and.w	r3, r3, #16
 800a056:	2b10      	cmp	r3, #16
 800a058:	d161      	bne.n	800a11e <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	699a      	ldr	r2, [r3, #24]
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	f022 0210 	bic.w	r2, r2, #16
 800a068:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800a06a:	6a3b      	ldr	r3, [r7, #32]
 800a06c:	6a1b      	ldr	r3, [r3, #32]
 800a06e:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800a070:	69bb      	ldr	r3, [r7, #24]
 800a072:	f003 020f 	and.w	r2, r3, #15
 800a076:	4613      	mov	r3, r2
 800a078:	00db      	lsls	r3, r3, #3
 800a07a:	4413      	add	r3, r2
 800a07c:	009b      	lsls	r3, r3, #2
 800a07e:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800a082:	687a      	ldr	r2, [r7, #4]
 800a084:	4413      	add	r3, r2
 800a086:	3304      	adds	r3, #4
 800a088:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800a08a:	69bb      	ldr	r3, [r7, #24]
 800a08c:	0c5b      	lsrs	r3, r3, #17
 800a08e:	f003 030f 	and.w	r3, r3, #15
 800a092:	2b02      	cmp	r3, #2
 800a094:	d124      	bne.n	800a0e0 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800a096:	69ba      	ldr	r2, [r7, #24]
 800a098:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800a09c:	4013      	ands	r3, r2
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d035      	beq.n	800a10e <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800a0a2:	697b      	ldr	r3, [r7, #20]
 800a0a4:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800a0a6:	69bb      	ldr	r3, [r7, #24]
 800a0a8:	091b      	lsrs	r3, r3, #4
 800a0aa:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800a0ac:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a0b0:	b29b      	uxth	r3, r3
 800a0b2:	461a      	mov	r2, r3
 800a0b4:	6a38      	ldr	r0, [r7, #32]
 800a0b6:	f004 fef9 	bl	800eeac <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800a0ba:	697b      	ldr	r3, [r7, #20]
 800a0bc:	68da      	ldr	r2, [r3, #12]
 800a0be:	69bb      	ldr	r3, [r7, #24]
 800a0c0:	091b      	lsrs	r3, r3, #4
 800a0c2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a0c6:	441a      	add	r2, r3
 800a0c8:	697b      	ldr	r3, [r7, #20]
 800a0ca:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800a0cc:	697b      	ldr	r3, [r7, #20]
 800a0ce:	695a      	ldr	r2, [r3, #20]
 800a0d0:	69bb      	ldr	r3, [r7, #24]
 800a0d2:	091b      	lsrs	r3, r3, #4
 800a0d4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a0d8:	441a      	add	r2, r3
 800a0da:	697b      	ldr	r3, [r7, #20]
 800a0dc:	615a      	str	r2, [r3, #20]
 800a0de:	e016      	b.n	800a10e <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800a0e0:	69bb      	ldr	r3, [r7, #24]
 800a0e2:	0c5b      	lsrs	r3, r3, #17
 800a0e4:	f003 030f 	and.w	r3, r3, #15
 800a0e8:	2b06      	cmp	r3, #6
 800a0ea:	d110      	bne.n	800a10e <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 800a0f2:	2208      	movs	r2, #8
 800a0f4:	4619      	mov	r1, r3
 800a0f6:	6a38      	ldr	r0, [r7, #32]
 800a0f8:	f004 fed8 	bl	800eeac <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800a0fc:	697b      	ldr	r3, [r7, #20]
 800a0fe:	695a      	ldr	r2, [r3, #20]
 800a100:	69bb      	ldr	r3, [r7, #24]
 800a102:	091b      	lsrs	r3, r3, #4
 800a104:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a108:	441a      	add	r2, r3
 800a10a:	697b      	ldr	r3, [r7, #20]
 800a10c:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	699a      	ldr	r2, [r3, #24]
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	f042 0210 	orr.w	r2, r2, #16
 800a11c:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	4618      	mov	r0, r3
 800a124:	f005 f856 	bl	800f1d4 <USB_ReadInterrupts>
 800a128:	4603      	mov	r3, r0
 800a12a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a12e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800a132:	f040 80a7 	bne.w	800a284 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800a136:	2300      	movs	r3, #0
 800a138:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	4618      	mov	r0, r3
 800a140:	f005 f85b 	bl	800f1fa <USB_ReadDevAllOutEpInterrupt>
 800a144:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800a146:	e099      	b.n	800a27c <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800a148:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a14a:	f003 0301 	and.w	r3, r3, #1
 800a14e:	2b00      	cmp	r3, #0
 800a150:	f000 808e 	beq.w	800a270 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a15a:	b2d2      	uxtb	r2, r2
 800a15c:	4611      	mov	r1, r2
 800a15e:	4618      	mov	r0, r3
 800a160:	f005 f87f 	bl	800f262 <USB_ReadDevOutEPInterrupt>
 800a164:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800a166:	693b      	ldr	r3, [r7, #16]
 800a168:	f003 0301 	and.w	r3, r3, #1
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d00c      	beq.n	800a18a <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800a170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a172:	015a      	lsls	r2, r3, #5
 800a174:	69fb      	ldr	r3, [r7, #28]
 800a176:	4413      	add	r3, r2
 800a178:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a17c:	461a      	mov	r2, r3
 800a17e:	2301      	movs	r3, #1
 800a180:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800a182:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a184:	6878      	ldr	r0, [r7, #4]
 800a186:	f000 fea1 	bl	800aecc <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800a18a:	693b      	ldr	r3, [r7, #16]
 800a18c:	f003 0308 	and.w	r3, r3, #8
 800a190:	2b00      	cmp	r3, #0
 800a192:	d00c      	beq.n	800a1ae <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800a194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a196:	015a      	lsls	r2, r3, #5
 800a198:	69fb      	ldr	r3, [r7, #28]
 800a19a:	4413      	add	r3, r2
 800a19c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a1a0:	461a      	mov	r2, r3
 800a1a2:	2308      	movs	r3, #8
 800a1a4:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800a1a6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a1a8:	6878      	ldr	r0, [r7, #4]
 800a1aa:	f000 ff77 	bl	800b09c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800a1ae:	693b      	ldr	r3, [r7, #16]
 800a1b0:	f003 0310 	and.w	r3, r3, #16
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d008      	beq.n	800a1ca <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800a1b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1ba:	015a      	lsls	r2, r3, #5
 800a1bc:	69fb      	ldr	r3, [r7, #28]
 800a1be:	4413      	add	r3, r2
 800a1c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a1c4:	461a      	mov	r2, r3
 800a1c6:	2310      	movs	r3, #16
 800a1c8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800a1ca:	693b      	ldr	r3, [r7, #16]
 800a1cc:	f003 0302 	and.w	r3, r3, #2
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d030      	beq.n	800a236 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800a1d4:	6a3b      	ldr	r3, [r7, #32]
 800a1d6:	695b      	ldr	r3, [r3, #20]
 800a1d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a1dc:	2b80      	cmp	r3, #128	; 0x80
 800a1de:	d109      	bne.n	800a1f4 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800a1e0:	69fb      	ldr	r3, [r7, #28]
 800a1e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a1e6:	685b      	ldr	r3, [r3, #4]
 800a1e8:	69fa      	ldr	r2, [r7, #28]
 800a1ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a1ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a1f2:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800a1f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a1f6:	4613      	mov	r3, r2
 800a1f8:	00db      	lsls	r3, r3, #3
 800a1fa:	4413      	add	r3, r2
 800a1fc:	009b      	lsls	r3, r3, #2
 800a1fe:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800a202:	687a      	ldr	r2, [r7, #4]
 800a204:	4413      	add	r3, r2
 800a206:	3304      	adds	r3, #4
 800a208:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800a20a:	697b      	ldr	r3, [r7, #20]
 800a20c:	78db      	ldrb	r3, [r3, #3]
 800a20e:	2b01      	cmp	r3, #1
 800a210:	d108      	bne.n	800a224 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800a212:	697b      	ldr	r3, [r7, #20]
 800a214:	2200      	movs	r2, #0
 800a216:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800a218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a21a:	b2db      	uxtb	r3, r3
 800a21c:	4619      	mov	r1, r3
 800a21e:	6878      	ldr	r0, [r7, #4]
 800a220:	f00b fc5e 	bl	8015ae0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800a224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a226:	015a      	lsls	r2, r3, #5
 800a228:	69fb      	ldr	r3, [r7, #28]
 800a22a:	4413      	add	r3, r2
 800a22c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a230:	461a      	mov	r2, r3
 800a232:	2302      	movs	r3, #2
 800a234:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800a236:	693b      	ldr	r3, [r7, #16]
 800a238:	f003 0320 	and.w	r3, r3, #32
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d008      	beq.n	800a252 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800a240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a242:	015a      	lsls	r2, r3, #5
 800a244:	69fb      	ldr	r3, [r7, #28]
 800a246:	4413      	add	r3, r2
 800a248:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a24c:	461a      	mov	r2, r3
 800a24e:	2320      	movs	r3, #32
 800a250:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800a252:	693b      	ldr	r3, [r7, #16]
 800a254:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d009      	beq.n	800a270 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800a25c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a25e:	015a      	lsls	r2, r3, #5
 800a260:	69fb      	ldr	r3, [r7, #28]
 800a262:	4413      	add	r3, r2
 800a264:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a268:	461a      	mov	r2, r3
 800a26a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a26e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800a270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a272:	3301      	adds	r3, #1
 800a274:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800a276:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a278:	085b      	lsrs	r3, r3, #1
 800a27a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800a27c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a27e:	2b00      	cmp	r3, #0
 800a280:	f47f af62 	bne.w	800a148 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	4618      	mov	r0, r3
 800a28a:	f004 ffa3 	bl	800f1d4 <USB_ReadInterrupts>
 800a28e:	4603      	mov	r3, r0
 800a290:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a294:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a298:	f040 80db 	bne.w	800a452 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	4618      	mov	r0, r3
 800a2a2:	f004 ffc4 	bl	800f22e <USB_ReadDevAllInEpInterrupt>
 800a2a6:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800a2a8:	2300      	movs	r3, #0
 800a2aa:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800a2ac:	e0cd      	b.n	800a44a <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800a2ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2b0:	f003 0301 	and.w	r3, r3, #1
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	f000 80c2 	beq.w	800a43e <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a2c0:	b2d2      	uxtb	r2, r2
 800a2c2:	4611      	mov	r1, r2
 800a2c4:	4618      	mov	r0, r3
 800a2c6:	f004 ffea 	bl	800f29e <USB_ReadDevInEPInterrupt>
 800a2ca:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800a2cc:	693b      	ldr	r3, [r7, #16]
 800a2ce:	f003 0301 	and.w	r3, r3, #1
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d057      	beq.n	800a386 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800a2d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2d8:	f003 030f 	and.w	r3, r3, #15
 800a2dc:	2201      	movs	r2, #1
 800a2de:	fa02 f303 	lsl.w	r3, r2, r3
 800a2e2:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800a2e4:	69fb      	ldr	r3, [r7, #28]
 800a2e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a2ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	43db      	mvns	r3, r3
 800a2f0:	69f9      	ldr	r1, [r7, #28]
 800a2f2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a2f6:	4013      	ands	r3, r2
 800a2f8:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800a2fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2fc:	015a      	lsls	r2, r3, #5
 800a2fe:	69fb      	ldr	r3, [r7, #28]
 800a300:	4413      	add	r3, r2
 800a302:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a306:	461a      	mov	r2, r3
 800a308:	2301      	movs	r3, #1
 800a30a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	799b      	ldrb	r3, [r3, #6]
 800a310:	2b01      	cmp	r3, #1
 800a312:	d132      	bne.n	800a37a <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800a314:	6879      	ldr	r1, [r7, #4]
 800a316:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a318:	4613      	mov	r3, r2
 800a31a:	00db      	lsls	r3, r3, #3
 800a31c:	4413      	add	r3, r2
 800a31e:	009b      	lsls	r3, r3, #2
 800a320:	440b      	add	r3, r1
 800a322:	3320      	adds	r3, #32
 800a324:	6819      	ldr	r1, [r3, #0]
 800a326:	6878      	ldr	r0, [r7, #4]
 800a328:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a32a:	4613      	mov	r3, r2
 800a32c:	00db      	lsls	r3, r3, #3
 800a32e:	4413      	add	r3, r2
 800a330:	009b      	lsls	r3, r3, #2
 800a332:	4403      	add	r3, r0
 800a334:	331c      	adds	r3, #28
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	4419      	add	r1, r3
 800a33a:	6878      	ldr	r0, [r7, #4]
 800a33c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a33e:	4613      	mov	r3, r2
 800a340:	00db      	lsls	r3, r3, #3
 800a342:	4413      	add	r3, r2
 800a344:	009b      	lsls	r3, r3, #2
 800a346:	4403      	add	r3, r0
 800a348:	3320      	adds	r3, #32
 800a34a:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800a34c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d113      	bne.n	800a37a <HAL_PCD_IRQHandler+0x3a2>
 800a352:	6879      	ldr	r1, [r7, #4]
 800a354:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a356:	4613      	mov	r3, r2
 800a358:	00db      	lsls	r3, r3, #3
 800a35a:	4413      	add	r3, r2
 800a35c:	009b      	lsls	r3, r3, #2
 800a35e:	440b      	add	r3, r1
 800a360:	3324      	adds	r3, #36	; 0x24
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	2b00      	cmp	r3, #0
 800a366:	d108      	bne.n	800a37a <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	6818      	ldr	r0, [r3, #0]
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 800a372:	461a      	mov	r2, r3
 800a374:	2101      	movs	r1, #1
 800a376:	f004 fff1 	bl	800f35c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800a37a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a37c:	b2db      	uxtb	r3, r3
 800a37e:	4619      	mov	r1, r3
 800a380:	6878      	ldr	r0, [r7, #4]
 800a382:	f00b fb32 	bl	80159ea <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800a386:	693b      	ldr	r3, [r7, #16]
 800a388:	f003 0308 	and.w	r3, r3, #8
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d008      	beq.n	800a3a2 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800a390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a392:	015a      	lsls	r2, r3, #5
 800a394:	69fb      	ldr	r3, [r7, #28]
 800a396:	4413      	add	r3, r2
 800a398:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a39c:	461a      	mov	r2, r3
 800a39e:	2308      	movs	r3, #8
 800a3a0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800a3a2:	693b      	ldr	r3, [r7, #16]
 800a3a4:	f003 0310 	and.w	r3, r3, #16
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d008      	beq.n	800a3be <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800a3ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3ae:	015a      	lsls	r2, r3, #5
 800a3b0:	69fb      	ldr	r3, [r7, #28]
 800a3b2:	4413      	add	r3, r2
 800a3b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a3b8:	461a      	mov	r2, r3
 800a3ba:	2310      	movs	r3, #16
 800a3bc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800a3be:	693b      	ldr	r3, [r7, #16]
 800a3c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d008      	beq.n	800a3da <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800a3c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3ca:	015a      	lsls	r2, r3, #5
 800a3cc:	69fb      	ldr	r3, [r7, #28]
 800a3ce:	4413      	add	r3, r2
 800a3d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a3d4:	461a      	mov	r2, r3
 800a3d6:	2340      	movs	r3, #64	; 0x40
 800a3d8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800a3da:	693b      	ldr	r3, [r7, #16]
 800a3dc:	f003 0302 	and.w	r3, r3, #2
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d023      	beq.n	800a42c <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800a3e4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a3e6:	6a38      	ldr	r0, [r7, #32]
 800a3e8:	f003 ffde 	bl	800e3a8 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800a3ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a3ee:	4613      	mov	r3, r2
 800a3f0:	00db      	lsls	r3, r3, #3
 800a3f2:	4413      	add	r3, r2
 800a3f4:	009b      	lsls	r3, r3, #2
 800a3f6:	3310      	adds	r3, #16
 800a3f8:	687a      	ldr	r2, [r7, #4]
 800a3fa:	4413      	add	r3, r2
 800a3fc:	3304      	adds	r3, #4
 800a3fe:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800a400:	697b      	ldr	r3, [r7, #20]
 800a402:	78db      	ldrb	r3, [r3, #3]
 800a404:	2b01      	cmp	r3, #1
 800a406:	d108      	bne.n	800a41a <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800a408:	697b      	ldr	r3, [r7, #20]
 800a40a:	2200      	movs	r2, #0
 800a40c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800a40e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a410:	b2db      	uxtb	r3, r3
 800a412:	4619      	mov	r1, r3
 800a414:	6878      	ldr	r0, [r7, #4]
 800a416:	f00b fb75 	bl	8015b04 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800a41a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a41c:	015a      	lsls	r2, r3, #5
 800a41e:	69fb      	ldr	r3, [r7, #28]
 800a420:	4413      	add	r3, r2
 800a422:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a426:	461a      	mov	r2, r3
 800a428:	2302      	movs	r3, #2
 800a42a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800a42c:	693b      	ldr	r3, [r7, #16]
 800a42e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a432:	2b00      	cmp	r3, #0
 800a434:	d003      	beq.n	800a43e <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800a436:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a438:	6878      	ldr	r0, [r7, #4]
 800a43a:	f000 fcbb 	bl	800adb4 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800a43e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a440:	3301      	adds	r3, #1
 800a442:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800a444:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a446:	085b      	lsrs	r3, r3, #1
 800a448:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800a44a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	f47f af2e 	bne.w	800a2ae <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	4618      	mov	r0, r3
 800a458:	f004 febc 	bl	800f1d4 <USB_ReadInterrupts>
 800a45c:	4603      	mov	r3, r0
 800a45e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a462:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a466:	d122      	bne.n	800a4ae <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800a468:	69fb      	ldr	r3, [r7, #28]
 800a46a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a46e:	685b      	ldr	r3, [r3, #4]
 800a470:	69fa      	ldr	r2, [r7, #28]
 800a472:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a476:	f023 0301 	bic.w	r3, r3, #1
 800a47a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	f893 34cc 	ldrb.w	r3, [r3, #1228]	; 0x4cc
 800a482:	2b01      	cmp	r3, #1
 800a484:	d108      	bne.n	800a498 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	2200      	movs	r2, #0
 800a48a:	f883 24cc 	strb.w	r2, [r3, #1228]	; 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800a48e:	2100      	movs	r1, #0
 800a490:	6878      	ldr	r0, [r7, #4]
 800a492:	f000 fea1 	bl	800b1d8 <HAL_PCDEx_LPM_Callback>
 800a496:	e002      	b.n	800a49e <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800a498:	6878      	ldr	r0, [r7, #4]
 800a49a:	f00b fb13 	bl	8015ac4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	695a      	ldr	r2, [r3, #20]
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800a4ac:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	4618      	mov	r0, r3
 800a4b4:	f004 fe8e 	bl	800f1d4 <USB_ReadInterrupts>
 800a4b8:	4603      	mov	r3, r0
 800a4ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a4be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a4c2:	d112      	bne.n	800a4ea <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800a4c4:	69fb      	ldr	r3, [r7, #28]
 800a4c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a4ca:	689b      	ldr	r3, [r3, #8]
 800a4cc:	f003 0301 	and.w	r3, r3, #1
 800a4d0:	2b01      	cmp	r3, #1
 800a4d2:	d102      	bne.n	800a4da <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800a4d4:	6878      	ldr	r0, [r7, #4]
 800a4d6:	f00b facf 	bl	8015a78 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	695a      	ldr	r2, [r3, #20]
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800a4e8:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	4618      	mov	r0, r3
 800a4f0:	f004 fe70 	bl	800f1d4 <USB_ReadInterrupts>
 800a4f4:	4603      	mov	r3, r0
 800a4f6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a4fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a4fe:	f040 80b7 	bne.w	800a670 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800a502:	69fb      	ldr	r3, [r7, #28]
 800a504:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a508:	685b      	ldr	r3, [r3, #4]
 800a50a:	69fa      	ldr	r2, [r7, #28]
 800a50c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a510:	f023 0301 	bic.w	r3, r3, #1
 800a514:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	2110      	movs	r1, #16
 800a51c:	4618      	mov	r0, r3
 800a51e:	f003 ff43 	bl	800e3a8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a522:	2300      	movs	r3, #0
 800a524:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a526:	e046      	b.n	800a5b6 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800a528:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a52a:	015a      	lsls	r2, r3, #5
 800a52c:	69fb      	ldr	r3, [r7, #28]
 800a52e:	4413      	add	r3, r2
 800a530:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a534:	461a      	mov	r2, r3
 800a536:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a53a:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800a53c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a53e:	015a      	lsls	r2, r3, #5
 800a540:	69fb      	ldr	r3, [r7, #28]
 800a542:	4413      	add	r3, r2
 800a544:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a54c:	0151      	lsls	r1, r2, #5
 800a54e:	69fa      	ldr	r2, [r7, #28]
 800a550:	440a      	add	r2, r1
 800a552:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a556:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a55a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800a55c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a55e:	015a      	lsls	r2, r3, #5
 800a560:	69fb      	ldr	r3, [r7, #28]
 800a562:	4413      	add	r3, r2
 800a564:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a568:	461a      	mov	r2, r3
 800a56a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a56e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800a570:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a572:	015a      	lsls	r2, r3, #5
 800a574:	69fb      	ldr	r3, [r7, #28]
 800a576:	4413      	add	r3, r2
 800a578:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a580:	0151      	lsls	r1, r2, #5
 800a582:	69fa      	ldr	r2, [r7, #28]
 800a584:	440a      	add	r2, r1
 800a586:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a58a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a58e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800a590:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a592:	015a      	lsls	r2, r3, #5
 800a594:	69fb      	ldr	r3, [r7, #28]
 800a596:	4413      	add	r3, r2
 800a598:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a5a0:	0151      	lsls	r1, r2, #5
 800a5a2:	69fa      	ldr	r2, [r7, #28]
 800a5a4:	440a      	add	r2, r1
 800a5a6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a5aa:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a5ae:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a5b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5b2:	3301      	adds	r3, #1
 800a5b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	791b      	ldrb	r3, [r3, #4]
 800a5ba:	461a      	mov	r2, r3
 800a5bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5be:	4293      	cmp	r3, r2
 800a5c0:	d3b2      	bcc.n	800a528 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800a5c2:	69fb      	ldr	r3, [r7, #28]
 800a5c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a5c8:	69db      	ldr	r3, [r3, #28]
 800a5ca:	69fa      	ldr	r2, [r7, #28]
 800a5cc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a5d0:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800a5d4:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	7bdb      	ldrb	r3, [r3, #15]
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d016      	beq.n	800a60c <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800a5de:	69fb      	ldr	r3, [r7, #28]
 800a5e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a5e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a5e8:	69fa      	ldr	r2, [r7, #28]
 800a5ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a5ee:	f043 030b 	orr.w	r3, r3, #11
 800a5f2:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800a5f6:	69fb      	ldr	r3, [r7, #28]
 800a5f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a5fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a5fe:	69fa      	ldr	r2, [r7, #28]
 800a600:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a604:	f043 030b 	orr.w	r3, r3, #11
 800a608:	6453      	str	r3, [r2, #68]	; 0x44
 800a60a:	e015      	b.n	800a638 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800a60c:	69fb      	ldr	r3, [r7, #28]
 800a60e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a612:	695b      	ldr	r3, [r3, #20]
 800a614:	69fa      	ldr	r2, [r7, #28]
 800a616:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a61a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800a61e:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800a622:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800a624:	69fb      	ldr	r3, [r7, #28]
 800a626:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a62a:	691b      	ldr	r3, [r3, #16]
 800a62c:	69fa      	ldr	r2, [r7, #28]
 800a62e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a632:	f043 030b 	orr.w	r3, r3, #11
 800a636:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800a638:	69fb      	ldr	r3, [r7, #28]
 800a63a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	69fa      	ldr	r2, [r7, #28]
 800a642:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a646:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800a64a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	6818      	ldr	r0, [r3, #0]
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	f203 439c 	addw	r3, r3, #1180	; 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800a65a:	461a      	mov	r2, r3
 800a65c:	f004 fe7e 	bl	800f35c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	695a      	ldr	r2, [r3, #20]
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800a66e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	4618      	mov	r0, r3
 800a676:	f004 fdad 	bl	800f1d4 <USB_ReadInterrupts>
 800a67a:	4603      	mov	r3, r0
 800a67c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a680:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a684:	d123      	bne.n	800a6ce <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	4618      	mov	r0, r3
 800a68c:	f004 fe43 	bl	800f316 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	4618      	mov	r0, r3
 800a696:	f003 ff00 	bl	800e49a <USB_GetDevSpeed>
 800a69a:	4603      	mov	r3, r0
 800a69c:	461a      	mov	r2, r3
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	681c      	ldr	r4, [r3, #0]
 800a6a6:	f001 f9c7 	bl	800ba38 <HAL_RCC_GetHCLKFreq>
 800a6aa:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800a6b0:	461a      	mov	r2, r3
 800a6b2:	4620      	mov	r0, r4
 800a6b4:	f003 fc04 	bl	800dec0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800a6b8:	6878      	ldr	r0, [r7, #4]
 800a6ba:	f00b f9be 	bl	8015a3a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	695a      	ldr	r2, [r3, #20]
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800a6cc:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	4618      	mov	r0, r3
 800a6d4:	f004 fd7e 	bl	800f1d4 <USB_ReadInterrupts>
 800a6d8:	4603      	mov	r3, r0
 800a6da:	f003 0308 	and.w	r3, r3, #8
 800a6de:	2b08      	cmp	r3, #8
 800a6e0:	d10a      	bne.n	800a6f8 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800a6e2:	6878      	ldr	r0, [r7, #4]
 800a6e4:	f00b f99b 	bl	8015a1e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	695a      	ldr	r2, [r3, #20]
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	f002 0208 	and.w	r2, r2, #8
 800a6f6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	4618      	mov	r0, r3
 800a6fe:	f004 fd69 	bl	800f1d4 <USB_ReadInterrupts>
 800a702:	4603      	mov	r3, r0
 800a704:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a708:	2b80      	cmp	r3, #128	; 0x80
 800a70a:	d123      	bne.n	800a754 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800a70c:	6a3b      	ldr	r3, [r7, #32]
 800a70e:	699b      	ldr	r3, [r3, #24]
 800a710:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a714:	6a3b      	ldr	r3, [r7, #32]
 800a716:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800a718:	2301      	movs	r3, #1
 800a71a:	627b      	str	r3, [r7, #36]	; 0x24
 800a71c:	e014      	b.n	800a748 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800a71e:	6879      	ldr	r1, [r7, #4]
 800a720:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a722:	4613      	mov	r3, r2
 800a724:	00db      	lsls	r3, r3, #3
 800a726:	4413      	add	r3, r2
 800a728:	009b      	lsls	r3, r3, #2
 800a72a:	440b      	add	r3, r1
 800a72c:	f203 2357 	addw	r3, r3, #599	; 0x257
 800a730:	781b      	ldrb	r3, [r3, #0]
 800a732:	2b01      	cmp	r3, #1
 800a734:	d105      	bne.n	800a742 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800a736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a738:	b2db      	uxtb	r3, r3
 800a73a:	4619      	mov	r1, r3
 800a73c:	6878      	ldr	r0, [r7, #4]
 800a73e:	f000 fb08 	bl	800ad52 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800a742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a744:	3301      	adds	r3, #1
 800a746:	627b      	str	r3, [r7, #36]	; 0x24
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	791b      	ldrb	r3, [r3, #4]
 800a74c:	461a      	mov	r2, r3
 800a74e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a750:	4293      	cmp	r3, r2
 800a752:	d3e4      	bcc.n	800a71e <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	4618      	mov	r0, r3
 800a75a:	f004 fd3b 	bl	800f1d4 <USB_ReadInterrupts>
 800a75e:	4603      	mov	r3, r0
 800a760:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a764:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a768:	d13c      	bne.n	800a7e4 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800a76a:	2301      	movs	r3, #1
 800a76c:	627b      	str	r3, [r7, #36]	; 0x24
 800a76e:	e02b      	b.n	800a7c8 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800a770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a772:	015a      	lsls	r2, r3, #5
 800a774:	69fb      	ldr	r3, [r7, #28]
 800a776:	4413      	add	r3, r2
 800a778:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800a780:	6879      	ldr	r1, [r7, #4]
 800a782:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a784:	4613      	mov	r3, r2
 800a786:	00db      	lsls	r3, r3, #3
 800a788:	4413      	add	r3, r2
 800a78a:	009b      	lsls	r3, r3, #2
 800a78c:	440b      	add	r3, r1
 800a78e:	3318      	adds	r3, #24
 800a790:	781b      	ldrb	r3, [r3, #0]
 800a792:	2b01      	cmp	r3, #1
 800a794:	d115      	bne.n	800a7c2 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800a796:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800a798:	2b00      	cmp	r3, #0
 800a79a:	da12      	bge.n	800a7c2 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800a79c:	6879      	ldr	r1, [r7, #4]
 800a79e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a7a0:	4613      	mov	r3, r2
 800a7a2:	00db      	lsls	r3, r3, #3
 800a7a4:	4413      	add	r3, r2
 800a7a6:	009b      	lsls	r3, r3, #2
 800a7a8:	440b      	add	r3, r1
 800a7aa:	3317      	adds	r3, #23
 800a7ac:	2201      	movs	r2, #1
 800a7ae:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800a7b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7b2:	b2db      	uxtb	r3, r3
 800a7b4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a7b8:	b2db      	uxtb	r3, r3
 800a7ba:	4619      	mov	r1, r3
 800a7bc:	6878      	ldr	r0, [r7, #4]
 800a7be:	f000 fac8 	bl	800ad52 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800a7c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7c4:	3301      	adds	r3, #1
 800a7c6:	627b      	str	r3, [r7, #36]	; 0x24
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	791b      	ldrb	r3, [r3, #4]
 800a7cc:	461a      	mov	r2, r3
 800a7ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7d0:	4293      	cmp	r3, r2
 800a7d2:	d3cd      	bcc.n	800a770 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	695a      	ldr	r2, [r3, #20]
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800a7e2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	4618      	mov	r0, r3
 800a7ea:	f004 fcf3 	bl	800f1d4 <USB_ReadInterrupts>
 800a7ee:	4603      	mov	r3, r0
 800a7f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a7f4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a7f8:	d156      	bne.n	800a8a8 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800a7fa:	2301      	movs	r3, #1
 800a7fc:	627b      	str	r3, [r7, #36]	; 0x24
 800a7fe:	e045      	b.n	800a88c <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800a800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a802:	015a      	lsls	r2, r3, #5
 800a804:	69fb      	ldr	r3, [r7, #28]
 800a806:	4413      	add	r3, r2
 800a808:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800a810:	6879      	ldr	r1, [r7, #4]
 800a812:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a814:	4613      	mov	r3, r2
 800a816:	00db      	lsls	r3, r3, #3
 800a818:	4413      	add	r3, r2
 800a81a:	009b      	lsls	r3, r3, #2
 800a81c:	440b      	add	r3, r1
 800a81e:	f503 7316 	add.w	r3, r3, #600	; 0x258
 800a822:	781b      	ldrb	r3, [r3, #0]
 800a824:	2b01      	cmp	r3, #1
 800a826:	d12e      	bne.n	800a886 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800a828:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	da2b      	bge.n	800a886 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800a82e:	69bb      	ldr	r3, [r7, #24]
 800a830:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 800a83a:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800a83e:	429a      	cmp	r2, r3
 800a840:	d121      	bne.n	800a886 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800a842:	6879      	ldr	r1, [r7, #4]
 800a844:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a846:	4613      	mov	r3, r2
 800a848:	00db      	lsls	r3, r3, #3
 800a84a:	4413      	add	r3, r2
 800a84c:	009b      	lsls	r3, r3, #2
 800a84e:	440b      	add	r3, r1
 800a850:	f203 2357 	addw	r3, r3, #599	; 0x257
 800a854:	2201      	movs	r2, #1
 800a856:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800a858:	6a3b      	ldr	r3, [r7, #32]
 800a85a:	699b      	ldr	r3, [r3, #24]
 800a85c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800a860:	6a3b      	ldr	r3, [r7, #32]
 800a862:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800a864:	6a3b      	ldr	r3, [r7, #32]
 800a866:	695b      	ldr	r3, [r3, #20]
 800a868:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d10a      	bne.n	800a886 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800a870:	69fb      	ldr	r3, [r7, #28]
 800a872:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a876:	685b      	ldr	r3, [r3, #4]
 800a878:	69fa      	ldr	r2, [r7, #28]
 800a87a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a87e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a882:	6053      	str	r3, [r2, #4]
            break;
 800a884:	e008      	b.n	800a898 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800a886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a888:	3301      	adds	r3, #1
 800a88a:	627b      	str	r3, [r7, #36]	; 0x24
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	791b      	ldrb	r3, [r3, #4]
 800a890:	461a      	mov	r2, r3
 800a892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a894:	4293      	cmp	r3, r2
 800a896:	d3b3      	bcc.n	800a800 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	695a      	ldr	r2, [r3, #20]
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800a8a6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	4618      	mov	r0, r3
 800a8ae:	f004 fc91 	bl	800f1d4 <USB_ReadInterrupts>
 800a8b2:	4603      	mov	r3, r0
 800a8b4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a8b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a8bc:	d10a      	bne.n	800a8d4 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800a8be:	6878      	ldr	r0, [r7, #4]
 800a8c0:	f00b f932 	bl	8015b28 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	695a      	ldr	r2, [r3, #20]
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800a8d2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	4618      	mov	r0, r3
 800a8da:	f004 fc7b 	bl	800f1d4 <USB_ReadInterrupts>
 800a8de:	4603      	mov	r3, r0
 800a8e0:	f003 0304 	and.w	r3, r3, #4
 800a8e4:	2b04      	cmp	r3, #4
 800a8e6:	d115      	bne.n	800a914 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	685b      	ldr	r3, [r3, #4]
 800a8ee:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800a8f0:	69bb      	ldr	r3, [r7, #24]
 800a8f2:	f003 0304 	and.w	r3, r3, #4
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d002      	beq.n	800a900 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800a8fa:	6878      	ldr	r0, [r7, #4]
 800a8fc:	f00b f922 	bl	8015b44 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	6859      	ldr	r1, [r3, #4]
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	69ba      	ldr	r2, [r7, #24]
 800a90c:	430a      	orrs	r2, r1
 800a90e:	605a      	str	r2, [r3, #4]
 800a910:	e000      	b.n	800a914 <HAL_PCD_IRQHandler+0x93c>
      return;
 800a912:	bf00      	nop
    }
  }
}
 800a914:	3734      	adds	r7, #52	; 0x34
 800a916:	46bd      	mov	sp, r7
 800a918:	bd90      	pop	{r4, r7, pc}

0800a91a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800a91a:	b580      	push	{r7, lr}
 800a91c:	b082      	sub	sp, #8
 800a91e:	af00      	add	r7, sp, #0
 800a920:	6078      	str	r0, [r7, #4]
 800a922:	460b      	mov	r3, r1
 800a924:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 800a92c:	2b01      	cmp	r3, #1
 800a92e:	d101      	bne.n	800a934 <HAL_PCD_SetAddress+0x1a>
 800a930:	2302      	movs	r3, #2
 800a932:	e012      	b.n	800a95a <HAL_PCD_SetAddress+0x40>
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	2201      	movs	r2, #1
 800a938:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  hpcd->USB_Address = address;
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	78fa      	ldrb	r2, [r7, #3]
 800a940:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	78fa      	ldrb	r2, [r7, #3]
 800a948:	4611      	mov	r1, r2
 800a94a:	4618      	mov	r0, r3
 800a94c:	f004 fbda 	bl	800f104 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	2200      	movs	r2, #0
 800a954:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 800a958:	2300      	movs	r3, #0
}
 800a95a:	4618      	mov	r0, r3
 800a95c:	3708      	adds	r7, #8
 800a95e:	46bd      	mov	sp, r7
 800a960:	bd80      	pop	{r7, pc}

0800a962 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800a962:	b580      	push	{r7, lr}
 800a964:	b084      	sub	sp, #16
 800a966:	af00      	add	r7, sp, #0
 800a968:	6078      	str	r0, [r7, #4]
 800a96a:	4608      	mov	r0, r1
 800a96c:	4611      	mov	r1, r2
 800a96e:	461a      	mov	r2, r3
 800a970:	4603      	mov	r3, r0
 800a972:	70fb      	strb	r3, [r7, #3]
 800a974:	460b      	mov	r3, r1
 800a976:	803b      	strh	r3, [r7, #0]
 800a978:	4613      	mov	r3, r2
 800a97a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800a97c:	2300      	movs	r3, #0
 800a97e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800a980:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a984:	2b00      	cmp	r3, #0
 800a986:	da0f      	bge.n	800a9a8 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a988:	78fb      	ldrb	r3, [r7, #3]
 800a98a:	f003 020f 	and.w	r2, r3, #15
 800a98e:	4613      	mov	r3, r2
 800a990:	00db      	lsls	r3, r3, #3
 800a992:	4413      	add	r3, r2
 800a994:	009b      	lsls	r3, r3, #2
 800a996:	3310      	adds	r3, #16
 800a998:	687a      	ldr	r2, [r7, #4]
 800a99a:	4413      	add	r3, r2
 800a99c:	3304      	adds	r3, #4
 800a99e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a9a0:	68fb      	ldr	r3, [r7, #12]
 800a9a2:	2201      	movs	r2, #1
 800a9a4:	705a      	strb	r2, [r3, #1]
 800a9a6:	e00f      	b.n	800a9c8 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a9a8:	78fb      	ldrb	r3, [r7, #3]
 800a9aa:	f003 020f 	and.w	r2, r3, #15
 800a9ae:	4613      	mov	r3, r2
 800a9b0:	00db      	lsls	r3, r3, #3
 800a9b2:	4413      	add	r3, r2
 800a9b4:	009b      	lsls	r3, r3, #2
 800a9b6:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800a9ba:	687a      	ldr	r2, [r7, #4]
 800a9bc:	4413      	add	r3, r2
 800a9be:	3304      	adds	r3, #4
 800a9c0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	2200      	movs	r2, #0
 800a9c6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800a9c8:	78fb      	ldrb	r3, [r7, #3]
 800a9ca:	f003 030f 	and.w	r3, r3, #15
 800a9ce:	b2da      	uxtb	r2, r3
 800a9d0:	68fb      	ldr	r3, [r7, #12]
 800a9d2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800a9d4:	883a      	ldrh	r2, [r7, #0]
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	78ba      	ldrb	r2, [r7, #2]
 800a9de:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	785b      	ldrb	r3, [r3, #1]
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d004      	beq.n	800a9f2 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	781b      	ldrb	r3, [r3, #0]
 800a9ec:	b29a      	uxth	r2, r3
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800a9f2:	78bb      	ldrb	r3, [r7, #2]
 800a9f4:	2b02      	cmp	r3, #2
 800a9f6:	d102      	bne.n	800a9fe <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	2200      	movs	r2, #0
 800a9fc:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 800aa04:	2b01      	cmp	r3, #1
 800aa06:	d101      	bne.n	800aa0c <HAL_PCD_EP_Open+0xaa>
 800aa08:	2302      	movs	r3, #2
 800aa0a:	e00e      	b.n	800aa2a <HAL_PCD_EP_Open+0xc8>
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	2201      	movs	r2, #1
 800aa10:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	68f9      	ldr	r1, [r7, #12]
 800aa1a:	4618      	mov	r0, r3
 800aa1c:	f003 fd62 	bl	800e4e4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	2200      	movs	r2, #0
 800aa24:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return ret;
 800aa28:	7afb      	ldrb	r3, [r7, #11]
}
 800aa2a:	4618      	mov	r0, r3
 800aa2c:	3710      	adds	r7, #16
 800aa2e:	46bd      	mov	sp, r7
 800aa30:	bd80      	pop	{r7, pc}

0800aa32 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800aa32:	b580      	push	{r7, lr}
 800aa34:	b084      	sub	sp, #16
 800aa36:	af00      	add	r7, sp, #0
 800aa38:	6078      	str	r0, [r7, #4]
 800aa3a:	460b      	mov	r3, r1
 800aa3c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800aa3e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	da0f      	bge.n	800aa66 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800aa46:	78fb      	ldrb	r3, [r7, #3]
 800aa48:	f003 020f 	and.w	r2, r3, #15
 800aa4c:	4613      	mov	r3, r2
 800aa4e:	00db      	lsls	r3, r3, #3
 800aa50:	4413      	add	r3, r2
 800aa52:	009b      	lsls	r3, r3, #2
 800aa54:	3310      	adds	r3, #16
 800aa56:	687a      	ldr	r2, [r7, #4]
 800aa58:	4413      	add	r3, r2
 800aa5a:	3304      	adds	r3, #4
 800aa5c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800aa5e:	68fb      	ldr	r3, [r7, #12]
 800aa60:	2201      	movs	r2, #1
 800aa62:	705a      	strb	r2, [r3, #1]
 800aa64:	e00f      	b.n	800aa86 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800aa66:	78fb      	ldrb	r3, [r7, #3]
 800aa68:	f003 020f 	and.w	r2, r3, #15
 800aa6c:	4613      	mov	r3, r2
 800aa6e:	00db      	lsls	r3, r3, #3
 800aa70:	4413      	add	r3, r2
 800aa72:	009b      	lsls	r3, r3, #2
 800aa74:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800aa78:	687a      	ldr	r2, [r7, #4]
 800aa7a:	4413      	add	r3, r2
 800aa7c:	3304      	adds	r3, #4
 800aa7e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	2200      	movs	r2, #0
 800aa84:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800aa86:	78fb      	ldrb	r3, [r7, #3]
 800aa88:	f003 030f 	and.w	r3, r3, #15
 800aa8c:	b2da      	uxtb	r2, r3
 800aa8e:	68fb      	ldr	r3, [r7, #12]
 800aa90:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 800aa98:	2b01      	cmp	r3, #1
 800aa9a:	d101      	bne.n	800aaa0 <HAL_PCD_EP_Close+0x6e>
 800aa9c:	2302      	movs	r3, #2
 800aa9e:	e00e      	b.n	800aabe <HAL_PCD_EP_Close+0x8c>
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	2201      	movs	r2, #1
 800aaa4:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	68f9      	ldr	r1, [r7, #12]
 800aaae:	4618      	mov	r0, r3
 800aab0:	f003 fda0 	bl	800e5f4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	2200      	movs	r2, #0
 800aab8:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  return HAL_OK;
 800aabc:	2300      	movs	r3, #0
}
 800aabe:	4618      	mov	r0, r3
 800aac0:	3710      	adds	r7, #16
 800aac2:	46bd      	mov	sp, r7
 800aac4:	bd80      	pop	{r7, pc}

0800aac6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800aac6:	b580      	push	{r7, lr}
 800aac8:	b086      	sub	sp, #24
 800aaca:	af00      	add	r7, sp, #0
 800aacc:	60f8      	str	r0, [r7, #12]
 800aace:	607a      	str	r2, [r7, #4]
 800aad0:	603b      	str	r3, [r7, #0]
 800aad2:	460b      	mov	r3, r1
 800aad4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800aad6:	7afb      	ldrb	r3, [r7, #11]
 800aad8:	f003 020f 	and.w	r2, r3, #15
 800aadc:	4613      	mov	r3, r2
 800aade:	00db      	lsls	r3, r3, #3
 800aae0:	4413      	add	r3, r2
 800aae2:	009b      	lsls	r3, r3, #2
 800aae4:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800aae8:	68fa      	ldr	r2, [r7, #12]
 800aaea:	4413      	add	r3, r2
 800aaec:	3304      	adds	r3, #4
 800aaee:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800aaf0:	697b      	ldr	r3, [r7, #20]
 800aaf2:	687a      	ldr	r2, [r7, #4]
 800aaf4:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800aaf6:	697b      	ldr	r3, [r7, #20]
 800aaf8:	683a      	ldr	r2, [r7, #0]
 800aafa:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800aafc:	697b      	ldr	r3, [r7, #20]
 800aafe:	2200      	movs	r2, #0
 800ab00:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 800ab02:	697b      	ldr	r3, [r7, #20]
 800ab04:	2200      	movs	r2, #0
 800ab06:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800ab08:	7afb      	ldrb	r3, [r7, #11]
 800ab0a:	f003 030f 	and.w	r3, r3, #15
 800ab0e:	b2da      	uxtb	r2, r3
 800ab10:	697b      	ldr	r3, [r7, #20]
 800ab12:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	799b      	ldrb	r3, [r3, #6]
 800ab18:	2b01      	cmp	r3, #1
 800ab1a:	d102      	bne.n	800ab22 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800ab1c:	687a      	ldr	r2, [r7, #4]
 800ab1e:	697b      	ldr	r3, [r7, #20]
 800ab20:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	6818      	ldr	r0, [r3, #0]
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	799b      	ldrb	r3, [r3, #6]
 800ab2a:	461a      	mov	r2, r3
 800ab2c:	6979      	ldr	r1, [r7, #20]
 800ab2e:	f003 fe3d 	bl	800e7ac <USB_EPStartXfer>

  return HAL_OK;
 800ab32:	2300      	movs	r3, #0
}
 800ab34:	4618      	mov	r0, r3
 800ab36:	3718      	adds	r7, #24
 800ab38:	46bd      	mov	sp, r7
 800ab3a:	bd80      	pop	{r7, pc}

0800ab3c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800ab3c:	b480      	push	{r7}
 800ab3e:	b083      	sub	sp, #12
 800ab40:	af00      	add	r7, sp, #0
 800ab42:	6078      	str	r0, [r7, #4]
 800ab44:	460b      	mov	r3, r1
 800ab46:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800ab48:	78fb      	ldrb	r3, [r7, #3]
 800ab4a:	f003 020f 	and.w	r2, r3, #15
 800ab4e:	6879      	ldr	r1, [r7, #4]
 800ab50:	4613      	mov	r3, r2
 800ab52:	00db      	lsls	r3, r3, #3
 800ab54:	4413      	add	r3, r2
 800ab56:	009b      	lsls	r3, r3, #2
 800ab58:	440b      	add	r3, r1
 800ab5a:	f503 731a 	add.w	r3, r3, #616	; 0x268
 800ab5e:	681b      	ldr	r3, [r3, #0]
}
 800ab60:	4618      	mov	r0, r3
 800ab62:	370c      	adds	r7, #12
 800ab64:	46bd      	mov	sp, r7
 800ab66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab6a:	4770      	bx	lr

0800ab6c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800ab6c:	b580      	push	{r7, lr}
 800ab6e:	b086      	sub	sp, #24
 800ab70:	af00      	add	r7, sp, #0
 800ab72:	60f8      	str	r0, [r7, #12]
 800ab74:	607a      	str	r2, [r7, #4]
 800ab76:	603b      	str	r3, [r7, #0]
 800ab78:	460b      	mov	r3, r1
 800ab7a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800ab7c:	7afb      	ldrb	r3, [r7, #11]
 800ab7e:	f003 020f 	and.w	r2, r3, #15
 800ab82:	4613      	mov	r3, r2
 800ab84:	00db      	lsls	r3, r3, #3
 800ab86:	4413      	add	r3, r2
 800ab88:	009b      	lsls	r3, r3, #2
 800ab8a:	3310      	adds	r3, #16
 800ab8c:	68fa      	ldr	r2, [r7, #12]
 800ab8e:	4413      	add	r3, r2
 800ab90:	3304      	adds	r3, #4
 800ab92:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800ab94:	697b      	ldr	r3, [r7, #20]
 800ab96:	687a      	ldr	r2, [r7, #4]
 800ab98:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800ab9a:	697b      	ldr	r3, [r7, #20]
 800ab9c:	683a      	ldr	r2, [r7, #0]
 800ab9e:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800aba0:	697b      	ldr	r3, [r7, #20]
 800aba2:	2200      	movs	r2, #0
 800aba4:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800aba6:	697b      	ldr	r3, [r7, #20]
 800aba8:	2201      	movs	r2, #1
 800abaa:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800abac:	7afb      	ldrb	r3, [r7, #11]
 800abae:	f003 030f 	and.w	r3, r3, #15
 800abb2:	b2da      	uxtb	r2, r3
 800abb4:	697b      	ldr	r3, [r7, #20]
 800abb6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	799b      	ldrb	r3, [r3, #6]
 800abbc:	2b01      	cmp	r3, #1
 800abbe:	d102      	bne.n	800abc6 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800abc0:	687a      	ldr	r2, [r7, #4]
 800abc2:	697b      	ldr	r3, [r7, #20]
 800abc4:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	6818      	ldr	r0, [r3, #0]
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	799b      	ldrb	r3, [r3, #6]
 800abce:	461a      	mov	r2, r3
 800abd0:	6979      	ldr	r1, [r7, #20]
 800abd2:	f003 fdeb 	bl	800e7ac <USB_EPStartXfer>

  return HAL_OK;
 800abd6:	2300      	movs	r3, #0
}
 800abd8:	4618      	mov	r0, r3
 800abda:	3718      	adds	r7, #24
 800abdc:	46bd      	mov	sp, r7
 800abde:	bd80      	pop	{r7, pc}

0800abe0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800abe0:	b580      	push	{r7, lr}
 800abe2:	b084      	sub	sp, #16
 800abe4:	af00      	add	r7, sp, #0
 800abe6:	6078      	str	r0, [r7, #4]
 800abe8:	460b      	mov	r3, r1
 800abea:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800abec:	78fb      	ldrb	r3, [r7, #3]
 800abee:	f003 030f 	and.w	r3, r3, #15
 800abf2:	687a      	ldr	r2, [r7, #4]
 800abf4:	7912      	ldrb	r2, [r2, #4]
 800abf6:	4293      	cmp	r3, r2
 800abf8:	d901      	bls.n	800abfe <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800abfa:	2301      	movs	r3, #1
 800abfc:	e04f      	b.n	800ac9e <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800abfe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	da0f      	bge.n	800ac26 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800ac06:	78fb      	ldrb	r3, [r7, #3]
 800ac08:	f003 020f 	and.w	r2, r3, #15
 800ac0c:	4613      	mov	r3, r2
 800ac0e:	00db      	lsls	r3, r3, #3
 800ac10:	4413      	add	r3, r2
 800ac12:	009b      	lsls	r3, r3, #2
 800ac14:	3310      	adds	r3, #16
 800ac16:	687a      	ldr	r2, [r7, #4]
 800ac18:	4413      	add	r3, r2
 800ac1a:	3304      	adds	r3, #4
 800ac1c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	2201      	movs	r2, #1
 800ac22:	705a      	strb	r2, [r3, #1]
 800ac24:	e00d      	b.n	800ac42 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800ac26:	78fa      	ldrb	r2, [r7, #3]
 800ac28:	4613      	mov	r3, r2
 800ac2a:	00db      	lsls	r3, r3, #3
 800ac2c:	4413      	add	r3, r2
 800ac2e:	009b      	lsls	r3, r3, #2
 800ac30:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800ac34:	687a      	ldr	r2, [r7, #4]
 800ac36:	4413      	add	r3, r2
 800ac38:	3304      	adds	r3, #4
 800ac3a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	2200      	movs	r2, #0
 800ac40:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800ac42:	68fb      	ldr	r3, [r7, #12]
 800ac44:	2201      	movs	r2, #1
 800ac46:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800ac48:	78fb      	ldrb	r3, [r7, #3]
 800ac4a:	f003 030f 	and.w	r3, r3, #15
 800ac4e:	b2da      	uxtb	r2, r3
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 800ac5a:	2b01      	cmp	r3, #1
 800ac5c:	d101      	bne.n	800ac62 <HAL_PCD_EP_SetStall+0x82>
 800ac5e:	2302      	movs	r3, #2
 800ac60:	e01d      	b.n	800ac9e <HAL_PCD_EP_SetStall+0xbe>
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	2201      	movs	r2, #1
 800ac66:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	68f9      	ldr	r1, [r7, #12]
 800ac70:	4618      	mov	r0, r3
 800ac72:	f004 f973 	bl	800ef5c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800ac76:	78fb      	ldrb	r3, [r7, #3]
 800ac78:	f003 030f 	and.w	r3, r3, #15
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d109      	bne.n	800ac94 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	6818      	ldr	r0, [r3, #0]
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	7999      	ldrb	r1, [r3, #6]
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 800ac8e:	461a      	mov	r2, r3
 800ac90:	f004 fb64 	bl	800f35c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	2200      	movs	r2, #0
 800ac98:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 800ac9c:	2300      	movs	r3, #0
}
 800ac9e:	4618      	mov	r0, r3
 800aca0:	3710      	adds	r7, #16
 800aca2:	46bd      	mov	sp, r7
 800aca4:	bd80      	pop	{r7, pc}

0800aca6 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800aca6:	b580      	push	{r7, lr}
 800aca8:	b084      	sub	sp, #16
 800acaa:	af00      	add	r7, sp, #0
 800acac:	6078      	str	r0, [r7, #4]
 800acae:	460b      	mov	r3, r1
 800acb0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800acb2:	78fb      	ldrb	r3, [r7, #3]
 800acb4:	f003 030f 	and.w	r3, r3, #15
 800acb8:	687a      	ldr	r2, [r7, #4]
 800acba:	7912      	ldrb	r2, [r2, #4]
 800acbc:	4293      	cmp	r3, r2
 800acbe:	d901      	bls.n	800acc4 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800acc0:	2301      	movs	r3, #1
 800acc2:	e042      	b.n	800ad4a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800acc4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800acc8:	2b00      	cmp	r3, #0
 800acca:	da0f      	bge.n	800acec <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800accc:	78fb      	ldrb	r3, [r7, #3]
 800acce:	f003 020f 	and.w	r2, r3, #15
 800acd2:	4613      	mov	r3, r2
 800acd4:	00db      	lsls	r3, r3, #3
 800acd6:	4413      	add	r3, r2
 800acd8:	009b      	lsls	r3, r3, #2
 800acda:	3310      	adds	r3, #16
 800acdc:	687a      	ldr	r2, [r7, #4]
 800acde:	4413      	add	r3, r2
 800ace0:	3304      	adds	r3, #4
 800ace2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800ace4:	68fb      	ldr	r3, [r7, #12]
 800ace6:	2201      	movs	r2, #1
 800ace8:	705a      	strb	r2, [r3, #1]
 800acea:	e00f      	b.n	800ad0c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800acec:	78fb      	ldrb	r3, [r7, #3]
 800acee:	f003 020f 	and.w	r2, r3, #15
 800acf2:	4613      	mov	r3, r2
 800acf4:	00db      	lsls	r3, r3, #3
 800acf6:	4413      	add	r3, r2
 800acf8:	009b      	lsls	r3, r3, #2
 800acfa:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800acfe:	687a      	ldr	r2, [r7, #4]
 800ad00:	4413      	add	r3, r2
 800ad02:	3304      	adds	r3, #4
 800ad04:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800ad06:	68fb      	ldr	r3, [r7, #12]
 800ad08:	2200      	movs	r2, #0
 800ad0a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800ad0c:	68fb      	ldr	r3, [r7, #12]
 800ad0e:	2200      	movs	r2, #0
 800ad10:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800ad12:	78fb      	ldrb	r3, [r7, #3]
 800ad14:	f003 030f 	and.w	r3, r3, #15
 800ad18:	b2da      	uxtb	r2, r3
 800ad1a:	68fb      	ldr	r3, [r7, #12]
 800ad1c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 800ad24:	2b01      	cmp	r3, #1
 800ad26:	d101      	bne.n	800ad2c <HAL_PCD_EP_ClrStall+0x86>
 800ad28:	2302      	movs	r3, #2
 800ad2a:	e00e      	b.n	800ad4a <HAL_PCD_EP_ClrStall+0xa4>
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	2201      	movs	r2, #1
 800ad30:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	68f9      	ldr	r1, [r7, #12]
 800ad3a:	4618      	mov	r0, r3
 800ad3c:	f004 f97c 	bl	800f038 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	2200      	movs	r2, #0
 800ad44:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 800ad48:	2300      	movs	r3, #0
}
 800ad4a:	4618      	mov	r0, r3
 800ad4c:	3710      	adds	r7, #16
 800ad4e:	46bd      	mov	sp, r7
 800ad50:	bd80      	pop	{r7, pc}

0800ad52 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800ad52:	b580      	push	{r7, lr}
 800ad54:	b084      	sub	sp, #16
 800ad56:	af00      	add	r7, sp, #0
 800ad58:	6078      	str	r0, [r7, #4]
 800ad5a:	460b      	mov	r3, r1
 800ad5c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800ad5e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	da0c      	bge.n	800ad80 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800ad66:	78fb      	ldrb	r3, [r7, #3]
 800ad68:	f003 020f 	and.w	r2, r3, #15
 800ad6c:	4613      	mov	r3, r2
 800ad6e:	00db      	lsls	r3, r3, #3
 800ad70:	4413      	add	r3, r2
 800ad72:	009b      	lsls	r3, r3, #2
 800ad74:	3310      	adds	r3, #16
 800ad76:	687a      	ldr	r2, [r7, #4]
 800ad78:	4413      	add	r3, r2
 800ad7a:	3304      	adds	r3, #4
 800ad7c:	60fb      	str	r3, [r7, #12]
 800ad7e:	e00c      	b.n	800ad9a <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800ad80:	78fb      	ldrb	r3, [r7, #3]
 800ad82:	f003 020f 	and.w	r2, r3, #15
 800ad86:	4613      	mov	r3, r2
 800ad88:	00db      	lsls	r3, r3, #3
 800ad8a:	4413      	add	r3, r2
 800ad8c:	009b      	lsls	r3, r3, #2
 800ad8e:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800ad92:	687a      	ldr	r2, [r7, #4]
 800ad94:	4413      	add	r3, r2
 800ad96:	3304      	adds	r3, #4
 800ad98:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	68f9      	ldr	r1, [r7, #12]
 800ada0:	4618      	mov	r0, r3
 800ada2:	f003 ff9b 	bl	800ecdc <USB_EPStopXfer>
 800ada6:	4603      	mov	r3, r0
 800ada8:	72fb      	strb	r3, [r7, #11]

  return ret;
 800adaa:	7afb      	ldrb	r3, [r7, #11]
}
 800adac:	4618      	mov	r0, r3
 800adae:	3710      	adds	r7, #16
 800adb0:	46bd      	mov	sp, r7
 800adb2:	bd80      	pop	{r7, pc}

0800adb4 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800adb4:	b580      	push	{r7, lr}
 800adb6:	b08a      	sub	sp, #40	; 0x28
 800adb8:	af02      	add	r7, sp, #8
 800adba:	6078      	str	r0, [r7, #4]
 800adbc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800adc4:	697b      	ldr	r3, [r7, #20]
 800adc6:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800adc8:	683a      	ldr	r2, [r7, #0]
 800adca:	4613      	mov	r3, r2
 800adcc:	00db      	lsls	r3, r3, #3
 800adce:	4413      	add	r3, r2
 800add0:	009b      	lsls	r3, r3, #2
 800add2:	3310      	adds	r3, #16
 800add4:	687a      	ldr	r2, [r7, #4]
 800add6:	4413      	add	r3, r2
 800add8:	3304      	adds	r3, #4
 800adda:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	695a      	ldr	r2, [r3, #20]
 800ade0:	68fb      	ldr	r3, [r7, #12]
 800ade2:	691b      	ldr	r3, [r3, #16]
 800ade4:	429a      	cmp	r2, r3
 800ade6:	d901      	bls.n	800adec <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800ade8:	2301      	movs	r3, #1
 800adea:	e06b      	b.n	800aec4 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 800adec:	68fb      	ldr	r3, [r7, #12]
 800adee:	691a      	ldr	r2, [r3, #16]
 800adf0:	68fb      	ldr	r3, [r7, #12]
 800adf2:	695b      	ldr	r3, [r3, #20]
 800adf4:	1ad3      	subs	r3, r2, r3
 800adf6:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800adf8:	68fb      	ldr	r3, [r7, #12]
 800adfa:	689b      	ldr	r3, [r3, #8]
 800adfc:	69fa      	ldr	r2, [r7, #28]
 800adfe:	429a      	cmp	r2, r3
 800ae00:	d902      	bls.n	800ae08 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800ae02:	68fb      	ldr	r3, [r7, #12]
 800ae04:	689b      	ldr	r3, [r3, #8]
 800ae06:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800ae08:	69fb      	ldr	r3, [r7, #28]
 800ae0a:	3303      	adds	r3, #3
 800ae0c:	089b      	lsrs	r3, r3, #2
 800ae0e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800ae10:	e02a      	b.n	800ae68 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	691a      	ldr	r2, [r3, #16]
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	695b      	ldr	r3, [r3, #20]
 800ae1a:	1ad3      	subs	r3, r2, r3
 800ae1c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800ae1e:	68fb      	ldr	r3, [r7, #12]
 800ae20:	689b      	ldr	r3, [r3, #8]
 800ae22:	69fa      	ldr	r2, [r7, #28]
 800ae24:	429a      	cmp	r2, r3
 800ae26:	d902      	bls.n	800ae2e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800ae28:	68fb      	ldr	r3, [r7, #12]
 800ae2a:	689b      	ldr	r3, [r3, #8]
 800ae2c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800ae2e:	69fb      	ldr	r3, [r7, #28]
 800ae30:	3303      	adds	r3, #3
 800ae32:	089b      	lsrs	r3, r3, #2
 800ae34:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800ae36:	68fb      	ldr	r3, [r7, #12]
 800ae38:	68d9      	ldr	r1, [r3, #12]
 800ae3a:	683b      	ldr	r3, [r7, #0]
 800ae3c:	b2da      	uxtb	r2, r3
 800ae3e:	69fb      	ldr	r3, [r7, #28]
 800ae40:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800ae46:	9300      	str	r3, [sp, #0]
 800ae48:	4603      	mov	r3, r0
 800ae4a:	6978      	ldr	r0, [r7, #20]
 800ae4c:	f003 fff0 	bl	800ee30 <USB_WritePacket>

    ep->xfer_buff  += len;
 800ae50:	68fb      	ldr	r3, [r7, #12]
 800ae52:	68da      	ldr	r2, [r3, #12]
 800ae54:	69fb      	ldr	r3, [r7, #28]
 800ae56:	441a      	add	r2, r3
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800ae5c:	68fb      	ldr	r3, [r7, #12]
 800ae5e:	695a      	ldr	r2, [r3, #20]
 800ae60:	69fb      	ldr	r3, [r7, #28]
 800ae62:	441a      	add	r2, r3
 800ae64:	68fb      	ldr	r3, [r7, #12]
 800ae66:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800ae68:	683b      	ldr	r3, [r7, #0]
 800ae6a:	015a      	lsls	r2, r3, #5
 800ae6c:	693b      	ldr	r3, [r7, #16]
 800ae6e:	4413      	add	r3, r2
 800ae70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae74:	699b      	ldr	r3, [r3, #24]
 800ae76:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800ae78:	69ba      	ldr	r2, [r7, #24]
 800ae7a:	429a      	cmp	r2, r3
 800ae7c:	d809      	bhi.n	800ae92 <PCD_WriteEmptyTxFifo+0xde>
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	695a      	ldr	r2, [r3, #20]
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800ae86:	429a      	cmp	r2, r3
 800ae88:	d203      	bcs.n	800ae92 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800ae8a:	68fb      	ldr	r3, [r7, #12]
 800ae8c:	691b      	ldr	r3, [r3, #16]
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	d1bf      	bne.n	800ae12 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	691a      	ldr	r2, [r3, #16]
 800ae96:	68fb      	ldr	r3, [r7, #12]
 800ae98:	695b      	ldr	r3, [r3, #20]
 800ae9a:	429a      	cmp	r2, r3
 800ae9c:	d811      	bhi.n	800aec2 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800ae9e:	683b      	ldr	r3, [r7, #0]
 800aea0:	f003 030f 	and.w	r3, r3, #15
 800aea4:	2201      	movs	r2, #1
 800aea6:	fa02 f303 	lsl.w	r3, r2, r3
 800aeaa:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800aeac:	693b      	ldr	r3, [r7, #16]
 800aeae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aeb2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800aeb4:	68bb      	ldr	r3, [r7, #8]
 800aeb6:	43db      	mvns	r3, r3
 800aeb8:	6939      	ldr	r1, [r7, #16]
 800aeba:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800aebe:	4013      	ands	r3, r2
 800aec0:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800aec2:	2300      	movs	r3, #0
}
 800aec4:	4618      	mov	r0, r3
 800aec6:	3720      	adds	r7, #32
 800aec8:	46bd      	mov	sp, r7
 800aeca:	bd80      	pop	{r7, pc}

0800aecc <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800aecc:	b580      	push	{r7, lr}
 800aece:	b088      	sub	sp, #32
 800aed0:	af00      	add	r7, sp, #0
 800aed2:	6078      	str	r0, [r7, #4]
 800aed4:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aedc:	69fb      	ldr	r3, [r7, #28]
 800aede:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800aee0:	69fb      	ldr	r3, [r7, #28]
 800aee2:	333c      	adds	r3, #60	; 0x3c
 800aee4:	3304      	adds	r3, #4
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800aeea:	683b      	ldr	r3, [r7, #0]
 800aeec:	015a      	lsls	r2, r3, #5
 800aeee:	69bb      	ldr	r3, [r7, #24]
 800aef0:	4413      	add	r3, r2
 800aef2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aef6:	689b      	ldr	r3, [r3, #8]
 800aef8:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	799b      	ldrb	r3, [r3, #6]
 800aefe:	2b01      	cmp	r3, #1
 800af00:	d17b      	bne.n	800affa <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800af02:	693b      	ldr	r3, [r7, #16]
 800af04:	f003 0308 	and.w	r3, r3, #8
 800af08:	2b00      	cmp	r3, #0
 800af0a:	d015      	beq.n	800af38 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800af0c:	697b      	ldr	r3, [r7, #20]
 800af0e:	4a61      	ldr	r2, [pc, #388]	; (800b094 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800af10:	4293      	cmp	r3, r2
 800af12:	f240 80b9 	bls.w	800b088 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800af16:	693b      	ldr	r3, [r7, #16]
 800af18:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	f000 80b3 	beq.w	800b088 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800af22:	683b      	ldr	r3, [r7, #0]
 800af24:	015a      	lsls	r2, r3, #5
 800af26:	69bb      	ldr	r3, [r7, #24]
 800af28:	4413      	add	r3, r2
 800af2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800af2e:	461a      	mov	r2, r3
 800af30:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800af34:	6093      	str	r3, [r2, #8]
 800af36:	e0a7      	b.n	800b088 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800af38:	693b      	ldr	r3, [r7, #16]
 800af3a:	f003 0320 	and.w	r3, r3, #32
 800af3e:	2b00      	cmp	r3, #0
 800af40:	d009      	beq.n	800af56 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800af42:	683b      	ldr	r3, [r7, #0]
 800af44:	015a      	lsls	r2, r3, #5
 800af46:	69bb      	ldr	r3, [r7, #24]
 800af48:	4413      	add	r3, r2
 800af4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800af4e:	461a      	mov	r2, r3
 800af50:	2320      	movs	r3, #32
 800af52:	6093      	str	r3, [r2, #8]
 800af54:	e098      	b.n	800b088 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800af56:	693b      	ldr	r3, [r7, #16]
 800af58:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	f040 8093 	bne.w	800b088 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800af62:	697b      	ldr	r3, [r7, #20]
 800af64:	4a4b      	ldr	r2, [pc, #300]	; (800b094 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800af66:	4293      	cmp	r3, r2
 800af68:	d90f      	bls.n	800af8a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800af6a:	693b      	ldr	r3, [r7, #16]
 800af6c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800af70:	2b00      	cmp	r3, #0
 800af72:	d00a      	beq.n	800af8a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800af74:	683b      	ldr	r3, [r7, #0]
 800af76:	015a      	lsls	r2, r3, #5
 800af78:	69bb      	ldr	r3, [r7, #24]
 800af7a:	4413      	add	r3, r2
 800af7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800af80:	461a      	mov	r2, r3
 800af82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800af86:	6093      	str	r3, [r2, #8]
 800af88:	e07e      	b.n	800b088 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800af8a:	683a      	ldr	r2, [r7, #0]
 800af8c:	4613      	mov	r3, r2
 800af8e:	00db      	lsls	r3, r3, #3
 800af90:	4413      	add	r3, r2
 800af92:	009b      	lsls	r3, r3, #2
 800af94:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800af98:	687a      	ldr	r2, [r7, #4]
 800af9a:	4413      	add	r3, r2
 800af9c:	3304      	adds	r3, #4
 800af9e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	6a1a      	ldr	r2, [r3, #32]
 800afa4:	683b      	ldr	r3, [r7, #0]
 800afa6:	0159      	lsls	r1, r3, #5
 800afa8:	69bb      	ldr	r3, [r7, #24]
 800afaa:	440b      	add	r3, r1
 800afac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800afb0:	691b      	ldr	r3, [r3, #16]
 800afb2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800afb6:	1ad2      	subs	r2, r2, r3
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 800afbc:	683b      	ldr	r3, [r7, #0]
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d114      	bne.n	800afec <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800afc2:	68fb      	ldr	r3, [r7, #12]
 800afc4:	691b      	ldr	r3, [r3, #16]
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	d109      	bne.n	800afde <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	6818      	ldr	r0, [r3, #0]
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 800afd4:	461a      	mov	r2, r3
 800afd6:	2101      	movs	r1, #1
 800afd8:	f004 f9c0 	bl	800f35c <USB_EP0_OutStart>
 800afdc:	e006      	b.n	800afec <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800afde:	68fb      	ldr	r3, [r7, #12]
 800afe0:	68da      	ldr	r2, [r3, #12]
 800afe2:	68fb      	ldr	r3, [r7, #12]
 800afe4:	695b      	ldr	r3, [r3, #20]
 800afe6:	441a      	add	r2, r3
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800afec:	683b      	ldr	r3, [r7, #0]
 800afee:	b2db      	uxtb	r3, r3
 800aff0:	4619      	mov	r1, r3
 800aff2:	6878      	ldr	r0, [r7, #4]
 800aff4:	f00a fcde 	bl	80159b4 <HAL_PCD_DataOutStageCallback>
 800aff8:	e046      	b.n	800b088 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800affa:	697b      	ldr	r3, [r7, #20]
 800affc:	4a26      	ldr	r2, [pc, #152]	; (800b098 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800affe:	4293      	cmp	r3, r2
 800b000:	d124      	bne.n	800b04c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800b002:	693b      	ldr	r3, [r7, #16]
 800b004:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d00a      	beq.n	800b022 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800b00c:	683b      	ldr	r3, [r7, #0]
 800b00e:	015a      	lsls	r2, r3, #5
 800b010:	69bb      	ldr	r3, [r7, #24]
 800b012:	4413      	add	r3, r2
 800b014:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b018:	461a      	mov	r2, r3
 800b01a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b01e:	6093      	str	r3, [r2, #8]
 800b020:	e032      	b.n	800b088 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800b022:	693b      	ldr	r3, [r7, #16]
 800b024:	f003 0320 	and.w	r3, r3, #32
 800b028:	2b00      	cmp	r3, #0
 800b02a:	d008      	beq.n	800b03e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800b02c:	683b      	ldr	r3, [r7, #0]
 800b02e:	015a      	lsls	r2, r3, #5
 800b030:	69bb      	ldr	r3, [r7, #24]
 800b032:	4413      	add	r3, r2
 800b034:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b038:	461a      	mov	r2, r3
 800b03a:	2320      	movs	r3, #32
 800b03c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800b03e:	683b      	ldr	r3, [r7, #0]
 800b040:	b2db      	uxtb	r3, r3
 800b042:	4619      	mov	r1, r3
 800b044:	6878      	ldr	r0, [r7, #4]
 800b046:	f00a fcb5 	bl	80159b4 <HAL_PCD_DataOutStageCallback>
 800b04a:	e01d      	b.n	800b088 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800b04c:	683b      	ldr	r3, [r7, #0]
 800b04e:	2b00      	cmp	r3, #0
 800b050:	d114      	bne.n	800b07c <PCD_EP_OutXfrComplete_int+0x1b0>
 800b052:	6879      	ldr	r1, [r7, #4]
 800b054:	683a      	ldr	r2, [r7, #0]
 800b056:	4613      	mov	r3, r2
 800b058:	00db      	lsls	r3, r3, #3
 800b05a:	4413      	add	r3, r2
 800b05c:	009b      	lsls	r3, r3, #2
 800b05e:	440b      	add	r3, r1
 800b060:	f503 7319 	add.w	r3, r3, #612	; 0x264
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	2b00      	cmp	r3, #0
 800b068:	d108      	bne.n	800b07c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	6818      	ldr	r0, [r3, #0]
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 800b074:	461a      	mov	r2, r3
 800b076:	2100      	movs	r1, #0
 800b078:	f004 f970 	bl	800f35c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800b07c:	683b      	ldr	r3, [r7, #0]
 800b07e:	b2db      	uxtb	r3, r3
 800b080:	4619      	mov	r1, r3
 800b082:	6878      	ldr	r0, [r7, #4]
 800b084:	f00a fc96 	bl	80159b4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800b088:	2300      	movs	r3, #0
}
 800b08a:	4618      	mov	r0, r3
 800b08c:	3720      	adds	r7, #32
 800b08e:	46bd      	mov	sp, r7
 800b090:	bd80      	pop	{r7, pc}
 800b092:	bf00      	nop
 800b094:	4f54300a 	.word	0x4f54300a
 800b098:	4f54310a 	.word	0x4f54310a

0800b09c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800b09c:	b580      	push	{r7, lr}
 800b09e:	b086      	sub	sp, #24
 800b0a0:	af00      	add	r7, sp, #0
 800b0a2:	6078      	str	r0, [r7, #4]
 800b0a4:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b0ac:	697b      	ldr	r3, [r7, #20]
 800b0ae:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800b0b0:	697b      	ldr	r3, [r7, #20]
 800b0b2:	333c      	adds	r3, #60	; 0x3c
 800b0b4:	3304      	adds	r3, #4
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800b0ba:	683b      	ldr	r3, [r7, #0]
 800b0bc:	015a      	lsls	r2, r3, #5
 800b0be:	693b      	ldr	r3, [r7, #16]
 800b0c0:	4413      	add	r3, r2
 800b0c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b0c6:	689b      	ldr	r3, [r3, #8]
 800b0c8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800b0ca:	68fb      	ldr	r3, [r7, #12]
 800b0cc:	4a15      	ldr	r2, [pc, #84]	; (800b124 <PCD_EP_OutSetupPacket_int+0x88>)
 800b0ce:	4293      	cmp	r3, r2
 800b0d0:	d90e      	bls.n	800b0f0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800b0d2:	68bb      	ldr	r3, [r7, #8]
 800b0d4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	d009      	beq.n	800b0f0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800b0dc:	683b      	ldr	r3, [r7, #0]
 800b0de:	015a      	lsls	r2, r3, #5
 800b0e0:	693b      	ldr	r3, [r7, #16]
 800b0e2:	4413      	add	r3, r2
 800b0e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b0e8:	461a      	mov	r2, r3
 800b0ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b0ee:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800b0f0:	6878      	ldr	r0, [r7, #4]
 800b0f2:	f00a fc4d 	bl	8015990 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800b0f6:	68fb      	ldr	r3, [r7, #12]
 800b0f8:	4a0a      	ldr	r2, [pc, #40]	; (800b124 <PCD_EP_OutSetupPacket_int+0x88>)
 800b0fa:	4293      	cmp	r3, r2
 800b0fc:	d90c      	bls.n	800b118 <PCD_EP_OutSetupPacket_int+0x7c>
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	799b      	ldrb	r3, [r3, #6]
 800b102:	2b01      	cmp	r3, #1
 800b104:	d108      	bne.n	800b118 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	6818      	ldr	r0, [r3, #0]
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 800b110:	461a      	mov	r2, r3
 800b112:	2101      	movs	r1, #1
 800b114:	f004 f922 	bl	800f35c <USB_EP0_OutStart>
  }

  return HAL_OK;
 800b118:	2300      	movs	r3, #0
}
 800b11a:	4618      	mov	r0, r3
 800b11c:	3718      	adds	r7, #24
 800b11e:	46bd      	mov	sp, r7
 800b120:	bd80      	pop	{r7, pc}
 800b122:	bf00      	nop
 800b124:	4f54300a 	.word	0x4f54300a

0800b128 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800b128:	b480      	push	{r7}
 800b12a:	b085      	sub	sp, #20
 800b12c:	af00      	add	r7, sp, #0
 800b12e:	6078      	str	r0, [r7, #4]
 800b130:	460b      	mov	r3, r1
 800b132:	70fb      	strb	r3, [r7, #3]
 800b134:	4613      	mov	r3, r2
 800b136:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	681b      	ldr	r3, [r3, #0]
 800b13c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b13e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800b140:	78fb      	ldrb	r3, [r7, #3]
 800b142:	2b00      	cmp	r3, #0
 800b144:	d107      	bne.n	800b156 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800b146:	883b      	ldrh	r3, [r7, #0]
 800b148:	0419      	lsls	r1, r3, #16
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	681b      	ldr	r3, [r3, #0]
 800b14e:	68ba      	ldr	r2, [r7, #8]
 800b150:	430a      	orrs	r2, r1
 800b152:	629a      	str	r2, [r3, #40]	; 0x28
 800b154:	e028      	b.n	800b1a8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	681b      	ldr	r3, [r3, #0]
 800b15a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b15c:	0c1b      	lsrs	r3, r3, #16
 800b15e:	68ba      	ldr	r2, [r7, #8]
 800b160:	4413      	add	r3, r2
 800b162:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800b164:	2300      	movs	r3, #0
 800b166:	73fb      	strb	r3, [r7, #15]
 800b168:	e00d      	b.n	800b186 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	681a      	ldr	r2, [r3, #0]
 800b16e:	7bfb      	ldrb	r3, [r7, #15]
 800b170:	3340      	adds	r3, #64	; 0x40
 800b172:	009b      	lsls	r3, r3, #2
 800b174:	4413      	add	r3, r2
 800b176:	685b      	ldr	r3, [r3, #4]
 800b178:	0c1b      	lsrs	r3, r3, #16
 800b17a:	68ba      	ldr	r2, [r7, #8]
 800b17c:	4413      	add	r3, r2
 800b17e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800b180:	7bfb      	ldrb	r3, [r7, #15]
 800b182:	3301      	adds	r3, #1
 800b184:	73fb      	strb	r3, [r7, #15]
 800b186:	7bfa      	ldrb	r2, [r7, #15]
 800b188:	78fb      	ldrb	r3, [r7, #3]
 800b18a:	3b01      	subs	r3, #1
 800b18c:	429a      	cmp	r2, r3
 800b18e:	d3ec      	bcc.n	800b16a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800b190:	883b      	ldrh	r3, [r7, #0]
 800b192:	0418      	lsls	r0, r3, #16
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	6819      	ldr	r1, [r3, #0]
 800b198:	78fb      	ldrb	r3, [r7, #3]
 800b19a:	3b01      	subs	r3, #1
 800b19c:	68ba      	ldr	r2, [r7, #8]
 800b19e:	4302      	orrs	r2, r0
 800b1a0:	3340      	adds	r3, #64	; 0x40
 800b1a2:	009b      	lsls	r3, r3, #2
 800b1a4:	440b      	add	r3, r1
 800b1a6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800b1a8:	2300      	movs	r3, #0
}
 800b1aa:	4618      	mov	r0, r3
 800b1ac:	3714      	adds	r7, #20
 800b1ae:	46bd      	mov	sp, r7
 800b1b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1b4:	4770      	bx	lr

0800b1b6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800b1b6:	b480      	push	{r7}
 800b1b8:	b083      	sub	sp, #12
 800b1ba:	af00      	add	r7, sp, #0
 800b1bc:	6078      	str	r0, [r7, #4]
 800b1be:	460b      	mov	r3, r1
 800b1c0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	887a      	ldrh	r2, [r7, #2]
 800b1c8:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800b1ca:	2300      	movs	r3, #0
}
 800b1cc:	4618      	mov	r0, r3
 800b1ce:	370c      	adds	r7, #12
 800b1d0:	46bd      	mov	sp, r7
 800b1d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1d6:	4770      	bx	lr

0800b1d8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800b1d8:	b480      	push	{r7}
 800b1da:	b083      	sub	sp, #12
 800b1dc:	af00      	add	r7, sp, #0
 800b1de:	6078      	str	r0, [r7, #4]
 800b1e0:	460b      	mov	r3, r1
 800b1e2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800b1e4:	bf00      	nop
 800b1e6:	370c      	adds	r7, #12
 800b1e8:	46bd      	mov	sp, r7
 800b1ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ee:	4770      	bx	lr

0800b1f0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800b1f0:	b580      	push	{r7, lr}
 800b1f2:	b086      	sub	sp, #24
 800b1f4:	af00      	add	r7, sp, #0
 800b1f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	d101      	bne.n	800b202 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800b1fe:	2301      	movs	r3, #1
 800b200:	e267      	b.n	800b6d2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	f003 0301 	and.w	r3, r3, #1
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	d075      	beq.n	800b2fa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800b20e:	4b88      	ldr	r3, [pc, #544]	; (800b430 <HAL_RCC_OscConfig+0x240>)
 800b210:	689b      	ldr	r3, [r3, #8]
 800b212:	f003 030c 	and.w	r3, r3, #12
 800b216:	2b04      	cmp	r3, #4
 800b218:	d00c      	beq.n	800b234 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800b21a:	4b85      	ldr	r3, [pc, #532]	; (800b430 <HAL_RCC_OscConfig+0x240>)
 800b21c:	689b      	ldr	r3, [r3, #8]
 800b21e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800b222:	2b08      	cmp	r3, #8
 800b224:	d112      	bne.n	800b24c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800b226:	4b82      	ldr	r3, [pc, #520]	; (800b430 <HAL_RCC_OscConfig+0x240>)
 800b228:	685b      	ldr	r3, [r3, #4]
 800b22a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b22e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b232:	d10b      	bne.n	800b24c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b234:	4b7e      	ldr	r3, [pc, #504]	; (800b430 <HAL_RCC_OscConfig+0x240>)
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	d05b      	beq.n	800b2f8 <HAL_RCC_OscConfig+0x108>
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	685b      	ldr	r3, [r3, #4]
 800b244:	2b00      	cmp	r3, #0
 800b246:	d157      	bne.n	800b2f8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800b248:	2301      	movs	r3, #1
 800b24a:	e242      	b.n	800b6d2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	685b      	ldr	r3, [r3, #4]
 800b250:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b254:	d106      	bne.n	800b264 <HAL_RCC_OscConfig+0x74>
 800b256:	4b76      	ldr	r3, [pc, #472]	; (800b430 <HAL_RCC_OscConfig+0x240>)
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	4a75      	ldr	r2, [pc, #468]	; (800b430 <HAL_RCC_OscConfig+0x240>)
 800b25c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b260:	6013      	str	r3, [r2, #0]
 800b262:	e01d      	b.n	800b2a0 <HAL_RCC_OscConfig+0xb0>
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	685b      	ldr	r3, [r3, #4]
 800b268:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b26c:	d10c      	bne.n	800b288 <HAL_RCC_OscConfig+0x98>
 800b26e:	4b70      	ldr	r3, [pc, #448]	; (800b430 <HAL_RCC_OscConfig+0x240>)
 800b270:	681b      	ldr	r3, [r3, #0]
 800b272:	4a6f      	ldr	r2, [pc, #444]	; (800b430 <HAL_RCC_OscConfig+0x240>)
 800b274:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800b278:	6013      	str	r3, [r2, #0]
 800b27a:	4b6d      	ldr	r3, [pc, #436]	; (800b430 <HAL_RCC_OscConfig+0x240>)
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	4a6c      	ldr	r2, [pc, #432]	; (800b430 <HAL_RCC_OscConfig+0x240>)
 800b280:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b284:	6013      	str	r3, [r2, #0]
 800b286:	e00b      	b.n	800b2a0 <HAL_RCC_OscConfig+0xb0>
 800b288:	4b69      	ldr	r3, [pc, #420]	; (800b430 <HAL_RCC_OscConfig+0x240>)
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	4a68      	ldr	r2, [pc, #416]	; (800b430 <HAL_RCC_OscConfig+0x240>)
 800b28e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b292:	6013      	str	r3, [r2, #0]
 800b294:	4b66      	ldr	r3, [pc, #408]	; (800b430 <HAL_RCC_OscConfig+0x240>)
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	4a65      	ldr	r2, [pc, #404]	; (800b430 <HAL_RCC_OscConfig+0x240>)
 800b29a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b29e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	685b      	ldr	r3, [r3, #4]
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d013      	beq.n	800b2d0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b2a8:	f7fa fbbc 	bl	8005a24 <HAL_GetTick>
 800b2ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b2ae:	e008      	b.n	800b2c2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800b2b0:	f7fa fbb8 	bl	8005a24 <HAL_GetTick>
 800b2b4:	4602      	mov	r2, r0
 800b2b6:	693b      	ldr	r3, [r7, #16]
 800b2b8:	1ad3      	subs	r3, r2, r3
 800b2ba:	2b64      	cmp	r3, #100	; 0x64
 800b2bc:	d901      	bls.n	800b2c2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800b2be:	2303      	movs	r3, #3
 800b2c0:	e207      	b.n	800b6d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b2c2:	4b5b      	ldr	r3, [pc, #364]	; (800b430 <HAL_RCC_OscConfig+0x240>)
 800b2c4:	681b      	ldr	r3, [r3, #0]
 800b2c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	d0f0      	beq.n	800b2b0 <HAL_RCC_OscConfig+0xc0>
 800b2ce:	e014      	b.n	800b2fa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b2d0:	f7fa fba8 	bl	8005a24 <HAL_GetTick>
 800b2d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b2d6:	e008      	b.n	800b2ea <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800b2d8:	f7fa fba4 	bl	8005a24 <HAL_GetTick>
 800b2dc:	4602      	mov	r2, r0
 800b2de:	693b      	ldr	r3, [r7, #16]
 800b2e0:	1ad3      	subs	r3, r2, r3
 800b2e2:	2b64      	cmp	r3, #100	; 0x64
 800b2e4:	d901      	bls.n	800b2ea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800b2e6:	2303      	movs	r3, #3
 800b2e8:	e1f3      	b.n	800b6d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b2ea:	4b51      	ldr	r3, [pc, #324]	; (800b430 <HAL_RCC_OscConfig+0x240>)
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	d1f0      	bne.n	800b2d8 <HAL_RCC_OscConfig+0xe8>
 800b2f6:	e000      	b.n	800b2fa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b2f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	f003 0302 	and.w	r3, r3, #2
 800b302:	2b00      	cmp	r3, #0
 800b304:	d063      	beq.n	800b3ce <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800b306:	4b4a      	ldr	r3, [pc, #296]	; (800b430 <HAL_RCC_OscConfig+0x240>)
 800b308:	689b      	ldr	r3, [r3, #8]
 800b30a:	f003 030c 	and.w	r3, r3, #12
 800b30e:	2b00      	cmp	r3, #0
 800b310:	d00b      	beq.n	800b32a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800b312:	4b47      	ldr	r3, [pc, #284]	; (800b430 <HAL_RCC_OscConfig+0x240>)
 800b314:	689b      	ldr	r3, [r3, #8]
 800b316:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800b31a:	2b08      	cmp	r3, #8
 800b31c:	d11c      	bne.n	800b358 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800b31e:	4b44      	ldr	r3, [pc, #272]	; (800b430 <HAL_RCC_OscConfig+0x240>)
 800b320:	685b      	ldr	r3, [r3, #4]
 800b322:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b326:	2b00      	cmp	r3, #0
 800b328:	d116      	bne.n	800b358 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b32a:	4b41      	ldr	r3, [pc, #260]	; (800b430 <HAL_RCC_OscConfig+0x240>)
 800b32c:	681b      	ldr	r3, [r3, #0]
 800b32e:	f003 0302 	and.w	r3, r3, #2
 800b332:	2b00      	cmp	r3, #0
 800b334:	d005      	beq.n	800b342 <HAL_RCC_OscConfig+0x152>
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	68db      	ldr	r3, [r3, #12]
 800b33a:	2b01      	cmp	r3, #1
 800b33c:	d001      	beq.n	800b342 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800b33e:	2301      	movs	r3, #1
 800b340:	e1c7      	b.n	800b6d2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b342:	4b3b      	ldr	r3, [pc, #236]	; (800b430 <HAL_RCC_OscConfig+0x240>)
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	691b      	ldr	r3, [r3, #16]
 800b34e:	00db      	lsls	r3, r3, #3
 800b350:	4937      	ldr	r1, [pc, #220]	; (800b430 <HAL_RCC_OscConfig+0x240>)
 800b352:	4313      	orrs	r3, r2
 800b354:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b356:	e03a      	b.n	800b3ce <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	68db      	ldr	r3, [r3, #12]
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d020      	beq.n	800b3a2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800b360:	4b34      	ldr	r3, [pc, #208]	; (800b434 <HAL_RCC_OscConfig+0x244>)
 800b362:	2201      	movs	r2, #1
 800b364:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b366:	f7fa fb5d 	bl	8005a24 <HAL_GetTick>
 800b36a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b36c:	e008      	b.n	800b380 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800b36e:	f7fa fb59 	bl	8005a24 <HAL_GetTick>
 800b372:	4602      	mov	r2, r0
 800b374:	693b      	ldr	r3, [r7, #16]
 800b376:	1ad3      	subs	r3, r2, r3
 800b378:	2b02      	cmp	r3, #2
 800b37a:	d901      	bls.n	800b380 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800b37c:	2303      	movs	r3, #3
 800b37e:	e1a8      	b.n	800b6d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b380:	4b2b      	ldr	r3, [pc, #172]	; (800b430 <HAL_RCC_OscConfig+0x240>)
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	f003 0302 	and.w	r3, r3, #2
 800b388:	2b00      	cmp	r3, #0
 800b38a:	d0f0      	beq.n	800b36e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b38c:	4b28      	ldr	r3, [pc, #160]	; (800b430 <HAL_RCC_OscConfig+0x240>)
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	691b      	ldr	r3, [r3, #16]
 800b398:	00db      	lsls	r3, r3, #3
 800b39a:	4925      	ldr	r1, [pc, #148]	; (800b430 <HAL_RCC_OscConfig+0x240>)
 800b39c:	4313      	orrs	r3, r2
 800b39e:	600b      	str	r3, [r1, #0]
 800b3a0:	e015      	b.n	800b3ce <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800b3a2:	4b24      	ldr	r3, [pc, #144]	; (800b434 <HAL_RCC_OscConfig+0x244>)
 800b3a4:	2200      	movs	r2, #0
 800b3a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b3a8:	f7fa fb3c 	bl	8005a24 <HAL_GetTick>
 800b3ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b3ae:	e008      	b.n	800b3c2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800b3b0:	f7fa fb38 	bl	8005a24 <HAL_GetTick>
 800b3b4:	4602      	mov	r2, r0
 800b3b6:	693b      	ldr	r3, [r7, #16]
 800b3b8:	1ad3      	subs	r3, r2, r3
 800b3ba:	2b02      	cmp	r3, #2
 800b3bc:	d901      	bls.n	800b3c2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800b3be:	2303      	movs	r3, #3
 800b3c0:	e187      	b.n	800b6d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b3c2:	4b1b      	ldr	r3, [pc, #108]	; (800b430 <HAL_RCC_OscConfig+0x240>)
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	f003 0302 	and.w	r3, r3, #2
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d1f0      	bne.n	800b3b0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	681b      	ldr	r3, [r3, #0]
 800b3d2:	f003 0308 	and.w	r3, r3, #8
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	d036      	beq.n	800b448 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	695b      	ldr	r3, [r3, #20]
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	d016      	beq.n	800b410 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800b3e2:	4b15      	ldr	r3, [pc, #84]	; (800b438 <HAL_RCC_OscConfig+0x248>)
 800b3e4:	2201      	movs	r2, #1
 800b3e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b3e8:	f7fa fb1c 	bl	8005a24 <HAL_GetTick>
 800b3ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b3ee:	e008      	b.n	800b402 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800b3f0:	f7fa fb18 	bl	8005a24 <HAL_GetTick>
 800b3f4:	4602      	mov	r2, r0
 800b3f6:	693b      	ldr	r3, [r7, #16]
 800b3f8:	1ad3      	subs	r3, r2, r3
 800b3fa:	2b02      	cmp	r3, #2
 800b3fc:	d901      	bls.n	800b402 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800b3fe:	2303      	movs	r3, #3
 800b400:	e167      	b.n	800b6d2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b402:	4b0b      	ldr	r3, [pc, #44]	; (800b430 <HAL_RCC_OscConfig+0x240>)
 800b404:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b406:	f003 0302 	and.w	r3, r3, #2
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	d0f0      	beq.n	800b3f0 <HAL_RCC_OscConfig+0x200>
 800b40e:	e01b      	b.n	800b448 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800b410:	4b09      	ldr	r3, [pc, #36]	; (800b438 <HAL_RCC_OscConfig+0x248>)
 800b412:	2200      	movs	r2, #0
 800b414:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b416:	f7fa fb05 	bl	8005a24 <HAL_GetTick>
 800b41a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b41c:	e00e      	b.n	800b43c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800b41e:	f7fa fb01 	bl	8005a24 <HAL_GetTick>
 800b422:	4602      	mov	r2, r0
 800b424:	693b      	ldr	r3, [r7, #16]
 800b426:	1ad3      	subs	r3, r2, r3
 800b428:	2b02      	cmp	r3, #2
 800b42a:	d907      	bls.n	800b43c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800b42c:	2303      	movs	r3, #3
 800b42e:	e150      	b.n	800b6d2 <HAL_RCC_OscConfig+0x4e2>
 800b430:	40023800 	.word	0x40023800
 800b434:	42470000 	.word	0x42470000
 800b438:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b43c:	4b88      	ldr	r3, [pc, #544]	; (800b660 <HAL_RCC_OscConfig+0x470>)
 800b43e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b440:	f003 0302 	and.w	r3, r3, #2
 800b444:	2b00      	cmp	r3, #0
 800b446:	d1ea      	bne.n	800b41e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	f003 0304 	and.w	r3, r3, #4
 800b450:	2b00      	cmp	r3, #0
 800b452:	f000 8097 	beq.w	800b584 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800b456:	2300      	movs	r3, #0
 800b458:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800b45a:	4b81      	ldr	r3, [pc, #516]	; (800b660 <HAL_RCC_OscConfig+0x470>)
 800b45c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b45e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b462:	2b00      	cmp	r3, #0
 800b464:	d10f      	bne.n	800b486 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b466:	2300      	movs	r3, #0
 800b468:	60bb      	str	r3, [r7, #8]
 800b46a:	4b7d      	ldr	r3, [pc, #500]	; (800b660 <HAL_RCC_OscConfig+0x470>)
 800b46c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b46e:	4a7c      	ldr	r2, [pc, #496]	; (800b660 <HAL_RCC_OscConfig+0x470>)
 800b470:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b474:	6413      	str	r3, [r2, #64]	; 0x40
 800b476:	4b7a      	ldr	r3, [pc, #488]	; (800b660 <HAL_RCC_OscConfig+0x470>)
 800b478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b47a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b47e:	60bb      	str	r3, [r7, #8]
 800b480:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800b482:	2301      	movs	r3, #1
 800b484:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b486:	4b77      	ldr	r3, [pc, #476]	; (800b664 <HAL_RCC_OscConfig+0x474>)
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b48e:	2b00      	cmp	r3, #0
 800b490:	d118      	bne.n	800b4c4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800b492:	4b74      	ldr	r3, [pc, #464]	; (800b664 <HAL_RCC_OscConfig+0x474>)
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	4a73      	ldr	r2, [pc, #460]	; (800b664 <HAL_RCC_OscConfig+0x474>)
 800b498:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b49c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800b49e:	f7fa fac1 	bl	8005a24 <HAL_GetTick>
 800b4a2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b4a4:	e008      	b.n	800b4b8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b4a6:	f7fa fabd 	bl	8005a24 <HAL_GetTick>
 800b4aa:	4602      	mov	r2, r0
 800b4ac:	693b      	ldr	r3, [r7, #16]
 800b4ae:	1ad3      	subs	r3, r2, r3
 800b4b0:	2b02      	cmp	r3, #2
 800b4b2:	d901      	bls.n	800b4b8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800b4b4:	2303      	movs	r3, #3
 800b4b6:	e10c      	b.n	800b6d2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b4b8:	4b6a      	ldr	r3, [pc, #424]	; (800b664 <HAL_RCC_OscConfig+0x474>)
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	d0f0      	beq.n	800b4a6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	689b      	ldr	r3, [r3, #8]
 800b4c8:	2b01      	cmp	r3, #1
 800b4ca:	d106      	bne.n	800b4da <HAL_RCC_OscConfig+0x2ea>
 800b4cc:	4b64      	ldr	r3, [pc, #400]	; (800b660 <HAL_RCC_OscConfig+0x470>)
 800b4ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b4d0:	4a63      	ldr	r2, [pc, #396]	; (800b660 <HAL_RCC_OscConfig+0x470>)
 800b4d2:	f043 0301 	orr.w	r3, r3, #1
 800b4d6:	6713      	str	r3, [r2, #112]	; 0x70
 800b4d8:	e01c      	b.n	800b514 <HAL_RCC_OscConfig+0x324>
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	689b      	ldr	r3, [r3, #8]
 800b4de:	2b05      	cmp	r3, #5
 800b4e0:	d10c      	bne.n	800b4fc <HAL_RCC_OscConfig+0x30c>
 800b4e2:	4b5f      	ldr	r3, [pc, #380]	; (800b660 <HAL_RCC_OscConfig+0x470>)
 800b4e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b4e6:	4a5e      	ldr	r2, [pc, #376]	; (800b660 <HAL_RCC_OscConfig+0x470>)
 800b4e8:	f043 0304 	orr.w	r3, r3, #4
 800b4ec:	6713      	str	r3, [r2, #112]	; 0x70
 800b4ee:	4b5c      	ldr	r3, [pc, #368]	; (800b660 <HAL_RCC_OscConfig+0x470>)
 800b4f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b4f2:	4a5b      	ldr	r2, [pc, #364]	; (800b660 <HAL_RCC_OscConfig+0x470>)
 800b4f4:	f043 0301 	orr.w	r3, r3, #1
 800b4f8:	6713      	str	r3, [r2, #112]	; 0x70
 800b4fa:	e00b      	b.n	800b514 <HAL_RCC_OscConfig+0x324>
 800b4fc:	4b58      	ldr	r3, [pc, #352]	; (800b660 <HAL_RCC_OscConfig+0x470>)
 800b4fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b500:	4a57      	ldr	r2, [pc, #348]	; (800b660 <HAL_RCC_OscConfig+0x470>)
 800b502:	f023 0301 	bic.w	r3, r3, #1
 800b506:	6713      	str	r3, [r2, #112]	; 0x70
 800b508:	4b55      	ldr	r3, [pc, #340]	; (800b660 <HAL_RCC_OscConfig+0x470>)
 800b50a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b50c:	4a54      	ldr	r2, [pc, #336]	; (800b660 <HAL_RCC_OscConfig+0x470>)
 800b50e:	f023 0304 	bic.w	r3, r3, #4
 800b512:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	689b      	ldr	r3, [r3, #8]
 800b518:	2b00      	cmp	r3, #0
 800b51a:	d015      	beq.n	800b548 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b51c:	f7fa fa82 	bl	8005a24 <HAL_GetTick>
 800b520:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b522:	e00a      	b.n	800b53a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800b524:	f7fa fa7e 	bl	8005a24 <HAL_GetTick>
 800b528:	4602      	mov	r2, r0
 800b52a:	693b      	ldr	r3, [r7, #16]
 800b52c:	1ad3      	subs	r3, r2, r3
 800b52e:	f241 3288 	movw	r2, #5000	; 0x1388
 800b532:	4293      	cmp	r3, r2
 800b534:	d901      	bls.n	800b53a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800b536:	2303      	movs	r3, #3
 800b538:	e0cb      	b.n	800b6d2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b53a:	4b49      	ldr	r3, [pc, #292]	; (800b660 <HAL_RCC_OscConfig+0x470>)
 800b53c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b53e:	f003 0302 	and.w	r3, r3, #2
 800b542:	2b00      	cmp	r3, #0
 800b544:	d0ee      	beq.n	800b524 <HAL_RCC_OscConfig+0x334>
 800b546:	e014      	b.n	800b572 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b548:	f7fa fa6c 	bl	8005a24 <HAL_GetTick>
 800b54c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b54e:	e00a      	b.n	800b566 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800b550:	f7fa fa68 	bl	8005a24 <HAL_GetTick>
 800b554:	4602      	mov	r2, r0
 800b556:	693b      	ldr	r3, [r7, #16]
 800b558:	1ad3      	subs	r3, r2, r3
 800b55a:	f241 3288 	movw	r2, #5000	; 0x1388
 800b55e:	4293      	cmp	r3, r2
 800b560:	d901      	bls.n	800b566 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800b562:	2303      	movs	r3, #3
 800b564:	e0b5      	b.n	800b6d2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b566:	4b3e      	ldr	r3, [pc, #248]	; (800b660 <HAL_RCC_OscConfig+0x470>)
 800b568:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b56a:	f003 0302 	and.w	r3, r3, #2
 800b56e:	2b00      	cmp	r3, #0
 800b570:	d1ee      	bne.n	800b550 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800b572:	7dfb      	ldrb	r3, [r7, #23]
 800b574:	2b01      	cmp	r3, #1
 800b576:	d105      	bne.n	800b584 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b578:	4b39      	ldr	r3, [pc, #228]	; (800b660 <HAL_RCC_OscConfig+0x470>)
 800b57a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b57c:	4a38      	ldr	r2, [pc, #224]	; (800b660 <HAL_RCC_OscConfig+0x470>)
 800b57e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b582:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	699b      	ldr	r3, [r3, #24]
 800b588:	2b00      	cmp	r3, #0
 800b58a:	f000 80a1 	beq.w	800b6d0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800b58e:	4b34      	ldr	r3, [pc, #208]	; (800b660 <HAL_RCC_OscConfig+0x470>)
 800b590:	689b      	ldr	r3, [r3, #8]
 800b592:	f003 030c 	and.w	r3, r3, #12
 800b596:	2b08      	cmp	r3, #8
 800b598:	d05c      	beq.n	800b654 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	699b      	ldr	r3, [r3, #24]
 800b59e:	2b02      	cmp	r3, #2
 800b5a0:	d141      	bne.n	800b626 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b5a2:	4b31      	ldr	r3, [pc, #196]	; (800b668 <HAL_RCC_OscConfig+0x478>)
 800b5a4:	2200      	movs	r2, #0
 800b5a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b5a8:	f7fa fa3c 	bl	8005a24 <HAL_GetTick>
 800b5ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b5ae:	e008      	b.n	800b5c2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b5b0:	f7fa fa38 	bl	8005a24 <HAL_GetTick>
 800b5b4:	4602      	mov	r2, r0
 800b5b6:	693b      	ldr	r3, [r7, #16]
 800b5b8:	1ad3      	subs	r3, r2, r3
 800b5ba:	2b02      	cmp	r3, #2
 800b5bc:	d901      	bls.n	800b5c2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800b5be:	2303      	movs	r3, #3
 800b5c0:	e087      	b.n	800b6d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b5c2:	4b27      	ldr	r3, [pc, #156]	; (800b660 <HAL_RCC_OscConfig+0x470>)
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d1f0      	bne.n	800b5b0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	69da      	ldr	r2, [r3, #28]
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	6a1b      	ldr	r3, [r3, #32]
 800b5d6:	431a      	orrs	r2, r3
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5dc:	019b      	lsls	r3, r3, #6
 800b5de:	431a      	orrs	r2, r3
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b5e4:	085b      	lsrs	r3, r3, #1
 800b5e6:	3b01      	subs	r3, #1
 800b5e8:	041b      	lsls	r3, r3, #16
 800b5ea:	431a      	orrs	r2, r3
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5f0:	061b      	lsls	r3, r3, #24
 800b5f2:	491b      	ldr	r1, [pc, #108]	; (800b660 <HAL_RCC_OscConfig+0x470>)
 800b5f4:	4313      	orrs	r3, r2
 800b5f6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800b5f8:	4b1b      	ldr	r3, [pc, #108]	; (800b668 <HAL_RCC_OscConfig+0x478>)
 800b5fa:	2201      	movs	r2, #1
 800b5fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b5fe:	f7fa fa11 	bl	8005a24 <HAL_GetTick>
 800b602:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b604:	e008      	b.n	800b618 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b606:	f7fa fa0d 	bl	8005a24 <HAL_GetTick>
 800b60a:	4602      	mov	r2, r0
 800b60c:	693b      	ldr	r3, [r7, #16]
 800b60e:	1ad3      	subs	r3, r2, r3
 800b610:	2b02      	cmp	r3, #2
 800b612:	d901      	bls.n	800b618 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800b614:	2303      	movs	r3, #3
 800b616:	e05c      	b.n	800b6d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b618:	4b11      	ldr	r3, [pc, #68]	; (800b660 <HAL_RCC_OscConfig+0x470>)
 800b61a:	681b      	ldr	r3, [r3, #0]
 800b61c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b620:	2b00      	cmp	r3, #0
 800b622:	d0f0      	beq.n	800b606 <HAL_RCC_OscConfig+0x416>
 800b624:	e054      	b.n	800b6d0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b626:	4b10      	ldr	r3, [pc, #64]	; (800b668 <HAL_RCC_OscConfig+0x478>)
 800b628:	2200      	movs	r2, #0
 800b62a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b62c:	f7fa f9fa 	bl	8005a24 <HAL_GetTick>
 800b630:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b632:	e008      	b.n	800b646 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b634:	f7fa f9f6 	bl	8005a24 <HAL_GetTick>
 800b638:	4602      	mov	r2, r0
 800b63a:	693b      	ldr	r3, [r7, #16]
 800b63c:	1ad3      	subs	r3, r2, r3
 800b63e:	2b02      	cmp	r3, #2
 800b640:	d901      	bls.n	800b646 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800b642:	2303      	movs	r3, #3
 800b644:	e045      	b.n	800b6d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b646:	4b06      	ldr	r3, [pc, #24]	; (800b660 <HAL_RCC_OscConfig+0x470>)
 800b648:	681b      	ldr	r3, [r3, #0]
 800b64a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b64e:	2b00      	cmp	r3, #0
 800b650:	d1f0      	bne.n	800b634 <HAL_RCC_OscConfig+0x444>
 800b652:	e03d      	b.n	800b6d0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	699b      	ldr	r3, [r3, #24]
 800b658:	2b01      	cmp	r3, #1
 800b65a:	d107      	bne.n	800b66c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800b65c:	2301      	movs	r3, #1
 800b65e:	e038      	b.n	800b6d2 <HAL_RCC_OscConfig+0x4e2>
 800b660:	40023800 	.word	0x40023800
 800b664:	40007000 	.word	0x40007000
 800b668:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800b66c:	4b1b      	ldr	r3, [pc, #108]	; (800b6dc <HAL_RCC_OscConfig+0x4ec>)
 800b66e:	685b      	ldr	r3, [r3, #4]
 800b670:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	699b      	ldr	r3, [r3, #24]
 800b676:	2b01      	cmp	r3, #1
 800b678:	d028      	beq.n	800b6cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b67a:	68fb      	ldr	r3, [r7, #12]
 800b67c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b684:	429a      	cmp	r2, r3
 800b686:	d121      	bne.n	800b6cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800b688:	68fb      	ldr	r3, [r7, #12]
 800b68a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b692:	429a      	cmp	r2, r3
 800b694:	d11a      	bne.n	800b6cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800b696:	68fa      	ldr	r2, [r7, #12]
 800b698:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800b69c:	4013      	ands	r3, r2
 800b69e:	687a      	ldr	r2, [r7, #4]
 800b6a0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800b6a2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800b6a4:	4293      	cmp	r3, r2
 800b6a6:	d111      	bne.n	800b6cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800b6a8:	68fb      	ldr	r3, [r7, #12]
 800b6aa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b6b2:	085b      	lsrs	r3, r3, #1
 800b6b4:	3b01      	subs	r3, #1
 800b6b6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800b6b8:	429a      	cmp	r2, r3
 800b6ba:	d107      	bne.n	800b6cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800b6bc:	68fb      	ldr	r3, [r7, #12]
 800b6be:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6c6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800b6c8:	429a      	cmp	r2, r3
 800b6ca:	d001      	beq.n	800b6d0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800b6cc:	2301      	movs	r3, #1
 800b6ce:	e000      	b.n	800b6d2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800b6d0:	2300      	movs	r3, #0
}
 800b6d2:	4618      	mov	r0, r3
 800b6d4:	3718      	adds	r7, #24
 800b6d6:	46bd      	mov	sp, r7
 800b6d8:	bd80      	pop	{r7, pc}
 800b6da:	bf00      	nop
 800b6dc:	40023800 	.word	0x40023800

0800b6e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b6e0:	b580      	push	{r7, lr}
 800b6e2:	b084      	sub	sp, #16
 800b6e4:	af00      	add	r7, sp, #0
 800b6e6:	6078      	str	r0, [r7, #4]
 800b6e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	2b00      	cmp	r3, #0
 800b6ee:	d101      	bne.n	800b6f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800b6f0:	2301      	movs	r3, #1
 800b6f2:	e0cc      	b.n	800b88e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800b6f4:	4b68      	ldr	r3, [pc, #416]	; (800b898 <HAL_RCC_ClockConfig+0x1b8>)
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	f003 0307 	and.w	r3, r3, #7
 800b6fc:	683a      	ldr	r2, [r7, #0]
 800b6fe:	429a      	cmp	r2, r3
 800b700:	d90c      	bls.n	800b71c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b702:	4b65      	ldr	r3, [pc, #404]	; (800b898 <HAL_RCC_ClockConfig+0x1b8>)
 800b704:	683a      	ldr	r2, [r7, #0]
 800b706:	b2d2      	uxtb	r2, r2
 800b708:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800b70a:	4b63      	ldr	r3, [pc, #396]	; (800b898 <HAL_RCC_ClockConfig+0x1b8>)
 800b70c:	681b      	ldr	r3, [r3, #0]
 800b70e:	f003 0307 	and.w	r3, r3, #7
 800b712:	683a      	ldr	r2, [r7, #0]
 800b714:	429a      	cmp	r2, r3
 800b716:	d001      	beq.n	800b71c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800b718:	2301      	movs	r3, #1
 800b71a:	e0b8      	b.n	800b88e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	f003 0302 	and.w	r3, r3, #2
 800b724:	2b00      	cmp	r3, #0
 800b726:	d020      	beq.n	800b76a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	681b      	ldr	r3, [r3, #0]
 800b72c:	f003 0304 	and.w	r3, r3, #4
 800b730:	2b00      	cmp	r3, #0
 800b732:	d005      	beq.n	800b740 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800b734:	4b59      	ldr	r3, [pc, #356]	; (800b89c <HAL_RCC_ClockConfig+0x1bc>)
 800b736:	689b      	ldr	r3, [r3, #8]
 800b738:	4a58      	ldr	r2, [pc, #352]	; (800b89c <HAL_RCC_ClockConfig+0x1bc>)
 800b73a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800b73e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	f003 0308 	and.w	r3, r3, #8
 800b748:	2b00      	cmp	r3, #0
 800b74a:	d005      	beq.n	800b758 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800b74c:	4b53      	ldr	r3, [pc, #332]	; (800b89c <HAL_RCC_ClockConfig+0x1bc>)
 800b74e:	689b      	ldr	r3, [r3, #8]
 800b750:	4a52      	ldr	r2, [pc, #328]	; (800b89c <HAL_RCC_ClockConfig+0x1bc>)
 800b752:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800b756:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b758:	4b50      	ldr	r3, [pc, #320]	; (800b89c <HAL_RCC_ClockConfig+0x1bc>)
 800b75a:	689b      	ldr	r3, [r3, #8]
 800b75c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	689b      	ldr	r3, [r3, #8]
 800b764:	494d      	ldr	r1, [pc, #308]	; (800b89c <HAL_RCC_ClockConfig+0x1bc>)
 800b766:	4313      	orrs	r3, r2
 800b768:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	f003 0301 	and.w	r3, r3, #1
 800b772:	2b00      	cmp	r3, #0
 800b774:	d044      	beq.n	800b800 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	685b      	ldr	r3, [r3, #4]
 800b77a:	2b01      	cmp	r3, #1
 800b77c:	d107      	bne.n	800b78e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b77e:	4b47      	ldr	r3, [pc, #284]	; (800b89c <HAL_RCC_ClockConfig+0x1bc>)
 800b780:	681b      	ldr	r3, [r3, #0]
 800b782:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b786:	2b00      	cmp	r3, #0
 800b788:	d119      	bne.n	800b7be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b78a:	2301      	movs	r3, #1
 800b78c:	e07f      	b.n	800b88e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	685b      	ldr	r3, [r3, #4]
 800b792:	2b02      	cmp	r3, #2
 800b794:	d003      	beq.n	800b79e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800b79a:	2b03      	cmp	r3, #3
 800b79c:	d107      	bne.n	800b7ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b79e:	4b3f      	ldr	r3, [pc, #252]	; (800b89c <HAL_RCC_ClockConfig+0x1bc>)
 800b7a0:	681b      	ldr	r3, [r3, #0]
 800b7a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	d109      	bne.n	800b7be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b7aa:	2301      	movs	r3, #1
 800b7ac:	e06f      	b.n	800b88e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b7ae:	4b3b      	ldr	r3, [pc, #236]	; (800b89c <HAL_RCC_ClockConfig+0x1bc>)
 800b7b0:	681b      	ldr	r3, [r3, #0]
 800b7b2:	f003 0302 	and.w	r3, r3, #2
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	d101      	bne.n	800b7be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b7ba:	2301      	movs	r3, #1
 800b7bc:	e067      	b.n	800b88e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800b7be:	4b37      	ldr	r3, [pc, #220]	; (800b89c <HAL_RCC_ClockConfig+0x1bc>)
 800b7c0:	689b      	ldr	r3, [r3, #8]
 800b7c2:	f023 0203 	bic.w	r2, r3, #3
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	685b      	ldr	r3, [r3, #4]
 800b7ca:	4934      	ldr	r1, [pc, #208]	; (800b89c <HAL_RCC_ClockConfig+0x1bc>)
 800b7cc:	4313      	orrs	r3, r2
 800b7ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800b7d0:	f7fa f928 	bl	8005a24 <HAL_GetTick>
 800b7d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b7d6:	e00a      	b.n	800b7ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b7d8:	f7fa f924 	bl	8005a24 <HAL_GetTick>
 800b7dc:	4602      	mov	r2, r0
 800b7de:	68fb      	ldr	r3, [r7, #12]
 800b7e0:	1ad3      	subs	r3, r2, r3
 800b7e2:	f241 3288 	movw	r2, #5000	; 0x1388
 800b7e6:	4293      	cmp	r3, r2
 800b7e8:	d901      	bls.n	800b7ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800b7ea:	2303      	movs	r3, #3
 800b7ec:	e04f      	b.n	800b88e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b7ee:	4b2b      	ldr	r3, [pc, #172]	; (800b89c <HAL_RCC_ClockConfig+0x1bc>)
 800b7f0:	689b      	ldr	r3, [r3, #8]
 800b7f2:	f003 020c 	and.w	r2, r3, #12
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	685b      	ldr	r3, [r3, #4]
 800b7fa:	009b      	lsls	r3, r3, #2
 800b7fc:	429a      	cmp	r2, r3
 800b7fe:	d1eb      	bne.n	800b7d8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800b800:	4b25      	ldr	r3, [pc, #148]	; (800b898 <HAL_RCC_ClockConfig+0x1b8>)
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	f003 0307 	and.w	r3, r3, #7
 800b808:	683a      	ldr	r2, [r7, #0]
 800b80a:	429a      	cmp	r2, r3
 800b80c:	d20c      	bcs.n	800b828 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b80e:	4b22      	ldr	r3, [pc, #136]	; (800b898 <HAL_RCC_ClockConfig+0x1b8>)
 800b810:	683a      	ldr	r2, [r7, #0]
 800b812:	b2d2      	uxtb	r2, r2
 800b814:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800b816:	4b20      	ldr	r3, [pc, #128]	; (800b898 <HAL_RCC_ClockConfig+0x1b8>)
 800b818:	681b      	ldr	r3, [r3, #0]
 800b81a:	f003 0307 	and.w	r3, r3, #7
 800b81e:	683a      	ldr	r2, [r7, #0]
 800b820:	429a      	cmp	r2, r3
 800b822:	d001      	beq.n	800b828 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800b824:	2301      	movs	r3, #1
 800b826:	e032      	b.n	800b88e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	681b      	ldr	r3, [r3, #0]
 800b82c:	f003 0304 	and.w	r3, r3, #4
 800b830:	2b00      	cmp	r3, #0
 800b832:	d008      	beq.n	800b846 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800b834:	4b19      	ldr	r3, [pc, #100]	; (800b89c <HAL_RCC_ClockConfig+0x1bc>)
 800b836:	689b      	ldr	r3, [r3, #8]
 800b838:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	68db      	ldr	r3, [r3, #12]
 800b840:	4916      	ldr	r1, [pc, #88]	; (800b89c <HAL_RCC_ClockConfig+0x1bc>)
 800b842:	4313      	orrs	r3, r2
 800b844:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	681b      	ldr	r3, [r3, #0]
 800b84a:	f003 0308 	and.w	r3, r3, #8
 800b84e:	2b00      	cmp	r3, #0
 800b850:	d009      	beq.n	800b866 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800b852:	4b12      	ldr	r3, [pc, #72]	; (800b89c <HAL_RCC_ClockConfig+0x1bc>)
 800b854:	689b      	ldr	r3, [r3, #8]
 800b856:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	691b      	ldr	r3, [r3, #16]
 800b85e:	00db      	lsls	r3, r3, #3
 800b860:	490e      	ldr	r1, [pc, #56]	; (800b89c <HAL_RCC_ClockConfig+0x1bc>)
 800b862:	4313      	orrs	r3, r2
 800b864:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800b866:	f000 f821 	bl	800b8ac <HAL_RCC_GetSysClockFreq>
 800b86a:	4602      	mov	r2, r0
 800b86c:	4b0b      	ldr	r3, [pc, #44]	; (800b89c <HAL_RCC_ClockConfig+0x1bc>)
 800b86e:	689b      	ldr	r3, [r3, #8]
 800b870:	091b      	lsrs	r3, r3, #4
 800b872:	f003 030f 	and.w	r3, r3, #15
 800b876:	490a      	ldr	r1, [pc, #40]	; (800b8a0 <HAL_RCC_ClockConfig+0x1c0>)
 800b878:	5ccb      	ldrb	r3, [r1, r3]
 800b87a:	fa22 f303 	lsr.w	r3, r2, r3
 800b87e:	4a09      	ldr	r2, [pc, #36]	; (800b8a4 <HAL_RCC_ClockConfig+0x1c4>)
 800b880:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800b882:	4b09      	ldr	r3, [pc, #36]	; (800b8a8 <HAL_RCC_ClockConfig+0x1c8>)
 800b884:	681b      	ldr	r3, [r3, #0]
 800b886:	4618      	mov	r0, r3
 800b888:	f7fa f888 	bl	800599c <HAL_InitTick>

  return HAL_OK;
 800b88c:	2300      	movs	r3, #0
}
 800b88e:	4618      	mov	r0, r3
 800b890:	3710      	adds	r7, #16
 800b892:	46bd      	mov	sp, r7
 800b894:	bd80      	pop	{r7, pc}
 800b896:	bf00      	nop
 800b898:	40023c00 	.word	0x40023c00
 800b89c:	40023800 	.word	0x40023800
 800b8a0:	080198f8 	.word	0x080198f8
 800b8a4:	20000040 	.word	0x20000040
 800b8a8:	200000a0 	.word	0x200000a0

0800b8ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b8ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b8b0:	b090      	sub	sp, #64	; 0x40
 800b8b2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800b8b4:	2300      	movs	r3, #0
 800b8b6:	637b      	str	r3, [r7, #52]	; 0x34
 800b8b8:	2300      	movs	r3, #0
 800b8ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b8bc:	2300      	movs	r3, #0
 800b8be:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 800b8c0:	2300      	movs	r3, #0
 800b8c2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b8c4:	4b59      	ldr	r3, [pc, #356]	; (800ba2c <HAL_RCC_GetSysClockFreq+0x180>)
 800b8c6:	689b      	ldr	r3, [r3, #8]
 800b8c8:	f003 030c 	and.w	r3, r3, #12
 800b8cc:	2b08      	cmp	r3, #8
 800b8ce:	d00d      	beq.n	800b8ec <HAL_RCC_GetSysClockFreq+0x40>
 800b8d0:	2b08      	cmp	r3, #8
 800b8d2:	f200 80a1 	bhi.w	800ba18 <HAL_RCC_GetSysClockFreq+0x16c>
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	d002      	beq.n	800b8e0 <HAL_RCC_GetSysClockFreq+0x34>
 800b8da:	2b04      	cmp	r3, #4
 800b8dc:	d003      	beq.n	800b8e6 <HAL_RCC_GetSysClockFreq+0x3a>
 800b8de:	e09b      	b.n	800ba18 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800b8e0:	4b53      	ldr	r3, [pc, #332]	; (800ba30 <HAL_RCC_GetSysClockFreq+0x184>)
 800b8e2:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800b8e4:	e09b      	b.n	800ba1e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800b8e6:	4b53      	ldr	r3, [pc, #332]	; (800ba34 <HAL_RCC_GetSysClockFreq+0x188>)
 800b8e8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800b8ea:	e098      	b.n	800ba1e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800b8ec:	4b4f      	ldr	r3, [pc, #316]	; (800ba2c <HAL_RCC_GetSysClockFreq+0x180>)
 800b8ee:	685b      	ldr	r3, [r3, #4]
 800b8f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b8f4:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800b8f6:	4b4d      	ldr	r3, [pc, #308]	; (800ba2c <HAL_RCC_GetSysClockFreq+0x180>)
 800b8f8:	685b      	ldr	r3, [r3, #4]
 800b8fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d028      	beq.n	800b954 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b902:	4b4a      	ldr	r3, [pc, #296]	; (800ba2c <HAL_RCC_GetSysClockFreq+0x180>)
 800b904:	685b      	ldr	r3, [r3, #4]
 800b906:	099b      	lsrs	r3, r3, #6
 800b908:	2200      	movs	r2, #0
 800b90a:	623b      	str	r3, [r7, #32]
 800b90c:	627a      	str	r2, [r7, #36]	; 0x24
 800b90e:	6a3b      	ldr	r3, [r7, #32]
 800b910:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800b914:	2100      	movs	r1, #0
 800b916:	4b47      	ldr	r3, [pc, #284]	; (800ba34 <HAL_RCC_GetSysClockFreq+0x188>)
 800b918:	fb03 f201 	mul.w	r2, r3, r1
 800b91c:	2300      	movs	r3, #0
 800b91e:	fb00 f303 	mul.w	r3, r0, r3
 800b922:	4413      	add	r3, r2
 800b924:	4a43      	ldr	r2, [pc, #268]	; (800ba34 <HAL_RCC_GetSysClockFreq+0x188>)
 800b926:	fba0 1202 	umull	r1, r2, r0, r2
 800b92a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b92c:	460a      	mov	r2, r1
 800b92e:	62ba      	str	r2, [r7, #40]	; 0x28
 800b930:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b932:	4413      	add	r3, r2
 800b934:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b936:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b938:	2200      	movs	r2, #0
 800b93a:	61bb      	str	r3, [r7, #24]
 800b93c:	61fa      	str	r2, [r7, #28]
 800b93e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b942:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800b946:	f7f5 f987 	bl	8000c58 <__aeabi_uldivmod>
 800b94a:	4602      	mov	r2, r0
 800b94c:	460b      	mov	r3, r1
 800b94e:	4613      	mov	r3, r2
 800b950:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b952:	e053      	b.n	800b9fc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b954:	4b35      	ldr	r3, [pc, #212]	; (800ba2c <HAL_RCC_GetSysClockFreq+0x180>)
 800b956:	685b      	ldr	r3, [r3, #4]
 800b958:	099b      	lsrs	r3, r3, #6
 800b95a:	2200      	movs	r2, #0
 800b95c:	613b      	str	r3, [r7, #16]
 800b95e:	617a      	str	r2, [r7, #20]
 800b960:	693b      	ldr	r3, [r7, #16]
 800b962:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800b966:	f04f 0b00 	mov.w	fp, #0
 800b96a:	4652      	mov	r2, sl
 800b96c:	465b      	mov	r3, fp
 800b96e:	f04f 0000 	mov.w	r0, #0
 800b972:	f04f 0100 	mov.w	r1, #0
 800b976:	0159      	lsls	r1, r3, #5
 800b978:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800b97c:	0150      	lsls	r0, r2, #5
 800b97e:	4602      	mov	r2, r0
 800b980:	460b      	mov	r3, r1
 800b982:	ebb2 080a 	subs.w	r8, r2, sl
 800b986:	eb63 090b 	sbc.w	r9, r3, fp
 800b98a:	f04f 0200 	mov.w	r2, #0
 800b98e:	f04f 0300 	mov.w	r3, #0
 800b992:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800b996:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800b99a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800b99e:	ebb2 0408 	subs.w	r4, r2, r8
 800b9a2:	eb63 0509 	sbc.w	r5, r3, r9
 800b9a6:	f04f 0200 	mov.w	r2, #0
 800b9aa:	f04f 0300 	mov.w	r3, #0
 800b9ae:	00eb      	lsls	r3, r5, #3
 800b9b0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800b9b4:	00e2      	lsls	r2, r4, #3
 800b9b6:	4614      	mov	r4, r2
 800b9b8:	461d      	mov	r5, r3
 800b9ba:	eb14 030a 	adds.w	r3, r4, sl
 800b9be:	603b      	str	r3, [r7, #0]
 800b9c0:	eb45 030b 	adc.w	r3, r5, fp
 800b9c4:	607b      	str	r3, [r7, #4]
 800b9c6:	f04f 0200 	mov.w	r2, #0
 800b9ca:	f04f 0300 	mov.w	r3, #0
 800b9ce:	e9d7 4500 	ldrd	r4, r5, [r7]
 800b9d2:	4629      	mov	r1, r5
 800b9d4:	028b      	lsls	r3, r1, #10
 800b9d6:	4621      	mov	r1, r4
 800b9d8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800b9dc:	4621      	mov	r1, r4
 800b9de:	028a      	lsls	r2, r1, #10
 800b9e0:	4610      	mov	r0, r2
 800b9e2:	4619      	mov	r1, r3
 800b9e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b9e6:	2200      	movs	r2, #0
 800b9e8:	60bb      	str	r3, [r7, #8]
 800b9ea:	60fa      	str	r2, [r7, #12]
 800b9ec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b9f0:	f7f5 f932 	bl	8000c58 <__aeabi_uldivmod>
 800b9f4:	4602      	mov	r2, r0
 800b9f6:	460b      	mov	r3, r1
 800b9f8:	4613      	mov	r3, r2
 800b9fa:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800b9fc:	4b0b      	ldr	r3, [pc, #44]	; (800ba2c <HAL_RCC_GetSysClockFreq+0x180>)
 800b9fe:	685b      	ldr	r3, [r3, #4]
 800ba00:	0c1b      	lsrs	r3, r3, #16
 800ba02:	f003 0303 	and.w	r3, r3, #3
 800ba06:	3301      	adds	r3, #1
 800ba08:	005b      	lsls	r3, r3, #1
 800ba0a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800ba0c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ba0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba10:	fbb2 f3f3 	udiv	r3, r2, r3
 800ba14:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800ba16:	e002      	b.n	800ba1e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800ba18:	4b05      	ldr	r3, [pc, #20]	; (800ba30 <HAL_RCC_GetSysClockFreq+0x184>)
 800ba1a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800ba1c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800ba1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800ba20:	4618      	mov	r0, r3
 800ba22:	3740      	adds	r7, #64	; 0x40
 800ba24:	46bd      	mov	sp, r7
 800ba26:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ba2a:	bf00      	nop
 800ba2c:	40023800 	.word	0x40023800
 800ba30:	00f42400 	.word	0x00f42400
 800ba34:	017d7840 	.word	0x017d7840

0800ba38 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800ba38:	b480      	push	{r7}
 800ba3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800ba3c:	4b03      	ldr	r3, [pc, #12]	; (800ba4c <HAL_RCC_GetHCLKFreq+0x14>)
 800ba3e:	681b      	ldr	r3, [r3, #0]
}
 800ba40:	4618      	mov	r0, r3
 800ba42:	46bd      	mov	sp, r7
 800ba44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba48:	4770      	bx	lr
 800ba4a:	bf00      	nop
 800ba4c:	20000040 	.word	0x20000040

0800ba50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800ba50:	b580      	push	{r7, lr}
 800ba52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800ba54:	f7ff fff0 	bl	800ba38 <HAL_RCC_GetHCLKFreq>
 800ba58:	4602      	mov	r2, r0
 800ba5a:	4b05      	ldr	r3, [pc, #20]	; (800ba70 <HAL_RCC_GetPCLK1Freq+0x20>)
 800ba5c:	689b      	ldr	r3, [r3, #8]
 800ba5e:	0a9b      	lsrs	r3, r3, #10
 800ba60:	f003 0307 	and.w	r3, r3, #7
 800ba64:	4903      	ldr	r1, [pc, #12]	; (800ba74 <HAL_RCC_GetPCLK1Freq+0x24>)
 800ba66:	5ccb      	ldrb	r3, [r1, r3]
 800ba68:	fa22 f303 	lsr.w	r3, r2, r3
}
 800ba6c:	4618      	mov	r0, r3
 800ba6e:	bd80      	pop	{r7, pc}
 800ba70:	40023800 	.word	0x40023800
 800ba74:	08019908 	.word	0x08019908

0800ba78 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800ba78:	b580      	push	{r7, lr}
 800ba7a:	b082      	sub	sp, #8
 800ba7c:	af00      	add	r7, sp, #0
 800ba7e:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	d101      	bne.n	800ba8a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800ba86:	2301      	movs	r3, #1
 800ba88:	e022      	b.n	800bad0 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ba90:	b2db      	uxtb	r3, r3
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	d105      	bne.n	800baa2 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	2200      	movs	r2, #0
 800ba9a:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800ba9c:	6878      	ldr	r0, [r7, #4]
 800ba9e:	f7f9 fc1d 	bl	80052dc <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	2203      	movs	r2, #3
 800baa6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800baaa:	6878      	ldr	r0, [r7, #4]
 800baac:	f000 f814 	bl	800bad8 <HAL_SD_InitCard>
 800bab0:	4603      	mov	r3, r0
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	d001      	beq.n	800baba <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800bab6:	2301      	movs	r3, #1
 800bab8:	e00a      	b.n	800bad0 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	2200      	movs	r2, #0
 800babe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	2200      	movs	r2, #0
 800bac4:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	2201      	movs	r2, #1
 800baca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800bace:	2300      	movs	r3, #0
}
 800bad0:	4618      	mov	r0, r3
 800bad2:	3708      	adds	r7, #8
 800bad4:	46bd      	mov	sp, r7
 800bad6:	bd80      	pop	{r7, pc}

0800bad8 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800bad8:	b5b0      	push	{r4, r5, r7, lr}
 800bada:	b08e      	sub	sp, #56	; 0x38
 800badc:	af04      	add	r7, sp, #16
 800bade:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 800bae0:	2300      	movs	r3, #0
 800bae2:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 800bae4:	2300      	movs	r3, #0
 800bae6:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800bae8:	2300      	movs	r3, #0
 800baea:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 800baec:	2300      	movs	r3, #0
 800baee:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800baf0:	2300      	movs	r3, #0
 800baf2:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 800baf4:	2376      	movs	r3, #118	; 0x76
 800baf6:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	681d      	ldr	r5, [r3, #0]
 800bafc:	466c      	mov	r4, sp
 800bafe:	f107 0314 	add.w	r3, r7, #20
 800bb02:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800bb06:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800bb0a:	f107 0308 	add.w	r3, r7, #8
 800bb0e:	cb0e      	ldmia	r3, {r1, r2, r3}
 800bb10:	4628      	mov	r0, r5
 800bb12:	f001 fbfd 	bl	800d310 <SDIO_Init>
 800bb16:	4603      	mov	r3, r0
 800bb18:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800bb1c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	d001      	beq.n	800bb28 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800bb24:	2301      	movs	r3, #1
 800bb26:	e04f      	b.n	800bbc8 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 800bb28:	4b29      	ldr	r3, [pc, #164]	; (800bbd0 <HAL_SD_InitCard+0xf8>)
 800bb2a:	2200      	movs	r2, #0
 800bb2c:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	681b      	ldr	r3, [r3, #0]
 800bb32:	4618      	mov	r0, r3
 800bb34:	f001 fc35 	bl	800d3a2 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 800bb38:	4b25      	ldr	r3, [pc, #148]	; (800bbd0 <HAL_SD_InitCard+0xf8>)
 800bb3a:	2201      	movs	r2, #1
 800bb3c:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 800bb3e:	2002      	movs	r0, #2
 800bb40:	f7f9 ff7c 	bl	8005a3c <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800bb44:	6878      	ldr	r0, [r7, #4]
 800bb46:	f001 f80f 	bl	800cb68 <SD_PowerON>
 800bb4a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800bb4c:	6a3b      	ldr	r3, [r7, #32]
 800bb4e:	2b00      	cmp	r3, #0
 800bb50:	d00b      	beq.n	800bb6a <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	2201      	movs	r2, #1
 800bb56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bb5e:	6a3b      	ldr	r3, [r7, #32]
 800bb60:	431a      	orrs	r2, r3
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800bb66:	2301      	movs	r3, #1
 800bb68:	e02e      	b.n	800bbc8 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800bb6a:	6878      	ldr	r0, [r7, #4]
 800bb6c:	f000 ff2e 	bl	800c9cc <SD_InitCard>
 800bb70:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800bb72:	6a3b      	ldr	r3, [r7, #32]
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d00b      	beq.n	800bb90 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	2201      	movs	r2, #1
 800bb7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bb84:	6a3b      	ldr	r3, [r7, #32]
 800bb86:	431a      	orrs	r2, r3
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800bb8c:	2301      	movs	r3, #1
 800bb8e:	e01b      	b.n	800bbc8 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	681b      	ldr	r3, [r3, #0]
 800bb94:	f44f 7100 	mov.w	r1, #512	; 0x200
 800bb98:	4618      	mov	r0, r3
 800bb9a:	f001 fc94 	bl	800d4c6 <SDMMC_CmdBlockLength>
 800bb9e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800bba0:	6a3b      	ldr	r3, [r7, #32]
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	d00f      	beq.n	800bbc6 <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	681b      	ldr	r3, [r3, #0]
 800bbaa:	4a0a      	ldr	r2, [pc, #40]	; (800bbd4 <HAL_SD_InitCard+0xfc>)
 800bbac:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bbb2:	6a3b      	ldr	r3, [r7, #32]
 800bbb4:	431a      	orrs	r2, r3
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	2201      	movs	r2, #1
 800bbbe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800bbc2:	2301      	movs	r3, #1
 800bbc4:	e000      	b.n	800bbc8 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 800bbc6:	2300      	movs	r3, #0
}
 800bbc8:	4618      	mov	r0, r3
 800bbca:	3728      	adds	r7, #40	; 0x28
 800bbcc:	46bd      	mov	sp, r7
 800bbce:	bdb0      	pop	{r4, r5, r7, pc}
 800bbd0:	422580a0 	.word	0x422580a0
 800bbd4:	004005ff 	.word	0x004005ff

0800bbd8 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800bbd8:	b580      	push	{r7, lr}
 800bbda:	b08c      	sub	sp, #48	; 0x30
 800bbdc:	af00      	add	r7, sp, #0
 800bbde:	60f8      	str	r0, [r7, #12]
 800bbe0:	60b9      	str	r1, [r7, #8]
 800bbe2:	607a      	str	r2, [r7, #4]
 800bbe4:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800bbea:	68bb      	ldr	r3, [r7, #8]
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	d107      	bne.n	800bc00 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800bbf0:	68fb      	ldr	r3, [r7, #12]
 800bbf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bbf4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800bbf8:	68fb      	ldr	r3, [r7, #12]
 800bbfa:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800bbfc:	2301      	movs	r3, #1
 800bbfe:	e0c0      	b.n	800bd82 <HAL_SD_ReadBlocks_DMA+0x1aa>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800bc00:	68fb      	ldr	r3, [r7, #12]
 800bc02:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800bc06:	b2db      	uxtb	r3, r3
 800bc08:	2b01      	cmp	r3, #1
 800bc0a:	f040 80b9 	bne.w	800bd80 <HAL_SD_ReadBlocks_DMA+0x1a8>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800bc0e:	68fb      	ldr	r3, [r7, #12]
 800bc10:	2200      	movs	r2, #0
 800bc12:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800bc14:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bc16:	683b      	ldr	r3, [r7, #0]
 800bc18:	441a      	add	r2, r3
 800bc1a:	68fb      	ldr	r3, [r7, #12]
 800bc1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bc1e:	429a      	cmp	r2, r3
 800bc20:	d907      	bls.n	800bc32 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800bc22:	68fb      	ldr	r3, [r7, #12]
 800bc24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc26:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800bc2a:	68fb      	ldr	r3, [r7, #12]
 800bc2c:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800bc2e:	2301      	movs	r3, #1
 800bc30:	e0a7      	b.n	800bd82 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800bc32:	68fb      	ldr	r3, [r7, #12]
 800bc34:	2203      	movs	r2, #3
 800bc36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800bc3a:	68fb      	ldr	r3, [r7, #12]
 800bc3c:	681b      	ldr	r3, [r3, #0]
 800bc3e:	2200      	movs	r2, #0
 800bc40:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 800bc42:	68fb      	ldr	r3, [r7, #12]
 800bc44:	681b      	ldr	r3, [r3, #0]
 800bc46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc48:	68fa      	ldr	r2, [r7, #12]
 800bc4a:	6812      	ldr	r2, [r2, #0]
 800bc4c:	f443 734a 	orr.w	r3, r3, #808	; 0x328
 800bc50:	f043 0302 	orr.w	r3, r3, #2
 800bc54:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800bc56:	68fb      	ldr	r3, [r7, #12]
 800bc58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc5a:	4a4c      	ldr	r2, [pc, #304]	; (800bd8c <HAL_SD_ReadBlocks_DMA+0x1b4>)
 800bc5c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800bc5e:	68fb      	ldr	r3, [r7, #12]
 800bc60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc62:	4a4b      	ldr	r2, [pc, #300]	; (800bd90 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 800bc64:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800bc66:	68fb      	ldr	r3, [r7, #12]
 800bc68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc6a:	2200      	movs	r2, #0
 800bc6c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800bc6e:	68fb      	ldr	r3, [r7, #12]
 800bc70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc72:	2200      	movs	r2, #0
 800bc74:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 800bc76:	68fb      	ldr	r3, [r7, #12]
 800bc78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc7a:	681b      	ldr	r3, [r3, #0]
 800bc7c:	681b      	ldr	r3, [r3, #0]
 800bc7e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800bc82:	68fb      	ldr	r3, [r7, #12]
 800bc84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc86:	689a      	ldr	r2, [r3, #8]
 800bc88:	68fb      	ldr	r3, [r7, #12]
 800bc8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc8c:	681b      	ldr	r3, [r3, #0]
 800bc8e:	430a      	orrs	r2, r1
 800bc90:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800bc92:	68fb      	ldr	r3, [r7, #12]
 800bc94:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800bc96:	68fb      	ldr	r3, [r7, #12]
 800bc98:	681b      	ldr	r3, [r3, #0]
 800bc9a:	3380      	adds	r3, #128	; 0x80
 800bc9c:	4619      	mov	r1, r3
 800bc9e:	68ba      	ldr	r2, [r7, #8]
 800bca0:	683b      	ldr	r3, [r7, #0]
 800bca2:	025b      	lsls	r3, r3, #9
 800bca4:	089b      	lsrs	r3, r3, #2
 800bca6:	f7fa f8df 	bl	8005e68 <HAL_DMA_Start_IT>
 800bcaa:	4603      	mov	r3, r0
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	d017      	beq.n	800bce0 <HAL_SD_ReadBlocks_DMA+0x108>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 800bcb0:	68fb      	ldr	r3, [r7, #12]
 800bcb2:	681b      	ldr	r3, [r3, #0]
 800bcb4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bcb6:	68fb      	ldr	r3, [r7, #12]
 800bcb8:	681b      	ldr	r3, [r3, #0]
 800bcba:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 800bcbe:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800bcc0:	68fb      	ldr	r3, [r7, #12]
 800bcc2:	681b      	ldr	r3, [r3, #0]
 800bcc4:	4a33      	ldr	r2, [pc, #204]	; (800bd94 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 800bcc6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800bcc8:	68fb      	ldr	r3, [r7, #12]
 800bcca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bccc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800bcd0:	68fb      	ldr	r3, [r7, #12]
 800bcd2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800bcd4:	68fb      	ldr	r3, [r7, #12]
 800bcd6:	2201      	movs	r2, #1
 800bcd8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800bcdc:	2301      	movs	r3, #1
 800bcde:	e050      	b.n	800bd82 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 800bce0:	4b2d      	ldr	r3, [pc, #180]	; (800bd98 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800bce2:	2201      	movs	r2, #1
 800bce4:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800bce6:	68fb      	ldr	r3, [r7, #12]
 800bce8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bcea:	2b01      	cmp	r3, #1
 800bcec:	d002      	beq.n	800bcf4 <HAL_SD_ReadBlocks_DMA+0x11c>
      {
        add *= 512U;
 800bcee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcf0:	025b      	lsls	r3, r3, #9
 800bcf2:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800bcf4:	f04f 33ff 	mov.w	r3, #4294967295
 800bcf8:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800bcfa:	683b      	ldr	r3, [r7, #0]
 800bcfc:	025b      	lsls	r3, r3, #9
 800bcfe:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800bd00:	2390      	movs	r3, #144	; 0x90
 800bd02:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800bd04:	2302      	movs	r3, #2
 800bd06:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800bd08:	2300      	movs	r3, #0
 800bd0a:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800bd0c:	2301      	movs	r3, #1
 800bd0e:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800bd10:	68fb      	ldr	r3, [r7, #12]
 800bd12:	681b      	ldr	r3, [r3, #0]
 800bd14:	f107 0210 	add.w	r2, r7, #16
 800bd18:	4611      	mov	r1, r2
 800bd1a:	4618      	mov	r0, r3
 800bd1c:	f001 fba7 	bl	800d46e <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800bd20:	683b      	ldr	r3, [r7, #0]
 800bd22:	2b01      	cmp	r3, #1
 800bd24:	d90a      	bls.n	800bd3c <HAL_SD_ReadBlocks_DMA+0x164>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800bd26:	68fb      	ldr	r3, [r7, #12]
 800bd28:	2282      	movs	r2, #130	; 0x82
 800bd2a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800bd2c:	68fb      	ldr	r3, [r7, #12]
 800bd2e:	681b      	ldr	r3, [r3, #0]
 800bd30:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bd32:	4618      	mov	r0, r3
 800bd34:	f001 fc0b 	bl	800d54e <SDMMC_CmdReadMultiBlock>
 800bd38:	62f8      	str	r0, [r7, #44]	; 0x2c
 800bd3a:	e009      	b.n	800bd50 <HAL_SD_ReadBlocks_DMA+0x178>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800bd3c:	68fb      	ldr	r3, [r7, #12]
 800bd3e:	2281      	movs	r2, #129	; 0x81
 800bd40:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800bd42:	68fb      	ldr	r3, [r7, #12]
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bd48:	4618      	mov	r0, r3
 800bd4a:	f001 fbde 	bl	800d50a <SDMMC_CmdReadSingleBlock>
 800bd4e:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800bd50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	d012      	beq.n	800bd7c <HAL_SD_ReadBlocks_DMA+0x1a4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800bd56:	68fb      	ldr	r3, [r7, #12]
 800bd58:	681b      	ldr	r3, [r3, #0]
 800bd5a:	4a0e      	ldr	r2, [pc, #56]	; (800bd94 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 800bd5c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800bd5e:	68fb      	ldr	r3, [r7, #12]
 800bd60:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bd62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd64:	431a      	orrs	r2, r3
 800bd66:	68fb      	ldr	r3, [r7, #12]
 800bd68:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800bd6a:	68fb      	ldr	r3, [r7, #12]
 800bd6c:	2201      	movs	r2, #1
 800bd6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800bd72:	68fb      	ldr	r3, [r7, #12]
 800bd74:	2200      	movs	r2, #0
 800bd76:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800bd78:	2301      	movs	r3, #1
 800bd7a:	e002      	b.n	800bd82 <HAL_SD_ReadBlocks_DMA+0x1aa>
      }

      return HAL_OK;
 800bd7c:	2300      	movs	r3, #0
 800bd7e:	e000      	b.n	800bd82 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
  }
  else
  {
    return HAL_BUSY;
 800bd80:	2302      	movs	r3, #2
  }
}
 800bd82:	4618      	mov	r0, r3
 800bd84:	3730      	adds	r7, #48	; 0x30
 800bd86:	46bd      	mov	sp, r7
 800bd88:	bd80      	pop	{r7, pc}
 800bd8a:	bf00      	nop
 800bd8c:	0800c7db 	.word	0x0800c7db
 800bd90:	0800c84d 	.word	0x0800c84d
 800bd94:	004005ff 	.word	0x004005ff
 800bd98:	4225858c 	.word	0x4225858c

0800bd9c <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800bd9c:	b580      	push	{r7, lr}
 800bd9e:	b08c      	sub	sp, #48	; 0x30
 800bda0:	af00      	add	r7, sp, #0
 800bda2:	60f8      	str	r0, [r7, #12]
 800bda4:	60b9      	str	r1, [r7, #8]
 800bda6:	607a      	str	r2, [r7, #4]
 800bda8:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800bdae:	68bb      	ldr	r3, [r7, #8]
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	d107      	bne.n	800bdc4 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800bdb4:	68fb      	ldr	r3, [r7, #12]
 800bdb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bdb8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800bdbc:	68fb      	ldr	r3, [r7, #12]
 800bdbe:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800bdc0:	2301      	movs	r3, #1
 800bdc2:	e0c5      	b.n	800bf50 <HAL_SD_WriteBlocks_DMA+0x1b4>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800bdc4:	68fb      	ldr	r3, [r7, #12]
 800bdc6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800bdca:	b2db      	uxtb	r3, r3
 800bdcc:	2b01      	cmp	r3, #1
 800bdce:	f040 80be 	bne.w	800bf4e <HAL_SD_WriteBlocks_DMA+0x1b2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800bdd2:	68fb      	ldr	r3, [r7, #12]
 800bdd4:	2200      	movs	r2, #0
 800bdd6:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800bdd8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bdda:	683b      	ldr	r3, [r7, #0]
 800bddc:	441a      	add	r2, r3
 800bdde:	68fb      	ldr	r3, [r7, #12]
 800bde0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bde2:	429a      	cmp	r2, r3
 800bde4:	d907      	bls.n	800bdf6 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800bde6:	68fb      	ldr	r3, [r7, #12]
 800bde8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bdea:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800bdee:	68fb      	ldr	r3, [r7, #12]
 800bdf0:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800bdf2:	2301      	movs	r3, #1
 800bdf4:	e0ac      	b.n	800bf50 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800bdf6:	68fb      	ldr	r3, [r7, #12]
 800bdf8:	2203      	movs	r2, #3
 800bdfa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800bdfe:	68fb      	ldr	r3, [r7, #12]
 800be00:	681b      	ldr	r3, [r3, #0]
 800be02:	2200      	movs	r2, #0
 800be04:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 800be06:	68fb      	ldr	r3, [r7, #12]
 800be08:	681b      	ldr	r3, [r3, #0]
 800be0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800be0c:	68fa      	ldr	r2, [r7, #12]
 800be0e:	6812      	ldr	r2, [r2, #0]
 800be10:	f443 7306 	orr.w	r3, r3, #536	; 0x218
 800be14:	f043 0302 	orr.w	r3, r3, #2
 800be18:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800be1a:	68fb      	ldr	r3, [r7, #12]
 800be1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800be1e:	4a4e      	ldr	r2, [pc, #312]	; (800bf58 <HAL_SD_WriteBlocks_DMA+0x1bc>)
 800be20:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800be22:	68fb      	ldr	r3, [r7, #12]
 800be24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800be26:	4a4d      	ldr	r2, [pc, #308]	; (800bf5c <HAL_SD_WriteBlocks_DMA+0x1c0>)
 800be28:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800be2a:	68fb      	ldr	r3, [r7, #12]
 800be2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800be2e:	2200      	movs	r2, #0
 800be30:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800be32:	68fb      	ldr	r3, [r7, #12]
 800be34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800be36:	2b01      	cmp	r3, #1
 800be38:	d002      	beq.n	800be40 <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      add *= 512U;
 800be3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be3c:	025b      	lsls	r3, r3, #9
 800be3e:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800be40:	683b      	ldr	r3, [r7, #0]
 800be42:	2b01      	cmp	r3, #1
 800be44:	d90a      	bls.n	800be5c <HAL_SD_WriteBlocks_DMA+0xc0>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800be46:	68fb      	ldr	r3, [r7, #12]
 800be48:	22a0      	movs	r2, #160	; 0xa0
 800be4a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800be4c:	68fb      	ldr	r3, [r7, #12]
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800be52:	4618      	mov	r0, r3
 800be54:	f001 fbbf 	bl	800d5d6 <SDMMC_CmdWriteMultiBlock>
 800be58:	62f8      	str	r0, [r7, #44]	; 0x2c
 800be5a:	e009      	b.n	800be70 <HAL_SD_WriteBlocks_DMA+0xd4>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800be5c:	68fb      	ldr	r3, [r7, #12]
 800be5e:	2290      	movs	r2, #144	; 0x90
 800be60:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800be62:	68fb      	ldr	r3, [r7, #12]
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800be68:	4618      	mov	r0, r3
 800be6a:	f001 fb92 	bl	800d592 <SDMMC_CmdWriteSingleBlock>
 800be6e:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800be70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be72:	2b00      	cmp	r3, #0
 800be74:	d012      	beq.n	800be9c <HAL_SD_WriteBlocks_DMA+0x100>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800be76:	68fb      	ldr	r3, [r7, #12]
 800be78:	681b      	ldr	r3, [r3, #0]
 800be7a:	4a39      	ldr	r2, [pc, #228]	; (800bf60 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 800be7c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800be7e:	68fb      	ldr	r3, [r7, #12]
 800be80:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800be82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be84:	431a      	orrs	r2, r3
 800be86:	68fb      	ldr	r3, [r7, #12]
 800be88:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800be8a:	68fb      	ldr	r3, [r7, #12]
 800be8c:	2201      	movs	r2, #1
 800be8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800be92:	68fb      	ldr	r3, [r7, #12]
 800be94:	2200      	movs	r2, #0
 800be96:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800be98:	2301      	movs	r3, #1
 800be9a:	e059      	b.n	800bf50 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800be9c:	4b31      	ldr	r3, [pc, #196]	; (800bf64 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800be9e:	2201      	movs	r2, #1
 800bea0:	601a      	str	r2, [r3, #0]

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800bea2:	68fb      	ldr	r3, [r7, #12]
 800bea4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bea6:	2240      	movs	r2, #64	; 0x40
 800bea8:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 800beaa:	68fb      	ldr	r3, [r7, #12]
 800beac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800beae:	681b      	ldr	r3, [r3, #0]
 800beb0:	681b      	ldr	r3, [r3, #0]
 800beb2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800beb6:	68fb      	ldr	r3, [r7, #12]
 800beb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800beba:	689a      	ldr	r2, [r3, #8]
 800bebc:	68fb      	ldr	r3, [r7, #12]
 800bebe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bec0:	681b      	ldr	r3, [r3, #0]
 800bec2:	430a      	orrs	r2, r1
 800bec4:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800bec6:	68fb      	ldr	r3, [r7, #12]
 800bec8:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800beca:	68b9      	ldr	r1, [r7, #8]
 800becc:	68fb      	ldr	r3, [r7, #12]
 800bece:	681b      	ldr	r3, [r3, #0]
 800bed0:	3380      	adds	r3, #128	; 0x80
 800bed2:	461a      	mov	r2, r3
 800bed4:	683b      	ldr	r3, [r7, #0]
 800bed6:	025b      	lsls	r3, r3, #9
 800bed8:	089b      	lsrs	r3, r3, #2
 800beda:	f7f9 ffc5 	bl	8005e68 <HAL_DMA_Start_IT>
 800bede:	4603      	mov	r3, r0
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	d01c      	beq.n	800bf1e <HAL_SD_WriteBlocks_DMA+0x182>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 800bee4:	68fb      	ldr	r3, [r7, #12]
 800bee6:	681b      	ldr	r3, [r3, #0]
 800bee8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800beea:	68fa      	ldr	r2, [r7, #12]
 800beec:	6812      	ldr	r2, [r2, #0]
 800beee:	f423 7306 	bic.w	r3, r3, #536	; 0x218
 800bef2:	f023 0302 	bic.w	r3, r3, #2
 800bef6:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800bef8:	68fb      	ldr	r3, [r7, #12]
 800befa:	681b      	ldr	r3, [r3, #0]
 800befc:	4a18      	ldr	r2, [pc, #96]	; (800bf60 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 800befe:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800bf00:	68fb      	ldr	r3, [r7, #12]
 800bf02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf04:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800bf08:	68fb      	ldr	r3, [r7, #12]
 800bf0a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800bf0c:	68fb      	ldr	r3, [r7, #12]
 800bf0e:	2201      	movs	r2, #1
 800bf10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800bf14:	68fb      	ldr	r3, [r7, #12]
 800bf16:	2200      	movs	r2, #0
 800bf18:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800bf1a:	2301      	movs	r3, #1
 800bf1c:	e018      	b.n	800bf50 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800bf1e:	f04f 33ff 	mov.w	r3, #4294967295
 800bf22:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800bf24:	683b      	ldr	r3, [r7, #0]
 800bf26:	025b      	lsls	r3, r3, #9
 800bf28:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800bf2a:	2390      	movs	r3, #144	; 0x90
 800bf2c:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800bf2e:	2300      	movs	r3, #0
 800bf30:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800bf32:	2300      	movs	r3, #0
 800bf34:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800bf36:	2301      	movs	r3, #1
 800bf38:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800bf3a:	68fb      	ldr	r3, [r7, #12]
 800bf3c:	681b      	ldr	r3, [r3, #0]
 800bf3e:	f107 0210 	add.w	r2, r7, #16
 800bf42:	4611      	mov	r1, r2
 800bf44:	4618      	mov	r0, r3
 800bf46:	f001 fa92 	bl	800d46e <SDIO_ConfigData>

      return HAL_OK;
 800bf4a:	2300      	movs	r3, #0
 800bf4c:	e000      	b.n	800bf50 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_BUSY;
 800bf4e:	2302      	movs	r3, #2
  }
}
 800bf50:	4618      	mov	r0, r3
 800bf52:	3730      	adds	r7, #48	; 0x30
 800bf54:	46bd      	mov	sp, r7
 800bf56:	bd80      	pop	{r7, pc}
 800bf58:	0800c7b1 	.word	0x0800c7b1
 800bf5c:	0800c84d 	.word	0x0800c84d
 800bf60:	004005ff 	.word	0x004005ff
 800bf64:	4225858c 	.word	0x4225858c

0800bf68 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800bf68:	b580      	push	{r7, lr}
 800bf6a:	b084      	sub	sp, #16
 800bf6c:	af00      	add	r7, sp, #0
 800bf6e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bf74:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	681b      	ldr	r3, [r3, #0]
 800bf7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bf7c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	d008      	beq.n	800bf96 <HAL_SD_IRQHandler+0x2e>
 800bf84:	68fb      	ldr	r3, [r7, #12]
 800bf86:	f003 0308 	and.w	r3, r3, #8
 800bf8a:	2b00      	cmp	r3, #0
 800bf8c:	d003      	beq.n	800bf96 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800bf8e:	6878      	ldr	r0, [r7, #4]
 800bf90:	f001 f810 	bl	800cfb4 <SD_Read_IT>
 800bf94:	e165      	b.n	800c262 <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	681b      	ldr	r3, [r3, #0]
 800bf9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bf9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	f000 808f 	beq.w	800c0c4 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	681b      	ldr	r3, [r3, #0]
 800bfaa:	f44f 7280 	mov.w	r2, #256	; 0x100
 800bfae:	639a      	str	r2, [r3, #56]	; 0x38

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	681b      	ldr	r3, [r3, #0]
 800bfb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bfb6:	687a      	ldr	r2, [r7, #4]
 800bfb8:	6812      	ldr	r2, [r2, #0]
 800bfba:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 800bfbe:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 800bfc2:	63d3      	str	r3, [r2, #60]	; 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	681b      	ldr	r3, [r3, #0]
 800bfc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	681b      	ldr	r3, [r3, #0]
 800bfce:	f022 0201 	bic.w	r2, r2, #1
 800bfd2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 800bfd4:	68fb      	ldr	r3, [r7, #12]
 800bfd6:	f003 0308 	and.w	r3, r3, #8
 800bfda:	2b00      	cmp	r3, #0
 800bfdc:	d039      	beq.n	800c052 <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800bfde:	68fb      	ldr	r3, [r7, #12]
 800bfe0:	f003 0302 	and.w	r3, r3, #2
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	d104      	bne.n	800bff2 <HAL_SD_IRQHandler+0x8a>
 800bfe8:	68fb      	ldr	r3, [r7, #12]
 800bfea:	f003 0320 	and.w	r3, r3, #32
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	d011      	beq.n	800c016 <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	681b      	ldr	r3, [r3, #0]
 800bff6:	4618      	mov	r0, r3
 800bff8:	f001 fb10 	bl	800d61c <SDMMC_CmdStopTransfer>
 800bffc:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800bffe:	68bb      	ldr	r3, [r7, #8]
 800c000:	2b00      	cmp	r3, #0
 800c002:	d008      	beq.n	800c016 <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c008:	68bb      	ldr	r3, [r7, #8]
 800c00a:	431a      	orrs	r2, r3
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800c010:	6878      	ldr	r0, [r7, #4]
 800c012:	f000 f92f 	bl	800c274 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	681b      	ldr	r3, [r3, #0]
 800c01a:	f240 523a 	movw	r2, #1338	; 0x53a
 800c01e:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	2201      	movs	r2, #1
 800c024:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	2200      	movs	r2, #0
 800c02c:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800c02e:	68fb      	ldr	r3, [r7, #12]
 800c030:	f003 0301 	and.w	r3, r3, #1
 800c034:	2b00      	cmp	r3, #0
 800c036:	d104      	bne.n	800c042 <HAL_SD_IRQHandler+0xda>
 800c038:	68fb      	ldr	r3, [r7, #12]
 800c03a:	f003 0302 	and.w	r3, r3, #2
 800c03e:	2b00      	cmp	r3, #0
 800c040:	d003      	beq.n	800c04a <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800c042:	6878      	ldr	r0, [r7, #4]
 800c044:	f7f9 f92a 	bl	800529c <HAL_SD_RxCpltCallback>
 800c048:	e10b      	b.n	800c262 <HAL_SD_IRQHandler+0x2fa>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800c04a:	6878      	ldr	r0, [r7, #4]
 800c04c:	f7f9 f936 	bl	80052bc <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800c050:	e107      	b.n	800c262 <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800c052:	68fb      	ldr	r3, [r7, #12]
 800c054:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c058:	2b00      	cmp	r3, #0
 800c05a:	f000 8102 	beq.w	800c262 <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800c05e:	68fb      	ldr	r3, [r7, #12]
 800c060:	f003 0320 	and.w	r3, r3, #32
 800c064:	2b00      	cmp	r3, #0
 800c066:	d011      	beq.n	800c08c <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	681b      	ldr	r3, [r3, #0]
 800c06c:	4618      	mov	r0, r3
 800c06e:	f001 fad5 	bl	800d61c <SDMMC_CmdStopTransfer>
 800c072:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800c074:	68bb      	ldr	r3, [r7, #8]
 800c076:	2b00      	cmp	r3, #0
 800c078:	d008      	beq.n	800c08c <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c07e:	68bb      	ldr	r3, [r7, #8]
 800c080:	431a      	orrs	r2, r3
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800c086:	6878      	ldr	r0, [r7, #4]
 800c088:	f000 f8f4 	bl	800c274 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 800c08c:	68fb      	ldr	r3, [r7, #12]
 800c08e:	f003 0301 	and.w	r3, r3, #1
 800c092:	2b00      	cmp	r3, #0
 800c094:	f040 80e5 	bne.w	800c262 <HAL_SD_IRQHandler+0x2fa>
 800c098:	68fb      	ldr	r3, [r7, #12]
 800c09a:	f003 0302 	and.w	r3, r3, #2
 800c09e:	2b00      	cmp	r3, #0
 800c0a0:	f040 80df 	bne.w	800c262 <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	681b      	ldr	r3, [r3, #0]
 800c0a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	681b      	ldr	r3, [r3, #0]
 800c0ae:	f022 0208 	bic.w	r2, r2, #8
 800c0b2:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	2201      	movs	r2, #1
 800c0b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 800c0bc:	6878      	ldr	r0, [r7, #4]
 800c0be:	f7f9 f8fd 	bl	80052bc <HAL_SD_TxCpltCallback>
}
 800c0c2:	e0ce      	b.n	800c262 <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	681b      	ldr	r3, [r3, #0]
 800c0c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c0ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c0ce:	2b00      	cmp	r3, #0
 800c0d0:	d008      	beq.n	800c0e4 <HAL_SD_IRQHandler+0x17c>
 800c0d2:	68fb      	ldr	r3, [r7, #12]
 800c0d4:	f003 0308 	and.w	r3, r3, #8
 800c0d8:	2b00      	cmp	r3, #0
 800c0da:	d003      	beq.n	800c0e4 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 800c0dc:	6878      	ldr	r0, [r7, #4]
 800c0de:	f000 ffba 	bl	800d056 <SD_Write_IT>
 800c0e2:	e0be      	b.n	800c262 <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	681b      	ldr	r3, [r3, #0]
 800c0e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c0ea:	f240 233a 	movw	r3, #570	; 0x23a
 800c0ee:	4013      	ands	r3, r2
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	f000 80b6 	beq.w	800c262 <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	681b      	ldr	r3, [r3, #0]
 800c0fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c0fc:	f003 0302 	and.w	r3, r3, #2
 800c100:	2b00      	cmp	r3, #0
 800c102:	d005      	beq.n	800c110 <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c108:	f043 0202 	orr.w	r2, r3, #2
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	681b      	ldr	r3, [r3, #0]
 800c114:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c116:	f003 0308 	and.w	r3, r3, #8
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	d005      	beq.n	800c12a <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c122:	f043 0208 	orr.w	r2, r3, #8
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	681b      	ldr	r3, [r3, #0]
 800c12e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c130:	f003 0320 	and.w	r3, r3, #32
 800c134:	2b00      	cmp	r3, #0
 800c136:	d005      	beq.n	800c144 <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c13c:	f043 0220 	orr.w	r2, r3, #32
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	681b      	ldr	r3, [r3, #0]
 800c148:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c14a:	f003 0310 	and.w	r3, r3, #16
 800c14e:	2b00      	cmp	r3, #0
 800c150:	d005      	beq.n	800c15e <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c156:	f043 0210 	orr.w	r2, r3, #16
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	681b      	ldr	r3, [r3, #0]
 800c162:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c164:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c168:	2b00      	cmp	r3, #0
 800c16a:	d005      	beq.n	800c178 <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c170:	f043 0208 	orr.w	r2, r3, #8
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	681b      	ldr	r3, [r3, #0]
 800c17c:	f240 723a 	movw	r2, #1850	; 0x73a
 800c180:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	681b      	ldr	r3, [r3, #0]
 800c186:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c188:	687a      	ldr	r2, [r7, #4]
 800c18a:	6812      	ldr	r2, [r2, #0]
 800c18c:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 800c190:	f023 0302 	bic.w	r3, r3, #2
 800c194:	63d3      	str	r3, [r2, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	681b      	ldr	r3, [r3, #0]
 800c19a:	4618      	mov	r0, r3
 800c19c:	f001 fa3e 	bl	800d61c <SDMMC_CmdStopTransfer>
 800c1a0:	4602      	mov	r2, r0
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c1a6:	431a      	orrs	r2, r3
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800c1ac:	68fb      	ldr	r3, [r7, #12]
 800c1ae:	f003 0308 	and.w	r3, r3, #8
 800c1b2:	2b00      	cmp	r3, #0
 800c1b4:	d00a      	beq.n	800c1cc <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	2201      	movs	r2, #1
 800c1ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	2200      	movs	r2, #0
 800c1c2:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 800c1c4:	6878      	ldr	r0, [r7, #4]
 800c1c6:	f000 f855 	bl	800c274 <HAL_SD_ErrorCallback>
}
 800c1ca:	e04a      	b.n	800c262 <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800c1cc:	68fb      	ldr	r3, [r7, #12]
 800c1ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c1d2:	2b00      	cmp	r3, #0
 800c1d4:	d045      	beq.n	800c262 <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800c1d6:	68fb      	ldr	r3, [r7, #12]
 800c1d8:	f003 0310 	and.w	r3, r3, #16
 800c1dc:	2b00      	cmp	r3, #0
 800c1de:	d104      	bne.n	800c1ea <HAL_SD_IRQHandler+0x282>
 800c1e0:	68fb      	ldr	r3, [r7, #12]
 800c1e2:	f003 0320 	and.w	r3, r3, #32
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	d011      	beq.n	800c20e <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c1ee:	4a1f      	ldr	r2, [pc, #124]	; (800c26c <HAL_SD_IRQHandler+0x304>)
 800c1f0:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c1f6:	4618      	mov	r0, r3
 800c1f8:	f7f9 fe8e 	bl	8005f18 <HAL_DMA_Abort_IT>
 800c1fc:	4603      	mov	r3, r0
 800c1fe:	2b00      	cmp	r3, #0
 800c200:	d02f      	beq.n	800c262 <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c206:	4618      	mov	r0, r3
 800c208:	f000 fb72 	bl	800c8f0 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800c20c:	e029      	b.n	800c262 <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800c20e:	68fb      	ldr	r3, [r7, #12]
 800c210:	f003 0301 	and.w	r3, r3, #1
 800c214:	2b00      	cmp	r3, #0
 800c216:	d104      	bne.n	800c222 <HAL_SD_IRQHandler+0x2ba>
 800c218:	68fb      	ldr	r3, [r7, #12]
 800c21a:	f003 0302 	and.w	r3, r3, #2
 800c21e:	2b00      	cmp	r3, #0
 800c220:	d011      	beq.n	800c246 <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c226:	4a12      	ldr	r2, [pc, #72]	; (800c270 <HAL_SD_IRQHandler+0x308>)
 800c228:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c22e:	4618      	mov	r0, r3
 800c230:	f7f9 fe72 	bl	8005f18 <HAL_DMA_Abort_IT>
 800c234:	4603      	mov	r3, r0
 800c236:	2b00      	cmp	r3, #0
 800c238:	d013      	beq.n	800c262 <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c23e:	4618      	mov	r0, r3
 800c240:	f000 fb8d 	bl	800c95e <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800c244:	e00d      	b.n	800c262 <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	2200      	movs	r2, #0
 800c24a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	2201      	movs	r2, #1
 800c250:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	2200      	movs	r2, #0
 800c258:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 800c25a:	6878      	ldr	r0, [r7, #4]
 800c25c:	f000 f814 	bl	800c288 <HAL_SD_AbortCallback>
}
 800c260:	e7ff      	b.n	800c262 <HAL_SD_IRQHandler+0x2fa>
 800c262:	bf00      	nop
 800c264:	3710      	adds	r7, #16
 800c266:	46bd      	mov	sp, r7
 800c268:	bd80      	pop	{r7, pc}
 800c26a:	bf00      	nop
 800c26c:	0800c8f1 	.word	0x0800c8f1
 800c270:	0800c95f 	.word	0x0800c95f

0800c274 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800c274:	b480      	push	{r7}
 800c276:	b083      	sub	sp, #12
 800c278:	af00      	add	r7, sp, #0
 800c27a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800c27c:	bf00      	nop
 800c27e:	370c      	adds	r7, #12
 800c280:	46bd      	mov	sp, r7
 800c282:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c286:	4770      	bx	lr

0800c288 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800c288:	b480      	push	{r7}
 800c28a:	b083      	sub	sp, #12
 800c28c:	af00      	add	r7, sp, #0
 800c28e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_AbortCallback can be implemented in the user file
   */
}
 800c290:	bf00      	nop
 800c292:	370c      	adds	r7, #12
 800c294:	46bd      	mov	sp, r7
 800c296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c29a:	4770      	bx	lr

0800c29c <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800c29c:	b480      	push	{r7}
 800c29e:	b083      	sub	sp, #12
 800c2a0:	af00      	add	r7, sp, #0
 800c2a2:	6078      	str	r0, [r7, #4]
 800c2a4:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c2aa:	0f9b      	lsrs	r3, r3, #30
 800c2ac:	b2da      	uxtb	r2, r3
 800c2ae:	683b      	ldr	r3, [r7, #0]
 800c2b0:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c2b6:	0e9b      	lsrs	r3, r3, #26
 800c2b8:	b2db      	uxtb	r3, r3
 800c2ba:	f003 030f 	and.w	r3, r3, #15
 800c2be:	b2da      	uxtb	r2, r3
 800c2c0:	683b      	ldr	r3, [r7, #0]
 800c2c2:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c2c8:	0e1b      	lsrs	r3, r3, #24
 800c2ca:	b2db      	uxtb	r3, r3
 800c2cc:	f003 0303 	and.w	r3, r3, #3
 800c2d0:	b2da      	uxtb	r2, r3
 800c2d2:	683b      	ldr	r3, [r7, #0]
 800c2d4:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c2da:	0c1b      	lsrs	r3, r3, #16
 800c2dc:	b2da      	uxtb	r2, r3
 800c2de:	683b      	ldr	r3, [r7, #0]
 800c2e0:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c2e6:	0a1b      	lsrs	r3, r3, #8
 800c2e8:	b2da      	uxtb	r2, r3
 800c2ea:	683b      	ldr	r3, [r7, #0]
 800c2ec:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c2f2:	b2da      	uxtb	r2, r3
 800c2f4:	683b      	ldr	r3, [r7, #0]
 800c2f6:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c2fc:	0d1b      	lsrs	r3, r3, #20
 800c2fe:	b29a      	uxth	r2, r3
 800c300:	683b      	ldr	r3, [r7, #0]
 800c302:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c308:	0c1b      	lsrs	r3, r3, #16
 800c30a:	b2db      	uxtb	r3, r3
 800c30c:	f003 030f 	and.w	r3, r3, #15
 800c310:	b2da      	uxtb	r2, r3
 800c312:	683b      	ldr	r3, [r7, #0]
 800c314:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c31a:	0bdb      	lsrs	r3, r3, #15
 800c31c:	b2db      	uxtb	r3, r3
 800c31e:	f003 0301 	and.w	r3, r3, #1
 800c322:	b2da      	uxtb	r2, r3
 800c324:	683b      	ldr	r3, [r7, #0]
 800c326:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c32c:	0b9b      	lsrs	r3, r3, #14
 800c32e:	b2db      	uxtb	r3, r3
 800c330:	f003 0301 	and.w	r3, r3, #1
 800c334:	b2da      	uxtb	r2, r3
 800c336:	683b      	ldr	r3, [r7, #0]
 800c338:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c33e:	0b5b      	lsrs	r3, r3, #13
 800c340:	b2db      	uxtb	r3, r3
 800c342:	f003 0301 	and.w	r3, r3, #1
 800c346:	b2da      	uxtb	r2, r3
 800c348:	683b      	ldr	r3, [r7, #0]
 800c34a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c350:	0b1b      	lsrs	r3, r3, #12
 800c352:	b2db      	uxtb	r3, r3
 800c354:	f003 0301 	and.w	r3, r3, #1
 800c358:	b2da      	uxtb	r2, r3
 800c35a:	683b      	ldr	r3, [r7, #0]
 800c35c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800c35e:	683b      	ldr	r3, [r7, #0]
 800c360:	2200      	movs	r2, #0
 800c362:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c368:	2b00      	cmp	r3, #0
 800c36a:	d163      	bne.n	800c434 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c370:	009a      	lsls	r2, r3, #2
 800c372:	f640 73fc 	movw	r3, #4092	; 0xffc
 800c376:	4013      	ands	r3, r2
 800c378:	687a      	ldr	r2, [r7, #4]
 800c37a:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800c37c:	0f92      	lsrs	r2, r2, #30
 800c37e:	431a      	orrs	r2, r3
 800c380:	683b      	ldr	r3, [r7, #0]
 800c382:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c388:	0edb      	lsrs	r3, r3, #27
 800c38a:	b2db      	uxtb	r3, r3
 800c38c:	f003 0307 	and.w	r3, r3, #7
 800c390:	b2da      	uxtb	r2, r3
 800c392:	683b      	ldr	r3, [r7, #0]
 800c394:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c39a:	0e1b      	lsrs	r3, r3, #24
 800c39c:	b2db      	uxtb	r3, r3
 800c39e:	f003 0307 	and.w	r3, r3, #7
 800c3a2:	b2da      	uxtb	r2, r3
 800c3a4:	683b      	ldr	r3, [r7, #0]
 800c3a6:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c3ac:	0d5b      	lsrs	r3, r3, #21
 800c3ae:	b2db      	uxtb	r3, r3
 800c3b0:	f003 0307 	and.w	r3, r3, #7
 800c3b4:	b2da      	uxtb	r2, r3
 800c3b6:	683b      	ldr	r3, [r7, #0]
 800c3b8:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c3be:	0c9b      	lsrs	r3, r3, #18
 800c3c0:	b2db      	uxtb	r3, r3
 800c3c2:	f003 0307 	and.w	r3, r3, #7
 800c3c6:	b2da      	uxtb	r2, r3
 800c3c8:	683b      	ldr	r3, [r7, #0]
 800c3ca:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c3d0:	0bdb      	lsrs	r3, r3, #15
 800c3d2:	b2db      	uxtb	r3, r3
 800c3d4:	f003 0307 	and.w	r3, r3, #7
 800c3d8:	b2da      	uxtb	r2, r3
 800c3da:	683b      	ldr	r3, [r7, #0]
 800c3dc:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800c3de:	683b      	ldr	r3, [r7, #0]
 800c3e0:	691b      	ldr	r3, [r3, #16]
 800c3e2:	1c5a      	adds	r2, r3, #1
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800c3e8:	683b      	ldr	r3, [r7, #0]
 800c3ea:	7e1b      	ldrb	r3, [r3, #24]
 800c3ec:	b2db      	uxtb	r3, r3
 800c3ee:	f003 0307 	and.w	r3, r3, #7
 800c3f2:	3302      	adds	r3, #2
 800c3f4:	2201      	movs	r2, #1
 800c3f6:	fa02 f303 	lsl.w	r3, r2, r3
 800c3fa:	687a      	ldr	r2, [r7, #4]
 800c3fc:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800c3fe:	fb03 f202 	mul.w	r2, r3, r2
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800c406:	683b      	ldr	r3, [r7, #0]
 800c408:	7a1b      	ldrb	r3, [r3, #8]
 800c40a:	b2db      	uxtb	r3, r3
 800c40c:	f003 030f 	and.w	r3, r3, #15
 800c410:	2201      	movs	r2, #1
 800c412:	409a      	lsls	r2, r3
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c41c:	687a      	ldr	r2, [r7, #4]
 800c41e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800c420:	0a52      	lsrs	r2, r2, #9
 800c422:	fb03 f202 	mul.w	r2, r3, r2
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c430:	661a      	str	r2, [r3, #96]	; 0x60
 800c432:	e031      	b.n	800c498 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c438:	2b01      	cmp	r3, #1
 800c43a:	d11d      	bne.n	800c478 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c440:	041b      	lsls	r3, r3, #16
 800c442:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c44a:	0c1b      	lsrs	r3, r3, #16
 800c44c:	431a      	orrs	r2, r3
 800c44e:	683b      	ldr	r3, [r7, #0]
 800c450:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800c452:	683b      	ldr	r3, [r7, #0]
 800c454:	691b      	ldr	r3, [r3, #16]
 800c456:	3301      	adds	r3, #1
 800c458:	029a      	lsls	r2, r3, #10
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c46c:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	661a      	str	r2, [r3, #96]	; 0x60
 800c476:	e00f      	b.n	800c498 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	681b      	ldr	r3, [r3, #0]
 800c47c:	4a58      	ldr	r2, [pc, #352]	; (800c5e0 <HAL_SD_GetCardCSD+0x344>)
 800c47e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c484:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	2201      	movs	r2, #1
 800c490:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800c494:	2301      	movs	r3, #1
 800c496:	e09d      	b.n	800c5d4 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c49c:	0b9b      	lsrs	r3, r3, #14
 800c49e:	b2db      	uxtb	r3, r3
 800c4a0:	f003 0301 	and.w	r3, r3, #1
 800c4a4:	b2da      	uxtb	r2, r3
 800c4a6:	683b      	ldr	r3, [r7, #0]
 800c4a8:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c4ae:	09db      	lsrs	r3, r3, #7
 800c4b0:	b2db      	uxtb	r3, r3
 800c4b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c4b6:	b2da      	uxtb	r2, r3
 800c4b8:	683b      	ldr	r3, [r7, #0]
 800c4ba:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c4c0:	b2db      	uxtb	r3, r3
 800c4c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c4c6:	b2da      	uxtb	r2, r3
 800c4c8:	683b      	ldr	r3, [r7, #0]
 800c4ca:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c4d0:	0fdb      	lsrs	r3, r3, #31
 800c4d2:	b2da      	uxtb	r2, r3
 800c4d4:	683b      	ldr	r3, [r7, #0]
 800c4d6:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c4dc:	0f5b      	lsrs	r3, r3, #29
 800c4de:	b2db      	uxtb	r3, r3
 800c4e0:	f003 0303 	and.w	r3, r3, #3
 800c4e4:	b2da      	uxtb	r2, r3
 800c4e6:	683b      	ldr	r3, [r7, #0]
 800c4e8:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c4ee:	0e9b      	lsrs	r3, r3, #26
 800c4f0:	b2db      	uxtb	r3, r3
 800c4f2:	f003 0307 	and.w	r3, r3, #7
 800c4f6:	b2da      	uxtb	r2, r3
 800c4f8:	683b      	ldr	r3, [r7, #0]
 800c4fa:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c500:	0d9b      	lsrs	r3, r3, #22
 800c502:	b2db      	uxtb	r3, r3
 800c504:	f003 030f 	and.w	r3, r3, #15
 800c508:	b2da      	uxtb	r2, r3
 800c50a:	683b      	ldr	r3, [r7, #0]
 800c50c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c512:	0d5b      	lsrs	r3, r3, #21
 800c514:	b2db      	uxtb	r3, r3
 800c516:	f003 0301 	and.w	r3, r3, #1
 800c51a:	b2da      	uxtb	r2, r3
 800c51c:	683b      	ldr	r3, [r7, #0]
 800c51e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800c522:	683b      	ldr	r3, [r7, #0]
 800c524:	2200      	movs	r2, #0
 800c526:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c52e:	0c1b      	lsrs	r3, r3, #16
 800c530:	b2db      	uxtb	r3, r3
 800c532:	f003 0301 	and.w	r3, r3, #1
 800c536:	b2da      	uxtb	r2, r3
 800c538:	683b      	ldr	r3, [r7, #0]
 800c53a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c542:	0bdb      	lsrs	r3, r3, #15
 800c544:	b2db      	uxtb	r3, r3
 800c546:	f003 0301 	and.w	r3, r3, #1
 800c54a:	b2da      	uxtb	r2, r3
 800c54c:	683b      	ldr	r3, [r7, #0]
 800c54e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c556:	0b9b      	lsrs	r3, r3, #14
 800c558:	b2db      	uxtb	r3, r3
 800c55a:	f003 0301 	and.w	r3, r3, #1
 800c55e:	b2da      	uxtb	r2, r3
 800c560:	683b      	ldr	r3, [r7, #0]
 800c562:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c56a:	0b5b      	lsrs	r3, r3, #13
 800c56c:	b2db      	uxtb	r3, r3
 800c56e:	f003 0301 	and.w	r3, r3, #1
 800c572:	b2da      	uxtb	r2, r3
 800c574:	683b      	ldr	r3, [r7, #0]
 800c576:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c57e:	0b1b      	lsrs	r3, r3, #12
 800c580:	b2db      	uxtb	r3, r3
 800c582:	f003 0301 	and.w	r3, r3, #1
 800c586:	b2da      	uxtb	r2, r3
 800c588:	683b      	ldr	r3, [r7, #0]
 800c58a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c592:	0a9b      	lsrs	r3, r3, #10
 800c594:	b2db      	uxtb	r3, r3
 800c596:	f003 0303 	and.w	r3, r3, #3
 800c59a:	b2da      	uxtb	r2, r3
 800c59c:	683b      	ldr	r3, [r7, #0]
 800c59e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c5a6:	0a1b      	lsrs	r3, r3, #8
 800c5a8:	b2db      	uxtb	r3, r3
 800c5aa:	f003 0303 	and.w	r3, r3, #3
 800c5ae:	b2da      	uxtb	r2, r3
 800c5b0:	683b      	ldr	r3, [r7, #0]
 800c5b2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c5ba:	085b      	lsrs	r3, r3, #1
 800c5bc:	b2db      	uxtb	r3, r3
 800c5be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c5c2:	b2da      	uxtb	r2, r3
 800c5c4:	683b      	ldr	r3, [r7, #0]
 800c5c6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800c5ca:	683b      	ldr	r3, [r7, #0]
 800c5cc:	2201      	movs	r2, #1
 800c5ce:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800c5d2:	2300      	movs	r3, #0
}
 800c5d4:	4618      	mov	r0, r3
 800c5d6:	370c      	adds	r7, #12
 800c5d8:	46bd      	mov	sp, r7
 800c5da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5de:	4770      	bx	lr
 800c5e0:	004005ff 	.word	0x004005ff

0800c5e4 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800c5e4:	b480      	push	{r7}
 800c5e6:	b083      	sub	sp, #12
 800c5e8:	af00      	add	r7, sp, #0
 800c5ea:	6078      	str	r0, [r7, #4]
 800c5ec:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c5f2:	683b      	ldr	r3, [r7, #0]
 800c5f4:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c5fa:	683b      	ldr	r3, [r7, #0]
 800c5fc:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c602:	683b      	ldr	r3, [r7, #0]
 800c604:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c60a:	683b      	ldr	r3, [r7, #0]
 800c60c:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c612:	683b      	ldr	r3, [r7, #0]
 800c614:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800c61a:	683b      	ldr	r3, [r7, #0]
 800c61c:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800c622:	683b      	ldr	r3, [r7, #0]
 800c624:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800c62a:	683b      	ldr	r3, [r7, #0]
 800c62c:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800c62e:	2300      	movs	r3, #0
}
 800c630:	4618      	mov	r0, r3
 800c632:	370c      	adds	r7, #12
 800c634:	46bd      	mov	sp, r7
 800c636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c63a:	4770      	bx	lr

0800c63c <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800c63c:	b5b0      	push	{r4, r5, r7, lr}
 800c63e:	b08e      	sub	sp, #56	; 0x38
 800c640:	af04      	add	r7, sp, #16
 800c642:	6078      	str	r0, [r7, #4]
 800c644:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800c646:	2300      	movs	r3, #0
 800c648:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	2203      	movs	r2, #3
 800c650:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c658:	2b03      	cmp	r3, #3
 800c65a:	d02e      	beq.n	800c6ba <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 800c65c:	683b      	ldr	r3, [r7, #0]
 800c65e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c662:	d106      	bne.n	800c672 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c668:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	639a      	str	r2, [r3, #56]	; 0x38
 800c670:	e029      	b.n	800c6c6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 800c672:	683b      	ldr	r3, [r7, #0]
 800c674:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c678:	d10a      	bne.n	800c690 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800c67a:	6878      	ldr	r0, [r7, #4]
 800c67c:	f000 fb2a 	bl	800ccd4 <SD_WideBus_Enable>
 800c680:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c686:	6a3b      	ldr	r3, [r7, #32]
 800c688:	431a      	orrs	r2, r3
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	639a      	str	r2, [r3, #56]	; 0x38
 800c68e:	e01a      	b.n	800c6c6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 800c690:	683b      	ldr	r3, [r7, #0]
 800c692:	2b00      	cmp	r3, #0
 800c694:	d10a      	bne.n	800c6ac <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800c696:	6878      	ldr	r0, [r7, #4]
 800c698:	f000 fb67 	bl	800cd6a <SD_WideBus_Disable>
 800c69c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c6a2:	6a3b      	ldr	r3, [r7, #32]
 800c6a4:	431a      	orrs	r2, r3
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	639a      	str	r2, [r3, #56]	; 0x38
 800c6aa:	e00c      	b.n	800c6c6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c6b0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	639a      	str	r2, [r3, #56]	; 0x38
 800c6b8:	e005      	b.n	800c6c6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c6be:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c6ca:	2b00      	cmp	r3, #0
 800c6cc:	d00b      	beq.n	800c6e6 <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	681b      	ldr	r3, [r3, #0]
 800c6d2:	4a26      	ldr	r2, [pc, #152]	; (800c76c <HAL_SD_ConfigWideBusOperation+0x130>)
 800c6d4:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	2201      	movs	r2, #1
 800c6da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800c6de:	2301      	movs	r3, #1
 800c6e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c6e4:	e01f      	b.n	800c726 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	685b      	ldr	r3, [r3, #4]
 800c6ea:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	689b      	ldr	r3, [r3, #8]
 800c6f0:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	68db      	ldr	r3, [r3, #12]
 800c6f6:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 800c6f8:	683b      	ldr	r3, [r7, #0]
 800c6fa:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	695b      	ldr	r3, [r3, #20]
 800c700:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	699b      	ldr	r3, [r3, #24]
 800c706:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	681d      	ldr	r5, [r3, #0]
 800c70c:	466c      	mov	r4, sp
 800c70e:	f107 0314 	add.w	r3, r7, #20
 800c712:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c716:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800c71a:	f107 0308 	add.w	r3, r7, #8
 800c71e:	cb0e      	ldmia	r3, {r1, r2, r3}
 800c720:	4628      	mov	r0, r5
 800c722:	f000 fdf5 	bl	800d310 <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	681b      	ldr	r3, [r3, #0]
 800c72a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800c72e:	4618      	mov	r0, r3
 800c730:	f000 fec9 	bl	800d4c6 <SDMMC_CmdBlockLength>
 800c734:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800c736:	6a3b      	ldr	r3, [r7, #32]
 800c738:	2b00      	cmp	r3, #0
 800c73a:	d00c      	beq.n	800c756 <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	681b      	ldr	r3, [r3, #0]
 800c740:	4a0a      	ldr	r2, [pc, #40]	; (800c76c <HAL_SD_ConfigWideBusOperation+0x130>)
 800c742:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c748:	6a3b      	ldr	r3, [r7, #32]
 800c74a:	431a      	orrs	r2, r3
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800c750:	2301      	movs	r3, #1
 800c752:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	2201      	movs	r2, #1
 800c75a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 800c75e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800c762:	4618      	mov	r0, r3
 800c764:	3728      	adds	r7, #40	; 0x28
 800c766:	46bd      	mov	sp, r7
 800c768:	bdb0      	pop	{r4, r5, r7, pc}
 800c76a:	bf00      	nop
 800c76c:	004005ff 	.word	0x004005ff

0800c770 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800c770:	b580      	push	{r7, lr}
 800c772:	b086      	sub	sp, #24
 800c774:	af00      	add	r7, sp, #0
 800c776:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800c778:	2300      	movs	r3, #0
 800c77a:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800c77c:	f107 030c 	add.w	r3, r7, #12
 800c780:	4619      	mov	r1, r3
 800c782:	6878      	ldr	r0, [r7, #4]
 800c784:	f000 fa7e 	bl	800cc84 <SD_SendStatus>
 800c788:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800c78a:	697b      	ldr	r3, [r7, #20]
 800c78c:	2b00      	cmp	r3, #0
 800c78e:	d005      	beq.n	800c79c <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c794:	697b      	ldr	r3, [r7, #20]
 800c796:	431a      	orrs	r2, r3
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800c79c:	68fb      	ldr	r3, [r7, #12]
 800c79e:	0a5b      	lsrs	r3, r3, #9
 800c7a0:	f003 030f 	and.w	r3, r3, #15
 800c7a4:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800c7a6:	693b      	ldr	r3, [r7, #16]
}
 800c7a8:	4618      	mov	r0, r3
 800c7aa:	3718      	adds	r7, #24
 800c7ac:	46bd      	mov	sp, r7
 800c7ae:	bd80      	pop	{r7, pc}

0800c7b0 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800c7b0:	b480      	push	{r7}
 800c7b2:	b085      	sub	sp, #20
 800c7b4:	af00      	add	r7, sp, #0
 800c7b6:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c7bc:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 800c7be:	68fb      	ldr	r3, [r7, #12]
 800c7c0:	681b      	ldr	r3, [r3, #0]
 800c7c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c7c4:	68fb      	ldr	r3, [r7, #12]
 800c7c6:	681b      	ldr	r3, [r3, #0]
 800c7c8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c7cc:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800c7ce:	bf00      	nop
 800c7d0:	3714      	adds	r7, #20
 800c7d2:	46bd      	mov	sp, r7
 800c7d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7d8:	4770      	bx	lr

0800c7da <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800c7da:	b580      	push	{r7, lr}
 800c7dc:	b084      	sub	sp, #16
 800c7de:	af00      	add	r7, sp, #0
 800c7e0:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c7e6:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 800c7e8:	68fb      	ldr	r3, [r7, #12]
 800c7ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c7ec:	2b82      	cmp	r3, #130	; 0x82
 800c7ee:	d111      	bne.n	800c814 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800c7f0:	68fb      	ldr	r3, [r7, #12]
 800c7f2:	681b      	ldr	r3, [r3, #0]
 800c7f4:	4618      	mov	r0, r3
 800c7f6:	f000 ff11 	bl	800d61c <SDMMC_CmdStopTransfer>
 800c7fa:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800c7fc:	68bb      	ldr	r3, [r7, #8]
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	d008      	beq.n	800c814 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800c802:	68fb      	ldr	r3, [r7, #12]
 800c804:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c806:	68bb      	ldr	r3, [r7, #8]
 800c808:	431a      	orrs	r2, r3
 800c80a:	68fb      	ldr	r3, [r7, #12]
 800c80c:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800c80e:	68f8      	ldr	r0, [r7, #12]
 800c810:	f7ff fd30 	bl	800c274 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800c814:	68fb      	ldr	r3, [r7, #12]
 800c816:	681b      	ldr	r3, [r3, #0]
 800c818:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c81a:	68fb      	ldr	r3, [r7, #12]
 800c81c:	681b      	ldr	r3, [r3, #0]
 800c81e:	f022 0208 	bic.w	r2, r2, #8
 800c822:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800c824:	68fb      	ldr	r3, [r7, #12]
 800c826:	681b      	ldr	r3, [r3, #0]
 800c828:	f240 523a 	movw	r2, #1338	; 0x53a
 800c82c:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 800c82e:	68fb      	ldr	r3, [r7, #12]
 800c830:	2201      	movs	r2, #1
 800c832:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800c836:	68fb      	ldr	r3, [r7, #12]
 800c838:	2200      	movs	r2, #0
 800c83a:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800c83c:	68f8      	ldr	r0, [r7, #12]
 800c83e:	f7f8 fd2d 	bl	800529c <HAL_SD_RxCpltCallback>
#endif
}
 800c842:	bf00      	nop
 800c844:	3710      	adds	r7, #16
 800c846:	46bd      	mov	sp, r7
 800c848:	bd80      	pop	{r7, pc}
	...

0800c84c <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 800c84c:	b580      	push	{r7, lr}
 800c84e:	b086      	sub	sp, #24
 800c850:	af00      	add	r7, sp, #0
 800c852:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c858:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800c85a:	6878      	ldr	r0, [r7, #4]
 800c85c:	f7f9 fd16 	bl	800628c <HAL_DMA_GetError>
 800c860:	4603      	mov	r3, r0
 800c862:	2b02      	cmp	r3, #2
 800c864:	d03e      	beq.n	800c8e4 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800c866:	697b      	ldr	r3, [r7, #20]
 800c868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c86a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c86c:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800c86e:	697b      	ldr	r3, [r7, #20]
 800c870:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c872:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c874:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800c876:	693b      	ldr	r3, [r7, #16]
 800c878:	2b01      	cmp	r3, #1
 800c87a:	d002      	beq.n	800c882 <SD_DMAError+0x36>
 800c87c:	68fb      	ldr	r3, [r7, #12]
 800c87e:	2b01      	cmp	r3, #1
 800c880:	d12d      	bne.n	800c8de <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800c882:	697b      	ldr	r3, [r7, #20]
 800c884:	681b      	ldr	r3, [r3, #0]
 800c886:	4a19      	ldr	r2, [pc, #100]	; (800c8ec <SD_DMAError+0xa0>)
 800c888:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800c88a:	697b      	ldr	r3, [r7, #20]
 800c88c:	681b      	ldr	r3, [r3, #0]
 800c88e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c890:	697b      	ldr	r3, [r7, #20]
 800c892:	681b      	ldr	r3, [r3, #0]
 800c894:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800c898:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800c89a:	697b      	ldr	r3, [r7, #20]
 800c89c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c89e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800c8a2:	697b      	ldr	r3, [r7, #20]
 800c8a4:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800c8a6:	6978      	ldr	r0, [r7, #20]
 800c8a8:	f7ff ff62 	bl	800c770 <HAL_SD_GetCardState>
 800c8ac:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800c8ae:	68bb      	ldr	r3, [r7, #8]
 800c8b0:	2b06      	cmp	r3, #6
 800c8b2:	d002      	beq.n	800c8ba <SD_DMAError+0x6e>
 800c8b4:	68bb      	ldr	r3, [r7, #8]
 800c8b6:	2b05      	cmp	r3, #5
 800c8b8:	d10a      	bne.n	800c8d0 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800c8ba:	697b      	ldr	r3, [r7, #20]
 800c8bc:	681b      	ldr	r3, [r3, #0]
 800c8be:	4618      	mov	r0, r3
 800c8c0:	f000 feac 	bl	800d61c <SDMMC_CmdStopTransfer>
 800c8c4:	4602      	mov	r2, r0
 800c8c6:	697b      	ldr	r3, [r7, #20]
 800c8c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c8ca:	431a      	orrs	r2, r3
 800c8cc:	697b      	ldr	r3, [r7, #20]
 800c8ce:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 800c8d0:	697b      	ldr	r3, [r7, #20]
 800c8d2:	2201      	movs	r2, #1
 800c8d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800c8d8:	697b      	ldr	r3, [r7, #20]
 800c8da:	2200      	movs	r2, #0
 800c8dc:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800c8de:	6978      	ldr	r0, [r7, #20]
 800c8e0:	f7ff fcc8 	bl	800c274 <HAL_SD_ErrorCallback>
#endif
  }
}
 800c8e4:	bf00      	nop
 800c8e6:	3718      	adds	r7, #24
 800c8e8:	46bd      	mov	sp, r7
 800c8ea:	bd80      	pop	{r7, pc}
 800c8ec:	004005ff 	.word	0x004005ff

0800c8f0 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 800c8f0:	b580      	push	{r7, lr}
 800c8f2:	b084      	sub	sp, #16
 800c8f4:	af00      	add	r7, sp, #0
 800c8f6:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c8fc:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800c8fe:	68fb      	ldr	r3, [r7, #12]
 800c900:	681b      	ldr	r3, [r3, #0]
 800c902:	f240 523a 	movw	r2, #1338	; 0x53a
 800c906:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800c908:	68f8      	ldr	r0, [r7, #12]
 800c90a:	f7ff ff31 	bl	800c770 <HAL_SD_GetCardState>
 800c90e:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800c910:	68fb      	ldr	r3, [r7, #12]
 800c912:	2201      	movs	r2, #1
 800c914:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800c918:	68fb      	ldr	r3, [r7, #12]
 800c91a:	2200      	movs	r2, #0
 800c91c:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800c91e:	68bb      	ldr	r3, [r7, #8]
 800c920:	2b06      	cmp	r3, #6
 800c922:	d002      	beq.n	800c92a <SD_DMATxAbort+0x3a>
 800c924:	68bb      	ldr	r3, [r7, #8]
 800c926:	2b05      	cmp	r3, #5
 800c928:	d10a      	bne.n	800c940 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800c92a:	68fb      	ldr	r3, [r7, #12]
 800c92c:	681b      	ldr	r3, [r3, #0]
 800c92e:	4618      	mov	r0, r3
 800c930:	f000 fe74 	bl	800d61c <SDMMC_CmdStopTransfer>
 800c934:	4602      	mov	r2, r0
 800c936:	68fb      	ldr	r3, [r7, #12]
 800c938:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c93a:	431a      	orrs	r2, r3
 800c93c:	68fb      	ldr	r3, [r7, #12]
 800c93e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800c940:	68fb      	ldr	r3, [r7, #12]
 800c942:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c944:	2b00      	cmp	r3, #0
 800c946:	d103      	bne.n	800c950 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800c948:	68f8      	ldr	r0, [r7, #12]
 800c94a:	f7ff fc9d 	bl	800c288 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800c94e:	e002      	b.n	800c956 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800c950:	68f8      	ldr	r0, [r7, #12]
 800c952:	f7ff fc8f 	bl	800c274 <HAL_SD_ErrorCallback>
}
 800c956:	bf00      	nop
 800c958:	3710      	adds	r7, #16
 800c95a:	46bd      	mov	sp, r7
 800c95c:	bd80      	pop	{r7, pc}

0800c95e <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 800c95e:	b580      	push	{r7, lr}
 800c960:	b084      	sub	sp, #16
 800c962:	af00      	add	r7, sp, #0
 800c964:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c96a:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800c96c:	68fb      	ldr	r3, [r7, #12]
 800c96e:	681b      	ldr	r3, [r3, #0]
 800c970:	f240 523a 	movw	r2, #1338	; 0x53a
 800c974:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800c976:	68f8      	ldr	r0, [r7, #12]
 800c978:	f7ff fefa 	bl	800c770 <HAL_SD_GetCardState>
 800c97c:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800c97e:	68fb      	ldr	r3, [r7, #12]
 800c980:	2201      	movs	r2, #1
 800c982:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800c986:	68fb      	ldr	r3, [r7, #12]
 800c988:	2200      	movs	r2, #0
 800c98a:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800c98c:	68bb      	ldr	r3, [r7, #8]
 800c98e:	2b06      	cmp	r3, #6
 800c990:	d002      	beq.n	800c998 <SD_DMARxAbort+0x3a>
 800c992:	68bb      	ldr	r3, [r7, #8]
 800c994:	2b05      	cmp	r3, #5
 800c996:	d10a      	bne.n	800c9ae <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800c998:	68fb      	ldr	r3, [r7, #12]
 800c99a:	681b      	ldr	r3, [r3, #0]
 800c99c:	4618      	mov	r0, r3
 800c99e:	f000 fe3d 	bl	800d61c <SDMMC_CmdStopTransfer>
 800c9a2:	4602      	mov	r2, r0
 800c9a4:	68fb      	ldr	r3, [r7, #12]
 800c9a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c9a8:	431a      	orrs	r2, r3
 800c9aa:	68fb      	ldr	r3, [r7, #12]
 800c9ac:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800c9ae:	68fb      	ldr	r3, [r7, #12]
 800c9b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c9b2:	2b00      	cmp	r3, #0
 800c9b4:	d103      	bne.n	800c9be <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800c9b6:	68f8      	ldr	r0, [r7, #12]
 800c9b8:	f7ff fc66 	bl	800c288 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800c9bc:	e002      	b.n	800c9c4 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800c9be:	68f8      	ldr	r0, [r7, #12]
 800c9c0:	f7ff fc58 	bl	800c274 <HAL_SD_ErrorCallback>
}
 800c9c4:	bf00      	nop
 800c9c6:	3710      	adds	r7, #16
 800c9c8:	46bd      	mov	sp, r7
 800c9ca:	bd80      	pop	{r7, pc}

0800c9cc <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800c9cc:	b5b0      	push	{r4, r5, r7, lr}
 800c9ce:	b094      	sub	sp, #80	; 0x50
 800c9d0:	af04      	add	r7, sp, #16
 800c9d2:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800c9d4:	2301      	movs	r3, #1
 800c9d6:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	681b      	ldr	r3, [r3, #0]
 800c9dc:	4618      	mov	r0, r3
 800c9de:	f000 fcee 	bl	800d3be <SDIO_GetPowerState>
 800c9e2:	4603      	mov	r3, r0
 800c9e4:	2b00      	cmp	r3, #0
 800c9e6:	d102      	bne.n	800c9ee <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800c9e8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800c9ec:	e0b8      	b.n	800cb60 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c9f2:	2b03      	cmp	r3, #3
 800c9f4:	d02f      	beq.n	800ca56 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	681b      	ldr	r3, [r3, #0]
 800c9fa:	4618      	mov	r0, r3
 800c9fc:	f000 ff18 	bl	800d830 <SDMMC_CmdSendCID>
 800ca00:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800ca02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ca04:	2b00      	cmp	r3, #0
 800ca06:	d001      	beq.n	800ca0c <SD_InitCard+0x40>
    {
      return errorstate;
 800ca08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ca0a:	e0a9      	b.n	800cb60 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	681b      	ldr	r3, [r3, #0]
 800ca10:	2100      	movs	r1, #0
 800ca12:	4618      	mov	r0, r3
 800ca14:	f000 fd18 	bl	800d448 <SDIO_GetResponse>
 800ca18:	4602      	mov	r2, r0
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	681b      	ldr	r3, [r3, #0]
 800ca22:	2104      	movs	r1, #4
 800ca24:	4618      	mov	r0, r3
 800ca26:	f000 fd0f 	bl	800d448 <SDIO_GetResponse>
 800ca2a:	4602      	mov	r2, r0
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	681b      	ldr	r3, [r3, #0]
 800ca34:	2108      	movs	r1, #8
 800ca36:	4618      	mov	r0, r3
 800ca38:	f000 fd06 	bl	800d448 <SDIO_GetResponse>
 800ca3c:	4602      	mov	r2, r0
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	681b      	ldr	r3, [r3, #0]
 800ca46:	210c      	movs	r1, #12
 800ca48:	4618      	mov	r0, r3
 800ca4a:	f000 fcfd 	bl	800d448 <SDIO_GetResponse>
 800ca4e:	4602      	mov	r2, r0
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ca5a:	2b03      	cmp	r3, #3
 800ca5c:	d00d      	beq.n	800ca7a <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	681b      	ldr	r3, [r3, #0]
 800ca62:	f107 020e 	add.w	r2, r7, #14
 800ca66:	4611      	mov	r1, r2
 800ca68:	4618      	mov	r0, r3
 800ca6a:	f000 ff1e 	bl	800d8aa <SDMMC_CmdSetRelAdd>
 800ca6e:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800ca70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ca72:	2b00      	cmp	r3, #0
 800ca74:	d001      	beq.n	800ca7a <SD_InitCard+0xae>
    {
      return errorstate;
 800ca76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ca78:	e072      	b.n	800cb60 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ca7e:	2b03      	cmp	r3, #3
 800ca80:	d036      	beq.n	800caf0 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800ca82:	89fb      	ldrh	r3, [r7, #14]
 800ca84:	461a      	mov	r2, r3
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	681a      	ldr	r2, [r3, #0]
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ca92:	041b      	lsls	r3, r3, #16
 800ca94:	4619      	mov	r1, r3
 800ca96:	4610      	mov	r0, r2
 800ca98:	f000 fee8 	bl	800d86c <SDMMC_CmdSendCSD>
 800ca9c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800ca9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800caa0:	2b00      	cmp	r3, #0
 800caa2:	d001      	beq.n	800caa8 <SD_InitCard+0xdc>
    {
      return errorstate;
 800caa4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800caa6:	e05b      	b.n	800cb60 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	681b      	ldr	r3, [r3, #0]
 800caac:	2100      	movs	r1, #0
 800caae:	4618      	mov	r0, r3
 800cab0:	f000 fcca 	bl	800d448 <SDIO_GetResponse>
 800cab4:	4602      	mov	r2, r0
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	681b      	ldr	r3, [r3, #0]
 800cabe:	2104      	movs	r1, #4
 800cac0:	4618      	mov	r0, r3
 800cac2:	f000 fcc1 	bl	800d448 <SDIO_GetResponse>
 800cac6:	4602      	mov	r2, r0
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	681b      	ldr	r3, [r3, #0]
 800cad0:	2108      	movs	r1, #8
 800cad2:	4618      	mov	r0, r3
 800cad4:	f000 fcb8 	bl	800d448 <SDIO_GetResponse>
 800cad8:	4602      	mov	r2, r0
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	681b      	ldr	r3, [r3, #0]
 800cae2:	210c      	movs	r1, #12
 800cae4:	4618      	mov	r0, r3
 800cae6:	f000 fcaf 	bl	800d448 <SDIO_GetResponse>
 800caea:	4602      	mov	r2, r0
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	681b      	ldr	r3, [r3, #0]
 800caf4:	2104      	movs	r1, #4
 800caf6:	4618      	mov	r0, r3
 800caf8:	f000 fca6 	bl	800d448 <SDIO_GetResponse>
 800cafc:	4603      	mov	r3, r0
 800cafe:	0d1a      	lsrs	r2, r3, #20
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800cb04:	f107 0310 	add.w	r3, r7, #16
 800cb08:	4619      	mov	r1, r3
 800cb0a:	6878      	ldr	r0, [r7, #4]
 800cb0c:	f7ff fbc6 	bl	800c29c <HAL_SD_GetCardCSD>
 800cb10:	4603      	mov	r3, r0
 800cb12:	2b00      	cmp	r3, #0
 800cb14:	d002      	beq.n	800cb1c <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800cb16:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800cb1a:	e021      	b.n	800cb60 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	6819      	ldr	r1, [r3, #0]
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cb24:	041b      	lsls	r3, r3, #16
 800cb26:	2200      	movs	r2, #0
 800cb28:	461c      	mov	r4, r3
 800cb2a:	4615      	mov	r5, r2
 800cb2c:	4622      	mov	r2, r4
 800cb2e:	462b      	mov	r3, r5
 800cb30:	4608      	mov	r0, r1
 800cb32:	f000 fd95 	bl	800d660 <SDMMC_CmdSelDesel>
 800cb36:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800cb38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cb3a:	2b00      	cmp	r3, #0
 800cb3c:	d001      	beq.n	800cb42 <SD_InitCard+0x176>
  {
    return errorstate;
 800cb3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cb40:	e00e      	b.n	800cb60 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	681d      	ldr	r5, [r3, #0]
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	466c      	mov	r4, sp
 800cb4a:	f103 0210 	add.w	r2, r3, #16
 800cb4e:	ca07      	ldmia	r2, {r0, r1, r2}
 800cb50:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800cb54:	3304      	adds	r3, #4
 800cb56:	cb0e      	ldmia	r3, {r1, r2, r3}
 800cb58:	4628      	mov	r0, r5
 800cb5a:	f000 fbd9 	bl	800d310 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800cb5e:	2300      	movs	r3, #0
}
 800cb60:	4618      	mov	r0, r3
 800cb62:	3740      	adds	r7, #64	; 0x40
 800cb64:	46bd      	mov	sp, r7
 800cb66:	bdb0      	pop	{r4, r5, r7, pc}

0800cb68 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800cb68:	b580      	push	{r7, lr}
 800cb6a:	b086      	sub	sp, #24
 800cb6c:	af00      	add	r7, sp, #0
 800cb6e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800cb70:	2300      	movs	r3, #0
 800cb72:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800cb74:	2300      	movs	r3, #0
 800cb76:	617b      	str	r3, [r7, #20]
 800cb78:	2300      	movs	r3, #0
 800cb7a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	681b      	ldr	r3, [r3, #0]
 800cb80:	4618      	mov	r0, r3
 800cb82:	f000 fd90 	bl	800d6a6 <SDMMC_CmdGoIdleState>
 800cb86:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800cb88:	68fb      	ldr	r3, [r7, #12]
 800cb8a:	2b00      	cmp	r3, #0
 800cb8c:	d001      	beq.n	800cb92 <SD_PowerON+0x2a>
  {
    return errorstate;
 800cb8e:	68fb      	ldr	r3, [r7, #12]
 800cb90:	e072      	b.n	800cc78 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	681b      	ldr	r3, [r3, #0]
 800cb96:	4618      	mov	r0, r3
 800cb98:	f000 fda3 	bl	800d6e2 <SDMMC_CmdOperCond>
 800cb9c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800cb9e:	68fb      	ldr	r3, [r7, #12]
 800cba0:	2b00      	cmp	r3, #0
 800cba2:	d00d      	beq.n	800cbc0 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	2200      	movs	r2, #0
 800cba8:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	681b      	ldr	r3, [r3, #0]
 800cbae:	4618      	mov	r0, r3
 800cbb0:	f000 fd79 	bl	800d6a6 <SDMMC_CmdGoIdleState>
 800cbb4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800cbb6:	68fb      	ldr	r3, [r7, #12]
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	d004      	beq.n	800cbc6 <SD_PowerON+0x5e>
    {
      return errorstate;
 800cbbc:	68fb      	ldr	r3, [r7, #12]
 800cbbe:	e05b      	b.n	800cc78 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	2201      	movs	r2, #1
 800cbc4:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cbca:	2b01      	cmp	r3, #1
 800cbcc:	d137      	bne.n	800cc3e <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	681b      	ldr	r3, [r3, #0]
 800cbd2:	2100      	movs	r1, #0
 800cbd4:	4618      	mov	r0, r3
 800cbd6:	f000 fda3 	bl	800d720 <SDMMC_CmdAppCommand>
 800cbda:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800cbdc:	68fb      	ldr	r3, [r7, #12]
 800cbde:	2b00      	cmp	r3, #0
 800cbe0:	d02d      	beq.n	800cc3e <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800cbe2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800cbe6:	e047      	b.n	800cc78 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	681b      	ldr	r3, [r3, #0]
 800cbec:	2100      	movs	r1, #0
 800cbee:	4618      	mov	r0, r3
 800cbf0:	f000 fd96 	bl	800d720 <SDMMC_CmdAppCommand>
 800cbf4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800cbf6:	68fb      	ldr	r3, [r7, #12]
 800cbf8:	2b00      	cmp	r3, #0
 800cbfa:	d001      	beq.n	800cc00 <SD_PowerON+0x98>
    {
      return errorstate;
 800cbfc:	68fb      	ldr	r3, [r7, #12]
 800cbfe:	e03b      	b.n	800cc78 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	681b      	ldr	r3, [r3, #0]
 800cc04:	491e      	ldr	r1, [pc, #120]	; (800cc80 <SD_PowerON+0x118>)
 800cc06:	4618      	mov	r0, r3
 800cc08:	f000 fdac 	bl	800d764 <SDMMC_CmdAppOperCommand>
 800cc0c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800cc0e:	68fb      	ldr	r3, [r7, #12]
 800cc10:	2b00      	cmp	r3, #0
 800cc12:	d002      	beq.n	800cc1a <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800cc14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800cc18:	e02e      	b.n	800cc78 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	681b      	ldr	r3, [r3, #0]
 800cc1e:	2100      	movs	r1, #0
 800cc20:	4618      	mov	r0, r3
 800cc22:	f000 fc11 	bl	800d448 <SDIO_GetResponse>
 800cc26:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800cc28:	697b      	ldr	r3, [r7, #20]
 800cc2a:	0fdb      	lsrs	r3, r3, #31
 800cc2c:	2b01      	cmp	r3, #1
 800cc2e:	d101      	bne.n	800cc34 <SD_PowerON+0xcc>
 800cc30:	2301      	movs	r3, #1
 800cc32:	e000      	b.n	800cc36 <SD_PowerON+0xce>
 800cc34:	2300      	movs	r3, #0
 800cc36:	613b      	str	r3, [r7, #16]

    count++;
 800cc38:	68bb      	ldr	r3, [r7, #8]
 800cc3a:	3301      	adds	r3, #1
 800cc3c:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800cc3e:	68bb      	ldr	r3, [r7, #8]
 800cc40:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800cc44:	4293      	cmp	r3, r2
 800cc46:	d802      	bhi.n	800cc4e <SD_PowerON+0xe6>
 800cc48:	693b      	ldr	r3, [r7, #16]
 800cc4a:	2b00      	cmp	r3, #0
 800cc4c:	d0cc      	beq.n	800cbe8 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800cc4e:	68bb      	ldr	r3, [r7, #8]
 800cc50:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800cc54:	4293      	cmp	r3, r2
 800cc56:	d902      	bls.n	800cc5e <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800cc58:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800cc5c:	e00c      	b.n	800cc78 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800cc5e:	697b      	ldr	r3, [r7, #20]
 800cc60:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800cc64:	2b00      	cmp	r3, #0
 800cc66:	d003      	beq.n	800cc70 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	2201      	movs	r2, #1
 800cc6c:	645a      	str	r2, [r3, #68]	; 0x44
 800cc6e:	e002      	b.n	800cc76 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	2200      	movs	r2, #0
 800cc74:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800cc76:	2300      	movs	r3, #0
}
 800cc78:	4618      	mov	r0, r3
 800cc7a:	3718      	adds	r7, #24
 800cc7c:	46bd      	mov	sp, r7
 800cc7e:	bd80      	pop	{r7, pc}
 800cc80:	c1100000 	.word	0xc1100000

0800cc84 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800cc84:	b580      	push	{r7, lr}
 800cc86:	b084      	sub	sp, #16
 800cc88:	af00      	add	r7, sp, #0
 800cc8a:	6078      	str	r0, [r7, #4]
 800cc8c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800cc8e:	683b      	ldr	r3, [r7, #0]
 800cc90:	2b00      	cmp	r3, #0
 800cc92:	d102      	bne.n	800cc9a <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800cc94:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800cc98:	e018      	b.n	800cccc <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	681a      	ldr	r2, [r3, #0]
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cca2:	041b      	lsls	r3, r3, #16
 800cca4:	4619      	mov	r1, r3
 800cca6:	4610      	mov	r0, r2
 800cca8:	f000 fe20 	bl	800d8ec <SDMMC_CmdSendStatus>
 800ccac:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800ccae:	68fb      	ldr	r3, [r7, #12]
 800ccb0:	2b00      	cmp	r3, #0
 800ccb2:	d001      	beq.n	800ccb8 <SD_SendStatus+0x34>
  {
    return errorstate;
 800ccb4:	68fb      	ldr	r3, [r7, #12]
 800ccb6:	e009      	b.n	800cccc <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	681b      	ldr	r3, [r3, #0]
 800ccbc:	2100      	movs	r1, #0
 800ccbe:	4618      	mov	r0, r3
 800ccc0:	f000 fbc2 	bl	800d448 <SDIO_GetResponse>
 800ccc4:	4602      	mov	r2, r0
 800ccc6:	683b      	ldr	r3, [r7, #0]
 800ccc8:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800ccca:	2300      	movs	r3, #0
}
 800cccc:	4618      	mov	r0, r3
 800ccce:	3710      	adds	r7, #16
 800ccd0:	46bd      	mov	sp, r7
 800ccd2:	bd80      	pop	{r7, pc}

0800ccd4 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800ccd4:	b580      	push	{r7, lr}
 800ccd6:	b086      	sub	sp, #24
 800ccd8:	af00      	add	r7, sp, #0
 800ccda:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800ccdc:	2300      	movs	r3, #0
 800ccde:	60fb      	str	r3, [r7, #12]
 800cce0:	2300      	movs	r3, #0
 800cce2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	681b      	ldr	r3, [r3, #0]
 800cce8:	2100      	movs	r1, #0
 800ccea:	4618      	mov	r0, r3
 800ccec:	f000 fbac 	bl	800d448 <SDIO_GetResponse>
 800ccf0:	4603      	mov	r3, r0
 800ccf2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ccf6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ccfa:	d102      	bne.n	800cd02 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800ccfc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800cd00:	e02f      	b.n	800cd62 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800cd02:	f107 030c 	add.w	r3, r7, #12
 800cd06:	4619      	mov	r1, r3
 800cd08:	6878      	ldr	r0, [r7, #4]
 800cd0a:	f000 f879 	bl	800ce00 <SD_FindSCR>
 800cd0e:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800cd10:	697b      	ldr	r3, [r7, #20]
 800cd12:	2b00      	cmp	r3, #0
 800cd14:	d001      	beq.n	800cd1a <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800cd16:	697b      	ldr	r3, [r7, #20]
 800cd18:	e023      	b.n	800cd62 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800cd1a:	693b      	ldr	r3, [r7, #16]
 800cd1c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800cd20:	2b00      	cmp	r3, #0
 800cd22:	d01c      	beq.n	800cd5e <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	681a      	ldr	r2, [r3, #0]
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cd2c:	041b      	lsls	r3, r3, #16
 800cd2e:	4619      	mov	r1, r3
 800cd30:	4610      	mov	r0, r2
 800cd32:	f000 fcf5 	bl	800d720 <SDMMC_CmdAppCommand>
 800cd36:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800cd38:	697b      	ldr	r3, [r7, #20]
 800cd3a:	2b00      	cmp	r3, #0
 800cd3c:	d001      	beq.n	800cd42 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800cd3e:	697b      	ldr	r3, [r7, #20]
 800cd40:	e00f      	b.n	800cd62 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	681b      	ldr	r3, [r3, #0]
 800cd46:	2102      	movs	r1, #2
 800cd48:	4618      	mov	r0, r3
 800cd4a:	f000 fd2e 	bl	800d7aa <SDMMC_CmdBusWidth>
 800cd4e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800cd50:	697b      	ldr	r3, [r7, #20]
 800cd52:	2b00      	cmp	r3, #0
 800cd54:	d001      	beq.n	800cd5a <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800cd56:	697b      	ldr	r3, [r7, #20]
 800cd58:	e003      	b.n	800cd62 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800cd5a:	2300      	movs	r3, #0
 800cd5c:	e001      	b.n	800cd62 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800cd5e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800cd62:	4618      	mov	r0, r3
 800cd64:	3718      	adds	r7, #24
 800cd66:	46bd      	mov	sp, r7
 800cd68:	bd80      	pop	{r7, pc}

0800cd6a <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800cd6a:	b580      	push	{r7, lr}
 800cd6c:	b086      	sub	sp, #24
 800cd6e:	af00      	add	r7, sp, #0
 800cd70:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800cd72:	2300      	movs	r3, #0
 800cd74:	60fb      	str	r3, [r7, #12]
 800cd76:	2300      	movs	r3, #0
 800cd78:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	681b      	ldr	r3, [r3, #0]
 800cd7e:	2100      	movs	r1, #0
 800cd80:	4618      	mov	r0, r3
 800cd82:	f000 fb61 	bl	800d448 <SDIO_GetResponse>
 800cd86:	4603      	mov	r3, r0
 800cd88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cd8c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800cd90:	d102      	bne.n	800cd98 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800cd92:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800cd96:	e02f      	b.n	800cdf8 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800cd98:	f107 030c 	add.w	r3, r7, #12
 800cd9c:	4619      	mov	r1, r3
 800cd9e:	6878      	ldr	r0, [r7, #4]
 800cda0:	f000 f82e 	bl	800ce00 <SD_FindSCR>
 800cda4:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800cda6:	697b      	ldr	r3, [r7, #20]
 800cda8:	2b00      	cmp	r3, #0
 800cdaa:	d001      	beq.n	800cdb0 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800cdac:	697b      	ldr	r3, [r7, #20]
 800cdae:	e023      	b.n	800cdf8 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800cdb0:	693b      	ldr	r3, [r7, #16]
 800cdb2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800cdb6:	2b00      	cmp	r3, #0
 800cdb8:	d01c      	beq.n	800cdf4 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	681a      	ldr	r2, [r3, #0]
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cdc2:	041b      	lsls	r3, r3, #16
 800cdc4:	4619      	mov	r1, r3
 800cdc6:	4610      	mov	r0, r2
 800cdc8:	f000 fcaa 	bl	800d720 <SDMMC_CmdAppCommand>
 800cdcc:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800cdce:	697b      	ldr	r3, [r7, #20]
 800cdd0:	2b00      	cmp	r3, #0
 800cdd2:	d001      	beq.n	800cdd8 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800cdd4:	697b      	ldr	r3, [r7, #20]
 800cdd6:	e00f      	b.n	800cdf8 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	681b      	ldr	r3, [r3, #0]
 800cddc:	2100      	movs	r1, #0
 800cdde:	4618      	mov	r0, r3
 800cde0:	f000 fce3 	bl	800d7aa <SDMMC_CmdBusWidth>
 800cde4:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800cde6:	697b      	ldr	r3, [r7, #20]
 800cde8:	2b00      	cmp	r3, #0
 800cdea:	d001      	beq.n	800cdf0 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800cdec:	697b      	ldr	r3, [r7, #20]
 800cdee:	e003      	b.n	800cdf8 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800cdf0:	2300      	movs	r3, #0
 800cdf2:	e001      	b.n	800cdf8 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800cdf4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800cdf8:	4618      	mov	r0, r3
 800cdfa:	3718      	adds	r7, #24
 800cdfc:	46bd      	mov	sp, r7
 800cdfe:	bd80      	pop	{r7, pc}

0800ce00 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800ce00:	b590      	push	{r4, r7, lr}
 800ce02:	b08f      	sub	sp, #60	; 0x3c
 800ce04:	af00      	add	r7, sp, #0
 800ce06:	6078      	str	r0, [r7, #4]
 800ce08:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800ce0a:	f7f8 fe0b 	bl	8005a24 <HAL_GetTick>
 800ce0e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800ce10:	2300      	movs	r3, #0
 800ce12:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800ce14:	2300      	movs	r3, #0
 800ce16:	60bb      	str	r3, [r7, #8]
 800ce18:	2300      	movs	r3, #0
 800ce1a:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800ce1c:	683b      	ldr	r3, [r7, #0]
 800ce1e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	681b      	ldr	r3, [r3, #0]
 800ce24:	2108      	movs	r1, #8
 800ce26:	4618      	mov	r0, r3
 800ce28:	f000 fb4d 	bl	800d4c6 <SDMMC_CmdBlockLength>
 800ce2c:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800ce2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce30:	2b00      	cmp	r3, #0
 800ce32:	d001      	beq.n	800ce38 <SD_FindSCR+0x38>
  {
    return errorstate;
 800ce34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce36:	e0b9      	b.n	800cfac <SD_FindSCR+0x1ac>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	681a      	ldr	r2, [r3, #0]
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ce40:	041b      	lsls	r3, r3, #16
 800ce42:	4619      	mov	r1, r3
 800ce44:	4610      	mov	r0, r2
 800ce46:	f000 fc6b 	bl	800d720 <SDMMC_CmdAppCommand>
 800ce4a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800ce4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce4e:	2b00      	cmp	r3, #0
 800ce50:	d001      	beq.n	800ce56 <SD_FindSCR+0x56>
  {
    return errorstate;
 800ce52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce54:	e0aa      	b.n	800cfac <SD_FindSCR+0x1ac>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800ce56:	f04f 33ff 	mov.w	r3, #4294967295
 800ce5a:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800ce5c:	2308      	movs	r3, #8
 800ce5e:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 800ce60:	2330      	movs	r3, #48	; 0x30
 800ce62:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800ce64:	2302      	movs	r3, #2
 800ce66:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800ce68:	2300      	movs	r3, #0
 800ce6a:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 800ce6c:	2301      	movs	r3, #1
 800ce6e:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	681b      	ldr	r3, [r3, #0]
 800ce74:	f107 0210 	add.w	r2, r7, #16
 800ce78:	4611      	mov	r1, r2
 800ce7a:	4618      	mov	r0, r3
 800ce7c:	f000 faf7 	bl	800d46e <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	681b      	ldr	r3, [r3, #0]
 800ce84:	4618      	mov	r0, r3
 800ce86:	f000 fcb2 	bl	800d7ee <SDMMC_CmdSendSCR>
 800ce8a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800ce8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce8e:	2b00      	cmp	r3, #0
 800ce90:	d02a      	beq.n	800cee8 <SD_FindSCR+0xe8>
  {
    return errorstate;
 800ce92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce94:	e08a      	b.n	800cfac <SD_FindSCR+0x1ac>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	681b      	ldr	r3, [r3, #0]
 800ce9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ce9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800cea0:	2b00      	cmp	r3, #0
 800cea2:	d00f      	beq.n	800cec4 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	6819      	ldr	r1, [r3, #0]
 800cea8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ceaa:	009b      	lsls	r3, r3, #2
 800ceac:	f107 0208 	add.w	r2, r7, #8
 800ceb0:	18d4      	adds	r4, r2, r3
 800ceb2:	4608      	mov	r0, r1
 800ceb4:	f000 fa57 	bl	800d366 <SDIO_ReadFIFO>
 800ceb8:	4603      	mov	r3, r0
 800ceba:	6023      	str	r3, [r4, #0]
      index++;
 800cebc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cebe:	3301      	adds	r3, #1
 800cec0:	637b      	str	r3, [r7, #52]	; 0x34
 800cec2:	e006      	b.n	800ced2 <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	681b      	ldr	r3, [r3, #0]
 800cec8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ceca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800cece:	2b00      	cmp	r3, #0
 800ced0:	d012      	beq.n	800cef8 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 800ced2:	f7f8 fda7 	bl	8005a24 <HAL_GetTick>
 800ced6:	4602      	mov	r2, r0
 800ced8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ceda:	1ad3      	subs	r3, r2, r3
 800cedc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cee0:	d102      	bne.n	800cee8 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800cee2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800cee6:	e061      	b.n	800cfac <SD_FindSCR+0x1ac>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	681b      	ldr	r3, [r3, #0]
 800ceec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ceee:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 800cef2:	2b00      	cmp	r3, #0
 800cef4:	d0cf      	beq.n	800ce96 <SD_FindSCR+0x96>
 800cef6:	e000      	b.n	800cefa <SD_FindSCR+0xfa>
      break;
 800cef8:	bf00      	nop
    }
  }

#if defined(SDIO_STA_STBITERR)
  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	681b      	ldr	r3, [r3, #0]
 800cefe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cf00:	f003 0308 	and.w	r3, r3, #8
 800cf04:	2b00      	cmp	r3, #0
 800cf06:	d106      	bne.n	800cf16 <SD_FindSCR+0x116>
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	681b      	ldr	r3, [r3, #0]
 800cf0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cf0e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800cf12:	2b00      	cmp	r3, #0
 800cf14:	d005      	beq.n	800cf22 <SD_FindSCR+0x122>
#else /* SDIO_STA_STBITERR not defined */
  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
#endif /* SDIO_STA_STBITERR */
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	681b      	ldr	r3, [r3, #0]
 800cf1a:	2208      	movs	r2, #8
 800cf1c:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800cf1e:	2308      	movs	r3, #8
 800cf20:	e044      	b.n	800cfac <SD_FindSCR+0x1ac>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	681b      	ldr	r3, [r3, #0]
 800cf26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cf28:	f003 0302 	and.w	r3, r3, #2
 800cf2c:	2b00      	cmp	r3, #0
 800cf2e:	d005      	beq.n	800cf3c <SD_FindSCR+0x13c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	681b      	ldr	r3, [r3, #0]
 800cf34:	2202      	movs	r2, #2
 800cf36:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800cf38:	2302      	movs	r3, #2
 800cf3a:	e037      	b.n	800cfac <SD_FindSCR+0x1ac>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	681b      	ldr	r3, [r3, #0]
 800cf40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cf42:	f003 0320 	and.w	r3, r3, #32
 800cf46:	2b00      	cmp	r3, #0
 800cf48:	d005      	beq.n	800cf56 <SD_FindSCR+0x156>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	681b      	ldr	r3, [r3, #0]
 800cf4e:	2220      	movs	r2, #32
 800cf50:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800cf52:	2320      	movs	r3, #32
 800cf54:	e02a      	b.n	800cfac <SD_FindSCR+0x1ac>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	681b      	ldr	r3, [r3, #0]
 800cf5a:	f240 523a 	movw	r2, #1338	; 0x53a
 800cf5e:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800cf60:	68fb      	ldr	r3, [r7, #12]
 800cf62:	061a      	lsls	r2, r3, #24
 800cf64:	68fb      	ldr	r3, [r7, #12]
 800cf66:	021b      	lsls	r3, r3, #8
 800cf68:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800cf6c:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800cf6e:	68fb      	ldr	r3, [r7, #12]
 800cf70:	0a1b      	lsrs	r3, r3, #8
 800cf72:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800cf76:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800cf78:	68fb      	ldr	r3, [r7, #12]
 800cf7a:	0e1b      	lsrs	r3, r3, #24
 800cf7c:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800cf7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf80:	601a      	str	r2, [r3, #0]
    scr++;
 800cf82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf84:	3304      	adds	r3, #4
 800cf86:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800cf88:	68bb      	ldr	r3, [r7, #8]
 800cf8a:	061a      	lsls	r2, r3, #24
 800cf8c:	68bb      	ldr	r3, [r7, #8]
 800cf8e:	021b      	lsls	r3, r3, #8
 800cf90:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800cf94:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800cf96:	68bb      	ldr	r3, [r7, #8]
 800cf98:	0a1b      	lsrs	r3, r3, #8
 800cf9a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800cf9e:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800cfa0:	68bb      	ldr	r3, [r7, #8]
 800cfa2:	0e1b      	lsrs	r3, r3, #24
 800cfa4:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800cfa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfa8:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800cfaa:	2300      	movs	r3, #0
}
 800cfac:	4618      	mov	r0, r3
 800cfae:	373c      	adds	r7, #60	; 0x3c
 800cfb0:	46bd      	mov	sp, r7
 800cfb2:	bd90      	pop	{r4, r7, pc}

0800cfb4 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800cfb4:	b580      	push	{r7, lr}
 800cfb6:	b086      	sub	sp, #24
 800cfb8:	af00      	add	r7, sp, #0
 800cfba:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cfc0:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cfc6:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800cfc8:	693b      	ldr	r3, [r7, #16]
 800cfca:	2b00      	cmp	r3, #0
 800cfcc:	d03f      	beq.n	800d04e <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800cfce:	2300      	movs	r3, #0
 800cfd0:	617b      	str	r3, [r7, #20]
 800cfd2:	e033      	b.n	800d03c <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	681b      	ldr	r3, [r3, #0]
 800cfd8:	4618      	mov	r0, r3
 800cfda:	f000 f9c4 	bl	800d366 <SDIO_ReadFIFO>
 800cfde:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 800cfe0:	68bb      	ldr	r3, [r7, #8]
 800cfe2:	b2da      	uxtb	r2, r3
 800cfe4:	68fb      	ldr	r3, [r7, #12]
 800cfe6:	701a      	strb	r2, [r3, #0]
      tmp++;
 800cfe8:	68fb      	ldr	r3, [r7, #12]
 800cfea:	3301      	adds	r3, #1
 800cfec:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800cfee:	693b      	ldr	r3, [r7, #16]
 800cff0:	3b01      	subs	r3, #1
 800cff2:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800cff4:	68bb      	ldr	r3, [r7, #8]
 800cff6:	0a1b      	lsrs	r3, r3, #8
 800cff8:	b2da      	uxtb	r2, r3
 800cffa:	68fb      	ldr	r3, [r7, #12]
 800cffc:	701a      	strb	r2, [r3, #0]
      tmp++;
 800cffe:	68fb      	ldr	r3, [r7, #12]
 800d000:	3301      	adds	r3, #1
 800d002:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800d004:	693b      	ldr	r3, [r7, #16]
 800d006:	3b01      	subs	r3, #1
 800d008:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800d00a:	68bb      	ldr	r3, [r7, #8]
 800d00c:	0c1b      	lsrs	r3, r3, #16
 800d00e:	b2da      	uxtb	r2, r3
 800d010:	68fb      	ldr	r3, [r7, #12]
 800d012:	701a      	strb	r2, [r3, #0]
      tmp++;
 800d014:	68fb      	ldr	r3, [r7, #12]
 800d016:	3301      	adds	r3, #1
 800d018:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800d01a:	693b      	ldr	r3, [r7, #16]
 800d01c:	3b01      	subs	r3, #1
 800d01e:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800d020:	68bb      	ldr	r3, [r7, #8]
 800d022:	0e1b      	lsrs	r3, r3, #24
 800d024:	b2da      	uxtb	r2, r3
 800d026:	68fb      	ldr	r3, [r7, #12]
 800d028:	701a      	strb	r2, [r3, #0]
      tmp++;
 800d02a:	68fb      	ldr	r3, [r7, #12]
 800d02c:	3301      	adds	r3, #1
 800d02e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800d030:	693b      	ldr	r3, [r7, #16]
 800d032:	3b01      	subs	r3, #1
 800d034:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800d036:	697b      	ldr	r3, [r7, #20]
 800d038:	3301      	adds	r3, #1
 800d03a:	617b      	str	r3, [r7, #20]
 800d03c:	697b      	ldr	r3, [r7, #20]
 800d03e:	2b07      	cmp	r3, #7
 800d040:	d9c8      	bls.n	800cfd4 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	68fa      	ldr	r2, [r7, #12]
 800d046:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	693a      	ldr	r2, [r7, #16]
 800d04c:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800d04e:	bf00      	nop
 800d050:	3718      	adds	r7, #24
 800d052:	46bd      	mov	sp, r7
 800d054:	bd80      	pop	{r7, pc}

0800d056 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800d056:	b580      	push	{r7, lr}
 800d058:	b086      	sub	sp, #24
 800d05a:	af00      	add	r7, sp, #0
 800d05c:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	6a1b      	ldr	r3, [r3, #32]
 800d062:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d068:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800d06a:	693b      	ldr	r3, [r7, #16]
 800d06c:	2b00      	cmp	r3, #0
 800d06e:	d043      	beq.n	800d0f8 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800d070:	2300      	movs	r3, #0
 800d072:	617b      	str	r3, [r7, #20]
 800d074:	e037      	b.n	800d0e6 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800d076:	68fb      	ldr	r3, [r7, #12]
 800d078:	781b      	ldrb	r3, [r3, #0]
 800d07a:	60bb      	str	r3, [r7, #8]
      tmp++;
 800d07c:	68fb      	ldr	r3, [r7, #12]
 800d07e:	3301      	adds	r3, #1
 800d080:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800d082:	693b      	ldr	r3, [r7, #16]
 800d084:	3b01      	subs	r3, #1
 800d086:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800d088:	68fb      	ldr	r3, [r7, #12]
 800d08a:	781b      	ldrb	r3, [r3, #0]
 800d08c:	021a      	lsls	r2, r3, #8
 800d08e:	68bb      	ldr	r3, [r7, #8]
 800d090:	4313      	orrs	r3, r2
 800d092:	60bb      	str	r3, [r7, #8]
      tmp++;
 800d094:	68fb      	ldr	r3, [r7, #12]
 800d096:	3301      	adds	r3, #1
 800d098:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800d09a:	693b      	ldr	r3, [r7, #16]
 800d09c:	3b01      	subs	r3, #1
 800d09e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800d0a0:	68fb      	ldr	r3, [r7, #12]
 800d0a2:	781b      	ldrb	r3, [r3, #0]
 800d0a4:	041a      	lsls	r2, r3, #16
 800d0a6:	68bb      	ldr	r3, [r7, #8]
 800d0a8:	4313      	orrs	r3, r2
 800d0aa:	60bb      	str	r3, [r7, #8]
      tmp++;
 800d0ac:	68fb      	ldr	r3, [r7, #12]
 800d0ae:	3301      	adds	r3, #1
 800d0b0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800d0b2:	693b      	ldr	r3, [r7, #16]
 800d0b4:	3b01      	subs	r3, #1
 800d0b6:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800d0b8:	68fb      	ldr	r3, [r7, #12]
 800d0ba:	781b      	ldrb	r3, [r3, #0]
 800d0bc:	061a      	lsls	r2, r3, #24
 800d0be:	68bb      	ldr	r3, [r7, #8]
 800d0c0:	4313      	orrs	r3, r2
 800d0c2:	60bb      	str	r3, [r7, #8]
      tmp++;
 800d0c4:	68fb      	ldr	r3, [r7, #12]
 800d0c6:	3301      	adds	r3, #1
 800d0c8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800d0ca:	693b      	ldr	r3, [r7, #16]
 800d0cc:	3b01      	subs	r3, #1
 800d0ce:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	681b      	ldr	r3, [r3, #0]
 800d0d4:	f107 0208 	add.w	r2, r7, #8
 800d0d8:	4611      	mov	r1, r2
 800d0da:	4618      	mov	r0, r3
 800d0dc:	f000 f950 	bl	800d380 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800d0e0:	697b      	ldr	r3, [r7, #20]
 800d0e2:	3301      	adds	r3, #1
 800d0e4:	617b      	str	r3, [r7, #20]
 800d0e6:	697b      	ldr	r3, [r7, #20]
 800d0e8:	2b07      	cmp	r3, #7
 800d0ea:	d9c4      	bls.n	800d076 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	68fa      	ldr	r2, [r7, #12]
 800d0f0:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	693a      	ldr	r2, [r7, #16]
 800d0f6:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800d0f8:	bf00      	nop
 800d0fa:	3718      	adds	r7, #24
 800d0fc:	46bd      	mov	sp, r7
 800d0fe:	bd80      	pop	{r7, pc}

0800d100 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800d100:	b580      	push	{r7, lr}
 800d102:	b088      	sub	sp, #32
 800d104:	af00      	add	r7, sp, #0
 800d106:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	681b      	ldr	r3, [r3, #0]
 800d10c:	685b      	ldr	r3, [r3, #4]
 800d10e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	681b      	ldr	r3, [r3, #0]
 800d114:	689b      	ldr	r3, [r3, #8]
 800d116:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800d118:	69bb      	ldr	r3, [r7, #24]
 800d11a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d11e:	2b00      	cmp	r3, #0
 800d120:	d10e      	bne.n	800d140 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800d122:	69bb      	ldr	r3, [r7, #24]
 800d124:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800d128:	2b00      	cmp	r3, #0
 800d12a:	d009      	beq.n	800d140 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800d12c:	69fb      	ldr	r3, [r7, #28]
 800d12e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d132:	2b00      	cmp	r3, #0
 800d134:	d004      	beq.n	800d140 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d13a:	6878      	ldr	r0, [r7, #4]
 800d13c:	4798      	blx	r3
    return;
 800d13e:	e0ce      	b.n	800d2de <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800d140:	69bb      	ldr	r3, [r7, #24]
 800d142:	f003 0302 	and.w	r3, r3, #2
 800d146:	2b00      	cmp	r3, #0
 800d148:	d009      	beq.n	800d15e <HAL_SPI_IRQHandler+0x5e>
 800d14a:	69fb      	ldr	r3, [r7, #28]
 800d14c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d150:	2b00      	cmp	r3, #0
 800d152:	d004      	beq.n	800d15e <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d158:	6878      	ldr	r0, [r7, #4]
 800d15a:	4798      	blx	r3
    return;
 800d15c:	e0bf      	b.n	800d2de <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800d15e:	69bb      	ldr	r3, [r7, #24]
 800d160:	f003 0320 	and.w	r3, r3, #32
 800d164:	2b00      	cmp	r3, #0
 800d166:	d10a      	bne.n	800d17e <HAL_SPI_IRQHandler+0x7e>
 800d168:	69bb      	ldr	r3, [r7, #24]
 800d16a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d16e:	2b00      	cmp	r3, #0
 800d170:	d105      	bne.n	800d17e <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800d172:	69bb      	ldr	r3, [r7, #24]
 800d174:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d178:	2b00      	cmp	r3, #0
 800d17a:	f000 80b0 	beq.w	800d2de <HAL_SPI_IRQHandler+0x1de>
 800d17e:	69fb      	ldr	r3, [r7, #28]
 800d180:	f003 0320 	and.w	r3, r3, #32
 800d184:	2b00      	cmp	r3, #0
 800d186:	f000 80aa 	beq.w	800d2de <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800d18a:	69bb      	ldr	r3, [r7, #24]
 800d18c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d190:	2b00      	cmp	r3, #0
 800d192:	d023      	beq.n	800d1dc <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800d19a:	b2db      	uxtb	r3, r3
 800d19c:	2b03      	cmp	r3, #3
 800d19e:	d011      	beq.n	800d1c4 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d1a4:	f043 0204 	orr.w	r2, r3, #4
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800d1ac:	2300      	movs	r3, #0
 800d1ae:	617b      	str	r3, [r7, #20]
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	681b      	ldr	r3, [r3, #0]
 800d1b4:	68db      	ldr	r3, [r3, #12]
 800d1b6:	617b      	str	r3, [r7, #20]
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	681b      	ldr	r3, [r3, #0]
 800d1bc:	689b      	ldr	r3, [r3, #8]
 800d1be:	617b      	str	r3, [r7, #20]
 800d1c0:	697b      	ldr	r3, [r7, #20]
 800d1c2:	e00b      	b.n	800d1dc <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800d1c4:	2300      	movs	r3, #0
 800d1c6:	613b      	str	r3, [r7, #16]
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	681b      	ldr	r3, [r3, #0]
 800d1cc:	68db      	ldr	r3, [r3, #12]
 800d1ce:	613b      	str	r3, [r7, #16]
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	681b      	ldr	r3, [r3, #0]
 800d1d4:	689b      	ldr	r3, [r3, #8]
 800d1d6:	613b      	str	r3, [r7, #16]
 800d1d8:	693b      	ldr	r3, [r7, #16]
        return;
 800d1da:	e080      	b.n	800d2de <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800d1dc:	69bb      	ldr	r3, [r7, #24]
 800d1de:	f003 0320 	and.w	r3, r3, #32
 800d1e2:	2b00      	cmp	r3, #0
 800d1e4:	d014      	beq.n	800d210 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d1ea:	f043 0201 	orr.w	r2, r3, #1
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800d1f2:	2300      	movs	r3, #0
 800d1f4:	60fb      	str	r3, [r7, #12]
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	681b      	ldr	r3, [r3, #0]
 800d1fa:	689b      	ldr	r3, [r3, #8]
 800d1fc:	60fb      	str	r3, [r7, #12]
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	681b      	ldr	r3, [r3, #0]
 800d202:	681a      	ldr	r2, [r3, #0]
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	681b      	ldr	r3, [r3, #0]
 800d208:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d20c:	601a      	str	r2, [r3, #0]
 800d20e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800d210:	69bb      	ldr	r3, [r7, #24]
 800d212:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d216:	2b00      	cmp	r3, #0
 800d218:	d00c      	beq.n	800d234 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d21e:	f043 0208 	orr.w	r2, r3, #8
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800d226:	2300      	movs	r3, #0
 800d228:	60bb      	str	r3, [r7, #8]
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	681b      	ldr	r3, [r3, #0]
 800d22e:	689b      	ldr	r3, [r3, #8]
 800d230:	60bb      	str	r3, [r7, #8]
 800d232:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d238:	2b00      	cmp	r3, #0
 800d23a:	d04f      	beq.n	800d2dc <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	681b      	ldr	r3, [r3, #0]
 800d240:	685a      	ldr	r2, [r3, #4]
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	681b      	ldr	r3, [r3, #0]
 800d246:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800d24a:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	2201      	movs	r2, #1
 800d250:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800d254:	69fb      	ldr	r3, [r7, #28]
 800d256:	f003 0302 	and.w	r3, r3, #2
 800d25a:	2b00      	cmp	r3, #0
 800d25c:	d104      	bne.n	800d268 <HAL_SPI_IRQHandler+0x168>
 800d25e:	69fb      	ldr	r3, [r7, #28]
 800d260:	f003 0301 	and.w	r3, r3, #1
 800d264:	2b00      	cmp	r3, #0
 800d266:	d034      	beq.n	800d2d2 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	681b      	ldr	r3, [r3, #0]
 800d26c:	685a      	ldr	r2, [r3, #4]
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	681b      	ldr	r3, [r3, #0]
 800d272:	f022 0203 	bic.w	r2, r2, #3
 800d276:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d27c:	2b00      	cmp	r3, #0
 800d27e:	d011      	beq.n	800d2a4 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d284:	4a17      	ldr	r2, [pc, #92]	; (800d2e4 <HAL_SPI_IRQHandler+0x1e4>)
 800d286:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d28c:	4618      	mov	r0, r3
 800d28e:	f7f8 fe43 	bl	8005f18 <HAL_DMA_Abort_IT>
 800d292:	4603      	mov	r3, r0
 800d294:	2b00      	cmp	r3, #0
 800d296:	d005      	beq.n	800d2a4 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d29c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d2a8:	2b00      	cmp	r3, #0
 800d2aa:	d016      	beq.n	800d2da <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d2b0:	4a0c      	ldr	r2, [pc, #48]	; (800d2e4 <HAL_SPI_IRQHandler+0x1e4>)
 800d2b2:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d2b8:	4618      	mov	r0, r3
 800d2ba:	f7f8 fe2d 	bl	8005f18 <HAL_DMA_Abort_IT>
 800d2be:	4603      	mov	r3, r0
 800d2c0:	2b00      	cmp	r3, #0
 800d2c2:	d00a      	beq.n	800d2da <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d2c8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 800d2d0:	e003      	b.n	800d2da <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800d2d2:	6878      	ldr	r0, [r7, #4]
 800d2d4:	f7f8 fa98 	bl	8005808 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800d2d8:	e000      	b.n	800d2dc <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 800d2da:	bf00      	nop
    return;
 800d2dc:	bf00      	nop
  }
}
 800d2de:	3720      	adds	r7, #32
 800d2e0:	46bd      	mov	sp, r7
 800d2e2:	bd80      	pop	{r7, pc}
 800d2e4:	0800d2e9 	.word	0x0800d2e9

0800d2e8 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800d2e8:	b580      	push	{r7, lr}
 800d2ea:	b084      	sub	sp, #16
 800d2ec:	af00      	add	r7, sp, #0
 800d2ee:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d2f4:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800d2f6:	68fb      	ldr	r3, [r7, #12]
 800d2f8:	2200      	movs	r2, #0
 800d2fa:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 800d2fc:	68fb      	ldr	r3, [r7, #12]
 800d2fe:	2200      	movs	r2, #0
 800d300:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800d302:	68f8      	ldr	r0, [r7, #12]
 800d304:	f7f8 fa80 	bl	8005808 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800d308:	bf00      	nop
 800d30a:	3710      	adds	r7, #16
 800d30c:	46bd      	mov	sp, r7
 800d30e:	bd80      	pop	{r7, pc}

0800d310 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800d310:	b084      	sub	sp, #16
 800d312:	b480      	push	{r7}
 800d314:	b085      	sub	sp, #20
 800d316:	af00      	add	r7, sp, #0
 800d318:	6078      	str	r0, [r7, #4]
 800d31a:	f107 001c 	add.w	r0, r7, #28
 800d31e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800d322:	2300      	movs	r3, #0
 800d324:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800d326:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800d328:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800d32a:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800d32c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800d32e:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800d330:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800d332:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800d334:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800d336:	431a      	orrs	r2, r3
             Init.ClockDiv
 800d338:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800d33a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800d33c:	68fa      	ldr	r2, [r7, #12]
 800d33e:	4313      	orrs	r3, r2
 800d340:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	685b      	ldr	r3, [r3, #4]
 800d346:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800d34a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800d34e:	68fa      	ldr	r2, [r7, #12]
 800d350:	431a      	orrs	r2, r3
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800d356:	2300      	movs	r3, #0
}
 800d358:	4618      	mov	r0, r3
 800d35a:	3714      	adds	r7, #20
 800d35c:	46bd      	mov	sp, r7
 800d35e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d362:	b004      	add	sp, #16
 800d364:	4770      	bx	lr

0800d366 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800d366:	b480      	push	{r7}
 800d368:	b083      	sub	sp, #12
 800d36a:	af00      	add	r7, sp, #0
 800d36c:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800d374:	4618      	mov	r0, r3
 800d376:	370c      	adds	r7, #12
 800d378:	46bd      	mov	sp, r7
 800d37a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d37e:	4770      	bx	lr

0800d380 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800d380:	b480      	push	{r7}
 800d382:	b083      	sub	sp, #12
 800d384:	af00      	add	r7, sp, #0
 800d386:	6078      	str	r0, [r7, #4]
 800d388:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800d38a:	683b      	ldr	r3, [r7, #0]
 800d38c:	681a      	ldr	r2, [r3, #0]
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d394:	2300      	movs	r3, #0
}
 800d396:	4618      	mov	r0, r3
 800d398:	370c      	adds	r7, #12
 800d39a:	46bd      	mov	sp, r7
 800d39c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3a0:	4770      	bx	lr

0800d3a2 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800d3a2:	b480      	push	{r7}
 800d3a4:	b083      	sub	sp, #12
 800d3a6:	af00      	add	r7, sp, #0
 800d3a8:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	2203      	movs	r2, #3
 800d3ae:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800d3b0:	2300      	movs	r3, #0
}
 800d3b2:	4618      	mov	r0, r3
 800d3b4:	370c      	adds	r7, #12
 800d3b6:	46bd      	mov	sp, r7
 800d3b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3bc:	4770      	bx	lr

0800d3be <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800d3be:	b480      	push	{r7}
 800d3c0:	b083      	sub	sp, #12
 800d3c2:	af00      	add	r7, sp, #0
 800d3c4:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	681b      	ldr	r3, [r3, #0]
 800d3ca:	f003 0303 	and.w	r3, r3, #3
}
 800d3ce:	4618      	mov	r0, r3
 800d3d0:	370c      	adds	r7, #12
 800d3d2:	46bd      	mov	sp, r7
 800d3d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3d8:	4770      	bx	lr

0800d3da <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800d3da:	b480      	push	{r7}
 800d3dc:	b085      	sub	sp, #20
 800d3de:	af00      	add	r7, sp, #0
 800d3e0:	6078      	str	r0, [r7, #4]
 800d3e2:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800d3e4:	2300      	movs	r3, #0
 800d3e6:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800d3e8:	683b      	ldr	r3, [r7, #0]
 800d3ea:	681a      	ldr	r2, [r3, #0]
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800d3f0:	683b      	ldr	r3, [r7, #0]
 800d3f2:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800d3f4:	683b      	ldr	r3, [r7, #0]
 800d3f6:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800d3f8:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800d3fa:	683b      	ldr	r3, [r7, #0]
 800d3fc:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800d3fe:	431a      	orrs	r2, r3
                       Command->CPSM);
 800d400:	683b      	ldr	r3, [r7, #0]
 800d402:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800d404:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800d406:	68fa      	ldr	r2, [r7, #12]
 800d408:	4313      	orrs	r3, r2
 800d40a:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	68db      	ldr	r3, [r3, #12]
 800d410:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800d414:	f023 030f 	bic.w	r3, r3, #15
 800d418:	68fa      	ldr	r2, [r7, #12]
 800d41a:	431a      	orrs	r2, r3
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800d420:	2300      	movs	r3, #0
}
 800d422:	4618      	mov	r0, r3
 800d424:	3714      	adds	r7, #20
 800d426:	46bd      	mov	sp, r7
 800d428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d42c:	4770      	bx	lr

0800d42e <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800d42e:	b480      	push	{r7}
 800d430:	b083      	sub	sp, #12
 800d432:	af00      	add	r7, sp, #0
 800d434:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	691b      	ldr	r3, [r3, #16]
 800d43a:	b2db      	uxtb	r3, r3
}
 800d43c:	4618      	mov	r0, r3
 800d43e:	370c      	adds	r7, #12
 800d440:	46bd      	mov	sp, r7
 800d442:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d446:	4770      	bx	lr

0800d448 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800d448:	b480      	push	{r7}
 800d44a:	b085      	sub	sp, #20
 800d44c:	af00      	add	r7, sp, #0
 800d44e:	6078      	str	r0, [r7, #4]
 800d450:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	3314      	adds	r3, #20
 800d456:	461a      	mov	r2, r3
 800d458:	683b      	ldr	r3, [r7, #0]
 800d45a:	4413      	add	r3, r2
 800d45c:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800d45e:	68fb      	ldr	r3, [r7, #12]
 800d460:	681b      	ldr	r3, [r3, #0]
}  
 800d462:	4618      	mov	r0, r3
 800d464:	3714      	adds	r7, #20
 800d466:	46bd      	mov	sp, r7
 800d468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d46c:	4770      	bx	lr

0800d46e <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800d46e:	b480      	push	{r7}
 800d470:	b085      	sub	sp, #20
 800d472:	af00      	add	r7, sp, #0
 800d474:	6078      	str	r0, [r7, #4]
 800d476:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800d478:	2300      	movs	r3, #0
 800d47a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800d47c:	683b      	ldr	r3, [r7, #0]
 800d47e:	681a      	ldr	r2, [r3, #0]
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800d484:	683b      	ldr	r3, [r7, #0]
 800d486:	685a      	ldr	r2, [r3, #4]
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800d48c:	683b      	ldr	r3, [r7, #0]
 800d48e:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800d490:	683b      	ldr	r3, [r7, #0]
 800d492:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800d494:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800d496:	683b      	ldr	r3, [r7, #0]
 800d498:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800d49a:	431a      	orrs	r2, r3
                       Data->DPSM);
 800d49c:	683b      	ldr	r3, [r7, #0]
 800d49e:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800d4a0:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800d4a2:	68fa      	ldr	r2, [r7, #12]
 800d4a4:	4313      	orrs	r3, r2
 800d4a6:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d4ac:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800d4b0:	68fb      	ldr	r3, [r7, #12]
 800d4b2:	431a      	orrs	r2, r3
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800d4b8:	2300      	movs	r3, #0

}
 800d4ba:	4618      	mov	r0, r3
 800d4bc:	3714      	adds	r7, #20
 800d4be:	46bd      	mov	sp, r7
 800d4c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4c4:	4770      	bx	lr

0800d4c6 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800d4c6:	b580      	push	{r7, lr}
 800d4c8:	b088      	sub	sp, #32
 800d4ca:	af00      	add	r7, sp, #0
 800d4cc:	6078      	str	r0, [r7, #4]
 800d4ce:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800d4d0:	683b      	ldr	r3, [r7, #0]
 800d4d2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800d4d4:	2310      	movs	r3, #16
 800d4d6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d4d8:	2340      	movs	r3, #64	; 0x40
 800d4da:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d4dc:	2300      	movs	r3, #0
 800d4de:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d4e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d4e4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d4e6:	f107 0308 	add.w	r3, r7, #8
 800d4ea:	4619      	mov	r1, r3
 800d4ec:	6878      	ldr	r0, [r7, #4]
 800d4ee:	f7ff ff74 	bl	800d3da <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800d4f2:	f241 3288 	movw	r2, #5000	; 0x1388
 800d4f6:	2110      	movs	r1, #16
 800d4f8:	6878      	ldr	r0, [r7, #4]
 800d4fa:	f000 fa19 	bl	800d930 <SDMMC_GetCmdResp1>
 800d4fe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d500:	69fb      	ldr	r3, [r7, #28]
}
 800d502:	4618      	mov	r0, r3
 800d504:	3720      	adds	r7, #32
 800d506:	46bd      	mov	sp, r7
 800d508:	bd80      	pop	{r7, pc}

0800d50a <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800d50a:	b580      	push	{r7, lr}
 800d50c:	b088      	sub	sp, #32
 800d50e:	af00      	add	r7, sp, #0
 800d510:	6078      	str	r0, [r7, #4]
 800d512:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800d514:	683b      	ldr	r3, [r7, #0]
 800d516:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800d518:	2311      	movs	r3, #17
 800d51a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d51c:	2340      	movs	r3, #64	; 0x40
 800d51e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d520:	2300      	movs	r3, #0
 800d522:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d524:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d528:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d52a:	f107 0308 	add.w	r3, r7, #8
 800d52e:	4619      	mov	r1, r3
 800d530:	6878      	ldr	r0, [r7, #4]
 800d532:	f7ff ff52 	bl	800d3da <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800d536:	f241 3288 	movw	r2, #5000	; 0x1388
 800d53a:	2111      	movs	r1, #17
 800d53c:	6878      	ldr	r0, [r7, #4]
 800d53e:	f000 f9f7 	bl	800d930 <SDMMC_GetCmdResp1>
 800d542:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d544:	69fb      	ldr	r3, [r7, #28]
}
 800d546:	4618      	mov	r0, r3
 800d548:	3720      	adds	r7, #32
 800d54a:	46bd      	mov	sp, r7
 800d54c:	bd80      	pop	{r7, pc}

0800d54e <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800d54e:	b580      	push	{r7, lr}
 800d550:	b088      	sub	sp, #32
 800d552:	af00      	add	r7, sp, #0
 800d554:	6078      	str	r0, [r7, #4]
 800d556:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800d558:	683b      	ldr	r3, [r7, #0]
 800d55a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800d55c:	2312      	movs	r3, #18
 800d55e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d560:	2340      	movs	r3, #64	; 0x40
 800d562:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d564:	2300      	movs	r3, #0
 800d566:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d568:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d56c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d56e:	f107 0308 	add.w	r3, r7, #8
 800d572:	4619      	mov	r1, r3
 800d574:	6878      	ldr	r0, [r7, #4]
 800d576:	f7ff ff30 	bl	800d3da <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800d57a:	f241 3288 	movw	r2, #5000	; 0x1388
 800d57e:	2112      	movs	r1, #18
 800d580:	6878      	ldr	r0, [r7, #4]
 800d582:	f000 f9d5 	bl	800d930 <SDMMC_GetCmdResp1>
 800d586:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d588:	69fb      	ldr	r3, [r7, #28]
}
 800d58a:	4618      	mov	r0, r3
 800d58c:	3720      	adds	r7, #32
 800d58e:	46bd      	mov	sp, r7
 800d590:	bd80      	pop	{r7, pc}

0800d592 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800d592:	b580      	push	{r7, lr}
 800d594:	b088      	sub	sp, #32
 800d596:	af00      	add	r7, sp, #0
 800d598:	6078      	str	r0, [r7, #4]
 800d59a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800d59c:	683b      	ldr	r3, [r7, #0]
 800d59e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800d5a0:	2318      	movs	r3, #24
 800d5a2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d5a4:	2340      	movs	r3, #64	; 0x40
 800d5a6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d5a8:	2300      	movs	r3, #0
 800d5aa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d5ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d5b0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d5b2:	f107 0308 	add.w	r3, r7, #8
 800d5b6:	4619      	mov	r1, r3
 800d5b8:	6878      	ldr	r0, [r7, #4]
 800d5ba:	f7ff ff0e 	bl	800d3da <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800d5be:	f241 3288 	movw	r2, #5000	; 0x1388
 800d5c2:	2118      	movs	r1, #24
 800d5c4:	6878      	ldr	r0, [r7, #4]
 800d5c6:	f000 f9b3 	bl	800d930 <SDMMC_GetCmdResp1>
 800d5ca:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d5cc:	69fb      	ldr	r3, [r7, #28]
}
 800d5ce:	4618      	mov	r0, r3
 800d5d0:	3720      	adds	r7, #32
 800d5d2:	46bd      	mov	sp, r7
 800d5d4:	bd80      	pop	{r7, pc}

0800d5d6 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800d5d6:	b580      	push	{r7, lr}
 800d5d8:	b088      	sub	sp, #32
 800d5da:	af00      	add	r7, sp, #0
 800d5dc:	6078      	str	r0, [r7, #4]
 800d5de:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800d5e0:	683b      	ldr	r3, [r7, #0]
 800d5e2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800d5e4:	2319      	movs	r3, #25
 800d5e6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d5e8:	2340      	movs	r3, #64	; 0x40
 800d5ea:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d5ec:	2300      	movs	r3, #0
 800d5ee:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d5f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d5f4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d5f6:	f107 0308 	add.w	r3, r7, #8
 800d5fa:	4619      	mov	r1, r3
 800d5fc:	6878      	ldr	r0, [r7, #4]
 800d5fe:	f7ff feec 	bl	800d3da <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800d602:	f241 3288 	movw	r2, #5000	; 0x1388
 800d606:	2119      	movs	r1, #25
 800d608:	6878      	ldr	r0, [r7, #4]
 800d60a:	f000 f991 	bl	800d930 <SDMMC_GetCmdResp1>
 800d60e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d610:	69fb      	ldr	r3, [r7, #28]
}
 800d612:	4618      	mov	r0, r3
 800d614:	3720      	adds	r7, #32
 800d616:	46bd      	mov	sp, r7
 800d618:	bd80      	pop	{r7, pc}
	...

0800d61c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800d61c:	b580      	push	{r7, lr}
 800d61e:	b088      	sub	sp, #32
 800d620:	af00      	add	r7, sp, #0
 800d622:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800d624:	2300      	movs	r3, #0
 800d626:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800d628:	230c      	movs	r3, #12
 800d62a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d62c:	2340      	movs	r3, #64	; 0x40
 800d62e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d630:	2300      	movs	r3, #0
 800d632:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d634:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d638:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d63a:	f107 0308 	add.w	r3, r7, #8
 800d63e:	4619      	mov	r1, r3
 800d640:	6878      	ldr	r0, [r7, #4]
 800d642:	f7ff feca 	bl	800d3da <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800d646:	4a05      	ldr	r2, [pc, #20]	; (800d65c <SDMMC_CmdStopTransfer+0x40>)
 800d648:	210c      	movs	r1, #12
 800d64a:	6878      	ldr	r0, [r7, #4]
 800d64c:	f000 f970 	bl	800d930 <SDMMC_GetCmdResp1>
 800d650:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d652:	69fb      	ldr	r3, [r7, #28]
}
 800d654:	4618      	mov	r0, r3
 800d656:	3720      	adds	r7, #32
 800d658:	46bd      	mov	sp, r7
 800d65a:	bd80      	pop	{r7, pc}
 800d65c:	05f5e100 	.word	0x05f5e100

0800d660 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800d660:	b580      	push	{r7, lr}
 800d662:	b08a      	sub	sp, #40	; 0x28
 800d664:	af00      	add	r7, sp, #0
 800d666:	60f8      	str	r0, [r7, #12]
 800d668:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800d66c:	683b      	ldr	r3, [r7, #0]
 800d66e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800d670:	2307      	movs	r3, #7
 800d672:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d674:	2340      	movs	r3, #64	; 0x40
 800d676:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d678:	2300      	movs	r3, #0
 800d67a:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d67c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d680:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d682:	f107 0310 	add.w	r3, r7, #16
 800d686:	4619      	mov	r1, r3
 800d688:	68f8      	ldr	r0, [r7, #12]
 800d68a:	f7ff fea6 	bl	800d3da <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800d68e:	f241 3288 	movw	r2, #5000	; 0x1388
 800d692:	2107      	movs	r1, #7
 800d694:	68f8      	ldr	r0, [r7, #12]
 800d696:	f000 f94b 	bl	800d930 <SDMMC_GetCmdResp1>
 800d69a:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800d69c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d69e:	4618      	mov	r0, r3
 800d6a0:	3728      	adds	r7, #40	; 0x28
 800d6a2:	46bd      	mov	sp, r7
 800d6a4:	bd80      	pop	{r7, pc}

0800d6a6 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800d6a6:	b580      	push	{r7, lr}
 800d6a8:	b088      	sub	sp, #32
 800d6aa:	af00      	add	r7, sp, #0
 800d6ac:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800d6ae:	2300      	movs	r3, #0
 800d6b0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800d6b2:	2300      	movs	r3, #0
 800d6b4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800d6b6:	2300      	movs	r3, #0
 800d6b8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d6ba:	2300      	movs	r3, #0
 800d6bc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d6be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d6c2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d6c4:	f107 0308 	add.w	r3, r7, #8
 800d6c8:	4619      	mov	r1, r3
 800d6ca:	6878      	ldr	r0, [r7, #4]
 800d6cc:	f7ff fe85 	bl	800d3da <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800d6d0:	6878      	ldr	r0, [r7, #4]
 800d6d2:	f000 fb65 	bl	800dda0 <SDMMC_GetCmdError>
 800d6d6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d6d8:	69fb      	ldr	r3, [r7, #28]
}
 800d6da:	4618      	mov	r0, r3
 800d6dc:	3720      	adds	r7, #32
 800d6de:	46bd      	mov	sp, r7
 800d6e0:	bd80      	pop	{r7, pc}

0800d6e2 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800d6e2:	b580      	push	{r7, lr}
 800d6e4:	b088      	sub	sp, #32
 800d6e6:	af00      	add	r7, sp, #0
 800d6e8:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800d6ea:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800d6ee:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800d6f0:	2308      	movs	r3, #8
 800d6f2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d6f4:	2340      	movs	r3, #64	; 0x40
 800d6f6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d6f8:	2300      	movs	r3, #0
 800d6fa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d6fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d700:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d702:	f107 0308 	add.w	r3, r7, #8
 800d706:	4619      	mov	r1, r3
 800d708:	6878      	ldr	r0, [r7, #4]
 800d70a:	f7ff fe66 	bl	800d3da <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800d70e:	6878      	ldr	r0, [r7, #4]
 800d710:	f000 faf8 	bl	800dd04 <SDMMC_GetCmdResp7>
 800d714:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d716:	69fb      	ldr	r3, [r7, #28]
}
 800d718:	4618      	mov	r0, r3
 800d71a:	3720      	adds	r7, #32
 800d71c:	46bd      	mov	sp, r7
 800d71e:	bd80      	pop	{r7, pc}

0800d720 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800d720:	b580      	push	{r7, lr}
 800d722:	b088      	sub	sp, #32
 800d724:	af00      	add	r7, sp, #0
 800d726:	6078      	str	r0, [r7, #4]
 800d728:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800d72a:	683b      	ldr	r3, [r7, #0]
 800d72c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800d72e:	2337      	movs	r3, #55	; 0x37
 800d730:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d732:	2340      	movs	r3, #64	; 0x40
 800d734:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d736:	2300      	movs	r3, #0
 800d738:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d73a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d73e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d740:	f107 0308 	add.w	r3, r7, #8
 800d744:	4619      	mov	r1, r3
 800d746:	6878      	ldr	r0, [r7, #4]
 800d748:	f7ff fe47 	bl	800d3da <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800d74c:	f241 3288 	movw	r2, #5000	; 0x1388
 800d750:	2137      	movs	r1, #55	; 0x37
 800d752:	6878      	ldr	r0, [r7, #4]
 800d754:	f000 f8ec 	bl	800d930 <SDMMC_GetCmdResp1>
 800d758:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d75a:	69fb      	ldr	r3, [r7, #28]
}
 800d75c:	4618      	mov	r0, r3
 800d75e:	3720      	adds	r7, #32
 800d760:	46bd      	mov	sp, r7
 800d762:	bd80      	pop	{r7, pc}

0800d764 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800d764:	b580      	push	{r7, lr}
 800d766:	b088      	sub	sp, #32
 800d768:	af00      	add	r7, sp, #0
 800d76a:	6078      	str	r0, [r7, #4]
 800d76c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800d76e:	683b      	ldr	r3, [r7, #0]
 800d770:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d774:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d778:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800d77a:	2329      	movs	r3, #41	; 0x29
 800d77c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d77e:	2340      	movs	r3, #64	; 0x40
 800d780:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d782:	2300      	movs	r3, #0
 800d784:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d786:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d78a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d78c:	f107 0308 	add.w	r3, r7, #8
 800d790:	4619      	mov	r1, r3
 800d792:	6878      	ldr	r0, [r7, #4]
 800d794:	f7ff fe21 	bl	800d3da <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800d798:	6878      	ldr	r0, [r7, #4]
 800d79a:	f000 f9ff 	bl	800db9c <SDMMC_GetCmdResp3>
 800d79e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d7a0:	69fb      	ldr	r3, [r7, #28]
}
 800d7a2:	4618      	mov	r0, r3
 800d7a4:	3720      	adds	r7, #32
 800d7a6:	46bd      	mov	sp, r7
 800d7a8:	bd80      	pop	{r7, pc}

0800d7aa <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 800d7aa:	b580      	push	{r7, lr}
 800d7ac:	b088      	sub	sp, #32
 800d7ae:	af00      	add	r7, sp, #0
 800d7b0:	6078      	str	r0, [r7, #4]
 800d7b2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800d7b4:	683b      	ldr	r3, [r7, #0]
 800d7b6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800d7b8:	2306      	movs	r3, #6
 800d7ba:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d7bc:	2340      	movs	r3, #64	; 0x40
 800d7be:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d7c0:	2300      	movs	r3, #0
 800d7c2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d7c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d7c8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d7ca:	f107 0308 	add.w	r3, r7, #8
 800d7ce:	4619      	mov	r1, r3
 800d7d0:	6878      	ldr	r0, [r7, #4]
 800d7d2:	f7ff fe02 	bl	800d3da <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 800d7d6:	f241 3288 	movw	r2, #5000	; 0x1388
 800d7da:	2106      	movs	r1, #6
 800d7dc:	6878      	ldr	r0, [r7, #4]
 800d7de:	f000 f8a7 	bl	800d930 <SDMMC_GetCmdResp1>
 800d7e2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d7e4:	69fb      	ldr	r3, [r7, #28]
}
 800d7e6:	4618      	mov	r0, r3
 800d7e8:	3720      	adds	r7, #32
 800d7ea:	46bd      	mov	sp, r7
 800d7ec:	bd80      	pop	{r7, pc}

0800d7ee <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 800d7ee:	b580      	push	{r7, lr}
 800d7f0:	b088      	sub	sp, #32
 800d7f2:	af00      	add	r7, sp, #0
 800d7f4:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800d7f6:	2300      	movs	r3, #0
 800d7f8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800d7fa:	2333      	movs	r3, #51	; 0x33
 800d7fc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d7fe:	2340      	movs	r3, #64	; 0x40
 800d800:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d802:	2300      	movs	r3, #0
 800d804:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d806:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d80a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d80c:	f107 0308 	add.w	r3, r7, #8
 800d810:	4619      	mov	r1, r3
 800d812:	6878      	ldr	r0, [r7, #4]
 800d814:	f7ff fde1 	bl	800d3da <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 800d818:	f241 3288 	movw	r2, #5000	; 0x1388
 800d81c:	2133      	movs	r1, #51	; 0x33
 800d81e:	6878      	ldr	r0, [r7, #4]
 800d820:	f000 f886 	bl	800d930 <SDMMC_GetCmdResp1>
 800d824:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d826:	69fb      	ldr	r3, [r7, #28]
}
 800d828:	4618      	mov	r0, r3
 800d82a:	3720      	adds	r7, #32
 800d82c:	46bd      	mov	sp, r7
 800d82e:	bd80      	pop	{r7, pc}

0800d830 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800d830:	b580      	push	{r7, lr}
 800d832:	b088      	sub	sp, #32
 800d834:	af00      	add	r7, sp, #0
 800d836:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800d838:	2300      	movs	r3, #0
 800d83a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800d83c:	2302      	movs	r3, #2
 800d83e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800d840:	23c0      	movs	r3, #192	; 0xc0
 800d842:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d844:	2300      	movs	r3, #0
 800d846:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d848:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d84c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d84e:	f107 0308 	add.w	r3, r7, #8
 800d852:	4619      	mov	r1, r3
 800d854:	6878      	ldr	r0, [r7, #4]
 800d856:	f7ff fdc0 	bl	800d3da <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800d85a:	6878      	ldr	r0, [r7, #4]
 800d85c:	f000 f956 	bl	800db0c <SDMMC_GetCmdResp2>
 800d860:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d862:	69fb      	ldr	r3, [r7, #28]
}
 800d864:	4618      	mov	r0, r3
 800d866:	3720      	adds	r7, #32
 800d868:	46bd      	mov	sp, r7
 800d86a:	bd80      	pop	{r7, pc}

0800d86c <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800d86c:	b580      	push	{r7, lr}
 800d86e:	b088      	sub	sp, #32
 800d870:	af00      	add	r7, sp, #0
 800d872:	6078      	str	r0, [r7, #4]
 800d874:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800d876:	683b      	ldr	r3, [r7, #0]
 800d878:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800d87a:	2309      	movs	r3, #9
 800d87c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800d87e:	23c0      	movs	r3, #192	; 0xc0
 800d880:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d882:	2300      	movs	r3, #0
 800d884:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d886:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d88a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d88c:	f107 0308 	add.w	r3, r7, #8
 800d890:	4619      	mov	r1, r3
 800d892:	6878      	ldr	r0, [r7, #4]
 800d894:	f7ff fda1 	bl	800d3da <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800d898:	6878      	ldr	r0, [r7, #4]
 800d89a:	f000 f937 	bl	800db0c <SDMMC_GetCmdResp2>
 800d89e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d8a0:	69fb      	ldr	r3, [r7, #28]
}
 800d8a2:	4618      	mov	r0, r3
 800d8a4:	3720      	adds	r7, #32
 800d8a6:	46bd      	mov	sp, r7
 800d8a8:	bd80      	pop	{r7, pc}

0800d8aa <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800d8aa:	b580      	push	{r7, lr}
 800d8ac:	b088      	sub	sp, #32
 800d8ae:	af00      	add	r7, sp, #0
 800d8b0:	6078      	str	r0, [r7, #4]
 800d8b2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800d8b4:	2300      	movs	r3, #0
 800d8b6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800d8b8:	2303      	movs	r3, #3
 800d8ba:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d8bc:	2340      	movs	r3, #64	; 0x40
 800d8be:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d8c0:	2300      	movs	r3, #0
 800d8c2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d8c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d8c8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d8ca:	f107 0308 	add.w	r3, r7, #8
 800d8ce:	4619      	mov	r1, r3
 800d8d0:	6878      	ldr	r0, [r7, #4]
 800d8d2:	f7ff fd82 	bl	800d3da <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800d8d6:	683a      	ldr	r2, [r7, #0]
 800d8d8:	2103      	movs	r1, #3
 800d8da:	6878      	ldr	r0, [r7, #4]
 800d8dc:	f000 f99c 	bl	800dc18 <SDMMC_GetCmdResp6>
 800d8e0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d8e2:	69fb      	ldr	r3, [r7, #28]
}
 800d8e4:	4618      	mov	r0, r3
 800d8e6:	3720      	adds	r7, #32
 800d8e8:	46bd      	mov	sp, r7
 800d8ea:	bd80      	pop	{r7, pc}

0800d8ec <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800d8ec:	b580      	push	{r7, lr}
 800d8ee:	b088      	sub	sp, #32
 800d8f0:	af00      	add	r7, sp, #0
 800d8f2:	6078      	str	r0, [r7, #4]
 800d8f4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800d8f6:	683b      	ldr	r3, [r7, #0]
 800d8f8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800d8fa:	230d      	movs	r3, #13
 800d8fc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d8fe:	2340      	movs	r3, #64	; 0x40
 800d900:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d902:	2300      	movs	r3, #0
 800d904:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d906:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d90a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d90c:	f107 0308 	add.w	r3, r7, #8
 800d910:	4619      	mov	r1, r3
 800d912:	6878      	ldr	r0, [r7, #4]
 800d914:	f7ff fd61 	bl	800d3da <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800d918:	f241 3288 	movw	r2, #5000	; 0x1388
 800d91c:	210d      	movs	r1, #13
 800d91e:	6878      	ldr	r0, [r7, #4]
 800d920:	f000 f806 	bl	800d930 <SDMMC_GetCmdResp1>
 800d924:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d926:	69fb      	ldr	r3, [r7, #28]
}
 800d928:	4618      	mov	r0, r3
 800d92a:	3720      	adds	r7, #32
 800d92c:	46bd      	mov	sp, r7
 800d92e:	bd80      	pop	{r7, pc}

0800d930 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800d930:	b580      	push	{r7, lr}
 800d932:	b088      	sub	sp, #32
 800d934:	af00      	add	r7, sp, #0
 800d936:	60f8      	str	r0, [r7, #12]
 800d938:	460b      	mov	r3, r1
 800d93a:	607a      	str	r2, [r7, #4]
 800d93c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800d93e:	4b70      	ldr	r3, [pc, #448]	; (800db00 <SDMMC_GetCmdResp1+0x1d0>)
 800d940:	681b      	ldr	r3, [r3, #0]
 800d942:	4a70      	ldr	r2, [pc, #448]	; (800db04 <SDMMC_GetCmdResp1+0x1d4>)
 800d944:	fba2 2303 	umull	r2, r3, r2, r3
 800d948:	0a5a      	lsrs	r2, r3, #9
 800d94a:	687b      	ldr	r3, [r7, #4]
 800d94c:	fb02 f303 	mul.w	r3, r2, r3
 800d950:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800d952:	69fb      	ldr	r3, [r7, #28]
 800d954:	1e5a      	subs	r2, r3, #1
 800d956:	61fa      	str	r2, [r7, #28]
 800d958:	2b00      	cmp	r3, #0
 800d95a:	d102      	bne.n	800d962 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d95c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d960:	e0c9      	b.n	800daf6 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 800d962:	68fb      	ldr	r3, [r7, #12]
 800d964:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d966:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d968:	69bb      	ldr	r3, [r7, #24]
 800d96a:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800d96e:	2b00      	cmp	r3, #0
 800d970:	d0ef      	beq.n	800d952 <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800d972:	69bb      	ldr	r3, [r7, #24]
 800d974:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d978:	2b00      	cmp	r3, #0
 800d97a:	d1ea      	bne.n	800d952 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800d97c:	68fb      	ldr	r3, [r7, #12]
 800d97e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d980:	f003 0304 	and.w	r3, r3, #4
 800d984:	2b00      	cmp	r3, #0
 800d986:	d004      	beq.n	800d992 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800d988:	68fb      	ldr	r3, [r7, #12]
 800d98a:	2204      	movs	r2, #4
 800d98c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d98e:	2304      	movs	r3, #4
 800d990:	e0b1      	b.n	800daf6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800d992:	68fb      	ldr	r3, [r7, #12]
 800d994:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d996:	f003 0301 	and.w	r3, r3, #1
 800d99a:	2b00      	cmp	r3, #0
 800d99c:	d004      	beq.n	800d9a8 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800d99e:	68fb      	ldr	r3, [r7, #12]
 800d9a0:	2201      	movs	r2, #1
 800d9a2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d9a4:	2301      	movs	r3, #1
 800d9a6:	e0a6      	b.n	800daf6 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800d9a8:	68fb      	ldr	r3, [r7, #12]
 800d9aa:	22c5      	movs	r2, #197	; 0xc5
 800d9ac:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800d9ae:	68f8      	ldr	r0, [r7, #12]
 800d9b0:	f7ff fd3d 	bl	800d42e <SDIO_GetCommandResponse>
 800d9b4:	4603      	mov	r3, r0
 800d9b6:	461a      	mov	r2, r3
 800d9b8:	7afb      	ldrb	r3, [r7, #11]
 800d9ba:	4293      	cmp	r3, r2
 800d9bc:	d001      	beq.n	800d9c2 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d9be:	2301      	movs	r3, #1
 800d9c0:	e099      	b.n	800daf6 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800d9c2:	2100      	movs	r1, #0
 800d9c4:	68f8      	ldr	r0, [r7, #12]
 800d9c6:	f7ff fd3f 	bl	800d448 <SDIO_GetResponse>
 800d9ca:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800d9cc:	697a      	ldr	r2, [r7, #20]
 800d9ce:	4b4e      	ldr	r3, [pc, #312]	; (800db08 <SDMMC_GetCmdResp1+0x1d8>)
 800d9d0:	4013      	ands	r3, r2
 800d9d2:	2b00      	cmp	r3, #0
 800d9d4:	d101      	bne.n	800d9da <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800d9d6:	2300      	movs	r3, #0
 800d9d8:	e08d      	b.n	800daf6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800d9da:	697b      	ldr	r3, [r7, #20]
 800d9dc:	2b00      	cmp	r3, #0
 800d9de:	da02      	bge.n	800d9e6 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800d9e0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800d9e4:	e087      	b.n	800daf6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800d9e6:	697b      	ldr	r3, [r7, #20]
 800d9e8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800d9ec:	2b00      	cmp	r3, #0
 800d9ee:	d001      	beq.n	800d9f4 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800d9f0:	2340      	movs	r3, #64	; 0x40
 800d9f2:	e080      	b.n	800daf6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800d9f4:	697b      	ldr	r3, [r7, #20]
 800d9f6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d9fa:	2b00      	cmp	r3, #0
 800d9fc:	d001      	beq.n	800da02 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800d9fe:	2380      	movs	r3, #128	; 0x80
 800da00:	e079      	b.n	800daf6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800da02:	697b      	ldr	r3, [r7, #20]
 800da04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800da08:	2b00      	cmp	r3, #0
 800da0a:	d002      	beq.n	800da12 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800da0c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800da10:	e071      	b.n	800daf6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800da12:	697b      	ldr	r3, [r7, #20]
 800da14:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800da18:	2b00      	cmp	r3, #0
 800da1a:	d002      	beq.n	800da22 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800da1c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800da20:	e069      	b.n	800daf6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800da22:	697b      	ldr	r3, [r7, #20]
 800da24:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800da28:	2b00      	cmp	r3, #0
 800da2a:	d002      	beq.n	800da32 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800da2c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800da30:	e061      	b.n	800daf6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800da32:	697b      	ldr	r3, [r7, #20]
 800da34:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800da38:	2b00      	cmp	r3, #0
 800da3a:	d002      	beq.n	800da42 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800da3c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800da40:	e059      	b.n	800daf6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800da42:	697b      	ldr	r3, [r7, #20]
 800da44:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800da48:	2b00      	cmp	r3, #0
 800da4a:	d002      	beq.n	800da52 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800da4c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800da50:	e051      	b.n	800daf6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800da52:	697b      	ldr	r3, [r7, #20]
 800da54:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800da58:	2b00      	cmp	r3, #0
 800da5a:	d002      	beq.n	800da62 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800da5c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800da60:	e049      	b.n	800daf6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800da62:	697b      	ldr	r3, [r7, #20]
 800da64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800da68:	2b00      	cmp	r3, #0
 800da6a:	d002      	beq.n	800da72 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800da6c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800da70:	e041      	b.n	800daf6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800da72:	697b      	ldr	r3, [r7, #20]
 800da74:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800da78:	2b00      	cmp	r3, #0
 800da7a:	d002      	beq.n	800da82 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800da7c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800da80:	e039      	b.n	800daf6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800da82:	697b      	ldr	r3, [r7, #20]
 800da84:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800da88:	2b00      	cmp	r3, #0
 800da8a:	d002      	beq.n	800da92 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800da8c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800da90:	e031      	b.n	800daf6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800da92:	697b      	ldr	r3, [r7, #20]
 800da94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800da98:	2b00      	cmp	r3, #0
 800da9a:	d002      	beq.n	800daa2 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800da9c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800daa0:	e029      	b.n	800daf6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800daa2:	697b      	ldr	r3, [r7, #20]
 800daa4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800daa8:	2b00      	cmp	r3, #0
 800daaa:	d002      	beq.n	800dab2 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800daac:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800dab0:	e021      	b.n	800daf6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800dab2:	697b      	ldr	r3, [r7, #20]
 800dab4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800dab8:	2b00      	cmp	r3, #0
 800daba:	d002      	beq.n	800dac2 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800dabc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800dac0:	e019      	b.n	800daf6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800dac2:	697b      	ldr	r3, [r7, #20]
 800dac4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800dac8:	2b00      	cmp	r3, #0
 800daca:	d002      	beq.n	800dad2 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800dacc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800dad0:	e011      	b.n	800daf6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800dad2:	697b      	ldr	r3, [r7, #20]
 800dad4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800dad8:	2b00      	cmp	r3, #0
 800dada:	d002      	beq.n	800dae2 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800dadc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800dae0:	e009      	b.n	800daf6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800dae2:	697b      	ldr	r3, [r7, #20]
 800dae4:	f003 0308 	and.w	r3, r3, #8
 800dae8:	2b00      	cmp	r3, #0
 800daea:	d002      	beq.n	800daf2 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800daec:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800daf0:	e001      	b.n	800daf6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800daf2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800daf6:	4618      	mov	r0, r3
 800daf8:	3720      	adds	r7, #32
 800dafa:	46bd      	mov	sp, r7
 800dafc:	bd80      	pop	{r7, pc}
 800dafe:	bf00      	nop
 800db00:	20000040 	.word	0x20000040
 800db04:	10624dd3 	.word	0x10624dd3
 800db08:	fdffe008 	.word	0xfdffe008

0800db0c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800db0c:	b480      	push	{r7}
 800db0e:	b085      	sub	sp, #20
 800db10:	af00      	add	r7, sp, #0
 800db12:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800db14:	4b1f      	ldr	r3, [pc, #124]	; (800db94 <SDMMC_GetCmdResp2+0x88>)
 800db16:	681b      	ldr	r3, [r3, #0]
 800db18:	4a1f      	ldr	r2, [pc, #124]	; (800db98 <SDMMC_GetCmdResp2+0x8c>)
 800db1a:	fba2 2303 	umull	r2, r3, r2, r3
 800db1e:	0a5b      	lsrs	r3, r3, #9
 800db20:	f241 3288 	movw	r2, #5000	; 0x1388
 800db24:	fb02 f303 	mul.w	r3, r2, r3
 800db28:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800db2a:	68fb      	ldr	r3, [r7, #12]
 800db2c:	1e5a      	subs	r2, r3, #1
 800db2e:	60fa      	str	r2, [r7, #12]
 800db30:	2b00      	cmp	r3, #0
 800db32:	d102      	bne.n	800db3a <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800db34:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800db38:	e026      	b.n	800db88 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800db3e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800db40:	68bb      	ldr	r3, [r7, #8]
 800db42:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800db46:	2b00      	cmp	r3, #0
 800db48:	d0ef      	beq.n	800db2a <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800db4a:	68bb      	ldr	r3, [r7, #8]
 800db4c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800db50:	2b00      	cmp	r3, #0
 800db52:	d1ea      	bne.n	800db2a <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800db58:	f003 0304 	and.w	r3, r3, #4
 800db5c:	2b00      	cmp	r3, #0
 800db5e:	d004      	beq.n	800db6a <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	2204      	movs	r2, #4
 800db64:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800db66:	2304      	movs	r3, #4
 800db68:	e00e      	b.n	800db88 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800db6e:	f003 0301 	and.w	r3, r3, #1
 800db72:	2b00      	cmp	r3, #0
 800db74:	d004      	beq.n	800db80 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	2201      	movs	r2, #1
 800db7a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800db7c:	2301      	movs	r3, #1
 800db7e:	e003      	b.n	800db88 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	22c5      	movs	r2, #197	; 0xc5
 800db84:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800db86:	2300      	movs	r3, #0
}
 800db88:	4618      	mov	r0, r3
 800db8a:	3714      	adds	r7, #20
 800db8c:	46bd      	mov	sp, r7
 800db8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db92:	4770      	bx	lr
 800db94:	20000040 	.word	0x20000040
 800db98:	10624dd3 	.word	0x10624dd3

0800db9c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800db9c:	b480      	push	{r7}
 800db9e:	b085      	sub	sp, #20
 800dba0:	af00      	add	r7, sp, #0
 800dba2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800dba4:	4b1a      	ldr	r3, [pc, #104]	; (800dc10 <SDMMC_GetCmdResp3+0x74>)
 800dba6:	681b      	ldr	r3, [r3, #0]
 800dba8:	4a1a      	ldr	r2, [pc, #104]	; (800dc14 <SDMMC_GetCmdResp3+0x78>)
 800dbaa:	fba2 2303 	umull	r2, r3, r2, r3
 800dbae:	0a5b      	lsrs	r3, r3, #9
 800dbb0:	f241 3288 	movw	r2, #5000	; 0x1388
 800dbb4:	fb02 f303 	mul.w	r3, r2, r3
 800dbb8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800dbba:	68fb      	ldr	r3, [r7, #12]
 800dbbc:	1e5a      	subs	r2, r3, #1
 800dbbe:	60fa      	str	r2, [r7, #12]
 800dbc0:	2b00      	cmp	r3, #0
 800dbc2:	d102      	bne.n	800dbca <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800dbc4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800dbc8:	e01b      	b.n	800dc02 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dbce:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800dbd0:	68bb      	ldr	r3, [r7, #8]
 800dbd2:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800dbd6:	2b00      	cmp	r3, #0
 800dbd8:	d0ef      	beq.n	800dbba <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800dbda:	68bb      	ldr	r3, [r7, #8]
 800dbdc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800dbe0:	2b00      	cmp	r3, #0
 800dbe2:	d1ea      	bne.n	800dbba <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dbe8:	f003 0304 	and.w	r3, r3, #4
 800dbec:	2b00      	cmp	r3, #0
 800dbee:	d004      	beq.n	800dbfa <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	2204      	movs	r2, #4
 800dbf4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800dbf6:	2304      	movs	r3, #4
 800dbf8:	e003      	b.n	800dc02 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800dbfa:	687b      	ldr	r3, [r7, #4]
 800dbfc:	22c5      	movs	r2, #197	; 0xc5
 800dbfe:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800dc00:	2300      	movs	r3, #0
}
 800dc02:	4618      	mov	r0, r3
 800dc04:	3714      	adds	r7, #20
 800dc06:	46bd      	mov	sp, r7
 800dc08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc0c:	4770      	bx	lr
 800dc0e:	bf00      	nop
 800dc10:	20000040 	.word	0x20000040
 800dc14:	10624dd3 	.word	0x10624dd3

0800dc18 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800dc18:	b580      	push	{r7, lr}
 800dc1a:	b088      	sub	sp, #32
 800dc1c:	af00      	add	r7, sp, #0
 800dc1e:	60f8      	str	r0, [r7, #12]
 800dc20:	460b      	mov	r3, r1
 800dc22:	607a      	str	r2, [r7, #4]
 800dc24:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800dc26:	4b35      	ldr	r3, [pc, #212]	; (800dcfc <SDMMC_GetCmdResp6+0xe4>)
 800dc28:	681b      	ldr	r3, [r3, #0]
 800dc2a:	4a35      	ldr	r2, [pc, #212]	; (800dd00 <SDMMC_GetCmdResp6+0xe8>)
 800dc2c:	fba2 2303 	umull	r2, r3, r2, r3
 800dc30:	0a5b      	lsrs	r3, r3, #9
 800dc32:	f241 3288 	movw	r2, #5000	; 0x1388
 800dc36:	fb02 f303 	mul.w	r3, r2, r3
 800dc3a:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800dc3c:	69fb      	ldr	r3, [r7, #28]
 800dc3e:	1e5a      	subs	r2, r3, #1
 800dc40:	61fa      	str	r2, [r7, #28]
 800dc42:	2b00      	cmp	r3, #0
 800dc44:	d102      	bne.n	800dc4c <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800dc46:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800dc4a:	e052      	b.n	800dcf2 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 800dc4c:	68fb      	ldr	r3, [r7, #12]
 800dc4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dc50:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800dc52:	69bb      	ldr	r3, [r7, #24]
 800dc54:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800dc58:	2b00      	cmp	r3, #0
 800dc5a:	d0ef      	beq.n	800dc3c <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800dc5c:	69bb      	ldr	r3, [r7, #24]
 800dc5e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800dc62:	2b00      	cmp	r3, #0
 800dc64:	d1ea      	bne.n	800dc3c <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800dc66:	68fb      	ldr	r3, [r7, #12]
 800dc68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dc6a:	f003 0304 	and.w	r3, r3, #4
 800dc6e:	2b00      	cmp	r3, #0
 800dc70:	d004      	beq.n	800dc7c <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800dc72:	68fb      	ldr	r3, [r7, #12]
 800dc74:	2204      	movs	r2, #4
 800dc76:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800dc78:	2304      	movs	r3, #4
 800dc7a:	e03a      	b.n	800dcf2 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800dc7c:	68fb      	ldr	r3, [r7, #12]
 800dc7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dc80:	f003 0301 	and.w	r3, r3, #1
 800dc84:	2b00      	cmp	r3, #0
 800dc86:	d004      	beq.n	800dc92 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800dc88:	68fb      	ldr	r3, [r7, #12]
 800dc8a:	2201      	movs	r2, #1
 800dc8c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800dc8e:	2301      	movs	r3, #1
 800dc90:	e02f      	b.n	800dcf2 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800dc92:	68f8      	ldr	r0, [r7, #12]
 800dc94:	f7ff fbcb 	bl	800d42e <SDIO_GetCommandResponse>
 800dc98:	4603      	mov	r3, r0
 800dc9a:	461a      	mov	r2, r3
 800dc9c:	7afb      	ldrb	r3, [r7, #11]
 800dc9e:	4293      	cmp	r3, r2
 800dca0:	d001      	beq.n	800dca6 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800dca2:	2301      	movs	r3, #1
 800dca4:	e025      	b.n	800dcf2 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800dca6:	68fb      	ldr	r3, [r7, #12]
 800dca8:	22c5      	movs	r2, #197	; 0xc5
 800dcaa:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800dcac:	2100      	movs	r1, #0
 800dcae:	68f8      	ldr	r0, [r7, #12]
 800dcb0:	f7ff fbca 	bl	800d448 <SDIO_GetResponse>
 800dcb4:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800dcb6:	697b      	ldr	r3, [r7, #20]
 800dcb8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800dcbc:	2b00      	cmp	r3, #0
 800dcbe:	d106      	bne.n	800dcce <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800dcc0:	697b      	ldr	r3, [r7, #20]
 800dcc2:	0c1b      	lsrs	r3, r3, #16
 800dcc4:	b29a      	uxth	r2, r3
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800dcca:	2300      	movs	r3, #0
 800dccc:	e011      	b.n	800dcf2 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800dcce:	697b      	ldr	r3, [r7, #20]
 800dcd0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800dcd4:	2b00      	cmp	r3, #0
 800dcd6:	d002      	beq.n	800dcde <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800dcd8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800dcdc:	e009      	b.n	800dcf2 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800dcde:	697b      	ldr	r3, [r7, #20]
 800dce0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800dce4:	2b00      	cmp	r3, #0
 800dce6:	d002      	beq.n	800dcee <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800dce8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800dcec:	e001      	b.n	800dcf2 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800dcee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800dcf2:	4618      	mov	r0, r3
 800dcf4:	3720      	adds	r7, #32
 800dcf6:	46bd      	mov	sp, r7
 800dcf8:	bd80      	pop	{r7, pc}
 800dcfa:	bf00      	nop
 800dcfc:	20000040 	.word	0x20000040
 800dd00:	10624dd3 	.word	0x10624dd3

0800dd04 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800dd04:	b480      	push	{r7}
 800dd06:	b085      	sub	sp, #20
 800dd08:	af00      	add	r7, sp, #0
 800dd0a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800dd0c:	4b22      	ldr	r3, [pc, #136]	; (800dd98 <SDMMC_GetCmdResp7+0x94>)
 800dd0e:	681b      	ldr	r3, [r3, #0]
 800dd10:	4a22      	ldr	r2, [pc, #136]	; (800dd9c <SDMMC_GetCmdResp7+0x98>)
 800dd12:	fba2 2303 	umull	r2, r3, r2, r3
 800dd16:	0a5b      	lsrs	r3, r3, #9
 800dd18:	f241 3288 	movw	r2, #5000	; 0x1388
 800dd1c:	fb02 f303 	mul.w	r3, r2, r3
 800dd20:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800dd22:	68fb      	ldr	r3, [r7, #12]
 800dd24:	1e5a      	subs	r2, r3, #1
 800dd26:	60fa      	str	r2, [r7, #12]
 800dd28:	2b00      	cmp	r3, #0
 800dd2a:	d102      	bne.n	800dd32 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800dd2c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800dd30:	e02c      	b.n	800dd8c <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dd36:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800dd38:	68bb      	ldr	r3, [r7, #8]
 800dd3a:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800dd3e:	2b00      	cmp	r3, #0
 800dd40:	d0ef      	beq.n	800dd22 <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800dd42:	68bb      	ldr	r3, [r7, #8]
 800dd44:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800dd48:	2b00      	cmp	r3, #0
 800dd4a:	d1ea      	bne.n	800dd22 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dd50:	f003 0304 	and.w	r3, r3, #4
 800dd54:	2b00      	cmp	r3, #0
 800dd56:	d004      	beq.n	800dd62 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	2204      	movs	r2, #4
 800dd5c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800dd5e:	2304      	movs	r3, #4
 800dd60:	e014      	b.n	800dd8c <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dd66:	f003 0301 	and.w	r3, r3, #1
 800dd6a:	2b00      	cmp	r3, #0
 800dd6c:	d004      	beq.n	800dd78 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	2201      	movs	r2, #1
 800dd72:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800dd74:	2301      	movs	r3, #1
 800dd76:	e009      	b.n	800dd8c <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dd7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dd80:	2b00      	cmp	r3, #0
 800dd82:	d002      	beq.n	800dd8a <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	2240      	movs	r2, #64	; 0x40
 800dd88:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800dd8a:	2300      	movs	r3, #0
  
}
 800dd8c:	4618      	mov	r0, r3
 800dd8e:	3714      	adds	r7, #20
 800dd90:	46bd      	mov	sp, r7
 800dd92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd96:	4770      	bx	lr
 800dd98:	20000040 	.word	0x20000040
 800dd9c:	10624dd3 	.word	0x10624dd3

0800dda0 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800dda0:	b480      	push	{r7}
 800dda2:	b085      	sub	sp, #20
 800dda4:	af00      	add	r7, sp, #0
 800dda6:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800dda8:	4b11      	ldr	r3, [pc, #68]	; (800ddf0 <SDMMC_GetCmdError+0x50>)
 800ddaa:	681b      	ldr	r3, [r3, #0]
 800ddac:	4a11      	ldr	r2, [pc, #68]	; (800ddf4 <SDMMC_GetCmdError+0x54>)
 800ddae:	fba2 2303 	umull	r2, r3, r2, r3
 800ddb2:	0a5b      	lsrs	r3, r3, #9
 800ddb4:	f241 3288 	movw	r2, #5000	; 0x1388
 800ddb8:	fb02 f303 	mul.w	r3, r2, r3
 800ddbc:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800ddbe:	68fb      	ldr	r3, [r7, #12]
 800ddc0:	1e5a      	subs	r2, r3, #1
 800ddc2:	60fa      	str	r2, [r7, #12]
 800ddc4:	2b00      	cmp	r3, #0
 800ddc6:	d102      	bne.n	800ddce <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ddc8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ddcc:	e009      	b.n	800dde2 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800ddce:	687b      	ldr	r3, [r7, #4]
 800ddd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ddd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ddd6:	2b00      	cmp	r3, #0
 800ddd8:	d0f1      	beq.n	800ddbe <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	22c5      	movs	r2, #197	; 0xc5
 800ddde:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800dde0:	2300      	movs	r3, #0
}
 800dde2:	4618      	mov	r0, r3
 800dde4:	3714      	adds	r7, #20
 800dde6:	46bd      	mov	sp, r7
 800dde8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddec:	4770      	bx	lr
 800ddee:	bf00      	nop
 800ddf0:	20000040 	.word	0x20000040
 800ddf4:	10624dd3 	.word	0x10624dd3

0800ddf8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800ddf8:	b084      	sub	sp, #16
 800ddfa:	b580      	push	{r7, lr}
 800ddfc:	b084      	sub	sp, #16
 800ddfe:	af00      	add	r7, sp, #0
 800de00:	6078      	str	r0, [r7, #4]
 800de02:	f107 001c 	add.w	r0, r7, #28
 800de06:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800de0a:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800de0e:	2b01      	cmp	r3, #1
 800de10:	d123      	bne.n	800de5a <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800de16:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	68db      	ldr	r3, [r3, #12]
 800de22:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800de26:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800de2a:	687a      	ldr	r2, [r7, #4]
 800de2c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	68db      	ldr	r3, [r3, #12]
 800de32:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800de3a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800de3e:	2b01      	cmp	r3, #1
 800de40:	d105      	bne.n	800de4e <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	68db      	ldr	r3, [r3, #12]
 800de46:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800de4e:	6878      	ldr	r0, [r7, #4]
 800de50:	f001 fae2 	bl	800f418 <USB_CoreReset>
 800de54:	4603      	mov	r3, r0
 800de56:	73fb      	strb	r3, [r7, #15]
 800de58:	e01b      	b.n	800de92 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	68db      	ldr	r3, [r3, #12]
 800de5e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800de66:	6878      	ldr	r0, [r7, #4]
 800de68:	f001 fad6 	bl	800f418 <USB_CoreReset>
 800de6c:	4603      	mov	r3, r0
 800de6e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800de70:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800de74:	2b00      	cmp	r3, #0
 800de76:	d106      	bne.n	800de86 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800de7c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800de80:	687b      	ldr	r3, [r7, #4]
 800de82:	639a      	str	r2, [r3, #56]	; 0x38
 800de84:	e005      	b.n	800de92 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800de8a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800de8e:	687b      	ldr	r3, [r7, #4]
 800de90:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800de92:	7fbb      	ldrb	r3, [r7, #30]
 800de94:	2b01      	cmp	r3, #1
 800de96:	d10b      	bne.n	800deb0 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	689b      	ldr	r3, [r3, #8]
 800de9c:	f043 0206 	orr.w	r2, r3, #6
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	689b      	ldr	r3, [r3, #8]
 800dea8:	f043 0220 	orr.w	r2, r3, #32
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800deb0:	7bfb      	ldrb	r3, [r7, #15]
}
 800deb2:	4618      	mov	r0, r3
 800deb4:	3710      	adds	r7, #16
 800deb6:	46bd      	mov	sp, r7
 800deb8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800debc:	b004      	add	sp, #16
 800debe:	4770      	bx	lr

0800dec0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800dec0:	b480      	push	{r7}
 800dec2:	b087      	sub	sp, #28
 800dec4:	af00      	add	r7, sp, #0
 800dec6:	60f8      	str	r0, [r7, #12]
 800dec8:	60b9      	str	r1, [r7, #8]
 800deca:	4613      	mov	r3, r2
 800decc:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800dece:	79fb      	ldrb	r3, [r7, #7]
 800ded0:	2b02      	cmp	r3, #2
 800ded2:	d165      	bne.n	800dfa0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800ded4:	68bb      	ldr	r3, [r7, #8]
 800ded6:	4a41      	ldr	r2, [pc, #260]	; (800dfdc <USB_SetTurnaroundTime+0x11c>)
 800ded8:	4293      	cmp	r3, r2
 800deda:	d906      	bls.n	800deea <USB_SetTurnaroundTime+0x2a>
 800dedc:	68bb      	ldr	r3, [r7, #8]
 800dede:	4a40      	ldr	r2, [pc, #256]	; (800dfe0 <USB_SetTurnaroundTime+0x120>)
 800dee0:	4293      	cmp	r3, r2
 800dee2:	d202      	bcs.n	800deea <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800dee4:	230f      	movs	r3, #15
 800dee6:	617b      	str	r3, [r7, #20]
 800dee8:	e062      	b.n	800dfb0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800deea:	68bb      	ldr	r3, [r7, #8]
 800deec:	4a3c      	ldr	r2, [pc, #240]	; (800dfe0 <USB_SetTurnaroundTime+0x120>)
 800deee:	4293      	cmp	r3, r2
 800def0:	d306      	bcc.n	800df00 <USB_SetTurnaroundTime+0x40>
 800def2:	68bb      	ldr	r3, [r7, #8]
 800def4:	4a3b      	ldr	r2, [pc, #236]	; (800dfe4 <USB_SetTurnaroundTime+0x124>)
 800def6:	4293      	cmp	r3, r2
 800def8:	d202      	bcs.n	800df00 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800defa:	230e      	movs	r3, #14
 800defc:	617b      	str	r3, [r7, #20]
 800defe:	e057      	b.n	800dfb0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800df00:	68bb      	ldr	r3, [r7, #8]
 800df02:	4a38      	ldr	r2, [pc, #224]	; (800dfe4 <USB_SetTurnaroundTime+0x124>)
 800df04:	4293      	cmp	r3, r2
 800df06:	d306      	bcc.n	800df16 <USB_SetTurnaroundTime+0x56>
 800df08:	68bb      	ldr	r3, [r7, #8]
 800df0a:	4a37      	ldr	r2, [pc, #220]	; (800dfe8 <USB_SetTurnaroundTime+0x128>)
 800df0c:	4293      	cmp	r3, r2
 800df0e:	d202      	bcs.n	800df16 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800df10:	230d      	movs	r3, #13
 800df12:	617b      	str	r3, [r7, #20]
 800df14:	e04c      	b.n	800dfb0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800df16:	68bb      	ldr	r3, [r7, #8]
 800df18:	4a33      	ldr	r2, [pc, #204]	; (800dfe8 <USB_SetTurnaroundTime+0x128>)
 800df1a:	4293      	cmp	r3, r2
 800df1c:	d306      	bcc.n	800df2c <USB_SetTurnaroundTime+0x6c>
 800df1e:	68bb      	ldr	r3, [r7, #8]
 800df20:	4a32      	ldr	r2, [pc, #200]	; (800dfec <USB_SetTurnaroundTime+0x12c>)
 800df22:	4293      	cmp	r3, r2
 800df24:	d802      	bhi.n	800df2c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800df26:	230c      	movs	r3, #12
 800df28:	617b      	str	r3, [r7, #20]
 800df2a:	e041      	b.n	800dfb0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800df2c:	68bb      	ldr	r3, [r7, #8]
 800df2e:	4a2f      	ldr	r2, [pc, #188]	; (800dfec <USB_SetTurnaroundTime+0x12c>)
 800df30:	4293      	cmp	r3, r2
 800df32:	d906      	bls.n	800df42 <USB_SetTurnaroundTime+0x82>
 800df34:	68bb      	ldr	r3, [r7, #8]
 800df36:	4a2e      	ldr	r2, [pc, #184]	; (800dff0 <USB_SetTurnaroundTime+0x130>)
 800df38:	4293      	cmp	r3, r2
 800df3a:	d802      	bhi.n	800df42 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800df3c:	230b      	movs	r3, #11
 800df3e:	617b      	str	r3, [r7, #20]
 800df40:	e036      	b.n	800dfb0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800df42:	68bb      	ldr	r3, [r7, #8]
 800df44:	4a2a      	ldr	r2, [pc, #168]	; (800dff0 <USB_SetTurnaroundTime+0x130>)
 800df46:	4293      	cmp	r3, r2
 800df48:	d906      	bls.n	800df58 <USB_SetTurnaroundTime+0x98>
 800df4a:	68bb      	ldr	r3, [r7, #8]
 800df4c:	4a29      	ldr	r2, [pc, #164]	; (800dff4 <USB_SetTurnaroundTime+0x134>)
 800df4e:	4293      	cmp	r3, r2
 800df50:	d802      	bhi.n	800df58 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800df52:	230a      	movs	r3, #10
 800df54:	617b      	str	r3, [r7, #20]
 800df56:	e02b      	b.n	800dfb0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800df58:	68bb      	ldr	r3, [r7, #8]
 800df5a:	4a26      	ldr	r2, [pc, #152]	; (800dff4 <USB_SetTurnaroundTime+0x134>)
 800df5c:	4293      	cmp	r3, r2
 800df5e:	d906      	bls.n	800df6e <USB_SetTurnaroundTime+0xae>
 800df60:	68bb      	ldr	r3, [r7, #8]
 800df62:	4a25      	ldr	r2, [pc, #148]	; (800dff8 <USB_SetTurnaroundTime+0x138>)
 800df64:	4293      	cmp	r3, r2
 800df66:	d202      	bcs.n	800df6e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800df68:	2309      	movs	r3, #9
 800df6a:	617b      	str	r3, [r7, #20]
 800df6c:	e020      	b.n	800dfb0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800df6e:	68bb      	ldr	r3, [r7, #8]
 800df70:	4a21      	ldr	r2, [pc, #132]	; (800dff8 <USB_SetTurnaroundTime+0x138>)
 800df72:	4293      	cmp	r3, r2
 800df74:	d306      	bcc.n	800df84 <USB_SetTurnaroundTime+0xc4>
 800df76:	68bb      	ldr	r3, [r7, #8]
 800df78:	4a20      	ldr	r2, [pc, #128]	; (800dffc <USB_SetTurnaroundTime+0x13c>)
 800df7a:	4293      	cmp	r3, r2
 800df7c:	d802      	bhi.n	800df84 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800df7e:	2308      	movs	r3, #8
 800df80:	617b      	str	r3, [r7, #20]
 800df82:	e015      	b.n	800dfb0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800df84:	68bb      	ldr	r3, [r7, #8]
 800df86:	4a1d      	ldr	r2, [pc, #116]	; (800dffc <USB_SetTurnaroundTime+0x13c>)
 800df88:	4293      	cmp	r3, r2
 800df8a:	d906      	bls.n	800df9a <USB_SetTurnaroundTime+0xda>
 800df8c:	68bb      	ldr	r3, [r7, #8]
 800df8e:	4a1c      	ldr	r2, [pc, #112]	; (800e000 <USB_SetTurnaroundTime+0x140>)
 800df90:	4293      	cmp	r3, r2
 800df92:	d202      	bcs.n	800df9a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800df94:	2307      	movs	r3, #7
 800df96:	617b      	str	r3, [r7, #20]
 800df98:	e00a      	b.n	800dfb0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800df9a:	2306      	movs	r3, #6
 800df9c:	617b      	str	r3, [r7, #20]
 800df9e:	e007      	b.n	800dfb0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800dfa0:	79fb      	ldrb	r3, [r7, #7]
 800dfa2:	2b00      	cmp	r3, #0
 800dfa4:	d102      	bne.n	800dfac <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800dfa6:	2309      	movs	r3, #9
 800dfa8:	617b      	str	r3, [r7, #20]
 800dfaa:	e001      	b.n	800dfb0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800dfac:	2309      	movs	r3, #9
 800dfae:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800dfb0:	68fb      	ldr	r3, [r7, #12]
 800dfb2:	68db      	ldr	r3, [r3, #12]
 800dfb4:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800dfb8:	68fb      	ldr	r3, [r7, #12]
 800dfba:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800dfbc:	68fb      	ldr	r3, [r7, #12]
 800dfbe:	68da      	ldr	r2, [r3, #12]
 800dfc0:	697b      	ldr	r3, [r7, #20]
 800dfc2:	029b      	lsls	r3, r3, #10
 800dfc4:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800dfc8:	431a      	orrs	r2, r3
 800dfca:	68fb      	ldr	r3, [r7, #12]
 800dfcc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800dfce:	2300      	movs	r3, #0
}
 800dfd0:	4618      	mov	r0, r3
 800dfd2:	371c      	adds	r7, #28
 800dfd4:	46bd      	mov	sp, r7
 800dfd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfda:	4770      	bx	lr
 800dfdc:	00d8acbf 	.word	0x00d8acbf
 800dfe0:	00e4e1c0 	.word	0x00e4e1c0
 800dfe4:	00f42400 	.word	0x00f42400
 800dfe8:	01067380 	.word	0x01067380
 800dfec:	011a499f 	.word	0x011a499f
 800dff0:	01312cff 	.word	0x01312cff
 800dff4:	014ca43f 	.word	0x014ca43f
 800dff8:	016e3600 	.word	0x016e3600
 800dffc:	01a6ab1f 	.word	0x01a6ab1f
 800e000:	01e84800 	.word	0x01e84800

0800e004 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800e004:	b480      	push	{r7}
 800e006:	b083      	sub	sp, #12
 800e008:	af00      	add	r7, sp, #0
 800e00a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	689b      	ldr	r3, [r3, #8]
 800e010:	f043 0201 	orr.w	r2, r3, #1
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800e018:	2300      	movs	r3, #0
}
 800e01a:	4618      	mov	r0, r3
 800e01c:	370c      	adds	r7, #12
 800e01e:	46bd      	mov	sp, r7
 800e020:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e024:	4770      	bx	lr

0800e026 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800e026:	b480      	push	{r7}
 800e028:	b083      	sub	sp, #12
 800e02a:	af00      	add	r7, sp, #0
 800e02c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800e02e:	687b      	ldr	r3, [r7, #4]
 800e030:	689b      	ldr	r3, [r3, #8]
 800e032:	f023 0201 	bic.w	r2, r3, #1
 800e036:	687b      	ldr	r3, [r7, #4]
 800e038:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800e03a:	2300      	movs	r3, #0
}
 800e03c:	4618      	mov	r0, r3
 800e03e:	370c      	adds	r7, #12
 800e040:	46bd      	mov	sp, r7
 800e042:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e046:	4770      	bx	lr

0800e048 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800e048:	b580      	push	{r7, lr}
 800e04a:	b084      	sub	sp, #16
 800e04c:	af00      	add	r7, sp, #0
 800e04e:	6078      	str	r0, [r7, #4]
 800e050:	460b      	mov	r3, r1
 800e052:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800e054:	2300      	movs	r3, #0
 800e056:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	68db      	ldr	r3, [r3, #12]
 800e05c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800e060:	687b      	ldr	r3, [r7, #4]
 800e062:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800e064:	78fb      	ldrb	r3, [r7, #3]
 800e066:	2b01      	cmp	r3, #1
 800e068:	d115      	bne.n	800e096 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	68db      	ldr	r3, [r3, #12]
 800e06e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800e072:	687b      	ldr	r3, [r7, #4]
 800e074:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800e076:	200a      	movs	r0, #10
 800e078:	f7f7 fce0 	bl	8005a3c <HAL_Delay>
      ms += 10U;
 800e07c:	68fb      	ldr	r3, [r7, #12]
 800e07e:	330a      	adds	r3, #10
 800e080:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800e082:	6878      	ldr	r0, [r7, #4]
 800e084:	f001 f939 	bl	800f2fa <USB_GetMode>
 800e088:	4603      	mov	r3, r0
 800e08a:	2b01      	cmp	r3, #1
 800e08c:	d01e      	beq.n	800e0cc <USB_SetCurrentMode+0x84>
 800e08e:	68fb      	ldr	r3, [r7, #12]
 800e090:	2bc7      	cmp	r3, #199	; 0xc7
 800e092:	d9f0      	bls.n	800e076 <USB_SetCurrentMode+0x2e>
 800e094:	e01a      	b.n	800e0cc <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800e096:	78fb      	ldrb	r3, [r7, #3]
 800e098:	2b00      	cmp	r3, #0
 800e09a:	d115      	bne.n	800e0c8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	68db      	ldr	r3, [r3, #12]
 800e0a0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800e0a8:	200a      	movs	r0, #10
 800e0aa:	f7f7 fcc7 	bl	8005a3c <HAL_Delay>
      ms += 10U;
 800e0ae:	68fb      	ldr	r3, [r7, #12]
 800e0b0:	330a      	adds	r3, #10
 800e0b2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800e0b4:	6878      	ldr	r0, [r7, #4]
 800e0b6:	f001 f920 	bl	800f2fa <USB_GetMode>
 800e0ba:	4603      	mov	r3, r0
 800e0bc:	2b00      	cmp	r3, #0
 800e0be:	d005      	beq.n	800e0cc <USB_SetCurrentMode+0x84>
 800e0c0:	68fb      	ldr	r3, [r7, #12]
 800e0c2:	2bc7      	cmp	r3, #199	; 0xc7
 800e0c4:	d9f0      	bls.n	800e0a8 <USB_SetCurrentMode+0x60>
 800e0c6:	e001      	b.n	800e0cc <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800e0c8:	2301      	movs	r3, #1
 800e0ca:	e005      	b.n	800e0d8 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800e0cc:	68fb      	ldr	r3, [r7, #12]
 800e0ce:	2bc8      	cmp	r3, #200	; 0xc8
 800e0d0:	d101      	bne.n	800e0d6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800e0d2:	2301      	movs	r3, #1
 800e0d4:	e000      	b.n	800e0d8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800e0d6:	2300      	movs	r3, #0
}
 800e0d8:	4618      	mov	r0, r3
 800e0da:	3710      	adds	r7, #16
 800e0dc:	46bd      	mov	sp, r7
 800e0de:	bd80      	pop	{r7, pc}

0800e0e0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800e0e0:	b084      	sub	sp, #16
 800e0e2:	b580      	push	{r7, lr}
 800e0e4:	b086      	sub	sp, #24
 800e0e6:	af00      	add	r7, sp, #0
 800e0e8:	6078      	str	r0, [r7, #4]
 800e0ea:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800e0ee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800e0f2:	2300      	movs	r3, #0
 800e0f4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e0f6:	687b      	ldr	r3, [r7, #4]
 800e0f8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800e0fa:	2300      	movs	r3, #0
 800e0fc:	613b      	str	r3, [r7, #16]
 800e0fe:	e009      	b.n	800e114 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800e100:	687a      	ldr	r2, [r7, #4]
 800e102:	693b      	ldr	r3, [r7, #16]
 800e104:	3340      	adds	r3, #64	; 0x40
 800e106:	009b      	lsls	r3, r3, #2
 800e108:	4413      	add	r3, r2
 800e10a:	2200      	movs	r2, #0
 800e10c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800e10e:	693b      	ldr	r3, [r7, #16]
 800e110:	3301      	adds	r3, #1
 800e112:	613b      	str	r3, [r7, #16]
 800e114:	693b      	ldr	r3, [r7, #16]
 800e116:	2b0e      	cmp	r3, #14
 800e118:	d9f2      	bls.n	800e100 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800e11a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800e11e:	2b00      	cmp	r3, #0
 800e120:	d11c      	bne.n	800e15c <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800e122:	68fb      	ldr	r3, [r7, #12]
 800e124:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e128:	685b      	ldr	r3, [r3, #4]
 800e12a:	68fa      	ldr	r2, [r7, #12]
 800e12c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e130:	f043 0302 	orr.w	r3, r3, #2
 800e134:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e13a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800e13e:	687b      	ldr	r3, [r7, #4]
 800e140:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800e142:	687b      	ldr	r3, [r7, #4]
 800e144:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e146:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800e14a:	687b      	ldr	r3, [r7, #4]
 800e14c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800e14e:	687b      	ldr	r3, [r7, #4]
 800e150:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e152:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	639a      	str	r2, [r3, #56]	; 0x38
 800e15a:	e00b      	b.n	800e174 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e160:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800e164:	687b      	ldr	r3, [r7, #4]
 800e166:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e16c:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800e174:	68fb      	ldr	r3, [r7, #12]
 800e176:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e17a:	461a      	mov	r2, r3
 800e17c:	2300      	movs	r3, #0
 800e17e:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800e180:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800e184:	2b01      	cmp	r3, #1
 800e186:	d10d      	bne.n	800e1a4 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800e188:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e18c:	2b00      	cmp	r3, #0
 800e18e:	d104      	bne.n	800e19a <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800e190:	2100      	movs	r1, #0
 800e192:	6878      	ldr	r0, [r7, #4]
 800e194:	f000 f968 	bl	800e468 <USB_SetDevSpeed>
 800e198:	e008      	b.n	800e1ac <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800e19a:	2101      	movs	r1, #1
 800e19c:	6878      	ldr	r0, [r7, #4]
 800e19e:	f000 f963 	bl	800e468 <USB_SetDevSpeed>
 800e1a2:	e003      	b.n	800e1ac <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800e1a4:	2103      	movs	r1, #3
 800e1a6:	6878      	ldr	r0, [r7, #4]
 800e1a8:	f000 f95e 	bl	800e468 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800e1ac:	2110      	movs	r1, #16
 800e1ae:	6878      	ldr	r0, [r7, #4]
 800e1b0:	f000 f8fa 	bl	800e3a8 <USB_FlushTxFifo>
 800e1b4:	4603      	mov	r3, r0
 800e1b6:	2b00      	cmp	r3, #0
 800e1b8:	d001      	beq.n	800e1be <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 800e1ba:	2301      	movs	r3, #1
 800e1bc:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800e1be:	6878      	ldr	r0, [r7, #4]
 800e1c0:	f000 f924 	bl	800e40c <USB_FlushRxFifo>
 800e1c4:	4603      	mov	r3, r0
 800e1c6:	2b00      	cmp	r3, #0
 800e1c8:	d001      	beq.n	800e1ce <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 800e1ca:	2301      	movs	r3, #1
 800e1cc:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800e1ce:	68fb      	ldr	r3, [r7, #12]
 800e1d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e1d4:	461a      	mov	r2, r3
 800e1d6:	2300      	movs	r3, #0
 800e1d8:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800e1da:	68fb      	ldr	r3, [r7, #12]
 800e1dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e1e0:	461a      	mov	r2, r3
 800e1e2:	2300      	movs	r3, #0
 800e1e4:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800e1e6:	68fb      	ldr	r3, [r7, #12]
 800e1e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e1ec:	461a      	mov	r2, r3
 800e1ee:	2300      	movs	r3, #0
 800e1f0:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e1f2:	2300      	movs	r3, #0
 800e1f4:	613b      	str	r3, [r7, #16]
 800e1f6:	e043      	b.n	800e280 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800e1f8:	693b      	ldr	r3, [r7, #16]
 800e1fa:	015a      	lsls	r2, r3, #5
 800e1fc:	68fb      	ldr	r3, [r7, #12]
 800e1fe:	4413      	add	r3, r2
 800e200:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e204:	681b      	ldr	r3, [r3, #0]
 800e206:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e20a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e20e:	d118      	bne.n	800e242 <USB_DevInit+0x162>
    {
      if (i == 0U)
 800e210:	693b      	ldr	r3, [r7, #16]
 800e212:	2b00      	cmp	r3, #0
 800e214:	d10a      	bne.n	800e22c <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800e216:	693b      	ldr	r3, [r7, #16]
 800e218:	015a      	lsls	r2, r3, #5
 800e21a:	68fb      	ldr	r3, [r7, #12]
 800e21c:	4413      	add	r3, r2
 800e21e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e222:	461a      	mov	r2, r3
 800e224:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800e228:	6013      	str	r3, [r2, #0]
 800e22a:	e013      	b.n	800e254 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800e22c:	693b      	ldr	r3, [r7, #16]
 800e22e:	015a      	lsls	r2, r3, #5
 800e230:	68fb      	ldr	r3, [r7, #12]
 800e232:	4413      	add	r3, r2
 800e234:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e238:	461a      	mov	r2, r3
 800e23a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800e23e:	6013      	str	r3, [r2, #0]
 800e240:	e008      	b.n	800e254 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800e242:	693b      	ldr	r3, [r7, #16]
 800e244:	015a      	lsls	r2, r3, #5
 800e246:	68fb      	ldr	r3, [r7, #12]
 800e248:	4413      	add	r3, r2
 800e24a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e24e:	461a      	mov	r2, r3
 800e250:	2300      	movs	r3, #0
 800e252:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800e254:	693b      	ldr	r3, [r7, #16]
 800e256:	015a      	lsls	r2, r3, #5
 800e258:	68fb      	ldr	r3, [r7, #12]
 800e25a:	4413      	add	r3, r2
 800e25c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e260:	461a      	mov	r2, r3
 800e262:	2300      	movs	r3, #0
 800e264:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800e266:	693b      	ldr	r3, [r7, #16]
 800e268:	015a      	lsls	r2, r3, #5
 800e26a:	68fb      	ldr	r3, [r7, #12]
 800e26c:	4413      	add	r3, r2
 800e26e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e272:	461a      	mov	r2, r3
 800e274:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800e278:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e27a:	693b      	ldr	r3, [r7, #16]
 800e27c:	3301      	adds	r3, #1
 800e27e:	613b      	str	r3, [r7, #16]
 800e280:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800e284:	461a      	mov	r2, r3
 800e286:	693b      	ldr	r3, [r7, #16]
 800e288:	4293      	cmp	r3, r2
 800e28a:	d3b5      	bcc.n	800e1f8 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e28c:	2300      	movs	r3, #0
 800e28e:	613b      	str	r3, [r7, #16]
 800e290:	e043      	b.n	800e31a <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800e292:	693b      	ldr	r3, [r7, #16]
 800e294:	015a      	lsls	r2, r3, #5
 800e296:	68fb      	ldr	r3, [r7, #12]
 800e298:	4413      	add	r3, r2
 800e29a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e29e:	681b      	ldr	r3, [r3, #0]
 800e2a0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e2a4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e2a8:	d118      	bne.n	800e2dc <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 800e2aa:	693b      	ldr	r3, [r7, #16]
 800e2ac:	2b00      	cmp	r3, #0
 800e2ae:	d10a      	bne.n	800e2c6 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800e2b0:	693b      	ldr	r3, [r7, #16]
 800e2b2:	015a      	lsls	r2, r3, #5
 800e2b4:	68fb      	ldr	r3, [r7, #12]
 800e2b6:	4413      	add	r3, r2
 800e2b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e2bc:	461a      	mov	r2, r3
 800e2be:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800e2c2:	6013      	str	r3, [r2, #0]
 800e2c4:	e013      	b.n	800e2ee <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800e2c6:	693b      	ldr	r3, [r7, #16]
 800e2c8:	015a      	lsls	r2, r3, #5
 800e2ca:	68fb      	ldr	r3, [r7, #12]
 800e2cc:	4413      	add	r3, r2
 800e2ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e2d2:	461a      	mov	r2, r3
 800e2d4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800e2d8:	6013      	str	r3, [r2, #0]
 800e2da:	e008      	b.n	800e2ee <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800e2dc:	693b      	ldr	r3, [r7, #16]
 800e2de:	015a      	lsls	r2, r3, #5
 800e2e0:	68fb      	ldr	r3, [r7, #12]
 800e2e2:	4413      	add	r3, r2
 800e2e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e2e8:	461a      	mov	r2, r3
 800e2ea:	2300      	movs	r3, #0
 800e2ec:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800e2ee:	693b      	ldr	r3, [r7, #16]
 800e2f0:	015a      	lsls	r2, r3, #5
 800e2f2:	68fb      	ldr	r3, [r7, #12]
 800e2f4:	4413      	add	r3, r2
 800e2f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e2fa:	461a      	mov	r2, r3
 800e2fc:	2300      	movs	r3, #0
 800e2fe:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800e300:	693b      	ldr	r3, [r7, #16]
 800e302:	015a      	lsls	r2, r3, #5
 800e304:	68fb      	ldr	r3, [r7, #12]
 800e306:	4413      	add	r3, r2
 800e308:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e30c:	461a      	mov	r2, r3
 800e30e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800e312:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e314:	693b      	ldr	r3, [r7, #16]
 800e316:	3301      	adds	r3, #1
 800e318:	613b      	str	r3, [r7, #16]
 800e31a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800e31e:	461a      	mov	r2, r3
 800e320:	693b      	ldr	r3, [r7, #16]
 800e322:	4293      	cmp	r3, r2
 800e324:	d3b5      	bcc.n	800e292 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800e326:	68fb      	ldr	r3, [r7, #12]
 800e328:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e32c:	691b      	ldr	r3, [r3, #16]
 800e32e:	68fa      	ldr	r2, [r7, #12]
 800e330:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e334:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e338:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800e33a:	687b      	ldr	r3, [r7, #4]
 800e33c:	2200      	movs	r2, #0
 800e33e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800e340:	687b      	ldr	r3, [r7, #4]
 800e342:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800e346:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800e348:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e34c:	2b00      	cmp	r3, #0
 800e34e:	d105      	bne.n	800e35c <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	699b      	ldr	r3, [r3, #24]
 800e354:	f043 0210 	orr.w	r2, r3, #16
 800e358:	687b      	ldr	r3, [r7, #4]
 800e35a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800e35c:	687b      	ldr	r3, [r7, #4]
 800e35e:	699a      	ldr	r2, [r3, #24]
 800e360:	4b10      	ldr	r3, [pc, #64]	; (800e3a4 <USB_DevInit+0x2c4>)
 800e362:	4313      	orrs	r3, r2
 800e364:	687a      	ldr	r2, [r7, #4]
 800e366:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800e368:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800e36c:	2b00      	cmp	r3, #0
 800e36e:	d005      	beq.n	800e37c <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800e370:	687b      	ldr	r3, [r7, #4]
 800e372:	699b      	ldr	r3, [r3, #24]
 800e374:	f043 0208 	orr.w	r2, r3, #8
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800e37c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800e380:	2b01      	cmp	r3, #1
 800e382:	d107      	bne.n	800e394 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800e384:	687b      	ldr	r3, [r7, #4]
 800e386:	699b      	ldr	r3, [r3, #24]
 800e388:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800e38c:	f043 0304 	orr.w	r3, r3, #4
 800e390:	687a      	ldr	r2, [r7, #4]
 800e392:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800e394:	7dfb      	ldrb	r3, [r7, #23]
}
 800e396:	4618      	mov	r0, r3
 800e398:	3718      	adds	r7, #24
 800e39a:	46bd      	mov	sp, r7
 800e39c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800e3a0:	b004      	add	sp, #16
 800e3a2:	4770      	bx	lr
 800e3a4:	803c3800 	.word	0x803c3800

0800e3a8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800e3a8:	b480      	push	{r7}
 800e3aa:	b085      	sub	sp, #20
 800e3ac:	af00      	add	r7, sp, #0
 800e3ae:	6078      	str	r0, [r7, #4]
 800e3b0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800e3b2:	2300      	movs	r3, #0
 800e3b4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800e3b6:	68fb      	ldr	r3, [r7, #12]
 800e3b8:	3301      	adds	r3, #1
 800e3ba:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800e3bc:	68fb      	ldr	r3, [r7, #12]
 800e3be:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800e3c2:	d901      	bls.n	800e3c8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800e3c4:	2303      	movs	r3, #3
 800e3c6:	e01b      	b.n	800e400 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	691b      	ldr	r3, [r3, #16]
 800e3cc:	2b00      	cmp	r3, #0
 800e3ce:	daf2      	bge.n	800e3b6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800e3d0:	2300      	movs	r3, #0
 800e3d2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800e3d4:	683b      	ldr	r3, [r7, #0]
 800e3d6:	019b      	lsls	r3, r3, #6
 800e3d8:	f043 0220 	orr.w	r2, r3, #32
 800e3dc:	687b      	ldr	r3, [r7, #4]
 800e3de:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800e3e0:	68fb      	ldr	r3, [r7, #12]
 800e3e2:	3301      	adds	r3, #1
 800e3e4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800e3e6:	68fb      	ldr	r3, [r7, #12]
 800e3e8:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800e3ec:	d901      	bls.n	800e3f2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800e3ee:	2303      	movs	r3, #3
 800e3f0:	e006      	b.n	800e400 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800e3f2:	687b      	ldr	r3, [r7, #4]
 800e3f4:	691b      	ldr	r3, [r3, #16]
 800e3f6:	f003 0320 	and.w	r3, r3, #32
 800e3fa:	2b20      	cmp	r3, #32
 800e3fc:	d0f0      	beq.n	800e3e0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800e3fe:	2300      	movs	r3, #0
}
 800e400:	4618      	mov	r0, r3
 800e402:	3714      	adds	r7, #20
 800e404:	46bd      	mov	sp, r7
 800e406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e40a:	4770      	bx	lr

0800e40c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800e40c:	b480      	push	{r7}
 800e40e:	b085      	sub	sp, #20
 800e410:	af00      	add	r7, sp, #0
 800e412:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800e414:	2300      	movs	r3, #0
 800e416:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800e418:	68fb      	ldr	r3, [r7, #12]
 800e41a:	3301      	adds	r3, #1
 800e41c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800e41e:	68fb      	ldr	r3, [r7, #12]
 800e420:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800e424:	d901      	bls.n	800e42a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800e426:	2303      	movs	r3, #3
 800e428:	e018      	b.n	800e45c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800e42a:	687b      	ldr	r3, [r7, #4]
 800e42c:	691b      	ldr	r3, [r3, #16]
 800e42e:	2b00      	cmp	r3, #0
 800e430:	daf2      	bge.n	800e418 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800e432:	2300      	movs	r3, #0
 800e434:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800e436:	687b      	ldr	r3, [r7, #4]
 800e438:	2210      	movs	r2, #16
 800e43a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800e43c:	68fb      	ldr	r3, [r7, #12]
 800e43e:	3301      	adds	r3, #1
 800e440:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800e442:	68fb      	ldr	r3, [r7, #12]
 800e444:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800e448:	d901      	bls.n	800e44e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800e44a:	2303      	movs	r3, #3
 800e44c:	e006      	b.n	800e45c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800e44e:	687b      	ldr	r3, [r7, #4]
 800e450:	691b      	ldr	r3, [r3, #16]
 800e452:	f003 0310 	and.w	r3, r3, #16
 800e456:	2b10      	cmp	r3, #16
 800e458:	d0f0      	beq.n	800e43c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800e45a:	2300      	movs	r3, #0
}
 800e45c:	4618      	mov	r0, r3
 800e45e:	3714      	adds	r7, #20
 800e460:	46bd      	mov	sp, r7
 800e462:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e466:	4770      	bx	lr

0800e468 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800e468:	b480      	push	{r7}
 800e46a:	b085      	sub	sp, #20
 800e46c:	af00      	add	r7, sp, #0
 800e46e:	6078      	str	r0, [r7, #4]
 800e470:	460b      	mov	r3, r1
 800e472:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e474:	687b      	ldr	r3, [r7, #4]
 800e476:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800e478:	68fb      	ldr	r3, [r7, #12]
 800e47a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e47e:	681a      	ldr	r2, [r3, #0]
 800e480:	78fb      	ldrb	r3, [r7, #3]
 800e482:	68f9      	ldr	r1, [r7, #12]
 800e484:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e488:	4313      	orrs	r3, r2
 800e48a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800e48c:	2300      	movs	r3, #0
}
 800e48e:	4618      	mov	r0, r3
 800e490:	3714      	adds	r7, #20
 800e492:	46bd      	mov	sp, r7
 800e494:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e498:	4770      	bx	lr

0800e49a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800e49a:	b480      	push	{r7}
 800e49c:	b087      	sub	sp, #28
 800e49e:	af00      	add	r7, sp, #0
 800e4a0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800e4a6:	693b      	ldr	r3, [r7, #16]
 800e4a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e4ac:	689b      	ldr	r3, [r3, #8]
 800e4ae:	f003 0306 	and.w	r3, r3, #6
 800e4b2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800e4b4:	68fb      	ldr	r3, [r7, #12]
 800e4b6:	2b00      	cmp	r3, #0
 800e4b8:	d102      	bne.n	800e4c0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800e4ba:	2300      	movs	r3, #0
 800e4bc:	75fb      	strb	r3, [r7, #23]
 800e4be:	e00a      	b.n	800e4d6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800e4c0:	68fb      	ldr	r3, [r7, #12]
 800e4c2:	2b02      	cmp	r3, #2
 800e4c4:	d002      	beq.n	800e4cc <USB_GetDevSpeed+0x32>
 800e4c6:	68fb      	ldr	r3, [r7, #12]
 800e4c8:	2b06      	cmp	r3, #6
 800e4ca:	d102      	bne.n	800e4d2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800e4cc:	2302      	movs	r3, #2
 800e4ce:	75fb      	strb	r3, [r7, #23]
 800e4d0:	e001      	b.n	800e4d6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800e4d2:	230f      	movs	r3, #15
 800e4d4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800e4d6:	7dfb      	ldrb	r3, [r7, #23]
}
 800e4d8:	4618      	mov	r0, r3
 800e4da:	371c      	adds	r7, #28
 800e4dc:	46bd      	mov	sp, r7
 800e4de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4e2:	4770      	bx	lr

0800e4e4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800e4e4:	b480      	push	{r7}
 800e4e6:	b085      	sub	sp, #20
 800e4e8:	af00      	add	r7, sp, #0
 800e4ea:	6078      	str	r0, [r7, #4]
 800e4ec:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800e4f2:	683b      	ldr	r3, [r7, #0]
 800e4f4:	781b      	ldrb	r3, [r3, #0]
 800e4f6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800e4f8:	683b      	ldr	r3, [r7, #0]
 800e4fa:	785b      	ldrb	r3, [r3, #1]
 800e4fc:	2b01      	cmp	r3, #1
 800e4fe:	d13a      	bne.n	800e576 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800e500:	68fb      	ldr	r3, [r7, #12]
 800e502:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e506:	69da      	ldr	r2, [r3, #28]
 800e508:	683b      	ldr	r3, [r7, #0]
 800e50a:	781b      	ldrb	r3, [r3, #0]
 800e50c:	f003 030f 	and.w	r3, r3, #15
 800e510:	2101      	movs	r1, #1
 800e512:	fa01 f303 	lsl.w	r3, r1, r3
 800e516:	b29b      	uxth	r3, r3
 800e518:	68f9      	ldr	r1, [r7, #12]
 800e51a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e51e:	4313      	orrs	r3, r2
 800e520:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800e522:	68bb      	ldr	r3, [r7, #8]
 800e524:	015a      	lsls	r2, r3, #5
 800e526:	68fb      	ldr	r3, [r7, #12]
 800e528:	4413      	add	r3, r2
 800e52a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e52e:	681b      	ldr	r3, [r3, #0]
 800e530:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e534:	2b00      	cmp	r3, #0
 800e536:	d155      	bne.n	800e5e4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800e538:	68bb      	ldr	r3, [r7, #8]
 800e53a:	015a      	lsls	r2, r3, #5
 800e53c:	68fb      	ldr	r3, [r7, #12]
 800e53e:	4413      	add	r3, r2
 800e540:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e544:	681a      	ldr	r2, [r3, #0]
 800e546:	683b      	ldr	r3, [r7, #0]
 800e548:	689b      	ldr	r3, [r3, #8]
 800e54a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800e54e:	683b      	ldr	r3, [r7, #0]
 800e550:	791b      	ldrb	r3, [r3, #4]
 800e552:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800e554:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800e556:	68bb      	ldr	r3, [r7, #8]
 800e558:	059b      	lsls	r3, r3, #22
 800e55a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800e55c:	4313      	orrs	r3, r2
 800e55e:	68ba      	ldr	r2, [r7, #8]
 800e560:	0151      	lsls	r1, r2, #5
 800e562:	68fa      	ldr	r2, [r7, #12]
 800e564:	440a      	add	r2, r1
 800e566:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e56a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e56e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e572:	6013      	str	r3, [r2, #0]
 800e574:	e036      	b.n	800e5e4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800e576:	68fb      	ldr	r3, [r7, #12]
 800e578:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e57c:	69da      	ldr	r2, [r3, #28]
 800e57e:	683b      	ldr	r3, [r7, #0]
 800e580:	781b      	ldrb	r3, [r3, #0]
 800e582:	f003 030f 	and.w	r3, r3, #15
 800e586:	2101      	movs	r1, #1
 800e588:	fa01 f303 	lsl.w	r3, r1, r3
 800e58c:	041b      	lsls	r3, r3, #16
 800e58e:	68f9      	ldr	r1, [r7, #12]
 800e590:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e594:	4313      	orrs	r3, r2
 800e596:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800e598:	68bb      	ldr	r3, [r7, #8]
 800e59a:	015a      	lsls	r2, r3, #5
 800e59c:	68fb      	ldr	r3, [r7, #12]
 800e59e:	4413      	add	r3, r2
 800e5a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e5a4:	681b      	ldr	r3, [r3, #0]
 800e5a6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e5aa:	2b00      	cmp	r3, #0
 800e5ac:	d11a      	bne.n	800e5e4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800e5ae:	68bb      	ldr	r3, [r7, #8]
 800e5b0:	015a      	lsls	r2, r3, #5
 800e5b2:	68fb      	ldr	r3, [r7, #12]
 800e5b4:	4413      	add	r3, r2
 800e5b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e5ba:	681a      	ldr	r2, [r3, #0]
 800e5bc:	683b      	ldr	r3, [r7, #0]
 800e5be:	689b      	ldr	r3, [r3, #8]
 800e5c0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800e5c4:	683b      	ldr	r3, [r7, #0]
 800e5c6:	791b      	ldrb	r3, [r3, #4]
 800e5c8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800e5ca:	430b      	orrs	r3, r1
 800e5cc:	4313      	orrs	r3, r2
 800e5ce:	68ba      	ldr	r2, [r7, #8]
 800e5d0:	0151      	lsls	r1, r2, #5
 800e5d2:	68fa      	ldr	r2, [r7, #12]
 800e5d4:	440a      	add	r2, r1
 800e5d6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e5da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e5de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e5e2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800e5e4:	2300      	movs	r3, #0
}
 800e5e6:	4618      	mov	r0, r3
 800e5e8:	3714      	adds	r7, #20
 800e5ea:	46bd      	mov	sp, r7
 800e5ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5f0:	4770      	bx	lr
	...

0800e5f4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800e5f4:	b480      	push	{r7}
 800e5f6:	b085      	sub	sp, #20
 800e5f8:	af00      	add	r7, sp, #0
 800e5fa:	6078      	str	r0, [r7, #4]
 800e5fc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e5fe:	687b      	ldr	r3, [r7, #4]
 800e600:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800e602:	683b      	ldr	r3, [r7, #0]
 800e604:	781b      	ldrb	r3, [r3, #0]
 800e606:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800e608:	683b      	ldr	r3, [r7, #0]
 800e60a:	785b      	ldrb	r3, [r3, #1]
 800e60c:	2b01      	cmp	r3, #1
 800e60e:	d161      	bne.n	800e6d4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800e610:	68bb      	ldr	r3, [r7, #8]
 800e612:	015a      	lsls	r2, r3, #5
 800e614:	68fb      	ldr	r3, [r7, #12]
 800e616:	4413      	add	r3, r2
 800e618:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e61c:	681b      	ldr	r3, [r3, #0]
 800e61e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e622:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e626:	d11f      	bne.n	800e668 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800e628:	68bb      	ldr	r3, [r7, #8]
 800e62a:	015a      	lsls	r2, r3, #5
 800e62c:	68fb      	ldr	r3, [r7, #12]
 800e62e:	4413      	add	r3, r2
 800e630:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e634:	681b      	ldr	r3, [r3, #0]
 800e636:	68ba      	ldr	r2, [r7, #8]
 800e638:	0151      	lsls	r1, r2, #5
 800e63a:	68fa      	ldr	r2, [r7, #12]
 800e63c:	440a      	add	r2, r1
 800e63e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e642:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800e646:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800e648:	68bb      	ldr	r3, [r7, #8]
 800e64a:	015a      	lsls	r2, r3, #5
 800e64c:	68fb      	ldr	r3, [r7, #12]
 800e64e:	4413      	add	r3, r2
 800e650:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e654:	681b      	ldr	r3, [r3, #0]
 800e656:	68ba      	ldr	r2, [r7, #8]
 800e658:	0151      	lsls	r1, r2, #5
 800e65a:	68fa      	ldr	r2, [r7, #12]
 800e65c:	440a      	add	r2, r1
 800e65e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e662:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800e666:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800e668:	68fb      	ldr	r3, [r7, #12]
 800e66a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e66e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e670:	683b      	ldr	r3, [r7, #0]
 800e672:	781b      	ldrb	r3, [r3, #0]
 800e674:	f003 030f 	and.w	r3, r3, #15
 800e678:	2101      	movs	r1, #1
 800e67a:	fa01 f303 	lsl.w	r3, r1, r3
 800e67e:	b29b      	uxth	r3, r3
 800e680:	43db      	mvns	r3, r3
 800e682:	68f9      	ldr	r1, [r7, #12]
 800e684:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e688:	4013      	ands	r3, r2
 800e68a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800e68c:	68fb      	ldr	r3, [r7, #12]
 800e68e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e692:	69da      	ldr	r2, [r3, #28]
 800e694:	683b      	ldr	r3, [r7, #0]
 800e696:	781b      	ldrb	r3, [r3, #0]
 800e698:	f003 030f 	and.w	r3, r3, #15
 800e69c:	2101      	movs	r1, #1
 800e69e:	fa01 f303 	lsl.w	r3, r1, r3
 800e6a2:	b29b      	uxth	r3, r3
 800e6a4:	43db      	mvns	r3, r3
 800e6a6:	68f9      	ldr	r1, [r7, #12]
 800e6a8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e6ac:	4013      	ands	r3, r2
 800e6ae:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800e6b0:	68bb      	ldr	r3, [r7, #8]
 800e6b2:	015a      	lsls	r2, r3, #5
 800e6b4:	68fb      	ldr	r3, [r7, #12]
 800e6b6:	4413      	add	r3, r2
 800e6b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e6bc:	681a      	ldr	r2, [r3, #0]
 800e6be:	68bb      	ldr	r3, [r7, #8]
 800e6c0:	0159      	lsls	r1, r3, #5
 800e6c2:	68fb      	ldr	r3, [r7, #12]
 800e6c4:	440b      	add	r3, r1
 800e6c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e6ca:	4619      	mov	r1, r3
 800e6cc:	4b35      	ldr	r3, [pc, #212]	; (800e7a4 <USB_DeactivateEndpoint+0x1b0>)
 800e6ce:	4013      	ands	r3, r2
 800e6d0:	600b      	str	r3, [r1, #0]
 800e6d2:	e060      	b.n	800e796 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800e6d4:	68bb      	ldr	r3, [r7, #8]
 800e6d6:	015a      	lsls	r2, r3, #5
 800e6d8:	68fb      	ldr	r3, [r7, #12]
 800e6da:	4413      	add	r3, r2
 800e6dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e6e0:	681b      	ldr	r3, [r3, #0]
 800e6e2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e6e6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e6ea:	d11f      	bne.n	800e72c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800e6ec:	68bb      	ldr	r3, [r7, #8]
 800e6ee:	015a      	lsls	r2, r3, #5
 800e6f0:	68fb      	ldr	r3, [r7, #12]
 800e6f2:	4413      	add	r3, r2
 800e6f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e6f8:	681b      	ldr	r3, [r3, #0]
 800e6fa:	68ba      	ldr	r2, [r7, #8]
 800e6fc:	0151      	lsls	r1, r2, #5
 800e6fe:	68fa      	ldr	r2, [r7, #12]
 800e700:	440a      	add	r2, r1
 800e702:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e706:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800e70a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800e70c:	68bb      	ldr	r3, [r7, #8]
 800e70e:	015a      	lsls	r2, r3, #5
 800e710:	68fb      	ldr	r3, [r7, #12]
 800e712:	4413      	add	r3, r2
 800e714:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e718:	681b      	ldr	r3, [r3, #0]
 800e71a:	68ba      	ldr	r2, [r7, #8]
 800e71c:	0151      	lsls	r1, r2, #5
 800e71e:	68fa      	ldr	r2, [r7, #12]
 800e720:	440a      	add	r2, r1
 800e722:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e726:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800e72a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800e72c:	68fb      	ldr	r3, [r7, #12]
 800e72e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e732:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e734:	683b      	ldr	r3, [r7, #0]
 800e736:	781b      	ldrb	r3, [r3, #0]
 800e738:	f003 030f 	and.w	r3, r3, #15
 800e73c:	2101      	movs	r1, #1
 800e73e:	fa01 f303 	lsl.w	r3, r1, r3
 800e742:	041b      	lsls	r3, r3, #16
 800e744:	43db      	mvns	r3, r3
 800e746:	68f9      	ldr	r1, [r7, #12]
 800e748:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e74c:	4013      	ands	r3, r2
 800e74e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800e750:	68fb      	ldr	r3, [r7, #12]
 800e752:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e756:	69da      	ldr	r2, [r3, #28]
 800e758:	683b      	ldr	r3, [r7, #0]
 800e75a:	781b      	ldrb	r3, [r3, #0]
 800e75c:	f003 030f 	and.w	r3, r3, #15
 800e760:	2101      	movs	r1, #1
 800e762:	fa01 f303 	lsl.w	r3, r1, r3
 800e766:	041b      	lsls	r3, r3, #16
 800e768:	43db      	mvns	r3, r3
 800e76a:	68f9      	ldr	r1, [r7, #12]
 800e76c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e770:	4013      	ands	r3, r2
 800e772:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800e774:	68bb      	ldr	r3, [r7, #8]
 800e776:	015a      	lsls	r2, r3, #5
 800e778:	68fb      	ldr	r3, [r7, #12]
 800e77a:	4413      	add	r3, r2
 800e77c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e780:	681a      	ldr	r2, [r3, #0]
 800e782:	68bb      	ldr	r3, [r7, #8]
 800e784:	0159      	lsls	r1, r3, #5
 800e786:	68fb      	ldr	r3, [r7, #12]
 800e788:	440b      	add	r3, r1
 800e78a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e78e:	4619      	mov	r1, r3
 800e790:	4b05      	ldr	r3, [pc, #20]	; (800e7a8 <USB_DeactivateEndpoint+0x1b4>)
 800e792:	4013      	ands	r3, r2
 800e794:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800e796:	2300      	movs	r3, #0
}
 800e798:	4618      	mov	r0, r3
 800e79a:	3714      	adds	r7, #20
 800e79c:	46bd      	mov	sp, r7
 800e79e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7a2:	4770      	bx	lr
 800e7a4:	ec337800 	.word	0xec337800
 800e7a8:	eff37800 	.word	0xeff37800

0800e7ac <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800e7ac:	b580      	push	{r7, lr}
 800e7ae:	b08a      	sub	sp, #40	; 0x28
 800e7b0:	af02      	add	r7, sp, #8
 800e7b2:	60f8      	str	r0, [r7, #12]
 800e7b4:	60b9      	str	r1, [r7, #8]
 800e7b6:	4613      	mov	r3, r2
 800e7b8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e7ba:	68fb      	ldr	r3, [r7, #12]
 800e7bc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800e7be:	68bb      	ldr	r3, [r7, #8]
 800e7c0:	781b      	ldrb	r3, [r3, #0]
 800e7c2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800e7c4:	68bb      	ldr	r3, [r7, #8]
 800e7c6:	785b      	ldrb	r3, [r3, #1]
 800e7c8:	2b01      	cmp	r3, #1
 800e7ca:	f040 817a 	bne.w	800eac2 <USB_EPStartXfer+0x316>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800e7ce:	68bb      	ldr	r3, [r7, #8]
 800e7d0:	691b      	ldr	r3, [r3, #16]
 800e7d2:	2b00      	cmp	r3, #0
 800e7d4:	d132      	bne.n	800e83c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800e7d6:	69bb      	ldr	r3, [r7, #24]
 800e7d8:	015a      	lsls	r2, r3, #5
 800e7da:	69fb      	ldr	r3, [r7, #28]
 800e7dc:	4413      	add	r3, r2
 800e7de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e7e2:	691b      	ldr	r3, [r3, #16]
 800e7e4:	69ba      	ldr	r2, [r7, #24]
 800e7e6:	0151      	lsls	r1, r2, #5
 800e7e8:	69fa      	ldr	r2, [r7, #28]
 800e7ea:	440a      	add	r2, r1
 800e7ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e7f0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800e7f4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800e7f8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800e7fa:	69bb      	ldr	r3, [r7, #24]
 800e7fc:	015a      	lsls	r2, r3, #5
 800e7fe:	69fb      	ldr	r3, [r7, #28]
 800e800:	4413      	add	r3, r2
 800e802:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e806:	691b      	ldr	r3, [r3, #16]
 800e808:	69ba      	ldr	r2, [r7, #24]
 800e80a:	0151      	lsls	r1, r2, #5
 800e80c:	69fa      	ldr	r2, [r7, #28]
 800e80e:	440a      	add	r2, r1
 800e810:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e814:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800e818:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800e81a:	69bb      	ldr	r3, [r7, #24]
 800e81c:	015a      	lsls	r2, r3, #5
 800e81e:	69fb      	ldr	r3, [r7, #28]
 800e820:	4413      	add	r3, r2
 800e822:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e826:	691b      	ldr	r3, [r3, #16]
 800e828:	69ba      	ldr	r2, [r7, #24]
 800e82a:	0151      	lsls	r1, r2, #5
 800e82c:	69fa      	ldr	r2, [r7, #28]
 800e82e:	440a      	add	r2, r1
 800e830:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e834:	0cdb      	lsrs	r3, r3, #19
 800e836:	04db      	lsls	r3, r3, #19
 800e838:	6113      	str	r3, [r2, #16]
 800e83a:	e092      	b.n	800e962 <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800e83c:	69bb      	ldr	r3, [r7, #24]
 800e83e:	015a      	lsls	r2, r3, #5
 800e840:	69fb      	ldr	r3, [r7, #28]
 800e842:	4413      	add	r3, r2
 800e844:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e848:	691b      	ldr	r3, [r3, #16]
 800e84a:	69ba      	ldr	r2, [r7, #24]
 800e84c:	0151      	lsls	r1, r2, #5
 800e84e:	69fa      	ldr	r2, [r7, #28]
 800e850:	440a      	add	r2, r1
 800e852:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e856:	0cdb      	lsrs	r3, r3, #19
 800e858:	04db      	lsls	r3, r3, #19
 800e85a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800e85c:	69bb      	ldr	r3, [r7, #24]
 800e85e:	015a      	lsls	r2, r3, #5
 800e860:	69fb      	ldr	r3, [r7, #28]
 800e862:	4413      	add	r3, r2
 800e864:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e868:	691b      	ldr	r3, [r3, #16]
 800e86a:	69ba      	ldr	r2, [r7, #24]
 800e86c:	0151      	lsls	r1, r2, #5
 800e86e:	69fa      	ldr	r2, [r7, #28]
 800e870:	440a      	add	r2, r1
 800e872:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e876:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800e87a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800e87e:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 800e880:	69bb      	ldr	r3, [r7, #24]
 800e882:	2b00      	cmp	r3, #0
 800e884:	d11a      	bne.n	800e8bc <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800e886:	68bb      	ldr	r3, [r7, #8]
 800e888:	691a      	ldr	r2, [r3, #16]
 800e88a:	68bb      	ldr	r3, [r7, #8]
 800e88c:	689b      	ldr	r3, [r3, #8]
 800e88e:	429a      	cmp	r2, r3
 800e890:	d903      	bls.n	800e89a <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800e892:	68bb      	ldr	r3, [r7, #8]
 800e894:	689a      	ldr	r2, [r3, #8]
 800e896:	68bb      	ldr	r3, [r7, #8]
 800e898:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800e89a:	69bb      	ldr	r3, [r7, #24]
 800e89c:	015a      	lsls	r2, r3, #5
 800e89e:	69fb      	ldr	r3, [r7, #28]
 800e8a0:	4413      	add	r3, r2
 800e8a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e8a6:	691b      	ldr	r3, [r3, #16]
 800e8a8:	69ba      	ldr	r2, [r7, #24]
 800e8aa:	0151      	lsls	r1, r2, #5
 800e8ac:	69fa      	ldr	r2, [r7, #28]
 800e8ae:	440a      	add	r2, r1
 800e8b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e8b4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800e8b8:	6113      	str	r3, [r2, #16]
 800e8ba:	e01b      	b.n	800e8f4 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800e8bc:	69bb      	ldr	r3, [r7, #24]
 800e8be:	015a      	lsls	r2, r3, #5
 800e8c0:	69fb      	ldr	r3, [r7, #28]
 800e8c2:	4413      	add	r3, r2
 800e8c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e8c8:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800e8ca:	68bb      	ldr	r3, [r7, #8]
 800e8cc:	6919      	ldr	r1, [r3, #16]
 800e8ce:	68bb      	ldr	r3, [r7, #8]
 800e8d0:	689b      	ldr	r3, [r3, #8]
 800e8d2:	440b      	add	r3, r1
 800e8d4:	1e59      	subs	r1, r3, #1
 800e8d6:	68bb      	ldr	r3, [r7, #8]
 800e8d8:	689b      	ldr	r3, [r3, #8]
 800e8da:	fbb1 f3f3 	udiv	r3, r1, r3
 800e8de:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800e8e0:	4ba2      	ldr	r3, [pc, #648]	; (800eb6c <USB_EPStartXfer+0x3c0>)
 800e8e2:	400b      	ands	r3, r1
 800e8e4:	69b9      	ldr	r1, [r7, #24]
 800e8e6:	0148      	lsls	r0, r1, #5
 800e8e8:	69f9      	ldr	r1, [r7, #28]
 800e8ea:	4401      	add	r1, r0
 800e8ec:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800e8f0:	4313      	orrs	r3, r2
 800e8f2:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800e8f4:	69bb      	ldr	r3, [r7, #24]
 800e8f6:	015a      	lsls	r2, r3, #5
 800e8f8:	69fb      	ldr	r3, [r7, #28]
 800e8fa:	4413      	add	r3, r2
 800e8fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e900:	691a      	ldr	r2, [r3, #16]
 800e902:	68bb      	ldr	r3, [r7, #8]
 800e904:	691b      	ldr	r3, [r3, #16]
 800e906:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e90a:	69b9      	ldr	r1, [r7, #24]
 800e90c:	0148      	lsls	r0, r1, #5
 800e90e:	69f9      	ldr	r1, [r7, #28]
 800e910:	4401      	add	r1, r0
 800e912:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800e916:	4313      	orrs	r3, r2
 800e918:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800e91a:	68bb      	ldr	r3, [r7, #8]
 800e91c:	791b      	ldrb	r3, [r3, #4]
 800e91e:	2b01      	cmp	r3, #1
 800e920:	d11f      	bne.n	800e962 <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800e922:	69bb      	ldr	r3, [r7, #24]
 800e924:	015a      	lsls	r2, r3, #5
 800e926:	69fb      	ldr	r3, [r7, #28]
 800e928:	4413      	add	r3, r2
 800e92a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e92e:	691b      	ldr	r3, [r3, #16]
 800e930:	69ba      	ldr	r2, [r7, #24]
 800e932:	0151      	lsls	r1, r2, #5
 800e934:	69fa      	ldr	r2, [r7, #28]
 800e936:	440a      	add	r2, r1
 800e938:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e93c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800e940:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800e942:	69bb      	ldr	r3, [r7, #24]
 800e944:	015a      	lsls	r2, r3, #5
 800e946:	69fb      	ldr	r3, [r7, #28]
 800e948:	4413      	add	r3, r2
 800e94a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e94e:	691b      	ldr	r3, [r3, #16]
 800e950:	69ba      	ldr	r2, [r7, #24]
 800e952:	0151      	lsls	r1, r2, #5
 800e954:	69fa      	ldr	r2, [r7, #28]
 800e956:	440a      	add	r2, r1
 800e958:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e95c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800e960:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800e962:	79fb      	ldrb	r3, [r7, #7]
 800e964:	2b01      	cmp	r3, #1
 800e966:	d14b      	bne.n	800ea00 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800e968:	68bb      	ldr	r3, [r7, #8]
 800e96a:	69db      	ldr	r3, [r3, #28]
 800e96c:	2b00      	cmp	r3, #0
 800e96e:	d009      	beq.n	800e984 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800e970:	69bb      	ldr	r3, [r7, #24]
 800e972:	015a      	lsls	r2, r3, #5
 800e974:	69fb      	ldr	r3, [r7, #28]
 800e976:	4413      	add	r3, r2
 800e978:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e97c:	461a      	mov	r2, r3
 800e97e:	68bb      	ldr	r3, [r7, #8]
 800e980:	69db      	ldr	r3, [r3, #28]
 800e982:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800e984:	68bb      	ldr	r3, [r7, #8]
 800e986:	791b      	ldrb	r3, [r3, #4]
 800e988:	2b01      	cmp	r3, #1
 800e98a:	d128      	bne.n	800e9de <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800e98c:	69fb      	ldr	r3, [r7, #28]
 800e98e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e992:	689b      	ldr	r3, [r3, #8]
 800e994:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e998:	2b00      	cmp	r3, #0
 800e99a:	d110      	bne.n	800e9be <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800e99c:	69bb      	ldr	r3, [r7, #24]
 800e99e:	015a      	lsls	r2, r3, #5
 800e9a0:	69fb      	ldr	r3, [r7, #28]
 800e9a2:	4413      	add	r3, r2
 800e9a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e9a8:	681b      	ldr	r3, [r3, #0]
 800e9aa:	69ba      	ldr	r2, [r7, #24]
 800e9ac:	0151      	lsls	r1, r2, #5
 800e9ae:	69fa      	ldr	r2, [r7, #28]
 800e9b0:	440a      	add	r2, r1
 800e9b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e9b6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800e9ba:	6013      	str	r3, [r2, #0]
 800e9bc:	e00f      	b.n	800e9de <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800e9be:	69bb      	ldr	r3, [r7, #24]
 800e9c0:	015a      	lsls	r2, r3, #5
 800e9c2:	69fb      	ldr	r3, [r7, #28]
 800e9c4:	4413      	add	r3, r2
 800e9c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e9ca:	681b      	ldr	r3, [r3, #0]
 800e9cc:	69ba      	ldr	r2, [r7, #24]
 800e9ce:	0151      	lsls	r1, r2, #5
 800e9d0:	69fa      	ldr	r2, [r7, #28]
 800e9d2:	440a      	add	r2, r1
 800e9d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e9d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e9dc:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800e9de:	69bb      	ldr	r3, [r7, #24]
 800e9e0:	015a      	lsls	r2, r3, #5
 800e9e2:	69fb      	ldr	r3, [r7, #28]
 800e9e4:	4413      	add	r3, r2
 800e9e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e9ea:	681b      	ldr	r3, [r3, #0]
 800e9ec:	69ba      	ldr	r2, [r7, #24]
 800e9ee:	0151      	lsls	r1, r2, #5
 800e9f0:	69fa      	ldr	r2, [r7, #28]
 800e9f2:	440a      	add	r2, r1
 800e9f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e9f8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800e9fc:	6013      	str	r3, [r2, #0]
 800e9fe:	e165      	b.n	800eccc <USB_EPStartXfer+0x520>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800ea00:	69bb      	ldr	r3, [r7, #24]
 800ea02:	015a      	lsls	r2, r3, #5
 800ea04:	69fb      	ldr	r3, [r7, #28]
 800ea06:	4413      	add	r3, r2
 800ea08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ea0c:	681b      	ldr	r3, [r3, #0]
 800ea0e:	69ba      	ldr	r2, [r7, #24]
 800ea10:	0151      	lsls	r1, r2, #5
 800ea12:	69fa      	ldr	r2, [r7, #28]
 800ea14:	440a      	add	r2, r1
 800ea16:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ea1a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800ea1e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800ea20:	68bb      	ldr	r3, [r7, #8]
 800ea22:	791b      	ldrb	r3, [r3, #4]
 800ea24:	2b01      	cmp	r3, #1
 800ea26:	d015      	beq.n	800ea54 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800ea28:	68bb      	ldr	r3, [r7, #8]
 800ea2a:	691b      	ldr	r3, [r3, #16]
 800ea2c:	2b00      	cmp	r3, #0
 800ea2e:	f000 814d 	beq.w	800eccc <USB_EPStartXfer+0x520>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800ea32:	69fb      	ldr	r3, [r7, #28]
 800ea34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ea38:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ea3a:	68bb      	ldr	r3, [r7, #8]
 800ea3c:	781b      	ldrb	r3, [r3, #0]
 800ea3e:	f003 030f 	and.w	r3, r3, #15
 800ea42:	2101      	movs	r1, #1
 800ea44:	fa01 f303 	lsl.w	r3, r1, r3
 800ea48:	69f9      	ldr	r1, [r7, #28]
 800ea4a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ea4e:	4313      	orrs	r3, r2
 800ea50:	634b      	str	r3, [r1, #52]	; 0x34
 800ea52:	e13b      	b.n	800eccc <USB_EPStartXfer+0x520>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800ea54:	69fb      	ldr	r3, [r7, #28]
 800ea56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ea5a:	689b      	ldr	r3, [r3, #8]
 800ea5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ea60:	2b00      	cmp	r3, #0
 800ea62:	d110      	bne.n	800ea86 <USB_EPStartXfer+0x2da>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800ea64:	69bb      	ldr	r3, [r7, #24]
 800ea66:	015a      	lsls	r2, r3, #5
 800ea68:	69fb      	ldr	r3, [r7, #28]
 800ea6a:	4413      	add	r3, r2
 800ea6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ea70:	681b      	ldr	r3, [r3, #0]
 800ea72:	69ba      	ldr	r2, [r7, #24]
 800ea74:	0151      	lsls	r1, r2, #5
 800ea76:	69fa      	ldr	r2, [r7, #28]
 800ea78:	440a      	add	r2, r1
 800ea7a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ea7e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800ea82:	6013      	str	r3, [r2, #0]
 800ea84:	e00f      	b.n	800eaa6 <USB_EPStartXfer+0x2fa>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800ea86:	69bb      	ldr	r3, [r7, #24]
 800ea88:	015a      	lsls	r2, r3, #5
 800ea8a:	69fb      	ldr	r3, [r7, #28]
 800ea8c:	4413      	add	r3, r2
 800ea8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ea92:	681b      	ldr	r3, [r3, #0]
 800ea94:	69ba      	ldr	r2, [r7, #24]
 800ea96:	0151      	lsls	r1, r2, #5
 800ea98:	69fa      	ldr	r2, [r7, #28]
 800ea9a:	440a      	add	r2, r1
 800ea9c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800eaa0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800eaa4:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800eaa6:	68bb      	ldr	r3, [r7, #8]
 800eaa8:	68d9      	ldr	r1, [r3, #12]
 800eaaa:	68bb      	ldr	r3, [r7, #8]
 800eaac:	781a      	ldrb	r2, [r3, #0]
 800eaae:	68bb      	ldr	r3, [r7, #8]
 800eab0:	691b      	ldr	r3, [r3, #16]
 800eab2:	b298      	uxth	r0, r3
 800eab4:	79fb      	ldrb	r3, [r7, #7]
 800eab6:	9300      	str	r3, [sp, #0]
 800eab8:	4603      	mov	r3, r0
 800eaba:	68f8      	ldr	r0, [r7, #12]
 800eabc:	f000 f9b8 	bl	800ee30 <USB_WritePacket>
 800eac0:	e104      	b.n	800eccc <USB_EPStartXfer+0x520>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800eac2:	69bb      	ldr	r3, [r7, #24]
 800eac4:	015a      	lsls	r2, r3, #5
 800eac6:	69fb      	ldr	r3, [r7, #28]
 800eac8:	4413      	add	r3, r2
 800eaca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800eace:	691b      	ldr	r3, [r3, #16]
 800ead0:	69ba      	ldr	r2, [r7, #24]
 800ead2:	0151      	lsls	r1, r2, #5
 800ead4:	69fa      	ldr	r2, [r7, #28]
 800ead6:	440a      	add	r2, r1
 800ead8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800eadc:	0cdb      	lsrs	r3, r3, #19
 800eade:	04db      	lsls	r3, r3, #19
 800eae0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800eae2:	69bb      	ldr	r3, [r7, #24]
 800eae4:	015a      	lsls	r2, r3, #5
 800eae6:	69fb      	ldr	r3, [r7, #28]
 800eae8:	4413      	add	r3, r2
 800eaea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800eaee:	691b      	ldr	r3, [r3, #16]
 800eaf0:	69ba      	ldr	r2, [r7, #24]
 800eaf2:	0151      	lsls	r1, r2, #5
 800eaf4:	69fa      	ldr	r2, [r7, #28]
 800eaf6:	440a      	add	r2, r1
 800eaf8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800eafc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800eb00:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800eb04:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 800eb06:	69bb      	ldr	r3, [r7, #24]
 800eb08:	2b00      	cmp	r3, #0
 800eb0a:	d131      	bne.n	800eb70 <USB_EPStartXfer+0x3c4>
    {
      if (ep->xfer_len > 0U)
 800eb0c:	68bb      	ldr	r3, [r7, #8]
 800eb0e:	691b      	ldr	r3, [r3, #16]
 800eb10:	2b00      	cmp	r3, #0
 800eb12:	d003      	beq.n	800eb1c <USB_EPStartXfer+0x370>
      {
        ep->xfer_len = ep->maxpacket;
 800eb14:	68bb      	ldr	r3, [r7, #8]
 800eb16:	689a      	ldr	r2, [r3, #8]
 800eb18:	68bb      	ldr	r3, [r7, #8]
 800eb1a:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800eb1c:	68bb      	ldr	r3, [r7, #8]
 800eb1e:	689a      	ldr	r2, [r3, #8]
 800eb20:	68bb      	ldr	r3, [r7, #8]
 800eb22:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800eb24:	69bb      	ldr	r3, [r7, #24]
 800eb26:	015a      	lsls	r2, r3, #5
 800eb28:	69fb      	ldr	r3, [r7, #28]
 800eb2a:	4413      	add	r3, r2
 800eb2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800eb30:	691a      	ldr	r2, [r3, #16]
 800eb32:	68bb      	ldr	r3, [r7, #8]
 800eb34:	6a1b      	ldr	r3, [r3, #32]
 800eb36:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800eb3a:	69b9      	ldr	r1, [r7, #24]
 800eb3c:	0148      	lsls	r0, r1, #5
 800eb3e:	69f9      	ldr	r1, [r7, #28]
 800eb40:	4401      	add	r1, r0
 800eb42:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800eb46:	4313      	orrs	r3, r2
 800eb48:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800eb4a:	69bb      	ldr	r3, [r7, #24]
 800eb4c:	015a      	lsls	r2, r3, #5
 800eb4e:	69fb      	ldr	r3, [r7, #28]
 800eb50:	4413      	add	r3, r2
 800eb52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800eb56:	691b      	ldr	r3, [r3, #16]
 800eb58:	69ba      	ldr	r2, [r7, #24]
 800eb5a:	0151      	lsls	r1, r2, #5
 800eb5c:	69fa      	ldr	r2, [r7, #28]
 800eb5e:	440a      	add	r2, r1
 800eb60:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800eb64:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800eb68:	6113      	str	r3, [r2, #16]
 800eb6a:	e061      	b.n	800ec30 <USB_EPStartXfer+0x484>
 800eb6c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 800eb70:	68bb      	ldr	r3, [r7, #8]
 800eb72:	691b      	ldr	r3, [r3, #16]
 800eb74:	2b00      	cmp	r3, #0
 800eb76:	d123      	bne.n	800ebc0 <USB_EPStartXfer+0x414>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800eb78:	69bb      	ldr	r3, [r7, #24]
 800eb7a:	015a      	lsls	r2, r3, #5
 800eb7c:	69fb      	ldr	r3, [r7, #28]
 800eb7e:	4413      	add	r3, r2
 800eb80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800eb84:	691a      	ldr	r2, [r3, #16]
 800eb86:	68bb      	ldr	r3, [r7, #8]
 800eb88:	689b      	ldr	r3, [r3, #8]
 800eb8a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800eb8e:	69b9      	ldr	r1, [r7, #24]
 800eb90:	0148      	lsls	r0, r1, #5
 800eb92:	69f9      	ldr	r1, [r7, #28]
 800eb94:	4401      	add	r1, r0
 800eb96:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800eb9a:	4313      	orrs	r3, r2
 800eb9c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800eb9e:	69bb      	ldr	r3, [r7, #24]
 800eba0:	015a      	lsls	r2, r3, #5
 800eba2:	69fb      	ldr	r3, [r7, #28]
 800eba4:	4413      	add	r3, r2
 800eba6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ebaa:	691b      	ldr	r3, [r3, #16]
 800ebac:	69ba      	ldr	r2, [r7, #24]
 800ebae:	0151      	lsls	r1, r2, #5
 800ebb0:	69fa      	ldr	r2, [r7, #28]
 800ebb2:	440a      	add	r2, r1
 800ebb4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ebb8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ebbc:	6113      	str	r3, [r2, #16]
 800ebbe:	e037      	b.n	800ec30 <USB_EPStartXfer+0x484>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800ebc0:	68bb      	ldr	r3, [r7, #8]
 800ebc2:	691a      	ldr	r2, [r3, #16]
 800ebc4:	68bb      	ldr	r3, [r7, #8]
 800ebc6:	689b      	ldr	r3, [r3, #8]
 800ebc8:	4413      	add	r3, r2
 800ebca:	1e5a      	subs	r2, r3, #1
 800ebcc:	68bb      	ldr	r3, [r7, #8]
 800ebce:	689b      	ldr	r3, [r3, #8]
 800ebd0:	fbb2 f3f3 	udiv	r3, r2, r3
 800ebd4:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800ebd6:	68bb      	ldr	r3, [r7, #8]
 800ebd8:	689b      	ldr	r3, [r3, #8]
 800ebda:	8afa      	ldrh	r2, [r7, #22]
 800ebdc:	fb03 f202 	mul.w	r2, r3, r2
 800ebe0:	68bb      	ldr	r3, [r7, #8]
 800ebe2:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800ebe4:	69bb      	ldr	r3, [r7, #24]
 800ebe6:	015a      	lsls	r2, r3, #5
 800ebe8:	69fb      	ldr	r3, [r7, #28]
 800ebea:	4413      	add	r3, r2
 800ebec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ebf0:	691a      	ldr	r2, [r3, #16]
 800ebf2:	8afb      	ldrh	r3, [r7, #22]
 800ebf4:	04d9      	lsls	r1, r3, #19
 800ebf6:	4b38      	ldr	r3, [pc, #224]	; (800ecd8 <USB_EPStartXfer+0x52c>)
 800ebf8:	400b      	ands	r3, r1
 800ebfa:	69b9      	ldr	r1, [r7, #24]
 800ebfc:	0148      	lsls	r0, r1, #5
 800ebfe:	69f9      	ldr	r1, [r7, #28]
 800ec00:	4401      	add	r1, r0
 800ec02:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800ec06:	4313      	orrs	r3, r2
 800ec08:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800ec0a:	69bb      	ldr	r3, [r7, #24]
 800ec0c:	015a      	lsls	r2, r3, #5
 800ec0e:	69fb      	ldr	r3, [r7, #28]
 800ec10:	4413      	add	r3, r2
 800ec12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ec16:	691a      	ldr	r2, [r3, #16]
 800ec18:	68bb      	ldr	r3, [r7, #8]
 800ec1a:	6a1b      	ldr	r3, [r3, #32]
 800ec1c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ec20:	69b9      	ldr	r1, [r7, #24]
 800ec22:	0148      	lsls	r0, r1, #5
 800ec24:	69f9      	ldr	r1, [r7, #28]
 800ec26:	4401      	add	r1, r0
 800ec28:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800ec2c:	4313      	orrs	r3, r2
 800ec2e:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800ec30:	79fb      	ldrb	r3, [r7, #7]
 800ec32:	2b01      	cmp	r3, #1
 800ec34:	d10d      	bne.n	800ec52 <USB_EPStartXfer+0x4a6>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800ec36:	68bb      	ldr	r3, [r7, #8]
 800ec38:	68db      	ldr	r3, [r3, #12]
 800ec3a:	2b00      	cmp	r3, #0
 800ec3c:	d009      	beq.n	800ec52 <USB_EPStartXfer+0x4a6>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800ec3e:	68bb      	ldr	r3, [r7, #8]
 800ec40:	68d9      	ldr	r1, [r3, #12]
 800ec42:	69bb      	ldr	r3, [r7, #24]
 800ec44:	015a      	lsls	r2, r3, #5
 800ec46:	69fb      	ldr	r3, [r7, #28]
 800ec48:	4413      	add	r3, r2
 800ec4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ec4e:	460a      	mov	r2, r1
 800ec50:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800ec52:	68bb      	ldr	r3, [r7, #8]
 800ec54:	791b      	ldrb	r3, [r3, #4]
 800ec56:	2b01      	cmp	r3, #1
 800ec58:	d128      	bne.n	800ecac <USB_EPStartXfer+0x500>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800ec5a:	69fb      	ldr	r3, [r7, #28]
 800ec5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ec60:	689b      	ldr	r3, [r3, #8]
 800ec62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ec66:	2b00      	cmp	r3, #0
 800ec68:	d110      	bne.n	800ec8c <USB_EPStartXfer+0x4e0>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800ec6a:	69bb      	ldr	r3, [r7, #24]
 800ec6c:	015a      	lsls	r2, r3, #5
 800ec6e:	69fb      	ldr	r3, [r7, #28]
 800ec70:	4413      	add	r3, r2
 800ec72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ec76:	681b      	ldr	r3, [r3, #0]
 800ec78:	69ba      	ldr	r2, [r7, #24]
 800ec7a:	0151      	lsls	r1, r2, #5
 800ec7c:	69fa      	ldr	r2, [r7, #28]
 800ec7e:	440a      	add	r2, r1
 800ec80:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ec84:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800ec88:	6013      	str	r3, [r2, #0]
 800ec8a:	e00f      	b.n	800ecac <USB_EPStartXfer+0x500>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800ec8c:	69bb      	ldr	r3, [r7, #24]
 800ec8e:	015a      	lsls	r2, r3, #5
 800ec90:	69fb      	ldr	r3, [r7, #28]
 800ec92:	4413      	add	r3, r2
 800ec94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ec98:	681b      	ldr	r3, [r3, #0]
 800ec9a:	69ba      	ldr	r2, [r7, #24]
 800ec9c:	0151      	lsls	r1, r2, #5
 800ec9e:	69fa      	ldr	r2, [r7, #28]
 800eca0:	440a      	add	r2, r1
 800eca2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800eca6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ecaa:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800ecac:	69bb      	ldr	r3, [r7, #24]
 800ecae:	015a      	lsls	r2, r3, #5
 800ecb0:	69fb      	ldr	r3, [r7, #28]
 800ecb2:	4413      	add	r3, r2
 800ecb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ecb8:	681b      	ldr	r3, [r3, #0]
 800ecba:	69ba      	ldr	r2, [r7, #24]
 800ecbc:	0151      	lsls	r1, r2, #5
 800ecbe:	69fa      	ldr	r2, [r7, #28]
 800ecc0:	440a      	add	r2, r1
 800ecc2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ecc6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800ecca:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800eccc:	2300      	movs	r3, #0
}
 800ecce:	4618      	mov	r0, r3
 800ecd0:	3720      	adds	r7, #32
 800ecd2:	46bd      	mov	sp, r7
 800ecd4:	bd80      	pop	{r7, pc}
 800ecd6:	bf00      	nop
 800ecd8:	1ff80000 	.word	0x1ff80000

0800ecdc <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ecdc:	b480      	push	{r7}
 800ecde:	b087      	sub	sp, #28
 800ece0:	af00      	add	r7, sp, #0
 800ece2:	6078      	str	r0, [r7, #4]
 800ece4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800ece6:	2300      	movs	r3, #0
 800ece8:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800ecea:	2300      	movs	r3, #0
 800ecec:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ecee:	687b      	ldr	r3, [r7, #4]
 800ecf0:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800ecf2:	683b      	ldr	r3, [r7, #0]
 800ecf4:	785b      	ldrb	r3, [r3, #1]
 800ecf6:	2b01      	cmp	r3, #1
 800ecf8:	d14a      	bne.n	800ed90 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800ecfa:	683b      	ldr	r3, [r7, #0]
 800ecfc:	781b      	ldrb	r3, [r3, #0]
 800ecfe:	015a      	lsls	r2, r3, #5
 800ed00:	693b      	ldr	r3, [r7, #16]
 800ed02:	4413      	add	r3, r2
 800ed04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ed08:	681b      	ldr	r3, [r3, #0]
 800ed0a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ed0e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ed12:	f040 8086 	bne.w	800ee22 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800ed16:	683b      	ldr	r3, [r7, #0]
 800ed18:	781b      	ldrb	r3, [r3, #0]
 800ed1a:	015a      	lsls	r2, r3, #5
 800ed1c:	693b      	ldr	r3, [r7, #16]
 800ed1e:	4413      	add	r3, r2
 800ed20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ed24:	681b      	ldr	r3, [r3, #0]
 800ed26:	683a      	ldr	r2, [r7, #0]
 800ed28:	7812      	ldrb	r2, [r2, #0]
 800ed2a:	0151      	lsls	r1, r2, #5
 800ed2c:	693a      	ldr	r2, [r7, #16]
 800ed2e:	440a      	add	r2, r1
 800ed30:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ed34:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800ed38:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800ed3a:	683b      	ldr	r3, [r7, #0]
 800ed3c:	781b      	ldrb	r3, [r3, #0]
 800ed3e:	015a      	lsls	r2, r3, #5
 800ed40:	693b      	ldr	r3, [r7, #16]
 800ed42:	4413      	add	r3, r2
 800ed44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ed48:	681b      	ldr	r3, [r3, #0]
 800ed4a:	683a      	ldr	r2, [r7, #0]
 800ed4c:	7812      	ldrb	r2, [r2, #0]
 800ed4e:	0151      	lsls	r1, r2, #5
 800ed50:	693a      	ldr	r2, [r7, #16]
 800ed52:	440a      	add	r2, r1
 800ed54:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ed58:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ed5c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800ed5e:	68fb      	ldr	r3, [r7, #12]
 800ed60:	3301      	adds	r3, #1
 800ed62:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800ed64:	68fb      	ldr	r3, [r7, #12]
 800ed66:	f242 7210 	movw	r2, #10000	; 0x2710
 800ed6a:	4293      	cmp	r3, r2
 800ed6c:	d902      	bls.n	800ed74 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800ed6e:	2301      	movs	r3, #1
 800ed70:	75fb      	strb	r3, [r7, #23]
          break;
 800ed72:	e056      	b.n	800ee22 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800ed74:	683b      	ldr	r3, [r7, #0]
 800ed76:	781b      	ldrb	r3, [r3, #0]
 800ed78:	015a      	lsls	r2, r3, #5
 800ed7a:	693b      	ldr	r3, [r7, #16]
 800ed7c:	4413      	add	r3, r2
 800ed7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ed82:	681b      	ldr	r3, [r3, #0]
 800ed84:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ed88:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ed8c:	d0e7      	beq.n	800ed5e <USB_EPStopXfer+0x82>
 800ed8e:	e048      	b.n	800ee22 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ed90:	683b      	ldr	r3, [r7, #0]
 800ed92:	781b      	ldrb	r3, [r3, #0]
 800ed94:	015a      	lsls	r2, r3, #5
 800ed96:	693b      	ldr	r3, [r7, #16]
 800ed98:	4413      	add	r3, r2
 800ed9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ed9e:	681b      	ldr	r3, [r3, #0]
 800eda0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800eda4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800eda8:	d13b      	bne.n	800ee22 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800edaa:	683b      	ldr	r3, [r7, #0]
 800edac:	781b      	ldrb	r3, [r3, #0]
 800edae:	015a      	lsls	r2, r3, #5
 800edb0:	693b      	ldr	r3, [r7, #16]
 800edb2:	4413      	add	r3, r2
 800edb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800edb8:	681b      	ldr	r3, [r3, #0]
 800edba:	683a      	ldr	r2, [r7, #0]
 800edbc:	7812      	ldrb	r2, [r2, #0]
 800edbe:	0151      	lsls	r1, r2, #5
 800edc0:	693a      	ldr	r2, [r7, #16]
 800edc2:	440a      	add	r2, r1
 800edc4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800edc8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800edcc:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800edce:	683b      	ldr	r3, [r7, #0]
 800edd0:	781b      	ldrb	r3, [r3, #0]
 800edd2:	015a      	lsls	r2, r3, #5
 800edd4:	693b      	ldr	r3, [r7, #16]
 800edd6:	4413      	add	r3, r2
 800edd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800eddc:	681b      	ldr	r3, [r3, #0]
 800edde:	683a      	ldr	r2, [r7, #0]
 800ede0:	7812      	ldrb	r2, [r2, #0]
 800ede2:	0151      	lsls	r1, r2, #5
 800ede4:	693a      	ldr	r2, [r7, #16]
 800ede6:	440a      	add	r2, r1
 800ede8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800edec:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800edf0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800edf2:	68fb      	ldr	r3, [r7, #12]
 800edf4:	3301      	adds	r3, #1
 800edf6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800edf8:	68fb      	ldr	r3, [r7, #12]
 800edfa:	f242 7210 	movw	r2, #10000	; 0x2710
 800edfe:	4293      	cmp	r3, r2
 800ee00:	d902      	bls.n	800ee08 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800ee02:	2301      	movs	r3, #1
 800ee04:	75fb      	strb	r3, [r7, #23]
          break;
 800ee06:	e00c      	b.n	800ee22 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800ee08:	683b      	ldr	r3, [r7, #0]
 800ee0a:	781b      	ldrb	r3, [r3, #0]
 800ee0c:	015a      	lsls	r2, r3, #5
 800ee0e:	693b      	ldr	r3, [r7, #16]
 800ee10:	4413      	add	r3, r2
 800ee12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ee16:	681b      	ldr	r3, [r3, #0]
 800ee18:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ee1c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ee20:	d0e7      	beq.n	800edf2 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800ee22:	7dfb      	ldrb	r3, [r7, #23]
}
 800ee24:	4618      	mov	r0, r3
 800ee26:	371c      	adds	r7, #28
 800ee28:	46bd      	mov	sp, r7
 800ee2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee2e:	4770      	bx	lr

0800ee30 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800ee30:	b480      	push	{r7}
 800ee32:	b089      	sub	sp, #36	; 0x24
 800ee34:	af00      	add	r7, sp, #0
 800ee36:	60f8      	str	r0, [r7, #12]
 800ee38:	60b9      	str	r1, [r7, #8]
 800ee3a:	4611      	mov	r1, r2
 800ee3c:	461a      	mov	r2, r3
 800ee3e:	460b      	mov	r3, r1
 800ee40:	71fb      	strb	r3, [r7, #7]
 800ee42:	4613      	mov	r3, r2
 800ee44:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ee46:	68fb      	ldr	r3, [r7, #12]
 800ee48:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800ee4a:	68bb      	ldr	r3, [r7, #8]
 800ee4c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800ee4e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800ee52:	2b00      	cmp	r3, #0
 800ee54:	d123      	bne.n	800ee9e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800ee56:	88bb      	ldrh	r3, [r7, #4]
 800ee58:	3303      	adds	r3, #3
 800ee5a:	089b      	lsrs	r3, r3, #2
 800ee5c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800ee5e:	2300      	movs	r3, #0
 800ee60:	61bb      	str	r3, [r7, #24]
 800ee62:	e018      	b.n	800ee96 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800ee64:	79fb      	ldrb	r3, [r7, #7]
 800ee66:	031a      	lsls	r2, r3, #12
 800ee68:	697b      	ldr	r3, [r7, #20]
 800ee6a:	4413      	add	r3, r2
 800ee6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ee70:	461a      	mov	r2, r3
 800ee72:	69fb      	ldr	r3, [r7, #28]
 800ee74:	681b      	ldr	r3, [r3, #0]
 800ee76:	6013      	str	r3, [r2, #0]
      pSrc++;
 800ee78:	69fb      	ldr	r3, [r7, #28]
 800ee7a:	3301      	adds	r3, #1
 800ee7c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800ee7e:	69fb      	ldr	r3, [r7, #28]
 800ee80:	3301      	adds	r3, #1
 800ee82:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800ee84:	69fb      	ldr	r3, [r7, #28]
 800ee86:	3301      	adds	r3, #1
 800ee88:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800ee8a:	69fb      	ldr	r3, [r7, #28]
 800ee8c:	3301      	adds	r3, #1
 800ee8e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800ee90:	69bb      	ldr	r3, [r7, #24]
 800ee92:	3301      	adds	r3, #1
 800ee94:	61bb      	str	r3, [r7, #24]
 800ee96:	69ba      	ldr	r2, [r7, #24]
 800ee98:	693b      	ldr	r3, [r7, #16]
 800ee9a:	429a      	cmp	r2, r3
 800ee9c:	d3e2      	bcc.n	800ee64 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800ee9e:	2300      	movs	r3, #0
}
 800eea0:	4618      	mov	r0, r3
 800eea2:	3724      	adds	r7, #36	; 0x24
 800eea4:	46bd      	mov	sp, r7
 800eea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eeaa:	4770      	bx	lr

0800eeac <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800eeac:	b480      	push	{r7}
 800eeae:	b08b      	sub	sp, #44	; 0x2c
 800eeb0:	af00      	add	r7, sp, #0
 800eeb2:	60f8      	str	r0, [r7, #12]
 800eeb4:	60b9      	str	r1, [r7, #8]
 800eeb6:	4613      	mov	r3, r2
 800eeb8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800eeba:	68fb      	ldr	r3, [r7, #12]
 800eebc:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800eebe:	68bb      	ldr	r3, [r7, #8]
 800eec0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800eec2:	88fb      	ldrh	r3, [r7, #6]
 800eec4:	089b      	lsrs	r3, r3, #2
 800eec6:	b29b      	uxth	r3, r3
 800eec8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800eeca:	88fb      	ldrh	r3, [r7, #6]
 800eecc:	f003 0303 	and.w	r3, r3, #3
 800eed0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800eed2:	2300      	movs	r3, #0
 800eed4:	623b      	str	r3, [r7, #32]
 800eed6:	e014      	b.n	800ef02 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800eed8:	69bb      	ldr	r3, [r7, #24]
 800eeda:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800eede:	681a      	ldr	r2, [r3, #0]
 800eee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eee2:	601a      	str	r2, [r3, #0]
    pDest++;
 800eee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eee6:	3301      	adds	r3, #1
 800eee8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800eeea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eeec:	3301      	adds	r3, #1
 800eeee:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800eef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eef2:	3301      	adds	r3, #1
 800eef4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800eef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eef8:	3301      	adds	r3, #1
 800eefa:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800eefc:	6a3b      	ldr	r3, [r7, #32]
 800eefe:	3301      	adds	r3, #1
 800ef00:	623b      	str	r3, [r7, #32]
 800ef02:	6a3a      	ldr	r2, [r7, #32]
 800ef04:	697b      	ldr	r3, [r7, #20]
 800ef06:	429a      	cmp	r2, r3
 800ef08:	d3e6      	bcc.n	800eed8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800ef0a:	8bfb      	ldrh	r3, [r7, #30]
 800ef0c:	2b00      	cmp	r3, #0
 800ef0e:	d01e      	beq.n	800ef4e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800ef10:	2300      	movs	r3, #0
 800ef12:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800ef14:	69bb      	ldr	r3, [r7, #24]
 800ef16:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ef1a:	461a      	mov	r2, r3
 800ef1c:	f107 0310 	add.w	r3, r7, #16
 800ef20:	6812      	ldr	r2, [r2, #0]
 800ef22:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800ef24:	693a      	ldr	r2, [r7, #16]
 800ef26:	6a3b      	ldr	r3, [r7, #32]
 800ef28:	b2db      	uxtb	r3, r3
 800ef2a:	00db      	lsls	r3, r3, #3
 800ef2c:	fa22 f303 	lsr.w	r3, r2, r3
 800ef30:	b2da      	uxtb	r2, r3
 800ef32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef34:	701a      	strb	r2, [r3, #0]
      i++;
 800ef36:	6a3b      	ldr	r3, [r7, #32]
 800ef38:	3301      	adds	r3, #1
 800ef3a:	623b      	str	r3, [r7, #32]
      pDest++;
 800ef3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef3e:	3301      	adds	r3, #1
 800ef40:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800ef42:	8bfb      	ldrh	r3, [r7, #30]
 800ef44:	3b01      	subs	r3, #1
 800ef46:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800ef48:	8bfb      	ldrh	r3, [r7, #30]
 800ef4a:	2b00      	cmp	r3, #0
 800ef4c:	d1ea      	bne.n	800ef24 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800ef4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ef50:	4618      	mov	r0, r3
 800ef52:	372c      	adds	r7, #44	; 0x2c
 800ef54:	46bd      	mov	sp, r7
 800ef56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef5a:	4770      	bx	lr

0800ef5c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800ef5c:	b480      	push	{r7}
 800ef5e:	b085      	sub	sp, #20
 800ef60:	af00      	add	r7, sp, #0
 800ef62:	6078      	str	r0, [r7, #4]
 800ef64:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ef66:	687b      	ldr	r3, [r7, #4]
 800ef68:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ef6a:	683b      	ldr	r3, [r7, #0]
 800ef6c:	781b      	ldrb	r3, [r3, #0]
 800ef6e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800ef70:	683b      	ldr	r3, [r7, #0]
 800ef72:	785b      	ldrb	r3, [r3, #1]
 800ef74:	2b01      	cmp	r3, #1
 800ef76:	d12c      	bne.n	800efd2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800ef78:	68bb      	ldr	r3, [r7, #8]
 800ef7a:	015a      	lsls	r2, r3, #5
 800ef7c:	68fb      	ldr	r3, [r7, #12]
 800ef7e:	4413      	add	r3, r2
 800ef80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ef84:	681b      	ldr	r3, [r3, #0]
 800ef86:	2b00      	cmp	r3, #0
 800ef88:	db12      	blt.n	800efb0 <USB_EPSetStall+0x54>
 800ef8a:	68bb      	ldr	r3, [r7, #8]
 800ef8c:	2b00      	cmp	r3, #0
 800ef8e:	d00f      	beq.n	800efb0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800ef90:	68bb      	ldr	r3, [r7, #8]
 800ef92:	015a      	lsls	r2, r3, #5
 800ef94:	68fb      	ldr	r3, [r7, #12]
 800ef96:	4413      	add	r3, r2
 800ef98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ef9c:	681b      	ldr	r3, [r3, #0]
 800ef9e:	68ba      	ldr	r2, [r7, #8]
 800efa0:	0151      	lsls	r1, r2, #5
 800efa2:	68fa      	ldr	r2, [r7, #12]
 800efa4:	440a      	add	r2, r1
 800efa6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800efaa:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800efae:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800efb0:	68bb      	ldr	r3, [r7, #8]
 800efb2:	015a      	lsls	r2, r3, #5
 800efb4:	68fb      	ldr	r3, [r7, #12]
 800efb6:	4413      	add	r3, r2
 800efb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800efbc:	681b      	ldr	r3, [r3, #0]
 800efbe:	68ba      	ldr	r2, [r7, #8]
 800efc0:	0151      	lsls	r1, r2, #5
 800efc2:	68fa      	ldr	r2, [r7, #12]
 800efc4:	440a      	add	r2, r1
 800efc6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800efca:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800efce:	6013      	str	r3, [r2, #0]
 800efd0:	e02b      	b.n	800f02a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800efd2:	68bb      	ldr	r3, [r7, #8]
 800efd4:	015a      	lsls	r2, r3, #5
 800efd6:	68fb      	ldr	r3, [r7, #12]
 800efd8:	4413      	add	r3, r2
 800efda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800efde:	681b      	ldr	r3, [r3, #0]
 800efe0:	2b00      	cmp	r3, #0
 800efe2:	db12      	blt.n	800f00a <USB_EPSetStall+0xae>
 800efe4:	68bb      	ldr	r3, [r7, #8]
 800efe6:	2b00      	cmp	r3, #0
 800efe8:	d00f      	beq.n	800f00a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800efea:	68bb      	ldr	r3, [r7, #8]
 800efec:	015a      	lsls	r2, r3, #5
 800efee:	68fb      	ldr	r3, [r7, #12]
 800eff0:	4413      	add	r3, r2
 800eff2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800eff6:	681b      	ldr	r3, [r3, #0]
 800eff8:	68ba      	ldr	r2, [r7, #8]
 800effa:	0151      	lsls	r1, r2, #5
 800effc:	68fa      	ldr	r2, [r7, #12]
 800effe:	440a      	add	r2, r1
 800f000:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f004:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800f008:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800f00a:	68bb      	ldr	r3, [r7, #8]
 800f00c:	015a      	lsls	r2, r3, #5
 800f00e:	68fb      	ldr	r3, [r7, #12]
 800f010:	4413      	add	r3, r2
 800f012:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f016:	681b      	ldr	r3, [r3, #0]
 800f018:	68ba      	ldr	r2, [r7, #8]
 800f01a:	0151      	lsls	r1, r2, #5
 800f01c:	68fa      	ldr	r2, [r7, #12]
 800f01e:	440a      	add	r2, r1
 800f020:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f024:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800f028:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800f02a:	2300      	movs	r3, #0
}
 800f02c:	4618      	mov	r0, r3
 800f02e:	3714      	adds	r7, #20
 800f030:	46bd      	mov	sp, r7
 800f032:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f036:	4770      	bx	lr

0800f038 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800f038:	b480      	push	{r7}
 800f03a:	b085      	sub	sp, #20
 800f03c:	af00      	add	r7, sp, #0
 800f03e:	6078      	str	r0, [r7, #4]
 800f040:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f042:	687b      	ldr	r3, [r7, #4]
 800f044:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800f046:	683b      	ldr	r3, [r7, #0]
 800f048:	781b      	ldrb	r3, [r3, #0]
 800f04a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800f04c:	683b      	ldr	r3, [r7, #0]
 800f04e:	785b      	ldrb	r3, [r3, #1]
 800f050:	2b01      	cmp	r3, #1
 800f052:	d128      	bne.n	800f0a6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800f054:	68bb      	ldr	r3, [r7, #8]
 800f056:	015a      	lsls	r2, r3, #5
 800f058:	68fb      	ldr	r3, [r7, #12]
 800f05a:	4413      	add	r3, r2
 800f05c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f060:	681b      	ldr	r3, [r3, #0]
 800f062:	68ba      	ldr	r2, [r7, #8]
 800f064:	0151      	lsls	r1, r2, #5
 800f066:	68fa      	ldr	r2, [r7, #12]
 800f068:	440a      	add	r2, r1
 800f06a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f06e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800f072:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800f074:	683b      	ldr	r3, [r7, #0]
 800f076:	791b      	ldrb	r3, [r3, #4]
 800f078:	2b03      	cmp	r3, #3
 800f07a:	d003      	beq.n	800f084 <USB_EPClearStall+0x4c>
 800f07c:	683b      	ldr	r3, [r7, #0]
 800f07e:	791b      	ldrb	r3, [r3, #4]
 800f080:	2b02      	cmp	r3, #2
 800f082:	d138      	bne.n	800f0f6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800f084:	68bb      	ldr	r3, [r7, #8]
 800f086:	015a      	lsls	r2, r3, #5
 800f088:	68fb      	ldr	r3, [r7, #12]
 800f08a:	4413      	add	r3, r2
 800f08c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f090:	681b      	ldr	r3, [r3, #0]
 800f092:	68ba      	ldr	r2, [r7, #8]
 800f094:	0151      	lsls	r1, r2, #5
 800f096:	68fa      	ldr	r2, [r7, #12]
 800f098:	440a      	add	r2, r1
 800f09a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f09e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f0a2:	6013      	str	r3, [r2, #0]
 800f0a4:	e027      	b.n	800f0f6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800f0a6:	68bb      	ldr	r3, [r7, #8]
 800f0a8:	015a      	lsls	r2, r3, #5
 800f0aa:	68fb      	ldr	r3, [r7, #12]
 800f0ac:	4413      	add	r3, r2
 800f0ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f0b2:	681b      	ldr	r3, [r3, #0]
 800f0b4:	68ba      	ldr	r2, [r7, #8]
 800f0b6:	0151      	lsls	r1, r2, #5
 800f0b8:	68fa      	ldr	r2, [r7, #12]
 800f0ba:	440a      	add	r2, r1
 800f0bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f0c0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800f0c4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800f0c6:	683b      	ldr	r3, [r7, #0]
 800f0c8:	791b      	ldrb	r3, [r3, #4]
 800f0ca:	2b03      	cmp	r3, #3
 800f0cc:	d003      	beq.n	800f0d6 <USB_EPClearStall+0x9e>
 800f0ce:	683b      	ldr	r3, [r7, #0]
 800f0d0:	791b      	ldrb	r3, [r3, #4]
 800f0d2:	2b02      	cmp	r3, #2
 800f0d4:	d10f      	bne.n	800f0f6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800f0d6:	68bb      	ldr	r3, [r7, #8]
 800f0d8:	015a      	lsls	r2, r3, #5
 800f0da:	68fb      	ldr	r3, [r7, #12]
 800f0dc:	4413      	add	r3, r2
 800f0de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f0e2:	681b      	ldr	r3, [r3, #0]
 800f0e4:	68ba      	ldr	r2, [r7, #8]
 800f0e6:	0151      	lsls	r1, r2, #5
 800f0e8:	68fa      	ldr	r2, [r7, #12]
 800f0ea:	440a      	add	r2, r1
 800f0ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f0f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f0f4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800f0f6:	2300      	movs	r3, #0
}
 800f0f8:	4618      	mov	r0, r3
 800f0fa:	3714      	adds	r7, #20
 800f0fc:	46bd      	mov	sp, r7
 800f0fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f102:	4770      	bx	lr

0800f104 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800f104:	b480      	push	{r7}
 800f106:	b085      	sub	sp, #20
 800f108:	af00      	add	r7, sp, #0
 800f10a:	6078      	str	r0, [r7, #4]
 800f10c:	460b      	mov	r3, r1
 800f10e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f110:	687b      	ldr	r3, [r7, #4]
 800f112:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800f114:	68fb      	ldr	r3, [r7, #12]
 800f116:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f11a:	681b      	ldr	r3, [r3, #0]
 800f11c:	68fa      	ldr	r2, [r7, #12]
 800f11e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f122:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800f126:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800f128:	68fb      	ldr	r3, [r7, #12]
 800f12a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f12e:	681a      	ldr	r2, [r3, #0]
 800f130:	78fb      	ldrb	r3, [r7, #3]
 800f132:	011b      	lsls	r3, r3, #4
 800f134:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800f138:	68f9      	ldr	r1, [r7, #12]
 800f13a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f13e:	4313      	orrs	r3, r2
 800f140:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800f142:	2300      	movs	r3, #0
}
 800f144:	4618      	mov	r0, r3
 800f146:	3714      	adds	r7, #20
 800f148:	46bd      	mov	sp, r7
 800f14a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f14e:	4770      	bx	lr

0800f150 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800f150:	b480      	push	{r7}
 800f152:	b085      	sub	sp, #20
 800f154:	af00      	add	r7, sp, #0
 800f156:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f158:	687b      	ldr	r3, [r7, #4]
 800f15a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800f15c:	68fb      	ldr	r3, [r7, #12]
 800f15e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800f162:	681b      	ldr	r3, [r3, #0]
 800f164:	68fa      	ldr	r2, [r7, #12]
 800f166:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800f16a:	f023 0303 	bic.w	r3, r3, #3
 800f16e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800f170:	68fb      	ldr	r3, [r7, #12]
 800f172:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f176:	685b      	ldr	r3, [r3, #4]
 800f178:	68fa      	ldr	r2, [r7, #12]
 800f17a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f17e:	f023 0302 	bic.w	r3, r3, #2
 800f182:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800f184:	2300      	movs	r3, #0
}
 800f186:	4618      	mov	r0, r3
 800f188:	3714      	adds	r7, #20
 800f18a:	46bd      	mov	sp, r7
 800f18c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f190:	4770      	bx	lr

0800f192 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800f192:	b480      	push	{r7}
 800f194:	b085      	sub	sp, #20
 800f196:	af00      	add	r7, sp, #0
 800f198:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f19a:	687b      	ldr	r3, [r7, #4]
 800f19c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800f19e:	68fb      	ldr	r3, [r7, #12]
 800f1a0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800f1a4:	681b      	ldr	r3, [r3, #0]
 800f1a6:	68fa      	ldr	r2, [r7, #12]
 800f1a8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800f1ac:	f023 0303 	bic.w	r3, r3, #3
 800f1b0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800f1b2:	68fb      	ldr	r3, [r7, #12]
 800f1b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f1b8:	685b      	ldr	r3, [r3, #4]
 800f1ba:	68fa      	ldr	r2, [r7, #12]
 800f1bc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f1c0:	f043 0302 	orr.w	r3, r3, #2
 800f1c4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800f1c6:	2300      	movs	r3, #0
}
 800f1c8:	4618      	mov	r0, r3
 800f1ca:	3714      	adds	r7, #20
 800f1cc:	46bd      	mov	sp, r7
 800f1ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1d2:	4770      	bx	lr

0800f1d4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800f1d4:	b480      	push	{r7}
 800f1d6:	b085      	sub	sp, #20
 800f1d8:	af00      	add	r7, sp, #0
 800f1da:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800f1dc:	687b      	ldr	r3, [r7, #4]
 800f1de:	695b      	ldr	r3, [r3, #20]
 800f1e0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800f1e2:	687b      	ldr	r3, [r7, #4]
 800f1e4:	699b      	ldr	r3, [r3, #24]
 800f1e6:	68fa      	ldr	r2, [r7, #12]
 800f1e8:	4013      	ands	r3, r2
 800f1ea:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800f1ec:	68fb      	ldr	r3, [r7, #12]
}
 800f1ee:	4618      	mov	r0, r3
 800f1f0:	3714      	adds	r7, #20
 800f1f2:	46bd      	mov	sp, r7
 800f1f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1f8:	4770      	bx	lr

0800f1fa <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800f1fa:	b480      	push	{r7}
 800f1fc:	b085      	sub	sp, #20
 800f1fe:	af00      	add	r7, sp, #0
 800f200:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f202:	687b      	ldr	r3, [r7, #4]
 800f204:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800f206:	68fb      	ldr	r3, [r7, #12]
 800f208:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f20c:	699b      	ldr	r3, [r3, #24]
 800f20e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800f210:	68fb      	ldr	r3, [r7, #12]
 800f212:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f216:	69db      	ldr	r3, [r3, #28]
 800f218:	68ba      	ldr	r2, [r7, #8]
 800f21a:	4013      	ands	r3, r2
 800f21c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800f21e:	68bb      	ldr	r3, [r7, #8]
 800f220:	0c1b      	lsrs	r3, r3, #16
}
 800f222:	4618      	mov	r0, r3
 800f224:	3714      	adds	r7, #20
 800f226:	46bd      	mov	sp, r7
 800f228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f22c:	4770      	bx	lr

0800f22e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800f22e:	b480      	push	{r7}
 800f230:	b085      	sub	sp, #20
 800f232:	af00      	add	r7, sp, #0
 800f234:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f236:	687b      	ldr	r3, [r7, #4]
 800f238:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800f23a:	68fb      	ldr	r3, [r7, #12]
 800f23c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f240:	699b      	ldr	r3, [r3, #24]
 800f242:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800f244:	68fb      	ldr	r3, [r7, #12]
 800f246:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f24a:	69db      	ldr	r3, [r3, #28]
 800f24c:	68ba      	ldr	r2, [r7, #8]
 800f24e:	4013      	ands	r3, r2
 800f250:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800f252:	68bb      	ldr	r3, [r7, #8]
 800f254:	b29b      	uxth	r3, r3
}
 800f256:	4618      	mov	r0, r3
 800f258:	3714      	adds	r7, #20
 800f25a:	46bd      	mov	sp, r7
 800f25c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f260:	4770      	bx	lr

0800f262 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800f262:	b480      	push	{r7}
 800f264:	b085      	sub	sp, #20
 800f266:	af00      	add	r7, sp, #0
 800f268:	6078      	str	r0, [r7, #4]
 800f26a:	460b      	mov	r3, r1
 800f26c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f26e:	687b      	ldr	r3, [r7, #4]
 800f270:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800f272:	78fb      	ldrb	r3, [r7, #3]
 800f274:	015a      	lsls	r2, r3, #5
 800f276:	68fb      	ldr	r3, [r7, #12]
 800f278:	4413      	add	r3, r2
 800f27a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f27e:	689b      	ldr	r3, [r3, #8]
 800f280:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800f282:	68fb      	ldr	r3, [r7, #12]
 800f284:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f288:	695b      	ldr	r3, [r3, #20]
 800f28a:	68ba      	ldr	r2, [r7, #8]
 800f28c:	4013      	ands	r3, r2
 800f28e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800f290:	68bb      	ldr	r3, [r7, #8]
}
 800f292:	4618      	mov	r0, r3
 800f294:	3714      	adds	r7, #20
 800f296:	46bd      	mov	sp, r7
 800f298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f29c:	4770      	bx	lr

0800f29e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800f29e:	b480      	push	{r7}
 800f2a0:	b087      	sub	sp, #28
 800f2a2:	af00      	add	r7, sp, #0
 800f2a4:	6078      	str	r0, [r7, #4]
 800f2a6:	460b      	mov	r3, r1
 800f2a8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f2aa:	687b      	ldr	r3, [r7, #4]
 800f2ac:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800f2ae:	697b      	ldr	r3, [r7, #20]
 800f2b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f2b4:	691b      	ldr	r3, [r3, #16]
 800f2b6:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800f2b8:	697b      	ldr	r3, [r7, #20]
 800f2ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f2be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f2c0:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800f2c2:	78fb      	ldrb	r3, [r7, #3]
 800f2c4:	f003 030f 	and.w	r3, r3, #15
 800f2c8:	68fa      	ldr	r2, [r7, #12]
 800f2ca:	fa22 f303 	lsr.w	r3, r2, r3
 800f2ce:	01db      	lsls	r3, r3, #7
 800f2d0:	b2db      	uxtb	r3, r3
 800f2d2:	693a      	ldr	r2, [r7, #16]
 800f2d4:	4313      	orrs	r3, r2
 800f2d6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800f2d8:	78fb      	ldrb	r3, [r7, #3]
 800f2da:	015a      	lsls	r2, r3, #5
 800f2dc:	697b      	ldr	r3, [r7, #20]
 800f2de:	4413      	add	r3, r2
 800f2e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f2e4:	689b      	ldr	r3, [r3, #8]
 800f2e6:	693a      	ldr	r2, [r7, #16]
 800f2e8:	4013      	ands	r3, r2
 800f2ea:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800f2ec:	68bb      	ldr	r3, [r7, #8]
}
 800f2ee:	4618      	mov	r0, r3
 800f2f0:	371c      	adds	r7, #28
 800f2f2:	46bd      	mov	sp, r7
 800f2f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2f8:	4770      	bx	lr

0800f2fa <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800f2fa:	b480      	push	{r7}
 800f2fc:	b083      	sub	sp, #12
 800f2fe:	af00      	add	r7, sp, #0
 800f300:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800f302:	687b      	ldr	r3, [r7, #4]
 800f304:	695b      	ldr	r3, [r3, #20]
 800f306:	f003 0301 	and.w	r3, r3, #1
}
 800f30a:	4618      	mov	r0, r3
 800f30c:	370c      	adds	r7, #12
 800f30e:	46bd      	mov	sp, r7
 800f310:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f314:	4770      	bx	lr

0800f316 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800f316:	b480      	push	{r7}
 800f318:	b085      	sub	sp, #20
 800f31a:	af00      	add	r7, sp, #0
 800f31c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f31e:	687b      	ldr	r3, [r7, #4]
 800f320:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800f322:	68fb      	ldr	r3, [r7, #12]
 800f324:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f328:	681b      	ldr	r3, [r3, #0]
 800f32a:	68fa      	ldr	r2, [r7, #12]
 800f32c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f330:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800f334:	f023 0307 	bic.w	r3, r3, #7
 800f338:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800f33a:	68fb      	ldr	r3, [r7, #12]
 800f33c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f340:	685b      	ldr	r3, [r3, #4]
 800f342:	68fa      	ldr	r2, [r7, #12]
 800f344:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f348:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f34c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800f34e:	2300      	movs	r3, #0
}
 800f350:	4618      	mov	r0, r3
 800f352:	3714      	adds	r7, #20
 800f354:	46bd      	mov	sp, r7
 800f356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f35a:	4770      	bx	lr

0800f35c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800f35c:	b480      	push	{r7}
 800f35e:	b087      	sub	sp, #28
 800f360:	af00      	add	r7, sp, #0
 800f362:	60f8      	str	r0, [r7, #12]
 800f364:	460b      	mov	r3, r1
 800f366:	607a      	str	r2, [r7, #4]
 800f368:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f36a:	68fb      	ldr	r3, [r7, #12]
 800f36c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800f36e:	68fb      	ldr	r3, [r7, #12]
 800f370:	333c      	adds	r3, #60	; 0x3c
 800f372:	3304      	adds	r3, #4
 800f374:	681b      	ldr	r3, [r3, #0]
 800f376:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800f378:	693b      	ldr	r3, [r7, #16]
 800f37a:	4a26      	ldr	r2, [pc, #152]	; (800f414 <USB_EP0_OutStart+0xb8>)
 800f37c:	4293      	cmp	r3, r2
 800f37e:	d90a      	bls.n	800f396 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800f380:	697b      	ldr	r3, [r7, #20]
 800f382:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f386:	681b      	ldr	r3, [r3, #0]
 800f388:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f38c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f390:	d101      	bne.n	800f396 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800f392:	2300      	movs	r3, #0
 800f394:	e037      	b.n	800f406 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800f396:	697b      	ldr	r3, [r7, #20]
 800f398:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f39c:	461a      	mov	r2, r3
 800f39e:	2300      	movs	r3, #0
 800f3a0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800f3a2:	697b      	ldr	r3, [r7, #20]
 800f3a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f3a8:	691b      	ldr	r3, [r3, #16]
 800f3aa:	697a      	ldr	r2, [r7, #20]
 800f3ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f3b0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800f3b4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800f3b6:	697b      	ldr	r3, [r7, #20]
 800f3b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f3bc:	691b      	ldr	r3, [r3, #16]
 800f3be:	697a      	ldr	r2, [r7, #20]
 800f3c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f3c4:	f043 0318 	orr.w	r3, r3, #24
 800f3c8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800f3ca:	697b      	ldr	r3, [r7, #20]
 800f3cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f3d0:	691b      	ldr	r3, [r3, #16]
 800f3d2:	697a      	ldr	r2, [r7, #20]
 800f3d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f3d8:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800f3dc:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800f3de:	7afb      	ldrb	r3, [r7, #11]
 800f3e0:	2b01      	cmp	r3, #1
 800f3e2:	d10f      	bne.n	800f404 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800f3e4:	697b      	ldr	r3, [r7, #20]
 800f3e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f3ea:	461a      	mov	r2, r3
 800f3ec:	687b      	ldr	r3, [r7, #4]
 800f3ee:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800f3f0:	697b      	ldr	r3, [r7, #20]
 800f3f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f3f6:	681b      	ldr	r3, [r3, #0]
 800f3f8:	697a      	ldr	r2, [r7, #20]
 800f3fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f3fe:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800f402:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800f404:	2300      	movs	r3, #0
}
 800f406:	4618      	mov	r0, r3
 800f408:	371c      	adds	r7, #28
 800f40a:	46bd      	mov	sp, r7
 800f40c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f410:	4770      	bx	lr
 800f412:	bf00      	nop
 800f414:	4f54300a 	.word	0x4f54300a

0800f418 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800f418:	b480      	push	{r7}
 800f41a:	b085      	sub	sp, #20
 800f41c:	af00      	add	r7, sp, #0
 800f41e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800f420:	2300      	movs	r3, #0
 800f422:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800f424:	68fb      	ldr	r3, [r7, #12]
 800f426:	3301      	adds	r3, #1
 800f428:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800f42a:	68fb      	ldr	r3, [r7, #12]
 800f42c:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800f430:	d901      	bls.n	800f436 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800f432:	2303      	movs	r3, #3
 800f434:	e01b      	b.n	800f46e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800f436:	687b      	ldr	r3, [r7, #4]
 800f438:	691b      	ldr	r3, [r3, #16]
 800f43a:	2b00      	cmp	r3, #0
 800f43c:	daf2      	bge.n	800f424 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800f43e:	2300      	movs	r3, #0
 800f440:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800f442:	687b      	ldr	r3, [r7, #4]
 800f444:	691b      	ldr	r3, [r3, #16]
 800f446:	f043 0201 	orr.w	r2, r3, #1
 800f44a:	687b      	ldr	r3, [r7, #4]
 800f44c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800f44e:	68fb      	ldr	r3, [r7, #12]
 800f450:	3301      	adds	r3, #1
 800f452:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800f454:	68fb      	ldr	r3, [r7, #12]
 800f456:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800f45a:	d901      	bls.n	800f460 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800f45c:	2303      	movs	r3, #3
 800f45e:	e006      	b.n	800f46e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800f460:	687b      	ldr	r3, [r7, #4]
 800f462:	691b      	ldr	r3, [r3, #16]
 800f464:	f003 0301 	and.w	r3, r3, #1
 800f468:	2b01      	cmp	r3, #1
 800f46a:	d0f0      	beq.n	800f44e <USB_CoreReset+0x36>

  return HAL_OK;
 800f46c:	2300      	movs	r3, #0
}
 800f46e:	4618      	mov	r0, r3
 800f470:	3714      	adds	r7, #20
 800f472:	46bd      	mov	sp, r7
 800f474:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f478:	4770      	bx	lr
	...

0800f47c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800f47c:	b580      	push	{r7, lr}
 800f47e:	b084      	sub	sp, #16
 800f480:	af00      	add	r7, sp, #0
 800f482:	4603      	mov	r3, r0
 800f484:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800f486:	79fb      	ldrb	r3, [r7, #7]
 800f488:	4a08      	ldr	r2, [pc, #32]	; (800f4ac <disk_status+0x30>)
 800f48a:	009b      	lsls	r3, r3, #2
 800f48c:	4413      	add	r3, r2
 800f48e:	685b      	ldr	r3, [r3, #4]
 800f490:	685b      	ldr	r3, [r3, #4]
 800f492:	79fa      	ldrb	r2, [r7, #7]
 800f494:	4905      	ldr	r1, [pc, #20]	; (800f4ac <disk_status+0x30>)
 800f496:	440a      	add	r2, r1
 800f498:	7b12      	ldrb	r2, [r2, #12]
 800f49a:	4610      	mov	r0, r2
 800f49c:	4798      	blx	r3
 800f49e:	4603      	mov	r3, r0
 800f4a0:	73fb      	strb	r3, [r7, #15]
  return stat;
 800f4a2:	7bfb      	ldrb	r3, [r7, #15]
}
 800f4a4:	4618      	mov	r0, r3
 800f4a6:	3710      	adds	r7, #16
 800f4a8:	46bd      	mov	sp, r7
 800f4aa:	bd80      	pop	{r7, pc}
 800f4ac:	200053a4 	.word	0x200053a4

0800f4b0 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800f4b0:	b580      	push	{r7, lr}
 800f4b2:	b084      	sub	sp, #16
 800f4b4:	af00      	add	r7, sp, #0
 800f4b6:	4603      	mov	r3, r0
 800f4b8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800f4ba:	2300      	movs	r3, #0
 800f4bc:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800f4be:	79fb      	ldrb	r3, [r7, #7]
 800f4c0:	4a0d      	ldr	r2, [pc, #52]	; (800f4f8 <disk_initialize+0x48>)
 800f4c2:	5cd3      	ldrb	r3, [r2, r3]
 800f4c4:	2b00      	cmp	r3, #0
 800f4c6:	d111      	bne.n	800f4ec <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800f4c8:	79fb      	ldrb	r3, [r7, #7]
 800f4ca:	4a0b      	ldr	r2, [pc, #44]	; (800f4f8 <disk_initialize+0x48>)
 800f4cc:	2101      	movs	r1, #1
 800f4ce:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800f4d0:	79fb      	ldrb	r3, [r7, #7]
 800f4d2:	4a09      	ldr	r2, [pc, #36]	; (800f4f8 <disk_initialize+0x48>)
 800f4d4:	009b      	lsls	r3, r3, #2
 800f4d6:	4413      	add	r3, r2
 800f4d8:	685b      	ldr	r3, [r3, #4]
 800f4da:	681b      	ldr	r3, [r3, #0]
 800f4dc:	79fa      	ldrb	r2, [r7, #7]
 800f4de:	4906      	ldr	r1, [pc, #24]	; (800f4f8 <disk_initialize+0x48>)
 800f4e0:	440a      	add	r2, r1
 800f4e2:	7b12      	ldrb	r2, [r2, #12]
 800f4e4:	4610      	mov	r0, r2
 800f4e6:	4798      	blx	r3
 800f4e8:	4603      	mov	r3, r0
 800f4ea:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800f4ec:	7bfb      	ldrb	r3, [r7, #15]
}
 800f4ee:	4618      	mov	r0, r3
 800f4f0:	3710      	adds	r7, #16
 800f4f2:	46bd      	mov	sp, r7
 800f4f4:	bd80      	pop	{r7, pc}
 800f4f6:	bf00      	nop
 800f4f8:	200053a4 	.word	0x200053a4

0800f4fc <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800f4fc:	b590      	push	{r4, r7, lr}
 800f4fe:	b087      	sub	sp, #28
 800f500:	af00      	add	r7, sp, #0
 800f502:	60b9      	str	r1, [r7, #8]
 800f504:	607a      	str	r2, [r7, #4]
 800f506:	603b      	str	r3, [r7, #0]
 800f508:	4603      	mov	r3, r0
 800f50a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800f50c:	7bfb      	ldrb	r3, [r7, #15]
 800f50e:	4a0a      	ldr	r2, [pc, #40]	; (800f538 <disk_read+0x3c>)
 800f510:	009b      	lsls	r3, r3, #2
 800f512:	4413      	add	r3, r2
 800f514:	685b      	ldr	r3, [r3, #4]
 800f516:	689c      	ldr	r4, [r3, #8]
 800f518:	7bfb      	ldrb	r3, [r7, #15]
 800f51a:	4a07      	ldr	r2, [pc, #28]	; (800f538 <disk_read+0x3c>)
 800f51c:	4413      	add	r3, r2
 800f51e:	7b18      	ldrb	r0, [r3, #12]
 800f520:	683b      	ldr	r3, [r7, #0]
 800f522:	687a      	ldr	r2, [r7, #4]
 800f524:	68b9      	ldr	r1, [r7, #8]
 800f526:	47a0      	blx	r4
 800f528:	4603      	mov	r3, r0
 800f52a:	75fb      	strb	r3, [r7, #23]
  return res;
 800f52c:	7dfb      	ldrb	r3, [r7, #23]
}
 800f52e:	4618      	mov	r0, r3
 800f530:	371c      	adds	r7, #28
 800f532:	46bd      	mov	sp, r7
 800f534:	bd90      	pop	{r4, r7, pc}
 800f536:	bf00      	nop
 800f538:	200053a4 	.word	0x200053a4

0800f53c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800f53c:	b590      	push	{r4, r7, lr}
 800f53e:	b087      	sub	sp, #28
 800f540:	af00      	add	r7, sp, #0
 800f542:	60b9      	str	r1, [r7, #8]
 800f544:	607a      	str	r2, [r7, #4]
 800f546:	603b      	str	r3, [r7, #0]
 800f548:	4603      	mov	r3, r0
 800f54a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800f54c:	7bfb      	ldrb	r3, [r7, #15]
 800f54e:	4a0a      	ldr	r2, [pc, #40]	; (800f578 <disk_write+0x3c>)
 800f550:	009b      	lsls	r3, r3, #2
 800f552:	4413      	add	r3, r2
 800f554:	685b      	ldr	r3, [r3, #4]
 800f556:	68dc      	ldr	r4, [r3, #12]
 800f558:	7bfb      	ldrb	r3, [r7, #15]
 800f55a:	4a07      	ldr	r2, [pc, #28]	; (800f578 <disk_write+0x3c>)
 800f55c:	4413      	add	r3, r2
 800f55e:	7b18      	ldrb	r0, [r3, #12]
 800f560:	683b      	ldr	r3, [r7, #0]
 800f562:	687a      	ldr	r2, [r7, #4]
 800f564:	68b9      	ldr	r1, [r7, #8]
 800f566:	47a0      	blx	r4
 800f568:	4603      	mov	r3, r0
 800f56a:	75fb      	strb	r3, [r7, #23]
  return res;
 800f56c:	7dfb      	ldrb	r3, [r7, #23]
}
 800f56e:	4618      	mov	r0, r3
 800f570:	371c      	adds	r7, #28
 800f572:	46bd      	mov	sp, r7
 800f574:	bd90      	pop	{r4, r7, pc}
 800f576:	bf00      	nop
 800f578:	200053a4 	.word	0x200053a4

0800f57c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800f57c:	b580      	push	{r7, lr}
 800f57e:	b084      	sub	sp, #16
 800f580:	af00      	add	r7, sp, #0
 800f582:	4603      	mov	r3, r0
 800f584:	603a      	str	r2, [r7, #0]
 800f586:	71fb      	strb	r3, [r7, #7]
 800f588:	460b      	mov	r3, r1
 800f58a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800f58c:	79fb      	ldrb	r3, [r7, #7]
 800f58e:	4a09      	ldr	r2, [pc, #36]	; (800f5b4 <disk_ioctl+0x38>)
 800f590:	009b      	lsls	r3, r3, #2
 800f592:	4413      	add	r3, r2
 800f594:	685b      	ldr	r3, [r3, #4]
 800f596:	691b      	ldr	r3, [r3, #16]
 800f598:	79fa      	ldrb	r2, [r7, #7]
 800f59a:	4906      	ldr	r1, [pc, #24]	; (800f5b4 <disk_ioctl+0x38>)
 800f59c:	440a      	add	r2, r1
 800f59e:	7b10      	ldrb	r0, [r2, #12]
 800f5a0:	79b9      	ldrb	r1, [r7, #6]
 800f5a2:	683a      	ldr	r2, [r7, #0]
 800f5a4:	4798      	blx	r3
 800f5a6:	4603      	mov	r3, r0
 800f5a8:	73fb      	strb	r3, [r7, #15]
  return res;
 800f5aa:	7bfb      	ldrb	r3, [r7, #15]
}
 800f5ac:	4618      	mov	r0, r3
 800f5ae:	3710      	adds	r7, #16
 800f5b0:	46bd      	mov	sp, r7
 800f5b2:	bd80      	pop	{r7, pc}
 800f5b4:	200053a4 	.word	0x200053a4

0800f5b8 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
__weak DWORD get_fattime (void)
{
 800f5b8:	b480      	push	{r7}
 800f5ba:	af00      	add	r7, sp, #0
  return 0;
 800f5bc:	2300      	movs	r3, #0
}
 800f5be:	4618      	mov	r0, r3
 800f5c0:	46bd      	mov	sp, r7
 800f5c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5c6:	4770      	bx	lr

0800f5c8 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800f5c8:	b480      	push	{r7}
 800f5ca:	b085      	sub	sp, #20
 800f5cc:	af00      	add	r7, sp, #0
 800f5ce:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800f5d0:	687b      	ldr	r3, [r7, #4]
 800f5d2:	3301      	adds	r3, #1
 800f5d4:	781b      	ldrb	r3, [r3, #0]
 800f5d6:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800f5d8:	89fb      	ldrh	r3, [r7, #14]
 800f5da:	021b      	lsls	r3, r3, #8
 800f5dc:	b21a      	sxth	r2, r3
 800f5de:	687b      	ldr	r3, [r7, #4]
 800f5e0:	781b      	ldrb	r3, [r3, #0]
 800f5e2:	b21b      	sxth	r3, r3
 800f5e4:	4313      	orrs	r3, r2
 800f5e6:	b21b      	sxth	r3, r3
 800f5e8:	81fb      	strh	r3, [r7, #14]
	return rv;
 800f5ea:	89fb      	ldrh	r3, [r7, #14]
}
 800f5ec:	4618      	mov	r0, r3
 800f5ee:	3714      	adds	r7, #20
 800f5f0:	46bd      	mov	sp, r7
 800f5f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5f6:	4770      	bx	lr

0800f5f8 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800f5f8:	b480      	push	{r7}
 800f5fa:	b085      	sub	sp, #20
 800f5fc:	af00      	add	r7, sp, #0
 800f5fe:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800f600:	687b      	ldr	r3, [r7, #4]
 800f602:	3303      	adds	r3, #3
 800f604:	781b      	ldrb	r3, [r3, #0]
 800f606:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800f608:	68fb      	ldr	r3, [r7, #12]
 800f60a:	021b      	lsls	r3, r3, #8
 800f60c:	687a      	ldr	r2, [r7, #4]
 800f60e:	3202      	adds	r2, #2
 800f610:	7812      	ldrb	r2, [r2, #0]
 800f612:	4313      	orrs	r3, r2
 800f614:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800f616:	68fb      	ldr	r3, [r7, #12]
 800f618:	021b      	lsls	r3, r3, #8
 800f61a:	687a      	ldr	r2, [r7, #4]
 800f61c:	3201      	adds	r2, #1
 800f61e:	7812      	ldrb	r2, [r2, #0]
 800f620:	4313      	orrs	r3, r2
 800f622:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800f624:	68fb      	ldr	r3, [r7, #12]
 800f626:	021b      	lsls	r3, r3, #8
 800f628:	687a      	ldr	r2, [r7, #4]
 800f62a:	7812      	ldrb	r2, [r2, #0]
 800f62c:	4313      	orrs	r3, r2
 800f62e:	60fb      	str	r3, [r7, #12]
	return rv;
 800f630:	68fb      	ldr	r3, [r7, #12]
}
 800f632:	4618      	mov	r0, r3
 800f634:	3714      	adds	r7, #20
 800f636:	46bd      	mov	sp, r7
 800f638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f63c:	4770      	bx	lr

0800f63e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800f63e:	b480      	push	{r7}
 800f640:	b083      	sub	sp, #12
 800f642:	af00      	add	r7, sp, #0
 800f644:	6078      	str	r0, [r7, #4]
 800f646:	460b      	mov	r3, r1
 800f648:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800f64a:	687b      	ldr	r3, [r7, #4]
 800f64c:	1c5a      	adds	r2, r3, #1
 800f64e:	607a      	str	r2, [r7, #4]
 800f650:	887a      	ldrh	r2, [r7, #2]
 800f652:	b2d2      	uxtb	r2, r2
 800f654:	701a      	strb	r2, [r3, #0]
 800f656:	887b      	ldrh	r3, [r7, #2]
 800f658:	0a1b      	lsrs	r3, r3, #8
 800f65a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800f65c:	687b      	ldr	r3, [r7, #4]
 800f65e:	1c5a      	adds	r2, r3, #1
 800f660:	607a      	str	r2, [r7, #4]
 800f662:	887a      	ldrh	r2, [r7, #2]
 800f664:	b2d2      	uxtb	r2, r2
 800f666:	701a      	strb	r2, [r3, #0]
}
 800f668:	bf00      	nop
 800f66a:	370c      	adds	r7, #12
 800f66c:	46bd      	mov	sp, r7
 800f66e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f672:	4770      	bx	lr

0800f674 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800f674:	b480      	push	{r7}
 800f676:	b083      	sub	sp, #12
 800f678:	af00      	add	r7, sp, #0
 800f67a:	6078      	str	r0, [r7, #4]
 800f67c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800f67e:	687b      	ldr	r3, [r7, #4]
 800f680:	1c5a      	adds	r2, r3, #1
 800f682:	607a      	str	r2, [r7, #4]
 800f684:	683a      	ldr	r2, [r7, #0]
 800f686:	b2d2      	uxtb	r2, r2
 800f688:	701a      	strb	r2, [r3, #0]
 800f68a:	683b      	ldr	r3, [r7, #0]
 800f68c:	0a1b      	lsrs	r3, r3, #8
 800f68e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800f690:	687b      	ldr	r3, [r7, #4]
 800f692:	1c5a      	adds	r2, r3, #1
 800f694:	607a      	str	r2, [r7, #4]
 800f696:	683a      	ldr	r2, [r7, #0]
 800f698:	b2d2      	uxtb	r2, r2
 800f69a:	701a      	strb	r2, [r3, #0]
 800f69c:	683b      	ldr	r3, [r7, #0]
 800f69e:	0a1b      	lsrs	r3, r3, #8
 800f6a0:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800f6a2:	687b      	ldr	r3, [r7, #4]
 800f6a4:	1c5a      	adds	r2, r3, #1
 800f6a6:	607a      	str	r2, [r7, #4]
 800f6a8:	683a      	ldr	r2, [r7, #0]
 800f6aa:	b2d2      	uxtb	r2, r2
 800f6ac:	701a      	strb	r2, [r3, #0]
 800f6ae:	683b      	ldr	r3, [r7, #0]
 800f6b0:	0a1b      	lsrs	r3, r3, #8
 800f6b2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800f6b4:	687b      	ldr	r3, [r7, #4]
 800f6b6:	1c5a      	adds	r2, r3, #1
 800f6b8:	607a      	str	r2, [r7, #4]
 800f6ba:	683a      	ldr	r2, [r7, #0]
 800f6bc:	b2d2      	uxtb	r2, r2
 800f6be:	701a      	strb	r2, [r3, #0]
}
 800f6c0:	bf00      	nop
 800f6c2:	370c      	adds	r7, #12
 800f6c4:	46bd      	mov	sp, r7
 800f6c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6ca:	4770      	bx	lr

0800f6cc <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800f6cc:	b480      	push	{r7}
 800f6ce:	b087      	sub	sp, #28
 800f6d0:	af00      	add	r7, sp, #0
 800f6d2:	60f8      	str	r0, [r7, #12]
 800f6d4:	60b9      	str	r1, [r7, #8]
 800f6d6:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800f6d8:	68fb      	ldr	r3, [r7, #12]
 800f6da:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800f6dc:	68bb      	ldr	r3, [r7, #8]
 800f6de:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800f6e0:	687b      	ldr	r3, [r7, #4]
 800f6e2:	2b00      	cmp	r3, #0
 800f6e4:	d00d      	beq.n	800f702 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800f6e6:	693a      	ldr	r2, [r7, #16]
 800f6e8:	1c53      	adds	r3, r2, #1
 800f6ea:	613b      	str	r3, [r7, #16]
 800f6ec:	697b      	ldr	r3, [r7, #20]
 800f6ee:	1c59      	adds	r1, r3, #1
 800f6f0:	6179      	str	r1, [r7, #20]
 800f6f2:	7812      	ldrb	r2, [r2, #0]
 800f6f4:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800f6f6:	687b      	ldr	r3, [r7, #4]
 800f6f8:	3b01      	subs	r3, #1
 800f6fa:	607b      	str	r3, [r7, #4]
 800f6fc:	687b      	ldr	r3, [r7, #4]
 800f6fe:	2b00      	cmp	r3, #0
 800f700:	d1f1      	bne.n	800f6e6 <mem_cpy+0x1a>
	}
}
 800f702:	bf00      	nop
 800f704:	371c      	adds	r7, #28
 800f706:	46bd      	mov	sp, r7
 800f708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f70c:	4770      	bx	lr

0800f70e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800f70e:	b480      	push	{r7}
 800f710:	b087      	sub	sp, #28
 800f712:	af00      	add	r7, sp, #0
 800f714:	60f8      	str	r0, [r7, #12]
 800f716:	60b9      	str	r1, [r7, #8]
 800f718:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800f71a:	68fb      	ldr	r3, [r7, #12]
 800f71c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800f71e:	697b      	ldr	r3, [r7, #20]
 800f720:	1c5a      	adds	r2, r3, #1
 800f722:	617a      	str	r2, [r7, #20]
 800f724:	68ba      	ldr	r2, [r7, #8]
 800f726:	b2d2      	uxtb	r2, r2
 800f728:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800f72a:	687b      	ldr	r3, [r7, #4]
 800f72c:	3b01      	subs	r3, #1
 800f72e:	607b      	str	r3, [r7, #4]
 800f730:	687b      	ldr	r3, [r7, #4]
 800f732:	2b00      	cmp	r3, #0
 800f734:	d1f3      	bne.n	800f71e <mem_set+0x10>
}
 800f736:	bf00      	nop
 800f738:	bf00      	nop
 800f73a:	371c      	adds	r7, #28
 800f73c:	46bd      	mov	sp, r7
 800f73e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f742:	4770      	bx	lr

0800f744 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800f744:	b480      	push	{r7}
 800f746:	b089      	sub	sp, #36	; 0x24
 800f748:	af00      	add	r7, sp, #0
 800f74a:	60f8      	str	r0, [r7, #12]
 800f74c:	60b9      	str	r1, [r7, #8]
 800f74e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800f750:	68fb      	ldr	r3, [r7, #12]
 800f752:	61fb      	str	r3, [r7, #28]
 800f754:	68bb      	ldr	r3, [r7, #8]
 800f756:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800f758:	2300      	movs	r3, #0
 800f75a:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800f75c:	69fb      	ldr	r3, [r7, #28]
 800f75e:	1c5a      	adds	r2, r3, #1
 800f760:	61fa      	str	r2, [r7, #28]
 800f762:	781b      	ldrb	r3, [r3, #0]
 800f764:	4619      	mov	r1, r3
 800f766:	69bb      	ldr	r3, [r7, #24]
 800f768:	1c5a      	adds	r2, r3, #1
 800f76a:	61ba      	str	r2, [r7, #24]
 800f76c:	781b      	ldrb	r3, [r3, #0]
 800f76e:	1acb      	subs	r3, r1, r3
 800f770:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800f772:	687b      	ldr	r3, [r7, #4]
 800f774:	3b01      	subs	r3, #1
 800f776:	607b      	str	r3, [r7, #4]
 800f778:	687b      	ldr	r3, [r7, #4]
 800f77a:	2b00      	cmp	r3, #0
 800f77c:	d002      	beq.n	800f784 <mem_cmp+0x40>
 800f77e:	697b      	ldr	r3, [r7, #20]
 800f780:	2b00      	cmp	r3, #0
 800f782:	d0eb      	beq.n	800f75c <mem_cmp+0x18>

	return r;
 800f784:	697b      	ldr	r3, [r7, #20]
}
 800f786:	4618      	mov	r0, r3
 800f788:	3724      	adds	r7, #36	; 0x24
 800f78a:	46bd      	mov	sp, r7
 800f78c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f790:	4770      	bx	lr

0800f792 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800f792:	b480      	push	{r7}
 800f794:	b083      	sub	sp, #12
 800f796:	af00      	add	r7, sp, #0
 800f798:	6078      	str	r0, [r7, #4]
 800f79a:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800f79c:	e002      	b.n	800f7a4 <chk_chr+0x12>
 800f79e:	687b      	ldr	r3, [r7, #4]
 800f7a0:	3301      	adds	r3, #1
 800f7a2:	607b      	str	r3, [r7, #4]
 800f7a4:	687b      	ldr	r3, [r7, #4]
 800f7a6:	781b      	ldrb	r3, [r3, #0]
 800f7a8:	2b00      	cmp	r3, #0
 800f7aa:	d005      	beq.n	800f7b8 <chk_chr+0x26>
 800f7ac:	687b      	ldr	r3, [r7, #4]
 800f7ae:	781b      	ldrb	r3, [r3, #0]
 800f7b0:	461a      	mov	r2, r3
 800f7b2:	683b      	ldr	r3, [r7, #0]
 800f7b4:	4293      	cmp	r3, r2
 800f7b6:	d1f2      	bne.n	800f79e <chk_chr+0xc>
	return *str;
 800f7b8:	687b      	ldr	r3, [r7, #4]
 800f7ba:	781b      	ldrb	r3, [r3, #0]
}
 800f7bc:	4618      	mov	r0, r3
 800f7be:	370c      	adds	r7, #12
 800f7c0:	46bd      	mov	sp, r7
 800f7c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7c6:	4770      	bx	lr

0800f7c8 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800f7c8:	b480      	push	{r7}
 800f7ca:	b085      	sub	sp, #20
 800f7cc:	af00      	add	r7, sp, #0
 800f7ce:	6078      	str	r0, [r7, #4]
 800f7d0:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800f7d2:	2300      	movs	r3, #0
 800f7d4:	60bb      	str	r3, [r7, #8]
 800f7d6:	68bb      	ldr	r3, [r7, #8]
 800f7d8:	60fb      	str	r3, [r7, #12]
 800f7da:	e029      	b.n	800f830 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800f7dc:	4a27      	ldr	r2, [pc, #156]	; (800f87c <chk_lock+0xb4>)
 800f7de:	68fb      	ldr	r3, [r7, #12]
 800f7e0:	011b      	lsls	r3, r3, #4
 800f7e2:	4413      	add	r3, r2
 800f7e4:	681b      	ldr	r3, [r3, #0]
 800f7e6:	2b00      	cmp	r3, #0
 800f7e8:	d01d      	beq.n	800f826 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800f7ea:	4a24      	ldr	r2, [pc, #144]	; (800f87c <chk_lock+0xb4>)
 800f7ec:	68fb      	ldr	r3, [r7, #12]
 800f7ee:	011b      	lsls	r3, r3, #4
 800f7f0:	4413      	add	r3, r2
 800f7f2:	681a      	ldr	r2, [r3, #0]
 800f7f4:	687b      	ldr	r3, [r7, #4]
 800f7f6:	681b      	ldr	r3, [r3, #0]
 800f7f8:	429a      	cmp	r2, r3
 800f7fa:	d116      	bne.n	800f82a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800f7fc:	4a1f      	ldr	r2, [pc, #124]	; (800f87c <chk_lock+0xb4>)
 800f7fe:	68fb      	ldr	r3, [r7, #12]
 800f800:	011b      	lsls	r3, r3, #4
 800f802:	4413      	add	r3, r2
 800f804:	3304      	adds	r3, #4
 800f806:	681a      	ldr	r2, [r3, #0]
 800f808:	687b      	ldr	r3, [r7, #4]
 800f80a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800f80c:	429a      	cmp	r2, r3
 800f80e:	d10c      	bne.n	800f82a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800f810:	4a1a      	ldr	r2, [pc, #104]	; (800f87c <chk_lock+0xb4>)
 800f812:	68fb      	ldr	r3, [r7, #12]
 800f814:	011b      	lsls	r3, r3, #4
 800f816:	4413      	add	r3, r2
 800f818:	3308      	adds	r3, #8
 800f81a:	681a      	ldr	r2, [r3, #0]
 800f81c:	687b      	ldr	r3, [r7, #4]
 800f81e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800f820:	429a      	cmp	r2, r3
 800f822:	d102      	bne.n	800f82a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800f824:	e007      	b.n	800f836 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800f826:	2301      	movs	r3, #1
 800f828:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800f82a:	68fb      	ldr	r3, [r7, #12]
 800f82c:	3301      	adds	r3, #1
 800f82e:	60fb      	str	r3, [r7, #12]
 800f830:	68fb      	ldr	r3, [r7, #12]
 800f832:	2b01      	cmp	r3, #1
 800f834:	d9d2      	bls.n	800f7dc <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800f836:	68fb      	ldr	r3, [r7, #12]
 800f838:	2b02      	cmp	r3, #2
 800f83a:	d109      	bne.n	800f850 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800f83c:	68bb      	ldr	r3, [r7, #8]
 800f83e:	2b00      	cmp	r3, #0
 800f840:	d102      	bne.n	800f848 <chk_lock+0x80>
 800f842:	683b      	ldr	r3, [r7, #0]
 800f844:	2b02      	cmp	r3, #2
 800f846:	d101      	bne.n	800f84c <chk_lock+0x84>
 800f848:	2300      	movs	r3, #0
 800f84a:	e010      	b.n	800f86e <chk_lock+0xa6>
 800f84c:	2312      	movs	r3, #18
 800f84e:	e00e      	b.n	800f86e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800f850:	683b      	ldr	r3, [r7, #0]
 800f852:	2b00      	cmp	r3, #0
 800f854:	d108      	bne.n	800f868 <chk_lock+0xa0>
 800f856:	4a09      	ldr	r2, [pc, #36]	; (800f87c <chk_lock+0xb4>)
 800f858:	68fb      	ldr	r3, [r7, #12]
 800f85a:	011b      	lsls	r3, r3, #4
 800f85c:	4413      	add	r3, r2
 800f85e:	330c      	adds	r3, #12
 800f860:	881b      	ldrh	r3, [r3, #0]
 800f862:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f866:	d101      	bne.n	800f86c <chk_lock+0xa4>
 800f868:	2310      	movs	r3, #16
 800f86a:	e000      	b.n	800f86e <chk_lock+0xa6>
 800f86c:	2300      	movs	r3, #0
}
 800f86e:	4618      	mov	r0, r3
 800f870:	3714      	adds	r7, #20
 800f872:	46bd      	mov	sp, r7
 800f874:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f878:	4770      	bx	lr
 800f87a:	bf00      	nop
 800f87c:	20005384 	.word	0x20005384

0800f880 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800f880:	b480      	push	{r7}
 800f882:	b083      	sub	sp, #12
 800f884:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800f886:	2300      	movs	r3, #0
 800f888:	607b      	str	r3, [r7, #4]
 800f88a:	e002      	b.n	800f892 <enq_lock+0x12>
 800f88c:	687b      	ldr	r3, [r7, #4]
 800f88e:	3301      	adds	r3, #1
 800f890:	607b      	str	r3, [r7, #4]
 800f892:	687b      	ldr	r3, [r7, #4]
 800f894:	2b01      	cmp	r3, #1
 800f896:	d806      	bhi.n	800f8a6 <enq_lock+0x26>
 800f898:	4a09      	ldr	r2, [pc, #36]	; (800f8c0 <enq_lock+0x40>)
 800f89a:	687b      	ldr	r3, [r7, #4]
 800f89c:	011b      	lsls	r3, r3, #4
 800f89e:	4413      	add	r3, r2
 800f8a0:	681b      	ldr	r3, [r3, #0]
 800f8a2:	2b00      	cmp	r3, #0
 800f8a4:	d1f2      	bne.n	800f88c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800f8a6:	687b      	ldr	r3, [r7, #4]
 800f8a8:	2b02      	cmp	r3, #2
 800f8aa:	bf14      	ite	ne
 800f8ac:	2301      	movne	r3, #1
 800f8ae:	2300      	moveq	r3, #0
 800f8b0:	b2db      	uxtb	r3, r3
}
 800f8b2:	4618      	mov	r0, r3
 800f8b4:	370c      	adds	r7, #12
 800f8b6:	46bd      	mov	sp, r7
 800f8b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8bc:	4770      	bx	lr
 800f8be:	bf00      	nop
 800f8c0:	20005384 	.word	0x20005384

0800f8c4 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800f8c4:	b480      	push	{r7}
 800f8c6:	b085      	sub	sp, #20
 800f8c8:	af00      	add	r7, sp, #0
 800f8ca:	6078      	str	r0, [r7, #4]
 800f8cc:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800f8ce:	2300      	movs	r3, #0
 800f8d0:	60fb      	str	r3, [r7, #12]
 800f8d2:	e01f      	b.n	800f914 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800f8d4:	4a41      	ldr	r2, [pc, #260]	; (800f9dc <inc_lock+0x118>)
 800f8d6:	68fb      	ldr	r3, [r7, #12]
 800f8d8:	011b      	lsls	r3, r3, #4
 800f8da:	4413      	add	r3, r2
 800f8dc:	681a      	ldr	r2, [r3, #0]
 800f8de:	687b      	ldr	r3, [r7, #4]
 800f8e0:	681b      	ldr	r3, [r3, #0]
 800f8e2:	429a      	cmp	r2, r3
 800f8e4:	d113      	bne.n	800f90e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800f8e6:	4a3d      	ldr	r2, [pc, #244]	; (800f9dc <inc_lock+0x118>)
 800f8e8:	68fb      	ldr	r3, [r7, #12]
 800f8ea:	011b      	lsls	r3, r3, #4
 800f8ec:	4413      	add	r3, r2
 800f8ee:	3304      	adds	r3, #4
 800f8f0:	681a      	ldr	r2, [r3, #0]
 800f8f2:	687b      	ldr	r3, [r7, #4]
 800f8f4:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800f8f6:	429a      	cmp	r2, r3
 800f8f8:	d109      	bne.n	800f90e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800f8fa:	4a38      	ldr	r2, [pc, #224]	; (800f9dc <inc_lock+0x118>)
 800f8fc:	68fb      	ldr	r3, [r7, #12]
 800f8fe:	011b      	lsls	r3, r3, #4
 800f900:	4413      	add	r3, r2
 800f902:	3308      	adds	r3, #8
 800f904:	681a      	ldr	r2, [r3, #0]
 800f906:	687b      	ldr	r3, [r7, #4]
 800f908:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800f90a:	429a      	cmp	r2, r3
 800f90c:	d006      	beq.n	800f91c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800f90e:	68fb      	ldr	r3, [r7, #12]
 800f910:	3301      	adds	r3, #1
 800f912:	60fb      	str	r3, [r7, #12]
 800f914:	68fb      	ldr	r3, [r7, #12]
 800f916:	2b01      	cmp	r3, #1
 800f918:	d9dc      	bls.n	800f8d4 <inc_lock+0x10>
 800f91a:	e000      	b.n	800f91e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800f91c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800f91e:	68fb      	ldr	r3, [r7, #12]
 800f920:	2b02      	cmp	r3, #2
 800f922:	d132      	bne.n	800f98a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800f924:	2300      	movs	r3, #0
 800f926:	60fb      	str	r3, [r7, #12]
 800f928:	e002      	b.n	800f930 <inc_lock+0x6c>
 800f92a:	68fb      	ldr	r3, [r7, #12]
 800f92c:	3301      	adds	r3, #1
 800f92e:	60fb      	str	r3, [r7, #12]
 800f930:	68fb      	ldr	r3, [r7, #12]
 800f932:	2b01      	cmp	r3, #1
 800f934:	d806      	bhi.n	800f944 <inc_lock+0x80>
 800f936:	4a29      	ldr	r2, [pc, #164]	; (800f9dc <inc_lock+0x118>)
 800f938:	68fb      	ldr	r3, [r7, #12]
 800f93a:	011b      	lsls	r3, r3, #4
 800f93c:	4413      	add	r3, r2
 800f93e:	681b      	ldr	r3, [r3, #0]
 800f940:	2b00      	cmp	r3, #0
 800f942:	d1f2      	bne.n	800f92a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800f944:	68fb      	ldr	r3, [r7, #12]
 800f946:	2b02      	cmp	r3, #2
 800f948:	d101      	bne.n	800f94e <inc_lock+0x8a>
 800f94a:	2300      	movs	r3, #0
 800f94c:	e040      	b.n	800f9d0 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800f94e:	687b      	ldr	r3, [r7, #4]
 800f950:	681a      	ldr	r2, [r3, #0]
 800f952:	4922      	ldr	r1, [pc, #136]	; (800f9dc <inc_lock+0x118>)
 800f954:	68fb      	ldr	r3, [r7, #12]
 800f956:	011b      	lsls	r3, r3, #4
 800f958:	440b      	add	r3, r1
 800f95a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800f95c:	687b      	ldr	r3, [r7, #4]
 800f95e:	689a      	ldr	r2, [r3, #8]
 800f960:	491e      	ldr	r1, [pc, #120]	; (800f9dc <inc_lock+0x118>)
 800f962:	68fb      	ldr	r3, [r7, #12]
 800f964:	011b      	lsls	r3, r3, #4
 800f966:	440b      	add	r3, r1
 800f968:	3304      	adds	r3, #4
 800f96a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800f96c:	687b      	ldr	r3, [r7, #4]
 800f96e:	695a      	ldr	r2, [r3, #20]
 800f970:	491a      	ldr	r1, [pc, #104]	; (800f9dc <inc_lock+0x118>)
 800f972:	68fb      	ldr	r3, [r7, #12]
 800f974:	011b      	lsls	r3, r3, #4
 800f976:	440b      	add	r3, r1
 800f978:	3308      	adds	r3, #8
 800f97a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800f97c:	4a17      	ldr	r2, [pc, #92]	; (800f9dc <inc_lock+0x118>)
 800f97e:	68fb      	ldr	r3, [r7, #12]
 800f980:	011b      	lsls	r3, r3, #4
 800f982:	4413      	add	r3, r2
 800f984:	330c      	adds	r3, #12
 800f986:	2200      	movs	r2, #0
 800f988:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800f98a:	683b      	ldr	r3, [r7, #0]
 800f98c:	2b00      	cmp	r3, #0
 800f98e:	d009      	beq.n	800f9a4 <inc_lock+0xe0>
 800f990:	4a12      	ldr	r2, [pc, #72]	; (800f9dc <inc_lock+0x118>)
 800f992:	68fb      	ldr	r3, [r7, #12]
 800f994:	011b      	lsls	r3, r3, #4
 800f996:	4413      	add	r3, r2
 800f998:	330c      	adds	r3, #12
 800f99a:	881b      	ldrh	r3, [r3, #0]
 800f99c:	2b00      	cmp	r3, #0
 800f99e:	d001      	beq.n	800f9a4 <inc_lock+0xe0>
 800f9a0:	2300      	movs	r3, #0
 800f9a2:	e015      	b.n	800f9d0 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800f9a4:	683b      	ldr	r3, [r7, #0]
 800f9a6:	2b00      	cmp	r3, #0
 800f9a8:	d108      	bne.n	800f9bc <inc_lock+0xf8>
 800f9aa:	4a0c      	ldr	r2, [pc, #48]	; (800f9dc <inc_lock+0x118>)
 800f9ac:	68fb      	ldr	r3, [r7, #12]
 800f9ae:	011b      	lsls	r3, r3, #4
 800f9b0:	4413      	add	r3, r2
 800f9b2:	330c      	adds	r3, #12
 800f9b4:	881b      	ldrh	r3, [r3, #0]
 800f9b6:	3301      	adds	r3, #1
 800f9b8:	b29a      	uxth	r2, r3
 800f9ba:	e001      	b.n	800f9c0 <inc_lock+0xfc>
 800f9bc:	f44f 7280 	mov.w	r2, #256	; 0x100
 800f9c0:	4906      	ldr	r1, [pc, #24]	; (800f9dc <inc_lock+0x118>)
 800f9c2:	68fb      	ldr	r3, [r7, #12]
 800f9c4:	011b      	lsls	r3, r3, #4
 800f9c6:	440b      	add	r3, r1
 800f9c8:	330c      	adds	r3, #12
 800f9ca:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800f9cc:	68fb      	ldr	r3, [r7, #12]
 800f9ce:	3301      	adds	r3, #1
}
 800f9d0:	4618      	mov	r0, r3
 800f9d2:	3714      	adds	r7, #20
 800f9d4:	46bd      	mov	sp, r7
 800f9d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9da:	4770      	bx	lr
 800f9dc:	20005384 	.word	0x20005384

0800f9e0 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800f9e0:	b480      	push	{r7}
 800f9e2:	b085      	sub	sp, #20
 800f9e4:	af00      	add	r7, sp, #0
 800f9e6:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800f9e8:	687b      	ldr	r3, [r7, #4]
 800f9ea:	3b01      	subs	r3, #1
 800f9ec:	607b      	str	r3, [r7, #4]
 800f9ee:	687b      	ldr	r3, [r7, #4]
 800f9f0:	2b01      	cmp	r3, #1
 800f9f2:	d825      	bhi.n	800fa40 <dec_lock+0x60>
		n = Files[i].ctr;
 800f9f4:	4a17      	ldr	r2, [pc, #92]	; (800fa54 <dec_lock+0x74>)
 800f9f6:	687b      	ldr	r3, [r7, #4]
 800f9f8:	011b      	lsls	r3, r3, #4
 800f9fa:	4413      	add	r3, r2
 800f9fc:	330c      	adds	r3, #12
 800f9fe:	881b      	ldrh	r3, [r3, #0]
 800fa00:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800fa02:	89fb      	ldrh	r3, [r7, #14]
 800fa04:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fa08:	d101      	bne.n	800fa0e <dec_lock+0x2e>
 800fa0a:	2300      	movs	r3, #0
 800fa0c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800fa0e:	89fb      	ldrh	r3, [r7, #14]
 800fa10:	2b00      	cmp	r3, #0
 800fa12:	d002      	beq.n	800fa1a <dec_lock+0x3a>
 800fa14:	89fb      	ldrh	r3, [r7, #14]
 800fa16:	3b01      	subs	r3, #1
 800fa18:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800fa1a:	4a0e      	ldr	r2, [pc, #56]	; (800fa54 <dec_lock+0x74>)
 800fa1c:	687b      	ldr	r3, [r7, #4]
 800fa1e:	011b      	lsls	r3, r3, #4
 800fa20:	4413      	add	r3, r2
 800fa22:	330c      	adds	r3, #12
 800fa24:	89fa      	ldrh	r2, [r7, #14]
 800fa26:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800fa28:	89fb      	ldrh	r3, [r7, #14]
 800fa2a:	2b00      	cmp	r3, #0
 800fa2c:	d105      	bne.n	800fa3a <dec_lock+0x5a>
 800fa2e:	4a09      	ldr	r2, [pc, #36]	; (800fa54 <dec_lock+0x74>)
 800fa30:	687b      	ldr	r3, [r7, #4]
 800fa32:	011b      	lsls	r3, r3, #4
 800fa34:	4413      	add	r3, r2
 800fa36:	2200      	movs	r2, #0
 800fa38:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800fa3a:	2300      	movs	r3, #0
 800fa3c:	737b      	strb	r3, [r7, #13]
 800fa3e:	e001      	b.n	800fa44 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800fa40:	2302      	movs	r3, #2
 800fa42:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800fa44:	7b7b      	ldrb	r3, [r7, #13]
}
 800fa46:	4618      	mov	r0, r3
 800fa48:	3714      	adds	r7, #20
 800fa4a:	46bd      	mov	sp, r7
 800fa4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa50:	4770      	bx	lr
 800fa52:	bf00      	nop
 800fa54:	20005384 	.word	0x20005384

0800fa58 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800fa58:	b480      	push	{r7}
 800fa5a:	b085      	sub	sp, #20
 800fa5c:	af00      	add	r7, sp, #0
 800fa5e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800fa60:	2300      	movs	r3, #0
 800fa62:	60fb      	str	r3, [r7, #12]
 800fa64:	e010      	b.n	800fa88 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800fa66:	4a0d      	ldr	r2, [pc, #52]	; (800fa9c <clear_lock+0x44>)
 800fa68:	68fb      	ldr	r3, [r7, #12]
 800fa6a:	011b      	lsls	r3, r3, #4
 800fa6c:	4413      	add	r3, r2
 800fa6e:	681b      	ldr	r3, [r3, #0]
 800fa70:	687a      	ldr	r2, [r7, #4]
 800fa72:	429a      	cmp	r2, r3
 800fa74:	d105      	bne.n	800fa82 <clear_lock+0x2a>
 800fa76:	4a09      	ldr	r2, [pc, #36]	; (800fa9c <clear_lock+0x44>)
 800fa78:	68fb      	ldr	r3, [r7, #12]
 800fa7a:	011b      	lsls	r3, r3, #4
 800fa7c:	4413      	add	r3, r2
 800fa7e:	2200      	movs	r2, #0
 800fa80:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800fa82:	68fb      	ldr	r3, [r7, #12]
 800fa84:	3301      	adds	r3, #1
 800fa86:	60fb      	str	r3, [r7, #12]
 800fa88:	68fb      	ldr	r3, [r7, #12]
 800fa8a:	2b01      	cmp	r3, #1
 800fa8c:	d9eb      	bls.n	800fa66 <clear_lock+0xe>
	}
}
 800fa8e:	bf00      	nop
 800fa90:	bf00      	nop
 800fa92:	3714      	adds	r7, #20
 800fa94:	46bd      	mov	sp, r7
 800fa96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa9a:	4770      	bx	lr
 800fa9c:	20005384 	.word	0x20005384

0800faa0 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800faa0:	b580      	push	{r7, lr}
 800faa2:	b086      	sub	sp, #24
 800faa4:	af00      	add	r7, sp, #0
 800faa6:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800faa8:	2300      	movs	r3, #0
 800faaa:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800faac:	687b      	ldr	r3, [r7, #4]
 800faae:	78db      	ldrb	r3, [r3, #3]
 800fab0:	2b00      	cmp	r3, #0
 800fab2:	d034      	beq.n	800fb1e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800fab4:	687b      	ldr	r3, [r7, #4]
 800fab6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fab8:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800faba:	687b      	ldr	r3, [r7, #4]
 800fabc:	7858      	ldrb	r0, [r3, #1]
 800fabe:	687b      	ldr	r3, [r7, #4]
 800fac0:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800fac4:	2301      	movs	r3, #1
 800fac6:	697a      	ldr	r2, [r7, #20]
 800fac8:	f7ff fd38 	bl	800f53c <disk_write>
 800facc:	4603      	mov	r3, r0
 800face:	2b00      	cmp	r3, #0
 800fad0:	d002      	beq.n	800fad8 <sync_window+0x38>
			res = FR_DISK_ERR;
 800fad2:	2301      	movs	r3, #1
 800fad4:	73fb      	strb	r3, [r7, #15]
 800fad6:	e022      	b.n	800fb1e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800fad8:	687b      	ldr	r3, [r7, #4]
 800fada:	2200      	movs	r2, #0
 800fadc:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800fade:	687b      	ldr	r3, [r7, #4]
 800fae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fae2:	697a      	ldr	r2, [r7, #20]
 800fae4:	1ad2      	subs	r2, r2, r3
 800fae6:	687b      	ldr	r3, [r7, #4]
 800fae8:	69db      	ldr	r3, [r3, #28]
 800faea:	429a      	cmp	r2, r3
 800faec:	d217      	bcs.n	800fb1e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800faee:	687b      	ldr	r3, [r7, #4]
 800faf0:	789b      	ldrb	r3, [r3, #2]
 800faf2:	613b      	str	r3, [r7, #16]
 800faf4:	e010      	b.n	800fb18 <sync_window+0x78>
					wsect += fs->fsize;
 800faf6:	687b      	ldr	r3, [r7, #4]
 800faf8:	69db      	ldr	r3, [r3, #28]
 800fafa:	697a      	ldr	r2, [r7, #20]
 800fafc:	4413      	add	r3, r2
 800fafe:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800fb00:	687b      	ldr	r3, [r7, #4]
 800fb02:	7858      	ldrb	r0, [r3, #1]
 800fb04:	687b      	ldr	r3, [r7, #4]
 800fb06:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800fb0a:	2301      	movs	r3, #1
 800fb0c:	697a      	ldr	r2, [r7, #20]
 800fb0e:	f7ff fd15 	bl	800f53c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800fb12:	693b      	ldr	r3, [r7, #16]
 800fb14:	3b01      	subs	r3, #1
 800fb16:	613b      	str	r3, [r7, #16]
 800fb18:	693b      	ldr	r3, [r7, #16]
 800fb1a:	2b01      	cmp	r3, #1
 800fb1c:	d8eb      	bhi.n	800faf6 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800fb1e:	7bfb      	ldrb	r3, [r7, #15]
}
 800fb20:	4618      	mov	r0, r3
 800fb22:	3718      	adds	r7, #24
 800fb24:	46bd      	mov	sp, r7
 800fb26:	bd80      	pop	{r7, pc}

0800fb28 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800fb28:	b580      	push	{r7, lr}
 800fb2a:	b084      	sub	sp, #16
 800fb2c:	af00      	add	r7, sp, #0
 800fb2e:	6078      	str	r0, [r7, #4]
 800fb30:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800fb32:	2300      	movs	r3, #0
 800fb34:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800fb36:	687b      	ldr	r3, [r7, #4]
 800fb38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fb3a:	683a      	ldr	r2, [r7, #0]
 800fb3c:	429a      	cmp	r2, r3
 800fb3e:	d01b      	beq.n	800fb78 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800fb40:	6878      	ldr	r0, [r7, #4]
 800fb42:	f7ff ffad 	bl	800faa0 <sync_window>
 800fb46:	4603      	mov	r3, r0
 800fb48:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800fb4a:	7bfb      	ldrb	r3, [r7, #15]
 800fb4c:	2b00      	cmp	r3, #0
 800fb4e:	d113      	bne.n	800fb78 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800fb50:	687b      	ldr	r3, [r7, #4]
 800fb52:	7858      	ldrb	r0, [r3, #1]
 800fb54:	687b      	ldr	r3, [r7, #4]
 800fb56:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800fb5a:	2301      	movs	r3, #1
 800fb5c:	683a      	ldr	r2, [r7, #0]
 800fb5e:	f7ff fccd 	bl	800f4fc <disk_read>
 800fb62:	4603      	mov	r3, r0
 800fb64:	2b00      	cmp	r3, #0
 800fb66:	d004      	beq.n	800fb72 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800fb68:	f04f 33ff 	mov.w	r3, #4294967295
 800fb6c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800fb6e:	2301      	movs	r3, #1
 800fb70:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800fb72:	687b      	ldr	r3, [r7, #4]
 800fb74:	683a      	ldr	r2, [r7, #0]
 800fb76:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 800fb78:	7bfb      	ldrb	r3, [r7, #15]
}
 800fb7a:	4618      	mov	r0, r3
 800fb7c:	3710      	adds	r7, #16
 800fb7e:	46bd      	mov	sp, r7
 800fb80:	bd80      	pop	{r7, pc}
	...

0800fb84 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800fb84:	b580      	push	{r7, lr}
 800fb86:	b084      	sub	sp, #16
 800fb88:	af00      	add	r7, sp, #0
 800fb8a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800fb8c:	6878      	ldr	r0, [r7, #4]
 800fb8e:	f7ff ff87 	bl	800faa0 <sync_window>
 800fb92:	4603      	mov	r3, r0
 800fb94:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800fb96:	7bfb      	ldrb	r3, [r7, #15]
 800fb98:	2b00      	cmp	r3, #0
 800fb9a:	d158      	bne.n	800fc4e <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800fb9c:	687b      	ldr	r3, [r7, #4]
 800fb9e:	781b      	ldrb	r3, [r3, #0]
 800fba0:	2b03      	cmp	r3, #3
 800fba2:	d148      	bne.n	800fc36 <sync_fs+0xb2>
 800fba4:	687b      	ldr	r3, [r7, #4]
 800fba6:	791b      	ldrb	r3, [r3, #4]
 800fba8:	2b01      	cmp	r3, #1
 800fbaa:	d144      	bne.n	800fc36 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800fbac:	687b      	ldr	r3, [r7, #4]
 800fbae:	3334      	adds	r3, #52	; 0x34
 800fbb0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800fbb4:	2100      	movs	r1, #0
 800fbb6:	4618      	mov	r0, r3
 800fbb8:	f7ff fda9 	bl	800f70e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800fbbc:	687b      	ldr	r3, [r7, #4]
 800fbbe:	3334      	adds	r3, #52	; 0x34
 800fbc0:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800fbc4:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800fbc8:	4618      	mov	r0, r3
 800fbca:	f7ff fd38 	bl	800f63e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800fbce:	687b      	ldr	r3, [r7, #4]
 800fbd0:	3334      	adds	r3, #52	; 0x34
 800fbd2:	4921      	ldr	r1, [pc, #132]	; (800fc58 <sync_fs+0xd4>)
 800fbd4:	4618      	mov	r0, r3
 800fbd6:	f7ff fd4d 	bl	800f674 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800fbda:	687b      	ldr	r3, [r7, #4]
 800fbdc:	3334      	adds	r3, #52	; 0x34
 800fbde:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800fbe2:	491e      	ldr	r1, [pc, #120]	; (800fc5c <sync_fs+0xd8>)
 800fbe4:	4618      	mov	r0, r3
 800fbe6:	f7ff fd45 	bl	800f674 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800fbea:	687b      	ldr	r3, [r7, #4]
 800fbec:	3334      	adds	r3, #52	; 0x34
 800fbee:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800fbf2:	687b      	ldr	r3, [r7, #4]
 800fbf4:	695b      	ldr	r3, [r3, #20]
 800fbf6:	4619      	mov	r1, r3
 800fbf8:	4610      	mov	r0, r2
 800fbfa:	f7ff fd3b 	bl	800f674 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800fbfe:	687b      	ldr	r3, [r7, #4]
 800fc00:	3334      	adds	r3, #52	; 0x34
 800fc02:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800fc06:	687b      	ldr	r3, [r7, #4]
 800fc08:	691b      	ldr	r3, [r3, #16]
 800fc0a:	4619      	mov	r1, r3
 800fc0c:	4610      	mov	r0, r2
 800fc0e:	f7ff fd31 	bl	800f674 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800fc12:	687b      	ldr	r3, [r7, #4]
 800fc14:	6a1b      	ldr	r3, [r3, #32]
 800fc16:	1c5a      	adds	r2, r3, #1
 800fc18:	687b      	ldr	r3, [r7, #4]
 800fc1a:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800fc1c:	687b      	ldr	r3, [r7, #4]
 800fc1e:	7858      	ldrb	r0, [r3, #1]
 800fc20:	687b      	ldr	r3, [r7, #4]
 800fc22:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800fc26:	687b      	ldr	r3, [r7, #4]
 800fc28:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800fc2a:	2301      	movs	r3, #1
 800fc2c:	f7ff fc86 	bl	800f53c <disk_write>
			fs->fsi_flag = 0;
 800fc30:	687b      	ldr	r3, [r7, #4]
 800fc32:	2200      	movs	r2, #0
 800fc34:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800fc36:	687b      	ldr	r3, [r7, #4]
 800fc38:	785b      	ldrb	r3, [r3, #1]
 800fc3a:	2200      	movs	r2, #0
 800fc3c:	2100      	movs	r1, #0
 800fc3e:	4618      	mov	r0, r3
 800fc40:	f7ff fc9c 	bl	800f57c <disk_ioctl>
 800fc44:	4603      	mov	r3, r0
 800fc46:	2b00      	cmp	r3, #0
 800fc48:	d001      	beq.n	800fc4e <sync_fs+0xca>
 800fc4a:	2301      	movs	r3, #1
 800fc4c:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800fc4e:	7bfb      	ldrb	r3, [r7, #15]
}
 800fc50:	4618      	mov	r0, r3
 800fc52:	3710      	adds	r7, #16
 800fc54:	46bd      	mov	sp, r7
 800fc56:	bd80      	pop	{r7, pc}
 800fc58:	41615252 	.word	0x41615252
 800fc5c:	61417272 	.word	0x61417272

0800fc60 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800fc60:	b480      	push	{r7}
 800fc62:	b083      	sub	sp, #12
 800fc64:	af00      	add	r7, sp, #0
 800fc66:	6078      	str	r0, [r7, #4]
 800fc68:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800fc6a:	683b      	ldr	r3, [r7, #0]
 800fc6c:	3b02      	subs	r3, #2
 800fc6e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800fc70:	687b      	ldr	r3, [r7, #4]
 800fc72:	699b      	ldr	r3, [r3, #24]
 800fc74:	3b02      	subs	r3, #2
 800fc76:	683a      	ldr	r2, [r7, #0]
 800fc78:	429a      	cmp	r2, r3
 800fc7a:	d301      	bcc.n	800fc80 <clust2sect+0x20>
 800fc7c:	2300      	movs	r3, #0
 800fc7e:	e008      	b.n	800fc92 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800fc80:	687b      	ldr	r3, [r7, #4]
 800fc82:	895b      	ldrh	r3, [r3, #10]
 800fc84:	461a      	mov	r2, r3
 800fc86:	683b      	ldr	r3, [r7, #0]
 800fc88:	fb03 f202 	mul.w	r2, r3, r2
 800fc8c:	687b      	ldr	r3, [r7, #4]
 800fc8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fc90:	4413      	add	r3, r2
}
 800fc92:	4618      	mov	r0, r3
 800fc94:	370c      	adds	r7, #12
 800fc96:	46bd      	mov	sp, r7
 800fc98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc9c:	4770      	bx	lr

0800fc9e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800fc9e:	b580      	push	{r7, lr}
 800fca0:	b086      	sub	sp, #24
 800fca2:	af00      	add	r7, sp, #0
 800fca4:	6078      	str	r0, [r7, #4]
 800fca6:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800fca8:	687b      	ldr	r3, [r7, #4]
 800fcaa:	681b      	ldr	r3, [r3, #0]
 800fcac:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800fcae:	683b      	ldr	r3, [r7, #0]
 800fcb0:	2b01      	cmp	r3, #1
 800fcb2:	d904      	bls.n	800fcbe <get_fat+0x20>
 800fcb4:	693b      	ldr	r3, [r7, #16]
 800fcb6:	699b      	ldr	r3, [r3, #24]
 800fcb8:	683a      	ldr	r2, [r7, #0]
 800fcba:	429a      	cmp	r2, r3
 800fcbc:	d302      	bcc.n	800fcc4 <get_fat+0x26>
		val = 1;	/* Internal error */
 800fcbe:	2301      	movs	r3, #1
 800fcc0:	617b      	str	r3, [r7, #20]
 800fcc2:	e08f      	b.n	800fde4 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800fcc4:	f04f 33ff 	mov.w	r3, #4294967295
 800fcc8:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800fcca:	693b      	ldr	r3, [r7, #16]
 800fccc:	781b      	ldrb	r3, [r3, #0]
 800fcce:	2b03      	cmp	r3, #3
 800fcd0:	d062      	beq.n	800fd98 <get_fat+0xfa>
 800fcd2:	2b03      	cmp	r3, #3
 800fcd4:	dc7c      	bgt.n	800fdd0 <get_fat+0x132>
 800fcd6:	2b01      	cmp	r3, #1
 800fcd8:	d002      	beq.n	800fce0 <get_fat+0x42>
 800fcda:	2b02      	cmp	r3, #2
 800fcdc:	d042      	beq.n	800fd64 <get_fat+0xc6>
 800fcde:	e077      	b.n	800fdd0 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800fce0:	683b      	ldr	r3, [r7, #0]
 800fce2:	60fb      	str	r3, [r7, #12]
 800fce4:	68fb      	ldr	r3, [r7, #12]
 800fce6:	085b      	lsrs	r3, r3, #1
 800fce8:	68fa      	ldr	r2, [r7, #12]
 800fcea:	4413      	add	r3, r2
 800fcec:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800fcee:	693b      	ldr	r3, [r7, #16]
 800fcf0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fcf2:	68fb      	ldr	r3, [r7, #12]
 800fcf4:	0a5b      	lsrs	r3, r3, #9
 800fcf6:	4413      	add	r3, r2
 800fcf8:	4619      	mov	r1, r3
 800fcfa:	6938      	ldr	r0, [r7, #16]
 800fcfc:	f7ff ff14 	bl	800fb28 <move_window>
 800fd00:	4603      	mov	r3, r0
 800fd02:	2b00      	cmp	r3, #0
 800fd04:	d167      	bne.n	800fdd6 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800fd06:	68fb      	ldr	r3, [r7, #12]
 800fd08:	1c5a      	adds	r2, r3, #1
 800fd0a:	60fa      	str	r2, [r7, #12]
 800fd0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fd10:	693a      	ldr	r2, [r7, #16]
 800fd12:	4413      	add	r3, r2
 800fd14:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800fd18:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800fd1a:	693b      	ldr	r3, [r7, #16]
 800fd1c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fd1e:	68fb      	ldr	r3, [r7, #12]
 800fd20:	0a5b      	lsrs	r3, r3, #9
 800fd22:	4413      	add	r3, r2
 800fd24:	4619      	mov	r1, r3
 800fd26:	6938      	ldr	r0, [r7, #16]
 800fd28:	f7ff fefe 	bl	800fb28 <move_window>
 800fd2c:	4603      	mov	r3, r0
 800fd2e:	2b00      	cmp	r3, #0
 800fd30:	d153      	bne.n	800fdda <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800fd32:	68fb      	ldr	r3, [r7, #12]
 800fd34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fd38:	693a      	ldr	r2, [r7, #16]
 800fd3a:	4413      	add	r3, r2
 800fd3c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800fd40:	021b      	lsls	r3, r3, #8
 800fd42:	461a      	mov	r2, r3
 800fd44:	68bb      	ldr	r3, [r7, #8]
 800fd46:	4313      	orrs	r3, r2
 800fd48:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800fd4a:	683b      	ldr	r3, [r7, #0]
 800fd4c:	f003 0301 	and.w	r3, r3, #1
 800fd50:	2b00      	cmp	r3, #0
 800fd52:	d002      	beq.n	800fd5a <get_fat+0xbc>
 800fd54:	68bb      	ldr	r3, [r7, #8]
 800fd56:	091b      	lsrs	r3, r3, #4
 800fd58:	e002      	b.n	800fd60 <get_fat+0xc2>
 800fd5a:	68bb      	ldr	r3, [r7, #8]
 800fd5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800fd60:	617b      	str	r3, [r7, #20]
			break;
 800fd62:	e03f      	b.n	800fde4 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800fd64:	693b      	ldr	r3, [r7, #16]
 800fd66:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fd68:	683b      	ldr	r3, [r7, #0]
 800fd6a:	0a1b      	lsrs	r3, r3, #8
 800fd6c:	4413      	add	r3, r2
 800fd6e:	4619      	mov	r1, r3
 800fd70:	6938      	ldr	r0, [r7, #16]
 800fd72:	f7ff fed9 	bl	800fb28 <move_window>
 800fd76:	4603      	mov	r3, r0
 800fd78:	2b00      	cmp	r3, #0
 800fd7a:	d130      	bne.n	800fdde <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800fd7c:	693b      	ldr	r3, [r7, #16]
 800fd7e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800fd82:	683b      	ldr	r3, [r7, #0]
 800fd84:	005b      	lsls	r3, r3, #1
 800fd86:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800fd8a:	4413      	add	r3, r2
 800fd8c:	4618      	mov	r0, r3
 800fd8e:	f7ff fc1b 	bl	800f5c8 <ld_word>
 800fd92:	4603      	mov	r3, r0
 800fd94:	617b      	str	r3, [r7, #20]
			break;
 800fd96:	e025      	b.n	800fde4 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800fd98:	693b      	ldr	r3, [r7, #16]
 800fd9a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fd9c:	683b      	ldr	r3, [r7, #0]
 800fd9e:	09db      	lsrs	r3, r3, #7
 800fda0:	4413      	add	r3, r2
 800fda2:	4619      	mov	r1, r3
 800fda4:	6938      	ldr	r0, [r7, #16]
 800fda6:	f7ff febf 	bl	800fb28 <move_window>
 800fdaa:	4603      	mov	r3, r0
 800fdac:	2b00      	cmp	r3, #0
 800fdae:	d118      	bne.n	800fde2 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800fdb0:	693b      	ldr	r3, [r7, #16]
 800fdb2:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800fdb6:	683b      	ldr	r3, [r7, #0]
 800fdb8:	009b      	lsls	r3, r3, #2
 800fdba:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800fdbe:	4413      	add	r3, r2
 800fdc0:	4618      	mov	r0, r3
 800fdc2:	f7ff fc19 	bl	800f5f8 <ld_dword>
 800fdc6:	4603      	mov	r3, r0
 800fdc8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800fdcc:	617b      	str	r3, [r7, #20]
			break;
 800fdce:	e009      	b.n	800fde4 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800fdd0:	2301      	movs	r3, #1
 800fdd2:	617b      	str	r3, [r7, #20]
 800fdd4:	e006      	b.n	800fde4 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800fdd6:	bf00      	nop
 800fdd8:	e004      	b.n	800fde4 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800fdda:	bf00      	nop
 800fddc:	e002      	b.n	800fde4 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800fdde:	bf00      	nop
 800fde0:	e000      	b.n	800fde4 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800fde2:	bf00      	nop
		}
	}

	return val;
 800fde4:	697b      	ldr	r3, [r7, #20]
}
 800fde6:	4618      	mov	r0, r3
 800fde8:	3718      	adds	r7, #24
 800fdea:	46bd      	mov	sp, r7
 800fdec:	bd80      	pop	{r7, pc}

0800fdee <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800fdee:	b590      	push	{r4, r7, lr}
 800fdf0:	b089      	sub	sp, #36	; 0x24
 800fdf2:	af00      	add	r7, sp, #0
 800fdf4:	60f8      	str	r0, [r7, #12]
 800fdf6:	60b9      	str	r1, [r7, #8]
 800fdf8:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800fdfa:	2302      	movs	r3, #2
 800fdfc:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800fdfe:	68bb      	ldr	r3, [r7, #8]
 800fe00:	2b01      	cmp	r3, #1
 800fe02:	f240 80d9 	bls.w	800ffb8 <put_fat+0x1ca>
 800fe06:	68fb      	ldr	r3, [r7, #12]
 800fe08:	699b      	ldr	r3, [r3, #24]
 800fe0a:	68ba      	ldr	r2, [r7, #8]
 800fe0c:	429a      	cmp	r2, r3
 800fe0e:	f080 80d3 	bcs.w	800ffb8 <put_fat+0x1ca>
		switch (fs->fs_type) {
 800fe12:	68fb      	ldr	r3, [r7, #12]
 800fe14:	781b      	ldrb	r3, [r3, #0]
 800fe16:	2b03      	cmp	r3, #3
 800fe18:	f000 8096 	beq.w	800ff48 <put_fat+0x15a>
 800fe1c:	2b03      	cmp	r3, #3
 800fe1e:	f300 80cb 	bgt.w	800ffb8 <put_fat+0x1ca>
 800fe22:	2b01      	cmp	r3, #1
 800fe24:	d002      	beq.n	800fe2c <put_fat+0x3e>
 800fe26:	2b02      	cmp	r3, #2
 800fe28:	d06e      	beq.n	800ff08 <put_fat+0x11a>
 800fe2a:	e0c5      	b.n	800ffb8 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800fe2c:	68bb      	ldr	r3, [r7, #8]
 800fe2e:	61bb      	str	r3, [r7, #24]
 800fe30:	69bb      	ldr	r3, [r7, #24]
 800fe32:	085b      	lsrs	r3, r3, #1
 800fe34:	69ba      	ldr	r2, [r7, #24]
 800fe36:	4413      	add	r3, r2
 800fe38:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800fe3a:	68fb      	ldr	r3, [r7, #12]
 800fe3c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fe3e:	69bb      	ldr	r3, [r7, #24]
 800fe40:	0a5b      	lsrs	r3, r3, #9
 800fe42:	4413      	add	r3, r2
 800fe44:	4619      	mov	r1, r3
 800fe46:	68f8      	ldr	r0, [r7, #12]
 800fe48:	f7ff fe6e 	bl	800fb28 <move_window>
 800fe4c:	4603      	mov	r3, r0
 800fe4e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800fe50:	7ffb      	ldrb	r3, [r7, #31]
 800fe52:	2b00      	cmp	r3, #0
 800fe54:	f040 80a9 	bne.w	800ffaa <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800fe58:	68fb      	ldr	r3, [r7, #12]
 800fe5a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800fe5e:	69bb      	ldr	r3, [r7, #24]
 800fe60:	1c59      	adds	r1, r3, #1
 800fe62:	61b9      	str	r1, [r7, #24]
 800fe64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fe68:	4413      	add	r3, r2
 800fe6a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800fe6c:	68bb      	ldr	r3, [r7, #8]
 800fe6e:	f003 0301 	and.w	r3, r3, #1
 800fe72:	2b00      	cmp	r3, #0
 800fe74:	d00d      	beq.n	800fe92 <put_fat+0xa4>
 800fe76:	697b      	ldr	r3, [r7, #20]
 800fe78:	781b      	ldrb	r3, [r3, #0]
 800fe7a:	b25b      	sxtb	r3, r3
 800fe7c:	f003 030f 	and.w	r3, r3, #15
 800fe80:	b25a      	sxtb	r2, r3
 800fe82:	687b      	ldr	r3, [r7, #4]
 800fe84:	b2db      	uxtb	r3, r3
 800fe86:	011b      	lsls	r3, r3, #4
 800fe88:	b25b      	sxtb	r3, r3
 800fe8a:	4313      	orrs	r3, r2
 800fe8c:	b25b      	sxtb	r3, r3
 800fe8e:	b2db      	uxtb	r3, r3
 800fe90:	e001      	b.n	800fe96 <put_fat+0xa8>
 800fe92:	687b      	ldr	r3, [r7, #4]
 800fe94:	b2db      	uxtb	r3, r3
 800fe96:	697a      	ldr	r2, [r7, #20]
 800fe98:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800fe9a:	68fb      	ldr	r3, [r7, #12]
 800fe9c:	2201      	movs	r2, #1
 800fe9e:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800fea0:	68fb      	ldr	r3, [r7, #12]
 800fea2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fea4:	69bb      	ldr	r3, [r7, #24]
 800fea6:	0a5b      	lsrs	r3, r3, #9
 800fea8:	4413      	add	r3, r2
 800feaa:	4619      	mov	r1, r3
 800feac:	68f8      	ldr	r0, [r7, #12]
 800feae:	f7ff fe3b 	bl	800fb28 <move_window>
 800feb2:	4603      	mov	r3, r0
 800feb4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800feb6:	7ffb      	ldrb	r3, [r7, #31]
 800feb8:	2b00      	cmp	r3, #0
 800feba:	d178      	bne.n	800ffae <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800febc:	68fb      	ldr	r3, [r7, #12]
 800febe:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800fec2:	69bb      	ldr	r3, [r7, #24]
 800fec4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fec8:	4413      	add	r3, r2
 800feca:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800fecc:	68bb      	ldr	r3, [r7, #8]
 800fece:	f003 0301 	and.w	r3, r3, #1
 800fed2:	2b00      	cmp	r3, #0
 800fed4:	d003      	beq.n	800fede <put_fat+0xf0>
 800fed6:	687b      	ldr	r3, [r7, #4]
 800fed8:	091b      	lsrs	r3, r3, #4
 800feda:	b2db      	uxtb	r3, r3
 800fedc:	e00e      	b.n	800fefc <put_fat+0x10e>
 800fede:	697b      	ldr	r3, [r7, #20]
 800fee0:	781b      	ldrb	r3, [r3, #0]
 800fee2:	b25b      	sxtb	r3, r3
 800fee4:	f023 030f 	bic.w	r3, r3, #15
 800fee8:	b25a      	sxtb	r2, r3
 800feea:	687b      	ldr	r3, [r7, #4]
 800feec:	0a1b      	lsrs	r3, r3, #8
 800feee:	b25b      	sxtb	r3, r3
 800fef0:	f003 030f 	and.w	r3, r3, #15
 800fef4:	b25b      	sxtb	r3, r3
 800fef6:	4313      	orrs	r3, r2
 800fef8:	b25b      	sxtb	r3, r3
 800fefa:	b2db      	uxtb	r3, r3
 800fefc:	697a      	ldr	r2, [r7, #20]
 800fefe:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800ff00:	68fb      	ldr	r3, [r7, #12]
 800ff02:	2201      	movs	r2, #1
 800ff04:	70da      	strb	r2, [r3, #3]
			break;
 800ff06:	e057      	b.n	800ffb8 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800ff08:	68fb      	ldr	r3, [r7, #12]
 800ff0a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ff0c:	68bb      	ldr	r3, [r7, #8]
 800ff0e:	0a1b      	lsrs	r3, r3, #8
 800ff10:	4413      	add	r3, r2
 800ff12:	4619      	mov	r1, r3
 800ff14:	68f8      	ldr	r0, [r7, #12]
 800ff16:	f7ff fe07 	bl	800fb28 <move_window>
 800ff1a:	4603      	mov	r3, r0
 800ff1c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ff1e:	7ffb      	ldrb	r3, [r7, #31]
 800ff20:	2b00      	cmp	r3, #0
 800ff22:	d146      	bne.n	800ffb2 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800ff24:	68fb      	ldr	r3, [r7, #12]
 800ff26:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800ff2a:	68bb      	ldr	r3, [r7, #8]
 800ff2c:	005b      	lsls	r3, r3, #1
 800ff2e:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800ff32:	4413      	add	r3, r2
 800ff34:	687a      	ldr	r2, [r7, #4]
 800ff36:	b292      	uxth	r2, r2
 800ff38:	4611      	mov	r1, r2
 800ff3a:	4618      	mov	r0, r3
 800ff3c:	f7ff fb7f 	bl	800f63e <st_word>
			fs->wflag = 1;
 800ff40:	68fb      	ldr	r3, [r7, #12]
 800ff42:	2201      	movs	r2, #1
 800ff44:	70da      	strb	r2, [r3, #3]
			break;
 800ff46:	e037      	b.n	800ffb8 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800ff48:	68fb      	ldr	r3, [r7, #12]
 800ff4a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ff4c:	68bb      	ldr	r3, [r7, #8]
 800ff4e:	09db      	lsrs	r3, r3, #7
 800ff50:	4413      	add	r3, r2
 800ff52:	4619      	mov	r1, r3
 800ff54:	68f8      	ldr	r0, [r7, #12]
 800ff56:	f7ff fde7 	bl	800fb28 <move_window>
 800ff5a:	4603      	mov	r3, r0
 800ff5c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ff5e:	7ffb      	ldrb	r3, [r7, #31]
 800ff60:	2b00      	cmp	r3, #0
 800ff62:	d128      	bne.n	800ffb6 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800ff64:	687b      	ldr	r3, [r7, #4]
 800ff66:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800ff6a:	68fb      	ldr	r3, [r7, #12]
 800ff6c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800ff70:	68bb      	ldr	r3, [r7, #8]
 800ff72:	009b      	lsls	r3, r3, #2
 800ff74:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800ff78:	4413      	add	r3, r2
 800ff7a:	4618      	mov	r0, r3
 800ff7c:	f7ff fb3c 	bl	800f5f8 <ld_dword>
 800ff80:	4603      	mov	r3, r0
 800ff82:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800ff86:	4323      	orrs	r3, r4
 800ff88:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800ff8a:	68fb      	ldr	r3, [r7, #12]
 800ff8c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800ff90:	68bb      	ldr	r3, [r7, #8]
 800ff92:	009b      	lsls	r3, r3, #2
 800ff94:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800ff98:	4413      	add	r3, r2
 800ff9a:	6879      	ldr	r1, [r7, #4]
 800ff9c:	4618      	mov	r0, r3
 800ff9e:	f7ff fb69 	bl	800f674 <st_dword>
			fs->wflag = 1;
 800ffa2:	68fb      	ldr	r3, [r7, #12]
 800ffa4:	2201      	movs	r2, #1
 800ffa6:	70da      	strb	r2, [r3, #3]
			break;
 800ffa8:	e006      	b.n	800ffb8 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800ffaa:	bf00      	nop
 800ffac:	e004      	b.n	800ffb8 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800ffae:	bf00      	nop
 800ffb0:	e002      	b.n	800ffb8 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800ffb2:	bf00      	nop
 800ffb4:	e000      	b.n	800ffb8 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800ffb6:	bf00      	nop
		}
	}
	return res;
 800ffb8:	7ffb      	ldrb	r3, [r7, #31]
}
 800ffba:	4618      	mov	r0, r3
 800ffbc:	3724      	adds	r7, #36	; 0x24
 800ffbe:	46bd      	mov	sp, r7
 800ffc0:	bd90      	pop	{r4, r7, pc}

0800ffc2 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800ffc2:	b580      	push	{r7, lr}
 800ffc4:	b088      	sub	sp, #32
 800ffc6:	af00      	add	r7, sp, #0
 800ffc8:	60f8      	str	r0, [r7, #12]
 800ffca:	60b9      	str	r1, [r7, #8]
 800ffcc:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800ffce:	2300      	movs	r3, #0
 800ffd0:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800ffd2:	68fb      	ldr	r3, [r7, #12]
 800ffd4:	681b      	ldr	r3, [r3, #0]
 800ffd6:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800ffd8:	68bb      	ldr	r3, [r7, #8]
 800ffda:	2b01      	cmp	r3, #1
 800ffdc:	d904      	bls.n	800ffe8 <remove_chain+0x26>
 800ffde:	69bb      	ldr	r3, [r7, #24]
 800ffe0:	699b      	ldr	r3, [r3, #24]
 800ffe2:	68ba      	ldr	r2, [r7, #8]
 800ffe4:	429a      	cmp	r2, r3
 800ffe6:	d301      	bcc.n	800ffec <remove_chain+0x2a>
 800ffe8:	2302      	movs	r3, #2
 800ffea:	e04b      	b.n	8010084 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800ffec:	687b      	ldr	r3, [r7, #4]
 800ffee:	2b00      	cmp	r3, #0
 800fff0:	d00c      	beq.n	801000c <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800fff2:	f04f 32ff 	mov.w	r2, #4294967295
 800fff6:	6879      	ldr	r1, [r7, #4]
 800fff8:	69b8      	ldr	r0, [r7, #24]
 800fffa:	f7ff fef8 	bl	800fdee <put_fat>
 800fffe:	4603      	mov	r3, r0
 8010000:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8010002:	7ffb      	ldrb	r3, [r7, #31]
 8010004:	2b00      	cmp	r3, #0
 8010006:	d001      	beq.n	801000c <remove_chain+0x4a>
 8010008:	7ffb      	ldrb	r3, [r7, #31]
 801000a:	e03b      	b.n	8010084 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 801000c:	68b9      	ldr	r1, [r7, #8]
 801000e:	68f8      	ldr	r0, [r7, #12]
 8010010:	f7ff fe45 	bl	800fc9e <get_fat>
 8010014:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8010016:	697b      	ldr	r3, [r7, #20]
 8010018:	2b00      	cmp	r3, #0
 801001a:	d031      	beq.n	8010080 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 801001c:	697b      	ldr	r3, [r7, #20]
 801001e:	2b01      	cmp	r3, #1
 8010020:	d101      	bne.n	8010026 <remove_chain+0x64>
 8010022:	2302      	movs	r3, #2
 8010024:	e02e      	b.n	8010084 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8010026:	697b      	ldr	r3, [r7, #20]
 8010028:	f1b3 3fff 	cmp.w	r3, #4294967295
 801002c:	d101      	bne.n	8010032 <remove_chain+0x70>
 801002e:	2301      	movs	r3, #1
 8010030:	e028      	b.n	8010084 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8010032:	2200      	movs	r2, #0
 8010034:	68b9      	ldr	r1, [r7, #8]
 8010036:	69b8      	ldr	r0, [r7, #24]
 8010038:	f7ff fed9 	bl	800fdee <put_fat>
 801003c:	4603      	mov	r3, r0
 801003e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8010040:	7ffb      	ldrb	r3, [r7, #31]
 8010042:	2b00      	cmp	r3, #0
 8010044:	d001      	beq.n	801004a <remove_chain+0x88>
 8010046:	7ffb      	ldrb	r3, [r7, #31]
 8010048:	e01c      	b.n	8010084 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 801004a:	69bb      	ldr	r3, [r7, #24]
 801004c:	695a      	ldr	r2, [r3, #20]
 801004e:	69bb      	ldr	r3, [r7, #24]
 8010050:	699b      	ldr	r3, [r3, #24]
 8010052:	3b02      	subs	r3, #2
 8010054:	429a      	cmp	r2, r3
 8010056:	d20b      	bcs.n	8010070 <remove_chain+0xae>
			fs->free_clst++;
 8010058:	69bb      	ldr	r3, [r7, #24]
 801005a:	695b      	ldr	r3, [r3, #20]
 801005c:	1c5a      	adds	r2, r3, #1
 801005e:	69bb      	ldr	r3, [r7, #24]
 8010060:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 8010062:	69bb      	ldr	r3, [r7, #24]
 8010064:	791b      	ldrb	r3, [r3, #4]
 8010066:	f043 0301 	orr.w	r3, r3, #1
 801006a:	b2da      	uxtb	r2, r3
 801006c:	69bb      	ldr	r3, [r7, #24]
 801006e:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8010070:	697b      	ldr	r3, [r7, #20]
 8010072:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8010074:	69bb      	ldr	r3, [r7, #24]
 8010076:	699b      	ldr	r3, [r3, #24]
 8010078:	68ba      	ldr	r2, [r7, #8]
 801007a:	429a      	cmp	r2, r3
 801007c:	d3c6      	bcc.n	801000c <remove_chain+0x4a>
 801007e:	e000      	b.n	8010082 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8010080:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8010082:	2300      	movs	r3, #0
}
 8010084:	4618      	mov	r0, r3
 8010086:	3720      	adds	r7, #32
 8010088:	46bd      	mov	sp, r7
 801008a:	bd80      	pop	{r7, pc}

0801008c <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 801008c:	b580      	push	{r7, lr}
 801008e:	b088      	sub	sp, #32
 8010090:	af00      	add	r7, sp, #0
 8010092:	6078      	str	r0, [r7, #4]
 8010094:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8010096:	687b      	ldr	r3, [r7, #4]
 8010098:	681b      	ldr	r3, [r3, #0]
 801009a:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 801009c:	683b      	ldr	r3, [r7, #0]
 801009e:	2b00      	cmp	r3, #0
 80100a0:	d10d      	bne.n	80100be <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80100a2:	693b      	ldr	r3, [r7, #16]
 80100a4:	691b      	ldr	r3, [r3, #16]
 80100a6:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80100a8:	69bb      	ldr	r3, [r7, #24]
 80100aa:	2b00      	cmp	r3, #0
 80100ac:	d004      	beq.n	80100b8 <create_chain+0x2c>
 80100ae:	693b      	ldr	r3, [r7, #16]
 80100b0:	699b      	ldr	r3, [r3, #24]
 80100b2:	69ba      	ldr	r2, [r7, #24]
 80100b4:	429a      	cmp	r2, r3
 80100b6:	d31b      	bcc.n	80100f0 <create_chain+0x64>
 80100b8:	2301      	movs	r3, #1
 80100ba:	61bb      	str	r3, [r7, #24]
 80100bc:	e018      	b.n	80100f0 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80100be:	6839      	ldr	r1, [r7, #0]
 80100c0:	6878      	ldr	r0, [r7, #4]
 80100c2:	f7ff fdec 	bl	800fc9e <get_fat>
 80100c6:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80100c8:	68fb      	ldr	r3, [r7, #12]
 80100ca:	2b01      	cmp	r3, #1
 80100cc:	d801      	bhi.n	80100d2 <create_chain+0x46>
 80100ce:	2301      	movs	r3, #1
 80100d0:	e070      	b.n	80101b4 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80100d2:	68fb      	ldr	r3, [r7, #12]
 80100d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80100d8:	d101      	bne.n	80100de <create_chain+0x52>
 80100da:	68fb      	ldr	r3, [r7, #12]
 80100dc:	e06a      	b.n	80101b4 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80100de:	693b      	ldr	r3, [r7, #16]
 80100e0:	699b      	ldr	r3, [r3, #24]
 80100e2:	68fa      	ldr	r2, [r7, #12]
 80100e4:	429a      	cmp	r2, r3
 80100e6:	d201      	bcs.n	80100ec <create_chain+0x60>
 80100e8:	68fb      	ldr	r3, [r7, #12]
 80100ea:	e063      	b.n	80101b4 <create_chain+0x128>
		scl = clst;
 80100ec:	683b      	ldr	r3, [r7, #0]
 80100ee:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80100f0:	69bb      	ldr	r3, [r7, #24]
 80100f2:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80100f4:	69fb      	ldr	r3, [r7, #28]
 80100f6:	3301      	adds	r3, #1
 80100f8:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80100fa:	693b      	ldr	r3, [r7, #16]
 80100fc:	699b      	ldr	r3, [r3, #24]
 80100fe:	69fa      	ldr	r2, [r7, #28]
 8010100:	429a      	cmp	r2, r3
 8010102:	d307      	bcc.n	8010114 <create_chain+0x88>
				ncl = 2;
 8010104:	2302      	movs	r3, #2
 8010106:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8010108:	69fa      	ldr	r2, [r7, #28]
 801010a:	69bb      	ldr	r3, [r7, #24]
 801010c:	429a      	cmp	r2, r3
 801010e:	d901      	bls.n	8010114 <create_chain+0x88>
 8010110:	2300      	movs	r3, #0
 8010112:	e04f      	b.n	80101b4 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8010114:	69f9      	ldr	r1, [r7, #28]
 8010116:	6878      	ldr	r0, [r7, #4]
 8010118:	f7ff fdc1 	bl	800fc9e <get_fat>
 801011c:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 801011e:	68fb      	ldr	r3, [r7, #12]
 8010120:	2b00      	cmp	r3, #0
 8010122:	d00e      	beq.n	8010142 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8010124:	68fb      	ldr	r3, [r7, #12]
 8010126:	2b01      	cmp	r3, #1
 8010128:	d003      	beq.n	8010132 <create_chain+0xa6>
 801012a:	68fb      	ldr	r3, [r7, #12]
 801012c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010130:	d101      	bne.n	8010136 <create_chain+0xaa>
 8010132:	68fb      	ldr	r3, [r7, #12]
 8010134:	e03e      	b.n	80101b4 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8010136:	69fa      	ldr	r2, [r7, #28]
 8010138:	69bb      	ldr	r3, [r7, #24]
 801013a:	429a      	cmp	r2, r3
 801013c:	d1da      	bne.n	80100f4 <create_chain+0x68>
 801013e:	2300      	movs	r3, #0
 8010140:	e038      	b.n	80101b4 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8010142:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8010144:	f04f 32ff 	mov.w	r2, #4294967295
 8010148:	69f9      	ldr	r1, [r7, #28]
 801014a:	6938      	ldr	r0, [r7, #16]
 801014c:	f7ff fe4f 	bl	800fdee <put_fat>
 8010150:	4603      	mov	r3, r0
 8010152:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8010154:	7dfb      	ldrb	r3, [r7, #23]
 8010156:	2b00      	cmp	r3, #0
 8010158:	d109      	bne.n	801016e <create_chain+0xe2>
 801015a:	683b      	ldr	r3, [r7, #0]
 801015c:	2b00      	cmp	r3, #0
 801015e:	d006      	beq.n	801016e <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8010160:	69fa      	ldr	r2, [r7, #28]
 8010162:	6839      	ldr	r1, [r7, #0]
 8010164:	6938      	ldr	r0, [r7, #16]
 8010166:	f7ff fe42 	bl	800fdee <put_fat>
 801016a:	4603      	mov	r3, r0
 801016c:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 801016e:	7dfb      	ldrb	r3, [r7, #23]
 8010170:	2b00      	cmp	r3, #0
 8010172:	d116      	bne.n	80101a2 <create_chain+0x116>
		fs->last_clst = ncl;
 8010174:	693b      	ldr	r3, [r7, #16]
 8010176:	69fa      	ldr	r2, [r7, #28]
 8010178:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 801017a:	693b      	ldr	r3, [r7, #16]
 801017c:	695a      	ldr	r2, [r3, #20]
 801017e:	693b      	ldr	r3, [r7, #16]
 8010180:	699b      	ldr	r3, [r3, #24]
 8010182:	3b02      	subs	r3, #2
 8010184:	429a      	cmp	r2, r3
 8010186:	d804      	bhi.n	8010192 <create_chain+0x106>
 8010188:	693b      	ldr	r3, [r7, #16]
 801018a:	695b      	ldr	r3, [r3, #20]
 801018c:	1e5a      	subs	r2, r3, #1
 801018e:	693b      	ldr	r3, [r7, #16]
 8010190:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8010192:	693b      	ldr	r3, [r7, #16]
 8010194:	791b      	ldrb	r3, [r3, #4]
 8010196:	f043 0301 	orr.w	r3, r3, #1
 801019a:	b2da      	uxtb	r2, r3
 801019c:	693b      	ldr	r3, [r7, #16]
 801019e:	711a      	strb	r2, [r3, #4]
 80101a0:	e007      	b.n	80101b2 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80101a2:	7dfb      	ldrb	r3, [r7, #23]
 80101a4:	2b01      	cmp	r3, #1
 80101a6:	d102      	bne.n	80101ae <create_chain+0x122>
 80101a8:	f04f 33ff 	mov.w	r3, #4294967295
 80101ac:	e000      	b.n	80101b0 <create_chain+0x124>
 80101ae:	2301      	movs	r3, #1
 80101b0:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80101b2:	69fb      	ldr	r3, [r7, #28]
}
 80101b4:	4618      	mov	r0, r3
 80101b6:	3720      	adds	r7, #32
 80101b8:	46bd      	mov	sp, r7
 80101ba:	bd80      	pop	{r7, pc}

080101bc <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80101bc:	b480      	push	{r7}
 80101be:	b087      	sub	sp, #28
 80101c0:	af00      	add	r7, sp, #0
 80101c2:	6078      	str	r0, [r7, #4]
 80101c4:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80101c6:	687b      	ldr	r3, [r7, #4]
 80101c8:	681b      	ldr	r3, [r3, #0]
 80101ca:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80101cc:	687b      	ldr	r3, [r7, #4]
 80101ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80101d0:	3304      	adds	r3, #4
 80101d2:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80101d4:	683b      	ldr	r3, [r7, #0]
 80101d6:	0a5b      	lsrs	r3, r3, #9
 80101d8:	68fa      	ldr	r2, [r7, #12]
 80101da:	8952      	ldrh	r2, [r2, #10]
 80101dc:	fbb3 f3f2 	udiv	r3, r3, r2
 80101e0:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80101e2:	693b      	ldr	r3, [r7, #16]
 80101e4:	1d1a      	adds	r2, r3, #4
 80101e6:	613a      	str	r2, [r7, #16]
 80101e8:	681b      	ldr	r3, [r3, #0]
 80101ea:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80101ec:	68bb      	ldr	r3, [r7, #8]
 80101ee:	2b00      	cmp	r3, #0
 80101f0:	d101      	bne.n	80101f6 <clmt_clust+0x3a>
 80101f2:	2300      	movs	r3, #0
 80101f4:	e010      	b.n	8010218 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 80101f6:	697a      	ldr	r2, [r7, #20]
 80101f8:	68bb      	ldr	r3, [r7, #8]
 80101fa:	429a      	cmp	r2, r3
 80101fc:	d307      	bcc.n	801020e <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 80101fe:	697a      	ldr	r2, [r7, #20]
 8010200:	68bb      	ldr	r3, [r7, #8]
 8010202:	1ad3      	subs	r3, r2, r3
 8010204:	617b      	str	r3, [r7, #20]
 8010206:	693b      	ldr	r3, [r7, #16]
 8010208:	3304      	adds	r3, #4
 801020a:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 801020c:	e7e9      	b.n	80101e2 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 801020e:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8010210:	693b      	ldr	r3, [r7, #16]
 8010212:	681a      	ldr	r2, [r3, #0]
 8010214:	697b      	ldr	r3, [r7, #20]
 8010216:	4413      	add	r3, r2
}
 8010218:	4618      	mov	r0, r3
 801021a:	371c      	adds	r7, #28
 801021c:	46bd      	mov	sp, r7
 801021e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010222:	4770      	bx	lr

08010224 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8010224:	b580      	push	{r7, lr}
 8010226:	b086      	sub	sp, #24
 8010228:	af00      	add	r7, sp, #0
 801022a:	6078      	str	r0, [r7, #4]
 801022c:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 801022e:	687b      	ldr	r3, [r7, #4]
 8010230:	681b      	ldr	r3, [r3, #0]
 8010232:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8010234:	683b      	ldr	r3, [r7, #0]
 8010236:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801023a:	d204      	bcs.n	8010246 <dir_sdi+0x22>
 801023c:	683b      	ldr	r3, [r7, #0]
 801023e:	f003 031f 	and.w	r3, r3, #31
 8010242:	2b00      	cmp	r3, #0
 8010244:	d001      	beq.n	801024a <dir_sdi+0x26>
		return FR_INT_ERR;
 8010246:	2302      	movs	r3, #2
 8010248:	e063      	b.n	8010312 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 801024a:	687b      	ldr	r3, [r7, #4]
 801024c:	683a      	ldr	r2, [r7, #0]
 801024e:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8010250:	687b      	ldr	r3, [r7, #4]
 8010252:	689b      	ldr	r3, [r3, #8]
 8010254:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8010256:	697b      	ldr	r3, [r7, #20]
 8010258:	2b00      	cmp	r3, #0
 801025a:	d106      	bne.n	801026a <dir_sdi+0x46>
 801025c:	693b      	ldr	r3, [r7, #16]
 801025e:	781b      	ldrb	r3, [r3, #0]
 8010260:	2b02      	cmp	r3, #2
 8010262:	d902      	bls.n	801026a <dir_sdi+0x46>
		clst = fs->dirbase;
 8010264:	693b      	ldr	r3, [r7, #16]
 8010266:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010268:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 801026a:	697b      	ldr	r3, [r7, #20]
 801026c:	2b00      	cmp	r3, #0
 801026e:	d10c      	bne.n	801028a <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8010270:	683b      	ldr	r3, [r7, #0]
 8010272:	095b      	lsrs	r3, r3, #5
 8010274:	693a      	ldr	r2, [r7, #16]
 8010276:	8912      	ldrh	r2, [r2, #8]
 8010278:	4293      	cmp	r3, r2
 801027a:	d301      	bcc.n	8010280 <dir_sdi+0x5c>
 801027c:	2302      	movs	r3, #2
 801027e:	e048      	b.n	8010312 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8010280:	693b      	ldr	r3, [r7, #16]
 8010282:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8010284:	687b      	ldr	r3, [r7, #4]
 8010286:	61da      	str	r2, [r3, #28]
 8010288:	e029      	b.n	80102de <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 801028a:	693b      	ldr	r3, [r7, #16]
 801028c:	895b      	ldrh	r3, [r3, #10]
 801028e:	025b      	lsls	r3, r3, #9
 8010290:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8010292:	e019      	b.n	80102c8 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8010294:	687b      	ldr	r3, [r7, #4]
 8010296:	6979      	ldr	r1, [r7, #20]
 8010298:	4618      	mov	r0, r3
 801029a:	f7ff fd00 	bl	800fc9e <get_fat>
 801029e:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80102a0:	697b      	ldr	r3, [r7, #20]
 80102a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80102a6:	d101      	bne.n	80102ac <dir_sdi+0x88>
 80102a8:	2301      	movs	r3, #1
 80102aa:	e032      	b.n	8010312 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80102ac:	697b      	ldr	r3, [r7, #20]
 80102ae:	2b01      	cmp	r3, #1
 80102b0:	d904      	bls.n	80102bc <dir_sdi+0x98>
 80102b2:	693b      	ldr	r3, [r7, #16]
 80102b4:	699b      	ldr	r3, [r3, #24]
 80102b6:	697a      	ldr	r2, [r7, #20]
 80102b8:	429a      	cmp	r2, r3
 80102ba:	d301      	bcc.n	80102c0 <dir_sdi+0x9c>
 80102bc:	2302      	movs	r3, #2
 80102be:	e028      	b.n	8010312 <dir_sdi+0xee>
			ofs -= csz;
 80102c0:	683a      	ldr	r2, [r7, #0]
 80102c2:	68fb      	ldr	r3, [r7, #12]
 80102c4:	1ad3      	subs	r3, r2, r3
 80102c6:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80102c8:	683a      	ldr	r2, [r7, #0]
 80102ca:	68fb      	ldr	r3, [r7, #12]
 80102cc:	429a      	cmp	r2, r3
 80102ce:	d2e1      	bcs.n	8010294 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 80102d0:	6979      	ldr	r1, [r7, #20]
 80102d2:	6938      	ldr	r0, [r7, #16]
 80102d4:	f7ff fcc4 	bl	800fc60 <clust2sect>
 80102d8:	4602      	mov	r2, r0
 80102da:	687b      	ldr	r3, [r7, #4]
 80102dc:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80102de:	687b      	ldr	r3, [r7, #4]
 80102e0:	697a      	ldr	r2, [r7, #20]
 80102e2:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80102e4:	687b      	ldr	r3, [r7, #4]
 80102e6:	69db      	ldr	r3, [r3, #28]
 80102e8:	2b00      	cmp	r3, #0
 80102ea:	d101      	bne.n	80102f0 <dir_sdi+0xcc>
 80102ec:	2302      	movs	r3, #2
 80102ee:	e010      	b.n	8010312 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80102f0:	687b      	ldr	r3, [r7, #4]
 80102f2:	69da      	ldr	r2, [r3, #28]
 80102f4:	683b      	ldr	r3, [r7, #0]
 80102f6:	0a5b      	lsrs	r3, r3, #9
 80102f8:	441a      	add	r2, r3
 80102fa:	687b      	ldr	r3, [r7, #4]
 80102fc:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80102fe:	693b      	ldr	r3, [r7, #16]
 8010300:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8010304:	683b      	ldr	r3, [r7, #0]
 8010306:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801030a:	441a      	add	r2, r3
 801030c:	687b      	ldr	r3, [r7, #4]
 801030e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8010310:	2300      	movs	r3, #0
}
 8010312:	4618      	mov	r0, r3
 8010314:	3718      	adds	r7, #24
 8010316:	46bd      	mov	sp, r7
 8010318:	bd80      	pop	{r7, pc}

0801031a <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 801031a:	b580      	push	{r7, lr}
 801031c:	b086      	sub	sp, #24
 801031e:	af00      	add	r7, sp, #0
 8010320:	6078      	str	r0, [r7, #4]
 8010322:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8010324:	687b      	ldr	r3, [r7, #4]
 8010326:	681b      	ldr	r3, [r3, #0]
 8010328:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 801032a:	687b      	ldr	r3, [r7, #4]
 801032c:	695b      	ldr	r3, [r3, #20]
 801032e:	3320      	adds	r3, #32
 8010330:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8010332:	687b      	ldr	r3, [r7, #4]
 8010334:	69db      	ldr	r3, [r3, #28]
 8010336:	2b00      	cmp	r3, #0
 8010338:	d003      	beq.n	8010342 <dir_next+0x28>
 801033a:	68bb      	ldr	r3, [r7, #8]
 801033c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8010340:	d301      	bcc.n	8010346 <dir_next+0x2c>
 8010342:	2304      	movs	r3, #4
 8010344:	e0aa      	b.n	801049c <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8010346:	68bb      	ldr	r3, [r7, #8]
 8010348:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801034c:	2b00      	cmp	r3, #0
 801034e:	f040 8098 	bne.w	8010482 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8010352:	687b      	ldr	r3, [r7, #4]
 8010354:	69db      	ldr	r3, [r3, #28]
 8010356:	1c5a      	adds	r2, r3, #1
 8010358:	687b      	ldr	r3, [r7, #4]
 801035a:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 801035c:	687b      	ldr	r3, [r7, #4]
 801035e:	699b      	ldr	r3, [r3, #24]
 8010360:	2b00      	cmp	r3, #0
 8010362:	d10b      	bne.n	801037c <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8010364:	68bb      	ldr	r3, [r7, #8]
 8010366:	095b      	lsrs	r3, r3, #5
 8010368:	68fa      	ldr	r2, [r7, #12]
 801036a:	8912      	ldrh	r2, [r2, #8]
 801036c:	4293      	cmp	r3, r2
 801036e:	f0c0 8088 	bcc.w	8010482 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8010372:	687b      	ldr	r3, [r7, #4]
 8010374:	2200      	movs	r2, #0
 8010376:	61da      	str	r2, [r3, #28]
 8010378:	2304      	movs	r3, #4
 801037a:	e08f      	b.n	801049c <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 801037c:	68bb      	ldr	r3, [r7, #8]
 801037e:	0a5b      	lsrs	r3, r3, #9
 8010380:	68fa      	ldr	r2, [r7, #12]
 8010382:	8952      	ldrh	r2, [r2, #10]
 8010384:	3a01      	subs	r2, #1
 8010386:	4013      	ands	r3, r2
 8010388:	2b00      	cmp	r3, #0
 801038a:	d17a      	bne.n	8010482 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 801038c:	687a      	ldr	r2, [r7, #4]
 801038e:	687b      	ldr	r3, [r7, #4]
 8010390:	699b      	ldr	r3, [r3, #24]
 8010392:	4619      	mov	r1, r3
 8010394:	4610      	mov	r0, r2
 8010396:	f7ff fc82 	bl	800fc9e <get_fat>
 801039a:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 801039c:	697b      	ldr	r3, [r7, #20]
 801039e:	2b01      	cmp	r3, #1
 80103a0:	d801      	bhi.n	80103a6 <dir_next+0x8c>
 80103a2:	2302      	movs	r3, #2
 80103a4:	e07a      	b.n	801049c <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80103a6:	697b      	ldr	r3, [r7, #20]
 80103a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80103ac:	d101      	bne.n	80103b2 <dir_next+0x98>
 80103ae:	2301      	movs	r3, #1
 80103b0:	e074      	b.n	801049c <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80103b2:	68fb      	ldr	r3, [r7, #12]
 80103b4:	699b      	ldr	r3, [r3, #24]
 80103b6:	697a      	ldr	r2, [r7, #20]
 80103b8:	429a      	cmp	r2, r3
 80103ba:	d358      	bcc.n	801046e <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80103bc:	683b      	ldr	r3, [r7, #0]
 80103be:	2b00      	cmp	r3, #0
 80103c0:	d104      	bne.n	80103cc <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 80103c2:	687b      	ldr	r3, [r7, #4]
 80103c4:	2200      	movs	r2, #0
 80103c6:	61da      	str	r2, [r3, #28]
 80103c8:	2304      	movs	r3, #4
 80103ca:	e067      	b.n	801049c <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80103cc:	687a      	ldr	r2, [r7, #4]
 80103ce:	687b      	ldr	r3, [r7, #4]
 80103d0:	699b      	ldr	r3, [r3, #24]
 80103d2:	4619      	mov	r1, r3
 80103d4:	4610      	mov	r0, r2
 80103d6:	f7ff fe59 	bl	801008c <create_chain>
 80103da:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80103dc:	697b      	ldr	r3, [r7, #20]
 80103de:	2b00      	cmp	r3, #0
 80103e0:	d101      	bne.n	80103e6 <dir_next+0xcc>
 80103e2:	2307      	movs	r3, #7
 80103e4:	e05a      	b.n	801049c <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80103e6:	697b      	ldr	r3, [r7, #20]
 80103e8:	2b01      	cmp	r3, #1
 80103ea:	d101      	bne.n	80103f0 <dir_next+0xd6>
 80103ec:	2302      	movs	r3, #2
 80103ee:	e055      	b.n	801049c <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80103f0:	697b      	ldr	r3, [r7, #20]
 80103f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80103f6:	d101      	bne.n	80103fc <dir_next+0xe2>
 80103f8:	2301      	movs	r3, #1
 80103fa:	e04f      	b.n	801049c <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80103fc:	68f8      	ldr	r0, [r7, #12]
 80103fe:	f7ff fb4f 	bl	800faa0 <sync_window>
 8010402:	4603      	mov	r3, r0
 8010404:	2b00      	cmp	r3, #0
 8010406:	d001      	beq.n	801040c <dir_next+0xf2>
 8010408:	2301      	movs	r3, #1
 801040a:	e047      	b.n	801049c <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 801040c:	68fb      	ldr	r3, [r7, #12]
 801040e:	3334      	adds	r3, #52	; 0x34
 8010410:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010414:	2100      	movs	r1, #0
 8010416:	4618      	mov	r0, r3
 8010418:	f7ff f979 	bl	800f70e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 801041c:	2300      	movs	r3, #0
 801041e:	613b      	str	r3, [r7, #16]
 8010420:	6979      	ldr	r1, [r7, #20]
 8010422:	68f8      	ldr	r0, [r7, #12]
 8010424:	f7ff fc1c 	bl	800fc60 <clust2sect>
 8010428:	4602      	mov	r2, r0
 801042a:	68fb      	ldr	r3, [r7, #12]
 801042c:	631a      	str	r2, [r3, #48]	; 0x30
 801042e:	e012      	b.n	8010456 <dir_next+0x13c>
						fs->wflag = 1;
 8010430:	68fb      	ldr	r3, [r7, #12]
 8010432:	2201      	movs	r2, #1
 8010434:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8010436:	68f8      	ldr	r0, [r7, #12]
 8010438:	f7ff fb32 	bl	800faa0 <sync_window>
 801043c:	4603      	mov	r3, r0
 801043e:	2b00      	cmp	r3, #0
 8010440:	d001      	beq.n	8010446 <dir_next+0x12c>
 8010442:	2301      	movs	r3, #1
 8010444:	e02a      	b.n	801049c <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8010446:	693b      	ldr	r3, [r7, #16]
 8010448:	3301      	adds	r3, #1
 801044a:	613b      	str	r3, [r7, #16]
 801044c:	68fb      	ldr	r3, [r7, #12]
 801044e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010450:	1c5a      	adds	r2, r3, #1
 8010452:	68fb      	ldr	r3, [r7, #12]
 8010454:	631a      	str	r2, [r3, #48]	; 0x30
 8010456:	68fb      	ldr	r3, [r7, #12]
 8010458:	895b      	ldrh	r3, [r3, #10]
 801045a:	461a      	mov	r2, r3
 801045c:	693b      	ldr	r3, [r7, #16]
 801045e:	4293      	cmp	r3, r2
 8010460:	d3e6      	bcc.n	8010430 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8010462:	68fb      	ldr	r3, [r7, #12]
 8010464:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010466:	693b      	ldr	r3, [r7, #16]
 8010468:	1ad2      	subs	r2, r2, r3
 801046a:	68fb      	ldr	r3, [r7, #12]
 801046c:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 801046e:	687b      	ldr	r3, [r7, #4]
 8010470:	697a      	ldr	r2, [r7, #20]
 8010472:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8010474:	6979      	ldr	r1, [r7, #20]
 8010476:	68f8      	ldr	r0, [r7, #12]
 8010478:	f7ff fbf2 	bl	800fc60 <clust2sect>
 801047c:	4602      	mov	r2, r0
 801047e:	687b      	ldr	r3, [r7, #4]
 8010480:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8010482:	687b      	ldr	r3, [r7, #4]
 8010484:	68ba      	ldr	r2, [r7, #8]
 8010486:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8010488:	68fb      	ldr	r3, [r7, #12]
 801048a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 801048e:	68bb      	ldr	r3, [r7, #8]
 8010490:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010494:	441a      	add	r2, r3
 8010496:	687b      	ldr	r3, [r7, #4]
 8010498:	621a      	str	r2, [r3, #32]

	return FR_OK;
 801049a:	2300      	movs	r3, #0
}
 801049c:	4618      	mov	r0, r3
 801049e:	3718      	adds	r7, #24
 80104a0:	46bd      	mov	sp, r7
 80104a2:	bd80      	pop	{r7, pc}

080104a4 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80104a4:	b580      	push	{r7, lr}
 80104a6:	b086      	sub	sp, #24
 80104a8:	af00      	add	r7, sp, #0
 80104aa:	6078      	str	r0, [r7, #4]
 80104ac:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80104ae:	687b      	ldr	r3, [r7, #4]
 80104b0:	681b      	ldr	r3, [r3, #0]
 80104b2:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80104b4:	2100      	movs	r1, #0
 80104b6:	6878      	ldr	r0, [r7, #4]
 80104b8:	f7ff feb4 	bl	8010224 <dir_sdi>
 80104bc:	4603      	mov	r3, r0
 80104be:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80104c0:	7dfb      	ldrb	r3, [r7, #23]
 80104c2:	2b00      	cmp	r3, #0
 80104c4:	d12b      	bne.n	801051e <dir_alloc+0x7a>
		n = 0;
 80104c6:	2300      	movs	r3, #0
 80104c8:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80104ca:	687b      	ldr	r3, [r7, #4]
 80104cc:	69db      	ldr	r3, [r3, #28]
 80104ce:	4619      	mov	r1, r3
 80104d0:	68f8      	ldr	r0, [r7, #12]
 80104d2:	f7ff fb29 	bl	800fb28 <move_window>
 80104d6:	4603      	mov	r3, r0
 80104d8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80104da:	7dfb      	ldrb	r3, [r7, #23]
 80104dc:	2b00      	cmp	r3, #0
 80104de:	d11d      	bne.n	801051c <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80104e0:	687b      	ldr	r3, [r7, #4]
 80104e2:	6a1b      	ldr	r3, [r3, #32]
 80104e4:	781b      	ldrb	r3, [r3, #0]
 80104e6:	2be5      	cmp	r3, #229	; 0xe5
 80104e8:	d004      	beq.n	80104f4 <dir_alloc+0x50>
 80104ea:	687b      	ldr	r3, [r7, #4]
 80104ec:	6a1b      	ldr	r3, [r3, #32]
 80104ee:	781b      	ldrb	r3, [r3, #0]
 80104f0:	2b00      	cmp	r3, #0
 80104f2:	d107      	bne.n	8010504 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80104f4:	693b      	ldr	r3, [r7, #16]
 80104f6:	3301      	adds	r3, #1
 80104f8:	613b      	str	r3, [r7, #16]
 80104fa:	693a      	ldr	r2, [r7, #16]
 80104fc:	683b      	ldr	r3, [r7, #0]
 80104fe:	429a      	cmp	r2, r3
 8010500:	d102      	bne.n	8010508 <dir_alloc+0x64>
 8010502:	e00c      	b.n	801051e <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8010504:	2300      	movs	r3, #0
 8010506:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8010508:	2101      	movs	r1, #1
 801050a:	6878      	ldr	r0, [r7, #4]
 801050c:	f7ff ff05 	bl	801031a <dir_next>
 8010510:	4603      	mov	r3, r0
 8010512:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8010514:	7dfb      	ldrb	r3, [r7, #23]
 8010516:	2b00      	cmp	r3, #0
 8010518:	d0d7      	beq.n	80104ca <dir_alloc+0x26>
 801051a:	e000      	b.n	801051e <dir_alloc+0x7a>
			if (res != FR_OK) break;
 801051c:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 801051e:	7dfb      	ldrb	r3, [r7, #23]
 8010520:	2b04      	cmp	r3, #4
 8010522:	d101      	bne.n	8010528 <dir_alloc+0x84>
 8010524:	2307      	movs	r3, #7
 8010526:	75fb      	strb	r3, [r7, #23]
	return res;
 8010528:	7dfb      	ldrb	r3, [r7, #23]
}
 801052a:	4618      	mov	r0, r3
 801052c:	3718      	adds	r7, #24
 801052e:	46bd      	mov	sp, r7
 8010530:	bd80      	pop	{r7, pc}

08010532 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8010532:	b580      	push	{r7, lr}
 8010534:	b084      	sub	sp, #16
 8010536:	af00      	add	r7, sp, #0
 8010538:	6078      	str	r0, [r7, #4]
 801053a:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 801053c:	683b      	ldr	r3, [r7, #0]
 801053e:	331a      	adds	r3, #26
 8010540:	4618      	mov	r0, r3
 8010542:	f7ff f841 	bl	800f5c8 <ld_word>
 8010546:	4603      	mov	r3, r0
 8010548:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 801054a:	687b      	ldr	r3, [r7, #4]
 801054c:	781b      	ldrb	r3, [r3, #0]
 801054e:	2b03      	cmp	r3, #3
 8010550:	d109      	bne.n	8010566 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8010552:	683b      	ldr	r3, [r7, #0]
 8010554:	3314      	adds	r3, #20
 8010556:	4618      	mov	r0, r3
 8010558:	f7ff f836 	bl	800f5c8 <ld_word>
 801055c:	4603      	mov	r3, r0
 801055e:	041b      	lsls	r3, r3, #16
 8010560:	68fa      	ldr	r2, [r7, #12]
 8010562:	4313      	orrs	r3, r2
 8010564:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8010566:	68fb      	ldr	r3, [r7, #12]
}
 8010568:	4618      	mov	r0, r3
 801056a:	3710      	adds	r7, #16
 801056c:	46bd      	mov	sp, r7
 801056e:	bd80      	pop	{r7, pc}

08010570 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8010570:	b580      	push	{r7, lr}
 8010572:	b084      	sub	sp, #16
 8010574:	af00      	add	r7, sp, #0
 8010576:	60f8      	str	r0, [r7, #12]
 8010578:	60b9      	str	r1, [r7, #8]
 801057a:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 801057c:	68bb      	ldr	r3, [r7, #8]
 801057e:	331a      	adds	r3, #26
 8010580:	687a      	ldr	r2, [r7, #4]
 8010582:	b292      	uxth	r2, r2
 8010584:	4611      	mov	r1, r2
 8010586:	4618      	mov	r0, r3
 8010588:	f7ff f859 	bl	800f63e <st_word>
	if (fs->fs_type == FS_FAT32) {
 801058c:	68fb      	ldr	r3, [r7, #12]
 801058e:	781b      	ldrb	r3, [r3, #0]
 8010590:	2b03      	cmp	r3, #3
 8010592:	d109      	bne.n	80105a8 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8010594:	68bb      	ldr	r3, [r7, #8]
 8010596:	f103 0214 	add.w	r2, r3, #20
 801059a:	687b      	ldr	r3, [r7, #4]
 801059c:	0c1b      	lsrs	r3, r3, #16
 801059e:	b29b      	uxth	r3, r3
 80105a0:	4619      	mov	r1, r3
 80105a2:	4610      	mov	r0, r2
 80105a4:	f7ff f84b 	bl	800f63e <st_word>
	}
}
 80105a8:	bf00      	nop
 80105aa:	3710      	adds	r7, #16
 80105ac:	46bd      	mov	sp, r7
 80105ae:	bd80      	pop	{r7, pc}

080105b0 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 80105b0:	b590      	push	{r4, r7, lr}
 80105b2:	b087      	sub	sp, #28
 80105b4:	af00      	add	r7, sp, #0
 80105b6:	6078      	str	r0, [r7, #4]
 80105b8:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 80105ba:	683b      	ldr	r3, [r7, #0]
 80105bc:	331a      	adds	r3, #26
 80105be:	4618      	mov	r0, r3
 80105c0:	f7ff f802 	bl	800f5c8 <ld_word>
 80105c4:	4603      	mov	r3, r0
 80105c6:	2b00      	cmp	r3, #0
 80105c8:	d001      	beq.n	80105ce <cmp_lfn+0x1e>
 80105ca:	2300      	movs	r3, #0
 80105cc:	e059      	b.n	8010682 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 80105ce:	683b      	ldr	r3, [r7, #0]
 80105d0:	781b      	ldrb	r3, [r3, #0]
 80105d2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80105d6:	1e5a      	subs	r2, r3, #1
 80105d8:	4613      	mov	r3, r2
 80105da:	005b      	lsls	r3, r3, #1
 80105dc:	4413      	add	r3, r2
 80105de:	009b      	lsls	r3, r3, #2
 80105e0:	4413      	add	r3, r2
 80105e2:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80105e4:	2301      	movs	r3, #1
 80105e6:	81fb      	strh	r3, [r7, #14]
 80105e8:	2300      	movs	r3, #0
 80105ea:	613b      	str	r3, [r7, #16]
 80105ec:	e033      	b.n	8010656 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 80105ee:	4a27      	ldr	r2, [pc, #156]	; (801068c <cmp_lfn+0xdc>)
 80105f0:	693b      	ldr	r3, [r7, #16]
 80105f2:	4413      	add	r3, r2
 80105f4:	781b      	ldrb	r3, [r3, #0]
 80105f6:	461a      	mov	r2, r3
 80105f8:	683b      	ldr	r3, [r7, #0]
 80105fa:	4413      	add	r3, r2
 80105fc:	4618      	mov	r0, r3
 80105fe:	f7fe ffe3 	bl	800f5c8 <ld_word>
 8010602:	4603      	mov	r3, r0
 8010604:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8010606:	89fb      	ldrh	r3, [r7, #14]
 8010608:	2b00      	cmp	r3, #0
 801060a:	d01a      	beq.n	8010642 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 801060c:	697b      	ldr	r3, [r7, #20]
 801060e:	2bfe      	cmp	r3, #254	; 0xfe
 8010610:	d812      	bhi.n	8010638 <cmp_lfn+0x88>
 8010612:	89bb      	ldrh	r3, [r7, #12]
 8010614:	4618      	mov	r0, r3
 8010616:	f002 fea1 	bl	801335c <ff_wtoupper>
 801061a:	4603      	mov	r3, r0
 801061c:	461c      	mov	r4, r3
 801061e:	697b      	ldr	r3, [r7, #20]
 8010620:	1c5a      	adds	r2, r3, #1
 8010622:	617a      	str	r2, [r7, #20]
 8010624:	005b      	lsls	r3, r3, #1
 8010626:	687a      	ldr	r2, [r7, #4]
 8010628:	4413      	add	r3, r2
 801062a:	881b      	ldrh	r3, [r3, #0]
 801062c:	4618      	mov	r0, r3
 801062e:	f002 fe95 	bl	801335c <ff_wtoupper>
 8010632:	4603      	mov	r3, r0
 8010634:	429c      	cmp	r4, r3
 8010636:	d001      	beq.n	801063c <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8010638:	2300      	movs	r3, #0
 801063a:	e022      	b.n	8010682 <cmp_lfn+0xd2>
			}
			wc = uc;
 801063c:	89bb      	ldrh	r3, [r7, #12]
 801063e:	81fb      	strh	r3, [r7, #14]
 8010640:	e006      	b.n	8010650 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8010642:	89bb      	ldrh	r3, [r7, #12]
 8010644:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010648:	4293      	cmp	r3, r2
 801064a:	d001      	beq.n	8010650 <cmp_lfn+0xa0>
 801064c:	2300      	movs	r3, #0
 801064e:	e018      	b.n	8010682 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8010650:	693b      	ldr	r3, [r7, #16]
 8010652:	3301      	adds	r3, #1
 8010654:	613b      	str	r3, [r7, #16]
 8010656:	693b      	ldr	r3, [r7, #16]
 8010658:	2b0c      	cmp	r3, #12
 801065a:	d9c8      	bls.n	80105ee <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 801065c:	683b      	ldr	r3, [r7, #0]
 801065e:	781b      	ldrb	r3, [r3, #0]
 8010660:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010664:	2b00      	cmp	r3, #0
 8010666:	d00b      	beq.n	8010680 <cmp_lfn+0xd0>
 8010668:	89fb      	ldrh	r3, [r7, #14]
 801066a:	2b00      	cmp	r3, #0
 801066c:	d008      	beq.n	8010680 <cmp_lfn+0xd0>
 801066e:	697b      	ldr	r3, [r7, #20]
 8010670:	005b      	lsls	r3, r3, #1
 8010672:	687a      	ldr	r2, [r7, #4]
 8010674:	4413      	add	r3, r2
 8010676:	881b      	ldrh	r3, [r3, #0]
 8010678:	2b00      	cmp	r3, #0
 801067a:	d001      	beq.n	8010680 <cmp_lfn+0xd0>
 801067c:	2300      	movs	r3, #0
 801067e:	e000      	b.n	8010682 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8010680:	2301      	movs	r3, #1
}
 8010682:	4618      	mov	r0, r3
 8010684:	371c      	adds	r7, #28
 8010686:	46bd      	mov	sp, r7
 8010688:	bd90      	pop	{r4, r7, pc}
 801068a:	bf00      	nop
 801068c:	08025a28 	.word	0x08025a28

08010690 <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 8010690:	b580      	push	{r7, lr}
 8010692:	b086      	sub	sp, #24
 8010694:	af00      	add	r7, sp, #0
 8010696:	6078      	str	r0, [r7, #4]
 8010698:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 801069a:	683b      	ldr	r3, [r7, #0]
 801069c:	331a      	adds	r3, #26
 801069e:	4618      	mov	r0, r3
 80106a0:	f7fe ff92 	bl	800f5c8 <ld_word>
 80106a4:	4603      	mov	r3, r0
 80106a6:	2b00      	cmp	r3, #0
 80106a8:	d001      	beq.n	80106ae <pick_lfn+0x1e>
 80106aa:	2300      	movs	r3, #0
 80106ac:	e04d      	b.n	801074a <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 80106ae:	683b      	ldr	r3, [r7, #0]
 80106b0:	781b      	ldrb	r3, [r3, #0]
 80106b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80106b6:	1e5a      	subs	r2, r3, #1
 80106b8:	4613      	mov	r3, r2
 80106ba:	005b      	lsls	r3, r3, #1
 80106bc:	4413      	add	r3, r2
 80106be:	009b      	lsls	r3, r3, #2
 80106c0:	4413      	add	r3, r2
 80106c2:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80106c4:	2301      	movs	r3, #1
 80106c6:	81fb      	strh	r3, [r7, #14]
 80106c8:	2300      	movs	r3, #0
 80106ca:	613b      	str	r3, [r7, #16]
 80106cc:	e028      	b.n	8010720 <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 80106ce:	4a21      	ldr	r2, [pc, #132]	; (8010754 <pick_lfn+0xc4>)
 80106d0:	693b      	ldr	r3, [r7, #16]
 80106d2:	4413      	add	r3, r2
 80106d4:	781b      	ldrb	r3, [r3, #0]
 80106d6:	461a      	mov	r2, r3
 80106d8:	683b      	ldr	r3, [r7, #0]
 80106da:	4413      	add	r3, r2
 80106dc:	4618      	mov	r0, r3
 80106de:	f7fe ff73 	bl	800f5c8 <ld_word>
 80106e2:	4603      	mov	r3, r0
 80106e4:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 80106e6:	89fb      	ldrh	r3, [r7, #14]
 80106e8:	2b00      	cmp	r3, #0
 80106ea:	d00f      	beq.n	801070c <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 80106ec:	697b      	ldr	r3, [r7, #20]
 80106ee:	2bfe      	cmp	r3, #254	; 0xfe
 80106f0:	d901      	bls.n	80106f6 <pick_lfn+0x66>
 80106f2:	2300      	movs	r3, #0
 80106f4:	e029      	b.n	801074a <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 80106f6:	89bb      	ldrh	r3, [r7, #12]
 80106f8:	81fb      	strh	r3, [r7, #14]
 80106fa:	697b      	ldr	r3, [r7, #20]
 80106fc:	1c5a      	adds	r2, r3, #1
 80106fe:	617a      	str	r2, [r7, #20]
 8010700:	005b      	lsls	r3, r3, #1
 8010702:	687a      	ldr	r2, [r7, #4]
 8010704:	4413      	add	r3, r2
 8010706:	89fa      	ldrh	r2, [r7, #14]
 8010708:	801a      	strh	r2, [r3, #0]
 801070a:	e006      	b.n	801071a <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 801070c:	89bb      	ldrh	r3, [r7, #12]
 801070e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010712:	4293      	cmp	r3, r2
 8010714:	d001      	beq.n	801071a <pick_lfn+0x8a>
 8010716:	2300      	movs	r3, #0
 8010718:	e017      	b.n	801074a <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 801071a:	693b      	ldr	r3, [r7, #16]
 801071c:	3301      	adds	r3, #1
 801071e:	613b      	str	r3, [r7, #16]
 8010720:	693b      	ldr	r3, [r7, #16]
 8010722:	2b0c      	cmp	r3, #12
 8010724:	d9d3      	bls.n	80106ce <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 8010726:	683b      	ldr	r3, [r7, #0]
 8010728:	781b      	ldrb	r3, [r3, #0]
 801072a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801072e:	2b00      	cmp	r3, #0
 8010730:	d00a      	beq.n	8010748 <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 8010732:	697b      	ldr	r3, [r7, #20]
 8010734:	2bfe      	cmp	r3, #254	; 0xfe
 8010736:	d901      	bls.n	801073c <pick_lfn+0xac>
 8010738:	2300      	movs	r3, #0
 801073a:	e006      	b.n	801074a <pick_lfn+0xba>
		lfnbuf[i] = 0;
 801073c:	697b      	ldr	r3, [r7, #20]
 801073e:	005b      	lsls	r3, r3, #1
 8010740:	687a      	ldr	r2, [r7, #4]
 8010742:	4413      	add	r3, r2
 8010744:	2200      	movs	r2, #0
 8010746:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 8010748:	2301      	movs	r3, #1
}
 801074a:	4618      	mov	r0, r3
 801074c:	3718      	adds	r7, #24
 801074e:	46bd      	mov	sp, r7
 8010750:	bd80      	pop	{r7, pc}
 8010752:	bf00      	nop
 8010754:	08025a28 	.word	0x08025a28

08010758 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8010758:	b580      	push	{r7, lr}
 801075a:	b088      	sub	sp, #32
 801075c:	af00      	add	r7, sp, #0
 801075e:	60f8      	str	r0, [r7, #12]
 8010760:	60b9      	str	r1, [r7, #8]
 8010762:	4611      	mov	r1, r2
 8010764:	461a      	mov	r2, r3
 8010766:	460b      	mov	r3, r1
 8010768:	71fb      	strb	r3, [r7, #7]
 801076a:	4613      	mov	r3, r2
 801076c:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 801076e:	68bb      	ldr	r3, [r7, #8]
 8010770:	330d      	adds	r3, #13
 8010772:	79ba      	ldrb	r2, [r7, #6]
 8010774:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8010776:	68bb      	ldr	r3, [r7, #8]
 8010778:	330b      	adds	r3, #11
 801077a:	220f      	movs	r2, #15
 801077c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 801077e:	68bb      	ldr	r3, [r7, #8]
 8010780:	330c      	adds	r3, #12
 8010782:	2200      	movs	r2, #0
 8010784:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8010786:	68bb      	ldr	r3, [r7, #8]
 8010788:	331a      	adds	r3, #26
 801078a:	2100      	movs	r1, #0
 801078c:	4618      	mov	r0, r3
 801078e:	f7fe ff56 	bl	800f63e <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8010792:	79fb      	ldrb	r3, [r7, #7]
 8010794:	1e5a      	subs	r2, r3, #1
 8010796:	4613      	mov	r3, r2
 8010798:	005b      	lsls	r3, r3, #1
 801079a:	4413      	add	r3, r2
 801079c:	009b      	lsls	r3, r3, #2
 801079e:	4413      	add	r3, r2
 80107a0:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 80107a2:	2300      	movs	r3, #0
 80107a4:	82fb      	strh	r3, [r7, #22]
 80107a6:	2300      	movs	r3, #0
 80107a8:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 80107aa:	8afb      	ldrh	r3, [r7, #22]
 80107ac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80107b0:	4293      	cmp	r3, r2
 80107b2:	d007      	beq.n	80107c4 <put_lfn+0x6c>
 80107b4:	69fb      	ldr	r3, [r7, #28]
 80107b6:	1c5a      	adds	r2, r3, #1
 80107b8:	61fa      	str	r2, [r7, #28]
 80107ba:	005b      	lsls	r3, r3, #1
 80107bc:	68fa      	ldr	r2, [r7, #12]
 80107be:	4413      	add	r3, r2
 80107c0:	881b      	ldrh	r3, [r3, #0]
 80107c2:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 80107c4:	4a17      	ldr	r2, [pc, #92]	; (8010824 <put_lfn+0xcc>)
 80107c6:	69bb      	ldr	r3, [r7, #24]
 80107c8:	4413      	add	r3, r2
 80107ca:	781b      	ldrb	r3, [r3, #0]
 80107cc:	461a      	mov	r2, r3
 80107ce:	68bb      	ldr	r3, [r7, #8]
 80107d0:	4413      	add	r3, r2
 80107d2:	8afa      	ldrh	r2, [r7, #22]
 80107d4:	4611      	mov	r1, r2
 80107d6:	4618      	mov	r0, r3
 80107d8:	f7fe ff31 	bl	800f63e <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 80107dc:	8afb      	ldrh	r3, [r7, #22]
 80107de:	2b00      	cmp	r3, #0
 80107e0:	d102      	bne.n	80107e8 <put_lfn+0x90>
 80107e2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80107e6:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 80107e8:	69bb      	ldr	r3, [r7, #24]
 80107ea:	3301      	adds	r3, #1
 80107ec:	61bb      	str	r3, [r7, #24]
 80107ee:	69bb      	ldr	r3, [r7, #24]
 80107f0:	2b0c      	cmp	r3, #12
 80107f2:	d9da      	bls.n	80107aa <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 80107f4:	8afb      	ldrh	r3, [r7, #22]
 80107f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80107fa:	4293      	cmp	r3, r2
 80107fc:	d006      	beq.n	801080c <put_lfn+0xb4>
 80107fe:	69fb      	ldr	r3, [r7, #28]
 8010800:	005b      	lsls	r3, r3, #1
 8010802:	68fa      	ldr	r2, [r7, #12]
 8010804:	4413      	add	r3, r2
 8010806:	881b      	ldrh	r3, [r3, #0]
 8010808:	2b00      	cmp	r3, #0
 801080a:	d103      	bne.n	8010814 <put_lfn+0xbc>
 801080c:	79fb      	ldrb	r3, [r7, #7]
 801080e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010812:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8010814:	68bb      	ldr	r3, [r7, #8]
 8010816:	79fa      	ldrb	r2, [r7, #7]
 8010818:	701a      	strb	r2, [r3, #0]
}
 801081a:	bf00      	nop
 801081c:	3720      	adds	r7, #32
 801081e:	46bd      	mov	sp, r7
 8010820:	bd80      	pop	{r7, pc}
 8010822:	bf00      	nop
 8010824:	08025a28 	.word	0x08025a28

08010828 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8010828:	b580      	push	{r7, lr}
 801082a:	b08c      	sub	sp, #48	; 0x30
 801082c:	af00      	add	r7, sp, #0
 801082e:	60f8      	str	r0, [r7, #12]
 8010830:	60b9      	str	r1, [r7, #8]
 8010832:	607a      	str	r2, [r7, #4]
 8010834:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8010836:	220b      	movs	r2, #11
 8010838:	68b9      	ldr	r1, [r7, #8]
 801083a:	68f8      	ldr	r0, [r7, #12]
 801083c:	f7fe ff46 	bl	800f6cc <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8010840:	683b      	ldr	r3, [r7, #0]
 8010842:	2b05      	cmp	r3, #5
 8010844:	d92b      	bls.n	801089e <gen_numname+0x76>
		sr = seq;
 8010846:	683b      	ldr	r3, [r7, #0]
 8010848:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 801084a:	e022      	b.n	8010892 <gen_numname+0x6a>
			wc = *lfn++;
 801084c:	687b      	ldr	r3, [r7, #4]
 801084e:	1c9a      	adds	r2, r3, #2
 8010850:	607a      	str	r2, [r7, #4]
 8010852:	881b      	ldrh	r3, [r3, #0]
 8010854:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 8010856:	2300      	movs	r3, #0
 8010858:	62bb      	str	r3, [r7, #40]	; 0x28
 801085a:	e017      	b.n	801088c <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 801085c:	69fb      	ldr	r3, [r7, #28]
 801085e:	005a      	lsls	r2, r3, #1
 8010860:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010862:	f003 0301 	and.w	r3, r3, #1
 8010866:	4413      	add	r3, r2
 8010868:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 801086a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801086c:	085b      	lsrs	r3, r3, #1
 801086e:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8010870:	69fb      	ldr	r3, [r7, #28]
 8010872:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8010876:	2b00      	cmp	r3, #0
 8010878:	d005      	beq.n	8010886 <gen_numname+0x5e>
 801087a:	69fb      	ldr	r3, [r7, #28]
 801087c:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 8010880:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 8010884:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8010886:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010888:	3301      	adds	r3, #1
 801088a:	62bb      	str	r3, [r7, #40]	; 0x28
 801088c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801088e:	2b0f      	cmp	r3, #15
 8010890:	d9e4      	bls.n	801085c <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8010892:	687b      	ldr	r3, [r7, #4]
 8010894:	881b      	ldrh	r3, [r3, #0]
 8010896:	2b00      	cmp	r3, #0
 8010898:	d1d8      	bne.n	801084c <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 801089a:	69fb      	ldr	r3, [r7, #28]
 801089c:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 801089e:	2307      	movs	r3, #7
 80108a0:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 80108a2:	683b      	ldr	r3, [r7, #0]
 80108a4:	b2db      	uxtb	r3, r3
 80108a6:	f003 030f 	and.w	r3, r3, #15
 80108aa:	b2db      	uxtb	r3, r3
 80108ac:	3330      	adds	r3, #48	; 0x30
 80108ae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 80108b2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80108b6:	2b39      	cmp	r3, #57	; 0x39
 80108b8:	d904      	bls.n	80108c4 <gen_numname+0x9c>
 80108ba:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80108be:	3307      	adds	r3, #7
 80108c0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 80108c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80108c6:	1e5a      	subs	r2, r3, #1
 80108c8:	62ba      	str	r2, [r7, #40]	; 0x28
 80108ca:	3330      	adds	r3, #48	; 0x30
 80108cc:	443b      	add	r3, r7
 80108ce:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80108d2:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 80108d6:	683b      	ldr	r3, [r7, #0]
 80108d8:	091b      	lsrs	r3, r3, #4
 80108da:	603b      	str	r3, [r7, #0]
	} while (seq);
 80108dc:	683b      	ldr	r3, [r7, #0]
 80108de:	2b00      	cmp	r3, #0
 80108e0:	d1df      	bne.n	80108a2 <gen_numname+0x7a>
	ns[i] = '~';
 80108e2:	f107 0214 	add.w	r2, r7, #20
 80108e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80108e8:	4413      	add	r3, r2
 80108ea:	227e      	movs	r2, #126	; 0x7e
 80108ec:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 80108ee:	2300      	movs	r3, #0
 80108f0:	627b      	str	r3, [r7, #36]	; 0x24
 80108f2:	e002      	b.n	80108fa <gen_numname+0xd2>
 80108f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108f6:	3301      	adds	r3, #1
 80108f8:	627b      	str	r3, [r7, #36]	; 0x24
 80108fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80108fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80108fe:	429a      	cmp	r2, r3
 8010900:	d205      	bcs.n	801090e <gen_numname+0xe6>
 8010902:	68fa      	ldr	r2, [r7, #12]
 8010904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010906:	4413      	add	r3, r2
 8010908:	781b      	ldrb	r3, [r3, #0]
 801090a:	2b20      	cmp	r3, #32
 801090c:	d1f2      	bne.n	80108f4 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 801090e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010910:	2b07      	cmp	r3, #7
 8010912:	d807      	bhi.n	8010924 <gen_numname+0xfc>
 8010914:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010916:	1c5a      	adds	r2, r3, #1
 8010918:	62ba      	str	r2, [r7, #40]	; 0x28
 801091a:	3330      	adds	r3, #48	; 0x30
 801091c:	443b      	add	r3, r7
 801091e:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8010922:	e000      	b.n	8010926 <gen_numname+0xfe>
 8010924:	2120      	movs	r1, #32
 8010926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010928:	1c5a      	adds	r2, r3, #1
 801092a:	627a      	str	r2, [r7, #36]	; 0x24
 801092c:	68fa      	ldr	r2, [r7, #12]
 801092e:	4413      	add	r3, r2
 8010930:	460a      	mov	r2, r1
 8010932:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8010934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010936:	2b07      	cmp	r3, #7
 8010938:	d9e9      	bls.n	801090e <gen_numname+0xe6>
}
 801093a:	bf00      	nop
 801093c:	bf00      	nop
 801093e:	3730      	adds	r7, #48	; 0x30
 8010940:	46bd      	mov	sp, r7
 8010942:	bd80      	pop	{r7, pc}

08010944 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8010944:	b480      	push	{r7}
 8010946:	b085      	sub	sp, #20
 8010948:	af00      	add	r7, sp, #0
 801094a:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 801094c:	2300      	movs	r3, #0
 801094e:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8010950:	230b      	movs	r3, #11
 8010952:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8010954:	7bfb      	ldrb	r3, [r7, #15]
 8010956:	b2da      	uxtb	r2, r3
 8010958:	0852      	lsrs	r2, r2, #1
 801095a:	01db      	lsls	r3, r3, #7
 801095c:	4313      	orrs	r3, r2
 801095e:	b2da      	uxtb	r2, r3
 8010960:	687b      	ldr	r3, [r7, #4]
 8010962:	1c59      	adds	r1, r3, #1
 8010964:	6079      	str	r1, [r7, #4]
 8010966:	781b      	ldrb	r3, [r3, #0]
 8010968:	4413      	add	r3, r2
 801096a:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 801096c:	68bb      	ldr	r3, [r7, #8]
 801096e:	3b01      	subs	r3, #1
 8010970:	60bb      	str	r3, [r7, #8]
 8010972:	68bb      	ldr	r3, [r7, #8]
 8010974:	2b00      	cmp	r3, #0
 8010976:	d1ed      	bne.n	8010954 <sum_sfn+0x10>
	return sum;
 8010978:	7bfb      	ldrb	r3, [r7, #15]
}
 801097a:	4618      	mov	r0, r3
 801097c:	3714      	adds	r7, #20
 801097e:	46bd      	mov	sp, r7
 8010980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010984:	4770      	bx	lr

08010986 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 8010986:	b580      	push	{r7, lr}
 8010988:	b086      	sub	sp, #24
 801098a:	af00      	add	r7, sp, #0
 801098c:	6078      	str	r0, [r7, #4]
 801098e:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 8010990:	2304      	movs	r3, #4
 8010992:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 8010994:	687b      	ldr	r3, [r7, #4]
 8010996:	681b      	ldr	r3, [r3, #0]
 8010998:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 801099a:	23ff      	movs	r3, #255	; 0xff
 801099c:	757b      	strb	r3, [r7, #21]
 801099e:	23ff      	movs	r3, #255	; 0xff
 80109a0:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 80109a2:	e081      	b.n	8010aa8 <dir_read+0x122>
		res = move_window(fs, dp->sect);
 80109a4:	687b      	ldr	r3, [r7, #4]
 80109a6:	69db      	ldr	r3, [r3, #28]
 80109a8:	4619      	mov	r1, r3
 80109aa:	6938      	ldr	r0, [r7, #16]
 80109ac:	f7ff f8bc 	bl	800fb28 <move_window>
 80109b0:	4603      	mov	r3, r0
 80109b2:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80109b4:	7dfb      	ldrb	r3, [r7, #23]
 80109b6:	2b00      	cmp	r3, #0
 80109b8:	d17c      	bne.n	8010ab4 <dir_read+0x12e>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 80109ba:	687b      	ldr	r3, [r7, #4]
 80109bc:	6a1b      	ldr	r3, [r3, #32]
 80109be:	781b      	ldrb	r3, [r3, #0]
 80109c0:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 80109c2:	7dbb      	ldrb	r3, [r7, #22]
 80109c4:	2b00      	cmp	r3, #0
 80109c6:	d102      	bne.n	80109ce <dir_read+0x48>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 80109c8:	2304      	movs	r3, #4
 80109ca:	75fb      	strb	r3, [r7, #23]
 80109cc:	e077      	b.n	8010abe <dir_read+0x138>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 80109ce:	687b      	ldr	r3, [r7, #4]
 80109d0:	6a1b      	ldr	r3, [r3, #32]
 80109d2:	330b      	adds	r3, #11
 80109d4:	781b      	ldrb	r3, [r3, #0]
 80109d6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80109da:	73fb      	strb	r3, [r7, #15]
 80109dc:	687b      	ldr	r3, [r7, #4]
 80109de:	7bfa      	ldrb	r2, [r7, #15]
 80109e0:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 80109e2:	7dbb      	ldrb	r3, [r7, #22]
 80109e4:	2be5      	cmp	r3, #229	; 0xe5
 80109e6:	d00e      	beq.n	8010a06 <dir_read+0x80>
 80109e8:	7dbb      	ldrb	r3, [r7, #22]
 80109ea:	2b2e      	cmp	r3, #46	; 0x2e
 80109ec:	d00b      	beq.n	8010a06 <dir_read+0x80>
 80109ee:	7bfb      	ldrb	r3, [r7, #15]
 80109f0:	f023 0320 	bic.w	r3, r3, #32
 80109f4:	2b08      	cmp	r3, #8
 80109f6:	bf0c      	ite	eq
 80109f8:	2301      	moveq	r3, #1
 80109fa:	2300      	movne	r3, #0
 80109fc:	b2db      	uxtb	r3, r3
 80109fe:	461a      	mov	r2, r3
 8010a00:	683b      	ldr	r3, [r7, #0]
 8010a02:	4293      	cmp	r3, r2
 8010a04:	d002      	beq.n	8010a0c <dir_read+0x86>
				ord = 0xFF;
 8010a06:	23ff      	movs	r3, #255	; 0xff
 8010a08:	757b      	strb	r3, [r7, #21]
 8010a0a:	e044      	b.n	8010a96 <dir_read+0x110>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 8010a0c:	7bfb      	ldrb	r3, [r7, #15]
 8010a0e:	2b0f      	cmp	r3, #15
 8010a10:	d12f      	bne.n	8010a72 <dir_read+0xec>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 8010a12:	7dbb      	ldrb	r3, [r7, #22]
 8010a14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010a18:	2b00      	cmp	r3, #0
 8010a1a:	d00d      	beq.n	8010a38 <dir_read+0xb2>
						sum = dp->dir[LDIR_Chksum];
 8010a1c:	687b      	ldr	r3, [r7, #4]
 8010a1e:	6a1b      	ldr	r3, [r3, #32]
 8010a20:	7b5b      	ldrb	r3, [r3, #13]
 8010a22:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 8010a24:	7dbb      	ldrb	r3, [r7, #22]
 8010a26:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010a2a:	75bb      	strb	r3, [r7, #22]
 8010a2c:	7dbb      	ldrb	r3, [r7, #22]
 8010a2e:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 8010a30:	687b      	ldr	r3, [r7, #4]
 8010a32:	695a      	ldr	r2, [r3, #20]
 8010a34:	687b      	ldr	r3, [r7, #4]
 8010a36:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8010a38:	7dba      	ldrb	r2, [r7, #22]
 8010a3a:	7d7b      	ldrb	r3, [r7, #21]
 8010a3c:	429a      	cmp	r2, r3
 8010a3e:	d115      	bne.n	8010a6c <dir_read+0xe6>
 8010a40:	687b      	ldr	r3, [r7, #4]
 8010a42:	6a1b      	ldr	r3, [r3, #32]
 8010a44:	330d      	adds	r3, #13
 8010a46:	781b      	ldrb	r3, [r3, #0]
 8010a48:	7d3a      	ldrb	r2, [r7, #20]
 8010a4a:	429a      	cmp	r2, r3
 8010a4c:	d10e      	bne.n	8010a6c <dir_read+0xe6>
 8010a4e:	693b      	ldr	r3, [r7, #16]
 8010a50:	68da      	ldr	r2, [r3, #12]
 8010a52:	687b      	ldr	r3, [r7, #4]
 8010a54:	6a1b      	ldr	r3, [r3, #32]
 8010a56:	4619      	mov	r1, r3
 8010a58:	4610      	mov	r0, r2
 8010a5a:	f7ff fe19 	bl	8010690 <pick_lfn>
 8010a5e:	4603      	mov	r3, r0
 8010a60:	2b00      	cmp	r3, #0
 8010a62:	d003      	beq.n	8010a6c <dir_read+0xe6>
 8010a64:	7d7b      	ldrb	r3, [r7, #21]
 8010a66:	3b01      	subs	r3, #1
 8010a68:	b2db      	uxtb	r3, r3
 8010a6a:	e000      	b.n	8010a6e <dir_read+0xe8>
 8010a6c:	23ff      	movs	r3, #255	; 0xff
 8010a6e:	757b      	strb	r3, [r7, #21]
 8010a70:	e011      	b.n	8010a96 <dir_read+0x110>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 8010a72:	7d7b      	ldrb	r3, [r7, #21]
 8010a74:	2b00      	cmp	r3, #0
 8010a76:	d109      	bne.n	8010a8c <dir_read+0x106>
 8010a78:	687b      	ldr	r3, [r7, #4]
 8010a7a:	6a1b      	ldr	r3, [r3, #32]
 8010a7c:	4618      	mov	r0, r3
 8010a7e:	f7ff ff61 	bl	8010944 <sum_sfn>
 8010a82:	4603      	mov	r3, r0
 8010a84:	461a      	mov	r2, r3
 8010a86:	7d3b      	ldrb	r3, [r7, #20]
 8010a88:	4293      	cmp	r3, r2
 8010a8a:	d015      	beq.n	8010ab8 <dir_read+0x132>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 8010a8c:	687b      	ldr	r3, [r7, #4]
 8010a8e:	f04f 32ff 	mov.w	r2, #4294967295
 8010a92:	631a      	str	r2, [r3, #48]	; 0x30
					}
					break;
 8010a94:	e010      	b.n	8010ab8 <dir_read+0x132>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 8010a96:	2100      	movs	r1, #0
 8010a98:	6878      	ldr	r0, [r7, #4]
 8010a9a:	f7ff fc3e 	bl	801031a <dir_next>
 8010a9e:	4603      	mov	r3, r0
 8010aa0:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8010aa2:	7dfb      	ldrb	r3, [r7, #23]
 8010aa4:	2b00      	cmp	r3, #0
 8010aa6:	d109      	bne.n	8010abc <dir_read+0x136>
	while (dp->sect) {
 8010aa8:	687b      	ldr	r3, [r7, #4]
 8010aaa:	69db      	ldr	r3, [r3, #28]
 8010aac:	2b00      	cmp	r3, #0
 8010aae:	f47f af79 	bne.w	80109a4 <dir_read+0x1e>
 8010ab2:	e004      	b.n	8010abe <dir_read+0x138>
		if (res != FR_OK) break;
 8010ab4:	bf00      	nop
 8010ab6:	e002      	b.n	8010abe <dir_read+0x138>
					break;
 8010ab8:	bf00      	nop
 8010aba:	e000      	b.n	8010abe <dir_read+0x138>
		if (res != FR_OK) break;
 8010abc:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8010abe:	7dfb      	ldrb	r3, [r7, #23]
 8010ac0:	2b00      	cmp	r3, #0
 8010ac2:	d002      	beq.n	8010aca <dir_read+0x144>
 8010ac4:	687b      	ldr	r3, [r7, #4]
 8010ac6:	2200      	movs	r2, #0
 8010ac8:	61da      	str	r2, [r3, #28]
	return res;
 8010aca:	7dfb      	ldrb	r3, [r7, #23]
}
 8010acc:	4618      	mov	r0, r3
 8010ace:	3718      	adds	r7, #24
 8010ad0:	46bd      	mov	sp, r7
 8010ad2:	bd80      	pop	{r7, pc}

08010ad4 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8010ad4:	b580      	push	{r7, lr}
 8010ad6:	b086      	sub	sp, #24
 8010ad8:	af00      	add	r7, sp, #0
 8010ada:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8010adc:	687b      	ldr	r3, [r7, #4]
 8010ade:	681b      	ldr	r3, [r3, #0]
 8010ae0:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8010ae2:	2100      	movs	r1, #0
 8010ae4:	6878      	ldr	r0, [r7, #4]
 8010ae6:	f7ff fb9d 	bl	8010224 <dir_sdi>
 8010aea:	4603      	mov	r3, r0
 8010aec:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8010aee:	7dfb      	ldrb	r3, [r7, #23]
 8010af0:	2b00      	cmp	r3, #0
 8010af2:	d001      	beq.n	8010af8 <dir_find+0x24>
 8010af4:	7dfb      	ldrb	r3, [r7, #23]
 8010af6:	e0a9      	b.n	8010c4c <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8010af8:	23ff      	movs	r3, #255	; 0xff
 8010afa:	753b      	strb	r3, [r7, #20]
 8010afc:	7d3b      	ldrb	r3, [r7, #20]
 8010afe:	757b      	strb	r3, [r7, #21]
 8010b00:	687b      	ldr	r3, [r7, #4]
 8010b02:	f04f 32ff 	mov.w	r2, #4294967295
 8010b06:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8010b08:	687b      	ldr	r3, [r7, #4]
 8010b0a:	69db      	ldr	r3, [r3, #28]
 8010b0c:	4619      	mov	r1, r3
 8010b0e:	6938      	ldr	r0, [r7, #16]
 8010b10:	f7ff f80a 	bl	800fb28 <move_window>
 8010b14:	4603      	mov	r3, r0
 8010b16:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8010b18:	7dfb      	ldrb	r3, [r7, #23]
 8010b1a:	2b00      	cmp	r3, #0
 8010b1c:	f040 8090 	bne.w	8010c40 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8010b20:	687b      	ldr	r3, [r7, #4]
 8010b22:	6a1b      	ldr	r3, [r3, #32]
 8010b24:	781b      	ldrb	r3, [r3, #0]
 8010b26:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8010b28:	7dbb      	ldrb	r3, [r7, #22]
 8010b2a:	2b00      	cmp	r3, #0
 8010b2c:	d102      	bne.n	8010b34 <dir_find+0x60>
 8010b2e:	2304      	movs	r3, #4
 8010b30:	75fb      	strb	r3, [r7, #23]
 8010b32:	e08a      	b.n	8010c4a <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8010b34:	687b      	ldr	r3, [r7, #4]
 8010b36:	6a1b      	ldr	r3, [r3, #32]
 8010b38:	330b      	adds	r3, #11
 8010b3a:	781b      	ldrb	r3, [r3, #0]
 8010b3c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010b40:	73fb      	strb	r3, [r7, #15]
 8010b42:	687b      	ldr	r3, [r7, #4]
 8010b44:	7bfa      	ldrb	r2, [r7, #15]
 8010b46:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8010b48:	7dbb      	ldrb	r3, [r7, #22]
 8010b4a:	2be5      	cmp	r3, #229	; 0xe5
 8010b4c:	d007      	beq.n	8010b5e <dir_find+0x8a>
 8010b4e:	7bfb      	ldrb	r3, [r7, #15]
 8010b50:	f003 0308 	and.w	r3, r3, #8
 8010b54:	2b00      	cmp	r3, #0
 8010b56:	d009      	beq.n	8010b6c <dir_find+0x98>
 8010b58:	7bfb      	ldrb	r3, [r7, #15]
 8010b5a:	2b0f      	cmp	r3, #15
 8010b5c:	d006      	beq.n	8010b6c <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8010b5e:	23ff      	movs	r3, #255	; 0xff
 8010b60:	757b      	strb	r3, [r7, #21]
 8010b62:	687b      	ldr	r3, [r7, #4]
 8010b64:	f04f 32ff 	mov.w	r2, #4294967295
 8010b68:	631a      	str	r2, [r3, #48]	; 0x30
 8010b6a:	e05e      	b.n	8010c2a <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8010b6c:	7bfb      	ldrb	r3, [r7, #15]
 8010b6e:	2b0f      	cmp	r3, #15
 8010b70:	d136      	bne.n	8010be0 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8010b72:	687b      	ldr	r3, [r7, #4]
 8010b74:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8010b78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010b7c:	2b00      	cmp	r3, #0
 8010b7e:	d154      	bne.n	8010c2a <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8010b80:	7dbb      	ldrb	r3, [r7, #22]
 8010b82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010b86:	2b00      	cmp	r3, #0
 8010b88:	d00d      	beq.n	8010ba6 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8010b8a:	687b      	ldr	r3, [r7, #4]
 8010b8c:	6a1b      	ldr	r3, [r3, #32]
 8010b8e:	7b5b      	ldrb	r3, [r3, #13]
 8010b90:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8010b92:	7dbb      	ldrb	r3, [r7, #22]
 8010b94:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010b98:	75bb      	strb	r3, [r7, #22]
 8010b9a:	7dbb      	ldrb	r3, [r7, #22]
 8010b9c:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8010b9e:	687b      	ldr	r3, [r7, #4]
 8010ba0:	695a      	ldr	r2, [r3, #20]
 8010ba2:	687b      	ldr	r3, [r7, #4]
 8010ba4:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8010ba6:	7dba      	ldrb	r2, [r7, #22]
 8010ba8:	7d7b      	ldrb	r3, [r7, #21]
 8010baa:	429a      	cmp	r2, r3
 8010bac:	d115      	bne.n	8010bda <dir_find+0x106>
 8010bae:	687b      	ldr	r3, [r7, #4]
 8010bb0:	6a1b      	ldr	r3, [r3, #32]
 8010bb2:	330d      	adds	r3, #13
 8010bb4:	781b      	ldrb	r3, [r3, #0]
 8010bb6:	7d3a      	ldrb	r2, [r7, #20]
 8010bb8:	429a      	cmp	r2, r3
 8010bba:	d10e      	bne.n	8010bda <dir_find+0x106>
 8010bbc:	693b      	ldr	r3, [r7, #16]
 8010bbe:	68da      	ldr	r2, [r3, #12]
 8010bc0:	687b      	ldr	r3, [r7, #4]
 8010bc2:	6a1b      	ldr	r3, [r3, #32]
 8010bc4:	4619      	mov	r1, r3
 8010bc6:	4610      	mov	r0, r2
 8010bc8:	f7ff fcf2 	bl	80105b0 <cmp_lfn>
 8010bcc:	4603      	mov	r3, r0
 8010bce:	2b00      	cmp	r3, #0
 8010bd0:	d003      	beq.n	8010bda <dir_find+0x106>
 8010bd2:	7d7b      	ldrb	r3, [r7, #21]
 8010bd4:	3b01      	subs	r3, #1
 8010bd6:	b2db      	uxtb	r3, r3
 8010bd8:	e000      	b.n	8010bdc <dir_find+0x108>
 8010bda:	23ff      	movs	r3, #255	; 0xff
 8010bdc:	757b      	strb	r3, [r7, #21]
 8010bde:	e024      	b.n	8010c2a <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8010be0:	7d7b      	ldrb	r3, [r7, #21]
 8010be2:	2b00      	cmp	r3, #0
 8010be4:	d109      	bne.n	8010bfa <dir_find+0x126>
 8010be6:	687b      	ldr	r3, [r7, #4]
 8010be8:	6a1b      	ldr	r3, [r3, #32]
 8010bea:	4618      	mov	r0, r3
 8010bec:	f7ff feaa 	bl	8010944 <sum_sfn>
 8010bf0:	4603      	mov	r3, r0
 8010bf2:	461a      	mov	r2, r3
 8010bf4:	7d3b      	ldrb	r3, [r7, #20]
 8010bf6:	4293      	cmp	r3, r2
 8010bf8:	d024      	beq.n	8010c44 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8010bfa:	687b      	ldr	r3, [r7, #4]
 8010bfc:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8010c00:	f003 0301 	and.w	r3, r3, #1
 8010c04:	2b00      	cmp	r3, #0
 8010c06:	d10a      	bne.n	8010c1e <dir_find+0x14a>
 8010c08:	687b      	ldr	r3, [r7, #4]
 8010c0a:	6a18      	ldr	r0, [r3, #32]
 8010c0c:	687b      	ldr	r3, [r7, #4]
 8010c0e:	3324      	adds	r3, #36	; 0x24
 8010c10:	220b      	movs	r2, #11
 8010c12:	4619      	mov	r1, r3
 8010c14:	f7fe fd96 	bl	800f744 <mem_cmp>
 8010c18:	4603      	mov	r3, r0
 8010c1a:	2b00      	cmp	r3, #0
 8010c1c:	d014      	beq.n	8010c48 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8010c1e:	23ff      	movs	r3, #255	; 0xff
 8010c20:	757b      	strb	r3, [r7, #21]
 8010c22:	687b      	ldr	r3, [r7, #4]
 8010c24:	f04f 32ff 	mov.w	r2, #4294967295
 8010c28:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8010c2a:	2100      	movs	r1, #0
 8010c2c:	6878      	ldr	r0, [r7, #4]
 8010c2e:	f7ff fb74 	bl	801031a <dir_next>
 8010c32:	4603      	mov	r3, r0
 8010c34:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8010c36:	7dfb      	ldrb	r3, [r7, #23]
 8010c38:	2b00      	cmp	r3, #0
 8010c3a:	f43f af65 	beq.w	8010b08 <dir_find+0x34>
 8010c3e:	e004      	b.n	8010c4a <dir_find+0x176>
		if (res != FR_OK) break;
 8010c40:	bf00      	nop
 8010c42:	e002      	b.n	8010c4a <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8010c44:	bf00      	nop
 8010c46:	e000      	b.n	8010c4a <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8010c48:	bf00      	nop

	return res;
 8010c4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8010c4c:	4618      	mov	r0, r3
 8010c4e:	3718      	adds	r7, #24
 8010c50:	46bd      	mov	sp, r7
 8010c52:	bd80      	pop	{r7, pc}

08010c54 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8010c54:	b580      	push	{r7, lr}
 8010c56:	b08c      	sub	sp, #48	; 0x30
 8010c58:	af00      	add	r7, sp, #0
 8010c5a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8010c5c:	687b      	ldr	r3, [r7, #4]
 8010c5e:	681b      	ldr	r3, [r3, #0]
 8010c60:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8010c62:	687b      	ldr	r3, [r7, #4]
 8010c64:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8010c68:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8010c6c:	2b00      	cmp	r3, #0
 8010c6e:	d001      	beq.n	8010c74 <dir_register+0x20>
 8010c70:	2306      	movs	r3, #6
 8010c72:	e0e0      	b.n	8010e36 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8010c74:	2300      	movs	r3, #0
 8010c76:	627b      	str	r3, [r7, #36]	; 0x24
 8010c78:	e002      	b.n	8010c80 <dir_register+0x2c>
 8010c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c7c:	3301      	adds	r3, #1
 8010c7e:	627b      	str	r3, [r7, #36]	; 0x24
 8010c80:	69fb      	ldr	r3, [r7, #28]
 8010c82:	68da      	ldr	r2, [r3, #12]
 8010c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c86:	005b      	lsls	r3, r3, #1
 8010c88:	4413      	add	r3, r2
 8010c8a:	881b      	ldrh	r3, [r3, #0]
 8010c8c:	2b00      	cmp	r3, #0
 8010c8e:	d1f4      	bne.n	8010c7a <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8010c90:	687b      	ldr	r3, [r7, #4]
 8010c92:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8010c96:	f107 030c 	add.w	r3, r7, #12
 8010c9a:	220c      	movs	r2, #12
 8010c9c:	4618      	mov	r0, r3
 8010c9e:	f7fe fd15 	bl	800f6cc <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8010ca2:	7dfb      	ldrb	r3, [r7, #23]
 8010ca4:	f003 0301 	and.w	r3, r3, #1
 8010ca8:	2b00      	cmp	r3, #0
 8010caa:	d032      	beq.n	8010d12 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8010cac:	687b      	ldr	r3, [r7, #4]
 8010cae:	2240      	movs	r2, #64	; 0x40
 8010cb0:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 8010cb4:	2301      	movs	r3, #1
 8010cb6:	62bb      	str	r3, [r7, #40]	; 0x28
 8010cb8:	e016      	b.n	8010ce8 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8010cba:	687b      	ldr	r3, [r7, #4]
 8010cbc:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8010cc0:	69fb      	ldr	r3, [r7, #28]
 8010cc2:	68da      	ldr	r2, [r3, #12]
 8010cc4:	f107 010c 	add.w	r1, r7, #12
 8010cc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010cca:	f7ff fdad 	bl	8010828 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8010cce:	6878      	ldr	r0, [r7, #4]
 8010cd0:	f7ff ff00 	bl	8010ad4 <dir_find>
 8010cd4:	4603      	mov	r3, r0
 8010cd6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 8010cda:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010cde:	2b00      	cmp	r3, #0
 8010ce0:	d106      	bne.n	8010cf0 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8010ce2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ce4:	3301      	adds	r3, #1
 8010ce6:	62bb      	str	r3, [r7, #40]	; 0x28
 8010ce8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010cea:	2b63      	cmp	r3, #99	; 0x63
 8010cec:	d9e5      	bls.n	8010cba <dir_register+0x66>
 8010cee:	e000      	b.n	8010cf2 <dir_register+0x9e>
			if (res != FR_OK) break;
 8010cf0:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8010cf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010cf4:	2b64      	cmp	r3, #100	; 0x64
 8010cf6:	d101      	bne.n	8010cfc <dir_register+0xa8>
 8010cf8:	2307      	movs	r3, #7
 8010cfa:	e09c      	b.n	8010e36 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8010cfc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010d00:	2b04      	cmp	r3, #4
 8010d02:	d002      	beq.n	8010d0a <dir_register+0xb6>
 8010d04:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010d08:	e095      	b.n	8010e36 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8010d0a:	7dfa      	ldrb	r2, [r7, #23]
 8010d0c:	687b      	ldr	r3, [r7, #4]
 8010d0e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8010d12:	7dfb      	ldrb	r3, [r7, #23]
 8010d14:	f003 0302 	and.w	r3, r3, #2
 8010d18:	2b00      	cmp	r3, #0
 8010d1a:	d007      	beq.n	8010d2c <dir_register+0xd8>
 8010d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d1e:	330c      	adds	r3, #12
 8010d20:	4a47      	ldr	r2, [pc, #284]	; (8010e40 <dir_register+0x1ec>)
 8010d22:	fba2 2303 	umull	r2, r3, r2, r3
 8010d26:	089b      	lsrs	r3, r3, #2
 8010d28:	3301      	adds	r3, #1
 8010d2a:	e000      	b.n	8010d2e <dir_register+0xda>
 8010d2c:	2301      	movs	r3, #1
 8010d2e:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8010d30:	6a39      	ldr	r1, [r7, #32]
 8010d32:	6878      	ldr	r0, [r7, #4]
 8010d34:	f7ff fbb6 	bl	80104a4 <dir_alloc>
 8010d38:	4603      	mov	r3, r0
 8010d3a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8010d3e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010d42:	2b00      	cmp	r3, #0
 8010d44:	d148      	bne.n	8010dd8 <dir_register+0x184>
 8010d46:	6a3b      	ldr	r3, [r7, #32]
 8010d48:	3b01      	subs	r3, #1
 8010d4a:	623b      	str	r3, [r7, #32]
 8010d4c:	6a3b      	ldr	r3, [r7, #32]
 8010d4e:	2b00      	cmp	r3, #0
 8010d50:	d042      	beq.n	8010dd8 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8010d52:	687b      	ldr	r3, [r7, #4]
 8010d54:	695a      	ldr	r2, [r3, #20]
 8010d56:	6a3b      	ldr	r3, [r7, #32]
 8010d58:	015b      	lsls	r3, r3, #5
 8010d5a:	1ad3      	subs	r3, r2, r3
 8010d5c:	4619      	mov	r1, r3
 8010d5e:	6878      	ldr	r0, [r7, #4]
 8010d60:	f7ff fa60 	bl	8010224 <dir_sdi>
 8010d64:	4603      	mov	r3, r0
 8010d66:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8010d6a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010d6e:	2b00      	cmp	r3, #0
 8010d70:	d132      	bne.n	8010dd8 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8010d72:	687b      	ldr	r3, [r7, #4]
 8010d74:	3324      	adds	r3, #36	; 0x24
 8010d76:	4618      	mov	r0, r3
 8010d78:	f7ff fde4 	bl	8010944 <sum_sfn>
 8010d7c:	4603      	mov	r3, r0
 8010d7e:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8010d80:	687b      	ldr	r3, [r7, #4]
 8010d82:	69db      	ldr	r3, [r3, #28]
 8010d84:	4619      	mov	r1, r3
 8010d86:	69f8      	ldr	r0, [r7, #28]
 8010d88:	f7fe fece 	bl	800fb28 <move_window>
 8010d8c:	4603      	mov	r3, r0
 8010d8e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 8010d92:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010d96:	2b00      	cmp	r3, #0
 8010d98:	d11d      	bne.n	8010dd6 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8010d9a:	69fb      	ldr	r3, [r7, #28]
 8010d9c:	68d8      	ldr	r0, [r3, #12]
 8010d9e:	687b      	ldr	r3, [r7, #4]
 8010da0:	6a19      	ldr	r1, [r3, #32]
 8010da2:	6a3b      	ldr	r3, [r7, #32]
 8010da4:	b2da      	uxtb	r2, r3
 8010da6:	7efb      	ldrb	r3, [r7, #27]
 8010da8:	f7ff fcd6 	bl	8010758 <put_lfn>
				fs->wflag = 1;
 8010dac:	69fb      	ldr	r3, [r7, #28]
 8010dae:	2201      	movs	r2, #1
 8010db0:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8010db2:	2100      	movs	r1, #0
 8010db4:	6878      	ldr	r0, [r7, #4]
 8010db6:	f7ff fab0 	bl	801031a <dir_next>
 8010dba:	4603      	mov	r3, r0
 8010dbc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 8010dc0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010dc4:	2b00      	cmp	r3, #0
 8010dc6:	d107      	bne.n	8010dd8 <dir_register+0x184>
 8010dc8:	6a3b      	ldr	r3, [r7, #32]
 8010dca:	3b01      	subs	r3, #1
 8010dcc:	623b      	str	r3, [r7, #32]
 8010dce:	6a3b      	ldr	r3, [r7, #32]
 8010dd0:	2b00      	cmp	r3, #0
 8010dd2:	d1d5      	bne.n	8010d80 <dir_register+0x12c>
 8010dd4:	e000      	b.n	8010dd8 <dir_register+0x184>
				if (res != FR_OK) break;
 8010dd6:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8010dd8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010ddc:	2b00      	cmp	r3, #0
 8010dde:	d128      	bne.n	8010e32 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8010de0:	687b      	ldr	r3, [r7, #4]
 8010de2:	69db      	ldr	r3, [r3, #28]
 8010de4:	4619      	mov	r1, r3
 8010de6:	69f8      	ldr	r0, [r7, #28]
 8010de8:	f7fe fe9e 	bl	800fb28 <move_window>
 8010dec:	4603      	mov	r3, r0
 8010dee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8010df2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010df6:	2b00      	cmp	r3, #0
 8010df8:	d11b      	bne.n	8010e32 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8010dfa:	687b      	ldr	r3, [r7, #4]
 8010dfc:	6a1b      	ldr	r3, [r3, #32]
 8010dfe:	2220      	movs	r2, #32
 8010e00:	2100      	movs	r1, #0
 8010e02:	4618      	mov	r0, r3
 8010e04:	f7fe fc83 	bl	800f70e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8010e08:	687b      	ldr	r3, [r7, #4]
 8010e0a:	6a18      	ldr	r0, [r3, #32]
 8010e0c:	687b      	ldr	r3, [r7, #4]
 8010e0e:	3324      	adds	r3, #36	; 0x24
 8010e10:	220b      	movs	r2, #11
 8010e12:	4619      	mov	r1, r3
 8010e14:	f7fe fc5a 	bl	800f6cc <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8010e18:	687b      	ldr	r3, [r7, #4]
 8010e1a:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8010e1e:	687b      	ldr	r3, [r7, #4]
 8010e20:	6a1b      	ldr	r3, [r3, #32]
 8010e22:	330c      	adds	r3, #12
 8010e24:	f002 0218 	and.w	r2, r2, #24
 8010e28:	b2d2      	uxtb	r2, r2
 8010e2a:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8010e2c:	69fb      	ldr	r3, [r7, #28]
 8010e2e:	2201      	movs	r2, #1
 8010e30:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8010e32:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8010e36:	4618      	mov	r0, r3
 8010e38:	3730      	adds	r7, #48	; 0x30
 8010e3a:	46bd      	mov	sp, r7
 8010e3c:	bd80      	pop	{r7, pc}
 8010e3e:	bf00      	nop
 8010e40:	4ec4ec4f 	.word	0x4ec4ec4f

08010e44 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 8010e44:	b580      	push	{r7, lr}
 8010e46:	b088      	sub	sp, #32
 8010e48:	af00      	add	r7, sp, #0
 8010e4a:	6078      	str	r0, [r7, #4]
 8010e4c:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 8010e4e:	687b      	ldr	r3, [r7, #4]
 8010e50:	681b      	ldr	r3, [r3, #0]
 8010e52:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 8010e54:	683b      	ldr	r3, [r7, #0]
 8010e56:	2200      	movs	r2, #0
 8010e58:	759a      	strb	r2, [r3, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8010e5a:	687b      	ldr	r3, [r7, #4]
 8010e5c:	69db      	ldr	r3, [r3, #28]
 8010e5e:	2b00      	cmp	r3, #0
 8010e60:	f000 80c9 	beq.w	8010ff6 <get_fileinfo+0x1b2>
		get_xdir_info(fs->dirbuf, fno);
		return;
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 8010e64:	687b      	ldr	r3, [r7, #4]
 8010e66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010e68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010e6c:	d032      	beq.n	8010ed4 <get_fileinfo+0x90>
			i = j = 0;
 8010e6e:	2300      	movs	r3, #0
 8010e70:	61bb      	str	r3, [r7, #24]
 8010e72:	69bb      	ldr	r3, [r7, #24]
 8010e74:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 8010e76:	e01b      	b.n	8010eb0 <get_fileinfo+0x6c>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 8010e78:	89fb      	ldrh	r3, [r7, #14]
 8010e7a:	2100      	movs	r1, #0
 8010e7c:	4618      	mov	r0, r3
 8010e7e:	f002 fa31 	bl	80132e4 <ff_convert>
 8010e82:	4603      	mov	r3, r0
 8010e84:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 8010e86:	89fb      	ldrh	r3, [r7, #14]
 8010e88:	2b00      	cmp	r3, #0
 8010e8a:	d102      	bne.n	8010e92 <get_fileinfo+0x4e>
 8010e8c:	2300      	movs	r3, #0
 8010e8e:	61fb      	str	r3, [r7, #28]
 8010e90:	e01a      	b.n	8010ec8 <get_fileinfo+0x84>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 8010e92:	69fb      	ldr	r3, [r7, #28]
 8010e94:	2bfe      	cmp	r3, #254	; 0xfe
 8010e96:	d902      	bls.n	8010e9e <get_fileinfo+0x5a>
 8010e98:	2300      	movs	r3, #0
 8010e9a:	61fb      	str	r3, [r7, #28]
 8010e9c:	e014      	b.n	8010ec8 <get_fileinfo+0x84>
				fno->fname[i++] = (TCHAR)w;
 8010e9e:	69fb      	ldr	r3, [r7, #28]
 8010ea0:	1c5a      	adds	r2, r3, #1
 8010ea2:	61fa      	str	r2, [r7, #28]
 8010ea4:	89fa      	ldrh	r2, [r7, #14]
 8010ea6:	b2d1      	uxtb	r1, r2
 8010ea8:	683a      	ldr	r2, [r7, #0]
 8010eaa:	4413      	add	r3, r2
 8010eac:	460a      	mov	r2, r1
 8010eae:	759a      	strb	r2, [r3, #22]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 8010eb0:	693b      	ldr	r3, [r7, #16]
 8010eb2:	68da      	ldr	r2, [r3, #12]
 8010eb4:	69bb      	ldr	r3, [r7, #24]
 8010eb6:	1c59      	adds	r1, r3, #1
 8010eb8:	61b9      	str	r1, [r7, #24]
 8010eba:	005b      	lsls	r3, r3, #1
 8010ebc:	4413      	add	r3, r2
 8010ebe:	881b      	ldrh	r3, [r3, #0]
 8010ec0:	81fb      	strh	r3, [r7, #14]
 8010ec2:	89fb      	ldrh	r3, [r7, #14]
 8010ec4:	2b00      	cmp	r3, #0
 8010ec6:	d1d7      	bne.n	8010e78 <get_fileinfo+0x34>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 8010ec8:	683a      	ldr	r2, [r7, #0]
 8010eca:	69fb      	ldr	r3, [r7, #28]
 8010ecc:	4413      	add	r3, r2
 8010ece:	3316      	adds	r3, #22
 8010ed0:	2200      	movs	r2, #0
 8010ed2:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 8010ed4:	2300      	movs	r3, #0
 8010ed6:	61bb      	str	r3, [r7, #24]
 8010ed8:	69bb      	ldr	r3, [r7, #24]
 8010eda:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 8010edc:	683a      	ldr	r2, [r7, #0]
 8010ede:	69fb      	ldr	r3, [r7, #28]
 8010ee0:	4413      	add	r3, r2
 8010ee2:	3316      	adds	r3, #22
 8010ee4:	781b      	ldrb	r3, [r3, #0]
 8010ee6:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 8010ee8:	e04c      	b.n	8010f84 <get_fileinfo+0x140>
		c = (TCHAR)dp->dir[i++];
 8010eea:	687b      	ldr	r3, [r7, #4]
 8010eec:	6a1a      	ldr	r2, [r3, #32]
 8010eee:	69fb      	ldr	r3, [r7, #28]
 8010ef0:	1c59      	adds	r1, r3, #1
 8010ef2:	61f9      	str	r1, [r7, #28]
 8010ef4:	4413      	add	r3, r2
 8010ef6:	781b      	ldrb	r3, [r3, #0]
 8010ef8:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 8010efa:	7dfb      	ldrb	r3, [r7, #23]
 8010efc:	2b20      	cmp	r3, #32
 8010efe:	d100      	bne.n	8010f02 <get_fileinfo+0xbe>
 8010f00:	e040      	b.n	8010f84 <get_fileinfo+0x140>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 8010f02:	7dfb      	ldrb	r3, [r7, #23]
 8010f04:	2b05      	cmp	r3, #5
 8010f06:	d101      	bne.n	8010f0c <get_fileinfo+0xc8>
 8010f08:	23e5      	movs	r3, #229	; 0xe5
 8010f0a:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 8010f0c:	69fb      	ldr	r3, [r7, #28]
 8010f0e:	2b09      	cmp	r3, #9
 8010f10:	d10f      	bne.n	8010f32 <get_fileinfo+0xee>
			if (!lfv) fno->fname[j] = '.';
 8010f12:	89bb      	ldrh	r3, [r7, #12]
 8010f14:	2b00      	cmp	r3, #0
 8010f16:	d105      	bne.n	8010f24 <get_fileinfo+0xe0>
 8010f18:	683a      	ldr	r2, [r7, #0]
 8010f1a:	69bb      	ldr	r3, [r7, #24]
 8010f1c:	4413      	add	r3, r2
 8010f1e:	3316      	adds	r3, #22
 8010f20:	222e      	movs	r2, #46	; 0x2e
 8010f22:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 8010f24:	69bb      	ldr	r3, [r7, #24]
 8010f26:	1c5a      	adds	r2, r3, #1
 8010f28:	61ba      	str	r2, [r7, #24]
 8010f2a:	683a      	ldr	r2, [r7, #0]
 8010f2c:	4413      	add	r3, r2
 8010f2e:	222e      	movs	r2, #46	; 0x2e
 8010f30:	725a      	strb	r2, [r3, #9]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 8010f32:	683a      	ldr	r2, [r7, #0]
 8010f34:	69bb      	ldr	r3, [r7, #24]
 8010f36:	4413      	add	r3, r2
 8010f38:	3309      	adds	r3, #9
 8010f3a:	7dfa      	ldrb	r2, [r7, #23]
 8010f3c:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 8010f3e:	89bb      	ldrh	r3, [r7, #12]
 8010f40:	2b00      	cmp	r3, #0
 8010f42:	d11c      	bne.n	8010f7e <get_fileinfo+0x13a>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 8010f44:	7dfb      	ldrb	r3, [r7, #23]
 8010f46:	2b40      	cmp	r3, #64	; 0x40
 8010f48:	d913      	bls.n	8010f72 <get_fileinfo+0x12e>
 8010f4a:	7dfb      	ldrb	r3, [r7, #23]
 8010f4c:	2b5a      	cmp	r3, #90	; 0x5a
 8010f4e:	d810      	bhi.n	8010f72 <get_fileinfo+0x12e>
 8010f50:	687b      	ldr	r3, [r7, #4]
 8010f52:	6a1b      	ldr	r3, [r3, #32]
 8010f54:	330c      	adds	r3, #12
 8010f56:	781b      	ldrb	r3, [r3, #0]
 8010f58:	461a      	mov	r2, r3
 8010f5a:	69fb      	ldr	r3, [r7, #28]
 8010f5c:	2b08      	cmp	r3, #8
 8010f5e:	d901      	bls.n	8010f64 <get_fileinfo+0x120>
 8010f60:	2310      	movs	r3, #16
 8010f62:	e000      	b.n	8010f66 <get_fileinfo+0x122>
 8010f64:	2308      	movs	r3, #8
 8010f66:	4013      	ands	r3, r2
 8010f68:	2b00      	cmp	r3, #0
 8010f6a:	d002      	beq.n	8010f72 <get_fileinfo+0x12e>
				c += 0x20;			/* To lower */
 8010f6c:	7dfb      	ldrb	r3, [r7, #23]
 8010f6e:	3320      	adds	r3, #32
 8010f70:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 8010f72:	683a      	ldr	r2, [r7, #0]
 8010f74:	69bb      	ldr	r3, [r7, #24]
 8010f76:	4413      	add	r3, r2
 8010f78:	3316      	adds	r3, #22
 8010f7a:	7dfa      	ldrb	r2, [r7, #23]
 8010f7c:	701a      	strb	r2, [r3, #0]
		}
		j++;
 8010f7e:	69bb      	ldr	r3, [r7, #24]
 8010f80:	3301      	adds	r3, #1
 8010f82:	61bb      	str	r3, [r7, #24]
	while (i < 11) {		/* Copy name body and extension */
 8010f84:	69fb      	ldr	r3, [r7, #28]
 8010f86:	2b0a      	cmp	r3, #10
 8010f88:	d9af      	bls.n	8010eea <get_fileinfo+0xa6>
	}
	if (!lfv) {
 8010f8a:	89bb      	ldrh	r3, [r7, #12]
 8010f8c:	2b00      	cmp	r3, #0
 8010f8e:	d10d      	bne.n	8010fac <get_fileinfo+0x168>
		fno->fname[j] = 0;
 8010f90:	683a      	ldr	r2, [r7, #0]
 8010f92:	69bb      	ldr	r3, [r7, #24]
 8010f94:	4413      	add	r3, r2
 8010f96:	3316      	adds	r3, #22
 8010f98:	2200      	movs	r2, #0
 8010f9a:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 8010f9c:	687b      	ldr	r3, [r7, #4]
 8010f9e:	6a1b      	ldr	r3, [r3, #32]
 8010fa0:	330c      	adds	r3, #12
 8010fa2:	781b      	ldrb	r3, [r3, #0]
 8010fa4:	2b00      	cmp	r3, #0
 8010fa6:	d101      	bne.n	8010fac <get_fileinfo+0x168>
 8010fa8:	2300      	movs	r3, #0
 8010faa:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 8010fac:	683a      	ldr	r2, [r7, #0]
 8010fae:	69bb      	ldr	r3, [r7, #24]
 8010fb0:	4413      	add	r3, r2
 8010fb2:	3309      	adds	r3, #9
 8010fb4:	2200      	movs	r2, #0
 8010fb6:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 8010fb8:	687b      	ldr	r3, [r7, #4]
 8010fba:	6a1b      	ldr	r3, [r3, #32]
 8010fbc:	7ada      	ldrb	r2, [r3, #11]
 8010fbe:	683b      	ldr	r3, [r7, #0]
 8010fc0:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 8010fc2:	687b      	ldr	r3, [r7, #4]
 8010fc4:	6a1b      	ldr	r3, [r3, #32]
 8010fc6:	331c      	adds	r3, #28
 8010fc8:	4618      	mov	r0, r3
 8010fca:	f7fe fb15 	bl	800f5f8 <ld_dword>
 8010fce:	4602      	mov	r2, r0
 8010fd0:	683b      	ldr	r3, [r7, #0]
 8010fd2:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 8010fd4:	687b      	ldr	r3, [r7, #4]
 8010fd6:	6a1b      	ldr	r3, [r3, #32]
 8010fd8:	3316      	adds	r3, #22
 8010fda:	4618      	mov	r0, r3
 8010fdc:	f7fe fb0c 	bl	800f5f8 <ld_dword>
 8010fe0:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 8010fe2:	68bb      	ldr	r3, [r7, #8]
 8010fe4:	b29a      	uxth	r2, r3
 8010fe6:	683b      	ldr	r3, [r7, #0]
 8010fe8:	80da      	strh	r2, [r3, #6]
 8010fea:	68bb      	ldr	r3, [r7, #8]
 8010fec:	0c1b      	lsrs	r3, r3, #16
 8010fee:	b29a      	uxth	r2, r3
 8010ff0:	683b      	ldr	r3, [r7, #0]
 8010ff2:	809a      	strh	r2, [r3, #4]
 8010ff4:	e000      	b.n	8010ff8 <get_fileinfo+0x1b4>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8010ff6:	bf00      	nop
}
 8010ff8:	3720      	adds	r7, #32
 8010ffa:	46bd      	mov	sp, r7
 8010ffc:	bd80      	pop	{r7, pc}
	...

08011000 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8011000:	b580      	push	{r7, lr}
 8011002:	b08a      	sub	sp, #40	; 0x28
 8011004:	af00      	add	r7, sp, #0
 8011006:	6078      	str	r0, [r7, #4]
 8011008:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 801100a:	683b      	ldr	r3, [r7, #0]
 801100c:	681b      	ldr	r3, [r3, #0]
 801100e:	613b      	str	r3, [r7, #16]
 8011010:	687b      	ldr	r3, [r7, #4]
 8011012:	681b      	ldr	r3, [r3, #0]
 8011014:	68db      	ldr	r3, [r3, #12]
 8011016:	60fb      	str	r3, [r7, #12]
 8011018:	2300      	movs	r3, #0
 801101a:	617b      	str	r3, [r7, #20]
 801101c:	697b      	ldr	r3, [r7, #20]
 801101e:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8011020:	69bb      	ldr	r3, [r7, #24]
 8011022:	1c5a      	adds	r2, r3, #1
 8011024:	61ba      	str	r2, [r7, #24]
 8011026:	693a      	ldr	r2, [r7, #16]
 8011028:	4413      	add	r3, r2
 801102a:	781b      	ldrb	r3, [r3, #0]
 801102c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 801102e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011030:	2b1f      	cmp	r3, #31
 8011032:	d940      	bls.n	80110b6 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8011034:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011036:	2b2f      	cmp	r3, #47	; 0x2f
 8011038:	d006      	beq.n	8011048 <create_name+0x48>
 801103a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801103c:	2b5c      	cmp	r3, #92	; 0x5c
 801103e:	d110      	bne.n	8011062 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8011040:	e002      	b.n	8011048 <create_name+0x48>
 8011042:	69bb      	ldr	r3, [r7, #24]
 8011044:	3301      	adds	r3, #1
 8011046:	61bb      	str	r3, [r7, #24]
 8011048:	693a      	ldr	r2, [r7, #16]
 801104a:	69bb      	ldr	r3, [r7, #24]
 801104c:	4413      	add	r3, r2
 801104e:	781b      	ldrb	r3, [r3, #0]
 8011050:	2b2f      	cmp	r3, #47	; 0x2f
 8011052:	d0f6      	beq.n	8011042 <create_name+0x42>
 8011054:	693a      	ldr	r2, [r7, #16]
 8011056:	69bb      	ldr	r3, [r7, #24]
 8011058:	4413      	add	r3, r2
 801105a:	781b      	ldrb	r3, [r3, #0]
 801105c:	2b5c      	cmp	r3, #92	; 0x5c
 801105e:	d0f0      	beq.n	8011042 <create_name+0x42>
			break;
 8011060:	e02a      	b.n	80110b8 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8011062:	697b      	ldr	r3, [r7, #20]
 8011064:	2bfe      	cmp	r3, #254	; 0xfe
 8011066:	d901      	bls.n	801106c <create_name+0x6c>
 8011068:	2306      	movs	r3, #6
 801106a:	e17d      	b.n	8011368 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 801106c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801106e:	b2db      	uxtb	r3, r3
 8011070:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8011072:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011074:	2101      	movs	r1, #1
 8011076:	4618      	mov	r0, r3
 8011078:	f002 f934 	bl	80132e4 <ff_convert>
 801107c:	4603      	mov	r3, r0
 801107e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8011080:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011082:	2b00      	cmp	r3, #0
 8011084:	d101      	bne.n	801108a <create_name+0x8a>
 8011086:	2306      	movs	r3, #6
 8011088:	e16e      	b.n	8011368 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 801108a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801108c:	2b7f      	cmp	r3, #127	; 0x7f
 801108e:	d809      	bhi.n	80110a4 <create_name+0xa4>
 8011090:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011092:	4619      	mov	r1, r3
 8011094:	488d      	ldr	r0, [pc, #564]	; (80112cc <create_name+0x2cc>)
 8011096:	f7fe fb7c 	bl	800f792 <chk_chr>
 801109a:	4603      	mov	r3, r0
 801109c:	2b00      	cmp	r3, #0
 801109e:	d001      	beq.n	80110a4 <create_name+0xa4>
 80110a0:	2306      	movs	r3, #6
 80110a2:	e161      	b.n	8011368 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 80110a4:	697b      	ldr	r3, [r7, #20]
 80110a6:	1c5a      	adds	r2, r3, #1
 80110a8:	617a      	str	r2, [r7, #20]
 80110aa:	005b      	lsls	r3, r3, #1
 80110ac:	68fa      	ldr	r2, [r7, #12]
 80110ae:	4413      	add	r3, r2
 80110b0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80110b2:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 80110b4:	e7b4      	b.n	8011020 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 80110b6:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 80110b8:	693a      	ldr	r2, [r7, #16]
 80110ba:	69bb      	ldr	r3, [r7, #24]
 80110bc:	441a      	add	r2, r3
 80110be:	683b      	ldr	r3, [r7, #0]
 80110c0:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80110c2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80110c4:	2b1f      	cmp	r3, #31
 80110c6:	d801      	bhi.n	80110cc <create_name+0xcc>
 80110c8:	2304      	movs	r3, #4
 80110ca:	e000      	b.n	80110ce <create_name+0xce>
 80110cc:	2300      	movs	r3, #0
 80110ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 80110d2:	e011      	b.n	80110f8 <create_name+0xf8>
		w = lfn[di - 1];
 80110d4:	697b      	ldr	r3, [r7, #20]
 80110d6:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80110da:	3b01      	subs	r3, #1
 80110dc:	005b      	lsls	r3, r3, #1
 80110de:	68fa      	ldr	r2, [r7, #12]
 80110e0:	4413      	add	r3, r2
 80110e2:	881b      	ldrh	r3, [r3, #0]
 80110e4:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 80110e6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80110e8:	2b20      	cmp	r3, #32
 80110ea:	d002      	beq.n	80110f2 <create_name+0xf2>
 80110ec:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80110ee:	2b2e      	cmp	r3, #46	; 0x2e
 80110f0:	d106      	bne.n	8011100 <create_name+0x100>
		di--;
 80110f2:	697b      	ldr	r3, [r7, #20]
 80110f4:	3b01      	subs	r3, #1
 80110f6:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 80110f8:	697b      	ldr	r3, [r7, #20]
 80110fa:	2b00      	cmp	r3, #0
 80110fc:	d1ea      	bne.n	80110d4 <create_name+0xd4>
 80110fe:	e000      	b.n	8011102 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8011100:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8011102:	697b      	ldr	r3, [r7, #20]
 8011104:	005b      	lsls	r3, r3, #1
 8011106:	68fa      	ldr	r2, [r7, #12]
 8011108:	4413      	add	r3, r2
 801110a:	2200      	movs	r2, #0
 801110c:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 801110e:	697b      	ldr	r3, [r7, #20]
 8011110:	2b00      	cmp	r3, #0
 8011112:	d101      	bne.n	8011118 <create_name+0x118>
 8011114:	2306      	movs	r3, #6
 8011116:	e127      	b.n	8011368 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8011118:	687b      	ldr	r3, [r7, #4]
 801111a:	3324      	adds	r3, #36	; 0x24
 801111c:	220b      	movs	r2, #11
 801111e:	2120      	movs	r1, #32
 8011120:	4618      	mov	r0, r3
 8011122:	f7fe faf4 	bl	800f70e <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8011126:	2300      	movs	r3, #0
 8011128:	61bb      	str	r3, [r7, #24]
 801112a:	e002      	b.n	8011132 <create_name+0x132>
 801112c:	69bb      	ldr	r3, [r7, #24]
 801112e:	3301      	adds	r3, #1
 8011130:	61bb      	str	r3, [r7, #24]
 8011132:	69bb      	ldr	r3, [r7, #24]
 8011134:	005b      	lsls	r3, r3, #1
 8011136:	68fa      	ldr	r2, [r7, #12]
 8011138:	4413      	add	r3, r2
 801113a:	881b      	ldrh	r3, [r3, #0]
 801113c:	2b20      	cmp	r3, #32
 801113e:	d0f5      	beq.n	801112c <create_name+0x12c>
 8011140:	69bb      	ldr	r3, [r7, #24]
 8011142:	005b      	lsls	r3, r3, #1
 8011144:	68fa      	ldr	r2, [r7, #12]
 8011146:	4413      	add	r3, r2
 8011148:	881b      	ldrh	r3, [r3, #0]
 801114a:	2b2e      	cmp	r3, #46	; 0x2e
 801114c:	d0ee      	beq.n	801112c <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 801114e:	69bb      	ldr	r3, [r7, #24]
 8011150:	2b00      	cmp	r3, #0
 8011152:	d009      	beq.n	8011168 <create_name+0x168>
 8011154:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011158:	f043 0303 	orr.w	r3, r3, #3
 801115c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8011160:	e002      	b.n	8011168 <create_name+0x168>
 8011162:	697b      	ldr	r3, [r7, #20]
 8011164:	3b01      	subs	r3, #1
 8011166:	617b      	str	r3, [r7, #20]
 8011168:	697b      	ldr	r3, [r7, #20]
 801116a:	2b00      	cmp	r3, #0
 801116c:	d009      	beq.n	8011182 <create_name+0x182>
 801116e:	697b      	ldr	r3, [r7, #20]
 8011170:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8011174:	3b01      	subs	r3, #1
 8011176:	005b      	lsls	r3, r3, #1
 8011178:	68fa      	ldr	r2, [r7, #12]
 801117a:	4413      	add	r3, r2
 801117c:	881b      	ldrh	r3, [r3, #0]
 801117e:	2b2e      	cmp	r3, #46	; 0x2e
 8011180:	d1ef      	bne.n	8011162 <create_name+0x162>

	i = b = 0; ni = 8;
 8011182:	2300      	movs	r3, #0
 8011184:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8011188:	2300      	movs	r3, #0
 801118a:	623b      	str	r3, [r7, #32]
 801118c:	2308      	movs	r3, #8
 801118e:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8011190:	69bb      	ldr	r3, [r7, #24]
 8011192:	1c5a      	adds	r2, r3, #1
 8011194:	61ba      	str	r2, [r7, #24]
 8011196:	005b      	lsls	r3, r3, #1
 8011198:	68fa      	ldr	r2, [r7, #12]
 801119a:	4413      	add	r3, r2
 801119c:	881b      	ldrh	r3, [r3, #0]
 801119e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 80111a0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80111a2:	2b00      	cmp	r3, #0
 80111a4:	f000 8090 	beq.w	80112c8 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 80111a8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80111aa:	2b20      	cmp	r3, #32
 80111ac:	d006      	beq.n	80111bc <create_name+0x1bc>
 80111ae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80111b0:	2b2e      	cmp	r3, #46	; 0x2e
 80111b2:	d10a      	bne.n	80111ca <create_name+0x1ca>
 80111b4:	69ba      	ldr	r2, [r7, #24]
 80111b6:	697b      	ldr	r3, [r7, #20]
 80111b8:	429a      	cmp	r2, r3
 80111ba:	d006      	beq.n	80111ca <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 80111bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80111c0:	f043 0303 	orr.w	r3, r3, #3
 80111c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80111c8:	e07d      	b.n	80112c6 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 80111ca:	6a3a      	ldr	r2, [r7, #32]
 80111cc:	69fb      	ldr	r3, [r7, #28]
 80111ce:	429a      	cmp	r2, r3
 80111d0:	d203      	bcs.n	80111da <create_name+0x1da>
 80111d2:	69ba      	ldr	r2, [r7, #24]
 80111d4:	697b      	ldr	r3, [r7, #20]
 80111d6:	429a      	cmp	r2, r3
 80111d8:	d123      	bne.n	8011222 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 80111da:	69fb      	ldr	r3, [r7, #28]
 80111dc:	2b0b      	cmp	r3, #11
 80111de:	d106      	bne.n	80111ee <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 80111e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80111e4:	f043 0303 	orr.w	r3, r3, #3
 80111e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80111ec:	e075      	b.n	80112da <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 80111ee:	69ba      	ldr	r2, [r7, #24]
 80111f0:	697b      	ldr	r3, [r7, #20]
 80111f2:	429a      	cmp	r2, r3
 80111f4:	d005      	beq.n	8011202 <create_name+0x202>
 80111f6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80111fa:	f043 0303 	orr.w	r3, r3, #3
 80111fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 8011202:	69ba      	ldr	r2, [r7, #24]
 8011204:	697b      	ldr	r3, [r7, #20]
 8011206:	429a      	cmp	r2, r3
 8011208:	d866      	bhi.n	80112d8 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 801120a:	697b      	ldr	r3, [r7, #20]
 801120c:	61bb      	str	r3, [r7, #24]
 801120e:	2308      	movs	r3, #8
 8011210:	623b      	str	r3, [r7, #32]
 8011212:	230b      	movs	r3, #11
 8011214:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8011216:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801121a:	009b      	lsls	r3, r3, #2
 801121c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8011220:	e051      	b.n	80112c6 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8011222:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011224:	2b7f      	cmp	r3, #127	; 0x7f
 8011226:	d914      	bls.n	8011252 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8011228:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801122a:	2100      	movs	r1, #0
 801122c:	4618      	mov	r0, r3
 801122e:	f002 f859 	bl	80132e4 <ff_convert>
 8011232:	4603      	mov	r3, r0
 8011234:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8011236:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011238:	2b00      	cmp	r3, #0
 801123a:	d004      	beq.n	8011246 <create_name+0x246>
 801123c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801123e:	3b80      	subs	r3, #128	; 0x80
 8011240:	4a23      	ldr	r2, [pc, #140]	; (80112d0 <create_name+0x2d0>)
 8011242:	5cd3      	ldrb	r3, [r2, r3]
 8011244:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8011246:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801124a:	f043 0302 	orr.w	r3, r3, #2
 801124e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8011252:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011254:	2b00      	cmp	r3, #0
 8011256:	d007      	beq.n	8011268 <create_name+0x268>
 8011258:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801125a:	4619      	mov	r1, r3
 801125c:	481d      	ldr	r0, [pc, #116]	; (80112d4 <create_name+0x2d4>)
 801125e:	f7fe fa98 	bl	800f792 <chk_chr>
 8011262:	4603      	mov	r3, r0
 8011264:	2b00      	cmp	r3, #0
 8011266:	d008      	beq.n	801127a <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8011268:	235f      	movs	r3, #95	; 0x5f
 801126a:	84bb      	strh	r3, [r7, #36]	; 0x24
 801126c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011270:	f043 0303 	orr.w	r3, r3, #3
 8011274:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8011278:	e01b      	b.n	80112b2 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 801127a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801127c:	2b40      	cmp	r3, #64	; 0x40
 801127e:	d909      	bls.n	8011294 <create_name+0x294>
 8011280:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011282:	2b5a      	cmp	r3, #90	; 0x5a
 8011284:	d806      	bhi.n	8011294 <create_name+0x294>
					b |= 2;
 8011286:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801128a:	f043 0302 	orr.w	r3, r3, #2
 801128e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8011292:	e00e      	b.n	80112b2 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8011294:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011296:	2b60      	cmp	r3, #96	; 0x60
 8011298:	d90b      	bls.n	80112b2 <create_name+0x2b2>
 801129a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801129c:	2b7a      	cmp	r3, #122	; 0x7a
 801129e:	d808      	bhi.n	80112b2 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 80112a0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80112a4:	f043 0301 	orr.w	r3, r3, #1
 80112a8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80112ac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80112ae:	3b20      	subs	r3, #32
 80112b0:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 80112b2:	6a3b      	ldr	r3, [r7, #32]
 80112b4:	1c5a      	adds	r2, r3, #1
 80112b6:	623a      	str	r2, [r7, #32]
 80112b8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80112ba:	b2d1      	uxtb	r1, r2
 80112bc:	687a      	ldr	r2, [r7, #4]
 80112be:	4413      	add	r3, r2
 80112c0:	460a      	mov	r2, r1
 80112c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 80112c6:	e763      	b.n	8011190 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 80112c8:	bf00      	nop
 80112ca:	e006      	b.n	80112da <create_name+0x2da>
 80112cc:	08019868 	.word	0x08019868
 80112d0:	080259a8 	.word	0x080259a8
 80112d4:	08019874 	.word	0x08019874
			if (si > di) break;			/* No extension */
 80112d8:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80112da:	687b      	ldr	r3, [r7, #4]
 80112dc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80112e0:	2be5      	cmp	r3, #229	; 0xe5
 80112e2:	d103      	bne.n	80112ec <create_name+0x2ec>
 80112e4:	687b      	ldr	r3, [r7, #4]
 80112e6:	2205      	movs	r2, #5
 80112e8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 80112ec:	69fb      	ldr	r3, [r7, #28]
 80112ee:	2b08      	cmp	r3, #8
 80112f0:	d104      	bne.n	80112fc <create_name+0x2fc>
 80112f2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80112f6:	009b      	lsls	r3, r3, #2
 80112f8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 80112fc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8011300:	f003 030c 	and.w	r3, r3, #12
 8011304:	2b0c      	cmp	r3, #12
 8011306:	d005      	beq.n	8011314 <create_name+0x314>
 8011308:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801130c:	f003 0303 	and.w	r3, r3, #3
 8011310:	2b03      	cmp	r3, #3
 8011312:	d105      	bne.n	8011320 <create_name+0x320>
 8011314:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011318:	f043 0302 	orr.w	r3, r3, #2
 801131c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8011320:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011324:	f003 0302 	and.w	r3, r3, #2
 8011328:	2b00      	cmp	r3, #0
 801132a:	d117      	bne.n	801135c <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 801132c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8011330:	f003 0303 	and.w	r3, r3, #3
 8011334:	2b01      	cmp	r3, #1
 8011336:	d105      	bne.n	8011344 <create_name+0x344>
 8011338:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801133c:	f043 0310 	orr.w	r3, r3, #16
 8011340:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8011344:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8011348:	f003 030c 	and.w	r3, r3, #12
 801134c:	2b04      	cmp	r3, #4
 801134e:	d105      	bne.n	801135c <create_name+0x35c>
 8011350:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011354:	f043 0308 	orr.w	r3, r3, #8
 8011358:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 801135c:	687b      	ldr	r3, [r7, #4]
 801135e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8011362:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 8011366:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8011368:	4618      	mov	r0, r3
 801136a:	3728      	adds	r7, #40	; 0x28
 801136c:	46bd      	mov	sp, r7
 801136e:	bd80      	pop	{r7, pc}

08011370 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8011370:	b580      	push	{r7, lr}
 8011372:	b086      	sub	sp, #24
 8011374:	af00      	add	r7, sp, #0
 8011376:	6078      	str	r0, [r7, #4]
 8011378:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 801137a:	687b      	ldr	r3, [r7, #4]
 801137c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 801137e:	693b      	ldr	r3, [r7, #16]
 8011380:	681b      	ldr	r3, [r3, #0]
 8011382:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8011384:	e002      	b.n	801138c <follow_path+0x1c>
 8011386:	683b      	ldr	r3, [r7, #0]
 8011388:	3301      	adds	r3, #1
 801138a:	603b      	str	r3, [r7, #0]
 801138c:	683b      	ldr	r3, [r7, #0]
 801138e:	781b      	ldrb	r3, [r3, #0]
 8011390:	2b2f      	cmp	r3, #47	; 0x2f
 8011392:	d0f8      	beq.n	8011386 <follow_path+0x16>
 8011394:	683b      	ldr	r3, [r7, #0]
 8011396:	781b      	ldrb	r3, [r3, #0]
 8011398:	2b5c      	cmp	r3, #92	; 0x5c
 801139a:	d0f4      	beq.n	8011386 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 801139c:	693b      	ldr	r3, [r7, #16]
 801139e:	2200      	movs	r2, #0
 80113a0:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80113a2:	683b      	ldr	r3, [r7, #0]
 80113a4:	781b      	ldrb	r3, [r3, #0]
 80113a6:	2b1f      	cmp	r3, #31
 80113a8:	d80a      	bhi.n	80113c0 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 80113aa:	687b      	ldr	r3, [r7, #4]
 80113ac:	2280      	movs	r2, #128	; 0x80
 80113ae:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 80113b2:	2100      	movs	r1, #0
 80113b4:	6878      	ldr	r0, [r7, #4]
 80113b6:	f7fe ff35 	bl	8010224 <dir_sdi>
 80113ba:	4603      	mov	r3, r0
 80113bc:	75fb      	strb	r3, [r7, #23]
 80113be:	e043      	b.n	8011448 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80113c0:	463b      	mov	r3, r7
 80113c2:	4619      	mov	r1, r3
 80113c4:	6878      	ldr	r0, [r7, #4]
 80113c6:	f7ff fe1b 	bl	8011000 <create_name>
 80113ca:	4603      	mov	r3, r0
 80113cc:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80113ce:	7dfb      	ldrb	r3, [r7, #23]
 80113d0:	2b00      	cmp	r3, #0
 80113d2:	d134      	bne.n	801143e <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 80113d4:	6878      	ldr	r0, [r7, #4]
 80113d6:	f7ff fb7d 	bl	8010ad4 <dir_find>
 80113da:	4603      	mov	r3, r0
 80113dc:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80113de:	687b      	ldr	r3, [r7, #4]
 80113e0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80113e4:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80113e6:	7dfb      	ldrb	r3, [r7, #23]
 80113e8:	2b00      	cmp	r3, #0
 80113ea:	d00a      	beq.n	8011402 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80113ec:	7dfb      	ldrb	r3, [r7, #23]
 80113ee:	2b04      	cmp	r3, #4
 80113f0:	d127      	bne.n	8011442 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80113f2:	7afb      	ldrb	r3, [r7, #11]
 80113f4:	f003 0304 	and.w	r3, r3, #4
 80113f8:	2b00      	cmp	r3, #0
 80113fa:	d122      	bne.n	8011442 <follow_path+0xd2>
 80113fc:	2305      	movs	r3, #5
 80113fe:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8011400:	e01f      	b.n	8011442 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8011402:	7afb      	ldrb	r3, [r7, #11]
 8011404:	f003 0304 	and.w	r3, r3, #4
 8011408:	2b00      	cmp	r3, #0
 801140a:	d11c      	bne.n	8011446 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 801140c:	693b      	ldr	r3, [r7, #16]
 801140e:	799b      	ldrb	r3, [r3, #6]
 8011410:	f003 0310 	and.w	r3, r3, #16
 8011414:	2b00      	cmp	r3, #0
 8011416:	d102      	bne.n	801141e <follow_path+0xae>
				res = FR_NO_PATH; break;
 8011418:	2305      	movs	r3, #5
 801141a:	75fb      	strb	r3, [r7, #23]
 801141c:	e014      	b.n	8011448 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 801141e:	68fb      	ldr	r3, [r7, #12]
 8011420:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8011424:	687b      	ldr	r3, [r7, #4]
 8011426:	695b      	ldr	r3, [r3, #20]
 8011428:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801142c:	4413      	add	r3, r2
 801142e:	4619      	mov	r1, r3
 8011430:	68f8      	ldr	r0, [r7, #12]
 8011432:	f7ff f87e 	bl	8010532 <ld_clust>
 8011436:	4602      	mov	r2, r0
 8011438:	693b      	ldr	r3, [r7, #16]
 801143a:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 801143c:	e7c0      	b.n	80113c0 <follow_path+0x50>
			if (res != FR_OK) break;
 801143e:	bf00      	nop
 8011440:	e002      	b.n	8011448 <follow_path+0xd8>
				break;
 8011442:	bf00      	nop
 8011444:	e000      	b.n	8011448 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8011446:	bf00      	nop
			}
		}
	}

	return res;
 8011448:	7dfb      	ldrb	r3, [r7, #23]
}
 801144a:	4618      	mov	r0, r3
 801144c:	3718      	adds	r7, #24
 801144e:	46bd      	mov	sp, r7
 8011450:	bd80      	pop	{r7, pc}

08011452 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8011452:	b480      	push	{r7}
 8011454:	b087      	sub	sp, #28
 8011456:	af00      	add	r7, sp, #0
 8011458:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 801145a:	f04f 33ff 	mov.w	r3, #4294967295
 801145e:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8011460:	687b      	ldr	r3, [r7, #4]
 8011462:	681b      	ldr	r3, [r3, #0]
 8011464:	2b00      	cmp	r3, #0
 8011466:	d031      	beq.n	80114cc <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8011468:	687b      	ldr	r3, [r7, #4]
 801146a:	681b      	ldr	r3, [r3, #0]
 801146c:	617b      	str	r3, [r7, #20]
 801146e:	e002      	b.n	8011476 <get_ldnumber+0x24>
 8011470:	697b      	ldr	r3, [r7, #20]
 8011472:	3301      	adds	r3, #1
 8011474:	617b      	str	r3, [r7, #20]
 8011476:	697b      	ldr	r3, [r7, #20]
 8011478:	781b      	ldrb	r3, [r3, #0]
 801147a:	2b1f      	cmp	r3, #31
 801147c:	d903      	bls.n	8011486 <get_ldnumber+0x34>
 801147e:	697b      	ldr	r3, [r7, #20]
 8011480:	781b      	ldrb	r3, [r3, #0]
 8011482:	2b3a      	cmp	r3, #58	; 0x3a
 8011484:	d1f4      	bne.n	8011470 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8011486:	697b      	ldr	r3, [r7, #20]
 8011488:	781b      	ldrb	r3, [r3, #0]
 801148a:	2b3a      	cmp	r3, #58	; 0x3a
 801148c:	d11c      	bne.n	80114c8 <get_ldnumber+0x76>
			tp = *path;
 801148e:	687b      	ldr	r3, [r7, #4]
 8011490:	681b      	ldr	r3, [r3, #0]
 8011492:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8011494:	68fb      	ldr	r3, [r7, #12]
 8011496:	1c5a      	adds	r2, r3, #1
 8011498:	60fa      	str	r2, [r7, #12]
 801149a:	781b      	ldrb	r3, [r3, #0]
 801149c:	3b30      	subs	r3, #48	; 0x30
 801149e:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80114a0:	68bb      	ldr	r3, [r7, #8]
 80114a2:	2b09      	cmp	r3, #9
 80114a4:	d80e      	bhi.n	80114c4 <get_ldnumber+0x72>
 80114a6:	68fa      	ldr	r2, [r7, #12]
 80114a8:	697b      	ldr	r3, [r7, #20]
 80114aa:	429a      	cmp	r2, r3
 80114ac:	d10a      	bne.n	80114c4 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80114ae:	68bb      	ldr	r3, [r7, #8]
 80114b0:	2b01      	cmp	r3, #1
 80114b2:	d807      	bhi.n	80114c4 <get_ldnumber+0x72>
					vol = (int)i;
 80114b4:	68bb      	ldr	r3, [r7, #8]
 80114b6:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80114b8:	697b      	ldr	r3, [r7, #20]
 80114ba:	3301      	adds	r3, #1
 80114bc:	617b      	str	r3, [r7, #20]
 80114be:	687b      	ldr	r3, [r7, #4]
 80114c0:	697a      	ldr	r2, [r7, #20]
 80114c2:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80114c4:	693b      	ldr	r3, [r7, #16]
 80114c6:	e002      	b.n	80114ce <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80114c8:	2300      	movs	r3, #0
 80114ca:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80114cc:	693b      	ldr	r3, [r7, #16]
}
 80114ce:	4618      	mov	r0, r3
 80114d0:	371c      	adds	r7, #28
 80114d2:	46bd      	mov	sp, r7
 80114d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114d8:	4770      	bx	lr
	...

080114dc <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80114dc:	b580      	push	{r7, lr}
 80114de:	b082      	sub	sp, #8
 80114e0:	af00      	add	r7, sp, #0
 80114e2:	6078      	str	r0, [r7, #4]
 80114e4:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80114e6:	687b      	ldr	r3, [r7, #4]
 80114e8:	2200      	movs	r2, #0
 80114ea:	70da      	strb	r2, [r3, #3]
 80114ec:	687b      	ldr	r3, [r7, #4]
 80114ee:	f04f 32ff 	mov.w	r2, #4294967295
 80114f2:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80114f4:	6839      	ldr	r1, [r7, #0]
 80114f6:	6878      	ldr	r0, [r7, #4]
 80114f8:	f7fe fb16 	bl	800fb28 <move_window>
 80114fc:	4603      	mov	r3, r0
 80114fe:	2b00      	cmp	r3, #0
 8011500:	d001      	beq.n	8011506 <check_fs+0x2a>
 8011502:	2304      	movs	r3, #4
 8011504:	e038      	b.n	8011578 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8011506:	687b      	ldr	r3, [r7, #4]
 8011508:	3334      	adds	r3, #52	; 0x34
 801150a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801150e:	4618      	mov	r0, r3
 8011510:	f7fe f85a 	bl	800f5c8 <ld_word>
 8011514:	4603      	mov	r3, r0
 8011516:	461a      	mov	r2, r3
 8011518:	f64a 2355 	movw	r3, #43605	; 0xaa55
 801151c:	429a      	cmp	r2, r3
 801151e:	d001      	beq.n	8011524 <check_fs+0x48>
 8011520:	2303      	movs	r3, #3
 8011522:	e029      	b.n	8011578 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8011524:	687b      	ldr	r3, [r7, #4]
 8011526:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801152a:	2be9      	cmp	r3, #233	; 0xe9
 801152c:	d009      	beq.n	8011542 <check_fs+0x66>
 801152e:	687b      	ldr	r3, [r7, #4]
 8011530:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8011534:	2beb      	cmp	r3, #235	; 0xeb
 8011536:	d11e      	bne.n	8011576 <check_fs+0x9a>
 8011538:	687b      	ldr	r3, [r7, #4]
 801153a:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 801153e:	2b90      	cmp	r3, #144	; 0x90
 8011540:	d119      	bne.n	8011576 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8011542:	687b      	ldr	r3, [r7, #4]
 8011544:	3334      	adds	r3, #52	; 0x34
 8011546:	3336      	adds	r3, #54	; 0x36
 8011548:	4618      	mov	r0, r3
 801154a:	f7fe f855 	bl	800f5f8 <ld_dword>
 801154e:	4603      	mov	r3, r0
 8011550:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8011554:	4a0a      	ldr	r2, [pc, #40]	; (8011580 <check_fs+0xa4>)
 8011556:	4293      	cmp	r3, r2
 8011558:	d101      	bne.n	801155e <check_fs+0x82>
 801155a:	2300      	movs	r3, #0
 801155c:	e00c      	b.n	8011578 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 801155e:	687b      	ldr	r3, [r7, #4]
 8011560:	3334      	adds	r3, #52	; 0x34
 8011562:	3352      	adds	r3, #82	; 0x52
 8011564:	4618      	mov	r0, r3
 8011566:	f7fe f847 	bl	800f5f8 <ld_dword>
 801156a:	4603      	mov	r3, r0
 801156c:	4a05      	ldr	r2, [pc, #20]	; (8011584 <check_fs+0xa8>)
 801156e:	4293      	cmp	r3, r2
 8011570:	d101      	bne.n	8011576 <check_fs+0x9a>
 8011572:	2300      	movs	r3, #0
 8011574:	e000      	b.n	8011578 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8011576:	2302      	movs	r3, #2
}
 8011578:	4618      	mov	r0, r3
 801157a:	3708      	adds	r7, #8
 801157c:	46bd      	mov	sp, r7
 801157e:	bd80      	pop	{r7, pc}
 8011580:	00544146 	.word	0x00544146
 8011584:	33544146 	.word	0x33544146

08011588 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8011588:	b580      	push	{r7, lr}
 801158a:	b096      	sub	sp, #88	; 0x58
 801158c:	af00      	add	r7, sp, #0
 801158e:	60f8      	str	r0, [r7, #12]
 8011590:	60b9      	str	r1, [r7, #8]
 8011592:	4613      	mov	r3, r2
 8011594:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8011596:	68bb      	ldr	r3, [r7, #8]
 8011598:	2200      	movs	r2, #0
 801159a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 801159c:	68f8      	ldr	r0, [r7, #12]
 801159e:	f7ff ff58 	bl	8011452 <get_ldnumber>
 80115a2:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80115a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80115a6:	2b00      	cmp	r3, #0
 80115a8:	da01      	bge.n	80115ae <find_volume+0x26>
 80115aa:	230b      	movs	r3, #11
 80115ac:	e22d      	b.n	8011a0a <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80115ae:	4aa1      	ldr	r2, [pc, #644]	; (8011834 <find_volume+0x2ac>)
 80115b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80115b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80115b6:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80115b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80115ba:	2b00      	cmp	r3, #0
 80115bc:	d101      	bne.n	80115c2 <find_volume+0x3a>
 80115be:	230c      	movs	r3, #12
 80115c0:	e223      	b.n	8011a0a <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80115c2:	68bb      	ldr	r3, [r7, #8]
 80115c4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80115c6:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80115c8:	79fb      	ldrb	r3, [r7, #7]
 80115ca:	f023 0301 	bic.w	r3, r3, #1
 80115ce:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80115d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80115d2:	781b      	ldrb	r3, [r3, #0]
 80115d4:	2b00      	cmp	r3, #0
 80115d6:	d01a      	beq.n	801160e <find_volume+0x86>
		stat = disk_status(fs->drv);
 80115d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80115da:	785b      	ldrb	r3, [r3, #1]
 80115dc:	4618      	mov	r0, r3
 80115de:	f7fd ff4d 	bl	800f47c <disk_status>
 80115e2:	4603      	mov	r3, r0
 80115e4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80115e8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80115ec:	f003 0301 	and.w	r3, r3, #1
 80115f0:	2b00      	cmp	r3, #0
 80115f2:	d10c      	bne.n	801160e <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80115f4:	79fb      	ldrb	r3, [r7, #7]
 80115f6:	2b00      	cmp	r3, #0
 80115f8:	d007      	beq.n	801160a <find_volume+0x82>
 80115fa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80115fe:	f003 0304 	and.w	r3, r3, #4
 8011602:	2b00      	cmp	r3, #0
 8011604:	d001      	beq.n	801160a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8011606:	230a      	movs	r3, #10
 8011608:	e1ff      	b.n	8011a0a <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 801160a:	2300      	movs	r3, #0
 801160c:	e1fd      	b.n	8011a0a <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 801160e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011610:	2200      	movs	r2, #0
 8011612:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8011614:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011616:	b2da      	uxtb	r2, r3
 8011618:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801161a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 801161c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801161e:	785b      	ldrb	r3, [r3, #1]
 8011620:	4618      	mov	r0, r3
 8011622:	f7fd ff45 	bl	800f4b0 <disk_initialize>
 8011626:	4603      	mov	r3, r0
 8011628:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 801162c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011630:	f003 0301 	and.w	r3, r3, #1
 8011634:	2b00      	cmp	r3, #0
 8011636:	d001      	beq.n	801163c <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8011638:	2303      	movs	r3, #3
 801163a:	e1e6      	b.n	8011a0a <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 801163c:	79fb      	ldrb	r3, [r7, #7]
 801163e:	2b00      	cmp	r3, #0
 8011640:	d007      	beq.n	8011652 <find_volume+0xca>
 8011642:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011646:	f003 0304 	and.w	r3, r3, #4
 801164a:	2b00      	cmp	r3, #0
 801164c:	d001      	beq.n	8011652 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 801164e:	230a      	movs	r3, #10
 8011650:	e1db      	b.n	8011a0a <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8011652:	2300      	movs	r3, #0
 8011654:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8011656:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8011658:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801165a:	f7ff ff3f 	bl	80114dc <check_fs>
 801165e:	4603      	mov	r3, r0
 8011660:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8011664:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011668:	2b02      	cmp	r3, #2
 801166a:	d149      	bne.n	8011700 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 801166c:	2300      	movs	r3, #0
 801166e:	643b      	str	r3, [r7, #64]	; 0x40
 8011670:	e01e      	b.n	80116b0 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8011672:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011674:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8011678:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801167a:	011b      	lsls	r3, r3, #4
 801167c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8011680:	4413      	add	r3, r2
 8011682:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8011684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011686:	3304      	adds	r3, #4
 8011688:	781b      	ldrb	r3, [r3, #0]
 801168a:	2b00      	cmp	r3, #0
 801168c:	d006      	beq.n	801169c <find_volume+0x114>
 801168e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011690:	3308      	adds	r3, #8
 8011692:	4618      	mov	r0, r3
 8011694:	f7fd ffb0 	bl	800f5f8 <ld_dword>
 8011698:	4602      	mov	r2, r0
 801169a:	e000      	b.n	801169e <find_volume+0x116>
 801169c:	2200      	movs	r2, #0
 801169e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80116a0:	009b      	lsls	r3, r3, #2
 80116a2:	3358      	adds	r3, #88	; 0x58
 80116a4:	443b      	add	r3, r7
 80116a6:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80116aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80116ac:	3301      	adds	r3, #1
 80116ae:	643b      	str	r3, [r7, #64]	; 0x40
 80116b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80116b2:	2b03      	cmp	r3, #3
 80116b4:	d9dd      	bls.n	8011672 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80116b6:	2300      	movs	r3, #0
 80116b8:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 80116ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80116bc:	2b00      	cmp	r3, #0
 80116be:	d002      	beq.n	80116c6 <find_volume+0x13e>
 80116c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80116c2:	3b01      	subs	r3, #1
 80116c4:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80116c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80116c8:	009b      	lsls	r3, r3, #2
 80116ca:	3358      	adds	r3, #88	; 0x58
 80116cc:	443b      	add	r3, r7
 80116ce:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80116d2:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80116d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80116d6:	2b00      	cmp	r3, #0
 80116d8:	d005      	beq.n	80116e6 <find_volume+0x15e>
 80116da:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80116dc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80116de:	f7ff fefd 	bl	80114dc <check_fs>
 80116e2:	4603      	mov	r3, r0
 80116e4:	e000      	b.n	80116e8 <find_volume+0x160>
 80116e6:	2303      	movs	r3, #3
 80116e8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80116ec:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80116f0:	2b01      	cmp	r3, #1
 80116f2:	d905      	bls.n	8011700 <find_volume+0x178>
 80116f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80116f6:	3301      	adds	r3, #1
 80116f8:	643b      	str	r3, [r7, #64]	; 0x40
 80116fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80116fc:	2b03      	cmp	r3, #3
 80116fe:	d9e2      	bls.n	80116c6 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8011700:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011704:	2b04      	cmp	r3, #4
 8011706:	d101      	bne.n	801170c <find_volume+0x184>
 8011708:	2301      	movs	r3, #1
 801170a:	e17e      	b.n	8011a0a <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 801170c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011710:	2b01      	cmp	r3, #1
 8011712:	d901      	bls.n	8011718 <find_volume+0x190>
 8011714:	230d      	movs	r3, #13
 8011716:	e178      	b.n	8011a0a <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8011718:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801171a:	3334      	adds	r3, #52	; 0x34
 801171c:	330b      	adds	r3, #11
 801171e:	4618      	mov	r0, r3
 8011720:	f7fd ff52 	bl	800f5c8 <ld_word>
 8011724:	4603      	mov	r3, r0
 8011726:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801172a:	d001      	beq.n	8011730 <find_volume+0x1a8>
 801172c:	230d      	movs	r3, #13
 801172e:	e16c      	b.n	8011a0a <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8011730:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011732:	3334      	adds	r3, #52	; 0x34
 8011734:	3316      	adds	r3, #22
 8011736:	4618      	mov	r0, r3
 8011738:	f7fd ff46 	bl	800f5c8 <ld_word>
 801173c:	4603      	mov	r3, r0
 801173e:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8011740:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011742:	2b00      	cmp	r3, #0
 8011744:	d106      	bne.n	8011754 <find_volume+0x1cc>
 8011746:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011748:	3334      	adds	r3, #52	; 0x34
 801174a:	3324      	adds	r3, #36	; 0x24
 801174c:	4618      	mov	r0, r3
 801174e:	f7fd ff53 	bl	800f5f8 <ld_dword>
 8011752:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8011754:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011756:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8011758:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 801175a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801175c:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8011760:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011762:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8011764:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011766:	789b      	ldrb	r3, [r3, #2]
 8011768:	2b01      	cmp	r3, #1
 801176a:	d005      	beq.n	8011778 <find_volume+0x1f0>
 801176c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801176e:	789b      	ldrb	r3, [r3, #2]
 8011770:	2b02      	cmp	r3, #2
 8011772:	d001      	beq.n	8011778 <find_volume+0x1f0>
 8011774:	230d      	movs	r3, #13
 8011776:	e148      	b.n	8011a0a <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8011778:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801177a:	789b      	ldrb	r3, [r3, #2]
 801177c:	461a      	mov	r2, r3
 801177e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011780:	fb02 f303 	mul.w	r3, r2, r3
 8011784:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8011786:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011788:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801178c:	b29a      	uxth	r2, r3
 801178e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011790:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8011792:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011794:	895b      	ldrh	r3, [r3, #10]
 8011796:	2b00      	cmp	r3, #0
 8011798:	d008      	beq.n	80117ac <find_volume+0x224>
 801179a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801179c:	895b      	ldrh	r3, [r3, #10]
 801179e:	461a      	mov	r2, r3
 80117a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80117a2:	895b      	ldrh	r3, [r3, #10]
 80117a4:	3b01      	subs	r3, #1
 80117a6:	4013      	ands	r3, r2
 80117a8:	2b00      	cmp	r3, #0
 80117aa:	d001      	beq.n	80117b0 <find_volume+0x228>
 80117ac:	230d      	movs	r3, #13
 80117ae:	e12c      	b.n	8011a0a <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80117b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80117b2:	3334      	adds	r3, #52	; 0x34
 80117b4:	3311      	adds	r3, #17
 80117b6:	4618      	mov	r0, r3
 80117b8:	f7fd ff06 	bl	800f5c8 <ld_word>
 80117bc:	4603      	mov	r3, r0
 80117be:	461a      	mov	r2, r3
 80117c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80117c2:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80117c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80117c6:	891b      	ldrh	r3, [r3, #8]
 80117c8:	f003 030f 	and.w	r3, r3, #15
 80117cc:	b29b      	uxth	r3, r3
 80117ce:	2b00      	cmp	r3, #0
 80117d0:	d001      	beq.n	80117d6 <find_volume+0x24e>
 80117d2:	230d      	movs	r3, #13
 80117d4:	e119      	b.n	8011a0a <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80117d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80117d8:	3334      	adds	r3, #52	; 0x34
 80117da:	3313      	adds	r3, #19
 80117dc:	4618      	mov	r0, r3
 80117de:	f7fd fef3 	bl	800f5c8 <ld_word>
 80117e2:	4603      	mov	r3, r0
 80117e4:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80117e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80117e8:	2b00      	cmp	r3, #0
 80117ea:	d106      	bne.n	80117fa <find_volume+0x272>
 80117ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80117ee:	3334      	adds	r3, #52	; 0x34
 80117f0:	3320      	adds	r3, #32
 80117f2:	4618      	mov	r0, r3
 80117f4:	f7fd ff00 	bl	800f5f8 <ld_dword>
 80117f8:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80117fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80117fc:	3334      	adds	r3, #52	; 0x34
 80117fe:	330e      	adds	r3, #14
 8011800:	4618      	mov	r0, r3
 8011802:	f7fd fee1 	bl	800f5c8 <ld_word>
 8011806:	4603      	mov	r3, r0
 8011808:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 801180a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801180c:	2b00      	cmp	r3, #0
 801180e:	d101      	bne.n	8011814 <find_volume+0x28c>
 8011810:	230d      	movs	r3, #13
 8011812:	e0fa      	b.n	8011a0a <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8011814:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8011816:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011818:	4413      	add	r3, r2
 801181a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801181c:	8912      	ldrh	r2, [r2, #8]
 801181e:	0912      	lsrs	r2, r2, #4
 8011820:	b292      	uxth	r2, r2
 8011822:	4413      	add	r3, r2
 8011824:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8011826:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011828:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801182a:	429a      	cmp	r2, r3
 801182c:	d204      	bcs.n	8011838 <find_volume+0x2b0>
 801182e:	230d      	movs	r3, #13
 8011830:	e0eb      	b.n	8011a0a <find_volume+0x482>
 8011832:	bf00      	nop
 8011834:	20005378 	.word	0x20005378
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8011838:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801183a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801183c:	1ad3      	subs	r3, r2, r3
 801183e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011840:	8952      	ldrh	r2, [r2, #10]
 8011842:	fbb3 f3f2 	udiv	r3, r3, r2
 8011846:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8011848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801184a:	2b00      	cmp	r3, #0
 801184c:	d101      	bne.n	8011852 <find_volume+0x2ca>
 801184e:	230d      	movs	r3, #13
 8011850:	e0db      	b.n	8011a0a <find_volume+0x482>
		fmt = FS_FAT32;
 8011852:	2303      	movs	r3, #3
 8011854:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8011858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801185a:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 801185e:	4293      	cmp	r3, r2
 8011860:	d802      	bhi.n	8011868 <find_volume+0x2e0>
 8011862:	2302      	movs	r3, #2
 8011864:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8011868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801186a:	f640 72f5 	movw	r2, #4085	; 0xff5
 801186e:	4293      	cmp	r3, r2
 8011870:	d802      	bhi.n	8011878 <find_volume+0x2f0>
 8011872:	2301      	movs	r3, #1
 8011874:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8011878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801187a:	1c9a      	adds	r2, r3, #2
 801187c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801187e:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8011880:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011882:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8011884:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8011886:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8011888:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801188a:	441a      	add	r2, r3
 801188c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801188e:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8011890:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8011892:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011894:	441a      	add	r2, r3
 8011896:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011898:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 801189a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801189e:	2b03      	cmp	r3, #3
 80118a0:	d11e      	bne.n	80118e0 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80118a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80118a4:	3334      	adds	r3, #52	; 0x34
 80118a6:	332a      	adds	r3, #42	; 0x2a
 80118a8:	4618      	mov	r0, r3
 80118aa:	f7fd fe8d 	bl	800f5c8 <ld_word>
 80118ae:	4603      	mov	r3, r0
 80118b0:	2b00      	cmp	r3, #0
 80118b2:	d001      	beq.n	80118b8 <find_volume+0x330>
 80118b4:	230d      	movs	r3, #13
 80118b6:	e0a8      	b.n	8011a0a <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80118b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80118ba:	891b      	ldrh	r3, [r3, #8]
 80118bc:	2b00      	cmp	r3, #0
 80118be:	d001      	beq.n	80118c4 <find_volume+0x33c>
 80118c0:	230d      	movs	r3, #13
 80118c2:	e0a2      	b.n	8011a0a <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80118c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80118c6:	3334      	adds	r3, #52	; 0x34
 80118c8:	332c      	adds	r3, #44	; 0x2c
 80118ca:	4618      	mov	r0, r3
 80118cc:	f7fd fe94 	bl	800f5f8 <ld_dword>
 80118d0:	4602      	mov	r2, r0
 80118d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80118d4:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80118d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80118d8:	699b      	ldr	r3, [r3, #24]
 80118da:	009b      	lsls	r3, r3, #2
 80118dc:	647b      	str	r3, [r7, #68]	; 0x44
 80118de:	e01f      	b.n	8011920 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80118e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80118e2:	891b      	ldrh	r3, [r3, #8]
 80118e4:	2b00      	cmp	r3, #0
 80118e6:	d101      	bne.n	80118ec <find_volume+0x364>
 80118e8:	230d      	movs	r3, #13
 80118ea:	e08e      	b.n	8011a0a <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80118ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80118ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80118f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80118f2:	441a      	add	r2, r3
 80118f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80118f6:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80118f8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80118fc:	2b02      	cmp	r3, #2
 80118fe:	d103      	bne.n	8011908 <find_volume+0x380>
 8011900:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011902:	699b      	ldr	r3, [r3, #24]
 8011904:	005b      	lsls	r3, r3, #1
 8011906:	e00a      	b.n	801191e <find_volume+0x396>
 8011908:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801190a:	699a      	ldr	r2, [r3, #24]
 801190c:	4613      	mov	r3, r2
 801190e:	005b      	lsls	r3, r3, #1
 8011910:	4413      	add	r3, r2
 8011912:	085a      	lsrs	r2, r3, #1
 8011914:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011916:	699b      	ldr	r3, [r3, #24]
 8011918:	f003 0301 	and.w	r3, r3, #1
 801191c:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 801191e:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8011920:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011922:	69da      	ldr	r2, [r3, #28]
 8011924:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011926:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 801192a:	0a5b      	lsrs	r3, r3, #9
 801192c:	429a      	cmp	r2, r3
 801192e:	d201      	bcs.n	8011934 <find_volume+0x3ac>
 8011930:	230d      	movs	r3, #13
 8011932:	e06a      	b.n	8011a0a <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8011934:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011936:	f04f 32ff 	mov.w	r2, #4294967295
 801193a:	615a      	str	r2, [r3, #20]
 801193c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801193e:	695a      	ldr	r2, [r3, #20]
 8011940:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011942:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8011944:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011946:	2280      	movs	r2, #128	; 0x80
 8011948:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 801194a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801194e:	2b03      	cmp	r3, #3
 8011950:	d149      	bne.n	80119e6 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8011952:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011954:	3334      	adds	r3, #52	; 0x34
 8011956:	3330      	adds	r3, #48	; 0x30
 8011958:	4618      	mov	r0, r3
 801195a:	f7fd fe35 	bl	800f5c8 <ld_word>
 801195e:	4603      	mov	r3, r0
 8011960:	2b01      	cmp	r3, #1
 8011962:	d140      	bne.n	80119e6 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8011964:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011966:	3301      	adds	r3, #1
 8011968:	4619      	mov	r1, r3
 801196a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801196c:	f7fe f8dc 	bl	800fb28 <move_window>
 8011970:	4603      	mov	r3, r0
 8011972:	2b00      	cmp	r3, #0
 8011974:	d137      	bne.n	80119e6 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 8011976:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011978:	2200      	movs	r2, #0
 801197a:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 801197c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801197e:	3334      	adds	r3, #52	; 0x34
 8011980:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8011984:	4618      	mov	r0, r3
 8011986:	f7fd fe1f 	bl	800f5c8 <ld_word>
 801198a:	4603      	mov	r3, r0
 801198c:	461a      	mov	r2, r3
 801198e:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8011992:	429a      	cmp	r2, r3
 8011994:	d127      	bne.n	80119e6 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8011996:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011998:	3334      	adds	r3, #52	; 0x34
 801199a:	4618      	mov	r0, r3
 801199c:	f7fd fe2c 	bl	800f5f8 <ld_dword>
 80119a0:	4603      	mov	r3, r0
 80119a2:	4a1c      	ldr	r2, [pc, #112]	; (8011a14 <find_volume+0x48c>)
 80119a4:	4293      	cmp	r3, r2
 80119a6:	d11e      	bne.n	80119e6 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80119a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80119aa:	3334      	adds	r3, #52	; 0x34
 80119ac:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80119b0:	4618      	mov	r0, r3
 80119b2:	f7fd fe21 	bl	800f5f8 <ld_dword>
 80119b6:	4603      	mov	r3, r0
 80119b8:	4a17      	ldr	r2, [pc, #92]	; (8011a18 <find_volume+0x490>)
 80119ba:	4293      	cmp	r3, r2
 80119bc:	d113      	bne.n	80119e6 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80119be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80119c0:	3334      	adds	r3, #52	; 0x34
 80119c2:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80119c6:	4618      	mov	r0, r3
 80119c8:	f7fd fe16 	bl	800f5f8 <ld_dword>
 80119cc:	4602      	mov	r2, r0
 80119ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80119d0:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80119d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80119d4:	3334      	adds	r3, #52	; 0x34
 80119d6:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80119da:	4618      	mov	r0, r3
 80119dc:	f7fd fe0c 	bl	800f5f8 <ld_dword>
 80119e0:	4602      	mov	r2, r0
 80119e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80119e4:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80119e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80119e8:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80119ec:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80119ee:	4b0b      	ldr	r3, [pc, #44]	; (8011a1c <find_volume+0x494>)
 80119f0:	881b      	ldrh	r3, [r3, #0]
 80119f2:	3301      	adds	r3, #1
 80119f4:	b29a      	uxth	r2, r3
 80119f6:	4b09      	ldr	r3, [pc, #36]	; (8011a1c <find_volume+0x494>)
 80119f8:	801a      	strh	r2, [r3, #0]
 80119fa:	4b08      	ldr	r3, [pc, #32]	; (8011a1c <find_volume+0x494>)
 80119fc:	881a      	ldrh	r2, [r3, #0]
 80119fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a00:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8011a02:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8011a04:	f7fe f828 	bl	800fa58 <clear_lock>
#endif
	return FR_OK;
 8011a08:	2300      	movs	r3, #0
}
 8011a0a:	4618      	mov	r0, r3
 8011a0c:	3758      	adds	r7, #88	; 0x58
 8011a0e:	46bd      	mov	sp, r7
 8011a10:	bd80      	pop	{r7, pc}
 8011a12:	bf00      	nop
 8011a14:	41615252 	.word	0x41615252
 8011a18:	61417272 	.word	0x61417272
 8011a1c:	20005380 	.word	0x20005380

08011a20 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8011a20:	b580      	push	{r7, lr}
 8011a22:	b084      	sub	sp, #16
 8011a24:	af00      	add	r7, sp, #0
 8011a26:	6078      	str	r0, [r7, #4]
 8011a28:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8011a2a:	2309      	movs	r3, #9
 8011a2c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8011a2e:	687b      	ldr	r3, [r7, #4]
 8011a30:	2b00      	cmp	r3, #0
 8011a32:	d01c      	beq.n	8011a6e <validate+0x4e>
 8011a34:	687b      	ldr	r3, [r7, #4]
 8011a36:	681b      	ldr	r3, [r3, #0]
 8011a38:	2b00      	cmp	r3, #0
 8011a3a:	d018      	beq.n	8011a6e <validate+0x4e>
 8011a3c:	687b      	ldr	r3, [r7, #4]
 8011a3e:	681b      	ldr	r3, [r3, #0]
 8011a40:	781b      	ldrb	r3, [r3, #0]
 8011a42:	2b00      	cmp	r3, #0
 8011a44:	d013      	beq.n	8011a6e <validate+0x4e>
 8011a46:	687b      	ldr	r3, [r7, #4]
 8011a48:	889a      	ldrh	r2, [r3, #4]
 8011a4a:	687b      	ldr	r3, [r7, #4]
 8011a4c:	681b      	ldr	r3, [r3, #0]
 8011a4e:	88db      	ldrh	r3, [r3, #6]
 8011a50:	429a      	cmp	r2, r3
 8011a52:	d10c      	bne.n	8011a6e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8011a54:	687b      	ldr	r3, [r7, #4]
 8011a56:	681b      	ldr	r3, [r3, #0]
 8011a58:	785b      	ldrb	r3, [r3, #1]
 8011a5a:	4618      	mov	r0, r3
 8011a5c:	f7fd fd0e 	bl	800f47c <disk_status>
 8011a60:	4603      	mov	r3, r0
 8011a62:	f003 0301 	and.w	r3, r3, #1
 8011a66:	2b00      	cmp	r3, #0
 8011a68:	d101      	bne.n	8011a6e <validate+0x4e>
			res = FR_OK;
 8011a6a:	2300      	movs	r3, #0
 8011a6c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8011a6e:	7bfb      	ldrb	r3, [r7, #15]
 8011a70:	2b00      	cmp	r3, #0
 8011a72:	d102      	bne.n	8011a7a <validate+0x5a>
 8011a74:	687b      	ldr	r3, [r7, #4]
 8011a76:	681b      	ldr	r3, [r3, #0]
 8011a78:	e000      	b.n	8011a7c <validate+0x5c>
 8011a7a:	2300      	movs	r3, #0
 8011a7c:	683a      	ldr	r2, [r7, #0]
 8011a7e:	6013      	str	r3, [r2, #0]
	return res;
 8011a80:	7bfb      	ldrb	r3, [r7, #15]
}
 8011a82:	4618      	mov	r0, r3
 8011a84:	3710      	adds	r7, #16
 8011a86:	46bd      	mov	sp, r7
 8011a88:	bd80      	pop	{r7, pc}
	...

08011a8c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8011a8c:	b580      	push	{r7, lr}
 8011a8e:	b088      	sub	sp, #32
 8011a90:	af00      	add	r7, sp, #0
 8011a92:	60f8      	str	r0, [r7, #12]
 8011a94:	60b9      	str	r1, [r7, #8]
 8011a96:	4613      	mov	r3, r2
 8011a98:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8011a9a:	68bb      	ldr	r3, [r7, #8]
 8011a9c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8011a9e:	f107 0310 	add.w	r3, r7, #16
 8011aa2:	4618      	mov	r0, r3
 8011aa4:	f7ff fcd5 	bl	8011452 <get_ldnumber>
 8011aa8:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8011aaa:	69fb      	ldr	r3, [r7, #28]
 8011aac:	2b00      	cmp	r3, #0
 8011aae:	da01      	bge.n	8011ab4 <f_mount+0x28>
 8011ab0:	230b      	movs	r3, #11
 8011ab2:	e02b      	b.n	8011b0c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8011ab4:	4a17      	ldr	r2, [pc, #92]	; (8011b14 <f_mount+0x88>)
 8011ab6:	69fb      	ldr	r3, [r7, #28]
 8011ab8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011abc:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8011abe:	69bb      	ldr	r3, [r7, #24]
 8011ac0:	2b00      	cmp	r3, #0
 8011ac2:	d005      	beq.n	8011ad0 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8011ac4:	69b8      	ldr	r0, [r7, #24]
 8011ac6:	f7fd ffc7 	bl	800fa58 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8011aca:	69bb      	ldr	r3, [r7, #24]
 8011acc:	2200      	movs	r2, #0
 8011ace:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8011ad0:	68fb      	ldr	r3, [r7, #12]
 8011ad2:	2b00      	cmp	r3, #0
 8011ad4:	d002      	beq.n	8011adc <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8011ad6:	68fb      	ldr	r3, [r7, #12]
 8011ad8:	2200      	movs	r2, #0
 8011ada:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8011adc:	68fa      	ldr	r2, [r7, #12]
 8011ade:	490d      	ldr	r1, [pc, #52]	; (8011b14 <f_mount+0x88>)
 8011ae0:	69fb      	ldr	r3, [r7, #28]
 8011ae2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8011ae6:	68fb      	ldr	r3, [r7, #12]
 8011ae8:	2b00      	cmp	r3, #0
 8011aea:	d002      	beq.n	8011af2 <f_mount+0x66>
 8011aec:	79fb      	ldrb	r3, [r7, #7]
 8011aee:	2b01      	cmp	r3, #1
 8011af0:	d001      	beq.n	8011af6 <f_mount+0x6a>
 8011af2:	2300      	movs	r3, #0
 8011af4:	e00a      	b.n	8011b0c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8011af6:	f107 010c 	add.w	r1, r7, #12
 8011afa:	f107 0308 	add.w	r3, r7, #8
 8011afe:	2200      	movs	r2, #0
 8011b00:	4618      	mov	r0, r3
 8011b02:	f7ff fd41 	bl	8011588 <find_volume>
 8011b06:	4603      	mov	r3, r0
 8011b08:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8011b0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8011b0c:	4618      	mov	r0, r3
 8011b0e:	3720      	adds	r7, #32
 8011b10:	46bd      	mov	sp, r7
 8011b12:	bd80      	pop	{r7, pc}
 8011b14:	20005378 	.word	0x20005378

08011b18 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8011b18:	b580      	push	{r7, lr}
 8011b1a:	b09a      	sub	sp, #104	; 0x68
 8011b1c:	af00      	add	r7, sp, #0
 8011b1e:	60f8      	str	r0, [r7, #12]
 8011b20:	60b9      	str	r1, [r7, #8]
 8011b22:	4613      	mov	r3, r2
 8011b24:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8011b26:	68fb      	ldr	r3, [r7, #12]
 8011b28:	2b00      	cmp	r3, #0
 8011b2a:	d101      	bne.n	8011b30 <f_open+0x18>
 8011b2c:	2309      	movs	r3, #9
 8011b2e:	e1bd      	b.n	8011eac <f_open+0x394>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8011b30:	79fb      	ldrb	r3, [r7, #7]
 8011b32:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8011b36:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8011b38:	79fa      	ldrb	r2, [r7, #7]
 8011b3a:	f107 0110 	add.w	r1, r7, #16
 8011b3e:	f107 0308 	add.w	r3, r7, #8
 8011b42:	4618      	mov	r0, r3
 8011b44:	f7ff fd20 	bl	8011588 <find_volume>
 8011b48:	4603      	mov	r3, r0
 8011b4a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 8011b4e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8011b52:	2b00      	cmp	r3, #0
 8011b54:	f040 81a1 	bne.w	8011e9a <f_open+0x382>
		dj.obj.fs = fs;
 8011b58:	693b      	ldr	r3, [r7, #16]
 8011b5a:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
 8011b5c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8011b60:	f001 fba9 	bl	80132b6 <ff_memalloc>
 8011b64:	65b8      	str	r0, [r7, #88]	; 0x58
 8011b66:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011b68:	2b00      	cmp	r3, #0
 8011b6a:	d101      	bne.n	8011b70 <f_open+0x58>
 8011b6c:	2311      	movs	r3, #17
 8011b6e:	e19d      	b.n	8011eac <f_open+0x394>
 8011b70:	693b      	ldr	r3, [r7, #16]
 8011b72:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8011b74:	60da      	str	r2, [r3, #12]
		res = follow_path(&dj, path);	/* Follow the file path */
 8011b76:	68ba      	ldr	r2, [r7, #8]
 8011b78:	f107 0314 	add.w	r3, r7, #20
 8011b7c:	4611      	mov	r1, r2
 8011b7e:	4618      	mov	r0, r3
 8011b80:	f7ff fbf6 	bl	8011370 <follow_path>
 8011b84:	4603      	mov	r3, r0
 8011b86:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8011b8a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8011b8e:	2b00      	cmp	r3, #0
 8011b90:	d11a      	bne.n	8011bc8 <f_open+0xb0>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8011b92:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8011b96:	b25b      	sxtb	r3, r3
 8011b98:	2b00      	cmp	r3, #0
 8011b9a:	da03      	bge.n	8011ba4 <f_open+0x8c>
				res = FR_INVALID_NAME;
 8011b9c:	2306      	movs	r3, #6
 8011b9e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8011ba2:	e011      	b.n	8011bc8 <f_open+0xb0>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8011ba4:	79fb      	ldrb	r3, [r7, #7]
 8011ba6:	f023 0301 	bic.w	r3, r3, #1
 8011baa:	2b00      	cmp	r3, #0
 8011bac:	bf14      	ite	ne
 8011bae:	2301      	movne	r3, #1
 8011bb0:	2300      	moveq	r3, #0
 8011bb2:	b2db      	uxtb	r3, r3
 8011bb4:	461a      	mov	r2, r3
 8011bb6:	f107 0314 	add.w	r3, r7, #20
 8011bba:	4611      	mov	r1, r2
 8011bbc:	4618      	mov	r0, r3
 8011bbe:	f7fd fe03 	bl	800f7c8 <chk_lock>
 8011bc2:	4603      	mov	r3, r0
 8011bc4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8011bc8:	79fb      	ldrb	r3, [r7, #7]
 8011bca:	f003 031c 	and.w	r3, r3, #28
 8011bce:	2b00      	cmp	r3, #0
 8011bd0:	d07f      	beq.n	8011cd2 <f_open+0x1ba>
			if (res != FR_OK) {					/* No file, create new */
 8011bd2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8011bd6:	2b00      	cmp	r3, #0
 8011bd8:	d017      	beq.n	8011c0a <f_open+0xf2>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8011bda:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8011bde:	2b04      	cmp	r3, #4
 8011be0:	d10e      	bne.n	8011c00 <f_open+0xe8>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8011be2:	f7fd fe4d 	bl	800f880 <enq_lock>
 8011be6:	4603      	mov	r3, r0
 8011be8:	2b00      	cmp	r3, #0
 8011bea:	d006      	beq.n	8011bfa <f_open+0xe2>
 8011bec:	f107 0314 	add.w	r3, r7, #20
 8011bf0:	4618      	mov	r0, r3
 8011bf2:	f7ff f82f 	bl	8010c54 <dir_register>
 8011bf6:	4603      	mov	r3, r0
 8011bf8:	e000      	b.n	8011bfc <f_open+0xe4>
 8011bfa:	2312      	movs	r3, #18
 8011bfc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8011c00:	79fb      	ldrb	r3, [r7, #7]
 8011c02:	f043 0308 	orr.w	r3, r3, #8
 8011c06:	71fb      	strb	r3, [r7, #7]
 8011c08:	e010      	b.n	8011c2c <f_open+0x114>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8011c0a:	7ebb      	ldrb	r3, [r7, #26]
 8011c0c:	f003 0311 	and.w	r3, r3, #17
 8011c10:	2b00      	cmp	r3, #0
 8011c12:	d003      	beq.n	8011c1c <f_open+0x104>
					res = FR_DENIED;
 8011c14:	2307      	movs	r3, #7
 8011c16:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8011c1a:	e007      	b.n	8011c2c <f_open+0x114>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8011c1c:	79fb      	ldrb	r3, [r7, #7]
 8011c1e:	f003 0304 	and.w	r3, r3, #4
 8011c22:	2b00      	cmp	r3, #0
 8011c24:	d002      	beq.n	8011c2c <f_open+0x114>
 8011c26:	2308      	movs	r3, #8
 8011c28:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8011c2c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8011c30:	2b00      	cmp	r3, #0
 8011c32:	d168      	bne.n	8011d06 <f_open+0x1ee>
 8011c34:	79fb      	ldrb	r3, [r7, #7]
 8011c36:	f003 0308 	and.w	r3, r3, #8
 8011c3a:	2b00      	cmp	r3, #0
 8011c3c:	d063      	beq.n	8011d06 <f_open+0x1ee>
				dw = GET_FATTIME();
 8011c3e:	f7fd fcbb 	bl	800f5b8 <get_fattime>
 8011c42:	6578      	str	r0, [r7, #84]	; 0x54
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8011c44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011c46:	330e      	adds	r3, #14
 8011c48:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8011c4a:	4618      	mov	r0, r3
 8011c4c:	f7fd fd12 	bl	800f674 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8011c50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011c52:	3316      	adds	r3, #22
 8011c54:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8011c56:	4618      	mov	r0, r3
 8011c58:	f7fd fd0c 	bl	800f674 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8011c5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011c5e:	330b      	adds	r3, #11
 8011c60:	2220      	movs	r2, #32
 8011c62:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8011c64:	693b      	ldr	r3, [r7, #16]
 8011c66:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011c68:	4611      	mov	r1, r2
 8011c6a:	4618      	mov	r0, r3
 8011c6c:	f7fe fc61 	bl	8010532 <ld_clust>
 8011c70:	6538      	str	r0, [r7, #80]	; 0x50
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8011c72:	693b      	ldr	r3, [r7, #16]
 8011c74:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8011c76:	2200      	movs	r2, #0
 8011c78:	4618      	mov	r0, r3
 8011c7a:	f7fe fc79 	bl	8010570 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8011c7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011c80:	331c      	adds	r3, #28
 8011c82:	2100      	movs	r1, #0
 8011c84:	4618      	mov	r0, r3
 8011c86:	f7fd fcf5 	bl	800f674 <st_dword>
					fs->wflag = 1;
 8011c8a:	693b      	ldr	r3, [r7, #16]
 8011c8c:	2201      	movs	r2, #1
 8011c8e:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8011c90:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011c92:	2b00      	cmp	r3, #0
 8011c94:	d037      	beq.n	8011d06 <f_open+0x1ee>
						dw = fs->winsect;
 8011c96:	693b      	ldr	r3, [r7, #16]
 8011c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011c9a:	657b      	str	r3, [r7, #84]	; 0x54
						res = remove_chain(&dj.obj, cl, 0);
 8011c9c:	f107 0314 	add.w	r3, r7, #20
 8011ca0:	2200      	movs	r2, #0
 8011ca2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8011ca4:	4618      	mov	r0, r3
 8011ca6:	f7fe f98c 	bl	800ffc2 <remove_chain>
 8011caa:	4603      	mov	r3, r0
 8011cac:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 8011cb0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8011cb4:	2b00      	cmp	r3, #0
 8011cb6:	d126      	bne.n	8011d06 <f_open+0x1ee>
							res = move_window(fs, dw);
 8011cb8:	693b      	ldr	r3, [r7, #16]
 8011cba:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8011cbc:	4618      	mov	r0, r3
 8011cbe:	f7fd ff33 	bl	800fb28 <move_window>
 8011cc2:	4603      	mov	r3, r0
 8011cc4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8011cc8:	693b      	ldr	r3, [r7, #16]
 8011cca:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8011ccc:	3a01      	subs	r2, #1
 8011cce:	611a      	str	r2, [r3, #16]
 8011cd0:	e019      	b.n	8011d06 <f_open+0x1ee>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8011cd2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8011cd6:	2b00      	cmp	r3, #0
 8011cd8:	d115      	bne.n	8011d06 <f_open+0x1ee>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8011cda:	7ebb      	ldrb	r3, [r7, #26]
 8011cdc:	f003 0310 	and.w	r3, r3, #16
 8011ce0:	2b00      	cmp	r3, #0
 8011ce2:	d003      	beq.n	8011cec <f_open+0x1d4>
					res = FR_NO_FILE;
 8011ce4:	2304      	movs	r3, #4
 8011ce6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8011cea:	e00c      	b.n	8011d06 <f_open+0x1ee>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8011cec:	79fb      	ldrb	r3, [r7, #7]
 8011cee:	f003 0302 	and.w	r3, r3, #2
 8011cf2:	2b00      	cmp	r3, #0
 8011cf4:	d007      	beq.n	8011d06 <f_open+0x1ee>
 8011cf6:	7ebb      	ldrb	r3, [r7, #26]
 8011cf8:	f003 0301 	and.w	r3, r3, #1
 8011cfc:	2b00      	cmp	r3, #0
 8011cfe:	d002      	beq.n	8011d06 <f_open+0x1ee>
						res = FR_DENIED;
 8011d00:	2307      	movs	r3, #7
 8011d02:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 8011d06:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8011d0a:	2b00      	cmp	r3, #0
 8011d0c:	d128      	bne.n	8011d60 <f_open+0x248>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8011d0e:	79fb      	ldrb	r3, [r7, #7]
 8011d10:	f003 0308 	and.w	r3, r3, #8
 8011d14:	2b00      	cmp	r3, #0
 8011d16:	d003      	beq.n	8011d20 <f_open+0x208>
				mode |= FA_MODIFIED;
 8011d18:	79fb      	ldrb	r3, [r7, #7]
 8011d1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011d1e:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8011d20:	693b      	ldr	r3, [r7, #16]
 8011d22:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011d24:	68fb      	ldr	r3, [r7, #12]
 8011d26:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8011d28:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011d2a:	68fb      	ldr	r3, [r7, #12]
 8011d2c:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8011d2e:	79fb      	ldrb	r3, [r7, #7]
 8011d30:	f023 0301 	bic.w	r3, r3, #1
 8011d34:	2b00      	cmp	r3, #0
 8011d36:	bf14      	ite	ne
 8011d38:	2301      	movne	r3, #1
 8011d3a:	2300      	moveq	r3, #0
 8011d3c:	b2db      	uxtb	r3, r3
 8011d3e:	461a      	mov	r2, r3
 8011d40:	f107 0314 	add.w	r3, r7, #20
 8011d44:	4611      	mov	r1, r2
 8011d46:	4618      	mov	r0, r3
 8011d48:	f7fd fdbc 	bl	800f8c4 <inc_lock>
 8011d4c:	4602      	mov	r2, r0
 8011d4e:	68fb      	ldr	r3, [r7, #12]
 8011d50:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8011d52:	68fb      	ldr	r3, [r7, #12]
 8011d54:	691b      	ldr	r3, [r3, #16]
 8011d56:	2b00      	cmp	r3, #0
 8011d58:	d102      	bne.n	8011d60 <f_open+0x248>
 8011d5a:	2302      	movs	r3, #2
 8011d5c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 8011d60:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8011d64:	2b00      	cmp	r3, #0
 8011d66:	f040 8095 	bne.w	8011e94 <f_open+0x37c>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8011d6a:	693b      	ldr	r3, [r7, #16]
 8011d6c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011d6e:	4611      	mov	r1, r2
 8011d70:	4618      	mov	r0, r3
 8011d72:	f7fe fbde 	bl	8010532 <ld_clust>
 8011d76:	4602      	mov	r2, r0
 8011d78:	68fb      	ldr	r3, [r7, #12]
 8011d7a:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8011d7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011d7e:	331c      	adds	r3, #28
 8011d80:	4618      	mov	r0, r3
 8011d82:	f7fd fc39 	bl	800f5f8 <ld_dword>
 8011d86:	4602      	mov	r2, r0
 8011d88:	68fb      	ldr	r3, [r7, #12]
 8011d8a:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8011d8c:	68fb      	ldr	r3, [r7, #12]
 8011d8e:	2200      	movs	r2, #0
 8011d90:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8011d92:	693a      	ldr	r2, [r7, #16]
 8011d94:	68fb      	ldr	r3, [r7, #12]
 8011d96:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8011d98:	693b      	ldr	r3, [r7, #16]
 8011d9a:	88da      	ldrh	r2, [r3, #6]
 8011d9c:	68fb      	ldr	r3, [r7, #12]
 8011d9e:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8011da0:	68fb      	ldr	r3, [r7, #12]
 8011da2:	79fa      	ldrb	r2, [r7, #7]
 8011da4:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8011da6:	68fb      	ldr	r3, [r7, #12]
 8011da8:	2200      	movs	r2, #0
 8011daa:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8011dac:	68fb      	ldr	r3, [r7, #12]
 8011dae:	2200      	movs	r2, #0
 8011db0:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8011db2:	68fb      	ldr	r3, [r7, #12]
 8011db4:	2200      	movs	r2, #0
 8011db6:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8011db8:	68fb      	ldr	r3, [r7, #12]
 8011dba:	3330      	adds	r3, #48	; 0x30
 8011dbc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011dc0:	2100      	movs	r1, #0
 8011dc2:	4618      	mov	r0, r3
 8011dc4:	f7fd fca3 	bl	800f70e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8011dc8:	79fb      	ldrb	r3, [r7, #7]
 8011dca:	f003 0320 	and.w	r3, r3, #32
 8011dce:	2b00      	cmp	r3, #0
 8011dd0:	d060      	beq.n	8011e94 <f_open+0x37c>
 8011dd2:	68fb      	ldr	r3, [r7, #12]
 8011dd4:	68db      	ldr	r3, [r3, #12]
 8011dd6:	2b00      	cmp	r3, #0
 8011dd8:	d05c      	beq.n	8011e94 <f_open+0x37c>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8011dda:	68fb      	ldr	r3, [r7, #12]
 8011ddc:	68da      	ldr	r2, [r3, #12]
 8011dde:	68fb      	ldr	r3, [r7, #12]
 8011de0:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8011de2:	693b      	ldr	r3, [r7, #16]
 8011de4:	895b      	ldrh	r3, [r3, #10]
 8011de6:	025b      	lsls	r3, r3, #9
 8011de8:	64fb      	str	r3, [r7, #76]	; 0x4c
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8011dea:	68fb      	ldr	r3, [r7, #12]
 8011dec:	689b      	ldr	r3, [r3, #8]
 8011dee:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8011df0:	68fb      	ldr	r3, [r7, #12]
 8011df2:	68db      	ldr	r3, [r3, #12]
 8011df4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8011df6:	e016      	b.n	8011e26 <f_open+0x30e>
					clst = get_fat(&fp->obj, clst);
 8011df8:	68fb      	ldr	r3, [r7, #12]
 8011dfa:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8011dfc:	4618      	mov	r0, r3
 8011dfe:	f7fd ff4e 	bl	800fc9e <get_fat>
 8011e02:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 8011e04:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011e06:	2b01      	cmp	r3, #1
 8011e08:	d802      	bhi.n	8011e10 <f_open+0x2f8>
 8011e0a:	2302      	movs	r3, #2
 8011e0c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8011e10:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011e12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011e16:	d102      	bne.n	8011e1e <f_open+0x306>
 8011e18:	2301      	movs	r3, #1
 8011e1a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8011e1e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8011e20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011e22:	1ad3      	subs	r3, r2, r3
 8011e24:	65fb      	str	r3, [r7, #92]	; 0x5c
 8011e26:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8011e2a:	2b00      	cmp	r3, #0
 8011e2c:	d103      	bne.n	8011e36 <f_open+0x31e>
 8011e2e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8011e30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011e32:	429a      	cmp	r2, r3
 8011e34:	d8e0      	bhi.n	8011df8 <f_open+0x2e0>
				}
				fp->clust = clst;
 8011e36:	68fb      	ldr	r3, [r7, #12]
 8011e38:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8011e3a:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8011e3c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8011e40:	2b00      	cmp	r3, #0
 8011e42:	d127      	bne.n	8011e94 <f_open+0x37c>
 8011e44:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011e46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011e4a:	2b00      	cmp	r3, #0
 8011e4c:	d022      	beq.n	8011e94 <f_open+0x37c>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8011e4e:	693b      	ldr	r3, [r7, #16]
 8011e50:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8011e52:	4618      	mov	r0, r3
 8011e54:	f7fd ff04 	bl	800fc60 <clust2sect>
 8011e58:	64b8      	str	r0, [r7, #72]	; 0x48
 8011e5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011e5c:	2b00      	cmp	r3, #0
 8011e5e:	d103      	bne.n	8011e68 <f_open+0x350>
						res = FR_INT_ERR;
 8011e60:	2302      	movs	r3, #2
 8011e62:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8011e66:	e015      	b.n	8011e94 <f_open+0x37c>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8011e68:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011e6a:	0a5a      	lsrs	r2, r3, #9
 8011e6c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011e6e:	441a      	add	r2, r3
 8011e70:	68fb      	ldr	r3, [r7, #12]
 8011e72:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8011e74:	693b      	ldr	r3, [r7, #16]
 8011e76:	7858      	ldrb	r0, [r3, #1]
 8011e78:	68fb      	ldr	r3, [r7, #12]
 8011e7a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011e7e:	68fb      	ldr	r3, [r7, #12]
 8011e80:	6a1a      	ldr	r2, [r3, #32]
 8011e82:	2301      	movs	r3, #1
 8011e84:	f7fd fb3a 	bl	800f4fc <disk_read>
 8011e88:	4603      	mov	r3, r0
 8011e8a:	2b00      	cmp	r3, #0
 8011e8c:	d002      	beq.n	8011e94 <f_open+0x37c>
 8011e8e:	2301      	movs	r3, #1
 8011e90:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
#endif
		}

		FREE_NAMBUF();
 8011e94:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8011e96:	f001 fa1a 	bl	80132ce <ff_memfree>
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8011e9a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8011e9e:	2b00      	cmp	r3, #0
 8011ea0:	d002      	beq.n	8011ea8 <f_open+0x390>
 8011ea2:	68fb      	ldr	r3, [r7, #12]
 8011ea4:	2200      	movs	r2, #0
 8011ea6:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8011ea8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8011eac:	4618      	mov	r0, r3
 8011eae:	3768      	adds	r7, #104	; 0x68
 8011eb0:	46bd      	mov	sp, r7
 8011eb2:	bd80      	pop	{r7, pc}

08011eb4 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8011eb4:	b580      	push	{r7, lr}
 8011eb6:	b08e      	sub	sp, #56	; 0x38
 8011eb8:	af00      	add	r7, sp, #0
 8011eba:	60f8      	str	r0, [r7, #12]
 8011ebc:	60b9      	str	r1, [r7, #8]
 8011ebe:	607a      	str	r2, [r7, #4]
 8011ec0:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8011ec2:	68bb      	ldr	r3, [r7, #8]
 8011ec4:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8011ec6:	683b      	ldr	r3, [r7, #0]
 8011ec8:	2200      	movs	r2, #0
 8011eca:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8011ecc:	68fb      	ldr	r3, [r7, #12]
 8011ece:	f107 0214 	add.w	r2, r7, #20
 8011ed2:	4611      	mov	r1, r2
 8011ed4:	4618      	mov	r0, r3
 8011ed6:	f7ff fda3 	bl	8011a20 <validate>
 8011eda:	4603      	mov	r3, r0
 8011edc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8011ee0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011ee4:	2b00      	cmp	r3, #0
 8011ee6:	d107      	bne.n	8011ef8 <f_read+0x44>
 8011ee8:	68fb      	ldr	r3, [r7, #12]
 8011eea:	7d5b      	ldrb	r3, [r3, #21]
 8011eec:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8011ef0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011ef4:	2b00      	cmp	r3, #0
 8011ef6:	d002      	beq.n	8011efe <f_read+0x4a>
 8011ef8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011efc:	e115      	b.n	801212a <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8011efe:	68fb      	ldr	r3, [r7, #12]
 8011f00:	7d1b      	ldrb	r3, [r3, #20]
 8011f02:	f003 0301 	and.w	r3, r3, #1
 8011f06:	2b00      	cmp	r3, #0
 8011f08:	d101      	bne.n	8011f0e <f_read+0x5a>
 8011f0a:	2307      	movs	r3, #7
 8011f0c:	e10d      	b.n	801212a <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 8011f0e:	68fb      	ldr	r3, [r7, #12]
 8011f10:	68da      	ldr	r2, [r3, #12]
 8011f12:	68fb      	ldr	r3, [r7, #12]
 8011f14:	699b      	ldr	r3, [r3, #24]
 8011f16:	1ad3      	subs	r3, r2, r3
 8011f18:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8011f1a:	687a      	ldr	r2, [r7, #4]
 8011f1c:	6a3b      	ldr	r3, [r7, #32]
 8011f1e:	429a      	cmp	r2, r3
 8011f20:	f240 80fe 	bls.w	8012120 <f_read+0x26c>
 8011f24:	6a3b      	ldr	r3, [r7, #32]
 8011f26:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8011f28:	e0fa      	b.n	8012120 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8011f2a:	68fb      	ldr	r3, [r7, #12]
 8011f2c:	699b      	ldr	r3, [r3, #24]
 8011f2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011f32:	2b00      	cmp	r3, #0
 8011f34:	f040 80c6 	bne.w	80120c4 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8011f38:	68fb      	ldr	r3, [r7, #12]
 8011f3a:	699b      	ldr	r3, [r3, #24]
 8011f3c:	0a5b      	lsrs	r3, r3, #9
 8011f3e:	697a      	ldr	r2, [r7, #20]
 8011f40:	8952      	ldrh	r2, [r2, #10]
 8011f42:	3a01      	subs	r2, #1
 8011f44:	4013      	ands	r3, r2
 8011f46:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8011f48:	69fb      	ldr	r3, [r7, #28]
 8011f4a:	2b00      	cmp	r3, #0
 8011f4c:	d12f      	bne.n	8011fae <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8011f4e:	68fb      	ldr	r3, [r7, #12]
 8011f50:	699b      	ldr	r3, [r3, #24]
 8011f52:	2b00      	cmp	r3, #0
 8011f54:	d103      	bne.n	8011f5e <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8011f56:	68fb      	ldr	r3, [r7, #12]
 8011f58:	689b      	ldr	r3, [r3, #8]
 8011f5a:	633b      	str	r3, [r7, #48]	; 0x30
 8011f5c:	e013      	b.n	8011f86 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8011f5e:	68fb      	ldr	r3, [r7, #12]
 8011f60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011f62:	2b00      	cmp	r3, #0
 8011f64:	d007      	beq.n	8011f76 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8011f66:	68fb      	ldr	r3, [r7, #12]
 8011f68:	699b      	ldr	r3, [r3, #24]
 8011f6a:	4619      	mov	r1, r3
 8011f6c:	68f8      	ldr	r0, [r7, #12]
 8011f6e:	f7fe f925 	bl	80101bc <clmt_clust>
 8011f72:	6338      	str	r0, [r7, #48]	; 0x30
 8011f74:	e007      	b.n	8011f86 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8011f76:	68fa      	ldr	r2, [r7, #12]
 8011f78:	68fb      	ldr	r3, [r7, #12]
 8011f7a:	69db      	ldr	r3, [r3, #28]
 8011f7c:	4619      	mov	r1, r3
 8011f7e:	4610      	mov	r0, r2
 8011f80:	f7fd fe8d 	bl	800fc9e <get_fat>
 8011f84:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8011f86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f88:	2b01      	cmp	r3, #1
 8011f8a:	d804      	bhi.n	8011f96 <f_read+0xe2>
 8011f8c:	68fb      	ldr	r3, [r7, #12]
 8011f8e:	2202      	movs	r2, #2
 8011f90:	755a      	strb	r2, [r3, #21]
 8011f92:	2302      	movs	r3, #2
 8011f94:	e0c9      	b.n	801212a <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8011f96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011f9c:	d104      	bne.n	8011fa8 <f_read+0xf4>
 8011f9e:	68fb      	ldr	r3, [r7, #12]
 8011fa0:	2201      	movs	r2, #1
 8011fa2:	755a      	strb	r2, [r3, #21]
 8011fa4:	2301      	movs	r3, #1
 8011fa6:	e0c0      	b.n	801212a <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 8011fa8:	68fb      	ldr	r3, [r7, #12]
 8011faa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011fac:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8011fae:	697a      	ldr	r2, [r7, #20]
 8011fb0:	68fb      	ldr	r3, [r7, #12]
 8011fb2:	69db      	ldr	r3, [r3, #28]
 8011fb4:	4619      	mov	r1, r3
 8011fb6:	4610      	mov	r0, r2
 8011fb8:	f7fd fe52 	bl	800fc60 <clust2sect>
 8011fbc:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8011fbe:	69bb      	ldr	r3, [r7, #24]
 8011fc0:	2b00      	cmp	r3, #0
 8011fc2:	d104      	bne.n	8011fce <f_read+0x11a>
 8011fc4:	68fb      	ldr	r3, [r7, #12]
 8011fc6:	2202      	movs	r2, #2
 8011fc8:	755a      	strb	r2, [r3, #21]
 8011fca:	2302      	movs	r3, #2
 8011fcc:	e0ad      	b.n	801212a <f_read+0x276>
			sect += csect;
 8011fce:	69ba      	ldr	r2, [r7, #24]
 8011fd0:	69fb      	ldr	r3, [r7, #28]
 8011fd2:	4413      	add	r3, r2
 8011fd4:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8011fd6:	687b      	ldr	r3, [r7, #4]
 8011fd8:	0a5b      	lsrs	r3, r3, #9
 8011fda:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8011fdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011fde:	2b00      	cmp	r3, #0
 8011fe0:	d039      	beq.n	8012056 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8011fe2:	69fa      	ldr	r2, [r7, #28]
 8011fe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011fe6:	4413      	add	r3, r2
 8011fe8:	697a      	ldr	r2, [r7, #20]
 8011fea:	8952      	ldrh	r2, [r2, #10]
 8011fec:	4293      	cmp	r3, r2
 8011fee:	d905      	bls.n	8011ffc <f_read+0x148>
					cc = fs->csize - csect;
 8011ff0:	697b      	ldr	r3, [r7, #20]
 8011ff2:	895b      	ldrh	r3, [r3, #10]
 8011ff4:	461a      	mov	r2, r3
 8011ff6:	69fb      	ldr	r3, [r7, #28]
 8011ff8:	1ad3      	subs	r3, r2, r3
 8011ffa:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8011ffc:	697b      	ldr	r3, [r7, #20]
 8011ffe:	7858      	ldrb	r0, [r3, #1]
 8012000:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012002:	69ba      	ldr	r2, [r7, #24]
 8012004:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8012006:	f7fd fa79 	bl	800f4fc <disk_read>
 801200a:	4603      	mov	r3, r0
 801200c:	2b00      	cmp	r3, #0
 801200e:	d004      	beq.n	801201a <f_read+0x166>
 8012010:	68fb      	ldr	r3, [r7, #12]
 8012012:	2201      	movs	r2, #1
 8012014:	755a      	strb	r2, [r3, #21]
 8012016:	2301      	movs	r3, #1
 8012018:	e087      	b.n	801212a <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 801201a:	68fb      	ldr	r3, [r7, #12]
 801201c:	7d1b      	ldrb	r3, [r3, #20]
 801201e:	b25b      	sxtb	r3, r3
 8012020:	2b00      	cmp	r3, #0
 8012022:	da14      	bge.n	801204e <f_read+0x19a>
 8012024:	68fb      	ldr	r3, [r7, #12]
 8012026:	6a1a      	ldr	r2, [r3, #32]
 8012028:	69bb      	ldr	r3, [r7, #24]
 801202a:	1ad3      	subs	r3, r2, r3
 801202c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801202e:	429a      	cmp	r2, r3
 8012030:	d90d      	bls.n	801204e <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8012032:	68fb      	ldr	r3, [r7, #12]
 8012034:	6a1a      	ldr	r2, [r3, #32]
 8012036:	69bb      	ldr	r3, [r7, #24]
 8012038:	1ad3      	subs	r3, r2, r3
 801203a:	025b      	lsls	r3, r3, #9
 801203c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801203e:	18d0      	adds	r0, r2, r3
 8012040:	68fb      	ldr	r3, [r7, #12]
 8012042:	3330      	adds	r3, #48	; 0x30
 8012044:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012048:	4619      	mov	r1, r3
 801204a:	f7fd fb3f 	bl	800f6cc <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 801204e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012050:	025b      	lsls	r3, r3, #9
 8012052:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8012054:	e050      	b.n	80120f8 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8012056:	68fb      	ldr	r3, [r7, #12]
 8012058:	6a1b      	ldr	r3, [r3, #32]
 801205a:	69ba      	ldr	r2, [r7, #24]
 801205c:	429a      	cmp	r2, r3
 801205e:	d02e      	beq.n	80120be <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8012060:	68fb      	ldr	r3, [r7, #12]
 8012062:	7d1b      	ldrb	r3, [r3, #20]
 8012064:	b25b      	sxtb	r3, r3
 8012066:	2b00      	cmp	r3, #0
 8012068:	da18      	bge.n	801209c <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801206a:	697b      	ldr	r3, [r7, #20]
 801206c:	7858      	ldrb	r0, [r3, #1]
 801206e:	68fb      	ldr	r3, [r7, #12]
 8012070:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8012074:	68fb      	ldr	r3, [r7, #12]
 8012076:	6a1a      	ldr	r2, [r3, #32]
 8012078:	2301      	movs	r3, #1
 801207a:	f7fd fa5f 	bl	800f53c <disk_write>
 801207e:	4603      	mov	r3, r0
 8012080:	2b00      	cmp	r3, #0
 8012082:	d004      	beq.n	801208e <f_read+0x1da>
 8012084:	68fb      	ldr	r3, [r7, #12]
 8012086:	2201      	movs	r2, #1
 8012088:	755a      	strb	r2, [r3, #21]
 801208a:	2301      	movs	r3, #1
 801208c:	e04d      	b.n	801212a <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 801208e:	68fb      	ldr	r3, [r7, #12]
 8012090:	7d1b      	ldrb	r3, [r3, #20]
 8012092:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012096:	b2da      	uxtb	r2, r3
 8012098:	68fb      	ldr	r3, [r7, #12]
 801209a:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 801209c:	697b      	ldr	r3, [r7, #20]
 801209e:	7858      	ldrb	r0, [r3, #1]
 80120a0:	68fb      	ldr	r3, [r7, #12]
 80120a2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80120a6:	2301      	movs	r3, #1
 80120a8:	69ba      	ldr	r2, [r7, #24]
 80120aa:	f7fd fa27 	bl	800f4fc <disk_read>
 80120ae:	4603      	mov	r3, r0
 80120b0:	2b00      	cmp	r3, #0
 80120b2:	d004      	beq.n	80120be <f_read+0x20a>
 80120b4:	68fb      	ldr	r3, [r7, #12]
 80120b6:	2201      	movs	r2, #1
 80120b8:	755a      	strb	r2, [r3, #21]
 80120ba:	2301      	movs	r3, #1
 80120bc:	e035      	b.n	801212a <f_read+0x276>
			}
#endif
			fp->sect = sect;
 80120be:	68fb      	ldr	r3, [r7, #12]
 80120c0:	69ba      	ldr	r2, [r7, #24]
 80120c2:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80120c4:	68fb      	ldr	r3, [r7, #12]
 80120c6:	699b      	ldr	r3, [r3, #24]
 80120c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80120cc:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80120d0:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 80120d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80120d4:	687b      	ldr	r3, [r7, #4]
 80120d6:	429a      	cmp	r2, r3
 80120d8:	d901      	bls.n	80120de <f_read+0x22a>
 80120da:	687b      	ldr	r3, [r7, #4]
 80120dc:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 80120de:	68fb      	ldr	r3, [r7, #12]
 80120e0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80120e4:	68fb      	ldr	r3, [r7, #12]
 80120e6:	699b      	ldr	r3, [r3, #24]
 80120e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80120ec:	4413      	add	r3, r2
 80120ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80120f0:	4619      	mov	r1, r3
 80120f2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80120f4:	f7fd faea 	bl	800f6cc <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 80120f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80120fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80120fc:	4413      	add	r3, r2
 80120fe:	627b      	str	r3, [r7, #36]	; 0x24
 8012100:	68fb      	ldr	r3, [r7, #12]
 8012102:	699a      	ldr	r2, [r3, #24]
 8012104:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012106:	441a      	add	r2, r3
 8012108:	68fb      	ldr	r3, [r7, #12]
 801210a:	619a      	str	r2, [r3, #24]
 801210c:	683b      	ldr	r3, [r7, #0]
 801210e:	681a      	ldr	r2, [r3, #0]
 8012110:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012112:	441a      	add	r2, r3
 8012114:	683b      	ldr	r3, [r7, #0]
 8012116:	601a      	str	r2, [r3, #0]
 8012118:	687a      	ldr	r2, [r7, #4]
 801211a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801211c:	1ad3      	subs	r3, r2, r3
 801211e:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8012120:	687b      	ldr	r3, [r7, #4]
 8012122:	2b00      	cmp	r3, #0
 8012124:	f47f af01 	bne.w	8011f2a <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8012128:	2300      	movs	r3, #0
}
 801212a:	4618      	mov	r0, r3
 801212c:	3738      	adds	r7, #56	; 0x38
 801212e:	46bd      	mov	sp, r7
 8012130:	bd80      	pop	{r7, pc}

08012132 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8012132:	b580      	push	{r7, lr}
 8012134:	b08c      	sub	sp, #48	; 0x30
 8012136:	af00      	add	r7, sp, #0
 8012138:	60f8      	str	r0, [r7, #12]
 801213a:	60b9      	str	r1, [r7, #8]
 801213c:	607a      	str	r2, [r7, #4]
 801213e:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8012140:	68bb      	ldr	r3, [r7, #8]
 8012142:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8012144:	683b      	ldr	r3, [r7, #0]
 8012146:	2200      	movs	r2, #0
 8012148:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 801214a:	68fb      	ldr	r3, [r7, #12]
 801214c:	f107 0210 	add.w	r2, r7, #16
 8012150:	4611      	mov	r1, r2
 8012152:	4618      	mov	r0, r3
 8012154:	f7ff fc64 	bl	8011a20 <validate>
 8012158:	4603      	mov	r3, r0
 801215a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 801215e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012162:	2b00      	cmp	r3, #0
 8012164:	d107      	bne.n	8012176 <f_write+0x44>
 8012166:	68fb      	ldr	r3, [r7, #12]
 8012168:	7d5b      	ldrb	r3, [r3, #21]
 801216a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 801216e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012172:	2b00      	cmp	r3, #0
 8012174:	d002      	beq.n	801217c <f_write+0x4a>
 8012176:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801217a:	e14b      	b.n	8012414 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 801217c:	68fb      	ldr	r3, [r7, #12]
 801217e:	7d1b      	ldrb	r3, [r3, #20]
 8012180:	f003 0302 	and.w	r3, r3, #2
 8012184:	2b00      	cmp	r3, #0
 8012186:	d101      	bne.n	801218c <f_write+0x5a>
 8012188:	2307      	movs	r3, #7
 801218a:	e143      	b.n	8012414 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 801218c:	68fb      	ldr	r3, [r7, #12]
 801218e:	699a      	ldr	r2, [r3, #24]
 8012190:	687b      	ldr	r3, [r7, #4]
 8012192:	441a      	add	r2, r3
 8012194:	68fb      	ldr	r3, [r7, #12]
 8012196:	699b      	ldr	r3, [r3, #24]
 8012198:	429a      	cmp	r2, r3
 801219a:	f080 812d 	bcs.w	80123f8 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 801219e:	68fb      	ldr	r3, [r7, #12]
 80121a0:	699b      	ldr	r3, [r3, #24]
 80121a2:	43db      	mvns	r3, r3
 80121a4:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 80121a6:	e127      	b.n	80123f8 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80121a8:	68fb      	ldr	r3, [r7, #12]
 80121aa:	699b      	ldr	r3, [r3, #24]
 80121ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80121b0:	2b00      	cmp	r3, #0
 80121b2:	f040 80e3 	bne.w	801237c <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80121b6:	68fb      	ldr	r3, [r7, #12]
 80121b8:	699b      	ldr	r3, [r3, #24]
 80121ba:	0a5b      	lsrs	r3, r3, #9
 80121bc:	693a      	ldr	r2, [r7, #16]
 80121be:	8952      	ldrh	r2, [r2, #10]
 80121c0:	3a01      	subs	r2, #1
 80121c2:	4013      	ands	r3, r2
 80121c4:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80121c6:	69bb      	ldr	r3, [r7, #24]
 80121c8:	2b00      	cmp	r3, #0
 80121ca:	d143      	bne.n	8012254 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80121cc:	68fb      	ldr	r3, [r7, #12]
 80121ce:	699b      	ldr	r3, [r3, #24]
 80121d0:	2b00      	cmp	r3, #0
 80121d2:	d10c      	bne.n	80121ee <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80121d4:	68fb      	ldr	r3, [r7, #12]
 80121d6:	689b      	ldr	r3, [r3, #8]
 80121d8:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80121da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80121dc:	2b00      	cmp	r3, #0
 80121de:	d11a      	bne.n	8012216 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80121e0:	68fb      	ldr	r3, [r7, #12]
 80121e2:	2100      	movs	r1, #0
 80121e4:	4618      	mov	r0, r3
 80121e6:	f7fd ff51 	bl	801008c <create_chain>
 80121ea:	62b8      	str	r0, [r7, #40]	; 0x28
 80121ec:	e013      	b.n	8012216 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80121ee:	68fb      	ldr	r3, [r7, #12]
 80121f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80121f2:	2b00      	cmp	r3, #0
 80121f4:	d007      	beq.n	8012206 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80121f6:	68fb      	ldr	r3, [r7, #12]
 80121f8:	699b      	ldr	r3, [r3, #24]
 80121fa:	4619      	mov	r1, r3
 80121fc:	68f8      	ldr	r0, [r7, #12]
 80121fe:	f7fd ffdd 	bl	80101bc <clmt_clust>
 8012202:	62b8      	str	r0, [r7, #40]	; 0x28
 8012204:	e007      	b.n	8012216 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8012206:	68fa      	ldr	r2, [r7, #12]
 8012208:	68fb      	ldr	r3, [r7, #12]
 801220a:	69db      	ldr	r3, [r3, #28]
 801220c:	4619      	mov	r1, r3
 801220e:	4610      	mov	r0, r2
 8012210:	f7fd ff3c 	bl	801008c <create_chain>
 8012214:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8012216:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012218:	2b00      	cmp	r3, #0
 801221a:	f000 80f2 	beq.w	8012402 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 801221e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012220:	2b01      	cmp	r3, #1
 8012222:	d104      	bne.n	801222e <f_write+0xfc>
 8012224:	68fb      	ldr	r3, [r7, #12]
 8012226:	2202      	movs	r2, #2
 8012228:	755a      	strb	r2, [r3, #21]
 801222a:	2302      	movs	r3, #2
 801222c:	e0f2      	b.n	8012414 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801222e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012230:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012234:	d104      	bne.n	8012240 <f_write+0x10e>
 8012236:	68fb      	ldr	r3, [r7, #12]
 8012238:	2201      	movs	r2, #1
 801223a:	755a      	strb	r2, [r3, #21]
 801223c:	2301      	movs	r3, #1
 801223e:	e0e9      	b.n	8012414 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 8012240:	68fb      	ldr	r3, [r7, #12]
 8012242:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012244:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8012246:	68fb      	ldr	r3, [r7, #12]
 8012248:	689b      	ldr	r3, [r3, #8]
 801224a:	2b00      	cmp	r3, #0
 801224c:	d102      	bne.n	8012254 <f_write+0x122>
 801224e:	68fb      	ldr	r3, [r7, #12]
 8012250:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012252:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8012254:	68fb      	ldr	r3, [r7, #12]
 8012256:	7d1b      	ldrb	r3, [r3, #20]
 8012258:	b25b      	sxtb	r3, r3
 801225a:	2b00      	cmp	r3, #0
 801225c:	da18      	bge.n	8012290 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801225e:	693b      	ldr	r3, [r7, #16]
 8012260:	7858      	ldrb	r0, [r3, #1]
 8012262:	68fb      	ldr	r3, [r7, #12]
 8012264:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8012268:	68fb      	ldr	r3, [r7, #12]
 801226a:	6a1a      	ldr	r2, [r3, #32]
 801226c:	2301      	movs	r3, #1
 801226e:	f7fd f965 	bl	800f53c <disk_write>
 8012272:	4603      	mov	r3, r0
 8012274:	2b00      	cmp	r3, #0
 8012276:	d004      	beq.n	8012282 <f_write+0x150>
 8012278:	68fb      	ldr	r3, [r7, #12]
 801227a:	2201      	movs	r2, #1
 801227c:	755a      	strb	r2, [r3, #21]
 801227e:	2301      	movs	r3, #1
 8012280:	e0c8      	b.n	8012414 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8012282:	68fb      	ldr	r3, [r7, #12]
 8012284:	7d1b      	ldrb	r3, [r3, #20]
 8012286:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801228a:	b2da      	uxtb	r2, r3
 801228c:	68fb      	ldr	r3, [r7, #12]
 801228e:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8012290:	693a      	ldr	r2, [r7, #16]
 8012292:	68fb      	ldr	r3, [r7, #12]
 8012294:	69db      	ldr	r3, [r3, #28]
 8012296:	4619      	mov	r1, r3
 8012298:	4610      	mov	r0, r2
 801229a:	f7fd fce1 	bl	800fc60 <clust2sect>
 801229e:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80122a0:	697b      	ldr	r3, [r7, #20]
 80122a2:	2b00      	cmp	r3, #0
 80122a4:	d104      	bne.n	80122b0 <f_write+0x17e>
 80122a6:	68fb      	ldr	r3, [r7, #12]
 80122a8:	2202      	movs	r2, #2
 80122aa:	755a      	strb	r2, [r3, #21]
 80122ac:	2302      	movs	r3, #2
 80122ae:	e0b1      	b.n	8012414 <f_write+0x2e2>
			sect += csect;
 80122b0:	697a      	ldr	r2, [r7, #20]
 80122b2:	69bb      	ldr	r3, [r7, #24]
 80122b4:	4413      	add	r3, r2
 80122b6:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80122b8:	687b      	ldr	r3, [r7, #4]
 80122ba:	0a5b      	lsrs	r3, r3, #9
 80122bc:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80122be:	6a3b      	ldr	r3, [r7, #32]
 80122c0:	2b00      	cmp	r3, #0
 80122c2:	d03c      	beq.n	801233e <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80122c4:	69ba      	ldr	r2, [r7, #24]
 80122c6:	6a3b      	ldr	r3, [r7, #32]
 80122c8:	4413      	add	r3, r2
 80122ca:	693a      	ldr	r2, [r7, #16]
 80122cc:	8952      	ldrh	r2, [r2, #10]
 80122ce:	4293      	cmp	r3, r2
 80122d0:	d905      	bls.n	80122de <f_write+0x1ac>
					cc = fs->csize - csect;
 80122d2:	693b      	ldr	r3, [r7, #16]
 80122d4:	895b      	ldrh	r3, [r3, #10]
 80122d6:	461a      	mov	r2, r3
 80122d8:	69bb      	ldr	r3, [r7, #24]
 80122da:	1ad3      	subs	r3, r2, r3
 80122dc:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80122de:	693b      	ldr	r3, [r7, #16]
 80122e0:	7858      	ldrb	r0, [r3, #1]
 80122e2:	6a3b      	ldr	r3, [r7, #32]
 80122e4:	697a      	ldr	r2, [r7, #20]
 80122e6:	69f9      	ldr	r1, [r7, #28]
 80122e8:	f7fd f928 	bl	800f53c <disk_write>
 80122ec:	4603      	mov	r3, r0
 80122ee:	2b00      	cmp	r3, #0
 80122f0:	d004      	beq.n	80122fc <f_write+0x1ca>
 80122f2:	68fb      	ldr	r3, [r7, #12]
 80122f4:	2201      	movs	r2, #1
 80122f6:	755a      	strb	r2, [r3, #21]
 80122f8:	2301      	movs	r3, #1
 80122fa:	e08b      	b.n	8012414 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80122fc:	68fb      	ldr	r3, [r7, #12]
 80122fe:	6a1a      	ldr	r2, [r3, #32]
 8012300:	697b      	ldr	r3, [r7, #20]
 8012302:	1ad3      	subs	r3, r2, r3
 8012304:	6a3a      	ldr	r2, [r7, #32]
 8012306:	429a      	cmp	r2, r3
 8012308:	d915      	bls.n	8012336 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 801230a:	68fb      	ldr	r3, [r7, #12]
 801230c:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8012310:	68fb      	ldr	r3, [r7, #12]
 8012312:	6a1a      	ldr	r2, [r3, #32]
 8012314:	697b      	ldr	r3, [r7, #20]
 8012316:	1ad3      	subs	r3, r2, r3
 8012318:	025b      	lsls	r3, r3, #9
 801231a:	69fa      	ldr	r2, [r7, #28]
 801231c:	4413      	add	r3, r2
 801231e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012322:	4619      	mov	r1, r3
 8012324:	f7fd f9d2 	bl	800f6cc <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8012328:	68fb      	ldr	r3, [r7, #12]
 801232a:	7d1b      	ldrb	r3, [r3, #20]
 801232c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012330:	b2da      	uxtb	r2, r3
 8012332:	68fb      	ldr	r3, [r7, #12]
 8012334:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8012336:	6a3b      	ldr	r3, [r7, #32]
 8012338:	025b      	lsls	r3, r3, #9
 801233a:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 801233c:	e03f      	b.n	80123be <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 801233e:	68fb      	ldr	r3, [r7, #12]
 8012340:	6a1b      	ldr	r3, [r3, #32]
 8012342:	697a      	ldr	r2, [r7, #20]
 8012344:	429a      	cmp	r2, r3
 8012346:	d016      	beq.n	8012376 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 8012348:	68fb      	ldr	r3, [r7, #12]
 801234a:	699a      	ldr	r2, [r3, #24]
 801234c:	68fb      	ldr	r3, [r7, #12]
 801234e:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8012350:	429a      	cmp	r2, r3
 8012352:	d210      	bcs.n	8012376 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8012354:	693b      	ldr	r3, [r7, #16]
 8012356:	7858      	ldrb	r0, [r3, #1]
 8012358:	68fb      	ldr	r3, [r7, #12]
 801235a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801235e:	2301      	movs	r3, #1
 8012360:	697a      	ldr	r2, [r7, #20]
 8012362:	f7fd f8cb 	bl	800f4fc <disk_read>
 8012366:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8012368:	2b00      	cmp	r3, #0
 801236a:	d004      	beq.n	8012376 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 801236c:	68fb      	ldr	r3, [r7, #12]
 801236e:	2201      	movs	r2, #1
 8012370:	755a      	strb	r2, [r3, #21]
 8012372:	2301      	movs	r3, #1
 8012374:	e04e      	b.n	8012414 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 8012376:	68fb      	ldr	r3, [r7, #12]
 8012378:	697a      	ldr	r2, [r7, #20]
 801237a:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 801237c:	68fb      	ldr	r3, [r7, #12]
 801237e:	699b      	ldr	r3, [r3, #24]
 8012380:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012384:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8012388:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 801238a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801238c:	687b      	ldr	r3, [r7, #4]
 801238e:	429a      	cmp	r2, r3
 8012390:	d901      	bls.n	8012396 <f_write+0x264>
 8012392:	687b      	ldr	r3, [r7, #4]
 8012394:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8012396:	68fb      	ldr	r3, [r7, #12]
 8012398:	f103 0230 	add.w	r2, r3, #48	; 0x30
 801239c:	68fb      	ldr	r3, [r7, #12]
 801239e:	699b      	ldr	r3, [r3, #24]
 80123a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80123a4:	4413      	add	r3, r2
 80123a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80123a8:	69f9      	ldr	r1, [r7, #28]
 80123aa:	4618      	mov	r0, r3
 80123ac:	f7fd f98e 	bl	800f6cc <mem_cpy>
		fp->flag |= FA_DIRTY;
 80123b0:	68fb      	ldr	r3, [r7, #12]
 80123b2:	7d1b      	ldrb	r3, [r3, #20]
 80123b4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80123b8:	b2da      	uxtb	r2, r3
 80123ba:	68fb      	ldr	r3, [r7, #12]
 80123bc:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80123be:	69fa      	ldr	r2, [r7, #28]
 80123c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80123c2:	4413      	add	r3, r2
 80123c4:	61fb      	str	r3, [r7, #28]
 80123c6:	68fb      	ldr	r3, [r7, #12]
 80123c8:	699a      	ldr	r2, [r3, #24]
 80123ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80123cc:	441a      	add	r2, r3
 80123ce:	68fb      	ldr	r3, [r7, #12]
 80123d0:	619a      	str	r2, [r3, #24]
 80123d2:	68fb      	ldr	r3, [r7, #12]
 80123d4:	68da      	ldr	r2, [r3, #12]
 80123d6:	68fb      	ldr	r3, [r7, #12]
 80123d8:	699b      	ldr	r3, [r3, #24]
 80123da:	429a      	cmp	r2, r3
 80123dc:	bf38      	it	cc
 80123de:	461a      	movcc	r2, r3
 80123e0:	68fb      	ldr	r3, [r7, #12]
 80123e2:	60da      	str	r2, [r3, #12]
 80123e4:	683b      	ldr	r3, [r7, #0]
 80123e6:	681a      	ldr	r2, [r3, #0]
 80123e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80123ea:	441a      	add	r2, r3
 80123ec:	683b      	ldr	r3, [r7, #0]
 80123ee:	601a      	str	r2, [r3, #0]
 80123f0:	687a      	ldr	r2, [r7, #4]
 80123f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80123f4:	1ad3      	subs	r3, r2, r3
 80123f6:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 80123f8:	687b      	ldr	r3, [r7, #4]
 80123fa:	2b00      	cmp	r3, #0
 80123fc:	f47f aed4 	bne.w	80121a8 <f_write+0x76>
 8012400:	e000      	b.n	8012404 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8012402:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8012404:	68fb      	ldr	r3, [r7, #12]
 8012406:	7d1b      	ldrb	r3, [r3, #20]
 8012408:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801240c:	b2da      	uxtb	r2, r3
 801240e:	68fb      	ldr	r3, [r7, #12]
 8012410:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8012412:	2300      	movs	r3, #0
}
 8012414:	4618      	mov	r0, r3
 8012416:	3730      	adds	r7, #48	; 0x30
 8012418:	46bd      	mov	sp, r7
 801241a:	bd80      	pop	{r7, pc}

0801241c <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 801241c:	b580      	push	{r7, lr}
 801241e:	b086      	sub	sp, #24
 8012420:	af00      	add	r7, sp, #0
 8012422:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8012424:	687b      	ldr	r3, [r7, #4]
 8012426:	f107 0208 	add.w	r2, r7, #8
 801242a:	4611      	mov	r1, r2
 801242c:	4618      	mov	r0, r3
 801242e:	f7ff faf7 	bl	8011a20 <validate>
 8012432:	4603      	mov	r3, r0
 8012434:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8012436:	7dfb      	ldrb	r3, [r7, #23]
 8012438:	2b00      	cmp	r3, #0
 801243a:	d168      	bne.n	801250e <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 801243c:	687b      	ldr	r3, [r7, #4]
 801243e:	7d1b      	ldrb	r3, [r3, #20]
 8012440:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012444:	2b00      	cmp	r3, #0
 8012446:	d062      	beq.n	801250e <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8012448:	687b      	ldr	r3, [r7, #4]
 801244a:	7d1b      	ldrb	r3, [r3, #20]
 801244c:	b25b      	sxtb	r3, r3
 801244e:	2b00      	cmp	r3, #0
 8012450:	da15      	bge.n	801247e <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8012452:	68bb      	ldr	r3, [r7, #8]
 8012454:	7858      	ldrb	r0, [r3, #1]
 8012456:	687b      	ldr	r3, [r7, #4]
 8012458:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801245c:	687b      	ldr	r3, [r7, #4]
 801245e:	6a1a      	ldr	r2, [r3, #32]
 8012460:	2301      	movs	r3, #1
 8012462:	f7fd f86b 	bl	800f53c <disk_write>
 8012466:	4603      	mov	r3, r0
 8012468:	2b00      	cmp	r3, #0
 801246a:	d001      	beq.n	8012470 <f_sync+0x54>
 801246c:	2301      	movs	r3, #1
 801246e:	e04f      	b.n	8012510 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8012470:	687b      	ldr	r3, [r7, #4]
 8012472:	7d1b      	ldrb	r3, [r3, #20]
 8012474:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012478:	b2da      	uxtb	r2, r3
 801247a:	687b      	ldr	r3, [r7, #4]
 801247c:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 801247e:	f7fd f89b 	bl	800f5b8 <get_fattime>
 8012482:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8012484:	68ba      	ldr	r2, [r7, #8]
 8012486:	687b      	ldr	r3, [r7, #4]
 8012488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801248a:	4619      	mov	r1, r3
 801248c:	4610      	mov	r0, r2
 801248e:	f7fd fb4b 	bl	800fb28 <move_window>
 8012492:	4603      	mov	r3, r0
 8012494:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8012496:	7dfb      	ldrb	r3, [r7, #23]
 8012498:	2b00      	cmp	r3, #0
 801249a:	d138      	bne.n	801250e <f_sync+0xf2>
					dir = fp->dir_ptr;
 801249c:	687b      	ldr	r3, [r7, #4]
 801249e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80124a0:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80124a2:	68fb      	ldr	r3, [r7, #12]
 80124a4:	330b      	adds	r3, #11
 80124a6:	781a      	ldrb	r2, [r3, #0]
 80124a8:	68fb      	ldr	r3, [r7, #12]
 80124aa:	330b      	adds	r3, #11
 80124ac:	f042 0220 	orr.w	r2, r2, #32
 80124b0:	b2d2      	uxtb	r2, r2
 80124b2:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80124b4:	687b      	ldr	r3, [r7, #4]
 80124b6:	6818      	ldr	r0, [r3, #0]
 80124b8:	687b      	ldr	r3, [r7, #4]
 80124ba:	689b      	ldr	r3, [r3, #8]
 80124bc:	461a      	mov	r2, r3
 80124be:	68f9      	ldr	r1, [r7, #12]
 80124c0:	f7fe f856 	bl	8010570 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80124c4:	68fb      	ldr	r3, [r7, #12]
 80124c6:	f103 021c 	add.w	r2, r3, #28
 80124ca:	687b      	ldr	r3, [r7, #4]
 80124cc:	68db      	ldr	r3, [r3, #12]
 80124ce:	4619      	mov	r1, r3
 80124d0:	4610      	mov	r0, r2
 80124d2:	f7fd f8cf 	bl	800f674 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80124d6:	68fb      	ldr	r3, [r7, #12]
 80124d8:	3316      	adds	r3, #22
 80124da:	6939      	ldr	r1, [r7, #16]
 80124dc:	4618      	mov	r0, r3
 80124de:	f7fd f8c9 	bl	800f674 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80124e2:	68fb      	ldr	r3, [r7, #12]
 80124e4:	3312      	adds	r3, #18
 80124e6:	2100      	movs	r1, #0
 80124e8:	4618      	mov	r0, r3
 80124ea:	f7fd f8a8 	bl	800f63e <st_word>
					fs->wflag = 1;
 80124ee:	68bb      	ldr	r3, [r7, #8]
 80124f0:	2201      	movs	r2, #1
 80124f2:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80124f4:	68bb      	ldr	r3, [r7, #8]
 80124f6:	4618      	mov	r0, r3
 80124f8:	f7fd fb44 	bl	800fb84 <sync_fs>
 80124fc:	4603      	mov	r3, r0
 80124fe:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8012500:	687b      	ldr	r3, [r7, #4]
 8012502:	7d1b      	ldrb	r3, [r3, #20]
 8012504:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8012508:	b2da      	uxtb	r2, r3
 801250a:	687b      	ldr	r3, [r7, #4]
 801250c:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 801250e:	7dfb      	ldrb	r3, [r7, #23]
}
 8012510:	4618      	mov	r0, r3
 8012512:	3718      	adds	r7, #24
 8012514:	46bd      	mov	sp, r7
 8012516:	bd80      	pop	{r7, pc}

08012518 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8012518:	b580      	push	{r7, lr}
 801251a:	b084      	sub	sp, #16
 801251c:	af00      	add	r7, sp, #0
 801251e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8012520:	6878      	ldr	r0, [r7, #4]
 8012522:	f7ff ff7b 	bl	801241c <f_sync>
 8012526:	4603      	mov	r3, r0
 8012528:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 801252a:	7bfb      	ldrb	r3, [r7, #15]
 801252c:	2b00      	cmp	r3, #0
 801252e:	d118      	bne.n	8012562 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8012530:	687b      	ldr	r3, [r7, #4]
 8012532:	f107 0208 	add.w	r2, r7, #8
 8012536:	4611      	mov	r1, r2
 8012538:	4618      	mov	r0, r3
 801253a:	f7ff fa71 	bl	8011a20 <validate>
 801253e:	4603      	mov	r3, r0
 8012540:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8012542:	7bfb      	ldrb	r3, [r7, #15]
 8012544:	2b00      	cmp	r3, #0
 8012546:	d10c      	bne.n	8012562 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8012548:	687b      	ldr	r3, [r7, #4]
 801254a:	691b      	ldr	r3, [r3, #16]
 801254c:	4618      	mov	r0, r3
 801254e:	f7fd fa47 	bl	800f9e0 <dec_lock>
 8012552:	4603      	mov	r3, r0
 8012554:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8012556:	7bfb      	ldrb	r3, [r7, #15]
 8012558:	2b00      	cmp	r3, #0
 801255a:	d102      	bne.n	8012562 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 801255c:	687b      	ldr	r3, [r7, #4]
 801255e:	2200      	movs	r2, #0
 8012560:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8012562:	7bfb      	ldrb	r3, [r7, #15]
}
 8012564:	4618      	mov	r0, r3
 8012566:	3710      	adds	r7, #16
 8012568:	46bd      	mov	sp, r7
 801256a:	bd80      	pop	{r7, pc}

0801256c <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 801256c:	b580      	push	{r7, lr}
 801256e:	b090      	sub	sp, #64	; 0x40
 8012570:	af00      	add	r7, sp, #0
 8012572:	6078      	str	r0, [r7, #4]
 8012574:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8012576:	687b      	ldr	r3, [r7, #4]
 8012578:	f107 0208 	add.w	r2, r7, #8
 801257c:	4611      	mov	r1, r2
 801257e:	4618      	mov	r0, r3
 8012580:	f7ff fa4e 	bl	8011a20 <validate>
 8012584:	4603      	mov	r3, r0
 8012586:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 801258a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801258e:	2b00      	cmp	r3, #0
 8012590:	d103      	bne.n	801259a <f_lseek+0x2e>
 8012592:	687b      	ldr	r3, [r7, #4]
 8012594:	7d5b      	ldrb	r3, [r3, #21]
 8012596:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 801259a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801259e:	2b00      	cmp	r3, #0
 80125a0:	d002      	beq.n	80125a8 <f_lseek+0x3c>
 80125a2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80125a6:	e1e6      	b.n	8012976 <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 80125a8:	687b      	ldr	r3, [r7, #4]
 80125aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80125ac:	2b00      	cmp	r3, #0
 80125ae:	f000 80d1 	beq.w	8012754 <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 80125b2:	683b      	ldr	r3, [r7, #0]
 80125b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80125b8:	d15a      	bne.n	8012670 <f_lseek+0x104>
			tbl = fp->cltbl;
 80125ba:	687b      	ldr	r3, [r7, #4]
 80125bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80125be:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 80125c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80125c2:	1d1a      	adds	r2, r3, #4
 80125c4:	627a      	str	r2, [r7, #36]	; 0x24
 80125c6:	681b      	ldr	r3, [r3, #0]
 80125c8:	617b      	str	r3, [r7, #20]
 80125ca:	2302      	movs	r3, #2
 80125cc:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 80125ce:	687b      	ldr	r3, [r7, #4]
 80125d0:	689b      	ldr	r3, [r3, #8]
 80125d2:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 80125d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80125d6:	2b00      	cmp	r3, #0
 80125d8:	d03a      	beq.n	8012650 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 80125da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80125dc:	613b      	str	r3, [r7, #16]
 80125de:	2300      	movs	r3, #0
 80125e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80125e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80125e4:	3302      	adds	r3, #2
 80125e6:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 80125e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80125ea:	60fb      	str	r3, [r7, #12]
 80125ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80125ee:	3301      	adds	r3, #1
 80125f0:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 80125f2:	687b      	ldr	r3, [r7, #4]
 80125f4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80125f6:	4618      	mov	r0, r3
 80125f8:	f7fd fb51 	bl	800fc9e <get_fat>
 80125fc:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 80125fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012600:	2b01      	cmp	r3, #1
 8012602:	d804      	bhi.n	801260e <f_lseek+0xa2>
 8012604:	687b      	ldr	r3, [r7, #4]
 8012606:	2202      	movs	r2, #2
 8012608:	755a      	strb	r2, [r3, #21]
 801260a:	2302      	movs	r3, #2
 801260c:	e1b3      	b.n	8012976 <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801260e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012610:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012614:	d104      	bne.n	8012620 <f_lseek+0xb4>
 8012616:	687b      	ldr	r3, [r7, #4]
 8012618:	2201      	movs	r2, #1
 801261a:	755a      	strb	r2, [r3, #21]
 801261c:	2301      	movs	r3, #1
 801261e:	e1aa      	b.n	8012976 <f_lseek+0x40a>
					} while (cl == pcl + 1);
 8012620:	68fb      	ldr	r3, [r7, #12]
 8012622:	3301      	adds	r3, #1
 8012624:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012626:	429a      	cmp	r2, r3
 8012628:	d0de      	beq.n	80125e8 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 801262a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801262c:	697b      	ldr	r3, [r7, #20]
 801262e:	429a      	cmp	r2, r3
 8012630:	d809      	bhi.n	8012646 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 8012632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012634:	1d1a      	adds	r2, r3, #4
 8012636:	627a      	str	r2, [r7, #36]	; 0x24
 8012638:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801263a:	601a      	str	r2, [r3, #0]
 801263c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801263e:	1d1a      	adds	r2, r3, #4
 8012640:	627a      	str	r2, [r7, #36]	; 0x24
 8012642:	693a      	ldr	r2, [r7, #16]
 8012644:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8012646:	68bb      	ldr	r3, [r7, #8]
 8012648:	699b      	ldr	r3, [r3, #24]
 801264a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801264c:	429a      	cmp	r2, r3
 801264e:	d3c4      	bcc.n	80125da <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8012650:	687b      	ldr	r3, [r7, #4]
 8012652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012654:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012656:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8012658:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801265a:	697b      	ldr	r3, [r7, #20]
 801265c:	429a      	cmp	r2, r3
 801265e:	d803      	bhi.n	8012668 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 8012660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012662:	2200      	movs	r2, #0
 8012664:	601a      	str	r2, [r3, #0]
 8012666:	e184      	b.n	8012972 <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8012668:	2311      	movs	r3, #17
 801266a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 801266e:	e180      	b.n	8012972 <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8012670:	687b      	ldr	r3, [r7, #4]
 8012672:	68db      	ldr	r3, [r3, #12]
 8012674:	683a      	ldr	r2, [r7, #0]
 8012676:	429a      	cmp	r2, r3
 8012678:	d902      	bls.n	8012680 <f_lseek+0x114>
 801267a:	687b      	ldr	r3, [r7, #4]
 801267c:	68db      	ldr	r3, [r3, #12]
 801267e:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8012680:	687b      	ldr	r3, [r7, #4]
 8012682:	683a      	ldr	r2, [r7, #0]
 8012684:	619a      	str	r2, [r3, #24]
			if (ofs) {
 8012686:	683b      	ldr	r3, [r7, #0]
 8012688:	2b00      	cmp	r3, #0
 801268a:	f000 8172 	beq.w	8012972 <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 801268e:	683b      	ldr	r3, [r7, #0]
 8012690:	3b01      	subs	r3, #1
 8012692:	4619      	mov	r1, r3
 8012694:	6878      	ldr	r0, [r7, #4]
 8012696:	f7fd fd91 	bl	80101bc <clmt_clust>
 801269a:	4602      	mov	r2, r0
 801269c:	687b      	ldr	r3, [r7, #4]
 801269e:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 80126a0:	68ba      	ldr	r2, [r7, #8]
 80126a2:	687b      	ldr	r3, [r7, #4]
 80126a4:	69db      	ldr	r3, [r3, #28]
 80126a6:	4619      	mov	r1, r3
 80126a8:	4610      	mov	r0, r2
 80126aa:	f7fd fad9 	bl	800fc60 <clust2sect>
 80126ae:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 80126b0:	69bb      	ldr	r3, [r7, #24]
 80126b2:	2b00      	cmp	r3, #0
 80126b4:	d104      	bne.n	80126c0 <f_lseek+0x154>
 80126b6:	687b      	ldr	r3, [r7, #4]
 80126b8:	2202      	movs	r2, #2
 80126ba:	755a      	strb	r2, [r3, #21]
 80126bc:	2302      	movs	r3, #2
 80126be:	e15a      	b.n	8012976 <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 80126c0:	683b      	ldr	r3, [r7, #0]
 80126c2:	3b01      	subs	r3, #1
 80126c4:	0a5b      	lsrs	r3, r3, #9
 80126c6:	68ba      	ldr	r2, [r7, #8]
 80126c8:	8952      	ldrh	r2, [r2, #10]
 80126ca:	3a01      	subs	r2, #1
 80126cc:	4013      	ands	r3, r2
 80126ce:	69ba      	ldr	r2, [r7, #24]
 80126d0:	4413      	add	r3, r2
 80126d2:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 80126d4:	687b      	ldr	r3, [r7, #4]
 80126d6:	699b      	ldr	r3, [r3, #24]
 80126d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80126dc:	2b00      	cmp	r3, #0
 80126de:	f000 8148 	beq.w	8012972 <f_lseek+0x406>
 80126e2:	687b      	ldr	r3, [r7, #4]
 80126e4:	6a1b      	ldr	r3, [r3, #32]
 80126e6:	69ba      	ldr	r2, [r7, #24]
 80126e8:	429a      	cmp	r2, r3
 80126ea:	f000 8142 	beq.w	8012972 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 80126ee:	687b      	ldr	r3, [r7, #4]
 80126f0:	7d1b      	ldrb	r3, [r3, #20]
 80126f2:	b25b      	sxtb	r3, r3
 80126f4:	2b00      	cmp	r3, #0
 80126f6:	da18      	bge.n	801272a <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80126f8:	68bb      	ldr	r3, [r7, #8]
 80126fa:	7858      	ldrb	r0, [r3, #1]
 80126fc:	687b      	ldr	r3, [r7, #4]
 80126fe:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8012702:	687b      	ldr	r3, [r7, #4]
 8012704:	6a1a      	ldr	r2, [r3, #32]
 8012706:	2301      	movs	r3, #1
 8012708:	f7fc ff18 	bl	800f53c <disk_write>
 801270c:	4603      	mov	r3, r0
 801270e:	2b00      	cmp	r3, #0
 8012710:	d004      	beq.n	801271c <f_lseek+0x1b0>
 8012712:	687b      	ldr	r3, [r7, #4]
 8012714:	2201      	movs	r2, #1
 8012716:	755a      	strb	r2, [r3, #21]
 8012718:	2301      	movs	r3, #1
 801271a:	e12c      	b.n	8012976 <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 801271c:	687b      	ldr	r3, [r7, #4]
 801271e:	7d1b      	ldrb	r3, [r3, #20]
 8012720:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012724:	b2da      	uxtb	r2, r3
 8012726:	687b      	ldr	r3, [r7, #4]
 8012728:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 801272a:	68bb      	ldr	r3, [r7, #8]
 801272c:	7858      	ldrb	r0, [r3, #1]
 801272e:	687b      	ldr	r3, [r7, #4]
 8012730:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8012734:	2301      	movs	r3, #1
 8012736:	69ba      	ldr	r2, [r7, #24]
 8012738:	f7fc fee0 	bl	800f4fc <disk_read>
 801273c:	4603      	mov	r3, r0
 801273e:	2b00      	cmp	r3, #0
 8012740:	d004      	beq.n	801274c <f_lseek+0x1e0>
 8012742:	687b      	ldr	r3, [r7, #4]
 8012744:	2201      	movs	r2, #1
 8012746:	755a      	strb	r2, [r3, #21]
 8012748:	2301      	movs	r3, #1
 801274a:	e114      	b.n	8012976 <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 801274c:	687b      	ldr	r3, [r7, #4]
 801274e:	69ba      	ldr	r2, [r7, #24]
 8012750:	621a      	str	r2, [r3, #32]
 8012752:	e10e      	b.n	8012972 <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 8012754:	687b      	ldr	r3, [r7, #4]
 8012756:	68db      	ldr	r3, [r3, #12]
 8012758:	683a      	ldr	r2, [r7, #0]
 801275a:	429a      	cmp	r2, r3
 801275c:	d908      	bls.n	8012770 <f_lseek+0x204>
 801275e:	687b      	ldr	r3, [r7, #4]
 8012760:	7d1b      	ldrb	r3, [r3, #20]
 8012762:	f003 0302 	and.w	r3, r3, #2
 8012766:	2b00      	cmp	r3, #0
 8012768:	d102      	bne.n	8012770 <f_lseek+0x204>
			ofs = fp->obj.objsize;
 801276a:	687b      	ldr	r3, [r7, #4]
 801276c:	68db      	ldr	r3, [r3, #12]
 801276e:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8012770:	687b      	ldr	r3, [r7, #4]
 8012772:	699b      	ldr	r3, [r3, #24]
 8012774:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8012776:	2300      	movs	r3, #0
 8012778:	637b      	str	r3, [r7, #52]	; 0x34
 801277a:	687b      	ldr	r3, [r7, #4]
 801277c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801277e:	619a      	str	r2, [r3, #24]
		if (ofs) {
 8012780:	683b      	ldr	r3, [r7, #0]
 8012782:	2b00      	cmp	r3, #0
 8012784:	f000 80a7 	beq.w	80128d6 <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8012788:	68bb      	ldr	r3, [r7, #8]
 801278a:	895b      	ldrh	r3, [r3, #10]
 801278c:	025b      	lsls	r3, r3, #9
 801278e:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8012790:	6a3b      	ldr	r3, [r7, #32]
 8012792:	2b00      	cmp	r3, #0
 8012794:	d01b      	beq.n	80127ce <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8012796:	683b      	ldr	r3, [r7, #0]
 8012798:	1e5a      	subs	r2, r3, #1
 801279a:	69fb      	ldr	r3, [r7, #28]
 801279c:	fbb2 f2f3 	udiv	r2, r2, r3
 80127a0:	6a3b      	ldr	r3, [r7, #32]
 80127a2:	1e59      	subs	r1, r3, #1
 80127a4:	69fb      	ldr	r3, [r7, #28]
 80127a6:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 80127aa:	429a      	cmp	r2, r3
 80127ac:	d30f      	bcc.n	80127ce <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 80127ae:	6a3b      	ldr	r3, [r7, #32]
 80127b0:	1e5a      	subs	r2, r3, #1
 80127b2:	69fb      	ldr	r3, [r7, #28]
 80127b4:	425b      	negs	r3, r3
 80127b6:	401a      	ands	r2, r3
 80127b8:	687b      	ldr	r3, [r7, #4]
 80127ba:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 80127bc:	687b      	ldr	r3, [r7, #4]
 80127be:	699b      	ldr	r3, [r3, #24]
 80127c0:	683a      	ldr	r2, [r7, #0]
 80127c2:	1ad3      	subs	r3, r2, r3
 80127c4:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 80127c6:	687b      	ldr	r3, [r7, #4]
 80127c8:	69db      	ldr	r3, [r3, #28]
 80127ca:	63bb      	str	r3, [r7, #56]	; 0x38
 80127cc:	e022      	b.n	8012814 <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 80127ce:	687b      	ldr	r3, [r7, #4]
 80127d0:	689b      	ldr	r3, [r3, #8]
 80127d2:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 80127d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80127d6:	2b00      	cmp	r3, #0
 80127d8:	d119      	bne.n	801280e <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 80127da:	687b      	ldr	r3, [r7, #4]
 80127dc:	2100      	movs	r1, #0
 80127de:	4618      	mov	r0, r3
 80127e0:	f7fd fc54 	bl	801008c <create_chain>
 80127e4:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 80127e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80127e8:	2b01      	cmp	r3, #1
 80127ea:	d104      	bne.n	80127f6 <f_lseek+0x28a>
 80127ec:	687b      	ldr	r3, [r7, #4]
 80127ee:	2202      	movs	r2, #2
 80127f0:	755a      	strb	r2, [r3, #21]
 80127f2:	2302      	movs	r3, #2
 80127f4:	e0bf      	b.n	8012976 <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80127f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80127f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80127fc:	d104      	bne.n	8012808 <f_lseek+0x29c>
 80127fe:	687b      	ldr	r3, [r7, #4]
 8012800:	2201      	movs	r2, #1
 8012802:	755a      	strb	r2, [r3, #21]
 8012804:	2301      	movs	r3, #1
 8012806:	e0b6      	b.n	8012976 <f_lseek+0x40a>
					fp->obj.sclust = clst;
 8012808:	687b      	ldr	r3, [r7, #4]
 801280a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801280c:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 801280e:	687b      	ldr	r3, [r7, #4]
 8012810:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012812:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 8012814:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012816:	2b00      	cmp	r3, #0
 8012818:	d05d      	beq.n	80128d6 <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 801281a:	e03a      	b.n	8012892 <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 801281c:	683a      	ldr	r2, [r7, #0]
 801281e:	69fb      	ldr	r3, [r7, #28]
 8012820:	1ad3      	subs	r3, r2, r3
 8012822:	603b      	str	r3, [r7, #0]
 8012824:	687b      	ldr	r3, [r7, #4]
 8012826:	699a      	ldr	r2, [r3, #24]
 8012828:	69fb      	ldr	r3, [r7, #28]
 801282a:	441a      	add	r2, r3
 801282c:	687b      	ldr	r3, [r7, #4]
 801282e:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8012830:	687b      	ldr	r3, [r7, #4]
 8012832:	7d1b      	ldrb	r3, [r3, #20]
 8012834:	f003 0302 	and.w	r3, r3, #2
 8012838:	2b00      	cmp	r3, #0
 801283a:	d00b      	beq.n	8012854 <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 801283c:	687b      	ldr	r3, [r7, #4]
 801283e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8012840:	4618      	mov	r0, r3
 8012842:	f7fd fc23 	bl	801008c <create_chain>
 8012846:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 8012848:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801284a:	2b00      	cmp	r3, #0
 801284c:	d108      	bne.n	8012860 <f_lseek+0x2f4>
							ofs = 0; break;
 801284e:	2300      	movs	r3, #0
 8012850:	603b      	str	r3, [r7, #0]
 8012852:	e022      	b.n	801289a <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8012854:	687b      	ldr	r3, [r7, #4]
 8012856:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8012858:	4618      	mov	r0, r3
 801285a:	f7fd fa20 	bl	800fc9e <get_fat>
 801285e:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8012860:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012862:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012866:	d104      	bne.n	8012872 <f_lseek+0x306>
 8012868:	687b      	ldr	r3, [r7, #4]
 801286a:	2201      	movs	r2, #1
 801286c:	755a      	strb	r2, [r3, #21]
 801286e:	2301      	movs	r3, #1
 8012870:	e081      	b.n	8012976 <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8012872:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012874:	2b01      	cmp	r3, #1
 8012876:	d904      	bls.n	8012882 <f_lseek+0x316>
 8012878:	68bb      	ldr	r3, [r7, #8]
 801287a:	699b      	ldr	r3, [r3, #24]
 801287c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801287e:	429a      	cmp	r2, r3
 8012880:	d304      	bcc.n	801288c <f_lseek+0x320>
 8012882:	687b      	ldr	r3, [r7, #4]
 8012884:	2202      	movs	r2, #2
 8012886:	755a      	strb	r2, [r3, #21]
 8012888:	2302      	movs	r3, #2
 801288a:	e074      	b.n	8012976 <f_lseek+0x40a>
					fp->clust = clst;
 801288c:	687b      	ldr	r3, [r7, #4]
 801288e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012890:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 8012892:	683a      	ldr	r2, [r7, #0]
 8012894:	69fb      	ldr	r3, [r7, #28]
 8012896:	429a      	cmp	r2, r3
 8012898:	d8c0      	bhi.n	801281c <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 801289a:	687b      	ldr	r3, [r7, #4]
 801289c:	699a      	ldr	r2, [r3, #24]
 801289e:	683b      	ldr	r3, [r7, #0]
 80128a0:	441a      	add	r2, r3
 80128a2:	687b      	ldr	r3, [r7, #4]
 80128a4:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 80128a6:	683b      	ldr	r3, [r7, #0]
 80128a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80128ac:	2b00      	cmp	r3, #0
 80128ae:	d012      	beq.n	80128d6 <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 80128b0:	68bb      	ldr	r3, [r7, #8]
 80128b2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80128b4:	4618      	mov	r0, r3
 80128b6:	f7fd f9d3 	bl	800fc60 <clust2sect>
 80128ba:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 80128bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80128be:	2b00      	cmp	r3, #0
 80128c0:	d104      	bne.n	80128cc <f_lseek+0x360>
 80128c2:	687b      	ldr	r3, [r7, #4]
 80128c4:	2202      	movs	r2, #2
 80128c6:	755a      	strb	r2, [r3, #21]
 80128c8:	2302      	movs	r3, #2
 80128ca:	e054      	b.n	8012976 <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 80128cc:	683b      	ldr	r3, [r7, #0]
 80128ce:	0a5b      	lsrs	r3, r3, #9
 80128d0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80128d2:	4413      	add	r3, r2
 80128d4:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 80128d6:	687b      	ldr	r3, [r7, #4]
 80128d8:	699a      	ldr	r2, [r3, #24]
 80128da:	687b      	ldr	r3, [r7, #4]
 80128dc:	68db      	ldr	r3, [r3, #12]
 80128de:	429a      	cmp	r2, r3
 80128e0:	d90a      	bls.n	80128f8 <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 80128e2:	687b      	ldr	r3, [r7, #4]
 80128e4:	699a      	ldr	r2, [r3, #24]
 80128e6:	687b      	ldr	r3, [r7, #4]
 80128e8:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 80128ea:	687b      	ldr	r3, [r7, #4]
 80128ec:	7d1b      	ldrb	r3, [r3, #20]
 80128ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80128f2:	b2da      	uxtb	r2, r3
 80128f4:	687b      	ldr	r3, [r7, #4]
 80128f6:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 80128f8:	687b      	ldr	r3, [r7, #4]
 80128fa:	699b      	ldr	r3, [r3, #24]
 80128fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012900:	2b00      	cmp	r3, #0
 8012902:	d036      	beq.n	8012972 <f_lseek+0x406>
 8012904:	687b      	ldr	r3, [r7, #4]
 8012906:	6a1b      	ldr	r3, [r3, #32]
 8012908:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801290a:	429a      	cmp	r2, r3
 801290c:	d031      	beq.n	8012972 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 801290e:	687b      	ldr	r3, [r7, #4]
 8012910:	7d1b      	ldrb	r3, [r3, #20]
 8012912:	b25b      	sxtb	r3, r3
 8012914:	2b00      	cmp	r3, #0
 8012916:	da18      	bge.n	801294a <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8012918:	68bb      	ldr	r3, [r7, #8]
 801291a:	7858      	ldrb	r0, [r3, #1]
 801291c:	687b      	ldr	r3, [r7, #4]
 801291e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8012922:	687b      	ldr	r3, [r7, #4]
 8012924:	6a1a      	ldr	r2, [r3, #32]
 8012926:	2301      	movs	r3, #1
 8012928:	f7fc fe08 	bl	800f53c <disk_write>
 801292c:	4603      	mov	r3, r0
 801292e:	2b00      	cmp	r3, #0
 8012930:	d004      	beq.n	801293c <f_lseek+0x3d0>
 8012932:	687b      	ldr	r3, [r7, #4]
 8012934:	2201      	movs	r2, #1
 8012936:	755a      	strb	r2, [r3, #21]
 8012938:	2301      	movs	r3, #1
 801293a:	e01c      	b.n	8012976 <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 801293c:	687b      	ldr	r3, [r7, #4]
 801293e:	7d1b      	ldrb	r3, [r3, #20]
 8012940:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012944:	b2da      	uxtb	r2, r3
 8012946:	687b      	ldr	r3, [r7, #4]
 8012948:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 801294a:	68bb      	ldr	r3, [r7, #8]
 801294c:	7858      	ldrb	r0, [r3, #1]
 801294e:	687b      	ldr	r3, [r7, #4]
 8012950:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8012954:	2301      	movs	r3, #1
 8012956:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012958:	f7fc fdd0 	bl	800f4fc <disk_read>
 801295c:	4603      	mov	r3, r0
 801295e:	2b00      	cmp	r3, #0
 8012960:	d004      	beq.n	801296c <f_lseek+0x400>
 8012962:	687b      	ldr	r3, [r7, #4]
 8012964:	2201      	movs	r2, #1
 8012966:	755a      	strb	r2, [r3, #21]
 8012968:	2301      	movs	r3, #1
 801296a:	e004      	b.n	8012976 <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 801296c:	687b      	ldr	r3, [r7, #4]
 801296e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012970:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 8012972:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8012976:	4618      	mov	r0, r3
 8012978:	3740      	adds	r7, #64	; 0x40
 801297a:	46bd      	mov	sp, r7
 801297c:	bd80      	pop	{r7, pc}

0801297e <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 801297e:	b580      	push	{r7, lr}
 8012980:	b086      	sub	sp, #24
 8012982:	af00      	add	r7, sp, #0
 8012984:	6078      	str	r0, [r7, #4]
 8012986:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 8012988:	687b      	ldr	r3, [r7, #4]
 801298a:	2b00      	cmp	r3, #0
 801298c:	d101      	bne.n	8012992 <f_opendir+0x14>
 801298e:	2309      	movs	r3, #9
 8012990:	e074      	b.n	8012a7c <f_opendir+0xfe>

	/* Get logical drive */
	obj = &dp->obj;
 8012992:	687b      	ldr	r3, [r7, #4]
 8012994:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 8012996:	f107 0108 	add.w	r1, r7, #8
 801299a:	463b      	mov	r3, r7
 801299c:	2200      	movs	r2, #0
 801299e:	4618      	mov	r0, r3
 80129a0:	f7fe fdf2 	bl	8011588 <find_volume>
 80129a4:	4603      	mov	r3, r0
 80129a6:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80129a8:	7dfb      	ldrb	r3, [r7, #23]
 80129aa:	2b00      	cmp	r3, #0
 80129ac:	d15f      	bne.n	8012a6e <f_opendir+0xf0>
		obj->fs = fs;
 80129ae:	68ba      	ldr	r2, [r7, #8]
 80129b0:	693b      	ldr	r3, [r7, #16]
 80129b2:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
 80129b4:	f44f 7000 	mov.w	r0, #512	; 0x200
 80129b8:	f000 fc7d 	bl	80132b6 <ff_memalloc>
 80129bc:	60f8      	str	r0, [r7, #12]
 80129be:	68fb      	ldr	r3, [r7, #12]
 80129c0:	2b00      	cmp	r3, #0
 80129c2:	d101      	bne.n	80129c8 <f_opendir+0x4a>
 80129c4:	2311      	movs	r3, #17
 80129c6:	e059      	b.n	8012a7c <f_opendir+0xfe>
 80129c8:	68bb      	ldr	r3, [r7, #8]
 80129ca:	68fa      	ldr	r2, [r7, #12]
 80129cc:	60da      	str	r2, [r3, #12]
		res = follow_path(dp, path);			/* Follow the path to the directory */
 80129ce:	683b      	ldr	r3, [r7, #0]
 80129d0:	4619      	mov	r1, r3
 80129d2:	6878      	ldr	r0, [r7, #4]
 80129d4:	f7fe fccc 	bl	8011370 <follow_path>
 80129d8:	4603      	mov	r3, r0
 80129da:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 80129dc:	7dfb      	ldrb	r3, [r7, #23]
 80129de:	2b00      	cmp	r3, #0
 80129e0:	d13d      	bne.n	8012a5e <f_opendir+0xe0>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 80129e2:	687b      	ldr	r3, [r7, #4]
 80129e4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80129e8:	b25b      	sxtb	r3, r3
 80129ea:	2b00      	cmp	r3, #0
 80129ec:	db12      	blt.n	8012a14 <f_opendir+0x96>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 80129ee:	693b      	ldr	r3, [r7, #16]
 80129f0:	799b      	ldrb	r3, [r3, #6]
 80129f2:	f003 0310 	and.w	r3, r3, #16
 80129f6:	2b00      	cmp	r3, #0
 80129f8:	d00a      	beq.n	8012a10 <f_opendir+0x92>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 80129fa:	68ba      	ldr	r2, [r7, #8]
 80129fc:	687b      	ldr	r3, [r7, #4]
 80129fe:	6a1b      	ldr	r3, [r3, #32]
 8012a00:	4619      	mov	r1, r3
 8012a02:	4610      	mov	r0, r2
 8012a04:	f7fd fd95 	bl	8010532 <ld_clust>
 8012a08:	4602      	mov	r2, r0
 8012a0a:	693b      	ldr	r3, [r7, #16]
 8012a0c:	609a      	str	r2, [r3, #8]
 8012a0e:	e001      	b.n	8012a14 <f_opendir+0x96>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 8012a10:	2305      	movs	r3, #5
 8012a12:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 8012a14:	7dfb      	ldrb	r3, [r7, #23]
 8012a16:	2b00      	cmp	r3, #0
 8012a18:	d121      	bne.n	8012a5e <f_opendir+0xe0>
				obj->id = fs->id;
 8012a1a:	68bb      	ldr	r3, [r7, #8]
 8012a1c:	88da      	ldrh	r2, [r3, #6]
 8012a1e:	693b      	ldr	r3, [r7, #16]
 8012a20:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 8012a22:	2100      	movs	r1, #0
 8012a24:	6878      	ldr	r0, [r7, #4]
 8012a26:	f7fd fbfd 	bl	8010224 <dir_sdi>
 8012a2a:	4603      	mov	r3, r0
 8012a2c:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 8012a2e:	7dfb      	ldrb	r3, [r7, #23]
 8012a30:	2b00      	cmp	r3, #0
 8012a32:	d114      	bne.n	8012a5e <f_opendir+0xe0>
					if (obj->sclust) {
 8012a34:	693b      	ldr	r3, [r7, #16]
 8012a36:	689b      	ldr	r3, [r3, #8]
 8012a38:	2b00      	cmp	r3, #0
 8012a3a:	d00d      	beq.n	8012a58 <f_opendir+0xda>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 8012a3c:	2100      	movs	r1, #0
 8012a3e:	6878      	ldr	r0, [r7, #4]
 8012a40:	f7fc ff40 	bl	800f8c4 <inc_lock>
 8012a44:	4602      	mov	r2, r0
 8012a46:	693b      	ldr	r3, [r7, #16]
 8012a48:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 8012a4a:	693b      	ldr	r3, [r7, #16]
 8012a4c:	691b      	ldr	r3, [r3, #16]
 8012a4e:	2b00      	cmp	r3, #0
 8012a50:	d105      	bne.n	8012a5e <f_opendir+0xe0>
 8012a52:	2312      	movs	r3, #18
 8012a54:	75fb      	strb	r3, [r7, #23]
 8012a56:	e002      	b.n	8012a5e <f_opendir+0xe0>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 8012a58:	693b      	ldr	r3, [r7, #16]
 8012a5a:	2200      	movs	r2, #0
 8012a5c:	611a      	str	r2, [r3, #16]
					}
				}
#endif
			}
		}
		FREE_NAMBUF();
 8012a5e:	68f8      	ldr	r0, [r7, #12]
 8012a60:	f000 fc35 	bl	80132ce <ff_memfree>
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8012a64:	7dfb      	ldrb	r3, [r7, #23]
 8012a66:	2b04      	cmp	r3, #4
 8012a68:	d101      	bne.n	8012a6e <f_opendir+0xf0>
 8012a6a:	2305      	movs	r3, #5
 8012a6c:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 8012a6e:	7dfb      	ldrb	r3, [r7, #23]
 8012a70:	2b00      	cmp	r3, #0
 8012a72:	d002      	beq.n	8012a7a <f_opendir+0xfc>
 8012a74:	693b      	ldr	r3, [r7, #16]
 8012a76:	2200      	movs	r2, #0
 8012a78:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8012a7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8012a7c:	4618      	mov	r0, r3
 8012a7e:	3718      	adds	r7, #24
 8012a80:	46bd      	mov	sp, r7
 8012a82:	bd80      	pop	{r7, pc}

08012a84 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 8012a84:	b580      	push	{r7, lr}
 8012a86:	b084      	sub	sp, #16
 8012a88:	af00      	add	r7, sp, #0
 8012a8a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 8012a8c:	687b      	ldr	r3, [r7, #4]
 8012a8e:	f107 0208 	add.w	r2, r7, #8
 8012a92:	4611      	mov	r1, r2
 8012a94:	4618      	mov	r0, r3
 8012a96:	f7fe ffc3 	bl	8011a20 <validate>
 8012a9a:	4603      	mov	r3, r0
 8012a9c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8012a9e:	7bfb      	ldrb	r3, [r7, #15]
 8012aa0:	2b00      	cmp	r3, #0
 8012aa2:	d110      	bne.n	8012ac6 <f_closedir+0x42>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 8012aa4:	687b      	ldr	r3, [r7, #4]
 8012aa6:	691b      	ldr	r3, [r3, #16]
 8012aa8:	2b00      	cmp	r3, #0
 8012aaa:	d006      	beq.n	8012aba <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 8012aac:	687b      	ldr	r3, [r7, #4]
 8012aae:	691b      	ldr	r3, [r3, #16]
 8012ab0:	4618      	mov	r0, r3
 8012ab2:	f7fc ff95 	bl	800f9e0 <dec_lock>
 8012ab6:	4603      	mov	r3, r0
 8012ab8:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 8012aba:	7bfb      	ldrb	r3, [r7, #15]
 8012abc:	2b00      	cmp	r3, #0
 8012abe:	d102      	bne.n	8012ac6 <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 8012ac0:	687b      	ldr	r3, [r7, #4]
 8012ac2:	2200      	movs	r2, #0
 8012ac4:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 8012ac6:	7bfb      	ldrb	r3, [r7, #15]
}
 8012ac8:	4618      	mov	r0, r3
 8012aca:	3710      	adds	r7, #16
 8012acc:	46bd      	mov	sp, r7
 8012ace:	bd80      	pop	{r7, pc}

08012ad0 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8012ad0:	b580      	push	{r7, lr}
 8012ad2:	b086      	sub	sp, #24
 8012ad4:	af00      	add	r7, sp, #0
 8012ad6:	6078      	str	r0, [r7, #4]
 8012ad8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 8012ada:	687b      	ldr	r3, [r7, #4]
 8012adc:	f107 020c 	add.w	r2, r7, #12
 8012ae0:	4611      	mov	r1, r2
 8012ae2:	4618      	mov	r0, r3
 8012ae4:	f7fe ff9c 	bl	8011a20 <validate>
 8012ae8:	4603      	mov	r3, r0
 8012aea:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8012aec:	7dfb      	ldrb	r3, [r7, #23]
 8012aee:	2b00      	cmp	r3, #0
 8012af0:	d136      	bne.n	8012b60 <f_readdir+0x90>
		if (!fno) {
 8012af2:	683b      	ldr	r3, [r7, #0]
 8012af4:	2b00      	cmp	r3, #0
 8012af6:	d106      	bne.n	8012b06 <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 8012af8:	2100      	movs	r1, #0
 8012afa:	6878      	ldr	r0, [r7, #4]
 8012afc:	f7fd fb92 	bl	8010224 <dir_sdi>
 8012b00:	4603      	mov	r3, r0
 8012b02:	75fb      	strb	r3, [r7, #23]
 8012b04:	e02c      	b.n	8012b60 <f_readdir+0x90>
		} else {
			INIT_NAMBUF(fs);
 8012b06:	f44f 7000 	mov.w	r0, #512	; 0x200
 8012b0a:	f000 fbd4 	bl	80132b6 <ff_memalloc>
 8012b0e:	6138      	str	r0, [r7, #16]
 8012b10:	693b      	ldr	r3, [r7, #16]
 8012b12:	2b00      	cmp	r3, #0
 8012b14:	d101      	bne.n	8012b1a <f_readdir+0x4a>
 8012b16:	2311      	movs	r3, #17
 8012b18:	e023      	b.n	8012b62 <f_readdir+0x92>
 8012b1a:	68fb      	ldr	r3, [r7, #12]
 8012b1c:	693a      	ldr	r2, [r7, #16]
 8012b1e:	60da      	str	r2, [r3, #12]
			res = dir_read(dp, 0);			/* Read an item */
 8012b20:	2100      	movs	r1, #0
 8012b22:	6878      	ldr	r0, [r7, #4]
 8012b24:	f7fd ff2f 	bl	8010986 <dir_read>
 8012b28:	4603      	mov	r3, r0
 8012b2a:	75fb      	strb	r3, [r7, #23]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 8012b2c:	7dfb      	ldrb	r3, [r7, #23]
 8012b2e:	2b04      	cmp	r3, #4
 8012b30:	d101      	bne.n	8012b36 <f_readdir+0x66>
 8012b32:	2300      	movs	r3, #0
 8012b34:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {				/* A valid entry is found */
 8012b36:	7dfb      	ldrb	r3, [r7, #23]
 8012b38:	2b00      	cmp	r3, #0
 8012b3a:	d10e      	bne.n	8012b5a <f_readdir+0x8a>
				get_fileinfo(dp, fno);		/* Get the object information */
 8012b3c:	6839      	ldr	r1, [r7, #0]
 8012b3e:	6878      	ldr	r0, [r7, #4]
 8012b40:	f7fe f980 	bl	8010e44 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 8012b44:	2100      	movs	r1, #0
 8012b46:	6878      	ldr	r0, [r7, #4]
 8012b48:	f7fd fbe7 	bl	801031a <dir_next>
 8012b4c:	4603      	mov	r3, r0
 8012b4e:	75fb      	strb	r3, [r7, #23]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 8012b50:	7dfb      	ldrb	r3, [r7, #23]
 8012b52:	2b04      	cmp	r3, #4
 8012b54:	d101      	bne.n	8012b5a <f_readdir+0x8a>
 8012b56:	2300      	movs	r3, #0
 8012b58:	75fb      	strb	r3, [r7, #23]
			}
			FREE_NAMBUF();
 8012b5a:	6938      	ldr	r0, [r7, #16]
 8012b5c:	f000 fbb7 	bl	80132ce <ff_memfree>
		}
	}
	LEAVE_FF(fs, res);
 8012b60:	7dfb      	ldrb	r3, [r7, #23]
}
 8012b62:	4618      	mov	r0, r3
 8012b64:	3718      	adds	r7, #24
 8012b66:	46bd      	mov	sp, r7
 8012b68:	bd80      	pop	{r7, pc}

08012b6a <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 8012b6a:	b580      	push	{r7, lr}
 8012b6c:	b092      	sub	sp, #72	; 0x48
 8012b6e:	af00      	add	r7, sp, #0
 8012b70:	60f8      	str	r0, [r7, #12]
 8012b72:	60b9      	str	r1, [r7, #8]
 8012b74:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 8012b76:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8012b7a:	f107 030c 	add.w	r3, r7, #12
 8012b7e:	2200      	movs	r2, #0
 8012b80:	4618      	mov	r0, r3
 8012b82:	f7fe fd01 	bl	8011588 <find_volume>
 8012b86:	4603      	mov	r3, r0
 8012b88:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 8012b8c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8012b90:	2b00      	cmp	r3, #0
 8012b92:	f040 8099 	bne.w	8012cc8 <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 8012b96:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012b98:	687b      	ldr	r3, [r7, #4]
 8012b9a:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 8012b9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012b9e:	695a      	ldr	r2, [r3, #20]
 8012ba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ba2:	699b      	ldr	r3, [r3, #24]
 8012ba4:	3b02      	subs	r3, #2
 8012ba6:	429a      	cmp	r2, r3
 8012ba8:	d804      	bhi.n	8012bb4 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 8012baa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012bac:	695a      	ldr	r2, [r3, #20]
 8012bae:	68bb      	ldr	r3, [r7, #8]
 8012bb0:	601a      	str	r2, [r3, #0]
 8012bb2:	e089      	b.n	8012cc8 <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 8012bb4:	2300      	movs	r3, #0
 8012bb6:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 8012bb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012bba:	781b      	ldrb	r3, [r3, #0]
 8012bbc:	2b01      	cmp	r3, #1
 8012bbe:	d128      	bne.n	8012c12 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 8012bc0:	2302      	movs	r3, #2
 8012bc2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8012bc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012bc6:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 8012bc8:	f107 0314 	add.w	r3, r7, #20
 8012bcc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8012bce:	4618      	mov	r0, r3
 8012bd0:	f7fd f865 	bl	800fc9e <get_fat>
 8012bd4:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 8012bd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012bd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012bdc:	d103      	bne.n	8012be6 <f_getfree+0x7c>
 8012bde:	2301      	movs	r3, #1
 8012be0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8012be4:	e063      	b.n	8012cae <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 8012be6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012be8:	2b01      	cmp	r3, #1
 8012bea:	d103      	bne.n	8012bf4 <f_getfree+0x8a>
 8012bec:	2302      	movs	r3, #2
 8012bee:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8012bf2:	e05c      	b.n	8012cae <f_getfree+0x144>
					if (stat == 0) nfree++;
 8012bf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012bf6:	2b00      	cmp	r3, #0
 8012bf8:	d102      	bne.n	8012c00 <f_getfree+0x96>
 8012bfa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012bfc:	3301      	adds	r3, #1
 8012bfe:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 8012c00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012c02:	3301      	adds	r3, #1
 8012c04:	63fb      	str	r3, [r7, #60]	; 0x3c
 8012c06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c08:	699b      	ldr	r3, [r3, #24]
 8012c0a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012c0c:	429a      	cmp	r2, r3
 8012c0e:	d3db      	bcc.n	8012bc8 <f_getfree+0x5e>
 8012c10:	e04d      	b.n	8012cae <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 8012c12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c14:	699b      	ldr	r3, [r3, #24]
 8012c16:	63fb      	str	r3, [r7, #60]	; 0x3c
 8012c18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012c1c:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 8012c1e:	2300      	movs	r3, #0
 8012c20:	637b      	str	r3, [r7, #52]	; 0x34
 8012c22:	2300      	movs	r3, #0
 8012c24:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 8012c26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012c28:	2b00      	cmp	r3, #0
 8012c2a:	d113      	bne.n	8012c54 <f_getfree+0xea>
							res = move_window(fs, sect++);
 8012c2c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012c2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c30:	1c5a      	adds	r2, r3, #1
 8012c32:	63ba      	str	r2, [r7, #56]	; 0x38
 8012c34:	4619      	mov	r1, r3
 8012c36:	f7fc ff77 	bl	800fb28 <move_window>
 8012c3a:	4603      	mov	r3, r0
 8012c3c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 8012c40:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8012c44:	2b00      	cmp	r3, #0
 8012c46:	d131      	bne.n	8012cac <f_getfree+0x142>
							p = fs->win;
 8012c48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c4a:	3334      	adds	r3, #52	; 0x34
 8012c4c:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 8012c4e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8012c52:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 8012c54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c56:	781b      	ldrb	r3, [r3, #0]
 8012c58:	2b02      	cmp	r3, #2
 8012c5a:	d10f      	bne.n	8012c7c <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 8012c5c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012c5e:	f7fc fcb3 	bl	800f5c8 <ld_word>
 8012c62:	4603      	mov	r3, r0
 8012c64:	2b00      	cmp	r3, #0
 8012c66:	d102      	bne.n	8012c6e <f_getfree+0x104>
 8012c68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012c6a:	3301      	adds	r3, #1
 8012c6c:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 8012c6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c70:	3302      	adds	r3, #2
 8012c72:	633b      	str	r3, [r7, #48]	; 0x30
 8012c74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012c76:	3b02      	subs	r3, #2
 8012c78:	637b      	str	r3, [r7, #52]	; 0x34
 8012c7a:	e010      	b.n	8012c9e <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 8012c7c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012c7e:	f7fc fcbb 	bl	800f5f8 <ld_dword>
 8012c82:	4603      	mov	r3, r0
 8012c84:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8012c88:	2b00      	cmp	r3, #0
 8012c8a:	d102      	bne.n	8012c92 <f_getfree+0x128>
 8012c8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012c8e:	3301      	adds	r3, #1
 8012c90:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 8012c92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c94:	3304      	adds	r3, #4
 8012c96:	633b      	str	r3, [r7, #48]	; 0x30
 8012c98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012c9a:	3b04      	subs	r3, #4
 8012c9c:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 8012c9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012ca0:	3b01      	subs	r3, #1
 8012ca2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8012ca4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012ca6:	2b00      	cmp	r3, #0
 8012ca8:	d1bd      	bne.n	8012c26 <f_getfree+0xbc>
 8012caa:	e000      	b.n	8012cae <f_getfree+0x144>
							if (res != FR_OK) break;
 8012cac:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 8012cae:	68bb      	ldr	r3, [r7, #8]
 8012cb0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8012cb2:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 8012cb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012cb6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8012cb8:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 8012cba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012cbc:	791a      	ldrb	r2, [r3, #4]
 8012cbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012cc0:	f042 0201 	orr.w	r2, r2, #1
 8012cc4:	b2d2      	uxtb	r2, r2
 8012cc6:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 8012cc8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8012ccc:	4618      	mov	r0, r3
 8012cce:	3748      	adds	r7, #72	; 0x48
 8012cd0:	46bd      	mov	sp, r7
 8012cd2:	bd80      	pop	{r7, pc}

08012cd4 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 8012cd4:	b580      	push	{r7, lr}
 8012cd6:	b084      	sub	sp, #16
 8012cd8:	af00      	add	r7, sp, #0
 8012cda:	6078      	str	r0, [r7, #4]
 8012cdc:	460b      	mov	r3, r1
 8012cde:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 8012ce0:	78fb      	ldrb	r3, [r7, #3]
 8012ce2:	2b0a      	cmp	r3, #10
 8012ce4:	d103      	bne.n	8012cee <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 8012ce6:	210d      	movs	r1, #13
 8012ce8:	6878      	ldr	r0, [r7, #4]
 8012cea:	f7ff fff3 	bl	8012cd4 <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 8012cee:	687b      	ldr	r3, [r7, #4]
 8012cf0:	685b      	ldr	r3, [r3, #4]
 8012cf2:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 8012cf4:	68fb      	ldr	r3, [r7, #12]
 8012cf6:	2b00      	cmp	r3, #0
 8012cf8:	db25      	blt.n	8012d46 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 8012cfa:	68fb      	ldr	r3, [r7, #12]
 8012cfc:	1c5a      	adds	r2, r3, #1
 8012cfe:	60fa      	str	r2, [r7, #12]
 8012d00:	687a      	ldr	r2, [r7, #4]
 8012d02:	4413      	add	r3, r2
 8012d04:	78fa      	ldrb	r2, [r7, #3]
 8012d06:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8012d08:	68fb      	ldr	r3, [r7, #12]
 8012d0a:	2b3c      	cmp	r3, #60	; 0x3c
 8012d0c:	dd12      	ble.n	8012d34 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8012d0e:	687b      	ldr	r3, [r7, #4]
 8012d10:	6818      	ldr	r0, [r3, #0]
 8012d12:	687b      	ldr	r3, [r7, #4]
 8012d14:	f103 010c 	add.w	r1, r3, #12
 8012d18:	68fa      	ldr	r2, [r7, #12]
 8012d1a:	f107 0308 	add.w	r3, r7, #8
 8012d1e:	f7ff fa08 	bl	8012132 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 8012d22:	68ba      	ldr	r2, [r7, #8]
 8012d24:	68fb      	ldr	r3, [r7, #12]
 8012d26:	429a      	cmp	r2, r3
 8012d28:	d101      	bne.n	8012d2e <putc_bfd+0x5a>
 8012d2a:	2300      	movs	r3, #0
 8012d2c:	e001      	b.n	8012d32 <putc_bfd+0x5e>
 8012d2e:	f04f 33ff 	mov.w	r3, #4294967295
 8012d32:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 8012d34:	687b      	ldr	r3, [r7, #4]
 8012d36:	68fa      	ldr	r2, [r7, #12]
 8012d38:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 8012d3a:	687b      	ldr	r3, [r7, #4]
 8012d3c:	689b      	ldr	r3, [r3, #8]
 8012d3e:	1c5a      	adds	r2, r3, #1
 8012d40:	687b      	ldr	r3, [r7, #4]
 8012d42:	609a      	str	r2, [r3, #8]
 8012d44:	e000      	b.n	8012d48 <putc_bfd+0x74>
	if (i < 0) return;
 8012d46:	bf00      	nop
}
 8012d48:	3710      	adds	r7, #16
 8012d4a:	46bd      	mov	sp, r7
 8012d4c:	bd80      	pop	{r7, pc}

08012d4e <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 8012d4e:	b580      	push	{r7, lr}
 8012d50:	b084      	sub	sp, #16
 8012d52:	af00      	add	r7, sp, #0
 8012d54:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 8012d56:	687b      	ldr	r3, [r7, #4]
 8012d58:	685b      	ldr	r3, [r3, #4]
 8012d5a:	2b00      	cmp	r3, #0
 8012d5c:	db16      	blt.n	8012d8c <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 8012d5e:	687b      	ldr	r3, [r7, #4]
 8012d60:	6818      	ldr	r0, [r3, #0]
 8012d62:	687b      	ldr	r3, [r7, #4]
 8012d64:	f103 010c 	add.w	r1, r3, #12
 8012d68:	687b      	ldr	r3, [r7, #4]
 8012d6a:	685b      	ldr	r3, [r3, #4]
 8012d6c:	461a      	mov	r2, r3
 8012d6e:	f107 030c 	add.w	r3, r7, #12
 8012d72:	f7ff f9de 	bl	8012132 <f_write>
 8012d76:	4603      	mov	r3, r0
 8012d78:	2b00      	cmp	r3, #0
 8012d7a:	d107      	bne.n	8012d8c <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 8012d7c:	687b      	ldr	r3, [r7, #4]
 8012d7e:	685b      	ldr	r3, [r3, #4]
 8012d80:	68fa      	ldr	r2, [r7, #12]
 8012d82:	4293      	cmp	r3, r2
 8012d84:	d102      	bne.n	8012d8c <putc_flush+0x3e>
 8012d86:	687b      	ldr	r3, [r7, #4]
 8012d88:	689b      	ldr	r3, [r3, #8]
 8012d8a:	e001      	b.n	8012d90 <putc_flush+0x42>
	return EOF;
 8012d8c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8012d90:	4618      	mov	r0, r3
 8012d92:	3710      	adds	r7, #16
 8012d94:	46bd      	mov	sp, r7
 8012d96:	bd80      	pop	{r7, pc}

08012d98 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 8012d98:	b480      	push	{r7}
 8012d9a:	b083      	sub	sp, #12
 8012d9c:	af00      	add	r7, sp, #0
 8012d9e:	6078      	str	r0, [r7, #4]
 8012da0:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 8012da2:	687b      	ldr	r3, [r7, #4]
 8012da4:	683a      	ldr	r2, [r7, #0]
 8012da6:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 8012da8:	687b      	ldr	r3, [r7, #4]
 8012daa:	2200      	movs	r2, #0
 8012dac:	605a      	str	r2, [r3, #4]
 8012dae:	687b      	ldr	r3, [r7, #4]
 8012db0:	685a      	ldr	r2, [r3, #4]
 8012db2:	687b      	ldr	r3, [r7, #4]
 8012db4:	609a      	str	r2, [r3, #8]
}
 8012db6:	bf00      	nop
 8012db8:	370c      	adds	r7, #12
 8012dba:	46bd      	mov	sp, r7
 8012dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012dc0:	4770      	bx	lr
	...

08012dc4 <f_printf>:
int f_printf (
	FIL* fp,			/* Pointer to the file object */
	const TCHAR* fmt,	/* Pointer to the format string */
	...					/* Optional arguments... */
)
{
 8012dc4:	b40e      	push	{r1, r2, r3}
 8012dc6:	b580      	push	{r7, lr}
 8012dc8:	b0a7      	sub	sp, #156	; 0x9c
 8012dca:	af00      	add	r7, sp, #0
 8012dcc:	6078      	str	r0, [r7, #4]
	UINT i, j, w;
	DWORD v;
	TCHAR c, d, str[32], *p;


	putc_init(&pb, fp);
 8012dce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8012dd2:	6879      	ldr	r1, [r7, #4]
 8012dd4:	4618      	mov	r0, r3
 8012dd6:	f7ff ffdf 	bl	8012d98 <putc_init>

	va_start(arp, fmt);
 8012dda:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8012dde:	67bb      	str	r3, [r7, #120]	; 0x78

	for (;;) {
		c = *fmt++;
 8012de0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8012de4:	1c5a      	adds	r2, r3, #1
 8012de6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8012dea:	781b      	ldrb	r3, [r3, #0]
 8012dec:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		if (c == 0) break;			/* End of string */
 8012df0:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8012df4:	2b00      	cmp	r3, #0
 8012df6:	f000 81f2 	beq.w	80131de <f_printf+0x41a>
		if (c != '%') {				/* Non escape character */
 8012dfa:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8012dfe:	2b25      	cmp	r3, #37	; 0x25
 8012e00:	d008      	beq.n	8012e14 <f_printf+0x50>
			putc_bfd(&pb, c);
 8012e02:	f897 2083 	ldrb.w	r2, [r7, #131]	; 0x83
 8012e06:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8012e0a:	4611      	mov	r1, r2
 8012e0c:	4618      	mov	r0, r3
 8012e0e:	f7ff ff61 	bl	8012cd4 <putc_bfd>
			continue;
 8012e12:	e1e3      	b.n	80131dc <f_printf+0x418>
		}
		w = f = 0;
 8012e14:	2300      	movs	r3, #0
 8012e16:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8012e1a:	2300      	movs	r3, #0
 8012e1c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
		c = *fmt++;
 8012e20:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8012e24:	1c5a      	adds	r2, r3, #1
 8012e26:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8012e2a:	781b      	ldrb	r3, [r3, #0]
 8012e2c:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		if (c == '0') {				/* Flag: '0' padding */
 8012e30:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8012e34:	2b30      	cmp	r3, #48	; 0x30
 8012e36:	d10b      	bne.n	8012e50 <f_printf+0x8c>
			f = 1; c = *fmt++;
 8012e38:	2301      	movs	r3, #1
 8012e3a:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8012e3e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8012e42:	1c5a      	adds	r2, r3, #1
 8012e44:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8012e48:	781b      	ldrb	r3, [r3, #0]
 8012e4a:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
 8012e4e:	e024      	b.n	8012e9a <f_printf+0xd6>
		} else {
			if (c == '-') {			/* Flag: left justified */
 8012e50:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8012e54:	2b2d      	cmp	r3, #45	; 0x2d
 8012e56:	d120      	bne.n	8012e9a <f_printf+0xd6>
				f = 2; c = *fmt++;
 8012e58:	2302      	movs	r3, #2
 8012e5a:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8012e5e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8012e62:	1c5a      	adds	r2, r3, #1
 8012e64:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8012e68:	781b      	ldrb	r3, [r3, #0]
 8012e6a:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
			}
		}
		while (IsDigit(c)) {		/* Precision */
 8012e6e:	e014      	b.n	8012e9a <f_printf+0xd6>
			w = w * 10 + c - '0';
 8012e70:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8012e74:	4613      	mov	r3, r2
 8012e76:	009b      	lsls	r3, r3, #2
 8012e78:	4413      	add	r3, r2
 8012e7a:	005b      	lsls	r3, r3, #1
 8012e7c:	461a      	mov	r2, r3
 8012e7e:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8012e82:	4413      	add	r3, r2
 8012e84:	3b30      	subs	r3, #48	; 0x30
 8012e86:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
			c = *fmt++;
 8012e8a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8012e8e:	1c5a      	adds	r2, r3, #1
 8012e90:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8012e94:	781b      	ldrb	r3, [r3, #0]
 8012e96:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		while (IsDigit(c)) {		/* Precision */
 8012e9a:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8012e9e:	2b2f      	cmp	r3, #47	; 0x2f
 8012ea0:	d903      	bls.n	8012eaa <f_printf+0xe6>
 8012ea2:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8012ea6:	2b39      	cmp	r3, #57	; 0x39
 8012ea8:	d9e2      	bls.n	8012e70 <f_printf+0xac>
		}
		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
 8012eaa:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8012eae:	2b6c      	cmp	r3, #108	; 0x6c
 8012eb0:	d003      	beq.n	8012eba <f_printf+0xf6>
 8012eb2:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8012eb6:	2b4c      	cmp	r3, #76	; 0x4c
 8012eb8:	d10d      	bne.n	8012ed6 <f_printf+0x112>
			f |= 4; c = *fmt++;
 8012eba:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8012ebe:	f043 0304 	orr.w	r3, r3, #4
 8012ec2:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8012ec6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8012eca:	1c5a      	adds	r2, r3, #1
 8012ecc:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8012ed0:	781b      	ldrb	r3, [r3, #0]
 8012ed2:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		}
		if (!c) break;
 8012ed6:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8012eda:	2b00      	cmp	r3, #0
 8012edc:	f000 8181 	beq.w	80131e2 <f_printf+0x41e>
		d = c;
 8012ee0:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8012ee4:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		if (IsLower(d)) d -= 0x20;
 8012ee8:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8012eec:	2b60      	cmp	r3, #96	; 0x60
 8012eee:	d908      	bls.n	8012f02 <f_printf+0x13e>
 8012ef0:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8012ef4:	2b7a      	cmp	r3, #122	; 0x7a
 8012ef6:	d804      	bhi.n	8012f02 <f_printf+0x13e>
 8012ef8:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8012efc:	3b20      	subs	r3, #32
 8012efe:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		switch (d) {				/* Type is... */
 8012f02:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8012f06:	3b42      	subs	r3, #66	; 0x42
 8012f08:	2b16      	cmp	r3, #22
 8012f0a:	f200 8098 	bhi.w	801303e <f_printf+0x27a>
 8012f0e:	a201      	add	r2, pc, #4	; (adr r2, 8012f14 <f_printf+0x150>)
 8012f10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012f14:	0801301f 	.word	0x0801301f
 8012f18:	08013007 	.word	0x08013007
 8012f1c:	0801302f 	.word	0x0801302f
 8012f20:	0801303f 	.word	0x0801303f
 8012f24:	0801303f 	.word	0x0801303f
 8012f28:	0801303f 	.word	0x0801303f
 8012f2c:	0801303f 	.word	0x0801303f
 8012f30:	0801303f 	.word	0x0801303f
 8012f34:	0801303f 	.word	0x0801303f
 8012f38:	0801303f 	.word	0x0801303f
 8012f3c:	0801303f 	.word	0x0801303f
 8012f40:	0801303f 	.word	0x0801303f
 8012f44:	0801303f 	.word	0x0801303f
 8012f48:	08013027 	.word	0x08013027
 8012f4c:	0801303f 	.word	0x0801303f
 8012f50:	0801303f 	.word	0x0801303f
 8012f54:	0801303f 	.word	0x0801303f
 8012f58:	08012f71 	.word	0x08012f71
 8012f5c:	0801303f 	.word	0x0801303f
 8012f60:	0801302f 	.word	0x0801302f
 8012f64:	0801303f 	.word	0x0801303f
 8012f68:	0801303f 	.word	0x0801303f
 8012f6c:	08013037 	.word	0x08013037
		case 'S' :					/* String */
			p = va_arg(arp, TCHAR*);
 8012f70:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012f72:	1d1a      	adds	r2, r3, #4
 8012f74:	67ba      	str	r2, [r7, #120]	; 0x78
 8012f76:	681b      	ldr	r3, [r3, #0]
 8012f78:	67fb      	str	r3, [r7, #124]	; 0x7c
			for (j = 0; p[j]; j++) ;
 8012f7a:	2300      	movs	r3, #0
 8012f7c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8012f80:	e004      	b.n	8012f8c <f_printf+0x1c8>
 8012f82:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8012f86:	3301      	adds	r3, #1
 8012f88:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8012f8c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8012f8e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8012f92:	4413      	add	r3, r2
 8012f94:	781b      	ldrb	r3, [r3, #0]
 8012f96:	2b00      	cmp	r3, #0
 8012f98:	d1f3      	bne.n	8012f82 <f_printf+0x1be>
			if (!(f & 2)) {
 8012f9a:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8012f9e:	f003 0302 	and.w	r3, r3, #2
 8012fa2:	2b00      	cmp	r3, #0
 8012fa4:	d11a      	bne.n	8012fdc <f_printf+0x218>
				while (j++ < w) putc_bfd(&pb, ' ');
 8012fa6:	e005      	b.n	8012fb4 <f_printf+0x1f0>
 8012fa8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8012fac:	2120      	movs	r1, #32
 8012fae:	4618      	mov	r0, r3
 8012fb0:	f7ff fe90 	bl	8012cd4 <putc_bfd>
 8012fb4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8012fb8:	1c5a      	adds	r2, r3, #1
 8012fba:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8012fbe:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8012fc2:	429a      	cmp	r2, r3
 8012fc4:	d8f0      	bhi.n	8012fa8 <f_printf+0x1e4>
			}
			while (*p) putc_bfd(&pb, *p++);
 8012fc6:	e009      	b.n	8012fdc <f_printf+0x218>
 8012fc8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8012fca:	1c5a      	adds	r2, r3, #1
 8012fcc:	67fa      	str	r2, [r7, #124]	; 0x7c
 8012fce:	781a      	ldrb	r2, [r3, #0]
 8012fd0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8012fd4:	4611      	mov	r1, r2
 8012fd6:	4618      	mov	r0, r3
 8012fd8:	f7ff fe7c 	bl	8012cd4 <putc_bfd>
 8012fdc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8012fde:	781b      	ldrb	r3, [r3, #0]
 8012fe0:	2b00      	cmp	r3, #0
 8012fe2:	d1f1      	bne.n	8012fc8 <f_printf+0x204>
			while (j++ < w) putc_bfd(&pb, ' ');
 8012fe4:	e005      	b.n	8012ff2 <f_printf+0x22e>
 8012fe6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8012fea:	2120      	movs	r1, #32
 8012fec:	4618      	mov	r0, r3
 8012fee:	f7ff fe71 	bl	8012cd4 <putc_bfd>
 8012ff2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8012ff6:	1c5a      	adds	r2, r3, #1
 8012ff8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8012ffc:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8013000:	429a      	cmp	r2, r3
 8013002:	d8f0      	bhi.n	8012fe6 <f_printf+0x222>
			continue;
 8013004:	e0ea      	b.n	80131dc <f_printf+0x418>

		case 'C' :					/* Character */
			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
 8013006:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8013008:	1d1a      	adds	r2, r3, #4
 801300a:	67ba      	str	r2, [r7, #120]	; 0x78
 801300c:	681b      	ldr	r3, [r3, #0]
 801300e:	b2da      	uxtb	r2, r3
 8013010:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8013014:	4611      	mov	r1, r2
 8013016:	4618      	mov	r0, r3
 8013018:	f7ff fe5c 	bl	8012cd4 <putc_bfd>
 801301c:	e0de      	b.n	80131dc <f_printf+0x418>

		case 'B' :					/* Binary */
			r = 2; break;
 801301e:	2302      	movs	r3, #2
 8013020:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 8013024:	e014      	b.n	8013050 <f_printf+0x28c>

		case 'O' :					/* Octal */
			r = 8; break;
 8013026:	2308      	movs	r3, #8
 8013028:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 801302c:	e010      	b.n	8013050 <f_printf+0x28c>

		case 'D' :					/* Signed decimal */
		case 'U' :					/* Unsigned decimal */
			r = 10; break;
 801302e:	230a      	movs	r3, #10
 8013030:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 8013034:	e00c      	b.n	8013050 <f_printf+0x28c>

		case 'X' :					/* Hexdecimal */
			r = 16; break;
 8013036:	2310      	movs	r3, #16
 8013038:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 801303c:	e008      	b.n	8013050 <f_printf+0x28c>

		default:					/* Unknown type (pass-through) */
			putc_bfd(&pb, c); continue;
 801303e:	f897 2083 	ldrb.w	r2, [r7, #131]	; 0x83
 8013042:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8013046:	4611      	mov	r1, r2
 8013048:	4618      	mov	r0, r3
 801304a:	f7ff fe43 	bl	8012cd4 <putc_bfd>
 801304e:	e0c5      	b.n	80131dc <f_printf+0x418>
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
 8013050:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8013054:	f003 0304 	and.w	r3, r3, #4
 8013058:	2b00      	cmp	r3, #0
 801305a:	d004      	beq.n	8013066 <f_printf+0x2a2>
 801305c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801305e:	1d1a      	adds	r2, r3, #4
 8013060:	67ba      	str	r2, [r7, #120]	; 0x78
 8013062:	681b      	ldr	r3, [r3, #0]
 8013064:	e00c      	b.n	8013080 <f_printf+0x2bc>
 8013066:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 801306a:	2b44      	cmp	r3, #68	; 0x44
 801306c:	d104      	bne.n	8013078 <f_printf+0x2b4>
 801306e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8013070:	1d1a      	adds	r2, r3, #4
 8013072:	67ba      	str	r2, [r7, #120]	; 0x78
 8013074:	681b      	ldr	r3, [r3, #0]
 8013076:	e003      	b.n	8013080 <f_printf+0x2bc>
 8013078:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801307a:	1d1a      	adds	r2, r3, #4
 801307c:	67ba      	str	r2, [r7, #120]	; 0x78
 801307e:	681b      	ldr	r3, [r3, #0]
 8013080:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		if (d == 'D' && (v & 0x80000000)) {
 8013084:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8013088:	2b44      	cmp	r3, #68	; 0x44
 801308a:	d10e      	bne.n	80130aa <f_printf+0x2e6>
 801308c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8013090:	2b00      	cmp	r3, #0
 8013092:	da0a      	bge.n	80130aa <f_printf+0x2e6>
			v = 0 - v;
 8013094:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8013098:	425b      	negs	r3, r3
 801309a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			f |= 8;
 801309e:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80130a2:	f043 0308 	orr.w	r3, r3, #8
 80130a6:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
		}
		i = 0;
 80130aa:	2300      	movs	r3, #0
 80130ac:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
		do {
			d = (TCHAR)(v % r); v /= r;
 80130b0:	f897 2096 	ldrb.w	r2, [r7, #150]	; 0x96
 80130b4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80130b8:	fbb3 f1f2 	udiv	r1, r3, r2
 80130bc:	fb01 f202 	mul.w	r2, r1, r2
 80130c0:	1a9b      	subs	r3, r3, r2
 80130c2:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
 80130c6:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 80130ca:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80130ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80130d2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 80130d6:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 80130da:	2b09      	cmp	r3, #9
 80130dc:	d90b      	bls.n	80130f6 <f_printf+0x332>
 80130de:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 80130e2:	2b78      	cmp	r3, #120	; 0x78
 80130e4:	d101      	bne.n	80130ea <f_printf+0x326>
 80130e6:	2227      	movs	r2, #39	; 0x27
 80130e8:	e000      	b.n	80130ec <f_printf+0x328>
 80130ea:	2207      	movs	r2, #7
 80130ec:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 80130f0:	4413      	add	r3, r2
 80130f2:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
			str[i++] = d + '0';
 80130f6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80130fa:	1c5a      	adds	r2, r3, #1
 80130fc:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8013100:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 8013104:	3230      	adds	r2, #48	; 0x30
 8013106:	b2d2      	uxtb	r2, r2
 8013108:	3398      	adds	r3, #152	; 0x98
 801310a:	443b      	add	r3, r7
 801310c:	f803 2c8c 	strb.w	r2, [r3, #-140]
		} while (v && i < sizeof str / sizeof str[0]);
 8013110:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8013114:	2b00      	cmp	r3, #0
 8013116:	d003      	beq.n	8013120 <f_printf+0x35c>
 8013118:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801311c:	2b1f      	cmp	r3, #31
 801311e:	d9c7      	bls.n	80130b0 <f_printf+0x2ec>
		if (f & 8) str[i++] = '-';
 8013120:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8013124:	f003 0308 	and.w	r3, r3, #8
 8013128:	2b00      	cmp	r3, #0
 801312a:	d009      	beq.n	8013140 <f_printf+0x37c>
 801312c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8013130:	1c5a      	adds	r2, r3, #1
 8013132:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8013136:	3398      	adds	r3, #152	; 0x98
 8013138:	443b      	add	r3, r7
 801313a:	222d      	movs	r2, #45	; 0x2d
 801313c:	f803 2c8c 	strb.w	r2, [r3, #-140]
		j = i; d = (f & 1) ? '0' : ' ';
 8013140:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8013144:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8013148:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 801314c:	f003 0301 	and.w	r3, r3, #1
 8013150:	2b00      	cmp	r3, #0
 8013152:	d001      	beq.n	8013158 <f_printf+0x394>
 8013154:	2330      	movs	r3, #48	; 0x30
 8013156:	e000      	b.n	801315a <f_printf+0x396>
 8013158:	2320      	movs	r3, #32
 801315a:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
 801315e:	e007      	b.n	8013170 <f_printf+0x3ac>
 8013160:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 8013164:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8013168:	4611      	mov	r1, r2
 801316a:	4618      	mov	r0, r3
 801316c:	f7ff fdb2 	bl	8012cd4 <putc_bfd>
 8013170:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8013174:	f003 0302 	and.w	r3, r3, #2
 8013178:	2b00      	cmp	r3, #0
 801317a:	d108      	bne.n	801318e <f_printf+0x3ca>
 801317c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8013180:	1c5a      	adds	r2, r3, #1
 8013182:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8013186:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 801318a:	429a      	cmp	r2, r3
 801318c:	d8e8      	bhi.n	8013160 <f_printf+0x39c>
		do {
			putc_bfd(&pb, str[--i]);
 801318e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8013192:	3b01      	subs	r3, #1
 8013194:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8013198:	f107 020c 	add.w	r2, r7, #12
 801319c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80131a0:	4413      	add	r3, r2
 80131a2:	781a      	ldrb	r2, [r3, #0]
 80131a4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80131a8:	4611      	mov	r1, r2
 80131aa:	4618      	mov	r0, r3
 80131ac:	f7ff fd92 	bl	8012cd4 <putc_bfd>
		} while (i);
 80131b0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80131b4:	2b00      	cmp	r3, #0
 80131b6:	d1ea      	bne.n	801318e <f_printf+0x3ca>
		while (j++ < w) putc_bfd(&pb, d);
 80131b8:	e007      	b.n	80131ca <f_printf+0x406>
 80131ba:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 80131be:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80131c2:	4611      	mov	r1, r2
 80131c4:	4618      	mov	r0, r3
 80131c6:	f7ff fd85 	bl	8012cd4 <putc_bfd>
 80131ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80131ce:	1c5a      	adds	r2, r3, #1
 80131d0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80131d4:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80131d8:	429a      	cmp	r2, r3
 80131da:	d8ee      	bhi.n	80131ba <f_printf+0x3f6>
		c = *fmt++;
 80131dc:	e600      	b.n	8012de0 <f_printf+0x1c>
		if (c == 0) break;			/* End of string */
 80131de:	bf00      	nop
 80131e0:	e000      	b.n	80131e4 <f_printf+0x420>
		if (!c) break;
 80131e2:	bf00      	nop
	}

	va_end(arp);

	return putc_flush(&pb);
 80131e4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80131e8:	4618      	mov	r0, r3
 80131ea:	f7ff fdb0 	bl	8012d4e <putc_flush>
 80131ee:	4603      	mov	r3, r0
}
 80131f0:	4618      	mov	r0, r3
 80131f2:	379c      	adds	r7, #156	; 0x9c
 80131f4:	46bd      	mov	sp, r7
 80131f6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80131fa:	b003      	add	sp, #12
 80131fc:	4770      	bx	lr
 80131fe:	bf00      	nop

08013200 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8013200:	b480      	push	{r7}
 8013202:	b087      	sub	sp, #28
 8013204:	af00      	add	r7, sp, #0
 8013206:	60f8      	str	r0, [r7, #12]
 8013208:	60b9      	str	r1, [r7, #8]
 801320a:	4613      	mov	r3, r2
 801320c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 801320e:	2301      	movs	r3, #1
 8013210:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8013212:	2300      	movs	r3, #0
 8013214:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8013216:	4b1f      	ldr	r3, [pc, #124]	; (8013294 <FATFS_LinkDriverEx+0x94>)
 8013218:	7b9b      	ldrb	r3, [r3, #14]
 801321a:	b2db      	uxtb	r3, r3
 801321c:	2b01      	cmp	r3, #1
 801321e:	d831      	bhi.n	8013284 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8013220:	4b1c      	ldr	r3, [pc, #112]	; (8013294 <FATFS_LinkDriverEx+0x94>)
 8013222:	7b9b      	ldrb	r3, [r3, #14]
 8013224:	b2db      	uxtb	r3, r3
 8013226:	461a      	mov	r2, r3
 8013228:	4b1a      	ldr	r3, [pc, #104]	; (8013294 <FATFS_LinkDriverEx+0x94>)
 801322a:	2100      	movs	r1, #0
 801322c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 801322e:	4b19      	ldr	r3, [pc, #100]	; (8013294 <FATFS_LinkDriverEx+0x94>)
 8013230:	7b9b      	ldrb	r3, [r3, #14]
 8013232:	b2db      	uxtb	r3, r3
 8013234:	4a17      	ldr	r2, [pc, #92]	; (8013294 <FATFS_LinkDriverEx+0x94>)
 8013236:	009b      	lsls	r3, r3, #2
 8013238:	4413      	add	r3, r2
 801323a:	68fa      	ldr	r2, [r7, #12]
 801323c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 801323e:	4b15      	ldr	r3, [pc, #84]	; (8013294 <FATFS_LinkDriverEx+0x94>)
 8013240:	7b9b      	ldrb	r3, [r3, #14]
 8013242:	b2db      	uxtb	r3, r3
 8013244:	461a      	mov	r2, r3
 8013246:	4b13      	ldr	r3, [pc, #76]	; (8013294 <FATFS_LinkDriverEx+0x94>)
 8013248:	4413      	add	r3, r2
 801324a:	79fa      	ldrb	r2, [r7, #7]
 801324c:	731a      	strb	r2, [r3, #12]
    DiskNum = disk.nbr++;
 801324e:	4b11      	ldr	r3, [pc, #68]	; (8013294 <FATFS_LinkDriverEx+0x94>)
 8013250:	7b9b      	ldrb	r3, [r3, #14]
 8013252:	b2db      	uxtb	r3, r3
 8013254:	1c5a      	adds	r2, r3, #1
 8013256:	b2d1      	uxtb	r1, r2
 8013258:	4a0e      	ldr	r2, [pc, #56]	; (8013294 <FATFS_LinkDriverEx+0x94>)
 801325a:	7391      	strb	r1, [r2, #14]
 801325c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 801325e:	7dbb      	ldrb	r3, [r7, #22]
 8013260:	3330      	adds	r3, #48	; 0x30
 8013262:	b2da      	uxtb	r2, r3
 8013264:	68bb      	ldr	r3, [r7, #8]
 8013266:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8013268:	68bb      	ldr	r3, [r7, #8]
 801326a:	3301      	adds	r3, #1
 801326c:	223a      	movs	r2, #58	; 0x3a
 801326e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8013270:	68bb      	ldr	r3, [r7, #8]
 8013272:	3302      	adds	r3, #2
 8013274:	222f      	movs	r2, #47	; 0x2f
 8013276:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8013278:	68bb      	ldr	r3, [r7, #8]
 801327a:	3303      	adds	r3, #3
 801327c:	2200      	movs	r2, #0
 801327e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8013280:	2300      	movs	r3, #0
 8013282:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8013284:	7dfb      	ldrb	r3, [r7, #23]
}
 8013286:	4618      	mov	r0, r3
 8013288:	371c      	adds	r7, #28
 801328a:	46bd      	mov	sp, r7
 801328c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013290:	4770      	bx	lr
 8013292:	bf00      	nop
 8013294:	200053a4 	.word	0x200053a4

08013298 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8013298:	b580      	push	{r7, lr}
 801329a:	b082      	sub	sp, #8
 801329c:	af00      	add	r7, sp, #0
 801329e:	6078      	str	r0, [r7, #4]
 80132a0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80132a2:	2200      	movs	r2, #0
 80132a4:	6839      	ldr	r1, [r7, #0]
 80132a6:	6878      	ldr	r0, [r7, #4]
 80132a8:	f7ff ffaa 	bl	8013200 <FATFS_LinkDriverEx>
 80132ac:	4603      	mov	r3, r0
}
 80132ae:	4618      	mov	r0, r3
 80132b0:	3708      	adds	r7, #8
 80132b2:	46bd      	mov	sp, r7
 80132b4:	bd80      	pop	{r7, pc}

080132b6 <ff_memalloc>:
*/

void* ff_memalloc (	/* Returns pointer to the allocated memory block */
	UINT msize		/* Number of bytes to allocate */
)
{
 80132b6:	b580      	push	{r7, lr}
 80132b8:	b082      	sub	sp, #8
 80132ba:	af00      	add	r7, sp, #0
 80132bc:	6078      	str	r0, [r7, #4]
	return ff_malloc(msize);	/* Allocate a new memory block with POSIX API */
 80132be:	6878      	ldr	r0, [r7, #4]
 80132c0:	f002 fe1c 	bl	8015efc <malloc>
 80132c4:	4603      	mov	r3, r0
}
 80132c6:	4618      	mov	r0, r3
 80132c8:	3708      	adds	r7, #8
 80132ca:	46bd      	mov	sp, r7
 80132cc:	bd80      	pop	{r7, pc}

080132ce <ff_memfree>:
/*------------------------------------------------------------------------*/

void ff_memfree (
	void* mblock	/* Pointer to the memory block to free */
)
{
 80132ce:	b580      	push	{r7, lr}
 80132d0:	b082      	sub	sp, #8
 80132d2:	af00      	add	r7, sp, #0
 80132d4:	6078      	str	r0, [r7, #4]
	ff_free(mblock);	/* Discard the memory block with POSIX API */
 80132d6:	6878      	ldr	r0, [r7, #4]
 80132d8:	f002 fe18 	bl	8015f0c <free>
}
 80132dc:	bf00      	nop
 80132de:	3708      	adds	r7, #8
 80132e0:	46bd      	mov	sp, r7
 80132e2:	bd80      	pop	{r7, pc}

080132e4 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 80132e4:	b480      	push	{r7}
 80132e6:	b085      	sub	sp, #20
 80132e8:	af00      	add	r7, sp, #0
 80132ea:	4603      	mov	r3, r0
 80132ec:	6039      	str	r1, [r7, #0]
 80132ee:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 80132f0:	88fb      	ldrh	r3, [r7, #6]
 80132f2:	2b7f      	cmp	r3, #127	; 0x7f
 80132f4:	d802      	bhi.n	80132fc <ff_convert+0x18>
		c = chr;
 80132f6:	88fb      	ldrh	r3, [r7, #6]
 80132f8:	81fb      	strh	r3, [r7, #14]
 80132fa:	e025      	b.n	8013348 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 80132fc:	683b      	ldr	r3, [r7, #0]
 80132fe:	2b00      	cmp	r3, #0
 8013300:	d00b      	beq.n	801331a <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8013302:	88fb      	ldrh	r3, [r7, #6]
 8013304:	2bff      	cmp	r3, #255	; 0xff
 8013306:	d805      	bhi.n	8013314 <ff_convert+0x30>
 8013308:	88fb      	ldrh	r3, [r7, #6]
 801330a:	3b80      	subs	r3, #128	; 0x80
 801330c:	4a12      	ldr	r2, [pc, #72]	; (8013358 <ff_convert+0x74>)
 801330e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8013312:	e000      	b.n	8013316 <ff_convert+0x32>
 8013314:	2300      	movs	r3, #0
 8013316:	81fb      	strh	r3, [r7, #14]
 8013318:	e016      	b.n	8013348 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 801331a:	2300      	movs	r3, #0
 801331c:	81fb      	strh	r3, [r7, #14]
 801331e:	e009      	b.n	8013334 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8013320:	89fb      	ldrh	r3, [r7, #14]
 8013322:	4a0d      	ldr	r2, [pc, #52]	; (8013358 <ff_convert+0x74>)
 8013324:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8013328:	88fa      	ldrh	r2, [r7, #6]
 801332a:	429a      	cmp	r2, r3
 801332c:	d006      	beq.n	801333c <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 801332e:	89fb      	ldrh	r3, [r7, #14]
 8013330:	3301      	adds	r3, #1
 8013332:	81fb      	strh	r3, [r7, #14]
 8013334:	89fb      	ldrh	r3, [r7, #14]
 8013336:	2b7f      	cmp	r3, #127	; 0x7f
 8013338:	d9f2      	bls.n	8013320 <ff_convert+0x3c>
 801333a:	e000      	b.n	801333e <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 801333c:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 801333e:	89fb      	ldrh	r3, [r7, #14]
 8013340:	3380      	adds	r3, #128	; 0x80
 8013342:	b29b      	uxth	r3, r3
 8013344:	b2db      	uxtb	r3, r3
 8013346:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8013348:	89fb      	ldrh	r3, [r7, #14]
}
 801334a:	4618      	mov	r0, r3
 801334c:	3714      	adds	r7, #20
 801334e:	46bd      	mov	sp, r7
 8013350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013354:	4770      	bx	lr
 8013356:	bf00      	nop
 8013358:	08025a38 	.word	0x08025a38

0801335c <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 801335c:	b480      	push	{r7}
 801335e:	b087      	sub	sp, #28
 8013360:	af00      	add	r7, sp, #0
 8013362:	4603      	mov	r3, r0
 8013364:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8013366:	88fb      	ldrh	r3, [r7, #6]
 8013368:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801336c:	d201      	bcs.n	8013372 <ff_wtoupper+0x16>
 801336e:	4b3e      	ldr	r3, [pc, #248]	; (8013468 <ff_wtoupper+0x10c>)
 8013370:	e000      	b.n	8013374 <ff_wtoupper+0x18>
 8013372:	4b3e      	ldr	r3, [pc, #248]	; (801346c <ff_wtoupper+0x110>)
 8013374:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8013376:	697b      	ldr	r3, [r7, #20]
 8013378:	1c9a      	adds	r2, r3, #2
 801337a:	617a      	str	r2, [r7, #20]
 801337c:	881b      	ldrh	r3, [r3, #0]
 801337e:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8013380:	8a7b      	ldrh	r3, [r7, #18]
 8013382:	2b00      	cmp	r3, #0
 8013384:	d068      	beq.n	8013458 <ff_wtoupper+0xfc>
 8013386:	88fa      	ldrh	r2, [r7, #6]
 8013388:	8a7b      	ldrh	r3, [r7, #18]
 801338a:	429a      	cmp	r2, r3
 801338c:	d364      	bcc.n	8013458 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 801338e:	697b      	ldr	r3, [r7, #20]
 8013390:	1c9a      	adds	r2, r3, #2
 8013392:	617a      	str	r2, [r7, #20]
 8013394:	881b      	ldrh	r3, [r3, #0]
 8013396:	823b      	strh	r3, [r7, #16]
 8013398:	8a3b      	ldrh	r3, [r7, #16]
 801339a:	0a1b      	lsrs	r3, r3, #8
 801339c:	81fb      	strh	r3, [r7, #14]
 801339e:	8a3b      	ldrh	r3, [r7, #16]
 80133a0:	b2db      	uxtb	r3, r3
 80133a2:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 80133a4:	88fa      	ldrh	r2, [r7, #6]
 80133a6:	8a79      	ldrh	r1, [r7, #18]
 80133a8:	8a3b      	ldrh	r3, [r7, #16]
 80133aa:	440b      	add	r3, r1
 80133ac:	429a      	cmp	r2, r3
 80133ae:	da49      	bge.n	8013444 <ff_wtoupper+0xe8>
			switch (cmd) {
 80133b0:	89fb      	ldrh	r3, [r7, #14]
 80133b2:	2b08      	cmp	r3, #8
 80133b4:	d84f      	bhi.n	8013456 <ff_wtoupper+0xfa>
 80133b6:	a201      	add	r2, pc, #4	; (adr r2, 80133bc <ff_wtoupper+0x60>)
 80133b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80133bc:	080133e1 	.word	0x080133e1
 80133c0:	080133f3 	.word	0x080133f3
 80133c4:	08013409 	.word	0x08013409
 80133c8:	08013411 	.word	0x08013411
 80133cc:	08013419 	.word	0x08013419
 80133d0:	08013421 	.word	0x08013421
 80133d4:	08013429 	.word	0x08013429
 80133d8:	08013431 	.word	0x08013431
 80133dc:	08013439 	.word	0x08013439
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 80133e0:	88fa      	ldrh	r2, [r7, #6]
 80133e2:	8a7b      	ldrh	r3, [r7, #18]
 80133e4:	1ad3      	subs	r3, r2, r3
 80133e6:	005b      	lsls	r3, r3, #1
 80133e8:	697a      	ldr	r2, [r7, #20]
 80133ea:	4413      	add	r3, r2
 80133ec:	881b      	ldrh	r3, [r3, #0]
 80133ee:	80fb      	strh	r3, [r7, #6]
 80133f0:	e027      	b.n	8013442 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 80133f2:	88fa      	ldrh	r2, [r7, #6]
 80133f4:	8a7b      	ldrh	r3, [r7, #18]
 80133f6:	1ad3      	subs	r3, r2, r3
 80133f8:	b29b      	uxth	r3, r3
 80133fa:	f003 0301 	and.w	r3, r3, #1
 80133fe:	b29b      	uxth	r3, r3
 8013400:	88fa      	ldrh	r2, [r7, #6]
 8013402:	1ad3      	subs	r3, r2, r3
 8013404:	80fb      	strh	r3, [r7, #6]
 8013406:	e01c      	b.n	8013442 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8013408:	88fb      	ldrh	r3, [r7, #6]
 801340a:	3b10      	subs	r3, #16
 801340c:	80fb      	strh	r3, [r7, #6]
 801340e:	e018      	b.n	8013442 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8013410:	88fb      	ldrh	r3, [r7, #6]
 8013412:	3b20      	subs	r3, #32
 8013414:	80fb      	strh	r3, [r7, #6]
 8013416:	e014      	b.n	8013442 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8013418:	88fb      	ldrh	r3, [r7, #6]
 801341a:	3b30      	subs	r3, #48	; 0x30
 801341c:	80fb      	strh	r3, [r7, #6]
 801341e:	e010      	b.n	8013442 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8013420:	88fb      	ldrh	r3, [r7, #6]
 8013422:	3b1a      	subs	r3, #26
 8013424:	80fb      	strh	r3, [r7, #6]
 8013426:	e00c      	b.n	8013442 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8013428:	88fb      	ldrh	r3, [r7, #6]
 801342a:	3308      	adds	r3, #8
 801342c:	80fb      	strh	r3, [r7, #6]
 801342e:	e008      	b.n	8013442 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8013430:	88fb      	ldrh	r3, [r7, #6]
 8013432:	3b50      	subs	r3, #80	; 0x50
 8013434:	80fb      	strh	r3, [r7, #6]
 8013436:	e004      	b.n	8013442 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8013438:	88fb      	ldrh	r3, [r7, #6]
 801343a:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 801343e:	80fb      	strh	r3, [r7, #6]
 8013440:	bf00      	nop
			}
			break;
 8013442:	e008      	b.n	8013456 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8013444:	89fb      	ldrh	r3, [r7, #14]
 8013446:	2b00      	cmp	r3, #0
 8013448:	d195      	bne.n	8013376 <ff_wtoupper+0x1a>
 801344a:	8a3b      	ldrh	r3, [r7, #16]
 801344c:	005b      	lsls	r3, r3, #1
 801344e:	697a      	ldr	r2, [r7, #20]
 8013450:	4413      	add	r3, r2
 8013452:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8013454:	e78f      	b.n	8013376 <ff_wtoupper+0x1a>
			break;
 8013456:	bf00      	nop
	}

	return chr;
 8013458:	88fb      	ldrh	r3, [r7, #6]
}
 801345a:	4618      	mov	r0, r3
 801345c:	371c      	adds	r7, #28
 801345e:	46bd      	mov	sp, r7
 8013460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013464:	4770      	bx	lr
 8013466:	bf00      	nop
 8013468:	08025b38 	.word	0x08025b38
 801346c:	08025d2c 	.word	0x08025d2c

08013470 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8013470:	b580      	push	{r7, lr}
 8013472:	b084      	sub	sp, #16
 8013474:	af00      	add	r7, sp, #0
 8013476:	6078      	str	r0, [r7, #4]
 8013478:	460b      	mov	r3, r1
 801347a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 801347c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8013480:	f002 fcf8 	bl	8015e74 <USBD_static_malloc>
 8013484:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8013486:	68fb      	ldr	r3, [r7, #12]
 8013488:	2b00      	cmp	r3, #0
 801348a:	d109      	bne.n	80134a0 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 801348c:	687b      	ldr	r3, [r7, #4]
 801348e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013492:	687b      	ldr	r3, [r7, #4]
 8013494:	32b0      	adds	r2, #176	; 0xb0
 8013496:	2100      	movs	r1, #0
 8013498:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 801349c:	2302      	movs	r3, #2
 801349e:	e0d4      	b.n	801364a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80134a0:	f44f 7207 	mov.w	r2, #540	; 0x21c
 80134a4:	2100      	movs	r1, #0
 80134a6:	68f8      	ldr	r0, [r7, #12]
 80134a8:	f003 fe12 	bl	80170d0 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80134ac:	687b      	ldr	r3, [r7, #4]
 80134ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80134b2:	687b      	ldr	r3, [r7, #4]
 80134b4:	32b0      	adds	r2, #176	; 0xb0
 80134b6:	68f9      	ldr	r1, [r7, #12]
 80134b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80134bc:	687b      	ldr	r3, [r7, #4]
 80134be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80134c2:	687b      	ldr	r3, [r7, #4]
 80134c4:	32b0      	adds	r2, #176	; 0xb0
 80134c6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80134ca:	687b      	ldr	r3, [r7, #4]
 80134cc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80134d0:	687b      	ldr	r3, [r7, #4]
 80134d2:	7c1b      	ldrb	r3, [r3, #16]
 80134d4:	2b00      	cmp	r3, #0
 80134d6:	d138      	bne.n	801354a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80134d8:	4b5e      	ldr	r3, [pc, #376]	; (8013654 <USBD_CDC_Init+0x1e4>)
 80134da:	7819      	ldrb	r1, [r3, #0]
 80134dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80134e0:	2202      	movs	r2, #2
 80134e2:	6878      	ldr	r0, [r7, #4]
 80134e4:	f002 fba3 	bl	8015c2e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80134e8:	4b5a      	ldr	r3, [pc, #360]	; (8013654 <USBD_CDC_Init+0x1e4>)
 80134ea:	781b      	ldrb	r3, [r3, #0]
 80134ec:	f003 020f 	and.w	r2, r3, #15
 80134f0:	6879      	ldr	r1, [r7, #4]
 80134f2:	4613      	mov	r3, r2
 80134f4:	009b      	lsls	r3, r3, #2
 80134f6:	4413      	add	r3, r2
 80134f8:	009b      	lsls	r3, r3, #2
 80134fa:	440b      	add	r3, r1
 80134fc:	3324      	adds	r3, #36	; 0x24
 80134fe:	2201      	movs	r2, #1
 8013500:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8013502:	4b55      	ldr	r3, [pc, #340]	; (8013658 <USBD_CDC_Init+0x1e8>)
 8013504:	7819      	ldrb	r1, [r3, #0]
 8013506:	f44f 7300 	mov.w	r3, #512	; 0x200
 801350a:	2202      	movs	r2, #2
 801350c:	6878      	ldr	r0, [r7, #4]
 801350e:	f002 fb8e 	bl	8015c2e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8013512:	4b51      	ldr	r3, [pc, #324]	; (8013658 <USBD_CDC_Init+0x1e8>)
 8013514:	781b      	ldrb	r3, [r3, #0]
 8013516:	f003 020f 	and.w	r2, r3, #15
 801351a:	6879      	ldr	r1, [r7, #4]
 801351c:	4613      	mov	r3, r2
 801351e:	009b      	lsls	r3, r3, #2
 8013520:	4413      	add	r3, r2
 8013522:	009b      	lsls	r3, r3, #2
 8013524:	440b      	add	r3, r1
 8013526:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 801352a:	2201      	movs	r2, #1
 801352c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 801352e:	4b4b      	ldr	r3, [pc, #300]	; (801365c <USBD_CDC_Init+0x1ec>)
 8013530:	781b      	ldrb	r3, [r3, #0]
 8013532:	f003 020f 	and.w	r2, r3, #15
 8013536:	6879      	ldr	r1, [r7, #4]
 8013538:	4613      	mov	r3, r2
 801353a:	009b      	lsls	r3, r3, #2
 801353c:	4413      	add	r3, r2
 801353e:	009b      	lsls	r3, r3, #2
 8013540:	440b      	add	r3, r1
 8013542:	3326      	adds	r3, #38	; 0x26
 8013544:	2210      	movs	r2, #16
 8013546:	801a      	strh	r2, [r3, #0]
 8013548:	e035      	b.n	80135b6 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 801354a:	4b42      	ldr	r3, [pc, #264]	; (8013654 <USBD_CDC_Init+0x1e4>)
 801354c:	7819      	ldrb	r1, [r3, #0]
 801354e:	2340      	movs	r3, #64	; 0x40
 8013550:	2202      	movs	r2, #2
 8013552:	6878      	ldr	r0, [r7, #4]
 8013554:	f002 fb6b 	bl	8015c2e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8013558:	4b3e      	ldr	r3, [pc, #248]	; (8013654 <USBD_CDC_Init+0x1e4>)
 801355a:	781b      	ldrb	r3, [r3, #0]
 801355c:	f003 020f 	and.w	r2, r3, #15
 8013560:	6879      	ldr	r1, [r7, #4]
 8013562:	4613      	mov	r3, r2
 8013564:	009b      	lsls	r3, r3, #2
 8013566:	4413      	add	r3, r2
 8013568:	009b      	lsls	r3, r3, #2
 801356a:	440b      	add	r3, r1
 801356c:	3324      	adds	r3, #36	; 0x24
 801356e:	2201      	movs	r2, #1
 8013570:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8013572:	4b39      	ldr	r3, [pc, #228]	; (8013658 <USBD_CDC_Init+0x1e8>)
 8013574:	7819      	ldrb	r1, [r3, #0]
 8013576:	2340      	movs	r3, #64	; 0x40
 8013578:	2202      	movs	r2, #2
 801357a:	6878      	ldr	r0, [r7, #4]
 801357c:	f002 fb57 	bl	8015c2e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8013580:	4b35      	ldr	r3, [pc, #212]	; (8013658 <USBD_CDC_Init+0x1e8>)
 8013582:	781b      	ldrb	r3, [r3, #0]
 8013584:	f003 020f 	and.w	r2, r3, #15
 8013588:	6879      	ldr	r1, [r7, #4]
 801358a:	4613      	mov	r3, r2
 801358c:	009b      	lsls	r3, r3, #2
 801358e:	4413      	add	r3, r2
 8013590:	009b      	lsls	r3, r3, #2
 8013592:	440b      	add	r3, r1
 8013594:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8013598:	2201      	movs	r2, #1
 801359a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 801359c:	4b2f      	ldr	r3, [pc, #188]	; (801365c <USBD_CDC_Init+0x1ec>)
 801359e:	781b      	ldrb	r3, [r3, #0]
 80135a0:	f003 020f 	and.w	r2, r3, #15
 80135a4:	6879      	ldr	r1, [r7, #4]
 80135a6:	4613      	mov	r3, r2
 80135a8:	009b      	lsls	r3, r3, #2
 80135aa:	4413      	add	r3, r2
 80135ac:	009b      	lsls	r3, r3, #2
 80135ae:	440b      	add	r3, r1
 80135b0:	3326      	adds	r3, #38	; 0x26
 80135b2:	2210      	movs	r2, #16
 80135b4:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80135b6:	4b29      	ldr	r3, [pc, #164]	; (801365c <USBD_CDC_Init+0x1ec>)
 80135b8:	7819      	ldrb	r1, [r3, #0]
 80135ba:	2308      	movs	r3, #8
 80135bc:	2203      	movs	r2, #3
 80135be:	6878      	ldr	r0, [r7, #4]
 80135c0:	f002 fb35 	bl	8015c2e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80135c4:	4b25      	ldr	r3, [pc, #148]	; (801365c <USBD_CDC_Init+0x1ec>)
 80135c6:	781b      	ldrb	r3, [r3, #0]
 80135c8:	f003 020f 	and.w	r2, r3, #15
 80135cc:	6879      	ldr	r1, [r7, #4]
 80135ce:	4613      	mov	r3, r2
 80135d0:	009b      	lsls	r3, r3, #2
 80135d2:	4413      	add	r3, r2
 80135d4:	009b      	lsls	r3, r3, #2
 80135d6:	440b      	add	r3, r1
 80135d8:	3324      	adds	r3, #36	; 0x24
 80135da:	2201      	movs	r2, #1
 80135dc:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80135de:	68fb      	ldr	r3, [r7, #12]
 80135e0:	2200      	movs	r2, #0
 80135e2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80135e6:	687b      	ldr	r3, [r7, #4]
 80135e8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80135ec:	687a      	ldr	r2, [r7, #4]
 80135ee:	33b0      	adds	r3, #176	; 0xb0
 80135f0:	009b      	lsls	r3, r3, #2
 80135f2:	4413      	add	r3, r2
 80135f4:	685b      	ldr	r3, [r3, #4]
 80135f6:	681b      	ldr	r3, [r3, #0]
 80135f8:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80135fa:	68fb      	ldr	r3, [r7, #12]
 80135fc:	2200      	movs	r2, #0
 80135fe:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8013602:	68fb      	ldr	r3, [r7, #12]
 8013604:	2200      	movs	r2, #0
 8013606:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 801360a:	68fb      	ldr	r3, [r7, #12]
 801360c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8013610:	2b00      	cmp	r3, #0
 8013612:	d101      	bne.n	8013618 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8013614:	2302      	movs	r3, #2
 8013616:	e018      	b.n	801364a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8013618:	687b      	ldr	r3, [r7, #4]
 801361a:	7c1b      	ldrb	r3, [r3, #16]
 801361c:	2b00      	cmp	r3, #0
 801361e:	d10a      	bne.n	8013636 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8013620:	4b0d      	ldr	r3, [pc, #52]	; (8013658 <USBD_CDC_Init+0x1e8>)
 8013622:	7819      	ldrb	r1, [r3, #0]
 8013624:	68fb      	ldr	r3, [r7, #12]
 8013626:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 801362a:	f44f 7300 	mov.w	r3, #512	; 0x200
 801362e:	6878      	ldr	r0, [r7, #4]
 8013630:	f002 fbec 	bl	8015e0c <USBD_LL_PrepareReceive>
 8013634:	e008      	b.n	8013648 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8013636:	4b08      	ldr	r3, [pc, #32]	; (8013658 <USBD_CDC_Init+0x1e8>)
 8013638:	7819      	ldrb	r1, [r3, #0]
 801363a:	68fb      	ldr	r3, [r7, #12]
 801363c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8013640:	2340      	movs	r3, #64	; 0x40
 8013642:	6878      	ldr	r0, [r7, #4]
 8013644:	f002 fbe2 	bl	8015e0c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8013648:	2300      	movs	r3, #0
}
 801364a:	4618      	mov	r0, r3
 801364c:	3710      	adds	r7, #16
 801364e:	46bd      	mov	sp, r7
 8013650:	bd80      	pop	{r7, pc}
 8013652:	bf00      	nop
 8013654:	2000012f 	.word	0x2000012f
 8013658:	20000130 	.word	0x20000130
 801365c:	20000131 	.word	0x20000131

08013660 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8013660:	b580      	push	{r7, lr}
 8013662:	b082      	sub	sp, #8
 8013664:	af00      	add	r7, sp, #0
 8013666:	6078      	str	r0, [r7, #4]
 8013668:	460b      	mov	r3, r1
 801366a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 801366c:	4b3a      	ldr	r3, [pc, #232]	; (8013758 <USBD_CDC_DeInit+0xf8>)
 801366e:	781b      	ldrb	r3, [r3, #0]
 8013670:	4619      	mov	r1, r3
 8013672:	6878      	ldr	r0, [r7, #4]
 8013674:	f002 fb01 	bl	8015c7a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8013678:	4b37      	ldr	r3, [pc, #220]	; (8013758 <USBD_CDC_DeInit+0xf8>)
 801367a:	781b      	ldrb	r3, [r3, #0]
 801367c:	f003 020f 	and.w	r2, r3, #15
 8013680:	6879      	ldr	r1, [r7, #4]
 8013682:	4613      	mov	r3, r2
 8013684:	009b      	lsls	r3, r3, #2
 8013686:	4413      	add	r3, r2
 8013688:	009b      	lsls	r3, r3, #2
 801368a:	440b      	add	r3, r1
 801368c:	3324      	adds	r3, #36	; 0x24
 801368e:	2200      	movs	r2, #0
 8013690:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8013692:	4b32      	ldr	r3, [pc, #200]	; (801375c <USBD_CDC_DeInit+0xfc>)
 8013694:	781b      	ldrb	r3, [r3, #0]
 8013696:	4619      	mov	r1, r3
 8013698:	6878      	ldr	r0, [r7, #4]
 801369a:	f002 faee 	bl	8015c7a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 801369e:	4b2f      	ldr	r3, [pc, #188]	; (801375c <USBD_CDC_DeInit+0xfc>)
 80136a0:	781b      	ldrb	r3, [r3, #0]
 80136a2:	f003 020f 	and.w	r2, r3, #15
 80136a6:	6879      	ldr	r1, [r7, #4]
 80136a8:	4613      	mov	r3, r2
 80136aa:	009b      	lsls	r3, r3, #2
 80136ac:	4413      	add	r3, r2
 80136ae:	009b      	lsls	r3, r3, #2
 80136b0:	440b      	add	r3, r1
 80136b2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80136b6:	2200      	movs	r2, #0
 80136b8:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80136ba:	4b29      	ldr	r3, [pc, #164]	; (8013760 <USBD_CDC_DeInit+0x100>)
 80136bc:	781b      	ldrb	r3, [r3, #0]
 80136be:	4619      	mov	r1, r3
 80136c0:	6878      	ldr	r0, [r7, #4]
 80136c2:	f002 fada 	bl	8015c7a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80136c6:	4b26      	ldr	r3, [pc, #152]	; (8013760 <USBD_CDC_DeInit+0x100>)
 80136c8:	781b      	ldrb	r3, [r3, #0]
 80136ca:	f003 020f 	and.w	r2, r3, #15
 80136ce:	6879      	ldr	r1, [r7, #4]
 80136d0:	4613      	mov	r3, r2
 80136d2:	009b      	lsls	r3, r3, #2
 80136d4:	4413      	add	r3, r2
 80136d6:	009b      	lsls	r3, r3, #2
 80136d8:	440b      	add	r3, r1
 80136da:	3324      	adds	r3, #36	; 0x24
 80136dc:	2200      	movs	r2, #0
 80136de:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80136e0:	4b1f      	ldr	r3, [pc, #124]	; (8013760 <USBD_CDC_DeInit+0x100>)
 80136e2:	781b      	ldrb	r3, [r3, #0]
 80136e4:	f003 020f 	and.w	r2, r3, #15
 80136e8:	6879      	ldr	r1, [r7, #4]
 80136ea:	4613      	mov	r3, r2
 80136ec:	009b      	lsls	r3, r3, #2
 80136ee:	4413      	add	r3, r2
 80136f0:	009b      	lsls	r3, r3, #2
 80136f2:	440b      	add	r3, r1
 80136f4:	3326      	adds	r3, #38	; 0x26
 80136f6:	2200      	movs	r2, #0
 80136f8:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80136fa:	687b      	ldr	r3, [r7, #4]
 80136fc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013700:	687b      	ldr	r3, [r7, #4]
 8013702:	32b0      	adds	r2, #176	; 0xb0
 8013704:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013708:	2b00      	cmp	r3, #0
 801370a:	d01f      	beq.n	801374c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 801370c:	687b      	ldr	r3, [r7, #4]
 801370e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8013712:	687a      	ldr	r2, [r7, #4]
 8013714:	33b0      	adds	r3, #176	; 0xb0
 8013716:	009b      	lsls	r3, r3, #2
 8013718:	4413      	add	r3, r2
 801371a:	685b      	ldr	r3, [r3, #4]
 801371c:	685b      	ldr	r3, [r3, #4]
 801371e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8013720:	687b      	ldr	r3, [r7, #4]
 8013722:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013726:	687b      	ldr	r3, [r7, #4]
 8013728:	32b0      	adds	r2, #176	; 0xb0
 801372a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801372e:	4618      	mov	r0, r3
 8013730:	f002 fbae 	bl	8015e90 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8013734:	687b      	ldr	r3, [r7, #4]
 8013736:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801373a:	687b      	ldr	r3, [r7, #4]
 801373c:	32b0      	adds	r2, #176	; 0xb0
 801373e:	2100      	movs	r1, #0
 8013740:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8013744:	687b      	ldr	r3, [r7, #4]
 8013746:	2200      	movs	r2, #0
 8013748:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 801374c:	2300      	movs	r3, #0
}
 801374e:	4618      	mov	r0, r3
 8013750:	3708      	adds	r7, #8
 8013752:	46bd      	mov	sp, r7
 8013754:	bd80      	pop	{r7, pc}
 8013756:	bf00      	nop
 8013758:	2000012f 	.word	0x2000012f
 801375c:	20000130 	.word	0x20000130
 8013760:	20000131 	.word	0x20000131

08013764 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8013764:	b580      	push	{r7, lr}
 8013766:	b086      	sub	sp, #24
 8013768:	af00      	add	r7, sp, #0
 801376a:	6078      	str	r0, [r7, #4]
 801376c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801376e:	687b      	ldr	r3, [r7, #4]
 8013770:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013774:	687b      	ldr	r3, [r7, #4]
 8013776:	32b0      	adds	r2, #176	; 0xb0
 8013778:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801377c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 801377e:	2300      	movs	r3, #0
 8013780:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8013782:	2300      	movs	r3, #0
 8013784:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8013786:	2300      	movs	r3, #0
 8013788:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 801378a:	693b      	ldr	r3, [r7, #16]
 801378c:	2b00      	cmp	r3, #0
 801378e:	d101      	bne.n	8013794 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8013790:	2303      	movs	r3, #3
 8013792:	e0bf      	b.n	8013914 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8013794:	683b      	ldr	r3, [r7, #0]
 8013796:	781b      	ldrb	r3, [r3, #0]
 8013798:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801379c:	2b00      	cmp	r3, #0
 801379e:	d050      	beq.n	8013842 <USBD_CDC_Setup+0xde>
 80137a0:	2b20      	cmp	r3, #32
 80137a2:	f040 80af 	bne.w	8013904 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80137a6:	683b      	ldr	r3, [r7, #0]
 80137a8:	88db      	ldrh	r3, [r3, #6]
 80137aa:	2b00      	cmp	r3, #0
 80137ac:	d03a      	beq.n	8013824 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80137ae:	683b      	ldr	r3, [r7, #0]
 80137b0:	781b      	ldrb	r3, [r3, #0]
 80137b2:	b25b      	sxtb	r3, r3
 80137b4:	2b00      	cmp	r3, #0
 80137b6:	da1b      	bge.n	80137f0 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80137b8:	687b      	ldr	r3, [r7, #4]
 80137ba:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80137be:	687a      	ldr	r2, [r7, #4]
 80137c0:	33b0      	adds	r3, #176	; 0xb0
 80137c2:	009b      	lsls	r3, r3, #2
 80137c4:	4413      	add	r3, r2
 80137c6:	685b      	ldr	r3, [r3, #4]
 80137c8:	689b      	ldr	r3, [r3, #8]
 80137ca:	683a      	ldr	r2, [r7, #0]
 80137cc:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80137ce:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80137d0:	683a      	ldr	r2, [r7, #0]
 80137d2:	88d2      	ldrh	r2, [r2, #6]
 80137d4:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80137d6:	683b      	ldr	r3, [r7, #0]
 80137d8:	88db      	ldrh	r3, [r3, #6]
 80137da:	2b07      	cmp	r3, #7
 80137dc:	bf28      	it	cs
 80137de:	2307      	movcs	r3, #7
 80137e0:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80137e2:	693b      	ldr	r3, [r7, #16]
 80137e4:	89fa      	ldrh	r2, [r7, #14]
 80137e6:	4619      	mov	r1, r3
 80137e8:	6878      	ldr	r0, [r7, #4]
 80137ea:	f001 fd89 	bl	8015300 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80137ee:	e090      	b.n	8013912 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80137f0:	683b      	ldr	r3, [r7, #0]
 80137f2:	785a      	ldrb	r2, [r3, #1]
 80137f4:	693b      	ldr	r3, [r7, #16]
 80137f6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80137fa:	683b      	ldr	r3, [r7, #0]
 80137fc:	88db      	ldrh	r3, [r3, #6]
 80137fe:	2b3f      	cmp	r3, #63	; 0x3f
 8013800:	d803      	bhi.n	801380a <USBD_CDC_Setup+0xa6>
 8013802:	683b      	ldr	r3, [r7, #0]
 8013804:	88db      	ldrh	r3, [r3, #6]
 8013806:	b2da      	uxtb	r2, r3
 8013808:	e000      	b.n	801380c <USBD_CDC_Setup+0xa8>
 801380a:	2240      	movs	r2, #64	; 0x40
 801380c:	693b      	ldr	r3, [r7, #16]
 801380e:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8013812:	6939      	ldr	r1, [r7, #16]
 8013814:	693b      	ldr	r3, [r7, #16]
 8013816:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 801381a:	461a      	mov	r2, r3
 801381c:	6878      	ldr	r0, [r7, #4]
 801381e:	f001 fd9b 	bl	8015358 <USBD_CtlPrepareRx>
      break;
 8013822:	e076      	b.n	8013912 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8013824:	687b      	ldr	r3, [r7, #4]
 8013826:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801382a:	687a      	ldr	r2, [r7, #4]
 801382c:	33b0      	adds	r3, #176	; 0xb0
 801382e:	009b      	lsls	r3, r3, #2
 8013830:	4413      	add	r3, r2
 8013832:	685b      	ldr	r3, [r3, #4]
 8013834:	689b      	ldr	r3, [r3, #8]
 8013836:	683a      	ldr	r2, [r7, #0]
 8013838:	7850      	ldrb	r0, [r2, #1]
 801383a:	2200      	movs	r2, #0
 801383c:	6839      	ldr	r1, [r7, #0]
 801383e:	4798      	blx	r3
      break;
 8013840:	e067      	b.n	8013912 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8013842:	683b      	ldr	r3, [r7, #0]
 8013844:	785b      	ldrb	r3, [r3, #1]
 8013846:	2b0b      	cmp	r3, #11
 8013848:	d851      	bhi.n	80138ee <USBD_CDC_Setup+0x18a>
 801384a:	a201      	add	r2, pc, #4	; (adr r2, 8013850 <USBD_CDC_Setup+0xec>)
 801384c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013850:	08013881 	.word	0x08013881
 8013854:	080138fd 	.word	0x080138fd
 8013858:	080138ef 	.word	0x080138ef
 801385c:	080138ef 	.word	0x080138ef
 8013860:	080138ef 	.word	0x080138ef
 8013864:	080138ef 	.word	0x080138ef
 8013868:	080138ef 	.word	0x080138ef
 801386c:	080138ef 	.word	0x080138ef
 8013870:	080138ef 	.word	0x080138ef
 8013874:	080138ef 	.word	0x080138ef
 8013878:	080138ab 	.word	0x080138ab
 801387c:	080138d5 	.word	0x080138d5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013880:	687b      	ldr	r3, [r7, #4]
 8013882:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013886:	b2db      	uxtb	r3, r3
 8013888:	2b03      	cmp	r3, #3
 801388a:	d107      	bne.n	801389c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 801388c:	f107 030a 	add.w	r3, r7, #10
 8013890:	2202      	movs	r2, #2
 8013892:	4619      	mov	r1, r3
 8013894:	6878      	ldr	r0, [r7, #4]
 8013896:	f001 fd33 	bl	8015300 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801389a:	e032      	b.n	8013902 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 801389c:	6839      	ldr	r1, [r7, #0]
 801389e:	6878      	ldr	r0, [r7, #4]
 80138a0:	f001 fcbd 	bl	801521e <USBD_CtlError>
            ret = USBD_FAIL;
 80138a4:	2303      	movs	r3, #3
 80138a6:	75fb      	strb	r3, [r7, #23]
          break;
 80138a8:	e02b      	b.n	8013902 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80138aa:	687b      	ldr	r3, [r7, #4]
 80138ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80138b0:	b2db      	uxtb	r3, r3
 80138b2:	2b03      	cmp	r3, #3
 80138b4:	d107      	bne.n	80138c6 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80138b6:	f107 030d 	add.w	r3, r7, #13
 80138ba:	2201      	movs	r2, #1
 80138bc:	4619      	mov	r1, r3
 80138be:	6878      	ldr	r0, [r7, #4]
 80138c0:	f001 fd1e 	bl	8015300 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80138c4:	e01d      	b.n	8013902 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80138c6:	6839      	ldr	r1, [r7, #0]
 80138c8:	6878      	ldr	r0, [r7, #4]
 80138ca:	f001 fca8 	bl	801521e <USBD_CtlError>
            ret = USBD_FAIL;
 80138ce:	2303      	movs	r3, #3
 80138d0:	75fb      	strb	r3, [r7, #23]
          break;
 80138d2:	e016      	b.n	8013902 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80138d4:	687b      	ldr	r3, [r7, #4]
 80138d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80138da:	b2db      	uxtb	r3, r3
 80138dc:	2b03      	cmp	r3, #3
 80138de:	d00f      	beq.n	8013900 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80138e0:	6839      	ldr	r1, [r7, #0]
 80138e2:	6878      	ldr	r0, [r7, #4]
 80138e4:	f001 fc9b 	bl	801521e <USBD_CtlError>
            ret = USBD_FAIL;
 80138e8:	2303      	movs	r3, #3
 80138ea:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80138ec:	e008      	b.n	8013900 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80138ee:	6839      	ldr	r1, [r7, #0]
 80138f0:	6878      	ldr	r0, [r7, #4]
 80138f2:	f001 fc94 	bl	801521e <USBD_CtlError>
          ret = USBD_FAIL;
 80138f6:	2303      	movs	r3, #3
 80138f8:	75fb      	strb	r3, [r7, #23]
          break;
 80138fa:	e002      	b.n	8013902 <USBD_CDC_Setup+0x19e>
          break;
 80138fc:	bf00      	nop
 80138fe:	e008      	b.n	8013912 <USBD_CDC_Setup+0x1ae>
          break;
 8013900:	bf00      	nop
      }
      break;
 8013902:	e006      	b.n	8013912 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8013904:	6839      	ldr	r1, [r7, #0]
 8013906:	6878      	ldr	r0, [r7, #4]
 8013908:	f001 fc89 	bl	801521e <USBD_CtlError>
      ret = USBD_FAIL;
 801390c:	2303      	movs	r3, #3
 801390e:	75fb      	strb	r3, [r7, #23]
      break;
 8013910:	bf00      	nop
  }

  return (uint8_t)ret;
 8013912:	7dfb      	ldrb	r3, [r7, #23]
}
 8013914:	4618      	mov	r0, r3
 8013916:	3718      	adds	r7, #24
 8013918:	46bd      	mov	sp, r7
 801391a:	bd80      	pop	{r7, pc}

0801391c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801391c:	b580      	push	{r7, lr}
 801391e:	b084      	sub	sp, #16
 8013920:	af00      	add	r7, sp, #0
 8013922:	6078      	str	r0, [r7, #4]
 8013924:	460b      	mov	r3, r1
 8013926:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8013928:	687b      	ldr	r3, [r7, #4]
 801392a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801392e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8013930:	687b      	ldr	r3, [r7, #4]
 8013932:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013936:	687b      	ldr	r3, [r7, #4]
 8013938:	32b0      	adds	r2, #176	; 0xb0
 801393a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801393e:	2b00      	cmp	r3, #0
 8013940:	d101      	bne.n	8013946 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8013942:	2303      	movs	r3, #3
 8013944:	e065      	b.n	8013a12 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8013946:	687b      	ldr	r3, [r7, #4]
 8013948:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801394c:	687b      	ldr	r3, [r7, #4]
 801394e:	32b0      	adds	r2, #176	; 0xb0
 8013950:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013954:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8013956:	78fb      	ldrb	r3, [r7, #3]
 8013958:	f003 020f 	and.w	r2, r3, #15
 801395c:	6879      	ldr	r1, [r7, #4]
 801395e:	4613      	mov	r3, r2
 8013960:	009b      	lsls	r3, r3, #2
 8013962:	4413      	add	r3, r2
 8013964:	009b      	lsls	r3, r3, #2
 8013966:	440b      	add	r3, r1
 8013968:	3318      	adds	r3, #24
 801396a:	681b      	ldr	r3, [r3, #0]
 801396c:	2b00      	cmp	r3, #0
 801396e:	d02f      	beq.n	80139d0 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8013970:	78fb      	ldrb	r3, [r7, #3]
 8013972:	f003 020f 	and.w	r2, r3, #15
 8013976:	6879      	ldr	r1, [r7, #4]
 8013978:	4613      	mov	r3, r2
 801397a:	009b      	lsls	r3, r3, #2
 801397c:	4413      	add	r3, r2
 801397e:	009b      	lsls	r3, r3, #2
 8013980:	440b      	add	r3, r1
 8013982:	3318      	adds	r3, #24
 8013984:	681a      	ldr	r2, [r3, #0]
 8013986:	78fb      	ldrb	r3, [r7, #3]
 8013988:	f003 010f 	and.w	r1, r3, #15
 801398c:	68f8      	ldr	r0, [r7, #12]
 801398e:	460b      	mov	r3, r1
 8013990:	00db      	lsls	r3, r3, #3
 8013992:	440b      	add	r3, r1
 8013994:	009b      	lsls	r3, r3, #2
 8013996:	4403      	add	r3, r0
 8013998:	331c      	adds	r3, #28
 801399a:	681b      	ldr	r3, [r3, #0]
 801399c:	fbb2 f1f3 	udiv	r1, r2, r3
 80139a0:	fb01 f303 	mul.w	r3, r1, r3
 80139a4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80139a6:	2b00      	cmp	r3, #0
 80139a8:	d112      	bne.n	80139d0 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80139aa:	78fb      	ldrb	r3, [r7, #3]
 80139ac:	f003 020f 	and.w	r2, r3, #15
 80139b0:	6879      	ldr	r1, [r7, #4]
 80139b2:	4613      	mov	r3, r2
 80139b4:	009b      	lsls	r3, r3, #2
 80139b6:	4413      	add	r3, r2
 80139b8:	009b      	lsls	r3, r3, #2
 80139ba:	440b      	add	r3, r1
 80139bc:	3318      	adds	r3, #24
 80139be:	2200      	movs	r2, #0
 80139c0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80139c2:	78f9      	ldrb	r1, [r7, #3]
 80139c4:	2300      	movs	r3, #0
 80139c6:	2200      	movs	r2, #0
 80139c8:	6878      	ldr	r0, [r7, #4]
 80139ca:	f002 f9fe 	bl	8015dca <USBD_LL_Transmit>
 80139ce:	e01f      	b.n	8013a10 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80139d0:	68bb      	ldr	r3, [r7, #8]
 80139d2:	2200      	movs	r2, #0
 80139d4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80139d8:	687b      	ldr	r3, [r7, #4]
 80139da:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80139de:	687a      	ldr	r2, [r7, #4]
 80139e0:	33b0      	adds	r3, #176	; 0xb0
 80139e2:	009b      	lsls	r3, r3, #2
 80139e4:	4413      	add	r3, r2
 80139e6:	685b      	ldr	r3, [r3, #4]
 80139e8:	691b      	ldr	r3, [r3, #16]
 80139ea:	2b00      	cmp	r3, #0
 80139ec:	d010      	beq.n	8013a10 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80139ee:	687b      	ldr	r3, [r7, #4]
 80139f0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80139f4:	687a      	ldr	r2, [r7, #4]
 80139f6:	33b0      	adds	r3, #176	; 0xb0
 80139f8:	009b      	lsls	r3, r3, #2
 80139fa:	4413      	add	r3, r2
 80139fc:	685b      	ldr	r3, [r3, #4]
 80139fe:	691b      	ldr	r3, [r3, #16]
 8013a00:	68ba      	ldr	r2, [r7, #8]
 8013a02:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8013a06:	68ba      	ldr	r2, [r7, #8]
 8013a08:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8013a0c:	78fa      	ldrb	r2, [r7, #3]
 8013a0e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8013a10:	2300      	movs	r3, #0
}
 8013a12:	4618      	mov	r0, r3
 8013a14:	3710      	adds	r7, #16
 8013a16:	46bd      	mov	sp, r7
 8013a18:	bd80      	pop	{r7, pc}

08013a1a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8013a1a:	b580      	push	{r7, lr}
 8013a1c:	b084      	sub	sp, #16
 8013a1e:	af00      	add	r7, sp, #0
 8013a20:	6078      	str	r0, [r7, #4]
 8013a22:	460b      	mov	r3, r1
 8013a24:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8013a26:	687b      	ldr	r3, [r7, #4]
 8013a28:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013a2c:	687b      	ldr	r3, [r7, #4]
 8013a2e:	32b0      	adds	r2, #176	; 0xb0
 8013a30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013a34:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8013a36:	687b      	ldr	r3, [r7, #4]
 8013a38:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013a3c:	687b      	ldr	r3, [r7, #4]
 8013a3e:	32b0      	adds	r2, #176	; 0xb0
 8013a40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013a44:	2b00      	cmp	r3, #0
 8013a46:	d101      	bne.n	8013a4c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8013a48:	2303      	movs	r3, #3
 8013a4a:	e01a      	b.n	8013a82 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8013a4c:	78fb      	ldrb	r3, [r7, #3]
 8013a4e:	4619      	mov	r1, r3
 8013a50:	6878      	ldr	r0, [r7, #4]
 8013a52:	f002 f9fc 	bl	8015e4e <USBD_LL_GetRxDataSize>
 8013a56:	4602      	mov	r2, r0
 8013a58:	68fb      	ldr	r3, [r7, #12]
 8013a5a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8013a5e:	687b      	ldr	r3, [r7, #4]
 8013a60:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8013a64:	687a      	ldr	r2, [r7, #4]
 8013a66:	33b0      	adds	r3, #176	; 0xb0
 8013a68:	009b      	lsls	r3, r3, #2
 8013a6a:	4413      	add	r3, r2
 8013a6c:	685b      	ldr	r3, [r3, #4]
 8013a6e:	68db      	ldr	r3, [r3, #12]
 8013a70:	68fa      	ldr	r2, [r7, #12]
 8013a72:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8013a76:	68fa      	ldr	r2, [r7, #12]
 8013a78:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8013a7c:	4611      	mov	r1, r2
 8013a7e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8013a80:	2300      	movs	r3, #0
}
 8013a82:	4618      	mov	r0, r3
 8013a84:	3710      	adds	r7, #16
 8013a86:	46bd      	mov	sp, r7
 8013a88:	bd80      	pop	{r7, pc}

08013a8a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8013a8a:	b580      	push	{r7, lr}
 8013a8c:	b084      	sub	sp, #16
 8013a8e:	af00      	add	r7, sp, #0
 8013a90:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8013a92:	687b      	ldr	r3, [r7, #4]
 8013a94:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013a98:	687b      	ldr	r3, [r7, #4]
 8013a9a:	32b0      	adds	r2, #176	; 0xb0
 8013a9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013aa0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8013aa2:	68fb      	ldr	r3, [r7, #12]
 8013aa4:	2b00      	cmp	r3, #0
 8013aa6:	d101      	bne.n	8013aac <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8013aa8:	2303      	movs	r3, #3
 8013aaa:	e025      	b.n	8013af8 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8013aac:	687b      	ldr	r3, [r7, #4]
 8013aae:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8013ab2:	687a      	ldr	r2, [r7, #4]
 8013ab4:	33b0      	adds	r3, #176	; 0xb0
 8013ab6:	009b      	lsls	r3, r3, #2
 8013ab8:	4413      	add	r3, r2
 8013aba:	685b      	ldr	r3, [r3, #4]
 8013abc:	2b00      	cmp	r3, #0
 8013abe:	d01a      	beq.n	8013af6 <USBD_CDC_EP0_RxReady+0x6c>
 8013ac0:	68fb      	ldr	r3, [r7, #12]
 8013ac2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8013ac6:	2bff      	cmp	r3, #255	; 0xff
 8013ac8:	d015      	beq.n	8013af6 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8013aca:	687b      	ldr	r3, [r7, #4]
 8013acc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8013ad0:	687a      	ldr	r2, [r7, #4]
 8013ad2:	33b0      	adds	r3, #176	; 0xb0
 8013ad4:	009b      	lsls	r3, r3, #2
 8013ad6:	4413      	add	r3, r2
 8013ad8:	685b      	ldr	r3, [r3, #4]
 8013ada:	689b      	ldr	r3, [r3, #8]
 8013adc:	68fa      	ldr	r2, [r7, #12]
 8013ade:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8013ae2:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8013ae4:	68fa      	ldr	r2, [r7, #12]
 8013ae6:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8013aea:	b292      	uxth	r2, r2
 8013aec:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8013aee:	68fb      	ldr	r3, [r7, #12]
 8013af0:	22ff      	movs	r2, #255	; 0xff
 8013af2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8013af6:	2300      	movs	r3, #0
}
 8013af8:	4618      	mov	r0, r3
 8013afa:	3710      	adds	r7, #16
 8013afc:	46bd      	mov	sp, r7
 8013afe:	bd80      	pop	{r7, pc}

08013b00 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8013b00:	b580      	push	{r7, lr}
 8013b02:	b086      	sub	sp, #24
 8013b04:	af00      	add	r7, sp, #0
 8013b06:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8013b08:	2182      	movs	r1, #130	; 0x82
 8013b0a:	4818      	ldr	r0, [pc, #96]	; (8013b6c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8013b0c:	f000 fd4f 	bl	80145ae <USBD_GetEpDesc>
 8013b10:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8013b12:	2101      	movs	r1, #1
 8013b14:	4815      	ldr	r0, [pc, #84]	; (8013b6c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8013b16:	f000 fd4a 	bl	80145ae <USBD_GetEpDesc>
 8013b1a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8013b1c:	2181      	movs	r1, #129	; 0x81
 8013b1e:	4813      	ldr	r0, [pc, #76]	; (8013b6c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8013b20:	f000 fd45 	bl	80145ae <USBD_GetEpDesc>
 8013b24:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8013b26:	697b      	ldr	r3, [r7, #20]
 8013b28:	2b00      	cmp	r3, #0
 8013b2a:	d002      	beq.n	8013b32 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8013b2c:	697b      	ldr	r3, [r7, #20]
 8013b2e:	2210      	movs	r2, #16
 8013b30:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8013b32:	693b      	ldr	r3, [r7, #16]
 8013b34:	2b00      	cmp	r3, #0
 8013b36:	d006      	beq.n	8013b46 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8013b38:	693b      	ldr	r3, [r7, #16]
 8013b3a:	2200      	movs	r2, #0
 8013b3c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8013b40:	711a      	strb	r2, [r3, #4]
 8013b42:	2200      	movs	r2, #0
 8013b44:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8013b46:	68fb      	ldr	r3, [r7, #12]
 8013b48:	2b00      	cmp	r3, #0
 8013b4a:	d006      	beq.n	8013b5a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8013b4c:	68fb      	ldr	r3, [r7, #12]
 8013b4e:	2200      	movs	r2, #0
 8013b50:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8013b54:	711a      	strb	r2, [r3, #4]
 8013b56:	2200      	movs	r2, #0
 8013b58:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8013b5a:	687b      	ldr	r3, [r7, #4]
 8013b5c:	2243      	movs	r2, #67	; 0x43
 8013b5e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8013b60:	4b02      	ldr	r3, [pc, #8]	; (8013b6c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8013b62:	4618      	mov	r0, r3
 8013b64:	3718      	adds	r7, #24
 8013b66:	46bd      	mov	sp, r7
 8013b68:	bd80      	pop	{r7, pc}
 8013b6a:	bf00      	nop
 8013b6c:	200000ec 	.word	0x200000ec

08013b70 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8013b70:	b580      	push	{r7, lr}
 8013b72:	b086      	sub	sp, #24
 8013b74:	af00      	add	r7, sp, #0
 8013b76:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8013b78:	2182      	movs	r1, #130	; 0x82
 8013b7a:	4818      	ldr	r0, [pc, #96]	; (8013bdc <USBD_CDC_GetHSCfgDesc+0x6c>)
 8013b7c:	f000 fd17 	bl	80145ae <USBD_GetEpDesc>
 8013b80:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8013b82:	2101      	movs	r1, #1
 8013b84:	4815      	ldr	r0, [pc, #84]	; (8013bdc <USBD_CDC_GetHSCfgDesc+0x6c>)
 8013b86:	f000 fd12 	bl	80145ae <USBD_GetEpDesc>
 8013b8a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8013b8c:	2181      	movs	r1, #129	; 0x81
 8013b8e:	4813      	ldr	r0, [pc, #76]	; (8013bdc <USBD_CDC_GetHSCfgDesc+0x6c>)
 8013b90:	f000 fd0d 	bl	80145ae <USBD_GetEpDesc>
 8013b94:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8013b96:	697b      	ldr	r3, [r7, #20]
 8013b98:	2b00      	cmp	r3, #0
 8013b9a:	d002      	beq.n	8013ba2 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8013b9c:	697b      	ldr	r3, [r7, #20]
 8013b9e:	2210      	movs	r2, #16
 8013ba0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8013ba2:	693b      	ldr	r3, [r7, #16]
 8013ba4:	2b00      	cmp	r3, #0
 8013ba6:	d006      	beq.n	8013bb6 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8013ba8:	693b      	ldr	r3, [r7, #16]
 8013baa:	2200      	movs	r2, #0
 8013bac:	711a      	strb	r2, [r3, #4]
 8013bae:	2200      	movs	r2, #0
 8013bb0:	f042 0202 	orr.w	r2, r2, #2
 8013bb4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8013bb6:	68fb      	ldr	r3, [r7, #12]
 8013bb8:	2b00      	cmp	r3, #0
 8013bba:	d006      	beq.n	8013bca <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8013bbc:	68fb      	ldr	r3, [r7, #12]
 8013bbe:	2200      	movs	r2, #0
 8013bc0:	711a      	strb	r2, [r3, #4]
 8013bc2:	2200      	movs	r2, #0
 8013bc4:	f042 0202 	orr.w	r2, r2, #2
 8013bc8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8013bca:	687b      	ldr	r3, [r7, #4]
 8013bcc:	2243      	movs	r2, #67	; 0x43
 8013bce:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8013bd0:	4b02      	ldr	r3, [pc, #8]	; (8013bdc <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8013bd2:	4618      	mov	r0, r3
 8013bd4:	3718      	adds	r7, #24
 8013bd6:	46bd      	mov	sp, r7
 8013bd8:	bd80      	pop	{r7, pc}
 8013bda:	bf00      	nop
 8013bdc:	200000ec 	.word	0x200000ec

08013be0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8013be0:	b580      	push	{r7, lr}
 8013be2:	b086      	sub	sp, #24
 8013be4:	af00      	add	r7, sp, #0
 8013be6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8013be8:	2182      	movs	r1, #130	; 0x82
 8013bea:	4818      	ldr	r0, [pc, #96]	; (8013c4c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8013bec:	f000 fcdf 	bl	80145ae <USBD_GetEpDesc>
 8013bf0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8013bf2:	2101      	movs	r1, #1
 8013bf4:	4815      	ldr	r0, [pc, #84]	; (8013c4c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8013bf6:	f000 fcda 	bl	80145ae <USBD_GetEpDesc>
 8013bfa:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8013bfc:	2181      	movs	r1, #129	; 0x81
 8013bfe:	4813      	ldr	r0, [pc, #76]	; (8013c4c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8013c00:	f000 fcd5 	bl	80145ae <USBD_GetEpDesc>
 8013c04:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8013c06:	697b      	ldr	r3, [r7, #20]
 8013c08:	2b00      	cmp	r3, #0
 8013c0a:	d002      	beq.n	8013c12 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8013c0c:	697b      	ldr	r3, [r7, #20]
 8013c0e:	2210      	movs	r2, #16
 8013c10:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8013c12:	693b      	ldr	r3, [r7, #16]
 8013c14:	2b00      	cmp	r3, #0
 8013c16:	d006      	beq.n	8013c26 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8013c18:	693b      	ldr	r3, [r7, #16]
 8013c1a:	2200      	movs	r2, #0
 8013c1c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8013c20:	711a      	strb	r2, [r3, #4]
 8013c22:	2200      	movs	r2, #0
 8013c24:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8013c26:	68fb      	ldr	r3, [r7, #12]
 8013c28:	2b00      	cmp	r3, #0
 8013c2a:	d006      	beq.n	8013c3a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8013c2c:	68fb      	ldr	r3, [r7, #12]
 8013c2e:	2200      	movs	r2, #0
 8013c30:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8013c34:	711a      	strb	r2, [r3, #4]
 8013c36:	2200      	movs	r2, #0
 8013c38:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8013c3a:	687b      	ldr	r3, [r7, #4]
 8013c3c:	2243      	movs	r2, #67	; 0x43
 8013c3e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8013c40:	4b02      	ldr	r3, [pc, #8]	; (8013c4c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8013c42:	4618      	mov	r0, r3
 8013c44:	3718      	adds	r7, #24
 8013c46:	46bd      	mov	sp, r7
 8013c48:	bd80      	pop	{r7, pc}
 8013c4a:	bf00      	nop
 8013c4c:	200000ec 	.word	0x200000ec

08013c50 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8013c50:	b480      	push	{r7}
 8013c52:	b083      	sub	sp, #12
 8013c54:	af00      	add	r7, sp, #0
 8013c56:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8013c58:	687b      	ldr	r3, [r7, #4]
 8013c5a:	220a      	movs	r2, #10
 8013c5c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8013c5e:	4b03      	ldr	r3, [pc, #12]	; (8013c6c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8013c60:	4618      	mov	r0, r3
 8013c62:	370c      	adds	r7, #12
 8013c64:	46bd      	mov	sp, r7
 8013c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c6a:	4770      	bx	lr
 8013c6c:	200000a8 	.word	0x200000a8

08013c70 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8013c70:	b480      	push	{r7}
 8013c72:	b083      	sub	sp, #12
 8013c74:	af00      	add	r7, sp, #0
 8013c76:	6078      	str	r0, [r7, #4]
 8013c78:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8013c7a:	683b      	ldr	r3, [r7, #0]
 8013c7c:	2b00      	cmp	r3, #0
 8013c7e:	d101      	bne.n	8013c84 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8013c80:	2303      	movs	r3, #3
 8013c82:	e009      	b.n	8013c98 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8013c84:	687b      	ldr	r3, [r7, #4]
 8013c86:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8013c8a:	687a      	ldr	r2, [r7, #4]
 8013c8c:	33b0      	adds	r3, #176	; 0xb0
 8013c8e:	009b      	lsls	r3, r3, #2
 8013c90:	4413      	add	r3, r2
 8013c92:	683a      	ldr	r2, [r7, #0]
 8013c94:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8013c96:	2300      	movs	r3, #0
}
 8013c98:	4618      	mov	r0, r3
 8013c9a:	370c      	adds	r7, #12
 8013c9c:	46bd      	mov	sp, r7
 8013c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ca2:	4770      	bx	lr

08013ca4 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8013ca4:	b480      	push	{r7}
 8013ca6:	b087      	sub	sp, #28
 8013ca8:	af00      	add	r7, sp, #0
 8013caa:	60f8      	str	r0, [r7, #12]
 8013cac:	60b9      	str	r1, [r7, #8]
 8013cae:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8013cb0:	68fb      	ldr	r3, [r7, #12]
 8013cb2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013cb6:	68fb      	ldr	r3, [r7, #12]
 8013cb8:	32b0      	adds	r2, #176	; 0xb0
 8013cba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013cbe:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8013cc0:	697b      	ldr	r3, [r7, #20]
 8013cc2:	2b00      	cmp	r3, #0
 8013cc4:	d101      	bne.n	8013cca <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8013cc6:	2303      	movs	r3, #3
 8013cc8:	e008      	b.n	8013cdc <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8013cca:	697b      	ldr	r3, [r7, #20]
 8013ccc:	68ba      	ldr	r2, [r7, #8]
 8013cce:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8013cd2:	697b      	ldr	r3, [r7, #20]
 8013cd4:	687a      	ldr	r2, [r7, #4]
 8013cd6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8013cda:	2300      	movs	r3, #0
}
 8013cdc:	4618      	mov	r0, r3
 8013cde:	371c      	adds	r7, #28
 8013ce0:	46bd      	mov	sp, r7
 8013ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ce6:	4770      	bx	lr

08013ce8 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8013ce8:	b480      	push	{r7}
 8013cea:	b085      	sub	sp, #20
 8013cec:	af00      	add	r7, sp, #0
 8013cee:	6078      	str	r0, [r7, #4]
 8013cf0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8013cf2:	687b      	ldr	r3, [r7, #4]
 8013cf4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013cf8:	687b      	ldr	r3, [r7, #4]
 8013cfa:	32b0      	adds	r2, #176	; 0xb0
 8013cfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013d00:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8013d02:	68fb      	ldr	r3, [r7, #12]
 8013d04:	2b00      	cmp	r3, #0
 8013d06:	d101      	bne.n	8013d0c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8013d08:	2303      	movs	r3, #3
 8013d0a:	e004      	b.n	8013d16 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8013d0c:	68fb      	ldr	r3, [r7, #12]
 8013d0e:	683a      	ldr	r2, [r7, #0]
 8013d10:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8013d14:	2300      	movs	r3, #0
}
 8013d16:	4618      	mov	r0, r3
 8013d18:	3714      	adds	r7, #20
 8013d1a:	46bd      	mov	sp, r7
 8013d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d20:	4770      	bx	lr
	...

08013d24 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8013d24:	b580      	push	{r7, lr}
 8013d26:	b084      	sub	sp, #16
 8013d28:	af00      	add	r7, sp, #0
 8013d2a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8013d2c:	687b      	ldr	r3, [r7, #4]
 8013d2e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013d32:	687b      	ldr	r3, [r7, #4]
 8013d34:	32b0      	adds	r2, #176	; 0xb0
 8013d36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013d3a:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8013d3c:	2301      	movs	r3, #1
 8013d3e:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8013d40:	68bb      	ldr	r3, [r7, #8]
 8013d42:	2b00      	cmp	r3, #0
 8013d44:	d101      	bne.n	8013d4a <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8013d46:	2303      	movs	r3, #3
 8013d48:	e025      	b.n	8013d96 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8013d4a:	68bb      	ldr	r3, [r7, #8]
 8013d4c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8013d50:	2b00      	cmp	r3, #0
 8013d52:	d11f      	bne.n	8013d94 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8013d54:	68bb      	ldr	r3, [r7, #8]
 8013d56:	2201      	movs	r2, #1
 8013d58:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8013d5c:	4b10      	ldr	r3, [pc, #64]	; (8013da0 <USBD_CDC_TransmitPacket+0x7c>)
 8013d5e:	781b      	ldrb	r3, [r3, #0]
 8013d60:	f003 020f 	and.w	r2, r3, #15
 8013d64:	68bb      	ldr	r3, [r7, #8]
 8013d66:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8013d6a:	6878      	ldr	r0, [r7, #4]
 8013d6c:	4613      	mov	r3, r2
 8013d6e:	009b      	lsls	r3, r3, #2
 8013d70:	4413      	add	r3, r2
 8013d72:	009b      	lsls	r3, r3, #2
 8013d74:	4403      	add	r3, r0
 8013d76:	3318      	adds	r3, #24
 8013d78:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8013d7a:	4b09      	ldr	r3, [pc, #36]	; (8013da0 <USBD_CDC_TransmitPacket+0x7c>)
 8013d7c:	7819      	ldrb	r1, [r3, #0]
 8013d7e:	68bb      	ldr	r3, [r7, #8]
 8013d80:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8013d84:	68bb      	ldr	r3, [r7, #8]
 8013d86:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8013d8a:	6878      	ldr	r0, [r7, #4]
 8013d8c:	f002 f81d 	bl	8015dca <USBD_LL_Transmit>

    ret = USBD_OK;
 8013d90:	2300      	movs	r3, #0
 8013d92:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8013d94:	7bfb      	ldrb	r3, [r7, #15]
}
 8013d96:	4618      	mov	r0, r3
 8013d98:	3710      	adds	r7, #16
 8013d9a:	46bd      	mov	sp, r7
 8013d9c:	bd80      	pop	{r7, pc}
 8013d9e:	bf00      	nop
 8013da0:	2000012f 	.word	0x2000012f

08013da4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8013da4:	b580      	push	{r7, lr}
 8013da6:	b084      	sub	sp, #16
 8013da8:	af00      	add	r7, sp, #0
 8013daa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8013dac:	687b      	ldr	r3, [r7, #4]
 8013dae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013db2:	687b      	ldr	r3, [r7, #4]
 8013db4:	32b0      	adds	r2, #176	; 0xb0
 8013db6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013dba:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8013dbc:	687b      	ldr	r3, [r7, #4]
 8013dbe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013dc2:	687b      	ldr	r3, [r7, #4]
 8013dc4:	32b0      	adds	r2, #176	; 0xb0
 8013dc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013dca:	2b00      	cmp	r3, #0
 8013dcc:	d101      	bne.n	8013dd2 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8013dce:	2303      	movs	r3, #3
 8013dd0:	e018      	b.n	8013e04 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8013dd2:	687b      	ldr	r3, [r7, #4]
 8013dd4:	7c1b      	ldrb	r3, [r3, #16]
 8013dd6:	2b00      	cmp	r3, #0
 8013dd8:	d10a      	bne.n	8013df0 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8013dda:	4b0c      	ldr	r3, [pc, #48]	; (8013e0c <USBD_CDC_ReceivePacket+0x68>)
 8013ddc:	7819      	ldrb	r1, [r3, #0]
 8013dde:	68fb      	ldr	r3, [r7, #12]
 8013de0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8013de4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8013de8:	6878      	ldr	r0, [r7, #4]
 8013dea:	f002 f80f 	bl	8015e0c <USBD_LL_PrepareReceive>
 8013dee:	e008      	b.n	8013e02 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8013df0:	4b06      	ldr	r3, [pc, #24]	; (8013e0c <USBD_CDC_ReceivePacket+0x68>)
 8013df2:	7819      	ldrb	r1, [r3, #0]
 8013df4:	68fb      	ldr	r3, [r7, #12]
 8013df6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8013dfa:	2340      	movs	r3, #64	; 0x40
 8013dfc:	6878      	ldr	r0, [r7, #4]
 8013dfe:	f002 f805 	bl	8015e0c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8013e02:	2300      	movs	r3, #0
}
 8013e04:	4618      	mov	r0, r3
 8013e06:	3710      	adds	r7, #16
 8013e08:	46bd      	mov	sp, r7
 8013e0a:	bd80      	pop	{r7, pc}
 8013e0c:	20000130 	.word	0x20000130

08013e10 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8013e10:	b580      	push	{r7, lr}
 8013e12:	b086      	sub	sp, #24
 8013e14:	af00      	add	r7, sp, #0
 8013e16:	60f8      	str	r0, [r7, #12]
 8013e18:	60b9      	str	r1, [r7, #8]
 8013e1a:	4613      	mov	r3, r2
 8013e1c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8013e1e:	68fb      	ldr	r3, [r7, #12]
 8013e20:	2b00      	cmp	r3, #0
 8013e22:	d101      	bne.n	8013e28 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8013e24:	2303      	movs	r3, #3
 8013e26:	e01f      	b.n	8013e68 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8013e28:	68fb      	ldr	r3, [r7, #12]
 8013e2a:	2200      	movs	r2, #0
 8013e2c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8013e30:	68fb      	ldr	r3, [r7, #12]
 8013e32:	2200      	movs	r2, #0
 8013e34:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8013e38:	68fb      	ldr	r3, [r7, #12]
 8013e3a:	2200      	movs	r2, #0
 8013e3c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8013e40:	68bb      	ldr	r3, [r7, #8]
 8013e42:	2b00      	cmp	r3, #0
 8013e44:	d003      	beq.n	8013e4e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8013e46:	68fb      	ldr	r3, [r7, #12]
 8013e48:	68ba      	ldr	r2, [r7, #8]
 8013e4a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8013e4e:	68fb      	ldr	r3, [r7, #12]
 8013e50:	2201      	movs	r2, #1
 8013e52:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8013e56:	68fb      	ldr	r3, [r7, #12]
 8013e58:	79fa      	ldrb	r2, [r7, #7]
 8013e5a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8013e5c:	68f8      	ldr	r0, [r7, #12]
 8013e5e:	f001 fe7f 	bl	8015b60 <USBD_LL_Init>
 8013e62:	4603      	mov	r3, r0
 8013e64:	75fb      	strb	r3, [r7, #23]

  return ret;
 8013e66:	7dfb      	ldrb	r3, [r7, #23]
}
 8013e68:	4618      	mov	r0, r3
 8013e6a:	3718      	adds	r7, #24
 8013e6c:	46bd      	mov	sp, r7
 8013e6e:	bd80      	pop	{r7, pc}

08013e70 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8013e70:	b580      	push	{r7, lr}
 8013e72:	b084      	sub	sp, #16
 8013e74:	af00      	add	r7, sp, #0
 8013e76:	6078      	str	r0, [r7, #4]
 8013e78:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8013e7a:	2300      	movs	r3, #0
 8013e7c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8013e7e:	683b      	ldr	r3, [r7, #0]
 8013e80:	2b00      	cmp	r3, #0
 8013e82:	d101      	bne.n	8013e88 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8013e84:	2303      	movs	r3, #3
 8013e86:	e025      	b.n	8013ed4 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8013e88:	687b      	ldr	r3, [r7, #4]
 8013e8a:	683a      	ldr	r2, [r7, #0]
 8013e8c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8013e90:	687b      	ldr	r3, [r7, #4]
 8013e92:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013e96:	687b      	ldr	r3, [r7, #4]
 8013e98:	32ae      	adds	r2, #174	; 0xae
 8013e9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013e9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013ea0:	2b00      	cmp	r3, #0
 8013ea2:	d00f      	beq.n	8013ec4 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8013ea4:	687b      	ldr	r3, [r7, #4]
 8013ea6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013eaa:	687b      	ldr	r3, [r7, #4]
 8013eac:	32ae      	adds	r2, #174	; 0xae
 8013eae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013eb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013eb4:	f107 020e 	add.w	r2, r7, #14
 8013eb8:	4610      	mov	r0, r2
 8013eba:	4798      	blx	r3
 8013ebc:	4602      	mov	r2, r0
 8013ebe:	687b      	ldr	r3, [r7, #4]
 8013ec0:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8013ec4:	687b      	ldr	r3, [r7, #4]
 8013ec6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8013eca:	1c5a      	adds	r2, r3, #1
 8013ecc:	687b      	ldr	r3, [r7, #4]
 8013ece:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8013ed2:	2300      	movs	r3, #0
}
 8013ed4:	4618      	mov	r0, r3
 8013ed6:	3710      	adds	r7, #16
 8013ed8:	46bd      	mov	sp, r7
 8013eda:	bd80      	pop	{r7, pc}

08013edc <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8013edc:	b580      	push	{r7, lr}
 8013ede:	b082      	sub	sp, #8
 8013ee0:	af00      	add	r7, sp, #0
 8013ee2:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8013ee4:	6878      	ldr	r0, [r7, #4]
 8013ee6:	f001 fe87 	bl	8015bf8 <USBD_LL_Start>
 8013eea:	4603      	mov	r3, r0
}
 8013eec:	4618      	mov	r0, r3
 8013eee:	3708      	adds	r7, #8
 8013ef0:	46bd      	mov	sp, r7
 8013ef2:	bd80      	pop	{r7, pc}

08013ef4 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8013ef4:	b480      	push	{r7}
 8013ef6:	b083      	sub	sp, #12
 8013ef8:	af00      	add	r7, sp, #0
 8013efa:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8013efc:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8013efe:	4618      	mov	r0, r3
 8013f00:	370c      	adds	r7, #12
 8013f02:	46bd      	mov	sp, r7
 8013f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f08:	4770      	bx	lr

08013f0a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8013f0a:	b580      	push	{r7, lr}
 8013f0c:	b084      	sub	sp, #16
 8013f0e:	af00      	add	r7, sp, #0
 8013f10:	6078      	str	r0, [r7, #4]
 8013f12:	460b      	mov	r3, r1
 8013f14:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8013f16:	2300      	movs	r3, #0
 8013f18:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8013f1a:	687b      	ldr	r3, [r7, #4]
 8013f1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013f20:	2b00      	cmp	r3, #0
 8013f22:	d009      	beq.n	8013f38 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8013f24:	687b      	ldr	r3, [r7, #4]
 8013f26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013f2a:	681b      	ldr	r3, [r3, #0]
 8013f2c:	78fa      	ldrb	r2, [r7, #3]
 8013f2e:	4611      	mov	r1, r2
 8013f30:	6878      	ldr	r0, [r7, #4]
 8013f32:	4798      	blx	r3
 8013f34:	4603      	mov	r3, r0
 8013f36:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8013f38:	7bfb      	ldrb	r3, [r7, #15]
}
 8013f3a:	4618      	mov	r0, r3
 8013f3c:	3710      	adds	r7, #16
 8013f3e:	46bd      	mov	sp, r7
 8013f40:	bd80      	pop	{r7, pc}

08013f42 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8013f42:	b580      	push	{r7, lr}
 8013f44:	b084      	sub	sp, #16
 8013f46:	af00      	add	r7, sp, #0
 8013f48:	6078      	str	r0, [r7, #4]
 8013f4a:	460b      	mov	r3, r1
 8013f4c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8013f4e:	2300      	movs	r3, #0
 8013f50:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8013f52:	687b      	ldr	r3, [r7, #4]
 8013f54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013f58:	685b      	ldr	r3, [r3, #4]
 8013f5a:	78fa      	ldrb	r2, [r7, #3]
 8013f5c:	4611      	mov	r1, r2
 8013f5e:	6878      	ldr	r0, [r7, #4]
 8013f60:	4798      	blx	r3
 8013f62:	4603      	mov	r3, r0
 8013f64:	2b00      	cmp	r3, #0
 8013f66:	d001      	beq.n	8013f6c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8013f68:	2303      	movs	r3, #3
 8013f6a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8013f6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8013f6e:	4618      	mov	r0, r3
 8013f70:	3710      	adds	r7, #16
 8013f72:	46bd      	mov	sp, r7
 8013f74:	bd80      	pop	{r7, pc}

08013f76 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8013f76:	b580      	push	{r7, lr}
 8013f78:	b084      	sub	sp, #16
 8013f7a:	af00      	add	r7, sp, #0
 8013f7c:	6078      	str	r0, [r7, #4]
 8013f7e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8013f80:	687b      	ldr	r3, [r7, #4]
 8013f82:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8013f86:	6839      	ldr	r1, [r7, #0]
 8013f88:	4618      	mov	r0, r3
 8013f8a:	f001 f90e 	bl	80151aa <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8013f8e:	687b      	ldr	r3, [r7, #4]
 8013f90:	2201      	movs	r2, #1
 8013f92:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8013f96:	687b      	ldr	r3, [r7, #4]
 8013f98:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8013f9c:	461a      	mov	r2, r3
 8013f9e:	687b      	ldr	r3, [r7, #4]
 8013fa0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8013fa4:	687b      	ldr	r3, [r7, #4]
 8013fa6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8013faa:	f003 031f 	and.w	r3, r3, #31
 8013fae:	2b02      	cmp	r3, #2
 8013fb0:	d01a      	beq.n	8013fe8 <USBD_LL_SetupStage+0x72>
 8013fb2:	2b02      	cmp	r3, #2
 8013fb4:	d822      	bhi.n	8013ffc <USBD_LL_SetupStage+0x86>
 8013fb6:	2b00      	cmp	r3, #0
 8013fb8:	d002      	beq.n	8013fc0 <USBD_LL_SetupStage+0x4a>
 8013fba:	2b01      	cmp	r3, #1
 8013fbc:	d00a      	beq.n	8013fd4 <USBD_LL_SetupStage+0x5e>
 8013fbe:	e01d      	b.n	8013ffc <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8013fc0:	687b      	ldr	r3, [r7, #4]
 8013fc2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8013fc6:	4619      	mov	r1, r3
 8013fc8:	6878      	ldr	r0, [r7, #4]
 8013fca:	f000 fb65 	bl	8014698 <USBD_StdDevReq>
 8013fce:	4603      	mov	r3, r0
 8013fd0:	73fb      	strb	r3, [r7, #15]
      break;
 8013fd2:	e020      	b.n	8014016 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8013fd4:	687b      	ldr	r3, [r7, #4]
 8013fd6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8013fda:	4619      	mov	r1, r3
 8013fdc:	6878      	ldr	r0, [r7, #4]
 8013fde:	f000 fbcd 	bl	801477c <USBD_StdItfReq>
 8013fe2:	4603      	mov	r3, r0
 8013fe4:	73fb      	strb	r3, [r7, #15]
      break;
 8013fe6:	e016      	b.n	8014016 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8013fe8:	687b      	ldr	r3, [r7, #4]
 8013fea:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8013fee:	4619      	mov	r1, r3
 8013ff0:	6878      	ldr	r0, [r7, #4]
 8013ff2:	f000 fc2f 	bl	8014854 <USBD_StdEPReq>
 8013ff6:	4603      	mov	r3, r0
 8013ff8:	73fb      	strb	r3, [r7, #15]
      break;
 8013ffa:	e00c      	b.n	8014016 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8013ffc:	687b      	ldr	r3, [r7, #4]
 8013ffe:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8014002:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8014006:	b2db      	uxtb	r3, r3
 8014008:	4619      	mov	r1, r3
 801400a:	6878      	ldr	r0, [r7, #4]
 801400c:	f001 fe54 	bl	8015cb8 <USBD_LL_StallEP>
 8014010:	4603      	mov	r3, r0
 8014012:	73fb      	strb	r3, [r7, #15]
      break;
 8014014:	bf00      	nop
  }

  return ret;
 8014016:	7bfb      	ldrb	r3, [r7, #15]
}
 8014018:	4618      	mov	r0, r3
 801401a:	3710      	adds	r7, #16
 801401c:	46bd      	mov	sp, r7
 801401e:	bd80      	pop	{r7, pc}

08014020 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8014020:	b580      	push	{r7, lr}
 8014022:	b086      	sub	sp, #24
 8014024:	af00      	add	r7, sp, #0
 8014026:	60f8      	str	r0, [r7, #12]
 8014028:	460b      	mov	r3, r1
 801402a:	607a      	str	r2, [r7, #4]
 801402c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 801402e:	2300      	movs	r3, #0
 8014030:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8014032:	7afb      	ldrb	r3, [r7, #11]
 8014034:	2b00      	cmp	r3, #0
 8014036:	d16e      	bne.n	8014116 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8014038:	68fb      	ldr	r3, [r7, #12]
 801403a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 801403e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8014040:	68fb      	ldr	r3, [r7, #12]
 8014042:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8014046:	2b03      	cmp	r3, #3
 8014048:	f040 8098 	bne.w	801417c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 801404c:	693b      	ldr	r3, [r7, #16]
 801404e:	689a      	ldr	r2, [r3, #8]
 8014050:	693b      	ldr	r3, [r7, #16]
 8014052:	68db      	ldr	r3, [r3, #12]
 8014054:	429a      	cmp	r2, r3
 8014056:	d913      	bls.n	8014080 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8014058:	693b      	ldr	r3, [r7, #16]
 801405a:	689a      	ldr	r2, [r3, #8]
 801405c:	693b      	ldr	r3, [r7, #16]
 801405e:	68db      	ldr	r3, [r3, #12]
 8014060:	1ad2      	subs	r2, r2, r3
 8014062:	693b      	ldr	r3, [r7, #16]
 8014064:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8014066:	693b      	ldr	r3, [r7, #16]
 8014068:	68da      	ldr	r2, [r3, #12]
 801406a:	693b      	ldr	r3, [r7, #16]
 801406c:	689b      	ldr	r3, [r3, #8]
 801406e:	4293      	cmp	r3, r2
 8014070:	bf28      	it	cs
 8014072:	4613      	movcs	r3, r2
 8014074:	461a      	mov	r2, r3
 8014076:	6879      	ldr	r1, [r7, #4]
 8014078:	68f8      	ldr	r0, [r7, #12]
 801407a:	f001 f98a 	bl	8015392 <USBD_CtlContinueRx>
 801407e:	e07d      	b.n	801417c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8014080:	68fb      	ldr	r3, [r7, #12]
 8014082:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8014086:	f003 031f 	and.w	r3, r3, #31
 801408a:	2b02      	cmp	r3, #2
 801408c:	d014      	beq.n	80140b8 <USBD_LL_DataOutStage+0x98>
 801408e:	2b02      	cmp	r3, #2
 8014090:	d81d      	bhi.n	80140ce <USBD_LL_DataOutStage+0xae>
 8014092:	2b00      	cmp	r3, #0
 8014094:	d002      	beq.n	801409c <USBD_LL_DataOutStage+0x7c>
 8014096:	2b01      	cmp	r3, #1
 8014098:	d003      	beq.n	80140a2 <USBD_LL_DataOutStage+0x82>
 801409a:	e018      	b.n	80140ce <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 801409c:	2300      	movs	r3, #0
 801409e:	75bb      	strb	r3, [r7, #22]
            break;
 80140a0:	e018      	b.n	80140d4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80140a2:	68fb      	ldr	r3, [r7, #12]
 80140a4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80140a8:	b2db      	uxtb	r3, r3
 80140aa:	4619      	mov	r1, r3
 80140ac:	68f8      	ldr	r0, [r7, #12]
 80140ae:	f000 fa64 	bl	801457a <USBD_CoreFindIF>
 80140b2:	4603      	mov	r3, r0
 80140b4:	75bb      	strb	r3, [r7, #22]
            break;
 80140b6:	e00d      	b.n	80140d4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80140b8:	68fb      	ldr	r3, [r7, #12]
 80140ba:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80140be:	b2db      	uxtb	r3, r3
 80140c0:	4619      	mov	r1, r3
 80140c2:	68f8      	ldr	r0, [r7, #12]
 80140c4:	f000 fa66 	bl	8014594 <USBD_CoreFindEP>
 80140c8:	4603      	mov	r3, r0
 80140ca:	75bb      	strb	r3, [r7, #22]
            break;
 80140cc:	e002      	b.n	80140d4 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80140ce:	2300      	movs	r3, #0
 80140d0:	75bb      	strb	r3, [r7, #22]
            break;
 80140d2:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80140d4:	7dbb      	ldrb	r3, [r7, #22]
 80140d6:	2b00      	cmp	r3, #0
 80140d8:	d119      	bne.n	801410e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80140da:	68fb      	ldr	r3, [r7, #12]
 80140dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80140e0:	b2db      	uxtb	r3, r3
 80140e2:	2b03      	cmp	r3, #3
 80140e4:	d113      	bne.n	801410e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80140e6:	7dba      	ldrb	r2, [r7, #22]
 80140e8:	68fb      	ldr	r3, [r7, #12]
 80140ea:	32ae      	adds	r2, #174	; 0xae
 80140ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80140f0:	691b      	ldr	r3, [r3, #16]
 80140f2:	2b00      	cmp	r3, #0
 80140f4:	d00b      	beq.n	801410e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80140f6:	7dba      	ldrb	r2, [r7, #22]
 80140f8:	68fb      	ldr	r3, [r7, #12]
 80140fa:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80140fe:	7dba      	ldrb	r2, [r7, #22]
 8014100:	68fb      	ldr	r3, [r7, #12]
 8014102:	32ae      	adds	r2, #174	; 0xae
 8014104:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014108:	691b      	ldr	r3, [r3, #16]
 801410a:	68f8      	ldr	r0, [r7, #12]
 801410c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 801410e:	68f8      	ldr	r0, [r7, #12]
 8014110:	f001 f950 	bl	80153b4 <USBD_CtlSendStatus>
 8014114:	e032      	b.n	801417c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8014116:	7afb      	ldrb	r3, [r7, #11]
 8014118:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801411c:	b2db      	uxtb	r3, r3
 801411e:	4619      	mov	r1, r3
 8014120:	68f8      	ldr	r0, [r7, #12]
 8014122:	f000 fa37 	bl	8014594 <USBD_CoreFindEP>
 8014126:	4603      	mov	r3, r0
 8014128:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801412a:	7dbb      	ldrb	r3, [r7, #22]
 801412c:	2bff      	cmp	r3, #255	; 0xff
 801412e:	d025      	beq.n	801417c <USBD_LL_DataOutStage+0x15c>
 8014130:	7dbb      	ldrb	r3, [r7, #22]
 8014132:	2b00      	cmp	r3, #0
 8014134:	d122      	bne.n	801417c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014136:	68fb      	ldr	r3, [r7, #12]
 8014138:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801413c:	b2db      	uxtb	r3, r3
 801413e:	2b03      	cmp	r3, #3
 8014140:	d117      	bne.n	8014172 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8014142:	7dba      	ldrb	r2, [r7, #22]
 8014144:	68fb      	ldr	r3, [r7, #12]
 8014146:	32ae      	adds	r2, #174	; 0xae
 8014148:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801414c:	699b      	ldr	r3, [r3, #24]
 801414e:	2b00      	cmp	r3, #0
 8014150:	d00f      	beq.n	8014172 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8014152:	7dba      	ldrb	r2, [r7, #22]
 8014154:	68fb      	ldr	r3, [r7, #12]
 8014156:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 801415a:	7dba      	ldrb	r2, [r7, #22]
 801415c:	68fb      	ldr	r3, [r7, #12]
 801415e:	32ae      	adds	r2, #174	; 0xae
 8014160:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014164:	699b      	ldr	r3, [r3, #24]
 8014166:	7afa      	ldrb	r2, [r7, #11]
 8014168:	4611      	mov	r1, r2
 801416a:	68f8      	ldr	r0, [r7, #12]
 801416c:	4798      	blx	r3
 801416e:	4603      	mov	r3, r0
 8014170:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8014172:	7dfb      	ldrb	r3, [r7, #23]
 8014174:	2b00      	cmp	r3, #0
 8014176:	d001      	beq.n	801417c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8014178:	7dfb      	ldrb	r3, [r7, #23]
 801417a:	e000      	b.n	801417e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 801417c:	2300      	movs	r3, #0
}
 801417e:	4618      	mov	r0, r3
 8014180:	3718      	adds	r7, #24
 8014182:	46bd      	mov	sp, r7
 8014184:	bd80      	pop	{r7, pc}

08014186 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8014186:	b580      	push	{r7, lr}
 8014188:	b086      	sub	sp, #24
 801418a:	af00      	add	r7, sp, #0
 801418c:	60f8      	str	r0, [r7, #12]
 801418e:	460b      	mov	r3, r1
 8014190:	607a      	str	r2, [r7, #4]
 8014192:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8014194:	7afb      	ldrb	r3, [r7, #11]
 8014196:	2b00      	cmp	r3, #0
 8014198:	d16f      	bne.n	801427a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 801419a:	68fb      	ldr	r3, [r7, #12]
 801419c:	3314      	adds	r3, #20
 801419e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80141a0:	68fb      	ldr	r3, [r7, #12]
 80141a2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80141a6:	2b02      	cmp	r3, #2
 80141a8:	d15a      	bne.n	8014260 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80141aa:	693b      	ldr	r3, [r7, #16]
 80141ac:	689a      	ldr	r2, [r3, #8]
 80141ae:	693b      	ldr	r3, [r7, #16]
 80141b0:	68db      	ldr	r3, [r3, #12]
 80141b2:	429a      	cmp	r2, r3
 80141b4:	d914      	bls.n	80141e0 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80141b6:	693b      	ldr	r3, [r7, #16]
 80141b8:	689a      	ldr	r2, [r3, #8]
 80141ba:	693b      	ldr	r3, [r7, #16]
 80141bc:	68db      	ldr	r3, [r3, #12]
 80141be:	1ad2      	subs	r2, r2, r3
 80141c0:	693b      	ldr	r3, [r7, #16]
 80141c2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80141c4:	693b      	ldr	r3, [r7, #16]
 80141c6:	689b      	ldr	r3, [r3, #8]
 80141c8:	461a      	mov	r2, r3
 80141ca:	6879      	ldr	r1, [r7, #4]
 80141cc:	68f8      	ldr	r0, [r7, #12]
 80141ce:	f001 f8b2 	bl	8015336 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80141d2:	2300      	movs	r3, #0
 80141d4:	2200      	movs	r2, #0
 80141d6:	2100      	movs	r1, #0
 80141d8:	68f8      	ldr	r0, [r7, #12]
 80141da:	f001 fe17 	bl	8015e0c <USBD_LL_PrepareReceive>
 80141de:	e03f      	b.n	8014260 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80141e0:	693b      	ldr	r3, [r7, #16]
 80141e2:	68da      	ldr	r2, [r3, #12]
 80141e4:	693b      	ldr	r3, [r7, #16]
 80141e6:	689b      	ldr	r3, [r3, #8]
 80141e8:	429a      	cmp	r2, r3
 80141ea:	d11c      	bne.n	8014226 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80141ec:	693b      	ldr	r3, [r7, #16]
 80141ee:	685a      	ldr	r2, [r3, #4]
 80141f0:	693b      	ldr	r3, [r7, #16]
 80141f2:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80141f4:	429a      	cmp	r2, r3
 80141f6:	d316      	bcc.n	8014226 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80141f8:	693b      	ldr	r3, [r7, #16]
 80141fa:	685a      	ldr	r2, [r3, #4]
 80141fc:	68fb      	ldr	r3, [r7, #12]
 80141fe:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8014202:	429a      	cmp	r2, r3
 8014204:	d20f      	bcs.n	8014226 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8014206:	2200      	movs	r2, #0
 8014208:	2100      	movs	r1, #0
 801420a:	68f8      	ldr	r0, [r7, #12]
 801420c:	f001 f893 	bl	8015336 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8014210:	68fb      	ldr	r3, [r7, #12]
 8014212:	2200      	movs	r2, #0
 8014214:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8014218:	2300      	movs	r3, #0
 801421a:	2200      	movs	r2, #0
 801421c:	2100      	movs	r1, #0
 801421e:	68f8      	ldr	r0, [r7, #12]
 8014220:	f001 fdf4 	bl	8015e0c <USBD_LL_PrepareReceive>
 8014224:	e01c      	b.n	8014260 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014226:	68fb      	ldr	r3, [r7, #12]
 8014228:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801422c:	b2db      	uxtb	r3, r3
 801422e:	2b03      	cmp	r3, #3
 8014230:	d10f      	bne.n	8014252 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8014232:	68fb      	ldr	r3, [r7, #12]
 8014234:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014238:	68db      	ldr	r3, [r3, #12]
 801423a:	2b00      	cmp	r3, #0
 801423c:	d009      	beq.n	8014252 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 801423e:	68fb      	ldr	r3, [r7, #12]
 8014240:	2200      	movs	r2, #0
 8014242:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8014246:	68fb      	ldr	r3, [r7, #12]
 8014248:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801424c:	68db      	ldr	r3, [r3, #12]
 801424e:	68f8      	ldr	r0, [r7, #12]
 8014250:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8014252:	2180      	movs	r1, #128	; 0x80
 8014254:	68f8      	ldr	r0, [r7, #12]
 8014256:	f001 fd2f 	bl	8015cb8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 801425a:	68f8      	ldr	r0, [r7, #12]
 801425c:	f001 f8bd 	bl	80153da <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8014260:	68fb      	ldr	r3, [r7, #12]
 8014262:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8014266:	2b00      	cmp	r3, #0
 8014268:	d03a      	beq.n	80142e0 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 801426a:	68f8      	ldr	r0, [r7, #12]
 801426c:	f7ff fe42 	bl	8013ef4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8014270:	68fb      	ldr	r3, [r7, #12]
 8014272:	2200      	movs	r2, #0
 8014274:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8014278:	e032      	b.n	80142e0 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 801427a:	7afb      	ldrb	r3, [r7, #11]
 801427c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8014280:	b2db      	uxtb	r3, r3
 8014282:	4619      	mov	r1, r3
 8014284:	68f8      	ldr	r0, [r7, #12]
 8014286:	f000 f985 	bl	8014594 <USBD_CoreFindEP>
 801428a:	4603      	mov	r3, r0
 801428c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801428e:	7dfb      	ldrb	r3, [r7, #23]
 8014290:	2bff      	cmp	r3, #255	; 0xff
 8014292:	d025      	beq.n	80142e0 <USBD_LL_DataInStage+0x15a>
 8014294:	7dfb      	ldrb	r3, [r7, #23]
 8014296:	2b00      	cmp	r3, #0
 8014298:	d122      	bne.n	80142e0 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801429a:	68fb      	ldr	r3, [r7, #12]
 801429c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80142a0:	b2db      	uxtb	r3, r3
 80142a2:	2b03      	cmp	r3, #3
 80142a4:	d11c      	bne.n	80142e0 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80142a6:	7dfa      	ldrb	r2, [r7, #23]
 80142a8:	68fb      	ldr	r3, [r7, #12]
 80142aa:	32ae      	adds	r2, #174	; 0xae
 80142ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80142b0:	695b      	ldr	r3, [r3, #20]
 80142b2:	2b00      	cmp	r3, #0
 80142b4:	d014      	beq.n	80142e0 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80142b6:	7dfa      	ldrb	r2, [r7, #23]
 80142b8:	68fb      	ldr	r3, [r7, #12]
 80142ba:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80142be:	7dfa      	ldrb	r2, [r7, #23]
 80142c0:	68fb      	ldr	r3, [r7, #12]
 80142c2:	32ae      	adds	r2, #174	; 0xae
 80142c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80142c8:	695b      	ldr	r3, [r3, #20]
 80142ca:	7afa      	ldrb	r2, [r7, #11]
 80142cc:	4611      	mov	r1, r2
 80142ce:	68f8      	ldr	r0, [r7, #12]
 80142d0:	4798      	blx	r3
 80142d2:	4603      	mov	r3, r0
 80142d4:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80142d6:	7dbb      	ldrb	r3, [r7, #22]
 80142d8:	2b00      	cmp	r3, #0
 80142da:	d001      	beq.n	80142e0 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80142dc:	7dbb      	ldrb	r3, [r7, #22]
 80142de:	e000      	b.n	80142e2 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80142e0:	2300      	movs	r3, #0
}
 80142e2:	4618      	mov	r0, r3
 80142e4:	3718      	adds	r7, #24
 80142e6:	46bd      	mov	sp, r7
 80142e8:	bd80      	pop	{r7, pc}

080142ea <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80142ea:	b580      	push	{r7, lr}
 80142ec:	b084      	sub	sp, #16
 80142ee:	af00      	add	r7, sp, #0
 80142f0:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80142f2:	2300      	movs	r3, #0
 80142f4:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80142f6:	687b      	ldr	r3, [r7, #4]
 80142f8:	2201      	movs	r2, #1
 80142fa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80142fe:	687b      	ldr	r3, [r7, #4]
 8014300:	2200      	movs	r2, #0
 8014302:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8014306:	687b      	ldr	r3, [r7, #4]
 8014308:	2200      	movs	r2, #0
 801430a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 801430c:	687b      	ldr	r3, [r7, #4]
 801430e:	2200      	movs	r2, #0
 8014310:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8014314:	687b      	ldr	r3, [r7, #4]
 8014316:	2200      	movs	r2, #0
 8014318:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 801431c:	687b      	ldr	r3, [r7, #4]
 801431e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014322:	2b00      	cmp	r3, #0
 8014324:	d014      	beq.n	8014350 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8014326:	687b      	ldr	r3, [r7, #4]
 8014328:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801432c:	685b      	ldr	r3, [r3, #4]
 801432e:	2b00      	cmp	r3, #0
 8014330:	d00e      	beq.n	8014350 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8014332:	687b      	ldr	r3, [r7, #4]
 8014334:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014338:	685b      	ldr	r3, [r3, #4]
 801433a:	687a      	ldr	r2, [r7, #4]
 801433c:	6852      	ldr	r2, [r2, #4]
 801433e:	b2d2      	uxtb	r2, r2
 8014340:	4611      	mov	r1, r2
 8014342:	6878      	ldr	r0, [r7, #4]
 8014344:	4798      	blx	r3
 8014346:	4603      	mov	r3, r0
 8014348:	2b00      	cmp	r3, #0
 801434a:	d001      	beq.n	8014350 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 801434c:	2303      	movs	r3, #3
 801434e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8014350:	2340      	movs	r3, #64	; 0x40
 8014352:	2200      	movs	r2, #0
 8014354:	2100      	movs	r1, #0
 8014356:	6878      	ldr	r0, [r7, #4]
 8014358:	f001 fc69 	bl	8015c2e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 801435c:	687b      	ldr	r3, [r7, #4]
 801435e:	2201      	movs	r2, #1
 8014360:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8014364:	687b      	ldr	r3, [r7, #4]
 8014366:	2240      	movs	r2, #64	; 0x40
 8014368:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801436c:	2340      	movs	r3, #64	; 0x40
 801436e:	2200      	movs	r2, #0
 8014370:	2180      	movs	r1, #128	; 0x80
 8014372:	6878      	ldr	r0, [r7, #4]
 8014374:	f001 fc5b 	bl	8015c2e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8014378:	687b      	ldr	r3, [r7, #4]
 801437a:	2201      	movs	r2, #1
 801437c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 801437e:	687b      	ldr	r3, [r7, #4]
 8014380:	2240      	movs	r2, #64	; 0x40
 8014382:	621a      	str	r2, [r3, #32]

  return ret;
 8014384:	7bfb      	ldrb	r3, [r7, #15]
}
 8014386:	4618      	mov	r0, r3
 8014388:	3710      	adds	r7, #16
 801438a:	46bd      	mov	sp, r7
 801438c:	bd80      	pop	{r7, pc}

0801438e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 801438e:	b480      	push	{r7}
 8014390:	b083      	sub	sp, #12
 8014392:	af00      	add	r7, sp, #0
 8014394:	6078      	str	r0, [r7, #4]
 8014396:	460b      	mov	r3, r1
 8014398:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 801439a:	687b      	ldr	r3, [r7, #4]
 801439c:	78fa      	ldrb	r2, [r7, #3]
 801439e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80143a0:	2300      	movs	r3, #0
}
 80143a2:	4618      	mov	r0, r3
 80143a4:	370c      	adds	r7, #12
 80143a6:	46bd      	mov	sp, r7
 80143a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143ac:	4770      	bx	lr

080143ae <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80143ae:	b480      	push	{r7}
 80143b0:	b083      	sub	sp, #12
 80143b2:	af00      	add	r7, sp, #0
 80143b4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 80143b6:	687b      	ldr	r3, [r7, #4]
 80143b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80143bc:	b2db      	uxtb	r3, r3
 80143be:	2b04      	cmp	r3, #4
 80143c0:	d006      	beq.n	80143d0 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 80143c2:	687b      	ldr	r3, [r7, #4]
 80143c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80143c8:	b2da      	uxtb	r2, r3
 80143ca:	687b      	ldr	r3, [r7, #4]
 80143cc:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 80143d0:	687b      	ldr	r3, [r7, #4]
 80143d2:	2204      	movs	r2, #4
 80143d4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80143d8:	2300      	movs	r3, #0
}
 80143da:	4618      	mov	r0, r3
 80143dc:	370c      	adds	r7, #12
 80143de:	46bd      	mov	sp, r7
 80143e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143e4:	4770      	bx	lr

080143e6 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80143e6:	b480      	push	{r7}
 80143e8:	b083      	sub	sp, #12
 80143ea:	af00      	add	r7, sp, #0
 80143ec:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80143ee:	687b      	ldr	r3, [r7, #4]
 80143f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80143f4:	b2db      	uxtb	r3, r3
 80143f6:	2b04      	cmp	r3, #4
 80143f8:	d106      	bne.n	8014408 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80143fa:	687b      	ldr	r3, [r7, #4]
 80143fc:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8014400:	b2da      	uxtb	r2, r3
 8014402:	687b      	ldr	r3, [r7, #4]
 8014404:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8014408:	2300      	movs	r3, #0
}
 801440a:	4618      	mov	r0, r3
 801440c:	370c      	adds	r7, #12
 801440e:	46bd      	mov	sp, r7
 8014410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014414:	4770      	bx	lr

08014416 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8014416:	b580      	push	{r7, lr}
 8014418:	b082      	sub	sp, #8
 801441a:	af00      	add	r7, sp, #0
 801441c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801441e:	687b      	ldr	r3, [r7, #4]
 8014420:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014424:	b2db      	uxtb	r3, r3
 8014426:	2b03      	cmp	r3, #3
 8014428:	d110      	bne.n	801444c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 801442a:	687b      	ldr	r3, [r7, #4]
 801442c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014430:	2b00      	cmp	r3, #0
 8014432:	d00b      	beq.n	801444c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8014434:	687b      	ldr	r3, [r7, #4]
 8014436:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801443a:	69db      	ldr	r3, [r3, #28]
 801443c:	2b00      	cmp	r3, #0
 801443e:	d005      	beq.n	801444c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8014440:	687b      	ldr	r3, [r7, #4]
 8014442:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014446:	69db      	ldr	r3, [r3, #28]
 8014448:	6878      	ldr	r0, [r7, #4]
 801444a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 801444c:	2300      	movs	r3, #0
}
 801444e:	4618      	mov	r0, r3
 8014450:	3708      	adds	r7, #8
 8014452:	46bd      	mov	sp, r7
 8014454:	bd80      	pop	{r7, pc}

08014456 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8014456:	b580      	push	{r7, lr}
 8014458:	b082      	sub	sp, #8
 801445a:	af00      	add	r7, sp, #0
 801445c:	6078      	str	r0, [r7, #4]
 801445e:	460b      	mov	r3, r1
 8014460:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8014462:	687b      	ldr	r3, [r7, #4]
 8014464:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014468:	687b      	ldr	r3, [r7, #4]
 801446a:	32ae      	adds	r2, #174	; 0xae
 801446c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014470:	2b00      	cmp	r3, #0
 8014472:	d101      	bne.n	8014478 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8014474:	2303      	movs	r3, #3
 8014476:	e01c      	b.n	80144b2 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014478:	687b      	ldr	r3, [r7, #4]
 801447a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801447e:	b2db      	uxtb	r3, r3
 8014480:	2b03      	cmp	r3, #3
 8014482:	d115      	bne.n	80144b0 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8014484:	687b      	ldr	r3, [r7, #4]
 8014486:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801448a:	687b      	ldr	r3, [r7, #4]
 801448c:	32ae      	adds	r2, #174	; 0xae
 801448e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014492:	6a1b      	ldr	r3, [r3, #32]
 8014494:	2b00      	cmp	r3, #0
 8014496:	d00b      	beq.n	80144b0 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8014498:	687b      	ldr	r3, [r7, #4]
 801449a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801449e:	687b      	ldr	r3, [r7, #4]
 80144a0:	32ae      	adds	r2, #174	; 0xae
 80144a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80144a6:	6a1b      	ldr	r3, [r3, #32]
 80144a8:	78fa      	ldrb	r2, [r7, #3]
 80144aa:	4611      	mov	r1, r2
 80144ac:	6878      	ldr	r0, [r7, #4]
 80144ae:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80144b0:	2300      	movs	r3, #0
}
 80144b2:	4618      	mov	r0, r3
 80144b4:	3708      	adds	r7, #8
 80144b6:	46bd      	mov	sp, r7
 80144b8:	bd80      	pop	{r7, pc}

080144ba <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80144ba:	b580      	push	{r7, lr}
 80144bc:	b082      	sub	sp, #8
 80144be:	af00      	add	r7, sp, #0
 80144c0:	6078      	str	r0, [r7, #4]
 80144c2:	460b      	mov	r3, r1
 80144c4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80144c6:	687b      	ldr	r3, [r7, #4]
 80144c8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80144cc:	687b      	ldr	r3, [r7, #4]
 80144ce:	32ae      	adds	r2, #174	; 0xae
 80144d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80144d4:	2b00      	cmp	r3, #0
 80144d6:	d101      	bne.n	80144dc <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80144d8:	2303      	movs	r3, #3
 80144da:	e01c      	b.n	8014516 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80144dc:	687b      	ldr	r3, [r7, #4]
 80144de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80144e2:	b2db      	uxtb	r3, r3
 80144e4:	2b03      	cmp	r3, #3
 80144e6:	d115      	bne.n	8014514 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80144e8:	687b      	ldr	r3, [r7, #4]
 80144ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80144ee:	687b      	ldr	r3, [r7, #4]
 80144f0:	32ae      	adds	r2, #174	; 0xae
 80144f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80144f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80144f8:	2b00      	cmp	r3, #0
 80144fa:	d00b      	beq.n	8014514 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80144fc:	687b      	ldr	r3, [r7, #4]
 80144fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014502:	687b      	ldr	r3, [r7, #4]
 8014504:	32ae      	adds	r2, #174	; 0xae
 8014506:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801450a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801450c:	78fa      	ldrb	r2, [r7, #3]
 801450e:	4611      	mov	r1, r2
 8014510:	6878      	ldr	r0, [r7, #4]
 8014512:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8014514:	2300      	movs	r3, #0
}
 8014516:	4618      	mov	r0, r3
 8014518:	3708      	adds	r7, #8
 801451a:	46bd      	mov	sp, r7
 801451c:	bd80      	pop	{r7, pc}

0801451e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 801451e:	b480      	push	{r7}
 8014520:	b083      	sub	sp, #12
 8014522:	af00      	add	r7, sp, #0
 8014524:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8014526:	2300      	movs	r3, #0
}
 8014528:	4618      	mov	r0, r3
 801452a:	370c      	adds	r7, #12
 801452c:	46bd      	mov	sp, r7
 801452e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014532:	4770      	bx	lr

08014534 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8014534:	b580      	push	{r7, lr}
 8014536:	b084      	sub	sp, #16
 8014538:	af00      	add	r7, sp, #0
 801453a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 801453c:	2300      	movs	r3, #0
 801453e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8014540:	687b      	ldr	r3, [r7, #4]
 8014542:	2201      	movs	r2, #1
 8014544:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8014548:	687b      	ldr	r3, [r7, #4]
 801454a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801454e:	2b00      	cmp	r3, #0
 8014550:	d00e      	beq.n	8014570 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8014552:	687b      	ldr	r3, [r7, #4]
 8014554:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014558:	685b      	ldr	r3, [r3, #4]
 801455a:	687a      	ldr	r2, [r7, #4]
 801455c:	6852      	ldr	r2, [r2, #4]
 801455e:	b2d2      	uxtb	r2, r2
 8014560:	4611      	mov	r1, r2
 8014562:	6878      	ldr	r0, [r7, #4]
 8014564:	4798      	blx	r3
 8014566:	4603      	mov	r3, r0
 8014568:	2b00      	cmp	r3, #0
 801456a:	d001      	beq.n	8014570 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 801456c:	2303      	movs	r3, #3
 801456e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8014570:	7bfb      	ldrb	r3, [r7, #15]
}
 8014572:	4618      	mov	r0, r3
 8014574:	3710      	adds	r7, #16
 8014576:	46bd      	mov	sp, r7
 8014578:	bd80      	pop	{r7, pc}

0801457a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 801457a:	b480      	push	{r7}
 801457c:	b083      	sub	sp, #12
 801457e:	af00      	add	r7, sp, #0
 8014580:	6078      	str	r0, [r7, #4]
 8014582:	460b      	mov	r3, r1
 8014584:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8014586:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8014588:	4618      	mov	r0, r3
 801458a:	370c      	adds	r7, #12
 801458c:	46bd      	mov	sp, r7
 801458e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014592:	4770      	bx	lr

08014594 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8014594:	b480      	push	{r7}
 8014596:	b083      	sub	sp, #12
 8014598:	af00      	add	r7, sp, #0
 801459a:	6078      	str	r0, [r7, #4]
 801459c:	460b      	mov	r3, r1
 801459e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80145a0:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80145a2:	4618      	mov	r0, r3
 80145a4:	370c      	adds	r7, #12
 80145a6:	46bd      	mov	sp, r7
 80145a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145ac:	4770      	bx	lr

080145ae <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80145ae:	b580      	push	{r7, lr}
 80145b0:	b086      	sub	sp, #24
 80145b2:	af00      	add	r7, sp, #0
 80145b4:	6078      	str	r0, [r7, #4]
 80145b6:	460b      	mov	r3, r1
 80145b8:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80145ba:	687b      	ldr	r3, [r7, #4]
 80145bc:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80145be:	687b      	ldr	r3, [r7, #4]
 80145c0:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80145c2:	2300      	movs	r3, #0
 80145c4:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80145c6:	68fb      	ldr	r3, [r7, #12]
 80145c8:	885b      	ldrh	r3, [r3, #2]
 80145ca:	b29a      	uxth	r2, r3
 80145cc:	68fb      	ldr	r3, [r7, #12]
 80145ce:	781b      	ldrb	r3, [r3, #0]
 80145d0:	b29b      	uxth	r3, r3
 80145d2:	429a      	cmp	r2, r3
 80145d4:	d920      	bls.n	8014618 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 80145d6:	68fb      	ldr	r3, [r7, #12]
 80145d8:	781b      	ldrb	r3, [r3, #0]
 80145da:	b29b      	uxth	r3, r3
 80145dc:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80145de:	e013      	b.n	8014608 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80145e0:	f107 030a 	add.w	r3, r7, #10
 80145e4:	4619      	mov	r1, r3
 80145e6:	6978      	ldr	r0, [r7, #20]
 80145e8:	f000 f81b 	bl	8014622 <USBD_GetNextDesc>
 80145ec:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80145ee:	697b      	ldr	r3, [r7, #20]
 80145f0:	785b      	ldrb	r3, [r3, #1]
 80145f2:	2b05      	cmp	r3, #5
 80145f4:	d108      	bne.n	8014608 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80145f6:	697b      	ldr	r3, [r7, #20]
 80145f8:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80145fa:	693b      	ldr	r3, [r7, #16]
 80145fc:	789b      	ldrb	r3, [r3, #2]
 80145fe:	78fa      	ldrb	r2, [r7, #3]
 8014600:	429a      	cmp	r2, r3
 8014602:	d008      	beq.n	8014616 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8014604:	2300      	movs	r3, #0
 8014606:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8014608:	68fb      	ldr	r3, [r7, #12]
 801460a:	885b      	ldrh	r3, [r3, #2]
 801460c:	b29a      	uxth	r2, r3
 801460e:	897b      	ldrh	r3, [r7, #10]
 8014610:	429a      	cmp	r2, r3
 8014612:	d8e5      	bhi.n	80145e0 <USBD_GetEpDesc+0x32>
 8014614:	e000      	b.n	8014618 <USBD_GetEpDesc+0x6a>
          break;
 8014616:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8014618:	693b      	ldr	r3, [r7, #16]
}
 801461a:	4618      	mov	r0, r3
 801461c:	3718      	adds	r7, #24
 801461e:	46bd      	mov	sp, r7
 8014620:	bd80      	pop	{r7, pc}

08014622 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8014622:	b480      	push	{r7}
 8014624:	b085      	sub	sp, #20
 8014626:	af00      	add	r7, sp, #0
 8014628:	6078      	str	r0, [r7, #4]
 801462a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 801462c:	687b      	ldr	r3, [r7, #4]
 801462e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8014630:	683b      	ldr	r3, [r7, #0]
 8014632:	881a      	ldrh	r2, [r3, #0]
 8014634:	68fb      	ldr	r3, [r7, #12]
 8014636:	781b      	ldrb	r3, [r3, #0]
 8014638:	b29b      	uxth	r3, r3
 801463a:	4413      	add	r3, r2
 801463c:	b29a      	uxth	r2, r3
 801463e:	683b      	ldr	r3, [r7, #0]
 8014640:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8014642:	68fb      	ldr	r3, [r7, #12]
 8014644:	781b      	ldrb	r3, [r3, #0]
 8014646:	461a      	mov	r2, r3
 8014648:	687b      	ldr	r3, [r7, #4]
 801464a:	4413      	add	r3, r2
 801464c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 801464e:	68fb      	ldr	r3, [r7, #12]
}
 8014650:	4618      	mov	r0, r3
 8014652:	3714      	adds	r7, #20
 8014654:	46bd      	mov	sp, r7
 8014656:	f85d 7b04 	ldr.w	r7, [sp], #4
 801465a:	4770      	bx	lr

0801465c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 801465c:	b480      	push	{r7}
 801465e:	b087      	sub	sp, #28
 8014660:	af00      	add	r7, sp, #0
 8014662:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8014664:	687b      	ldr	r3, [r7, #4]
 8014666:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8014668:	697b      	ldr	r3, [r7, #20]
 801466a:	781b      	ldrb	r3, [r3, #0]
 801466c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 801466e:	697b      	ldr	r3, [r7, #20]
 8014670:	3301      	adds	r3, #1
 8014672:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8014674:	697b      	ldr	r3, [r7, #20]
 8014676:	781b      	ldrb	r3, [r3, #0]
 8014678:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 801467a:	8a3b      	ldrh	r3, [r7, #16]
 801467c:	021b      	lsls	r3, r3, #8
 801467e:	b21a      	sxth	r2, r3
 8014680:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8014684:	4313      	orrs	r3, r2
 8014686:	b21b      	sxth	r3, r3
 8014688:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 801468a:	89fb      	ldrh	r3, [r7, #14]
}
 801468c:	4618      	mov	r0, r3
 801468e:	371c      	adds	r7, #28
 8014690:	46bd      	mov	sp, r7
 8014692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014696:	4770      	bx	lr

08014698 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014698:	b580      	push	{r7, lr}
 801469a:	b084      	sub	sp, #16
 801469c:	af00      	add	r7, sp, #0
 801469e:	6078      	str	r0, [r7, #4]
 80146a0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80146a2:	2300      	movs	r3, #0
 80146a4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80146a6:	683b      	ldr	r3, [r7, #0]
 80146a8:	781b      	ldrb	r3, [r3, #0]
 80146aa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80146ae:	2b40      	cmp	r3, #64	; 0x40
 80146b0:	d005      	beq.n	80146be <USBD_StdDevReq+0x26>
 80146b2:	2b40      	cmp	r3, #64	; 0x40
 80146b4:	d857      	bhi.n	8014766 <USBD_StdDevReq+0xce>
 80146b6:	2b00      	cmp	r3, #0
 80146b8:	d00f      	beq.n	80146da <USBD_StdDevReq+0x42>
 80146ba:	2b20      	cmp	r3, #32
 80146bc:	d153      	bne.n	8014766 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80146be:	687b      	ldr	r3, [r7, #4]
 80146c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80146c4:	687b      	ldr	r3, [r7, #4]
 80146c6:	32ae      	adds	r2, #174	; 0xae
 80146c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80146cc:	689b      	ldr	r3, [r3, #8]
 80146ce:	6839      	ldr	r1, [r7, #0]
 80146d0:	6878      	ldr	r0, [r7, #4]
 80146d2:	4798      	blx	r3
 80146d4:	4603      	mov	r3, r0
 80146d6:	73fb      	strb	r3, [r7, #15]
      break;
 80146d8:	e04a      	b.n	8014770 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80146da:	683b      	ldr	r3, [r7, #0]
 80146dc:	785b      	ldrb	r3, [r3, #1]
 80146de:	2b09      	cmp	r3, #9
 80146e0:	d83b      	bhi.n	801475a <USBD_StdDevReq+0xc2>
 80146e2:	a201      	add	r2, pc, #4	; (adr r2, 80146e8 <USBD_StdDevReq+0x50>)
 80146e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80146e8:	0801473d 	.word	0x0801473d
 80146ec:	08014751 	.word	0x08014751
 80146f0:	0801475b 	.word	0x0801475b
 80146f4:	08014747 	.word	0x08014747
 80146f8:	0801475b 	.word	0x0801475b
 80146fc:	0801471b 	.word	0x0801471b
 8014700:	08014711 	.word	0x08014711
 8014704:	0801475b 	.word	0x0801475b
 8014708:	08014733 	.word	0x08014733
 801470c:	08014725 	.word	0x08014725
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8014710:	6839      	ldr	r1, [r7, #0]
 8014712:	6878      	ldr	r0, [r7, #4]
 8014714:	f000 fa3c 	bl	8014b90 <USBD_GetDescriptor>
          break;
 8014718:	e024      	b.n	8014764 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 801471a:	6839      	ldr	r1, [r7, #0]
 801471c:	6878      	ldr	r0, [r7, #4]
 801471e:	f000 fba1 	bl	8014e64 <USBD_SetAddress>
          break;
 8014722:	e01f      	b.n	8014764 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8014724:	6839      	ldr	r1, [r7, #0]
 8014726:	6878      	ldr	r0, [r7, #4]
 8014728:	f000 fbe0 	bl	8014eec <USBD_SetConfig>
 801472c:	4603      	mov	r3, r0
 801472e:	73fb      	strb	r3, [r7, #15]
          break;
 8014730:	e018      	b.n	8014764 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8014732:	6839      	ldr	r1, [r7, #0]
 8014734:	6878      	ldr	r0, [r7, #4]
 8014736:	f000 fc83 	bl	8015040 <USBD_GetConfig>
          break;
 801473a:	e013      	b.n	8014764 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 801473c:	6839      	ldr	r1, [r7, #0]
 801473e:	6878      	ldr	r0, [r7, #4]
 8014740:	f000 fcb4 	bl	80150ac <USBD_GetStatus>
          break;
 8014744:	e00e      	b.n	8014764 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8014746:	6839      	ldr	r1, [r7, #0]
 8014748:	6878      	ldr	r0, [r7, #4]
 801474a:	f000 fce3 	bl	8015114 <USBD_SetFeature>
          break;
 801474e:	e009      	b.n	8014764 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8014750:	6839      	ldr	r1, [r7, #0]
 8014752:	6878      	ldr	r0, [r7, #4]
 8014754:	f000 fd07 	bl	8015166 <USBD_ClrFeature>
          break;
 8014758:	e004      	b.n	8014764 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 801475a:	6839      	ldr	r1, [r7, #0]
 801475c:	6878      	ldr	r0, [r7, #4]
 801475e:	f000 fd5e 	bl	801521e <USBD_CtlError>
          break;
 8014762:	bf00      	nop
      }
      break;
 8014764:	e004      	b.n	8014770 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8014766:	6839      	ldr	r1, [r7, #0]
 8014768:	6878      	ldr	r0, [r7, #4]
 801476a:	f000 fd58 	bl	801521e <USBD_CtlError>
      break;
 801476e:	bf00      	nop
  }

  return ret;
 8014770:	7bfb      	ldrb	r3, [r7, #15]
}
 8014772:	4618      	mov	r0, r3
 8014774:	3710      	adds	r7, #16
 8014776:	46bd      	mov	sp, r7
 8014778:	bd80      	pop	{r7, pc}
 801477a:	bf00      	nop

0801477c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801477c:	b580      	push	{r7, lr}
 801477e:	b084      	sub	sp, #16
 8014780:	af00      	add	r7, sp, #0
 8014782:	6078      	str	r0, [r7, #4]
 8014784:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8014786:	2300      	movs	r3, #0
 8014788:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801478a:	683b      	ldr	r3, [r7, #0]
 801478c:	781b      	ldrb	r3, [r3, #0]
 801478e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8014792:	2b40      	cmp	r3, #64	; 0x40
 8014794:	d005      	beq.n	80147a2 <USBD_StdItfReq+0x26>
 8014796:	2b40      	cmp	r3, #64	; 0x40
 8014798:	d852      	bhi.n	8014840 <USBD_StdItfReq+0xc4>
 801479a:	2b00      	cmp	r3, #0
 801479c:	d001      	beq.n	80147a2 <USBD_StdItfReq+0x26>
 801479e:	2b20      	cmp	r3, #32
 80147a0:	d14e      	bne.n	8014840 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80147a2:	687b      	ldr	r3, [r7, #4]
 80147a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80147a8:	b2db      	uxtb	r3, r3
 80147aa:	3b01      	subs	r3, #1
 80147ac:	2b02      	cmp	r3, #2
 80147ae:	d840      	bhi.n	8014832 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80147b0:	683b      	ldr	r3, [r7, #0]
 80147b2:	889b      	ldrh	r3, [r3, #4]
 80147b4:	b2db      	uxtb	r3, r3
 80147b6:	2b01      	cmp	r3, #1
 80147b8:	d836      	bhi.n	8014828 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80147ba:	683b      	ldr	r3, [r7, #0]
 80147bc:	889b      	ldrh	r3, [r3, #4]
 80147be:	b2db      	uxtb	r3, r3
 80147c0:	4619      	mov	r1, r3
 80147c2:	6878      	ldr	r0, [r7, #4]
 80147c4:	f7ff fed9 	bl	801457a <USBD_CoreFindIF>
 80147c8:	4603      	mov	r3, r0
 80147ca:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80147cc:	7bbb      	ldrb	r3, [r7, #14]
 80147ce:	2bff      	cmp	r3, #255	; 0xff
 80147d0:	d01d      	beq.n	801480e <USBD_StdItfReq+0x92>
 80147d2:	7bbb      	ldrb	r3, [r7, #14]
 80147d4:	2b00      	cmp	r3, #0
 80147d6:	d11a      	bne.n	801480e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80147d8:	7bba      	ldrb	r2, [r7, #14]
 80147da:	687b      	ldr	r3, [r7, #4]
 80147dc:	32ae      	adds	r2, #174	; 0xae
 80147de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80147e2:	689b      	ldr	r3, [r3, #8]
 80147e4:	2b00      	cmp	r3, #0
 80147e6:	d00f      	beq.n	8014808 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80147e8:	7bba      	ldrb	r2, [r7, #14]
 80147ea:	687b      	ldr	r3, [r7, #4]
 80147ec:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80147f0:	7bba      	ldrb	r2, [r7, #14]
 80147f2:	687b      	ldr	r3, [r7, #4]
 80147f4:	32ae      	adds	r2, #174	; 0xae
 80147f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80147fa:	689b      	ldr	r3, [r3, #8]
 80147fc:	6839      	ldr	r1, [r7, #0]
 80147fe:	6878      	ldr	r0, [r7, #4]
 8014800:	4798      	blx	r3
 8014802:	4603      	mov	r3, r0
 8014804:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8014806:	e004      	b.n	8014812 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8014808:	2303      	movs	r3, #3
 801480a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 801480c:	e001      	b.n	8014812 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 801480e:	2303      	movs	r3, #3
 8014810:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8014812:	683b      	ldr	r3, [r7, #0]
 8014814:	88db      	ldrh	r3, [r3, #6]
 8014816:	2b00      	cmp	r3, #0
 8014818:	d110      	bne.n	801483c <USBD_StdItfReq+0xc0>
 801481a:	7bfb      	ldrb	r3, [r7, #15]
 801481c:	2b00      	cmp	r3, #0
 801481e:	d10d      	bne.n	801483c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8014820:	6878      	ldr	r0, [r7, #4]
 8014822:	f000 fdc7 	bl	80153b4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8014826:	e009      	b.n	801483c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8014828:	6839      	ldr	r1, [r7, #0]
 801482a:	6878      	ldr	r0, [r7, #4]
 801482c:	f000 fcf7 	bl	801521e <USBD_CtlError>
          break;
 8014830:	e004      	b.n	801483c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8014832:	6839      	ldr	r1, [r7, #0]
 8014834:	6878      	ldr	r0, [r7, #4]
 8014836:	f000 fcf2 	bl	801521e <USBD_CtlError>
          break;
 801483a:	e000      	b.n	801483e <USBD_StdItfReq+0xc2>
          break;
 801483c:	bf00      	nop
      }
      break;
 801483e:	e004      	b.n	801484a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8014840:	6839      	ldr	r1, [r7, #0]
 8014842:	6878      	ldr	r0, [r7, #4]
 8014844:	f000 fceb 	bl	801521e <USBD_CtlError>
      break;
 8014848:	bf00      	nop
  }

  return ret;
 801484a:	7bfb      	ldrb	r3, [r7, #15]
}
 801484c:	4618      	mov	r0, r3
 801484e:	3710      	adds	r7, #16
 8014850:	46bd      	mov	sp, r7
 8014852:	bd80      	pop	{r7, pc}

08014854 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014854:	b580      	push	{r7, lr}
 8014856:	b084      	sub	sp, #16
 8014858:	af00      	add	r7, sp, #0
 801485a:	6078      	str	r0, [r7, #4]
 801485c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 801485e:	2300      	movs	r3, #0
 8014860:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8014862:	683b      	ldr	r3, [r7, #0]
 8014864:	889b      	ldrh	r3, [r3, #4]
 8014866:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8014868:	683b      	ldr	r3, [r7, #0]
 801486a:	781b      	ldrb	r3, [r3, #0]
 801486c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8014870:	2b40      	cmp	r3, #64	; 0x40
 8014872:	d007      	beq.n	8014884 <USBD_StdEPReq+0x30>
 8014874:	2b40      	cmp	r3, #64	; 0x40
 8014876:	f200 817f 	bhi.w	8014b78 <USBD_StdEPReq+0x324>
 801487a:	2b00      	cmp	r3, #0
 801487c:	d02a      	beq.n	80148d4 <USBD_StdEPReq+0x80>
 801487e:	2b20      	cmp	r3, #32
 8014880:	f040 817a 	bne.w	8014b78 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8014884:	7bbb      	ldrb	r3, [r7, #14]
 8014886:	4619      	mov	r1, r3
 8014888:	6878      	ldr	r0, [r7, #4]
 801488a:	f7ff fe83 	bl	8014594 <USBD_CoreFindEP>
 801488e:	4603      	mov	r3, r0
 8014890:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8014892:	7b7b      	ldrb	r3, [r7, #13]
 8014894:	2bff      	cmp	r3, #255	; 0xff
 8014896:	f000 8174 	beq.w	8014b82 <USBD_StdEPReq+0x32e>
 801489a:	7b7b      	ldrb	r3, [r7, #13]
 801489c:	2b00      	cmp	r3, #0
 801489e:	f040 8170 	bne.w	8014b82 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80148a2:	7b7a      	ldrb	r2, [r7, #13]
 80148a4:	687b      	ldr	r3, [r7, #4]
 80148a6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80148aa:	7b7a      	ldrb	r2, [r7, #13]
 80148ac:	687b      	ldr	r3, [r7, #4]
 80148ae:	32ae      	adds	r2, #174	; 0xae
 80148b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80148b4:	689b      	ldr	r3, [r3, #8]
 80148b6:	2b00      	cmp	r3, #0
 80148b8:	f000 8163 	beq.w	8014b82 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80148bc:	7b7a      	ldrb	r2, [r7, #13]
 80148be:	687b      	ldr	r3, [r7, #4]
 80148c0:	32ae      	adds	r2, #174	; 0xae
 80148c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80148c6:	689b      	ldr	r3, [r3, #8]
 80148c8:	6839      	ldr	r1, [r7, #0]
 80148ca:	6878      	ldr	r0, [r7, #4]
 80148cc:	4798      	blx	r3
 80148ce:	4603      	mov	r3, r0
 80148d0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80148d2:	e156      	b.n	8014b82 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80148d4:	683b      	ldr	r3, [r7, #0]
 80148d6:	785b      	ldrb	r3, [r3, #1]
 80148d8:	2b03      	cmp	r3, #3
 80148da:	d008      	beq.n	80148ee <USBD_StdEPReq+0x9a>
 80148dc:	2b03      	cmp	r3, #3
 80148de:	f300 8145 	bgt.w	8014b6c <USBD_StdEPReq+0x318>
 80148e2:	2b00      	cmp	r3, #0
 80148e4:	f000 809b 	beq.w	8014a1e <USBD_StdEPReq+0x1ca>
 80148e8:	2b01      	cmp	r3, #1
 80148ea:	d03c      	beq.n	8014966 <USBD_StdEPReq+0x112>
 80148ec:	e13e      	b.n	8014b6c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80148ee:	687b      	ldr	r3, [r7, #4]
 80148f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80148f4:	b2db      	uxtb	r3, r3
 80148f6:	2b02      	cmp	r3, #2
 80148f8:	d002      	beq.n	8014900 <USBD_StdEPReq+0xac>
 80148fa:	2b03      	cmp	r3, #3
 80148fc:	d016      	beq.n	801492c <USBD_StdEPReq+0xd8>
 80148fe:	e02c      	b.n	801495a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8014900:	7bbb      	ldrb	r3, [r7, #14]
 8014902:	2b00      	cmp	r3, #0
 8014904:	d00d      	beq.n	8014922 <USBD_StdEPReq+0xce>
 8014906:	7bbb      	ldrb	r3, [r7, #14]
 8014908:	2b80      	cmp	r3, #128	; 0x80
 801490a:	d00a      	beq.n	8014922 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 801490c:	7bbb      	ldrb	r3, [r7, #14]
 801490e:	4619      	mov	r1, r3
 8014910:	6878      	ldr	r0, [r7, #4]
 8014912:	f001 f9d1 	bl	8015cb8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8014916:	2180      	movs	r1, #128	; 0x80
 8014918:	6878      	ldr	r0, [r7, #4]
 801491a:	f001 f9cd 	bl	8015cb8 <USBD_LL_StallEP>
 801491e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8014920:	e020      	b.n	8014964 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8014922:	6839      	ldr	r1, [r7, #0]
 8014924:	6878      	ldr	r0, [r7, #4]
 8014926:	f000 fc7a 	bl	801521e <USBD_CtlError>
              break;
 801492a:	e01b      	b.n	8014964 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 801492c:	683b      	ldr	r3, [r7, #0]
 801492e:	885b      	ldrh	r3, [r3, #2]
 8014930:	2b00      	cmp	r3, #0
 8014932:	d10e      	bne.n	8014952 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8014934:	7bbb      	ldrb	r3, [r7, #14]
 8014936:	2b00      	cmp	r3, #0
 8014938:	d00b      	beq.n	8014952 <USBD_StdEPReq+0xfe>
 801493a:	7bbb      	ldrb	r3, [r7, #14]
 801493c:	2b80      	cmp	r3, #128	; 0x80
 801493e:	d008      	beq.n	8014952 <USBD_StdEPReq+0xfe>
 8014940:	683b      	ldr	r3, [r7, #0]
 8014942:	88db      	ldrh	r3, [r3, #6]
 8014944:	2b00      	cmp	r3, #0
 8014946:	d104      	bne.n	8014952 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8014948:	7bbb      	ldrb	r3, [r7, #14]
 801494a:	4619      	mov	r1, r3
 801494c:	6878      	ldr	r0, [r7, #4]
 801494e:	f001 f9b3 	bl	8015cb8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8014952:	6878      	ldr	r0, [r7, #4]
 8014954:	f000 fd2e 	bl	80153b4 <USBD_CtlSendStatus>

              break;
 8014958:	e004      	b.n	8014964 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 801495a:	6839      	ldr	r1, [r7, #0]
 801495c:	6878      	ldr	r0, [r7, #4]
 801495e:	f000 fc5e 	bl	801521e <USBD_CtlError>
              break;
 8014962:	bf00      	nop
          }
          break;
 8014964:	e107      	b.n	8014b76 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8014966:	687b      	ldr	r3, [r7, #4]
 8014968:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801496c:	b2db      	uxtb	r3, r3
 801496e:	2b02      	cmp	r3, #2
 8014970:	d002      	beq.n	8014978 <USBD_StdEPReq+0x124>
 8014972:	2b03      	cmp	r3, #3
 8014974:	d016      	beq.n	80149a4 <USBD_StdEPReq+0x150>
 8014976:	e04b      	b.n	8014a10 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8014978:	7bbb      	ldrb	r3, [r7, #14]
 801497a:	2b00      	cmp	r3, #0
 801497c:	d00d      	beq.n	801499a <USBD_StdEPReq+0x146>
 801497e:	7bbb      	ldrb	r3, [r7, #14]
 8014980:	2b80      	cmp	r3, #128	; 0x80
 8014982:	d00a      	beq.n	801499a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8014984:	7bbb      	ldrb	r3, [r7, #14]
 8014986:	4619      	mov	r1, r3
 8014988:	6878      	ldr	r0, [r7, #4]
 801498a:	f001 f995 	bl	8015cb8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 801498e:	2180      	movs	r1, #128	; 0x80
 8014990:	6878      	ldr	r0, [r7, #4]
 8014992:	f001 f991 	bl	8015cb8 <USBD_LL_StallEP>
 8014996:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8014998:	e040      	b.n	8014a1c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 801499a:	6839      	ldr	r1, [r7, #0]
 801499c:	6878      	ldr	r0, [r7, #4]
 801499e:	f000 fc3e 	bl	801521e <USBD_CtlError>
              break;
 80149a2:	e03b      	b.n	8014a1c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80149a4:	683b      	ldr	r3, [r7, #0]
 80149a6:	885b      	ldrh	r3, [r3, #2]
 80149a8:	2b00      	cmp	r3, #0
 80149aa:	d136      	bne.n	8014a1a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80149ac:	7bbb      	ldrb	r3, [r7, #14]
 80149ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80149b2:	2b00      	cmp	r3, #0
 80149b4:	d004      	beq.n	80149c0 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80149b6:	7bbb      	ldrb	r3, [r7, #14]
 80149b8:	4619      	mov	r1, r3
 80149ba:	6878      	ldr	r0, [r7, #4]
 80149bc:	f001 f99b 	bl	8015cf6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80149c0:	6878      	ldr	r0, [r7, #4]
 80149c2:	f000 fcf7 	bl	80153b4 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80149c6:	7bbb      	ldrb	r3, [r7, #14]
 80149c8:	4619      	mov	r1, r3
 80149ca:	6878      	ldr	r0, [r7, #4]
 80149cc:	f7ff fde2 	bl	8014594 <USBD_CoreFindEP>
 80149d0:	4603      	mov	r3, r0
 80149d2:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80149d4:	7b7b      	ldrb	r3, [r7, #13]
 80149d6:	2bff      	cmp	r3, #255	; 0xff
 80149d8:	d01f      	beq.n	8014a1a <USBD_StdEPReq+0x1c6>
 80149da:	7b7b      	ldrb	r3, [r7, #13]
 80149dc:	2b00      	cmp	r3, #0
 80149de:	d11c      	bne.n	8014a1a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80149e0:	7b7a      	ldrb	r2, [r7, #13]
 80149e2:	687b      	ldr	r3, [r7, #4]
 80149e4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80149e8:	7b7a      	ldrb	r2, [r7, #13]
 80149ea:	687b      	ldr	r3, [r7, #4]
 80149ec:	32ae      	adds	r2, #174	; 0xae
 80149ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80149f2:	689b      	ldr	r3, [r3, #8]
 80149f4:	2b00      	cmp	r3, #0
 80149f6:	d010      	beq.n	8014a1a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80149f8:	7b7a      	ldrb	r2, [r7, #13]
 80149fa:	687b      	ldr	r3, [r7, #4]
 80149fc:	32ae      	adds	r2, #174	; 0xae
 80149fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014a02:	689b      	ldr	r3, [r3, #8]
 8014a04:	6839      	ldr	r1, [r7, #0]
 8014a06:	6878      	ldr	r0, [r7, #4]
 8014a08:	4798      	blx	r3
 8014a0a:	4603      	mov	r3, r0
 8014a0c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8014a0e:	e004      	b.n	8014a1a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8014a10:	6839      	ldr	r1, [r7, #0]
 8014a12:	6878      	ldr	r0, [r7, #4]
 8014a14:	f000 fc03 	bl	801521e <USBD_CtlError>
              break;
 8014a18:	e000      	b.n	8014a1c <USBD_StdEPReq+0x1c8>
              break;
 8014a1a:	bf00      	nop
          }
          break;
 8014a1c:	e0ab      	b.n	8014b76 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8014a1e:	687b      	ldr	r3, [r7, #4]
 8014a20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014a24:	b2db      	uxtb	r3, r3
 8014a26:	2b02      	cmp	r3, #2
 8014a28:	d002      	beq.n	8014a30 <USBD_StdEPReq+0x1dc>
 8014a2a:	2b03      	cmp	r3, #3
 8014a2c:	d032      	beq.n	8014a94 <USBD_StdEPReq+0x240>
 8014a2e:	e097      	b.n	8014b60 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8014a30:	7bbb      	ldrb	r3, [r7, #14]
 8014a32:	2b00      	cmp	r3, #0
 8014a34:	d007      	beq.n	8014a46 <USBD_StdEPReq+0x1f2>
 8014a36:	7bbb      	ldrb	r3, [r7, #14]
 8014a38:	2b80      	cmp	r3, #128	; 0x80
 8014a3a:	d004      	beq.n	8014a46 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8014a3c:	6839      	ldr	r1, [r7, #0]
 8014a3e:	6878      	ldr	r0, [r7, #4]
 8014a40:	f000 fbed 	bl	801521e <USBD_CtlError>
                break;
 8014a44:	e091      	b.n	8014b6a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8014a46:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8014a4a:	2b00      	cmp	r3, #0
 8014a4c:	da0b      	bge.n	8014a66 <USBD_StdEPReq+0x212>
 8014a4e:	7bbb      	ldrb	r3, [r7, #14]
 8014a50:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8014a54:	4613      	mov	r3, r2
 8014a56:	009b      	lsls	r3, r3, #2
 8014a58:	4413      	add	r3, r2
 8014a5a:	009b      	lsls	r3, r3, #2
 8014a5c:	3310      	adds	r3, #16
 8014a5e:	687a      	ldr	r2, [r7, #4]
 8014a60:	4413      	add	r3, r2
 8014a62:	3304      	adds	r3, #4
 8014a64:	e00b      	b.n	8014a7e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8014a66:	7bbb      	ldrb	r3, [r7, #14]
 8014a68:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8014a6c:	4613      	mov	r3, r2
 8014a6e:	009b      	lsls	r3, r3, #2
 8014a70:	4413      	add	r3, r2
 8014a72:	009b      	lsls	r3, r3, #2
 8014a74:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8014a78:	687a      	ldr	r2, [r7, #4]
 8014a7a:	4413      	add	r3, r2
 8014a7c:	3304      	adds	r3, #4
 8014a7e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8014a80:	68bb      	ldr	r3, [r7, #8]
 8014a82:	2200      	movs	r2, #0
 8014a84:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8014a86:	68bb      	ldr	r3, [r7, #8]
 8014a88:	2202      	movs	r2, #2
 8014a8a:	4619      	mov	r1, r3
 8014a8c:	6878      	ldr	r0, [r7, #4]
 8014a8e:	f000 fc37 	bl	8015300 <USBD_CtlSendData>
              break;
 8014a92:	e06a      	b.n	8014b6a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8014a94:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8014a98:	2b00      	cmp	r3, #0
 8014a9a:	da11      	bge.n	8014ac0 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8014a9c:	7bbb      	ldrb	r3, [r7, #14]
 8014a9e:	f003 020f 	and.w	r2, r3, #15
 8014aa2:	6879      	ldr	r1, [r7, #4]
 8014aa4:	4613      	mov	r3, r2
 8014aa6:	009b      	lsls	r3, r3, #2
 8014aa8:	4413      	add	r3, r2
 8014aaa:	009b      	lsls	r3, r3, #2
 8014aac:	440b      	add	r3, r1
 8014aae:	3324      	adds	r3, #36	; 0x24
 8014ab0:	881b      	ldrh	r3, [r3, #0]
 8014ab2:	2b00      	cmp	r3, #0
 8014ab4:	d117      	bne.n	8014ae6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8014ab6:	6839      	ldr	r1, [r7, #0]
 8014ab8:	6878      	ldr	r0, [r7, #4]
 8014aba:	f000 fbb0 	bl	801521e <USBD_CtlError>
                  break;
 8014abe:	e054      	b.n	8014b6a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8014ac0:	7bbb      	ldrb	r3, [r7, #14]
 8014ac2:	f003 020f 	and.w	r2, r3, #15
 8014ac6:	6879      	ldr	r1, [r7, #4]
 8014ac8:	4613      	mov	r3, r2
 8014aca:	009b      	lsls	r3, r3, #2
 8014acc:	4413      	add	r3, r2
 8014ace:	009b      	lsls	r3, r3, #2
 8014ad0:	440b      	add	r3, r1
 8014ad2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8014ad6:	881b      	ldrh	r3, [r3, #0]
 8014ad8:	2b00      	cmp	r3, #0
 8014ada:	d104      	bne.n	8014ae6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8014adc:	6839      	ldr	r1, [r7, #0]
 8014ade:	6878      	ldr	r0, [r7, #4]
 8014ae0:	f000 fb9d 	bl	801521e <USBD_CtlError>
                  break;
 8014ae4:	e041      	b.n	8014b6a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8014ae6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8014aea:	2b00      	cmp	r3, #0
 8014aec:	da0b      	bge.n	8014b06 <USBD_StdEPReq+0x2b2>
 8014aee:	7bbb      	ldrb	r3, [r7, #14]
 8014af0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8014af4:	4613      	mov	r3, r2
 8014af6:	009b      	lsls	r3, r3, #2
 8014af8:	4413      	add	r3, r2
 8014afa:	009b      	lsls	r3, r3, #2
 8014afc:	3310      	adds	r3, #16
 8014afe:	687a      	ldr	r2, [r7, #4]
 8014b00:	4413      	add	r3, r2
 8014b02:	3304      	adds	r3, #4
 8014b04:	e00b      	b.n	8014b1e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8014b06:	7bbb      	ldrb	r3, [r7, #14]
 8014b08:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8014b0c:	4613      	mov	r3, r2
 8014b0e:	009b      	lsls	r3, r3, #2
 8014b10:	4413      	add	r3, r2
 8014b12:	009b      	lsls	r3, r3, #2
 8014b14:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8014b18:	687a      	ldr	r2, [r7, #4]
 8014b1a:	4413      	add	r3, r2
 8014b1c:	3304      	adds	r3, #4
 8014b1e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8014b20:	7bbb      	ldrb	r3, [r7, #14]
 8014b22:	2b00      	cmp	r3, #0
 8014b24:	d002      	beq.n	8014b2c <USBD_StdEPReq+0x2d8>
 8014b26:	7bbb      	ldrb	r3, [r7, #14]
 8014b28:	2b80      	cmp	r3, #128	; 0x80
 8014b2a:	d103      	bne.n	8014b34 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8014b2c:	68bb      	ldr	r3, [r7, #8]
 8014b2e:	2200      	movs	r2, #0
 8014b30:	601a      	str	r2, [r3, #0]
 8014b32:	e00e      	b.n	8014b52 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8014b34:	7bbb      	ldrb	r3, [r7, #14]
 8014b36:	4619      	mov	r1, r3
 8014b38:	6878      	ldr	r0, [r7, #4]
 8014b3a:	f001 f8fb 	bl	8015d34 <USBD_LL_IsStallEP>
 8014b3e:	4603      	mov	r3, r0
 8014b40:	2b00      	cmp	r3, #0
 8014b42:	d003      	beq.n	8014b4c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8014b44:	68bb      	ldr	r3, [r7, #8]
 8014b46:	2201      	movs	r2, #1
 8014b48:	601a      	str	r2, [r3, #0]
 8014b4a:	e002      	b.n	8014b52 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8014b4c:	68bb      	ldr	r3, [r7, #8]
 8014b4e:	2200      	movs	r2, #0
 8014b50:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8014b52:	68bb      	ldr	r3, [r7, #8]
 8014b54:	2202      	movs	r2, #2
 8014b56:	4619      	mov	r1, r3
 8014b58:	6878      	ldr	r0, [r7, #4]
 8014b5a:	f000 fbd1 	bl	8015300 <USBD_CtlSendData>
              break;
 8014b5e:	e004      	b.n	8014b6a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8014b60:	6839      	ldr	r1, [r7, #0]
 8014b62:	6878      	ldr	r0, [r7, #4]
 8014b64:	f000 fb5b 	bl	801521e <USBD_CtlError>
              break;
 8014b68:	bf00      	nop
          }
          break;
 8014b6a:	e004      	b.n	8014b76 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8014b6c:	6839      	ldr	r1, [r7, #0]
 8014b6e:	6878      	ldr	r0, [r7, #4]
 8014b70:	f000 fb55 	bl	801521e <USBD_CtlError>
          break;
 8014b74:	bf00      	nop
      }
      break;
 8014b76:	e005      	b.n	8014b84 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8014b78:	6839      	ldr	r1, [r7, #0]
 8014b7a:	6878      	ldr	r0, [r7, #4]
 8014b7c:	f000 fb4f 	bl	801521e <USBD_CtlError>
      break;
 8014b80:	e000      	b.n	8014b84 <USBD_StdEPReq+0x330>
      break;
 8014b82:	bf00      	nop
  }

  return ret;
 8014b84:	7bfb      	ldrb	r3, [r7, #15]
}
 8014b86:	4618      	mov	r0, r3
 8014b88:	3710      	adds	r7, #16
 8014b8a:	46bd      	mov	sp, r7
 8014b8c:	bd80      	pop	{r7, pc}
	...

08014b90 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014b90:	b580      	push	{r7, lr}
 8014b92:	b084      	sub	sp, #16
 8014b94:	af00      	add	r7, sp, #0
 8014b96:	6078      	str	r0, [r7, #4]
 8014b98:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8014b9a:	2300      	movs	r3, #0
 8014b9c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8014b9e:	2300      	movs	r3, #0
 8014ba0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8014ba2:	2300      	movs	r3, #0
 8014ba4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8014ba6:	683b      	ldr	r3, [r7, #0]
 8014ba8:	885b      	ldrh	r3, [r3, #2]
 8014baa:	0a1b      	lsrs	r3, r3, #8
 8014bac:	b29b      	uxth	r3, r3
 8014bae:	3b01      	subs	r3, #1
 8014bb0:	2b06      	cmp	r3, #6
 8014bb2:	f200 8128 	bhi.w	8014e06 <USBD_GetDescriptor+0x276>
 8014bb6:	a201      	add	r2, pc, #4	; (adr r2, 8014bbc <USBD_GetDescriptor+0x2c>)
 8014bb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014bbc:	08014bd9 	.word	0x08014bd9
 8014bc0:	08014bf1 	.word	0x08014bf1
 8014bc4:	08014c31 	.word	0x08014c31
 8014bc8:	08014e07 	.word	0x08014e07
 8014bcc:	08014e07 	.word	0x08014e07
 8014bd0:	08014da7 	.word	0x08014da7
 8014bd4:	08014dd3 	.word	0x08014dd3
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8014bd8:	687b      	ldr	r3, [r7, #4]
 8014bda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014bde:	681b      	ldr	r3, [r3, #0]
 8014be0:	687a      	ldr	r2, [r7, #4]
 8014be2:	7c12      	ldrb	r2, [r2, #16]
 8014be4:	f107 0108 	add.w	r1, r7, #8
 8014be8:	4610      	mov	r0, r2
 8014bea:	4798      	blx	r3
 8014bec:	60f8      	str	r0, [r7, #12]
      break;
 8014bee:	e112      	b.n	8014e16 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014bf0:	687b      	ldr	r3, [r7, #4]
 8014bf2:	7c1b      	ldrb	r3, [r3, #16]
 8014bf4:	2b00      	cmp	r3, #0
 8014bf6:	d10d      	bne.n	8014c14 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8014bf8:	687b      	ldr	r3, [r7, #4]
 8014bfa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014bfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014c00:	f107 0208 	add.w	r2, r7, #8
 8014c04:	4610      	mov	r0, r2
 8014c06:	4798      	blx	r3
 8014c08:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8014c0a:	68fb      	ldr	r3, [r7, #12]
 8014c0c:	3301      	adds	r3, #1
 8014c0e:	2202      	movs	r2, #2
 8014c10:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8014c12:	e100      	b.n	8014e16 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8014c14:	687b      	ldr	r3, [r7, #4]
 8014c16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014c1c:	f107 0208 	add.w	r2, r7, #8
 8014c20:	4610      	mov	r0, r2
 8014c22:	4798      	blx	r3
 8014c24:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8014c26:	68fb      	ldr	r3, [r7, #12]
 8014c28:	3301      	adds	r3, #1
 8014c2a:	2202      	movs	r2, #2
 8014c2c:	701a      	strb	r2, [r3, #0]
      break;
 8014c2e:	e0f2      	b.n	8014e16 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8014c30:	683b      	ldr	r3, [r7, #0]
 8014c32:	885b      	ldrh	r3, [r3, #2]
 8014c34:	b2db      	uxtb	r3, r3
 8014c36:	2b05      	cmp	r3, #5
 8014c38:	f200 80ac 	bhi.w	8014d94 <USBD_GetDescriptor+0x204>
 8014c3c:	a201      	add	r2, pc, #4	; (adr r2, 8014c44 <USBD_GetDescriptor+0xb4>)
 8014c3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014c42:	bf00      	nop
 8014c44:	08014c5d 	.word	0x08014c5d
 8014c48:	08014c91 	.word	0x08014c91
 8014c4c:	08014cc5 	.word	0x08014cc5
 8014c50:	08014cf9 	.word	0x08014cf9
 8014c54:	08014d2d 	.word	0x08014d2d
 8014c58:	08014d61 	.word	0x08014d61
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8014c5c:	687b      	ldr	r3, [r7, #4]
 8014c5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014c62:	685b      	ldr	r3, [r3, #4]
 8014c64:	2b00      	cmp	r3, #0
 8014c66:	d00b      	beq.n	8014c80 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8014c68:	687b      	ldr	r3, [r7, #4]
 8014c6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014c6e:	685b      	ldr	r3, [r3, #4]
 8014c70:	687a      	ldr	r2, [r7, #4]
 8014c72:	7c12      	ldrb	r2, [r2, #16]
 8014c74:	f107 0108 	add.w	r1, r7, #8
 8014c78:	4610      	mov	r0, r2
 8014c7a:	4798      	blx	r3
 8014c7c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014c7e:	e091      	b.n	8014da4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8014c80:	6839      	ldr	r1, [r7, #0]
 8014c82:	6878      	ldr	r0, [r7, #4]
 8014c84:	f000 facb 	bl	801521e <USBD_CtlError>
            err++;
 8014c88:	7afb      	ldrb	r3, [r7, #11]
 8014c8a:	3301      	adds	r3, #1
 8014c8c:	72fb      	strb	r3, [r7, #11]
          break;
 8014c8e:	e089      	b.n	8014da4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8014c90:	687b      	ldr	r3, [r7, #4]
 8014c92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014c96:	689b      	ldr	r3, [r3, #8]
 8014c98:	2b00      	cmp	r3, #0
 8014c9a:	d00b      	beq.n	8014cb4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8014c9c:	687b      	ldr	r3, [r7, #4]
 8014c9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014ca2:	689b      	ldr	r3, [r3, #8]
 8014ca4:	687a      	ldr	r2, [r7, #4]
 8014ca6:	7c12      	ldrb	r2, [r2, #16]
 8014ca8:	f107 0108 	add.w	r1, r7, #8
 8014cac:	4610      	mov	r0, r2
 8014cae:	4798      	blx	r3
 8014cb0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014cb2:	e077      	b.n	8014da4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8014cb4:	6839      	ldr	r1, [r7, #0]
 8014cb6:	6878      	ldr	r0, [r7, #4]
 8014cb8:	f000 fab1 	bl	801521e <USBD_CtlError>
            err++;
 8014cbc:	7afb      	ldrb	r3, [r7, #11]
 8014cbe:	3301      	adds	r3, #1
 8014cc0:	72fb      	strb	r3, [r7, #11]
          break;
 8014cc2:	e06f      	b.n	8014da4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8014cc4:	687b      	ldr	r3, [r7, #4]
 8014cc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014cca:	68db      	ldr	r3, [r3, #12]
 8014ccc:	2b00      	cmp	r3, #0
 8014cce:	d00b      	beq.n	8014ce8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8014cd0:	687b      	ldr	r3, [r7, #4]
 8014cd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014cd6:	68db      	ldr	r3, [r3, #12]
 8014cd8:	687a      	ldr	r2, [r7, #4]
 8014cda:	7c12      	ldrb	r2, [r2, #16]
 8014cdc:	f107 0108 	add.w	r1, r7, #8
 8014ce0:	4610      	mov	r0, r2
 8014ce2:	4798      	blx	r3
 8014ce4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014ce6:	e05d      	b.n	8014da4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8014ce8:	6839      	ldr	r1, [r7, #0]
 8014cea:	6878      	ldr	r0, [r7, #4]
 8014cec:	f000 fa97 	bl	801521e <USBD_CtlError>
            err++;
 8014cf0:	7afb      	ldrb	r3, [r7, #11]
 8014cf2:	3301      	adds	r3, #1
 8014cf4:	72fb      	strb	r3, [r7, #11]
          break;
 8014cf6:	e055      	b.n	8014da4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8014cf8:	687b      	ldr	r3, [r7, #4]
 8014cfa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014cfe:	691b      	ldr	r3, [r3, #16]
 8014d00:	2b00      	cmp	r3, #0
 8014d02:	d00b      	beq.n	8014d1c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8014d04:	687b      	ldr	r3, [r7, #4]
 8014d06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014d0a:	691b      	ldr	r3, [r3, #16]
 8014d0c:	687a      	ldr	r2, [r7, #4]
 8014d0e:	7c12      	ldrb	r2, [r2, #16]
 8014d10:	f107 0108 	add.w	r1, r7, #8
 8014d14:	4610      	mov	r0, r2
 8014d16:	4798      	blx	r3
 8014d18:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014d1a:	e043      	b.n	8014da4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8014d1c:	6839      	ldr	r1, [r7, #0]
 8014d1e:	6878      	ldr	r0, [r7, #4]
 8014d20:	f000 fa7d 	bl	801521e <USBD_CtlError>
            err++;
 8014d24:	7afb      	ldrb	r3, [r7, #11]
 8014d26:	3301      	adds	r3, #1
 8014d28:	72fb      	strb	r3, [r7, #11]
          break;
 8014d2a:	e03b      	b.n	8014da4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8014d2c:	687b      	ldr	r3, [r7, #4]
 8014d2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014d32:	695b      	ldr	r3, [r3, #20]
 8014d34:	2b00      	cmp	r3, #0
 8014d36:	d00b      	beq.n	8014d50 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8014d38:	687b      	ldr	r3, [r7, #4]
 8014d3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014d3e:	695b      	ldr	r3, [r3, #20]
 8014d40:	687a      	ldr	r2, [r7, #4]
 8014d42:	7c12      	ldrb	r2, [r2, #16]
 8014d44:	f107 0108 	add.w	r1, r7, #8
 8014d48:	4610      	mov	r0, r2
 8014d4a:	4798      	blx	r3
 8014d4c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014d4e:	e029      	b.n	8014da4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8014d50:	6839      	ldr	r1, [r7, #0]
 8014d52:	6878      	ldr	r0, [r7, #4]
 8014d54:	f000 fa63 	bl	801521e <USBD_CtlError>
            err++;
 8014d58:	7afb      	ldrb	r3, [r7, #11]
 8014d5a:	3301      	adds	r3, #1
 8014d5c:	72fb      	strb	r3, [r7, #11]
          break;
 8014d5e:	e021      	b.n	8014da4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8014d60:	687b      	ldr	r3, [r7, #4]
 8014d62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014d66:	699b      	ldr	r3, [r3, #24]
 8014d68:	2b00      	cmp	r3, #0
 8014d6a:	d00b      	beq.n	8014d84 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8014d6c:	687b      	ldr	r3, [r7, #4]
 8014d6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014d72:	699b      	ldr	r3, [r3, #24]
 8014d74:	687a      	ldr	r2, [r7, #4]
 8014d76:	7c12      	ldrb	r2, [r2, #16]
 8014d78:	f107 0108 	add.w	r1, r7, #8
 8014d7c:	4610      	mov	r0, r2
 8014d7e:	4798      	blx	r3
 8014d80:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014d82:	e00f      	b.n	8014da4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8014d84:	6839      	ldr	r1, [r7, #0]
 8014d86:	6878      	ldr	r0, [r7, #4]
 8014d88:	f000 fa49 	bl	801521e <USBD_CtlError>
            err++;
 8014d8c:	7afb      	ldrb	r3, [r7, #11]
 8014d8e:	3301      	adds	r3, #1
 8014d90:	72fb      	strb	r3, [r7, #11]
          break;
 8014d92:	e007      	b.n	8014da4 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8014d94:	6839      	ldr	r1, [r7, #0]
 8014d96:	6878      	ldr	r0, [r7, #4]
 8014d98:	f000 fa41 	bl	801521e <USBD_CtlError>
          err++;
 8014d9c:	7afb      	ldrb	r3, [r7, #11]
 8014d9e:	3301      	adds	r3, #1
 8014da0:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8014da2:	bf00      	nop
      }
      break;
 8014da4:	e037      	b.n	8014e16 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014da6:	687b      	ldr	r3, [r7, #4]
 8014da8:	7c1b      	ldrb	r3, [r3, #16]
 8014daa:	2b00      	cmp	r3, #0
 8014dac:	d109      	bne.n	8014dc2 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8014dae:	687b      	ldr	r3, [r7, #4]
 8014db0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014db4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014db6:	f107 0208 	add.w	r2, r7, #8
 8014dba:	4610      	mov	r0, r2
 8014dbc:	4798      	blx	r3
 8014dbe:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8014dc0:	e029      	b.n	8014e16 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8014dc2:	6839      	ldr	r1, [r7, #0]
 8014dc4:	6878      	ldr	r0, [r7, #4]
 8014dc6:	f000 fa2a 	bl	801521e <USBD_CtlError>
        err++;
 8014dca:	7afb      	ldrb	r3, [r7, #11]
 8014dcc:	3301      	adds	r3, #1
 8014dce:	72fb      	strb	r3, [r7, #11]
      break;
 8014dd0:	e021      	b.n	8014e16 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014dd2:	687b      	ldr	r3, [r7, #4]
 8014dd4:	7c1b      	ldrb	r3, [r3, #16]
 8014dd6:	2b00      	cmp	r3, #0
 8014dd8:	d10d      	bne.n	8014df6 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8014dda:	687b      	ldr	r3, [r7, #4]
 8014ddc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014de2:	f107 0208 	add.w	r2, r7, #8
 8014de6:	4610      	mov	r0, r2
 8014de8:	4798      	blx	r3
 8014dea:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8014dec:	68fb      	ldr	r3, [r7, #12]
 8014dee:	3301      	adds	r3, #1
 8014df0:	2207      	movs	r2, #7
 8014df2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8014df4:	e00f      	b.n	8014e16 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8014df6:	6839      	ldr	r1, [r7, #0]
 8014df8:	6878      	ldr	r0, [r7, #4]
 8014dfa:	f000 fa10 	bl	801521e <USBD_CtlError>
        err++;
 8014dfe:	7afb      	ldrb	r3, [r7, #11]
 8014e00:	3301      	adds	r3, #1
 8014e02:	72fb      	strb	r3, [r7, #11]
      break;
 8014e04:	e007      	b.n	8014e16 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8014e06:	6839      	ldr	r1, [r7, #0]
 8014e08:	6878      	ldr	r0, [r7, #4]
 8014e0a:	f000 fa08 	bl	801521e <USBD_CtlError>
      err++;
 8014e0e:	7afb      	ldrb	r3, [r7, #11]
 8014e10:	3301      	adds	r3, #1
 8014e12:	72fb      	strb	r3, [r7, #11]
      break;
 8014e14:	bf00      	nop
  }

  if (err != 0U)
 8014e16:	7afb      	ldrb	r3, [r7, #11]
 8014e18:	2b00      	cmp	r3, #0
 8014e1a:	d11e      	bne.n	8014e5a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8014e1c:	683b      	ldr	r3, [r7, #0]
 8014e1e:	88db      	ldrh	r3, [r3, #6]
 8014e20:	2b00      	cmp	r3, #0
 8014e22:	d016      	beq.n	8014e52 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8014e24:	893b      	ldrh	r3, [r7, #8]
 8014e26:	2b00      	cmp	r3, #0
 8014e28:	d00e      	beq.n	8014e48 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8014e2a:	683b      	ldr	r3, [r7, #0]
 8014e2c:	88da      	ldrh	r2, [r3, #6]
 8014e2e:	893b      	ldrh	r3, [r7, #8]
 8014e30:	4293      	cmp	r3, r2
 8014e32:	bf28      	it	cs
 8014e34:	4613      	movcs	r3, r2
 8014e36:	b29b      	uxth	r3, r3
 8014e38:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8014e3a:	893b      	ldrh	r3, [r7, #8]
 8014e3c:	461a      	mov	r2, r3
 8014e3e:	68f9      	ldr	r1, [r7, #12]
 8014e40:	6878      	ldr	r0, [r7, #4]
 8014e42:	f000 fa5d 	bl	8015300 <USBD_CtlSendData>
 8014e46:	e009      	b.n	8014e5c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8014e48:	6839      	ldr	r1, [r7, #0]
 8014e4a:	6878      	ldr	r0, [r7, #4]
 8014e4c:	f000 f9e7 	bl	801521e <USBD_CtlError>
 8014e50:	e004      	b.n	8014e5c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8014e52:	6878      	ldr	r0, [r7, #4]
 8014e54:	f000 faae 	bl	80153b4 <USBD_CtlSendStatus>
 8014e58:	e000      	b.n	8014e5c <USBD_GetDescriptor+0x2cc>
    return;
 8014e5a:	bf00      	nop
  }
}
 8014e5c:	3710      	adds	r7, #16
 8014e5e:	46bd      	mov	sp, r7
 8014e60:	bd80      	pop	{r7, pc}
 8014e62:	bf00      	nop

08014e64 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014e64:	b580      	push	{r7, lr}
 8014e66:	b084      	sub	sp, #16
 8014e68:	af00      	add	r7, sp, #0
 8014e6a:	6078      	str	r0, [r7, #4]
 8014e6c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8014e6e:	683b      	ldr	r3, [r7, #0]
 8014e70:	889b      	ldrh	r3, [r3, #4]
 8014e72:	2b00      	cmp	r3, #0
 8014e74:	d131      	bne.n	8014eda <USBD_SetAddress+0x76>
 8014e76:	683b      	ldr	r3, [r7, #0]
 8014e78:	88db      	ldrh	r3, [r3, #6]
 8014e7a:	2b00      	cmp	r3, #0
 8014e7c:	d12d      	bne.n	8014eda <USBD_SetAddress+0x76>
 8014e7e:	683b      	ldr	r3, [r7, #0]
 8014e80:	885b      	ldrh	r3, [r3, #2]
 8014e82:	2b7f      	cmp	r3, #127	; 0x7f
 8014e84:	d829      	bhi.n	8014eda <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8014e86:	683b      	ldr	r3, [r7, #0]
 8014e88:	885b      	ldrh	r3, [r3, #2]
 8014e8a:	b2db      	uxtb	r3, r3
 8014e8c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014e90:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014e92:	687b      	ldr	r3, [r7, #4]
 8014e94:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014e98:	b2db      	uxtb	r3, r3
 8014e9a:	2b03      	cmp	r3, #3
 8014e9c:	d104      	bne.n	8014ea8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8014e9e:	6839      	ldr	r1, [r7, #0]
 8014ea0:	6878      	ldr	r0, [r7, #4]
 8014ea2:	f000 f9bc 	bl	801521e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014ea6:	e01d      	b.n	8014ee4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8014ea8:	687b      	ldr	r3, [r7, #4]
 8014eaa:	7bfa      	ldrb	r2, [r7, #15]
 8014eac:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8014eb0:	7bfb      	ldrb	r3, [r7, #15]
 8014eb2:	4619      	mov	r1, r3
 8014eb4:	6878      	ldr	r0, [r7, #4]
 8014eb6:	f000 ff69 	bl	8015d8c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8014eba:	6878      	ldr	r0, [r7, #4]
 8014ebc:	f000 fa7a 	bl	80153b4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8014ec0:	7bfb      	ldrb	r3, [r7, #15]
 8014ec2:	2b00      	cmp	r3, #0
 8014ec4:	d004      	beq.n	8014ed0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8014ec6:	687b      	ldr	r3, [r7, #4]
 8014ec8:	2202      	movs	r2, #2
 8014eca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014ece:	e009      	b.n	8014ee4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8014ed0:	687b      	ldr	r3, [r7, #4]
 8014ed2:	2201      	movs	r2, #1
 8014ed4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014ed8:	e004      	b.n	8014ee4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8014eda:	6839      	ldr	r1, [r7, #0]
 8014edc:	6878      	ldr	r0, [r7, #4]
 8014ede:	f000 f99e 	bl	801521e <USBD_CtlError>
  }
}
 8014ee2:	bf00      	nop
 8014ee4:	bf00      	nop
 8014ee6:	3710      	adds	r7, #16
 8014ee8:	46bd      	mov	sp, r7
 8014eea:	bd80      	pop	{r7, pc}

08014eec <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014eec:	b580      	push	{r7, lr}
 8014eee:	b084      	sub	sp, #16
 8014ef0:	af00      	add	r7, sp, #0
 8014ef2:	6078      	str	r0, [r7, #4]
 8014ef4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8014ef6:	2300      	movs	r3, #0
 8014ef8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8014efa:	683b      	ldr	r3, [r7, #0]
 8014efc:	885b      	ldrh	r3, [r3, #2]
 8014efe:	b2da      	uxtb	r2, r3
 8014f00:	4b4e      	ldr	r3, [pc, #312]	; (801503c <USBD_SetConfig+0x150>)
 8014f02:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8014f04:	4b4d      	ldr	r3, [pc, #308]	; (801503c <USBD_SetConfig+0x150>)
 8014f06:	781b      	ldrb	r3, [r3, #0]
 8014f08:	2b01      	cmp	r3, #1
 8014f0a:	d905      	bls.n	8014f18 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8014f0c:	6839      	ldr	r1, [r7, #0]
 8014f0e:	6878      	ldr	r0, [r7, #4]
 8014f10:	f000 f985 	bl	801521e <USBD_CtlError>
    return USBD_FAIL;
 8014f14:	2303      	movs	r3, #3
 8014f16:	e08c      	b.n	8015032 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8014f18:	687b      	ldr	r3, [r7, #4]
 8014f1a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014f1e:	b2db      	uxtb	r3, r3
 8014f20:	2b02      	cmp	r3, #2
 8014f22:	d002      	beq.n	8014f2a <USBD_SetConfig+0x3e>
 8014f24:	2b03      	cmp	r3, #3
 8014f26:	d029      	beq.n	8014f7c <USBD_SetConfig+0x90>
 8014f28:	e075      	b.n	8015016 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8014f2a:	4b44      	ldr	r3, [pc, #272]	; (801503c <USBD_SetConfig+0x150>)
 8014f2c:	781b      	ldrb	r3, [r3, #0]
 8014f2e:	2b00      	cmp	r3, #0
 8014f30:	d020      	beq.n	8014f74 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8014f32:	4b42      	ldr	r3, [pc, #264]	; (801503c <USBD_SetConfig+0x150>)
 8014f34:	781b      	ldrb	r3, [r3, #0]
 8014f36:	461a      	mov	r2, r3
 8014f38:	687b      	ldr	r3, [r7, #4]
 8014f3a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8014f3c:	4b3f      	ldr	r3, [pc, #252]	; (801503c <USBD_SetConfig+0x150>)
 8014f3e:	781b      	ldrb	r3, [r3, #0]
 8014f40:	4619      	mov	r1, r3
 8014f42:	6878      	ldr	r0, [r7, #4]
 8014f44:	f7fe ffe1 	bl	8013f0a <USBD_SetClassConfig>
 8014f48:	4603      	mov	r3, r0
 8014f4a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8014f4c:	7bfb      	ldrb	r3, [r7, #15]
 8014f4e:	2b00      	cmp	r3, #0
 8014f50:	d008      	beq.n	8014f64 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8014f52:	6839      	ldr	r1, [r7, #0]
 8014f54:	6878      	ldr	r0, [r7, #4]
 8014f56:	f000 f962 	bl	801521e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8014f5a:	687b      	ldr	r3, [r7, #4]
 8014f5c:	2202      	movs	r2, #2
 8014f5e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8014f62:	e065      	b.n	8015030 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8014f64:	6878      	ldr	r0, [r7, #4]
 8014f66:	f000 fa25 	bl	80153b4 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8014f6a:	687b      	ldr	r3, [r7, #4]
 8014f6c:	2203      	movs	r2, #3
 8014f6e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8014f72:	e05d      	b.n	8015030 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8014f74:	6878      	ldr	r0, [r7, #4]
 8014f76:	f000 fa1d 	bl	80153b4 <USBD_CtlSendStatus>
      break;
 8014f7a:	e059      	b.n	8015030 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8014f7c:	4b2f      	ldr	r3, [pc, #188]	; (801503c <USBD_SetConfig+0x150>)
 8014f7e:	781b      	ldrb	r3, [r3, #0]
 8014f80:	2b00      	cmp	r3, #0
 8014f82:	d112      	bne.n	8014faa <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8014f84:	687b      	ldr	r3, [r7, #4]
 8014f86:	2202      	movs	r2, #2
 8014f88:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8014f8c:	4b2b      	ldr	r3, [pc, #172]	; (801503c <USBD_SetConfig+0x150>)
 8014f8e:	781b      	ldrb	r3, [r3, #0]
 8014f90:	461a      	mov	r2, r3
 8014f92:	687b      	ldr	r3, [r7, #4]
 8014f94:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8014f96:	4b29      	ldr	r3, [pc, #164]	; (801503c <USBD_SetConfig+0x150>)
 8014f98:	781b      	ldrb	r3, [r3, #0]
 8014f9a:	4619      	mov	r1, r3
 8014f9c:	6878      	ldr	r0, [r7, #4]
 8014f9e:	f7fe ffd0 	bl	8013f42 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8014fa2:	6878      	ldr	r0, [r7, #4]
 8014fa4:	f000 fa06 	bl	80153b4 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8014fa8:	e042      	b.n	8015030 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8014faa:	4b24      	ldr	r3, [pc, #144]	; (801503c <USBD_SetConfig+0x150>)
 8014fac:	781b      	ldrb	r3, [r3, #0]
 8014fae:	461a      	mov	r2, r3
 8014fb0:	687b      	ldr	r3, [r7, #4]
 8014fb2:	685b      	ldr	r3, [r3, #4]
 8014fb4:	429a      	cmp	r2, r3
 8014fb6:	d02a      	beq.n	801500e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8014fb8:	687b      	ldr	r3, [r7, #4]
 8014fba:	685b      	ldr	r3, [r3, #4]
 8014fbc:	b2db      	uxtb	r3, r3
 8014fbe:	4619      	mov	r1, r3
 8014fc0:	6878      	ldr	r0, [r7, #4]
 8014fc2:	f7fe ffbe 	bl	8013f42 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8014fc6:	4b1d      	ldr	r3, [pc, #116]	; (801503c <USBD_SetConfig+0x150>)
 8014fc8:	781b      	ldrb	r3, [r3, #0]
 8014fca:	461a      	mov	r2, r3
 8014fcc:	687b      	ldr	r3, [r7, #4]
 8014fce:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8014fd0:	4b1a      	ldr	r3, [pc, #104]	; (801503c <USBD_SetConfig+0x150>)
 8014fd2:	781b      	ldrb	r3, [r3, #0]
 8014fd4:	4619      	mov	r1, r3
 8014fd6:	6878      	ldr	r0, [r7, #4]
 8014fd8:	f7fe ff97 	bl	8013f0a <USBD_SetClassConfig>
 8014fdc:	4603      	mov	r3, r0
 8014fde:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8014fe0:	7bfb      	ldrb	r3, [r7, #15]
 8014fe2:	2b00      	cmp	r3, #0
 8014fe4:	d00f      	beq.n	8015006 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8014fe6:	6839      	ldr	r1, [r7, #0]
 8014fe8:	6878      	ldr	r0, [r7, #4]
 8014fea:	f000 f918 	bl	801521e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8014fee:	687b      	ldr	r3, [r7, #4]
 8014ff0:	685b      	ldr	r3, [r3, #4]
 8014ff2:	b2db      	uxtb	r3, r3
 8014ff4:	4619      	mov	r1, r3
 8014ff6:	6878      	ldr	r0, [r7, #4]
 8014ff8:	f7fe ffa3 	bl	8013f42 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8014ffc:	687b      	ldr	r3, [r7, #4]
 8014ffe:	2202      	movs	r2, #2
 8015000:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8015004:	e014      	b.n	8015030 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8015006:	6878      	ldr	r0, [r7, #4]
 8015008:	f000 f9d4 	bl	80153b4 <USBD_CtlSendStatus>
      break;
 801500c:	e010      	b.n	8015030 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 801500e:	6878      	ldr	r0, [r7, #4]
 8015010:	f000 f9d0 	bl	80153b4 <USBD_CtlSendStatus>
      break;
 8015014:	e00c      	b.n	8015030 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8015016:	6839      	ldr	r1, [r7, #0]
 8015018:	6878      	ldr	r0, [r7, #4]
 801501a:	f000 f900 	bl	801521e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 801501e:	4b07      	ldr	r3, [pc, #28]	; (801503c <USBD_SetConfig+0x150>)
 8015020:	781b      	ldrb	r3, [r3, #0]
 8015022:	4619      	mov	r1, r3
 8015024:	6878      	ldr	r0, [r7, #4]
 8015026:	f7fe ff8c 	bl	8013f42 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 801502a:	2303      	movs	r3, #3
 801502c:	73fb      	strb	r3, [r7, #15]
      break;
 801502e:	bf00      	nop
  }

  return ret;
 8015030:	7bfb      	ldrb	r3, [r7, #15]
}
 8015032:	4618      	mov	r0, r3
 8015034:	3710      	adds	r7, #16
 8015036:	46bd      	mov	sp, r7
 8015038:	bd80      	pop	{r7, pc}
 801503a:	bf00      	nop
 801503c:	200053b4 	.word	0x200053b4

08015040 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015040:	b580      	push	{r7, lr}
 8015042:	b082      	sub	sp, #8
 8015044:	af00      	add	r7, sp, #0
 8015046:	6078      	str	r0, [r7, #4]
 8015048:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 801504a:	683b      	ldr	r3, [r7, #0]
 801504c:	88db      	ldrh	r3, [r3, #6]
 801504e:	2b01      	cmp	r3, #1
 8015050:	d004      	beq.n	801505c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8015052:	6839      	ldr	r1, [r7, #0]
 8015054:	6878      	ldr	r0, [r7, #4]
 8015056:	f000 f8e2 	bl	801521e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 801505a:	e023      	b.n	80150a4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 801505c:	687b      	ldr	r3, [r7, #4]
 801505e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015062:	b2db      	uxtb	r3, r3
 8015064:	2b02      	cmp	r3, #2
 8015066:	dc02      	bgt.n	801506e <USBD_GetConfig+0x2e>
 8015068:	2b00      	cmp	r3, #0
 801506a:	dc03      	bgt.n	8015074 <USBD_GetConfig+0x34>
 801506c:	e015      	b.n	801509a <USBD_GetConfig+0x5a>
 801506e:	2b03      	cmp	r3, #3
 8015070:	d00b      	beq.n	801508a <USBD_GetConfig+0x4a>
 8015072:	e012      	b.n	801509a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8015074:	687b      	ldr	r3, [r7, #4]
 8015076:	2200      	movs	r2, #0
 8015078:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 801507a:	687b      	ldr	r3, [r7, #4]
 801507c:	3308      	adds	r3, #8
 801507e:	2201      	movs	r2, #1
 8015080:	4619      	mov	r1, r3
 8015082:	6878      	ldr	r0, [r7, #4]
 8015084:	f000 f93c 	bl	8015300 <USBD_CtlSendData>
        break;
 8015088:	e00c      	b.n	80150a4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 801508a:	687b      	ldr	r3, [r7, #4]
 801508c:	3304      	adds	r3, #4
 801508e:	2201      	movs	r2, #1
 8015090:	4619      	mov	r1, r3
 8015092:	6878      	ldr	r0, [r7, #4]
 8015094:	f000 f934 	bl	8015300 <USBD_CtlSendData>
        break;
 8015098:	e004      	b.n	80150a4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 801509a:	6839      	ldr	r1, [r7, #0]
 801509c:	6878      	ldr	r0, [r7, #4]
 801509e:	f000 f8be 	bl	801521e <USBD_CtlError>
        break;
 80150a2:	bf00      	nop
}
 80150a4:	bf00      	nop
 80150a6:	3708      	adds	r7, #8
 80150a8:	46bd      	mov	sp, r7
 80150aa:	bd80      	pop	{r7, pc}

080150ac <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80150ac:	b580      	push	{r7, lr}
 80150ae:	b082      	sub	sp, #8
 80150b0:	af00      	add	r7, sp, #0
 80150b2:	6078      	str	r0, [r7, #4]
 80150b4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80150b6:	687b      	ldr	r3, [r7, #4]
 80150b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80150bc:	b2db      	uxtb	r3, r3
 80150be:	3b01      	subs	r3, #1
 80150c0:	2b02      	cmp	r3, #2
 80150c2:	d81e      	bhi.n	8015102 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80150c4:	683b      	ldr	r3, [r7, #0]
 80150c6:	88db      	ldrh	r3, [r3, #6]
 80150c8:	2b02      	cmp	r3, #2
 80150ca:	d004      	beq.n	80150d6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80150cc:	6839      	ldr	r1, [r7, #0]
 80150ce:	6878      	ldr	r0, [r7, #4]
 80150d0:	f000 f8a5 	bl	801521e <USBD_CtlError>
        break;
 80150d4:	e01a      	b.n	801510c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80150d6:	687b      	ldr	r3, [r7, #4]
 80150d8:	2201      	movs	r2, #1
 80150da:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80150dc:	687b      	ldr	r3, [r7, #4]
 80150de:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80150e2:	2b00      	cmp	r3, #0
 80150e4:	d005      	beq.n	80150f2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80150e6:	687b      	ldr	r3, [r7, #4]
 80150e8:	68db      	ldr	r3, [r3, #12]
 80150ea:	f043 0202 	orr.w	r2, r3, #2
 80150ee:	687b      	ldr	r3, [r7, #4]
 80150f0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80150f2:	687b      	ldr	r3, [r7, #4]
 80150f4:	330c      	adds	r3, #12
 80150f6:	2202      	movs	r2, #2
 80150f8:	4619      	mov	r1, r3
 80150fa:	6878      	ldr	r0, [r7, #4]
 80150fc:	f000 f900 	bl	8015300 <USBD_CtlSendData>
      break;
 8015100:	e004      	b.n	801510c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8015102:	6839      	ldr	r1, [r7, #0]
 8015104:	6878      	ldr	r0, [r7, #4]
 8015106:	f000 f88a 	bl	801521e <USBD_CtlError>
      break;
 801510a:	bf00      	nop
  }
}
 801510c:	bf00      	nop
 801510e:	3708      	adds	r7, #8
 8015110:	46bd      	mov	sp, r7
 8015112:	bd80      	pop	{r7, pc}

08015114 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015114:	b580      	push	{r7, lr}
 8015116:	b082      	sub	sp, #8
 8015118:	af00      	add	r7, sp, #0
 801511a:	6078      	str	r0, [r7, #4]
 801511c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801511e:	683b      	ldr	r3, [r7, #0]
 8015120:	885b      	ldrh	r3, [r3, #2]
 8015122:	2b01      	cmp	r3, #1
 8015124:	d107      	bne.n	8015136 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8015126:	687b      	ldr	r3, [r7, #4]
 8015128:	2201      	movs	r2, #1
 801512a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 801512e:	6878      	ldr	r0, [r7, #4]
 8015130:	f000 f940 	bl	80153b4 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8015134:	e013      	b.n	801515e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8015136:	683b      	ldr	r3, [r7, #0]
 8015138:	885b      	ldrh	r3, [r3, #2]
 801513a:	2b02      	cmp	r3, #2
 801513c:	d10b      	bne.n	8015156 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 801513e:	683b      	ldr	r3, [r7, #0]
 8015140:	889b      	ldrh	r3, [r3, #4]
 8015142:	0a1b      	lsrs	r3, r3, #8
 8015144:	b29b      	uxth	r3, r3
 8015146:	b2da      	uxtb	r2, r3
 8015148:	687b      	ldr	r3, [r7, #4]
 801514a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 801514e:	6878      	ldr	r0, [r7, #4]
 8015150:	f000 f930 	bl	80153b4 <USBD_CtlSendStatus>
}
 8015154:	e003      	b.n	801515e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8015156:	6839      	ldr	r1, [r7, #0]
 8015158:	6878      	ldr	r0, [r7, #4]
 801515a:	f000 f860 	bl	801521e <USBD_CtlError>
}
 801515e:	bf00      	nop
 8015160:	3708      	adds	r7, #8
 8015162:	46bd      	mov	sp, r7
 8015164:	bd80      	pop	{r7, pc}

08015166 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015166:	b580      	push	{r7, lr}
 8015168:	b082      	sub	sp, #8
 801516a:	af00      	add	r7, sp, #0
 801516c:	6078      	str	r0, [r7, #4]
 801516e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8015170:	687b      	ldr	r3, [r7, #4]
 8015172:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015176:	b2db      	uxtb	r3, r3
 8015178:	3b01      	subs	r3, #1
 801517a:	2b02      	cmp	r3, #2
 801517c:	d80b      	bhi.n	8015196 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801517e:	683b      	ldr	r3, [r7, #0]
 8015180:	885b      	ldrh	r3, [r3, #2]
 8015182:	2b01      	cmp	r3, #1
 8015184:	d10c      	bne.n	80151a0 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8015186:	687b      	ldr	r3, [r7, #4]
 8015188:	2200      	movs	r2, #0
 801518a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 801518e:	6878      	ldr	r0, [r7, #4]
 8015190:	f000 f910 	bl	80153b4 <USBD_CtlSendStatus>
      }
      break;
 8015194:	e004      	b.n	80151a0 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8015196:	6839      	ldr	r1, [r7, #0]
 8015198:	6878      	ldr	r0, [r7, #4]
 801519a:	f000 f840 	bl	801521e <USBD_CtlError>
      break;
 801519e:	e000      	b.n	80151a2 <USBD_ClrFeature+0x3c>
      break;
 80151a0:	bf00      	nop
  }
}
 80151a2:	bf00      	nop
 80151a4:	3708      	adds	r7, #8
 80151a6:	46bd      	mov	sp, r7
 80151a8:	bd80      	pop	{r7, pc}

080151aa <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80151aa:	b580      	push	{r7, lr}
 80151ac:	b084      	sub	sp, #16
 80151ae:	af00      	add	r7, sp, #0
 80151b0:	6078      	str	r0, [r7, #4]
 80151b2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80151b4:	683b      	ldr	r3, [r7, #0]
 80151b6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80151b8:	68fb      	ldr	r3, [r7, #12]
 80151ba:	781a      	ldrb	r2, [r3, #0]
 80151bc:	687b      	ldr	r3, [r7, #4]
 80151be:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80151c0:	68fb      	ldr	r3, [r7, #12]
 80151c2:	3301      	adds	r3, #1
 80151c4:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80151c6:	68fb      	ldr	r3, [r7, #12]
 80151c8:	781a      	ldrb	r2, [r3, #0]
 80151ca:	687b      	ldr	r3, [r7, #4]
 80151cc:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80151ce:	68fb      	ldr	r3, [r7, #12]
 80151d0:	3301      	adds	r3, #1
 80151d2:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80151d4:	68f8      	ldr	r0, [r7, #12]
 80151d6:	f7ff fa41 	bl	801465c <SWAPBYTE>
 80151da:	4603      	mov	r3, r0
 80151dc:	461a      	mov	r2, r3
 80151de:	687b      	ldr	r3, [r7, #4]
 80151e0:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80151e2:	68fb      	ldr	r3, [r7, #12]
 80151e4:	3301      	adds	r3, #1
 80151e6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80151e8:	68fb      	ldr	r3, [r7, #12]
 80151ea:	3301      	adds	r3, #1
 80151ec:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80151ee:	68f8      	ldr	r0, [r7, #12]
 80151f0:	f7ff fa34 	bl	801465c <SWAPBYTE>
 80151f4:	4603      	mov	r3, r0
 80151f6:	461a      	mov	r2, r3
 80151f8:	687b      	ldr	r3, [r7, #4]
 80151fa:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80151fc:	68fb      	ldr	r3, [r7, #12]
 80151fe:	3301      	adds	r3, #1
 8015200:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8015202:	68fb      	ldr	r3, [r7, #12]
 8015204:	3301      	adds	r3, #1
 8015206:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8015208:	68f8      	ldr	r0, [r7, #12]
 801520a:	f7ff fa27 	bl	801465c <SWAPBYTE>
 801520e:	4603      	mov	r3, r0
 8015210:	461a      	mov	r2, r3
 8015212:	687b      	ldr	r3, [r7, #4]
 8015214:	80da      	strh	r2, [r3, #6]
}
 8015216:	bf00      	nop
 8015218:	3710      	adds	r7, #16
 801521a:	46bd      	mov	sp, r7
 801521c:	bd80      	pop	{r7, pc}

0801521e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801521e:	b580      	push	{r7, lr}
 8015220:	b082      	sub	sp, #8
 8015222:	af00      	add	r7, sp, #0
 8015224:	6078      	str	r0, [r7, #4]
 8015226:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8015228:	2180      	movs	r1, #128	; 0x80
 801522a:	6878      	ldr	r0, [r7, #4]
 801522c:	f000 fd44 	bl	8015cb8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8015230:	2100      	movs	r1, #0
 8015232:	6878      	ldr	r0, [r7, #4]
 8015234:	f000 fd40 	bl	8015cb8 <USBD_LL_StallEP>
}
 8015238:	bf00      	nop
 801523a:	3708      	adds	r7, #8
 801523c:	46bd      	mov	sp, r7
 801523e:	bd80      	pop	{r7, pc}

08015240 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8015240:	b580      	push	{r7, lr}
 8015242:	b086      	sub	sp, #24
 8015244:	af00      	add	r7, sp, #0
 8015246:	60f8      	str	r0, [r7, #12]
 8015248:	60b9      	str	r1, [r7, #8]
 801524a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 801524c:	2300      	movs	r3, #0
 801524e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8015250:	68fb      	ldr	r3, [r7, #12]
 8015252:	2b00      	cmp	r3, #0
 8015254:	d036      	beq.n	80152c4 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8015256:	68fb      	ldr	r3, [r7, #12]
 8015258:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 801525a:	6938      	ldr	r0, [r7, #16]
 801525c:	f000 f836 	bl	80152cc <USBD_GetLen>
 8015260:	4603      	mov	r3, r0
 8015262:	3301      	adds	r3, #1
 8015264:	b29b      	uxth	r3, r3
 8015266:	005b      	lsls	r3, r3, #1
 8015268:	b29a      	uxth	r2, r3
 801526a:	687b      	ldr	r3, [r7, #4]
 801526c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 801526e:	7dfb      	ldrb	r3, [r7, #23]
 8015270:	68ba      	ldr	r2, [r7, #8]
 8015272:	4413      	add	r3, r2
 8015274:	687a      	ldr	r2, [r7, #4]
 8015276:	7812      	ldrb	r2, [r2, #0]
 8015278:	701a      	strb	r2, [r3, #0]
  idx++;
 801527a:	7dfb      	ldrb	r3, [r7, #23]
 801527c:	3301      	adds	r3, #1
 801527e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8015280:	7dfb      	ldrb	r3, [r7, #23]
 8015282:	68ba      	ldr	r2, [r7, #8]
 8015284:	4413      	add	r3, r2
 8015286:	2203      	movs	r2, #3
 8015288:	701a      	strb	r2, [r3, #0]
  idx++;
 801528a:	7dfb      	ldrb	r3, [r7, #23]
 801528c:	3301      	adds	r3, #1
 801528e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8015290:	e013      	b.n	80152ba <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8015292:	7dfb      	ldrb	r3, [r7, #23]
 8015294:	68ba      	ldr	r2, [r7, #8]
 8015296:	4413      	add	r3, r2
 8015298:	693a      	ldr	r2, [r7, #16]
 801529a:	7812      	ldrb	r2, [r2, #0]
 801529c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 801529e:	693b      	ldr	r3, [r7, #16]
 80152a0:	3301      	adds	r3, #1
 80152a2:	613b      	str	r3, [r7, #16]
    idx++;
 80152a4:	7dfb      	ldrb	r3, [r7, #23]
 80152a6:	3301      	adds	r3, #1
 80152a8:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80152aa:	7dfb      	ldrb	r3, [r7, #23]
 80152ac:	68ba      	ldr	r2, [r7, #8]
 80152ae:	4413      	add	r3, r2
 80152b0:	2200      	movs	r2, #0
 80152b2:	701a      	strb	r2, [r3, #0]
    idx++;
 80152b4:	7dfb      	ldrb	r3, [r7, #23]
 80152b6:	3301      	adds	r3, #1
 80152b8:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80152ba:	693b      	ldr	r3, [r7, #16]
 80152bc:	781b      	ldrb	r3, [r3, #0]
 80152be:	2b00      	cmp	r3, #0
 80152c0:	d1e7      	bne.n	8015292 <USBD_GetString+0x52>
 80152c2:	e000      	b.n	80152c6 <USBD_GetString+0x86>
    return;
 80152c4:	bf00      	nop
  }
}
 80152c6:	3718      	adds	r7, #24
 80152c8:	46bd      	mov	sp, r7
 80152ca:	bd80      	pop	{r7, pc}

080152cc <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80152cc:	b480      	push	{r7}
 80152ce:	b085      	sub	sp, #20
 80152d0:	af00      	add	r7, sp, #0
 80152d2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80152d4:	2300      	movs	r3, #0
 80152d6:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80152d8:	687b      	ldr	r3, [r7, #4]
 80152da:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80152dc:	e005      	b.n	80152ea <USBD_GetLen+0x1e>
  {
    len++;
 80152de:	7bfb      	ldrb	r3, [r7, #15]
 80152e0:	3301      	adds	r3, #1
 80152e2:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80152e4:	68bb      	ldr	r3, [r7, #8]
 80152e6:	3301      	adds	r3, #1
 80152e8:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80152ea:	68bb      	ldr	r3, [r7, #8]
 80152ec:	781b      	ldrb	r3, [r3, #0]
 80152ee:	2b00      	cmp	r3, #0
 80152f0:	d1f5      	bne.n	80152de <USBD_GetLen+0x12>
  }

  return len;
 80152f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80152f4:	4618      	mov	r0, r3
 80152f6:	3714      	adds	r7, #20
 80152f8:	46bd      	mov	sp, r7
 80152fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152fe:	4770      	bx	lr

08015300 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8015300:	b580      	push	{r7, lr}
 8015302:	b084      	sub	sp, #16
 8015304:	af00      	add	r7, sp, #0
 8015306:	60f8      	str	r0, [r7, #12]
 8015308:	60b9      	str	r1, [r7, #8]
 801530a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 801530c:	68fb      	ldr	r3, [r7, #12]
 801530e:	2202      	movs	r2, #2
 8015310:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8015314:	68fb      	ldr	r3, [r7, #12]
 8015316:	687a      	ldr	r2, [r7, #4]
 8015318:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 801531a:	68fb      	ldr	r3, [r7, #12]
 801531c:	687a      	ldr	r2, [r7, #4]
 801531e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8015320:	687b      	ldr	r3, [r7, #4]
 8015322:	68ba      	ldr	r2, [r7, #8]
 8015324:	2100      	movs	r1, #0
 8015326:	68f8      	ldr	r0, [r7, #12]
 8015328:	f000 fd4f 	bl	8015dca <USBD_LL_Transmit>

  return USBD_OK;
 801532c:	2300      	movs	r3, #0
}
 801532e:	4618      	mov	r0, r3
 8015330:	3710      	adds	r7, #16
 8015332:	46bd      	mov	sp, r7
 8015334:	bd80      	pop	{r7, pc}

08015336 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8015336:	b580      	push	{r7, lr}
 8015338:	b084      	sub	sp, #16
 801533a:	af00      	add	r7, sp, #0
 801533c:	60f8      	str	r0, [r7, #12]
 801533e:	60b9      	str	r1, [r7, #8]
 8015340:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8015342:	687b      	ldr	r3, [r7, #4]
 8015344:	68ba      	ldr	r2, [r7, #8]
 8015346:	2100      	movs	r1, #0
 8015348:	68f8      	ldr	r0, [r7, #12]
 801534a:	f000 fd3e 	bl	8015dca <USBD_LL_Transmit>

  return USBD_OK;
 801534e:	2300      	movs	r3, #0
}
 8015350:	4618      	mov	r0, r3
 8015352:	3710      	adds	r7, #16
 8015354:	46bd      	mov	sp, r7
 8015356:	bd80      	pop	{r7, pc}

08015358 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8015358:	b580      	push	{r7, lr}
 801535a:	b084      	sub	sp, #16
 801535c:	af00      	add	r7, sp, #0
 801535e:	60f8      	str	r0, [r7, #12]
 8015360:	60b9      	str	r1, [r7, #8]
 8015362:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8015364:	68fb      	ldr	r3, [r7, #12]
 8015366:	2203      	movs	r2, #3
 8015368:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 801536c:	68fb      	ldr	r3, [r7, #12]
 801536e:	687a      	ldr	r2, [r7, #4]
 8015370:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8015374:	68fb      	ldr	r3, [r7, #12]
 8015376:	687a      	ldr	r2, [r7, #4]
 8015378:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801537c:	687b      	ldr	r3, [r7, #4]
 801537e:	68ba      	ldr	r2, [r7, #8]
 8015380:	2100      	movs	r1, #0
 8015382:	68f8      	ldr	r0, [r7, #12]
 8015384:	f000 fd42 	bl	8015e0c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8015388:	2300      	movs	r3, #0
}
 801538a:	4618      	mov	r0, r3
 801538c:	3710      	adds	r7, #16
 801538e:	46bd      	mov	sp, r7
 8015390:	bd80      	pop	{r7, pc}

08015392 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8015392:	b580      	push	{r7, lr}
 8015394:	b084      	sub	sp, #16
 8015396:	af00      	add	r7, sp, #0
 8015398:	60f8      	str	r0, [r7, #12]
 801539a:	60b9      	str	r1, [r7, #8]
 801539c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801539e:	687b      	ldr	r3, [r7, #4]
 80153a0:	68ba      	ldr	r2, [r7, #8]
 80153a2:	2100      	movs	r1, #0
 80153a4:	68f8      	ldr	r0, [r7, #12]
 80153a6:	f000 fd31 	bl	8015e0c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80153aa:	2300      	movs	r3, #0
}
 80153ac:	4618      	mov	r0, r3
 80153ae:	3710      	adds	r7, #16
 80153b0:	46bd      	mov	sp, r7
 80153b2:	bd80      	pop	{r7, pc}

080153b4 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80153b4:	b580      	push	{r7, lr}
 80153b6:	b082      	sub	sp, #8
 80153b8:	af00      	add	r7, sp, #0
 80153ba:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80153bc:	687b      	ldr	r3, [r7, #4]
 80153be:	2204      	movs	r2, #4
 80153c0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80153c4:	2300      	movs	r3, #0
 80153c6:	2200      	movs	r2, #0
 80153c8:	2100      	movs	r1, #0
 80153ca:	6878      	ldr	r0, [r7, #4]
 80153cc:	f000 fcfd 	bl	8015dca <USBD_LL_Transmit>

  return USBD_OK;
 80153d0:	2300      	movs	r3, #0
}
 80153d2:	4618      	mov	r0, r3
 80153d4:	3708      	adds	r7, #8
 80153d6:	46bd      	mov	sp, r7
 80153d8:	bd80      	pop	{r7, pc}

080153da <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80153da:	b580      	push	{r7, lr}
 80153dc:	b082      	sub	sp, #8
 80153de:	af00      	add	r7, sp, #0
 80153e0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80153e2:	687b      	ldr	r3, [r7, #4]
 80153e4:	2205      	movs	r2, #5
 80153e6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80153ea:	2300      	movs	r3, #0
 80153ec:	2200      	movs	r2, #0
 80153ee:	2100      	movs	r1, #0
 80153f0:	6878      	ldr	r0, [r7, #4]
 80153f2:	f000 fd0b 	bl	8015e0c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80153f6:	2300      	movs	r3, #0
}
 80153f8:	4618      	mov	r0, r3
 80153fa:	3708      	adds	r7, #8
 80153fc:	46bd      	mov	sp, r7
 80153fe:	bd80      	pop	{r7, pc}

08015400 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8015400:	b580      	push	{r7, lr}
 8015402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8015404:	2200      	movs	r2, #0
 8015406:	4912      	ldr	r1, [pc, #72]	; (8015450 <MX_USB_DEVICE_Init+0x50>)
 8015408:	4812      	ldr	r0, [pc, #72]	; (8015454 <MX_USB_DEVICE_Init+0x54>)
 801540a:	f7fe fd01 	bl	8013e10 <USBD_Init>
 801540e:	4603      	mov	r3, r0
 8015410:	2b00      	cmp	r3, #0
 8015412:	d001      	beq.n	8015418 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8015414:	f7ec f8e6 	bl	80015e4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8015418:	490f      	ldr	r1, [pc, #60]	; (8015458 <MX_USB_DEVICE_Init+0x58>)
 801541a:	480e      	ldr	r0, [pc, #56]	; (8015454 <MX_USB_DEVICE_Init+0x54>)
 801541c:	f7fe fd28 	bl	8013e70 <USBD_RegisterClass>
 8015420:	4603      	mov	r3, r0
 8015422:	2b00      	cmp	r3, #0
 8015424:	d001      	beq.n	801542a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8015426:	f7ec f8dd 	bl	80015e4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 801542a:	490c      	ldr	r1, [pc, #48]	; (801545c <MX_USB_DEVICE_Init+0x5c>)
 801542c:	4809      	ldr	r0, [pc, #36]	; (8015454 <MX_USB_DEVICE_Init+0x54>)
 801542e:	f7fe fc1f 	bl	8013c70 <USBD_CDC_RegisterInterface>
 8015432:	4603      	mov	r3, r0
 8015434:	2b00      	cmp	r3, #0
 8015436:	d001      	beq.n	801543c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8015438:	f7ec f8d4 	bl	80015e4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 801543c:	4805      	ldr	r0, [pc, #20]	; (8015454 <MX_USB_DEVICE_Init+0x54>)
 801543e:	f7fe fd4d 	bl	8013edc <USBD_Start>
 8015442:	4603      	mov	r3, r0
 8015444:	2b00      	cmp	r3, #0
 8015446:	d001      	beq.n	801544c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8015448:	f7ec f8cc 	bl	80015e4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 801544c:	bf00      	nop
 801544e:	bd80      	pop	{r7, pc}
 8015450:	20000150 	.word	0x20000150
 8015454:	200053b8 	.word	0x200053b8
 8015458:	200000b4 	.word	0x200000b4
 801545c:	2000013c 	.word	0x2000013c

08015460 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8015460:	b580      	push	{r7, lr}
 8015462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8015464:	2200      	movs	r2, #0
 8015466:	4905      	ldr	r1, [pc, #20]	; (801547c <CDC_Init_FS+0x1c>)
 8015468:	4805      	ldr	r0, [pc, #20]	; (8015480 <CDC_Init_FS+0x20>)
 801546a:	f7fe fc1b 	bl	8013ca4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801546e:	4905      	ldr	r1, [pc, #20]	; (8015484 <CDC_Init_FS+0x24>)
 8015470:	4803      	ldr	r0, [pc, #12]	; (8015480 <CDC_Init_FS+0x20>)
 8015472:	f7fe fc39 	bl	8013ce8 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8015476:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8015478:	4618      	mov	r0, r3
 801547a:	bd80      	pop	{r7, pc}
 801547c:	20005e94 	.word	0x20005e94
 8015480:	200053b8 	.word	0x200053b8
 8015484:	20005694 	.word	0x20005694

08015488 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8015488:	b480      	push	{r7}
 801548a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 801548c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801548e:	4618      	mov	r0, r3
 8015490:	46bd      	mov	sp, r7
 8015492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015496:	4770      	bx	lr

08015498 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8015498:	b480      	push	{r7}
 801549a:	b083      	sub	sp, #12
 801549c:	af00      	add	r7, sp, #0
 801549e:	4603      	mov	r3, r0
 80154a0:	6039      	str	r1, [r7, #0]
 80154a2:	71fb      	strb	r3, [r7, #7]
 80154a4:	4613      	mov	r3, r2
 80154a6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80154a8:	79fb      	ldrb	r3, [r7, #7]
 80154aa:	2b23      	cmp	r3, #35	; 0x23
 80154ac:	f200 80a3 	bhi.w	80155f6 <CDC_Control_FS+0x15e>
 80154b0:	a201      	add	r2, pc, #4	; (adr r2, 80154b8 <CDC_Control_FS+0x20>)
 80154b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80154b6:	bf00      	nop
 80154b8:	080155f7 	.word	0x080155f7
 80154bc:	080155f7 	.word	0x080155f7
 80154c0:	080155f7 	.word	0x080155f7
 80154c4:	080155f7 	.word	0x080155f7
 80154c8:	080155f7 	.word	0x080155f7
 80154cc:	080155f7 	.word	0x080155f7
 80154d0:	080155f7 	.word	0x080155f7
 80154d4:	080155f7 	.word	0x080155f7
 80154d8:	080155f7 	.word	0x080155f7
 80154dc:	080155f7 	.word	0x080155f7
 80154e0:	080155f7 	.word	0x080155f7
 80154e4:	080155f7 	.word	0x080155f7
 80154e8:	080155f7 	.word	0x080155f7
 80154ec:	080155f7 	.word	0x080155f7
 80154f0:	080155f7 	.word	0x080155f7
 80154f4:	080155f7 	.word	0x080155f7
 80154f8:	080155f7 	.word	0x080155f7
 80154fc:	080155f7 	.word	0x080155f7
 8015500:	080155f7 	.word	0x080155f7
 8015504:	080155f7 	.word	0x080155f7
 8015508:	080155f7 	.word	0x080155f7
 801550c:	080155f7 	.word	0x080155f7
 8015510:	080155f7 	.word	0x080155f7
 8015514:	080155f7 	.word	0x080155f7
 8015518:	080155f7 	.word	0x080155f7
 801551c:	080155f7 	.word	0x080155f7
 8015520:	080155f7 	.word	0x080155f7
 8015524:	080155f7 	.word	0x080155f7
 8015528:	080155f7 	.word	0x080155f7
 801552c:	080155f7 	.word	0x080155f7
 8015530:	080155f7 	.word	0x080155f7
 8015534:	080155f7 	.word	0x080155f7
 8015538:	08015549 	.word	0x08015549
 801553c:	080155a3 	.word	0x080155a3
 8015540:	080155f7 	.word	0x080155f7
 8015544:	080155f7 	.word	0x080155f7
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	Linecoding.bitrate = (uint32_t)(pbuf[0]);
 8015548:	683b      	ldr	r3, [r7, #0]
 801554a:	781b      	ldrb	r3, [r3, #0]
 801554c:	461a      	mov	r2, r3
 801554e:	4b2e      	ldr	r3, [pc, #184]	; (8015608 <CDC_Control_FS+0x170>)
 8015550:	601a      	str	r2, [r3, #0]
    	Linecoding.bitrate |= (uint32_t)(pbuf[1]<<8);
 8015552:	4b2d      	ldr	r3, [pc, #180]	; (8015608 <CDC_Control_FS+0x170>)
 8015554:	681b      	ldr	r3, [r3, #0]
 8015556:	683a      	ldr	r2, [r7, #0]
 8015558:	3201      	adds	r2, #1
 801555a:	7812      	ldrb	r2, [r2, #0]
 801555c:	0212      	lsls	r2, r2, #8
 801555e:	4313      	orrs	r3, r2
 8015560:	4a29      	ldr	r2, [pc, #164]	; (8015608 <CDC_Control_FS+0x170>)
 8015562:	6013      	str	r3, [r2, #0]
    	Linecoding.bitrate |= (uint32_t)(pbuf[2]<<16);
 8015564:	4b28      	ldr	r3, [pc, #160]	; (8015608 <CDC_Control_FS+0x170>)
 8015566:	681b      	ldr	r3, [r3, #0]
 8015568:	683a      	ldr	r2, [r7, #0]
 801556a:	3202      	adds	r2, #2
 801556c:	7812      	ldrb	r2, [r2, #0]
 801556e:	0412      	lsls	r2, r2, #16
 8015570:	4313      	orrs	r3, r2
 8015572:	4a25      	ldr	r2, [pc, #148]	; (8015608 <CDC_Control_FS+0x170>)
 8015574:	6013      	str	r3, [r2, #0]
    	Linecoding.bitrate |= (uint32_t)(pbuf[3]<<24);
 8015576:	4b24      	ldr	r3, [pc, #144]	; (8015608 <CDC_Control_FS+0x170>)
 8015578:	681b      	ldr	r3, [r3, #0]
 801557a:	683a      	ldr	r2, [r7, #0]
 801557c:	3203      	adds	r2, #3
 801557e:	7812      	ldrb	r2, [r2, #0]
 8015580:	0612      	lsls	r2, r2, #24
 8015582:	4313      	orrs	r3, r2
 8015584:	4a20      	ldr	r2, [pc, #128]	; (8015608 <CDC_Control_FS+0x170>)
 8015586:	6013      	str	r3, [r2, #0]
    	Linecoding.format = pbuf[4];
 8015588:	683b      	ldr	r3, [r7, #0]
 801558a:	791a      	ldrb	r2, [r3, #4]
 801558c:	4b1e      	ldr	r3, [pc, #120]	; (8015608 <CDC_Control_FS+0x170>)
 801558e:	711a      	strb	r2, [r3, #4]
    	Linecoding.paritytype = pbuf[5];
 8015590:	683b      	ldr	r3, [r7, #0]
 8015592:	795a      	ldrb	r2, [r3, #5]
 8015594:	4b1c      	ldr	r3, [pc, #112]	; (8015608 <CDC_Control_FS+0x170>)
 8015596:	715a      	strb	r2, [r3, #5]
    	Linecoding.datatype = pbuf[6];
 8015598:	683b      	ldr	r3, [r7, #0]
 801559a:	799a      	ldrb	r2, [r3, #6]
 801559c:	4b1a      	ldr	r3, [pc, #104]	; (8015608 <CDC_Control_FS+0x170>)
 801559e:	719a      	strb	r2, [r3, #6]
    break;
 80155a0:	e02a      	b.n	80155f8 <CDC_Control_FS+0x160>

    case CDC_GET_LINE_CODING:
      pbuf[0] = (uint8_t)(Linecoding.bitrate);
 80155a2:	4b19      	ldr	r3, [pc, #100]	; (8015608 <CDC_Control_FS+0x170>)
 80155a4:	681b      	ldr	r3, [r3, #0]
 80155a6:	b2da      	uxtb	r2, r3
 80155a8:	683b      	ldr	r3, [r7, #0]
 80155aa:	701a      	strb	r2, [r3, #0]
      pbuf[1] = (uint8_t)(Linecoding.bitrate>>8);
 80155ac:	4b16      	ldr	r3, [pc, #88]	; (8015608 <CDC_Control_FS+0x170>)
 80155ae:	681b      	ldr	r3, [r3, #0]
 80155b0:	0a1a      	lsrs	r2, r3, #8
 80155b2:	683b      	ldr	r3, [r7, #0]
 80155b4:	3301      	adds	r3, #1
 80155b6:	b2d2      	uxtb	r2, r2
 80155b8:	701a      	strb	r2, [r3, #0]
      pbuf[2] = (uint8_t)(Linecoding.bitrate>>16);
 80155ba:	4b13      	ldr	r3, [pc, #76]	; (8015608 <CDC_Control_FS+0x170>)
 80155bc:	681b      	ldr	r3, [r3, #0]
 80155be:	0c1a      	lsrs	r2, r3, #16
 80155c0:	683b      	ldr	r3, [r7, #0]
 80155c2:	3302      	adds	r3, #2
 80155c4:	b2d2      	uxtb	r2, r2
 80155c6:	701a      	strb	r2, [r3, #0]
      pbuf[3] = (uint8_t)(Linecoding.bitrate>>24);
 80155c8:	4b0f      	ldr	r3, [pc, #60]	; (8015608 <CDC_Control_FS+0x170>)
 80155ca:	681b      	ldr	r3, [r3, #0]
 80155cc:	0e1a      	lsrs	r2, r3, #24
 80155ce:	683b      	ldr	r3, [r7, #0]
 80155d0:	3303      	adds	r3, #3
 80155d2:	b2d2      	uxtb	r2, r2
 80155d4:	701a      	strb	r2, [r3, #0]
      pbuf[4] = Linecoding.format;
 80155d6:	683b      	ldr	r3, [r7, #0]
 80155d8:	3304      	adds	r3, #4
 80155da:	4a0b      	ldr	r2, [pc, #44]	; (8015608 <CDC_Control_FS+0x170>)
 80155dc:	7912      	ldrb	r2, [r2, #4]
 80155de:	701a      	strb	r2, [r3, #0]
      pbuf[5] = Linecoding.paritytype;
 80155e0:	683b      	ldr	r3, [r7, #0]
 80155e2:	3305      	adds	r3, #5
 80155e4:	4a08      	ldr	r2, [pc, #32]	; (8015608 <CDC_Control_FS+0x170>)
 80155e6:	7952      	ldrb	r2, [r2, #5]
 80155e8:	701a      	strb	r2, [r3, #0]
      pbuf[6] = Linecoding.datatype;
 80155ea:	683b      	ldr	r3, [r7, #0]
 80155ec:	3306      	adds	r3, #6
 80155ee:	4a06      	ldr	r2, [pc, #24]	; (8015608 <CDC_Control_FS+0x170>)
 80155f0:	7992      	ldrb	r2, [r2, #6]
 80155f2:	701a      	strb	r2, [r3, #0]
    break;
 80155f4:	e000      	b.n	80155f8 <CDC_Control_FS+0x160>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80155f6:	bf00      	nop
  }

  return (USBD_OK);
 80155f8:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80155fa:	4618      	mov	r0, r3
 80155fc:	370c      	adds	r7, #12
 80155fe:	46bd      	mov	sp, r7
 8015600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015604:	4770      	bx	lr
 8015606:	bf00      	nop
 8015608:	20000134 	.word	0x20000134

0801560c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 801560c:	b580      	push	{r7, lr}
 801560e:	b084      	sub	sp, #16
 8015610:	af00      	add	r7, sp, #0
 8015612:	6078      	str	r0, [r7, #4]
 8015614:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8015616:	6879      	ldr	r1, [r7, #4]
 8015618:	480e      	ldr	r0, [pc, #56]	; (8015654 <CDC_Receive_FS+0x48>)
 801561a:	f7fe fb65 	bl	8013ce8 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801561e:	480d      	ldr	r0, [pc, #52]	; (8015654 <CDC_Receive_FS+0x48>)
 8015620:	f7fe fbc0 	bl	8013da4 <USBD_CDC_ReceivePacket>

  for(int i=0; i<*Len; i++)
 8015624:	2300      	movs	r3, #0
 8015626:	60fb      	str	r3, [r7, #12]
 8015628:	e009      	b.n	801563e <CDC_Receive_FS+0x32>
  {
  	cdcDataIn(Buf[i]);
 801562a:	68fb      	ldr	r3, [r7, #12]
 801562c:	687a      	ldr	r2, [r7, #4]
 801562e:	4413      	add	r3, r2
 8015630:	781b      	ldrb	r3, [r3, #0]
 8015632:	4618      	mov	r0, r3
 8015634:	f7ec ffc8 	bl	80025c8 <cdcDataIn>
  for(int i=0; i<*Len; i++)
 8015638:	68fb      	ldr	r3, [r7, #12]
 801563a:	3301      	adds	r3, #1
 801563c:	60fb      	str	r3, [r7, #12]
 801563e:	683b      	ldr	r3, [r7, #0]
 8015640:	681a      	ldr	r2, [r3, #0]
 8015642:	68fb      	ldr	r3, [r7, #12]
 8015644:	429a      	cmp	r2, r3
 8015646:	d8f0      	bhi.n	801562a <CDC_Receive_FS+0x1e>
  }

  return (USBD_OK);
 8015648:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 801564a:	4618      	mov	r0, r3
 801564c:	3710      	adds	r7, #16
 801564e:	46bd      	mov	sp, r7
 8015650:	bd80      	pop	{r7, pc}
 8015652:	bf00      	nop
 8015654:	200053b8 	.word	0x200053b8

08015658 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8015658:	b580      	push	{r7, lr}
 801565a:	b084      	sub	sp, #16
 801565c:	af00      	add	r7, sp, #0
 801565e:	6078      	str	r0, [r7, #4]
 8015660:	460b      	mov	r3, r1
 8015662:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8015664:	2300      	movs	r3, #0
 8015666:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8015668:	4b0d      	ldr	r3, [pc, #52]	; (80156a0 <CDC_Transmit_FS+0x48>)
 801566a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801566e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8015670:	68bb      	ldr	r3, [r7, #8]
 8015672:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8015676:	2b00      	cmp	r3, #0
 8015678:	d001      	beq.n	801567e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 801567a:	2301      	movs	r3, #1
 801567c:	e00b      	b.n	8015696 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 801567e:	887b      	ldrh	r3, [r7, #2]
 8015680:	461a      	mov	r2, r3
 8015682:	6879      	ldr	r1, [r7, #4]
 8015684:	4806      	ldr	r0, [pc, #24]	; (80156a0 <CDC_Transmit_FS+0x48>)
 8015686:	f7fe fb0d 	bl	8013ca4 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 801568a:	4805      	ldr	r0, [pc, #20]	; (80156a0 <CDC_Transmit_FS+0x48>)
 801568c:	f7fe fb4a 	bl	8013d24 <USBD_CDC_TransmitPacket>
 8015690:	4603      	mov	r3, r0
 8015692:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8015694:	7bfb      	ldrb	r3, [r7, #15]
}
 8015696:	4618      	mov	r0, r3
 8015698:	3710      	adds	r7, #16
 801569a:	46bd      	mov	sp, r7
 801569c:	bd80      	pop	{r7, pc}
 801569e:	bf00      	nop
 80156a0:	200053b8 	.word	0x200053b8

080156a4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80156a4:	b480      	push	{r7}
 80156a6:	b087      	sub	sp, #28
 80156a8:	af00      	add	r7, sp, #0
 80156aa:	60f8      	str	r0, [r7, #12]
 80156ac:	60b9      	str	r1, [r7, #8]
 80156ae:	4613      	mov	r3, r2
 80156b0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80156b2:	2300      	movs	r3, #0
 80156b4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80156b6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80156ba:	4618      	mov	r0, r3
 80156bc:	371c      	adds	r7, #28
 80156be:	46bd      	mov	sp, r7
 80156c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156c4:	4770      	bx	lr
	...

080156c8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80156c8:	b480      	push	{r7}
 80156ca:	b083      	sub	sp, #12
 80156cc:	af00      	add	r7, sp, #0
 80156ce:	4603      	mov	r3, r0
 80156d0:	6039      	str	r1, [r7, #0]
 80156d2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80156d4:	683b      	ldr	r3, [r7, #0]
 80156d6:	2212      	movs	r2, #18
 80156d8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80156da:	4b03      	ldr	r3, [pc, #12]	; (80156e8 <USBD_FS_DeviceDescriptor+0x20>)
}
 80156dc:	4618      	mov	r0, r3
 80156de:	370c      	adds	r7, #12
 80156e0:	46bd      	mov	sp, r7
 80156e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156e6:	4770      	bx	lr
 80156e8:	2000016c 	.word	0x2000016c

080156ec <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80156ec:	b480      	push	{r7}
 80156ee:	b083      	sub	sp, #12
 80156f0:	af00      	add	r7, sp, #0
 80156f2:	4603      	mov	r3, r0
 80156f4:	6039      	str	r1, [r7, #0]
 80156f6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80156f8:	683b      	ldr	r3, [r7, #0]
 80156fa:	2204      	movs	r2, #4
 80156fc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80156fe:	4b03      	ldr	r3, [pc, #12]	; (801570c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8015700:	4618      	mov	r0, r3
 8015702:	370c      	adds	r7, #12
 8015704:	46bd      	mov	sp, r7
 8015706:	f85d 7b04 	ldr.w	r7, [sp], #4
 801570a:	4770      	bx	lr
 801570c:	20000180 	.word	0x20000180

08015710 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015710:	b580      	push	{r7, lr}
 8015712:	b082      	sub	sp, #8
 8015714:	af00      	add	r7, sp, #0
 8015716:	4603      	mov	r3, r0
 8015718:	6039      	str	r1, [r7, #0]
 801571a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801571c:	79fb      	ldrb	r3, [r7, #7]
 801571e:	2b00      	cmp	r3, #0
 8015720:	d105      	bne.n	801572e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8015722:	683a      	ldr	r2, [r7, #0]
 8015724:	4907      	ldr	r1, [pc, #28]	; (8015744 <USBD_FS_ProductStrDescriptor+0x34>)
 8015726:	4808      	ldr	r0, [pc, #32]	; (8015748 <USBD_FS_ProductStrDescriptor+0x38>)
 8015728:	f7ff fd8a 	bl	8015240 <USBD_GetString>
 801572c:	e004      	b.n	8015738 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801572e:	683a      	ldr	r2, [r7, #0]
 8015730:	4904      	ldr	r1, [pc, #16]	; (8015744 <USBD_FS_ProductStrDescriptor+0x34>)
 8015732:	4805      	ldr	r0, [pc, #20]	; (8015748 <USBD_FS_ProductStrDescriptor+0x38>)
 8015734:	f7ff fd84 	bl	8015240 <USBD_GetString>
  }
  return USBD_StrDesc;
 8015738:	4b02      	ldr	r3, [pc, #8]	; (8015744 <USBD_FS_ProductStrDescriptor+0x34>)
}
 801573a:	4618      	mov	r0, r3
 801573c:	3708      	adds	r7, #8
 801573e:	46bd      	mov	sp, r7
 8015740:	bd80      	pop	{r7, pc}
 8015742:	bf00      	nop
 8015744:	20006694 	.word	0x20006694
 8015748:	080198b0 	.word	0x080198b0

0801574c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801574c:	b580      	push	{r7, lr}
 801574e:	b082      	sub	sp, #8
 8015750:	af00      	add	r7, sp, #0
 8015752:	4603      	mov	r3, r0
 8015754:	6039      	str	r1, [r7, #0]
 8015756:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8015758:	683a      	ldr	r2, [r7, #0]
 801575a:	4904      	ldr	r1, [pc, #16]	; (801576c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 801575c:	4804      	ldr	r0, [pc, #16]	; (8015770 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 801575e:	f7ff fd6f 	bl	8015240 <USBD_GetString>
  return USBD_StrDesc;
 8015762:	4b02      	ldr	r3, [pc, #8]	; (801576c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8015764:	4618      	mov	r0, r3
 8015766:	3708      	adds	r7, #8
 8015768:	46bd      	mov	sp, r7
 801576a:	bd80      	pop	{r7, pc}
 801576c:	20006694 	.word	0x20006694
 8015770:	080198c8 	.word	0x080198c8

08015774 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015774:	b580      	push	{r7, lr}
 8015776:	b082      	sub	sp, #8
 8015778:	af00      	add	r7, sp, #0
 801577a:	4603      	mov	r3, r0
 801577c:	6039      	str	r1, [r7, #0]
 801577e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8015780:	683b      	ldr	r3, [r7, #0]
 8015782:	221a      	movs	r2, #26
 8015784:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8015786:	f000 f843 	bl	8015810 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 801578a:	4b02      	ldr	r3, [pc, #8]	; (8015794 <USBD_FS_SerialStrDescriptor+0x20>)
}
 801578c:	4618      	mov	r0, r3
 801578e:	3708      	adds	r7, #8
 8015790:	46bd      	mov	sp, r7
 8015792:	bd80      	pop	{r7, pc}
 8015794:	20000184 	.word	0x20000184

08015798 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015798:	b580      	push	{r7, lr}
 801579a:	b082      	sub	sp, #8
 801579c:	af00      	add	r7, sp, #0
 801579e:	4603      	mov	r3, r0
 80157a0:	6039      	str	r1, [r7, #0]
 80157a2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80157a4:	79fb      	ldrb	r3, [r7, #7]
 80157a6:	2b00      	cmp	r3, #0
 80157a8:	d105      	bne.n	80157b6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80157aa:	683a      	ldr	r2, [r7, #0]
 80157ac:	4907      	ldr	r1, [pc, #28]	; (80157cc <USBD_FS_ConfigStrDescriptor+0x34>)
 80157ae:	4808      	ldr	r0, [pc, #32]	; (80157d0 <USBD_FS_ConfigStrDescriptor+0x38>)
 80157b0:	f7ff fd46 	bl	8015240 <USBD_GetString>
 80157b4:	e004      	b.n	80157c0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80157b6:	683a      	ldr	r2, [r7, #0]
 80157b8:	4904      	ldr	r1, [pc, #16]	; (80157cc <USBD_FS_ConfigStrDescriptor+0x34>)
 80157ba:	4805      	ldr	r0, [pc, #20]	; (80157d0 <USBD_FS_ConfigStrDescriptor+0x38>)
 80157bc:	f7ff fd40 	bl	8015240 <USBD_GetString>
  }
  return USBD_StrDesc;
 80157c0:	4b02      	ldr	r3, [pc, #8]	; (80157cc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80157c2:	4618      	mov	r0, r3
 80157c4:	3708      	adds	r7, #8
 80157c6:	46bd      	mov	sp, r7
 80157c8:	bd80      	pop	{r7, pc}
 80157ca:	bf00      	nop
 80157cc:	20006694 	.word	0x20006694
 80157d0:	080198dc 	.word	0x080198dc

080157d4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80157d4:	b580      	push	{r7, lr}
 80157d6:	b082      	sub	sp, #8
 80157d8:	af00      	add	r7, sp, #0
 80157da:	4603      	mov	r3, r0
 80157dc:	6039      	str	r1, [r7, #0]
 80157de:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80157e0:	79fb      	ldrb	r3, [r7, #7]
 80157e2:	2b00      	cmp	r3, #0
 80157e4:	d105      	bne.n	80157f2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80157e6:	683a      	ldr	r2, [r7, #0]
 80157e8:	4907      	ldr	r1, [pc, #28]	; (8015808 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80157ea:	4808      	ldr	r0, [pc, #32]	; (801580c <USBD_FS_InterfaceStrDescriptor+0x38>)
 80157ec:	f7ff fd28 	bl	8015240 <USBD_GetString>
 80157f0:	e004      	b.n	80157fc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80157f2:	683a      	ldr	r2, [r7, #0]
 80157f4:	4904      	ldr	r1, [pc, #16]	; (8015808 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80157f6:	4805      	ldr	r0, [pc, #20]	; (801580c <USBD_FS_InterfaceStrDescriptor+0x38>)
 80157f8:	f7ff fd22 	bl	8015240 <USBD_GetString>
  }
  return USBD_StrDesc;
 80157fc:	4b02      	ldr	r3, [pc, #8]	; (8015808 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80157fe:	4618      	mov	r0, r3
 8015800:	3708      	adds	r7, #8
 8015802:	46bd      	mov	sp, r7
 8015804:	bd80      	pop	{r7, pc}
 8015806:	bf00      	nop
 8015808:	20006694 	.word	0x20006694
 801580c:	080198e8 	.word	0x080198e8

08015810 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8015810:	b580      	push	{r7, lr}
 8015812:	b084      	sub	sp, #16
 8015814:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8015816:	4b0f      	ldr	r3, [pc, #60]	; (8015854 <Get_SerialNum+0x44>)
 8015818:	681b      	ldr	r3, [r3, #0]
 801581a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 801581c:	4b0e      	ldr	r3, [pc, #56]	; (8015858 <Get_SerialNum+0x48>)
 801581e:	681b      	ldr	r3, [r3, #0]
 8015820:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8015822:	4b0e      	ldr	r3, [pc, #56]	; (801585c <Get_SerialNum+0x4c>)
 8015824:	681b      	ldr	r3, [r3, #0]
 8015826:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8015828:	68fa      	ldr	r2, [r7, #12]
 801582a:	687b      	ldr	r3, [r7, #4]
 801582c:	4413      	add	r3, r2
 801582e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8015830:	68fb      	ldr	r3, [r7, #12]
 8015832:	2b00      	cmp	r3, #0
 8015834:	d009      	beq.n	801584a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8015836:	2208      	movs	r2, #8
 8015838:	4909      	ldr	r1, [pc, #36]	; (8015860 <Get_SerialNum+0x50>)
 801583a:	68f8      	ldr	r0, [r7, #12]
 801583c:	f000 f814 	bl	8015868 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8015840:	2204      	movs	r2, #4
 8015842:	4908      	ldr	r1, [pc, #32]	; (8015864 <Get_SerialNum+0x54>)
 8015844:	68b8      	ldr	r0, [r7, #8]
 8015846:	f000 f80f 	bl	8015868 <IntToUnicode>
  }
}
 801584a:	bf00      	nop
 801584c:	3710      	adds	r7, #16
 801584e:	46bd      	mov	sp, r7
 8015850:	bd80      	pop	{r7, pc}
 8015852:	bf00      	nop
 8015854:	1fff7a10 	.word	0x1fff7a10
 8015858:	1fff7a14 	.word	0x1fff7a14
 801585c:	1fff7a18 	.word	0x1fff7a18
 8015860:	20000186 	.word	0x20000186
 8015864:	20000196 	.word	0x20000196

08015868 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8015868:	b480      	push	{r7}
 801586a:	b087      	sub	sp, #28
 801586c:	af00      	add	r7, sp, #0
 801586e:	60f8      	str	r0, [r7, #12]
 8015870:	60b9      	str	r1, [r7, #8]
 8015872:	4613      	mov	r3, r2
 8015874:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8015876:	2300      	movs	r3, #0
 8015878:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801587a:	2300      	movs	r3, #0
 801587c:	75fb      	strb	r3, [r7, #23]
 801587e:	e027      	b.n	80158d0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8015880:	68fb      	ldr	r3, [r7, #12]
 8015882:	0f1b      	lsrs	r3, r3, #28
 8015884:	2b09      	cmp	r3, #9
 8015886:	d80b      	bhi.n	80158a0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8015888:	68fb      	ldr	r3, [r7, #12]
 801588a:	0f1b      	lsrs	r3, r3, #28
 801588c:	b2da      	uxtb	r2, r3
 801588e:	7dfb      	ldrb	r3, [r7, #23]
 8015890:	005b      	lsls	r3, r3, #1
 8015892:	4619      	mov	r1, r3
 8015894:	68bb      	ldr	r3, [r7, #8]
 8015896:	440b      	add	r3, r1
 8015898:	3230      	adds	r2, #48	; 0x30
 801589a:	b2d2      	uxtb	r2, r2
 801589c:	701a      	strb	r2, [r3, #0]
 801589e:	e00a      	b.n	80158b6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80158a0:	68fb      	ldr	r3, [r7, #12]
 80158a2:	0f1b      	lsrs	r3, r3, #28
 80158a4:	b2da      	uxtb	r2, r3
 80158a6:	7dfb      	ldrb	r3, [r7, #23]
 80158a8:	005b      	lsls	r3, r3, #1
 80158aa:	4619      	mov	r1, r3
 80158ac:	68bb      	ldr	r3, [r7, #8]
 80158ae:	440b      	add	r3, r1
 80158b0:	3237      	adds	r2, #55	; 0x37
 80158b2:	b2d2      	uxtb	r2, r2
 80158b4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80158b6:	68fb      	ldr	r3, [r7, #12]
 80158b8:	011b      	lsls	r3, r3, #4
 80158ba:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80158bc:	7dfb      	ldrb	r3, [r7, #23]
 80158be:	005b      	lsls	r3, r3, #1
 80158c0:	3301      	adds	r3, #1
 80158c2:	68ba      	ldr	r2, [r7, #8]
 80158c4:	4413      	add	r3, r2
 80158c6:	2200      	movs	r2, #0
 80158c8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80158ca:	7dfb      	ldrb	r3, [r7, #23]
 80158cc:	3301      	adds	r3, #1
 80158ce:	75fb      	strb	r3, [r7, #23]
 80158d0:	7dfa      	ldrb	r2, [r7, #23]
 80158d2:	79fb      	ldrb	r3, [r7, #7]
 80158d4:	429a      	cmp	r2, r3
 80158d6:	d3d3      	bcc.n	8015880 <IntToUnicode+0x18>
  }
}
 80158d8:	bf00      	nop
 80158da:	bf00      	nop
 80158dc:	371c      	adds	r7, #28
 80158de:	46bd      	mov	sp, r7
 80158e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158e4:	4770      	bx	lr
	...

080158e8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80158e8:	b580      	push	{r7, lr}
 80158ea:	b08a      	sub	sp, #40	; 0x28
 80158ec:	af00      	add	r7, sp, #0
 80158ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80158f0:	f107 0314 	add.w	r3, r7, #20
 80158f4:	2200      	movs	r2, #0
 80158f6:	601a      	str	r2, [r3, #0]
 80158f8:	605a      	str	r2, [r3, #4]
 80158fa:	609a      	str	r2, [r3, #8]
 80158fc:	60da      	str	r2, [r3, #12]
 80158fe:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8015900:	687b      	ldr	r3, [r7, #4]
 8015902:	681b      	ldr	r3, [r3, #0]
 8015904:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8015908:	d13a      	bne.n	8015980 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801590a:	2300      	movs	r3, #0
 801590c:	613b      	str	r3, [r7, #16]
 801590e:	4b1e      	ldr	r3, [pc, #120]	; (8015988 <HAL_PCD_MspInit+0xa0>)
 8015910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015912:	4a1d      	ldr	r2, [pc, #116]	; (8015988 <HAL_PCD_MspInit+0xa0>)
 8015914:	f043 0301 	orr.w	r3, r3, #1
 8015918:	6313      	str	r3, [r2, #48]	; 0x30
 801591a:	4b1b      	ldr	r3, [pc, #108]	; (8015988 <HAL_PCD_MspInit+0xa0>)
 801591c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801591e:	f003 0301 	and.w	r3, r3, #1
 8015922:	613b      	str	r3, [r7, #16]
 8015924:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8015926:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 801592a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801592c:	2302      	movs	r3, #2
 801592e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015930:	2300      	movs	r3, #0
 8015932:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8015934:	2303      	movs	r3, #3
 8015936:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8015938:	230a      	movs	r3, #10
 801593a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801593c:	f107 0314 	add.w	r3, r7, #20
 8015940:	4619      	mov	r1, r3
 8015942:	4812      	ldr	r0, [pc, #72]	; (801598c <HAL_PCD_MspInit+0xa4>)
 8015944:	f7f1 f876 	bl	8006a34 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8015948:	4b0f      	ldr	r3, [pc, #60]	; (8015988 <HAL_PCD_MspInit+0xa0>)
 801594a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801594c:	4a0e      	ldr	r2, [pc, #56]	; (8015988 <HAL_PCD_MspInit+0xa0>)
 801594e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015952:	6353      	str	r3, [r2, #52]	; 0x34
 8015954:	2300      	movs	r3, #0
 8015956:	60fb      	str	r3, [r7, #12]
 8015958:	4b0b      	ldr	r3, [pc, #44]	; (8015988 <HAL_PCD_MspInit+0xa0>)
 801595a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801595c:	4a0a      	ldr	r2, [pc, #40]	; (8015988 <HAL_PCD_MspInit+0xa0>)
 801595e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8015962:	6453      	str	r3, [r2, #68]	; 0x44
 8015964:	4b08      	ldr	r3, [pc, #32]	; (8015988 <HAL_PCD_MspInit+0xa0>)
 8015966:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015968:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801596c:	60fb      	str	r3, [r7, #12]
 801596e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 6, 0);
 8015970:	2200      	movs	r2, #0
 8015972:	2106      	movs	r1, #6
 8015974:	2043      	movs	r0, #67	; 0x43
 8015976:	f7f0 f984 	bl	8005c82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 801597a:	2043      	movs	r0, #67	; 0x43
 801597c:	f7f0 f99d 	bl	8005cba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8015980:	bf00      	nop
 8015982:	3728      	adds	r7, #40	; 0x28
 8015984:	46bd      	mov	sp, r7
 8015986:	bd80      	pop	{r7, pc}
 8015988:	40023800 	.word	0x40023800
 801598c:	40020000 	.word	0x40020000

08015990 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015990:	b580      	push	{r7, lr}
 8015992:	b082      	sub	sp, #8
 8015994:	af00      	add	r7, sp, #0
 8015996:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8015998:	687b      	ldr	r3, [r7, #4]
 801599a:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	; 0x4e0
 801599e:	687b      	ldr	r3, [r7, #4]
 80159a0:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 80159a4:	4619      	mov	r1, r3
 80159a6:	4610      	mov	r0, r2
 80159a8:	f7fe fae5 	bl	8013f76 <USBD_LL_SetupStage>
}
 80159ac:	bf00      	nop
 80159ae:	3708      	adds	r7, #8
 80159b0:	46bd      	mov	sp, r7
 80159b2:	bd80      	pop	{r7, pc}

080159b4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80159b4:	b580      	push	{r7, lr}
 80159b6:	b082      	sub	sp, #8
 80159b8:	af00      	add	r7, sp, #0
 80159ba:	6078      	str	r0, [r7, #4]
 80159bc:	460b      	mov	r3, r1
 80159be:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80159c0:	687b      	ldr	r3, [r7, #4]
 80159c2:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 80159c6:	78fa      	ldrb	r2, [r7, #3]
 80159c8:	6879      	ldr	r1, [r7, #4]
 80159ca:	4613      	mov	r3, r2
 80159cc:	00db      	lsls	r3, r3, #3
 80159ce:	4413      	add	r3, r2
 80159d0:	009b      	lsls	r3, r3, #2
 80159d2:	440b      	add	r3, r1
 80159d4:	f503 7318 	add.w	r3, r3, #608	; 0x260
 80159d8:	681a      	ldr	r2, [r3, #0]
 80159da:	78fb      	ldrb	r3, [r7, #3]
 80159dc:	4619      	mov	r1, r3
 80159de:	f7fe fb1f 	bl	8014020 <USBD_LL_DataOutStage>
}
 80159e2:	bf00      	nop
 80159e4:	3708      	adds	r7, #8
 80159e6:	46bd      	mov	sp, r7
 80159e8:	bd80      	pop	{r7, pc}

080159ea <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80159ea:	b580      	push	{r7, lr}
 80159ec:	b082      	sub	sp, #8
 80159ee:	af00      	add	r7, sp, #0
 80159f0:	6078      	str	r0, [r7, #4]
 80159f2:	460b      	mov	r3, r1
 80159f4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80159f6:	687b      	ldr	r3, [r7, #4]
 80159f8:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 80159fc:	78fa      	ldrb	r2, [r7, #3]
 80159fe:	6879      	ldr	r1, [r7, #4]
 8015a00:	4613      	mov	r3, r2
 8015a02:	00db      	lsls	r3, r3, #3
 8015a04:	4413      	add	r3, r2
 8015a06:	009b      	lsls	r3, r3, #2
 8015a08:	440b      	add	r3, r1
 8015a0a:	3320      	adds	r3, #32
 8015a0c:	681a      	ldr	r2, [r3, #0]
 8015a0e:	78fb      	ldrb	r3, [r7, #3]
 8015a10:	4619      	mov	r1, r3
 8015a12:	f7fe fbb8 	bl	8014186 <USBD_LL_DataInStage>
}
 8015a16:	bf00      	nop
 8015a18:	3708      	adds	r7, #8
 8015a1a:	46bd      	mov	sp, r7
 8015a1c:	bd80      	pop	{r7, pc}

08015a1e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015a1e:	b580      	push	{r7, lr}
 8015a20:	b082      	sub	sp, #8
 8015a22:	af00      	add	r7, sp, #0
 8015a24:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8015a26:	687b      	ldr	r3, [r7, #4]
 8015a28:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8015a2c:	4618      	mov	r0, r3
 8015a2e:	f7fe fcf2 	bl	8014416 <USBD_LL_SOF>
}
 8015a32:	bf00      	nop
 8015a34:	3708      	adds	r7, #8
 8015a36:	46bd      	mov	sp, r7
 8015a38:	bd80      	pop	{r7, pc}

08015a3a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015a3a:	b580      	push	{r7, lr}
 8015a3c:	b084      	sub	sp, #16
 8015a3e:	af00      	add	r7, sp, #0
 8015a40:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8015a42:	2301      	movs	r3, #1
 8015a44:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8015a46:	687b      	ldr	r3, [r7, #4]
 8015a48:	79db      	ldrb	r3, [r3, #7]
 8015a4a:	2b02      	cmp	r3, #2
 8015a4c:	d001      	beq.n	8015a52 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8015a4e:	f7eb fdc9 	bl	80015e4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8015a52:	687b      	ldr	r3, [r7, #4]
 8015a54:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8015a58:	7bfa      	ldrb	r2, [r7, #15]
 8015a5a:	4611      	mov	r1, r2
 8015a5c:	4618      	mov	r0, r3
 8015a5e:	f7fe fc96 	bl	801438e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8015a62:	687b      	ldr	r3, [r7, #4]
 8015a64:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8015a68:	4618      	mov	r0, r3
 8015a6a:	f7fe fc3e 	bl	80142ea <USBD_LL_Reset>
}
 8015a6e:	bf00      	nop
 8015a70:	3710      	adds	r7, #16
 8015a72:	46bd      	mov	sp, r7
 8015a74:	bd80      	pop	{r7, pc}
	...

08015a78 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015a78:	b580      	push	{r7, lr}
 8015a7a:	b082      	sub	sp, #8
 8015a7c:	af00      	add	r7, sp, #0
 8015a7e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8015a80:	687b      	ldr	r3, [r7, #4]
 8015a82:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8015a86:	4618      	mov	r0, r3
 8015a88:	f7fe fc91 	bl	80143ae <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8015a8c:	687b      	ldr	r3, [r7, #4]
 8015a8e:	681b      	ldr	r3, [r3, #0]
 8015a90:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8015a94:	681b      	ldr	r3, [r3, #0]
 8015a96:	687a      	ldr	r2, [r7, #4]
 8015a98:	6812      	ldr	r2, [r2, #0]
 8015a9a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8015a9e:	f043 0301 	orr.w	r3, r3, #1
 8015aa2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8015aa4:	687b      	ldr	r3, [r7, #4]
 8015aa6:	7adb      	ldrb	r3, [r3, #11]
 8015aa8:	2b00      	cmp	r3, #0
 8015aaa:	d005      	beq.n	8015ab8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8015aac:	4b04      	ldr	r3, [pc, #16]	; (8015ac0 <HAL_PCD_SuspendCallback+0x48>)
 8015aae:	691b      	ldr	r3, [r3, #16]
 8015ab0:	4a03      	ldr	r2, [pc, #12]	; (8015ac0 <HAL_PCD_SuspendCallback+0x48>)
 8015ab2:	f043 0306 	orr.w	r3, r3, #6
 8015ab6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8015ab8:	bf00      	nop
 8015aba:	3708      	adds	r7, #8
 8015abc:	46bd      	mov	sp, r7
 8015abe:	bd80      	pop	{r7, pc}
 8015ac0:	e000ed00 	.word	0xe000ed00

08015ac4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015ac4:	b580      	push	{r7, lr}
 8015ac6:	b082      	sub	sp, #8
 8015ac8:	af00      	add	r7, sp, #0
 8015aca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8015acc:	687b      	ldr	r3, [r7, #4]
 8015ace:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8015ad2:	4618      	mov	r0, r3
 8015ad4:	f7fe fc87 	bl	80143e6 <USBD_LL_Resume>
}
 8015ad8:	bf00      	nop
 8015ada:	3708      	adds	r7, #8
 8015adc:	46bd      	mov	sp, r7
 8015ade:	bd80      	pop	{r7, pc}

08015ae0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015ae0:	b580      	push	{r7, lr}
 8015ae2:	b082      	sub	sp, #8
 8015ae4:	af00      	add	r7, sp, #0
 8015ae6:	6078      	str	r0, [r7, #4]
 8015ae8:	460b      	mov	r3, r1
 8015aea:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8015aec:	687b      	ldr	r3, [r7, #4]
 8015aee:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8015af2:	78fa      	ldrb	r2, [r7, #3]
 8015af4:	4611      	mov	r1, r2
 8015af6:	4618      	mov	r0, r3
 8015af8:	f7fe fcdf 	bl	80144ba <USBD_LL_IsoOUTIncomplete>
}
 8015afc:	bf00      	nop
 8015afe:	3708      	adds	r7, #8
 8015b00:	46bd      	mov	sp, r7
 8015b02:	bd80      	pop	{r7, pc}

08015b04 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015b04:	b580      	push	{r7, lr}
 8015b06:	b082      	sub	sp, #8
 8015b08:	af00      	add	r7, sp, #0
 8015b0a:	6078      	str	r0, [r7, #4]
 8015b0c:	460b      	mov	r3, r1
 8015b0e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8015b10:	687b      	ldr	r3, [r7, #4]
 8015b12:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8015b16:	78fa      	ldrb	r2, [r7, #3]
 8015b18:	4611      	mov	r1, r2
 8015b1a:	4618      	mov	r0, r3
 8015b1c:	f7fe fc9b 	bl	8014456 <USBD_LL_IsoINIncomplete>
}
 8015b20:	bf00      	nop
 8015b22:	3708      	adds	r7, #8
 8015b24:	46bd      	mov	sp, r7
 8015b26:	bd80      	pop	{r7, pc}

08015b28 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015b28:	b580      	push	{r7, lr}
 8015b2a:	b082      	sub	sp, #8
 8015b2c:	af00      	add	r7, sp, #0
 8015b2e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8015b30:	687b      	ldr	r3, [r7, #4]
 8015b32:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8015b36:	4618      	mov	r0, r3
 8015b38:	f7fe fcf1 	bl	801451e <USBD_LL_DevConnected>
}
 8015b3c:	bf00      	nop
 8015b3e:	3708      	adds	r7, #8
 8015b40:	46bd      	mov	sp, r7
 8015b42:	bd80      	pop	{r7, pc}

08015b44 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015b44:	b580      	push	{r7, lr}
 8015b46:	b082      	sub	sp, #8
 8015b48:	af00      	add	r7, sp, #0
 8015b4a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8015b4c:	687b      	ldr	r3, [r7, #4]
 8015b4e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8015b52:	4618      	mov	r0, r3
 8015b54:	f7fe fcee 	bl	8014534 <USBD_LL_DevDisconnected>
}
 8015b58:	bf00      	nop
 8015b5a:	3708      	adds	r7, #8
 8015b5c:	46bd      	mov	sp, r7
 8015b5e:	bd80      	pop	{r7, pc}

08015b60 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8015b60:	b580      	push	{r7, lr}
 8015b62:	b082      	sub	sp, #8
 8015b64:	af00      	add	r7, sp, #0
 8015b66:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8015b68:	687b      	ldr	r3, [r7, #4]
 8015b6a:	781b      	ldrb	r3, [r3, #0]
 8015b6c:	2b00      	cmp	r3, #0
 8015b6e:	d13c      	bne.n	8015bea <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8015b70:	4a20      	ldr	r2, [pc, #128]	; (8015bf4 <USBD_LL_Init+0x94>)
 8015b72:	687b      	ldr	r3, [r7, #4]
 8015b74:	f8c2 34e0 	str.w	r3, [r2, #1248]	; 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8015b78:	687b      	ldr	r3, [r7, #4]
 8015b7a:	4a1e      	ldr	r2, [pc, #120]	; (8015bf4 <USBD_LL_Init+0x94>)
 8015b7c:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8015b80:	4b1c      	ldr	r3, [pc, #112]	; (8015bf4 <USBD_LL_Init+0x94>)
 8015b82:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8015b86:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8015b88:	4b1a      	ldr	r3, [pc, #104]	; (8015bf4 <USBD_LL_Init+0x94>)
 8015b8a:	2204      	movs	r2, #4
 8015b8c:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8015b8e:	4b19      	ldr	r3, [pc, #100]	; (8015bf4 <USBD_LL_Init+0x94>)
 8015b90:	2202      	movs	r2, #2
 8015b92:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8015b94:	4b17      	ldr	r3, [pc, #92]	; (8015bf4 <USBD_LL_Init+0x94>)
 8015b96:	2200      	movs	r2, #0
 8015b98:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8015b9a:	4b16      	ldr	r3, [pc, #88]	; (8015bf4 <USBD_LL_Init+0x94>)
 8015b9c:	2202      	movs	r2, #2
 8015b9e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8015ba0:	4b14      	ldr	r3, [pc, #80]	; (8015bf4 <USBD_LL_Init+0x94>)
 8015ba2:	2200      	movs	r2, #0
 8015ba4:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8015ba6:	4b13      	ldr	r3, [pc, #76]	; (8015bf4 <USBD_LL_Init+0x94>)
 8015ba8:	2200      	movs	r2, #0
 8015baa:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8015bac:	4b11      	ldr	r3, [pc, #68]	; (8015bf4 <USBD_LL_Init+0x94>)
 8015bae:	2200      	movs	r2, #0
 8015bb0:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8015bb2:	4b10      	ldr	r3, [pc, #64]	; (8015bf4 <USBD_LL_Init+0x94>)
 8015bb4:	2200      	movs	r2, #0
 8015bb6:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8015bb8:	4b0e      	ldr	r3, [pc, #56]	; (8015bf4 <USBD_LL_Init+0x94>)
 8015bba:	2200      	movs	r2, #0
 8015bbc:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8015bbe:	480d      	ldr	r0, [pc, #52]	; (8015bf4 <USBD_LL_Init+0x94>)
 8015bc0:	f7f4 f8c6 	bl	8009d50 <HAL_PCD_Init>
 8015bc4:	4603      	mov	r3, r0
 8015bc6:	2b00      	cmp	r3, #0
 8015bc8:	d001      	beq.n	8015bce <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8015bca:	f7eb fd0b 	bl	80015e4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8015bce:	2180      	movs	r1, #128	; 0x80
 8015bd0:	4808      	ldr	r0, [pc, #32]	; (8015bf4 <USBD_LL_Init+0x94>)
 8015bd2:	f7f5 faf0 	bl	800b1b6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8015bd6:	2240      	movs	r2, #64	; 0x40
 8015bd8:	2100      	movs	r1, #0
 8015bda:	4806      	ldr	r0, [pc, #24]	; (8015bf4 <USBD_LL_Init+0x94>)
 8015bdc:	f7f5 faa4 	bl	800b128 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8015be0:	2280      	movs	r2, #128	; 0x80
 8015be2:	2101      	movs	r1, #1
 8015be4:	4803      	ldr	r0, [pc, #12]	; (8015bf4 <USBD_LL_Init+0x94>)
 8015be6:	f7f5 fa9f 	bl	800b128 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8015bea:	2300      	movs	r3, #0
}
 8015bec:	4618      	mov	r0, r3
 8015bee:	3708      	adds	r7, #8
 8015bf0:	46bd      	mov	sp, r7
 8015bf2:	bd80      	pop	{r7, pc}
 8015bf4:	20006894 	.word	0x20006894

08015bf8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8015bf8:	b580      	push	{r7, lr}
 8015bfa:	b084      	sub	sp, #16
 8015bfc:	af00      	add	r7, sp, #0
 8015bfe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015c00:	2300      	movs	r3, #0
 8015c02:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015c04:	2300      	movs	r3, #0
 8015c06:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8015c08:	687b      	ldr	r3, [r7, #4]
 8015c0a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8015c0e:	4618      	mov	r0, r3
 8015c10:	f7f4 f9ad 	bl	8009f6e <HAL_PCD_Start>
 8015c14:	4603      	mov	r3, r0
 8015c16:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015c18:	7bfb      	ldrb	r3, [r7, #15]
 8015c1a:	4618      	mov	r0, r3
 8015c1c:	f000 f942 	bl	8015ea4 <USBD_Get_USB_Status>
 8015c20:	4603      	mov	r3, r0
 8015c22:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015c24:	7bbb      	ldrb	r3, [r7, #14]
}
 8015c26:	4618      	mov	r0, r3
 8015c28:	3710      	adds	r7, #16
 8015c2a:	46bd      	mov	sp, r7
 8015c2c:	bd80      	pop	{r7, pc}

08015c2e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8015c2e:	b580      	push	{r7, lr}
 8015c30:	b084      	sub	sp, #16
 8015c32:	af00      	add	r7, sp, #0
 8015c34:	6078      	str	r0, [r7, #4]
 8015c36:	4608      	mov	r0, r1
 8015c38:	4611      	mov	r1, r2
 8015c3a:	461a      	mov	r2, r3
 8015c3c:	4603      	mov	r3, r0
 8015c3e:	70fb      	strb	r3, [r7, #3]
 8015c40:	460b      	mov	r3, r1
 8015c42:	70bb      	strb	r3, [r7, #2]
 8015c44:	4613      	mov	r3, r2
 8015c46:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015c48:	2300      	movs	r3, #0
 8015c4a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015c4c:	2300      	movs	r3, #0
 8015c4e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8015c50:	687b      	ldr	r3, [r7, #4]
 8015c52:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8015c56:	78bb      	ldrb	r3, [r7, #2]
 8015c58:	883a      	ldrh	r2, [r7, #0]
 8015c5a:	78f9      	ldrb	r1, [r7, #3]
 8015c5c:	f7f4 fe81 	bl	800a962 <HAL_PCD_EP_Open>
 8015c60:	4603      	mov	r3, r0
 8015c62:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015c64:	7bfb      	ldrb	r3, [r7, #15]
 8015c66:	4618      	mov	r0, r3
 8015c68:	f000 f91c 	bl	8015ea4 <USBD_Get_USB_Status>
 8015c6c:	4603      	mov	r3, r0
 8015c6e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015c70:	7bbb      	ldrb	r3, [r7, #14]
}
 8015c72:	4618      	mov	r0, r3
 8015c74:	3710      	adds	r7, #16
 8015c76:	46bd      	mov	sp, r7
 8015c78:	bd80      	pop	{r7, pc}

08015c7a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015c7a:	b580      	push	{r7, lr}
 8015c7c:	b084      	sub	sp, #16
 8015c7e:	af00      	add	r7, sp, #0
 8015c80:	6078      	str	r0, [r7, #4]
 8015c82:	460b      	mov	r3, r1
 8015c84:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015c86:	2300      	movs	r3, #0
 8015c88:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015c8a:	2300      	movs	r3, #0
 8015c8c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8015c8e:	687b      	ldr	r3, [r7, #4]
 8015c90:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8015c94:	78fa      	ldrb	r2, [r7, #3]
 8015c96:	4611      	mov	r1, r2
 8015c98:	4618      	mov	r0, r3
 8015c9a:	f7f4 feca 	bl	800aa32 <HAL_PCD_EP_Close>
 8015c9e:	4603      	mov	r3, r0
 8015ca0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015ca2:	7bfb      	ldrb	r3, [r7, #15]
 8015ca4:	4618      	mov	r0, r3
 8015ca6:	f000 f8fd 	bl	8015ea4 <USBD_Get_USB_Status>
 8015caa:	4603      	mov	r3, r0
 8015cac:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015cae:	7bbb      	ldrb	r3, [r7, #14]
}
 8015cb0:	4618      	mov	r0, r3
 8015cb2:	3710      	adds	r7, #16
 8015cb4:	46bd      	mov	sp, r7
 8015cb6:	bd80      	pop	{r7, pc}

08015cb8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015cb8:	b580      	push	{r7, lr}
 8015cba:	b084      	sub	sp, #16
 8015cbc:	af00      	add	r7, sp, #0
 8015cbe:	6078      	str	r0, [r7, #4]
 8015cc0:	460b      	mov	r3, r1
 8015cc2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015cc4:	2300      	movs	r3, #0
 8015cc6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015cc8:	2300      	movs	r3, #0
 8015cca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8015ccc:	687b      	ldr	r3, [r7, #4]
 8015cce:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8015cd2:	78fa      	ldrb	r2, [r7, #3]
 8015cd4:	4611      	mov	r1, r2
 8015cd6:	4618      	mov	r0, r3
 8015cd8:	f7f4 ff82 	bl	800abe0 <HAL_PCD_EP_SetStall>
 8015cdc:	4603      	mov	r3, r0
 8015cde:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015ce0:	7bfb      	ldrb	r3, [r7, #15]
 8015ce2:	4618      	mov	r0, r3
 8015ce4:	f000 f8de 	bl	8015ea4 <USBD_Get_USB_Status>
 8015ce8:	4603      	mov	r3, r0
 8015cea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015cec:	7bbb      	ldrb	r3, [r7, #14]
}
 8015cee:	4618      	mov	r0, r3
 8015cf0:	3710      	adds	r7, #16
 8015cf2:	46bd      	mov	sp, r7
 8015cf4:	bd80      	pop	{r7, pc}

08015cf6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015cf6:	b580      	push	{r7, lr}
 8015cf8:	b084      	sub	sp, #16
 8015cfa:	af00      	add	r7, sp, #0
 8015cfc:	6078      	str	r0, [r7, #4]
 8015cfe:	460b      	mov	r3, r1
 8015d00:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015d02:	2300      	movs	r3, #0
 8015d04:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015d06:	2300      	movs	r3, #0
 8015d08:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8015d0a:	687b      	ldr	r3, [r7, #4]
 8015d0c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8015d10:	78fa      	ldrb	r2, [r7, #3]
 8015d12:	4611      	mov	r1, r2
 8015d14:	4618      	mov	r0, r3
 8015d16:	f7f4 ffc6 	bl	800aca6 <HAL_PCD_EP_ClrStall>
 8015d1a:	4603      	mov	r3, r0
 8015d1c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015d1e:	7bfb      	ldrb	r3, [r7, #15]
 8015d20:	4618      	mov	r0, r3
 8015d22:	f000 f8bf 	bl	8015ea4 <USBD_Get_USB_Status>
 8015d26:	4603      	mov	r3, r0
 8015d28:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015d2a:	7bbb      	ldrb	r3, [r7, #14]
}
 8015d2c:	4618      	mov	r0, r3
 8015d2e:	3710      	adds	r7, #16
 8015d30:	46bd      	mov	sp, r7
 8015d32:	bd80      	pop	{r7, pc}

08015d34 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015d34:	b480      	push	{r7}
 8015d36:	b085      	sub	sp, #20
 8015d38:	af00      	add	r7, sp, #0
 8015d3a:	6078      	str	r0, [r7, #4]
 8015d3c:	460b      	mov	r3, r1
 8015d3e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8015d40:	687b      	ldr	r3, [r7, #4]
 8015d42:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8015d46:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8015d48:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8015d4c:	2b00      	cmp	r3, #0
 8015d4e:	da0b      	bge.n	8015d68 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8015d50:	78fb      	ldrb	r3, [r7, #3]
 8015d52:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8015d56:	68f9      	ldr	r1, [r7, #12]
 8015d58:	4613      	mov	r3, r2
 8015d5a:	00db      	lsls	r3, r3, #3
 8015d5c:	4413      	add	r3, r2
 8015d5e:	009b      	lsls	r3, r3, #2
 8015d60:	440b      	add	r3, r1
 8015d62:	3316      	adds	r3, #22
 8015d64:	781b      	ldrb	r3, [r3, #0]
 8015d66:	e00b      	b.n	8015d80 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8015d68:	78fb      	ldrb	r3, [r7, #3]
 8015d6a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8015d6e:	68f9      	ldr	r1, [r7, #12]
 8015d70:	4613      	mov	r3, r2
 8015d72:	00db      	lsls	r3, r3, #3
 8015d74:	4413      	add	r3, r2
 8015d76:	009b      	lsls	r3, r3, #2
 8015d78:	440b      	add	r3, r1
 8015d7a:	f203 2356 	addw	r3, r3, #598	; 0x256
 8015d7e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8015d80:	4618      	mov	r0, r3
 8015d82:	3714      	adds	r7, #20
 8015d84:	46bd      	mov	sp, r7
 8015d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d8a:	4770      	bx	lr

08015d8c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8015d8c:	b580      	push	{r7, lr}
 8015d8e:	b084      	sub	sp, #16
 8015d90:	af00      	add	r7, sp, #0
 8015d92:	6078      	str	r0, [r7, #4]
 8015d94:	460b      	mov	r3, r1
 8015d96:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015d98:	2300      	movs	r3, #0
 8015d9a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015d9c:	2300      	movs	r3, #0
 8015d9e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8015da0:	687b      	ldr	r3, [r7, #4]
 8015da2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8015da6:	78fa      	ldrb	r2, [r7, #3]
 8015da8:	4611      	mov	r1, r2
 8015daa:	4618      	mov	r0, r3
 8015dac:	f7f4 fdb5 	bl	800a91a <HAL_PCD_SetAddress>
 8015db0:	4603      	mov	r3, r0
 8015db2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015db4:	7bfb      	ldrb	r3, [r7, #15]
 8015db6:	4618      	mov	r0, r3
 8015db8:	f000 f874 	bl	8015ea4 <USBD_Get_USB_Status>
 8015dbc:	4603      	mov	r3, r0
 8015dbe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015dc0:	7bbb      	ldrb	r3, [r7, #14]
}
 8015dc2:	4618      	mov	r0, r3
 8015dc4:	3710      	adds	r7, #16
 8015dc6:	46bd      	mov	sp, r7
 8015dc8:	bd80      	pop	{r7, pc}

08015dca <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8015dca:	b580      	push	{r7, lr}
 8015dcc:	b086      	sub	sp, #24
 8015dce:	af00      	add	r7, sp, #0
 8015dd0:	60f8      	str	r0, [r7, #12]
 8015dd2:	607a      	str	r2, [r7, #4]
 8015dd4:	603b      	str	r3, [r7, #0]
 8015dd6:	460b      	mov	r3, r1
 8015dd8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015dda:	2300      	movs	r3, #0
 8015ddc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015dde:	2300      	movs	r3, #0
 8015de0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8015de2:	68fb      	ldr	r3, [r7, #12]
 8015de4:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8015de8:	7af9      	ldrb	r1, [r7, #11]
 8015dea:	683b      	ldr	r3, [r7, #0]
 8015dec:	687a      	ldr	r2, [r7, #4]
 8015dee:	f7f4 febd 	bl	800ab6c <HAL_PCD_EP_Transmit>
 8015df2:	4603      	mov	r3, r0
 8015df4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015df6:	7dfb      	ldrb	r3, [r7, #23]
 8015df8:	4618      	mov	r0, r3
 8015dfa:	f000 f853 	bl	8015ea4 <USBD_Get_USB_Status>
 8015dfe:	4603      	mov	r3, r0
 8015e00:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8015e02:	7dbb      	ldrb	r3, [r7, #22]
}
 8015e04:	4618      	mov	r0, r3
 8015e06:	3718      	adds	r7, #24
 8015e08:	46bd      	mov	sp, r7
 8015e0a:	bd80      	pop	{r7, pc}

08015e0c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8015e0c:	b580      	push	{r7, lr}
 8015e0e:	b086      	sub	sp, #24
 8015e10:	af00      	add	r7, sp, #0
 8015e12:	60f8      	str	r0, [r7, #12]
 8015e14:	607a      	str	r2, [r7, #4]
 8015e16:	603b      	str	r3, [r7, #0]
 8015e18:	460b      	mov	r3, r1
 8015e1a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015e1c:	2300      	movs	r3, #0
 8015e1e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015e20:	2300      	movs	r3, #0
 8015e22:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8015e24:	68fb      	ldr	r3, [r7, #12]
 8015e26:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8015e2a:	7af9      	ldrb	r1, [r7, #11]
 8015e2c:	683b      	ldr	r3, [r7, #0]
 8015e2e:	687a      	ldr	r2, [r7, #4]
 8015e30:	f7f4 fe49 	bl	800aac6 <HAL_PCD_EP_Receive>
 8015e34:	4603      	mov	r3, r0
 8015e36:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015e38:	7dfb      	ldrb	r3, [r7, #23]
 8015e3a:	4618      	mov	r0, r3
 8015e3c:	f000 f832 	bl	8015ea4 <USBD_Get_USB_Status>
 8015e40:	4603      	mov	r3, r0
 8015e42:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8015e44:	7dbb      	ldrb	r3, [r7, #22]
}
 8015e46:	4618      	mov	r0, r3
 8015e48:	3718      	adds	r7, #24
 8015e4a:	46bd      	mov	sp, r7
 8015e4c:	bd80      	pop	{r7, pc}

08015e4e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015e4e:	b580      	push	{r7, lr}
 8015e50:	b082      	sub	sp, #8
 8015e52:	af00      	add	r7, sp, #0
 8015e54:	6078      	str	r0, [r7, #4]
 8015e56:	460b      	mov	r3, r1
 8015e58:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8015e5a:	687b      	ldr	r3, [r7, #4]
 8015e5c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8015e60:	78fa      	ldrb	r2, [r7, #3]
 8015e62:	4611      	mov	r1, r2
 8015e64:	4618      	mov	r0, r3
 8015e66:	f7f4 fe69 	bl	800ab3c <HAL_PCD_EP_GetRxCount>
 8015e6a:	4603      	mov	r3, r0
}
 8015e6c:	4618      	mov	r0, r3
 8015e6e:	3708      	adds	r7, #8
 8015e70:	46bd      	mov	sp, r7
 8015e72:	bd80      	pop	{r7, pc}

08015e74 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8015e74:	b480      	push	{r7}
 8015e76:	b083      	sub	sp, #12
 8015e78:	af00      	add	r7, sp, #0
 8015e7a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8015e7c:	4b03      	ldr	r3, [pc, #12]	; (8015e8c <USBD_static_malloc+0x18>)
}
 8015e7e:	4618      	mov	r0, r3
 8015e80:	370c      	adds	r7, #12
 8015e82:	46bd      	mov	sp, r7
 8015e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e88:	4770      	bx	lr
 8015e8a:	bf00      	nop
 8015e8c:	20006d78 	.word	0x20006d78

08015e90 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8015e90:	b480      	push	{r7}
 8015e92:	b083      	sub	sp, #12
 8015e94:	af00      	add	r7, sp, #0
 8015e96:	6078      	str	r0, [r7, #4]

}
 8015e98:	bf00      	nop
 8015e9a:	370c      	adds	r7, #12
 8015e9c:	46bd      	mov	sp, r7
 8015e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ea2:	4770      	bx	lr

08015ea4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8015ea4:	b480      	push	{r7}
 8015ea6:	b085      	sub	sp, #20
 8015ea8:	af00      	add	r7, sp, #0
 8015eaa:	4603      	mov	r3, r0
 8015eac:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015eae:	2300      	movs	r3, #0
 8015eb0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8015eb2:	79fb      	ldrb	r3, [r7, #7]
 8015eb4:	2b03      	cmp	r3, #3
 8015eb6:	d817      	bhi.n	8015ee8 <USBD_Get_USB_Status+0x44>
 8015eb8:	a201      	add	r2, pc, #4	; (adr r2, 8015ec0 <USBD_Get_USB_Status+0x1c>)
 8015eba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015ebe:	bf00      	nop
 8015ec0:	08015ed1 	.word	0x08015ed1
 8015ec4:	08015ed7 	.word	0x08015ed7
 8015ec8:	08015edd 	.word	0x08015edd
 8015ecc:	08015ee3 	.word	0x08015ee3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8015ed0:	2300      	movs	r3, #0
 8015ed2:	73fb      	strb	r3, [r7, #15]
    break;
 8015ed4:	e00b      	b.n	8015eee <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8015ed6:	2303      	movs	r3, #3
 8015ed8:	73fb      	strb	r3, [r7, #15]
    break;
 8015eda:	e008      	b.n	8015eee <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8015edc:	2301      	movs	r3, #1
 8015ede:	73fb      	strb	r3, [r7, #15]
    break;
 8015ee0:	e005      	b.n	8015eee <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8015ee2:	2303      	movs	r3, #3
 8015ee4:	73fb      	strb	r3, [r7, #15]
    break;
 8015ee6:	e002      	b.n	8015eee <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8015ee8:	2303      	movs	r3, #3
 8015eea:	73fb      	strb	r3, [r7, #15]
    break;
 8015eec:	bf00      	nop
  }
  return usb_status;
 8015eee:	7bfb      	ldrb	r3, [r7, #15]
}
 8015ef0:	4618      	mov	r0, r3
 8015ef2:	3714      	adds	r7, #20
 8015ef4:	46bd      	mov	sp, r7
 8015ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015efa:	4770      	bx	lr

08015efc <malloc>:
 8015efc:	4b02      	ldr	r3, [pc, #8]	; (8015f08 <malloc+0xc>)
 8015efe:	4601      	mov	r1, r0
 8015f00:	6818      	ldr	r0, [r3, #0]
 8015f02:	f000 b82b 	b.w	8015f5c <_malloc_r>
 8015f06:	bf00      	nop
 8015f08:	20000364 	.word	0x20000364

08015f0c <free>:
 8015f0c:	4b02      	ldr	r3, [pc, #8]	; (8015f18 <free+0xc>)
 8015f0e:	4601      	mov	r1, r0
 8015f10:	6818      	ldr	r0, [r3, #0]
 8015f12:	f001 b9cb 	b.w	80172ac <_free_r>
 8015f16:	bf00      	nop
 8015f18:	20000364 	.word	0x20000364

08015f1c <sbrk_aligned>:
 8015f1c:	b570      	push	{r4, r5, r6, lr}
 8015f1e:	4e0e      	ldr	r6, [pc, #56]	; (8015f58 <sbrk_aligned+0x3c>)
 8015f20:	460c      	mov	r4, r1
 8015f22:	6831      	ldr	r1, [r6, #0]
 8015f24:	4605      	mov	r5, r0
 8015f26:	b911      	cbnz	r1, 8015f2e <sbrk_aligned+0x12>
 8015f28:	f001 f94c 	bl	80171c4 <_sbrk_r>
 8015f2c:	6030      	str	r0, [r6, #0]
 8015f2e:	4621      	mov	r1, r4
 8015f30:	4628      	mov	r0, r5
 8015f32:	f001 f947 	bl	80171c4 <_sbrk_r>
 8015f36:	1c43      	adds	r3, r0, #1
 8015f38:	d00a      	beq.n	8015f50 <sbrk_aligned+0x34>
 8015f3a:	1cc4      	adds	r4, r0, #3
 8015f3c:	f024 0403 	bic.w	r4, r4, #3
 8015f40:	42a0      	cmp	r0, r4
 8015f42:	d007      	beq.n	8015f54 <sbrk_aligned+0x38>
 8015f44:	1a21      	subs	r1, r4, r0
 8015f46:	4628      	mov	r0, r5
 8015f48:	f001 f93c 	bl	80171c4 <_sbrk_r>
 8015f4c:	3001      	adds	r0, #1
 8015f4e:	d101      	bne.n	8015f54 <sbrk_aligned+0x38>
 8015f50:	f04f 34ff 	mov.w	r4, #4294967295
 8015f54:	4620      	mov	r0, r4
 8015f56:	bd70      	pop	{r4, r5, r6, pc}
 8015f58:	20006f9c 	.word	0x20006f9c

08015f5c <_malloc_r>:
 8015f5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015f60:	1ccd      	adds	r5, r1, #3
 8015f62:	f025 0503 	bic.w	r5, r5, #3
 8015f66:	3508      	adds	r5, #8
 8015f68:	2d0c      	cmp	r5, #12
 8015f6a:	bf38      	it	cc
 8015f6c:	250c      	movcc	r5, #12
 8015f6e:	2d00      	cmp	r5, #0
 8015f70:	4607      	mov	r7, r0
 8015f72:	db01      	blt.n	8015f78 <_malloc_r+0x1c>
 8015f74:	42a9      	cmp	r1, r5
 8015f76:	d905      	bls.n	8015f84 <_malloc_r+0x28>
 8015f78:	230c      	movs	r3, #12
 8015f7a:	603b      	str	r3, [r7, #0]
 8015f7c:	2600      	movs	r6, #0
 8015f7e:	4630      	mov	r0, r6
 8015f80:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015f84:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8016058 <_malloc_r+0xfc>
 8015f88:	f000 f868 	bl	801605c <__malloc_lock>
 8015f8c:	f8d8 3000 	ldr.w	r3, [r8]
 8015f90:	461c      	mov	r4, r3
 8015f92:	bb5c      	cbnz	r4, 8015fec <_malloc_r+0x90>
 8015f94:	4629      	mov	r1, r5
 8015f96:	4638      	mov	r0, r7
 8015f98:	f7ff ffc0 	bl	8015f1c <sbrk_aligned>
 8015f9c:	1c43      	adds	r3, r0, #1
 8015f9e:	4604      	mov	r4, r0
 8015fa0:	d155      	bne.n	801604e <_malloc_r+0xf2>
 8015fa2:	f8d8 4000 	ldr.w	r4, [r8]
 8015fa6:	4626      	mov	r6, r4
 8015fa8:	2e00      	cmp	r6, #0
 8015faa:	d145      	bne.n	8016038 <_malloc_r+0xdc>
 8015fac:	2c00      	cmp	r4, #0
 8015fae:	d048      	beq.n	8016042 <_malloc_r+0xe6>
 8015fb0:	6823      	ldr	r3, [r4, #0]
 8015fb2:	4631      	mov	r1, r6
 8015fb4:	4638      	mov	r0, r7
 8015fb6:	eb04 0903 	add.w	r9, r4, r3
 8015fba:	f001 f903 	bl	80171c4 <_sbrk_r>
 8015fbe:	4581      	cmp	r9, r0
 8015fc0:	d13f      	bne.n	8016042 <_malloc_r+0xe6>
 8015fc2:	6821      	ldr	r1, [r4, #0]
 8015fc4:	1a6d      	subs	r5, r5, r1
 8015fc6:	4629      	mov	r1, r5
 8015fc8:	4638      	mov	r0, r7
 8015fca:	f7ff ffa7 	bl	8015f1c <sbrk_aligned>
 8015fce:	3001      	adds	r0, #1
 8015fd0:	d037      	beq.n	8016042 <_malloc_r+0xe6>
 8015fd2:	6823      	ldr	r3, [r4, #0]
 8015fd4:	442b      	add	r3, r5
 8015fd6:	6023      	str	r3, [r4, #0]
 8015fd8:	f8d8 3000 	ldr.w	r3, [r8]
 8015fdc:	2b00      	cmp	r3, #0
 8015fde:	d038      	beq.n	8016052 <_malloc_r+0xf6>
 8015fe0:	685a      	ldr	r2, [r3, #4]
 8015fe2:	42a2      	cmp	r2, r4
 8015fe4:	d12b      	bne.n	801603e <_malloc_r+0xe2>
 8015fe6:	2200      	movs	r2, #0
 8015fe8:	605a      	str	r2, [r3, #4]
 8015fea:	e00f      	b.n	801600c <_malloc_r+0xb0>
 8015fec:	6822      	ldr	r2, [r4, #0]
 8015fee:	1b52      	subs	r2, r2, r5
 8015ff0:	d41f      	bmi.n	8016032 <_malloc_r+0xd6>
 8015ff2:	2a0b      	cmp	r2, #11
 8015ff4:	d917      	bls.n	8016026 <_malloc_r+0xca>
 8015ff6:	1961      	adds	r1, r4, r5
 8015ff8:	42a3      	cmp	r3, r4
 8015ffa:	6025      	str	r5, [r4, #0]
 8015ffc:	bf18      	it	ne
 8015ffe:	6059      	strne	r1, [r3, #4]
 8016000:	6863      	ldr	r3, [r4, #4]
 8016002:	bf08      	it	eq
 8016004:	f8c8 1000 	streq.w	r1, [r8]
 8016008:	5162      	str	r2, [r4, r5]
 801600a:	604b      	str	r3, [r1, #4]
 801600c:	4638      	mov	r0, r7
 801600e:	f104 060b 	add.w	r6, r4, #11
 8016012:	f000 f829 	bl	8016068 <__malloc_unlock>
 8016016:	f026 0607 	bic.w	r6, r6, #7
 801601a:	1d23      	adds	r3, r4, #4
 801601c:	1af2      	subs	r2, r6, r3
 801601e:	d0ae      	beq.n	8015f7e <_malloc_r+0x22>
 8016020:	1b9b      	subs	r3, r3, r6
 8016022:	50a3      	str	r3, [r4, r2]
 8016024:	e7ab      	b.n	8015f7e <_malloc_r+0x22>
 8016026:	42a3      	cmp	r3, r4
 8016028:	6862      	ldr	r2, [r4, #4]
 801602a:	d1dd      	bne.n	8015fe8 <_malloc_r+0x8c>
 801602c:	f8c8 2000 	str.w	r2, [r8]
 8016030:	e7ec      	b.n	801600c <_malloc_r+0xb0>
 8016032:	4623      	mov	r3, r4
 8016034:	6864      	ldr	r4, [r4, #4]
 8016036:	e7ac      	b.n	8015f92 <_malloc_r+0x36>
 8016038:	4634      	mov	r4, r6
 801603a:	6876      	ldr	r6, [r6, #4]
 801603c:	e7b4      	b.n	8015fa8 <_malloc_r+0x4c>
 801603e:	4613      	mov	r3, r2
 8016040:	e7cc      	b.n	8015fdc <_malloc_r+0x80>
 8016042:	230c      	movs	r3, #12
 8016044:	603b      	str	r3, [r7, #0]
 8016046:	4638      	mov	r0, r7
 8016048:	f000 f80e 	bl	8016068 <__malloc_unlock>
 801604c:	e797      	b.n	8015f7e <_malloc_r+0x22>
 801604e:	6025      	str	r5, [r4, #0]
 8016050:	e7dc      	b.n	801600c <_malloc_r+0xb0>
 8016052:	605b      	str	r3, [r3, #4]
 8016054:	deff      	udf	#255	; 0xff
 8016056:	bf00      	nop
 8016058:	20006f98 	.word	0x20006f98

0801605c <__malloc_lock>:
 801605c:	4801      	ldr	r0, [pc, #4]	; (8016064 <__malloc_lock+0x8>)
 801605e:	f001 b8fe 	b.w	801725e <__retarget_lock_acquire_recursive>
 8016062:	bf00      	nop
 8016064:	200070e0 	.word	0x200070e0

08016068 <__malloc_unlock>:
 8016068:	4801      	ldr	r0, [pc, #4]	; (8016070 <__malloc_unlock+0x8>)
 801606a:	f001 b8f9 	b.w	8017260 <__retarget_lock_release_recursive>
 801606e:	bf00      	nop
 8016070:	200070e0 	.word	0x200070e0

08016074 <sulp>:
 8016074:	b570      	push	{r4, r5, r6, lr}
 8016076:	4604      	mov	r4, r0
 8016078:	460d      	mov	r5, r1
 801607a:	ec45 4b10 	vmov	d0, r4, r5
 801607e:	4616      	mov	r6, r2
 8016080:	f002 f836 	bl	80180f0 <__ulp>
 8016084:	ec51 0b10 	vmov	r0, r1, d0
 8016088:	b17e      	cbz	r6, 80160aa <sulp+0x36>
 801608a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801608e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8016092:	2b00      	cmp	r3, #0
 8016094:	dd09      	ble.n	80160aa <sulp+0x36>
 8016096:	051b      	lsls	r3, r3, #20
 8016098:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 801609c:	2400      	movs	r4, #0
 801609e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80160a2:	4622      	mov	r2, r4
 80160a4:	462b      	mov	r3, r5
 80160a6:	f7ea fab7 	bl	8000618 <__aeabi_dmul>
 80160aa:	bd70      	pop	{r4, r5, r6, pc}
 80160ac:	0000      	movs	r0, r0
	...

080160b0 <_strtod_l>:
 80160b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80160b4:	ed2d 8b02 	vpush	{d8}
 80160b8:	b09b      	sub	sp, #108	; 0x6c
 80160ba:	4604      	mov	r4, r0
 80160bc:	9213      	str	r2, [sp, #76]	; 0x4c
 80160be:	2200      	movs	r2, #0
 80160c0:	9216      	str	r2, [sp, #88]	; 0x58
 80160c2:	460d      	mov	r5, r1
 80160c4:	f04f 0800 	mov.w	r8, #0
 80160c8:	f04f 0900 	mov.w	r9, #0
 80160cc:	460a      	mov	r2, r1
 80160ce:	9215      	str	r2, [sp, #84]	; 0x54
 80160d0:	7811      	ldrb	r1, [r2, #0]
 80160d2:	292b      	cmp	r1, #43	; 0x2b
 80160d4:	d04c      	beq.n	8016170 <_strtod_l+0xc0>
 80160d6:	d83a      	bhi.n	801614e <_strtod_l+0x9e>
 80160d8:	290d      	cmp	r1, #13
 80160da:	d834      	bhi.n	8016146 <_strtod_l+0x96>
 80160dc:	2908      	cmp	r1, #8
 80160de:	d834      	bhi.n	801614a <_strtod_l+0x9a>
 80160e0:	2900      	cmp	r1, #0
 80160e2:	d03d      	beq.n	8016160 <_strtod_l+0xb0>
 80160e4:	2200      	movs	r2, #0
 80160e6:	920a      	str	r2, [sp, #40]	; 0x28
 80160e8:	9e15      	ldr	r6, [sp, #84]	; 0x54
 80160ea:	7832      	ldrb	r2, [r6, #0]
 80160ec:	2a30      	cmp	r2, #48	; 0x30
 80160ee:	f040 80b4 	bne.w	801625a <_strtod_l+0x1aa>
 80160f2:	7872      	ldrb	r2, [r6, #1]
 80160f4:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 80160f8:	2a58      	cmp	r2, #88	; 0x58
 80160fa:	d170      	bne.n	80161de <_strtod_l+0x12e>
 80160fc:	9302      	str	r3, [sp, #8]
 80160fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016100:	9301      	str	r3, [sp, #4]
 8016102:	ab16      	add	r3, sp, #88	; 0x58
 8016104:	9300      	str	r3, [sp, #0]
 8016106:	4a8e      	ldr	r2, [pc, #568]	; (8016340 <_strtod_l+0x290>)
 8016108:	ab17      	add	r3, sp, #92	; 0x5c
 801610a:	a915      	add	r1, sp, #84	; 0x54
 801610c:	4620      	mov	r0, r4
 801610e:	f001 f981 	bl	8017414 <__gethex>
 8016112:	f010 070f 	ands.w	r7, r0, #15
 8016116:	4605      	mov	r5, r0
 8016118:	d005      	beq.n	8016126 <_strtod_l+0x76>
 801611a:	2f06      	cmp	r7, #6
 801611c:	d12a      	bne.n	8016174 <_strtod_l+0xc4>
 801611e:	3601      	adds	r6, #1
 8016120:	2300      	movs	r3, #0
 8016122:	9615      	str	r6, [sp, #84]	; 0x54
 8016124:	930a      	str	r3, [sp, #40]	; 0x28
 8016126:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8016128:	2b00      	cmp	r3, #0
 801612a:	f040 857f 	bne.w	8016c2c <_strtod_l+0xb7c>
 801612e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016130:	b1db      	cbz	r3, 801616a <_strtod_l+0xba>
 8016132:	4642      	mov	r2, r8
 8016134:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8016138:	ec43 2b10 	vmov	d0, r2, r3
 801613c:	b01b      	add	sp, #108	; 0x6c
 801613e:	ecbd 8b02 	vpop	{d8}
 8016142:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016146:	2920      	cmp	r1, #32
 8016148:	d1cc      	bne.n	80160e4 <_strtod_l+0x34>
 801614a:	3201      	adds	r2, #1
 801614c:	e7bf      	b.n	80160ce <_strtod_l+0x1e>
 801614e:	292d      	cmp	r1, #45	; 0x2d
 8016150:	d1c8      	bne.n	80160e4 <_strtod_l+0x34>
 8016152:	2101      	movs	r1, #1
 8016154:	910a      	str	r1, [sp, #40]	; 0x28
 8016156:	1c51      	adds	r1, r2, #1
 8016158:	9115      	str	r1, [sp, #84]	; 0x54
 801615a:	7852      	ldrb	r2, [r2, #1]
 801615c:	2a00      	cmp	r2, #0
 801615e:	d1c3      	bne.n	80160e8 <_strtod_l+0x38>
 8016160:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8016162:	9515      	str	r5, [sp, #84]	; 0x54
 8016164:	2b00      	cmp	r3, #0
 8016166:	f040 855f 	bne.w	8016c28 <_strtod_l+0xb78>
 801616a:	4642      	mov	r2, r8
 801616c:	464b      	mov	r3, r9
 801616e:	e7e3      	b.n	8016138 <_strtod_l+0x88>
 8016170:	2100      	movs	r1, #0
 8016172:	e7ef      	b.n	8016154 <_strtod_l+0xa4>
 8016174:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8016176:	b13a      	cbz	r2, 8016188 <_strtod_l+0xd8>
 8016178:	2135      	movs	r1, #53	; 0x35
 801617a:	a818      	add	r0, sp, #96	; 0x60
 801617c:	f002 f8b5 	bl	80182ea <__copybits>
 8016180:	9916      	ldr	r1, [sp, #88]	; 0x58
 8016182:	4620      	mov	r0, r4
 8016184:	f001 fc88 	bl	8017a98 <_Bfree>
 8016188:	3f01      	subs	r7, #1
 801618a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801618c:	2f04      	cmp	r7, #4
 801618e:	d806      	bhi.n	801619e <_strtod_l+0xee>
 8016190:	e8df f007 	tbb	[pc, r7]
 8016194:	201d0314 	.word	0x201d0314
 8016198:	14          	.byte	0x14
 8016199:	00          	.byte	0x00
 801619a:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 801619e:	05e9      	lsls	r1, r5, #23
 80161a0:	bf48      	it	mi
 80161a2:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 80161a6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80161aa:	0d1b      	lsrs	r3, r3, #20
 80161ac:	051b      	lsls	r3, r3, #20
 80161ae:	2b00      	cmp	r3, #0
 80161b0:	d1b9      	bne.n	8016126 <_strtod_l+0x76>
 80161b2:	f001 f829 	bl	8017208 <__errno>
 80161b6:	2322      	movs	r3, #34	; 0x22
 80161b8:	6003      	str	r3, [r0, #0]
 80161ba:	e7b4      	b.n	8016126 <_strtod_l+0x76>
 80161bc:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 80161c0:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80161c4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80161c8:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 80161cc:	e7e7      	b.n	801619e <_strtod_l+0xee>
 80161ce:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8016348 <_strtod_l+0x298>
 80161d2:	e7e4      	b.n	801619e <_strtod_l+0xee>
 80161d4:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 80161d8:	f04f 38ff 	mov.w	r8, #4294967295
 80161dc:	e7df      	b.n	801619e <_strtod_l+0xee>
 80161de:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80161e0:	1c5a      	adds	r2, r3, #1
 80161e2:	9215      	str	r2, [sp, #84]	; 0x54
 80161e4:	785b      	ldrb	r3, [r3, #1]
 80161e6:	2b30      	cmp	r3, #48	; 0x30
 80161e8:	d0f9      	beq.n	80161de <_strtod_l+0x12e>
 80161ea:	2b00      	cmp	r3, #0
 80161ec:	d09b      	beq.n	8016126 <_strtod_l+0x76>
 80161ee:	2301      	movs	r3, #1
 80161f0:	f04f 0a00 	mov.w	sl, #0
 80161f4:	9304      	str	r3, [sp, #16]
 80161f6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80161f8:	930b      	str	r3, [sp, #44]	; 0x2c
 80161fa:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 80161fe:	46d3      	mov	fp, sl
 8016200:	220a      	movs	r2, #10
 8016202:	9815      	ldr	r0, [sp, #84]	; 0x54
 8016204:	7806      	ldrb	r6, [r0, #0]
 8016206:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 801620a:	b2d9      	uxtb	r1, r3
 801620c:	2909      	cmp	r1, #9
 801620e:	d926      	bls.n	801625e <_strtod_l+0x1ae>
 8016210:	494c      	ldr	r1, [pc, #304]	; (8016344 <_strtod_l+0x294>)
 8016212:	2201      	movs	r2, #1
 8016214:	f000 ff64 	bl	80170e0 <strncmp>
 8016218:	2800      	cmp	r0, #0
 801621a:	d030      	beq.n	801627e <_strtod_l+0x1ce>
 801621c:	2000      	movs	r0, #0
 801621e:	4632      	mov	r2, r6
 8016220:	9005      	str	r0, [sp, #20]
 8016222:	465e      	mov	r6, fp
 8016224:	4603      	mov	r3, r0
 8016226:	2a65      	cmp	r2, #101	; 0x65
 8016228:	d001      	beq.n	801622e <_strtod_l+0x17e>
 801622a:	2a45      	cmp	r2, #69	; 0x45
 801622c:	d113      	bne.n	8016256 <_strtod_l+0x1a6>
 801622e:	b91e      	cbnz	r6, 8016238 <_strtod_l+0x188>
 8016230:	9a04      	ldr	r2, [sp, #16]
 8016232:	4302      	orrs	r2, r0
 8016234:	d094      	beq.n	8016160 <_strtod_l+0xb0>
 8016236:	2600      	movs	r6, #0
 8016238:	9d15      	ldr	r5, [sp, #84]	; 0x54
 801623a:	1c6a      	adds	r2, r5, #1
 801623c:	9215      	str	r2, [sp, #84]	; 0x54
 801623e:	786a      	ldrb	r2, [r5, #1]
 8016240:	2a2b      	cmp	r2, #43	; 0x2b
 8016242:	d074      	beq.n	801632e <_strtod_l+0x27e>
 8016244:	2a2d      	cmp	r2, #45	; 0x2d
 8016246:	d078      	beq.n	801633a <_strtod_l+0x28a>
 8016248:	f04f 0c00 	mov.w	ip, #0
 801624c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8016250:	2909      	cmp	r1, #9
 8016252:	d97f      	bls.n	8016354 <_strtod_l+0x2a4>
 8016254:	9515      	str	r5, [sp, #84]	; 0x54
 8016256:	2700      	movs	r7, #0
 8016258:	e09e      	b.n	8016398 <_strtod_l+0x2e8>
 801625a:	2300      	movs	r3, #0
 801625c:	e7c8      	b.n	80161f0 <_strtod_l+0x140>
 801625e:	f1bb 0f08 	cmp.w	fp, #8
 8016262:	bfd8      	it	le
 8016264:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8016266:	f100 0001 	add.w	r0, r0, #1
 801626a:	bfda      	itte	le
 801626c:	fb02 3301 	mlale	r3, r2, r1, r3
 8016270:	9309      	strle	r3, [sp, #36]	; 0x24
 8016272:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8016276:	f10b 0b01 	add.w	fp, fp, #1
 801627a:	9015      	str	r0, [sp, #84]	; 0x54
 801627c:	e7c1      	b.n	8016202 <_strtod_l+0x152>
 801627e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8016280:	1c5a      	adds	r2, r3, #1
 8016282:	9215      	str	r2, [sp, #84]	; 0x54
 8016284:	785a      	ldrb	r2, [r3, #1]
 8016286:	f1bb 0f00 	cmp.w	fp, #0
 801628a:	d037      	beq.n	80162fc <_strtod_l+0x24c>
 801628c:	9005      	str	r0, [sp, #20]
 801628e:	465e      	mov	r6, fp
 8016290:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8016294:	2b09      	cmp	r3, #9
 8016296:	d912      	bls.n	80162be <_strtod_l+0x20e>
 8016298:	2301      	movs	r3, #1
 801629a:	e7c4      	b.n	8016226 <_strtod_l+0x176>
 801629c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801629e:	1c5a      	adds	r2, r3, #1
 80162a0:	9215      	str	r2, [sp, #84]	; 0x54
 80162a2:	785a      	ldrb	r2, [r3, #1]
 80162a4:	3001      	adds	r0, #1
 80162a6:	2a30      	cmp	r2, #48	; 0x30
 80162a8:	d0f8      	beq.n	801629c <_strtod_l+0x1ec>
 80162aa:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80162ae:	2b08      	cmp	r3, #8
 80162b0:	f200 84c1 	bhi.w	8016c36 <_strtod_l+0xb86>
 80162b4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80162b6:	9005      	str	r0, [sp, #20]
 80162b8:	2000      	movs	r0, #0
 80162ba:	930b      	str	r3, [sp, #44]	; 0x2c
 80162bc:	4606      	mov	r6, r0
 80162be:	3a30      	subs	r2, #48	; 0x30
 80162c0:	f100 0301 	add.w	r3, r0, #1
 80162c4:	d014      	beq.n	80162f0 <_strtod_l+0x240>
 80162c6:	9905      	ldr	r1, [sp, #20]
 80162c8:	4419      	add	r1, r3
 80162ca:	9105      	str	r1, [sp, #20]
 80162cc:	4633      	mov	r3, r6
 80162ce:	eb00 0c06 	add.w	ip, r0, r6
 80162d2:	210a      	movs	r1, #10
 80162d4:	4563      	cmp	r3, ip
 80162d6:	d113      	bne.n	8016300 <_strtod_l+0x250>
 80162d8:	1833      	adds	r3, r6, r0
 80162da:	2b08      	cmp	r3, #8
 80162dc:	f106 0601 	add.w	r6, r6, #1
 80162e0:	4406      	add	r6, r0
 80162e2:	dc1a      	bgt.n	801631a <_strtod_l+0x26a>
 80162e4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80162e6:	230a      	movs	r3, #10
 80162e8:	fb03 2301 	mla	r3, r3, r1, r2
 80162ec:	9309      	str	r3, [sp, #36]	; 0x24
 80162ee:	2300      	movs	r3, #0
 80162f0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80162f2:	1c51      	adds	r1, r2, #1
 80162f4:	9115      	str	r1, [sp, #84]	; 0x54
 80162f6:	7852      	ldrb	r2, [r2, #1]
 80162f8:	4618      	mov	r0, r3
 80162fa:	e7c9      	b.n	8016290 <_strtod_l+0x1e0>
 80162fc:	4658      	mov	r0, fp
 80162fe:	e7d2      	b.n	80162a6 <_strtod_l+0x1f6>
 8016300:	2b08      	cmp	r3, #8
 8016302:	f103 0301 	add.w	r3, r3, #1
 8016306:	dc03      	bgt.n	8016310 <_strtod_l+0x260>
 8016308:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801630a:	434f      	muls	r7, r1
 801630c:	9709      	str	r7, [sp, #36]	; 0x24
 801630e:	e7e1      	b.n	80162d4 <_strtod_l+0x224>
 8016310:	2b10      	cmp	r3, #16
 8016312:	bfd8      	it	le
 8016314:	fb01 fa0a 	mulle.w	sl, r1, sl
 8016318:	e7dc      	b.n	80162d4 <_strtod_l+0x224>
 801631a:	2e10      	cmp	r6, #16
 801631c:	bfdc      	itt	le
 801631e:	230a      	movle	r3, #10
 8016320:	fb03 2a0a 	mlale	sl, r3, sl, r2
 8016324:	e7e3      	b.n	80162ee <_strtod_l+0x23e>
 8016326:	2300      	movs	r3, #0
 8016328:	9305      	str	r3, [sp, #20]
 801632a:	2301      	movs	r3, #1
 801632c:	e780      	b.n	8016230 <_strtod_l+0x180>
 801632e:	f04f 0c00 	mov.w	ip, #0
 8016332:	1caa      	adds	r2, r5, #2
 8016334:	9215      	str	r2, [sp, #84]	; 0x54
 8016336:	78aa      	ldrb	r2, [r5, #2]
 8016338:	e788      	b.n	801624c <_strtod_l+0x19c>
 801633a:	f04f 0c01 	mov.w	ip, #1
 801633e:	e7f8      	b.n	8016332 <_strtod_l+0x282>
 8016340:	08025df8 	.word	0x08025df8
 8016344:	08025de8 	.word	0x08025de8
 8016348:	7ff00000 	.word	0x7ff00000
 801634c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801634e:	1c51      	adds	r1, r2, #1
 8016350:	9115      	str	r1, [sp, #84]	; 0x54
 8016352:	7852      	ldrb	r2, [r2, #1]
 8016354:	2a30      	cmp	r2, #48	; 0x30
 8016356:	d0f9      	beq.n	801634c <_strtod_l+0x29c>
 8016358:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 801635c:	2908      	cmp	r1, #8
 801635e:	f63f af7a 	bhi.w	8016256 <_strtod_l+0x1a6>
 8016362:	3a30      	subs	r2, #48	; 0x30
 8016364:	9208      	str	r2, [sp, #32]
 8016366:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8016368:	920c      	str	r2, [sp, #48]	; 0x30
 801636a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801636c:	1c57      	adds	r7, r2, #1
 801636e:	9715      	str	r7, [sp, #84]	; 0x54
 8016370:	7852      	ldrb	r2, [r2, #1]
 8016372:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8016376:	f1be 0f09 	cmp.w	lr, #9
 801637a:	d938      	bls.n	80163ee <_strtod_l+0x33e>
 801637c:	990c      	ldr	r1, [sp, #48]	; 0x30
 801637e:	1a7f      	subs	r7, r7, r1
 8016380:	2f08      	cmp	r7, #8
 8016382:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8016386:	dc03      	bgt.n	8016390 <_strtod_l+0x2e0>
 8016388:	9908      	ldr	r1, [sp, #32]
 801638a:	428f      	cmp	r7, r1
 801638c:	bfa8      	it	ge
 801638e:	460f      	movge	r7, r1
 8016390:	f1bc 0f00 	cmp.w	ip, #0
 8016394:	d000      	beq.n	8016398 <_strtod_l+0x2e8>
 8016396:	427f      	negs	r7, r7
 8016398:	2e00      	cmp	r6, #0
 801639a:	d14f      	bne.n	801643c <_strtod_l+0x38c>
 801639c:	9904      	ldr	r1, [sp, #16]
 801639e:	4301      	orrs	r1, r0
 80163a0:	f47f aec1 	bne.w	8016126 <_strtod_l+0x76>
 80163a4:	2b00      	cmp	r3, #0
 80163a6:	f47f aedb 	bne.w	8016160 <_strtod_l+0xb0>
 80163aa:	2a69      	cmp	r2, #105	; 0x69
 80163ac:	d029      	beq.n	8016402 <_strtod_l+0x352>
 80163ae:	dc26      	bgt.n	80163fe <_strtod_l+0x34e>
 80163b0:	2a49      	cmp	r2, #73	; 0x49
 80163b2:	d026      	beq.n	8016402 <_strtod_l+0x352>
 80163b4:	2a4e      	cmp	r2, #78	; 0x4e
 80163b6:	f47f aed3 	bne.w	8016160 <_strtod_l+0xb0>
 80163ba:	499b      	ldr	r1, [pc, #620]	; (8016628 <_strtod_l+0x578>)
 80163bc:	a815      	add	r0, sp, #84	; 0x54
 80163be:	f001 fa69 	bl	8017894 <__match>
 80163c2:	2800      	cmp	r0, #0
 80163c4:	f43f aecc 	beq.w	8016160 <_strtod_l+0xb0>
 80163c8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80163ca:	781b      	ldrb	r3, [r3, #0]
 80163cc:	2b28      	cmp	r3, #40	; 0x28
 80163ce:	d12f      	bne.n	8016430 <_strtod_l+0x380>
 80163d0:	4996      	ldr	r1, [pc, #600]	; (801662c <_strtod_l+0x57c>)
 80163d2:	aa18      	add	r2, sp, #96	; 0x60
 80163d4:	a815      	add	r0, sp, #84	; 0x54
 80163d6:	f001 fa71 	bl	80178bc <__hexnan>
 80163da:	2805      	cmp	r0, #5
 80163dc:	d128      	bne.n	8016430 <_strtod_l+0x380>
 80163de:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80163e0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80163e4:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 80163e8:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 80163ec:	e69b      	b.n	8016126 <_strtod_l+0x76>
 80163ee:	9f08      	ldr	r7, [sp, #32]
 80163f0:	210a      	movs	r1, #10
 80163f2:	fb01 2107 	mla	r1, r1, r7, r2
 80163f6:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 80163fa:	9208      	str	r2, [sp, #32]
 80163fc:	e7b5      	b.n	801636a <_strtod_l+0x2ba>
 80163fe:	2a6e      	cmp	r2, #110	; 0x6e
 8016400:	e7d9      	b.n	80163b6 <_strtod_l+0x306>
 8016402:	498b      	ldr	r1, [pc, #556]	; (8016630 <_strtod_l+0x580>)
 8016404:	a815      	add	r0, sp, #84	; 0x54
 8016406:	f001 fa45 	bl	8017894 <__match>
 801640a:	2800      	cmp	r0, #0
 801640c:	f43f aea8 	beq.w	8016160 <_strtod_l+0xb0>
 8016410:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8016412:	4988      	ldr	r1, [pc, #544]	; (8016634 <_strtod_l+0x584>)
 8016414:	3b01      	subs	r3, #1
 8016416:	a815      	add	r0, sp, #84	; 0x54
 8016418:	9315      	str	r3, [sp, #84]	; 0x54
 801641a:	f001 fa3b 	bl	8017894 <__match>
 801641e:	b910      	cbnz	r0, 8016426 <_strtod_l+0x376>
 8016420:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8016422:	3301      	adds	r3, #1
 8016424:	9315      	str	r3, [sp, #84]	; 0x54
 8016426:	f8df 921c 	ldr.w	r9, [pc, #540]	; 8016644 <_strtod_l+0x594>
 801642a:	f04f 0800 	mov.w	r8, #0
 801642e:	e67a      	b.n	8016126 <_strtod_l+0x76>
 8016430:	4881      	ldr	r0, [pc, #516]	; (8016638 <_strtod_l+0x588>)
 8016432:	f000 ff2d 	bl	8017290 <nan>
 8016436:	ec59 8b10 	vmov	r8, r9, d0
 801643a:	e674      	b.n	8016126 <_strtod_l+0x76>
 801643c:	9b05      	ldr	r3, [sp, #20]
 801643e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016440:	1afb      	subs	r3, r7, r3
 8016442:	f1bb 0f00 	cmp.w	fp, #0
 8016446:	bf08      	it	eq
 8016448:	46b3      	moveq	fp, r6
 801644a:	2e10      	cmp	r6, #16
 801644c:	9308      	str	r3, [sp, #32]
 801644e:	4635      	mov	r5, r6
 8016450:	bfa8      	it	ge
 8016452:	2510      	movge	r5, #16
 8016454:	f7ea f866 	bl	8000524 <__aeabi_ui2d>
 8016458:	2e09      	cmp	r6, #9
 801645a:	4680      	mov	r8, r0
 801645c:	4689      	mov	r9, r1
 801645e:	dd13      	ble.n	8016488 <_strtod_l+0x3d8>
 8016460:	4b76      	ldr	r3, [pc, #472]	; (801663c <_strtod_l+0x58c>)
 8016462:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8016466:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 801646a:	f7ea f8d5 	bl	8000618 <__aeabi_dmul>
 801646e:	4680      	mov	r8, r0
 8016470:	4650      	mov	r0, sl
 8016472:	4689      	mov	r9, r1
 8016474:	f7ea f856 	bl	8000524 <__aeabi_ui2d>
 8016478:	4602      	mov	r2, r0
 801647a:	460b      	mov	r3, r1
 801647c:	4640      	mov	r0, r8
 801647e:	4649      	mov	r1, r9
 8016480:	f7e9 ff14 	bl	80002ac <__adddf3>
 8016484:	4680      	mov	r8, r0
 8016486:	4689      	mov	r9, r1
 8016488:	2e0f      	cmp	r6, #15
 801648a:	dc38      	bgt.n	80164fe <_strtod_l+0x44e>
 801648c:	9b08      	ldr	r3, [sp, #32]
 801648e:	2b00      	cmp	r3, #0
 8016490:	f43f ae49 	beq.w	8016126 <_strtod_l+0x76>
 8016494:	dd24      	ble.n	80164e0 <_strtod_l+0x430>
 8016496:	2b16      	cmp	r3, #22
 8016498:	dc0b      	bgt.n	80164b2 <_strtod_l+0x402>
 801649a:	4968      	ldr	r1, [pc, #416]	; (801663c <_strtod_l+0x58c>)
 801649c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80164a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80164a4:	4642      	mov	r2, r8
 80164a6:	464b      	mov	r3, r9
 80164a8:	f7ea f8b6 	bl	8000618 <__aeabi_dmul>
 80164ac:	4680      	mov	r8, r0
 80164ae:	4689      	mov	r9, r1
 80164b0:	e639      	b.n	8016126 <_strtod_l+0x76>
 80164b2:	9a08      	ldr	r2, [sp, #32]
 80164b4:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 80164b8:	4293      	cmp	r3, r2
 80164ba:	db20      	blt.n	80164fe <_strtod_l+0x44e>
 80164bc:	4c5f      	ldr	r4, [pc, #380]	; (801663c <_strtod_l+0x58c>)
 80164be:	f1c6 060f 	rsb	r6, r6, #15
 80164c2:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 80164c6:	4642      	mov	r2, r8
 80164c8:	464b      	mov	r3, r9
 80164ca:	e9d1 0100 	ldrd	r0, r1, [r1]
 80164ce:	f7ea f8a3 	bl	8000618 <__aeabi_dmul>
 80164d2:	9b08      	ldr	r3, [sp, #32]
 80164d4:	1b9e      	subs	r6, r3, r6
 80164d6:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 80164da:	e9d4 2300 	ldrd	r2, r3, [r4]
 80164de:	e7e3      	b.n	80164a8 <_strtod_l+0x3f8>
 80164e0:	9b08      	ldr	r3, [sp, #32]
 80164e2:	3316      	adds	r3, #22
 80164e4:	db0b      	blt.n	80164fe <_strtod_l+0x44e>
 80164e6:	9b05      	ldr	r3, [sp, #20]
 80164e8:	1bdf      	subs	r7, r3, r7
 80164ea:	4b54      	ldr	r3, [pc, #336]	; (801663c <_strtod_l+0x58c>)
 80164ec:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 80164f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80164f4:	4640      	mov	r0, r8
 80164f6:	4649      	mov	r1, r9
 80164f8:	f7ea f9b8 	bl	800086c <__aeabi_ddiv>
 80164fc:	e7d6      	b.n	80164ac <_strtod_l+0x3fc>
 80164fe:	9b08      	ldr	r3, [sp, #32]
 8016500:	1b75      	subs	r5, r6, r5
 8016502:	441d      	add	r5, r3
 8016504:	2d00      	cmp	r5, #0
 8016506:	dd70      	ble.n	80165ea <_strtod_l+0x53a>
 8016508:	f015 030f 	ands.w	r3, r5, #15
 801650c:	d00a      	beq.n	8016524 <_strtod_l+0x474>
 801650e:	494b      	ldr	r1, [pc, #300]	; (801663c <_strtod_l+0x58c>)
 8016510:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8016514:	4642      	mov	r2, r8
 8016516:	464b      	mov	r3, r9
 8016518:	e9d1 0100 	ldrd	r0, r1, [r1]
 801651c:	f7ea f87c 	bl	8000618 <__aeabi_dmul>
 8016520:	4680      	mov	r8, r0
 8016522:	4689      	mov	r9, r1
 8016524:	f035 050f 	bics.w	r5, r5, #15
 8016528:	d04d      	beq.n	80165c6 <_strtod_l+0x516>
 801652a:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 801652e:	dd22      	ble.n	8016576 <_strtod_l+0x4c6>
 8016530:	2500      	movs	r5, #0
 8016532:	46ab      	mov	fp, r5
 8016534:	9509      	str	r5, [sp, #36]	; 0x24
 8016536:	9505      	str	r5, [sp, #20]
 8016538:	2322      	movs	r3, #34	; 0x22
 801653a:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8016644 <_strtod_l+0x594>
 801653e:	6023      	str	r3, [r4, #0]
 8016540:	f04f 0800 	mov.w	r8, #0
 8016544:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016546:	2b00      	cmp	r3, #0
 8016548:	f43f aded 	beq.w	8016126 <_strtod_l+0x76>
 801654c:	9916      	ldr	r1, [sp, #88]	; 0x58
 801654e:	4620      	mov	r0, r4
 8016550:	f001 faa2 	bl	8017a98 <_Bfree>
 8016554:	9905      	ldr	r1, [sp, #20]
 8016556:	4620      	mov	r0, r4
 8016558:	f001 fa9e 	bl	8017a98 <_Bfree>
 801655c:	4659      	mov	r1, fp
 801655e:	4620      	mov	r0, r4
 8016560:	f001 fa9a 	bl	8017a98 <_Bfree>
 8016564:	9909      	ldr	r1, [sp, #36]	; 0x24
 8016566:	4620      	mov	r0, r4
 8016568:	f001 fa96 	bl	8017a98 <_Bfree>
 801656c:	4629      	mov	r1, r5
 801656e:	4620      	mov	r0, r4
 8016570:	f001 fa92 	bl	8017a98 <_Bfree>
 8016574:	e5d7      	b.n	8016126 <_strtod_l+0x76>
 8016576:	4b32      	ldr	r3, [pc, #200]	; (8016640 <_strtod_l+0x590>)
 8016578:	9304      	str	r3, [sp, #16]
 801657a:	2300      	movs	r3, #0
 801657c:	112d      	asrs	r5, r5, #4
 801657e:	4640      	mov	r0, r8
 8016580:	4649      	mov	r1, r9
 8016582:	469a      	mov	sl, r3
 8016584:	2d01      	cmp	r5, #1
 8016586:	dc21      	bgt.n	80165cc <_strtod_l+0x51c>
 8016588:	b10b      	cbz	r3, 801658e <_strtod_l+0x4de>
 801658a:	4680      	mov	r8, r0
 801658c:	4689      	mov	r9, r1
 801658e:	492c      	ldr	r1, [pc, #176]	; (8016640 <_strtod_l+0x590>)
 8016590:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8016594:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8016598:	4642      	mov	r2, r8
 801659a:	464b      	mov	r3, r9
 801659c:	e9d1 0100 	ldrd	r0, r1, [r1]
 80165a0:	f7ea f83a 	bl	8000618 <__aeabi_dmul>
 80165a4:	4b27      	ldr	r3, [pc, #156]	; (8016644 <_strtod_l+0x594>)
 80165a6:	460a      	mov	r2, r1
 80165a8:	400b      	ands	r3, r1
 80165aa:	4927      	ldr	r1, [pc, #156]	; (8016648 <_strtod_l+0x598>)
 80165ac:	428b      	cmp	r3, r1
 80165ae:	4680      	mov	r8, r0
 80165b0:	d8be      	bhi.n	8016530 <_strtod_l+0x480>
 80165b2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80165b6:	428b      	cmp	r3, r1
 80165b8:	bf86      	itte	hi
 80165ba:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 801664c <_strtod_l+0x59c>
 80165be:	f04f 38ff 	movhi.w	r8, #4294967295
 80165c2:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 80165c6:	2300      	movs	r3, #0
 80165c8:	9304      	str	r3, [sp, #16]
 80165ca:	e07b      	b.n	80166c4 <_strtod_l+0x614>
 80165cc:	07ea      	lsls	r2, r5, #31
 80165ce:	d505      	bpl.n	80165dc <_strtod_l+0x52c>
 80165d0:	9b04      	ldr	r3, [sp, #16]
 80165d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80165d6:	f7ea f81f 	bl	8000618 <__aeabi_dmul>
 80165da:	2301      	movs	r3, #1
 80165dc:	9a04      	ldr	r2, [sp, #16]
 80165de:	3208      	adds	r2, #8
 80165e0:	f10a 0a01 	add.w	sl, sl, #1
 80165e4:	106d      	asrs	r5, r5, #1
 80165e6:	9204      	str	r2, [sp, #16]
 80165e8:	e7cc      	b.n	8016584 <_strtod_l+0x4d4>
 80165ea:	d0ec      	beq.n	80165c6 <_strtod_l+0x516>
 80165ec:	426d      	negs	r5, r5
 80165ee:	f015 020f 	ands.w	r2, r5, #15
 80165f2:	d00a      	beq.n	801660a <_strtod_l+0x55a>
 80165f4:	4b11      	ldr	r3, [pc, #68]	; (801663c <_strtod_l+0x58c>)
 80165f6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80165fa:	4640      	mov	r0, r8
 80165fc:	4649      	mov	r1, r9
 80165fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016602:	f7ea f933 	bl	800086c <__aeabi_ddiv>
 8016606:	4680      	mov	r8, r0
 8016608:	4689      	mov	r9, r1
 801660a:	112d      	asrs	r5, r5, #4
 801660c:	d0db      	beq.n	80165c6 <_strtod_l+0x516>
 801660e:	2d1f      	cmp	r5, #31
 8016610:	dd1e      	ble.n	8016650 <_strtod_l+0x5a0>
 8016612:	2500      	movs	r5, #0
 8016614:	46ab      	mov	fp, r5
 8016616:	9509      	str	r5, [sp, #36]	; 0x24
 8016618:	9505      	str	r5, [sp, #20]
 801661a:	2322      	movs	r3, #34	; 0x22
 801661c:	f04f 0800 	mov.w	r8, #0
 8016620:	f04f 0900 	mov.w	r9, #0
 8016624:	6023      	str	r3, [r4, #0]
 8016626:	e78d      	b.n	8016544 <_strtod_l+0x494>
 8016628:	08025df3 	.word	0x08025df3
 801662c:	08025e0c 	.word	0x08025e0c
 8016630:	08025dea 	.word	0x08025dea
 8016634:	08025ded 	.word	0x08025ded
 8016638:	080261a2 	.word	0x080261a2
 801663c:	08026060 	.word	0x08026060
 8016640:	08026038 	.word	0x08026038
 8016644:	7ff00000 	.word	0x7ff00000
 8016648:	7ca00000 	.word	0x7ca00000
 801664c:	7fefffff 	.word	0x7fefffff
 8016650:	f015 0310 	ands.w	r3, r5, #16
 8016654:	bf18      	it	ne
 8016656:	236a      	movne	r3, #106	; 0x6a
 8016658:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 80169fc <_strtod_l+0x94c>
 801665c:	9304      	str	r3, [sp, #16]
 801665e:	4640      	mov	r0, r8
 8016660:	4649      	mov	r1, r9
 8016662:	2300      	movs	r3, #0
 8016664:	07ea      	lsls	r2, r5, #31
 8016666:	d504      	bpl.n	8016672 <_strtod_l+0x5c2>
 8016668:	e9da 2300 	ldrd	r2, r3, [sl]
 801666c:	f7e9 ffd4 	bl	8000618 <__aeabi_dmul>
 8016670:	2301      	movs	r3, #1
 8016672:	106d      	asrs	r5, r5, #1
 8016674:	f10a 0a08 	add.w	sl, sl, #8
 8016678:	d1f4      	bne.n	8016664 <_strtod_l+0x5b4>
 801667a:	b10b      	cbz	r3, 8016680 <_strtod_l+0x5d0>
 801667c:	4680      	mov	r8, r0
 801667e:	4689      	mov	r9, r1
 8016680:	9b04      	ldr	r3, [sp, #16]
 8016682:	b1bb      	cbz	r3, 80166b4 <_strtod_l+0x604>
 8016684:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8016688:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 801668c:	2b00      	cmp	r3, #0
 801668e:	4649      	mov	r1, r9
 8016690:	dd10      	ble.n	80166b4 <_strtod_l+0x604>
 8016692:	2b1f      	cmp	r3, #31
 8016694:	f340 811e 	ble.w	80168d4 <_strtod_l+0x824>
 8016698:	2b34      	cmp	r3, #52	; 0x34
 801669a:	bfde      	ittt	le
 801669c:	f04f 33ff 	movle.w	r3, #4294967295
 80166a0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80166a4:	4093      	lslle	r3, r2
 80166a6:	f04f 0800 	mov.w	r8, #0
 80166aa:	bfcc      	ite	gt
 80166ac:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 80166b0:	ea03 0901 	andle.w	r9, r3, r1
 80166b4:	2200      	movs	r2, #0
 80166b6:	2300      	movs	r3, #0
 80166b8:	4640      	mov	r0, r8
 80166ba:	4649      	mov	r1, r9
 80166bc:	f7ea fa14 	bl	8000ae8 <__aeabi_dcmpeq>
 80166c0:	2800      	cmp	r0, #0
 80166c2:	d1a6      	bne.n	8016612 <_strtod_l+0x562>
 80166c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80166c6:	9300      	str	r3, [sp, #0]
 80166c8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80166ca:	4633      	mov	r3, r6
 80166cc:	465a      	mov	r2, fp
 80166ce:	4620      	mov	r0, r4
 80166d0:	f001 fa4a 	bl	8017b68 <__s2b>
 80166d4:	9009      	str	r0, [sp, #36]	; 0x24
 80166d6:	2800      	cmp	r0, #0
 80166d8:	f43f af2a 	beq.w	8016530 <_strtod_l+0x480>
 80166dc:	9a08      	ldr	r2, [sp, #32]
 80166de:	9b05      	ldr	r3, [sp, #20]
 80166e0:	2a00      	cmp	r2, #0
 80166e2:	eba3 0307 	sub.w	r3, r3, r7
 80166e6:	bfa8      	it	ge
 80166e8:	2300      	movge	r3, #0
 80166ea:	930c      	str	r3, [sp, #48]	; 0x30
 80166ec:	2500      	movs	r5, #0
 80166ee:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80166f2:	9312      	str	r3, [sp, #72]	; 0x48
 80166f4:	46ab      	mov	fp, r5
 80166f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80166f8:	4620      	mov	r0, r4
 80166fa:	6859      	ldr	r1, [r3, #4]
 80166fc:	f001 f98c 	bl	8017a18 <_Balloc>
 8016700:	9005      	str	r0, [sp, #20]
 8016702:	2800      	cmp	r0, #0
 8016704:	f43f af18 	beq.w	8016538 <_strtod_l+0x488>
 8016708:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801670a:	691a      	ldr	r2, [r3, #16]
 801670c:	3202      	adds	r2, #2
 801670e:	f103 010c 	add.w	r1, r3, #12
 8016712:	0092      	lsls	r2, r2, #2
 8016714:	300c      	adds	r0, #12
 8016716:	f000 fdac 	bl	8017272 <memcpy>
 801671a:	ec49 8b10 	vmov	d0, r8, r9
 801671e:	aa18      	add	r2, sp, #96	; 0x60
 8016720:	a917      	add	r1, sp, #92	; 0x5c
 8016722:	4620      	mov	r0, r4
 8016724:	f001 fd54 	bl	80181d0 <__d2b>
 8016728:	ec49 8b18 	vmov	d8, r8, r9
 801672c:	9016      	str	r0, [sp, #88]	; 0x58
 801672e:	2800      	cmp	r0, #0
 8016730:	f43f af02 	beq.w	8016538 <_strtod_l+0x488>
 8016734:	2101      	movs	r1, #1
 8016736:	4620      	mov	r0, r4
 8016738:	f001 faae 	bl	8017c98 <__i2b>
 801673c:	4683      	mov	fp, r0
 801673e:	2800      	cmp	r0, #0
 8016740:	f43f aefa 	beq.w	8016538 <_strtod_l+0x488>
 8016744:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8016746:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8016748:	2e00      	cmp	r6, #0
 801674a:	bfab      	itete	ge
 801674c:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 801674e:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 8016750:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8016752:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 8016756:	bfac      	ite	ge
 8016758:	eb06 0a03 	addge.w	sl, r6, r3
 801675c:	1b9f      	sublt	r7, r3, r6
 801675e:	9b04      	ldr	r3, [sp, #16]
 8016760:	1af6      	subs	r6, r6, r3
 8016762:	4416      	add	r6, r2
 8016764:	4ba0      	ldr	r3, [pc, #640]	; (80169e8 <_strtod_l+0x938>)
 8016766:	3e01      	subs	r6, #1
 8016768:	429e      	cmp	r6, r3
 801676a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801676e:	f280 80c4 	bge.w	80168fa <_strtod_l+0x84a>
 8016772:	1b9b      	subs	r3, r3, r6
 8016774:	2b1f      	cmp	r3, #31
 8016776:	eba2 0203 	sub.w	r2, r2, r3
 801677a:	f04f 0101 	mov.w	r1, #1
 801677e:	f300 80b0 	bgt.w	80168e2 <_strtod_l+0x832>
 8016782:	fa01 f303 	lsl.w	r3, r1, r3
 8016786:	930e      	str	r3, [sp, #56]	; 0x38
 8016788:	2300      	movs	r3, #0
 801678a:	930d      	str	r3, [sp, #52]	; 0x34
 801678c:	eb0a 0602 	add.w	r6, sl, r2
 8016790:	9b04      	ldr	r3, [sp, #16]
 8016792:	45b2      	cmp	sl, r6
 8016794:	4417      	add	r7, r2
 8016796:	441f      	add	r7, r3
 8016798:	4653      	mov	r3, sl
 801679a:	bfa8      	it	ge
 801679c:	4633      	movge	r3, r6
 801679e:	42bb      	cmp	r3, r7
 80167a0:	bfa8      	it	ge
 80167a2:	463b      	movge	r3, r7
 80167a4:	2b00      	cmp	r3, #0
 80167a6:	bfc2      	ittt	gt
 80167a8:	1af6      	subgt	r6, r6, r3
 80167aa:	1aff      	subgt	r7, r7, r3
 80167ac:	ebaa 0a03 	subgt.w	sl, sl, r3
 80167b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80167b2:	2b00      	cmp	r3, #0
 80167b4:	dd17      	ble.n	80167e6 <_strtod_l+0x736>
 80167b6:	4659      	mov	r1, fp
 80167b8:	461a      	mov	r2, r3
 80167ba:	4620      	mov	r0, r4
 80167bc:	f001 fb2c 	bl	8017e18 <__pow5mult>
 80167c0:	4683      	mov	fp, r0
 80167c2:	2800      	cmp	r0, #0
 80167c4:	f43f aeb8 	beq.w	8016538 <_strtod_l+0x488>
 80167c8:	4601      	mov	r1, r0
 80167ca:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80167cc:	4620      	mov	r0, r4
 80167ce:	f001 fa79 	bl	8017cc4 <__multiply>
 80167d2:	900b      	str	r0, [sp, #44]	; 0x2c
 80167d4:	2800      	cmp	r0, #0
 80167d6:	f43f aeaf 	beq.w	8016538 <_strtod_l+0x488>
 80167da:	9916      	ldr	r1, [sp, #88]	; 0x58
 80167dc:	4620      	mov	r0, r4
 80167de:	f001 f95b 	bl	8017a98 <_Bfree>
 80167e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80167e4:	9316      	str	r3, [sp, #88]	; 0x58
 80167e6:	2e00      	cmp	r6, #0
 80167e8:	f300 808c 	bgt.w	8016904 <_strtod_l+0x854>
 80167ec:	9b08      	ldr	r3, [sp, #32]
 80167ee:	2b00      	cmp	r3, #0
 80167f0:	dd08      	ble.n	8016804 <_strtod_l+0x754>
 80167f2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80167f4:	9905      	ldr	r1, [sp, #20]
 80167f6:	4620      	mov	r0, r4
 80167f8:	f001 fb0e 	bl	8017e18 <__pow5mult>
 80167fc:	9005      	str	r0, [sp, #20]
 80167fe:	2800      	cmp	r0, #0
 8016800:	f43f ae9a 	beq.w	8016538 <_strtod_l+0x488>
 8016804:	2f00      	cmp	r7, #0
 8016806:	dd08      	ble.n	801681a <_strtod_l+0x76a>
 8016808:	9905      	ldr	r1, [sp, #20]
 801680a:	463a      	mov	r2, r7
 801680c:	4620      	mov	r0, r4
 801680e:	f001 fb5d 	bl	8017ecc <__lshift>
 8016812:	9005      	str	r0, [sp, #20]
 8016814:	2800      	cmp	r0, #0
 8016816:	f43f ae8f 	beq.w	8016538 <_strtod_l+0x488>
 801681a:	f1ba 0f00 	cmp.w	sl, #0
 801681e:	dd08      	ble.n	8016832 <_strtod_l+0x782>
 8016820:	4659      	mov	r1, fp
 8016822:	4652      	mov	r2, sl
 8016824:	4620      	mov	r0, r4
 8016826:	f001 fb51 	bl	8017ecc <__lshift>
 801682a:	4683      	mov	fp, r0
 801682c:	2800      	cmp	r0, #0
 801682e:	f43f ae83 	beq.w	8016538 <_strtod_l+0x488>
 8016832:	9a05      	ldr	r2, [sp, #20]
 8016834:	9916      	ldr	r1, [sp, #88]	; 0x58
 8016836:	4620      	mov	r0, r4
 8016838:	f001 fbd0 	bl	8017fdc <__mdiff>
 801683c:	4605      	mov	r5, r0
 801683e:	2800      	cmp	r0, #0
 8016840:	f43f ae7a 	beq.w	8016538 <_strtod_l+0x488>
 8016844:	68c3      	ldr	r3, [r0, #12]
 8016846:	930b      	str	r3, [sp, #44]	; 0x2c
 8016848:	2300      	movs	r3, #0
 801684a:	60c3      	str	r3, [r0, #12]
 801684c:	4659      	mov	r1, fp
 801684e:	f001 fba9 	bl	8017fa4 <__mcmp>
 8016852:	2800      	cmp	r0, #0
 8016854:	da60      	bge.n	8016918 <_strtod_l+0x868>
 8016856:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016858:	ea53 0308 	orrs.w	r3, r3, r8
 801685c:	f040 8084 	bne.w	8016968 <_strtod_l+0x8b8>
 8016860:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8016864:	2b00      	cmp	r3, #0
 8016866:	d17f      	bne.n	8016968 <_strtod_l+0x8b8>
 8016868:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801686c:	0d1b      	lsrs	r3, r3, #20
 801686e:	051b      	lsls	r3, r3, #20
 8016870:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8016874:	d978      	bls.n	8016968 <_strtod_l+0x8b8>
 8016876:	696b      	ldr	r3, [r5, #20]
 8016878:	b913      	cbnz	r3, 8016880 <_strtod_l+0x7d0>
 801687a:	692b      	ldr	r3, [r5, #16]
 801687c:	2b01      	cmp	r3, #1
 801687e:	dd73      	ble.n	8016968 <_strtod_l+0x8b8>
 8016880:	4629      	mov	r1, r5
 8016882:	2201      	movs	r2, #1
 8016884:	4620      	mov	r0, r4
 8016886:	f001 fb21 	bl	8017ecc <__lshift>
 801688a:	4659      	mov	r1, fp
 801688c:	4605      	mov	r5, r0
 801688e:	f001 fb89 	bl	8017fa4 <__mcmp>
 8016892:	2800      	cmp	r0, #0
 8016894:	dd68      	ble.n	8016968 <_strtod_l+0x8b8>
 8016896:	9904      	ldr	r1, [sp, #16]
 8016898:	4a54      	ldr	r2, [pc, #336]	; (80169ec <_strtod_l+0x93c>)
 801689a:	464b      	mov	r3, r9
 801689c:	2900      	cmp	r1, #0
 801689e:	f000 8084 	beq.w	80169aa <_strtod_l+0x8fa>
 80168a2:	ea02 0109 	and.w	r1, r2, r9
 80168a6:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80168aa:	dc7e      	bgt.n	80169aa <_strtod_l+0x8fa>
 80168ac:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80168b0:	f77f aeb3 	ble.w	801661a <_strtod_l+0x56a>
 80168b4:	4b4e      	ldr	r3, [pc, #312]	; (80169f0 <_strtod_l+0x940>)
 80168b6:	4640      	mov	r0, r8
 80168b8:	4649      	mov	r1, r9
 80168ba:	2200      	movs	r2, #0
 80168bc:	f7e9 feac 	bl	8000618 <__aeabi_dmul>
 80168c0:	4b4a      	ldr	r3, [pc, #296]	; (80169ec <_strtod_l+0x93c>)
 80168c2:	400b      	ands	r3, r1
 80168c4:	4680      	mov	r8, r0
 80168c6:	4689      	mov	r9, r1
 80168c8:	2b00      	cmp	r3, #0
 80168ca:	f47f ae3f 	bne.w	801654c <_strtod_l+0x49c>
 80168ce:	2322      	movs	r3, #34	; 0x22
 80168d0:	6023      	str	r3, [r4, #0]
 80168d2:	e63b      	b.n	801654c <_strtod_l+0x49c>
 80168d4:	f04f 32ff 	mov.w	r2, #4294967295
 80168d8:	fa02 f303 	lsl.w	r3, r2, r3
 80168dc:	ea03 0808 	and.w	r8, r3, r8
 80168e0:	e6e8      	b.n	80166b4 <_strtod_l+0x604>
 80168e2:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 80168e6:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 80168ea:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 80168ee:	36e2      	adds	r6, #226	; 0xe2
 80168f0:	fa01 f306 	lsl.w	r3, r1, r6
 80168f4:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 80168f8:	e748      	b.n	801678c <_strtod_l+0x6dc>
 80168fa:	2100      	movs	r1, #0
 80168fc:	2301      	movs	r3, #1
 80168fe:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 8016902:	e743      	b.n	801678c <_strtod_l+0x6dc>
 8016904:	9916      	ldr	r1, [sp, #88]	; 0x58
 8016906:	4632      	mov	r2, r6
 8016908:	4620      	mov	r0, r4
 801690a:	f001 fadf 	bl	8017ecc <__lshift>
 801690e:	9016      	str	r0, [sp, #88]	; 0x58
 8016910:	2800      	cmp	r0, #0
 8016912:	f47f af6b 	bne.w	80167ec <_strtod_l+0x73c>
 8016916:	e60f      	b.n	8016538 <_strtod_l+0x488>
 8016918:	46ca      	mov	sl, r9
 801691a:	d171      	bne.n	8016a00 <_strtod_l+0x950>
 801691c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801691e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8016922:	b352      	cbz	r2, 801697a <_strtod_l+0x8ca>
 8016924:	4a33      	ldr	r2, [pc, #204]	; (80169f4 <_strtod_l+0x944>)
 8016926:	4293      	cmp	r3, r2
 8016928:	d12a      	bne.n	8016980 <_strtod_l+0x8d0>
 801692a:	9b04      	ldr	r3, [sp, #16]
 801692c:	4641      	mov	r1, r8
 801692e:	b1fb      	cbz	r3, 8016970 <_strtod_l+0x8c0>
 8016930:	4b2e      	ldr	r3, [pc, #184]	; (80169ec <_strtod_l+0x93c>)
 8016932:	ea09 0303 	and.w	r3, r9, r3
 8016936:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801693a:	f04f 32ff 	mov.w	r2, #4294967295
 801693e:	d81a      	bhi.n	8016976 <_strtod_l+0x8c6>
 8016940:	0d1b      	lsrs	r3, r3, #20
 8016942:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8016946:	fa02 f303 	lsl.w	r3, r2, r3
 801694a:	4299      	cmp	r1, r3
 801694c:	d118      	bne.n	8016980 <_strtod_l+0x8d0>
 801694e:	4b2a      	ldr	r3, [pc, #168]	; (80169f8 <_strtod_l+0x948>)
 8016950:	459a      	cmp	sl, r3
 8016952:	d102      	bne.n	801695a <_strtod_l+0x8aa>
 8016954:	3101      	adds	r1, #1
 8016956:	f43f adef 	beq.w	8016538 <_strtod_l+0x488>
 801695a:	4b24      	ldr	r3, [pc, #144]	; (80169ec <_strtod_l+0x93c>)
 801695c:	ea0a 0303 	and.w	r3, sl, r3
 8016960:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8016964:	f04f 0800 	mov.w	r8, #0
 8016968:	9b04      	ldr	r3, [sp, #16]
 801696a:	2b00      	cmp	r3, #0
 801696c:	d1a2      	bne.n	80168b4 <_strtod_l+0x804>
 801696e:	e5ed      	b.n	801654c <_strtod_l+0x49c>
 8016970:	f04f 33ff 	mov.w	r3, #4294967295
 8016974:	e7e9      	b.n	801694a <_strtod_l+0x89a>
 8016976:	4613      	mov	r3, r2
 8016978:	e7e7      	b.n	801694a <_strtod_l+0x89a>
 801697a:	ea53 0308 	orrs.w	r3, r3, r8
 801697e:	d08a      	beq.n	8016896 <_strtod_l+0x7e6>
 8016980:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016982:	b1e3      	cbz	r3, 80169be <_strtod_l+0x90e>
 8016984:	ea13 0f0a 	tst.w	r3, sl
 8016988:	d0ee      	beq.n	8016968 <_strtod_l+0x8b8>
 801698a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801698c:	9a04      	ldr	r2, [sp, #16]
 801698e:	4640      	mov	r0, r8
 8016990:	4649      	mov	r1, r9
 8016992:	b1c3      	cbz	r3, 80169c6 <_strtod_l+0x916>
 8016994:	f7ff fb6e 	bl	8016074 <sulp>
 8016998:	4602      	mov	r2, r0
 801699a:	460b      	mov	r3, r1
 801699c:	ec51 0b18 	vmov	r0, r1, d8
 80169a0:	f7e9 fc84 	bl	80002ac <__adddf3>
 80169a4:	4680      	mov	r8, r0
 80169a6:	4689      	mov	r9, r1
 80169a8:	e7de      	b.n	8016968 <_strtod_l+0x8b8>
 80169aa:	4013      	ands	r3, r2
 80169ac:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80169b0:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 80169b4:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 80169b8:	f04f 38ff 	mov.w	r8, #4294967295
 80169bc:	e7d4      	b.n	8016968 <_strtod_l+0x8b8>
 80169be:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80169c0:	ea13 0f08 	tst.w	r3, r8
 80169c4:	e7e0      	b.n	8016988 <_strtod_l+0x8d8>
 80169c6:	f7ff fb55 	bl	8016074 <sulp>
 80169ca:	4602      	mov	r2, r0
 80169cc:	460b      	mov	r3, r1
 80169ce:	ec51 0b18 	vmov	r0, r1, d8
 80169d2:	f7e9 fc69 	bl	80002a8 <__aeabi_dsub>
 80169d6:	2200      	movs	r2, #0
 80169d8:	2300      	movs	r3, #0
 80169da:	4680      	mov	r8, r0
 80169dc:	4689      	mov	r9, r1
 80169de:	f7ea f883 	bl	8000ae8 <__aeabi_dcmpeq>
 80169e2:	2800      	cmp	r0, #0
 80169e4:	d0c0      	beq.n	8016968 <_strtod_l+0x8b8>
 80169e6:	e618      	b.n	801661a <_strtod_l+0x56a>
 80169e8:	fffffc02 	.word	0xfffffc02
 80169ec:	7ff00000 	.word	0x7ff00000
 80169f0:	39500000 	.word	0x39500000
 80169f4:	000fffff 	.word	0x000fffff
 80169f8:	7fefffff 	.word	0x7fefffff
 80169fc:	08025e20 	.word	0x08025e20
 8016a00:	4659      	mov	r1, fp
 8016a02:	4628      	mov	r0, r5
 8016a04:	f001 fc3e 	bl	8018284 <__ratio>
 8016a08:	ec57 6b10 	vmov	r6, r7, d0
 8016a0c:	ee10 0a10 	vmov	r0, s0
 8016a10:	2200      	movs	r2, #0
 8016a12:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8016a16:	4639      	mov	r1, r7
 8016a18:	f7ea f87a 	bl	8000b10 <__aeabi_dcmple>
 8016a1c:	2800      	cmp	r0, #0
 8016a1e:	d071      	beq.n	8016b04 <_strtod_l+0xa54>
 8016a20:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016a22:	2b00      	cmp	r3, #0
 8016a24:	d17c      	bne.n	8016b20 <_strtod_l+0xa70>
 8016a26:	f1b8 0f00 	cmp.w	r8, #0
 8016a2a:	d15a      	bne.n	8016ae2 <_strtod_l+0xa32>
 8016a2c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8016a30:	2b00      	cmp	r3, #0
 8016a32:	d15d      	bne.n	8016af0 <_strtod_l+0xa40>
 8016a34:	4b90      	ldr	r3, [pc, #576]	; (8016c78 <_strtod_l+0xbc8>)
 8016a36:	2200      	movs	r2, #0
 8016a38:	4630      	mov	r0, r6
 8016a3a:	4639      	mov	r1, r7
 8016a3c:	f7ea f85e 	bl	8000afc <__aeabi_dcmplt>
 8016a40:	2800      	cmp	r0, #0
 8016a42:	d15c      	bne.n	8016afe <_strtod_l+0xa4e>
 8016a44:	4630      	mov	r0, r6
 8016a46:	4639      	mov	r1, r7
 8016a48:	4b8c      	ldr	r3, [pc, #560]	; (8016c7c <_strtod_l+0xbcc>)
 8016a4a:	2200      	movs	r2, #0
 8016a4c:	f7e9 fde4 	bl	8000618 <__aeabi_dmul>
 8016a50:	4606      	mov	r6, r0
 8016a52:	460f      	mov	r7, r1
 8016a54:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8016a58:	9606      	str	r6, [sp, #24]
 8016a5a:	9307      	str	r3, [sp, #28]
 8016a5c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8016a60:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8016a64:	4b86      	ldr	r3, [pc, #536]	; (8016c80 <_strtod_l+0xbd0>)
 8016a66:	ea0a 0303 	and.w	r3, sl, r3
 8016a6a:	930d      	str	r3, [sp, #52]	; 0x34
 8016a6c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8016a6e:	4b85      	ldr	r3, [pc, #532]	; (8016c84 <_strtod_l+0xbd4>)
 8016a70:	429a      	cmp	r2, r3
 8016a72:	f040 8090 	bne.w	8016b96 <_strtod_l+0xae6>
 8016a76:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 8016a7a:	ec49 8b10 	vmov	d0, r8, r9
 8016a7e:	f001 fb37 	bl	80180f0 <__ulp>
 8016a82:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8016a86:	ec51 0b10 	vmov	r0, r1, d0
 8016a8a:	f7e9 fdc5 	bl	8000618 <__aeabi_dmul>
 8016a8e:	4642      	mov	r2, r8
 8016a90:	464b      	mov	r3, r9
 8016a92:	f7e9 fc0b 	bl	80002ac <__adddf3>
 8016a96:	460b      	mov	r3, r1
 8016a98:	4979      	ldr	r1, [pc, #484]	; (8016c80 <_strtod_l+0xbd0>)
 8016a9a:	4a7b      	ldr	r2, [pc, #492]	; (8016c88 <_strtod_l+0xbd8>)
 8016a9c:	4019      	ands	r1, r3
 8016a9e:	4291      	cmp	r1, r2
 8016aa0:	4680      	mov	r8, r0
 8016aa2:	d944      	bls.n	8016b2e <_strtod_l+0xa7e>
 8016aa4:	ee18 2a90 	vmov	r2, s17
 8016aa8:	4b78      	ldr	r3, [pc, #480]	; (8016c8c <_strtod_l+0xbdc>)
 8016aaa:	429a      	cmp	r2, r3
 8016aac:	d104      	bne.n	8016ab8 <_strtod_l+0xa08>
 8016aae:	ee18 3a10 	vmov	r3, s16
 8016ab2:	3301      	adds	r3, #1
 8016ab4:	f43f ad40 	beq.w	8016538 <_strtod_l+0x488>
 8016ab8:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 8016c8c <_strtod_l+0xbdc>
 8016abc:	f04f 38ff 	mov.w	r8, #4294967295
 8016ac0:	9916      	ldr	r1, [sp, #88]	; 0x58
 8016ac2:	4620      	mov	r0, r4
 8016ac4:	f000 ffe8 	bl	8017a98 <_Bfree>
 8016ac8:	9905      	ldr	r1, [sp, #20]
 8016aca:	4620      	mov	r0, r4
 8016acc:	f000 ffe4 	bl	8017a98 <_Bfree>
 8016ad0:	4659      	mov	r1, fp
 8016ad2:	4620      	mov	r0, r4
 8016ad4:	f000 ffe0 	bl	8017a98 <_Bfree>
 8016ad8:	4629      	mov	r1, r5
 8016ada:	4620      	mov	r0, r4
 8016adc:	f000 ffdc 	bl	8017a98 <_Bfree>
 8016ae0:	e609      	b.n	80166f6 <_strtod_l+0x646>
 8016ae2:	f1b8 0f01 	cmp.w	r8, #1
 8016ae6:	d103      	bne.n	8016af0 <_strtod_l+0xa40>
 8016ae8:	f1b9 0f00 	cmp.w	r9, #0
 8016aec:	f43f ad95 	beq.w	801661a <_strtod_l+0x56a>
 8016af0:	ed9f 7b55 	vldr	d7, [pc, #340]	; 8016c48 <_strtod_l+0xb98>
 8016af4:	4f60      	ldr	r7, [pc, #384]	; (8016c78 <_strtod_l+0xbc8>)
 8016af6:	ed8d 7b06 	vstr	d7, [sp, #24]
 8016afa:	2600      	movs	r6, #0
 8016afc:	e7ae      	b.n	8016a5c <_strtod_l+0x9ac>
 8016afe:	4f5f      	ldr	r7, [pc, #380]	; (8016c7c <_strtod_l+0xbcc>)
 8016b00:	2600      	movs	r6, #0
 8016b02:	e7a7      	b.n	8016a54 <_strtod_l+0x9a4>
 8016b04:	4b5d      	ldr	r3, [pc, #372]	; (8016c7c <_strtod_l+0xbcc>)
 8016b06:	4630      	mov	r0, r6
 8016b08:	4639      	mov	r1, r7
 8016b0a:	2200      	movs	r2, #0
 8016b0c:	f7e9 fd84 	bl	8000618 <__aeabi_dmul>
 8016b10:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016b12:	4606      	mov	r6, r0
 8016b14:	460f      	mov	r7, r1
 8016b16:	2b00      	cmp	r3, #0
 8016b18:	d09c      	beq.n	8016a54 <_strtod_l+0x9a4>
 8016b1a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8016b1e:	e79d      	b.n	8016a5c <_strtod_l+0x9ac>
 8016b20:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 8016c50 <_strtod_l+0xba0>
 8016b24:	ed8d 7b06 	vstr	d7, [sp, #24]
 8016b28:	ec57 6b17 	vmov	r6, r7, d7
 8016b2c:	e796      	b.n	8016a5c <_strtod_l+0x9ac>
 8016b2e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8016b32:	9b04      	ldr	r3, [sp, #16]
 8016b34:	46ca      	mov	sl, r9
 8016b36:	2b00      	cmp	r3, #0
 8016b38:	d1c2      	bne.n	8016ac0 <_strtod_l+0xa10>
 8016b3a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8016b3e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8016b40:	0d1b      	lsrs	r3, r3, #20
 8016b42:	051b      	lsls	r3, r3, #20
 8016b44:	429a      	cmp	r2, r3
 8016b46:	d1bb      	bne.n	8016ac0 <_strtod_l+0xa10>
 8016b48:	4630      	mov	r0, r6
 8016b4a:	4639      	mov	r1, r7
 8016b4c:	f7ea f89c 	bl	8000c88 <__aeabi_d2lz>
 8016b50:	f7e9 fd34 	bl	80005bc <__aeabi_l2d>
 8016b54:	4602      	mov	r2, r0
 8016b56:	460b      	mov	r3, r1
 8016b58:	4630      	mov	r0, r6
 8016b5a:	4639      	mov	r1, r7
 8016b5c:	f7e9 fba4 	bl	80002a8 <__aeabi_dsub>
 8016b60:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8016b62:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8016b66:	ea43 0308 	orr.w	r3, r3, r8
 8016b6a:	4313      	orrs	r3, r2
 8016b6c:	4606      	mov	r6, r0
 8016b6e:	460f      	mov	r7, r1
 8016b70:	d054      	beq.n	8016c1c <_strtod_l+0xb6c>
 8016b72:	a339      	add	r3, pc, #228	; (adr r3, 8016c58 <_strtod_l+0xba8>)
 8016b74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016b78:	f7e9 ffc0 	bl	8000afc <__aeabi_dcmplt>
 8016b7c:	2800      	cmp	r0, #0
 8016b7e:	f47f ace5 	bne.w	801654c <_strtod_l+0x49c>
 8016b82:	a337      	add	r3, pc, #220	; (adr r3, 8016c60 <_strtod_l+0xbb0>)
 8016b84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016b88:	4630      	mov	r0, r6
 8016b8a:	4639      	mov	r1, r7
 8016b8c:	f7e9 ffd4 	bl	8000b38 <__aeabi_dcmpgt>
 8016b90:	2800      	cmp	r0, #0
 8016b92:	d095      	beq.n	8016ac0 <_strtod_l+0xa10>
 8016b94:	e4da      	b.n	801654c <_strtod_l+0x49c>
 8016b96:	9b04      	ldr	r3, [sp, #16]
 8016b98:	b333      	cbz	r3, 8016be8 <_strtod_l+0xb38>
 8016b9a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016b9c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8016ba0:	d822      	bhi.n	8016be8 <_strtod_l+0xb38>
 8016ba2:	a331      	add	r3, pc, #196	; (adr r3, 8016c68 <_strtod_l+0xbb8>)
 8016ba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016ba8:	4630      	mov	r0, r6
 8016baa:	4639      	mov	r1, r7
 8016bac:	f7e9 ffb0 	bl	8000b10 <__aeabi_dcmple>
 8016bb0:	b1a0      	cbz	r0, 8016bdc <_strtod_l+0xb2c>
 8016bb2:	4639      	mov	r1, r7
 8016bb4:	4630      	mov	r0, r6
 8016bb6:	f7e9 ffdf 	bl	8000b78 <__aeabi_d2uiz>
 8016bba:	2801      	cmp	r0, #1
 8016bbc:	bf38      	it	cc
 8016bbe:	2001      	movcc	r0, #1
 8016bc0:	f7e9 fcb0 	bl	8000524 <__aeabi_ui2d>
 8016bc4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016bc6:	4606      	mov	r6, r0
 8016bc8:	460f      	mov	r7, r1
 8016bca:	bb23      	cbnz	r3, 8016c16 <_strtod_l+0xb66>
 8016bcc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8016bd0:	9010      	str	r0, [sp, #64]	; 0x40
 8016bd2:	9311      	str	r3, [sp, #68]	; 0x44
 8016bd4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8016bd8:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8016bdc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016bde:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8016be0:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8016be4:	1a9b      	subs	r3, r3, r2
 8016be6:	930f      	str	r3, [sp, #60]	; 0x3c
 8016be8:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8016bec:	eeb0 0a48 	vmov.f32	s0, s16
 8016bf0:	eef0 0a68 	vmov.f32	s1, s17
 8016bf4:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8016bf8:	f001 fa7a 	bl	80180f0 <__ulp>
 8016bfc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8016c00:	ec53 2b10 	vmov	r2, r3, d0
 8016c04:	f7e9 fd08 	bl	8000618 <__aeabi_dmul>
 8016c08:	ec53 2b18 	vmov	r2, r3, d8
 8016c0c:	f7e9 fb4e 	bl	80002ac <__adddf3>
 8016c10:	4680      	mov	r8, r0
 8016c12:	4689      	mov	r9, r1
 8016c14:	e78d      	b.n	8016b32 <_strtod_l+0xa82>
 8016c16:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8016c1a:	e7db      	b.n	8016bd4 <_strtod_l+0xb24>
 8016c1c:	a314      	add	r3, pc, #80	; (adr r3, 8016c70 <_strtod_l+0xbc0>)
 8016c1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016c22:	f7e9 ff6b 	bl	8000afc <__aeabi_dcmplt>
 8016c26:	e7b3      	b.n	8016b90 <_strtod_l+0xae0>
 8016c28:	2300      	movs	r3, #0
 8016c2a:	930a      	str	r3, [sp, #40]	; 0x28
 8016c2c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8016c2e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8016c30:	6013      	str	r3, [r2, #0]
 8016c32:	f7ff ba7c 	b.w	801612e <_strtod_l+0x7e>
 8016c36:	2a65      	cmp	r2, #101	; 0x65
 8016c38:	f43f ab75 	beq.w	8016326 <_strtod_l+0x276>
 8016c3c:	2a45      	cmp	r2, #69	; 0x45
 8016c3e:	f43f ab72 	beq.w	8016326 <_strtod_l+0x276>
 8016c42:	2301      	movs	r3, #1
 8016c44:	f7ff bbaa 	b.w	801639c <_strtod_l+0x2ec>
 8016c48:	00000000 	.word	0x00000000
 8016c4c:	bff00000 	.word	0xbff00000
 8016c50:	00000000 	.word	0x00000000
 8016c54:	3ff00000 	.word	0x3ff00000
 8016c58:	94a03595 	.word	0x94a03595
 8016c5c:	3fdfffff 	.word	0x3fdfffff
 8016c60:	35afe535 	.word	0x35afe535
 8016c64:	3fe00000 	.word	0x3fe00000
 8016c68:	ffc00000 	.word	0xffc00000
 8016c6c:	41dfffff 	.word	0x41dfffff
 8016c70:	94a03595 	.word	0x94a03595
 8016c74:	3fcfffff 	.word	0x3fcfffff
 8016c78:	3ff00000 	.word	0x3ff00000
 8016c7c:	3fe00000 	.word	0x3fe00000
 8016c80:	7ff00000 	.word	0x7ff00000
 8016c84:	7fe00000 	.word	0x7fe00000
 8016c88:	7c9fffff 	.word	0x7c9fffff
 8016c8c:	7fefffff 	.word	0x7fefffff

08016c90 <strtof>:
 8016c90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016c94:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 8016d58 <strtof+0xc8>
 8016c98:	4b2a      	ldr	r3, [pc, #168]	; (8016d44 <strtof+0xb4>)
 8016c9a:	460a      	mov	r2, r1
 8016c9c:	ed2d 8b02 	vpush	{d8}
 8016ca0:	4601      	mov	r1, r0
 8016ca2:	f8d8 0000 	ldr.w	r0, [r8]
 8016ca6:	f7ff fa03 	bl	80160b0 <_strtod_l>
 8016caa:	ec55 4b10 	vmov	r4, r5, d0
 8016cae:	ee10 2a10 	vmov	r2, s0
 8016cb2:	ee10 0a10 	vmov	r0, s0
 8016cb6:	462b      	mov	r3, r5
 8016cb8:	4629      	mov	r1, r5
 8016cba:	f7e9 ff47 	bl	8000b4c <__aeabi_dcmpun>
 8016cbe:	b190      	cbz	r0, 8016ce6 <strtof+0x56>
 8016cc0:	2d00      	cmp	r5, #0
 8016cc2:	4821      	ldr	r0, [pc, #132]	; (8016d48 <strtof+0xb8>)
 8016cc4:	da09      	bge.n	8016cda <strtof+0x4a>
 8016cc6:	f000 faeb 	bl	80172a0 <nanf>
 8016cca:	eeb1 8a40 	vneg.f32	s16, s0
 8016cce:	eeb0 0a48 	vmov.f32	s0, s16
 8016cd2:	ecbd 8b02 	vpop	{d8}
 8016cd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016cda:	ecbd 8b02 	vpop	{d8}
 8016cde:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016ce2:	f000 badd 	b.w	80172a0 <nanf>
 8016ce6:	4620      	mov	r0, r4
 8016ce8:	4629      	mov	r1, r5
 8016cea:	f7e9 ff65 	bl	8000bb8 <__aeabi_d2f>
 8016cee:	ee08 0a10 	vmov	s16, r0
 8016cf2:	eddf 7a16 	vldr	s15, [pc, #88]	; 8016d4c <strtof+0xbc>
 8016cf6:	eeb0 7ac8 	vabs.f32	s14, s16
 8016cfa:	eeb4 7a67 	vcmp.f32	s14, s15
 8016cfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016d02:	dd11      	ble.n	8016d28 <strtof+0x98>
 8016d04:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
 8016d08:	4b11      	ldr	r3, [pc, #68]	; (8016d50 <strtof+0xc0>)
 8016d0a:	f04f 32ff 	mov.w	r2, #4294967295
 8016d0e:	4620      	mov	r0, r4
 8016d10:	4639      	mov	r1, r7
 8016d12:	f7e9 ff1b 	bl	8000b4c <__aeabi_dcmpun>
 8016d16:	b980      	cbnz	r0, 8016d3a <strtof+0xaa>
 8016d18:	4b0d      	ldr	r3, [pc, #52]	; (8016d50 <strtof+0xc0>)
 8016d1a:	f04f 32ff 	mov.w	r2, #4294967295
 8016d1e:	4620      	mov	r0, r4
 8016d20:	4639      	mov	r1, r7
 8016d22:	f7e9 fef5 	bl	8000b10 <__aeabi_dcmple>
 8016d26:	b940      	cbnz	r0, 8016d3a <strtof+0xaa>
 8016d28:	ee18 3a10 	vmov	r3, s16
 8016d2c:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8016d30:	d1cd      	bne.n	8016cce <strtof+0x3e>
 8016d32:	4b08      	ldr	r3, [pc, #32]	; (8016d54 <strtof+0xc4>)
 8016d34:	402b      	ands	r3, r5
 8016d36:	2b00      	cmp	r3, #0
 8016d38:	d0c9      	beq.n	8016cce <strtof+0x3e>
 8016d3a:	f8d8 3000 	ldr.w	r3, [r8]
 8016d3e:	2222      	movs	r2, #34	; 0x22
 8016d40:	601a      	str	r2, [r3, #0]
 8016d42:	e7c4      	b.n	8016cce <strtof+0x3e>
 8016d44:	200001ac 	.word	0x200001ac
 8016d48:	080261a2 	.word	0x080261a2
 8016d4c:	7f7fffff 	.word	0x7f7fffff
 8016d50:	7fefffff 	.word	0x7fefffff
 8016d54:	7ff00000 	.word	0x7ff00000
 8016d58:	20000364 	.word	0x20000364

08016d5c <_strtoul_l.constprop.0>:
 8016d5c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016d60:	4f36      	ldr	r7, [pc, #216]	; (8016e3c <_strtoul_l.constprop.0+0xe0>)
 8016d62:	4686      	mov	lr, r0
 8016d64:	460d      	mov	r5, r1
 8016d66:	4628      	mov	r0, r5
 8016d68:	f815 4b01 	ldrb.w	r4, [r5], #1
 8016d6c:	5d3e      	ldrb	r6, [r7, r4]
 8016d6e:	f016 0608 	ands.w	r6, r6, #8
 8016d72:	d1f8      	bne.n	8016d66 <_strtoul_l.constprop.0+0xa>
 8016d74:	2c2d      	cmp	r4, #45	; 0x2d
 8016d76:	d130      	bne.n	8016dda <_strtoul_l.constprop.0+0x7e>
 8016d78:	782c      	ldrb	r4, [r5, #0]
 8016d7a:	2601      	movs	r6, #1
 8016d7c:	1c85      	adds	r5, r0, #2
 8016d7e:	2b00      	cmp	r3, #0
 8016d80:	d057      	beq.n	8016e32 <_strtoul_l.constprop.0+0xd6>
 8016d82:	2b10      	cmp	r3, #16
 8016d84:	d109      	bne.n	8016d9a <_strtoul_l.constprop.0+0x3e>
 8016d86:	2c30      	cmp	r4, #48	; 0x30
 8016d88:	d107      	bne.n	8016d9a <_strtoul_l.constprop.0+0x3e>
 8016d8a:	7828      	ldrb	r0, [r5, #0]
 8016d8c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8016d90:	2858      	cmp	r0, #88	; 0x58
 8016d92:	d149      	bne.n	8016e28 <_strtoul_l.constprop.0+0xcc>
 8016d94:	786c      	ldrb	r4, [r5, #1]
 8016d96:	2310      	movs	r3, #16
 8016d98:	3502      	adds	r5, #2
 8016d9a:	f04f 38ff 	mov.w	r8, #4294967295
 8016d9e:	2700      	movs	r7, #0
 8016da0:	fbb8 f8f3 	udiv	r8, r8, r3
 8016da4:	fb03 f908 	mul.w	r9, r3, r8
 8016da8:	ea6f 0909 	mvn.w	r9, r9
 8016dac:	4638      	mov	r0, r7
 8016dae:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8016db2:	f1bc 0f09 	cmp.w	ip, #9
 8016db6:	d815      	bhi.n	8016de4 <_strtoul_l.constprop.0+0x88>
 8016db8:	4664      	mov	r4, ip
 8016dba:	42a3      	cmp	r3, r4
 8016dbc:	dd23      	ble.n	8016e06 <_strtoul_l.constprop.0+0xaa>
 8016dbe:	f1b7 3fff 	cmp.w	r7, #4294967295
 8016dc2:	d007      	beq.n	8016dd4 <_strtoul_l.constprop.0+0x78>
 8016dc4:	4580      	cmp	r8, r0
 8016dc6:	d31b      	bcc.n	8016e00 <_strtoul_l.constprop.0+0xa4>
 8016dc8:	d101      	bne.n	8016dce <_strtoul_l.constprop.0+0x72>
 8016dca:	45a1      	cmp	r9, r4
 8016dcc:	db18      	blt.n	8016e00 <_strtoul_l.constprop.0+0xa4>
 8016dce:	fb00 4003 	mla	r0, r0, r3, r4
 8016dd2:	2701      	movs	r7, #1
 8016dd4:	f815 4b01 	ldrb.w	r4, [r5], #1
 8016dd8:	e7e9      	b.n	8016dae <_strtoul_l.constprop.0+0x52>
 8016dda:	2c2b      	cmp	r4, #43	; 0x2b
 8016ddc:	bf04      	itt	eq
 8016dde:	782c      	ldrbeq	r4, [r5, #0]
 8016de0:	1c85      	addeq	r5, r0, #2
 8016de2:	e7cc      	b.n	8016d7e <_strtoul_l.constprop.0+0x22>
 8016de4:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8016de8:	f1bc 0f19 	cmp.w	ip, #25
 8016dec:	d801      	bhi.n	8016df2 <_strtoul_l.constprop.0+0x96>
 8016dee:	3c37      	subs	r4, #55	; 0x37
 8016df0:	e7e3      	b.n	8016dba <_strtoul_l.constprop.0+0x5e>
 8016df2:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8016df6:	f1bc 0f19 	cmp.w	ip, #25
 8016dfa:	d804      	bhi.n	8016e06 <_strtoul_l.constprop.0+0xaa>
 8016dfc:	3c57      	subs	r4, #87	; 0x57
 8016dfe:	e7dc      	b.n	8016dba <_strtoul_l.constprop.0+0x5e>
 8016e00:	f04f 37ff 	mov.w	r7, #4294967295
 8016e04:	e7e6      	b.n	8016dd4 <_strtoul_l.constprop.0+0x78>
 8016e06:	1c7b      	adds	r3, r7, #1
 8016e08:	d106      	bne.n	8016e18 <_strtoul_l.constprop.0+0xbc>
 8016e0a:	2322      	movs	r3, #34	; 0x22
 8016e0c:	f8ce 3000 	str.w	r3, [lr]
 8016e10:	4638      	mov	r0, r7
 8016e12:	b932      	cbnz	r2, 8016e22 <_strtoul_l.constprop.0+0xc6>
 8016e14:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016e18:	b106      	cbz	r6, 8016e1c <_strtoul_l.constprop.0+0xc0>
 8016e1a:	4240      	negs	r0, r0
 8016e1c:	2a00      	cmp	r2, #0
 8016e1e:	d0f9      	beq.n	8016e14 <_strtoul_l.constprop.0+0xb8>
 8016e20:	b107      	cbz	r7, 8016e24 <_strtoul_l.constprop.0+0xc8>
 8016e22:	1e69      	subs	r1, r5, #1
 8016e24:	6011      	str	r1, [r2, #0]
 8016e26:	e7f5      	b.n	8016e14 <_strtoul_l.constprop.0+0xb8>
 8016e28:	2430      	movs	r4, #48	; 0x30
 8016e2a:	2b00      	cmp	r3, #0
 8016e2c:	d1b5      	bne.n	8016d9a <_strtoul_l.constprop.0+0x3e>
 8016e2e:	2308      	movs	r3, #8
 8016e30:	e7b3      	b.n	8016d9a <_strtoul_l.constprop.0+0x3e>
 8016e32:	2c30      	cmp	r4, #48	; 0x30
 8016e34:	d0a9      	beq.n	8016d8a <_strtoul_l.constprop.0+0x2e>
 8016e36:	230a      	movs	r3, #10
 8016e38:	e7af      	b.n	8016d9a <_strtoul_l.constprop.0+0x3e>
 8016e3a:	bf00      	nop
 8016e3c:	08025e49 	.word	0x08025e49

08016e40 <strtoul>:
 8016e40:	4613      	mov	r3, r2
 8016e42:	460a      	mov	r2, r1
 8016e44:	4601      	mov	r1, r0
 8016e46:	4802      	ldr	r0, [pc, #8]	; (8016e50 <strtoul+0x10>)
 8016e48:	6800      	ldr	r0, [r0, #0]
 8016e4a:	f7ff bf87 	b.w	8016d5c <_strtoul_l.constprop.0>
 8016e4e:	bf00      	nop
 8016e50:	20000364 	.word	0x20000364

08016e54 <std>:
 8016e54:	2300      	movs	r3, #0
 8016e56:	b510      	push	{r4, lr}
 8016e58:	4604      	mov	r4, r0
 8016e5a:	e9c0 3300 	strd	r3, r3, [r0]
 8016e5e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8016e62:	6083      	str	r3, [r0, #8]
 8016e64:	8181      	strh	r1, [r0, #12]
 8016e66:	6643      	str	r3, [r0, #100]	; 0x64
 8016e68:	81c2      	strh	r2, [r0, #14]
 8016e6a:	6183      	str	r3, [r0, #24]
 8016e6c:	4619      	mov	r1, r3
 8016e6e:	2208      	movs	r2, #8
 8016e70:	305c      	adds	r0, #92	; 0x5c
 8016e72:	f000 f92d 	bl	80170d0 <memset>
 8016e76:	4b0d      	ldr	r3, [pc, #52]	; (8016eac <std+0x58>)
 8016e78:	6263      	str	r3, [r4, #36]	; 0x24
 8016e7a:	4b0d      	ldr	r3, [pc, #52]	; (8016eb0 <std+0x5c>)
 8016e7c:	62a3      	str	r3, [r4, #40]	; 0x28
 8016e7e:	4b0d      	ldr	r3, [pc, #52]	; (8016eb4 <std+0x60>)
 8016e80:	62e3      	str	r3, [r4, #44]	; 0x2c
 8016e82:	4b0d      	ldr	r3, [pc, #52]	; (8016eb8 <std+0x64>)
 8016e84:	6323      	str	r3, [r4, #48]	; 0x30
 8016e86:	4b0d      	ldr	r3, [pc, #52]	; (8016ebc <std+0x68>)
 8016e88:	6224      	str	r4, [r4, #32]
 8016e8a:	429c      	cmp	r4, r3
 8016e8c:	d006      	beq.n	8016e9c <std+0x48>
 8016e8e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8016e92:	4294      	cmp	r4, r2
 8016e94:	d002      	beq.n	8016e9c <std+0x48>
 8016e96:	33d0      	adds	r3, #208	; 0xd0
 8016e98:	429c      	cmp	r4, r3
 8016e9a:	d105      	bne.n	8016ea8 <std+0x54>
 8016e9c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8016ea0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016ea4:	f000 b9da 	b.w	801725c <__retarget_lock_init_recursive>
 8016ea8:	bd10      	pop	{r4, pc}
 8016eaa:	bf00      	nop
 8016eac:	08016fd9 	.word	0x08016fd9
 8016eb0:	08016ffb 	.word	0x08016ffb
 8016eb4:	08017033 	.word	0x08017033
 8016eb8:	08017057 	.word	0x08017057
 8016ebc:	20006fa0 	.word	0x20006fa0

08016ec0 <stdio_exit_handler>:
 8016ec0:	4a02      	ldr	r2, [pc, #8]	; (8016ecc <stdio_exit_handler+0xc>)
 8016ec2:	4903      	ldr	r1, [pc, #12]	; (8016ed0 <stdio_exit_handler+0x10>)
 8016ec4:	4803      	ldr	r0, [pc, #12]	; (8016ed4 <stdio_exit_handler+0x14>)
 8016ec6:	f000 b869 	b.w	8016f9c <_fwalk_sglue>
 8016eca:	bf00      	nop
 8016ecc:	200001a0 	.word	0x200001a0
 8016ed0:	08018a69 	.word	0x08018a69
 8016ed4:	20000318 	.word	0x20000318

08016ed8 <cleanup_stdio>:
 8016ed8:	6841      	ldr	r1, [r0, #4]
 8016eda:	4b0c      	ldr	r3, [pc, #48]	; (8016f0c <cleanup_stdio+0x34>)
 8016edc:	4299      	cmp	r1, r3
 8016ede:	b510      	push	{r4, lr}
 8016ee0:	4604      	mov	r4, r0
 8016ee2:	d001      	beq.n	8016ee8 <cleanup_stdio+0x10>
 8016ee4:	f001 fdc0 	bl	8018a68 <_fflush_r>
 8016ee8:	68a1      	ldr	r1, [r4, #8]
 8016eea:	4b09      	ldr	r3, [pc, #36]	; (8016f10 <cleanup_stdio+0x38>)
 8016eec:	4299      	cmp	r1, r3
 8016eee:	d002      	beq.n	8016ef6 <cleanup_stdio+0x1e>
 8016ef0:	4620      	mov	r0, r4
 8016ef2:	f001 fdb9 	bl	8018a68 <_fflush_r>
 8016ef6:	68e1      	ldr	r1, [r4, #12]
 8016ef8:	4b06      	ldr	r3, [pc, #24]	; (8016f14 <cleanup_stdio+0x3c>)
 8016efa:	4299      	cmp	r1, r3
 8016efc:	d004      	beq.n	8016f08 <cleanup_stdio+0x30>
 8016efe:	4620      	mov	r0, r4
 8016f00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016f04:	f001 bdb0 	b.w	8018a68 <_fflush_r>
 8016f08:	bd10      	pop	{r4, pc}
 8016f0a:	bf00      	nop
 8016f0c:	20006fa0 	.word	0x20006fa0
 8016f10:	20007008 	.word	0x20007008
 8016f14:	20007070 	.word	0x20007070

08016f18 <global_stdio_init.part.0>:
 8016f18:	b510      	push	{r4, lr}
 8016f1a:	4b0b      	ldr	r3, [pc, #44]	; (8016f48 <global_stdio_init.part.0+0x30>)
 8016f1c:	4c0b      	ldr	r4, [pc, #44]	; (8016f4c <global_stdio_init.part.0+0x34>)
 8016f1e:	4a0c      	ldr	r2, [pc, #48]	; (8016f50 <global_stdio_init.part.0+0x38>)
 8016f20:	601a      	str	r2, [r3, #0]
 8016f22:	4620      	mov	r0, r4
 8016f24:	2200      	movs	r2, #0
 8016f26:	2104      	movs	r1, #4
 8016f28:	f7ff ff94 	bl	8016e54 <std>
 8016f2c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8016f30:	2201      	movs	r2, #1
 8016f32:	2109      	movs	r1, #9
 8016f34:	f7ff ff8e 	bl	8016e54 <std>
 8016f38:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8016f3c:	2202      	movs	r2, #2
 8016f3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016f42:	2112      	movs	r1, #18
 8016f44:	f7ff bf86 	b.w	8016e54 <std>
 8016f48:	200070d8 	.word	0x200070d8
 8016f4c:	20006fa0 	.word	0x20006fa0
 8016f50:	08016ec1 	.word	0x08016ec1

08016f54 <__sfp_lock_acquire>:
 8016f54:	4801      	ldr	r0, [pc, #4]	; (8016f5c <__sfp_lock_acquire+0x8>)
 8016f56:	f000 b982 	b.w	801725e <__retarget_lock_acquire_recursive>
 8016f5a:	bf00      	nop
 8016f5c:	200070e1 	.word	0x200070e1

08016f60 <__sfp_lock_release>:
 8016f60:	4801      	ldr	r0, [pc, #4]	; (8016f68 <__sfp_lock_release+0x8>)
 8016f62:	f000 b97d 	b.w	8017260 <__retarget_lock_release_recursive>
 8016f66:	bf00      	nop
 8016f68:	200070e1 	.word	0x200070e1

08016f6c <__sinit>:
 8016f6c:	b510      	push	{r4, lr}
 8016f6e:	4604      	mov	r4, r0
 8016f70:	f7ff fff0 	bl	8016f54 <__sfp_lock_acquire>
 8016f74:	6a23      	ldr	r3, [r4, #32]
 8016f76:	b11b      	cbz	r3, 8016f80 <__sinit+0x14>
 8016f78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016f7c:	f7ff bff0 	b.w	8016f60 <__sfp_lock_release>
 8016f80:	4b04      	ldr	r3, [pc, #16]	; (8016f94 <__sinit+0x28>)
 8016f82:	6223      	str	r3, [r4, #32]
 8016f84:	4b04      	ldr	r3, [pc, #16]	; (8016f98 <__sinit+0x2c>)
 8016f86:	681b      	ldr	r3, [r3, #0]
 8016f88:	2b00      	cmp	r3, #0
 8016f8a:	d1f5      	bne.n	8016f78 <__sinit+0xc>
 8016f8c:	f7ff ffc4 	bl	8016f18 <global_stdio_init.part.0>
 8016f90:	e7f2      	b.n	8016f78 <__sinit+0xc>
 8016f92:	bf00      	nop
 8016f94:	08016ed9 	.word	0x08016ed9
 8016f98:	200070d8 	.word	0x200070d8

08016f9c <_fwalk_sglue>:
 8016f9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016fa0:	4607      	mov	r7, r0
 8016fa2:	4688      	mov	r8, r1
 8016fa4:	4614      	mov	r4, r2
 8016fa6:	2600      	movs	r6, #0
 8016fa8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8016fac:	f1b9 0901 	subs.w	r9, r9, #1
 8016fb0:	d505      	bpl.n	8016fbe <_fwalk_sglue+0x22>
 8016fb2:	6824      	ldr	r4, [r4, #0]
 8016fb4:	2c00      	cmp	r4, #0
 8016fb6:	d1f7      	bne.n	8016fa8 <_fwalk_sglue+0xc>
 8016fb8:	4630      	mov	r0, r6
 8016fba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016fbe:	89ab      	ldrh	r3, [r5, #12]
 8016fc0:	2b01      	cmp	r3, #1
 8016fc2:	d907      	bls.n	8016fd4 <_fwalk_sglue+0x38>
 8016fc4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8016fc8:	3301      	adds	r3, #1
 8016fca:	d003      	beq.n	8016fd4 <_fwalk_sglue+0x38>
 8016fcc:	4629      	mov	r1, r5
 8016fce:	4638      	mov	r0, r7
 8016fd0:	47c0      	blx	r8
 8016fd2:	4306      	orrs	r6, r0
 8016fd4:	3568      	adds	r5, #104	; 0x68
 8016fd6:	e7e9      	b.n	8016fac <_fwalk_sglue+0x10>

08016fd8 <__sread>:
 8016fd8:	b510      	push	{r4, lr}
 8016fda:	460c      	mov	r4, r1
 8016fdc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016fe0:	f000 f8de 	bl	80171a0 <_read_r>
 8016fe4:	2800      	cmp	r0, #0
 8016fe6:	bfab      	itete	ge
 8016fe8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8016fea:	89a3      	ldrhlt	r3, [r4, #12]
 8016fec:	181b      	addge	r3, r3, r0
 8016fee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8016ff2:	bfac      	ite	ge
 8016ff4:	6563      	strge	r3, [r4, #84]	; 0x54
 8016ff6:	81a3      	strhlt	r3, [r4, #12]
 8016ff8:	bd10      	pop	{r4, pc}

08016ffa <__swrite>:
 8016ffa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016ffe:	461f      	mov	r7, r3
 8017000:	898b      	ldrh	r3, [r1, #12]
 8017002:	05db      	lsls	r3, r3, #23
 8017004:	4605      	mov	r5, r0
 8017006:	460c      	mov	r4, r1
 8017008:	4616      	mov	r6, r2
 801700a:	d505      	bpl.n	8017018 <__swrite+0x1e>
 801700c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017010:	2302      	movs	r3, #2
 8017012:	2200      	movs	r2, #0
 8017014:	f000 f8b2 	bl	801717c <_lseek_r>
 8017018:	89a3      	ldrh	r3, [r4, #12]
 801701a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801701e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8017022:	81a3      	strh	r3, [r4, #12]
 8017024:	4632      	mov	r2, r6
 8017026:	463b      	mov	r3, r7
 8017028:	4628      	mov	r0, r5
 801702a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801702e:	f000 b8d9 	b.w	80171e4 <_write_r>

08017032 <__sseek>:
 8017032:	b510      	push	{r4, lr}
 8017034:	460c      	mov	r4, r1
 8017036:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801703a:	f000 f89f 	bl	801717c <_lseek_r>
 801703e:	1c43      	adds	r3, r0, #1
 8017040:	89a3      	ldrh	r3, [r4, #12]
 8017042:	bf15      	itete	ne
 8017044:	6560      	strne	r0, [r4, #84]	; 0x54
 8017046:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801704a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801704e:	81a3      	strheq	r3, [r4, #12]
 8017050:	bf18      	it	ne
 8017052:	81a3      	strhne	r3, [r4, #12]
 8017054:	bd10      	pop	{r4, pc}

08017056 <__sclose>:
 8017056:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801705a:	f000 b87f 	b.w	801715c <_close_r>

0801705e <_vsniprintf_r>:
 801705e:	b530      	push	{r4, r5, lr}
 8017060:	4614      	mov	r4, r2
 8017062:	2c00      	cmp	r4, #0
 8017064:	b09b      	sub	sp, #108	; 0x6c
 8017066:	4605      	mov	r5, r0
 8017068:	461a      	mov	r2, r3
 801706a:	da05      	bge.n	8017078 <_vsniprintf_r+0x1a>
 801706c:	238b      	movs	r3, #139	; 0x8b
 801706e:	6003      	str	r3, [r0, #0]
 8017070:	f04f 30ff 	mov.w	r0, #4294967295
 8017074:	b01b      	add	sp, #108	; 0x6c
 8017076:	bd30      	pop	{r4, r5, pc}
 8017078:	f44f 7302 	mov.w	r3, #520	; 0x208
 801707c:	f8ad 300c 	strh.w	r3, [sp, #12]
 8017080:	bf14      	ite	ne
 8017082:	f104 33ff 	addne.w	r3, r4, #4294967295
 8017086:	4623      	moveq	r3, r4
 8017088:	9302      	str	r3, [sp, #8]
 801708a:	9305      	str	r3, [sp, #20]
 801708c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017090:	9100      	str	r1, [sp, #0]
 8017092:	9104      	str	r1, [sp, #16]
 8017094:	f8ad 300e 	strh.w	r3, [sp, #14]
 8017098:	4669      	mov	r1, sp
 801709a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801709c:	f001 f9d0 	bl	8018440 <_svfiprintf_r>
 80170a0:	1c43      	adds	r3, r0, #1
 80170a2:	bfbc      	itt	lt
 80170a4:	238b      	movlt	r3, #139	; 0x8b
 80170a6:	602b      	strlt	r3, [r5, #0]
 80170a8:	2c00      	cmp	r4, #0
 80170aa:	d0e3      	beq.n	8017074 <_vsniprintf_r+0x16>
 80170ac:	9b00      	ldr	r3, [sp, #0]
 80170ae:	2200      	movs	r2, #0
 80170b0:	701a      	strb	r2, [r3, #0]
 80170b2:	e7df      	b.n	8017074 <_vsniprintf_r+0x16>

080170b4 <vsniprintf>:
 80170b4:	b507      	push	{r0, r1, r2, lr}
 80170b6:	9300      	str	r3, [sp, #0]
 80170b8:	4613      	mov	r3, r2
 80170ba:	460a      	mov	r2, r1
 80170bc:	4601      	mov	r1, r0
 80170be:	4803      	ldr	r0, [pc, #12]	; (80170cc <vsniprintf+0x18>)
 80170c0:	6800      	ldr	r0, [r0, #0]
 80170c2:	f7ff ffcc 	bl	801705e <_vsniprintf_r>
 80170c6:	b003      	add	sp, #12
 80170c8:	f85d fb04 	ldr.w	pc, [sp], #4
 80170cc:	20000364 	.word	0x20000364

080170d0 <memset>:
 80170d0:	4402      	add	r2, r0
 80170d2:	4603      	mov	r3, r0
 80170d4:	4293      	cmp	r3, r2
 80170d6:	d100      	bne.n	80170da <memset+0xa>
 80170d8:	4770      	bx	lr
 80170da:	f803 1b01 	strb.w	r1, [r3], #1
 80170de:	e7f9      	b.n	80170d4 <memset+0x4>

080170e0 <strncmp>:
 80170e0:	b510      	push	{r4, lr}
 80170e2:	b16a      	cbz	r2, 8017100 <strncmp+0x20>
 80170e4:	3901      	subs	r1, #1
 80170e6:	1884      	adds	r4, r0, r2
 80170e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80170ec:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80170f0:	429a      	cmp	r2, r3
 80170f2:	d103      	bne.n	80170fc <strncmp+0x1c>
 80170f4:	42a0      	cmp	r0, r4
 80170f6:	d001      	beq.n	80170fc <strncmp+0x1c>
 80170f8:	2a00      	cmp	r2, #0
 80170fa:	d1f5      	bne.n	80170e8 <strncmp+0x8>
 80170fc:	1ad0      	subs	r0, r2, r3
 80170fe:	bd10      	pop	{r4, pc}
 8017100:	4610      	mov	r0, r2
 8017102:	e7fc      	b.n	80170fe <strncmp+0x1e>

08017104 <__strtok_r>:
 8017104:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017106:	b908      	cbnz	r0, 801710c <__strtok_r+0x8>
 8017108:	6810      	ldr	r0, [r2, #0]
 801710a:	b188      	cbz	r0, 8017130 <__strtok_r+0x2c>
 801710c:	4604      	mov	r4, r0
 801710e:	4620      	mov	r0, r4
 8017110:	f814 5b01 	ldrb.w	r5, [r4], #1
 8017114:	460f      	mov	r7, r1
 8017116:	f817 6b01 	ldrb.w	r6, [r7], #1
 801711a:	b91e      	cbnz	r6, 8017124 <__strtok_r+0x20>
 801711c:	b965      	cbnz	r5, 8017138 <__strtok_r+0x34>
 801711e:	6015      	str	r5, [r2, #0]
 8017120:	4628      	mov	r0, r5
 8017122:	e005      	b.n	8017130 <__strtok_r+0x2c>
 8017124:	42b5      	cmp	r5, r6
 8017126:	d1f6      	bne.n	8017116 <__strtok_r+0x12>
 8017128:	2b00      	cmp	r3, #0
 801712a:	d1f0      	bne.n	801710e <__strtok_r+0xa>
 801712c:	6014      	str	r4, [r2, #0]
 801712e:	7003      	strb	r3, [r0, #0]
 8017130:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017132:	461c      	mov	r4, r3
 8017134:	e00c      	b.n	8017150 <__strtok_r+0x4c>
 8017136:	b915      	cbnz	r5, 801713e <__strtok_r+0x3a>
 8017138:	f814 3b01 	ldrb.w	r3, [r4], #1
 801713c:	460e      	mov	r6, r1
 801713e:	f816 5b01 	ldrb.w	r5, [r6], #1
 8017142:	42ab      	cmp	r3, r5
 8017144:	d1f7      	bne.n	8017136 <__strtok_r+0x32>
 8017146:	2b00      	cmp	r3, #0
 8017148:	d0f3      	beq.n	8017132 <__strtok_r+0x2e>
 801714a:	2300      	movs	r3, #0
 801714c:	f804 3c01 	strb.w	r3, [r4, #-1]
 8017150:	6014      	str	r4, [r2, #0]
 8017152:	e7ed      	b.n	8017130 <__strtok_r+0x2c>

08017154 <strtok_r>:
 8017154:	2301      	movs	r3, #1
 8017156:	f7ff bfd5 	b.w	8017104 <__strtok_r>
	...

0801715c <_close_r>:
 801715c:	b538      	push	{r3, r4, r5, lr}
 801715e:	4d06      	ldr	r5, [pc, #24]	; (8017178 <_close_r+0x1c>)
 8017160:	2300      	movs	r3, #0
 8017162:	4604      	mov	r4, r0
 8017164:	4608      	mov	r0, r1
 8017166:	602b      	str	r3, [r5, #0]
 8017168:	f7ea fb6f 	bl	800184a <_close>
 801716c:	1c43      	adds	r3, r0, #1
 801716e:	d102      	bne.n	8017176 <_close_r+0x1a>
 8017170:	682b      	ldr	r3, [r5, #0]
 8017172:	b103      	cbz	r3, 8017176 <_close_r+0x1a>
 8017174:	6023      	str	r3, [r4, #0]
 8017176:	bd38      	pop	{r3, r4, r5, pc}
 8017178:	200070dc 	.word	0x200070dc

0801717c <_lseek_r>:
 801717c:	b538      	push	{r3, r4, r5, lr}
 801717e:	4d07      	ldr	r5, [pc, #28]	; (801719c <_lseek_r+0x20>)
 8017180:	4604      	mov	r4, r0
 8017182:	4608      	mov	r0, r1
 8017184:	4611      	mov	r1, r2
 8017186:	2200      	movs	r2, #0
 8017188:	602a      	str	r2, [r5, #0]
 801718a:	461a      	mov	r2, r3
 801718c:	f7ea fb84 	bl	8001898 <_lseek>
 8017190:	1c43      	adds	r3, r0, #1
 8017192:	d102      	bne.n	801719a <_lseek_r+0x1e>
 8017194:	682b      	ldr	r3, [r5, #0]
 8017196:	b103      	cbz	r3, 801719a <_lseek_r+0x1e>
 8017198:	6023      	str	r3, [r4, #0]
 801719a:	bd38      	pop	{r3, r4, r5, pc}
 801719c:	200070dc 	.word	0x200070dc

080171a0 <_read_r>:
 80171a0:	b538      	push	{r3, r4, r5, lr}
 80171a2:	4d07      	ldr	r5, [pc, #28]	; (80171c0 <_read_r+0x20>)
 80171a4:	4604      	mov	r4, r0
 80171a6:	4608      	mov	r0, r1
 80171a8:	4611      	mov	r1, r2
 80171aa:	2200      	movs	r2, #0
 80171ac:	602a      	str	r2, [r5, #0]
 80171ae:	461a      	mov	r2, r3
 80171b0:	f7ea fb12 	bl	80017d8 <_read>
 80171b4:	1c43      	adds	r3, r0, #1
 80171b6:	d102      	bne.n	80171be <_read_r+0x1e>
 80171b8:	682b      	ldr	r3, [r5, #0]
 80171ba:	b103      	cbz	r3, 80171be <_read_r+0x1e>
 80171bc:	6023      	str	r3, [r4, #0]
 80171be:	bd38      	pop	{r3, r4, r5, pc}
 80171c0:	200070dc 	.word	0x200070dc

080171c4 <_sbrk_r>:
 80171c4:	b538      	push	{r3, r4, r5, lr}
 80171c6:	4d06      	ldr	r5, [pc, #24]	; (80171e0 <_sbrk_r+0x1c>)
 80171c8:	2300      	movs	r3, #0
 80171ca:	4604      	mov	r4, r0
 80171cc:	4608      	mov	r0, r1
 80171ce:	602b      	str	r3, [r5, #0]
 80171d0:	f7ea fb70 	bl	80018b4 <_sbrk>
 80171d4:	1c43      	adds	r3, r0, #1
 80171d6:	d102      	bne.n	80171de <_sbrk_r+0x1a>
 80171d8:	682b      	ldr	r3, [r5, #0]
 80171da:	b103      	cbz	r3, 80171de <_sbrk_r+0x1a>
 80171dc:	6023      	str	r3, [r4, #0]
 80171de:	bd38      	pop	{r3, r4, r5, pc}
 80171e0:	200070dc 	.word	0x200070dc

080171e4 <_write_r>:
 80171e4:	b538      	push	{r3, r4, r5, lr}
 80171e6:	4d07      	ldr	r5, [pc, #28]	; (8017204 <_write_r+0x20>)
 80171e8:	4604      	mov	r4, r0
 80171ea:	4608      	mov	r0, r1
 80171ec:	4611      	mov	r1, r2
 80171ee:	2200      	movs	r2, #0
 80171f0:	602a      	str	r2, [r5, #0]
 80171f2:	461a      	mov	r2, r3
 80171f4:	f7ea fb0d 	bl	8001812 <_write>
 80171f8:	1c43      	adds	r3, r0, #1
 80171fa:	d102      	bne.n	8017202 <_write_r+0x1e>
 80171fc:	682b      	ldr	r3, [r5, #0]
 80171fe:	b103      	cbz	r3, 8017202 <_write_r+0x1e>
 8017200:	6023      	str	r3, [r4, #0]
 8017202:	bd38      	pop	{r3, r4, r5, pc}
 8017204:	200070dc 	.word	0x200070dc

08017208 <__errno>:
 8017208:	4b01      	ldr	r3, [pc, #4]	; (8017210 <__errno+0x8>)
 801720a:	6818      	ldr	r0, [r3, #0]
 801720c:	4770      	bx	lr
 801720e:	bf00      	nop
 8017210:	20000364 	.word	0x20000364

08017214 <__libc_init_array>:
 8017214:	b570      	push	{r4, r5, r6, lr}
 8017216:	4d0d      	ldr	r5, [pc, #52]	; (801724c <__libc_init_array+0x38>)
 8017218:	4c0d      	ldr	r4, [pc, #52]	; (8017250 <__libc_init_array+0x3c>)
 801721a:	1b64      	subs	r4, r4, r5
 801721c:	10a4      	asrs	r4, r4, #2
 801721e:	2600      	movs	r6, #0
 8017220:	42a6      	cmp	r6, r4
 8017222:	d109      	bne.n	8017238 <__libc_init_array+0x24>
 8017224:	4d0b      	ldr	r5, [pc, #44]	; (8017254 <__libc_init_array+0x40>)
 8017226:	4c0c      	ldr	r4, [pc, #48]	; (8017258 <__libc_init_array+0x44>)
 8017228:	f001 ff86 	bl	8019138 <_init>
 801722c:	1b64      	subs	r4, r4, r5
 801722e:	10a4      	asrs	r4, r4, #2
 8017230:	2600      	movs	r6, #0
 8017232:	42a6      	cmp	r6, r4
 8017234:	d105      	bne.n	8017242 <__libc_init_array+0x2e>
 8017236:	bd70      	pop	{r4, r5, r6, pc}
 8017238:	f855 3b04 	ldr.w	r3, [r5], #4
 801723c:	4798      	blx	r3
 801723e:	3601      	adds	r6, #1
 8017240:	e7ee      	b.n	8017220 <__libc_init_array+0xc>
 8017242:	f855 3b04 	ldr.w	r3, [r5], #4
 8017246:	4798      	blx	r3
 8017248:	3601      	adds	r6, #1
 801724a:	e7f2      	b.n	8017232 <__libc_init_array+0x1e>
 801724c:	080261ac 	.word	0x080261ac
 8017250:	080261ac 	.word	0x080261ac
 8017254:	080261ac 	.word	0x080261ac
 8017258:	080261b0 	.word	0x080261b0

0801725c <__retarget_lock_init_recursive>:
 801725c:	4770      	bx	lr

0801725e <__retarget_lock_acquire_recursive>:
 801725e:	4770      	bx	lr

08017260 <__retarget_lock_release_recursive>:
 8017260:	4770      	bx	lr

08017262 <strcpy>:
 8017262:	4603      	mov	r3, r0
 8017264:	f811 2b01 	ldrb.w	r2, [r1], #1
 8017268:	f803 2b01 	strb.w	r2, [r3], #1
 801726c:	2a00      	cmp	r2, #0
 801726e:	d1f9      	bne.n	8017264 <strcpy+0x2>
 8017270:	4770      	bx	lr

08017272 <memcpy>:
 8017272:	440a      	add	r2, r1
 8017274:	4291      	cmp	r1, r2
 8017276:	f100 33ff 	add.w	r3, r0, #4294967295
 801727a:	d100      	bne.n	801727e <memcpy+0xc>
 801727c:	4770      	bx	lr
 801727e:	b510      	push	{r4, lr}
 8017280:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017284:	f803 4f01 	strb.w	r4, [r3, #1]!
 8017288:	4291      	cmp	r1, r2
 801728a:	d1f9      	bne.n	8017280 <memcpy+0xe>
 801728c:	bd10      	pop	{r4, pc}
	...

08017290 <nan>:
 8017290:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8017298 <nan+0x8>
 8017294:	4770      	bx	lr
 8017296:	bf00      	nop
 8017298:	00000000 	.word	0x00000000
 801729c:	7ff80000 	.word	0x7ff80000

080172a0 <nanf>:
 80172a0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80172a8 <nanf+0x8>
 80172a4:	4770      	bx	lr
 80172a6:	bf00      	nop
 80172a8:	7fc00000 	.word	0x7fc00000

080172ac <_free_r>:
 80172ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80172ae:	2900      	cmp	r1, #0
 80172b0:	d044      	beq.n	801733c <_free_r+0x90>
 80172b2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80172b6:	9001      	str	r0, [sp, #4]
 80172b8:	2b00      	cmp	r3, #0
 80172ba:	f1a1 0404 	sub.w	r4, r1, #4
 80172be:	bfb8      	it	lt
 80172c0:	18e4      	addlt	r4, r4, r3
 80172c2:	f7fe fecb 	bl	801605c <__malloc_lock>
 80172c6:	4a1e      	ldr	r2, [pc, #120]	; (8017340 <_free_r+0x94>)
 80172c8:	9801      	ldr	r0, [sp, #4]
 80172ca:	6813      	ldr	r3, [r2, #0]
 80172cc:	b933      	cbnz	r3, 80172dc <_free_r+0x30>
 80172ce:	6063      	str	r3, [r4, #4]
 80172d0:	6014      	str	r4, [r2, #0]
 80172d2:	b003      	add	sp, #12
 80172d4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80172d8:	f7fe bec6 	b.w	8016068 <__malloc_unlock>
 80172dc:	42a3      	cmp	r3, r4
 80172de:	d908      	bls.n	80172f2 <_free_r+0x46>
 80172e0:	6825      	ldr	r5, [r4, #0]
 80172e2:	1961      	adds	r1, r4, r5
 80172e4:	428b      	cmp	r3, r1
 80172e6:	bf01      	itttt	eq
 80172e8:	6819      	ldreq	r1, [r3, #0]
 80172ea:	685b      	ldreq	r3, [r3, #4]
 80172ec:	1949      	addeq	r1, r1, r5
 80172ee:	6021      	streq	r1, [r4, #0]
 80172f0:	e7ed      	b.n	80172ce <_free_r+0x22>
 80172f2:	461a      	mov	r2, r3
 80172f4:	685b      	ldr	r3, [r3, #4]
 80172f6:	b10b      	cbz	r3, 80172fc <_free_r+0x50>
 80172f8:	42a3      	cmp	r3, r4
 80172fa:	d9fa      	bls.n	80172f2 <_free_r+0x46>
 80172fc:	6811      	ldr	r1, [r2, #0]
 80172fe:	1855      	adds	r5, r2, r1
 8017300:	42a5      	cmp	r5, r4
 8017302:	d10b      	bne.n	801731c <_free_r+0x70>
 8017304:	6824      	ldr	r4, [r4, #0]
 8017306:	4421      	add	r1, r4
 8017308:	1854      	adds	r4, r2, r1
 801730a:	42a3      	cmp	r3, r4
 801730c:	6011      	str	r1, [r2, #0]
 801730e:	d1e0      	bne.n	80172d2 <_free_r+0x26>
 8017310:	681c      	ldr	r4, [r3, #0]
 8017312:	685b      	ldr	r3, [r3, #4]
 8017314:	6053      	str	r3, [r2, #4]
 8017316:	440c      	add	r4, r1
 8017318:	6014      	str	r4, [r2, #0]
 801731a:	e7da      	b.n	80172d2 <_free_r+0x26>
 801731c:	d902      	bls.n	8017324 <_free_r+0x78>
 801731e:	230c      	movs	r3, #12
 8017320:	6003      	str	r3, [r0, #0]
 8017322:	e7d6      	b.n	80172d2 <_free_r+0x26>
 8017324:	6825      	ldr	r5, [r4, #0]
 8017326:	1961      	adds	r1, r4, r5
 8017328:	428b      	cmp	r3, r1
 801732a:	bf04      	itt	eq
 801732c:	6819      	ldreq	r1, [r3, #0]
 801732e:	685b      	ldreq	r3, [r3, #4]
 8017330:	6063      	str	r3, [r4, #4]
 8017332:	bf04      	itt	eq
 8017334:	1949      	addeq	r1, r1, r5
 8017336:	6021      	streq	r1, [r4, #0]
 8017338:	6054      	str	r4, [r2, #4]
 801733a:	e7ca      	b.n	80172d2 <_free_r+0x26>
 801733c:	b003      	add	sp, #12
 801733e:	bd30      	pop	{r4, r5, pc}
 8017340:	20006f98 	.word	0x20006f98

08017344 <rshift>:
 8017344:	6903      	ldr	r3, [r0, #16]
 8017346:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801734a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801734e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8017352:	f100 0414 	add.w	r4, r0, #20
 8017356:	dd45      	ble.n	80173e4 <rshift+0xa0>
 8017358:	f011 011f 	ands.w	r1, r1, #31
 801735c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8017360:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8017364:	d10c      	bne.n	8017380 <rshift+0x3c>
 8017366:	f100 0710 	add.w	r7, r0, #16
 801736a:	4629      	mov	r1, r5
 801736c:	42b1      	cmp	r1, r6
 801736e:	d334      	bcc.n	80173da <rshift+0x96>
 8017370:	1a9b      	subs	r3, r3, r2
 8017372:	009b      	lsls	r3, r3, #2
 8017374:	1eea      	subs	r2, r5, #3
 8017376:	4296      	cmp	r6, r2
 8017378:	bf38      	it	cc
 801737a:	2300      	movcc	r3, #0
 801737c:	4423      	add	r3, r4
 801737e:	e015      	b.n	80173ac <rshift+0x68>
 8017380:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8017384:	f1c1 0820 	rsb	r8, r1, #32
 8017388:	40cf      	lsrs	r7, r1
 801738a:	f105 0e04 	add.w	lr, r5, #4
 801738e:	46a1      	mov	r9, r4
 8017390:	4576      	cmp	r6, lr
 8017392:	46f4      	mov	ip, lr
 8017394:	d815      	bhi.n	80173c2 <rshift+0x7e>
 8017396:	1a9a      	subs	r2, r3, r2
 8017398:	0092      	lsls	r2, r2, #2
 801739a:	3a04      	subs	r2, #4
 801739c:	3501      	adds	r5, #1
 801739e:	42ae      	cmp	r6, r5
 80173a0:	bf38      	it	cc
 80173a2:	2200      	movcc	r2, #0
 80173a4:	18a3      	adds	r3, r4, r2
 80173a6:	50a7      	str	r7, [r4, r2]
 80173a8:	b107      	cbz	r7, 80173ac <rshift+0x68>
 80173aa:	3304      	adds	r3, #4
 80173ac:	1b1a      	subs	r2, r3, r4
 80173ae:	42a3      	cmp	r3, r4
 80173b0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80173b4:	bf08      	it	eq
 80173b6:	2300      	moveq	r3, #0
 80173b8:	6102      	str	r2, [r0, #16]
 80173ba:	bf08      	it	eq
 80173bc:	6143      	streq	r3, [r0, #20]
 80173be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80173c2:	f8dc c000 	ldr.w	ip, [ip]
 80173c6:	fa0c fc08 	lsl.w	ip, ip, r8
 80173ca:	ea4c 0707 	orr.w	r7, ip, r7
 80173ce:	f849 7b04 	str.w	r7, [r9], #4
 80173d2:	f85e 7b04 	ldr.w	r7, [lr], #4
 80173d6:	40cf      	lsrs	r7, r1
 80173d8:	e7da      	b.n	8017390 <rshift+0x4c>
 80173da:	f851 cb04 	ldr.w	ip, [r1], #4
 80173de:	f847 cf04 	str.w	ip, [r7, #4]!
 80173e2:	e7c3      	b.n	801736c <rshift+0x28>
 80173e4:	4623      	mov	r3, r4
 80173e6:	e7e1      	b.n	80173ac <rshift+0x68>

080173e8 <__hexdig_fun>:
 80173e8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80173ec:	2b09      	cmp	r3, #9
 80173ee:	d802      	bhi.n	80173f6 <__hexdig_fun+0xe>
 80173f0:	3820      	subs	r0, #32
 80173f2:	b2c0      	uxtb	r0, r0
 80173f4:	4770      	bx	lr
 80173f6:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80173fa:	2b05      	cmp	r3, #5
 80173fc:	d801      	bhi.n	8017402 <__hexdig_fun+0x1a>
 80173fe:	3847      	subs	r0, #71	; 0x47
 8017400:	e7f7      	b.n	80173f2 <__hexdig_fun+0xa>
 8017402:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8017406:	2b05      	cmp	r3, #5
 8017408:	d801      	bhi.n	801740e <__hexdig_fun+0x26>
 801740a:	3827      	subs	r0, #39	; 0x27
 801740c:	e7f1      	b.n	80173f2 <__hexdig_fun+0xa>
 801740e:	2000      	movs	r0, #0
 8017410:	4770      	bx	lr
	...

08017414 <__gethex>:
 8017414:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017418:	4617      	mov	r7, r2
 801741a:	680a      	ldr	r2, [r1, #0]
 801741c:	b085      	sub	sp, #20
 801741e:	f102 0b02 	add.w	fp, r2, #2
 8017422:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8017426:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 801742a:	4681      	mov	r9, r0
 801742c:	468a      	mov	sl, r1
 801742e:	9302      	str	r3, [sp, #8]
 8017430:	32fe      	adds	r2, #254	; 0xfe
 8017432:	eb02 030b 	add.w	r3, r2, fp
 8017436:	46d8      	mov	r8, fp
 8017438:	f81b 0b01 	ldrb.w	r0, [fp], #1
 801743c:	9301      	str	r3, [sp, #4]
 801743e:	2830      	cmp	r0, #48	; 0x30
 8017440:	d0f7      	beq.n	8017432 <__gethex+0x1e>
 8017442:	f7ff ffd1 	bl	80173e8 <__hexdig_fun>
 8017446:	4604      	mov	r4, r0
 8017448:	2800      	cmp	r0, #0
 801744a:	d138      	bne.n	80174be <__gethex+0xaa>
 801744c:	49a7      	ldr	r1, [pc, #668]	; (80176ec <__gethex+0x2d8>)
 801744e:	2201      	movs	r2, #1
 8017450:	4640      	mov	r0, r8
 8017452:	f7ff fe45 	bl	80170e0 <strncmp>
 8017456:	4606      	mov	r6, r0
 8017458:	2800      	cmp	r0, #0
 801745a:	d169      	bne.n	8017530 <__gethex+0x11c>
 801745c:	f898 0001 	ldrb.w	r0, [r8, #1]
 8017460:	465d      	mov	r5, fp
 8017462:	f7ff ffc1 	bl	80173e8 <__hexdig_fun>
 8017466:	2800      	cmp	r0, #0
 8017468:	d064      	beq.n	8017534 <__gethex+0x120>
 801746a:	465a      	mov	r2, fp
 801746c:	7810      	ldrb	r0, [r2, #0]
 801746e:	2830      	cmp	r0, #48	; 0x30
 8017470:	4690      	mov	r8, r2
 8017472:	f102 0201 	add.w	r2, r2, #1
 8017476:	d0f9      	beq.n	801746c <__gethex+0x58>
 8017478:	f7ff ffb6 	bl	80173e8 <__hexdig_fun>
 801747c:	2301      	movs	r3, #1
 801747e:	fab0 f480 	clz	r4, r0
 8017482:	0964      	lsrs	r4, r4, #5
 8017484:	465e      	mov	r6, fp
 8017486:	9301      	str	r3, [sp, #4]
 8017488:	4642      	mov	r2, r8
 801748a:	4615      	mov	r5, r2
 801748c:	3201      	adds	r2, #1
 801748e:	7828      	ldrb	r0, [r5, #0]
 8017490:	f7ff ffaa 	bl	80173e8 <__hexdig_fun>
 8017494:	2800      	cmp	r0, #0
 8017496:	d1f8      	bne.n	801748a <__gethex+0x76>
 8017498:	4994      	ldr	r1, [pc, #592]	; (80176ec <__gethex+0x2d8>)
 801749a:	2201      	movs	r2, #1
 801749c:	4628      	mov	r0, r5
 801749e:	f7ff fe1f 	bl	80170e0 <strncmp>
 80174a2:	b978      	cbnz	r0, 80174c4 <__gethex+0xb0>
 80174a4:	b946      	cbnz	r6, 80174b8 <__gethex+0xa4>
 80174a6:	1c6e      	adds	r6, r5, #1
 80174a8:	4632      	mov	r2, r6
 80174aa:	4615      	mov	r5, r2
 80174ac:	3201      	adds	r2, #1
 80174ae:	7828      	ldrb	r0, [r5, #0]
 80174b0:	f7ff ff9a 	bl	80173e8 <__hexdig_fun>
 80174b4:	2800      	cmp	r0, #0
 80174b6:	d1f8      	bne.n	80174aa <__gethex+0x96>
 80174b8:	1b73      	subs	r3, r6, r5
 80174ba:	009e      	lsls	r6, r3, #2
 80174bc:	e004      	b.n	80174c8 <__gethex+0xb4>
 80174be:	2400      	movs	r4, #0
 80174c0:	4626      	mov	r6, r4
 80174c2:	e7e1      	b.n	8017488 <__gethex+0x74>
 80174c4:	2e00      	cmp	r6, #0
 80174c6:	d1f7      	bne.n	80174b8 <__gethex+0xa4>
 80174c8:	782b      	ldrb	r3, [r5, #0]
 80174ca:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80174ce:	2b50      	cmp	r3, #80	; 0x50
 80174d0:	d13d      	bne.n	801754e <__gethex+0x13a>
 80174d2:	786b      	ldrb	r3, [r5, #1]
 80174d4:	2b2b      	cmp	r3, #43	; 0x2b
 80174d6:	d02f      	beq.n	8017538 <__gethex+0x124>
 80174d8:	2b2d      	cmp	r3, #45	; 0x2d
 80174da:	d031      	beq.n	8017540 <__gethex+0x12c>
 80174dc:	1c69      	adds	r1, r5, #1
 80174de:	f04f 0b00 	mov.w	fp, #0
 80174e2:	7808      	ldrb	r0, [r1, #0]
 80174e4:	f7ff ff80 	bl	80173e8 <__hexdig_fun>
 80174e8:	1e42      	subs	r2, r0, #1
 80174ea:	b2d2      	uxtb	r2, r2
 80174ec:	2a18      	cmp	r2, #24
 80174ee:	d82e      	bhi.n	801754e <__gethex+0x13a>
 80174f0:	f1a0 0210 	sub.w	r2, r0, #16
 80174f4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80174f8:	f7ff ff76 	bl	80173e8 <__hexdig_fun>
 80174fc:	f100 3cff 	add.w	ip, r0, #4294967295
 8017500:	fa5f fc8c 	uxtb.w	ip, ip
 8017504:	f1bc 0f18 	cmp.w	ip, #24
 8017508:	d91d      	bls.n	8017546 <__gethex+0x132>
 801750a:	f1bb 0f00 	cmp.w	fp, #0
 801750e:	d000      	beq.n	8017512 <__gethex+0xfe>
 8017510:	4252      	negs	r2, r2
 8017512:	4416      	add	r6, r2
 8017514:	f8ca 1000 	str.w	r1, [sl]
 8017518:	b1dc      	cbz	r4, 8017552 <__gethex+0x13e>
 801751a:	9b01      	ldr	r3, [sp, #4]
 801751c:	2b00      	cmp	r3, #0
 801751e:	bf14      	ite	ne
 8017520:	f04f 0800 	movne.w	r8, #0
 8017524:	f04f 0806 	moveq.w	r8, #6
 8017528:	4640      	mov	r0, r8
 801752a:	b005      	add	sp, #20
 801752c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017530:	4645      	mov	r5, r8
 8017532:	4626      	mov	r6, r4
 8017534:	2401      	movs	r4, #1
 8017536:	e7c7      	b.n	80174c8 <__gethex+0xb4>
 8017538:	f04f 0b00 	mov.w	fp, #0
 801753c:	1ca9      	adds	r1, r5, #2
 801753e:	e7d0      	b.n	80174e2 <__gethex+0xce>
 8017540:	f04f 0b01 	mov.w	fp, #1
 8017544:	e7fa      	b.n	801753c <__gethex+0x128>
 8017546:	230a      	movs	r3, #10
 8017548:	fb03 0002 	mla	r0, r3, r2, r0
 801754c:	e7d0      	b.n	80174f0 <__gethex+0xdc>
 801754e:	4629      	mov	r1, r5
 8017550:	e7e0      	b.n	8017514 <__gethex+0x100>
 8017552:	eba5 0308 	sub.w	r3, r5, r8
 8017556:	3b01      	subs	r3, #1
 8017558:	4621      	mov	r1, r4
 801755a:	2b07      	cmp	r3, #7
 801755c:	dc0a      	bgt.n	8017574 <__gethex+0x160>
 801755e:	4648      	mov	r0, r9
 8017560:	f000 fa5a 	bl	8017a18 <_Balloc>
 8017564:	4604      	mov	r4, r0
 8017566:	b940      	cbnz	r0, 801757a <__gethex+0x166>
 8017568:	4b61      	ldr	r3, [pc, #388]	; (80176f0 <__gethex+0x2dc>)
 801756a:	4602      	mov	r2, r0
 801756c:	21e4      	movs	r1, #228	; 0xe4
 801756e:	4861      	ldr	r0, [pc, #388]	; (80176f4 <__gethex+0x2e0>)
 8017570:	f001 fabc 	bl	8018aec <__assert_func>
 8017574:	3101      	adds	r1, #1
 8017576:	105b      	asrs	r3, r3, #1
 8017578:	e7ef      	b.n	801755a <__gethex+0x146>
 801757a:	f100 0a14 	add.w	sl, r0, #20
 801757e:	2300      	movs	r3, #0
 8017580:	495a      	ldr	r1, [pc, #360]	; (80176ec <__gethex+0x2d8>)
 8017582:	f8cd a004 	str.w	sl, [sp, #4]
 8017586:	469b      	mov	fp, r3
 8017588:	45a8      	cmp	r8, r5
 801758a:	d342      	bcc.n	8017612 <__gethex+0x1fe>
 801758c:	9801      	ldr	r0, [sp, #4]
 801758e:	f840 bb04 	str.w	fp, [r0], #4
 8017592:	eba0 000a 	sub.w	r0, r0, sl
 8017596:	1080      	asrs	r0, r0, #2
 8017598:	6120      	str	r0, [r4, #16]
 801759a:	ea4f 1840 	mov.w	r8, r0, lsl #5
 801759e:	4658      	mov	r0, fp
 80175a0:	f000 fb2c 	bl	8017bfc <__hi0bits>
 80175a4:	683d      	ldr	r5, [r7, #0]
 80175a6:	eba8 0000 	sub.w	r0, r8, r0
 80175aa:	42a8      	cmp	r0, r5
 80175ac:	dd59      	ble.n	8017662 <__gethex+0x24e>
 80175ae:	eba0 0805 	sub.w	r8, r0, r5
 80175b2:	4641      	mov	r1, r8
 80175b4:	4620      	mov	r0, r4
 80175b6:	f000 febb 	bl	8018330 <__any_on>
 80175ba:	4683      	mov	fp, r0
 80175bc:	b1b8      	cbz	r0, 80175ee <__gethex+0x1da>
 80175be:	f108 33ff 	add.w	r3, r8, #4294967295
 80175c2:	1159      	asrs	r1, r3, #5
 80175c4:	f003 021f 	and.w	r2, r3, #31
 80175c8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80175cc:	f04f 0b01 	mov.w	fp, #1
 80175d0:	fa0b f202 	lsl.w	r2, fp, r2
 80175d4:	420a      	tst	r2, r1
 80175d6:	d00a      	beq.n	80175ee <__gethex+0x1da>
 80175d8:	455b      	cmp	r3, fp
 80175da:	dd06      	ble.n	80175ea <__gethex+0x1d6>
 80175dc:	f1a8 0102 	sub.w	r1, r8, #2
 80175e0:	4620      	mov	r0, r4
 80175e2:	f000 fea5 	bl	8018330 <__any_on>
 80175e6:	2800      	cmp	r0, #0
 80175e8:	d138      	bne.n	801765c <__gethex+0x248>
 80175ea:	f04f 0b02 	mov.w	fp, #2
 80175ee:	4641      	mov	r1, r8
 80175f0:	4620      	mov	r0, r4
 80175f2:	f7ff fea7 	bl	8017344 <rshift>
 80175f6:	4446      	add	r6, r8
 80175f8:	68bb      	ldr	r3, [r7, #8]
 80175fa:	42b3      	cmp	r3, r6
 80175fc:	da41      	bge.n	8017682 <__gethex+0x26e>
 80175fe:	4621      	mov	r1, r4
 8017600:	4648      	mov	r0, r9
 8017602:	f000 fa49 	bl	8017a98 <_Bfree>
 8017606:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8017608:	2300      	movs	r3, #0
 801760a:	6013      	str	r3, [r2, #0]
 801760c:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8017610:	e78a      	b.n	8017528 <__gethex+0x114>
 8017612:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 8017616:	2a2e      	cmp	r2, #46	; 0x2e
 8017618:	d014      	beq.n	8017644 <__gethex+0x230>
 801761a:	2b20      	cmp	r3, #32
 801761c:	d106      	bne.n	801762c <__gethex+0x218>
 801761e:	9b01      	ldr	r3, [sp, #4]
 8017620:	f843 bb04 	str.w	fp, [r3], #4
 8017624:	f04f 0b00 	mov.w	fp, #0
 8017628:	9301      	str	r3, [sp, #4]
 801762a:	465b      	mov	r3, fp
 801762c:	7828      	ldrb	r0, [r5, #0]
 801762e:	9303      	str	r3, [sp, #12]
 8017630:	f7ff feda 	bl	80173e8 <__hexdig_fun>
 8017634:	9b03      	ldr	r3, [sp, #12]
 8017636:	f000 000f 	and.w	r0, r0, #15
 801763a:	4098      	lsls	r0, r3
 801763c:	ea4b 0b00 	orr.w	fp, fp, r0
 8017640:	3304      	adds	r3, #4
 8017642:	e7a1      	b.n	8017588 <__gethex+0x174>
 8017644:	45a8      	cmp	r8, r5
 8017646:	d8e8      	bhi.n	801761a <__gethex+0x206>
 8017648:	2201      	movs	r2, #1
 801764a:	4628      	mov	r0, r5
 801764c:	9303      	str	r3, [sp, #12]
 801764e:	f7ff fd47 	bl	80170e0 <strncmp>
 8017652:	4926      	ldr	r1, [pc, #152]	; (80176ec <__gethex+0x2d8>)
 8017654:	9b03      	ldr	r3, [sp, #12]
 8017656:	2800      	cmp	r0, #0
 8017658:	d1df      	bne.n	801761a <__gethex+0x206>
 801765a:	e795      	b.n	8017588 <__gethex+0x174>
 801765c:	f04f 0b03 	mov.w	fp, #3
 8017660:	e7c5      	b.n	80175ee <__gethex+0x1da>
 8017662:	da0b      	bge.n	801767c <__gethex+0x268>
 8017664:	eba5 0800 	sub.w	r8, r5, r0
 8017668:	4621      	mov	r1, r4
 801766a:	4642      	mov	r2, r8
 801766c:	4648      	mov	r0, r9
 801766e:	f000 fc2d 	bl	8017ecc <__lshift>
 8017672:	eba6 0608 	sub.w	r6, r6, r8
 8017676:	4604      	mov	r4, r0
 8017678:	f100 0a14 	add.w	sl, r0, #20
 801767c:	f04f 0b00 	mov.w	fp, #0
 8017680:	e7ba      	b.n	80175f8 <__gethex+0x1e4>
 8017682:	687b      	ldr	r3, [r7, #4]
 8017684:	42b3      	cmp	r3, r6
 8017686:	dd73      	ble.n	8017770 <__gethex+0x35c>
 8017688:	1b9e      	subs	r6, r3, r6
 801768a:	42b5      	cmp	r5, r6
 801768c:	dc34      	bgt.n	80176f8 <__gethex+0x2e4>
 801768e:	68fb      	ldr	r3, [r7, #12]
 8017690:	2b02      	cmp	r3, #2
 8017692:	d023      	beq.n	80176dc <__gethex+0x2c8>
 8017694:	2b03      	cmp	r3, #3
 8017696:	d025      	beq.n	80176e4 <__gethex+0x2d0>
 8017698:	2b01      	cmp	r3, #1
 801769a:	d115      	bne.n	80176c8 <__gethex+0x2b4>
 801769c:	42b5      	cmp	r5, r6
 801769e:	d113      	bne.n	80176c8 <__gethex+0x2b4>
 80176a0:	2d01      	cmp	r5, #1
 80176a2:	d10b      	bne.n	80176bc <__gethex+0x2a8>
 80176a4:	9a02      	ldr	r2, [sp, #8]
 80176a6:	687b      	ldr	r3, [r7, #4]
 80176a8:	6013      	str	r3, [r2, #0]
 80176aa:	2301      	movs	r3, #1
 80176ac:	6123      	str	r3, [r4, #16]
 80176ae:	f8ca 3000 	str.w	r3, [sl]
 80176b2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80176b4:	f04f 0862 	mov.w	r8, #98	; 0x62
 80176b8:	601c      	str	r4, [r3, #0]
 80176ba:	e735      	b.n	8017528 <__gethex+0x114>
 80176bc:	1e69      	subs	r1, r5, #1
 80176be:	4620      	mov	r0, r4
 80176c0:	f000 fe36 	bl	8018330 <__any_on>
 80176c4:	2800      	cmp	r0, #0
 80176c6:	d1ed      	bne.n	80176a4 <__gethex+0x290>
 80176c8:	4621      	mov	r1, r4
 80176ca:	4648      	mov	r0, r9
 80176cc:	f000 f9e4 	bl	8017a98 <_Bfree>
 80176d0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80176d2:	2300      	movs	r3, #0
 80176d4:	6013      	str	r3, [r2, #0]
 80176d6:	f04f 0850 	mov.w	r8, #80	; 0x50
 80176da:	e725      	b.n	8017528 <__gethex+0x114>
 80176dc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80176de:	2b00      	cmp	r3, #0
 80176e0:	d1f2      	bne.n	80176c8 <__gethex+0x2b4>
 80176e2:	e7df      	b.n	80176a4 <__gethex+0x290>
 80176e4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80176e6:	2b00      	cmp	r3, #0
 80176e8:	d1dc      	bne.n	80176a4 <__gethex+0x290>
 80176ea:	e7ed      	b.n	80176c8 <__gethex+0x2b4>
 80176ec:	08025de8 	.word	0x08025de8
 80176f0:	08025f51 	.word	0x08025f51
 80176f4:	08025f62 	.word	0x08025f62
 80176f8:	f106 38ff 	add.w	r8, r6, #4294967295
 80176fc:	f1bb 0f00 	cmp.w	fp, #0
 8017700:	d133      	bne.n	801776a <__gethex+0x356>
 8017702:	f1b8 0f00 	cmp.w	r8, #0
 8017706:	d004      	beq.n	8017712 <__gethex+0x2fe>
 8017708:	4641      	mov	r1, r8
 801770a:	4620      	mov	r0, r4
 801770c:	f000 fe10 	bl	8018330 <__any_on>
 8017710:	4683      	mov	fp, r0
 8017712:	ea4f 1268 	mov.w	r2, r8, asr #5
 8017716:	2301      	movs	r3, #1
 8017718:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 801771c:	f008 081f 	and.w	r8, r8, #31
 8017720:	fa03 f308 	lsl.w	r3, r3, r8
 8017724:	4213      	tst	r3, r2
 8017726:	4631      	mov	r1, r6
 8017728:	4620      	mov	r0, r4
 801772a:	bf18      	it	ne
 801772c:	f04b 0b02 	orrne.w	fp, fp, #2
 8017730:	1bad      	subs	r5, r5, r6
 8017732:	f7ff fe07 	bl	8017344 <rshift>
 8017736:	687e      	ldr	r6, [r7, #4]
 8017738:	f04f 0802 	mov.w	r8, #2
 801773c:	f1bb 0f00 	cmp.w	fp, #0
 8017740:	d04a      	beq.n	80177d8 <__gethex+0x3c4>
 8017742:	68fb      	ldr	r3, [r7, #12]
 8017744:	2b02      	cmp	r3, #2
 8017746:	d016      	beq.n	8017776 <__gethex+0x362>
 8017748:	2b03      	cmp	r3, #3
 801774a:	d018      	beq.n	801777e <__gethex+0x36a>
 801774c:	2b01      	cmp	r3, #1
 801774e:	d109      	bne.n	8017764 <__gethex+0x350>
 8017750:	f01b 0f02 	tst.w	fp, #2
 8017754:	d006      	beq.n	8017764 <__gethex+0x350>
 8017756:	f8da 3000 	ldr.w	r3, [sl]
 801775a:	ea4b 0b03 	orr.w	fp, fp, r3
 801775e:	f01b 0f01 	tst.w	fp, #1
 8017762:	d10f      	bne.n	8017784 <__gethex+0x370>
 8017764:	f048 0810 	orr.w	r8, r8, #16
 8017768:	e036      	b.n	80177d8 <__gethex+0x3c4>
 801776a:	f04f 0b01 	mov.w	fp, #1
 801776e:	e7d0      	b.n	8017712 <__gethex+0x2fe>
 8017770:	f04f 0801 	mov.w	r8, #1
 8017774:	e7e2      	b.n	801773c <__gethex+0x328>
 8017776:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017778:	f1c3 0301 	rsb	r3, r3, #1
 801777c:	930f      	str	r3, [sp, #60]	; 0x3c
 801777e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017780:	2b00      	cmp	r3, #0
 8017782:	d0ef      	beq.n	8017764 <__gethex+0x350>
 8017784:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8017788:	f104 0214 	add.w	r2, r4, #20
 801778c:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8017790:	9301      	str	r3, [sp, #4]
 8017792:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 8017796:	2300      	movs	r3, #0
 8017798:	4694      	mov	ip, r2
 801779a:	f852 1b04 	ldr.w	r1, [r2], #4
 801779e:	f1b1 3fff 	cmp.w	r1, #4294967295
 80177a2:	d01e      	beq.n	80177e2 <__gethex+0x3ce>
 80177a4:	3101      	adds	r1, #1
 80177a6:	f8cc 1000 	str.w	r1, [ip]
 80177aa:	f1b8 0f02 	cmp.w	r8, #2
 80177ae:	f104 0214 	add.w	r2, r4, #20
 80177b2:	d13d      	bne.n	8017830 <__gethex+0x41c>
 80177b4:	683b      	ldr	r3, [r7, #0]
 80177b6:	3b01      	subs	r3, #1
 80177b8:	42ab      	cmp	r3, r5
 80177ba:	d10b      	bne.n	80177d4 <__gethex+0x3c0>
 80177bc:	1169      	asrs	r1, r5, #5
 80177be:	2301      	movs	r3, #1
 80177c0:	f005 051f 	and.w	r5, r5, #31
 80177c4:	fa03 f505 	lsl.w	r5, r3, r5
 80177c8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80177cc:	421d      	tst	r5, r3
 80177ce:	bf18      	it	ne
 80177d0:	f04f 0801 	movne.w	r8, #1
 80177d4:	f048 0820 	orr.w	r8, r8, #32
 80177d8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80177da:	601c      	str	r4, [r3, #0]
 80177dc:	9b02      	ldr	r3, [sp, #8]
 80177de:	601e      	str	r6, [r3, #0]
 80177e0:	e6a2      	b.n	8017528 <__gethex+0x114>
 80177e2:	4290      	cmp	r0, r2
 80177e4:	f842 3c04 	str.w	r3, [r2, #-4]
 80177e8:	d8d6      	bhi.n	8017798 <__gethex+0x384>
 80177ea:	68a2      	ldr	r2, [r4, #8]
 80177ec:	4593      	cmp	fp, r2
 80177ee:	db17      	blt.n	8017820 <__gethex+0x40c>
 80177f0:	6861      	ldr	r1, [r4, #4]
 80177f2:	4648      	mov	r0, r9
 80177f4:	3101      	adds	r1, #1
 80177f6:	f000 f90f 	bl	8017a18 <_Balloc>
 80177fa:	4682      	mov	sl, r0
 80177fc:	b918      	cbnz	r0, 8017806 <__gethex+0x3f2>
 80177fe:	4b1b      	ldr	r3, [pc, #108]	; (801786c <__gethex+0x458>)
 8017800:	4602      	mov	r2, r0
 8017802:	2184      	movs	r1, #132	; 0x84
 8017804:	e6b3      	b.n	801756e <__gethex+0x15a>
 8017806:	6922      	ldr	r2, [r4, #16]
 8017808:	3202      	adds	r2, #2
 801780a:	f104 010c 	add.w	r1, r4, #12
 801780e:	0092      	lsls	r2, r2, #2
 8017810:	300c      	adds	r0, #12
 8017812:	f7ff fd2e 	bl	8017272 <memcpy>
 8017816:	4621      	mov	r1, r4
 8017818:	4648      	mov	r0, r9
 801781a:	f000 f93d 	bl	8017a98 <_Bfree>
 801781e:	4654      	mov	r4, sl
 8017820:	6922      	ldr	r2, [r4, #16]
 8017822:	1c51      	adds	r1, r2, #1
 8017824:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8017828:	6121      	str	r1, [r4, #16]
 801782a:	2101      	movs	r1, #1
 801782c:	6151      	str	r1, [r2, #20]
 801782e:	e7bc      	b.n	80177aa <__gethex+0x396>
 8017830:	6921      	ldr	r1, [r4, #16]
 8017832:	4559      	cmp	r1, fp
 8017834:	dd0b      	ble.n	801784e <__gethex+0x43a>
 8017836:	2101      	movs	r1, #1
 8017838:	4620      	mov	r0, r4
 801783a:	f7ff fd83 	bl	8017344 <rshift>
 801783e:	68bb      	ldr	r3, [r7, #8]
 8017840:	3601      	adds	r6, #1
 8017842:	42b3      	cmp	r3, r6
 8017844:	f6ff aedb 	blt.w	80175fe <__gethex+0x1ea>
 8017848:	f04f 0801 	mov.w	r8, #1
 801784c:	e7c2      	b.n	80177d4 <__gethex+0x3c0>
 801784e:	f015 051f 	ands.w	r5, r5, #31
 8017852:	d0f9      	beq.n	8017848 <__gethex+0x434>
 8017854:	9b01      	ldr	r3, [sp, #4]
 8017856:	441a      	add	r2, r3
 8017858:	f1c5 0520 	rsb	r5, r5, #32
 801785c:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8017860:	f000 f9cc 	bl	8017bfc <__hi0bits>
 8017864:	42a8      	cmp	r0, r5
 8017866:	dbe6      	blt.n	8017836 <__gethex+0x422>
 8017868:	e7ee      	b.n	8017848 <__gethex+0x434>
 801786a:	bf00      	nop
 801786c:	08025f51 	.word	0x08025f51

08017870 <L_shift>:
 8017870:	f1c2 0208 	rsb	r2, r2, #8
 8017874:	0092      	lsls	r2, r2, #2
 8017876:	b570      	push	{r4, r5, r6, lr}
 8017878:	f1c2 0620 	rsb	r6, r2, #32
 801787c:	6843      	ldr	r3, [r0, #4]
 801787e:	6804      	ldr	r4, [r0, #0]
 8017880:	fa03 f506 	lsl.w	r5, r3, r6
 8017884:	432c      	orrs	r4, r5
 8017886:	40d3      	lsrs	r3, r2
 8017888:	6004      	str	r4, [r0, #0]
 801788a:	f840 3f04 	str.w	r3, [r0, #4]!
 801788e:	4288      	cmp	r0, r1
 8017890:	d3f4      	bcc.n	801787c <L_shift+0xc>
 8017892:	bd70      	pop	{r4, r5, r6, pc}

08017894 <__match>:
 8017894:	b530      	push	{r4, r5, lr}
 8017896:	6803      	ldr	r3, [r0, #0]
 8017898:	3301      	adds	r3, #1
 801789a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801789e:	b914      	cbnz	r4, 80178a6 <__match+0x12>
 80178a0:	6003      	str	r3, [r0, #0]
 80178a2:	2001      	movs	r0, #1
 80178a4:	bd30      	pop	{r4, r5, pc}
 80178a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80178aa:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80178ae:	2d19      	cmp	r5, #25
 80178b0:	bf98      	it	ls
 80178b2:	3220      	addls	r2, #32
 80178b4:	42a2      	cmp	r2, r4
 80178b6:	d0f0      	beq.n	801789a <__match+0x6>
 80178b8:	2000      	movs	r0, #0
 80178ba:	e7f3      	b.n	80178a4 <__match+0x10>

080178bc <__hexnan>:
 80178bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80178c0:	680b      	ldr	r3, [r1, #0]
 80178c2:	6801      	ldr	r1, [r0, #0]
 80178c4:	115e      	asrs	r6, r3, #5
 80178c6:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80178ca:	f013 031f 	ands.w	r3, r3, #31
 80178ce:	b087      	sub	sp, #28
 80178d0:	bf18      	it	ne
 80178d2:	3604      	addne	r6, #4
 80178d4:	2500      	movs	r5, #0
 80178d6:	1f37      	subs	r7, r6, #4
 80178d8:	4682      	mov	sl, r0
 80178da:	4690      	mov	r8, r2
 80178dc:	9301      	str	r3, [sp, #4]
 80178de:	f846 5c04 	str.w	r5, [r6, #-4]
 80178e2:	46b9      	mov	r9, r7
 80178e4:	463c      	mov	r4, r7
 80178e6:	9502      	str	r5, [sp, #8]
 80178e8:	46ab      	mov	fp, r5
 80178ea:	784a      	ldrb	r2, [r1, #1]
 80178ec:	1c4b      	adds	r3, r1, #1
 80178ee:	9303      	str	r3, [sp, #12]
 80178f0:	b342      	cbz	r2, 8017944 <__hexnan+0x88>
 80178f2:	4610      	mov	r0, r2
 80178f4:	9105      	str	r1, [sp, #20]
 80178f6:	9204      	str	r2, [sp, #16]
 80178f8:	f7ff fd76 	bl	80173e8 <__hexdig_fun>
 80178fc:	2800      	cmp	r0, #0
 80178fe:	d14f      	bne.n	80179a0 <__hexnan+0xe4>
 8017900:	9a04      	ldr	r2, [sp, #16]
 8017902:	9905      	ldr	r1, [sp, #20]
 8017904:	2a20      	cmp	r2, #32
 8017906:	d818      	bhi.n	801793a <__hexnan+0x7e>
 8017908:	9b02      	ldr	r3, [sp, #8]
 801790a:	459b      	cmp	fp, r3
 801790c:	dd13      	ble.n	8017936 <__hexnan+0x7a>
 801790e:	454c      	cmp	r4, r9
 8017910:	d206      	bcs.n	8017920 <__hexnan+0x64>
 8017912:	2d07      	cmp	r5, #7
 8017914:	dc04      	bgt.n	8017920 <__hexnan+0x64>
 8017916:	462a      	mov	r2, r5
 8017918:	4649      	mov	r1, r9
 801791a:	4620      	mov	r0, r4
 801791c:	f7ff ffa8 	bl	8017870 <L_shift>
 8017920:	4544      	cmp	r4, r8
 8017922:	d950      	bls.n	80179c6 <__hexnan+0x10a>
 8017924:	2300      	movs	r3, #0
 8017926:	f1a4 0904 	sub.w	r9, r4, #4
 801792a:	f844 3c04 	str.w	r3, [r4, #-4]
 801792e:	f8cd b008 	str.w	fp, [sp, #8]
 8017932:	464c      	mov	r4, r9
 8017934:	461d      	mov	r5, r3
 8017936:	9903      	ldr	r1, [sp, #12]
 8017938:	e7d7      	b.n	80178ea <__hexnan+0x2e>
 801793a:	2a29      	cmp	r2, #41	; 0x29
 801793c:	d155      	bne.n	80179ea <__hexnan+0x12e>
 801793e:	3102      	adds	r1, #2
 8017940:	f8ca 1000 	str.w	r1, [sl]
 8017944:	f1bb 0f00 	cmp.w	fp, #0
 8017948:	d04f      	beq.n	80179ea <__hexnan+0x12e>
 801794a:	454c      	cmp	r4, r9
 801794c:	d206      	bcs.n	801795c <__hexnan+0xa0>
 801794e:	2d07      	cmp	r5, #7
 8017950:	dc04      	bgt.n	801795c <__hexnan+0xa0>
 8017952:	462a      	mov	r2, r5
 8017954:	4649      	mov	r1, r9
 8017956:	4620      	mov	r0, r4
 8017958:	f7ff ff8a 	bl	8017870 <L_shift>
 801795c:	4544      	cmp	r4, r8
 801795e:	d934      	bls.n	80179ca <__hexnan+0x10e>
 8017960:	f1a8 0204 	sub.w	r2, r8, #4
 8017964:	4623      	mov	r3, r4
 8017966:	f853 1b04 	ldr.w	r1, [r3], #4
 801796a:	f842 1f04 	str.w	r1, [r2, #4]!
 801796e:	429f      	cmp	r7, r3
 8017970:	d2f9      	bcs.n	8017966 <__hexnan+0xaa>
 8017972:	1b3b      	subs	r3, r7, r4
 8017974:	f023 0303 	bic.w	r3, r3, #3
 8017978:	3304      	adds	r3, #4
 801797a:	3e03      	subs	r6, #3
 801797c:	3401      	adds	r4, #1
 801797e:	42a6      	cmp	r6, r4
 8017980:	bf38      	it	cc
 8017982:	2304      	movcc	r3, #4
 8017984:	4443      	add	r3, r8
 8017986:	2200      	movs	r2, #0
 8017988:	f843 2b04 	str.w	r2, [r3], #4
 801798c:	429f      	cmp	r7, r3
 801798e:	d2fb      	bcs.n	8017988 <__hexnan+0xcc>
 8017990:	683b      	ldr	r3, [r7, #0]
 8017992:	b91b      	cbnz	r3, 801799c <__hexnan+0xe0>
 8017994:	4547      	cmp	r7, r8
 8017996:	d126      	bne.n	80179e6 <__hexnan+0x12a>
 8017998:	2301      	movs	r3, #1
 801799a:	603b      	str	r3, [r7, #0]
 801799c:	2005      	movs	r0, #5
 801799e:	e025      	b.n	80179ec <__hexnan+0x130>
 80179a0:	3501      	adds	r5, #1
 80179a2:	2d08      	cmp	r5, #8
 80179a4:	f10b 0b01 	add.w	fp, fp, #1
 80179a8:	dd06      	ble.n	80179b8 <__hexnan+0xfc>
 80179aa:	4544      	cmp	r4, r8
 80179ac:	d9c3      	bls.n	8017936 <__hexnan+0x7a>
 80179ae:	2300      	movs	r3, #0
 80179b0:	f844 3c04 	str.w	r3, [r4, #-4]
 80179b4:	2501      	movs	r5, #1
 80179b6:	3c04      	subs	r4, #4
 80179b8:	6822      	ldr	r2, [r4, #0]
 80179ba:	f000 000f 	and.w	r0, r0, #15
 80179be:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80179c2:	6020      	str	r0, [r4, #0]
 80179c4:	e7b7      	b.n	8017936 <__hexnan+0x7a>
 80179c6:	2508      	movs	r5, #8
 80179c8:	e7b5      	b.n	8017936 <__hexnan+0x7a>
 80179ca:	9b01      	ldr	r3, [sp, #4]
 80179cc:	2b00      	cmp	r3, #0
 80179ce:	d0df      	beq.n	8017990 <__hexnan+0xd4>
 80179d0:	f1c3 0320 	rsb	r3, r3, #32
 80179d4:	f04f 32ff 	mov.w	r2, #4294967295
 80179d8:	40da      	lsrs	r2, r3
 80179da:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80179de:	4013      	ands	r3, r2
 80179e0:	f846 3c04 	str.w	r3, [r6, #-4]
 80179e4:	e7d4      	b.n	8017990 <__hexnan+0xd4>
 80179e6:	3f04      	subs	r7, #4
 80179e8:	e7d2      	b.n	8017990 <__hexnan+0xd4>
 80179ea:	2004      	movs	r0, #4
 80179ec:	b007      	add	sp, #28
 80179ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080179f2 <__ascii_mbtowc>:
 80179f2:	b082      	sub	sp, #8
 80179f4:	b901      	cbnz	r1, 80179f8 <__ascii_mbtowc+0x6>
 80179f6:	a901      	add	r1, sp, #4
 80179f8:	b142      	cbz	r2, 8017a0c <__ascii_mbtowc+0x1a>
 80179fa:	b14b      	cbz	r3, 8017a10 <__ascii_mbtowc+0x1e>
 80179fc:	7813      	ldrb	r3, [r2, #0]
 80179fe:	600b      	str	r3, [r1, #0]
 8017a00:	7812      	ldrb	r2, [r2, #0]
 8017a02:	1e10      	subs	r0, r2, #0
 8017a04:	bf18      	it	ne
 8017a06:	2001      	movne	r0, #1
 8017a08:	b002      	add	sp, #8
 8017a0a:	4770      	bx	lr
 8017a0c:	4610      	mov	r0, r2
 8017a0e:	e7fb      	b.n	8017a08 <__ascii_mbtowc+0x16>
 8017a10:	f06f 0001 	mvn.w	r0, #1
 8017a14:	e7f8      	b.n	8017a08 <__ascii_mbtowc+0x16>
	...

08017a18 <_Balloc>:
 8017a18:	b570      	push	{r4, r5, r6, lr}
 8017a1a:	69c6      	ldr	r6, [r0, #28]
 8017a1c:	4604      	mov	r4, r0
 8017a1e:	460d      	mov	r5, r1
 8017a20:	b976      	cbnz	r6, 8017a40 <_Balloc+0x28>
 8017a22:	2010      	movs	r0, #16
 8017a24:	f7fe fa6a 	bl	8015efc <malloc>
 8017a28:	4602      	mov	r2, r0
 8017a2a:	61e0      	str	r0, [r4, #28]
 8017a2c:	b920      	cbnz	r0, 8017a38 <_Balloc+0x20>
 8017a2e:	4b18      	ldr	r3, [pc, #96]	; (8017a90 <_Balloc+0x78>)
 8017a30:	4818      	ldr	r0, [pc, #96]	; (8017a94 <_Balloc+0x7c>)
 8017a32:	216b      	movs	r1, #107	; 0x6b
 8017a34:	f001 f85a 	bl	8018aec <__assert_func>
 8017a38:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8017a3c:	6006      	str	r6, [r0, #0]
 8017a3e:	60c6      	str	r6, [r0, #12]
 8017a40:	69e6      	ldr	r6, [r4, #28]
 8017a42:	68f3      	ldr	r3, [r6, #12]
 8017a44:	b183      	cbz	r3, 8017a68 <_Balloc+0x50>
 8017a46:	69e3      	ldr	r3, [r4, #28]
 8017a48:	68db      	ldr	r3, [r3, #12]
 8017a4a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8017a4e:	b9b8      	cbnz	r0, 8017a80 <_Balloc+0x68>
 8017a50:	2101      	movs	r1, #1
 8017a52:	fa01 f605 	lsl.w	r6, r1, r5
 8017a56:	1d72      	adds	r2, r6, #5
 8017a58:	0092      	lsls	r2, r2, #2
 8017a5a:	4620      	mov	r0, r4
 8017a5c:	f001 f864 	bl	8018b28 <_calloc_r>
 8017a60:	b160      	cbz	r0, 8017a7c <_Balloc+0x64>
 8017a62:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8017a66:	e00e      	b.n	8017a86 <_Balloc+0x6e>
 8017a68:	2221      	movs	r2, #33	; 0x21
 8017a6a:	2104      	movs	r1, #4
 8017a6c:	4620      	mov	r0, r4
 8017a6e:	f001 f85b 	bl	8018b28 <_calloc_r>
 8017a72:	69e3      	ldr	r3, [r4, #28]
 8017a74:	60f0      	str	r0, [r6, #12]
 8017a76:	68db      	ldr	r3, [r3, #12]
 8017a78:	2b00      	cmp	r3, #0
 8017a7a:	d1e4      	bne.n	8017a46 <_Balloc+0x2e>
 8017a7c:	2000      	movs	r0, #0
 8017a7e:	bd70      	pop	{r4, r5, r6, pc}
 8017a80:	6802      	ldr	r2, [r0, #0]
 8017a82:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8017a86:	2300      	movs	r3, #0
 8017a88:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8017a8c:	e7f7      	b.n	8017a7e <_Balloc+0x66>
 8017a8e:	bf00      	nop
 8017a90:	08025fc2 	.word	0x08025fc2
 8017a94:	08025fd9 	.word	0x08025fd9

08017a98 <_Bfree>:
 8017a98:	b570      	push	{r4, r5, r6, lr}
 8017a9a:	69c6      	ldr	r6, [r0, #28]
 8017a9c:	4605      	mov	r5, r0
 8017a9e:	460c      	mov	r4, r1
 8017aa0:	b976      	cbnz	r6, 8017ac0 <_Bfree+0x28>
 8017aa2:	2010      	movs	r0, #16
 8017aa4:	f7fe fa2a 	bl	8015efc <malloc>
 8017aa8:	4602      	mov	r2, r0
 8017aaa:	61e8      	str	r0, [r5, #28]
 8017aac:	b920      	cbnz	r0, 8017ab8 <_Bfree+0x20>
 8017aae:	4b09      	ldr	r3, [pc, #36]	; (8017ad4 <_Bfree+0x3c>)
 8017ab0:	4809      	ldr	r0, [pc, #36]	; (8017ad8 <_Bfree+0x40>)
 8017ab2:	218f      	movs	r1, #143	; 0x8f
 8017ab4:	f001 f81a 	bl	8018aec <__assert_func>
 8017ab8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8017abc:	6006      	str	r6, [r0, #0]
 8017abe:	60c6      	str	r6, [r0, #12]
 8017ac0:	b13c      	cbz	r4, 8017ad2 <_Bfree+0x3a>
 8017ac2:	69eb      	ldr	r3, [r5, #28]
 8017ac4:	6862      	ldr	r2, [r4, #4]
 8017ac6:	68db      	ldr	r3, [r3, #12]
 8017ac8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8017acc:	6021      	str	r1, [r4, #0]
 8017ace:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8017ad2:	bd70      	pop	{r4, r5, r6, pc}
 8017ad4:	08025fc2 	.word	0x08025fc2
 8017ad8:	08025fd9 	.word	0x08025fd9

08017adc <__multadd>:
 8017adc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017ae0:	690d      	ldr	r5, [r1, #16]
 8017ae2:	4607      	mov	r7, r0
 8017ae4:	460c      	mov	r4, r1
 8017ae6:	461e      	mov	r6, r3
 8017ae8:	f101 0c14 	add.w	ip, r1, #20
 8017aec:	2000      	movs	r0, #0
 8017aee:	f8dc 3000 	ldr.w	r3, [ip]
 8017af2:	b299      	uxth	r1, r3
 8017af4:	fb02 6101 	mla	r1, r2, r1, r6
 8017af8:	0c1e      	lsrs	r6, r3, #16
 8017afa:	0c0b      	lsrs	r3, r1, #16
 8017afc:	fb02 3306 	mla	r3, r2, r6, r3
 8017b00:	b289      	uxth	r1, r1
 8017b02:	3001      	adds	r0, #1
 8017b04:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8017b08:	4285      	cmp	r5, r0
 8017b0a:	f84c 1b04 	str.w	r1, [ip], #4
 8017b0e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8017b12:	dcec      	bgt.n	8017aee <__multadd+0x12>
 8017b14:	b30e      	cbz	r6, 8017b5a <__multadd+0x7e>
 8017b16:	68a3      	ldr	r3, [r4, #8]
 8017b18:	42ab      	cmp	r3, r5
 8017b1a:	dc19      	bgt.n	8017b50 <__multadd+0x74>
 8017b1c:	6861      	ldr	r1, [r4, #4]
 8017b1e:	4638      	mov	r0, r7
 8017b20:	3101      	adds	r1, #1
 8017b22:	f7ff ff79 	bl	8017a18 <_Balloc>
 8017b26:	4680      	mov	r8, r0
 8017b28:	b928      	cbnz	r0, 8017b36 <__multadd+0x5a>
 8017b2a:	4602      	mov	r2, r0
 8017b2c:	4b0c      	ldr	r3, [pc, #48]	; (8017b60 <__multadd+0x84>)
 8017b2e:	480d      	ldr	r0, [pc, #52]	; (8017b64 <__multadd+0x88>)
 8017b30:	21ba      	movs	r1, #186	; 0xba
 8017b32:	f000 ffdb 	bl	8018aec <__assert_func>
 8017b36:	6922      	ldr	r2, [r4, #16]
 8017b38:	3202      	adds	r2, #2
 8017b3a:	f104 010c 	add.w	r1, r4, #12
 8017b3e:	0092      	lsls	r2, r2, #2
 8017b40:	300c      	adds	r0, #12
 8017b42:	f7ff fb96 	bl	8017272 <memcpy>
 8017b46:	4621      	mov	r1, r4
 8017b48:	4638      	mov	r0, r7
 8017b4a:	f7ff ffa5 	bl	8017a98 <_Bfree>
 8017b4e:	4644      	mov	r4, r8
 8017b50:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8017b54:	3501      	adds	r5, #1
 8017b56:	615e      	str	r6, [r3, #20]
 8017b58:	6125      	str	r5, [r4, #16]
 8017b5a:	4620      	mov	r0, r4
 8017b5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017b60:	08025f51 	.word	0x08025f51
 8017b64:	08025fd9 	.word	0x08025fd9

08017b68 <__s2b>:
 8017b68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017b6c:	460c      	mov	r4, r1
 8017b6e:	4615      	mov	r5, r2
 8017b70:	461f      	mov	r7, r3
 8017b72:	2209      	movs	r2, #9
 8017b74:	3308      	adds	r3, #8
 8017b76:	4606      	mov	r6, r0
 8017b78:	fb93 f3f2 	sdiv	r3, r3, r2
 8017b7c:	2100      	movs	r1, #0
 8017b7e:	2201      	movs	r2, #1
 8017b80:	429a      	cmp	r2, r3
 8017b82:	db09      	blt.n	8017b98 <__s2b+0x30>
 8017b84:	4630      	mov	r0, r6
 8017b86:	f7ff ff47 	bl	8017a18 <_Balloc>
 8017b8a:	b940      	cbnz	r0, 8017b9e <__s2b+0x36>
 8017b8c:	4602      	mov	r2, r0
 8017b8e:	4b19      	ldr	r3, [pc, #100]	; (8017bf4 <__s2b+0x8c>)
 8017b90:	4819      	ldr	r0, [pc, #100]	; (8017bf8 <__s2b+0x90>)
 8017b92:	21d3      	movs	r1, #211	; 0xd3
 8017b94:	f000 ffaa 	bl	8018aec <__assert_func>
 8017b98:	0052      	lsls	r2, r2, #1
 8017b9a:	3101      	adds	r1, #1
 8017b9c:	e7f0      	b.n	8017b80 <__s2b+0x18>
 8017b9e:	9b08      	ldr	r3, [sp, #32]
 8017ba0:	6143      	str	r3, [r0, #20]
 8017ba2:	2d09      	cmp	r5, #9
 8017ba4:	f04f 0301 	mov.w	r3, #1
 8017ba8:	6103      	str	r3, [r0, #16]
 8017baa:	dd16      	ble.n	8017bda <__s2b+0x72>
 8017bac:	f104 0909 	add.w	r9, r4, #9
 8017bb0:	46c8      	mov	r8, r9
 8017bb2:	442c      	add	r4, r5
 8017bb4:	f818 3b01 	ldrb.w	r3, [r8], #1
 8017bb8:	4601      	mov	r1, r0
 8017bba:	3b30      	subs	r3, #48	; 0x30
 8017bbc:	220a      	movs	r2, #10
 8017bbe:	4630      	mov	r0, r6
 8017bc0:	f7ff ff8c 	bl	8017adc <__multadd>
 8017bc4:	45a0      	cmp	r8, r4
 8017bc6:	d1f5      	bne.n	8017bb4 <__s2b+0x4c>
 8017bc8:	f1a5 0408 	sub.w	r4, r5, #8
 8017bcc:	444c      	add	r4, r9
 8017bce:	1b2d      	subs	r5, r5, r4
 8017bd0:	1963      	adds	r3, r4, r5
 8017bd2:	42bb      	cmp	r3, r7
 8017bd4:	db04      	blt.n	8017be0 <__s2b+0x78>
 8017bd6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017bda:	340a      	adds	r4, #10
 8017bdc:	2509      	movs	r5, #9
 8017bde:	e7f6      	b.n	8017bce <__s2b+0x66>
 8017be0:	f814 3b01 	ldrb.w	r3, [r4], #1
 8017be4:	4601      	mov	r1, r0
 8017be6:	3b30      	subs	r3, #48	; 0x30
 8017be8:	220a      	movs	r2, #10
 8017bea:	4630      	mov	r0, r6
 8017bec:	f7ff ff76 	bl	8017adc <__multadd>
 8017bf0:	e7ee      	b.n	8017bd0 <__s2b+0x68>
 8017bf2:	bf00      	nop
 8017bf4:	08025f51 	.word	0x08025f51
 8017bf8:	08025fd9 	.word	0x08025fd9

08017bfc <__hi0bits>:
 8017bfc:	0c03      	lsrs	r3, r0, #16
 8017bfe:	041b      	lsls	r3, r3, #16
 8017c00:	b9d3      	cbnz	r3, 8017c38 <__hi0bits+0x3c>
 8017c02:	0400      	lsls	r0, r0, #16
 8017c04:	2310      	movs	r3, #16
 8017c06:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8017c0a:	bf04      	itt	eq
 8017c0c:	0200      	lsleq	r0, r0, #8
 8017c0e:	3308      	addeq	r3, #8
 8017c10:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8017c14:	bf04      	itt	eq
 8017c16:	0100      	lsleq	r0, r0, #4
 8017c18:	3304      	addeq	r3, #4
 8017c1a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8017c1e:	bf04      	itt	eq
 8017c20:	0080      	lsleq	r0, r0, #2
 8017c22:	3302      	addeq	r3, #2
 8017c24:	2800      	cmp	r0, #0
 8017c26:	db05      	blt.n	8017c34 <__hi0bits+0x38>
 8017c28:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8017c2c:	f103 0301 	add.w	r3, r3, #1
 8017c30:	bf08      	it	eq
 8017c32:	2320      	moveq	r3, #32
 8017c34:	4618      	mov	r0, r3
 8017c36:	4770      	bx	lr
 8017c38:	2300      	movs	r3, #0
 8017c3a:	e7e4      	b.n	8017c06 <__hi0bits+0xa>

08017c3c <__lo0bits>:
 8017c3c:	6803      	ldr	r3, [r0, #0]
 8017c3e:	f013 0207 	ands.w	r2, r3, #7
 8017c42:	d00c      	beq.n	8017c5e <__lo0bits+0x22>
 8017c44:	07d9      	lsls	r1, r3, #31
 8017c46:	d422      	bmi.n	8017c8e <__lo0bits+0x52>
 8017c48:	079a      	lsls	r2, r3, #30
 8017c4a:	bf49      	itett	mi
 8017c4c:	085b      	lsrmi	r3, r3, #1
 8017c4e:	089b      	lsrpl	r3, r3, #2
 8017c50:	6003      	strmi	r3, [r0, #0]
 8017c52:	2201      	movmi	r2, #1
 8017c54:	bf5c      	itt	pl
 8017c56:	6003      	strpl	r3, [r0, #0]
 8017c58:	2202      	movpl	r2, #2
 8017c5a:	4610      	mov	r0, r2
 8017c5c:	4770      	bx	lr
 8017c5e:	b299      	uxth	r1, r3
 8017c60:	b909      	cbnz	r1, 8017c66 <__lo0bits+0x2a>
 8017c62:	0c1b      	lsrs	r3, r3, #16
 8017c64:	2210      	movs	r2, #16
 8017c66:	b2d9      	uxtb	r1, r3
 8017c68:	b909      	cbnz	r1, 8017c6e <__lo0bits+0x32>
 8017c6a:	3208      	adds	r2, #8
 8017c6c:	0a1b      	lsrs	r3, r3, #8
 8017c6e:	0719      	lsls	r1, r3, #28
 8017c70:	bf04      	itt	eq
 8017c72:	091b      	lsreq	r3, r3, #4
 8017c74:	3204      	addeq	r2, #4
 8017c76:	0799      	lsls	r1, r3, #30
 8017c78:	bf04      	itt	eq
 8017c7a:	089b      	lsreq	r3, r3, #2
 8017c7c:	3202      	addeq	r2, #2
 8017c7e:	07d9      	lsls	r1, r3, #31
 8017c80:	d403      	bmi.n	8017c8a <__lo0bits+0x4e>
 8017c82:	085b      	lsrs	r3, r3, #1
 8017c84:	f102 0201 	add.w	r2, r2, #1
 8017c88:	d003      	beq.n	8017c92 <__lo0bits+0x56>
 8017c8a:	6003      	str	r3, [r0, #0]
 8017c8c:	e7e5      	b.n	8017c5a <__lo0bits+0x1e>
 8017c8e:	2200      	movs	r2, #0
 8017c90:	e7e3      	b.n	8017c5a <__lo0bits+0x1e>
 8017c92:	2220      	movs	r2, #32
 8017c94:	e7e1      	b.n	8017c5a <__lo0bits+0x1e>
	...

08017c98 <__i2b>:
 8017c98:	b510      	push	{r4, lr}
 8017c9a:	460c      	mov	r4, r1
 8017c9c:	2101      	movs	r1, #1
 8017c9e:	f7ff febb 	bl	8017a18 <_Balloc>
 8017ca2:	4602      	mov	r2, r0
 8017ca4:	b928      	cbnz	r0, 8017cb2 <__i2b+0x1a>
 8017ca6:	4b05      	ldr	r3, [pc, #20]	; (8017cbc <__i2b+0x24>)
 8017ca8:	4805      	ldr	r0, [pc, #20]	; (8017cc0 <__i2b+0x28>)
 8017caa:	f240 1145 	movw	r1, #325	; 0x145
 8017cae:	f000 ff1d 	bl	8018aec <__assert_func>
 8017cb2:	2301      	movs	r3, #1
 8017cb4:	6144      	str	r4, [r0, #20]
 8017cb6:	6103      	str	r3, [r0, #16]
 8017cb8:	bd10      	pop	{r4, pc}
 8017cba:	bf00      	nop
 8017cbc:	08025f51 	.word	0x08025f51
 8017cc0:	08025fd9 	.word	0x08025fd9

08017cc4 <__multiply>:
 8017cc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017cc8:	4691      	mov	r9, r2
 8017cca:	690a      	ldr	r2, [r1, #16]
 8017ccc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8017cd0:	429a      	cmp	r2, r3
 8017cd2:	bfb8      	it	lt
 8017cd4:	460b      	movlt	r3, r1
 8017cd6:	460c      	mov	r4, r1
 8017cd8:	bfbc      	itt	lt
 8017cda:	464c      	movlt	r4, r9
 8017cdc:	4699      	movlt	r9, r3
 8017cde:	6927      	ldr	r7, [r4, #16]
 8017ce0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8017ce4:	68a3      	ldr	r3, [r4, #8]
 8017ce6:	6861      	ldr	r1, [r4, #4]
 8017ce8:	eb07 060a 	add.w	r6, r7, sl
 8017cec:	42b3      	cmp	r3, r6
 8017cee:	b085      	sub	sp, #20
 8017cf0:	bfb8      	it	lt
 8017cf2:	3101      	addlt	r1, #1
 8017cf4:	f7ff fe90 	bl	8017a18 <_Balloc>
 8017cf8:	b930      	cbnz	r0, 8017d08 <__multiply+0x44>
 8017cfa:	4602      	mov	r2, r0
 8017cfc:	4b44      	ldr	r3, [pc, #272]	; (8017e10 <__multiply+0x14c>)
 8017cfe:	4845      	ldr	r0, [pc, #276]	; (8017e14 <__multiply+0x150>)
 8017d00:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8017d04:	f000 fef2 	bl	8018aec <__assert_func>
 8017d08:	f100 0514 	add.w	r5, r0, #20
 8017d0c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8017d10:	462b      	mov	r3, r5
 8017d12:	2200      	movs	r2, #0
 8017d14:	4543      	cmp	r3, r8
 8017d16:	d321      	bcc.n	8017d5c <__multiply+0x98>
 8017d18:	f104 0314 	add.w	r3, r4, #20
 8017d1c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8017d20:	f109 0314 	add.w	r3, r9, #20
 8017d24:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8017d28:	9202      	str	r2, [sp, #8]
 8017d2a:	1b3a      	subs	r2, r7, r4
 8017d2c:	3a15      	subs	r2, #21
 8017d2e:	f022 0203 	bic.w	r2, r2, #3
 8017d32:	3204      	adds	r2, #4
 8017d34:	f104 0115 	add.w	r1, r4, #21
 8017d38:	428f      	cmp	r7, r1
 8017d3a:	bf38      	it	cc
 8017d3c:	2204      	movcc	r2, #4
 8017d3e:	9201      	str	r2, [sp, #4]
 8017d40:	9a02      	ldr	r2, [sp, #8]
 8017d42:	9303      	str	r3, [sp, #12]
 8017d44:	429a      	cmp	r2, r3
 8017d46:	d80c      	bhi.n	8017d62 <__multiply+0x9e>
 8017d48:	2e00      	cmp	r6, #0
 8017d4a:	dd03      	ble.n	8017d54 <__multiply+0x90>
 8017d4c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8017d50:	2b00      	cmp	r3, #0
 8017d52:	d05b      	beq.n	8017e0c <__multiply+0x148>
 8017d54:	6106      	str	r6, [r0, #16]
 8017d56:	b005      	add	sp, #20
 8017d58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017d5c:	f843 2b04 	str.w	r2, [r3], #4
 8017d60:	e7d8      	b.n	8017d14 <__multiply+0x50>
 8017d62:	f8b3 a000 	ldrh.w	sl, [r3]
 8017d66:	f1ba 0f00 	cmp.w	sl, #0
 8017d6a:	d024      	beq.n	8017db6 <__multiply+0xf2>
 8017d6c:	f104 0e14 	add.w	lr, r4, #20
 8017d70:	46a9      	mov	r9, r5
 8017d72:	f04f 0c00 	mov.w	ip, #0
 8017d76:	f85e 2b04 	ldr.w	r2, [lr], #4
 8017d7a:	f8d9 1000 	ldr.w	r1, [r9]
 8017d7e:	fa1f fb82 	uxth.w	fp, r2
 8017d82:	b289      	uxth	r1, r1
 8017d84:	fb0a 110b 	mla	r1, sl, fp, r1
 8017d88:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8017d8c:	f8d9 2000 	ldr.w	r2, [r9]
 8017d90:	4461      	add	r1, ip
 8017d92:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8017d96:	fb0a c20b 	mla	r2, sl, fp, ip
 8017d9a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8017d9e:	b289      	uxth	r1, r1
 8017da0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8017da4:	4577      	cmp	r7, lr
 8017da6:	f849 1b04 	str.w	r1, [r9], #4
 8017daa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8017dae:	d8e2      	bhi.n	8017d76 <__multiply+0xb2>
 8017db0:	9a01      	ldr	r2, [sp, #4]
 8017db2:	f845 c002 	str.w	ip, [r5, r2]
 8017db6:	9a03      	ldr	r2, [sp, #12]
 8017db8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8017dbc:	3304      	adds	r3, #4
 8017dbe:	f1b9 0f00 	cmp.w	r9, #0
 8017dc2:	d021      	beq.n	8017e08 <__multiply+0x144>
 8017dc4:	6829      	ldr	r1, [r5, #0]
 8017dc6:	f104 0c14 	add.w	ip, r4, #20
 8017dca:	46ae      	mov	lr, r5
 8017dcc:	f04f 0a00 	mov.w	sl, #0
 8017dd0:	f8bc b000 	ldrh.w	fp, [ip]
 8017dd4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8017dd8:	fb09 220b 	mla	r2, r9, fp, r2
 8017ddc:	4452      	add	r2, sl
 8017dde:	b289      	uxth	r1, r1
 8017de0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8017de4:	f84e 1b04 	str.w	r1, [lr], #4
 8017de8:	f85c 1b04 	ldr.w	r1, [ip], #4
 8017dec:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8017df0:	f8be 1000 	ldrh.w	r1, [lr]
 8017df4:	fb09 110a 	mla	r1, r9, sl, r1
 8017df8:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8017dfc:	4567      	cmp	r7, ip
 8017dfe:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8017e02:	d8e5      	bhi.n	8017dd0 <__multiply+0x10c>
 8017e04:	9a01      	ldr	r2, [sp, #4]
 8017e06:	50a9      	str	r1, [r5, r2]
 8017e08:	3504      	adds	r5, #4
 8017e0a:	e799      	b.n	8017d40 <__multiply+0x7c>
 8017e0c:	3e01      	subs	r6, #1
 8017e0e:	e79b      	b.n	8017d48 <__multiply+0x84>
 8017e10:	08025f51 	.word	0x08025f51
 8017e14:	08025fd9 	.word	0x08025fd9

08017e18 <__pow5mult>:
 8017e18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017e1c:	4615      	mov	r5, r2
 8017e1e:	f012 0203 	ands.w	r2, r2, #3
 8017e22:	4606      	mov	r6, r0
 8017e24:	460f      	mov	r7, r1
 8017e26:	d007      	beq.n	8017e38 <__pow5mult+0x20>
 8017e28:	4c25      	ldr	r4, [pc, #148]	; (8017ec0 <__pow5mult+0xa8>)
 8017e2a:	3a01      	subs	r2, #1
 8017e2c:	2300      	movs	r3, #0
 8017e2e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8017e32:	f7ff fe53 	bl	8017adc <__multadd>
 8017e36:	4607      	mov	r7, r0
 8017e38:	10ad      	asrs	r5, r5, #2
 8017e3a:	d03d      	beq.n	8017eb8 <__pow5mult+0xa0>
 8017e3c:	69f4      	ldr	r4, [r6, #28]
 8017e3e:	b97c      	cbnz	r4, 8017e60 <__pow5mult+0x48>
 8017e40:	2010      	movs	r0, #16
 8017e42:	f7fe f85b 	bl	8015efc <malloc>
 8017e46:	4602      	mov	r2, r0
 8017e48:	61f0      	str	r0, [r6, #28]
 8017e4a:	b928      	cbnz	r0, 8017e58 <__pow5mult+0x40>
 8017e4c:	4b1d      	ldr	r3, [pc, #116]	; (8017ec4 <__pow5mult+0xac>)
 8017e4e:	481e      	ldr	r0, [pc, #120]	; (8017ec8 <__pow5mult+0xb0>)
 8017e50:	f240 11b3 	movw	r1, #435	; 0x1b3
 8017e54:	f000 fe4a 	bl	8018aec <__assert_func>
 8017e58:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8017e5c:	6004      	str	r4, [r0, #0]
 8017e5e:	60c4      	str	r4, [r0, #12]
 8017e60:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8017e64:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8017e68:	b94c      	cbnz	r4, 8017e7e <__pow5mult+0x66>
 8017e6a:	f240 2171 	movw	r1, #625	; 0x271
 8017e6e:	4630      	mov	r0, r6
 8017e70:	f7ff ff12 	bl	8017c98 <__i2b>
 8017e74:	2300      	movs	r3, #0
 8017e76:	f8c8 0008 	str.w	r0, [r8, #8]
 8017e7a:	4604      	mov	r4, r0
 8017e7c:	6003      	str	r3, [r0, #0]
 8017e7e:	f04f 0900 	mov.w	r9, #0
 8017e82:	07eb      	lsls	r3, r5, #31
 8017e84:	d50a      	bpl.n	8017e9c <__pow5mult+0x84>
 8017e86:	4639      	mov	r1, r7
 8017e88:	4622      	mov	r2, r4
 8017e8a:	4630      	mov	r0, r6
 8017e8c:	f7ff ff1a 	bl	8017cc4 <__multiply>
 8017e90:	4639      	mov	r1, r7
 8017e92:	4680      	mov	r8, r0
 8017e94:	4630      	mov	r0, r6
 8017e96:	f7ff fdff 	bl	8017a98 <_Bfree>
 8017e9a:	4647      	mov	r7, r8
 8017e9c:	106d      	asrs	r5, r5, #1
 8017e9e:	d00b      	beq.n	8017eb8 <__pow5mult+0xa0>
 8017ea0:	6820      	ldr	r0, [r4, #0]
 8017ea2:	b938      	cbnz	r0, 8017eb4 <__pow5mult+0x9c>
 8017ea4:	4622      	mov	r2, r4
 8017ea6:	4621      	mov	r1, r4
 8017ea8:	4630      	mov	r0, r6
 8017eaa:	f7ff ff0b 	bl	8017cc4 <__multiply>
 8017eae:	6020      	str	r0, [r4, #0]
 8017eb0:	f8c0 9000 	str.w	r9, [r0]
 8017eb4:	4604      	mov	r4, r0
 8017eb6:	e7e4      	b.n	8017e82 <__pow5mult+0x6a>
 8017eb8:	4638      	mov	r0, r7
 8017eba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017ebe:	bf00      	nop
 8017ec0:	08026128 	.word	0x08026128
 8017ec4:	08025fc2 	.word	0x08025fc2
 8017ec8:	08025fd9 	.word	0x08025fd9

08017ecc <__lshift>:
 8017ecc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017ed0:	460c      	mov	r4, r1
 8017ed2:	6849      	ldr	r1, [r1, #4]
 8017ed4:	6923      	ldr	r3, [r4, #16]
 8017ed6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8017eda:	68a3      	ldr	r3, [r4, #8]
 8017edc:	4607      	mov	r7, r0
 8017ede:	4691      	mov	r9, r2
 8017ee0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8017ee4:	f108 0601 	add.w	r6, r8, #1
 8017ee8:	42b3      	cmp	r3, r6
 8017eea:	db0b      	blt.n	8017f04 <__lshift+0x38>
 8017eec:	4638      	mov	r0, r7
 8017eee:	f7ff fd93 	bl	8017a18 <_Balloc>
 8017ef2:	4605      	mov	r5, r0
 8017ef4:	b948      	cbnz	r0, 8017f0a <__lshift+0x3e>
 8017ef6:	4602      	mov	r2, r0
 8017ef8:	4b28      	ldr	r3, [pc, #160]	; (8017f9c <__lshift+0xd0>)
 8017efa:	4829      	ldr	r0, [pc, #164]	; (8017fa0 <__lshift+0xd4>)
 8017efc:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8017f00:	f000 fdf4 	bl	8018aec <__assert_func>
 8017f04:	3101      	adds	r1, #1
 8017f06:	005b      	lsls	r3, r3, #1
 8017f08:	e7ee      	b.n	8017ee8 <__lshift+0x1c>
 8017f0a:	2300      	movs	r3, #0
 8017f0c:	f100 0114 	add.w	r1, r0, #20
 8017f10:	f100 0210 	add.w	r2, r0, #16
 8017f14:	4618      	mov	r0, r3
 8017f16:	4553      	cmp	r3, sl
 8017f18:	db33      	blt.n	8017f82 <__lshift+0xb6>
 8017f1a:	6920      	ldr	r0, [r4, #16]
 8017f1c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8017f20:	f104 0314 	add.w	r3, r4, #20
 8017f24:	f019 091f 	ands.w	r9, r9, #31
 8017f28:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8017f2c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8017f30:	d02b      	beq.n	8017f8a <__lshift+0xbe>
 8017f32:	f1c9 0e20 	rsb	lr, r9, #32
 8017f36:	468a      	mov	sl, r1
 8017f38:	2200      	movs	r2, #0
 8017f3a:	6818      	ldr	r0, [r3, #0]
 8017f3c:	fa00 f009 	lsl.w	r0, r0, r9
 8017f40:	4310      	orrs	r0, r2
 8017f42:	f84a 0b04 	str.w	r0, [sl], #4
 8017f46:	f853 2b04 	ldr.w	r2, [r3], #4
 8017f4a:	459c      	cmp	ip, r3
 8017f4c:	fa22 f20e 	lsr.w	r2, r2, lr
 8017f50:	d8f3      	bhi.n	8017f3a <__lshift+0x6e>
 8017f52:	ebac 0304 	sub.w	r3, ip, r4
 8017f56:	3b15      	subs	r3, #21
 8017f58:	f023 0303 	bic.w	r3, r3, #3
 8017f5c:	3304      	adds	r3, #4
 8017f5e:	f104 0015 	add.w	r0, r4, #21
 8017f62:	4584      	cmp	ip, r0
 8017f64:	bf38      	it	cc
 8017f66:	2304      	movcc	r3, #4
 8017f68:	50ca      	str	r2, [r1, r3]
 8017f6a:	b10a      	cbz	r2, 8017f70 <__lshift+0xa4>
 8017f6c:	f108 0602 	add.w	r6, r8, #2
 8017f70:	3e01      	subs	r6, #1
 8017f72:	4638      	mov	r0, r7
 8017f74:	612e      	str	r6, [r5, #16]
 8017f76:	4621      	mov	r1, r4
 8017f78:	f7ff fd8e 	bl	8017a98 <_Bfree>
 8017f7c:	4628      	mov	r0, r5
 8017f7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017f82:	f842 0f04 	str.w	r0, [r2, #4]!
 8017f86:	3301      	adds	r3, #1
 8017f88:	e7c5      	b.n	8017f16 <__lshift+0x4a>
 8017f8a:	3904      	subs	r1, #4
 8017f8c:	f853 2b04 	ldr.w	r2, [r3], #4
 8017f90:	f841 2f04 	str.w	r2, [r1, #4]!
 8017f94:	459c      	cmp	ip, r3
 8017f96:	d8f9      	bhi.n	8017f8c <__lshift+0xc0>
 8017f98:	e7ea      	b.n	8017f70 <__lshift+0xa4>
 8017f9a:	bf00      	nop
 8017f9c:	08025f51 	.word	0x08025f51
 8017fa0:	08025fd9 	.word	0x08025fd9

08017fa4 <__mcmp>:
 8017fa4:	b530      	push	{r4, r5, lr}
 8017fa6:	6902      	ldr	r2, [r0, #16]
 8017fa8:	690c      	ldr	r4, [r1, #16]
 8017faa:	1b12      	subs	r2, r2, r4
 8017fac:	d10e      	bne.n	8017fcc <__mcmp+0x28>
 8017fae:	f100 0314 	add.w	r3, r0, #20
 8017fb2:	3114      	adds	r1, #20
 8017fb4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8017fb8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8017fbc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8017fc0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8017fc4:	42a5      	cmp	r5, r4
 8017fc6:	d003      	beq.n	8017fd0 <__mcmp+0x2c>
 8017fc8:	d305      	bcc.n	8017fd6 <__mcmp+0x32>
 8017fca:	2201      	movs	r2, #1
 8017fcc:	4610      	mov	r0, r2
 8017fce:	bd30      	pop	{r4, r5, pc}
 8017fd0:	4283      	cmp	r3, r0
 8017fd2:	d3f3      	bcc.n	8017fbc <__mcmp+0x18>
 8017fd4:	e7fa      	b.n	8017fcc <__mcmp+0x28>
 8017fd6:	f04f 32ff 	mov.w	r2, #4294967295
 8017fda:	e7f7      	b.n	8017fcc <__mcmp+0x28>

08017fdc <__mdiff>:
 8017fdc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017fe0:	460c      	mov	r4, r1
 8017fe2:	4606      	mov	r6, r0
 8017fe4:	4611      	mov	r1, r2
 8017fe6:	4620      	mov	r0, r4
 8017fe8:	4690      	mov	r8, r2
 8017fea:	f7ff ffdb 	bl	8017fa4 <__mcmp>
 8017fee:	1e05      	subs	r5, r0, #0
 8017ff0:	d110      	bne.n	8018014 <__mdiff+0x38>
 8017ff2:	4629      	mov	r1, r5
 8017ff4:	4630      	mov	r0, r6
 8017ff6:	f7ff fd0f 	bl	8017a18 <_Balloc>
 8017ffa:	b930      	cbnz	r0, 801800a <__mdiff+0x2e>
 8017ffc:	4b3a      	ldr	r3, [pc, #232]	; (80180e8 <__mdiff+0x10c>)
 8017ffe:	4602      	mov	r2, r0
 8018000:	f240 2137 	movw	r1, #567	; 0x237
 8018004:	4839      	ldr	r0, [pc, #228]	; (80180ec <__mdiff+0x110>)
 8018006:	f000 fd71 	bl	8018aec <__assert_func>
 801800a:	2301      	movs	r3, #1
 801800c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8018010:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018014:	bfa4      	itt	ge
 8018016:	4643      	movge	r3, r8
 8018018:	46a0      	movge	r8, r4
 801801a:	4630      	mov	r0, r6
 801801c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8018020:	bfa6      	itte	ge
 8018022:	461c      	movge	r4, r3
 8018024:	2500      	movge	r5, #0
 8018026:	2501      	movlt	r5, #1
 8018028:	f7ff fcf6 	bl	8017a18 <_Balloc>
 801802c:	b920      	cbnz	r0, 8018038 <__mdiff+0x5c>
 801802e:	4b2e      	ldr	r3, [pc, #184]	; (80180e8 <__mdiff+0x10c>)
 8018030:	4602      	mov	r2, r0
 8018032:	f240 2145 	movw	r1, #581	; 0x245
 8018036:	e7e5      	b.n	8018004 <__mdiff+0x28>
 8018038:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801803c:	6926      	ldr	r6, [r4, #16]
 801803e:	60c5      	str	r5, [r0, #12]
 8018040:	f104 0914 	add.w	r9, r4, #20
 8018044:	f108 0514 	add.w	r5, r8, #20
 8018048:	f100 0e14 	add.w	lr, r0, #20
 801804c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8018050:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8018054:	f108 0210 	add.w	r2, r8, #16
 8018058:	46f2      	mov	sl, lr
 801805a:	2100      	movs	r1, #0
 801805c:	f859 3b04 	ldr.w	r3, [r9], #4
 8018060:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8018064:	fa11 f88b 	uxtah	r8, r1, fp
 8018068:	b299      	uxth	r1, r3
 801806a:	0c1b      	lsrs	r3, r3, #16
 801806c:	eba8 0801 	sub.w	r8, r8, r1
 8018070:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8018074:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8018078:	fa1f f888 	uxth.w	r8, r8
 801807c:	1419      	asrs	r1, r3, #16
 801807e:	454e      	cmp	r6, r9
 8018080:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8018084:	f84a 3b04 	str.w	r3, [sl], #4
 8018088:	d8e8      	bhi.n	801805c <__mdiff+0x80>
 801808a:	1b33      	subs	r3, r6, r4
 801808c:	3b15      	subs	r3, #21
 801808e:	f023 0303 	bic.w	r3, r3, #3
 8018092:	3304      	adds	r3, #4
 8018094:	3415      	adds	r4, #21
 8018096:	42a6      	cmp	r6, r4
 8018098:	bf38      	it	cc
 801809a:	2304      	movcc	r3, #4
 801809c:	441d      	add	r5, r3
 801809e:	4473      	add	r3, lr
 80180a0:	469e      	mov	lr, r3
 80180a2:	462e      	mov	r6, r5
 80180a4:	4566      	cmp	r6, ip
 80180a6:	d30e      	bcc.n	80180c6 <__mdiff+0xea>
 80180a8:	f10c 0203 	add.w	r2, ip, #3
 80180ac:	1b52      	subs	r2, r2, r5
 80180ae:	f022 0203 	bic.w	r2, r2, #3
 80180b2:	3d03      	subs	r5, #3
 80180b4:	45ac      	cmp	ip, r5
 80180b6:	bf38      	it	cc
 80180b8:	2200      	movcc	r2, #0
 80180ba:	4413      	add	r3, r2
 80180bc:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80180c0:	b17a      	cbz	r2, 80180e2 <__mdiff+0x106>
 80180c2:	6107      	str	r7, [r0, #16]
 80180c4:	e7a4      	b.n	8018010 <__mdiff+0x34>
 80180c6:	f856 8b04 	ldr.w	r8, [r6], #4
 80180ca:	fa11 f288 	uxtah	r2, r1, r8
 80180ce:	1414      	asrs	r4, r2, #16
 80180d0:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80180d4:	b292      	uxth	r2, r2
 80180d6:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80180da:	f84e 2b04 	str.w	r2, [lr], #4
 80180de:	1421      	asrs	r1, r4, #16
 80180e0:	e7e0      	b.n	80180a4 <__mdiff+0xc8>
 80180e2:	3f01      	subs	r7, #1
 80180e4:	e7ea      	b.n	80180bc <__mdiff+0xe0>
 80180e6:	bf00      	nop
 80180e8:	08025f51 	.word	0x08025f51
 80180ec:	08025fd9 	.word	0x08025fd9

080180f0 <__ulp>:
 80180f0:	b082      	sub	sp, #8
 80180f2:	ed8d 0b00 	vstr	d0, [sp]
 80180f6:	9a01      	ldr	r2, [sp, #4]
 80180f8:	4b0f      	ldr	r3, [pc, #60]	; (8018138 <__ulp+0x48>)
 80180fa:	4013      	ands	r3, r2
 80180fc:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8018100:	2b00      	cmp	r3, #0
 8018102:	dc08      	bgt.n	8018116 <__ulp+0x26>
 8018104:	425b      	negs	r3, r3
 8018106:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 801810a:	ea4f 5223 	mov.w	r2, r3, asr #20
 801810e:	da04      	bge.n	801811a <__ulp+0x2a>
 8018110:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8018114:	4113      	asrs	r3, r2
 8018116:	2200      	movs	r2, #0
 8018118:	e008      	b.n	801812c <__ulp+0x3c>
 801811a:	f1a2 0314 	sub.w	r3, r2, #20
 801811e:	2b1e      	cmp	r3, #30
 8018120:	bfda      	itte	le
 8018122:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8018126:	40da      	lsrle	r2, r3
 8018128:	2201      	movgt	r2, #1
 801812a:	2300      	movs	r3, #0
 801812c:	4619      	mov	r1, r3
 801812e:	4610      	mov	r0, r2
 8018130:	ec41 0b10 	vmov	d0, r0, r1
 8018134:	b002      	add	sp, #8
 8018136:	4770      	bx	lr
 8018138:	7ff00000 	.word	0x7ff00000

0801813c <__b2d>:
 801813c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018140:	6906      	ldr	r6, [r0, #16]
 8018142:	f100 0814 	add.w	r8, r0, #20
 8018146:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 801814a:	1f37      	subs	r7, r6, #4
 801814c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8018150:	4610      	mov	r0, r2
 8018152:	f7ff fd53 	bl	8017bfc <__hi0bits>
 8018156:	f1c0 0320 	rsb	r3, r0, #32
 801815a:	280a      	cmp	r0, #10
 801815c:	600b      	str	r3, [r1, #0]
 801815e:	491b      	ldr	r1, [pc, #108]	; (80181cc <__b2d+0x90>)
 8018160:	dc15      	bgt.n	801818e <__b2d+0x52>
 8018162:	f1c0 0c0b 	rsb	ip, r0, #11
 8018166:	fa22 f30c 	lsr.w	r3, r2, ip
 801816a:	45b8      	cmp	r8, r7
 801816c:	ea43 0501 	orr.w	r5, r3, r1
 8018170:	bf34      	ite	cc
 8018172:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8018176:	2300      	movcs	r3, #0
 8018178:	3015      	adds	r0, #21
 801817a:	fa02 f000 	lsl.w	r0, r2, r0
 801817e:	fa23 f30c 	lsr.w	r3, r3, ip
 8018182:	4303      	orrs	r3, r0
 8018184:	461c      	mov	r4, r3
 8018186:	ec45 4b10 	vmov	d0, r4, r5
 801818a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801818e:	45b8      	cmp	r8, r7
 8018190:	bf3a      	itte	cc
 8018192:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8018196:	f1a6 0708 	subcc.w	r7, r6, #8
 801819a:	2300      	movcs	r3, #0
 801819c:	380b      	subs	r0, #11
 801819e:	d012      	beq.n	80181c6 <__b2d+0x8a>
 80181a0:	f1c0 0120 	rsb	r1, r0, #32
 80181a4:	fa23 f401 	lsr.w	r4, r3, r1
 80181a8:	4082      	lsls	r2, r0
 80181aa:	4322      	orrs	r2, r4
 80181ac:	4547      	cmp	r7, r8
 80181ae:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 80181b2:	bf8c      	ite	hi
 80181b4:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 80181b8:	2200      	movls	r2, #0
 80181ba:	4083      	lsls	r3, r0
 80181bc:	40ca      	lsrs	r2, r1
 80181be:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80181c2:	4313      	orrs	r3, r2
 80181c4:	e7de      	b.n	8018184 <__b2d+0x48>
 80181c6:	ea42 0501 	orr.w	r5, r2, r1
 80181ca:	e7db      	b.n	8018184 <__b2d+0x48>
 80181cc:	3ff00000 	.word	0x3ff00000

080181d0 <__d2b>:
 80181d0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80181d4:	460f      	mov	r7, r1
 80181d6:	2101      	movs	r1, #1
 80181d8:	ec59 8b10 	vmov	r8, r9, d0
 80181dc:	4616      	mov	r6, r2
 80181de:	f7ff fc1b 	bl	8017a18 <_Balloc>
 80181e2:	4604      	mov	r4, r0
 80181e4:	b930      	cbnz	r0, 80181f4 <__d2b+0x24>
 80181e6:	4602      	mov	r2, r0
 80181e8:	4b24      	ldr	r3, [pc, #144]	; (801827c <__d2b+0xac>)
 80181ea:	4825      	ldr	r0, [pc, #148]	; (8018280 <__d2b+0xb0>)
 80181ec:	f240 310f 	movw	r1, #783	; 0x30f
 80181f0:	f000 fc7c 	bl	8018aec <__assert_func>
 80181f4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80181f8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80181fc:	bb2d      	cbnz	r5, 801824a <__d2b+0x7a>
 80181fe:	9301      	str	r3, [sp, #4]
 8018200:	f1b8 0300 	subs.w	r3, r8, #0
 8018204:	d026      	beq.n	8018254 <__d2b+0x84>
 8018206:	4668      	mov	r0, sp
 8018208:	9300      	str	r3, [sp, #0]
 801820a:	f7ff fd17 	bl	8017c3c <__lo0bits>
 801820e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8018212:	b1e8      	cbz	r0, 8018250 <__d2b+0x80>
 8018214:	f1c0 0320 	rsb	r3, r0, #32
 8018218:	fa02 f303 	lsl.w	r3, r2, r3
 801821c:	430b      	orrs	r3, r1
 801821e:	40c2      	lsrs	r2, r0
 8018220:	6163      	str	r3, [r4, #20]
 8018222:	9201      	str	r2, [sp, #4]
 8018224:	9b01      	ldr	r3, [sp, #4]
 8018226:	61a3      	str	r3, [r4, #24]
 8018228:	2b00      	cmp	r3, #0
 801822a:	bf14      	ite	ne
 801822c:	2202      	movne	r2, #2
 801822e:	2201      	moveq	r2, #1
 8018230:	6122      	str	r2, [r4, #16]
 8018232:	b1bd      	cbz	r5, 8018264 <__d2b+0x94>
 8018234:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8018238:	4405      	add	r5, r0
 801823a:	603d      	str	r5, [r7, #0]
 801823c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8018240:	6030      	str	r0, [r6, #0]
 8018242:	4620      	mov	r0, r4
 8018244:	b003      	add	sp, #12
 8018246:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801824a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801824e:	e7d6      	b.n	80181fe <__d2b+0x2e>
 8018250:	6161      	str	r1, [r4, #20]
 8018252:	e7e7      	b.n	8018224 <__d2b+0x54>
 8018254:	a801      	add	r0, sp, #4
 8018256:	f7ff fcf1 	bl	8017c3c <__lo0bits>
 801825a:	9b01      	ldr	r3, [sp, #4]
 801825c:	6163      	str	r3, [r4, #20]
 801825e:	3020      	adds	r0, #32
 8018260:	2201      	movs	r2, #1
 8018262:	e7e5      	b.n	8018230 <__d2b+0x60>
 8018264:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8018268:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801826c:	6038      	str	r0, [r7, #0]
 801826e:	6918      	ldr	r0, [r3, #16]
 8018270:	f7ff fcc4 	bl	8017bfc <__hi0bits>
 8018274:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8018278:	e7e2      	b.n	8018240 <__d2b+0x70>
 801827a:	bf00      	nop
 801827c:	08025f51 	.word	0x08025f51
 8018280:	08025fd9 	.word	0x08025fd9

08018284 <__ratio>:
 8018284:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018288:	4688      	mov	r8, r1
 801828a:	4669      	mov	r1, sp
 801828c:	4681      	mov	r9, r0
 801828e:	f7ff ff55 	bl	801813c <__b2d>
 8018292:	a901      	add	r1, sp, #4
 8018294:	4640      	mov	r0, r8
 8018296:	ec55 4b10 	vmov	r4, r5, d0
 801829a:	f7ff ff4f 	bl	801813c <__b2d>
 801829e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80182a2:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80182a6:	eba3 0c02 	sub.w	ip, r3, r2
 80182aa:	e9dd 3200 	ldrd	r3, r2, [sp]
 80182ae:	1a9b      	subs	r3, r3, r2
 80182b0:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80182b4:	ec51 0b10 	vmov	r0, r1, d0
 80182b8:	2b00      	cmp	r3, #0
 80182ba:	bfd6      	itet	le
 80182bc:	460a      	movle	r2, r1
 80182be:	462a      	movgt	r2, r5
 80182c0:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80182c4:	468b      	mov	fp, r1
 80182c6:	462f      	mov	r7, r5
 80182c8:	bfd4      	ite	le
 80182ca:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80182ce:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80182d2:	4620      	mov	r0, r4
 80182d4:	ee10 2a10 	vmov	r2, s0
 80182d8:	465b      	mov	r3, fp
 80182da:	4639      	mov	r1, r7
 80182dc:	f7e8 fac6 	bl	800086c <__aeabi_ddiv>
 80182e0:	ec41 0b10 	vmov	d0, r0, r1
 80182e4:	b003      	add	sp, #12
 80182e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080182ea <__copybits>:
 80182ea:	3901      	subs	r1, #1
 80182ec:	b570      	push	{r4, r5, r6, lr}
 80182ee:	1149      	asrs	r1, r1, #5
 80182f0:	6914      	ldr	r4, [r2, #16]
 80182f2:	3101      	adds	r1, #1
 80182f4:	f102 0314 	add.w	r3, r2, #20
 80182f8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80182fc:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8018300:	1f05      	subs	r5, r0, #4
 8018302:	42a3      	cmp	r3, r4
 8018304:	d30c      	bcc.n	8018320 <__copybits+0x36>
 8018306:	1aa3      	subs	r3, r4, r2
 8018308:	3b11      	subs	r3, #17
 801830a:	f023 0303 	bic.w	r3, r3, #3
 801830e:	3211      	adds	r2, #17
 8018310:	42a2      	cmp	r2, r4
 8018312:	bf88      	it	hi
 8018314:	2300      	movhi	r3, #0
 8018316:	4418      	add	r0, r3
 8018318:	2300      	movs	r3, #0
 801831a:	4288      	cmp	r0, r1
 801831c:	d305      	bcc.n	801832a <__copybits+0x40>
 801831e:	bd70      	pop	{r4, r5, r6, pc}
 8018320:	f853 6b04 	ldr.w	r6, [r3], #4
 8018324:	f845 6f04 	str.w	r6, [r5, #4]!
 8018328:	e7eb      	b.n	8018302 <__copybits+0x18>
 801832a:	f840 3b04 	str.w	r3, [r0], #4
 801832e:	e7f4      	b.n	801831a <__copybits+0x30>

08018330 <__any_on>:
 8018330:	f100 0214 	add.w	r2, r0, #20
 8018334:	6900      	ldr	r0, [r0, #16]
 8018336:	114b      	asrs	r3, r1, #5
 8018338:	4298      	cmp	r0, r3
 801833a:	b510      	push	{r4, lr}
 801833c:	db11      	blt.n	8018362 <__any_on+0x32>
 801833e:	dd0a      	ble.n	8018356 <__any_on+0x26>
 8018340:	f011 011f 	ands.w	r1, r1, #31
 8018344:	d007      	beq.n	8018356 <__any_on+0x26>
 8018346:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801834a:	fa24 f001 	lsr.w	r0, r4, r1
 801834e:	fa00 f101 	lsl.w	r1, r0, r1
 8018352:	428c      	cmp	r4, r1
 8018354:	d10b      	bne.n	801836e <__any_on+0x3e>
 8018356:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801835a:	4293      	cmp	r3, r2
 801835c:	d803      	bhi.n	8018366 <__any_on+0x36>
 801835e:	2000      	movs	r0, #0
 8018360:	bd10      	pop	{r4, pc}
 8018362:	4603      	mov	r3, r0
 8018364:	e7f7      	b.n	8018356 <__any_on+0x26>
 8018366:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801836a:	2900      	cmp	r1, #0
 801836c:	d0f5      	beq.n	801835a <__any_on+0x2a>
 801836e:	2001      	movs	r0, #1
 8018370:	e7f6      	b.n	8018360 <__any_on+0x30>

08018372 <__ascii_wctomb>:
 8018372:	b149      	cbz	r1, 8018388 <__ascii_wctomb+0x16>
 8018374:	2aff      	cmp	r2, #255	; 0xff
 8018376:	bf85      	ittet	hi
 8018378:	238a      	movhi	r3, #138	; 0x8a
 801837a:	6003      	strhi	r3, [r0, #0]
 801837c:	700a      	strbls	r2, [r1, #0]
 801837e:	f04f 30ff 	movhi.w	r0, #4294967295
 8018382:	bf98      	it	ls
 8018384:	2001      	movls	r0, #1
 8018386:	4770      	bx	lr
 8018388:	4608      	mov	r0, r1
 801838a:	4770      	bx	lr

0801838c <__ssputs_r>:
 801838c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018390:	688e      	ldr	r6, [r1, #8]
 8018392:	461f      	mov	r7, r3
 8018394:	42be      	cmp	r6, r7
 8018396:	680b      	ldr	r3, [r1, #0]
 8018398:	4682      	mov	sl, r0
 801839a:	460c      	mov	r4, r1
 801839c:	4690      	mov	r8, r2
 801839e:	d82c      	bhi.n	80183fa <__ssputs_r+0x6e>
 80183a0:	898a      	ldrh	r2, [r1, #12]
 80183a2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80183a6:	d026      	beq.n	80183f6 <__ssputs_r+0x6a>
 80183a8:	6965      	ldr	r5, [r4, #20]
 80183aa:	6909      	ldr	r1, [r1, #16]
 80183ac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80183b0:	eba3 0901 	sub.w	r9, r3, r1
 80183b4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80183b8:	1c7b      	adds	r3, r7, #1
 80183ba:	444b      	add	r3, r9
 80183bc:	106d      	asrs	r5, r5, #1
 80183be:	429d      	cmp	r5, r3
 80183c0:	bf38      	it	cc
 80183c2:	461d      	movcc	r5, r3
 80183c4:	0553      	lsls	r3, r2, #21
 80183c6:	d527      	bpl.n	8018418 <__ssputs_r+0x8c>
 80183c8:	4629      	mov	r1, r5
 80183ca:	f7fd fdc7 	bl	8015f5c <_malloc_r>
 80183ce:	4606      	mov	r6, r0
 80183d0:	b360      	cbz	r0, 801842c <__ssputs_r+0xa0>
 80183d2:	6921      	ldr	r1, [r4, #16]
 80183d4:	464a      	mov	r2, r9
 80183d6:	f7fe ff4c 	bl	8017272 <memcpy>
 80183da:	89a3      	ldrh	r3, [r4, #12]
 80183dc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80183e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80183e4:	81a3      	strh	r3, [r4, #12]
 80183e6:	6126      	str	r6, [r4, #16]
 80183e8:	6165      	str	r5, [r4, #20]
 80183ea:	444e      	add	r6, r9
 80183ec:	eba5 0509 	sub.w	r5, r5, r9
 80183f0:	6026      	str	r6, [r4, #0]
 80183f2:	60a5      	str	r5, [r4, #8]
 80183f4:	463e      	mov	r6, r7
 80183f6:	42be      	cmp	r6, r7
 80183f8:	d900      	bls.n	80183fc <__ssputs_r+0x70>
 80183fa:	463e      	mov	r6, r7
 80183fc:	6820      	ldr	r0, [r4, #0]
 80183fe:	4632      	mov	r2, r6
 8018400:	4641      	mov	r1, r8
 8018402:	f000 fb59 	bl	8018ab8 <memmove>
 8018406:	68a3      	ldr	r3, [r4, #8]
 8018408:	1b9b      	subs	r3, r3, r6
 801840a:	60a3      	str	r3, [r4, #8]
 801840c:	6823      	ldr	r3, [r4, #0]
 801840e:	4433      	add	r3, r6
 8018410:	6023      	str	r3, [r4, #0]
 8018412:	2000      	movs	r0, #0
 8018414:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018418:	462a      	mov	r2, r5
 801841a:	f000 fb9b 	bl	8018b54 <_realloc_r>
 801841e:	4606      	mov	r6, r0
 8018420:	2800      	cmp	r0, #0
 8018422:	d1e0      	bne.n	80183e6 <__ssputs_r+0x5a>
 8018424:	6921      	ldr	r1, [r4, #16]
 8018426:	4650      	mov	r0, sl
 8018428:	f7fe ff40 	bl	80172ac <_free_r>
 801842c:	230c      	movs	r3, #12
 801842e:	f8ca 3000 	str.w	r3, [sl]
 8018432:	89a3      	ldrh	r3, [r4, #12]
 8018434:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018438:	81a3      	strh	r3, [r4, #12]
 801843a:	f04f 30ff 	mov.w	r0, #4294967295
 801843e:	e7e9      	b.n	8018414 <__ssputs_r+0x88>

08018440 <_svfiprintf_r>:
 8018440:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018444:	4698      	mov	r8, r3
 8018446:	898b      	ldrh	r3, [r1, #12]
 8018448:	061b      	lsls	r3, r3, #24
 801844a:	b09d      	sub	sp, #116	; 0x74
 801844c:	4607      	mov	r7, r0
 801844e:	460d      	mov	r5, r1
 8018450:	4614      	mov	r4, r2
 8018452:	d50e      	bpl.n	8018472 <_svfiprintf_r+0x32>
 8018454:	690b      	ldr	r3, [r1, #16]
 8018456:	b963      	cbnz	r3, 8018472 <_svfiprintf_r+0x32>
 8018458:	2140      	movs	r1, #64	; 0x40
 801845a:	f7fd fd7f 	bl	8015f5c <_malloc_r>
 801845e:	6028      	str	r0, [r5, #0]
 8018460:	6128      	str	r0, [r5, #16]
 8018462:	b920      	cbnz	r0, 801846e <_svfiprintf_r+0x2e>
 8018464:	230c      	movs	r3, #12
 8018466:	603b      	str	r3, [r7, #0]
 8018468:	f04f 30ff 	mov.w	r0, #4294967295
 801846c:	e0d0      	b.n	8018610 <_svfiprintf_r+0x1d0>
 801846e:	2340      	movs	r3, #64	; 0x40
 8018470:	616b      	str	r3, [r5, #20]
 8018472:	2300      	movs	r3, #0
 8018474:	9309      	str	r3, [sp, #36]	; 0x24
 8018476:	2320      	movs	r3, #32
 8018478:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801847c:	f8cd 800c 	str.w	r8, [sp, #12]
 8018480:	2330      	movs	r3, #48	; 0x30
 8018482:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8018628 <_svfiprintf_r+0x1e8>
 8018486:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801848a:	f04f 0901 	mov.w	r9, #1
 801848e:	4623      	mov	r3, r4
 8018490:	469a      	mov	sl, r3
 8018492:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018496:	b10a      	cbz	r2, 801849c <_svfiprintf_r+0x5c>
 8018498:	2a25      	cmp	r2, #37	; 0x25
 801849a:	d1f9      	bne.n	8018490 <_svfiprintf_r+0x50>
 801849c:	ebba 0b04 	subs.w	fp, sl, r4
 80184a0:	d00b      	beq.n	80184ba <_svfiprintf_r+0x7a>
 80184a2:	465b      	mov	r3, fp
 80184a4:	4622      	mov	r2, r4
 80184a6:	4629      	mov	r1, r5
 80184a8:	4638      	mov	r0, r7
 80184aa:	f7ff ff6f 	bl	801838c <__ssputs_r>
 80184ae:	3001      	adds	r0, #1
 80184b0:	f000 80a9 	beq.w	8018606 <_svfiprintf_r+0x1c6>
 80184b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80184b6:	445a      	add	r2, fp
 80184b8:	9209      	str	r2, [sp, #36]	; 0x24
 80184ba:	f89a 3000 	ldrb.w	r3, [sl]
 80184be:	2b00      	cmp	r3, #0
 80184c0:	f000 80a1 	beq.w	8018606 <_svfiprintf_r+0x1c6>
 80184c4:	2300      	movs	r3, #0
 80184c6:	f04f 32ff 	mov.w	r2, #4294967295
 80184ca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80184ce:	f10a 0a01 	add.w	sl, sl, #1
 80184d2:	9304      	str	r3, [sp, #16]
 80184d4:	9307      	str	r3, [sp, #28]
 80184d6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80184da:	931a      	str	r3, [sp, #104]	; 0x68
 80184dc:	4654      	mov	r4, sl
 80184de:	2205      	movs	r2, #5
 80184e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80184e4:	4850      	ldr	r0, [pc, #320]	; (8018628 <_svfiprintf_r+0x1e8>)
 80184e6:	f7e7 fe8b 	bl	8000200 <memchr>
 80184ea:	9a04      	ldr	r2, [sp, #16]
 80184ec:	b9d8      	cbnz	r0, 8018526 <_svfiprintf_r+0xe6>
 80184ee:	06d0      	lsls	r0, r2, #27
 80184f0:	bf44      	itt	mi
 80184f2:	2320      	movmi	r3, #32
 80184f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80184f8:	0711      	lsls	r1, r2, #28
 80184fa:	bf44      	itt	mi
 80184fc:	232b      	movmi	r3, #43	; 0x2b
 80184fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8018502:	f89a 3000 	ldrb.w	r3, [sl]
 8018506:	2b2a      	cmp	r3, #42	; 0x2a
 8018508:	d015      	beq.n	8018536 <_svfiprintf_r+0xf6>
 801850a:	9a07      	ldr	r2, [sp, #28]
 801850c:	4654      	mov	r4, sl
 801850e:	2000      	movs	r0, #0
 8018510:	f04f 0c0a 	mov.w	ip, #10
 8018514:	4621      	mov	r1, r4
 8018516:	f811 3b01 	ldrb.w	r3, [r1], #1
 801851a:	3b30      	subs	r3, #48	; 0x30
 801851c:	2b09      	cmp	r3, #9
 801851e:	d94d      	bls.n	80185bc <_svfiprintf_r+0x17c>
 8018520:	b1b0      	cbz	r0, 8018550 <_svfiprintf_r+0x110>
 8018522:	9207      	str	r2, [sp, #28]
 8018524:	e014      	b.n	8018550 <_svfiprintf_r+0x110>
 8018526:	eba0 0308 	sub.w	r3, r0, r8
 801852a:	fa09 f303 	lsl.w	r3, r9, r3
 801852e:	4313      	orrs	r3, r2
 8018530:	9304      	str	r3, [sp, #16]
 8018532:	46a2      	mov	sl, r4
 8018534:	e7d2      	b.n	80184dc <_svfiprintf_r+0x9c>
 8018536:	9b03      	ldr	r3, [sp, #12]
 8018538:	1d19      	adds	r1, r3, #4
 801853a:	681b      	ldr	r3, [r3, #0]
 801853c:	9103      	str	r1, [sp, #12]
 801853e:	2b00      	cmp	r3, #0
 8018540:	bfbb      	ittet	lt
 8018542:	425b      	neglt	r3, r3
 8018544:	f042 0202 	orrlt.w	r2, r2, #2
 8018548:	9307      	strge	r3, [sp, #28]
 801854a:	9307      	strlt	r3, [sp, #28]
 801854c:	bfb8      	it	lt
 801854e:	9204      	strlt	r2, [sp, #16]
 8018550:	7823      	ldrb	r3, [r4, #0]
 8018552:	2b2e      	cmp	r3, #46	; 0x2e
 8018554:	d10c      	bne.n	8018570 <_svfiprintf_r+0x130>
 8018556:	7863      	ldrb	r3, [r4, #1]
 8018558:	2b2a      	cmp	r3, #42	; 0x2a
 801855a:	d134      	bne.n	80185c6 <_svfiprintf_r+0x186>
 801855c:	9b03      	ldr	r3, [sp, #12]
 801855e:	1d1a      	adds	r2, r3, #4
 8018560:	681b      	ldr	r3, [r3, #0]
 8018562:	9203      	str	r2, [sp, #12]
 8018564:	2b00      	cmp	r3, #0
 8018566:	bfb8      	it	lt
 8018568:	f04f 33ff 	movlt.w	r3, #4294967295
 801856c:	3402      	adds	r4, #2
 801856e:	9305      	str	r3, [sp, #20]
 8018570:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8018638 <_svfiprintf_r+0x1f8>
 8018574:	7821      	ldrb	r1, [r4, #0]
 8018576:	2203      	movs	r2, #3
 8018578:	4650      	mov	r0, sl
 801857a:	f7e7 fe41 	bl	8000200 <memchr>
 801857e:	b138      	cbz	r0, 8018590 <_svfiprintf_r+0x150>
 8018580:	9b04      	ldr	r3, [sp, #16]
 8018582:	eba0 000a 	sub.w	r0, r0, sl
 8018586:	2240      	movs	r2, #64	; 0x40
 8018588:	4082      	lsls	r2, r0
 801858a:	4313      	orrs	r3, r2
 801858c:	3401      	adds	r4, #1
 801858e:	9304      	str	r3, [sp, #16]
 8018590:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018594:	4825      	ldr	r0, [pc, #148]	; (801862c <_svfiprintf_r+0x1ec>)
 8018596:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801859a:	2206      	movs	r2, #6
 801859c:	f7e7 fe30 	bl	8000200 <memchr>
 80185a0:	2800      	cmp	r0, #0
 80185a2:	d038      	beq.n	8018616 <_svfiprintf_r+0x1d6>
 80185a4:	4b22      	ldr	r3, [pc, #136]	; (8018630 <_svfiprintf_r+0x1f0>)
 80185a6:	bb1b      	cbnz	r3, 80185f0 <_svfiprintf_r+0x1b0>
 80185a8:	9b03      	ldr	r3, [sp, #12]
 80185aa:	3307      	adds	r3, #7
 80185ac:	f023 0307 	bic.w	r3, r3, #7
 80185b0:	3308      	adds	r3, #8
 80185b2:	9303      	str	r3, [sp, #12]
 80185b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80185b6:	4433      	add	r3, r6
 80185b8:	9309      	str	r3, [sp, #36]	; 0x24
 80185ba:	e768      	b.n	801848e <_svfiprintf_r+0x4e>
 80185bc:	fb0c 3202 	mla	r2, ip, r2, r3
 80185c0:	460c      	mov	r4, r1
 80185c2:	2001      	movs	r0, #1
 80185c4:	e7a6      	b.n	8018514 <_svfiprintf_r+0xd4>
 80185c6:	2300      	movs	r3, #0
 80185c8:	3401      	adds	r4, #1
 80185ca:	9305      	str	r3, [sp, #20]
 80185cc:	4619      	mov	r1, r3
 80185ce:	f04f 0c0a 	mov.w	ip, #10
 80185d2:	4620      	mov	r0, r4
 80185d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80185d8:	3a30      	subs	r2, #48	; 0x30
 80185da:	2a09      	cmp	r2, #9
 80185dc:	d903      	bls.n	80185e6 <_svfiprintf_r+0x1a6>
 80185de:	2b00      	cmp	r3, #0
 80185e0:	d0c6      	beq.n	8018570 <_svfiprintf_r+0x130>
 80185e2:	9105      	str	r1, [sp, #20]
 80185e4:	e7c4      	b.n	8018570 <_svfiprintf_r+0x130>
 80185e6:	fb0c 2101 	mla	r1, ip, r1, r2
 80185ea:	4604      	mov	r4, r0
 80185ec:	2301      	movs	r3, #1
 80185ee:	e7f0      	b.n	80185d2 <_svfiprintf_r+0x192>
 80185f0:	ab03      	add	r3, sp, #12
 80185f2:	9300      	str	r3, [sp, #0]
 80185f4:	462a      	mov	r2, r5
 80185f6:	4b0f      	ldr	r3, [pc, #60]	; (8018634 <_svfiprintf_r+0x1f4>)
 80185f8:	a904      	add	r1, sp, #16
 80185fa:	4638      	mov	r0, r7
 80185fc:	f3af 8000 	nop.w
 8018600:	1c42      	adds	r2, r0, #1
 8018602:	4606      	mov	r6, r0
 8018604:	d1d6      	bne.n	80185b4 <_svfiprintf_r+0x174>
 8018606:	89ab      	ldrh	r3, [r5, #12]
 8018608:	065b      	lsls	r3, r3, #25
 801860a:	f53f af2d 	bmi.w	8018468 <_svfiprintf_r+0x28>
 801860e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8018610:	b01d      	add	sp, #116	; 0x74
 8018612:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018616:	ab03      	add	r3, sp, #12
 8018618:	9300      	str	r3, [sp, #0]
 801861a:	462a      	mov	r2, r5
 801861c:	4b05      	ldr	r3, [pc, #20]	; (8018634 <_svfiprintf_r+0x1f4>)
 801861e:	a904      	add	r1, sp, #16
 8018620:	4638      	mov	r0, r7
 8018622:	f000 f879 	bl	8018718 <_printf_i>
 8018626:	e7eb      	b.n	8018600 <_svfiprintf_r+0x1c0>
 8018628:	08026134 	.word	0x08026134
 801862c:	0802613e 	.word	0x0802613e
 8018630:	00000000 	.word	0x00000000
 8018634:	0801838d 	.word	0x0801838d
 8018638:	0802613a 	.word	0x0802613a

0801863c <_printf_common>:
 801863c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018640:	4616      	mov	r6, r2
 8018642:	4699      	mov	r9, r3
 8018644:	688a      	ldr	r2, [r1, #8]
 8018646:	690b      	ldr	r3, [r1, #16]
 8018648:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801864c:	4293      	cmp	r3, r2
 801864e:	bfb8      	it	lt
 8018650:	4613      	movlt	r3, r2
 8018652:	6033      	str	r3, [r6, #0]
 8018654:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8018658:	4607      	mov	r7, r0
 801865a:	460c      	mov	r4, r1
 801865c:	b10a      	cbz	r2, 8018662 <_printf_common+0x26>
 801865e:	3301      	adds	r3, #1
 8018660:	6033      	str	r3, [r6, #0]
 8018662:	6823      	ldr	r3, [r4, #0]
 8018664:	0699      	lsls	r1, r3, #26
 8018666:	bf42      	ittt	mi
 8018668:	6833      	ldrmi	r3, [r6, #0]
 801866a:	3302      	addmi	r3, #2
 801866c:	6033      	strmi	r3, [r6, #0]
 801866e:	6825      	ldr	r5, [r4, #0]
 8018670:	f015 0506 	ands.w	r5, r5, #6
 8018674:	d106      	bne.n	8018684 <_printf_common+0x48>
 8018676:	f104 0a19 	add.w	sl, r4, #25
 801867a:	68e3      	ldr	r3, [r4, #12]
 801867c:	6832      	ldr	r2, [r6, #0]
 801867e:	1a9b      	subs	r3, r3, r2
 8018680:	42ab      	cmp	r3, r5
 8018682:	dc26      	bgt.n	80186d2 <_printf_common+0x96>
 8018684:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8018688:	1e13      	subs	r3, r2, #0
 801868a:	6822      	ldr	r2, [r4, #0]
 801868c:	bf18      	it	ne
 801868e:	2301      	movne	r3, #1
 8018690:	0692      	lsls	r2, r2, #26
 8018692:	d42b      	bmi.n	80186ec <_printf_common+0xb0>
 8018694:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8018698:	4649      	mov	r1, r9
 801869a:	4638      	mov	r0, r7
 801869c:	47c0      	blx	r8
 801869e:	3001      	adds	r0, #1
 80186a0:	d01e      	beq.n	80186e0 <_printf_common+0xa4>
 80186a2:	6823      	ldr	r3, [r4, #0]
 80186a4:	6922      	ldr	r2, [r4, #16]
 80186a6:	f003 0306 	and.w	r3, r3, #6
 80186aa:	2b04      	cmp	r3, #4
 80186ac:	bf02      	ittt	eq
 80186ae:	68e5      	ldreq	r5, [r4, #12]
 80186b0:	6833      	ldreq	r3, [r6, #0]
 80186b2:	1aed      	subeq	r5, r5, r3
 80186b4:	68a3      	ldr	r3, [r4, #8]
 80186b6:	bf0c      	ite	eq
 80186b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80186bc:	2500      	movne	r5, #0
 80186be:	4293      	cmp	r3, r2
 80186c0:	bfc4      	itt	gt
 80186c2:	1a9b      	subgt	r3, r3, r2
 80186c4:	18ed      	addgt	r5, r5, r3
 80186c6:	2600      	movs	r6, #0
 80186c8:	341a      	adds	r4, #26
 80186ca:	42b5      	cmp	r5, r6
 80186cc:	d11a      	bne.n	8018704 <_printf_common+0xc8>
 80186ce:	2000      	movs	r0, #0
 80186d0:	e008      	b.n	80186e4 <_printf_common+0xa8>
 80186d2:	2301      	movs	r3, #1
 80186d4:	4652      	mov	r2, sl
 80186d6:	4649      	mov	r1, r9
 80186d8:	4638      	mov	r0, r7
 80186da:	47c0      	blx	r8
 80186dc:	3001      	adds	r0, #1
 80186de:	d103      	bne.n	80186e8 <_printf_common+0xac>
 80186e0:	f04f 30ff 	mov.w	r0, #4294967295
 80186e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80186e8:	3501      	adds	r5, #1
 80186ea:	e7c6      	b.n	801867a <_printf_common+0x3e>
 80186ec:	18e1      	adds	r1, r4, r3
 80186ee:	1c5a      	adds	r2, r3, #1
 80186f0:	2030      	movs	r0, #48	; 0x30
 80186f2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80186f6:	4422      	add	r2, r4
 80186f8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80186fc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8018700:	3302      	adds	r3, #2
 8018702:	e7c7      	b.n	8018694 <_printf_common+0x58>
 8018704:	2301      	movs	r3, #1
 8018706:	4622      	mov	r2, r4
 8018708:	4649      	mov	r1, r9
 801870a:	4638      	mov	r0, r7
 801870c:	47c0      	blx	r8
 801870e:	3001      	adds	r0, #1
 8018710:	d0e6      	beq.n	80186e0 <_printf_common+0xa4>
 8018712:	3601      	adds	r6, #1
 8018714:	e7d9      	b.n	80186ca <_printf_common+0x8e>
	...

08018718 <_printf_i>:
 8018718:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801871c:	7e0f      	ldrb	r7, [r1, #24]
 801871e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8018720:	2f78      	cmp	r7, #120	; 0x78
 8018722:	4691      	mov	r9, r2
 8018724:	4680      	mov	r8, r0
 8018726:	460c      	mov	r4, r1
 8018728:	469a      	mov	sl, r3
 801872a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801872e:	d807      	bhi.n	8018740 <_printf_i+0x28>
 8018730:	2f62      	cmp	r7, #98	; 0x62
 8018732:	d80a      	bhi.n	801874a <_printf_i+0x32>
 8018734:	2f00      	cmp	r7, #0
 8018736:	f000 80d4 	beq.w	80188e2 <_printf_i+0x1ca>
 801873a:	2f58      	cmp	r7, #88	; 0x58
 801873c:	f000 80c0 	beq.w	80188c0 <_printf_i+0x1a8>
 8018740:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8018744:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8018748:	e03a      	b.n	80187c0 <_printf_i+0xa8>
 801874a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801874e:	2b15      	cmp	r3, #21
 8018750:	d8f6      	bhi.n	8018740 <_printf_i+0x28>
 8018752:	a101      	add	r1, pc, #4	; (adr r1, 8018758 <_printf_i+0x40>)
 8018754:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8018758:	080187b1 	.word	0x080187b1
 801875c:	080187c5 	.word	0x080187c5
 8018760:	08018741 	.word	0x08018741
 8018764:	08018741 	.word	0x08018741
 8018768:	08018741 	.word	0x08018741
 801876c:	08018741 	.word	0x08018741
 8018770:	080187c5 	.word	0x080187c5
 8018774:	08018741 	.word	0x08018741
 8018778:	08018741 	.word	0x08018741
 801877c:	08018741 	.word	0x08018741
 8018780:	08018741 	.word	0x08018741
 8018784:	080188c9 	.word	0x080188c9
 8018788:	080187f1 	.word	0x080187f1
 801878c:	08018883 	.word	0x08018883
 8018790:	08018741 	.word	0x08018741
 8018794:	08018741 	.word	0x08018741
 8018798:	080188eb 	.word	0x080188eb
 801879c:	08018741 	.word	0x08018741
 80187a0:	080187f1 	.word	0x080187f1
 80187a4:	08018741 	.word	0x08018741
 80187a8:	08018741 	.word	0x08018741
 80187ac:	0801888b 	.word	0x0801888b
 80187b0:	682b      	ldr	r3, [r5, #0]
 80187b2:	1d1a      	adds	r2, r3, #4
 80187b4:	681b      	ldr	r3, [r3, #0]
 80187b6:	602a      	str	r2, [r5, #0]
 80187b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80187bc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80187c0:	2301      	movs	r3, #1
 80187c2:	e09f      	b.n	8018904 <_printf_i+0x1ec>
 80187c4:	6820      	ldr	r0, [r4, #0]
 80187c6:	682b      	ldr	r3, [r5, #0]
 80187c8:	0607      	lsls	r7, r0, #24
 80187ca:	f103 0104 	add.w	r1, r3, #4
 80187ce:	6029      	str	r1, [r5, #0]
 80187d0:	d501      	bpl.n	80187d6 <_printf_i+0xbe>
 80187d2:	681e      	ldr	r6, [r3, #0]
 80187d4:	e003      	b.n	80187de <_printf_i+0xc6>
 80187d6:	0646      	lsls	r6, r0, #25
 80187d8:	d5fb      	bpl.n	80187d2 <_printf_i+0xba>
 80187da:	f9b3 6000 	ldrsh.w	r6, [r3]
 80187de:	2e00      	cmp	r6, #0
 80187e0:	da03      	bge.n	80187ea <_printf_i+0xd2>
 80187e2:	232d      	movs	r3, #45	; 0x2d
 80187e4:	4276      	negs	r6, r6
 80187e6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80187ea:	485a      	ldr	r0, [pc, #360]	; (8018954 <_printf_i+0x23c>)
 80187ec:	230a      	movs	r3, #10
 80187ee:	e012      	b.n	8018816 <_printf_i+0xfe>
 80187f0:	682b      	ldr	r3, [r5, #0]
 80187f2:	6820      	ldr	r0, [r4, #0]
 80187f4:	1d19      	adds	r1, r3, #4
 80187f6:	6029      	str	r1, [r5, #0]
 80187f8:	0605      	lsls	r5, r0, #24
 80187fa:	d501      	bpl.n	8018800 <_printf_i+0xe8>
 80187fc:	681e      	ldr	r6, [r3, #0]
 80187fe:	e002      	b.n	8018806 <_printf_i+0xee>
 8018800:	0641      	lsls	r1, r0, #25
 8018802:	d5fb      	bpl.n	80187fc <_printf_i+0xe4>
 8018804:	881e      	ldrh	r6, [r3, #0]
 8018806:	4853      	ldr	r0, [pc, #332]	; (8018954 <_printf_i+0x23c>)
 8018808:	2f6f      	cmp	r7, #111	; 0x6f
 801880a:	bf0c      	ite	eq
 801880c:	2308      	moveq	r3, #8
 801880e:	230a      	movne	r3, #10
 8018810:	2100      	movs	r1, #0
 8018812:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8018816:	6865      	ldr	r5, [r4, #4]
 8018818:	60a5      	str	r5, [r4, #8]
 801881a:	2d00      	cmp	r5, #0
 801881c:	bfa2      	ittt	ge
 801881e:	6821      	ldrge	r1, [r4, #0]
 8018820:	f021 0104 	bicge.w	r1, r1, #4
 8018824:	6021      	strge	r1, [r4, #0]
 8018826:	b90e      	cbnz	r6, 801882c <_printf_i+0x114>
 8018828:	2d00      	cmp	r5, #0
 801882a:	d04b      	beq.n	80188c4 <_printf_i+0x1ac>
 801882c:	4615      	mov	r5, r2
 801882e:	fbb6 f1f3 	udiv	r1, r6, r3
 8018832:	fb03 6711 	mls	r7, r3, r1, r6
 8018836:	5dc7      	ldrb	r7, [r0, r7]
 8018838:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801883c:	4637      	mov	r7, r6
 801883e:	42bb      	cmp	r3, r7
 8018840:	460e      	mov	r6, r1
 8018842:	d9f4      	bls.n	801882e <_printf_i+0x116>
 8018844:	2b08      	cmp	r3, #8
 8018846:	d10b      	bne.n	8018860 <_printf_i+0x148>
 8018848:	6823      	ldr	r3, [r4, #0]
 801884a:	07de      	lsls	r6, r3, #31
 801884c:	d508      	bpl.n	8018860 <_printf_i+0x148>
 801884e:	6923      	ldr	r3, [r4, #16]
 8018850:	6861      	ldr	r1, [r4, #4]
 8018852:	4299      	cmp	r1, r3
 8018854:	bfde      	ittt	le
 8018856:	2330      	movle	r3, #48	; 0x30
 8018858:	f805 3c01 	strble.w	r3, [r5, #-1]
 801885c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8018860:	1b52      	subs	r2, r2, r5
 8018862:	6122      	str	r2, [r4, #16]
 8018864:	f8cd a000 	str.w	sl, [sp]
 8018868:	464b      	mov	r3, r9
 801886a:	aa03      	add	r2, sp, #12
 801886c:	4621      	mov	r1, r4
 801886e:	4640      	mov	r0, r8
 8018870:	f7ff fee4 	bl	801863c <_printf_common>
 8018874:	3001      	adds	r0, #1
 8018876:	d14a      	bne.n	801890e <_printf_i+0x1f6>
 8018878:	f04f 30ff 	mov.w	r0, #4294967295
 801887c:	b004      	add	sp, #16
 801887e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018882:	6823      	ldr	r3, [r4, #0]
 8018884:	f043 0320 	orr.w	r3, r3, #32
 8018888:	6023      	str	r3, [r4, #0]
 801888a:	4833      	ldr	r0, [pc, #204]	; (8018958 <_printf_i+0x240>)
 801888c:	2778      	movs	r7, #120	; 0x78
 801888e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8018892:	6823      	ldr	r3, [r4, #0]
 8018894:	6829      	ldr	r1, [r5, #0]
 8018896:	061f      	lsls	r7, r3, #24
 8018898:	f851 6b04 	ldr.w	r6, [r1], #4
 801889c:	d402      	bmi.n	80188a4 <_printf_i+0x18c>
 801889e:	065f      	lsls	r7, r3, #25
 80188a0:	bf48      	it	mi
 80188a2:	b2b6      	uxthmi	r6, r6
 80188a4:	07df      	lsls	r7, r3, #31
 80188a6:	bf48      	it	mi
 80188a8:	f043 0320 	orrmi.w	r3, r3, #32
 80188ac:	6029      	str	r1, [r5, #0]
 80188ae:	bf48      	it	mi
 80188b0:	6023      	strmi	r3, [r4, #0]
 80188b2:	b91e      	cbnz	r6, 80188bc <_printf_i+0x1a4>
 80188b4:	6823      	ldr	r3, [r4, #0]
 80188b6:	f023 0320 	bic.w	r3, r3, #32
 80188ba:	6023      	str	r3, [r4, #0]
 80188bc:	2310      	movs	r3, #16
 80188be:	e7a7      	b.n	8018810 <_printf_i+0xf8>
 80188c0:	4824      	ldr	r0, [pc, #144]	; (8018954 <_printf_i+0x23c>)
 80188c2:	e7e4      	b.n	801888e <_printf_i+0x176>
 80188c4:	4615      	mov	r5, r2
 80188c6:	e7bd      	b.n	8018844 <_printf_i+0x12c>
 80188c8:	682b      	ldr	r3, [r5, #0]
 80188ca:	6826      	ldr	r6, [r4, #0]
 80188cc:	6961      	ldr	r1, [r4, #20]
 80188ce:	1d18      	adds	r0, r3, #4
 80188d0:	6028      	str	r0, [r5, #0]
 80188d2:	0635      	lsls	r5, r6, #24
 80188d4:	681b      	ldr	r3, [r3, #0]
 80188d6:	d501      	bpl.n	80188dc <_printf_i+0x1c4>
 80188d8:	6019      	str	r1, [r3, #0]
 80188da:	e002      	b.n	80188e2 <_printf_i+0x1ca>
 80188dc:	0670      	lsls	r0, r6, #25
 80188de:	d5fb      	bpl.n	80188d8 <_printf_i+0x1c0>
 80188e0:	8019      	strh	r1, [r3, #0]
 80188e2:	2300      	movs	r3, #0
 80188e4:	6123      	str	r3, [r4, #16]
 80188e6:	4615      	mov	r5, r2
 80188e8:	e7bc      	b.n	8018864 <_printf_i+0x14c>
 80188ea:	682b      	ldr	r3, [r5, #0]
 80188ec:	1d1a      	adds	r2, r3, #4
 80188ee:	602a      	str	r2, [r5, #0]
 80188f0:	681d      	ldr	r5, [r3, #0]
 80188f2:	6862      	ldr	r2, [r4, #4]
 80188f4:	2100      	movs	r1, #0
 80188f6:	4628      	mov	r0, r5
 80188f8:	f7e7 fc82 	bl	8000200 <memchr>
 80188fc:	b108      	cbz	r0, 8018902 <_printf_i+0x1ea>
 80188fe:	1b40      	subs	r0, r0, r5
 8018900:	6060      	str	r0, [r4, #4]
 8018902:	6863      	ldr	r3, [r4, #4]
 8018904:	6123      	str	r3, [r4, #16]
 8018906:	2300      	movs	r3, #0
 8018908:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801890c:	e7aa      	b.n	8018864 <_printf_i+0x14c>
 801890e:	6923      	ldr	r3, [r4, #16]
 8018910:	462a      	mov	r2, r5
 8018912:	4649      	mov	r1, r9
 8018914:	4640      	mov	r0, r8
 8018916:	47d0      	blx	sl
 8018918:	3001      	adds	r0, #1
 801891a:	d0ad      	beq.n	8018878 <_printf_i+0x160>
 801891c:	6823      	ldr	r3, [r4, #0]
 801891e:	079b      	lsls	r3, r3, #30
 8018920:	d413      	bmi.n	801894a <_printf_i+0x232>
 8018922:	68e0      	ldr	r0, [r4, #12]
 8018924:	9b03      	ldr	r3, [sp, #12]
 8018926:	4298      	cmp	r0, r3
 8018928:	bfb8      	it	lt
 801892a:	4618      	movlt	r0, r3
 801892c:	e7a6      	b.n	801887c <_printf_i+0x164>
 801892e:	2301      	movs	r3, #1
 8018930:	4632      	mov	r2, r6
 8018932:	4649      	mov	r1, r9
 8018934:	4640      	mov	r0, r8
 8018936:	47d0      	blx	sl
 8018938:	3001      	adds	r0, #1
 801893a:	d09d      	beq.n	8018878 <_printf_i+0x160>
 801893c:	3501      	adds	r5, #1
 801893e:	68e3      	ldr	r3, [r4, #12]
 8018940:	9903      	ldr	r1, [sp, #12]
 8018942:	1a5b      	subs	r3, r3, r1
 8018944:	42ab      	cmp	r3, r5
 8018946:	dcf2      	bgt.n	801892e <_printf_i+0x216>
 8018948:	e7eb      	b.n	8018922 <_printf_i+0x20a>
 801894a:	2500      	movs	r5, #0
 801894c:	f104 0619 	add.w	r6, r4, #25
 8018950:	e7f5      	b.n	801893e <_printf_i+0x226>
 8018952:	bf00      	nop
 8018954:	08026145 	.word	0x08026145
 8018958:	08026156 	.word	0x08026156

0801895c <__sflush_r>:
 801895c:	898a      	ldrh	r2, [r1, #12]
 801895e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018962:	4605      	mov	r5, r0
 8018964:	0710      	lsls	r0, r2, #28
 8018966:	460c      	mov	r4, r1
 8018968:	d458      	bmi.n	8018a1c <__sflush_r+0xc0>
 801896a:	684b      	ldr	r3, [r1, #4]
 801896c:	2b00      	cmp	r3, #0
 801896e:	dc05      	bgt.n	801897c <__sflush_r+0x20>
 8018970:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8018972:	2b00      	cmp	r3, #0
 8018974:	dc02      	bgt.n	801897c <__sflush_r+0x20>
 8018976:	2000      	movs	r0, #0
 8018978:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801897c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801897e:	2e00      	cmp	r6, #0
 8018980:	d0f9      	beq.n	8018976 <__sflush_r+0x1a>
 8018982:	2300      	movs	r3, #0
 8018984:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8018988:	682f      	ldr	r7, [r5, #0]
 801898a:	6a21      	ldr	r1, [r4, #32]
 801898c:	602b      	str	r3, [r5, #0]
 801898e:	d032      	beq.n	80189f6 <__sflush_r+0x9a>
 8018990:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8018992:	89a3      	ldrh	r3, [r4, #12]
 8018994:	075a      	lsls	r2, r3, #29
 8018996:	d505      	bpl.n	80189a4 <__sflush_r+0x48>
 8018998:	6863      	ldr	r3, [r4, #4]
 801899a:	1ac0      	subs	r0, r0, r3
 801899c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801899e:	b10b      	cbz	r3, 80189a4 <__sflush_r+0x48>
 80189a0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80189a2:	1ac0      	subs	r0, r0, r3
 80189a4:	2300      	movs	r3, #0
 80189a6:	4602      	mov	r2, r0
 80189a8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80189aa:	6a21      	ldr	r1, [r4, #32]
 80189ac:	4628      	mov	r0, r5
 80189ae:	47b0      	blx	r6
 80189b0:	1c43      	adds	r3, r0, #1
 80189b2:	89a3      	ldrh	r3, [r4, #12]
 80189b4:	d106      	bne.n	80189c4 <__sflush_r+0x68>
 80189b6:	6829      	ldr	r1, [r5, #0]
 80189b8:	291d      	cmp	r1, #29
 80189ba:	d82b      	bhi.n	8018a14 <__sflush_r+0xb8>
 80189bc:	4a29      	ldr	r2, [pc, #164]	; (8018a64 <__sflush_r+0x108>)
 80189be:	410a      	asrs	r2, r1
 80189c0:	07d6      	lsls	r6, r2, #31
 80189c2:	d427      	bmi.n	8018a14 <__sflush_r+0xb8>
 80189c4:	2200      	movs	r2, #0
 80189c6:	6062      	str	r2, [r4, #4]
 80189c8:	04d9      	lsls	r1, r3, #19
 80189ca:	6922      	ldr	r2, [r4, #16]
 80189cc:	6022      	str	r2, [r4, #0]
 80189ce:	d504      	bpl.n	80189da <__sflush_r+0x7e>
 80189d0:	1c42      	adds	r2, r0, #1
 80189d2:	d101      	bne.n	80189d8 <__sflush_r+0x7c>
 80189d4:	682b      	ldr	r3, [r5, #0]
 80189d6:	b903      	cbnz	r3, 80189da <__sflush_r+0x7e>
 80189d8:	6560      	str	r0, [r4, #84]	; 0x54
 80189da:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80189dc:	602f      	str	r7, [r5, #0]
 80189de:	2900      	cmp	r1, #0
 80189e0:	d0c9      	beq.n	8018976 <__sflush_r+0x1a>
 80189e2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80189e6:	4299      	cmp	r1, r3
 80189e8:	d002      	beq.n	80189f0 <__sflush_r+0x94>
 80189ea:	4628      	mov	r0, r5
 80189ec:	f7fe fc5e 	bl	80172ac <_free_r>
 80189f0:	2000      	movs	r0, #0
 80189f2:	6360      	str	r0, [r4, #52]	; 0x34
 80189f4:	e7c0      	b.n	8018978 <__sflush_r+0x1c>
 80189f6:	2301      	movs	r3, #1
 80189f8:	4628      	mov	r0, r5
 80189fa:	47b0      	blx	r6
 80189fc:	1c41      	adds	r1, r0, #1
 80189fe:	d1c8      	bne.n	8018992 <__sflush_r+0x36>
 8018a00:	682b      	ldr	r3, [r5, #0]
 8018a02:	2b00      	cmp	r3, #0
 8018a04:	d0c5      	beq.n	8018992 <__sflush_r+0x36>
 8018a06:	2b1d      	cmp	r3, #29
 8018a08:	d001      	beq.n	8018a0e <__sflush_r+0xb2>
 8018a0a:	2b16      	cmp	r3, #22
 8018a0c:	d101      	bne.n	8018a12 <__sflush_r+0xb6>
 8018a0e:	602f      	str	r7, [r5, #0]
 8018a10:	e7b1      	b.n	8018976 <__sflush_r+0x1a>
 8018a12:	89a3      	ldrh	r3, [r4, #12]
 8018a14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018a18:	81a3      	strh	r3, [r4, #12]
 8018a1a:	e7ad      	b.n	8018978 <__sflush_r+0x1c>
 8018a1c:	690f      	ldr	r7, [r1, #16]
 8018a1e:	2f00      	cmp	r7, #0
 8018a20:	d0a9      	beq.n	8018976 <__sflush_r+0x1a>
 8018a22:	0793      	lsls	r3, r2, #30
 8018a24:	680e      	ldr	r6, [r1, #0]
 8018a26:	bf08      	it	eq
 8018a28:	694b      	ldreq	r3, [r1, #20]
 8018a2a:	600f      	str	r7, [r1, #0]
 8018a2c:	bf18      	it	ne
 8018a2e:	2300      	movne	r3, #0
 8018a30:	eba6 0807 	sub.w	r8, r6, r7
 8018a34:	608b      	str	r3, [r1, #8]
 8018a36:	f1b8 0f00 	cmp.w	r8, #0
 8018a3a:	dd9c      	ble.n	8018976 <__sflush_r+0x1a>
 8018a3c:	6a21      	ldr	r1, [r4, #32]
 8018a3e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8018a40:	4643      	mov	r3, r8
 8018a42:	463a      	mov	r2, r7
 8018a44:	4628      	mov	r0, r5
 8018a46:	47b0      	blx	r6
 8018a48:	2800      	cmp	r0, #0
 8018a4a:	dc06      	bgt.n	8018a5a <__sflush_r+0xfe>
 8018a4c:	89a3      	ldrh	r3, [r4, #12]
 8018a4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018a52:	81a3      	strh	r3, [r4, #12]
 8018a54:	f04f 30ff 	mov.w	r0, #4294967295
 8018a58:	e78e      	b.n	8018978 <__sflush_r+0x1c>
 8018a5a:	4407      	add	r7, r0
 8018a5c:	eba8 0800 	sub.w	r8, r8, r0
 8018a60:	e7e9      	b.n	8018a36 <__sflush_r+0xda>
 8018a62:	bf00      	nop
 8018a64:	dfbffffe 	.word	0xdfbffffe

08018a68 <_fflush_r>:
 8018a68:	b538      	push	{r3, r4, r5, lr}
 8018a6a:	690b      	ldr	r3, [r1, #16]
 8018a6c:	4605      	mov	r5, r0
 8018a6e:	460c      	mov	r4, r1
 8018a70:	b913      	cbnz	r3, 8018a78 <_fflush_r+0x10>
 8018a72:	2500      	movs	r5, #0
 8018a74:	4628      	mov	r0, r5
 8018a76:	bd38      	pop	{r3, r4, r5, pc}
 8018a78:	b118      	cbz	r0, 8018a82 <_fflush_r+0x1a>
 8018a7a:	6a03      	ldr	r3, [r0, #32]
 8018a7c:	b90b      	cbnz	r3, 8018a82 <_fflush_r+0x1a>
 8018a7e:	f7fe fa75 	bl	8016f6c <__sinit>
 8018a82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018a86:	2b00      	cmp	r3, #0
 8018a88:	d0f3      	beq.n	8018a72 <_fflush_r+0xa>
 8018a8a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8018a8c:	07d0      	lsls	r0, r2, #31
 8018a8e:	d404      	bmi.n	8018a9a <_fflush_r+0x32>
 8018a90:	0599      	lsls	r1, r3, #22
 8018a92:	d402      	bmi.n	8018a9a <_fflush_r+0x32>
 8018a94:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8018a96:	f7fe fbe2 	bl	801725e <__retarget_lock_acquire_recursive>
 8018a9a:	4628      	mov	r0, r5
 8018a9c:	4621      	mov	r1, r4
 8018a9e:	f7ff ff5d 	bl	801895c <__sflush_r>
 8018aa2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8018aa4:	07da      	lsls	r2, r3, #31
 8018aa6:	4605      	mov	r5, r0
 8018aa8:	d4e4      	bmi.n	8018a74 <_fflush_r+0xc>
 8018aaa:	89a3      	ldrh	r3, [r4, #12]
 8018aac:	059b      	lsls	r3, r3, #22
 8018aae:	d4e1      	bmi.n	8018a74 <_fflush_r+0xc>
 8018ab0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8018ab2:	f7fe fbd5 	bl	8017260 <__retarget_lock_release_recursive>
 8018ab6:	e7dd      	b.n	8018a74 <_fflush_r+0xc>

08018ab8 <memmove>:
 8018ab8:	4288      	cmp	r0, r1
 8018aba:	b510      	push	{r4, lr}
 8018abc:	eb01 0402 	add.w	r4, r1, r2
 8018ac0:	d902      	bls.n	8018ac8 <memmove+0x10>
 8018ac2:	4284      	cmp	r4, r0
 8018ac4:	4623      	mov	r3, r4
 8018ac6:	d807      	bhi.n	8018ad8 <memmove+0x20>
 8018ac8:	1e43      	subs	r3, r0, #1
 8018aca:	42a1      	cmp	r1, r4
 8018acc:	d008      	beq.n	8018ae0 <memmove+0x28>
 8018ace:	f811 2b01 	ldrb.w	r2, [r1], #1
 8018ad2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8018ad6:	e7f8      	b.n	8018aca <memmove+0x12>
 8018ad8:	4402      	add	r2, r0
 8018ada:	4601      	mov	r1, r0
 8018adc:	428a      	cmp	r2, r1
 8018ade:	d100      	bne.n	8018ae2 <memmove+0x2a>
 8018ae0:	bd10      	pop	{r4, pc}
 8018ae2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8018ae6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8018aea:	e7f7      	b.n	8018adc <memmove+0x24>

08018aec <__assert_func>:
 8018aec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8018aee:	4614      	mov	r4, r2
 8018af0:	461a      	mov	r2, r3
 8018af2:	4b09      	ldr	r3, [pc, #36]	; (8018b18 <__assert_func+0x2c>)
 8018af4:	681b      	ldr	r3, [r3, #0]
 8018af6:	4605      	mov	r5, r0
 8018af8:	68d8      	ldr	r0, [r3, #12]
 8018afa:	b14c      	cbz	r4, 8018b10 <__assert_func+0x24>
 8018afc:	4b07      	ldr	r3, [pc, #28]	; (8018b1c <__assert_func+0x30>)
 8018afe:	9100      	str	r1, [sp, #0]
 8018b00:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8018b04:	4906      	ldr	r1, [pc, #24]	; (8018b20 <__assert_func+0x34>)
 8018b06:	462b      	mov	r3, r5
 8018b08:	f000 f854 	bl	8018bb4 <fiprintf>
 8018b0c:	f000 f864 	bl	8018bd8 <abort>
 8018b10:	4b04      	ldr	r3, [pc, #16]	; (8018b24 <__assert_func+0x38>)
 8018b12:	461c      	mov	r4, r3
 8018b14:	e7f3      	b.n	8018afe <__assert_func+0x12>
 8018b16:	bf00      	nop
 8018b18:	20000364 	.word	0x20000364
 8018b1c:	08026167 	.word	0x08026167
 8018b20:	08026174 	.word	0x08026174
 8018b24:	080261a2 	.word	0x080261a2

08018b28 <_calloc_r>:
 8018b28:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8018b2a:	fba1 2402 	umull	r2, r4, r1, r2
 8018b2e:	b94c      	cbnz	r4, 8018b44 <_calloc_r+0x1c>
 8018b30:	4611      	mov	r1, r2
 8018b32:	9201      	str	r2, [sp, #4]
 8018b34:	f7fd fa12 	bl	8015f5c <_malloc_r>
 8018b38:	9a01      	ldr	r2, [sp, #4]
 8018b3a:	4605      	mov	r5, r0
 8018b3c:	b930      	cbnz	r0, 8018b4c <_calloc_r+0x24>
 8018b3e:	4628      	mov	r0, r5
 8018b40:	b003      	add	sp, #12
 8018b42:	bd30      	pop	{r4, r5, pc}
 8018b44:	220c      	movs	r2, #12
 8018b46:	6002      	str	r2, [r0, #0]
 8018b48:	2500      	movs	r5, #0
 8018b4a:	e7f8      	b.n	8018b3e <_calloc_r+0x16>
 8018b4c:	4621      	mov	r1, r4
 8018b4e:	f7fe fabf 	bl	80170d0 <memset>
 8018b52:	e7f4      	b.n	8018b3e <_calloc_r+0x16>

08018b54 <_realloc_r>:
 8018b54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018b58:	4680      	mov	r8, r0
 8018b5a:	4614      	mov	r4, r2
 8018b5c:	460e      	mov	r6, r1
 8018b5e:	b921      	cbnz	r1, 8018b6a <_realloc_r+0x16>
 8018b60:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018b64:	4611      	mov	r1, r2
 8018b66:	f7fd b9f9 	b.w	8015f5c <_malloc_r>
 8018b6a:	b92a      	cbnz	r2, 8018b78 <_realloc_r+0x24>
 8018b6c:	f7fe fb9e 	bl	80172ac <_free_r>
 8018b70:	4625      	mov	r5, r4
 8018b72:	4628      	mov	r0, r5
 8018b74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018b78:	f000 f835 	bl	8018be6 <_malloc_usable_size_r>
 8018b7c:	4284      	cmp	r4, r0
 8018b7e:	4607      	mov	r7, r0
 8018b80:	d802      	bhi.n	8018b88 <_realloc_r+0x34>
 8018b82:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8018b86:	d812      	bhi.n	8018bae <_realloc_r+0x5a>
 8018b88:	4621      	mov	r1, r4
 8018b8a:	4640      	mov	r0, r8
 8018b8c:	f7fd f9e6 	bl	8015f5c <_malloc_r>
 8018b90:	4605      	mov	r5, r0
 8018b92:	2800      	cmp	r0, #0
 8018b94:	d0ed      	beq.n	8018b72 <_realloc_r+0x1e>
 8018b96:	42bc      	cmp	r4, r7
 8018b98:	4622      	mov	r2, r4
 8018b9a:	4631      	mov	r1, r6
 8018b9c:	bf28      	it	cs
 8018b9e:	463a      	movcs	r2, r7
 8018ba0:	f7fe fb67 	bl	8017272 <memcpy>
 8018ba4:	4631      	mov	r1, r6
 8018ba6:	4640      	mov	r0, r8
 8018ba8:	f7fe fb80 	bl	80172ac <_free_r>
 8018bac:	e7e1      	b.n	8018b72 <_realloc_r+0x1e>
 8018bae:	4635      	mov	r5, r6
 8018bb0:	e7df      	b.n	8018b72 <_realloc_r+0x1e>
	...

08018bb4 <fiprintf>:
 8018bb4:	b40e      	push	{r1, r2, r3}
 8018bb6:	b503      	push	{r0, r1, lr}
 8018bb8:	4601      	mov	r1, r0
 8018bba:	ab03      	add	r3, sp, #12
 8018bbc:	4805      	ldr	r0, [pc, #20]	; (8018bd4 <fiprintf+0x20>)
 8018bbe:	f853 2b04 	ldr.w	r2, [r3], #4
 8018bc2:	6800      	ldr	r0, [r0, #0]
 8018bc4:	9301      	str	r3, [sp, #4]
 8018bc6:	f000 f83f 	bl	8018c48 <_vfiprintf_r>
 8018bca:	b002      	add	sp, #8
 8018bcc:	f85d eb04 	ldr.w	lr, [sp], #4
 8018bd0:	b003      	add	sp, #12
 8018bd2:	4770      	bx	lr
 8018bd4:	20000364 	.word	0x20000364

08018bd8 <abort>:
 8018bd8:	b508      	push	{r3, lr}
 8018bda:	2006      	movs	r0, #6
 8018bdc:	f000 fa0c 	bl	8018ff8 <raise>
 8018be0:	2001      	movs	r0, #1
 8018be2:	f7e8 fdef 	bl	80017c4 <_exit>

08018be6 <_malloc_usable_size_r>:
 8018be6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018bea:	1f18      	subs	r0, r3, #4
 8018bec:	2b00      	cmp	r3, #0
 8018bee:	bfbc      	itt	lt
 8018bf0:	580b      	ldrlt	r3, [r1, r0]
 8018bf2:	18c0      	addlt	r0, r0, r3
 8018bf4:	4770      	bx	lr

08018bf6 <__sfputc_r>:
 8018bf6:	6893      	ldr	r3, [r2, #8]
 8018bf8:	3b01      	subs	r3, #1
 8018bfa:	2b00      	cmp	r3, #0
 8018bfc:	b410      	push	{r4}
 8018bfe:	6093      	str	r3, [r2, #8]
 8018c00:	da08      	bge.n	8018c14 <__sfputc_r+0x1e>
 8018c02:	6994      	ldr	r4, [r2, #24]
 8018c04:	42a3      	cmp	r3, r4
 8018c06:	db01      	blt.n	8018c0c <__sfputc_r+0x16>
 8018c08:	290a      	cmp	r1, #10
 8018c0a:	d103      	bne.n	8018c14 <__sfputc_r+0x1e>
 8018c0c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018c10:	f000 b934 	b.w	8018e7c <__swbuf_r>
 8018c14:	6813      	ldr	r3, [r2, #0]
 8018c16:	1c58      	adds	r0, r3, #1
 8018c18:	6010      	str	r0, [r2, #0]
 8018c1a:	7019      	strb	r1, [r3, #0]
 8018c1c:	4608      	mov	r0, r1
 8018c1e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018c22:	4770      	bx	lr

08018c24 <__sfputs_r>:
 8018c24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018c26:	4606      	mov	r6, r0
 8018c28:	460f      	mov	r7, r1
 8018c2a:	4614      	mov	r4, r2
 8018c2c:	18d5      	adds	r5, r2, r3
 8018c2e:	42ac      	cmp	r4, r5
 8018c30:	d101      	bne.n	8018c36 <__sfputs_r+0x12>
 8018c32:	2000      	movs	r0, #0
 8018c34:	e007      	b.n	8018c46 <__sfputs_r+0x22>
 8018c36:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018c3a:	463a      	mov	r2, r7
 8018c3c:	4630      	mov	r0, r6
 8018c3e:	f7ff ffda 	bl	8018bf6 <__sfputc_r>
 8018c42:	1c43      	adds	r3, r0, #1
 8018c44:	d1f3      	bne.n	8018c2e <__sfputs_r+0xa>
 8018c46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08018c48 <_vfiprintf_r>:
 8018c48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018c4c:	460d      	mov	r5, r1
 8018c4e:	b09d      	sub	sp, #116	; 0x74
 8018c50:	4614      	mov	r4, r2
 8018c52:	4698      	mov	r8, r3
 8018c54:	4606      	mov	r6, r0
 8018c56:	b118      	cbz	r0, 8018c60 <_vfiprintf_r+0x18>
 8018c58:	6a03      	ldr	r3, [r0, #32]
 8018c5a:	b90b      	cbnz	r3, 8018c60 <_vfiprintf_r+0x18>
 8018c5c:	f7fe f986 	bl	8016f6c <__sinit>
 8018c60:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8018c62:	07d9      	lsls	r1, r3, #31
 8018c64:	d405      	bmi.n	8018c72 <_vfiprintf_r+0x2a>
 8018c66:	89ab      	ldrh	r3, [r5, #12]
 8018c68:	059a      	lsls	r2, r3, #22
 8018c6a:	d402      	bmi.n	8018c72 <_vfiprintf_r+0x2a>
 8018c6c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8018c6e:	f7fe faf6 	bl	801725e <__retarget_lock_acquire_recursive>
 8018c72:	89ab      	ldrh	r3, [r5, #12]
 8018c74:	071b      	lsls	r3, r3, #28
 8018c76:	d501      	bpl.n	8018c7c <_vfiprintf_r+0x34>
 8018c78:	692b      	ldr	r3, [r5, #16]
 8018c7a:	b99b      	cbnz	r3, 8018ca4 <_vfiprintf_r+0x5c>
 8018c7c:	4629      	mov	r1, r5
 8018c7e:	4630      	mov	r0, r6
 8018c80:	f000 f93a 	bl	8018ef8 <__swsetup_r>
 8018c84:	b170      	cbz	r0, 8018ca4 <_vfiprintf_r+0x5c>
 8018c86:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8018c88:	07dc      	lsls	r4, r3, #31
 8018c8a:	d504      	bpl.n	8018c96 <_vfiprintf_r+0x4e>
 8018c8c:	f04f 30ff 	mov.w	r0, #4294967295
 8018c90:	b01d      	add	sp, #116	; 0x74
 8018c92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018c96:	89ab      	ldrh	r3, [r5, #12]
 8018c98:	0598      	lsls	r0, r3, #22
 8018c9a:	d4f7      	bmi.n	8018c8c <_vfiprintf_r+0x44>
 8018c9c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8018c9e:	f7fe fadf 	bl	8017260 <__retarget_lock_release_recursive>
 8018ca2:	e7f3      	b.n	8018c8c <_vfiprintf_r+0x44>
 8018ca4:	2300      	movs	r3, #0
 8018ca6:	9309      	str	r3, [sp, #36]	; 0x24
 8018ca8:	2320      	movs	r3, #32
 8018caa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8018cae:	f8cd 800c 	str.w	r8, [sp, #12]
 8018cb2:	2330      	movs	r3, #48	; 0x30
 8018cb4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8018e68 <_vfiprintf_r+0x220>
 8018cb8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8018cbc:	f04f 0901 	mov.w	r9, #1
 8018cc0:	4623      	mov	r3, r4
 8018cc2:	469a      	mov	sl, r3
 8018cc4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018cc8:	b10a      	cbz	r2, 8018cce <_vfiprintf_r+0x86>
 8018cca:	2a25      	cmp	r2, #37	; 0x25
 8018ccc:	d1f9      	bne.n	8018cc2 <_vfiprintf_r+0x7a>
 8018cce:	ebba 0b04 	subs.w	fp, sl, r4
 8018cd2:	d00b      	beq.n	8018cec <_vfiprintf_r+0xa4>
 8018cd4:	465b      	mov	r3, fp
 8018cd6:	4622      	mov	r2, r4
 8018cd8:	4629      	mov	r1, r5
 8018cda:	4630      	mov	r0, r6
 8018cdc:	f7ff ffa2 	bl	8018c24 <__sfputs_r>
 8018ce0:	3001      	adds	r0, #1
 8018ce2:	f000 80a9 	beq.w	8018e38 <_vfiprintf_r+0x1f0>
 8018ce6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8018ce8:	445a      	add	r2, fp
 8018cea:	9209      	str	r2, [sp, #36]	; 0x24
 8018cec:	f89a 3000 	ldrb.w	r3, [sl]
 8018cf0:	2b00      	cmp	r3, #0
 8018cf2:	f000 80a1 	beq.w	8018e38 <_vfiprintf_r+0x1f0>
 8018cf6:	2300      	movs	r3, #0
 8018cf8:	f04f 32ff 	mov.w	r2, #4294967295
 8018cfc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8018d00:	f10a 0a01 	add.w	sl, sl, #1
 8018d04:	9304      	str	r3, [sp, #16]
 8018d06:	9307      	str	r3, [sp, #28]
 8018d08:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8018d0c:	931a      	str	r3, [sp, #104]	; 0x68
 8018d0e:	4654      	mov	r4, sl
 8018d10:	2205      	movs	r2, #5
 8018d12:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018d16:	4854      	ldr	r0, [pc, #336]	; (8018e68 <_vfiprintf_r+0x220>)
 8018d18:	f7e7 fa72 	bl	8000200 <memchr>
 8018d1c:	9a04      	ldr	r2, [sp, #16]
 8018d1e:	b9d8      	cbnz	r0, 8018d58 <_vfiprintf_r+0x110>
 8018d20:	06d1      	lsls	r1, r2, #27
 8018d22:	bf44      	itt	mi
 8018d24:	2320      	movmi	r3, #32
 8018d26:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8018d2a:	0713      	lsls	r3, r2, #28
 8018d2c:	bf44      	itt	mi
 8018d2e:	232b      	movmi	r3, #43	; 0x2b
 8018d30:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8018d34:	f89a 3000 	ldrb.w	r3, [sl]
 8018d38:	2b2a      	cmp	r3, #42	; 0x2a
 8018d3a:	d015      	beq.n	8018d68 <_vfiprintf_r+0x120>
 8018d3c:	9a07      	ldr	r2, [sp, #28]
 8018d3e:	4654      	mov	r4, sl
 8018d40:	2000      	movs	r0, #0
 8018d42:	f04f 0c0a 	mov.w	ip, #10
 8018d46:	4621      	mov	r1, r4
 8018d48:	f811 3b01 	ldrb.w	r3, [r1], #1
 8018d4c:	3b30      	subs	r3, #48	; 0x30
 8018d4e:	2b09      	cmp	r3, #9
 8018d50:	d94d      	bls.n	8018dee <_vfiprintf_r+0x1a6>
 8018d52:	b1b0      	cbz	r0, 8018d82 <_vfiprintf_r+0x13a>
 8018d54:	9207      	str	r2, [sp, #28]
 8018d56:	e014      	b.n	8018d82 <_vfiprintf_r+0x13a>
 8018d58:	eba0 0308 	sub.w	r3, r0, r8
 8018d5c:	fa09 f303 	lsl.w	r3, r9, r3
 8018d60:	4313      	orrs	r3, r2
 8018d62:	9304      	str	r3, [sp, #16]
 8018d64:	46a2      	mov	sl, r4
 8018d66:	e7d2      	b.n	8018d0e <_vfiprintf_r+0xc6>
 8018d68:	9b03      	ldr	r3, [sp, #12]
 8018d6a:	1d19      	adds	r1, r3, #4
 8018d6c:	681b      	ldr	r3, [r3, #0]
 8018d6e:	9103      	str	r1, [sp, #12]
 8018d70:	2b00      	cmp	r3, #0
 8018d72:	bfbb      	ittet	lt
 8018d74:	425b      	neglt	r3, r3
 8018d76:	f042 0202 	orrlt.w	r2, r2, #2
 8018d7a:	9307      	strge	r3, [sp, #28]
 8018d7c:	9307      	strlt	r3, [sp, #28]
 8018d7e:	bfb8      	it	lt
 8018d80:	9204      	strlt	r2, [sp, #16]
 8018d82:	7823      	ldrb	r3, [r4, #0]
 8018d84:	2b2e      	cmp	r3, #46	; 0x2e
 8018d86:	d10c      	bne.n	8018da2 <_vfiprintf_r+0x15a>
 8018d88:	7863      	ldrb	r3, [r4, #1]
 8018d8a:	2b2a      	cmp	r3, #42	; 0x2a
 8018d8c:	d134      	bne.n	8018df8 <_vfiprintf_r+0x1b0>
 8018d8e:	9b03      	ldr	r3, [sp, #12]
 8018d90:	1d1a      	adds	r2, r3, #4
 8018d92:	681b      	ldr	r3, [r3, #0]
 8018d94:	9203      	str	r2, [sp, #12]
 8018d96:	2b00      	cmp	r3, #0
 8018d98:	bfb8      	it	lt
 8018d9a:	f04f 33ff 	movlt.w	r3, #4294967295
 8018d9e:	3402      	adds	r4, #2
 8018da0:	9305      	str	r3, [sp, #20]
 8018da2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8018e78 <_vfiprintf_r+0x230>
 8018da6:	7821      	ldrb	r1, [r4, #0]
 8018da8:	2203      	movs	r2, #3
 8018daa:	4650      	mov	r0, sl
 8018dac:	f7e7 fa28 	bl	8000200 <memchr>
 8018db0:	b138      	cbz	r0, 8018dc2 <_vfiprintf_r+0x17a>
 8018db2:	9b04      	ldr	r3, [sp, #16]
 8018db4:	eba0 000a 	sub.w	r0, r0, sl
 8018db8:	2240      	movs	r2, #64	; 0x40
 8018dba:	4082      	lsls	r2, r0
 8018dbc:	4313      	orrs	r3, r2
 8018dbe:	3401      	adds	r4, #1
 8018dc0:	9304      	str	r3, [sp, #16]
 8018dc2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018dc6:	4829      	ldr	r0, [pc, #164]	; (8018e6c <_vfiprintf_r+0x224>)
 8018dc8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8018dcc:	2206      	movs	r2, #6
 8018dce:	f7e7 fa17 	bl	8000200 <memchr>
 8018dd2:	2800      	cmp	r0, #0
 8018dd4:	d03f      	beq.n	8018e56 <_vfiprintf_r+0x20e>
 8018dd6:	4b26      	ldr	r3, [pc, #152]	; (8018e70 <_vfiprintf_r+0x228>)
 8018dd8:	bb1b      	cbnz	r3, 8018e22 <_vfiprintf_r+0x1da>
 8018dda:	9b03      	ldr	r3, [sp, #12]
 8018ddc:	3307      	adds	r3, #7
 8018dde:	f023 0307 	bic.w	r3, r3, #7
 8018de2:	3308      	adds	r3, #8
 8018de4:	9303      	str	r3, [sp, #12]
 8018de6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018de8:	443b      	add	r3, r7
 8018dea:	9309      	str	r3, [sp, #36]	; 0x24
 8018dec:	e768      	b.n	8018cc0 <_vfiprintf_r+0x78>
 8018dee:	fb0c 3202 	mla	r2, ip, r2, r3
 8018df2:	460c      	mov	r4, r1
 8018df4:	2001      	movs	r0, #1
 8018df6:	e7a6      	b.n	8018d46 <_vfiprintf_r+0xfe>
 8018df8:	2300      	movs	r3, #0
 8018dfa:	3401      	adds	r4, #1
 8018dfc:	9305      	str	r3, [sp, #20]
 8018dfe:	4619      	mov	r1, r3
 8018e00:	f04f 0c0a 	mov.w	ip, #10
 8018e04:	4620      	mov	r0, r4
 8018e06:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018e0a:	3a30      	subs	r2, #48	; 0x30
 8018e0c:	2a09      	cmp	r2, #9
 8018e0e:	d903      	bls.n	8018e18 <_vfiprintf_r+0x1d0>
 8018e10:	2b00      	cmp	r3, #0
 8018e12:	d0c6      	beq.n	8018da2 <_vfiprintf_r+0x15a>
 8018e14:	9105      	str	r1, [sp, #20]
 8018e16:	e7c4      	b.n	8018da2 <_vfiprintf_r+0x15a>
 8018e18:	fb0c 2101 	mla	r1, ip, r1, r2
 8018e1c:	4604      	mov	r4, r0
 8018e1e:	2301      	movs	r3, #1
 8018e20:	e7f0      	b.n	8018e04 <_vfiprintf_r+0x1bc>
 8018e22:	ab03      	add	r3, sp, #12
 8018e24:	9300      	str	r3, [sp, #0]
 8018e26:	462a      	mov	r2, r5
 8018e28:	4b12      	ldr	r3, [pc, #72]	; (8018e74 <_vfiprintf_r+0x22c>)
 8018e2a:	a904      	add	r1, sp, #16
 8018e2c:	4630      	mov	r0, r6
 8018e2e:	f3af 8000 	nop.w
 8018e32:	4607      	mov	r7, r0
 8018e34:	1c78      	adds	r0, r7, #1
 8018e36:	d1d6      	bne.n	8018de6 <_vfiprintf_r+0x19e>
 8018e38:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8018e3a:	07d9      	lsls	r1, r3, #31
 8018e3c:	d405      	bmi.n	8018e4a <_vfiprintf_r+0x202>
 8018e3e:	89ab      	ldrh	r3, [r5, #12]
 8018e40:	059a      	lsls	r2, r3, #22
 8018e42:	d402      	bmi.n	8018e4a <_vfiprintf_r+0x202>
 8018e44:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8018e46:	f7fe fa0b 	bl	8017260 <__retarget_lock_release_recursive>
 8018e4a:	89ab      	ldrh	r3, [r5, #12]
 8018e4c:	065b      	lsls	r3, r3, #25
 8018e4e:	f53f af1d 	bmi.w	8018c8c <_vfiprintf_r+0x44>
 8018e52:	9809      	ldr	r0, [sp, #36]	; 0x24
 8018e54:	e71c      	b.n	8018c90 <_vfiprintf_r+0x48>
 8018e56:	ab03      	add	r3, sp, #12
 8018e58:	9300      	str	r3, [sp, #0]
 8018e5a:	462a      	mov	r2, r5
 8018e5c:	4b05      	ldr	r3, [pc, #20]	; (8018e74 <_vfiprintf_r+0x22c>)
 8018e5e:	a904      	add	r1, sp, #16
 8018e60:	4630      	mov	r0, r6
 8018e62:	f7ff fc59 	bl	8018718 <_printf_i>
 8018e66:	e7e4      	b.n	8018e32 <_vfiprintf_r+0x1ea>
 8018e68:	08026134 	.word	0x08026134
 8018e6c:	0802613e 	.word	0x0802613e
 8018e70:	00000000 	.word	0x00000000
 8018e74:	08018c25 	.word	0x08018c25
 8018e78:	0802613a 	.word	0x0802613a

08018e7c <__swbuf_r>:
 8018e7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018e7e:	460e      	mov	r6, r1
 8018e80:	4614      	mov	r4, r2
 8018e82:	4605      	mov	r5, r0
 8018e84:	b118      	cbz	r0, 8018e8e <__swbuf_r+0x12>
 8018e86:	6a03      	ldr	r3, [r0, #32]
 8018e88:	b90b      	cbnz	r3, 8018e8e <__swbuf_r+0x12>
 8018e8a:	f7fe f86f 	bl	8016f6c <__sinit>
 8018e8e:	69a3      	ldr	r3, [r4, #24]
 8018e90:	60a3      	str	r3, [r4, #8]
 8018e92:	89a3      	ldrh	r3, [r4, #12]
 8018e94:	071a      	lsls	r2, r3, #28
 8018e96:	d525      	bpl.n	8018ee4 <__swbuf_r+0x68>
 8018e98:	6923      	ldr	r3, [r4, #16]
 8018e9a:	b31b      	cbz	r3, 8018ee4 <__swbuf_r+0x68>
 8018e9c:	6823      	ldr	r3, [r4, #0]
 8018e9e:	6922      	ldr	r2, [r4, #16]
 8018ea0:	1a98      	subs	r0, r3, r2
 8018ea2:	6963      	ldr	r3, [r4, #20]
 8018ea4:	b2f6      	uxtb	r6, r6
 8018ea6:	4283      	cmp	r3, r0
 8018ea8:	4637      	mov	r7, r6
 8018eaa:	dc04      	bgt.n	8018eb6 <__swbuf_r+0x3a>
 8018eac:	4621      	mov	r1, r4
 8018eae:	4628      	mov	r0, r5
 8018eb0:	f7ff fdda 	bl	8018a68 <_fflush_r>
 8018eb4:	b9e0      	cbnz	r0, 8018ef0 <__swbuf_r+0x74>
 8018eb6:	68a3      	ldr	r3, [r4, #8]
 8018eb8:	3b01      	subs	r3, #1
 8018eba:	60a3      	str	r3, [r4, #8]
 8018ebc:	6823      	ldr	r3, [r4, #0]
 8018ebe:	1c5a      	adds	r2, r3, #1
 8018ec0:	6022      	str	r2, [r4, #0]
 8018ec2:	701e      	strb	r6, [r3, #0]
 8018ec4:	6962      	ldr	r2, [r4, #20]
 8018ec6:	1c43      	adds	r3, r0, #1
 8018ec8:	429a      	cmp	r2, r3
 8018eca:	d004      	beq.n	8018ed6 <__swbuf_r+0x5a>
 8018ecc:	89a3      	ldrh	r3, [r4, #12]
 8018ece:	07db      	lsls	r3, r3, #31
 8018ed0:	d506      	bpl.n	8018ee0 <__swbuf_r+0x64>
 8018ed2:	2e0a      	cmp	r6, #10
 8018ed4:	d104      	bne.n	8018ee0 <__swbuf_r+0x64>
 8018ed6:	4621      	mov	r1, r4
 8018ed8:	4628      	mov	r0, r5
 8018eda:	f7ff fdc5 	bl	8018a68 <_fflush_r>
 8018ede:	b938      	cbnz	r0, 8018ef0 <__swbuf_r+0x74>
 8018ee0:	4638      	mov	r0, r7
 8018ee2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018ee4:	4621      	mov	r1, r4
 8018ee6:	4628      	mov	r0, r5
 8018ee8:	f000 f806 	bl	8018ef8 <__swsetup_r>
 8018eec:	2800      	cmp	r0, #0
 8018eee:	d0d5      	beq.n	8018e9c <__swbuf_r+0x20>
 8018ef0:	f04f 37ff 	mov.w	r7, #4294967295
 8018ef4:	e7f4      	b.n	8018ee0 <__swbuf_r+0x64>
	...

08018ef8 <__swsetup_r>:
 8018ef8:	b538      	push	{r3, r4, r5, lr}
 8018efa:	4b2a      	ldr	r3, [pc, #168]	; (8018fa4 <__swsetup_r+0xac>)
 8018efc:	4605      	mov	r5, r0
 8018efe:	6818      	ldr	r0, [r3, #0]
 8018f00:	460c      	mov	r4, r1
 8018f02:	b118      	cbz	r0, 8018f0c <__swsetup_r+0x14>
 8018f04:	6a03      	ldr	r3, [r0, #32]
 8018f06:	b90b      	cbnz	r3, 8018f0c <__swsetup_r+0x14>
 8018f08:	f7fe f830 	bl	8016f6c <__sinit>
 8018f0c:	89a3      	ldrh	r3, [r4, #12]
 8018f0e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8018f12:	0718      	lsls	r0, r3, #28
 8018f14:	d422      	bmi.n	8018f5c <__swsetup_r+0x64>
 8018f16:	06d9      	lsls	r1, r3, #27
 8018f18:	d407      	bmi.n	8018f2a <__swsetup_r+0x32>
 8018f1a:	2309      	movs	r3, #9
 8018f1c:	602b      	str	r3, [r5, #0]
 8018f1e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8018f22:	81a3      	strh	r3, [r4, #12]
 8018f24:	f04f 30ff 	mov.w	r0, #4294967295
 8018f28:	e034      	b.n	8018f94 <__swsetup_r+0x9c>
 8018f2a:	0758      	lsls	r0, r3, #29
 8018f2c:	d512      	bpl.n	8018f54 <__swsetup_r+0x5c>
 8018f2e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8018f30:	b141      	cbz	r1, 8018f44 <__swsetup_r+0x4c>
 8018f32:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8018f36:	4299      	cmp	r1, r3
 8018f38:	d002      	beq.n	8018f40 <__swsetup_r+0x48>
 8018f3a:	4628      	mov	r0, r5
 8018f3c:	f7fe f9b6 	bl	80172ac <_free_r>
 8018f40:	2300      	movs	r3, #0
 8018f42:	6363      	str	r3, [r4, #52]	; 0x34
 8018f44:	89a3      	ldrh	r3, [r4, #12]
 8018f46:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8018f4a:	81a3      	strh	r3, [r4, #12]
 8018f4c:	2300      	movs	r3, #0
 8018f4e:	6063      	str	r3, [r4, #4]
 8018f50:	6923      	ldr	r3, [r4, #16]
 8018f52:	6023      	str	r3, [r4, #0]
 8018f54:	89a3      	ldrh	r3, [r4, #12]
 8018f56:	f043 0308 	orr.w	r3, r3, #8
 8018f5a:	81a3      	strh	r3, [r4, #12]
 8018f5c:	6923      	ldr	r3, [r4, #16]
 8018f5e:	b94b      	cbnz	r3, 8018f74 <__swsetup_r+0x7c>
 8018f60:	89a3      	ldrh	r3, [r4, #12]
 8018f62:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8018f66:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8018f6a:	d003      	beq.n	8018f74 <__swsetup_r+0x7c>
 8018f6c:	4621      	mov	r1, r4
 8018f6e:	4628      	mov	r0, r5
 8018f70:	f000 f884 	bl	801907c <__smakebuf_r>
 8018f74:	89a0      	ldrh	r0, [r4, #12]
 8018f76:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8018f7a:	f010 0301 	ands.w	r3, r0, #1
 8018f7e:	d00a      	beq.n	8018f96 <__swsetup_r+0x9e>
 8018f80:	2300      	movs	r3, #0
 8018f82:	60a3      	str	r3, [r4, #8]
 8018f84:	6963      	ldr	r3, [r4, #20]
 8018f86:	425b      	negs	r3, r3
 8018f88:	61a3      	str	r3, [r4, #24]
 8018f8a:	6923      	ldr	r3, [r4, #16]
 8018f8c:	b943      	cbnz	r3, 8018fa0 <__swsetup_r+0xa8>
 8018f8e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8018f92:	d1c4      	bne.n	8018f1e <__swsetup_r+0x26>
 8018f94:	bd38      	pop	{r3, r4, r5, pc}
 8018f96:	0781      	lsls	r1, r0, #30
 8018f98:	bf58      	it	pl
 8018f9a:	6963      	ldrpl	r3, [r4, #20]
 8018f9c:	60a3      	str	r3, [r4, #8]
 8018f9e:	e7f4      	b.n	8018f8a <__swsetup_r+0x92>
 8018fa0:	2000      	movs	r0, #0
 8018fa2:	e7f7      	b.n	8018f94 <__swsetup_r+0x9c>
 8018fa4:	20000364 	.word	0x20000364

08018fa8 <_raise_r>:
 8018fa8:	291f      	cmp	r1, #31
 8018faa:	b538      	push	{r3, r4, r5, lr}
 8018fac:	4604      	mov	r4, r0
 8018fae:	460d      	mov	r5, r1
 8018fb0:	d904      	bls.n	8018fbc <_raise_r+0x14>
 8018fb2:	2316      	movs	r3, #22
 8018fb4:	6003      	str	r3, [r0, #0]
 8018fb6:	f04f 30ff 	mov.w	r0, #4294967295
 8018fba:	bd38      	pop	{r3, r4, r5, pc}
 8018fbc:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8018fbe:	b112      	cbz	r2, 8018fc6 <_raise_r+0x1e>
 8018fc0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8018fc4:	b94b      	cbnz	r3, 8018fda <_raise_r+0x32>
 8018fc6:	4620      	mov	r0, r4
 8018fc8:	f000 f830 	bl	801902c <_getpid_r>
 8018fcc:	462a      	mov	r2, r5
 8018fce:	4601      	mov	r1, r0
 8018fd0:	4620      	mov	r0, r4
 8018fd2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8018fd6:	f000 b817 	b.w	8019008 <_kill_r>
 8018fda:	2b01      	cmp	r3, #1
 8018fdc:	d00a      	beq.n	8018ff4 <_raise_r+0x4c>
 8018fde:	1c59      	adds	r1, r3, #1
 8018fe0:	d103      	bne.n	8018fea <_raise_r+0x42>
 8018fe2:	2316      	movs	r3, #22
 8018fe4:	6003      	str	r3, [r0, #0]
 8018fe6:	2001      	movs	r0, #1
 8018fe8:	e7e7      	b.n	8018fba <_raise_r+0x12>
 8018fea:	2400      	movs	r4, #0
 8018fec:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8018ff0:	4628      	mov	r0, r5
 8018ff2:	4798      	blx	r3
 8018ff4:	2000      	movs	r0, #0
 8018ff6:	e7e0      	b.n	8018fba <_raise_r+0x12>

08018ff8 <raise>:
 8018ff8:	4b02      	ldr	r3, [pc, #8]	; (8019004 <raise+0xc>)
 8018ffa:	4601      	mov	r1, r0
 8018ffc:	6818      	ldr	r0, [r3, #0]
 8018ffe:	f7ff bfd3 	b.w	8018fa8 <_raise_r>
 8019002:	bf00      	nop
 8019004:	20000364 	.word	0x20000364

08019008 <_kill_r>:
 8019008:	b538      	push	{r3, r4, r5, lr}
 801900a:	4d07      	ldr	r5, [pc, #28]	; (8019028 <_kill_r+0x20>)
 801900c:	2300      	movs	r3, #0
 801900e:	4604      	mov	r4, r0
 8019010:	4608      	mov	r0, r1
 8019012:	4611      	mov	r1, r2
 8019014:	602b      	str	r3, [r5, #0]
 8019016:	f7e8 fbc5 	bl	80017a4 <_kill>
 801901a:	1c43      	adds	r3, r0, #1
 801901c:	d102      	bne.n	8019024 <_kill_r+0x1c>
 801901e:	682b      	ldr	r3, [r5, #0]
 8019020:	b103      	cbz	r3, 8019024 <_kill_r+0x1c>
 8019022:	6023      	str	r3, [r4, #0]
 8019024:	bd38      	pop	{r3, r4, r5, pc}
 8019026:	bf00      	nop
 8019028:	200070dc 	.word	0x200070dc

0801902c <_getpid_r>:
 801902c:	f7e8 bbb2 	b.w	8001794 <_getpid>

08019030 <__swhatbuf_r>:
 8019030:	b570      	push	{r4, r5, r6, lr}
 8019032:	460c      	mov	r4, r1
 8019034:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019038:	2900      	cmp	r1, #0
 801903a:	b096      	sub	sp, #88	; 0x58
 801903c:	4615      	mov	r5, r2
 801903e:	461e      	mov	r6, r3
 8019040:	da0d      	bge.n	801905e <__swhatbuf_r+0x2e>
 8019042:	89a3      	ldrh	r3, [r4, #12]
 8019044:	f013 0f80 	tst.w	r3, #128	; 0x80
 8019048:	f04f 0100 	mov.w	r1, #0
 801904c:	bf0c      	ite	eq
 801904e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8019052:	2340      	movne	r3, #64	; 0x40
 8019054:	2000      	movs	r0, #0
 8019056:	6031      	str	r1, [r6, #0]
 8019058:	602b      	str	r3, [r5, #0]
 801905a:	b016      	add	sp, #88	; 0x58
 801905c:	bd70      	pop	{r4, r5, r6, pc}
 801905e:	466a      	mov	r2, sp
 8019060:	f000 f848 	bl	80190f4 <_fstat_r>
 8019064:	2800      	cmp	r0, #0
 8019066:	dbec      	blt.n	8019042 <__swhatbuf_r+0x12>
 8019068:	9901      	ldr	r1, [sp, #4]
 801906a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 801906e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8019072:	4259      	negs	r1, r3
 8019074:	4159      	adcs	r1, r3
 8019076:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801907a:	e7eb      	b.n	8019054 <__swhatbuf_r+0x24>

0801907c <__smakebuf_r>:
 801907c:	898b      	ldrh	r3, [r1, #12]
 801907e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8019080:	079d      	lsls	r5, r3, #30
 8019082:	4606      	mov	r6, r0
 8019084:	460c      	mov	r4, r1
 8019086:	d507      	bpl.n	8019098 <__smakebuf_r+0x1c>
 8019088:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801908c:	6023      	str	r3, [r4, #0]
 801908e:	6123      	str	r3, [r4, #16]
 8019090:	2301      	movs	r3, #1
 8019092:	6163      	str	r3, [r4, #20]
 8019094:	b002      	add	sp, #8
 8019096:	bd70      	pop	{r4, r5, r6, pc}
 8019098:	ab01      	add	r3, sp, #4
 801909a:	466a      	mov	r2, sp
 801909c:	f7ff ffc8 	bl	8019030 <__swhatbuf_r>
 80190a0:	9900      	ldr	r1, [sp, #0]
 80190a2:	4605      	mov	r5, r0
 80190a4:	4630      	mov	r0, r6
 80190a6:	f7fc ff59 	bl	8015f5c <_malloc_r>
 80190aa:	b948      	cbnz	r0, 80190c0 <__smakebuf_r+0x44>
 80190ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80190b0:	059a      	lsls	r2, r3, #22
 80190b2:	d4ef      	bmi.n	8019094 <__smakebuf_r+0x18>
 80190b4:	f023 0303 	bic.w	r3, r3, #3
 80190b8:	f043 0302 	orr.w	r3, r3, #2
 80190bc:	81a3      	strh	r3, [r4, #12]
 80190be:	e7e3      	b.n	8019088 <__smakebuf_r+0xc>
 80190c0:	89a3      	ldrh	r3, [r4, #12]
 80190c2:	6020      	str	r0, [r4, #0]
 80190c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80190c8:	81a3      	strh	r3, [r4, #12]
 80190ca:	9b00      	ldr	r3, [sp, #0]
 80190cc:	6163      	str	r3, [r4, #20]
 80190ce:	9b01      	ldr	r3, [sp, #4]
 80190d0:	6120      	str	r0, [r4, #16]
 80190d2:	b15b      	cbz	r3, 80190ec <__smakebuf_r+0x70>
 80190d4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80190d8:	4630      	mov	r0, r6
 80190da:	f000 f81d 	bl	8019118 <_isatty_r>
 80190de:	b128      	cbz	r0, 80190ec <__smakebuf_r+0x70>
 80190e0:	89a3      	ldrh	r3, [r4, #12]
 80190e2:	f023 0303 	bic.w	r3, r3, #3
 80190e6:	f043 0301 	orr.w	r3, r3, #1
 80190ea:	81a3      	strh	r3, [r4, #12]
 80190ec:	89a3      	ldrh	r3, [r4, #12]
 80190ee:	431d      	orrs	r5, r3
 80190f0:	81a5      	strh	r5, [r4, #12]
 80190f2:	e7cf      	b.n	8019094 <__smakebuf_r+0x18>

080190f4 <_fstat_r>:
 80190f4:	b538      	push	{r3, r4, r5, lr}
 80190f6:	4d07      	ldr	r5, [pc, #28]	; (8019114 <_fstat_r+0x20>)
 80190f8:	2300      	movs	r3, #0
 80190fa:	4604      	mov	r4, r0
 80190fc:	4608      	mov	r0, r1
 80190fe:	4611      	mov	r1, r2
 8019100:	602b      	str	r3, [r5, #0]
 8019102:	f7e8 fbae 	bl	8001862 <_fstat>
 8019106:	1c43      	adds	r3, r0, #1
 8019108:	d102      	bne.n	8019110 <_fstat_r+0x1c>
 801910a:	682b      	ldr	r3, [r5, #0]
 801910c:	b103      	cbz	r3, 8019110 <_fstat_r+0x1c>
 801910e:	6023      	str	r3, [r4, #0]
 8019110:	bd38      	pop	{r3, r4, r5, pc}
 8019112:	bf00      	nop
 8019114:	200070dc 	.word	0x200070dc

08019118 <_isatty_r>:
 8019118:	b538      	push	{r3, r4, r5, lr}
 801911a:	4d06      	ldr	r5, [pc, #24]	; (8019134 <_isatty_r+0x1c>)
 801911c:	2300      	movs	r3, #0
 801911e:	4604      	mov	r4, r0
 8019120:	4608      	mov	r0, r1
 8019122:	602b      	str	r3, [r5, #0]
 8019124:	f7e8 fbad 	bl	8001882 <_isatty>
 8019128:	1c43      	adds	r3, r0, #1
 801912a:	d102      	bne.n	8019132 <_isatty_r+0x1a>
 801912c:	682b      	ldr	r3, [r5, #0]
 801912e:	b103      	cbz	r3, 8019132 <_isatty_r+0x1a>
 8019130:	6023      	str	r3, [r4, #0]
 8019132:	bd38      	pop	{r3, r4, r5, pc}
 8019134:	200070dc 	.word	0x200070dc

08019138 <_init>:
 8019138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801913a:	bf00      	nop
 801913c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801913e:	bc08      	pop	{r3}
 8019140:	469e      	mov	lr, r3
 8019142:	4770      	bx	lr

08019144 <_fini>:
 8019144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019146:	bf00      	nop
 8019148:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801914a:	bc08      	pop	{r3}
 801914c:	469e      	mov	lr, r3
 801914e:	4770      	bx	lr
