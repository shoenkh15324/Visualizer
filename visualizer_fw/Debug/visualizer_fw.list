
visualizer_fw.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007ac0  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08007c58  08007c58  00017c58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007cb8  08007cb8  00020104  2**0
                  CONTENTS
  4 .ARM          00000008  08007cb8  08007cb8  00017cb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007cc0  08007cc0  00020104  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007cc0  08007cc0  00017cc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007cc4  08007cc4  00017cc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000104  20000000  08007cc8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002054  20000104  08007dcc  00020104  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002158  08007dcc  00022158  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020104  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020134  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012010  00000000  00000000  00020177  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000033c7  00000000  00000000  00032187  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e68  00000000  00000000  00035550  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ad1  00000000  00000000  000363b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000189e2  00000000  00000000  00036e89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000149fc  00000000  00000000  0004f86b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00089d98  00000000  00000000  00064267  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000039ac  00000000  00000000  000ee000  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000081  00000000  00000000  000f19ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000104 	.word	0x20000104
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08007c40 	.word	0x08007c40

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000108 	.word	0x20000108
 80001d4:	08007c40 	.word	0x08007c40

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b970 	b.w	80004d0 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	460d      	mov	r5, r1
 8000210:	4604      	mov	r4, r0
 8000212:	460f      	mov	r7, r1
 8000214:	2b00      	cmp	r3, #0
 8000216:	d14a      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000218:	428a      	cmp	r2, r1
 800021a:	4694      	mov	ip, r2
 800021c:	d965      	bls.n	80002ea <__udivmoddi4+0xe2>
 800021e:	fab2 f382 	clz	r3, r2
 8000222:	b143      	cbz	r3, 8000236 <__udivmoddi4+0x2e>
 8000224:	fa02 fc03 	lsl.w	ip, r2, r3
 8000228:	f1c3 0220 	rsb	r2, r3, #32
 800022c:	409f      	lsls	r7, r3
 800022e:	fa20 f202 	lsr.w	r2, r0, r2
 8000232:	4317      	orrs	r7, r2
 8000234:	409c      	lsls	r4, r3
 8000236:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800023a:	fa1f f58c 	uxth.w	r5, ip
 800023e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000242:	0c22      	lsrs	r2, r4, #16
 8000244:	fb0e 7711 	mls	r7, lr, r1, r7
 8000248:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800024c:	fb01 f005 	mul.w	r0, r1, r5
 8000250:	4290      	cmp	r0, r2
 8000252:	d90a      	bls.n	800026a <__udivmoddi4+0x62>
 8000254:	eb1c 0202 	adds.w	r2, ip, r2
 8000258:	f101 37ff 	add.w	r7, r1, #4294967295
 800025c:	f080 811c 	bcs.w	8000498 <__udivmoddi4+0x290>
 8000260:	4290      	cmp	r0, r2
 8000262:	f240 8119 	bls.w	8000498 <__udivmoddi4+0x290>
 8000266:	3902      	subs	r1, #2
 8000268:	4462      	add	r2, ip
 800026a:	1a12      	subs	r2, r2, r0
 800026c:	b2a4      	uxth	r4, r4
 800026e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000272:	fb0e 2210 	mls	r2, lr, r0, r2
 8000276:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800027a:	fb00 f505 	mul.w	r5, r0, r5
 800027e:	42a5      	cmp	r5, r4
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x90>
 8000282:	eb1c 0404 	adds.w	r4, ip, r4
 8000286:	f100 32ff 	add.w	r2, r0, #4294967295
 800028a:	f080 8107 	bcs.w	800049c <__udivmoddi4+0x294>
 800028e:	42a5      	cmp	r5, r4
 8000290:	f240 8104 	bls.w	800049c <__udivmoddi4+0x294>
 8000294:	4464      	add	r4, ip
 8000296:	3802      	subs	r0, #2
 8000298:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800029c:	1b64      	subs	r4, r4, r5
 800029e:	2100      	movs	r1, #0
 80002a0:	b11e      	cbz	r6, 80002aa <__udivmoddi4+0xa2>
 80002a2:	40dc      	lsrs	r4, r3
 80002a4:	2300      	movs	r3, #0
 80002a6:	e9c6 4300 	strd	r4, r3, [r6]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d908      	bls.n	80002c4 <__udivmoddi4+0xbc>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80ed 	beq.w	8000492 <__udivmoddi4+0x28a>
 80002b8:	2100      	movs	r1, #0
 80002ba:	e9c6 0500 	strd	r0, r5, [r6]
 80002be:	4608      	mov	r0, r1
 80002c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c4:	fab3 f183 	clz	r1, r3
 80002c8:	2900      	cmp	r1, #0
 80002ca:	d149      	bne.n	8000360 <__udivmoddi4+0x158>
 80002cc:	42ab      	cmp	r3, r5
 80002ce:	d302      	bcc.n	80002d6 <__udivmoddi4+0xce>
 80002d0:	4282      	cmp	r2, r0
 80002d2:	f200 80f8 	bhi.w	80004c6 <__udivmoddi4+0x2be>
 80002d6:	1a84      	subs	r4, r0, r2
 80002d8:	eb65 0203 	sbc.w	r2, r5, r3
 80002dc:	2001      	movs	r0, #1
 80002de:	4617      	mov	r7, r2
 80002e0:	2e00      	cmp	r6, #0
 80002e2:	d0e2      	beq.n	80002aa <__udivmoddi4+0xa2>
 80002e4:	e9c6 4700 	strd	r4, r7, [r6]
 80002e8:	e7df      	b.n	80002aa <__udivmoddi4+0xa2>
 80002ea:	b902      	cbnz	r2, 80002ee <__udivmoddi4+0xe6>
 80002ec:	deff      	udf	#255	; 0xff
 80002ee:	fab2 f382 	clz	r3, r2
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	f040 8090 	bne.w	8000418 <__udivmoddi4+0x210>
 80002f8:	1a8a      	subs	r2, r1, r2
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2101      	movs	r1, #1
 8000304:	fbb2 f5f7 	udiv	r5, r2, r7
 8000308:	fb07 2015 	mls	r0, r7, r5, r2
 800030c:	0c22      	lsrs	r2, r4, #16
 800030e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000312:	fb0e f005 	mul.w	r0, lr, r5
 8000316:	4290      	cmp	r0, r2
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x124>
 800031a:	eb1c 0202 	adds.w	r2, ip, r2
 800031e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4290      	cmp	r0, r2
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2b8>
 800032a:	4645      	mov	r5, r8
 800032c:	1a12      	subs	r2, r2, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb2 f0f7 	udiv	r0, r2, r7
 8000334:	fb07 2210 	mls	r2, r7, r0, r2
 8000338:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x14e>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 32ff 	add.w	r2, r0, #4294967295
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x14c>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2c2>
 8000354:	4610      	mov	r0, r2
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800035e:	e79f      	b.n	80002a0 <__udivmoddi4+0x98>
 8000360:	f1c1 0720 	rsb	r7, r1, #32
 8000364:	408b      	lsls	r3, r1
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa05 f401 	lsl.w	r4, r5, r1
 8000372:	fa20 f307 	lsr.w	r3, r0, r7
 8000376:	40fd      	lsrs	r5, r7
 8000378:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037c:	4323      	orrs	r3, r4
 800037e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000382:	fa1f fe8c 	uxth.w	lr, ip
 8000386:	fb09 5518 	mls	r5, r9, r8, r5
 800038a:	0c1c      	lsrs	r4, r3, #16
 800038c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000390:	fb08 f50e 	mul.w	r5, r8, lr
 8000394:	42a5      	cmp	r5, r4
 8000396:	fa02 f201 	lsl.w	r2, r2, r1
 800039a:	fa00 f001 	lsl.w	r0, r0, r1
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1c 0404 	adds.w	r4, ip, r4
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2b4>
 80003ac:	42a5      	cmp	r5, r4
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2b4>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4464      	add	r4, ip
 80003b8:	1b64      	subs	r4, r4, r5
 80003ba:	b29d      	uxth	r5, r3
 80003bc:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c0:	fb09 4413 	mls	r4, r9, r3, r4
 80003c4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003cc:	45a6      	cmp	lr, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1c 0404 	adds.w	r4, ip, r4
 80003d4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2ac>
 80003da:	45a6      	cmp	lr, r4
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2ac>
 80003de:	3b02      	subs	r3, #2
 80003e0:	4464      	add	r4, ip
 80003e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003e6:	fba3 9502 	umull	r9, r5, r3, r2
 80003ea:	eba4 040e 	sub.w	r4, r4, lr
 80003ee:	42ac      	cmp	r4, r5
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46ae      	mov	lr, r5
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x29c>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x298>
 80003f8:	b156      	cbz	r6, 8000410 <__udivmoddi4+0x208>
 80003fa:	ebb0 0208 	subs.w	r2, r0, r8
 80003fe:	eb64 040e 	sbc.w	r4, r4, lr
 8000402:	fa04 f707 	lsl.w	r7, r4, r7
 8000406:	40ca      	lsrs	r2, r1
 8000408:	40cc      	lsrs	r4, r1
 800040a:	4317      	orrs	r7, r2
 800040c:	e9c6 7400 	strd	r7, r4, [r6]
 8000410:	4618      	mov	r0, r3
 8000412:	2100      	movs	r1, #0
 8000414:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000418:	f1c3 0120 	rsb	r1, r3, #32
 800041c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000420:	fa20 f201 	lsr.w	r2, r0, r1
 8000424:	fa25 f101 	lsr.w	r1, r5, r1
 8000428:	409d      	lsls	r5, r3
 800042a:	432a      	orrs	r2, r5
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb1 f0f7 	udiv	r0, r1, r7
 8000438:	fb07 1510 	mls	r5, r7, r0, r1
 800043c:	0c11      	lsrs	r1, r2, #16
 800043e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000442:	fb00 f50e 	mul.w	r5, r0, lr
 8000446:	428d      	cmp	r5, r1
 8000448:	fa04 f403 	lsl.w	r4, r4, r3
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x258>
 800044e:	eb1c 0101 	adds.w	r1, ip, r1
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 8000458:	428d      	cmp	r5, r1
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800045c:	3802      	subs	r0, #2
 800045e:	4461      	add	r1, ip
 8000460:	1b49      	subs	r1, r1, r5
 8000462:	b292      	uxth	r2, r2
 8000464:	fbb1 f5f7 	udiv	r5, r1, r7
 8000468:	fb07 1115 	mls	r1, r7, r5, r1
 800046c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000470:	fb05 f10e 	mul.w	r1, r5, lr
 8000474:	4291      	cmp	r1, r2
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x282>
 8000478:	eb1c 0202 	adds.w	r2, ip, r2
 800047c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 8000482:	4291      	cmp	r1, r2
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000486:	3d02      	subs	r5, #2
 8000488:	4462      	add	r2, ip
 800048a:	1a52      	subs	r2, r2, r1
 800048c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0xfc>
 8000492:	4631      	mov	r1, r6
 8000494:	4630      	mov	r0, r6
 8000496:	e708      	b.n	80002aa <__udivmoddi4+0xa2>
 8000498:	4639      	mov	r1, r7
 800049a:	e6e6      	b.n	800026a <__udivmoddi4+0x62>
 800049c:	4610      	mov	r0, r2
 800049e:	e6fb      	b.n	8000298 <__udivmoddi4+0x90>
 80004a0:	4548      	cmp	r0, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ac:	3b01      	subs	r3, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004b0:	4645      	mov	r5, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x282>
 80004b4:	462b      	mov	r3, r5
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x258>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004c0:	3d02      	subs	r5, #2
 80004c2:	4462      	add	r2, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x124>
 80004c6:	4608      	mov	r0, r1
 80004c8:	e70a      	b.n	80002e0 <__udivmoddi4+0xd8>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x14e>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004d4:	b480      	push	{r7}
 80004d6:	b083      	sub	sp, #12
 80004d8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80004da:	2300      	movs	r3, #0
 80004dc:	607b      	str	r3, [r7, #4]
 80004de:	4b10      	ldr	r3, [pc, #64]	; (8000520 <MX_GPIO_Init+0x4c>)
 80004e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004e2:	4a0f      	ldr	r2, [pc, #60]	; (8000520 <MX_GPIO_Init+0x4c>)
 80004e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80004e8:	6313      	str	r3, [r2, #48]	; 0x30
 80004ea:	4b0d      	ldr	r3, [pc, #52]	; (8000520 <MX_GPIO_Init+0x4c>)
 80004ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80004f2:	607b      	str	r3, [r7, #4]
 80004f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004f6:	2300      	movs	r3, #0
 80004f8:	603b      	str	r3, [r7, #0]
 80004fa:	4b09      	ldr	r3, [pc, #36]	; (8000520 <MX_GPIO_Init+0x4c>)
 80004fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004fe:	4a08      	ldr	r2, [pc, #32]	; (8000520 <MX_GPIO_Init+0x4c>)
 8000500:	f043 0301 	orr.w	r3, r3, #1
 8000504:	6313      	str	r3, [r2, #48]	; 0x30
 8000506:	4b06      	ldr	r3, [pc, #24]	; (8000520 <MX_GPIO_Init+0x4c>)
 8000508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800050a:	f003 0301 	and.w	r3, r3, #1
 800050e:	603b      	str	r3, [r7, #0]
 8000510:	683b      	ldr	r3, [r7, #0]

}
 8000512:	bf00      	nop
 8000514:	370c      	adds	r7, #12
 8000516:	46bd      	mov	sp, r7
 8000518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800051c:	4770      	bx	lr
 800051e:	bf00      	nop
 8000520:	40023800 	.word	0x40023800

08000524 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000528:	f000 f9b8 	bl	800089c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800052c:	f000 f808 	bl	8000540 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000530:	f7ff ffd0 	bl	80004d4 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8000534:	f006 fe00 	bl	8007138 <MX_USB_DEVICE_Init>
  MX_USART1_UART_Init();
 8000538:	f000 f8e8 	bl	800070c <MX_USART1_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800053c:	e7fe      	b.n	800053c <main+0x18>
	...

08000540 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b094      	sub	sp, #80	; 0x50
 8000544:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000546:	f107 0320 	add.w	r3, r7, #32
 800054a:	2230      	movs	r2, #48	; 0x30
 800054c:	2100      	movs	r1, #0
 800054e:	4618      	mov	r0, r3
 8000550:	f007 fb4a 	bl	8007be8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000554:	f107 030c 	add.w	r3, r7, #12
 8000558:	2200      	movs	r2, #0
 800055a:	601a      	str	r2, [r3, #0]
 800055c:	605a      	str	r2, [r3, #4]
 800055e:	609a      	str	r2, [r3, #8]
 8000560:	60da      	str	r2, [r3, #12]
 8000562:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000564:	2300      	movs	r3, #0
 8000566:	60bb      	str	r3, [r7, #8]
 8000568:	4b27      	ldr	r3, [pc, #156]	; (8000608 <SystemClock_Config+0xc8>)
 800056a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800056c:	4a26      	ldr	r2, [pc, #152]	; (8000608 <SystemClock_Config+0xc8>)
 800056e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000572:	6413      	str	r3, [r2, #64]	; 0x40
 8000574:	4b24      	ldr	r3, [pc, #144]	; (8000608 <SystemClock_Config+0xc8>)
 8000576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000578:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800057c:	60bb      	str	r3, [r7, #8]
 800057e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000580:	2300      	movs	r3, #0
 8000582:	607b      	str	r3, [r7, #4]
 8000584:	4b21      	ldr	r3, [pc, #132]	; (800060c <SystemClock_Config+0xcc>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	4a20      	ldr	r2, [pc, #128]	; (800060c <SystemClock_Config+0xcc>)
 800058a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800058e:	6013      	str	r3, [r2, #0]
 8000590:	4b1e      	ldr	r3, [pc, #120]	; (800060c <SystemClock_Config+0xcc>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000598:	607b      	str	r3, [r7, #4]
 800059a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800059c:	2301      	movs	r3, #1
 800059e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005a0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005a4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005a6:	2302      	movs	r3, #2
 80005a8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005aa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80005b0:	2319      	movs	r3, #25
 80005b2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 80005b4:	23c0      	movs	r3, #192	; 0xc0
 80005b6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005b8:	2302      	movs	r3, #2
 80005ba:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80005bc:	2304      	movs	r3, #4
 80005be:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005c0:	f107 0320 	add.w	r3, r7, #32
 80005c4:	4618      	mov	r0, r3
 80005c6:	f001 ff77 	bl	80024b8 <HAL_RCC_OscConfig>
 80005ca:	4603      	mov	r3, r0
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d001      	beq.n	80005d4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80005d0:	f000 f81e 	bl	8000610 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005d4:	230f      	movs	r3, #15
 80005d6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005d8:	2302      	movs	r3, #2
 80005da:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005dc:	2300      	movs	r3, #0
 80005de:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005e4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005e6:	2300      	movs	r3, #0
 80005e8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80005ea:	f107 030c 	add.w	r3, r7, #12
 80005ee:	2103      	movs	r1, #3
 80005f0:	4618      	mov	r0, r3
 80005f2:	f002 f9d9 	bl	80029a8 <HAL_RCC_ClockConfig>
 80005f6:	4603      	mov	r3, r0
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d001      	beq.n	8000600 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80005fc:	f000 f808 	bl	8000610 <Error_Handler>
  }
}
 8000600:	bf00      	nop
 8000602:	3750      	adds	r7, #80	; 0x50
 8000604:	46bd      	mov	sp, r7
 8000606:	bd80      	pop	{r7, pc}
 8000608:	40023800 	.word	0x40023800
 800060c:	40007000 	.word	0x40007000

08000610 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000610:	b480      	push	{r7}
 8000612:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000614:	b672      	cpsid	i
}
 8000616:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000618:	e7fe      	b.n	8000618 <Error_Handler+0x8>
	...

0800061c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800061c:	b480      	push	{r7}
 800061e:	b083      	sub	sp, #12
 8000620:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000622:	2300      	movs	r3, #0
 8000624:	607b      	str	r3, [r7, #4]
 8000626:	4b10      	ldr	r3, [pc, #64]	; (8000668 <HAL_MspInit+0x4c>)
 8000628:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800062a:	4a0f      	ldr	r2, [pc, #60]	; (8000668 <HAL_MspInit+0x4c>)
 800062c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000630:	6453      	str	r3, [r2, #68]	; 0x44
 8000632:	4b0d      	ldr	r3, [pc, #52]	; (8000668 <HAL_MspInit+0x4c>)
 8000634:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000636:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800063a:	607b      	str	r3, [r7, #4]
 800063c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800063e:	2300      	movs	r3, #0
 8000640:	603b      	str	r3, [r7, #0]
 8000642:	4b09      	ldr	r3, [pc, #36]	; (8000668 <HAL_MspInit+0x4c>)
 8000644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000646:	4a08      	ldr	r2, [pc, #32]	; (8000668 <HAL_MspInit+0x4c>)
 8000648:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800064c:	6413      	str	r3, [r2, #64]	; 0x40
 800064e:	4b06      	ldr	r3, [pc, #24]	; (8000668 <HAL_MspInit+0x4c>)
 8000650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000652:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000656:	603b      	str	r3, [r7, #0]
 8000658:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800065a:	bf00      	nop
 800065c:	370c      	adds	r7, #12
 800065e:	46bd      	mov	sp, r7
 8000660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000664:	4770      	bx	lr
 8000666:	bf00      	nop
 8000668:	40023800 	.word	0x40023800

0800066c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800066c:	b480      	push	{r7}
 800066e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000670:	e7fe      	b.n	8000670 <NMI_Handler+0x4>

08000672 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000672:	b480      	push	{r7}
 8000674:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000676:	e7fe      	b.n	8000676 <HardFault_Handler+0x4>

08000678 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000678:	b480      	push	{r7}
 800067a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800067c:	e7fe      	b.n	800067c <MemManage_Handler+0x4>

0800067e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800067e:	b480      	push	{r7}
 8000680:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000682:	e7fe      	b.n	8000682 <BusFault_Handler+0x4>

08000684 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000684:	b480      	push	{r7}
 8000686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000688:	e7fe      	b.n	8000688 <UsageFault_Handler+0x4>

0800068a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800068a:	b480      	push	{r7}
 800068c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800068e:	bf00      	nop
 8000690:	46bd      	mov	sp, r7
 8000692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000696:	4770      	bx	lr

08000698 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000698:	b480      	push	{r7}
 800069a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800069c:	bf00      	nop
 800069e:	46bd      	mov	sp, r7
 80006a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a4:	4770      	bx	lr

080006a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006a6:	b480      	push	{r7}
 80006a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006aa:	bf00      	nop
 80006ac:	46bd      	mov	sp, r7
 80006ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b2:	4770      	bx	lr

080006b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006b8:	f000 f942 	bl	8000940 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006bc:	bf00      	nop
 80006be:	bd80      	pop	{r7, pc}

080006c0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80006c4:	4802      	ldr	r0, [pc, #8]	; (80006d0 <USART1_IRQHandler+0x10>)
 80006c6:	f002 fb9f 	bl	8002e08 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80006ca:	bf00      	nop
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	20000120 	.word	0x20000120

080006d4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80006d8:	4802      	ldr	r0, [pc, #8]	; (80006e4 <OTG_FS_IRQHandler+0x10>)
 80006da:	f000 fde1 	bl	80012a0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80006de:	bf00      	nop
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	20001a54 	.word	0x20001a54

080006e8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80006e8:	b480      	push	{r7}
 80006ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80006ec:	4b06      	ldr	r3, [pc, #24]	; (8000708 <SystemInit+0x20>)
 80006ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80006f2:	4a05      	ldr	r2, [pc, #20]	; (8000708 <SystemInit+0x20>)
 80006f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80006f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006fc:	bf00      	nop
 80006fe:	46bd      	mov	sp, r7
 8000700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000704:	4770      	bx	lr
 8000706:	bf00      	nop
 8000708:	e000ed00 	.word	0xe000ed00

0800070c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000710:	4b11      	ldr	r3, [pc, #68]	; (8000758 <MX_USART1_UART_Init+0x4c>)
 8000712:	4a12      	ldr	r2, [pc, #72]	; (800075c <MX_USART1_UART_Init+0x50>)
 8000714:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000716:	4b10      	ldr	r3, [pc, #64]	; (8000758 <MX_USART1_UART_Init+0x4c>)
 8000718:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800071c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800071e:	4b0e      	ldr	r3, [pc, #56]	; (8000758 <MX_USART1_UART_Init+0x4c>)
 8000720:	2200      	movs	r2, #0
 8000722:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000724:	4b0c      	ldr	r3, [pc, #48]	; (8000758 <MX_USART1_UART_Init+0x4c>)
 8000726:	2200      	movs	r2, #0
 8000728:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800072a:	4b0b      	ldr	r3, [pc, #44]	; (8000758 <MX_USART1_UART_Init+0x4c>)
 800072c:	2200      	movs	r2, #0
 800072e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000730:	4b09      	ldr	r3, [pc, #36]	; (8000758 <MX_USART1_UART_Init+0x4c>)
 8000732:	220c      	movs	r2, #12
 8000734:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000736:	4b08      	ldr	r3, [pc, #32]	; (8000758 <MX_USART1_UART_Init+0x4c>)
 8000738:	2200      	movs	r2, #0
 800073a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800073c:	4b06      	ldr	r3, [pc, #24]	; (8000758 <MX_USART1_UART_Init+0x4c>)
 800073e:	2200      	movs	r2, #0
 8000740:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000742:	4805      	ldr	r0, [pc, #20]	; (8000758 <MX_USART1_UART_Init+0x4c>)
 8000744:	f002 fb10 	bl	8002d68 <HAL_UART_Init>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d001      	beq.n	8000752 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800074e:	f7ff ff5f 	bl	8000610 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000752:	bf00      	nop
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	20000120 	.word	0x20000120
 800075c:	40011000 	.word	0x40011000

08000760 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b08a      	sub	sp, #40	; 0x28
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000768:	f107 0314 	add.w	r3, r7, #20
 800076c:	2200      	movs	r2, #0
 800076e:	601a      	str	r2, [r3, #0]
 8000770:	605a      	str	r2, [r3, #4]
 8000772:	609a      	str	r2, [r3, #8]
 8000774:	60da      	str	r2, [r3, #12]
 8000776:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	4a1d      	ldr	r2, [pc, #116]	; (80007f4 <HAL_UART_MspInit+0x94>)
 800077e:	4293      	cmp	r3, r2
 8000780:	d134      	bne.n	80007ec <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000782:	2300      	movs	r3, #0
 8000784:	613b      	str	r3, [r7, #16]
 8000786:	4b1c      	ldr	r3, [pc, #112]	; (80007f8 <HAL_UART_MspInit+0x98>)
 8000788:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800078a:	4a1b      	ldr	r2, [pc, #108]	; (80007f8 <HAL_UART_MspInit+0x98>)
 800078c:	f043 0310 	orr.w	r3, r3, #16
 8000790:	6453      	str	r3, [r2, #68]	; 0x44
 8000792:	4b19      	ldr	r3, [pc, #100]	; (80007f8 <HAL_UART_MspInit+0x98>)
 8000794:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000796:	f003 0310 	and.w	r3, r3, #16
 800079a:	613b      	str	r3, [r7, #16]
 800079c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800079e:	2300      	movs	r3, #0
 80007a0:	60fb      	str	r3, [r7, #12]
 80007a2:	4b15      	ldr	r3, [pc, #84]	; (80007f8 <HAL_UART_MspInit+0x98>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a6:	4a14      	ldr	r2, [pc, #80]	; (80007f8 <HAL_UART_MspInit+0x98>)
 80007a8:	f043 0301 	orr.w	r3, r3, #1
 80007ac:	6313      	str	r3, [r2, #48]	; 0x30
 80007ae:	4b12      	ldr	r3, [pc, #72]	; (80007f8 <HAL_UART_MspInit+0x98>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b2:	f003 0301 	and.w	r3, r3, #1
 80007b6:	60fb      	str	r3, [r7, #12]
 80007b8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80007ba:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80007be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007c0:	2302      	movs	r3, #2
 80007c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c4:	2300      	movs	r3, #0
 80007c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007c8:	2303      	movs	r3, #3
 80007ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80007cc:	2307      	movs	r3, #7
 80007ce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007d0:	f107 0314 	add.w	r3, r7, #20
 80007d4:	4619      	mov	r1, r3
 80007d6:	4809      	ldr	r0, [pc, #36]	; (80007fc <HAL_UART_MspInit+0x9c>)
 80007d8:	f000 fa9a 	bl	8000d10 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80007dc:	2200      	movs	r2, #0
 80007de:	2100      	movs	r1, #0
 80007e0:	2025      	movs	r0, #37	; 0x25
 80007e2:	f000 f9cc 	bl	8000b7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80007e6:	2025      	movs	r0, #37	; 0x25
 80007e8:	f000 f9e5 	bl	8000bb6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80007ec:	bf00      	nop
 80007ee:	3728      	adds	r7, #40	; 0x28
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bd80      	pop	{r7, pc}
 80007f4:	40011000 	.word	0x40011000
 80007f8:	40023800 	.word	0x40023800
 80007fc:	40020000 	.word	0x40020000

08000800 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000800:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000838 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000804:	f7ff ff70 	bl	80006e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000808:	480c      	ldr	r0, [pc, #48]	; (800083c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800080a:	490d      	ldr	r1, [pc, #52]	; (8000840 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800080c:	4a0d      	ldr	r2, [pc, #52]	; (8000844 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800080e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000810:	e002      	b.n	8000818 <LoopCopyDataInit>

08000812 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000812:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000814:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000816:	3304      	adds	r3, #4

08000818 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000818:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800081a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800081c:	d3f9      	bcc.n	8000812 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800081e:	4a0a      	ldr	r2, [pc, #40]	; (8000848 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000820:	4c0a      	ldr	r4, [pc, #40]	; (800084c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000822:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000824:	e001      	b.n	800082a <LoopFillZerobss>

08000826 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000826:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000828:	3204      	adds	r2, #4

0800082a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800082a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800082c:	d3fb      	bcc.n	8000826 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800082e:	f007 f9e3 	bl	8007bf8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000832:	f7ff fe77 	bl	8000524 <main>
  bx  lr    
 8000836:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000838:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800083c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000840:	20000104 	.word	0x20000104
  ldr r2, =_sidata
 8000844:	08007cc8 	.word	0x08007cc8
  ldr r2, =_sbss
 8000848:	20000104 	.word	0x20000104
  ldr r4, =_ebss
 800084c:	20002158 	.word	0x20002158

08000850 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000850:	e7fe      	b.n	8000850 <ADC_IRQHandler>
	...

08000854 <cdcDataIn>:

	return ret;
}

void cdcDataIn(uint8_t rx_data)
{
 8000854:	b480      	push	{r7}
 8000856:	b085      	sub	sp, #20
 8000858:	af00      	add	r7, sp, #0
 800085a:	4603      	mov	r3, r0
 800085c:	71fb      	strb	r3, [r7, #7]
	rx_buf[rx_in] = rx_data;
 800085e:	4b0c      	ldr	r3, [pc, #48]	; (8000890 <cdcDataIn+0x3c>)
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	490c      	ldr	r1, [pc, #48]	; (8000894 <cdcDataIn+0x40>)
 8000864:	79fa      	ldrb	r2, [r7, #7]
 8000866:	54ca      	strb	r2, [r1, r3]

	uint8_t next_rx_in = (rx_in + 1) % BUF_SIZE;
 8000868:	4b09      	ldr	r3, [pc, #36]	; (8000890 <cdcDataIn+0x3c>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	b2db      	uxtb	r3, r3
 800086e:	3301      	adds	r3, #1
 8000870:	73fb      	strb	r3, [r7, #15]

	if(next_rx_in != rx_out)
 8000872:	7bfa      	ldrb	r2, [r7, #15]
 8000874:	4b08      	ldr	r3, [pc, #32]	; (8000898 <cdcDataIn+0x44>)
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	429a      	cmp	r2, r3
 800087a:	d002      	beq.n	8000882 <cdcDataIn+0x2e>
	{
		rx_in = next_rx_in;
 800087c:	7bfb      	ldrb	r3, [r7, #15]
 800087e:	4a04      	ldr	r2, [pc, #16]	; (8000890 <cdcDataIn+0x3c>)
 8000880:	6013      	str	r3, [r2, #0]
	}
}
 8000882:	bf00      	nop
 8000884:	3714      	adds	r7, #20
 8000886:	46bd      	mov	sp, r7
 8000888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088c:	4770      	bx	lr
 800088e:	bf00      	nop
 8000890:	20000568 	.word	0x20000568
 8000894:	20000168 	.word	0x20000168
 8000898:	2000056c 	.word	0x2000056c

0800089c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80008a0:	4b0e      	ldr	r3, [pc, #56]	; (80008dc <HAL_Init+0x40>)
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	4a0d      	ldr	r2, [pc, #52]	; (80008dc <HAL_Init+0x40>)
 80008a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80008aa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80008ac:	4b0b      	ldr	r3, [pc, #44]	; (80008dc <HAL_Init+0x40>)
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	4a0a      	ldr	r2, [pc, #40]	; (80008dc <HAL_Init+0x40>)
 80008b2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80008b6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008b8:	4b08      	ldr	r3, [pc, #32]	; (80008dc <HAL_Init+0x40>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	4a07      	ldr	r2, [pc, #28]	; (80008dc <HAL_Init+0x40>)
 80008be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80008c2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008c4:	2003      	movs	r0, #3
 80008c6:	f000 f94f 	bl	8000b68 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008ca:	200f      	movs	r0, #15
 80008cc:	f000 f808 	bl	80008e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008d0:	f7ff fea4 	bl	800061c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008d4:	2300      	movs	r3, #0
}
 80008d6:	4618      	mov	r0, r3
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	40023c00 	.word	0x40023c00

080008e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b082      	sub	sp, #8
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008e8:	4b12      	ldr	r3, [pc, #72]	; (8000934 <HAL_InitTick+0x54>)
 80008ea:	681a      	ldr	r2, [r3, #0]
 80008ec:	4b12      	ldr	r3, [pc, #72]	; (8000938 <HAL_InitTick+0x58>)
 80008ee:	781b      	ldrb	r3, [r3, #0]
 80008f0:	4619      	mov	r1, r3
 80008f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80008fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80008fe:	4618      	mov	r0, r3
 8000900:	f000 f967 	bl	8000bd2 <HAL_SYSTICK_Config>
 8000904:	4603      	mov	r3, r0
 8000906:	2b00      	cmp	r3, #0
 8000908:	d001      	beq.n	800090e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800090a:	2301      	movs	r3, #1
 800090c:	e00e      	b.n	800092c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	2b0f      	cmp	r3, #15
 8000912:	d80a      	bhi.n	800092a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000914:	2200      	movs	r2, #0
 8000916:	6879      	ldr	r1, [r7, #4]
 8000918:	f04f 30ff 	mov.w	r0, #4294967295
 800091c:	f000 f92f 	bl	8000b7e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000920:	4a06      	ldr	r2, [pc, #24]	; (800093c <HAL_InitTick+0x5c>)
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000926:	2300      	movs	r3, #0
 8000928:	e000      	b.n	800092c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800092a:	2301      	movs	r3, #1
}
 800092c:	4618      	mov	r0, r3
 800092e:	3708      	adds	r7, #8
 8000930:	46bd      	mov	sp, r7
 8000932:	bd80      	pop	{r7, pc}
 8000934:	20000000 	.word	0x20000000
 8000938:	20000008 	.word	0x20000008
 800093c:	20000004 	.word	0x20000004

08000940 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000940:	b480      	push	{r7}
 8000942:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000944:	4b06      	ldr	r3, [pc, #24]	; (8000960 <HAL_IncTick+0x20>)
 8000946:	781b      	ldrb	r3, [r3, #0]
 8000948:	461a      	mov	r2, r3
 800094a:	4b06      	ldr	r3, [pc, #24]	; (8000964 <HAL_IncTick+0x24>)
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	4413      	add	r3, r2
 8000950:	4a04      	ldr	r2, [pc, #16]	; (8000964 <HAL_IncTick+0x24>)
 8000952:	6013      	str	r3, [r2, #0]
}
 8000954:	bf00      	nop
 8000956:	46bd      	mov	sp, r7
 8000958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095c:	4770      	bx	lr
 800095e:	bf00      	nop
 8000960:	20000008 	.word	0x20000008
 8000964:	20000570 	.word	0x20000570

08000968 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0
  return uwTick;
 800096c:	4b03      	ldr	r3, [pc, #12]	; (800097c <HAL_GetTick+0x14>)
 800096e:	681b      	ldr	r3, [r3, #0]
}
 8000970:	4618      	mov	r0, r3
 8000972:	46bd      	mov	sp, r7
 8000974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000978:	4770      	bx	lr
 800097a:	bf00      	nop
 800097c:	20000570 	.word	0x20000570

08000980 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b084      	sub	sp, #16
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000988:	f7ff ffee 	bl	8000968 <HAL_GetTick>
 800098c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000992:	68fb      	ldr	r3, [r7, #12]
 8000994:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000998:	d005      	beq.n	80009a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800099a:	4b0a      	ldr	r3, [pc, #40]	; (80009c4 <HAL_Delay+0x44>)
 800099c:	781b      	ldrb	r3, [r3, #0]
 800099e:	461a      	mov	r2, r3
 80009a0:	68fb      	ldr	r3, [r7, #12]
 80009a2:	4413      	add	r3, r2
 80009a4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80009a6:	bf00      	nop
 80009a8:	f7ff ffde 	bl	8000968 <HAL_GetTick>
 80009ac:	4602      	mov	r2, r0
 80009ae:	68bb      	ldr	r3, [r7, #8]
 80009b0:	1ad3      	subs	r3, r2, r3
 80009b2:	68fa      	ldr	r2, [r7, #12]
 80009b4:	429a      	cmp	r2, r3
 80009b6:	d8f7      	bhi.n	80009a8 <HAL_Delay+0x28>
  {
  }
}
 80009b8:	bf00      	nop
 80009ba:	bf00      	nop
 80009bc:	3710      	adds	r7, #16
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	20000008 	.word	0x20000008

080009c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009c8:	b480      	push	{r7}
 80009ca:	b085      	sub	sp, #20
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	f003 0307 	and.w	r3, r3, #7
 80009d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009d8:	4b0c      	ldr	r3, [pc, #48]	; (8000a0c <__NVIC_SetPriorityGrouping+0x44>)
 80009da:	68db      	ldr	r3, [r3, #12]
 80009dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009de:	68ba      	ldr	r2, [r7, #8]
 80009e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80009e4:	4013      	ands	r3, r2
 80009e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80009e8:	68fb      	ldr	r3, [r7, #12]
 80009ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009ec:	68bb      	ldr	r3, [r7, #8]
 80009ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80009f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009fa:	4a04      	ldr	r2, [pc, #16]	; (8000a0c <__NVIC_SetPriorityGrouping+0x44>)
 80009fc:	68bb      	ldr	r3, [r7, #8]
 80009fe:	60d3      	str	r3, [r2, #12]
}
 8000a00:	bf00      	nop
 8000a02:	3714      	adds	r7, #20
 8000a04:	46bd      	mov	sp, r7
 8000a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0a:	4770      	bx	lr
 8000a0c:	e000ed00 	.word	0xe000ed00

08000a10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a14:	4b04      	ldr	r3, [pc, #16]	; (8000a28 <__NVIC_GetPriorityGrouping+0x18>)
 8000a16:	68db      	ldr	r3, [r3, #12]
 8000a18:	0a1b      	lsrs	r3, r3, #8
 8000a1a:	f003 0307 	and.w	r3, r3, #7
}
 8000a1e:	4618      	mov	r0, r3
 8000a20:	46bd      	mov	sp, r7
 8000a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a26:	4770      	bx	lr
 8000a28:	e000ed00 	.word	0xe000ed00

08000a2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	b083      	sub	sp, #12
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	4603      	mov	r3, r0
 8000a34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	db0b      	blt.n	8000a56 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a3e:	79fb      	ldrb	r3, [r7, #7]
 8000a40:	f003 021f 	and.w	r2, r3, #31
 8000a44:	4907      	ldr	r1, [pc, #28]	; (8000a64 <__NVIC_EnableIRQ+0x38>)
 8000a46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a4a:	095b      	lsrs	r3, r3, #5
 8000a4c:	2001      	movs	r0, #1
 8000a4e:	fa00 f202 	lsl.w	r2, r0, r2
 8000a52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000a56:	bf00      	nop
 8000a58:	370c      	adds	r7, #12
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a60:	4770      	bx	lr
 8000a62:	bf00      	nop
 8000a64:	e000e100 	.word	0xe000e100

08000a68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	b083      	sub	sp, #12
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	4603      	mov	r3, r0
 8000a70:	6039      	str	r1, [r7, #0]
 8000a72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	db0a      	blt.n	8000a92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a7c:	683b      	ldr	r3, [r7, #0]
 8000a7e:	b2da      	uxtb	r2, r3
 8000a80:	490c      	ldr	r1, [pc, #48]	; (8000ab4 <__NVIC_SetPriority+0x4c>)
 8000a82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a86:	0112      	lsls	r2, r2, #4
 8000a88:	b2d2      	uxtb	r2, r2
 8000a8a:	440b      	add	r3, r1
 8000a8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a90:	e00a      	b.n	8000aa8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a92:	683b      	ldr	r3, [r7, #0]
 8000a94:	b2da      	uxtb	r2, r3
 8000a96:	4908      	ldr	r1, [pc, #32]	; (8000ab8 <__NVIC_SetPriority+0x50>)
 8000a98:	79fb      	ldrb	r3, [r7, #7]
 8000a9a:	f003 030f 	and.w	r3, r3, #15
 8000a9e:	3b04      	subs	r3, #4
 8000aa0:	0112      	lsls	r2, r2, #4
 8000aa2:	b2d2      	uxtb	r2, r2
 8000aa4:	440b      	add	r3, r1
 8000aa6:	761a      	strb	r2, [r3, #24]
}
 8000aa8:	bf00      	nop
 8000aaa:	370c      	adds	r7, #12
 8000aac:	46bd      	mov	sp, r7
 8000aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab2:	4770      	bx	lr
 8000ab4:	e000e100 	.word	0xe000e100
 8000ab8:	e000ed00 	.word	0xe000ed00

08000abc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000abc:	b480      	push	{r7}
 8000abe:	b089      	sub	sp, #36	; 0x24
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	60f8      	str	r0, [r7, #12]
 8000ac4:	60b9      	str	r1, [r7, #8]
 8000ac6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ac8:	68fb      	ldr	r3, [r7, #12]
 8000aca:	f003 0307 	and.w	r3, r3, #7
 8000ace:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ad0:	69fb      	ldr	r3, [r7, #28]
 8000ad2:	f1c3 0307 	rsb	r3, r3, #7
 8000ad6:	2b04      	cmp	r3, #4
 8000ad8:	bf28      	it	cs
 8000ada:	2304      	movcs	r3, #4
 8000adc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ade:	69fb      	ldr	r3, [r7, #28]
 8000ae0:	3304      	adds	r3, #4
 8000ae2:	2b06      	cmp	r3, #6
 8000ae4:	d902      	bls.n	8000aec <NVIC_EncodePriority+0x30>
 8000ae6:	69fb      	ldr	r3, [r7, #28]
 8000ae8:	3b03      	subs	r3, #3
 8000aea:	e000      	b.n	8000aee <NVIC_EncodePriority+0x32>
 8000aec:	2300      	movs	r3, #0
 8000aee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000af0:	f04f 32ff 	mov.w	r2, #4294967295
 8000af4:	69bb      	ldr	r3, [r7, #24]
 8000af6:	fa02 f303 	lsl.w	r3, r2, r3
 8000afa:	43da      	mvns	r2, r3
 8000afc:	68bb      	ldr	r3, [r7, #8]
 8000afe:	401a      	ands	r2, r3
 8000b00:	697b      	ldr	r3, [r7, #20]
 8000b02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b04:	f04f 31ff 	mov.w	r1, #4294967295
 8000b08:	697b      	ldr	r3, [r7, #20]
 8000b0a:	fa01 f303 	lsl.w	r3, r1, r3
 8000b0e:	43d9      	mvns	r1, r3
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b14:	4313      	orrs	r3, r2
         );
}
 8000b16:	4618      	mov	r0, r3
 8000b18:	3724      	adds	r7, #36	; 0x24
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b20:	4770      	bx	lr
	...

08000b24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b082      	sub	sp, #8
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	3b01      	subs	r3, #1
 8000b30:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b34:	d301      	bcc.n	8000b3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b36:	2301      	movs	r3, #1
 8000b38:	e00f      	b.n	8000b5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b3a:	4a0a      	ldr	r2, [pc, #40]	; (8000b64 <SysTick_Config+0x40>)
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	3b01      	subs	r3, #1
 8000b40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b42:	210f      	movs	r1, #15
 8000b44:	f04f 30ff 	mov.w	r0, #4294967295
 8000b48:	f7ff ff8e 	bl	8000a68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b4c:	4b05      	ldr	r3, [pc, #20]	; (8000b64 <SysTick_Config+0x40>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b52:	4b04      	ldr	r3, [pc, #16]	; (8000b64 <SysTick_Config+0x40>)
 8000b54:	2207      	movs	r2, #7
 8000b56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b58:	2300      	movs	r3, #0
}
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	3708      	adds	r7, #8
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	e000e010 	.word	0xe000e010

08000b68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b082      	sub	sp, #8
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b70:	6878      	ldr	r0, [r7, #4]
 8000b72:	f7ff ff29 	bl	80009c8 <__NVIC_SetPriorityGrouping>
}
 8000b76:	bf00      	nop
 8000b78:	3708      	adds	r7, #8
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}

08000b7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b7e:	b580      	push	{r7, lr}
 8000b80:	b086      	sub	sp, #24
 8000b82:	af00      	add	r7, sp, #0
 8000b84:	4603      	mov	r3, r0
 8000b86:	60b9      	str	r1, [r7, #8]
 8000b88:	607a      	str	r2, [r7, #4]
 8000b8a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b90:	f7ff ff3e 	bl	8000a10 <__NVIC_GetPriorityGrouping>
 8000b94:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b96:	687a      	ldr	r2, [r7, #4]
 8000b98:	68b9      	ldr	r1, [r7, #8]
 8000b9a:	6978      	ldr	r0, [r7, #20]
 8000b9c:	f7ff ff8e 	bl	8000abc <NVIC_EncodePriority>
 8000ba0:	4602      	mov	r2, r0
 8000ba2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ba6:	4611      	mov	r1, r2
 8000ba8:	4618      	mov	r0, r3
 8000baa:	f7ff ff5d 	bl	8000a68 <__NVIC_SetPriority>
}
 8000bae:	bf00      	nop
 8000bb0:	3718      	adds	r7, #24
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}

08000bb6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bb6:	b580      	push	{r7, lr}
 8000bb8:	b082      	sub	sp, #8
 8000bba:	af00      	add	r7, sp, #0
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000bc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	f7ff ff31 	bl	8000a2c <__NVIC_EnableIRQ>
}
 8000bca:	bf00      	nop
 8000bcc:	3708      	adds	r7, #8
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}

08000bd2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bd2:	b580      	push	{r7, lr}
 8000bd4:	b082      	sub	sp, #8
 8000bd6:	af00      	add	r7, sp, #0
 8000bd8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000bda:	6878      	ldr	r0, [r7, #4]
 8000bdc:	f7ff ffa2 	bl	8000b24 <SysTick_Config>
 8000be0:	4603      	mov	r3, r0
}
 8000be2:	4618      	mov	r0, r3
 8000be4:	3708      	adds	r7, #8
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}

08000bea <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000bea:	b580      	push	{r7, lr}
 8000bec:	b084      	sub	sp, #16
 8000bee:	af00      	add	r7, sp, #0
 8000bf0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bf6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000bf8:	f7ff feb6 	bl	8000968 <HAL_GetTick>
 8000bfc:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000c04:	b2db      	uxtb	r3, r3
 8000c06:	2b02      	cmp	r3, #2
 8000c08:	d008      	beq.n	8000c1c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	2280      	movs	r2, #128	; 0x80
 8000c0e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	2200      	movs	r2, #0
 8000c14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8000c18:	2301      	movs	r3, #1
 8000c1a:	e052      	b.n	8000cc2 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	681a      	ldr	r2, [r3, #0]
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	f022 0216 	bic.w	r2, r2, #22
 8000c2a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	695a      	ldr	r2, [r3, #20]
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000c3a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d103      	bne.n	8000c4c <HAL_DMA_Abort+0x62>
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d007      	beq.n	8000c5c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	681a      	ldr	r2, [r3, #0]
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	f022 0208 	bic.w	r2, r2, #8
 8000c5a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	681a      	ldr	r2, [r3, #0]
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	f022 0201 	bic.w	r2, r2, #1
 8000c6a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000c6c:	e013      	b.n	8000c96 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000c6e:	f7ff fe7b 	bl	8000968 <HAL_GetTick>
 8000c72:	4602      	mov	r2, r0
 8000c74:	68bb      	ldr	r3, [r7, #8]
 8000c76:	1ad3      	subs	r3, r2, r3
 8000c78:	2b05      	cmp	r3, #5
 8000c7a:	d90c      	bls.n	8000c96 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	2220      	movs	r2, #32
 8000c80:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	2203      	movs	r2, #3
 8000c86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8000c92:	2303      	movs	r3, #3
 8000c94:	e015      	b.n	8000cc2 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	f003 0301 	and.w	r3, r3, #1
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d1e4      	bne.n	8000c6e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ca8:	223f      	movs	r2, #63	; 0x3f
 8000caa:	409a      	lsls	r2, r3
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	2201      	movs	r2, #1
 8000cb4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	2200      	movs	r2, #0
 8000cbc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8000cc0:	2300      	movs	r3, #0
}
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	3710      	adds	r7, #16
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}

08000cca <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000cca:	b480      	push	{r7}
 8000ccc:	b083      	sub	sp, #12
 8000cce:	af00      	add	r7, sp, #0
 8000cd0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000cd8:	b2db      	uxtb	r3, r3
 8000cda:	2b02      	cmp	r3, #2
 8000cdc:	d004      	beq.n	8000ce8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	2280      	movs	r2, #128	; 0x80
 8000ce2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000ce4:	2301      	movs	r3, #1
 8000ce6:	e00c      	b.n	8000d02 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	2205      	movs	r2, #5
 8000cec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	681a      	ldr	r2, [r3, #0]
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	f022 0201 	bic.w	r2, r2, #1
 8000cfe:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000d00:	2300      	movs	r3, #0
}
 8000d02:	4618      	mov	r0, r3
 8000d04:	370c      	adds	r7, #12
 8000d06:	46bd      	mov	sp, r7
 8000d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0c:	4770      	bx	lr
	...

08000d10 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d10:	b480      	push	{r7}
 8000d12:	b089      	sub	sp, #36	; 0x24
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
 8000d18:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d22:	2300      	movs	r3, #0
 8000d24:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d26:	2300      	movs	r3, #0
 8000d28:	61fb      	str	r3, [r7, #28]
 8000d2a:	e159      	b.n	8000fe0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000d2c:	2201      	movs	r2, #1
 8000d2e:	69fb      	ldr	r3, [r7, #28]
 8000d30:	fa02 f303 	lsl.w	r3, r2, r3
 8000d34:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d36:	683b      	ldr	r3, [r7, #0]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	697a      	ldr	r2, [r7, #20]
 8000d3c:	4013      	ands	r3, r2
 8000d3e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000d40:	693a      	ldr	r2, [r7, #16]
 8000d42:	697b      	ldr	r3, [r7, #20]
 8000d44:	429a      	cmp	r2, r3
 8000d46:	f040 8148 	bne.w	8000fda <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d4a:	683b      	ldr	r3, [r7, #0]
 8000d4c:	685b      	ldr	r3, [r3, #4]
 8000d4e:	f003 0303 	and.w	r3, r3, #3
 8000d52:	2b01      	cmp	r3, #1
 8000d54:	d005      	beq.n	8000d62 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d56:	683b      	ldr	r3, [r7, #0]
 8000d58:	685b      	ldr	r3, [r3, #4]
 8000d5a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d5e:	2b02      	cmp	r3, #2
 8000d60:	d130      	bne.n	8000dc4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	689b      	ldr	r3, [r3, #8]
 8000d66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000d68:	69fb      	ldr	r3, [r7, #28]
 8000d6a:	005b      	lsls	r3, r3, #1
 8000d6c:	2203      	movs	r2, #3
 8000d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d72:	43db      	mvns	r3, r3
 8000d74:	69ba      	ldr	r2, [r7, #24]
 8000d76:	4013      	ands	r3, r2
 8000d78:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d7a:	683b      	ldr	r3, [r7, #0]
 8000d7c:	68da      	ldr	r2, [r3, #12]
 8000d7e:	69fb      	ldr	r3, [r7, #28]
 8000d80:	005b      	lsls	r3, r3, #1
 8000d82:	fa02 f303 	lsl.w	r3, r2, r3
 8000d86:	69ba      	ldr	r2, [r7, #24]
 8000d88:	4313      	orrs	r3, r2
 8000d8a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	69ba      	ldr	r2, [r7, #24]
 8000d90:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	685b      	ldr	r3, [r3, #4]
 8000d96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d98:	2201      	movs	r2, #1
 8000d9a:	69fb      	ldr	r3, [r7, #28]
 8000d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000da0:	43db      	mvns	r3, r3
 8000da2:	69ba      	ldr	r2, [r7, #24]
 8000da4:	4013      	ands	r3, r2
 8000da6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	685b      	ldr	r3, [r3, #4]
 8000dac:	091b      	lsrs	r3, r3, #4
 8000dae:	f003 0201 	and.w	r2, r3, #1
 8000db2:	69fb      	ldr	r3, [r7, #28]
 8000db4:	fa02 f303 	lsl.w	r3, r2, r3
 8000db8:	69ba      	ldr	r2, [r7, #24]
 8000dba:	4313      	orrs	r3, r2
 8000dbc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	69ba      	ldr	r2, [r7, #24]
 8000dc2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	685b      	ldr	r3, [r3, #4]
 8000dc8:	f003 0303 	and.w	r3, r3, #3
 8000dcc:	2b03      	cmp	r3, #3
 8000dce:	d017      	beq.n	8000e00 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	68db      	ldr	r3, [r3, #12]
 8000dd4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000dd6:	69fb      	ldr	r3, [r7, #28]
 8000dd8:	005b      	lsls	r3, r3, #1
 8000dda:	2203      	movs	r2, #3
 8000ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8000de0:	43db      	mvns	r3, r3
 8000de2:	69ba      	ldr	r2, [r7, #24]
 8000de4:	4013      	ands	r3, r2
 8000de6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000de8:	683b      	ldr	r3, [r7, #0]
 8000dea:	689a      	ldr	r2, [r3, #8]
 8000dec:	69fb      	ldr	r3, [r7, #28]
 8000dee:	005b      	lsls	r3, r3, #1
 8000df0:	fa02 f303 	lsl.w	r3, r2, r3
 8000df4:	69ba      	ldr	r2, [r7, #24]
 8000df6:	4313      	orrs	r3, r2
 8000df8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	69ba      	ldr	r2, [r7, #24]
 8000dfe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e00:	683b      	ldr	r3, [r7, #0]
 8000e02:	685b      	ldr	r3, [r3, #4]
 8000e04:	f003 0303 	and.w	r3, r3, #3
 8000e08:	2b02      	cmp	r3, #2
 8000e0a:	d123      	bne.n	8000e54 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e0c:	69fb      	ldr	r3, [r7, #28]
 8000e0e:	08da      	lsrs	r2, r3, #3
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	3208      	adds	r2, #8
 8000e14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e18:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e1a:	69fb      	ldr	r3, [r7, #28]
 8000e1c:	f003 0307 	and.w	r3, r3, #7
 8000e20:	009b      	lsls	r3, r3, #2
 8000e22:	220f      	movs	r2, #15
 8000e24:	fa02 f303 	lsl.w	r3, r2, r3
 8000e28:	43db      	mvns	r3, r3
 8000e2a:	69ba      	ldr	r2, [r7, #24]
 8000e2c:	4013      	ands	r3, r2
 8000e2e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	691a      	ldr	r2, [r3, #16]
 8000e34:	69fb      	ldr	r3, [r7, #28]
 8000e36:	f003 0307 	and.w	r3, r3, #7
 8000e3a:	009b      	lsls	r3, r3, #2
 8000e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e40:	69ba      	ldr	r2, [r7, #24]
 8000e42:	4313      	orrs	r3, r2
 8000e44:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000e46:	69fb      	ldr	r3, [r7, #28]
 8000e48:	08da      	lsrs	r2, r3, #3
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	3208      	adds	r2, #8
 8000e4e:	69b9      	ldr	r1, [r7, #24]
 8000e50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e5a:	69fb      	ldr	r3, [r7, #28]
 8000e5c:	005b      	lsls	r3, r3, #1
 8000e5e:	2203      	movs	r2, #3
 8000e60:	fa02 f303 	lsl.w	r3, r2, r3
 8000e64:	43db      	mvns	r3, r3
 8000e66:	69ba      	ldr	r2, [r7, #24]
 8000e68:	4013      	ands	r3, r2
 8000e6a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e6c:	683b      	ldr	r3, [r7, #0]
 8000e6e:	685b      	ldr	r3, [r3, #4]
 8000e70:	f003 0203 	and.w	r2, r3, #3
 8000e74:	69fb      	ldr	r3, [r7, #28]
 8000e76:	005b      	lsls	r3, r3, #1
 8000e78:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7c:	69ba      	ldr	r2, [r7, #24]
 8000e7e:	4313      	orrs	r3, r2
 8000e80:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	69ba      	ldr	r2, [r7, #24]
 8000e86:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	685b      	ldr	r3, [r3, #4]
 8000e8c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	f000 80a2 	beq.w	8000fda <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e96:	2300      	movs	r3, #0
 8000e98:	60fb      	str	r3, [r7, #12]
 8000e9a:	4b57      	ldr	r3, [pc, #348]	; (8000ff8 <HAL_GPIO_Init+0x2e8>)
 8000e9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e9e:	4a56      	ldr	r2, [pc, #344]	; (8000ff8 <HAL_GPIO_Init+0x2e8>)
 8000ea0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ea4:	6453      	str	r3, [r2, #68]	; 0x44
 8000ea6:	4b54      	ldr	r3, [pc, #336]	; (8000ff8 <HAL_GPIO_Init+0x2e8>)
 8000ea8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eaa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000eae:	60fb      	str	r3, [r7, #12]
 8000eb0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000eb2:	4a52      	ldr	r2, [pc, #328]	; (8000ffc <HAL_GPIO_Init+0x2ec>)
 8000eb4:	69fb      	ldr	r3, [r7, #28]
 8000eb6:	089b      	lsrs	r3, r3, #2
 8000eb8:	3302      	adds	r3, #2
 8000eba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ebe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000ec0:	69fb      	ldr	r3, [r7, #28]
 8000ec2:	f003 0303 	and.w	r3, r3, #3
 8000ec6:	009b      	lsls	r3, r3, #2
 8000ec8:	220f      	movs	r2, #15
 8000eca:	fa02 f303 	lsl.w	r3, r2, r3
 8000ece:	43db      	mvns	r3, r3
 8000ed0:	69ba      	ldr	r2, [r7, #24]
 8000ed2:	4013      	ands	r3, r2
 8000ed4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	4a49      	ldr	r2, [pc, #292]	; (8001000 <HAL_GPIO_Init+0x2f0>)
 8000eda:	4293      	cmp	r3, r2
 8000edc:	d019      	beq.n	8000f12 <HAL_GPIO_Init+0x202>
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	4a48      	ldr	r2, [pc, #288]	; (8001004 <HAL_GPIO_Init+0x2f4>)
 8000ee2:	4293      	cmp	r3, r2
 8000ee4:	d013      	beq.n	8000f0e <HAL_GPIO_Init+0x1fe>
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	4a47      	ldr	r2, [pc, #284]	; (8001008 <HAL_GPIO_Init+0x2f8>)
 8000eea:	4293      	cmp	r3, r2
 8000eec:	d00d      	beq.n	8000f0a <HAL_GPIO_Init+0x1fa>
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	4a46      	ldr	r2, [pc, #280]	; (800100c <HAL_GPIO_Init+0x2fc>)
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	d007      	beq.n	8000f06 <HAL_GPIO_Init+0x1f6>
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	4a45      	ldr	r2, [pc, #276]	; (8001010 <HAL_GPIO_Init+0x300>)
 8000efa:	4293      	cmp	r3, r2
 8000efc:	d101      	bne.n	8000f02 <HAL_GPIO_Init+0x1f2>
 8000efe:	2304      	movs	r3, #4
 8000f00:	e008      	b.n	8000f14 <HAL_GPIO_Init+0x204>
 8000f02:	2307      	movs	r3, #7
 8000f04:	e006      	b.n	8000f14 <HAL_GPIO_Init+0x204>
 8000f06:	2303      	movs	r3, #3
 8000f08:	e004      	b.n	8000f14 <HAL_GPIO_Init+0x204>
 8000f0a:	2302      	movs	r3, #2
 8000f0c:	e002      	b.n	8000f14 <HAL_GPIO_Init+0x204>
 8000f0e:	2301      	movs	r3, #1
 8000f10:	e000      	b.n	8000f14 <HAL_GPIO_Init+0x204>
 8000f12:	2300      	movs	r3, #0
 8000f14:	69fa      	ldr	r2, [r7, #28]
 8000f16:	f002 0203 	and.w	r2, r2, #3
 8000f1a:	0092      	lsls	r2, r2, #2
 8000f1c:	4093      	lsls	r3, r2
 8000f1e:	69ba      	ldr	r2, [r7, #24]
 8000f20:	4313      	orrs	r3, r2
 8000f22:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f24:	4935      	ldr	r1, [pc, #212]	; (8000ffc <HAL_GPIO_Init+0x2ec>)
 8000f26:	69fb      	ldr	r3, [r7, #28]
 8000f28:	089b      	lsrs	r3, r3, #2
 8000f2a:	3302      	adds	r3, #2
 8000f2c:	69ba      	ldr	r2, [r7, #24]
 8000f2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f32:	4b38      	ldr	r3, [pc, #224]	; (8001014 <HAL_GPIO_Init+0x304>)
 8000f34:	689b      	ldr	r3, [r3, #8]
 8000f36:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f38:	693b      	ldr	r3, [r7, #16]
 8000f3a:	43db      	mvns	r3, r3
 8000f3c:	69ba      	ldr	r2, [r7, #24]
 8000f3e:	4013      	ands	r3, r2
 8000f40:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	685b      	ldr	r3, [r3, #4]
 8000f46:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d003      	beq.n	8000f56 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000f4e:	69ba      	ldr	r2, [r7, #24]
 8000f50:	693b      	ldr	r3, [r7, #16]
 8000f52:	4313      	orrs	r3, r2
 8000f54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000f56:	4a2f      	ldr	r2, [pc, #188]	; (8001014 <HAL_GPIO_Init+0x304>)
 8000f58:	69bb      	ldr	r3, [r7, #24]
 8000f5a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f5c:	4b2d      	ldr	r3, [pc, #180]	; (8001014 <HAL_GPIO_Init+0x304>)
 8000f5e:	68db      	ldr	r3, [r3, #12]
 8000f60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f62:	693b      	ldr	r3, [r7, #16]
 8000f64:	43db      	mvns	r3, r3
 8000f66:	69ba      	ldr	r2, [r7, #24]
 8000f68:	4013      	ands	r3, r2
 8000f6a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	685b      	ldr	r3, [r3, #4]
 8000f70:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d003      	beq.n	8000f80 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000f78:	69ba      	ldr	r2, [r7, #24]
 8000f7a:	693b      	ldr	r3, [r7, #16]
 8000f7c:	4313      	orrs	r3, r2
 8000f7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000f80:	4a24      	ldr	r2, [pc, #144]	; (8001014 <HAL_GPIO_Init+0x304>)
 8000f82:	69bb      	ldr	r3, [r7, #24]
 8000f84:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000f86:	4b23      	ldr	r3, [pc, #140]	; (8001014 <HAL_GPIO_Init+0x304>)
 8000f88:	685b      	ldr	r3, [r3, #4]
 8000f8a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f8c:	693b      	ldr	r3, [r7, #16]
 8000f8e:	43db      	mvns	r3, r3
 8000f90:	69ba      	ldr	r2, [r7, #24]
 8000f92:	4013      	ands	r3, r2
 8000f94:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000f96:	683b      	ldr	r3, [r7, #0]
 8000f98:	685b      	ldr	r3, [r3, #4]
 8000f9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d003      	beq.n	8000faa <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000fa2:	69ba      	ldr	r2, [r7, #24]
 8000fa4:	693b      	ldr	r3, [r7, #16]
 8000fa6:	4313      	orrs	r3, r2
 8000fa8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000faa:	4a1a      	ldr	r2, [pc, #104]	; (8001014 <HAL_GPIO_Init+0x304>)
 8000fac:	69bb      	ldr	r3, [r7, #24]
 8000fae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000fb0:	4b18      	ldr	r3, [pc, #96]	; (8001014 <HAL_GPIO_Init+0x304>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fb6:	693b      	ldr	r3, [r7, #16]
 8000fb8:	43db      	mvns	r3, r3
 8000fba:	69ba      	ldr	r2, [r7, #24]
 8000fbc:	4013      	ands	r3, r2
 8000fbe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	685b      	ldr	r3, [r3, #4]
 8000fc4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d003      	beq.n	8000fd4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000fcc:	69ba      	ldr	r2, [r7, #24]
 8000fce:	693b      	ldr	r3, [r7, #16]
 8000fd0:	4313      	orrs	r3, r2
 8000fd2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000fd4:	4a0f      	ldr	r2, [pc, #60]	; (8001014 <HAL_GPIO_Init+0x304>)
 8000fd6:	69bb      	ldr	r3, [r7, #24]
 8000fd8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fda:	69fb      	ldr	r3, [r7, #28]
 8000fdc:	3301      	adds	r3, #1
 8000fde:	61fb      	str	r3, [r7, #28]
 8000fe0:	69fb      	ldr	r3, [r7, #28]
 8000fe2:	2b0f      	cmp	r3, #15
 8000fe4:	f67f aea2 	bls.w	8000d2c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000fe8:	bf00      	nop
 8000fea:	bf00      	nop
 8000fec:	3724      	adds	r7, #36	; 0x24
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop
 8000ff8:	40023800 	.word	0x40023800
 8000ffc:	40013800 	.word	0x40013800
 8001000:	40020000 	.word	0x40020000
 8001004:	40020400 	.word	0x40020400
 8001008:	40020800 	.word	0x40020800
 800100c:	40020c00 	.word	0x40020c00
 8001010:	40021000 	.word	0x40021000
 8001014:	40013c00 	.word	0x40013c00

08001018 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b086      	sub	sp, #24
 800101c:	af02      	add	r7, sp, #8
 800101e:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	2b00      	cmp	r3, #0
 8001024:	d101      	bne.n	800102a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001026:	2301      	movs	r3, #1
 8001028:	e101      	b.n	800122e <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 8001036:	b2db      	uxtb	r3, r3
 8001038:	2b00      	cmp	r3, #0
 800103a:	d106      	bne.n	800104a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	2200      	movs	r2, #0
 8001040:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001044:	6878      	ldr	r0, [r7, #4]
 8001046:	f006 fac5 	bl	80075d4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	2203      	movs	r2, #3
 800104e:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8001052:	68bb      	ldr	r3, [r7, #8]
 8001054:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001058:	d102      	bne.n	8001060 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	2200      	movs	r2, #0
 800105e:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	4618      	mov	r0, r3
 8001066:	f002 feb4 	bl	8003dd2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	6818      	ldr	r0, [r3, #0]
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	7c1a      	ldrb	r2, [r3, #16]
 8001072:	f88d 2000 	strb.w	r2, [sp]
 8001076:	3304      	adds	r3, #4
 8001078:	cb0e      	ldmia	r3, {r1, r2, r3}
 800107a:	f002 fd93 	bl	8003ba4 <USB_CoreInit>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d005      	beq.n	8001090 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	2202      	movs	r2, #2
 8001088:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 800108c:	2301      	movs	r3, #1
 800108e:	e0ce      	b.n	800122e <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	2100      	movs	r1, #0
 8001096:	4618      	mov	r0, r3
 8001098:	f002 feac 	bl	8003df4 <USB_SetCurrentMode>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d005      	beq.n	80010ae <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	2202      	movs	r2, #2
 80010a6:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 80010aa:	2301      	movs	r3, #1
 80010ac:	e0bf      	b.n	800122e <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80010ae:	2300      	movs	r3, #0
 80010b0:	73fb      	strb	r3, [r7, #15]
 80010b2:	e04a      	b.n	800114a <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80010b4:	7bfa      	ldrb	r2, [r7, #15]
 80010b6:	6879      	ldr	r1, [r7, #4]
 80010b8:	4613      	mov	r3, r2
 80010ba:	00db      	lsls	r3, r3, #3
 80010bc:	4413      	add	r3, r2
 80010be:	009b      	lsls	r3, r3, #2
 80010c0:	440b      	add	r3, r1
 80010c2:	3315      	adds	r3, #21
 80010c4:	2201      	movs	r2, #1
 80010c6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80010c8:	7bfa      	ldrb	r2, [r7, #15]
 80010ca:	6879      	ldr	r1, [r7, #4]
 80010cc:	4613      	mov	r3, r2
 80010ce:	00db      	lsls	r3, r3, #3
 80010d0:	4413      	add	r3, r2
 80010d2:	009b      	lsls	r3, r3, #2
 80010d4:	440b      	add	r3, r1
 80010d6:	3314      	adds	r3, #20
 80010d8:	7bfa      	ldrb	r2, [r7, #15]
 80010da:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80010dc:	7bfa      	ldrb	r2, [r7, #15]
 80010de:	7bfb      	ldrb	r3, [r7, #15]
 80010e0:	b298      	uxth	r0, r3
 80010e2:	6879      	ldr	r1, [r7, #4]
 80010e4:	4613      	mov	r3, r2
 80010e6:	00db      	lsls	r3, r3, #3
 80010e8:	4413      	add	r3, r2
 80010ea:	009b      	lsls	r3, r3, #2
 80010ec:	440b      	add	r3, r1
 80010ee:	332e      	adds	r3, #46	; 0x2e
 80010f0:	4602      	mov	r2, r0
 80010f2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80010f4:	7bfa      	ldrb	r2, [r7, #15]
 80010f6:	6879      	ldr	r1, [r7, #4]
 80010f8:	4613      	mov	r3, r2
 80010fa:	00db      	lsls	r3, r3, #3
 80010fc:	4413      	add	r3, r2
 80010fe:	009b      	lsls	r3, r3, #2
 8001100:	440b      	add	r3, r1
 8001102:	3318      	adds	r3, #24
 8001104:	2200      	movs	r2, #0
 8001106:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001108:	7bfa      	ldrb	r2, [r7, #15]
 800110a:	6879      	ldr	r1, [r7, #4]
 800110c:	4613      	mov	r3, r2
 800110e:	00db      	lsls	r3, r3, #3
 8001110:	4413      	add	r3, r2
 8001112:	009b      	lsls	r3, r3, #2
 8001114:	440b      	add	r3, r1
 8001116:	331c      	adds	r3, #28
 8001118:	2200      	movs	r2, #0
 800111a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800111c:	7bfa      	ldrb	r2, [r7, #15]
 800111e:	6879      	ldr	r1, [r7, #4]
 8001120:	4613      	mov	r3, r2
 8001122:	00db      	lsls	r3, r3, #3
 8001124:	4413      	add	r3, r2
 8001126:	009b      	lsls	r3, r3, #2
 8001128:	440b      	add	r3, r1
 800112a:	3320      	adds	r3, #32
 800112c:	2200      	movs	r2, #0
 800112e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001130:	7bfa      	ldrb	r2, [r7, #15]
 8001132:	6879      	ldr	r1, [r7, #4]
 8001134:	4613      	mov	r3, r2
 8001136:	00db      	lsls	r3, r3, #3
 8001138:	4413      	add	r3, r2
 800113a:	009b      	lsls	r3, r3, #2
 800113c:	440b      	add	r3, r1
 800113e:	3324      	adds	r3, #36	; 0x24
 8001140:	2200      	movs	r2, #0
 8001142:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001144:	7bfb      	ldrb	r3, [r7, #15]
 8001146:	3301      	adds	r3, #1
 8001148:	73fb      	strb	r3, [r7, #15]
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	791b      	ldrb	r3, [r3, #4]
 800114e:	7bfa      	ldrb	r2, [r7, #15]
 8001150:	429a      	cmp	r2, r3
 8001152:	d3af      	bcc.n	80010b4 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001154:	2300      	movs	r3, #0
 8001156:	73fb      	strb	r3, [r7, #15]
 8001158:	e044      	b.n	80011e4 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800115a:	7bfa      	ldrb	r2, [r7, #15]
 800115c:	6879      	ldr	r1, [r7, #4]
 800115e:	4613      	mov	r3, r2
 8001160:	00db      	lsls	r3, r3, #3
 8001162:	4413      	add	r3, r2
 8001164:	009b      	lsls	r3, r3, #2
 8001166:	440b      	add	r3, r1
 8001168:	f203 2355 	addw	r3, r3, #597	; 0x255
 800116c:	2200      	movs	r2, #0
 800116e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001170:	7bfa      	ldrb	r2, [r7, #15]
 8001172:	6879      	ldr	r1, [r7, #4]
 8001174:	4613      	mov	r3, r2
 8001176:	00db      	lsls	r3, r3, #3
 8001178:	4413      	add	r3, r2
 800117a:	009b      	lsls	r3, r3, #2
 800117c:	440b      	add	r3, r1
 800117e:	f503 7315 	add.w	r3, r3, #596	; 0x254
 8001182:	7bfa      	ldrb	r2, [r7, #15]
 8001184:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001186:	7bfa      	ldrb	r2, [r7, #15]
 8001188:	6879      	ldr	r1, [r7, #4]
 800118a:	4613      	mov	r3, r2
 800118c:	00db      	lsls	r3, r3, #3
 800118e:	4413      	add	r3, r2
 8001190:	009b      	lsls	r3, r3, #2
 8001192:	440b      	add	r3, r1
 8001194:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8001198:	2200      	movs	r2, #0
 800119a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800119c:	7bfa      	ldrb	r2, [r7, #15]
 800119e:	6879      	ldr	r1, [r7, #4]
 80011a0:	4613      	mov	r3, r2
 80011a2:	00db      	lsls	r3, r3, #3
 80011a4:	4413      	add	r3, r2
 80011a6:	009b      	lsls	r3, r3, #2
 80011a8:	440b      	add	r3, r1
 80011aa:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 80011ae:	2200      	movs	r2, #0
 80011b0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80011b2:	7bfa      	ldrb	r2, [r7, #15]
 80011b4:	6879      	ldr	r1, [r7, #4]
 80011b6:	4613      	mov	r3, r2
 80011b8:	00db      	lsls	r3, r3, #3
 80011ba:	4413      	add	r3, r2
 80011bc:	009b      	lsls	r3, r3, #2
 80011be:	440b      	add	r3, r1
 80011c0:	f503 7318 	add.w	r3, r3, #608	; 0x260
 80011c4:	2200      	movs	r2, #0
 80011c6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80011c8:	7bfa      	ldrb	r2, [r7, #15]
 80011ca:	6879      	ldr	r1, [r7, #4]
 80011cc:	4613      	mov	r3, r2
 80011ce:	00db      	lsls	r3, r3, #3
 80011d0:	4413      	add	r3, r2
 80011d2:	009b      	lsls	r3, r3, #2
 80011d4:	440b      	add	r3, r1
 80011d6:	f503 7319 	add.w	r3, r3, #612	; 0x264
 80011da:	2200      	movs	r2, #0
 80011dc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80011de:	7bfb      	ldrb	r3, [r7, #15]
 80011e0:	3301      	adds	r3, #1
 80011e2:	73fb      	strb	r3, [r7, #15]
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	791b      	ldrb	r3, [r3, #4]
 80011e8:	7bfa      	ldrb	r2, [r7, #15]
 80011ea:	429a      	cmp	r2, r3
 80011ec:	d3b5      	bcc.n	800115a <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	6818      	ldr	r0, [r3, #0]
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	7c1a      	ldrb	r2, [r3, #16]
 80011f6:	f88d 2000 	strb.w	r2, [sp]
 80011fa:	3304      	adds	r3, #4
 80011fc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80011fe:	f002 fe45 	bl	8003e8c <USB_DevInit>
 8001202:	4603      	mov	r3, r0
 8001204:	2b00      	cmp	r3, #0
 8001206:	d005      	beq.n	8001214 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	2202      	movs	r2, #2
 800120c:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8001210:	2301      	movs	r3, #1
 8001212:	e00c      	b.n	800122e <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	2200      	movs	r2, #0
 8001218:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	2201      	movs	r2, #1
 800121e:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	4618      	mov	r0, r3
 8001228:	f003 fe89 	bl	8004f3e <USB_DevDisconnect>

  return HAL_OK;
 800122c:	2300      	movs	r3, #0
}
 800122e:	4618      	mov	r0, r3
 8001230:	3710      	adds	r7, #16
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}

08001236 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001236:	b580      	push	{r7, lr}
 8001238:	b084      	sub	sp, #16
 800123a:	af00      	add	r7, sp, #0
 800123c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 800124a:	2b01      	cmp	r3, #1
 800124c:	d101      	bne.n	8001252 <HAL_PCD_Start+0x1c>
 800124e:	2302      	movs	r3, #2
 8001250:	e022      	b.n	8001298 <HAL_PCD_Start+0x62>
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	2201      	movs	r2, #1
 8001256:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	68db      	ldr	r3, [r3, #12]
 800125e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001262:	2b00      	cmp	r3, #0
 8001264:	d009      	beq.n	800127a <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800126a:	2b01      	cmp	r3, #1
 800126c:	d105      	bne.n	800127a <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001272:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	4618      	mov	r0, r3
 8001280:	f002 fd96 	bl	8003db0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	4618      	mov	r0, r3
 800128a:	f003 fe37 	bl	8004efc <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	2200      	movs	r2, #0
 8001292:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8001296:	2300      	movs	r3, #0
}
 8001298:	4618      	mov	r0, r3
 800129a:	3710      	adds	r7, #16
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}

080012a0 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80012a0:	b590      	push	{r4, r7, lr}
 80012a2:	b08d      	sub	sp, #52	; 0x34
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80012ae:	6a3b      	ldr	r3, [r7, #32]
 80012b0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	4618      	mov	r0, r3
 80012b8:	f003 fef5 	bl	80050a6 <USB_GetMode>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	f040 848c 	bne.w	8001bdc <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	4618      	mov	r0, r3
 80012ca:	f003 fe59 	bl	8004f80 <USB_ReadInterrupts>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	f000 8482 	beq.w	8001bda <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80012d6:	69fb      	ldr	r3, [r7, #28]
 80012d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80012dc:	689b      	ldr	r3, [r3, #8]
 80012de:	0a1b      	lsrs	r3, r3, #8
 80012e0:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	f8c3 24d4 	str.w	r2, [r3, #1236]	; 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	4618      	mov	r0, r3
 80012f0:	f003 fe46 	bl	8004f80 <USB_ReadInterrupts>
 80012f4:	4603      	mov	r3, r0
 80012f6:	f003 0302 	and.w	r3, r3, #2
 80012fa:	2b02      	cmp	r3, #2
 80012fc:	d107      	bne.n	800130e <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	695a      	ldr	r2, [r3, #20]
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f002 0202 	and.w	r2, r2, #2
 800130c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	4618      	mov	r0, r3
 8001314:	f003 fe34 	bl	8004f80 <USB_ReadInterrupts>
 8001318:	4603      	mov	r3, r0
 800131a:	f003 0310 	and.w	r3, r3, #16
 800131e:	2b10      	cmp	r3, #16
 8001320:	d161      	bne.n	80013e6 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	699a      	ldr	r2, [r3, #24]
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f022 0210 	bic.w	r2, r2, #16
 8001330:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001332:	6a3b      	ldr	r3, [r7, #32]
 8001334:	6a1b      	ldr	r3, [r3, #32]
 8001336:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001338:	69bb      	ldr	r3, [r7, #24]
 800133a:	f003 020f 	and.w	r2, r3, #15
 800133e:	4613      	mov	r3, r2
 8001340:	00db      	lsls	r3, r3, #3
 8001342:	4413      	add	r3, r2
 8001344:	009b      	lsls	r3, r3, #2
 8001346:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800134a:	687a      	ldr	r2, [r7, #4]
 800134c:	4413      	add	r3, r2
 800134e:	3304      	adds	r3, #4
 8001350:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001352:	69bb      	ldr	r3, [r7, #24]
 8001354:	0c5b      	lsrs	r3, r3, #17
 8001356:	f003 030f 	and.w	r3, r3, #15
 800135a:	2b02      	cmp	r3, #2
 800135c:	d124      	bne.n	80013a8 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800135e:	69ba      	ldr	r2, [r7, #24]
 8001360:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001364:	4013      	ands	r3, r2
 8001366:	2b00      	cmp	r3, #0
 8001368:	d035      	beq.n	80013d6 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800136a:	697b      	ldr	r3, [r7, #20]
 800136c:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800136e:	69bb      	ldr	r3, [r7, #24]
 8001370:	091b      	lsrs	r3, r3, #4
 8001372:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001374:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001378:	b29b      	uxth	r3, r3
 800137a:	461a      	mov	r2, r3
 800137c:	6a38      	ldr	r0, [r7, #32]
 800137e:	f003 fc6b 	bl	8004c58 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001382:	697b      	ldr	r3, [r7, #20]
 8001384:	68da      	ldr	r2, [r3, #12]
 8001386:	69bb      	ldr	r3, [r7, #24]
 8001388:	091b      	lsrs	r3, r3, #4
 800138a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800138e:	441a      	add	r2, r3
 8001390:	697b      	ldr	r3, [r7, #20]
 8001392:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001394:	697b      	ldr	r3, [r7, #20]
 8001396:	695a      	ldr	r2, [r3, #20]
 8001398:	69bb      	ldr	r3, [r7, #24]
 800139a:	091b      	lsrs	r3, r3, #4
 800139c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80013a0:	441a      	add	r2, r3
 80013a2:	697b      	ldr	r3, [r7, #20]
 80013a4:	615a      	str	r2, [r3, #20]
 80013a6:	e016      	b.n	80013d6 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80013a8:	69bb      	ldr	r3, [r7, #24]
 80013aa:	0c5b      	lsrs	r3, r3, #17
 80013ac:	f003 030f 	and.w	r3, r3, #15
 80013b0:	2b06      	cmp	r3, #6
 80013b2:	d110      	bne.n	80013d6 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 80013ba:	2208      	movs	r2, #8
 80013bc:	4619      	mov	r1, r3
 80013be:	6a38      	ldr	r0, [r7, #32]
 80013c0:	f003 fc4a 	bl	8004c58 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80013c4:	697b      	ldr	r3, [r7, #20]
 80013c6:	695a      	ldr	r2, [r3, #20]
 80013c8:	69bb      	ldr	r3, [r7, #24]
 80013ca:	091b      	lsrs	r3, r3, #4
 80013cc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80013d0:	441a      	add	r2, r3
 80013d2:	697b      	ldr	r3, [r7, #20]
 80013d4:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	699a      	ldr	r2, [r3, #24]
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f042 0210 	orr.w	r2, r2, #16
 80013e4:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	4618      	mov	r0, r3
 80013ec:	f003 fdc8 	bl	8004f80 <USB_ReadInterrupts>
 80013f0:	4603      	mov	r3, r0
 80013f2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80013f6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80013fa:	f040 80a7 	bne.w	800154c <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80013fe:	2300      	movs	r3, #0
 8001400:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	4618      	mov	r0, r3
 8001408:	f003 fdcd 	bl	8004fa6 <USB_ReadDevAllOutEpInterrupt>
 800140c:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800140e:	e099      	b.n	8001544 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001412:	f003 0301 	and.w	r3, r3, #1
 8001416:	2b00      	cmp	r3, #0
 8001418:	f000 808e 	beq.w	8001538 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001422:	b2d2      	uxtb	r2, r2
 8001424:	4611      	mov	r1, r2
 8001426:	4618      	mov	r0, r3
 8001428:	f003 fdf1 	bl	800500e <USB_ReadDevOutEPInterrupt>
 800142c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800142e:	693b      	ldr	r3, [r7, #16]
 8001430:	f003 0301 	and.w	r3, r3, #1
 8001434:	2b00      	cmp	r3, #0
 8001436:	d00c      	beq.n	8001452 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800143a:	015a      	lsls	r2, r3, #5
 800143c:	69fb      	ldr	r3, [r7, #28]
 800143e:	4413      	add	r3, r2
 8001440:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001444:	461a      	mov	r2, r3
 8001446:	2301      	movs	r3, #1
 8001448:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800144a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800144c:	6878      	ldr	r0, [r7, #4]
 800144e:	f000 fea1 	bl	8002194 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001452:	693b      	ldr	r3, [r7, #16]
 8001454:	f003 0308 	and.w	r3, r3, #8
 8001458:	2b00      	cmp	r3, #0
 800145a:	d00c      	beq.n	8001476 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800145c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800145e:	015a      	lsls	r2, r3, #5
 8001460:	69fb      	ldr	r3, [r7, #28]
 8001462:	4413      	add	r3, r2
 8001464:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001468:	461a      	mov	r2, r3
 800146a:	2308      	movs	r3, #8
 800146c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800146e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001470:	6878      	ldr	r0, [r7, #4]
 8001472:	f000 ff77 	bl	8002364 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001476:	693b      	ldr	r3, [r7, #16]
 8001478:	f003 0310 	and.w	r3, r3, #16
 800147c:	2b00      	cmp	r3, #0
 800147e:	d008      	beq.n	8001492 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001482:	015a      	lsls	r2, r3, #5
 8001484:	69fb      	ldr	r3, [r7, #28]
 8001486:	4413      	add	r3, r2
 8001488:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800148c:	461a      	mov	r2, r3
 800148e:	2310      	movs	r3, #16
 8001490:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8001492:	693b      	ldr	r3, [r7, #16]
 8001494:	f003 0302 	and.w	r3, r3, #2
 8001498:	2b00      	cmp	r3, #0
 800149a:	d030      	beq.n	80014fe <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800149c:	6a3b      	ldr	r3, [r7, #32]
 800149e:	695b      	ldr	r3, [r3, #20]
 80014a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014a4:	2b80      	cmp	r3, #128	; 0x80
 80014a6:	d109      	bne.n	80014bc <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80014a8:	69fb      	ldr	r3, [r7, #28]
 80014aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	69fa      	ldr	r2, [r7, #28]
 80014b2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80014b6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80014ba:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80014bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014be:	4613      	mov	r3, r2
 80014c0:	00db      	lsls	r3, r3, #3
 80014c2:	4413      	add	r3, r2
 80014c4:	009b      	lsls	r3, r3, #2
 80014c6:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80014ca:	687a      	ldr	r2, [r7, #4]
 80014cc:	4413      	add	r3, r2
 80014ce:	3304      	adds	r3, #4
 80014d0:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80014d2:	697b      	ldr	r3, [r7, #20]
 80014d4:	78db      	ldrb	r3, [r3, #3]
 80014d6:	2b01      	cmp	r3, #1
 80014d8:	d108      	bne.n	80014ec <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80014da:	697b      	ldr	r3, [r7, #20]
 80014dc:	2200      	movs	r2, #0
 80014de:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80014e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014e2:	b2db      	uxtb	r3, r3
 80014e4:	4619      	mov	r1, r3
 80014e6:	6878      	ldr	r0, [r7, #4]
 80014e8:	f006 f970 	bl	80077cc <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80014ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ee:	015a      	lsls	r2, r3, #5
 80014f0:	69fb      	ldr	r3, [r7, #28]
 80014f2:	4413      	add	r3, r2
 80014f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80014f8:	461a      	mov	r2, r3
 80014fa:	2302      	movs	r3, #2
 80014fc:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80014fe:	693b      	ldr	r3, [r7, #16]
 8001500:	f003 0320 	and.w	r3, r3, #32
 8001504:	2b00      	cmp	r3, #0
 8001506:	d008      	beq.n	800151a <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800150a:	015a      	lsls	r2, r3, #5
 800150c:	69fb      	ldr	r3, [r7, #28]
 800150e:	4413      	add	r3, r2
 8001510:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001514:	461a      	mov	r2, r3
 8001516:	2320      	movs	r3, #32
 8001518:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800151a:	693b      	ldr	r3, [r7, #16]
 800151c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001520:	2b00      	cmp	r3, #0
 8001522:	d009      	beq.n	8001538 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001526:	015a      	lsls	r2, r3, #5
 8001528:	69fb      	ldr	r3, [r7, #28]
 800152a:	4413      	add	r3, r2
 800152c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001530:	461a      	mov	r2, r3
 8001532:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001536:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800153a:	3301      	adds	r3, #1
 800153c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800153e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001540:	085b      	lsrs	r3, r3, #1
 8001542:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001544:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001546:	2b00      	cmp	r3, #0
 8001548:	f47f af62 	bne.w	8001410 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4618      	mov	r0, r3
 8001552:	f003 fd15 	bl	8004f80 <USB_ReadInterrupts>
 8001556:	4603      	mov	r3, r0
 8001558:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800155c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001560:	f040 80db 	bne.w	800171a <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4618      	mov	r0, r3
 800156a:	f003 fd36 	bl	8004fda <USB_ReadDevAllInEpInterrupt>
 800156e:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001570:	2300      	movs	r3, #0
 8001572:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001574:	e0cd      	b.n	8001712 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001576:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001578:	f003 0301 	and.w	r3, r3, #1
 800157c:	2b00      	cmp	r3, #0
 800157e:	f000 80c2 	beq.w	8001706 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001588:	b2d2      	uxtb	r2, r2
 800158a:	4611      	mov	r1, r2
 800158c:	4618      	mov	r0, r3
 800158e:	f003 fd5c 	bl	800504a <USB_ReadDevInEPInterrupt>
 8001592:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001594:	693b      	ldr	r3, [r7, #16]
 8001596:	f003 0301 	and.w	r3, r3, #1
 800159a:	2b00      	cmp	r3, #0
 800159c:	d057      	beq.n	800164e <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800159e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015a0:	f003 030f 	and.w	r3, r3, #15
 80015a4:	2201      	movs	r2, #1
 80015a6:	fa02 f303 	lsl.w	r3, r2, r3
 80015aa:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80015ac:	69fb      	ldr	r3, [r7, #28]
 80015ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80015b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	43db      	mvns	r3, r3
 80015b8:	69f9      	ldr	r1, [r7, #28]
 80015ba:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80015be:	4013      	ands	r3, r2
 80015c0:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80015c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015c4:	015a      	lsls	r2, r3, #5
 80015c6:	69fb      	ldr	r3, [r7, #28]
 80015c8:	4413      	add	r3, r2
 80015ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80015ce:	461a      	mov	r2, r3
 80015d0:	2301      	movs	r3, #1
 80015d2:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	799b      	ldrb	r3, [r3, #6]
 80015d8:	2b01      	cmp	r3, #1
 80015da:	d132      	bne.n	8001642 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80015dc:	6879      	ldr	r1, [r7, #4]
 80015de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015e0:	4613      	mov	r3, r2
 80015e2:	00db      	lsls	r3, r3, #3
 80015e4:	4413      	add	r3, r2
 80015e6:	009b      	lsls	r3, r3, #2
 80015e8:	440b      	add	r3, r1
 80015ea:	3320      	adds	r3, #32
 80015ec:	6819      	ldr	r1, [r3, #0]
 80015ee:	6878      	ldr	r0, [r7, #4]
 80015f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015f2:	4613      	mov	r3, r2
 80015f4:	00db      	lsls	r3, r3, #3
 80015f6:	4413      	add	r3, r2
 80015f8:	009b      	lsls	r3, r3, #2
 80015fa:	4403      	add	r3, r0
 80015fc:	331c      	adds	r3, #28
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4419      	add	r1, r3
 8001602:	6878      	ldr	r0, [r7, #4]
 8001604:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001606:	4613      	mov	r3, r2
 8001608:	00db      	lsls	r3, r3, #3
 800160a:	4413      	add	r3, r2
 800160c:	009b      	lsls	r3, r3, #2
 800160e:	4403      	add	r3, r0
 8001610:	3320      	adds	r3, #32
 8001612:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001616:	2b00      	cmp	r3, #0
 8001618:	d113      	bne.n	8001642 <HAL_PCD_IRQHandler+0x3a2>
 800161a:	6879      	ldr	r1, [r7, #4]
 800161c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800161e:	4613      	mov	r3, r2
 8001620:	00db      	lsls	r3, r3, #3
 8001622:	4413      	add	r3, r2
 8001624:	009b      	lsls	r3, r3, #2
 8001626:	440b      	add	r3, r1
 8001628:	3324      	adds	r3, #36	; 0x24
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	2b00      	cmp	r3, #0
 800162e:	d108      	bne.n	8001642 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	6818      	ldr	r0, [r3, #0]
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 800163a:	461a      	mov	r2, r3
 800163c:	2101      	movs	r1, #1
 800163e:	f003 fd63 	bl	8005108 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001644:	b2db      	uxtb	r3, r3
 8001646:	4619      	mov	r1, r3
 8001648:	6878      	ldr	r0, [r7, #4]
 800164a:	f006 f844 	bl	80076d6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800164e:	693b      	ldr	r3, [r7, #16]
 8001650:	f003 0308 	and.w	r3, r3, #8
 8001654:	2b00      	cmp	r3, #0
 8001656:	d008      	beq.n	800166a <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800165a:	015a      	lsls	r2, r3, #5
 800165c:	69fb      	ldr	r3, [r7, #28]
 800165e:	4413      	add	r3, r2
 8001660:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001664:	461a      	mov	r2, r3
 8001666:	2308      	movs	r3, #8
 8001668:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800166a:	693b      	ldr	r3, [r7, #16]
 800166c:	f003 0310 	and.w	r3, r3, #16
 8001670:	2b00      	cmp	r3, #0
 8001672:	d008      	beq.n	8001686 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001676:	015a      	lsls	r2, r3, #5
 8001678:	69fb      	ldr	r3, [r7, #28]
 800167a:	4413      	add	r3, r2
 800167c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001680:	461a      	mov	r2, r3
 8001682:	2310      	movs	r3, #16
 8001684:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001686:	693b      	ldr	r3, [r7, #16]
 8001688:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800168c:	2b00      	cmp	r3, #0
 800168e:	d008      	beq.n	80016a2 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001692:	015a      	lsls	r2, r3, #5
 8001694:	69fb      	ldr	r3, [r7, #28]
 8001696:	4413      	add	r3, r2
 8001698:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800169c:	461a      	mov	r2, r3
 800169e:	2340      	movs	r3, #64	; 0x40
 80016a0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80016a2:	693b      	ldr	r3, [r7, #16]
 80016a4:	f003 0302 	and.w	r3, r3, #2
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d023      	beq.n	80016f4 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80016ac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80016ae:	6a38      	ldr	r0, [r7, #32]
 80016b0:	f002 fd50 	bl	8004154 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80016b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016b6:	4613      	mov	r3, r2
 80016b8:	00db      	lsls	r3, r3, #3
 80016ba:	4413      	add	r3, r2
 80016bc:	009b      	lsls	r3, r3, #2
 80016be:	3310      	adds	r3, #16
 80016c0:	687a      	ldr	r2, [r7, #4]
 80016c2:	4413      	add	r3, r2
 80016c4:	3304      	adds	r3, #4
 80016c6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80016c8:	697b      	ldr	r3, [r7, #20]
 80016ca:	78db      	ldrb	r3, [r3, #3]
 80016cc:	2b01      	cmp	r3, #1
 80016ce:	d108      	bne.n	80016e2 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80016d0:	697b      	ldr	r3, [r7, #20]
 80016d2:	2200      	movs	r2, #0
 80016d4:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80016d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016d8:	b2db      	uxtb	r3, r3
 80016da:	4619      	mov	r1, r3
 80016dc:	6878      	ldr	r0, [r7, #4]
 80016de:	f006 f887 	bl	80077f0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80016e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016e4:	015a      	lsls	r2, r3, #5
 80016e6:	69fb      	ldr	r3, [r7, #28]
 80016e8:	4413      	add	r3, r2
 80016ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80016ee:	461a      	mov	r2, r3
 80016f0:	2302      	movs	r3, #2
 80016f2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80016f4:	693b      	ldr	r3, [r7, #16]
 80016f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d003      	beq.n	8001706 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80016fe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001700:	6878      	ldr	r0, [r7, #4]
 8001702:	f000 fcbb 	bl	800207c <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001708:	3301      	adds	r3, #1
 800170a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800170c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800170e:	085b      	lsrs	r3, r3, #1
 8001710:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001712:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001714:	2b00      	cmp	r3, #0
 8001716:	f47f af2e 	bne.w	8001576 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	4618      	mov	r0, r3
 8001720:	f003 fc2e 	bl	8004f80 <USB_ReadInterrupts>
 8001724:	4603      	mov	r3, r0
 8001726:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800172a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800172e:	d122      	bne.n	8001776 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001730:	69fb      	ldr	r3, [r7, #28]
 8001732:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	69fa      	ldr	r2, [r7, #28]
 800173a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800173e:	f023 0301 	bic.w	r3, r3, #1
 8001742:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	f893 34cc 	ldrb.w	r3, [r3, #1228]	; 0x4cc
 800174a:	2b01      	cmp	r3, #1
 800174c:	d108      	bne.n	8001760 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	2200      	movs	r2, #0
 8001752:	f883 24cc 	strb.w	r2, [r3, #1228]	; 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001756:	2100      	movs	r1, #0
 8001758:	6878      	ldr	r0, [r7, #4]
 800175a:	f000 fea1 	bl	80024a0 <HAL_PCDEx_LPM_Callback>
 800175e:	e002      	b.n	8001766 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001760:	6878      	ldr	r0, [r7, #4]
 8001762:	f006 f825 	bl	80077b0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	695a      	ldr	r2, [r3, #20]
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001774:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4618      	mov	r0, r3
 800177c:	f003 fc00 	bl	8004f80 <USB_ReadInterrupts>
 8001780:	4603      	mov	r3, r0
 8001782:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001786:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800178a:	d112      	bne.n	80017b2 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800178c:	69fb      	ldr	r3, [r7, #28]
 800178e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001792:	689b      	ldr	r3, [r3, #8]
 8001794:	f003 0301 	and.w	r3, r3, #1
 8001798:	2b01      	cmp	r3, #1
 800179a:	d102      	bne.n	80017a2 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800179c:	6878      	ldr	r0, [r7, #4]
 800179e:	f005 ffe1 	bl	8007764 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	695a      	ldr	r2, [r3, #20]
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80017b0:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4618      	mov	r0, r3
 80017b8:	f003 fbe2 	bl	8004f80 <USB_ReadInterrupts>
 80017bc:	4603      	mov	r3, r0
 80017be:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80017c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80017c6:	f040 80b7 	bne.w	8001938 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80017ca:	69fb      	ldr	r3, [r7, #28]
 80017cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	69fa      	ldr	r2, [r7, #28]
 80017d4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80017d8:	f023 0301 	bic.w	r3, r3, #1
 80017dc:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	2110      	movs	r1, #16
 80017e4:	4618      	mov	r0, r3
 80017e6:	f002 fcb5 	bl	8004154 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80017ea:	2300      	movs	r3, #0
 80017ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80017ee:	e046      	b.n	800187e <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80017f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017f2:	015a      	lsls	r2, r3, #5
 80017f4:	69fb      	ldr	r3, [r7, #28]
 80017f6:	4413      	add	r3, r2
 80017f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80017fc:	461a      	mov	r2, r3
 80017fe:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001802:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001804:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001806:	015a      	lsls	r2, r3, #5
 8001808:	69fb      	ldr	r3, [r7, #28]
 800180a:	4413      	add	r3, r2
 800180c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001814:	0151      	lsls	r1, r2, #5
 8001816:	69fa      	ldr	r2, [r7, #28]
 8001818:	440a      	add	r2, r1
 800181a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800181e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001822:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001824:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001826:	015a      	lsls	r2, r3, #5
 8001828:	69fb      	ldr	r3, [r7, #28]
 800182a:	4413      	add	r3, r2
 800182c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001830:	461a      	mov	r2, r3
 8001832:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001836:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001838:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800183a:	015a      	lsls	r2, r3, #5
 800183c:	69fb      	ldr	r3, [r7, #28]
 800183e:	4413      	add	r3, r2
 8001840:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001848:	0151      	lsls	r1, r2, #5
 800184a:	69fa      	ldr	r2, [r7, #28]
 800184c:	440a      	add	r2, r1
 800184e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001852:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001856:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001858:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800185a:	015a      	lsls	r2, r3, #5
 800185c:	69fb      	ldr	r3, [r7, #28]
 800185e:	4413      	add	r3, r2
 8001860:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001868:	0151      	lsls	r1, r2, #5
 800186a:	69fa      	ldr	r2, [r7, #28]
 800186c:	440a      	add	r2, r1
 800186e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001872:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001876:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001878:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800187a:	3301      	adds	r3, #1
 800187c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	791b      	ldrb	r3, [r3, #4]
 8001882:	461a      	mov	r2, r3
 8001884:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001886:	4293      	cmp	r3, r2
 8001888:	d3b2      	bcc.n	80017f0 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800188a:	69fb      	ldr	r3, [r7, #28]
 800188c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001890:	69db      	ldr	r3, [r3, #28]
 8001892:	69fa      	ldr	r2, [r7, #28]
 8001894:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001898:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800189c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	7bdb      	ldrb	r3, [r3, #15]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d016      	beq.n	80018d4 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80018a6:	69fb      	ldr	r3, [r7, #28]
 80018a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80018ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80018b0:	69fa      	ldr	r2, [r7, #28]
 80018b2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80018b6:	f043 030b 	orr.w	r3, r3, #11
 80018ba:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80018be:	69fb      	ldr	r3, [r7, #28]
 80018c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80018c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018c6:	69fa      	ldr	r2, [r7, #28]
 80018c8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80018cc:	f043 030b 	orr.w	r3, r3, #11
 80018d0:	6453      	str	r3, [r2, #68]	; 0x44
 80018d2:	e015      	b.n	8001900 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80018d4:	69fb      	ldr	r3, [r7, #28]
 80018d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80018da:	695b      	ldr	r3, [r3, #20]
 80018dc:	69fa      	ldr	r2, [r7, #28]
 80018de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80018e2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80018e6:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80018ea:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80018ec:	69fb      	ldr	r3, [r7, #28]
 80018ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80018f2:	691b      	ldr	r3, [r3, #16]
 80018f4:	69fa      	ldr	r2, [r7, #28]
 80018f6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80018fa:	f043 030b 	orr.w	r3, r3, #11
 80018fe:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001900:	69fb      	ldr	r3, [r7, #28]
 8001902:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	69fa      	ldr	r2, [r7, #28]
 800190a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800190e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001912:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6818      	ldr	r0, [r3, #0]
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	f203 439c 	addw	r3, r3, #1180	; 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001922:	461a      	mov	r2, r3
 8001924:	f003 fbf0 	bl	8005108 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	695a      	ldr	r2, [r3, #20]
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001936:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4618      	mov	r0, r3
 800193e:	f003 fb1f 	bl	8004f80 <USB_ReadInterrupts>
 8001942:	4603      	mov	r3, r0
 8001944:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001948:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800194c:	d123      	bne.n	8001996 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4618      	mov	r0, r3
 8001954:	f003 fbb5 	bl	80050c2 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4618      	mov	r0, r3
 800195e:	f002 fc72 	bl	8004246 <USB_GetDevSpeed>
 8001962:	4603      	mov	r3, r0
 8001964:	461a      	mov	r2, r3
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681c      	ldr	r4, [r3, #0]
 800196e:	f001 f9c7 	bl	8002d00 <HAL_RCC_GetHCLKFreq>
 8001972:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001978:	461a      	mov	r2, r3
 800197a:	4620      	mov	r0, r4
 800197c:	f002 f976 	bl	8003c6c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001980:	6878      	ldr	r0, [r7, #4]
 8001982:	f005 fed0 	bl	8007726 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	695a      	ldr	r2, [r3, #20]
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001994:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	4618      	mov	r0, r3
 800199c:	f003 faf0 	bl	8004f80 <USB_ReadInterrupts>
 80019a0:	4603      	mov	r3, r0
 80019a2:	f003 0308 	and.w	r3, r3, #8
 80019a6:	2b08      	cmp	r3, #8
 80019a8:	d10a      	bne.n	80019c0 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80019aa:	6878      	ldr	r0, [r7, #4]
 80019ac:	f005 fead 	bl	800770a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	695a      	ldr	r2, [r3, #20]
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f002 0208 	and.w	r2, r2, #8
 80019be:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4618      	mov	r0, r3
 80019c6:	f003 fadb 	bl	8004f80 <USB_ReadInterrupts>
 80019ca:	4603      	mov	r3, r0
 80019cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019d0:	2b80      	cmp	r3, #128	; 0x80
 80019d2:	d123      	bne.n	8001a1c <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80019d4:	6a3b      	ldr	r3, [r7, #32]
 80019d6:	699b      	ldr	r3, [r3, #24]
 80019d8:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80019dc:	6a3b      	ldr	r3, [r7, #32]
 80019de:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80019e0:	2301      	movs	r3, #1
 80019e2:	627b      	str	r3, [r7, #36]	; 0x24
 80019e4:	e014      	b.n	8001a10 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80019e6:	6879      	ldr	r1, [r7, #4]
 80019e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019ea:	4613      	mov	r3, r2
 80019ec:	00db      	lsls	r3, r3, #3
 80019ee:	4413      	add	r3, r2
 80019f0:	009b      	lsls	r3, r3, #2
 80019f2:	440b      	add	r3, r1
 80019f4:	f203 2357 	addw	r3, r3, #599	; 0x257
 80019f8:	781b      	ldrb	r3, [r3, #0]
 80019fa:	2b01      	cmp	r3, #1
 80019fc:	d105      	bne.n	8001a0a <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80019fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a00:	b2db      	uxtb	r3, r3
 8001a02:	4619      	mov	r1, r3
 8001a04:	6878      	ldr	r0, [r7, #4]
 8001a06:	f000 fb08 	bl	800201a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a0c:	3301      	adds	r3, #1
 8001a0e:	627b      	str	r3, [r7, #36]	; 0x24
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	791b      	ldrb	r3, [r3, #4]
 8001a14:	461a      	mov	r2, r3
 8001a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a18:	4293      	cmp	r3, r2
 8001a1a:	d3e4      	bcc.n	80019e6 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4618      	mov	r0, r3
 8001a22:	f003 faad 	bl	8004f80 <USB_ReadInterrupts>
 8001a26:	4603      	mov	r3, r0
 8001a28:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a2c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001a30:	d13c      	bne.n	8001aac <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001a32:	2301      	movs	r3, #1
 8001a34:	627b      	str	r3, [r7, #36]	; 0x24
 8001a36:	e02b      	b.n	8001a90 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a3a:	015a      	lsls	r2, r3, #5
 8001a3c:	69fb      	ldr	r3, [r7, #28]
 8001a3e:	4413      	add	r3, r2
 8001a40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001a48:	6879      	ldr	r1, [r7, #4]
 8001a4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a4c:	4613      	mov	r3, r2
 8001a4e:	00db      	lsls	r3, r3, #3
 8001a50:	4413      	add	r3, r2
 8001a52:	009b      	lsls	r3, r3, #2
 8001a54:	440b      	add	r3, r1
 8001a56:	3318      	adds	r3, #24
 8001a58:	781b      	ldrb	r3, [r3, #0]
 8001a5a:	2b01      	cmp	r3, #1
 8001a5c:	d115      	bne.n	8001a8a <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8001a5e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	da12      	bge.n	8001a8a <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001a64:	6879      	ldr	r1, [r7, #4]
 8001a66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a68:	4613      	mov	r3, r2
 8001a6a:	00db      	lsls	r3, r3, #3
 8001a6c:	4413      	add	r3, r2
 8001a6e:	009b      	lsls	r3, r3, #2
 8001a70:	440b      	add	r3, r1
 8001a72:	3317      	adds	r3, #23
 8001a74:	2201      	movs	r2, #1
 8001a76:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8001a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a7a:	b2db      	uxtb	r3, r3
 8001a7c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001a80:	b2db      	uxtb	r3, r3
 8001a82:	4619      	mov	r1, r3
 8001a84:	6878      	ldr	r0, [r7, #4]
 8001a86:	f000 fac8 	bl	800201a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a8c:	3301      	adds	r3, #1
 8001a8e:	627b      	str	r3, [r7, #36]	; 0x24
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	791b      	ldrb	r3, [r3, #4]
 8001a94:	461a      	mov	r2, r3
 8001a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a98:	4293      	cmp	r3, r2
 8001a9a:	d3cd      	bcc.n	8001a38 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	695a      	ldr	r2, [r3, #20]
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001aaa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f003 fa65 	bl	8004f80 <USB_ReadInterrupts>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001abc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001ac0:	d156      	bne.n	8001b70 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	627b      	str	r3, [r7, #36]	; 0x24
 8001ac6:	e045      	b.n	8001b54 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8001ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aca:	015a      	lsls	r2, r3, #5
 8001acc:	69fb      	ldr	r3, [r7, #28]
 8001ace:	4413      	add	r3, r2
 8001ad0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001ad8:	6879      	ldr	r1, [r7, #4]
 8001ada:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001adc:	4613      	mov	r3, r2
 8001ade:	00db      	lsls	r3, r3, #3
 8001ae0:	4413      	add	r3, r2
 8001ae2:	009b      	lsls	r3, r3, #2
 8001ae4:	440b      	add	r3, r1
 8001ae6:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8001aea:	781b      	ldrb	r3, [r3, #0]
 8001aec:	2b01      	cmp	r3, #1
 8001aee:	d12e      	bne.n	8001b4e <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001af0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	da2b      	bge.n	8001b4e <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8001af6:	69bb      	ldr	r3, [r7, #24]
 8001af8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 8001b02:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001b06:	429a      	cmp	r2, r3
 8001b08:	d121      	bne.n	8001b4e <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8001b0a:	6879      	ldr	r1, [r7, #4]
 8001b0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b0e:	4613      	mov	r3, r2
 8001b10:	00db      	lsls	r3, r3, #3
 8001b12:	4413      	add	r3, r2
 8001b14:	009b      	lsls	r3, r3, #2
 8001b16:	440b      	add	r3, r1
 8001b18:	f203 2357 	addw	r3, r3, #599	; 0x257
 8001b1c:	2201      	movs	r2, #1
 8001b1e:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8001b20:	6a3b      	ldr	r3, [r7, #32]
 8001b22:	699b      	ldr	r3, [r3, #24]
 8001b24:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001b28:	6a3b      	ldr	r3, [r7, #32]
 8001b2a:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8001b2c:	6a3b      	ldr	r3, [r7, #32]
 8001b2e:	695b      	ldr	r3, [r3, #20]
 8001b30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d10a      	bne.n	8001b4e <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8001b38:	69fb      	ldr	r3, [r7, #28]
 8001b3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	69fa      	ldr	r2, [r7, #28]
 8001b42:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001b46:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b4a:	6053      	str	r3, [r2, #4]
            break;
 8001b4c:	e008      	b.n	8001b60 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b50:	3301      	adds	r3, #1
 8001b52:	627b      	str	r3, [r7, #36]	; 0x24
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	791b      	ldrb	r3, [r3, #4]
 8001b58:	461a      	mov	r2, r3
 8001b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b5c:	4293      	cmp	r3, r2
 8001b5e:	d3b3      	bcc.n	8001ac8 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	695a      	ldr	r2, [r3, #20]
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001b6e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4618      	mov	r0, r3
 8001b76:	f003 fa03 	bl	8004f80 <USB_ReadInterrupts>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001b80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b84:	d10a      	bne.n	8001b9c <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001b86:	6878      	ldr	r0, [r7, #4]
 8001b88:	f005 fe44 	bl	8007814 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	695a      	ldr	r2, [r3, #20]
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001b9a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f003 f9ed 	bl	8004f80 <USB_ReadInterrupts>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	f003 0304 	and.w	r3, r3, #4
 8001bac:	2b04      	cmp	r3, #4
 8001bae:	d115      	bne.n	8001bdc <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001bb8:	69bb      	ldr	r3, [r7, #24]
 8001bba:	f003 0304 	and.w	r3, r3, #4
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d002      	beq.n	8001bc8 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001bc2:	6878      	ldr	r0, [r7, #4]
 8001bc4:	f005 fe34 	bl	8007830 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	6859      	ldr	r1, [r3, #4]
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	69ba      	ldr	r2, [r7, #24]
 8001bd4:	430a      	orrs	r2, r1
 8001bd6:	605a      	str	r2, [r3, #4]
 8001bd8:	e000      	b.n	8001bdc <HAL_PCD_IRQHandler+0x93c>
      return;
 8001bda:	bf00      	nop
    }
  }
}
 8001bdc:	3734      	adds	r7, #52	; 0x34
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd90      	pop	{r4, r7, pc}

08001be2 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001be2:	b580      	push	{r7, lr}
 8001be4:	b082      	sub	sp, #8
 8001be6:	af00      	add	r7, sp, #0
 8001be8:	6078      	str	r0, [r7, #4]
 8001bea:	460b      	mov	r3, r1
 8001bec:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8001bf4:	2b01      	cmp	r3, #1
 8001bf6:	d101      	bne.n	8001bfc <HAL_PCD_SetAddress+0x1a>
 8001bf8:	2302      	movs	r3, #2
 8001bfa:	e012      	b.n	8001c22 <HAL_PCD_SetAddress+0x40>
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2201      	movs	r2, #1
 8001c00:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  hpcd->USB_Address = address;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	78fa      	ldrb	r2, [r7, #3]
 8001c08:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	78fa      	ldrb	r2, [r7, #3]
 8001c10:	4611      	mov	r1, r2
 8001c12:	4618      	mov	r0, r3
 8001c14:	f003 f94c 	bl	8004eb0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8001c20:	2300      	movs	r3, #0
}
 8001c22:	4618      	mov	r0, r3
 8001c24:	3708      	adds	r7, #8
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}

08001c2a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001c2a:	b580      	push	{r7, lr}
 8001c2c:	b084      	sub	sp, #16
 8001c2e:	af00      	add	r7, sp, #0
 8001c30:	6078      	str	r0, [r7, #4]
 8001c32:	4608      	mov	r0, r1
 8001c34:	4611      	mov	r1, r2
 8001c36:	461a      	mov	r2, r3
 8001c38:	4603      	mov	r3, r0
 8001c3a:	70fb      	strb	r3, [r7, #3]
 8001c3c:	460b      	mov	r3, r1
 8001c3e:	803b      	strh	r3, [r7, #0]
 8001c40:	4613      	mov	r3, r2
 8001c42:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001c44:	2300      	movs	r3, #0
 8001c46:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001c48:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	da0f      	bge.n	8001c70 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c50:	78fb      	ldrb	r3, [r7, #3]
 8001c52:	f003 020f 	and.w	r2, r3, #15
 8001c56:	4613      	mov	r3, r2
 8001c58:	00db      	lsls	r3, r3, #3
 8001c5a:	4413      	add	r3, r2
 8001c5c:	009b      	lsls	r3, r3, #2
 8001c5e:	3310      	adds	r3, #16
 8001c60:	687a      	ldr	r2, [r7, #4]
 8001c62:	4413      	add	r3, r2
 8001c64:	3304      	adds	r3, #4
 8001c66:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	2201      	movs	r2, #1
 8001c6c:	705a      	strb	r2, [r3, #1]
 8001c6e:	e00f      	b.n	8001c90 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001c70:	78fb      	ldrb	r3, [r7, #3]
 8001c72:	f003 020f 	and.w	r2, r3, #15
 8001c76:	4613      	mov	r3, r2
 8001c78:	00db      	lsls	r3, r3, #3
 8001c7a:	4413      	add	r3, r2
 8001c7c:	009b      	lsls	r3, r3, #2
 8001c7e:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8001c82:	687a      	ldr	r2, [r7, #4]
 8001c84:	4413      	add	r3, r2
 8001c86:	3304      	adds	r3, #4
 8001c88:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001c90:	78fb      	ldrb	r3, [r7, #3]
 8001c92:	f003 030f 	and.w	r3, r3, #15
 8001c96:	b2da      	uxtb	r2, r3
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001c9c:	883a      	ldrh	r2, [r7, #0]
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	78ba      	ldrb	r2, [r7, #2]
 8001ca6:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	785b      	ldrb	r3, [r3, #1]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d004      	beq.n	8001cba <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	781b      	ldrb	r3, [r3, #0]
 8001cb4:	b29a      	uxth	r2, r3
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001cba:	78bb      	ldrb	r3, [r7, #2]
 8001cbc:	2b02      	cmp	r3, #2
 8001cbe:	d102      	bne.n	8001cc6 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8001ccc:	2b01      	cmp	r3, #1
 8001cce:	d101      	bne.n	8001cd4 <HAL_PCD_EP_Open+0xaa>
 8001cd0:	2302      	movs	r3, #2
 8001cd2:	e00e      	b.n	8001cf2 <HAL_PCD_EP_Open+0xc8>
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2201      	movs	r2, #1
 8001cd8:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	68f9      	ldr	r1, [r7, #12]
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	f002 fad4 	bl	8004290 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2200      	movs	r2, #0
 8001cec:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return ret;
 8001cf0:	7afb      	ldrb	r3, [r7, #11]
}
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	3710      	adds	r7, #16
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}

08001cfa <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001cfa:	b580      	push	{r7, lr}
 8001cfc:	b084      	sub	sp, #16
 8001cfe:	af00      	add	r7, sp, #0
 8001d00:	6078      	str	r0, [r7, #4]
 8001d02:	460b      	mov	r3, r1
 8001d04:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001d06:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	da0f      	bge.n	8001d2e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d0e:	78fb      	ldrb	r3, [r7, #3]
 8001d10:	f003 020f 	and.w	r2, r3, #15
 8001d14:	4613      	mov	r3, r2
 8001d16:	00db      	lsls	r3, r3, #3
 8001d18:	4413      	add	r3, r2
 8001d1a:	009b      	lsls	r3, r3, #2
 8001d1c:	3310      	adds	r3, #16
 8001d1e:	687a      	ldr	r2, [r7, #4]
 8001d20:	4413      	add	r3, r2
 8001d22:	3304      	adds	r3, #4
 8001d24:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	2201      	movs	r2, #1
 8001d2a:	705a      	strb	r2, [r3, #1]
 8001d2c:	e00f      	b.n	8001d4e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d2e:	78fb      	ldrb	r3, [r7, #3]
 8001d30:	f003 020f 	and.w	r2, r3, #15
 8001d34:	4613      	mov	r3, r2
 8001d36:	00db      	lsls	r3, r3, #3
 8001d38:	4413      	add	r3, r2
 8001d3a:	009b      	lsls	r3, r3, #2
 8001d3c:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8001d40:	687a      	ldr	r2, [r7, #4]
 8001d42:	4413      	add	r3, r2
 8001d44:	3304      	adds	r3, #4
 8001d46:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d4e:	78fb      	ldrb	r3, [r7, #3]
 8001d50:	f003 030f 	and.w	r3, r3, #15
 8001d54:	b2da      	uxtb	r2, r3
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8001d60:	2b01      	cmp	r3, #1
 8001d62:	d101      	bne.n	8001d68 <HAL_PCD_EP_Close+0x6e>
 8001d64:	2302      	movs	r3, #2
 8001d66:	e00e      	b.n	8001d86 <HAL_PCD_EP_Close+0x8c>
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2201      	movs	r2, #1
 8001d6c:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	68f9      	ldr	r1, [r7, #12]
 8001d76:	4618      	mov	r0, r3
 8001d78:	f002 fb12 	bl	80043a0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2200      	movs	r2, #0
 8001d80:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  return HAL_OK;
 8001d84:	2300      	movs	r3, #0
}
 8001d86:	4618      	mov	r0, r3
 8001d88:	3710      	adds	r7, #16
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}

08001d8e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001d8e:	b580      	push	{r7, lr}
 8001d90:	b086      	sub	sp, #24
 8001d92:	af00      	add	r7, sp, #0
 8001d94:	60f8      	str	r0, [r7, #12]
 8001d96:	607a      	str	r2, [r7, #4]
 8001d98:	603b      	str	r3, [r7, #0]
 8001d9a:	460b      	mov	r3, r1
 8001d9c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d9e:	7afb      	ldrb	r3, [r7, #11]
 8001da0:	f003 020f 	and.w	r2, r3, #15
 8001da4:	4613      	mov	r3, r2
 8001da6:	00db      	lsls	r3, r3, #3
 8001da8:	4413      	add	r3, r2
 8001daa:	009b      	lsls	r3, r3, #2
 8001dac:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8001db0:	68fa      	ldr	r2, [r7, #12]
 8001db2:	4413      	add	r3, r2
 8001db4:	3304      	adds	r3, #4
 8001db6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001db8:	697b      	ldr	r3, [r7, #20]
 8001dba:	687a      	ldr	r2, [r7, #4]
 8001dbc:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001dbe:	697b      	ldr	r3, [r7, #20]
 8001dc0:	683a      	ldr	r2, [r7, #0]
 8001dc2:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8001dc4:	697b      	ldr	r3, [r7, #20]
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8001dca:	697b      	ldr	r3, [r7, #20]
 8001dcc:	2200      	movs	r2, #0
 8001dce:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001dd0:	7afb      	ldrb	r3, [r7, #11]
 8001dd2:	f003 030f 	and.w	r3, r3, #15
 8001dd6:	b2da      	uxtb	r2, r3
 8001dd8:	697b      	ldr	r3, [r7, #20]
 8001dda:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	799b      	ldrb	r3, [r3, #6]
 8001de0:	2b01      	cmp	r3, #1
 8001de2:	d102      	bne.n	8001dea <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001de4:	687a      	ldr	r2, [r7, #4]
 8001de6:	697b      	ldr	r3, [r7, #20]
 8001de8:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	6818      	ldr	r0, [r3, #0]
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	799b      	ldrb	r3, [r3, #6]
 8001df2:	461a      	mov	r2, r3
 8001df4:	6979      	ldr	r1, [r7, #20]
 8001df6:	f002 fbaf 	bl	8004558 <USB_EPStartXfer>

  return HAL_OK;
 8001dfa:	2300      	movs	r3, #0
}
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	3718      	adds	r7, #24
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bd80      	pop	{r7, pc}

08001e04 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8001e04:	b480      	push	{r7}
 8001e06:	b083      	sub	sp, #12
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
 8001e0c:	460b      	mov	r3, r1
 8001e0e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001e10:	78fb      	ldrb	r3, [r7, #3]
 8001e12:	f003 020f 	and.w	r2, r3, #15
 8001e16:	6879      	ldr	r1, [r7, #4]
 8001e18:	4613      	mov	r3, r2
 8001e1a:	00db      	lsls	r3, r3, #3
 8001e1c:	4413      	add	r3, r2
 8001e1e:	009b      	lsls	r3, r3, #2
 8001e20:	440b      	add	r3, r1
 8001e22:	f503 731a 	add.w	r3, r3, #616	; 0x268
 8001e26:	681b      	ldr	r3, [r3, #0]
}
 8001e28:	4618      	mov	r0, r3
 8001e2a:	370c      	adds	r7, #12
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e32:	4770      	bx	lr

08001e34 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b086      	sub	sp, #24
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	60f8      	str	r0, [r7, #12]
 8001e3c:	607a      	str	r2, [r7, #4]
 8001e3e:	603b      	str	r3, [r7, #0]
 8001e40:	460b      	mov	r3, r1
 8001e42:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e44:	7afb      	ldrb	r3, [r7, #11]
 8001e46:	f003 020f 	and.w	r2, r3, #15
 8001e4a:	4613      	mov	r3, r2
 8001e4c:	00db      	lsls	r3, r3, #3
 8001e4e:	4413      	add	r3, r2
 8001e50:	009b      	lsls	r3, r3, #2
 8001e52:	3310      	adds	r3, #16
 8001e54:	68fa      	ldr	r2, [r7, #12]
 8001e56:	4413      	add	r3, r2
 8001e58:	3304      	adds	r3, #4
 8001e5a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001e5c:	697b      	ldr	r3, [r7, #20]
 8001e5e:	687a      	ldr	r2, [r7, #4]
 8001e60:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001e62:	697b      	ldr	r3, [r7, #20]
 8001e64:	683a      	ldr	r2, [r7, #0]
 8001e66:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8001e68:	697b      	ldr	r3, [r7, #20]
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8001e6e:	697b      	ldr	r3, [r7, #20]
 8001e70:	2201      	movs	r2, #1
 8001e72:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e74:	7afb      	ldrb	r3, [r7, #11]
 8001e76:	f003 030f 	and.w	r3, r3, #15
 8001e7a:	b2da      	uxtb	r2, r3
 8001e7c:	697b      	ldr	r3, [r7, #20]
 8001e7e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	799b      	ldrb	r3, [r3, #6]
 8001e84:	2b01      	cmp	r3, #1
 8001e86:	d102      	bne.n	8001e8e <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001e88:	687a      	ldr	r2, [r7, #4]
 8001e8a:	697b      	ldr	r3, [r7, #20]
 8001e8c:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	6818      	ldr	r0, [r3, #0]
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	799b      	ldrb	r3, [r3, #6]
 8001e96:	461a      	mov	r2, r3
 8001e98:	6979      	ldr	r1, [r7, #20]
 8001e9a:	f002 fb5d 	bl	8004558 <USB_EPStartXfer>

  return HAL_OK;
 8001e9e:	2300      	movs	r3, #0
}
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	3718      	adds	r7, #24
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd80      	pop	{r7, pc}

08001ea8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b084      	sub	sp, #16
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
 8001eb0:	460b      	mov	r3, r1
 8001eb2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001eb4:	78fb      	ldrb	r3, [r7, #3]
 8001eb6:	f003 030f 	and.w	r3, r3, #15
 8001eba:	687a      	ldr	r2, [r7, #4]
 8001ebc:	7912      	ldrb	r2, [r2, #4]
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d901      	bls.n	8001ec6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	e04f      	b.n	8001f66 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001ec6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	da0f      	bge.n	8001eee <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ece:	78fb      	ldrb	r3, [r7, #3]
 8001ed0:	f003 020f 	and.w	r2, r3, #15
 8001ed4:	4613      	mov	r3, r2
 8001ed6:	00db      	lsls	r3, r3, #3
 8001ed8:	4413      	add	r3, r2
 8001eda:	009b      	lsls	r3, r3, #2
 8001edc:	3310      	adds	r3, #16
 8001ede:	687a      	ldr	r2, [r7, #4]
 8001ee0:	4413      	add	r3, r2
 8001ee2:	3304      	adds	r3, #4
 8001ee4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	2201      	movs	r2, #1
 8001eea:	705a      	strb	r2, [r3, #1]
 8001eec:	e00d      	b.n	8001f0a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001eee:	78fa      	ldrb	r2, [r7, #3]
 8001ef0:	4613      	mov	r3, r2
 8001ef2:	00db      	lsls	r3, r3, #3
 8001ef4:	4413      	add	r3, r2
 8001ef6:	009b      	lsls	r3, r3, #2
 8001ef8:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8001efc:	687a      	ldr	r2, [r7, #4]
 8001efe:	4413      	add	r3, r2
 8001f00:	3304      	adds	r3, #4
 8001f02:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	2200      	movs	r2, #0
 8001f08:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	2201      	movs	r2, #1
 8001f0e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f10:	78fb      	ldrb	r3, [r7, #3]
 8001f12:	f003 030f 	and.w	r3, r3, #15
 8001f16:	b2da      	uxtb	r2, r3
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8001f22:	2b01      	cmp	r3, #1
 8001f24:	d101      	bne.n	8001f2a <HAL_PCD_EP_SetStall+0x82>
 8001f26:	2302      	movs	r3, #2
 8001f28:	e01d      	b.n	8001f66 <HAL_PCD_EP_SetStall+0xbe>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2201      	movs	r2, #1
 8001f2e:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	68f9      	ldr	r1, [r7, #12]
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f002 fee5 	bl	8004d08 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001f3e:	78fb      	ldrb	r3, [r7, #3]
 8001f40:	f003 030f 	and.w	r3, r3, #15
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d109      	bne.n	8001f5c <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6818      	ldr	r0, [r3, #0]
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	7999      	ldrb	r1, [r3, #6]
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8001f56:	461a      	mov	r2, r3
 8001f58:	f003 f8d6 	bl	8005108 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2200      	movs	r2, #0
 8001f60:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8001f64:	2300      	movs	r3, #0
}
 8001f66:	4618      	mov	r0, r3
 8001f68:	3710      	adds	r7, #16
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bd80      	pop	{r7, pc}

08001f6e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001f6e:	b580      	push	{r7, lr}
 8001f70:	b084      	sub	sp, #16
 8001f72:	af00      	add	r7, sp, #0
 8001f74:	6078      	str	r0, [r7, #4]
 8001f76:	460b      	mov	r3, r1
 8001f78:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001f7a:	78fb      	ldrb	r3, [r7, #3]
 8001f7c:	f003 030f 	and.w	r3, r3, #15
 8001f80:	687a      	ldr	r2, [r7, #4]
 8001f82:	7912      	ldrb	r2, [r2, #4]
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d901      	bls.n	8001f8c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001f88:	2301      	movs	r3, #1
 8001f8a:	e042      	b.n	8002012 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001f8c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	da0f      	bge.n	8001fb4 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f94:	78fb      	ldrb	r3, [r7, #3]
 8001f96:	f003 020f 	and.w	r2, r3, #15
 8001f9a:	4613      	mov	r3, r2
 8001f9c:	00db      	lsls	r3, r3, #3
 8001f9e:	4413      	add	r3, r2
 8001fa0:	009b      	lsls	r3, r3, #2
 8001fa2:	3310      	adds	r3, #16
 8001fa4:	687a      	ldr	r2, [r7, #4]
 8001fa6:	4413      	add	r3, r2
 8001fa8:	3304      	adds	r3, #4
 8001faa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	2201      	movs	r2, #1
 8001fb0:	705a      	strb	r2, [r3, #1]
 8001fb2:	e00f      	b.n	8001fd4 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001fb4:	78fb      	ldrb	r3, [r7, #3]
 8001fb6:	f003 020f 	and.w	r2, r3, #15
 8001fba:	4613      	mov	r3, r2
 8001fbc:	00db      	lsls	r3, r3, #3
 8001fbe:	4413      	add	r3, r2
 8001fc0:	009b      	lsls	r3, r3, #2
 8001fc2:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8001fc6:	687a      	ldr	r2, [r7, #4]
 8001fc8:	4413      	add	r3, r2
 8001fca:	3304      	adds	r3, #4
 8001fcc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001fda:	78fb      	ldrb	r3, [r7, #3]
 8001fdc:	f003 030f 	and.w	r3, r3, #15
 8001fe0:	b2da      	uxtb	r2, r3
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8001fec:	2b01      	cmp	r3, #1
 8001fee:	d101      	bne.n	8001ff4 <HAL_PCD_EP_ClrStall+0x86>
 8001ff0:	2302      	movs	r3, #2
 8001ff2:	e00e      	b.n	8002012 <HAL_PCD_EP_ClrStall+0xa4>
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2201      	movs	r2, #1
 8001ff8:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	68f9      	ldr	r1, [r7, #12]
 8002002:	4618      	mov	r0, r3
 8002004:	f002 feee 	bl	8004de4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2200      	movs	r2, #0
 800200c:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8002010:	2300      	movs	r3, #0
}
 8002012:	4618      	mov	r0, r3
 8002014:	3710      	adds	r7, #16
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}

0800201a <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800201a:	b580      	push	{r7, lr}
 800201c:	b084      	sub	sp, #16
 800201e:	af00      	add	r7, sp, #0
 8002020:	6078      	str	r0, [r7, #4]
 8002022:	460b      	mov	r3, r1
 8002024:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002026:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800202a:	2b00      	cmp	r3, #0
 800202c:	da0c      	bge.n	8002048 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800202e:	78fb      	ldrb	r3, [r7, #3]
 8002030:	f003 020f 	and.w	r2, r3, #15
 8002034:	4613      	mov	r3, r2
 8002036:	00db      	lsls	r3, r3, #3
 8002038:	4413      	add	r3, r2
 800203a:	009b      	lsls	r3, r3, #2
 800203c:	3310      	adds	r3, #16
 800203e:	687a      	ldr	r2, [r7, #4]
 8002040:	4413      	add	r3, r2
 8002042:	3304      	adds	r3, #4
 8002044:	60fb      	str	r3, [r7, #12]
 8002046:	e00c      	b.n	8002062 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002048:	78fb      	ldrb	r3, [r7, #3]
 800204a:	f003 020f 	and.w	r2, r3, #15
 800204e:	4613      	mov	r3, r2
 8002050:	00db      	lsls	r3, r3, #3
 8002052:	4413      	add	r3, r2
 8002054:	009b      	lsls	r3, r3, #2
 8002056:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800205a:	687a      	ldr	r2, [r7, #4]
 800205c:	4413      	add	r3, r2
 800205e:	3304      	adds	r3, #4
 8002060:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	68f9      	ldr	r1, [r7, #12]
 8002068:	4618      	mov	r0, r3
 800206a:	f002 fd0d 	bl	8004a88 <USB_EPStopXfer>
 800206e:	4603      	mov	r3, r0
 8002070:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002072:	7afb      	ldrb	r3, [r7, #11]
}
 8002074:	4618      	mov	r0, r3
 8002076:	3710      	adds	r7, #16
 8002078:	46bd      	mov	sp, r7
 800207a:	bd80      	pop	{r7, pc}

0800207c <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b08a      	sub	sp, #40	; 0x28
 8002080:	af02      	add	r7, sp, #8
 8002082:	6078      	str	r0, [r7, #4]
 8002084:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800208c:	697b      	ldr	r3, [r7, #20]
 800208e:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002090:	683a      	ldr	r2, [r7, #0]
 8002092:	4613      	mov	r3, r2
 8002094:	00db      	lsls	r3, r3, #3
 8002096:	4413      	add	r3, r2
 8002098:	009b      	lsls	r3, r3, #2
 800209a:	3310      	adds	r3, #16
 800209c:	687a      	ldr	r2, [r7, #4]
 800209e:	4413      	add	r3, r2
 80020a0:	3304      	adds	r3, #4
 80020a2:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	695a      	ldr	r2, [r3, #20]
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	691b      	ldr	r3, [r3, #16]
 80020ac:	429a      	cmp	r2, r3
 80020ae:	d901      	bls.n	80020b4 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80020b0:	2301      	movs	r3, #1
 80020b2:	e06b      	b.n	800218c <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	691a      	ldr	r2, [r3, #16]
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	695b      	ldr	r3, [r3, #20]
 80020bc:	1ad3      	subs	r3, r2, r3
 80020be:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	689b      	ldr	r3, [r3, #8]
 80020c4:	69fa      	ldr	r2, [r7, #28]
 80020c6:	429a      	cmp	r2, r3
 80020c8:	d902      	bls.n	80020d0 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	689b      	ldr	r3, [r3, #8]
 80020ce:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80020d0:	69fb      	ldr	r3, [r7, #28]
 80020d2:	3303      	adds	r3, #3
 80020d4:	089b      	lsrs	r3, r3, #2
 80020d6:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80020d8:	e02a      	b.n	8002130 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	691a      	ldr	r2, [r3, #16]
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	695b      	ldr	r3, [r3, #20]
 80020e2:	1ad3      	subs	r3, r2, r3
 80020e4:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	689b      	ldr	r3, [r3, #8]
 80020ea:	69fa      	ldr	r2, [r7, #28]
 80020ec:	429a      	cmp	r2, r3
 80020ee:	d902      	bls.n	80020f6 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	689b      	ldr	r3, [r3, #8]
 80020f4:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80020f6:	69fb      	ldr	r3, [r7, #28]
 80020f8:	3303      	adds	r3, #3
 80020fa:	089b      	lsrs	r3, r3, #2
 80020fc:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	68d9      	ldr	r1, [r3, #12]
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	b2da      	uxtb	r2, r3
 8002106:	69fb      	ldr	r3, [r7, #28]
 8002108:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800210e:	9300      	str	r3, [sp, #0]
 8002110:	4603      	mov	r3, r0
 8002112:	6978      	ldr	r0, [r7, #20]
 8002114:	f002 fd62 	bl	8004bdc <USB_WritePacket>

    ep->xfer_buff  += len;
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	68da      	ldr	r2, [r3, #12]
 800211c:	69fb      	ldr	r3, [r7, #28]
 800211e:	441a      	add	r2, r3
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	695a      	ldr	r2, [r3, #20]
 8002128:	69fb      	ldr	r3, [r7, #28]
 800212a:	441a      	add	r2, r3
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	015a      	lsls	r2, r3, #5
 8002134:	693b      	ldr	r3, [r7, #16]
 8002136:	4413      	add	r3, r2
 8002138:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800213c:	699b      	ldr	r3, [r3, #24]
 800213e:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002140:	69ba      	ldr	r2, [r7, #24]
 8002142:	429a      	cmp	r2, r3
 8002144:	d809      	bhi.n	800215a <PCD_WriteEmptyTxFifo+0xde>
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	695a      	ldr	r2, [r3, #20]
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800214e:	429a      	cmp	r2, r3
 8002150:	d203      	bcs.n	800215a <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	691b      	ldr	r3, [r3, #16]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d1bf      	bne.n	80020da <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	691a      	ldr	r2, [r3, #16]
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	695b      	ldr	r3, [r3, #20]
 8002162:	429a      	cmp	r2, r3
 8002164:	d811      	bhi.n	800218a <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	f003 030f 	and.w	r3, r3, #15
 800216c:	2201      	movs	r2, #1
 800216e:	fa02 f303 	lsl.w	r3, r2, r3
 8002172:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002174:	693b      	ldr	r3, [r7, #16]
 8002176:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800217a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800217c:	68bb      	ldr	r3, [r7, #8]
 800217e:	43db      	mvns	r3, r3
 8002180:	6939      	ldr	r1, [r7, #16]
 8002182:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002186:	4013      	ands	r3, r2
 8002188:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800218a:	2300      	movs	r3, #0
}
 800218c:	4618      	mov	r0, r3
 800218e:	3720      	adds	r7, #32
 8002190:	46bd      	mov	sp, r7
 8002192:	bd80      	pop	{r7, pc}

08002194 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b088      	sub	sp, #32
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
 800219c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80021a4:	69fb      	ldr	r3, [r7, #28]
 80021a6:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80021a8:	69fb      	ldr	r3, [r7, #28]
 80021aa:	333c      	adds	r3, #60	; 0x3c
 80021ac:	3304      	adds	r3, #4
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	015a      	lsls	r2, r3, #5
 80021b6:	69bb      	ldr	r3, [r7, #24]
 80021b8:	4413      	add	r3, r2
 80021ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021be:	689b      	ldr	r3, [r3, #8]
 80021c0:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	799b      	ldrb	r3, [r3, #6]
 80021c6:	2b01      	cmp	r3, #1
 80021c8:	d17b      	bne.n	80022c2 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80021ca:	693b      	ldr	r3, [r7, #16]
 80021cc:	f003 0308 	and.w	r3, r3, #8
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d015      	beq.n	8002200 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80021d4:	697b      	ldr	r3, [r7, #20]
 80021d6:	4a61      	ldr	r2, [pc, #388]	; (800235c <PCD_EP_OutXfrComplete_int+0x1c8>)
 80021d8:	4293      	cmp	r3, r2
 80021da:	f240 80b9 	bls.w	8002350 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80021de:	693b      	ldr	r3, [r7, #16]
 80021e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	f000 80b3 	beq.w	8002350 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	015a      	lsls	r2, r3, #5
 80021ee:	69bb      	ldr	r3, [r7, #24]
 80021f0:	4413      	add	r3, r2
 80021f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021f6:	461a      	mov	r2, r3
 80021f8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80021fc:	6093      	str	r3, [r2, #8]
 80021fe:	e0a7      	b.n	8002350 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002200:	693b      	ldr	r3, [r7, #16]
 8002202:	f003 0320 	and.w	r3, r3, #32
 8002206:	2b00      	cmp	r3, #0
 8002208:	d009      	beq.n	800221e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	015a      	lsls	r2, r3, #5
 800220e:	69bb      	ldr	r3, [r7, #24]
 8002210:	4413      	add	r3, r2
 8002212:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002216:	461a      	mov	r2, r3
 8002218:	2320      	movs	r3, #32
 800221a:	6093      	str	r3, [r2, #8]
 800221c:	e098      	b.n	8002350 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800221e:	693b      	ldr	r3, [r7, #16]
 8002220:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002224:	2b00      	cmp	r3, #0
 8002226:	f040 8093 	bne.w	8002350 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800222a:	697b      	ldr	r3, [r7, #20]
 800222c:	4a4b      	ldr	r2, [pc, #300]	; (800235c <PCD_EP_OutXfrComplete_int+0x1c8>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d90f      	bls.n	8002252 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002232:	693b      	ldr	r3, [r7, #16]
 8002234:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002238:	2b00      	cmp	r3, #0
 800223a:	d00a      	beq.n	8002252 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	015a      	lsls	r2, r3, #5
 8002240:	69bb      	ldr	r3, [r7, #24]
 8002242:	4413      	add	r3, r2
 8002244:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002248:	461a      	mov	r2, r3
 800224a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800224e:	6093      	str	r3, [r2, #8]
 8002250:	e07e      	b.n	8002350 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8002252:	683a      	ldr	r2, [r7, #0]
 8002254:	4613      	mov	r3, r2
 8002256:	00db      	lsls	r3, r3, #3
 8002258:	4413      	add	r3, r2
 800225a:	009b      	lsls	r3, r3, #2
 800225c:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8002260:	687a      	ldr	r2, [r7, #4]
 8002262:	4413      	add	r3, r2
 8002264:	3304      	adds	r3, #4
 8002266:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	6a1a      	ldr	r2, [r3, #32]
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	0159      	lsls	r1, r3, #5
 8002270:	69bb      	ldr	r3, [r7, #24]
 8002272:	440b      	add	r3, r1
 8002274:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002278:	691b      	ldr	r3, [r3, #16]
 800227a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800227e:	1ad2      	subs	r2, r2, r3
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d114      	bne.n	80022b4 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	691b      	ldr	r3, [r3, #16]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d109      	bne.n	80022a6 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6818      	ldr	r0, [r3, #0]
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 800229c:	461a      	mov	r2, r3
 800229e:	2101      	movs	r1, #1
 80022a0:	f002 ff32 	bl	8005108 <USB_EP0_OutStart>
 80022a4:	e006      	b.n	80022b4 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	68da      	ldr	r2, [r3, #12]
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	695b      	ldr	r3, [r3, #20]
 80022ae:	441a      	add	r2, r3
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	b2db      	uxtb	r3, r3
 80022b8:	4619      	mov	r1, r3
 80022ba:	6878      	ldr	r0, [r7, #4]
 80022bc:	f005 f9f0 	bl	80076a0 <HAL_PCD_DataOutStageCallback>
 80022c0:	e046      	b.n	8002350 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80022c2:	697b      	ldr	r3, [r7, #20]
 80022c4:	4a26      	ldr	r2, [pc, #152]	; (8002360 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d124      	bne.n	8002314 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80022ca:	693b      	ldr	r3, [r7, #16]
 80022cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d00a      	beq.n	80022ea <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	015a      	lsls	r2, r3, #5
 80022d8:	69bb      	ldr	r3, [r7, #24]
 80022da:	4413      	add	r3, r2
 80022dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022e0:	461a      	mov	r2, r3
 80022e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80022e6:	6093      	str	r3, [r2, #8]
 80022e8:	e032      	b.n	8002350 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80022ea:	693b      	ldr	r3, [r7, #16]
 80022ec:	f003 0320 	and.w	r3, r3, #32
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d008      	beq.n	8002306 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	015a      	lsls	r2, r3, #5
 80022f8:	69bb      	ldr	r3, [r7, #24]
 80022fa:	4413      	add	r3, r2
 80022fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002300:	461a      	mov	r2, r3
 8002302:	2320      	movs	r3, #32
 8002304:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	b2db      	uxtb	r3, r3
 800230a:	4619      	mov	r1, r3
 800230c:	6878      	ldr	r0, [r7, #4]
 800230e:	f005 f9c7 	bl	80076a0 <HAL_PCD_DataOutStageCallback>
 8002312:	e01d      	b.n	8002350 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d114      	bne.n	8002344 <PCD_EP_OutXfrComplete_int+0x1b0>
 800231a:	6879      	ldr	r1, [r7, #4]
 800231c:	683a      	ldr	r2, [r7, #0]
 800231e:	4613      	mov	r3, r2
 8002320:	00db      	lsls	r3, r3, #3
 8002322:	4413      	add	r3, r2
 8002324:	009b      	lsls	r3, r3, #2
 8002326:	440b      	add	r3, r1
 8002328:	f503 7319 	add.w	r3, r3, #612	; 0x264
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d108      	bne.n	8002344 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6818      	ldr	r0, [r3, #0]
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 800233c:	461a      	mov	r2, r3
 800233e:	2100      	movs	r1, #0
 8002340:	f002 fee2 	bl	8005108 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	b2db      	uxtb	r3, r3
 8002348:	4619      	mov	r1, r3
 800234a:	6878      	ldr	r0, [r7, #4]
 800234c:	f005 f9a8 	bl	80076a0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002350:	2300      	movs	r3, #0
}
 8002352:	4618      	mov	r0, r3
 8002354:	3720      	adds	r7, #32
 8002356:	46bd      	mov	sp, r7
 8002358:	bd80      	pop	{r7, pc}
 800235a:	bf00      	nop
 800235c:	4f54300a 	.word	0x4f54300a
 8002360:	4f54310a 	.word	0x4f54310a

08002364 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b086      	sub	sp, #24
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
 800236c:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002374:	697b      	ldr	r3, [r7, #20]
 8002376:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002378:	697b      	ldr	r3, [r7, #20]
 800237a:	333c      	adds	r3, #60	; 0x3c
 800237c:	3304      	adds	r3, #4
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	015a      	lsls	r2, r3, #5
 8002386:	693b      	ldr	r3, [r7, #16]
 8002388:	4413      	add	r3, r2
 800238a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800238e:	689b      	ldr	r3, [r3, #8]
 8002390:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	4a15      	ldr	r2, [pc, #84]	; (80023ec <PCD_EP_OutSetupPacket_int+0x88>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d90e      	bls.n	80023b8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800239a:	68bb      	ldr	r3, [r7, #8]
 800239c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d009      	beq.n	80023b8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	015a      	lsls	r2, r3, #5
 80023a8:	693b      	ldr	r3, [r7, #16]
 80023aa:	4413      	add	r3, r2
 80023ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023b0:	461a      	mov	r2, r3
 80023b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80023b6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80023b8:	6878      	ldr	r0, [r7, #4]
 80023ba:	f005 f95f 	bl	800767c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	4a0a      	ldr	r2, [pc, #40]	; (80023ec <PCD_EP_OutSetupPacket_int+0x88>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d90c      	bls.n	80023e0 <PCD_EP_OutSetupPacket_int+0x7c>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	799b      	ldrb	r3, [r3, #6]
 80023ca:	2b01      	cmp	r3, #1
 80023cc:	d108      	bne.n	80023e0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6818      	ldr	r0, [r3, #0]
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 80023d8:	461a      	mov	r2, r3
 80023da:	2101      	movs	r1, #1
 80023dc:	f002 fe94 	bl	8005108 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80023e0:	2300      	movs	r3, #0
}
 80023e2:	4618      	mov	r0, r3
 80023e4:	3718      	adds	r7, #24
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}
 80023ea:	bf00      	nop
 80023ec:	4f54300a 	.word	0x4f54300a

080023f0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b085      	sub	sp, #20
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
 80023f8:	460b      	mov	r3, r1
 80023fa:	70fb      	strb	r3, [r7, #3]
 80023fc:	4613      	mov	r3, r2
 80023fe:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002406:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002408:	78fb      	ldrb	r3, [r7, #3]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d107      	bne.n	800241e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800240e:	883b      	ldrh	r3, [r7, #0]
 8002410:	0419      	lsls	r1, r3, #16
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	68ba      	ldr	r2, [r7, #8]
 8002418:	430a      	orrs	r2, r1
 800241a:	629a      	str	r2, [r3, #40]	; 0x28
 800241c:	e028      	b.n	8002470 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002424:	0c1b      	lsrs	r3, r3, #16
 8002426:	68ba      	ldr	r2, [r7, #8]
 8002428:	4413      	add	r3, r2
 800242a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800242c:	2300      	movs	r3, #0
 800242e:	73fb      	strb	r3, [r7, #15]
 8002430:	e00d      	b.n	800244e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681a      	ldr	r2, [r3, #0]
 8002436:	7bfb      	ldrb	r3, [r7, #15]
 8002438:	3340      	adds	r3, #64	; 0x40
 800243a:	009b      	lsls	r3, r3, #2
 800243c:	4413      	add	r3, r2
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	0c1b      	lsrs	r3, r3, #16
 8002442:	68ba      	ldr	r2, [r7, #8]
 8002444:	4413      	add	r3, r2
 8002446:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002448:	7bfb      	ldrb	r3, [r7, #15]
 800244a:	3301      	adds	r3, #1
 800244c:	73fb      	strb	r3, [r7, #15]
 800244e:	7bfa      	ldrb	r2, [r7, #15]
 8002450:	78fb      	ldrb	r3, [r7, #3]
 8002452:	3b01      	subs	r3, #1
 8002454:	429a      	cmp	r2, r3
 8002456:	d3ec      	bcc.n	8002432 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002458:	883b      	ldrh	r3, [r7, #0]
 800245a:	0418      	lsls	r0, r3, #16
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6819      	ldr	r1, [r3, #0]
 8002460:	78fb      	ldrb	r3, [r7, #3]
 8002462:	3b01      	subs	r3, #1
 8002464:	68ba      	ldr	r2, [r7, #8]
 8002466:	4302      	orrs	r2, r0
 8002468:	3340      	adds	r3, #64	; 0x40
 800246a:	009b      	lsls	r3, r3, #2
 800246c:	440b      	add	r3, r1
 800246e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002470:	2300      	movs	r3, #0
}
 8002472:	4618      	mov	r0, r3
 8002474:	3714      	adds	r7, #20
 8002476:	46bd      	mov	sp, r7
 8002478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247c:	4770      	bx	lr

0800247e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800247e:	b480      	push	{r7}
 8002480:	b083      	sub	sp, #12
 8002482:	af00      	add	r7, sp, #0
 8002484:	6078      	str	r0, [r7, #4]
 8002486:	460b      	mov	r3, r1
 8002488:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	887a      	ldrh	r2, [r7, #2]
 8002490:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002492:	2300      	movs	r3, #0
}
 8002494:	4618      	mov	r0, r3
 8002496:	370c      	adds	r7, #12
 8002498:	46bd      	mov	sp, r7
 800249a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249e:	4770      	bx	lr

080024a0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80024a0:	b480      	push	{r7}
 80024a2:	b083      	sub	sp, #12
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
 80024a8:	460b      	mov	r3, r1
 80024aa:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80024ac:	bf00      	nop
 80024ae:	370c      	adds	r7, #12
 80024b0:	46bd      	mov	sp, r7
 80024b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b6:	4770      	bx	lr

080024b8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b086      	sub	sp, #24
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d101      	bne.n	80024ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80024c6:	2301      	movs	r3, #1
 80024c8:	e267      	b.n	800299a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f003 0301 	and.w	r3, r3, #1
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d075      	beq.n	80025c2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80024d6:	4b88      	ldr	r3, [pc, #544]	; (80026f8 <HAL_RCC_OscConfig+0x240>)
 80024d8:	689b      	ldr	r3, [r3, #8]
 80024da:	f003 030c 	and.w	r3, r3, #12
 80024de:	2b04      	cmp	r3, #4
 80024e0:	d00c      	beq.n	80024fc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024e2:	4b85      	ldr	r3, [pc, #532]	; (80026f8 <HAL_RCC_OscConfig+0x240>)
 80024e4:	689b      	ldr	r3, [r3, #8]
 80024e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80024ea:	2b08      	cmp	r3, #8
 80024ec:	d112      	bne.n	8002514 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024ee:	4b82      	ldr	r3, [pc, #520]	; (80026f8 <HAL_RCC_OscConfig+0x240>)
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80024fa:	d10b      	bne.n	8002514 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024fc:	4b7e      	ldr	r3, [pc, #504]	; (80026f8 <HAL_RCC_OscConfig+0x240>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002504:	2b00      	cmp	r3, #0
 8002506:	d05b      	beq.n	80025c0 <HAL_RCC_OscConfig+0x108>
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d157      	bne.n	80025c0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002510:	2301      	movs	r3, #1
 8002512:	e242      	b.n	800299a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800251c:	d106      	bne.n	800252c <HAL_RCC_OscConfig+0x74>
 800251e:	4b76      	ldr	r3, [pc, #472]	; (80026f8 <HAL_RCC_OscConfig+0x240>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4a75      	ldr	r2, [pc, #468]	; (80026f8 <HAL_RCC_OscConfig+0x240>)
 8002524:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002528:	6013      	str	r3, [r2, #0]
 800252a:	e01d      	b.n	8002568 <HAL_RCC_OscConfig+0xb0>
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002534:	d10c      	bne.n	8002550 <HAL_RCC_OscConfig+0x98>
 8002536:	4b70      	ldr	r3, [pc, #448]	; (80026f8 <HAL_RCC_OscConfig+0x240>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4a6f      	ldr	r2, [pc, #444]	; (80026f8 <HAL_RCC_OscConfig+0x240>)
 800253c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002540:	6013      	str	r3, [r2, #0]
 8002542:	4b6d      	ldr	r3, [pc, #436]	; (80026f8 <HAL_RCC_OscConfig+0x240>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4a6c      	ldr	r2, [pc, #432]	; (80026f8 <HAL_RCC_OscConfig+0x240>)
 8002548:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800254c:	6013      	str	r3, [r2, #0]
 800254e:	e00b      	b.n	8002568 <HAL_RCC_OscConfig+0xb0>
 8002550:	4b69      	ldr	r3, [pc, #420]	; (80026f8 <HAL_RCC_OscConfig+0x240>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4a68      	ldr	r2, [pc, #416]	; (80026f8 <HAL_RCC_OscConfig+0x240>)
 8002556:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800255a:	6013      	str	r3, [r2, #0]
 800255c:	4b66      	ldr	r3, [pc, #408]	; (80026f8 <HAL_RCC_OscConfig+0x240>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4a65      	ldr	r2, [pc, #404]	; (80026f8 <HAL_RCC_OscConfig+0x240>)
 8002562:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002566:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d013      	beq.n	8002598 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002570:	f7fe f9fa 	bl	8000968 <HAL_GetTick>
 8002574:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002576:	e008      	b.n	800258a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002578:	f7fe f9f6 	bl	8000968 <HAL_GetTick>
 800257c:	4602      	mov	r2, r0
 800257e:	693b      	ldr	r3, [r7, #16]
 8002580:	1ad3      	subs	r3, r2, r3
 8002582:	2b64      	cmp	r3, #100	; 0x64
 8002584:	d901      	bls.n	800258a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002586:	2303      	movs	r3, #3
 8002588:	e207      	b.n	800299a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800258a:	4b5b      	ldr	r3, [pc, #364]	; (80026f8 <HAL_RCC_OscConfig+0x240>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002592:	2b00      	cmp	r3, #0
 8002594:	d0f0      	beq.n	8002578 <HAL_RCC_OscConfig+0xc0>
 8002596:	e014      	b.n	80025c2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002598:	f7fe f9e6 	bl	8000968 <HAL_GetTick>
 800259c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800259e:	e008      	b.n	80025b2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80025a0:	f7fe f9e2 	bl	8000968 <HAL_GetTick>
 80025a4:	4602      	mov	r2, r0
 80025a6:	693b      	ldr	r3, [r7, #16]
 80025a8:	1ad3      	subs	r3, r2, r3
 80025aa:	2b64      	cmp	r3, #100	; 0x64
 80025ac:	d901      	bls.n	80025b2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80025ae:	2303      	movs	r3, #3
 80025b0:	e1f3      	b.n	800299a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025b2:	4b51      	ldr	r3, [pc, #324]	; (80026f8 <HAL_RCC_OscConfig+0x240>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d1f0      	bne.n	80025a0 <HAL_RCC_OscConfig+0xe8>
 80025be:	e000      	b.n	80025c2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f003 0302 	and.w	r3, r3, #2
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d063      	beq.n	8002696 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80025ce:	4b4a      	ldr	r3, [pc, #296]	; (80026f8 <HAL_RCC_OscConfig+0x240>)
 80025d0:	689b      	ldr	r3, [r3, #8]
 80025d2:	f003 030c 	and.w	r3, r3, #12
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d00b      	beq.n	80025f2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025da:	4b47      	ldr	r3, [pc, #284]	; (80026f8 <HAL_RCC_OscConfig+0x240>)
 80025dc:	689b      	ldr	r3, [r3, #8]
 80025de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80025e2:	2b08      	cmp	r3, #8
 80025e4:	d11c      	bne.n	8002620 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025e6:	4b44      	ldr	r3, [pc, #272]	; (80026f8 <HAL_RCC_OscConfig+0x240>)
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d116      	bne.n	8002620 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025f2:	4b41      	ldr	r3, [pc, #260]	; (80026f8 <HAL_RCC_OscConfig+0x240>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f003 0302 	and.w	r3, r3, #2
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d005      	beq.n	800260a <HAL_RCC_OscConfig+0x152>
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	68db      	ldr	r3, [r3, #12]
 8002602:	2b01      	cmp	r3, #1
 8002604:	d001      	beq.n	800260a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002606:	2301      	movs	r3, #1
 8002608:	e1c7      	b.n	800299a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800260a:	4b3b      	ldr	r3, [pc, #236]	; (80026f8 <HAL_RCC_OscConfig+0x240>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	691b      	ldr	r3, [r3, #16]
 8002616:	00db      	lsls	r3, r3, #3
 8002618:	4937      	ldr	r1, [pc, #220]	; (80026f8 <HAL_RCC_OscConfig+0x240>)
 800261a:	4313      	orrs	r3, r2
 800261c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800261e:	e03a      	b.n	8002696 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	68db      	ldr	r3, [r3, #12]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d020      	beq.n	800266a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002628:	4b34      	ldr	r3, [pc, #208]	; (80026fc <HAL_RCC_OscConfig+0x244>)
 800262a:	2201      	movs	r2, #1
 800262c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800262e:	f7fe f99b 	bl	8000968 <HAL_GetTick>
 8002632:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002634:	e008      	b.n	8002648 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002636:	f7fe f997 	bl	8000968 <HAL_GetTick>
 800263a:	4602      	mov	r2, r0
 800263c:	693b      	ldr	r3, [r7, #16]
 800263e:	1ad3      	subs	r3, r2, r3
 8002640:	2b02      	cmp	r3, #2
 8002642:	d901      	bls.n	8002648 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002644:	2303      	movs	r3, #3
 8002646:	e1a8      	b.n	800299a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002648:	4b2b      	ldr	r3, [pc, #172]	; (80026f8 <HAL_RCC_OscConfig+0x240>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f003 0302 	and.w	r3, r3, #2
 8002650:	2b00      	cmp	r3, #0
 8002652:	d0f0      	beq.n	8002636 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002654:	4b28      	ldr	r3, [pc, #160]	; (80026f8 <HAL_RCC_OscConfig+0x240>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	691b      	ldr	r3, [r3, #16]
 8002660:	00db      	lsls	r3, r3, #3
 8002662:	4925      	ldr	r1, [pc, #148]	; (80026f8 <HAL_RCC_OscConfig+0x240>)
 8002664:	4313      	orrs	r3, r2
 8002666:	600b      	str	r3, [r1, #0]
 8002668:	e015      	b.n	8002696 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800266a:	4b24      	ldr	r3, [pc, #144]	; (80026fc <HAL_RCC_OscConfig+0x244>)
 800266c:	2200      	movs	r2, #0
 800266e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002670:	f7fe f97a 	bl	8000968 <HAL_GetTick>
 8002674:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002676:	e008      	b.n	800268a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002678:	f7fe f976 	bl	8000968 <HAL_GetTick>
 800267c:	4602      	mov	r2, r0
 800267e:	693b      	ldr	r3, [r7, #16]
 8002680:	1ad3      	subs	r3, r2, r3
 8002682:	2b02      	cmp	r3, #2
 8002684:	d901      	bls.n	800268a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002686:	2303      	movs	r3, #3
 8002688:	e187      	b.n	800299a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800268a:	4b1b      	ldr	r3, [pc, #108]	; (80026f8 <HAL_RCC_OscConfig+0x240>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f003 0302 	and.w	r3, r3, #2
 8002692:	2b00      	cmp	r3, #0
 8002694:	d1f0      	bne.n	8002678 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f003 0308 	and.w	r3, r3, #8
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d036      	beq.n	8002710 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	695b      	ldr	r3, [r3, #20]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d016      	beq.n	80026d8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026aa:	4b15      	ldr	r3, [pc, #84]	; (8002700 <HAL_RCC_OscConfig+0x248>)
 80026ac:	2201      	movs	r2, #1
 80026ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026b0:	f7fe f95a 	bl	8000968 <HAL_GetTick>
 80026b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026b6:	e008      	b.n	80026ca <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026b8:	f7fe f956 	bl	8000968 <HAL_GetTick>
 80026bc:	4602      	mov	r2, r0
 80026be:	693b      	ldr	r3, [r7, #16]
 80026c0:	1ad3      	subs	r3, r2, r3
 80026c2:	2b02      	cmp	r3, #2
 80026c4:	d901      	bls.n	80026ca <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80026c6:	2303      	movs	r3, #3
 80026c8:	e167      	b.n	800299a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026ca:	4b0b      	ldr	r3, [pc, #44]	; (80026f8 <HAL_RCC_OscConfig+0x240>)
 80026cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026ce:	f003 0302 	and.w	r3, r3, #2
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d0f0      	beq.n	80026b8 <HAL_RCC_OscConfig+0x200>
 80026d6:	e01b      	b.n	8002710 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026d8:	4b09      	ldr	r3, [pc, #36]	; (8002700 <HAL_RCC_OscConfig+0x248>)
 80026da:	2200      	movs	r2, #0
 80026dc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026de:	f7fe f943 	bl	8000968 <HAL_GetTick>
 80026e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026e4:	e00e      	b.n	8002704 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026e6:	f7fe f93f 	bl	8000968 <HAL_GetTick>
 80026ea:	4602      	mov	r2, r0
 80026ec:	693b      	ldr	r3, [r7, #16]
 80026ee:	1ad3      	subs	r3, r2, r3
 80026f0:	2b02      	cmp	r3, #2
 80026f2:	d907      	bls.n	8002704 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80026f4:	2303      	movs	r3, #3
 80026f6:	e150      	b.n	800299a <HAL_RCC_OscConfig+0x4e2>
 80026f8:	40023800 	.word	0x40023800
 80026fc:	42470000 	.word	0x42470000
 8002700:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002704:	4b88      	ldr	r3, [pc, #544]	; (8002928 <HAL_RCC_OscConfig+0x470>)
 8002706:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002708:	f003 0302 	and.w	r3, r3, #2
 800270c:	2b00      	cmp	r3, #0
 800270e:	d1ea      	bne.n	80026e6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f003 0304 	and.w	r3, r3, #4
 8002718:	2b00      	cmp	r3, #0
 800271a:	f000 8097 	beq.w	800284c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800271e:	2300      	movs	r3, #0
 8002720:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002722:	4b81      	ldr	r3, [pc, #516]	; (8002928 <HAL_RCC_OscConfig+0x470>)
 8002724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002726:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800272a:	2b00      	cmp	r3, #0
 800272c:	d10f      	bne.n	800274e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800272e:	2300      	movs	r3, #0
 8002730:	60bb      	str	r3, [r7, #8]
 8002732:	4b7d      	ldr	r3, [pc, #500]	; (8002928 <HAL_RCC_OscConfig+0x470>)
 8002734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002736:	4a7c      	ldr	r2, [pc, #496]	; (8002928 <HAL_RCC_OscConfig+0x470>)
 8002738:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800273c:	6413      	str	r3, [r2, #64]	; 0x40
 800273e:	4b7a      	ldr	r3, [pc, #488]	; (8002928 <HAL_RCC_OscConfig+0x470>)
 8002740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002742:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002746:	60bb      	str	r3, [r7, #8]
 8002748:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800274a:	2301      	movs	r3, #1
 800274c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800274e:	4b77      	ldr	r3, [pc, #476]	; (800292c <HAL_RCC_OscConfig+0x474>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002756:	2b00      	cmp	r3, #0
 8002758:	d118      	bne.n	800278c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800275a:	4b74      	ldr	r3, [pc, #464]	; (800292c <HAL_RCC_OscConfig+0x474>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4a73      	ldr	r2, [pc, #460]	; (800292c <HAL_RCC_OscConfig+0x474>)
 8002760:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002764:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002766:	f7fe f8ff 	bl	8000968 <HAL_GetTick>
 800276a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800276c:	e008      	b.n	8002780 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800276e:	f7fe f8fb 	bl	8000968 <HAL_GetTick>
 8002772:	4602      	mov	r2, r0
 8002774:	693b      	ldr	r3, [r7, #16]
 8002776:	1ad3      	subs	r3, r2, r3
 8002778:	2b02      	cmp	r3, #2
 800277a:	d901      	bls.n	8002780 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800277c:	2303      	movs	r3, #3
 800277e:	e10c      	b.n	800299a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002780:	4b6a      	ldr	r3, [pc, #424]	; (800292c <HAL_RCC_OscConfig+0x474>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002788:	2b00      	cmp	r3, #0
 800278a:	d0f0      	beq.n	800276e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	689b      	ldr	r3, [r3, #8]
 8002790:	2b01      	cmp	r3, #1
 8002792:	d106      	bne.n	80027a2 <HAL_RCC_OscConfig+0x2ea>
 8002794:	4b64      	ldr	r3, [pc, #400]	; (8002928 <HAL_RCC_OscConfig+0x470>)
 8002796:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002798:	4a63      	ldr	r2, [pc, #396]	; (8002928 <HAL_RCC_OscConfig+0x470>)
 800279a:	f043 0301 	orr.w	r3, r3, #1
 800279e:	6713      	str	r3, [r2, #112]	; 0x70
 80027a0:	e01c      	b.n	80027dc <HAL_RCC_OscConfig+0x324>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	689b      	ldr	r3, [r3, #8]
 80027a6:	2b05      	cmp	r3, #5
 80027a8:	d10c      	bne.n	80027c4 <HAL_RCC_OscConfig+0x30c>
 80027aa:	4b5f      	ldr	r3, [pc, #380]	; (8002928 <HAL_RCC_OscConfig+0x470>)
 80027ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027ae:	4a5e      	ldr	r2, [pc, #376]	; (8002928 <HAL_RCC_OscConfig+0x470>)
 80027b0:	f043 0304 	orr.w	r3, r3, #4
 80027b4:	6713      	str	r3, [r2, #112]	; 0x70
 80027b6:	4b5c      	ldr	r3, [pc, #368]	; (8002928 <HAL_RCC_OscConfig+0x470>)
 80027b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027ba:	4a5b      	ldr	r2, [pc, #364]	; (8002928 <HAL_RCC_OscConfig+0x470>)
 80027bc:	f043 0301 	orr.w	r3, r3, #1
 80027c0:	6713      	str	r3, [r2, #112]	; 0x70
 80027c2:	e00b      	b.n	80027dc <HAL_RCC_OscConfig+0x324>
 80027c4:	4b58      	ldr	r3, [pc, #352]	; (8002928 <HAL_RCC_OscConfig+0x470>)
 80027c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027c8:	4a57      	ldr	r2, [pc, #348]	; (8002928 <HAL_RCC_OscConfig+0x470>)
 80027ca:	f023 0301 	bic.w	r3, r3, #1
 80027ce:	6713      	str	r3, [r2, #112]	; 0x70
 80027d0:	4b55      	ldr	r3, [pc, #340]	; (8002928 <HAL_RCC_OscConfig+0x470>)
 80027d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027d4:	4a54      	ldr	r2, [pc, #336]	; (8002928 <HAL_RCC_OscConfig+0x470>)
 80027d6:	f023 0304 	bic.w	r3, r3, #4
 80027da:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	689b      	ldr	r3, [r3, #8]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d015      	beq.n	8002810 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027e4:	f7fe f8c0 	bl	8000968 <HAL_GetTick>
 80027e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027ea:	e00a      	b.n	8002802 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027ec:	f7fe f8bc 	bl	8000968 <HAL_GetTick>
 80027f0:	4602      	mov	r2, r0
 80027f2:	693b      	ldr	r3, [r7, #16]
 80027f4:	1ad3      	subs	r3, r2, r3
 80027f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d901      	bls.n	8002802 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80027fe:	2303      	movs	r3, #3
 8002800:	e0cb      	b.n	800299a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002802:	4b49      	ldr	r3, [pc, #292]	; (8002928 <HAL_RCC_OscConfig+0x470>)
 8002804:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002806:	f003 0302 	and.w	r3, r3, #2
 800280a:	2b00      	cmp	r3, #0
 800280c:	d0ee      	beq.n	80027ec <HAL_RCC_OscConfig+0x334>
 800280e:	e014      	b.n	800283a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002810:	f7fe f8aa 	bl	8000968 <HAL_GetTick>
 8002814:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002816:	e00a      	b.n	800282e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002818:	f7fe f8a6 	bl	8000968 <HAL_GetTick>
 800281c:	4602      	mov	r2, r0
 800281e:	693b      	ldr	r3, [r7, #16]
 8002820:	1ad3      	subs	r3, r2, r3
 8002822:	f241 3288 	movw	r2, #5000	; 0x1388
 8002826:	4293      	cmp	r3, r2
 8002828:	d901      	bls.n	800282e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800282a:	2303      	movs	r3, #3
 800282c:	e0b5      	b.n	800299a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800282e:	4b3e      	ldr	r3, [pc, #248]	; (8002928 <HAL_RCC_OscConfig+0x470>)
 8002830:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002832:	f003 0302 	and.w	r3, r3, #2
 8002836:	2b00      	cmp	r3, #0
 8002838:	d1ee      	bne.n	8002818 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800283a:	7dfb      	ldrb	r3, [r7, #23]
 800283c:	2b01      	cmp	r3, #1
 800283e:	d105      	bne.n	800284c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002840:	4b39      	ldr	r3, [pc, #228]	; (8002928 <HAL_RCC_OscConfig+0x470>)
 8002842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002844:	4a38      	ldr	r2, [pc, #224]	; (8002928 <HAL_RCC_OscConfig+0x470>)
 8002846:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800284a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	699b      	ldr	r3, [r3, #24]
 8002850:	2b00      	cmp	r3, #0
 8002852:	f000 80a1 	beq.w	8002998 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002856:	4b34      	ldr	r3, [pc, #208]	; (8002928 <HAL_RCC_OscConfig+0x470>)
 8002858:	689b      	ldr	r3, [r3, #8]
 800285a:	f003 030c 	and.w	r3, r3, #12
 800285e:	2b08      	cmp	r3, #8
 8002860:	d05c      	beq.n	800291c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	699b      	ldr	r3, [r3, #24]
 8002866:	2b02      	cmp	r3, #2
 8002868:	d141      	bne.n	80028ee <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800286a:	4b31      	ldr	r3, [pc, #196]	; (8002930 <HAL_RCC_OscConfig+0x478>)
 800286c:	2200      	movs	r2, #0
 800286e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002870:	f7fe f87a 	bl	8000968 <HAL_GetTick>
 8002874:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002876:	e008      	b.n	800288a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002878:	f7fe f876 	bl	8000968 <HAL_GetTick>
 800287c:	4602      	mov	r2, r0
 800287e:	693b      	ldr	r3, [r7, #16]
 8002880:	1ad3      	subs	r3, r2, r3
 8002882:	2b02      	cmp	r3, #2
 8002884:	d901      	bls.n	800288a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002886:	2303      	movs	r3, #3
 8002888:	e087      	b.n	800299a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800288a:	4b27      	ldr	r3, [pc, #156]	; (8002928 <HAL_RCC_OscConfig+0x470>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002892:	2b00      	cmp	r3, #0
 8002894:	d1f0      	bne.n	8002878 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	69da      	ldr	r2, [r3, #28]
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6a1b      	ldr	r3, [r3, #32]
 800289e:	431a      	orrs	r2, r3
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028a4:	019b      	lsls	r3, r3, #6
 80028a6:	431a      	orrs	r2, r3
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028ac:	085b      	lsrs	r3, r3, #1
 80028ae:	3b01      	subs	r3, #1
 80028b0:	041b      	lsls	r3, r3, #16
 80028b2:	431a      	orrs	r2, r3
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028b8:	061b      	lsls	r3, r3, #24
 80028ba:	491b      	ldr	r1, [pc, #108]	; (8002928 <HAL_RCC_OscConfig+0x470>)
 80028bc:	4313      	orrs	r3, r2
 80028be:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028c0:	4b1b      	ldr	r3, [pc, #108]	; (8002930 <HAL_RCC_OscConfig+0x478>)
 80028c2:	2201      	movs	r2, #1
 80028c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028c6:	f7fe f84f 	bl	8000968 <HAL_GetTick>
 80028ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028cc:	e008      	b.n	80028e0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028ce:	f7fe f84b 	bl	8000968 <HAL_GetTick>
 80028d2:	4602      	mov	r2, r0
 80028d4:	693b      	ldr	r3, [r7, #16]
 80028d6:	1ad3      	subs	r3, r2, r3
 80028d8:	2b02      	cmp	r3, #2
 80028da:	d901      	bls.n	80028e0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80028dc:	2303      	movs	r3, #3
 80028de:	e05c      	b.n	800299a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028e0:	4b11      	ldr	r3, [pc, #68]	; (8002928 <HAL_RCC_OscConfig+0x470>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d0f0      	beq.n	80028ce <HAL_RCC_OscConfig+0x416>
 80028ec:	e054      	b.n	8002998 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028ee:	4b10      	ldr	r3, [pc, #64]	; (8002930 <HAL_RCC_OscConfig+0x478>)
 80028f0:	2200      	movs	r2, #0
 80028f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028f4:	f7fe f838 	bl	8000968 <HAL_GetTick>
 80028f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028fa:	e008      	b.n	800290e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028fc:	f7fe f834 	bl	8000968 <HAL_GetTick>
 8002900:	4602      	mov	r2, r0
 8002902:	693b      	ldr	r3, [r7, #16]
 8002904:	1ad3      	subs	r3, r2, r3
 8002906:	2b02      	cmp	r3, #2
 8002908:	d901      	bls.n	800290e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800290a:	2303      	movs	r3, #3
 800290c:	e045      	b.n	800299a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800290e:	4b06      	ldr	r3, [pc, #24]	; (8002928 <HAL_RCC_OscConfig+0x470>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002916:	2b00      	cmp	r3, #0
 8002918:	d1f0      	bne.n	80028fc <HAL_RCC_OscConfig+0x444>
 800291a:	e03d      	b.n	8002998 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	699b      	ldr	r3, [r3, #24]
 8002920:	2b01      	cmp	r3, #1
 8002922:	d107      	bne.n	8002934 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002924:	2301      	movs	r3, #1
 8002926:	e038      	b.n	800299a <HAL_RCC_OscConfig+0x4e2>
 8002928:	40023800 	.word	0x40023800
 800292c:	40007000 	.word	0x40007000
 8002930:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002934:	4b1b      	ldr	r3, [pc, #108]	; (80029a4 <HAL_RCC_OscConfig+0x4ec>)
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	699b      	ldr	r3, [r3, #24]
 800293e:	2b01      	cmp	r3, #1
 8002940:	d028      	beq.n	8002994 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800294c:	429a      	cmp	r2, r3
 800294e:	d121      	bne.n	8002994 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800295a:	429a      	cmp	r2, r3
 800295c:	d11a      	bne.n	8002994 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800295e:	68fa      	ldr	r2, [r7, #12]
 8002960:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002964:	4013      	ands	r3, r2
 8002966:	687a      	ldr	r2, [r7, #4]
 8002968:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800296a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800296c:	4293      	cmp	r3, r2
 800296e:	d111      	bne.n	8002994 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800297a:	085b      	lsrs	r3, r3, #1
 800297c:	3b01      	subs	r3, #1
 800297e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002980:	429a      	cmp	r2, r3
 8002982:	d107      	bne.n	8002994 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800298e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002990:	429a      	cmp	r2, r3
 8002992:	d001      	beq.n	8002998 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002994:	2301      	movs	r3, #1
 8002996:	e000      	b.n	800299a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002998:	2300      	movs	r3, #0
}
 800299a:	4618      	mov	r0, r3
 800299c:	3718      	adds	r7, #24
 800299e:	46bd      	mov	sp, r7
 80029a0:	bd80      	pop	{r7, pc}
 80029a2:	bf00      	nop
 80029a4:	40023800 	.word	0x40023800

080029a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b084      	sub	sp, #16
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
 80029b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d101      	bne.n	80029bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80029b8:	2301      	movs	r3, #1
 80029ba:	e0cc      	b.n	8002b56 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80029bc:	4b68      	ldr	r3, [pc, #416]	; (8002b60 <HAL_RCC_ClockConfig+0x1b8>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f003 0307 	and.w	r3, r3, #7
 80029c4:	683a      	ldr	r2, [r7, #0]
 80029c6:	429a      	cmp	r2, r3
 80029c8:	d90c      	bls.n	80029e4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029ca:	4b65      	ldr	r3, [pc, #404]	; (8002b60 <HAL_RCC_ClockConfig+0x1b8>)
 80029cc:	683a      	ldr	r2, [r7, #0]
 80029ce:	b2d2      	uxtb	r2, r2
 80029d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029d2:	4b63      	ldr	r3, [pc, #396]	; (8002b60 <HAL_RCC_ClockConfig+0x1b8>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f003 0307 	and.w	r3, r3, #7
 80029da:	683a      	ldr	r2, [r7, #0]
 80029dc:	429a      	cmp	r2, r3
 80029de:	d001      	beq.n	80029e4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80029e0:	2301      	movs	r3, #1
 80029e2:	e0b8      	b.n	8002b56 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f003 0302 	and.w	r3, r3, #2
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d020      	beq.n	8002a32 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f003 0304 	and.w	r3, r3, #4
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d005      	beq.n	8002a08 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80029fc:	4b59      	ldr	r3, [pc, #356]	; (8002b64 <HAL_RCC_ClockConfig+0x1bc>)
 80029fe:	689b      	ldr	r3, [r3, #8]
 8002a00:	4a58      	ldr	r2, [pc, #352]	; (8002b64 <HAL_RCC_ClockConfig+0x1bc>)
 8002a02:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002a06:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f003 0308 	and.w	r3, r3, #8
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d005      	beq.n	8002a20 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a14:	4b53      	ldr	r3, [pc, #332]	; (8002b64 <HAL_RCC_ClockConfig+0x1bc>)
 8002a16:	689b      	ldr	r3, [r3, #8]
 8002a18:	4a52      	ldr	r2, [pc, #328]	; (8002b64 <HAL_RCC_ClockConfig+0x1bc>)
 8002a1a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002a1e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a20:	4b50      	ldr	r3, [pc, #320]	; (8002b64 <HAL_RCC_ClockConfig+0x1bc>)
 8002a22:	689b      	ldr	r3, [r3, #8]
 8002a24:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	689b      	ldr	r3, [r3, #8]
 8002a2c:	494d      	ldr	r1, [pc, #308]	; (8002b64 <HAL_RCC_ClockConfig+0x1bc>)
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f003 0301 	and.w	r3, r3, #1
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d044      	beq.n	8002ac8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	2b01      	cmp	r3, #1
 8002a44:	d107      	bne.n	8002a56 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a46:	4b47      	ldr	r3, [pc, #284]	; (8002b64 <HAL_RCC_ClockConfig+0x1bc>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d119      	bne.n	8002a86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a52:	2301      	movs	r3, #1
 8002a54:	e07f      	b.n	8002b56 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	2b02      	cmp	r3, #2
 8002a5c:	d003      	beq.n	8002a66 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a62:	2b03      	cmp	r3, #3
 8002a64:	d107      	bne.n	8002a76 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a66:	4b3f      	ldr	r3, [pc, #252]	; (8002b64 <HAL_RCC_ClockConfig+0x1bc>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d109      	bne.n	8002a86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a72:	2301      	movs	r3, #1
 8002a74:	e06f      	b.n	8002b56 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a76:	4b3b      	ldr	r3, [pc, #236]	; (8002b64 <HAL_RCC_ClockConfig+0x1bc>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f003 0302 	and.w	r3, r3, #2
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d101      	bne.n	8002a86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a82:	2301      	movs	r3, #1
 8002a84:	e067      	b.n	8002b56 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a86:	4b37      	ldr	r3, [pc, #220]	; (8002b64 <HAL_RCC_ClockConfig+0x1bc>)
 8002a88:	689b      	ldr	r3, [r3, #8]
 8002a8a:	f023 0203 	bic.w	r2, r3, #3
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	4934      	ldr	r1, [pc, #208]	; (8002b64 <HAL_RCC_ClockConfig+0x1bc>)
 8002a94:	4313      	orrs	r3, r2
 8002a96:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a98:	f7fd ff66 	bl	8000968 <HAL_GetTick>
 8002a9c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a9e:	e00a      	b.n	8002ab6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002aa0:	f7fd ff62 	bl	8000968 <HAL_GetTick>
 8002aa4:	4602      	mov	r2, r0
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	1ad3      	subs	r3, r2, r3
 8002aaa:	f241 3288 	movw	r2, #5000	; 0x1388
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d901      	bls.n	8002ab6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002ab2:	2303      	movs	r3, #3
 8002ab4:	e04f      	b.n	8002b56 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ab6:	4b2b      	ldr	r3, [pc, #172]	; (8002b64 <HAL_RCC_ClockConfig+0x1bc>)
 8002ab8:	689b      	ldr	r3, [r3, #8]
 8002aba:	f003 020c 	and.w	r2, r3, #12
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	009b      	lsls	r3, r3, #2
 8002ac4:	429a      	cmp	r2, r3
 8002ac6:	d1eb      	bne.n	8002aa0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ac8:	4b25      	ldr	r3, [pc, #148]	; (8002b60 <HAL_RCC_ClockConfig+0x1b8>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f003 0307 	and.w	r3, r3, #7
 8002ad0:	683a      	ldr	r2, [r7, #0]
 8002ad2:	429a      	cmp	r2, r3
 8002ad4:	d20c      	bcs.n	8002af0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ad6:	4b22      	ldr	r3, [pc, #136]	; (8002b60 <HAL_RCC_ClockConfig+0x1b8>)
 8002ad8:	683a      	ldr	r2, [r7, #0]
 8002ada:	b2d2      	uxtb	r2, r2
 8002adc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ade:	4b20      	ldr	r3, [pc, #128]	; (8002b60 <HAL_RCC_ClockConfig+0x1b8>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f003 0307 	and.w	r3, r3, #7
 8002ae6:	683a      	ldr	r2, [r7, #0]
 8002ae8:	429a      	cmp	r2, r3
 8002aea:	d001      	beq.n	8002af0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002aec:	2301      	movs	r3, #1
 8002aee:	e032      	b.n	8002b56 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f003 0304 	and.w	r3, r3, #4
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d008      	beq.n	8002b0e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002afc:	4b19      	ldr	r3, [pc, #100]	; (8002b64 <HAL_RCC_ClockConfig+0x1bc>)
 8002afe:	689b      	ldr	r3, [r3, #8]
 8002b00:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	68db      	ldr	r3, [r3, #12]
 8002b08:	4916      	ldr	r1, [pc, #88]	; (8002b64 <HAL_RCC_ClockConfig+0x1bc>)
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f003 0308 	and.w	r3, r3, #8
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d009      	beq.n	8002b2e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b1a:	4b12      	ldr	r3, [pc, #72]	; (8002b64 <HAL_RCC_ClockConfig+0x1bc>)
 8002b1c:	689b      	ldr	r3, [r3, #8]
 8002b1e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	691b      	ldr	r3, [r3, #16]
 8002b26:	00db      	lsls	r3, r3, #3
 8002b28:	490e      	ldr	r1, [pc, #56]	; (8002b64 <HAL_RCC_ClockConfig+0x1bc>)
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002b2e:	f000 f821 	bl	8002b74 <HAL_RCC_GetSysClockFreq>
 8002b32:	4602      	mov	r2, r0
 8002b34:	4b0b      	ldr	r3, [pc, #44]	; (8002b64 <HAL_RCC_ClockConfig+0x1bc>)
 8002b36:	689b      	ldr	r3, [r3, #8]
 8002b38:	091b      	lsrs	r3, r3, #4
 8002b3a:	f003 030f 	and.w	r3, r3, #15
 8002b3e:	490a      	ldr	r1, [pc, #40]	; (8002b68 <HAL_RCC_ClockConfig+0x1c0>)
 8002b40:	5ccb      	ldrb	r3, [r1, r3]
 8002b42:	fa22 f303 	lsr.w	r3, r2, r3
 8002b46:	4a09      	ldr	r2, [pc, #36]	; (8002b6c <HAL_RCC_ClockConfig+0x1c4>)
 8002b48:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002b4a:	4b09      	ldr	r3, [pc, #36]	; (8002b70 <HAL_RCC_ClockConfig+0x1c8>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4618      	mov	r0, r3
 8002b50:	f7fd fec6 	bl	80008e0 <HAL_InitTick>

  return HAL_OK;
 8002b54:	2300      	movs	r3, #0
}
 8002b56:	4618      	mov	r0, r3
 8002b58:	3710      	adds	r7, #16
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}
 8002b5e:	bf00      	nop
 8002b60:	40023c00 	.word	0x40023c00
 8002b64:	40023800 	.word	0x40023800
 8002b68:	08007ca0 	.word	0x08007ca0
 8002b6c:	20000000 	.word	0x20000000
 8002b70:	20000004 	.word	0x20000004

08002b74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b74:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b78:	b090      	sub	sp, #64	; 0x40
 8002b7a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	637b      	str	r3, [r7, #52]	; 0x34
 8002b80:	2300      	movs	r3, #0
 8002b82:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b84:	2300      	movs	r3, #0
 8002b86:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002b88:	2300      	movs	r3, #0
 8002b8a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b8c:	4b59      	ldr	r3, [pc, #356]	; (8002cf4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002b8e:	689b      	ldr	r3, [r3, #8]
 8002b90:	f003 030c 	and.w	r3, r3, #12
 8002b94:	2b08      	cmp	r3, #8
 8002b96:	d00d      	beq.n	8002bb4 <HAL_RCC_GetSysClockFreq+0x40>
 8002b98:	2b08      	cmp	r3, #8
 8002b9a:	f200 80a1 	bhi.w	8002ce0 <HAL_RCC_GetSysClockFreq+0x16c>
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d002      	beq.n	8002ba8 <HAL_RCC_GetSysClockFreq+0x34>
 8002ba2:	2b04      	cmp	r3, #4
 8002ba4:	d003      	beq.n	8002bae <HAL_RCC_GetSysClockFreq+0x3a>
 8002ba6:	e09b      	b.n	8002ce0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002ba8:	4b53      	ldr	r3, [pc, #332]	; (8002cf8 <HAL_RCC_GetSysClockFreq+0x184>)
 8002baa:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002bac:	e09b      	b.n	8002ce6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002bae:	4b53      	ldr	r3, [pc, #332]	; (8002cfc <HAL_RCC_GetSysClockFreq+0x188>)
 8002bb0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002bb2:	e098      	b.n	8002ce6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002bb4:	4b4f      	ldr	r3, [pc, #316]	; (8002cf4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002bbc:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002bbe:	4b4d      	ldr	r3, [pc, #308]	; (8002cf4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d028      	beq.n	8002c1c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002bca:	4b4a      	ldr	r3, [pc, #296]	; (8002cf4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	099b      	lsrs	r3, r3, #6
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	623b      	str	r3, [r7, #32]
 8002bd4:	627a      	str	r2, [r7, #36]	; 0x24
 8002bd6:	6a3b      	ldr	r3, [r7, #32]
 8002bd8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002bdc:	2100      	movs	r1, #0
 8002bde:	4b47      	ldr	r3, [pc, #284]	; (8002cfc <HAL_RCC_GetSysClockFreq+0x188>)
 8002be0:	fb03 f201 	mul.w	r2, r3, r1
 8002be4:	2300      	movs	r3, #0
 8002be6:	fb00 f303 	mul.w	r3, r0, r3
 8002bea:	4413      	add	r3, r2
 8002bec:	4a43      	ldr	r2, [pc, #268]	; (8002cfc <HAL_RCC_GetSysClockFreq+0x188>)
 8002bee:	fba0 1202 	umull	r1, r2, r0, r2
 8002bf2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002bf4:	460a      	mov	r2, r1
 8002bf6:	62ba      	str	r2, [r7, #40]	; 0x28
 8002bf8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002bfa:	4413      	add	r3, r2
 8002bfc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002bfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c00:	2200      	movs	r2, #0
 8002c02:	61bb      	str	r3, [r7, #24]
 8002c04:	61fa      	str	r2, [r7, #28]
 8002c06:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002c0a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002c0e:	f7fd fae3 	bl	80001d8 <__aeabi_uldivmod>
 8002c12:	4602      	mov	r2, r0
 8002c14:	460b      	mov	r3, r1
 8002c16:	4613      	mov	r3, r2
 8002c18:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c1a:	e053      	b.n	8002cc4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c1c:	4b35      	ldr	r3, [pc, #212]	; (8002cf4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	099b      	lsrs	r3, r3, #6
 8002c22:	2200      	movs	r2, #0
 8002c24:	613b      	str	r3, [r7, #16]
 8002c26:	617a      	str	r2, [r7, #20]
 8002c28:	693b      	ldr	r3, [r7, #16]
 8002c2a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002c2e:	f04f 0b00 	mov.w	fp, #0
 8002c32:	4652      	mov	r2, sl
 8002c34:	465b      	mov	r3, fp
 8002c36:	f04f 0000 	mov.w	r0, #0
 8002c3a:	f04f 0100 	mov.w	r1, #0
 8002c3e:	0159      	lsls	r1, r3, #5
 8002c40:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c44:	0150      	lsls	r0, r2, #5
 8002c46:	4602      	mov	r2, r0
 8002c48:	460b      	mov	r3, r1
 8002c4a:	ebb2 080a 	subs.w	r8, r2, sl
 8002c4e:	eb63 090b 	sbc.w	r9, r3, fp
 8002c52:	f04f 0200 	mov.w	r2, #0
 8002c56:	f04f 0300 	mov.w	r3, #0
 8002c5a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002c5e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002c62:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002c66:	ebb2 0408 	subs.w	r4, r2, r8
 8002c6a:	eb63 0509 	sbc.w	r5, r3, r9
 8002c6e:	f04f 0200 	mov.w	r2, #0
 8002c72:	f04f 0300 	mov.w	r3, #0
 8002c76:	00eb      	lsls	r3, r5, #3
 8002c78:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002c7c:	00e2      	lsls	r2, r4, #3
 8002c7e:	4614      	mov	r4, r2
 8002c80:	461d      	mov	r5, r3
 8002c82:	eb14 030a 	adds.w	r3, r4, sl
 8002c86:	603b      	str	r3, [r7, #0]
 8002c88:	eb45 030b 	adc.w	r3, r5, fp
 8002c8c:	607b      	str	r3, [r7, #4]
 8002c8e:	f04f 0200 	mov.w	r2, #0
 8002c92:	f04f 0300 	mov.w	r3, #0
 8002c96:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002c9a:	4629      	mov	r1, r5
 8002c9c:	028b      	lsls	r3, r1, #10
 8002c9e:	4621      	mov	r1, r4
 8002ca0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002ca4:	4621      	mov	r1, r4
 8002ca6:	028a      	lsls	r2, r1, #10
 8002ca8:	4610      	mov	r0, r2
 8002caa:	4619      	mov	r1, r3
 8002cac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cae:	2200      	movs	r2, #0
 8002cb0:	60bb      	str	r3, [r7, #8]
 8002cb2:	60fa      	str	r2, [r7, #12]
 8002cb4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002cb8:	f7fd fa8e 	bl	80001d8 <__aeabi_uldivmod>
 8002cbc:	4602      	mov	r2, r0
 8002cbe:	460b      	mov	r3, r1
 8002cc0:	4613      	mov	r3, r2
 8002cc2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002cc4:	4b0b      	ldr	r3, [pc, #44]	; (8002cf4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	0c1b      	lsrs	r3, r3, #16
 8002cca:	f003 0303 	and.w	r3, r3, #3
 8002cce:	3301      	adds	r3, #1
 8002cd0:	005b      	lsls	r3, r3, #1
 8002cd2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002cd4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002cd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cdc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002cde:	e002      	b.n	8002ce6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002ce0:	4b05      	ldr	r3, [pc, #20]	; (8002cf8 <HAL_RCC_GetSysClockFreq+0x184>)
 8002ce2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002ce4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ce6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002ce8:	4618      	mov	r0, r3
 8002cea:	3740      	adds	r7, #64	; 0x40
 8002cec:	46bd      	mov	sp, r7
 8002cee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002cf2:	bf00      	nop
 8002cf4:	40023800 	.word	0x40023800
 8002cf8:	00f42400 	.word	0x00f42400
 8002cfc:	017d7840 	.word	0x017d7840

08002d00 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d00:	b480      	push	{r7}
 8002d02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d04:	4b03      	ldr	r3, [pc, #12]	; (8002d14 <HAL_RCC_GetHCLKFreq+0x14>)
 8002d06:	681b      	ldr	r3, [r3, #0]
}
 8002d08:	4618      	mov	r0, r3
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d10:	4770      	bx	lr
 8002d12:	bf00      	nop
 8002d14:	20000000 	.word	0x20000000

08002d18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002d1c:	f7ff fff0 	bl	8002d00 <HAL_RCC_GetHCLKFreq>
 8002d20:	4602      	mov	r2, r0
 8002d22:	4b05      	ldr	r3, [pc, #20]	; (8002d38 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002d24:	689b      	ldr	r3, [r3, #8]
 8002d26:	0a9b      	lsrs	r3, r3, #10
 8002d28:	f003 0307 	and.w	r3, r3, #7
 8002d2c:	4903      	ldr	r1, [pc, #12]	; (8002d3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d2e:	5ccb      	ldrb	r3, [r1, r3]
 8002d30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d34:	4618      	mov	r0, r3
 8002d36:	bd80      	pop	{r7, pc}
 8002d38:	40023800 	.word	0x40023800
 8002d3c:	08007cb0 	.word	0x08007cb0

08002d40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002d44:	f7ff ffdc 	bl	8002d00 <HAL_RCC_GetHCLKFreq>
 8002d48:	4602      	mov	r2, r0
 8002d4a:	4b05      	ldr	r3, [pc, #20]	; (8002d60 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002d4c:	689b      	ldr	r3, [r3, #8]
 8002d4e:	0b5b      	lsrs	r3, r3, #13
 8002d50:	f003 0307 	and.w	r3, r3, #7
 8002d54:	4903      	ldr	r1, [pc, #12]	; (8002d64 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d56:	5ccb      	ldrb	r3, [r1, r3]
 8002d58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	bd80      	pop	{r7, pc}
 8002d60:	40023800 	.word	0x40023800
 8002d64:	08007cb0 	.word	0x08007cb0

08002d68 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b082      	sub	sp, #8
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d101      	bne.n	8002d7a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d76:	2301      	movs	r3, #1
 8002d78:	e042      	b.n	8002e00 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d80:	b2db      	uxtb	r3, r3
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d106      	bne.n	8002d94 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2200      	movs	r2, #0
 8002d8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002d8e:	6878      	ldr	r0, [r7, #4]
 8002d90:	f7fd fce6 	bl	8000760 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2224      	movs	r2, #36	; 0x24
 8002d98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	68da      	ldr	r2, [r3, #12]
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002daa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002dac:	6878      	ldr	r0, [r7, #4]
 8002dae:	f000 fc85 	bl	80036bc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	691a      	ldr	r2, [r3, #16]
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002dc0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	695a      	ldr	r2, [r3, #20]
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002dd0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	68da      	ldr	r2, [r3, #12]
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002de0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2200      	movs	r2, #0
 8002de6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2220      	movs	r2, #32
 8002dec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2220      	movs	r2, #32
 8002df4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002dfe:	2300      	movs	r3, #0
}
 8002e00:	4618      	mov	r0, r3
 8002e02:	3708      	adds	r7, #8
 8002e04:	46bd      	mov	sp, r7
 8002e06:	bd80      	pop	{r7, pc}

08002e08 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b0ba      	sub	sp, #232	; 0xe8
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	68db      	ldr	r3, [r3, #12]
 8002e20:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	695b      	ldr	r3, [r3, #20]
 8002e2a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002e2e:	2300      	movs	r3, #0
 8002e30:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002e34:	2300      	movs	r3, #0
 8002e36:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002e3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e3e:	f003 030f 	and.w	r3, r3, #15
 8002e42:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002e46:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d10f      	bne.n	8002e6e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002e4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e52:	f003 0320 	and.w	r3, r3, #32
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d009      	beq.n	8002e6e <HAL_UART_IRQHandler+0x66>
 8002e5a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e5e:	f003 0320 	and.w	r3, r3, #32
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d003      	beq.n	8002e6e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002e66:	6878      	ldr	r0, [r7, #4]
 8002e68:	f000 fb69 	bl	800353e <UART_Receive_IT>
      return;
 8002e6c:	e25b      	b.n	8003326 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002e6e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	f000 80de 	beq.w	8003034 <HAL_UART_IRQHandler+0x22c>
 8002e78:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002e7c:	f003 0301 	and.w	r3, r3, #1
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d106      	bne.n	8002e92 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002e84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e88:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	f000 80d1 	beq.w	8003034 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002e92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e96:	f003 0301 	and.w	r3, r3, #1
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d00b      	beq.n	8002eb6 <HAL_UART_IRQHandler+0xae>
 8002e9e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ea2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d005      	beq.n	8002eb6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eae:	f043 0201 	orr.w	r2, r3, #1
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002eb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002eba:	f003 0304 	and.w	r3, r3, #4
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d00b      	beq.n	8002eda <HAL_UART_IRQHandler+0xd2>
 8002ec2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002ec6:	f003 0301 	and.w	r3, r3, #1
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d005      	beq.n	8002eda <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ed2:	f043 0202 	orr.w	r2, r3, #2
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002eda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ede:	f003 0302 	and.w	r3, r3, #2
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d00b      	beq.n	8002efe <HAL_UART_IRQHandler+0xf6>
 8002ee6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002eea:	f003 0301 	and.w	r3, r3, #1
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d005      	beq.n	8002efe <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ef6:	f043 0204 	orr.w	r2, r3, #4
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002efe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f02:	f003 0308 	and.w	r3, r3, #8
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d011      	beq.n	8002f2e <HAL_UART_IRQHandler+0x126>
 8002f0a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f0e:	f003 0320 	and.w	r3, r3, #32
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d105      	bne.n	8002f22 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002f16:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002f1a:	f003 0301 	and.w	r3, r3, #1
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d005      	beq.n	8002f2e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f26:	f043 0208 	orr.w	r2, r3, #8
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	f000 81f2 	beq.w	800331c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002f38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f3c:	f003 0320 	and.w	r3, r3, #32
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d008      	beq.n	8002f56 <HAL_UART_IRQHandler+0x14e>
 8002f44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f48:	f003 0320 	and.w	r3, r3, #32
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d002      	beq.n	8002f56 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002f50:	6878      	ldr	r0, [r7, #4]
 8002f52:	f000 faf4 	bl	800353e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	695b      	ldr	r3, [r3, #20]
 8002f5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f60:	2b40      	cmp	r3, #64	; 0x40
 8002f62:	bf0c      	ite	eq
 8002f64:	2301      	moveq	r3, #1
 8002f66:	2300      	movne	r3, #0
 8002f68:	b2db      	uxtb	r3, r3
 8002f6a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f72:	f003 0308 	and.w	r3, r3, #8
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d103      	bne.n	8002f82 <HAL_UART_IRQHandler+0x17a>
 8002f7a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d04f      	beq.n	8003022 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002f82:	6878      	ldr	r0, [r7, #4]
 8002f84:	f000 f9fc 	bl	8003380 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	695b      	ldr	r3, [r3, #20]
 8002f8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f92:	2b40      	cmp	r3, #64	; 0x40
 8002f94:	d141      	bne.n	800301a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	3314      	adds	r3, #20
 8002f9c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fa0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002fa4:	e853 3f00 	ldrex	r3, [r3]
 8002fa8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002fac:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002fb0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002fb4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	3314      	adds	r3, #20
 8002fbe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002fc2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002fc6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fca:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002fce:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002fd2:	e841 2300 	strex	r3, r2, [r1]
 8002fd6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002fda:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d1d9      	bne.n	8002f96 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d013      	beq.n	8003012 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fee:	4a7e      	ldr	r2, [pc, #504]	; (80031e8 <HAL_UART_IRQHandler+0x3e0>)
 8002ff0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	f7fd fe67 	bl	8000cca <HAL_DMA_Abort_IT>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d016      	beq.n	8003030 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003006:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003008:	687a      	ldr	r2, [r7, #4]
 800300a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800300c:	4610      	mov	r0, r2
 800300e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003010:	e00e      	b.n	8003030 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003012:	6878      	ldr	r0, [r7, #4]
 8003014:	f000 f99e 	bl	8003354 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003018:	e00a      	b.n	8003030 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800301a:	6878      	ldr	r0, [r7, #4]
 800301c:	f000 f99a 	bl	8003354 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003020:	e006      	b.n	8003030 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003022:	6878      	ldr	r0, [r7, #4]
 8003024:	f000 f996 	bl	8003354 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2200      	movs	r2, #0
 800302c:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800302e:	e175      	b.n	800331c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003030:	bf00      	nop
    return;
 8003032:	e173      	b.n	800331c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003038:	2b01      	cmp	r3, #1
 800303a:	f040 814f 	bne.w	80032dc <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800303e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003042:	f003 0310 	and.w	r3, r3, #16
 8003046:	2b00      	cmp	r3, #0
 8003048:	f000 8148 	beq.w	80032dc <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800304c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003050:	f003 0310 	and.w	r3, r3, #16
 8003054:	2b00      	cmp	r3, #0
 8003056:	f000 8141 	beq.w	80032dc <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800305a:	2300      	movs	r3, #0
 800305c:	60bb      	str	r3, [r7, #8]
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	60bb      	str	r3, [r7, #8]
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	60bb      	str	r3, [r7, #8]
 800306e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	695b      	ldr	r3, [r3, #20]
 8003076:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800307a:	2b40      	cmp	r3, #64	; 0x40
 800307c:	f040 80b6 	bne.w	80031ec <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800308c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003090:	2b00      	cmp	r3, #0
 8003092:	f000 8145 	beq.w	8003320 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800309a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800309e:	429a      	cmp	r2, r3
 80030a0:	f080 813e 	bcs.w	8003320 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80030aa:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030b0:	69db      	ldr	r3, [r3, #28]
 80030b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80030b6:	f000 8088 	beq.w	80031ca <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	330c      	adds	r3, #12
 80030c0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030c4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80030c8:	e853 3f00 	ldrex	r3, [r3]
 80030cc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80030d0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80030d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80030d8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	330c      	adds	r3, #12
 80030e2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80030e6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80030ea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030ee:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80030f2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80030f6:	e841 2300 	strex	r3, r2, [r1]
 80030fa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80030fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003102:	2b00      	cmp	r3, #0
 8003104:	d1d9      	bne.n	80030ba <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	3314      	adds	r3, #20
 800310c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800310e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003110:	e853 3f00 	ldrex	r3, [r3]
 8003114:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003116:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003118:	f023 0301 	bic.w	r3, r3, #1
 800311c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	3314      	adds	r3, #20
 8003126:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800312a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800312e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003130:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003132:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003136:	e841 2300 	strex	r3, r2, [r1]
 800313a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800313c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800313e:	2b00      	cmp	r3, #0
 8003140:	d1e1      	bne.n	8003106 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	3314      	adds	r3, #20
 8003148:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800314a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800314c:	e853 3f00 	ldrex	r3, [r3]
 8003150:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003152:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003154:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003158:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	3314      	adds	r3, #20
 8003162:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003166:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003168:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800316a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800316c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800316e:	e841 2300 	strex	r3, r2, [r1]
 8003172:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003174:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003176:	2b00      	cmp	r3, #0
 8003178:	d1e3      	bne.n	8003142 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2220      	movs	r2, #32
 800317e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2200      	movs	r2, #0
 8003186:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	330c      	adds	r3, #12
 800318e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003190:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003192:	e853 3f00 	ldrex	r3, [r3]
 8003196:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003198:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800319a:	f023 0310 	bic.w	r3, r3, #16
 800319e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	330c      	adds	r3, #12
 80031a8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80031ac:	65ba      	str	r2, [r7, #88]	; 0x58
 80031ae:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031b0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80031b2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80031b4:	e841 2300 	strex	r3, r2, [r1]
 80031b8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80031ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d1e3      	bne.n	8003188 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031c4:	4618      	mov	r0, r3
 80031c6:	f7fd fd10 	bl	8000bea <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2202      	movs	r2, #2
 80031ce:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80031d8:	b29b      	uxth	r3, r3
 80031da:	1ad3      	subs	r3, r2, r3
 80031dc:	b29b      	uxth	r3, r3
 80031de:	4619      	mov	r1, r3
 80031e0:	6878      	ldr	r0, [r7, #4]
 80031e2:	f000 f8c1 	bl	8003368 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80031e6:	e09b      	b.n	8003320 <HAL_UART_IRQHandler+0x518>
 80031e8:	08003447 	.word	0x08003447
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80031f4:	b29b      	uxth	r3, r3
 80031f6:	1ad3      	subs	r3, r2, r3
 80031f8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003200:	b29b      	uxth	r3, r3
 8003202:	2b00      	cmp	r3, #0
 8003204:	f000 808e 	beq.w	8003324 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003208:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800320c:	2b00      	cmp	r3, #0
 800320e:	f000 8089 	beq.w	8003324 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	330c      	adds	r3, #12
 8003218:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800321a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800321c:	e853 3f00 	ldrex	r3, [r3]
 8003220:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003222:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003224:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003228:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	330c      	adds	r3, #12
 8003232:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003236:	647a      	str	r2, [r7, #68]	; 0x44
 8003238:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800323a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800323c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800323e:	e841 2300 	strex	r3, r2, [r1]
 8003242:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003244:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003246:	2b00      	cmp	r3, #0
 8003248:	d1e3      	bne.n	8003212 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	3314      	adds	r3, #20
 8003250:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003254:	e853 3f00 	ldrex	r3, [r3]
 8003258:	623b      	str	r3, [r7, #32]
   return(result);
 800325a:	6a3b      	ldr	r3, [r7, #32]
 800325c:	f023 0301 	bic.w	r3, r3, #1
 8003260:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	3314      	adds	r3, #20
 800326a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800326e:	633a      	str	r2, [r7, #48]	; 0x30
 8003270:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003272:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003274:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003276:	e841 2300 	strex	r3, r2, [r1]
 800327a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800327c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800327e:	2b00      	cmp	r3, #0
 8003280:	d1e3      	bne.n	800324a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2220      	movs	r2, #32
 8003286:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2200      	movs	r2, #0
 800328e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	330c      	adds	r3, #12
 8003296:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003298:	693b      	ldr	r3, [r7, #16]
 800329a:	e853 3f00 	ldrex	r3, [r3]
 800329e:	60fb      	str	r3, [r7, #12]
   return(result);
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	f023 0310 	bic.w	r3, r3, #16
 80032a6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	330c      	adds	r3, #12
 80032b0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80032b4:	61fa      	str	r2, [r7, #28]
 80032b6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032b8:	69b9      	ldr	r1, [r7, #24]
 80032ba:	69fa      	ldr	r2, [r7, #28]
 80032bc:	e841 2300 	strex	r3, r2, [r1]
 80032c0:	617b      	str	r3, [r7, #20]
   return(result);
 80032c2:	697b      	ldr	r3, [r7, #20]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d1e3      	bne.n	8003290 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2202      	movs	r2, #2
 80032cc:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80032ce:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80032d2:	4619      	mov	r1, r3
 80032d4:	6878      	ldr	r0, [r7, #4]
 80032d6:	f000 f847 	bl	8003368 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80032da:	e023      	b.n	8003324 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80032dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80032e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d009      	beq.n	80032fc <HAL_UART_IRQHandler+0x4f4>
 80032e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80032ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d003      	beq.n	80032fc <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80032f4:	6878      	ldr	r0, [r7, #4]
 80032f6:	f000 f8ba 	bl	800346e <UART_Transmit_IT>
    return;
 80032fa:	e014      	b.n	8003326 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80032fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003300:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003304:	2b00      	cmp	r3, #0
 8003306:	d00e      	beq.n	8003326 <HAL_UART_IRQHandler+0x51e>
 8003308:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800330c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003310:	2b00      	cmp	r3, #0
 8003312:	d008      	beq.n	8003326 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003314:	6878      	ldr	r0, [r7, #4]
 8003316:	f000 f8fa 	bl	800350e <UART_EndTransmit_IT>
    return;
 800331a:	e004      	b.n	8003326 <HAL_UART_IRQHandler+0x51e>
    return;
 800331c:	bf00      	nop
 800331e:	e002      	b.n	8003326 <HAL_UART_IRQHandler+0x51e>
      return;
 8003320:	bf00      	nop
 8003322:	e000      	b.n	8003326 <HAL_UART_IRQHandler+0x51e>
      return;
 8003324:	bf00      	nop
  }
}
 8003326:	37e8      	adds	r7, #232	; 0xe8
 8003328:	46bd      	mov	sp, r7
 800332a:	bd80      	pop	{r7, pc}

0800332c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800332c:	b480      	push	{r7}
 800332e:	b083      	sub	sp, #12
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003334:	bf00      	nop
 8003336:	370c      	adds	r7, #12
 8003338:	46bd      	mov	sp, r7
 800333a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333e:	4770      	bx	lr

08003340 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003340:	b480      	push	{r7}
 8003342:	b083      	sub	sp, #12
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003348:	bf00      	nop
 800334a:	370c      	adds	r7, #12
 800334c:	46bd      	mov	sp, r7
 800334e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003352:	4770      	bx	lr

08003354 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003354:	b480      	push	{r7}
 8003356:	b083      	sub	sp, #12
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800335c:	bf00      	nop
 800335e:	370c      	adds	r7, #12
 8003360:	46bd      	mov	sp, r7
 8003362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003366:	4770      	bx	lr

08003368 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003368:	b480      	push	{r7}
 800336a:	b083      	sub	sp, #12
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
 8003370:	460b      	mov	r3, r1
 8003372:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003374:	bf00      	nop
 8003376:	370c      	adds	r7, #12
 8003378:	46bd      	mov	sp, r7
 800337a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337e:	4770      	bx	lr

08003380 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003380:	b480      	push	{r7}
 8003382:	b095      	sub	sp, #84	; 0x54
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	330c      	adds	r3, #12
 800338e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003390:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003392:	e853 3f00 	ldrex	r3, [r3]
 8003396:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003398:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800339a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800339e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	330c      	adds	r3, #12
 80033a6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80033a8:	643a      	str	r2, [r7, #64]	; 0x40
 80033aa:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033ac:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80033ae:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80033b0:	e841 2300 	strex	r3, r2, [r1]
 80033b4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80033b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d1e5      	bne.n	8003388 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	3314      	adds	r3, #20
 80033c2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033c4:	6a3b      	ldr	r3, [r7, #32]
 80033c6:	e853 3f00 	ldrex	r3, [r3]
 80033ca:	61fb      	str	r3, [r7, #28]
   return(result);
 80033cc:	69fb      	ldr	r3, [r7, #28]
 80033ce:	f023 0301 	bic.w	r3, r3, #1
 80033d2:	64bb      	str	r3, [r7, #72]	; 0x48
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	3314      	adds	r3, #20
 80033da:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80033dc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80033de:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033e0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80033e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80033e4:	e841 2300 	strex	r3, r2, [r1]
 80033e8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80033ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d1e5      	bne.n	80033bc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033f4:	2b01      	cmp	r3, #1
 80033f6:	d119      	bne.n	800342c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	330c      	adds	r3, #12
 80033fe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	e853 3f00 	ldrex	r3, [r3]
 8003406:	60bb      	str	r3, [r7, #8]
   return(result);
 8003408:	68bb      	ldr	r3, [r7, #8]
 800340a:	f023 0310 	bic.w	r3, r3, #16
 800340e:	647b      	str	r3, [r7, #68]	; 0x44
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	330c      	adds	r3, #12
 8003416:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003418:	61ba      	str	r2, [r7, #24]
 800341a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800341c:	6979      	ldr	r1, [r7, #20]
 800341e:	69ba      	ldr	r2, [r7, #24]
 8003420:	e841 2300 	strex	r3, r2, [r1]
 8003424:	613b      	str	r3, [r7, #16]
   return(result);
 8003426:	693b      	ldr	r3, [r7, #16]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d1e5      	bne.n	80033f8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2220      	movs	r2, #32
 8003430:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2200      	movs	r2, #0
 8003438:	631a      	str	r2, [r3, #48]	; 0x30
}
 800343a:	bf00      	nop
 800343c:	3754      	adds	r7, #84	; 0x54
 800343e:	46bd      	mov	sp, r7
 8003440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003444:	4770      	bx	lr

08003446 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003446:	b580      	push	{r7, lr}
 8003448:	b084      	sub	sp, #16
 800344a:	af00      	add	r7, sp, #0
 800344c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003452:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	2200      	movs	r2, #0
 8003458:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	2200      	movs	r2, #0
 800345e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003460:	68f8      	ldr	r0, [r7, #12]
 8003462:	f7ff ff77 	bl	8003354 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003466:	bf00      	nop
 8003468:	3710      	adds	r7, #16
 800346a:	46bd      	mov	sp, r7
 800346c:	bd80      	pop	{r7, pc}

0800346e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800346e:	b480      	push	{r7}
 8003470:	b085      	sub	sp, #20
 8003472:	af00      	add	r7, sp, #0
 8003474:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800347c:	b2db      	uxtb	r3, r3
 800347e:	2b21      	cmp	r3, #33	; 0x21
 8003480:	d13e      	bne.n	8003500 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	689b      	ldr	r3, [r3, #8]
 8003486:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800348a:	d114      	bne.n	80034b6 <UART_Transmit_IT+0x48>
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	691b      	ldr	r3, [r3, #16]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d110      	bne.n	80034b6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6a1b      	ldr	r3, [r3, #32]
 8003498:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	881b      	ldrh	r3, [r3, #0]
 800349e:	461a      	mov	r2, r3
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80034a8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6a1b      	ldr	r3, [r3, #32]
 80034ae:	1c9a      	adds	r2, r3, #2
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	621a      	str	r2, [r3, #32]
 80034b4:	e008      	b.n	80034c8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6a1b      	ldr	r3, [r3, #32]
 80034ba:	1c59      	adds	r1, r3, #1
 80034bc:	687a      	ldr	r2, [r7, #4]
 80034be:	6211      	str	r1, [r2, #32]
 80034c0:	781a      	ldrb	r2, [r3, #0]
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80034cc:	b29b      	uxth	r3, r3
 80034ce:	3b01      	subs	r3, #1
 80034d0:	b29b      	uxth	r3, r3
 80034d2:	687a      	ldr	r2, [r7, #4]
 80034d4:	4619      	mov	r1, r3
 80034d6:	84d1      	strh	r1, [r2, #38]	; 0x26
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d10f      	bne.n	80034fc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	68da      	ldr	r2, [r3, #12]
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80034ea:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	68da      	ldr	r2, [r3, #12]
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80034fa:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80034fc:	2300      	movs	r3, #0
 80034fe:	e000      	b.n	8003502 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003500:	2302      	movs	r3, #2
  }
}
 8003502:	4618      	mov	r0, r3
 8003504:	3714      	adds	r7, #20
 8003506:	46bd      	mov	sp, r7
 8003508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350c:	4770      	bx	lr

0800350e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800350e:	b580      	push	{r7, lr}
 8003510:	b082      	sub	sp, #8
 8003512:	af00      	add	r7, sp, #0
 8003514:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	68da      	ldr	r2, [r3, #12]
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003524:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2220      	movs	r2, #32
 800352a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800352e:	6878      	ldr	r0, [r7, #4]
 8003530:	f7ff fefc 	bl	800332c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003534:	2300      	movs	r3, #0
}
 8003536:	4618      	mov	r0, r3
 8003538:	3708      	adds	r7, #8
 800353a:	46bd      	mov	sp, r7
 800353c:	bd80      	pop	{r7, pc}

0800353e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800353e:	b580      	push	{r7, lr}
 8003540:	b08c      	sub	sp, #48	; 0x30
 8003542:	af00      	add	r7, sp, #0
 8003544:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800354c:	b2db      	uxtb	r3, r3
 800354e:	2b22      	cmp	r3, #34	; 0x22
 8003550:	f040 80ae 	bne.w	80036b0 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	689b      	ldr	r3, [r3, #8]
 8003558:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800355c:	d117      	bne.n	800358e <UART_Receive_IT+0x50>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	691b      	ldr	r3, [r3, #16]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d113      	bne.n	800358e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003566:	2300      	movs	r3, #0
 8003568:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800356e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	b29b      	uxth	r3, r3
 8003578:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800357c:	b29a      	uxth	r2, r3
 800357e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003580:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003586:	1c9a      	adds	r2, r3, #2
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	629a      	str	r2, [r3, #40]	; 0x28
 800358c:	e026      	b.n	80035dc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003592:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003594:	2300      	movs	r3, #0
 8003596:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	689b      	ldr	r3, [r3, #8]
 800359c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035a0:	d007      	beq.n	80035b2 <UART_Receive_IT+0x74>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	689b      	ldr	r3, [r3, #8]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d10a      	bne.n	80035c0 <UART_Receive_IT+0x82>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	691b      	ldr	r3, [r3, #16]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d106      	bne.n	80035c0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	b2da      	uxtb	r2, r3
 80035ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035bc:	701a      	strb	r2, [r3, #0]
 80035be:	e008      	b.n	80035d2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	685b      	ldr	r3, [r3, #4]
 80035c6:	b2db      	uxtb	r3, r3
 80035c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80035cc:	b2da      	uxtb	r2, r3
 80035ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035d0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035d6:	1c5a      	adds	r2, r3, #1
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80035e0:	b29b      	uxth	r3, r3
 80035e2:	3b01      	subs	r3, #1
 80035e4:	b29b      	uxth	r3, r3
 80035e6:	687a      	ldr	r2, [r7, #4]
 80035e8:	4619      	mov	r1, r3
 80035ea:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d15d      	bne.n	80036ac <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	68da      	ldr	r2, [r3, #12]
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f022 0220 	bic.w	r2, r2, #32
 80035fe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	68da      	ldr	r2, [r3, #12]
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800360e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	695a      	ldr	r2, [r3, #20]
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f022 0201 	bic.w	r2, r2, #1
 800361e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2220      	movs	r2, #32
 8003624:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2200      	movs	r2, #0
 800362c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003632:	2b01      	cmp	r3, #1
 8003634:	d135      	bne.n	80036a2 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2200      	movs	r2, #0
 800363a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	330c      	adds	r3, #12
 8003642:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003644:	697b      	ldr	r3, [r7, #20]
 8003646:	e853 3f00 	ldrex	r3, [r3]
 800364a:	613b      	str	r3, [r7, #16]
   return(result);
 800364c:	693b      	ldr	r3, [r7, #16]
 800364e:	f023 0310 	bic.w	r3, r3, #16
 8003652:	627b      	str	r3, [r7, #36]	; 0x24
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	330c      	adds	r3, #12
 800365a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800365c:	623a      	str	r2, [r7, #32]
 800365e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003660:	69f9      	ldr	r1, [r7, #28]
 8003662:	6a3a      	ldr	r2, [r7, #32]
 8003664:	e841 2300 	strex	r3, r2, [r1]
 8003668:	61bb      	str	r3, [r7, #24]
   return(result);
 800366a:	69bb      	ldr	r3, [r7, #24]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d1e5      	bne.n	800363c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f003 0310 	and.w	r3, r3, #16
 800367a:	2b10      	cmp	r3, #16
 800367c:	d10a      	bne.n	8003694 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800367e:	2300      	movs	r3, #0
 8003680:	60fb      	str	r3, [r7, #12]
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	60fb      	str	r3, [r7, #12]
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	685b      	ldr	r3, [r3, #4]
 8003690:	60fb      	str	r3, [r7, #12]
 8003692:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003698:	4619      	mov	r1, r3
 800369a:	6878      	ldr	r0, [r7, #4]
 800369c:	f7ff fe64 	bl	8003368 <HAL_UARTEx_RxEventCallback>
 80036a0:	e002      	b.n	80036a8 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80036a2:	6878      	ldr	r0, [r7, #4]
 80036a4:	f7ff fe4c 	bl	8003340 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80036a8:	2300      	movs	r3, #0
 80036aa:	e002      	b.n	80036b2 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80036ac:	2300      	movs	r3, #0
 80036ae:	e000      	b.n	80036b2 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80036b0:	2302      	movs	r3, #2
  }
}
 80036b2:	4618      	mov	r0, r3
 80036b4:	3730      	adds	r7, #48	; 0x30
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bd80      	pop	{r7, pc}
	...

080036bc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80036bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80036c0:	b0c0      	sub	sp, #256	; 0x100
 80036c2:	af00      	add	r7, sp, #0
 80036c4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80036c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	691b      	ldr	r3, [r3, #16]
 80036d0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80036d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036d8:	68d9      	ldr	r1, [r3, #12]
 80036da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036de:	681a      	ldr	r2, [r3, #0]
 80036e0:	ea40 0301 	orr.w	r3, r0, r1
 80036e4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80036e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036ea:	689a      	ldr	r2, [r3, #8]
 80036ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036f0:	691b      	ldr	r3, [r3, #16]
 80036f2:	431a      	orrs	r2, r3
 80036f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036f8:	695b      	ldr	r3, [r3, #20]
 80036fa:	431a      	orrs	r2, r3
 80036fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003700:	69db      	ldr	r3, [r3, #28]
 8003702:	4313      	orrs	r3, r2
 8003704:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003708:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	68db      	ldr	r3, [r3, #12]
 8003710:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003714:	f021 010c 	bic.w	r1, r1, #12
 8003718:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800371c:	681a      	ldr	r2, [r3, #0]
 800371e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003722:	430b      	orrs	r3, r1
 8003724:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003726:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	695b      	ldr	r3, [r3, #20]
 800372e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003732:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003736:	6999      	ldr	r1, [r3, #24]
 8003738:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800373c:	681a      	ldr	r2, [r3, #0]
 800373e:	ea40 0301 	orr.w	r3, r0, r1
 8003742:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003744:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003748:	681a      	ldr	r2, [r3, #0]
 800374a:	4b8f      	ldr	r3, [pc, #572]	; (8003988 <UART_SetConfig+0x2cc>)
 800374c:	429a      	cmp	r2, r3
 800374e:	d005      	beq.n	800375c <UART_SetConfig+0xa0>
 8003750:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003754:	681a      	ldr	r2, [r3, #0]
 8003756:	4b8d      	ldr	r3, [pc, #564]	; (800398c <UART_SetConfig+0x2d0>)
 8003758:	429a      	cmp	r2, r3
 800375a:	d104      	bne.n	8003766 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800375c:	f7ff faf0 	bl	8002d40 <HAL_RCC_GetPCLK2Freq>
 8003760:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003764:	e003      	b.n	800376e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003766:	f7ff fad7 	bl	8002d18 <HAL_RCC_GetPCLK1Freq>
 800376a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800376e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003772:	69db      	ldr	r3, [r3, #28]
 8003774:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003778:	f040 810c 	bne.w	8003994 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800377c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003780:	2200      	movs	r2, #0
 8003782:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003786:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800378a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800378e:	4622      	mov	r2, r4
 8003790:	462b      	mov	r3, r5
 8003792:	1891      	adds	r1, r2, r2
 8003794:	65b9      	str	r1, [r7, #88]	; 0x58
 8003796:	415b      	adcs	r3, r3
 8003798:	65fb      	str	r3, [r7, #92]	; 0x5c
 800379a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800379e:	4621      	mov	r1, r4
 80037a0:	eb12 0801 	adds.w	r8, r2, r1
 80037a4:	4629      	mov	r1, r5
 80037a6:	eb43 0901 	adc.w	r9, r3, r1
 80037aa:	f04f 0200 	mov.w	r2, #0
 80037ae:	f04f 0300 	mov.w	r3, #0
 80037b2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80037b6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80037ba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80037be:	4690      	mov	r8, r2
 80037c0:	4699      	mov	r9, r3
 80037c2:	4623      	mov	r3, r4
 80037c4:	eb18 0303 	adds.w	r3, r8, r3
 80037c8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80037cc:	462b      	mov	r3, r5
 80037ce:	eb49 0303 	adc.w	r3, r9, r3
 80037d2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80037d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	2200      	movs	r2, #0
 80037de:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80037e2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80037e6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80037ea:	460b      	mov	r3, r1
 80037ec:	18db      	adds	r3, r3, r3
 80037ee:	653b      	str	r3, [r7, #80]	; 0x50
 80037f0:	4613      	mov	r3, r2
 80037f2:	eb42 0303 	adc.w	r3, r2, r3
 80037f6:	657b      	str	r3, [r7, #84]	; 0x54
 80037f8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80037fc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003800:	f7fc fcea 	bl	80001d8 <__aeabi_uldivmod>
 8003804:	4602      	mov	r2, r0
 8003806:	460b      	mov	r3, r1
 8003808:	4b61      	ldr	r3, [pc, #388]	; (8003990 <UART_SetConfig+0x2d4>)
 800380a:	fba3 2302 	umull	r2, r3, r3, r2
 800380e:	095b      	lsrs	r3, r3, #5
 8003810:	011c      	lsls	r4, r3, #4
 8003812:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003816:	2200      	movs	r2, #0
 8003818:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800381c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003820:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003824:	4642      	mov	r2, r8
 8003826:	464b      	mov	r3, r9
 8003828:	1891      	adds	r1, r2, r2
 800382a:	64b9      	str	r1, [r7, #72]	; 0x48
 800382c:	415b      	adcs	r3, r3
 800382e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003830:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003834:	4641      	mov	r1, r8
 8003836:	eb12 0a01 	adds.w	sl, r2, r1
 800383a:	4649      	mov	r1, r9
 800383c:	eb43 0b01 	adc.w	fp, r3, r1
 8003840:	f04f 0200 	mov.w	r2, #0
 8003844:	f04f 0300 	mov.w	r3, #0
 8003848:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800384c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003850:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003854:	4692      	mov	sl, r2
 8003856:	469b      	mov	fp, r3
 8003858:	4643      	mov	r3, r8
 800385a:	eb1a 0303 	adds.w	r3, sl, r3
 800385e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003862:	464b      	mov	r3, r9
 8003864:	eb4b 0303 	adc.w	r3, fp, r3
 8003868:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800386c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003870:	685b      	ldr	r3, [r3, #4]
 8003872:	2200      	movs	r2, #0
 8003874:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003878:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800387c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003880:	460b      	mov	r3, r1
 8003882:	18db      	adds	r3, r3, r3
 8003884:	643b      	str	r3, [r7, #64]	; 0x40
 8003886:	4613      	mov	r3, r2
 8003888:	eb42 0303 	adc.w	r3, r2, r3
 800388c:	647b      	str	r3, [r7, #68]	; 0x44
 800388e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003892:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003896:	f7fc fc9f 	bl	80001d8 <__aeabi_uldivmod>
 800389a:	4602      	mov	r2, r0
 800389c:	460b      	mov	r3, r1
 800389e:	4611      	mov	r1, r2
 80038a0:	4b3b      	ldr	r3, [pc, #236]	; (8003990 <UART_SetConfig+0x2d4>)
 80038a2:	fba3 2301 	umull	r2, r3, r3, r1
 80038a6:	095b      	lsrs	r3, r3, #5
 80038a8:	2264      	movs	r2, #100	; 0x64
 80038aa:	fb02 f303 	mul.w	r3, r2, r3
 80038ae:	1acb      	subs	r3, r1, r3
 80038b0:	00db      	lsls	r3, r3, #3
 80038b2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80038b6:	4b36      	ldr	r3, [pc, #216]	; (8003990 <UART_SetConfig+0x2d4>)
 80038b8:	fba3 2302 	umull	r2, r3, r3, r2
 80038bc:	095b      	lsrs	r3, r3, #5
 80038be:	005b      	lsls	r3, r3, #1
 80038c0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80038c4:	441c      	add	r4, r3
 80038c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80038ca:	2200      	movs	r2, #0
 80038cc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80038d0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80038d4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80038d8:	4642      	mov	r2, r8
 80038da:	464b      	mov	r3, r9
 80038dc:	1891      	adds	r1, r2, r2
 80038de:	63b9      	str	r1, [r7, #56]	; 0x38
 80038e0:	415b      	adcs	r3, r3
 80038e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80038e4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80038e8:	4641      	mov	r1, r8
 80038ea:	1851      	adds	r1, r2, r1
 80038ec:	6339      	str	r1, [r7, #48]	; 0x30
 80038ee:	4649      	mov	r1, r9
 80038f0:	414b      	adcs	r3, r1
 80038f2:	637b      	str	r3, [r7, #52]	; 0x34
 80038f4:	f04f 0200 	mov.w	r2, #0
 80038f8:	f04f 0300 	mov.w	r3, #0
 80038fc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003900:	4659      	mov	r1, fp
 8003902:	00cb      	lsls	r3, r1, #3
 8003904:	4651      	mov	r1, sl
 8003906:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800390a:	4651      	mov	r1, sl
 800390c:	00ca      	lsls	r2, r1, #3
 800390e:	4610      	mov	r0, r2
 8003910:	4619      	mov	r1, r3
 8003912:	4603      	mov	r3, r0
 8003914:	4642      	mov	r2, r8
 8003916:	189b      	adds	r3, r3, r2
 8003918:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800391c:	464b      	mov	r3, r9
 800391e:	460a      	mov	r2, r1
 8003920:	eb42 0303 	adc.w	r3, r2, r3
 8003924:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003928:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800392c:	685b      	ldr	r3, [r3, #4]
 800392e:	2200      	movs	r2, #0
 8003930:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003934:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003938:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800393c:	460b      	mov	r3, r1
 800393e:	18db      	adds	r3, r3, r3
 8003940:	62bb      	str	r3, [r7, #40]	; 0x28
 8003942:	4613      	mov	r3, r2
 8003944:	eb42 0303 	adc.w	r3, r2, r3
 8003948:	62fb      	str	r3, [r7, #44]	; 0x2c
 800394a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800394e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003952:	f7fc fc41 	bl	80001d8 <__aeabi_uldivmod>
 8003956:	4602      	mov	r2, r0
 8003958:	460b      	mov	r3, r1
 800395a:	4b0d      	ldr	r3, [pc, #52]	; (8003990 <UART_SetConfig+0x2d4>)
 800395c:	fba3 1302 	umull	r1, r3, r3, r2
 8003960:	095b      	lsrs	r3, r3, #5
 8003962:	2164      	movs	r1, #100	; 0x64
 8003964:	fb01 f303 	mul.w	r3, r1, r3
 8003968:	1ad3      	subs	r3, r2, r3
 800396a:	00db      	lsls	r3, r3, #3
 800396c:	3332      	adds	r3, #50	; 0x32
 800396e:	4a08      	ldr	r2, [pc, #32]	; (8003990 <UART_SetConfig+0x2d4>)
 8003970:	fba2 2303 	umull	r2, r3, r2, r3
 8003974:	095b      	lsrs	r3, r3, #5
 8003976:	f003 0207 	and.w	r2, r3, #7
 800397a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4422      	add	r2, r4
 8003982:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003984:	e106      	b.n	8003b94 <UART_SetConfig+0x4d8>
 8003986:	bf00      	nop
 8003988:	40011000 	.word	0x40011000
 800398c:	40011400 	.word	0x40011400
 8003990:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003994:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003998:	2200      	movs	r2, #0
 800399a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800399e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80039a2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80039a6:	4642      	mov	r2, r8
 80039a8:	464b      	mov	r3, r9
 80039aa:	1891      	adds	r1, r2, r2
 80039ac:	6239      	str	r1, [r7, #32]
 80039ae:	415b      	adcs	r3, r3
 80039b0:	627b      	str	r3, [r7, #36]	; 0x24
 80039b2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80039b6:	4641      	mov	r1, r8
 80039b8:	1854      	adds	r4, r2, r1
 80039ba:	4649      	mov	r1, r9
 80039bc:	eb43 0501 	adc.w	r5, r3, r1
 80039c0:	f04f 0200 	mov.w	r2, #0
 80039c4:	f04f 0300 	mov.w	r3, #0
 80039c8:	00eb      	lsls	r3, r5, #3
 80039ca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80039ce:	00e2      	lsls	r2, r4, #3
 80039d0:	4614      	mov	r4, r2
 80039d2:	461d      	mov	r5, r3
 80039d4:	4643      	mov	r3, r8
 80039d6:	18e3      	adds	r3, r4, r3
 80039d8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80039dc:	464b      	mov	r3, r9
 80039de:	eb45 0303 	adc.w	r3, r5, r3
 80039e2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80039e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	2200      	movs	r2, #0
 80039ee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80039f2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80039f6:	f04f 0200 	mov.w	r2, #0
 80039fa:	f04f 0300 	mov.w	r3, #0
 80039fe:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003a02:	4629      	mov	r1, r5
 8003a04:	008b      	lsls	r3, r1, #2
 8003a06:	4621      	mov	r1, r4
 8003a08:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003a0c:	4621      	mov	r1, r4
 8003a0e:	008a      	lsls	r2, r1, #2
 8003a10:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003a14:	f7fc fbe0 	bl	80001d8 <__aeabi_uldivmod>
 8003a18:	4602      	mov	r2, r0
 8003a1a:	460b      	mov	r3, r1
 8003a1c:	4b60      	ldr	r3, [pc, #384]	; (8003ba0 <UART_SetConfig+0x4e4>)
 8003a1e:	fba3 2302 	umull	r2, r3, r3, r2
 8003a22:	095b      	lsrs	r3, r3, #5
 8003a24:	011c      	lsls	r4, r3, #4
 8003a26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003a30:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003a34:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003a38:	4642      	mov	r2, r8
 8003a3a:	464b      	mov	r3, r9
 8003a3c:	1891      	adds	r1, r2, r2
 8003a3e:	61b9      	str	r1, [r7, #24]
 8003a40:	415b      	adcs	r3, r3
 8003a42:	61fb      	str	r3, [r7, #28]
 8003a44:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003a48:	4641      	mov	r1, r8
 8003a4a:	1851      	adds	r1, r2, r1
 8003a4c:	6139      	str	r1, [r7, #16]
 8003a4e:	4649      	mov	r1, r9
 8003a50:	414b      	adcs	r3, r1
 8003a52:	617b      	str	r3, [r7, #20]
 8003a54:	f04f 0200 	mov.w	r2, #0
 8003a58:	f04f 0300 	mov.w	r3, #0
 8003a5c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003a60:	4659      	mov	r1, fp
 8003a62:	00cb      	lsls	r3, r1, #3
 8003a64:	4651      	mov	r1, sl
 8003a66:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003a6a:	4651      	mov	r1, sl
 8003a6c:	00ca      	lsls	r2, r1, #3
 8003a6e:	4610      	mov	r0, r2
 8003a70:	4619      	mov	r1, r3
 8003a72:	4603      	mov	r3, r0
 8003a74:	4642      	mov	r2, r8
 8003a76:	189b      	adds	r3, r3, r2
 8003a78:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003a7c:	464b      	mov	r3, r9
 8003a7e:	460a      	mov	r2, r1
 8003a80:	eb42 0303 	adc.w	r3, r2, r3
 8003a84:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003a88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a8c:	685b      	ldr	r3, [r3, #4]
 8003a8e:	2200      	movs	r2, #0
 8003a90:	67bb      	str	r3, [r7, #120]	; 0x78
 8003a92:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003a94:	f04f 0200 	mov.w	r2, #0
 8003a98:	f04f 0300 	mov.w	r3, #0
 8003a9c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003aa0:	4649      	mov	r1, r9
 8003aa2:	008b      	lsls	r3, r1, #2
 8003aa4:	4641      	mov	r1, r8
 8003aa6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003aaa:	4641      	mov	r1, r8
 8003aac:	008a      	lsls	r2, r1, #2
 8003aae:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003ab2:	f7fc fb91 	bl	80001d8 <__aeabi_uldivmod>
 8003ab6:	4602      	mov	r2, r0
 8003ab8:	460b      	mov	r3, r1
 8003aba:	4611      	mov	r1, r2
 8003abc:	4b38      	ldr	r3, [pc, #224]	; (8003ba0 <UART_SetConfig+0x4e4>)
 8003abe:	fba3 2301 	umull	r2, r3, r3, r1
 8003ac2:	095b      	lsrs	r3, r3, #5
 8003ac4:	2264      	movs	r2, #100	; 0x64
 8003ac6:	fb02 f303 	mul.w	r3, r2, r3
 8003aca:	1acb      	subs	r3, r1, r3
 8003acc:	011b      	lsls	r3, r3, #4
 8003ace:	3332      	adds	r3, #50	; 0x32
 8003ad0:	4a33      	ldr	r2, [pc, #204]	; (8003ba0 <UART_SetConfig+0x4e4>)
 8003ad2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ad6:	095b      	lsrs	r3, r3, #5
 8003ad8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003adc:	441c      	add	r4, r3
 8003ade:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	673b      	str	r3, [r7, #112]	; 0x70
 8003ae6:	677a      	str	r2, [r7, #116]	; 0x74
 8003ae8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003aec:	4642      	mov	r2, r8
 8003aee:	464b      	mov	r3, r9
 8003af0:	1891      	adds	r1, r2, r2
 8003af2:	60b9      	str	r1, [r7, #8]
 8003af4:	415b      	adcs	r3, r3
 8003af6:	60fb      	str	r3, [r7, #12]
 8003af8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003afc:	4641      	mov	r1, r8
 8003afe:	1851      	adds	r1, r2, r1
 8003b00:	6039      	str	r1, [r7, #0]
 8003b02:	4649      	mov	r1, r9
 8003b04:	414b      	adcs	r3, r1
 8003b06:	607b      	str	r3, [r7, #4]
 8003b08:	f04f 0200 	mov.w	r2, #0
 8003b0c:	f04f 0300 	mov.w	r3, #0
 8003b10:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003b14:	4659      	mov	r1, fp
 8003b16:	00cb      	lsls	r3, r1, #3
 8003b18:	4651      	mov	r1, sl
 8003b1a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003b1e:	4651      	mov	r1, sl
 8003b20:	00ca      	lsls	r2, r1, #3
 8003b22:	4610      	mov	r0, r2
 8003b24:	4619      	mov	r1, r3
 8003b26:	4603      	mov	r3, r0
 8003b28:	4642      	mov	r2, r8
 8003b2a:	189b      	adds	r3, r3, r2
 8003b2c:	66bb      	str	r3, [r7, #104]	; 0x68
 8003b2e:	464b      	mov	r3, r9
 8003b30:	460a      	mov	r2, r1
 8003b32:	eb42 0303 	adc.w	r3, r2, r3
 8003b36:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003b38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	2200      	movs	r2, #0
 8003b40:	663b      	str	r3, [r7, #96]	; 0x60
 8003b42:	667a      	str	r2, [r7, #100]	; 0x64
 8003b44:	f04f 0200 	mov.w	r2, #0
 8003b48:	f04f 0300 	mov.w	r3, #0
 8003b4c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003b50:	4649      	mov	r1, r9
 8003b52:	008b      	lsls	r3, r1, #2
 8003b54:	4641      	mov	r1, r8
 8003b56:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003b5a:	4641      	mov	r1, r8
 8003b5c:	008a      	lsls	r2, r1, #2
 8003b5e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003b62:	f7fc fb39 	bl	80001d8 <__aeabi_uldivmod>
 8003b66:	4602      	mov	r2, r0
 8003b68:	460b      	mov	r3, r1
 8003b6a:	4b0d      	ldr	r3, [pc, #52]	; (8003ba0 <UART_SetConfig+0x4e4>)
 8003b6c:	fba3 1302 	umull	r1, r3, r3, r2
 8003b70:	095b      	lsrs	r3, r3, #5
 8003b72:	2164      	movs	r1, #100	; 0x64
 8003b74:	fb01 f303 	mul.w	r3, r1, r3
 8003b78:	1ad3      	subs	r3, r2, r3
 8003b7a:	011b      	lsls	r3, r3, #4
 8003b7c:	3332      	adds	r3, #50	; 0x32
 8003b7e:	4a08      	ldr	r2, [pc, #32]	; (8003ba0 <UART_SetConfig+0x4e4>)
 8003b80:	fba2 2303 	umull	r2, r3, r2, r3
 8003b84:	095b      	lsrs	r3, r3, #5
 8003b86:	f003 020f 	and.w	r2, r3, #15
 8003b8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4422      	add	r2, r4
 8003b92:	609a      	str	r2, [r3, #8]
}
 8003b94:	bf00      	nop
 8003b96:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003ba0:	51eb851f 	.word	0x51eb851f

08003ba4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003ba4:	b084      	sub	sp, #16
 8003ba6:	b580      	push	{r7, lr}
 8003ba8:	b084      	sub	sp, #16
 8003baa:	af00      	add	r7, sp, #0
 8003bac:	6078      	str	r0, [r7, #4]
 8003bae:	f107 001c 	add.w	r0, r7, #28
 8003bb2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003bb6:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8003bba:	2b01      	cmp	r3, #1
 8003bbc:	d123      	bne.n	8003c06 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bc2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	68db      	ldr	r3, [r3, #12]
 8003bce:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003bd2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003bd6:	687a      	ldr	r2, [r7, #4]
 8003bd8:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	68db      	ldr	r3, [r3, #12]
 8003bde:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003be6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003bea:	2b01      	cmp	r3, #1
 8003bec:	d105      	bne.n	8003bfa <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	68db      	ldr	r3, [r3, #12]
 8003bf2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003bfa:	6878      	ldr	r0, [r7, #4]
 8003bfc:	f001 fae2 	bl	80051c4 <USB_CoreReset>
 8003c00:	4603      	mov	r3, r0
 8003c02:	73fb      	strb	r3, [r7, #15]
 8003c04:	e01b      	b.n	8003c3e <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	68db      	ldr	r3, [r3, #12]
 8003c0a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003c12:	6878      	ldr	r0, [r7, #4]
 8003c14:	f001 fad6 	bl	80051c4 <USB_CoreReset>
 8003c18:	4603      	mov	r3, r0
 8003c1a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003c1c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d106      	bne.n	8003c32 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c28:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	639a      	str	r2, [r3, #56]	; 0x38
 8003c30:	e005      	b.n	8003c3e <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c36:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003c3e:	7fbb      	ldrb	r3, [r7, #30]
 8003c40:	2b01      	cmp	r3, #1
 8003c42:	d10b      	bne.n	8003c5c <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	689b      	ldr	r3, [r3, #8]
 8003c48:	f043 0206 	orr.w	r2, r3, #6
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	689b      	ldr	r3, [r3, #8]
 8003c54:	f043 0220 	orr.w	r2, r3, #32
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003c5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c5e:	4618      	mov	r0, r3
 8003c60:	3710      	adds	r7, #16
 8003c62:	46bd      	mov	sp, r7
 8003c64:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003c68:	b004      	add	sp, #16
 8003c6a:	4770      	bx	lr

08003c6c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8003c6c:	b480      	push	{r7}
 8003c6e:	b087      	sub	sp, #28
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	60f8      	str	r0, [r7, #12]
 8003c74:	60b9      	str	r1, [r7, #8]
 8003c76:	4613      	mov	r3, r2
 8003c78:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8003c7a:	79fb      	ldrb	r3, [r7, #7]
 8003c7c:	2b02      	cmp	r3, #2
 8003c7e:	d165      	bne.n	8003d4c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003c80:	68bb      	ldr	r3, [r7, #8]
 8003c82:	4a41      	ldr	r2, [pc, #260]	; (8003d88 <USB_SetTurnaroundTime+0x11c>)
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d906      	bls.n	8003c96 <USB_SetTurnaroundTime+0x2a>
 8003c88:	68bb      	ldr	r3, [r7, #8]
 8003c8a:	4a40      	ldr	r2, [pc, #256]	; (8003d8c <USB_SetTurnaroundTime+0x120>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d202      	bcs.n	8003c96 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003c90:	230f      	movs	r3, #15
 8003c92:	617b      	str	r3, [r7, #20]
 8003c94:	e062      	b.n	8003d5c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8003c96:	68bb      	ldr	r3, [r7, #8]
 8003c98:	4a3c      	ldr	r2, [pc, #240]	; (8003d8c <USB_SetTurnaroundTime+0x120>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d306      	bcc.n	8003cac <USB_SetTurnaroundTime+0x40>
 8003c9e:	68bb      	ldr	r3, [r7, #8]
 8003ca0:	4a3b      	ldr	r2, [pc, #236]	; (8003d90 <USB_SetTurnaroundTime+0x124>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d202      	bcs.n	8003cac <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8003ca6:	230e      	movs	r3, #14
 8003ca8:	617b      	str	r3, [r7, #20]
 8003caa:	e057      	b.n	8003d5c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003cac:	68bb      	ldr	r3, [r7, #8]
 8003cae:	4a38      	ldr	r2, [pc, #224]	; (8003d90 <USB_SetTurnaroundTime+0x124>)
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d306      	bcc.n	8003cc2 <USB_SetTurnaroundTime+0x56>
 8003cb4:	68bb      	ldr	r3, [r7, #8]
 8003cb6:	4a37      	ldr	r2, [pc, #220]	; (8003d94 <USB_SetTurnaroundTime+0x128>)
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d202      	bcs.n	8003cc2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8003cbc:	230d      	movs	r3, #13
 8003cbe:	617b      	str	r3, [r7, #20]
 8003cc0:	e04c      	b.n	8003d5c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8003cc2:	68bb      	ldr	r3, [r7, #8]
 8003cc4:	4a33      	ldr	r2, [pc, #204]	; (8003d94 <USB_SetTurnaroundTime+0x128>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d306      	bcc.n	8003cd8 <USB_SetTurnaroundTime+0x6c>
 8003cca:	68bb      	ldr	r3, [r7, #8]
 8003ccc:	4a32      	ldr	r2, [pc, #200]	; (8003d98 <USB_SetTurnaroundTime+0x12c>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d802      	bhi.n	8003cd8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8003cd2:	230c      	movs	r3, #12
 8003cd4:	617b      	str	r3, [r7, #20]
 8003cd6:	e041      	b.n	8003d5c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003cd8:	68bb      	ldr	r3, [r7, #8]
 8003cda:	4a2f      	ldr	r2, [pc, #188]	; (8003d98 <USB_SetTurnaroundTime+0x12c>)
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d906      	bls.n	8003cee <USB_SetTurnaroundTime+0x82>
 8003ce0:	68bb      	ldr	r3, [r7, #8]
 8003ce2:	4a2e      	ldr	r2, [pc, #184]	; (8003d9c <USB_SetTurnaroundTime+0x130>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d802      	bhi.n	8003cee <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8003ce8:	230b      	movs	r3, #11
 8003cea:	617b      	str	r3, [r7, #20]
 8003cec:	e036      	b.n	8003d5c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8003cee:	68bb      	ldr	r3, [r7, #8]
 8003cf0:	4a2a      	ldr	r2, [pc, #168]	; (8003d9c <USB_SetTurnaroundTime+0x130>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d906      	bls.n	8003d04 <USB_SetTurnaroundTime+0x98>
 8003cf6:	68bb      	ldr	r3, [r7, #8]
 8003cf8:	4a29      	ldr	r2, [pc, #164]	; (8003da0 <USB_SetTurnaroundTime+0x134>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d802      	bhi.n	8003d04 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8003cfe:	230a      	movs	r3, #10
 8003d00:	617b      	str	r3, [r7, #20]
 8003d02:	e02b      	b.n	8003d5c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8003d04:	68bb      	ldr	r3, [r7, #8]
 8003d06:	4a26      	ldr	r2, [pc, #152]	; (8003da0 <USB_SetTurnaroundTime+0x134>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d906      	bls.n	8003d1a <USB_SetTurnaroundTime+0xae>
 8003d0c:	68bb      	ldr	r3, [r7, #8]
 8003d0e:	4a25      	ldr	r2, [pc, #148]	; (8003da4 <USB_SetTurnaroundTime+0x138>)
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d202      	bcs.n	8003d1a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8003d14:	2309      	movs	r3, #9
 8003d16:	617b      	str	r3, [r7, #20]
 8003d18:	e020      	b.n	8003d5c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8003d1a:	68bb      	ldr	r3, [r7, #8]
 8003d1c:	4a21      	ldr	r2, [pc, #132]	; (8003da4 <USB_SetTurnaroundTime+0x138>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d306      	bcc.n	8003d30 <USB_SetTurnaroundTime+0xc4>
 8003d22:	68bb      	ldr	r3, [r7, #8]
 8003d24:	4a20      	ldr	r2, [pc, #128]	; (8003da8 <USB_SetTurnaroundTime+0x13c>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d802      	bhi.n	8003d30 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8003d2a:	2308      	movs	r3, #8
 8003d2c:	617b      	str	r3, [r7, #20]
 8003d2e:	e015      	b.n	8003d5c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003d30:	68bb      	ldr	r3, [r7, #8]
 8003d32:	4a1d      	ldr	r2, [pc, #116]	; (8003da8 <USB_SetTurnaroundTime+0x13c>)
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d906      	bls.n	8003d46 <USB_SetTurnaroundTime+0xda>
 8003d38:	68bb      	ldr	r3, [r7, #8]
 8003d3a:	4a1c      	ldr	r2, [pc, #112]	; (8003dac <USB_SetTurnaroundTime+0x140>)
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d202      	bcs.n	8003d46 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8003d40:	2307      	movs	r3, #7
 8003d42:	617b      	str	r3, [r7, #20]
 8003d44:	e00a      	b.n	8003d5c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8003d46:	2306      	movs	r3, #6
 8003d48:	617b      	str	r3, [r7, #20]
 8003d4a:	e007      	b.n	8003d5c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8003d4c:	79fb      	ldrb	r3, [r7, #7]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d102      	bne.n	8003d58 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8003d52:	2309      	movs	r3, #9
 8003d54:	617b      	str	r3, [r7, #20]
 8003d56:	e001      	b.n	8003d5c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003d58:	2309      	movs	r3, #9
 8003d5a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	68db      	ldr	r3, [r3, #12]
 8003d60:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	68da      	ldr	r2, [r3, #12]
 8003d6c:	697b      	ldr	r3, [r7, #20]
 8003d6e:	029b      	lsls	r3, r3, #10
 8003d70:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8003d74:	431a      	orrs	r2, r3
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003d7a:	2300      	movs	r3, #0
}
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	371c      	adds	r7, #28
 8003d80:	46bd      	mov	sp, r7
 8003d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d86:	4770      	bx	lr
 8003d88:	00d8acbf 	.word	0x00d8acbf
 8003d8c:	00e4e1c0 	.word	0x00e4e1c0
 8003d90:	00f42400 	.word	0x00f42400
 8003d94:	01067380 	.word	0x01067380
 8003d98:	011a499f 	.word	0x011a499f
 8003d9c:	01312cff 	.word	0x01312cff
 8003da0:	014ca43f 	.word	0x014ca43f
 8003da4:	016e3600 	.word	0x016e3600
 8003da8:	01a6ab1f 	.word	0x01a6ab1f
 8003dac:	01e84800 	.word	0x01e84800

08003db0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003db0:	b480      	push	{r7}
 8003db2:	b083      	sub	sp, #12
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	689b      	ldr	r3, [r3, #8]
 8003dbc:	f043 0201 	orr.w	r2, r3, #1
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003dc4:	2300      	movs	r3, #0
}
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	370c      	adds	r7, #12
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd0:	4770      	bx	lr

08003dd2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003dd2:	b480      	push	{r7}
 8003dd4:	b083      	sub	sp, #12
 8003dd6:	af00      	add	r7, sp, #0
 8003dd8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	689b      	ldr	r3, [r3, #8]
 8003dde:	f023 0201 	bic.w	r2, r3, #1
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003de6:	2300      	movs	r3, #0
}
 8003de8:	4618      	mov	r0, r3
 8003dea:	370c      	adds	r7, #12
 8003dec:	46bd      	mov	sp, r7
 8003dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df2:	4770      	bx	lr

08003df4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b084      	sub	sp, #16
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
 8003dfc:	460b      	mov	r3, r1
 8003dfe:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003e00:	2300      	movs	r3, #0
 8003e02:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	68db      	ldr	r3, [r3, #12]
 8003e08:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003e10:	78fb      	ldrb	r3, [r7, #3]
 8003e12:	2b01      	cmp	r3, #1
 8003e14:	d115      	bne.n	8003e42 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	68db      	ldr	r3, [r3, #12]
 8003e1a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8003e22:	200a      	movs	r0, #10
 8003e24:	f7fc fdac 	bl	8000980 <HAL_Delay>
      ms += 10U;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	330a      	adds	r3, #10
 8003e2c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8003e2e:	6878      	ldr	r0, [r7, #4]
 8003e30:	f001 f939 	bl	80050a6 <USB_GetMode>
 8003e34:	4603      	mov	r3, r0
 8003e36:	2b01      	cmp	r3, #1
 8003e38:	d01e      	beq.n	8003e78 <USB_SetCurrentMode+0x84>
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	2bc7      	cmp	r3, #199	; 0xc7
 8003e3e:	d9f0      	bls.n	8003e22 <USB_SetCurrentMode+0x2e>
 8003e40:	e01a      	b.n	8003e78 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003e42:	78fb      	ldrb	r3, [r7, #3]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d115      	bne.n	8003e74 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	68db      	ldr	r3, [r3, #12]
 8003e4c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8003e54:	200a      	movs	r0, #10
 8003e56:	f7fc fd93 	bl	8000980 <HAL_Delay>
      ms += 10U;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	330a      	adds	r3, #10
 8003e5e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8003e60:	6878      	ldr	r0, [r7, #4]
 8003e62:	f001 f920 	bl	80050a6 <USB_GetMode>
 8003e66:	4603      	mov	r3, r0
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d005      	beq.n	8003e78 <USB_SetCurrentMode+0x84>
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	2bc7      	cmp	r3, #199	; 0xc7
 8003e70:	d9f0      	bls.n	8003e54 <USB_SetCurrentMode+0x60>
 8003e72:	e001      	b.n	8003e78 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003e74:	2301      	movs	r3, #1
 8003e76:	e005      	b.n	8003e84 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	2bc8      	cmp	r3, #200	; 0xc8
 8003e7c:	d101      	bne.n	8003e82 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003e7e:	2301      	movs	r3, #1
 8003e80:	e000      	b.n	8003e84 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003e82:	2300      	movs	r3, #0
}
 8003e84:	4618      	mov	r0, r3
 8003e86:	3710      	adds	r7, #16
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	bd80      	pop	{r7, pc}

08003e8c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003e8c:	b084      	sub	sp, #16
 8003e8e:	b580      	push	{r7, lr}
 8003e90:	b086      	sub	sp, #24
 8003e92:	af00      	add	r7, sp, #0
 8003e94:	6078      	str	r0, [r7, #4]
 8003e96:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003e9a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	613b      	str	r3, [r7, #16]
 8003eaa:	e009      	b.n	8003ec0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003eac:	687a      	ldr	r2, [r7, #4]
 8003eae:	693b      	ldr	r3, [r7, #16]
 8003eb0:	3340      	adds	r3, #64	; 0x40
 8003eb2:	009b      	lsls	r3, r3, #2
 8003eb4:	4413      	add	r3, r2
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003eba:	693b      	ldr	r3, [r7, #16]
 8003ebc:	3301      	adds	r3, #1
 8003ebe:	613b      	str	r3, [r7, #16]
 8003ec0:	693b      	ldr	r3, [r7, #16]
 8003ec2:	2b0e      	cmp	r3, #14
 8003ec4:	d9f2      	bls.n	8003eac <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003ec6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d11c      	bne.n	8003f08 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ed4:	685b      	ldr	r3, [r3, #4]
 8003ed6:	68fa      	ldr	r2, [r7, #12]
 8003ed8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003edc:	f043 0302 	orr.w	r3, r3, #2
 8003ee0:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ee6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ef2:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003efe:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	639a      	str	r2, [r3, #56]	; 0x38
 8003f06:	e00b      	b.n	8003f20 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f0c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f18:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003f26:	461a      	mov	r2, r3
 8003f28:	2300      	movs	r3, #0
 8003f2a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003f2c:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8003f30:	2b01      	cmp	r3, #1
 8003f32:	d10d      	bne.n	8003f50 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003f34:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d104      	bne.n	8003f46 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003f3c:	2100      	movs	r1, #0
 8003f3e:	6878      	ldr	r0, [r7, #4]
 8003f40:	f000 f968 	bl	8004214 <USB_SetDevSpeed>
 8003f44:	e008      	b.n	8003f58 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003f46:	2101      	movs	r1, #1
 8003f48:	6878      	ldr	r0, [r7, #4]
 8003f4a:	f000 f963 	bl	8004214 <USB_SetDevSpeed>
 8003f4e:	e003      	b.n	8003f58 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003f50:	2103      	movs	r1, #3
 8003f52:	6878      	ldr	r0, [r7, #4]
 8003f54:	f000 f95e 	bl	8004214 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003f58:	2110      	movs	r1, #16
 8003f5a:	6878      	ldr	r0, [r7, #4]
 8003f5c:	f000 f8fa 	bl	8004154 <USB_FlushTxFifo>
 8003f60:	4603      	mov	r3, r0
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d001      	beq.n	8003f6a <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8003f66:	2301      	movs	r3, #1
 8003f68:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003f6a:	6878      	ldr	r0, [r7, #4]
 8003f6c:	f000 f924 	bl	80041b8 <USB_FlushRxFifo>
 8003f70:	4603      	mov	r3, r0
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d001      	beq.n	8003f7a <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8003f76:	2301      	movs	r3, #1
 8003f78:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f80:	461a      	mov	r2, r3
 8003f82:	2300      	movs	r3, #0
 8003f84:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f8c:	461a      	mov	r2, r3
 8003f8e:	2300      	movs	r3, #0
 8003f90:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f98:	461a      	mov	r2, r3
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	613b      	str	r3, [r7, #16]
 8003fa2:	e043      	b.n	800402c <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003fa4:	693b      	ldr	r3, [r7, #16]
 8003fa6:	015a      	lsls	r2, r3, #5
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	4413      	add	r3, r2
 8003fac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003fb6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003fba:	d118      	bne.n	8003fee <USB_DevInit+0x162>
    {
      if (i == 0U)
 8003fbc:	693b      	ldr	r3, [r7, #16]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d10a      	bne.n	8003fd8 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003fc2:	693b      	ldr	r3, [r7, #16]
 8003fc4:	015a      	lsls	r2, r3, #5
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	4413      	add	r3, r2
 8003fca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fce:	461a      	mov	r2, r3
 8003fd0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003fd4:	6013      	str	r3, [r2, #0]
 8003fd6:	e013      	b.n	8004000 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003fd8:	693b      	ldr	r3, [r7, #16]
 8003fda:	015a      	lsls	r2, r3, #5
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	4413      	add	r3, r2
 8003fe0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fe4:	461a      	mov	r2, r3
 8003fe6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003fea:	6013      	str	r3, [r2, #0]
 8003fec:	e008      	b.n	8004000 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003fee:	693b      	ldr	r3, [r7, #16]
 8003ff0:	015a      	lsls	r2, r3, #5
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	4413      	add	r3, r2
 8003ff6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ffa:	461a      	mov	r2, r3
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004000:	693b      	ldr	r3, [r7, #16]
 8004002:	015a      	lsls	r2, r3, #5
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	4413      	add	r3, r2
 8004008:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800400c:	461a      	mov	r2, r3
 800400e:	2300      	movs	r3, #0
 8004010:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004012:	693b      	ldr	r3, [r7, #16]
 8004014:	015a      	lsls	r2, r3, #5
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	4413      	add	r3, r2
 800401a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800401e:	461a      	mov	r2, r3
 8004020:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004024:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004026:	693b      	ldr	r3, [r7, #16]
 8004028:	3301      	adds	r3, #1
 800402a:	613b      	str	r3, [r7, #16]
 800402c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004030:	461a      	mov	r2, r3
 8004032:	693b      	ldr	r3, [r7, #16]
 8004034:	4293      	cmp	r3, r2
 8004036:	d3b5      	bcc.n	8003fa4 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004038:	2300      	movs	r3, #0
 800403a:	613b      	str	r3, [r7, #16]
 800403c:	e043      	b.n	80040c6 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800403e:	693b      	ldr	r3, [r7, #16]
 8004040:	015a      	lsls	r2, r3, #5
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	4413      	add	r3, r2
 8004046:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004050:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004054:	d118      	bne.n	8004088 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8004056:	693b      	ldr	r3, [r7, #16]
 8004058:	2b00      	cmp	r3, #0
 800405a:	d10a      	bne.n	8004072 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800405c:	693b      	ldr	r3, [r7, #16]
 800405e:	015a      	lsls	r2, r3, #5
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	4413      	add	r3, r2
 8004064:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004068:	461a      	mov	r2, r3
 800406a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800406e:	6013      	str	r3, [r2, #0]
 8004070:	e013      	b.n	800409a <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004072:	693b      	ldr	r3, [r7, #16]
 8004074:	015a      	lsls	r2, r3, #5
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	4413      	add	r3, r2
 800407a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800407e:	461a      	mov	r2, r3
 8004080:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004084:	6013      	str	r3, [r2, #0]
 8004086:	e008      	b.n	800409a <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004088:	693b      	ldr	r3, [r7, #16]
 800408a:	015a      	lsls	r2, r3, #5
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	4413      	add	r3, r2
 8004090:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004094:	461a      	mov	r2, r3
 8004096:	2300      	movs	r3, #0
 8004098:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800409a:	693b      	ldr	r3, [r7, #16]
 800409c:	015a      	lsls	r2, r3, #5
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	4413      	add	r3, r2
 80040a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040a6:	461a      	mov	r2, r3
 80040a8:	2300      	movs	r3, #0
 80040aa:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80040ac:	693b      	ldr	r3, [r7, #16]
 80040ae:	015a      	lsls	r2, r3, #5
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	4413      	add	r3, r2
 80040b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040b8:	461a      	mov	r2, r3
 80040ba:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80040be:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80040c0:	693b      	ldr	r3, [r7, #16]
 80040c2:	3301      	adds	r3, #1
 80040c4:	613b      	str	r3, [r7, #16]
 80040c6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80040ca:	461a      	mov	r2, r3
 80040cc:	693b      	ldr	r3, [r7, #16]
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d3b5      	bcc.n	800403e <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040d8:	691b      	ldr	r3, [r3, #16]
 80040da:	68fa      	ldr	r2, [r7, #12]
 80040dc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80040e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80040e4:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2200      	movs	r2, #0
 80040ea:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80040f2:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80040f4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d105      	bne.n	8004108 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	699b      	ldr	r3, [r3, #24]
 8004100:	f043 0210 	orr.w	r2, r3, #16
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	699a      	ldr	r2, [r3, #24]
 800410c:	4b10      	ldr	r3, [pc, #64]	; (8004150 <USB_DevInit+0x2c4>)
 800410e:	4313      	orrs	r3, r2
 8004110:	687a      	ldr	r2, [r7, #4]
 8004112:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004114:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8004118:	2b00      	cmp	r3, #0
 800411a:	d005      	beq.n	8004128 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	699b      	ldr	r3, [r3, #24]
 8004120:	f043 0208 	orr.w	r2, r3, #8
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004128:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800412c:	2b01      	cmp	r3, #1
 800412e:	d107      	bne.n	8004140 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	699b      	ldr	r3, [r3, #24]
 8004134:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004138:	f043 0304 	orr.w	r3, r3, #4
 800413c:	687a      	ldr	r2, [r7, #4]
 800413e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004140:	7dfb      	ldrb	r3, [r7, #23]
}
 8004142:	4618      	mov	r0, r3
 8004144:	3718      	adds	r7, #24
 8004146:	46bd      	mov	sp, r7
 8004148:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800414c:	b004      	add	sp, #16
 800414e:	4770      	bx	lr
 8004150:	803c3800 	.word	0x803c3800

08004154 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004154:	b480      	push	{r7}
 8004156:	b085      	sub	sp, #20
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
 800415c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800415e:	2300      	movs	r3, #0
 8004160:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	3301      	adds	r3, #1
 8004166:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800416e:	d901      	bls.n	8004174 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004170:	2303      	movs	r3, #3
 8004172:	e01b      	b.n	80041ac <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	691b      	ldr	r3, [r3, #16]
 8004178:	2b00      	cmp	r3, #0
 800417a:	daf2      	bge.n	8004162 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800417c:	2300      	movs	r3, #0
 800417e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	019b      	lsls	r3, r3, #6
 8004184:	f043 0220 	orr.w	r2, r3, #32
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	3301      	adds	r3, #1
 8004190:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8004198:	d901      	bls.n	800419e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800419a:	2303      	movs	r3, #3
 800419c:	e006      	b.n	80041ac <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	691b      	ldr	r3, [r3, #16]
 80041a2:	f003 0320 	and.w	r3, r3, #32
 80041a6:	2b20      	cmp	r3, #32
 80041a8:	d0f0      	beq.n	800418c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80041aa:	2300      	movs	r3, #0
}
 80041ac:	4618      	mov	r0, r3
 80041ae:	3714      	adds	r7, #20
 80041b0:	46bd      	mov	sp, r7
 80041b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b6:	4770      	bx	lr

080041b8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80041b8:	b480      	push	{r7}
 80041ba:	b085      	sub	sp, #20
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80041c0:	2300      	movs	r3, #0
 80041c2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	3301      	adds	r3, #1
 80041c8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80041d0:	d901      	bls.n	80041d6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80041d2:	2303      	movs	r3, #3
 80041d4:	e018      	b.n	8004208 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	691b      	ldr	r3, [r3, #16]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	daf2      	bge.n	80041c4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80041de:	2300      	movs	r3, #0
 80041e0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2210      	movs	r2, #16
 80041e6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	3301      	adds	r3, #1
 80041ec:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80041f4:	d901      	bls.n	80041fa <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80041f6:	2303      	movs	r3, #3
 80041f8:	e006      	b.n	8004208 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	691b      	ldr	r3, [r3, #16]
 80041fe:	f003 0310 	and.w	r3, r3, #16
 8004202:	2b10      	cmp	r3, #16
 8004204:	d0f0      	beq.n	80041e8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004206:	2300      	movs	r3, #0
}
 8004208:	4618      	mov	r0, r3
 800420a:	3714      	adds	r7, #20
 800420c:	46bd      	mov	sp, r7
 800420e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004212:	4770      	bx	lr

08004214 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004214:	b480      	push	{r7}
 8004216:	b085      	sub	sp, #20
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
 800421c:	460b      	mov	r3, r1
 800421e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800422a:	681a      	ldr	r2, [r3, #0]
 800422c:	78fb      	ldrb	r3, [r7, #3]
 800422e:	68f9      	ldr	r1, [r7, #12]
 8004230:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004234:	4313      	orrs	r3, r2
 8004236:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004238:	2300      	movs	r3, #0
}
 800423a:	4618      	mov	r0, r3
 800423c:	3714      	adds	r7, #20
 800423e:	46bd      	mov	sp, r7
 8004240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004244:	4770      	bx	lr

08004246 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8004246:	b480      	push	{r7}
 8004248:	b087      	sub	sp, #28
 800424a:	af00      	add	r7, sp, #0
 800424c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004252:	693b      	ldr	r3, [r7, #16]
 8004254:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004258:	689b      	ldr	r3, [r3, #8]
 800425a:	f003 0306 	and.w	r3, r3, #6
 800425e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d102      	bne.n	800426c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004266:	2300      	movs	r3, #0
 8004268:	75fb      	strb	r3, [r7, #23]
 800426a:	e00a      	b.n	8004282 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	2b02      	cmp	r3, #2
 8004270:	d002      	beq.n	8004278 <USB_GetDevSpeed+0x32>
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	2b06      	cmp	r3, #6
 8004276:	d102      	bne.n	800427e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004278:	2302      	movs	r3, #2
 800427a:	75fb      	strb	r3, [r7, #23]
 800427c:	e001      	b.n	8004282 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800427e:	230f      	movs	r3, #15
 8004280:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004282:	7dfb      	ldrb	r3, [r7, #23]
}
 8004284:	4618      	mov	r0, r3
 8004286:	371c      	adds	r7, #28
 8004288:	46bd      	mov	sp, r7
 800428a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428e:	4770      	bx	lr

08004290 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004290:	b480      	push	{r7}
 8004292:	b085      	sub	sp, #20
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
 8004298:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	781b      	ldrb	r3, [r3, #0]
 80042a2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	785b      	ldrb	r3, [r3, #1]
 80042a8:	2b01      	cmp	r3, #1
 80042aa:	d13a      	bne.n	8004322 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042b2:	69da      	ldr	r2, [r3, #28]
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	781b      	ldrb	r3, [r3, #0]
 80042b8:	f003 030f 	and.w	r3, r3, #15
 80042bc:	2101      	movs	r1, #1
 80042be:	fa01 f303 	lsl.w	r3, r1, r3
 80042c2:	b29b      	uxth	r3, r3
 80042c4:	68f9      	ldr	r1, [r7, #12]
 80042c6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80042ca:	4313      	orrs	r3, r2
 80042cc:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80042ce:	68bb      	ldr	r3, [r7, #8]
 80042d0:	015a      	lsls	r2, r3, #5
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	4413      	add	r3, r2
 80042d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d155      	bne.n	8004390 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80042e4:	68bb      	ldr	r3, [r7, #8]
 80042e6:	015a      	lsls	r2, r3, #5
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	4413      	add	r3, r2
 80042ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042f0:	681a      	ldr	r2, [r3, #0]
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	689b      	ldr	r3, [r3, #8]
 80042f6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	791b      	ldrb	r3, [r3, #4]
 80042fe:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004300:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004302:	68bb      	ldr	r3, [r7, #8]
 8004304:	059b      	lsls	r3, r3, #22
 8004306:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004308:	4313      	orrs	r3, r2
 800430a:	68ba      	ldr	r2, [r7, #8]
 800430c:	0151      	lsls	r1, r2, #5
 800430e:	68fa      	ldr	r2, [r7, #12]
 8004310:	440a      	add	r2, r1
 8004312:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004316:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800431a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800431e:	6013      	str	r3, [r2, #0]
 8004320:	e036      	b.n	8004390 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004328:	69da      	ldr	r2, [r3, #28]
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	781b      	ldrb	r3, [r3, #0]
 800432e:	f003 030f 	and.w	r3, r3, #15
 8004332:	2101      	movs	r1, #1
 8004334:	fa01 f303 	lsl.w	r3, r1, r3
 8004338:	041b      	lsls	r3, r3, #16
 800433a:	68f9      	ldr	r1, [r7, #12]
 800433c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004340:	4313      	orrs	r3, r2
 8004342:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004344:	68bb      	ldr	r3, [r7, #8]
 8004346:	015a      	lsls	r2, r3, #5
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	4413      	add	r3, r2
 800434c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004356:	2b00      	cmp	r3, #0
 8004358:	d11a      	bne.n	8004390 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800435a:	68bb      	ldr	r3, [r7, #8]
 800435c:	015a      	lsls	r2, r3, #5
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	4413      	add	r3, r2
 8004362:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004366:	681a      	ldr	r2, [r3, #0]
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	689b      	ldr	r3, [r3, #8]
 800436c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	791b      	ldrb	r3, [r3, #4]
 8004374:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004376:	430b      	orrs	r3, r1
 8004378:	4313      	orrs	r3, r2
 800437a:	68ba      	ldr	r2, [r7, #8]
 800437c:	0151      	lsls	r1, r2, #5
 800437e:	68fa      	ldr	r2, [r7, #12]
 8004380:	440a      	add	r2, r1
 8004382:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004386:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800438a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800438e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004390:	2300      	movs	r3, #0
}
 8004392:	4618      	mov	r0, r3
 8004394:	3714      	adds	r7, #20
 8004396:	46bd      	mov	sp, r7
 8004398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439c:	4770      	bx	lr
	...

080043a0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80043a0:	b480      	push	{r7}
 80043a2:	b085      	sub	sp, #20
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
 80043a8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	781b      	ldrb	r3, [r3, #0]
 80043b2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	785b      	ldrb	r3, [r3, #1]
 80043b8:	2b01      	cmp	r3, #1
 80043ba:	d161      	bne.n	8004480 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80043bc:	68bb      	ldr	r3, [r7, #8]
 80043be:	015a      	lsls	r2, r3, #5
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	4413      	add	r3, r2
 80043c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80043ce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80043d2:	d11f      	bne.n	8004414 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80043d4:	68bb      	ldr	r3, [r7, #8]
 80043d6:	015a      	lsls	r2, r3, #5
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	4413      	add	r3, r2
 80043dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	68ba      	ldr	r2, [r7, #8]
 80043e4:	0151      	lsls	r1, r2, #5
 80043e6:	68fa      	ldr	r2, [r7, #12]
 80043e8:	440a      	add	r2, r1
 80043ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80043ee:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80043f2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80043f4:	68bb      	ldr	r3, [r7, #8]
 80043f6:	015a      	lsls	r2, r3, #5
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	4413      	add	r3, r2
 80043fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	68ba      	ldr	r2, [r7, #8]
 8004404:	0151      	lsls	r1, r2, #5
 8004406:	68fa      	ldr	r2, [r7, #12]
 8004408:	440a      	add	r2, r1
 800440a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800440e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004412:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800441a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	781b      	ldrb	r3, [r3, #0]
 8004420:	f003 030f 	and.w	r3, r3, #15
 8004424:	2101      	movs	r1, #1
 8004426:	fa01 f303 	lsl.w	r3, r1, r3
 800442a:	b29b      	uxth	r3, r3
 800442c:	43db      	mvns	r3, r3
 800442e:	68f9      	ldr	r1, [r7, #12]
 8004430:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004434:	4013      	ands	r3, r2
 8004436:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800443e:	69da      	ldr	r2, [r3, #28]
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	781b      	ldrb	r3, [r3, #0]
 8004444:	f003 030f 	and.w	r3, r3, #15
 8004448:	2101      	movs	r1, #1
 800444a:	fa01 f303 	lsl.w	r3, r1, r3
 800444e:	b29b      	uxth	r3, r3
 8004450:	43db      	mvns	r3, r3
 8004452:	68f9      	ldr	r1, [r7, #12]
 8004454:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004458:	4013      	ands	r3, r2
 800445a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800445c:	68bb      	ldr	r3, [r7, #8]
 800445e:	015a      	lsls	r2, r3, #5
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	4413      	add	r3, r2
 8004464:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004468:	681a      	ldr	r2, [r3, #0]
 800446a:	68bb      	ldr	r3, [r7, #8]
 800446c:	0159      	lsls	r1, r3, #5
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	440b      	add	r3, r1
 8004472:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004476:	4619      	mov	r1, r3
 8004478:	4b35      	ldr	r3, [pc, #212]	; (8004550 <USB_DeactivateEndpoint+0x1b0>)
 800447a:	4013      	ands	r3, r2
 800447c:	600b      	str	r3, [r1, #0]
 800447e:	e060      	b.n	8004542 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004480:	68bb      	ldr	r3, [r7, #8]
 8004482:	015a      	lsls	r2, r3, #5
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	4413      	add	r3, r2
 8004488:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004492:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004496:	d11f      	bne.n	80044d8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004498:	68bb      	ldr	r3, [r7, #8]
 800449a:	015a      	lsls	r2, r3, #5
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	4413      	add	r3, r2
 80044a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	68ba      	ldr	r2, [r7, #8]
 80044a8:	0151      	lsls	r1, r2, #5
 80044aa:	68fa      	ldr	r2, [r7, #12]
 80044ac:	440a      	add	r2, r1
 80044ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80044b2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80044b6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80044b8:	68bb      	ldr	r3, [r7, #8]
 80044ba:	015a      	lsls	r2, r3, #5
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	4413      	add	r3, r2
 80044c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	68ba      	ldr	r2, [r7, #8]
 80044c8:	0151      	lsls	r1, r2, #5
 80044ca:	68fa      	ldr	r2, [r7, #12]
 80044cc:	440a      	add	r2, r1
 80044ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80044d2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80044d6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044de:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	781b      	ldrb	r3, [r3, #0]
 80044e4:	f003 030f 	and.w	r3, r3, #15
 80044e8:	2101      	movs	r1, #1
 80044ea:	fa01 f303 	lsl.w	r3, r1, r3
 80044ee:	041b      	lsls	r3, r3, #16
 80044f0:	43db      	mvns	r3, r3
 80044f2:	68f9      	ldr	r1, [r7, #12]
 80044f4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80044f8:	4013      	ands	r3, r2
 80044fa:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004502:	69da      	ldr	r2, [r3, #28]
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	781b      	ldrb	r3, [r3, #0]
 8004508:	f003 030f 	and.w	r3, r3, #15
 800450c:	2101      	movs	r1, #1
 800450e:	fa01 f303 	lsl.w	r3, r1, r3
 8004512:	041b      	lsls	r3, r3, #16
 8004514:	43db      	mvns	r3, r3
 8004516:	68f9      	ldr	r1, [r7, #12]
 8004518:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800451c:	4013      	ands	r3, r2
 800451e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004520:	68bb      	ldr	r3, [r7, #8]
 8004522:	015a      	lsls	r2, r3, #5
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	4413      	add	r3, r2
 8004528:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800452c:	681a      	ldr	r2, [r3, #0]
 800452e:	68bb      	ldr	r3, [r7, #8]
 8004530:	0159      	lsls	r1, r3, #5
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	440b      	add	r3, r1
 8004536:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800453a:	4619      	mov	r1, r3
 800453c:	4b05      	ldr	r3, [pc, #20]	; (8004554 <USB_DeactivateEndpoint+0x1b4>)
 800453e:	4013      	ands	r3, r2
 8004540:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004542:	2300      	movs	r3, #0
}
 8004544:	4618      	mov	r0, r3
 8004546:	3714      	adds	r7, #20
 8004548:	46bd      	mov	sp, r7
 800454a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454e:	4770      	bx	lr
 8004550:	ec337800 	.word	0xec337800
 8004554:	eff37800 	.word	0xeff37800

08004558 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b08a      	sub	sp, #40	; 0x28
 800455c:	af02      	add	r7, sp, #8
 800455e:	60f8      	str	r0, [r7, #12]
 8004560:	60b9      	str	r1, [r7, #8]
 8004562:	4613      	mov	r3, r2
 8004564:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800456a:	68bb      	ldr	r3, [r7, #8]
 800456c:	781b      	ldrb	r3, [r3, #0]
 800456e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004570:	68bb      	ldr	r3, [r7, #8]
 8004572:	785b      	ldrb	r3, [r3, #1]
 8004574:	2b01      	cmp	r3, #1
 8004576:	f040 817a 	bne.w	800486e <USB_EPStartXfer+0x316>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800457a:	68bb      	ldr	r3, [r7, #8]
 800457c:	691b      	ldr	r3, [r3, #16]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d132      	bne.n	80045e8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004582:	69bb      	ldr	r3, [r7, #24]
 8004584:	015a      	lsls	r2, r3, #5
 8004586:	69fb      	ldr	r3, [r7, #28]
 8004588:	4413      	add	r3, r2
 800458a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800458e:	691b      	ldr	r3, [r3, #16]
 8004590:	69ba      	ldr	r2, [r7, #24]
 8004592:	0151      	lsls	r1, r2, #5
 8004594:	69fa      	ldr	r2, [r7, #28]
 8004596:	440a      	add	r2, r1
 8004598:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800459c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80045a0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80045a4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80045a6:	69bb      	ldr	r3, [r7, #24]
 80045a8:	015a      	lsls	r2, r3, #5
 80045aa:	69fb      	ldr	r3, [r7, #28]
 80045ac:	4413      	add	r3, r2
 80045ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045b2:	691b      	ldr	r3, [r3, #16]
 80045b4:	69ba      	ldr	r2, [r7, #24]
 80045b6:	0151      	lsls	r1, r2, #5
 80045b8:	69fa      	ldr	r2, [r7, #28]
 80045ba:	440a      	add	r2, r1
 80045bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80045c0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80045c4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80045c6:	69bb      	ldr	r3, [r7, #24]
 80045c8:	015a      	lsls	r2, r3, #5
 80045ca:	69fb      	ldr	r3, [r7, #28]
 80045cc:	4413      	add	r3, r2
 80045ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045d2:	691b      	ldr	r3, [r3, #16]
 80045d4:	69ba      	ldr	r2, [r7, #24]
 80045d6:	0151      	lsls	r1, r2, #5
 80045d8:	69fa      	ldr	r2, [r7, #28]
 80045da:	440a      	add	r2, r1
 80045dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80045e0:	0cdb      	lsrs	r3, r3, #19
 80045e2:	04db      	lsls	r3, r3, #19
 80045e4:	6113      	str	r3, [r2, #16]
 80045e6:	e092      	b.n	800470e <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80045e8:	69bb      	ldr	r3, [r7, #24]
 80045ea:	015a      	lsls	r2, r3, #5
 80045ec:	69fb      	ldr	r3, [r7, #28]
 80045ee:	4413      	add	r3, r2
 80045f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045f4:	691b      	ldr	r3, [r3, #16]
 80045f6:	69ba      	ldr	r2, [r7, #24]
 80045f8:	0151      	lsls	r1, r2, #5
 80045fa:	69fa      	ldr	r2, [r7, #28]
 80045fc:	440a      	add	r2, r1
 80045fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004602:	0cdb      	lsrs	r3, r3, #19
 8004604:	04db      	lsls	r3, r3, #19
 8004606:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004608:	69bb      	ldr	r3, [r7, #24]
 800460a:	015a      	lsls	r2, r3, #5
 800460c:	69fb      	ldr	r3, [r7, #28]
 800460e:	4413      	add	r3, r2
 8004610:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004614:	691b      	ldr	r3, [r3, #16]
 8004616:	69ba      	ldr	r2, [r7, #24]
 8004618:	0151      	lsls	r1, r2, #5
 800461a:	69fa      	ldr	r2, [r7, #28]
 800461c:	440a      	add	r2, r1
 800461e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004622:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004626:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800462a:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 800462c:	69bb      	ldr	r3, [r7, #24]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d11a      	bne.n	8004668 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8004632:	68bb      	ldr	r3, [r7, #8]
 8004634:	691a      	ldr	r2, [r3, #16]
 8004636:	68bb      	ldr	r3, [r7, #8]
 8004638:	689b      	ldr	r3, [r3, #8]
 800463a:	429a      	cmp	r2, r3
 800463c:	d903      	bls.n	8004646 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800463e:	68bb      	ldr	r3, [r7, #8]
 8004640:	689a      	ldr	r2, [r3, #8]
 8004642:	68bb      	ldr	r3, [r7, #8]
 8004644:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004646:	69bb      	ldr	r3, [r7, #24]
 8004648:	015a      	lsls	r2, r3, #5
 800464a:	69fb      	ldr	r3, [r7, #28]
 800464c:	4413      	add	r3, r2
 800464e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004652:	691b      	ldr	r3, [r3, #16]
 8004654:	69ba      	ldr	r2, [r7, #24]
 8004656:	0151      	lsls	r1, r2, #5
 8004658:	69fa      	ldr	r2, [r7, #28]
 800465a:	440a      	add	r2, r1
 800465c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004660:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004664:	6113      	str	r3, [r2, #16]
 8004666:	e01b      	b.n	80046a0 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004668:	69bb      	ldr	r3, [r7, #24]
 800466a:	015a      	lsls	r2, r3, #5
 800466c:	69fb      	ldr	r3, [r7, #28]
 800466e:	4413      	add	r3, r2
 8004670:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004674:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004676:	68bb      	ldr	r3, [r7, #8]
 8004678:	6919      	ldr	r1, [r3, #16]
 800467a:	68bb      	ldr	r3, [r7, #8]
 800467c:	689b      	ldr	r3, [r3, #8]
 800467e:	440b      	add	r3, r1
 8004680:	1e59      	subs	r1, r3, #1
 8004682:	68bb      	ldr	r3, [r7, #8]
 8004684:	689b      	ldr	r3, [r3, #8]
 8004686:	fbb1 f3f3 	udiv	r3, r1, r3
 800468a:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800468c:	4ba2      	ldr	r3, [pc, #648]	; (8004918 <USB_EPStartXfer+0x3c0>)
 800468e:	400b      	ands	r3, r1
 8004690:	69b9      	ldr	r1, [r7, #24]
 8004692:	0148      	lsls	r0, r1, #5
 8004694:	69f9      	ldr	r1, [r7, #28]
 8004696:	4401      	add	r1, r0
 8004698:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800469c:	4313      	orrs	r3, r2
 800469e:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80046a0:	69bb      	ldr	r3, [r7, #24]
 80046a2:	015a      	lsls	r2, r3, #5
 80046a4:	69fb      	ldr	r3, [r7, #28]
 80046a6:	4413      	add	r3, r2
 80046a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046ac:	691a      	ldr	r2, [r3, #16]
 80046ae:	68bb      	ldr	r3, [r7, #8]
 80046b0:	691b      	ldr	r3, [r3, #16]
 80046b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80046b6:	69b9      	ldr	r1, [r7, #24]
 80046b8:	0148      	lsls	r0, r1, #5
 80046ba:	69f9      	ldr	r1, [r7, #28]
 80046bc:	4401      	add	r1, r0
 80046be:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80046c2:	4313      	orrs	r3, r2
 80046c4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80046c6:	68bb      	ldr	r3, [r7, #8]
 80046c8:	791b      	ldrb	r3, [r3, #4]
 80046ca:	2b01      	cmp	r3, #1
 80046cc:	d11f      	bne.n	800470e <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80046ce:	69bb      	ldr	r3, [r7, #24]
 80046d0:	015a      	lsls	r2, r3, #5
 80046d2:	69fb      	ldr	r3, [r7, #28]
 80046d4:	4413      	add	r3, r2
 80046d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046da:	691b      	ldr	r3, [r3, #16]
 80046dc:	69ba      	ldr	r2, [r7, #24]
 80046de:	0151      	lsls	r1, r2, #5
 80046e0:	69fa      	ldr	r2, [r7, #28]
 80046e2:	440a      	add	r2, r1
 80046e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80046e8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80046ec:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80046ee:	69bb      	ldr	r3, [r7, #24]
 80046f0:	015a      	lsls	r2, r3, #5
 80046f2:	69fb      	ldr	r3, [r7, #28]
 80046f4:	4413      	add	r3, r2
 80046f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046fa:	691b      	ldr	r3, [r3, #16]
 80046fc:	69ba      	ldr	r2, [r7, #24]
 80046fe:	0151      	lsls	r1, r2, #5
 8004700:	69fa      	ldr	r2, [r7, #28]
 8004702:	440a      	add	r2, r1
 8004704:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004708:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800470c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800470e:	79fb      	ldrb	r3, [r7, #7]
 8004710:	2b01      	cmp	r3, #1
 8004712:	d14b      	bne.n	80047ac <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004714:	68bb      	ldr	r3, [r7, #8]
 8004716:	69db      	ldr	r3, [r3, #28]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d009      	beq.n	8004730 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800471c:	69bb      	ldr	r3, [r7, #24]
 800471e:	015a      	lsls	r2, r3, #5
 8004720:	69fb      	ldr	r3, [r7, #28]
 8004722:	4413      	add	r3, r2
 8004724:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004728:	461a      	mov	r2, r3
 800472a:	68bb      	ldr	r3, [r7, #8]
 800472c:	69db      	ldr	r3, [r3, #28]
 800472e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004730:	68bb      	ldr	r3, [r7, #8]
 8004732:	791b      	ldrb	r3, [r3, #4]
 8004734:	2b01      	cmp	r3, #1
 8004736:	d128      	bne.n	800478a <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004738:	69fb      	ldr	r3, [r7, #28]
 800473a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800473e:	689b      	ldr	r3, [r3, #8]
 8004740:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004744:	2b00      	cmp	r3, #0
 8004746:	d110      	bne.n	800476a <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004748:	69bb      	ldr	r3, [r7, #24]
 800474a:	015a      	lsls	r2, r3, #5
 800474c:	69fb      	ldr	r3, [r7, #28]
 800474e:	4413      	add	r3, r2
 8004750:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	69ba      	ldr	r2, [r7, #24]
 8004758:	0151      	lsls	r1, r2, #5
 800475a:	69fa      	ldr	r2, [r7, #28]
 800475c:	440a      	add	r2, r1
 800475e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004762:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004766:	6013      	str	r3, [r2, #0]
 8004768:	e00f      	b.n	800478a <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800476a:	69bb      	ldr	r3, [r7, #24]
 800476c:	015a      	lsls	r2, r3, #5
 800476e:	69fb      	ldr	r3, [r7, #28]
 8004770:	4413      	add	r3, r2
 8004772:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	69ba      	ldr	r2, [r7, #24]
 800477a:	0151      	lsls	r1, r2, #5
 800477c:	69fa      	ldr	r2, [r7, #28]
 800477e:	440a      	add	r2, r1
 8004780:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004784:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004788:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800478a:	69bb      	ldr	r3, [r7, #24]
 800478c:	015a      	lsls	r2, r3, #5
 800478e:	69fb      	ldr	r3, [r7, #28]
 8004790:	4413      	add	r3, r2
 8004792:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	69ba      	ldr	r2, [r7, #24]
 800479a:	0151      	lsls	r1, r2, #5
 800479c:	69fa      	ldr	r2, [r7, #28]
 800479e:	440a      	add	r2, r1
 80047a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80047a4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80047a8:	6013      	str	r3, [r2, #0]
 80047aa:	e165      	b.n	8004a78 <USB_EPStartXfer+0x520>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80047ac:	69bb      	ldr	r3, [r7, #24]
 80047ae:	015a      	lsls	r2, r3, #5
 80047b0:	69fb      	ldr	r3, [r7, #28]
 80047b2:	4413      	add	r3, r2
 80047b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	69ba      	ldr	r2, [r7, #24]
 80047bc:	0151      	lsls	r1, r2, #5
 80047be:	69fa      	ldr	r2, [r7, #28]
 80047c0:	440a      	add	r2, r1
 80047c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80047c6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80047ca:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80047cc:	68bb      	ldr	r3, [r7, #8]
 80047ce:	791b      	ldrb	r3, [r3, #4]
 80047d0:	2b01      	cmp	r3, #1
 80047d2:	d015      	beq.n	8004800 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80047d4:	68bb      	ldr	r3, [r7, #8]
 80047d6:	691b      	ldr	r3, [r3, #16]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	f000 814d 	beq.w	8004a78 <USB_EPStartXfer+0x520>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80047de:	69fb      	ldr	r3, [r7, #28]
 80047e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80047e6:	68bb      	ldr	r3, [r7, #8]
 80047e8:	781b      	ldrb	r3, [r3, #0]
 80047ea:	f003 030f 	and.w	r3, r3, #15
 80047ee:	2101      	movs	r1, #1
 80047f0:	fa01 f303 	lsl.w	r3, r1, r3
 80047f4:	69f9      	ldr	r1, [r7, #28]
 80047f6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80047fa:	4313      	orrs	r3, r2
 80047fc:	634b      	str	r3, [r1, #52]	; 0x34
 80047fe:	e13b      	b.n	8004a78 <USB_EPStartXfer+0x520>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004800:	69fb      	ldr	r3, [r7, #28]
 8004802:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004806:	689b      	ldr	r3, [r3, #8]
 8004808:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800480c:	2b00      	cmp	r3, #0
 800480e:	d110      	bne.n	8004832 <USB_EPStartXfer+0x2da>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004810:	69bb      	ldr	r3, [r7, #24]
 8004812:	015a      	lsls	r2, r3, #5
 8004814:	69fb      	ldr	r3, [r7, #28]
 8004816:	4413      	add	r3, r2
 8004818:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	69ba      	ldr	r2, [r7, #24]
 8004820:	0151      	lsls	r1, r2, #5
 8004822:	69fa      	ldr	r2, [r7, #28]
 8004824:	440a      	add	r2, r1
 8004826:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800482a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800482e:	6013      	str	r3, [r2, #0]
 8004830:	e00f      	b.n	8004852 <USB_EPStartXfer+0x2fa>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004832:	69bb      	ldr	r3, [r7, #24]
 8004834:	015a      	lsls	r2, r3, #5
 8004836:	69fb      	ldr	r3, [r7, #28]
 8004838:	4413      	add	r3, r2
 800483a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	69ba      	ldr	r2, [r7, #24]
 8004842:	0151      	lsls	r1, r2, #5
 8004844:	69fa      	ldr	r2, [r7, #28]
 8004846:	440a      	add	r2, r1
 8004848:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800484c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004850:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004852:	68bb      	ldr	r3, [r7, #8]
 8004854:	68d9      	ldr	r1, [r3, #12]
 8004856:	68bb      	ldr	r3, [r7, #8]
 8004858:	781a      	ldrb	r2, [r3, #0]
 800485a:	68bb      	ldr	r3, [r7, #8]
 800485c:	691b      	ldr	r3, [r3, #16]
 800485e:	b298      	uxth	r0, r3
 8004860:	79fb      	ldrb	r3, [r7, #7]
 8004862:	9300      	str	r3, [sp, #0]
 8004864:	4603      	mov	r3, r0
 8004866:	68f8      	ldr	r0, [r7, #12]
 8004868:	f000 f9b8 	bl	8004bdc <USB_WritePacket>
 800486c:	e104      	b.n	8004a78 <USB_EPStartXfer+0x520>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800486e:	69bb      	ldr	r3, [r7, #24]
 8004870:	015a      	lsls	r2, r3, #5
 8004872:	69fb      	ldr	r3, [r7, #28]
 8004874:	4413      	add	r3, r2
 8004876:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800487a:	691b      	ldr	r3, [r3, #16]
 800487c:	69ba      	ldr	r2, [r7, #24]
 800487e:	0151      	lsls	r1, r2, #5
 8004880:	69fa      	ldr	r2, [r7, #28]
 8004882:	440a      	add	r2, r1
 8004884:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004888:	0cdb      	lsrs	r3, r3, #19
 800488a:	04db      	lsls	r3, r3, #19
 800488c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800488e:	69bb      	ldr	r3, [r7, #24]
 8004890:	015a      	lsls	r2, r3, #5
 8004892:	69fb      	ldr	r3, [r7, #28]
 8004894:	4413      	add	r3, r2
 8004896:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800489a:	691b      	ldr	r3, [r3, #16]
 800489c:	69ba      	ldr	r2, [r7, #24]
 800489e:	0151      	lsls	r1, r2, #5
 80048a0:	69fa      	ldr	r2, [r7, #28]
 80048a2:	440a      	add	r2, r1
 80048a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80048a8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80048ac:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80048b0:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 80048b2:	69bb      	ldr	r3, [r7, #24]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d131      	bne.n	800491c <USB_EPStartXfer+0x3c4>
    {
      if (ep->xfer_len > 0U)
 80048b8:	68bb      	ldr	r3, [r7, #8]
 80048ba:	691b      	ldr	r3, [r3, #16]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d003      	beq.n	80048c8 <USB_EPStartXfer+0x370>
      {
        ep->xfer_len = ep->maxpacket;
 80048c0:	68bb      	ldr	r3, [r7, #8]
 80048c2:	689a      	ldr	r2, [r3, #8]
 80048c4:	68bb      	ldr	r3, [r7, #8]
 80048c6:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 80048c8:	68bb      	ldr	r3, [r7, #8]
 80048ca:	689a      	ldr	r2, [r3, #8]
 80048cc:	68bb      	ldr	r3, [r7, #8]
 80048ce:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80048d0:	69bb      	ldr	r3, [r7, #24]
 80048d2:	015a      	lsls	r2, r3, #5
 80048d4:	69fb      	ldr	r3, [r7, #28]
 80048d6:	4413      	add	r3, r2
 80048d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048dc:	691a      	ldr	r2, [r3, #16]
 80048de:	68bb      	ldr	r3, [r7, #8]
 80048e0:	6a1b      	ldr	r3, [r3, #32]
 80048e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80048e6:	69b9      	ldr	r1, [r7, #24]
 80048e8:	0148      	lsls	r0, r1, #5
 80048ea:	69f9      	ldr	r1, [r7, #28]
 80048ec:	4401      	add	r1, r0
 80048ee:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80048f2:	4313      	orrs	r3, r2
 80048f4:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80048f6:	69bb      	ldr	r3, [r7, #24]
 80048f8:	015a      	lsls	r2, r3, #5
 80048fa:	69fb      	ldr	r3, [r7, #28]
 80048fc:	4413      	add	r3, r2
 80048fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004902:	691b      	ldr	r3, [r3, #16]
 8004904:	69ba      	ldr	r2, [r7, #24]
 8004906:	0151      	lsls	r1, r2, #5
 8004908:	69fa      	ldr	r2, [r7, #28]
 800490a:	440a      	add	r2, r1
 800490c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004910:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004914:	6113      	str	r3, [r2, #16]
 8004916:	e061      	b.n	80049dc <USB_EPStartXfer+0x484>
 8004918:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 800491c:	68bb      	ldr	r3, [r7, #8]
 800491e:	691b      	ldr	r3, [r3, #16]
 8004920:	2b00      	cmp	r3, #0
 8004922:	d123      	bne.n	800496c <USB_EPStartXfer+0x414>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004924:	69bb      	ldr	r3, [r7, #24]
 8004926:	015a      	lsls	r2, r3, #5
 8004928:	69fb      	ldr	r3, [r7, #28]
 800492a:	4413      	add	r3, r2
 800492c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004930:	691a      	ldr	r2, [r3, #16]
 8004932:	68bb      	ldr	r3, [r7, #8]
 8004934:	689b      	ldr	r3, [r3, #8]
 8004936:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800493a:	69b9      	ldr	r1, [r7, #24]
 800493c:	0148      	lsls	r0, r1, #5
 800493e:	69f9      	ldr	r1, [r7, #28]
 8004940:	4401      	add	r1, r0
 8004942:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004946:	4313      	orrs	r3, r2
 8004948:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800494a:	69bb      	ldr	r3, [r7, #24]
 800494c:	015a      	lsls	r2, r3, #5
 800494e:	69fb      	ldr	r3, [r7, #28]
 8004950:	4413      	add	r3, r2
 8004952:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004956:	691b      	ldr	r3, [r3, #16]
 8004958:	69ba      	ldr	r2, [r7, #24]
 800495a:	0151      	lsls	r1, r2, #5
 800495c:	69fa      	ldr	r2, [r7, #28]
 800495e:	440a      	add	r2, r1
 8004960:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004964:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004968:	6113      	str	r3, [r2, #16]
 800496a:	e037      	b.n	80049dc <USB_EPStartXfer+0x484>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800496c:	68bb      	ldr	r3, [r7, #8]
 800496e:	691a      	ldr	r2, [r3, #16]
 8004970:	68bb      	ldr	r3, [r7, #8]
 8004972:	689b      	ldr	r3, [r3, #8]
 8004974:	4413      	add	r3, r2
 8004976:	1e5a      	subs	r2, r3, #1
 8004978:	68bb      	ldr	r3, [r7, #8]
 800497a:	689b      	ldr	r3, [r3, #8]
 800497c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004980:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8004982:	68bb      	ldr	r3, [r7, #8]
 8004984:	689b      	ldr	r3, [r3, #8]
 8004986:	8afa      	ldrh	r2, [r7, #22]
 8004988:	fb03 f202 	mul.w	r2, r3, r2
 800498c:	68bb      	ldr	r3, [r7, #8]
 800498e:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004990:	69bb      	ldr	r3, [r7, #24]
 8004992:	015a      	lsls	r2, r3, #5
 8004994:	69fb      	ldr	r3, [r7, #28]
 8004996:	4413      	add	r3, r2
 8004998:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800499c:	691a      	ldr	r2, [r3, #16]
 800499e:	8afb      	ldrh	r3, [r7, #22]
 80049a0:	04d9      	lsls	r1, r3, #19
 80049a2:	4b38      	ldr	r3, [pc, #224]	; (8004a84 <USB_EPStartXfer+0x52c>)
 80049a4:	400b      	ands	r3, r1
 80049a6:	69b9      	ldr	r1, [r7, #24]
 80049a8:	0148      	lsls	r0, r1, #5
 80049aa:	69f9      	ldr	r1, [r7, #28]
 80049ac:	4401      	add	r1, r0
 80049ae:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80049b2:	4313      	orrs	r3, r2
 80049b4:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80049b6:	69bb      	ldr	r3, [r7, #24]
 80049b8:	015a      	lsls	r2, r3, #5
 80049ba:	69fb      	ldr	r3, [r7, #28]
 80049bc:	4413      	add	r3, r2
 80049be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049c2:	691a      	ldr	r2, [r3, #16]
 80049c4:	68bb      	ldr	r3, [r7, #8]
 80049c6:	6a1b      	ldr	r3, [r3, #32]
 80049c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80049cc:	69b9      	ldr	r1, [r7, #24]
 80049ce:	0148      	lsls	r0, r1, #5
 80049d0:	69f9      	ldr	r1, [r7, #28]
 80049d2:	4401      	add	r1, r0
 80049d4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80049d8:	4313      	orrs	r3, r2
 80049da:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 80049dc:	79fb      	ldrb	r3, [r7, #7]
 80049de:	2b01      	cmp	r3, #1
 80049e0:	d10d      	bne.n	80049fe <USB_EPStartXfer+0x4a6>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80049e2:	68bb      	ldr	r3, [r7, #8]
 80049e4:	68db      	ldr	r3, [r3, #12]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d009      	beq.n	80049fe <USB_EPStartXfer+0x4a6>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80049ea:	68bb      	ldr	r3, [r7, #8]
 80049ec:	68d9      	ldr	r1, [r3, #12]
 80049ee:	69bb      	ldr	r3, [r7, #24]
 80049f0:	015a      	lsls	r2, r3, #5
 80049f2:	69fb      	ldr	r3, [r7, #28]
 80049f4:	4413      	add	r3, r2
 80049f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049fa:	460a      	mov	r2, r1
 80049fc:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80049fe:	68bb      	ldr	r3, [r7, #8]
 8004a00:	791b      	ldrb	r3, [r3, #4]
 8004a02:	2b01      	cmp	r3, #1
 8004a04:	d128      	bne.n	8004a58 <USB_EPStartXfer+0x500>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004a06:	69fb      	ldr	r3, [r7, #28]
 8004a08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a0c:	689b      	ldr	r3, [r3, #8]
 8004a0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d110      	bne.n	8004a38 <USB_EPStartXfer+0x4e0>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004a16:	69bb      	ldr	r3, [r7, #24]
 8004a18:	015a      	lsls	r2, r3, #5
 8004a1a:	69fb      	ldr	r3, [r7, #28]
 8004a1c:	4413      	add	r3, r2
 8004a1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	69ba      	ldr	r2, [r7, #24]
 8004a26:	0151      	lsls	r1, r2, #5
 8004a28:	69fa      	ldr	r2, [r7, #28]
 8004a2a:	440a      	add	r2, r1
 8004a2c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a30:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004a34:	6013      	str	r3, [r2, #0]
 8004a36:	e00f      	b.n	8004a58 <USB_EPStartXfer+0x500>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004a38:	69bb      	ldr	r3, [r7, #24]
 8004a3a:	015a      	lsls	r2, r3, #5
 8004a3c:	69fb      	ldr	r3, [r7, #28]
 8004a3e:	4413      	add	r3, r2
 8004a40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	69ba      	ldr	r2, [r7, #24]
 8004a48:	0151      	lsls	r1, r2, #5
 8004a4a:	69fa      	ldr	r2, [r7, #28]
 8004a4c:	440a      	add	r2, r1
 8004a4e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a56:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004a58:	69bb      	ldr	r3, [r7, #24]
 8004a5a:	015a      	lsls	r2, r3, #5
 8004a5c:	69fb      	ldr	r3, [r7, #28]
 8004a5e:	4413      	add	r3, r2
 8004a60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	69ba      	ldr	r2, [r7, #24]
 8004a68:	0151      	lsls	r1, r2, #5
 8004a6a:	69fa      	ldr	r2, [r7, #28]
 8004a6c:	440a      	add	r2, r1
 8004a6e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a72:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004a76:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004a78:	2300      	movs	r3, #0
}
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	3720      	adds	r7, #32
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	bd80      	pop	{r7, pc}
 8004a82:	bf00      	nop
 8004a84:	1ff80000 	.word	0x1ff80000

08004a88 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004a88:	b480      	push	{r7}
 8004a8a:	b087      	sub	sp, #28
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
 8004a90:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004a92:	2300      	movs	r3, #0
 8004a94:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8004a96:	2300      	movs	r3, #0
 8004a98:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	785b      	ldrb	r3, [r3, #1]
 8004aa2:	2b01      	cmp	r3, #1
 8004aa4:	d14a      	bne.n	8004b3c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	781b      	ldrb	r3, [r3, #0]
 8004aaa:	015a      	lsls	r2, r3, #5
 8004aac:	693b      	ldr	r3, [r7, #16]
 8004aae:	4413      	add	r3, r2
 8004ab0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004aba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004abe:	f040 8086 	bne.w	8004bce <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8004ac2:	683b      	ldr	r3, [r7, #0]
 8004ac4:	781b      	ldrb	r3, [r3, #0]
 8004ac6:	015a      	lsls	r2, r3, #5
 8004ac8:	693b      	ldr	r3, [r7, #16]
 8004aca:	4413      	add	r3, r2
 8004acc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	683a      	ldr	r2, [r7, #0]
 8004ad4:	7812      	ldrb	r2, [r2, #0]
 8004ad6:	0151      	lsls	r1, r2, #5
 8004ad8:	693a      	ldr	r2, [r7, #16]
 8004ada:	440a      	add	r2, r1
 8004adc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ae0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004ae4:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	781b      	ldrb	r3, [r3, #0]
 8004aea:	015a      	lsls	r2, r3, #5
 8004aec:	693b      	ldr	r3, [r7, #16]
 8004aee:	4413      	add	r3, r2
 8004af0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	683a      	ldr	r2, [r7, #0]
 8004af8:	7812      	ldrb	r2, [r2, #0]
 8004afa:	0151      	lsls	r1, r2, #5
 8004afc:	693a      	ldr	r2, [r7, #16]
 8004afe:	440a      	add	r2, r1
 8004b00:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b04:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004b08:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	3301      	adds	r3, #1
 8004b0e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	f242 7210 	movw	r2, #10000	; 0x2710
 8004b16:	4293      	cmp	r3, r2
 8004b18:	d902      	bls.n	8004b20 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8004b1a:	2301      	movs	r3, #1
 8004b1c:	75fb      	strb	r3, [r7, #23]
          break;
 8004b1e:	e056      	b.n	8004bce <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	781b      	ldrb	r3, [r3, #0]
 8004b24:	015a      	lsls	r2, r3, #5
 8004b26:	693b      	ldr	r3, [r7, #16]
 8004b28:	4413      	add	r3, r2
 8004b2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004b34:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004b38:	d0e7      	beq.n	8004b0a <USB_EPStopXfer+0x82>
 8004b3a:	e048      	b.n	8004bce <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	781b      	ldrb	r3, [r3, #0]
 8004b40:	015a      	lsls	r2, r3, #5
 8004b42:	693b      	ldr	r3, [r7, #16]
 8004b44:	4413      	add	r3, r2
 8004b46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004b50:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004b54:	d13b      	bne.n	8004bce <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	781b      	ldrb	r3, [r3, #0]
 8004b5a:	015a      	lsls	r2, r3, #5
 8004b5c:	693b      	ldr	r3, [r7, #16]
 8004b5e:	4413      	add	r3, r2
 8004b60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	683a      	ldr	r2, [r7, #0]
 8004b68:	7812      	ldrb	r2, [r2, #0]
 8004b6a:	0151      	lsls	r1, r2, #5
 8004b6c:	693a      	ldr	r2, [r7, #16]
 8004b6e:	440a      	add	r2, r1
 8004b70:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b74:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004b78:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	781b      	ldrb	r3, [r3, #0]
 8004b7e:	015a      	lsls	r2, r3, #5
 8004b80:	693b      	ldr	r3, [r7, #16]
 8004b82:	4413      	add	r3, r2
 8004b84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	683a      	ldr	r2, [r7, #0]
 8004b8c:	7812      	ldrb	r2, [r2, #0]
 8004b8e:	0151      	lsls	r1, r2, #5
 8004b90:	693a      	ldr	r2, [r7, #16]
 8004b92:	440a      	add	r2, r1
 8004b94:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b98:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004b9c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	3301      	adds	r3, #1
 8004ba2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	f242 7210 	movw	r2, #10000	; 0x2710
 8004baa:	4293      	cmp	r3, r2
 8004bac:	d902      	bls.n	8004bb4 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8004bae:	2301      	movs	r3, #1
 8004bb0:	75fb      	strb	r3, [r7, #23]
          break;
 8004bb2:	e00c      	b.n	8004bce <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	781b      	ldrb	r3, [r3, #0]
 8004bb8:	015a      	lsls	r2, r3, #5
 8004bba:	693b      	ldr	r3, [r7, #16]
 8004bbc:	4413      	add	r3, r2
 8004bbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004bc8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004bcc:	d0e7      	beq.n	8004b9e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8004bce:	7dfb      	ldrb	r3, [r7, #23]
}
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	371c      	adds	r7, #28
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bda:	4770      	bx	lr

08004bdc <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004bdc:	b480      	push	{r7}
 8004bde:	b089      	sub	sp, #36	; 0x24
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	60f8      	str	r0, [r7, #12]
 8004be4:	60b9      	str	r1, [r7, #8]
 8004be6:	4611      	mov	r1, r2
 8004be8:	461a      	mov	r2, r3
 8004bea:	460b      	mov	r3, r1
 8004bec:	71fb      	strb	r3, [r7, #7]
 8004bee:	4613      	mov	r3, r2
 8004bf0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8004bf6:	68bb      	ldr	r3, [r7, #8]
 8004bf8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8004bfa:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d123      	bne.n	8004c4a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004c02:	88bb      	ldrh	r3, [r7, #4]
 8004c04:	3303      	adds	r3, #3
 8004c06:	089b      	lsrs	r3, r3, #2
 8004c08:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	61bb      	str	r3, [r7, #24]
 8004c0e:	e018      	b.n	8004c42 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004c10:	79fb      	ldrb	r3, [r7, #7]
 8004c12:	031a      	lsls	r2, r3, #12
 8004c14:	697b      	ldr	r3, [r7, #20]
 8004c16:	4413      	add	r3, r2
 8004c18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c1c:	461a      	mov	r2, r3
 8004c1e:	69fb      	ldr	r3, [r7, #28]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004c24:	69fb      	ldr	r3, [r7, #28]
 8004c26:	3301      	adds	r3, #1
 8004c28:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004c2a:	69fb      	ldr	r3, [r7, #28]
 8004c2c:	3301      	adds	r3, #1
 8004c2e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004c30:	69fb      	ldr	r3, [r7, #28]
 8004c32:	3301      	adds	r3, #1
 8004c34:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004c36:	69fb      	ldr	r3, [r7, #28]
 8004c38:	3301      	adds	r3, #1
 8004c3a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004c3c:	69bb      	ldr	r3, [r7, #24]
 8004c3e:	3301      	adds	r3, #1
 8004c40:	61bb      	str	r3, [r7, #24]
 8004c42:	69ba      	ldr	r2, [r7, #24]
 8004c44:	693b      	ldr	r3, [r7, #16]
 8004c46:	429a      	cmp	r2, r3
 8004c48:	d3e2      	bcc.n	8004c10 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004c4a:	2300      	movs	r3, #0
}
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	3724      	adds	r7, #36	; 0x24
 8004c50:	46bd      	mov	sp, r7
 8004c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c56:	4770      	bx	lr

08004c58 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004c58:	b480      	push	{r7}
 8004c5a:	b08b      	sub	sp, #44	; 0x2c
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	60f8      	str	r0, [r7, #12]
 8004c60:	60b9      	str	r1, [r7, #8]
 8004c62:	4613      	mov	r3, r2
 8004c64:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004c6a:	68bb      	ldr	r3, [r7, #8]
 8004c6c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004c6e:	88fb      	ldrh	r3, [r7, #6]
 8004c70:	089b      	lsrs	r3, r3, #2
 8004c72:	b29b      	uxth	r3, r3
 8004c74:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004c76:	88fb      	ldrh	r3, [r7, #6]
 8004c78:	f003 0303 	and.w	r3, r3, #3
 8004c7c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004c7e:	2300      	movs	r3, #0
 8004c80:	623b      	str	r3, [r7, #32]
 8004c82:	e014      	b.n	8004cae <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004c84:	69bb      	ldr	r3, [r7, #24]
 8004c86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c8a:	681a      	ldr	r2, [r3, #0]
 8004c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c8e:	601a      	str	r2, [r3, #0]
    pDest++;
 8004c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c92:	3301      	adds	r3, #1
 8004c94:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c98:	3301      	adds	r3, #1
 8004c9a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c9e:	3301      	adds	r3, #1
 8004ca0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ca4:	3301      	adds	r3, #1
 8004ca6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8004ca8:	6a3b      	ldr	r3, [r7, #32]
 8004caa:	3301      	adds	r3, #1
 8004cac:	623b      	str	r3, [r7, #32]
 8004cae:	6a3a      	ldr	r2, [r7, #32]
 8004cb0:	697b      	ldr	r3, [r7, #20]
 8004cb2:	429a      	cmp	r2, r3
 8004cb4:	d3e6      	bcc.n	8004c84 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004cb6:	8bfb      	ldrh	r3, [r7, #30]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d01e      	beq.n	8004cfa <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004cc0:	69bb      	ldr	r3, [r7, #24]
 8004cc2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004cc6:	461a      	mov	r2, r3
 8004cc8:	f107 0310 	add.w	r3, r7, #16
 8004ccc:	6812      	ldr	r2, [r2, #0]
 8004cce:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004cd0:	693a      	ldr	r2, [r7, #16]
 8004cd2:	6a3b      	ldr	r3, [r7, #32]
 8004cd4:	b2db      	uxtb	r3, r3
 8004cd6:	00db      	lsls	r3, r3, #3
 8004cd8:	fa22 f303 	lsr.w	r3, r2, r3
 8004cdc:	b2da      	uxtb	r2, r3
 8004cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ce0:	701a      	strb	r2, [r3, #0]
      i++;
 8004ce2:	6a3b      	ldr	r3, [r7, #32]
 8004ce4:	3301      	adds	r3, #1
 8004ce6:	623b      	str	r3, [r7, #32]
      pDest++;
 8004ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cea:	3301      	adds	r3, #1
 8004cec:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8004cee:	8bfb      	ldrh	r3, [r7, #30]
 8004cf0:	3b01      	subs	r3, #1
 8004cf2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004cf4:	8bfb      	ldrh	r3, [r7, #30]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d1ea      	bne.n	8004cd0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	372c      	adds	r7, #44	; 0x2c
 8004d00:	46bd      	mov	sp, r7
 8004d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d06:	4770      	bx	lr

08004d08 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004d08:	b480      	push	{r7}
 8004d0a:	b085      	sub	sp, #20
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
 8004d10:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	781b      	ldrb	r3, [r3, #0]
 8004d1a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	785b      	ldrb	r3, [r3, #1]
 8004d20:	2b01      	cmp	r3, #1
 8004d22:	d12c      	bne.n	8004d7e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004d24:	68bb      	ldr	r3, [r7, #8]
 8004d26:	015a      	lsls	r2, r3, #5
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	4413      	add	r3, r2
 8004d2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	db12      	blt.n	8004d5c <USB_EPSetStall+0x54>
 8004d36:	68bb      	ldr	r3, [r7, #8]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d00f      	beq.n	8004d5c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004d3c:	68bb      	ldr	r3, [r7, #8]
 8004d3e:	015a      	lsls	r2, r3, #5
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	4413      	add	r3, r2
 8004d44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	68ba      	ldr	r2, [r7, #8]
 8004d4c:	0151      	lsls	r1, r2, #5
 8004d4e:	68fa      	ldr	r2, [r7, #12]
 8004d50:	440a      	add	r2, r1
 8004d52:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d56:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004d5a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004d5c:	68bb      	ldr	r3, [r7, #8]
 8004d5e:	015a      	lsls	r2, r3, #5
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	4413      	add	r3, r2
 8004d64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	68ba      	ldr	r2, [r7, #8]
 8004d6c:	0151      	lsls	r1, r2, #5
 8004d6e:	68fa      	ldr	r2, [r7, #12]
 8004d70:	440a      	add	r2, r1
 8004d72:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d76:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004d7a:	6013      	str	r3, [r2, #0]
 8004d7c:	e02b      	b.n	8004dd6 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004d7e:	68bb      	ldr	r3, [r7, #8]
 8004d80:	015a      	lsls	r2, r3, #5
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	4413      	add	r3, r2
 8004d86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	db12      	blt.n	8004db6 <USB_EPSetStall+0xae>
 8004d90:	68bb      	ldr	r3, [r7, #8]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d00f      	beq.n	8004db6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8004d96:	68bb      	ldr	r3, [r7, #8]
 8004d98:	015a      	lsls	r2, r3, #5
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	4413      	add	r3, r2
 8004d9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	68ba      	ldr	r2, [r7, #8]
 8004da6:	0151      	lsls	r1, r2, #5
 8004da8:	68fa      	ldr	r2, [r7, #12]
 8004daa:	440a      	add	r2, r1
 8004dac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004db0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004db4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8004db6:	68bb      	ldr	r3, [r7, #8]
 8004db8:	015a      	lsls	r2, r3, #5
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	4413      	add	r3, r2
 8004dbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	68ba      	ldr	r2, [r7, #8]
 8004dc6:	0151      	lsls	r1, r2, #5
 8004dc8:	68fa      	ldr	r2, [r7, #12]
 8004dca:	440a      	add	r2, r1
 8004dcc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004dd0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004dd4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004dd6:	2300      	movs	r3, #0
}
 8004dd8:	4618      	mov	r0, r3
 8004dda:	3714      	adds	r7, #20
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de2:	4770      	bx	lr

08004de4 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004de4:	b480      	push	{r7}
 8004de6:	b085      	sub	sp, #20
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
 8004dec:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	781b      	ldrb	r3, [r3, #0]
 8004df6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	785b      	ldrb	r3, [r3, #1]
 8004dfc:	2b01      	cmp	r3, #1
 8004dfe:	d128      	bne.n	8004e52 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004e00:	68bb      	ldr	r3, [r7, #8]
 8004e02:	015a      	lsls	r2, r3, #5
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	4413      	add	r3, r2
 8004e08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	68ba      	ldr	r2, [r7, #8]
 8004e10:	0151      	lsls	r1, r2, #5
 8004e12:	68fa      	ldr	r2, [r7, #12]
 8004e14:	440a      	add	r2, r1
 8004e16:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e1a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004e1e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	791b      	ldrb	r3, [r3, #4]
 8004e24:	2b03      	cmp	r3, #3
 8004e26:	d003      	beq.n	8004e30 <USB_EPClearStall+0x4c>
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	791b      	ldrb	r3, [r3, #4]
 8004e2c:	2b02      	cmp	r3, #2
 8004e2e:	d138      	bne.n	8004ea2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004e30:	68bb      	ldr	r3, [r7, #8]
 8004e32:	015a      	lsls	r2, r3, #5
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	4413      	add	r3, r2
 8004e38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	68ba      	ldr	r2, [r7, #8]
 8004e40:	0151      	lsls	r1, r2, #5
 8004e42:	68fa      	ldr	r2, [r7, #12]
 8004e44:	440a      	add	r2, r1
 8004e46:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e4e:	6013      	str	r3, [r2, #0]
 8004e50:	e027      	b.n	8004ea2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004e52:	68bb      	ldr	r3, [r7, #8]
 8004e54:	015a      	lsls	r2, r3, #5
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	4413      	add	r3, r2
 8004e5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	68ba      	ldr	r2, [r7, #8]
 8004e62:	0151      	lsls	r1, r2, #5
 8004e64:	68fa      	ldr	r2, [r7, #12]
 8004e66:	440a      	add	r2, r1
 8004e68:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e6c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004e70:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	791b      	ldrb	r3, [r3, #4]
 8004e76:	2b03      	cmp	r3, #3
 8004e78:	d003      	beq.n	8004e82 <USB_EPClearStall+0x9e>
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	791b      	ldrb	r3, [r3, #4]
 8004e7e:	2b02      	cmp	r3, #2
 8004e80:	d10f      	bne.n	8004ea2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004e82:	68bb      	ldr	r3, [r7, #8]
 8004e84:	015a      	lsls	r2, r3, #5
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	4413      	add	r3, r2
 8004e8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	68ba      	ldr	r2, [r7, #8]
 8004e92:	0151      	lsls	r1, r2, #5
 8004e94:	68fa      	ldr	r2, [r7, #12]
 8004e96:	440a      	add	r2, r1
 8004e98:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ea0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8004ea2:	2300      	movs	r3, #0
}
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	3714      	adds	r7, #20
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eae:	4770      	bx	lr

08004eb0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8004eb0:	b480      	push	{r7}
 8004eb2:	b085      	sub	sp, #20
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
 8004eb8:	460b      	mov	r3, r1
 8004eba:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	68fa      	ldr	r2, [r7, #12]
 8004eca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004ece:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004ed2:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004eda:	681a      	ldr	r2, [r3, #0]
 8004edc:	78fb      	ldrb	r3, [r7, #3]
 8004ede:	011b      	lsls	r3, r3, #4
 8004ee0:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8004ee4:	68f9      	ldr	r1, [r7, #12]
 8004ee6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004eea:	4313      	orrs	r3, r2
 8004eec:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8004eee:	2300      	movs	r3, #0
}
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	3714      	adds	r7, #20
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efa:	4770      	bx	lr

08004efc <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8004efc:	b480      	push	{r7}
 8004efe:	b085      	sub	sp, #20
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	68fa      	ldr	r2, [r7, #12]
 8004f12:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004f16:	f023 0303 	bic.w	r3, r3, #3
 8004f1a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f22:	685b      	ldr	r3, [r3, #4]
 8004f24:	68fa      	ldr	r2, [r7, #12]
 8004f26:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004f2a:	f023 0302 	bic.w	r3, r3, #2
 8004f2e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004f30:	2300      	movs	r3, #0
}
 8004f32:	4618      	mov	r0, r3
 8004f34:	3714      	adds	r7, #20
 8004f36:	46bd      	mov	sp, r7
 8004f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3c:	4770      	bx	lr

08004f3e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8004f3e:	b480      	push	{r7}
 8004f40:	b085      	sub	sp, #20
 8004f42:	af00      	add	r7, sp, #0
 8004f44:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	68fa      	ldr	r2, [r7, #12]
 8004f54:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004f58:	f023 0303 	bic.w	r3, r3, #3
 8004f5c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f64:	685b      	ldr	r3, [r3, #4]
 8004f66:	68fa      	ldr	r2, [r7, #12]
 8004f68:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004f6c:	f043 0302 	orr.w	r3, r3, #2
 8004f70:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004f72:	2300      	movs	r3, #0
}
 8004f74:	4618      	mov	r0, r3
 8004f76:	3714      	adds	r7, #20
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7e:	4770      	bx	lr

08004f80 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8004f80:	b480      	push	{r7}
 8004f82:	b085      	sub	sp, #20
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	695b      	ldr	r3, [r3, #20]
 8004f8c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	699b      	ldr	r3, [r3, #24]
 8004f92:	68fa      	ldr	r2, [r7, #12]
 8004f94:	4013      	ands	r3, r2
 8004f96:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004f98:	68fb      	ldr	r3, [r7, #12]
}
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	3714      	adds	r7, #20
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa4:	4770      	bx	lr

08004fa6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8004fa6:	b480      	push	{r7}
 8004fa8:	b085      	sub	sp, #20
 8004faa:	af00      	add	r7, sp, #0
 8004fac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fb8:	699b      	ldr	r3, [r3, #24]
 8004fba:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fc2:	69db      	ldr	r3, [r3, #28]
 8004fc4:	68ba      	ldr	r2, [r7, #8]
 8004fc6:	4013      	ands	r3, r2
 8004fc8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8004fca:	68bb      	ldr	r3, [r7, #8]
 8004fcc:	0c1b      	lsrs	r3, r3, #16
}
 8004fce:	4618      	mov	r0, r3
 8004fd0:	3714      	adds	r7, #20
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd8:	4770      	bx	lr

08004fda <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8004fda:	b480      	push	{r7}
 8004fdc:	b085      	sub	sp, #20
 8004fde:	af00      	add	r7, sp, #0
 8004fe0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fec:	699b      	ldr	r3, [r3, #24]
 8004fee:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ff6:	69db      	ldr	r3, [r3, #28]
 8004ff8:	68ba      	ldr	r2, [r7, #8]
 8004ffa:	4013      	ands	r3, r2
 8004ffc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8004ffe:	68bb      	ldr	r3, [r7, #8]
 8005000:	b29b      	uxth	r3, r3
}
 8005002:	4618      	mov	r0, r3
 8005004:	3714      	adds	r7, #20
 8005006:	46bd      	mov	sp, r7
 8005008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500c:	4770      	bx	lr

0800500e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800500e:	b480      	push	{r7}
 8005010:	b085      	sub	sp, #20
 8005012:	af00      	add	r7, sp, #0
 8005014:	6078      	str	r0, [r7, #4]
 8005016:	460b      	mov	r3, r1
 8005018:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800501e:	78fb      	ldrb	r3, [r7, #3]
 8005020:	015a      	lsls	r2, r3, #5
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	4413      	add	r3, r2
 8005026:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800502a:	689b      	ldr	r3, [r3, #8]
 800502c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005034:	695b      	ldr	r3, [r3, #20]
 8005036:	68ba      	ldr	r2, [r7, #8]
 8005038:	4013      	ands	r3, r2
 800503a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800503c:	68bb      	ldr	r3, [r7, #8]
}
 800503e:	4618      	mov	r0, r3
 8005040:	3714      	adds	r7, #20
 8005042:	46bd      	mov	sp, r7
 8005044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005048:	4770      	bx	lr

0800504a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800504a:	b480      	push	{r7}
 800504c:	b087      	sub	sp, #28
 800504e:	af00      	add	r7, sp, #0
 8005050:	6078      	str	r0, [r7, #4]
 8005052:	460b      	mov	r3, r1
 8005054:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800505a:	697b      	ldr	r3, [r7, #20]
 800505c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005060:	691b      	ldr	r3, [r3, #16]
 8005062:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005064:	697b      	ldr	r3, [r7, #20]
 8005066:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800506a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800506c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800506e:	78fb      	ldrb	r3, [r7, #3]
 8005070:	f003 030f 	and.w	r3, r3, #15
 8005074:	68fa      	ldr	r2, [r7, #12]
 8005076:	fa22 f303 	lsr.w	r3, r2, r3
 800507a:	01db      	lsls	r3, r3, #7
 800507c:	b2db      	uxtb	r3, r3
 800507e:	693a      	ldr	r2, [r7, #16]
 8005080:	4313      	orrs	r3, r2
 8005082:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005084:	78fb      	ldrb	r3, [r7, #3]
 8005086:	015a      	lsls	r2, r3, #5
 8005088:	697b      	ldr	r3, [r7, #20]
 800508a:	4413      	add	r3, r2
 800508c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005090:	689b      	ldr	r3, [r3, #8]
 8005092:	693a      	ldr	r2, [r7, #16]
 8005094:	4013      	ands	r3, r2
 8005096:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005098:	68bb      	ldr	r3, [r7, #8]
}
 800509a:	4618      	mov	r0, r3
 800509c:	371c      	adds	r7, #28
 800509e:	46bd      	mov	sp, r7
 80050a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a4:	4770      	bx	lr

080050a6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80050a6:	b480      	push	{r7}
 80050a8:	b083      	sub	sp, #12
 80050aa:	af00      	add	r7, sp, #0
 80050ac:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	695b      	ldr	r3, [r3, #20]
 80050b2:	f003 0301 	and.w	r3, r3, #1
}
 80050b6:	4618      	mov	r0, r3
 80050b8:	370c      	adds	r7, #12
 80050ba:	46bd      	mov	sp, r7
 80050bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c0:	4770      	bx	lr

080050c2 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 80050c2:	b480      	push	{r7}
 80050c4:	b085      	sub	sp, #20
 80050c6:	af00      	add	r7, sp, #0
 80050c8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	68fa      	ldr	r2, [r7, #12]
 80050d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050dc:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80050e0:	f023 0307 	bic.w	r3, r3, #7
 80050e4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050ec:	685b      	ldr	r3, [r3, #4]
 80050ee:	68fa      	ldr	r2, [r7, #12]
 80050f0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80050f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050f8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80050fa:	2300      	movs	r3, #0
}
 80050fc:	4618      	mov	r0, r3
 80050fe:	3714      	adds	r7, #20
 8005100:	46bd      	mov	sp, r7
 8005102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005106:	4770      	bx	lr

08005108 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8005108:	b480      	push	{r7}
 800510a:	b087      	sub	sp, #28
 800510c:	af00      	add	r7, sp, #0
 800510e:	60f8      	str	r0, [r7, #12]
 8005110:	460b      	mov	r3, r1
 8005112:	607a      	str	r2, [r7, #4]
 8005114:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	333c      	adds	r3, #60	; 0x3c
 800511e:	3304      	adds	r3, #4
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005124:	693b      	ldr	r3, [r7, #16]
 8005126:	4a26      	ldr	r2, [pc, #152]	; (80051c0 <USB_EP0_OutStart+0xb8>)
 8005128:	4293      	cmp	r3, r2
 800512a:	d90a      	bls.n	8005142 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800512c:	697b      	ldr	r3, [r7, #20]
 800512e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005138:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800513c:	d101      	bne.n	8005142 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800513e:	2300      	movs	r3, #0
 8005140:	e037      	b.n	80051b2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005142:	697b      	ldr	r3, [r7, #20]
 8005144:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005148:	461a      	mov	r2, r3
 800514a:	2300      	movs	r3, #0
 800514c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800514e:	697b      	ldr	r3, [r7, #20]
 8005150:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005154:	691b      	ldr	r3, [r3, #16]
 8005156:	697a      	ldr	r2, [r7, #20]
 8005158:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800515c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005160:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005162:	697b      	ldr	r3, [r7, #20]
 8005164:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005168:	691b      	ldr	r3, [r3, #16]
 800516a:	697a      	ldr	r2, [r7, #20]
 800516c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005170:	f043 0318 	orr.w	r3, r3, #24
 8005174:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005176:	697b      	ldr	r3, [r7, #20]
 8005178:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800517c:	691b      	ldr	r3, [r3, #16]
 800517e:	697a      	ldr	r2, [r7, #20]
 8005180:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005184:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005188:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800518a:	7afb      	ldrb	r3, [r7, #11]
 800518c:	2b01      	cmp	r3, #1
 800518e:	d10f      	bne.n	80051b0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005190:	697b      	ldr	r3, [r7, #20]
 8005192:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005196:	461a      	mov	r2, r3
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800519c:	697b      	ldr	r3, [r7, #20]
 800519e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	697a      	ldr	r2, [r7, #20]
 80051a6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80051aa:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80051ae:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80051b0:	2300      	movs	r3, #0
}
 80051b2:	4618      	mov	r0, r3
 80051b4:	371c      	adds	r7, #28
 80051b6:	46bd      	mov	sp, r7
 80051b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051bc:	4770      	bx	lr
 80051be:	bf00      	nop
 80051c0:	4f54300a 	.word	0x4f54300a

080051c4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80051c4:	b480      	push	{r7}
 80051c6:	b085      	sub	sp, #20
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80051cc:	2300      	movs	r3, #0
 80051ce:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	3301      	adds	r3, #1
 80051d4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80051dc:	d901      	bls.n	80051e2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80051de:	2303      	movs	r3, #3
 80051e0:	e01b      	b.n	800521a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	691b      	ldr	r3, [r3, #16]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	daf2      	bge.n	80051d0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80051ea:	2300      	movs	r3, #0
 80051ec:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	691b      	ldr	r3, [r3, #16]
 80051f2:	f043 0201 	orr.w	r2, r3, #1
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	3301      	adds	r3, #1
 80051fe:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8005206:	d901      	bls.n	800520c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005208:	2303      	movs	r3, #3
 800520a:	e006      	b.n	800521a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	691b      	ldr	r3, [r3, #16]
 8005210:	f003 0301 	and.w	r3, r3, #1
 8005214:	2b01      	cmp	r3, #1
 8005216:	d0f0      	beq.n	80051fa <USB_CoreReset+0x36>

  return HAL_OK;
 8005218:	2300      	movs	r3, #0
}
 800521a:	4618      	mov	r0, r3
 800521c:	3714      	adds	r7, #20
 800521e:	46bd      	mov	sp, r7
 8005220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005224:	4770      	bx	lr
	...

08005228 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005228:	b580      	push	{r7, lr}
 800522a:	b084      	sub	sp, #16
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
 8005230:	460b      	mov	r3, r1
 8005232:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005234:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005238:	f002 fc92 	bl	8007b60 <USBD_static_malloc>
 800523c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	2b00      	cmp	r3, #0
 8005242:	d109      	bne.n	8005258 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	32b0      	adds	r2, #176	; 0xb0
 800524e:	2100      	movs	r1, #0
 8005250:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8005254:	2302      	movs	r3, #2
 8005256:	e0d4      	b.n	8005402 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8005258:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800525c:	2100      	movs	r1, #0
 800525e:	68f8      	ldr	r0, [r7, #12]
 8005260:	f002 fcc2 	bl	8007be8 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	32b0      	adds	r2, #176	; 0xb0
 800526e:	68f9      	ldr	r1, [r7, #12]
 8005270:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	32b0      	adds	r2, #176	; 0xb0
 800527e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	7c1b      	ldrb	r3, [r3, #16]
 800528c:	2b00      	cmp	r3, #0
 800528e:	d138      	bne.n	8005302 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005290:	4b5e      	ldr	r3, [pc, #376]	; (800540c <USBD_CDC_Init+0x1e4>)
 8005292:	7819      	ldrb	r1, [r3, #0]
 8005294:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005298:	2202      	movs	r2, #2
 800529a:	6878      	ldr	r0, [r7, #4]
 800529c:	f002 fb3d 	bl	800791a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80052a0:	4b5a      	ldr	r3, [pc, #360]	; (800540c <USBD_CDC_Init+0x1e4>)
 80052a2:	781b      	ldrb	r3, [r3, #0]
 80052a4:	f003 020f 	and.w	r2, r3, #15
 80052a8:	6879      	ldr	r1, [r7, #4]
 80052aa:	4613      	mov	r3, r2
 80052ac:	009b      	lsls	r3, r3, #2
 80052ae:	4413      	add	r3, r2
 80052b0:	009b      	lsls	r3, r3, #2
 80052b2:	440b      	add	r3, r1
 80052b4:	3324      	adds	r3, #36	; 0x24
 80052b6:	2201      	movs	r2, #1
 80052b8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80052ba:	4b55      	ldr	r3, [pc, #340]	; (8005410 <USBD_CDC_Init+0x1e8>)
 80052bc:	7819      	ldrb	r1, [r3, #0]
 80052be:	f44f 7300 	mov.w	r3, #512	; 0x200
 80052c2:	2202      	movs	r2, #2
 80052c4:	6878      	ldr	r0, [r7, #4]
 80052c6:	f002 fb28 	bl	800791a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80052ca:	4b51      	ldr	r3, [pc, #324]	; (8005410 <USBD_CDC_Init+0x1e8>)
 80052cc:	781b      	ldrb	r3, [r3, #0]
 80052ce:	f003 020f 	and.w	r2, r3, #15
 80052d2:	6879      	ldr	r1, [r7, #4]
 80052d4:	4613      	mov	r3, r2
 80052d6:	009b      	lsls	r3, r3, #2
 80052d8:	4413      	add	r3, r2
 80052da:	009b      	lsls	r3, r3, #2
 80052dc:	440b      	add	r3, r1
 80052de:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80052e2:	2201      	movs	r2, #1
 80052e4:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80052e6:	4b4b      	ldr	r3, [pc, #300]	; (8005414 <USBD_CDC_Init+0x1ec>)
 80052e8:	781b      	ldrb	r3, [r3, #0]
 80052ea:	f003 020f 	and.w	r2, r3, #15
 80052ee:	6879      	ldr	r1, [r7, #4]
 80052f0:	4613      	mov	r3, r2
 80052f2:	009b      	lsls	r3, r3, #2
 80052f4:	4413      	add	r3, r2
 80052f6:	009b      	lsls	r3, r3, #2
 80052f8:	440b      	add	r3, r1
 80052fa:	3326      	adds	r3, #38	; 0x26
 80052fc:	2210      	movs	r2, #16
 80052fe:	801a      	strh	r2, [r3, #0]
 8005300:	e035      	b.n	800536e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005302:	4b42      	ldr	r3, [pc, #264]	; (800540c <USBD_CDC_Init+0x1e4>)
 8005304:	7819      	ldrb	r1, [r3, #0]
 8005306:	2340      	movs	r3, #64	; 0x40
 8005308:	2202      	movs	r2, #2
 800530a:	6878      	ldr	r0, [r7, #4]
 800530c:	f002 fb05 	bl	800791a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005310:	4b3e      	ldr	r3, [pc, #248]	; (800540c <USBD_CDC_Init+0x1e4>)
 8005312:	781b      	ldrb	r3, [r3, #0]
 8005314:	f003 020f 	and.w	r2, r3, #15
 8005318:	6879      	ldr	r1, [r7, #4]
 800531a:	4613      	mov	r3, r2
 800531c:	009b      	lsls	r3, r3, #2
 800531e:	4413      	add	r3, r2
 8005320:	009b      	lsls	r3, r3, #2
 8005322:	440b      	add	r3, r1
 8005324:	3324      	adds	r3, #36	; 0x24
 8005326:	2201      	movs	r2, #1
 8005328:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800532a:	4b39      	ldr	r3, [pc, #228]	; (8005410 <USBD_CDC_Init+0x1e8>)
 800532c:	7819      	ldrb	r1, [r3, #0]
 800532e:	2340      	movs	r3, #64	; 0x40
 8005330:	2202      	movs	r2, #2
 8005332:	6878      	ldr	r0, [r7, #4]
 8005334:	f002 faf1 	bl	800791a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005338:	4b35      	ldr	r3, [pc, #212]	; (8005410 <USBD_CDC_Init+0x1e8>)
 800533a:	781b      	ldrb	r3, [r3, #0]
 800533c:	f003 020f 	and.w	r2, r3, #15
 8005340:	6879      	ldr	r1, [r7, #4]
 8005342:	4613      	mov	r3, r2
 8005344:	009b      	lsls	r3, r3, #2
 8005346:	4413      	add	r3, r2
 8005348:	009b      	lsls	r3, r3, #2
 800534a:	440b      	add	r3, r1
 800534c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005350:	2201      	movs	r2, #1
 8005352:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005354:	4b2f      	ldr	r3, [pc, #188]	; (8005414 <USBD_CDC_Init+0x1ec>)
 8005356:	781b      	ldrb	r3, [r3, #0]
 8005358:	f003 020f 	and.w	r2, r3, #15
 800535c:	6879      	ldr	r1, [r7, #4]
 800535e:	4613      	mov	r3, r2
 8005360:	009b      	lsls	r3, r3, #2
 8005362:	4413      	add	r3, r2
 8005364:	009b      	lsls	r3, r3, #2
 8005366:	440b      	add	r3, r1
 8005368:	3326      	adds	r3, #38	; 0x26
 800536a:	2210      	movs	r2, #16
 800536c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800536e:	4b29      	ldr	r3, [pc, #164]	; (8005414 <USBD_CDC_Init+0x1ec>)
 8005370:	7819      	ldrb	r1, [r3, #0]
 8005372:	2308      	movs	r3, #8
 8005374:	2203      	movs	r2, #3
 8005376:	6878      	ldr	r0, [r7, #4]
 8005378:	f002 facf 	bl	800791a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800537c:	4b25      	ldr	r3, [pc, #148]	; (8005414 <USBD_CDC_Init+0x1ec>)
 800537e:	781b      	ldrb	r3, [r3, #0]
 8005380:	f003 020f 	and.w	r2, r3, #15
 8005384:	6879      	ldr	r1, [r7, #4]
 8005386:	4613      	mov	r3, r2
 8005388:	009b      	lsls	r3, r3, #2
 800538a:	4413      	add	r3, r2
 800538c:	009b      	lsls	r3, r3, #2
 800538e:	440b      	add	r3, r1
 8005390:	3324      	adds	r3, #36	; 0x24
 8005392:	2201      	movs	r2, #1
 8005394:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	2200      	movs	r2, #0
 800539a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80053a4:	687a      	ldr	r2, [r7, #4]
 80053a6:	33b0      	adds	r3, #176	; 0xb0
 80053a8:	009b      	lsls	r3, r3, #2
 80053aa:	4413      	add	r3, r2
 80053ac:	685b      	ldr	r3, [r3, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	2200      	movs	r2, #0
 80053b6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	2200      	movs	r2, #0
 80053be:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d101      	bne.n	80053d0 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80053cc:	2302      	movs	r3, #2
 80053ce:	e018      	b.n	8005402 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	7c1b      	ldrb	r3, [r3, #16]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d10a      	bne.n	80053ee <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80053d8:	4b0d      	ldr	r3, [pc, #52]	; (8005410 <USBD_CDC_Init+0x1e8>)
 80053da:	7819      	ldrb	r1, [r3, #0]
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80053e2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80053e6:	6878      	ldr	r0, [r7, #4]
 80053e8:	f002 fb86 	bl	8007af8 <USBD_LL_PrepareReceive>
 80053ec:	e008      	b.n	8005400 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80053ee:	4b08      	ldr	r3, [pc, #32]	; (8005410 <USBD_CDC_Init+0x1e8>)
 80053f0:	7819      	ldrb	r1, [r3, #0]
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80053f8:	2340      	movs	r3, #64	; 0x40
 80053fa:	6878      	ldr	r0, [r7, #4]
 80053fc:	f002 fb7c 	bl	8007af8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005400:	2300      	movs	r3, #0
}
 8005402:	4618      	mov	r0, r3
 8005404:	3710      	adds	r7, #16
 8005406:	46bd      	mov	sp, r7
 8005408:	bd80      	pop	{r7, pc}
 800540a:	bf00      	nop
 800540c:	20000093 	.word	0x20000093
 8005410:	20000094 	.word	0x20000094
 8005414:	20000095 	.word	0x20000095

08005418 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005418:	b580      	push	{r7, lr}
 800541a:	b082      	sub	sp, #8
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
 8005420:	460b      	mov	r3, r1
 8005422:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8005424:	4b3a      	ldr	r3, [pc, #232]	; (8005510 <USBD_CDC_DeInit+0xf8>)
 8005426:	781b      	ldrb	r3, [r3, #0]
 8005428:	4619      	mov	r1, r3
 800542a:	6878      	ldr	r0, [r7, #4]
 800542c:	f002 fa9b 	bl	8007966 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8005430:	4b37      	ldr	r3, [pc, #220]	; (8005510 <USBD_CDC_DeInit+0xf8>)
 8005432:	781b      	ldrb	r3, [r3, #0]
 8005434:	f003 020f 	and.w	r2, r3, #15
 8005438:	6879      	ldr	r1, [r7, #4]
 800543a:	4613      	mov	r3, r2
 800543c:	009b      	lsls	r3, r3, #2
 800543e:	4413      	add	r3, r2
 8005440:	009b      	lsls	r3, r3, #2
 8005442:	440b      	add	r3, r1
 8005444:	3324      	adds	r3, #36	; 0x24
 8005446:	2200      	movs	r2, #0
 8005448:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800544a:	4b32      	ldr	r3, [pc, #200]	; (8005514 <USBD_CDC_DeInit+0xfc>)
 800544c:	781b      	ldrb	r3, [r3, #0]
 800544e:	4619      	mov	r1, r3
 8005450:	6878      	ldr	r0, [r7, #4]
 8005452:	f002 fa88 	bl	8007966 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8005456:	4b2f      	ldr	r3, [pc, #188]	; (8005514 <USBD_CDC_DeInit+0xfc>)
 8005458:	781b      	ldrb	r3, [r3, #0]
 800545a:	f003 020f 	and.w	r2, r3, #15
 800545e:	6879      	ldr	r1, [r7, #4]
 8005460:	4613      	mov	r3, r2
 8005462:	009b      	lsls	r3, r3, #2
 8005464:	4413      	add	r3, r2
 8005466:	009b      	lsls	r3, r3, #2
 8005468:	440b      	add	r3, r1
 800546a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800546e:	2200      	movs	r2, #0
 8005470:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8005472:	4b29      	ldr	r3, [pc, #164]	; (8005518 <USBD_CDC_DeInit+0x100>)
 8005474:	781b      	ldrb	r3, [r3, #0]
 8005476:	4619      	mov	r1, r3
 8005478:	6878      	ldr	r0, [r7, #4]
 800547a:	f002 fa74 	bl	8007966 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800547e:	4b26      	ldr	r3, [pc, #152]	; (8005518 <USBD_CDC_DeInit+0x100>)
 8005480:	781b      	ldrb	r3, [r3, #0]
 8005482:	f003 020f 	and.w	r2, r3, #15
 8005486:	6879      	ldr	r1, [r7, #4]
 8005488:	4613      	mov	r3, r2
 800548a:	009b      	lsls	r3, r3, #2
 800548c:	4413      	add	r3, r2
 800548e:	009b      	lsls	r3, r3, #2
 8005490:	440b      	add	r3, r1
 8005492:	3324      	adds	r3, #36	; 0x24
 8005494:	2200      	movs	r2, #0
 8005496:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8005498:	4b1f      	ldr	r3, [pc, #124]	; (8005518 <USBD_CDC_DeInit+0x100>)
 800549a:	781b      	ldrb	r3, [r3, #0]
 800549c:	f003 020f 	and.w	r2, r3, #15
 80054a0:	6879      	ldr	r1, [r7, #4]
 80054a2:	4613      	mov	r3, r2
 80054a4:	009b      	lsls	r3, r3, #2
 80054a6:	4413      	add	r3, r2
 80054a8:	009b      	lsls	r3, r3, #2
 80054aa:	440b      	add	r3, r1
 80054ac:	3326      	adds	r3, #38	; 0x26
 80054ae:	2200      	movs	r2, #0
 80054b0:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	32b0      	adds	r2, #176	; 0xb0
 80054bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d01f      	beq.n	8005504 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80054ca:	687a      	ldr	r2, [r7, #4]
 80054cc:	33b0      	adds	r3, #176	; 0xb0
 80054ce:	009b      	lsls	r3, r3, #2
 80054d0:	4413      	add	r3, r2
 80054d2:	685b      	ldr	r3, [r3, #4]
 80054d4:	685b      	ldr	r3, [r3, #4]
 80054d6:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	32b0      	adds	r2, #176	; 0xb0
 80054e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80054e6:	4618      	mov	r0, r3
 80054e8:	f002 fb48 	bl	8007b7c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	32b0      	adds	r2, #176	; 0xb0
 80054f6:	2100      	movs	r1, #0
 80054f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2200      	movs	r2, #0
 8005500:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8005504:	2300      	movs	r3, #0
}
 8005506:	4618      	mov	r0, r3
 8005508:	3708      	adds	r7, #8
 800550a:	46bd      	mov	sp, r7
 800550c:	bd80      	pop	{r7, pc}
 800550e:	bf00      	nop
 8005510:	20000093 	.word	0x20000093
 8005514:	20000094 	.word	0x20000094
 8005518:	20000095 	.word	0x20000095

0800551c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800551c:	b580      	push	{r7, lr}
 800551e:	b086      	sub	sp, #24
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
 8005524:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	32b0      	adds	r2, #176	; 0xb0
 8005530:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005534:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8005536:	2300      	movs	r3, #0
 8005538:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800553a:	2300      	movs	r3, #0
 800553c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800553e:	2300      	movs	r3, #0
 8005540:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8005542:	693b      	ldr	r3, [r7, #16]
 8005544:	2b00      	cmp	r3, #0
 8005546:	d101      	bne.n	800554c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8005548:	2303      	movs	r3, #3
 800554a:	e0bf      	b.n	80056cc <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	781b      	ldrb	r3, [r3, #0]
 8005550:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005554:	2b00      	cmp	r3, #0
 8005556:	d050      	beq.n	80055fa <USBD_CDC_Setup+0xde>
 8005558:	2b20      	cmp	r3, #32
 800555a:	f040 80af 	bne.w	80056bc <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800555e:	683b      	ldr	r3, [r7, #0]
 8005560:	88db      	ldrh	r3, [r3, #6]
 8005562:	2b00      	cmp	r3, #0
 8005564:	d03a      	beq.n	80055dc <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8005566:	683b      	ldr	r3, [r7, #0]
 8005568:	781b      	ldrb	r3, [r3, #0]
 800556a:	b25b      	sxtb	r3, r3
 800556c:	2b00      	cmp	r3, #0
 800556e:	da1b      	bge.n	80055a8 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005576:	687a      	ldr	r2, [r7, #4]
 8005578:	33b0      	adds	r3, #176	; 0xb0
 800557a:	009b      	lsls	r3, r3, #2
 800557c:	4413      	add	r3, r2
 800557e:	685b      	ldr	r3, [r3, #4]
 8005580:	689b      	ldr	r3, [r3, #8]
 8005582:	683a      	ldr	r2, [r7, #0]
 8005584:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8005586:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005588:	683a      	ldr	r2, [r7, #0]
 800558a:	88d2      	ldrh	r2, [r2, #6]
 800558c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800558e:	683b      	ldr	r3, [r7, #0]
 8005590:	88db      	ldrh	r3, [r3, #6]
 8005592:	2b07      	cmp	r3, #7
 8005594:	bf28      	it	cs
 8005596:	2307      	movcs	r3, #7
 8005598:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800559a:	693b      	ldr	r3, [r7, #16]
 800559c:	89fa      	ldrh	r2, [r7, #14]
 800559e:	4619      	mov	r1, r3
 80055a0:	6878      	ldr	r0, [r7, #4]
 80055a2:	f001 fd49 	bl	8007038 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80055a6:	e090      	b.n	80056ca <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	785a      	ldrb	r2, [r3, #1]
 80055ac:	693b      	ldr	r3, [r7, #16]
 80055ae:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	88db      	ldrh	r3, [r3, #6]
 80055b6:	2b3f      	cmp	r3, #63	; 0x3f
 80055b8:	d803      	bhi.n	80055c2 <USBD_CDC_Setup+0xa6>
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	88db      	ldrh	r3, [r3, #6]
 80055be:	b2da      	uxtb	r2, r3
 80055c0:	e000      	b.n	80055c4 <USBD_CDC_Setup+0xa8>
 80055c2:	2240      	movs	r2, #64	; 0x40
 80055c4:	693b      	ldr	r3, [r7, #16]
 80055c6:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80055ca:	6939      	ldr	r1, [r7, #16]
 80055cc:	693b      	ldr	r3, [r7, #16]
 80055ce:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80055d2:	461a      	mov	r2, r3
 80055d4:	6878      	ldr	r0, [r7, #4]
 80055d6:	f001 fd5b 	bl	8007090 <USBD_CtlPrepareRx>
      break;
 80055da:	e076      	b.n	80056ca <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80055e2:	687a      	ldr	r2, [r7, #4]
 80055e4:	33b0      	adds	r3, #176	; 0xb0
 80055e6:	009b      	lsls	r3, r3, #2
 80055e8:	4413      	add	r3, r2
 80055ea:	685b      	ldr	r3, [r3, #4]
 80055ec:	689b      	ldr	r3, [r3, #8]
 80055ee:	683a      	ldr	r2, [r7, #0]
 80055f0:	7850      	ldrb	r0, [r2, #1]
 80055f2:	2200      	movs	r2, #0
 80055f4:	6839      	ldr	r1, [r7, #0]
 80055f6:	4798      	blx	r3
      break;
 80055f8:	e067      	b.n	80056ca <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	785b      	ldrb	r3, [r3, #1]
 80055fe:	2b0b      	cmp	r3, #11
 8005600:	d851      	bhi.n	80056a6 <USBD_CDC_Setup+0x18a>
 8005602:	a201      	add	r2, pc, #4	; (adr r2, 8005608 <USBD_CDC_Setup+0xec>)
 8005604:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005608:	08005639 	.word	0x08005639
 800560c:	080056b5 	.word	0x080056b5
 8005610:	080056a7 	.word	0x080056a7
 8005614:	080056a7 	.word	0x080056a7
 8005618:	080056a7 	.word	0x080056a7
 800561c:	080056a7 	.word	0x080056a7
 8005620:	080056a7 	.word	0x080056a7
 8005624:	080056a7 	.word	0x080056a7
 8005628:	080056a7 	.word	0x080056a7
 800562c:	080056a7 	.word	0x080056a7
 8005630:	08005663 	.word	0x08005663
 8005634:	0800568d 	.word	0x0800568d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800563e:	b2db      	uxtb	r3, r3
 8005640:	2b03      	cmp	r3, #3
 8005642:	d107      	bne.n	8005654 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005644:	f107 030a 	add.w	r3, r7, #10
 8005648:	2202      	movs	r2, #2
 800564a:	4619      	mov	r1, r3
 800564c:	6878      	ldr	r0, [r7, #4]
 800564e:	f001 fcf3 	bl	8007038 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005652:	e032      	b.n	80056ba <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8005654:	6839      	ldr	r1, [r7, #0]
 8005656:	6878      	ldr	r0, [r7, #4]
 8005658:	f001 fc7d 	bl	8006f56 <USBD_CtlError>
            ret = USBD_FAIL;
 800565c:	2303      	movs	r3, #3
 800565e:	75fb      	strb	r3, [r7, #23]
          break;
 8005660:	e02b      	b.n	80056ba <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005668:	b2db      	uxtb	r3, r3
 800566a:	2b03      	cmp	r3, #3
 800566c:	d107      	bne.n	800567e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800566e:	f107 030d 	add.w	r3, r7, #13
 8005672:	2201      	movs	r2, #1
 8005674:	4619      	mov	r1, r3
 8005676:	6878      	ldr	r0, [r7, #4]
 8005678:	f001 fcde 	bl	8007038 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800567c:	e01d      	b.n	80056ba <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800567e:	6839      	ldr	r1, [r7, #0]
 8005680:	6878      	ldr	r0, [r7, #4]
 8005682:	f001 fc68 	bl	8006f56 <USBD_CtlError>
            ret = USBD_FAIL;
 8005686:	2303      	movs	r3, #3
 8005688:	75fb      	strb	r3, [r7, #23]
          break;
 800568a:	e016      	b.n	80056ba <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005692:	b2db      	uxtb	r3, r3
 8005694:	2b03      	cmp	r3, #3
 8005696:	d00f      	beq.n	80056b8 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8005698:	6839      	ldr	r1, [r7, #0]
 800569a:	6878      	ldr	r0, [r7, #4]
 800569c:	f001 fc5b 	bl	8006f56 <USBD_CtlError>
            ret = USBD_FAIL;
 80056a0:	2303      	movs	r3, #3
 80056a2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80056a4:	e008      	b.n	80056b8 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80056a6:	6839      	ldr	r1, [r7, #0]
 80056a8:	6878      	ldr	r0, [r7, #4]
 80056aa:	f001 fc54 	bl	8006f56 <USBD_CtlError>
          ret = USBD_FAIL;
 80056ae:	2303      	movs	r3, #3
 80056b0:	75fb      	strb	r3, [r7, #23]
          break;
 80056b2:	e002      	b.n	80056ba <USBD_CDC_Setup+0x19e>
          break;
 80056b4:	bf00      	nop
 80056b6:	e008      	b.n	80056ca <USBD_CDC_Setup+0x1ae>
          break;
 80056b8:	bf00      	nop
      }
      break;
 80056ba:	e006      	b.n	80056ca <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80056bc:	6839      	ldr	r1, [r7, #0]
 80056be:	6878      	ldr	r0, [r7, #4]
 80056c0:	f001 fc49 	bl	8006f56 <USBD_CtlError>
      ret = USBD_FAIL;
 80056c4:	2303      	movs	r3, #3
 80056c6:	75fb      	strb	r3, [r7, #23]
      break;
 80056c8:	bf00      	nop
  }

  return (uint8_t)ret;
 80056ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80056cc:	4618      	mov	r0, r3
 80056ce:	3718      	adds	r7, #24
 80056d0:	46bd      	mov	sp, r7
 80056d2:	bd80      	pop	{r7, pc}

080056d4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80056d4:	b580      	push	{r7, lr}
 80056d6:	b084      	sub	sp, #16
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
 80056dc:	460b      	mov	r3, r1
 80056de:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80056e6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	32b0      	adds	r2, #176	; 0xb0
 80056f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d101      	bne.n	80056fe <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80056fa:	2303      	movs	r3, #3
 80056fc:	e065      	b.n	80057ca <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	32b0      	adds	r2, #176	; 0xb0
 8005708:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800570c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800570e:	78fb      	ldrb	r3, [r7, #3]
 8005710:	f003 020f 	and.w	r2, r3, #15
 8005714:	6879      	ldr	r1, [r7, #4]
 8005716:	4613      	mov	r3, r2
 8005718:	009b      	lsls	r3, r3, #2
 800571a:	4413      	add	r3, r2
 800571c:	009b      	lsls	r3, r3, #2
 800571e:	440b      	add	r3, r1
 8005720:	3318      	adds	r3, #24
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	2b00      	cmp	r3, #0
 8005726:	d02f      	beq.n	8005788 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8005728:	78fb      	ldrb	r3, [r7, #3]
 800572a:	f003 020f 	and.w	r2, r3, #15
 800572e:	6879      	ldr	r1, [r7, #4]
 8005730:	4613      	mov	r3, r2
 8005732:	009b      	lsls	r3, r3, #2
 8005734:	4413      	add	r3, r2
 8005736:	009b      	lsls	r3, r3, #2
 8005738:	440b      	add	r3, r1
 800573a:	3318      	adds	r3, #24
 800573c:	681a      	ldr	r2, [r3, #0]
 800573e:	78fb      	ldrb	r3, [r7, #3]
 8005740:	f003 010f 	and.w	r1, r3, #15
 8005744:	68f8      	ldr	r0, [r7, #12]
 8005746:	460b      	mov	r3, r1
 8005748:	00db      	lsls	r3, r3, #3
 800574a:	440b      	add	r3, r1
 800574c:	009b      	lsls	r3, r3, #2
 800574e:	4403      	add	r3, r0
 8005750:	331c      	adds	r3, #28
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	fbb2 f1f3 	udiv	r1, r2, r3
 8005758:	fb01 f303 	mul.w	r3, r1, r3
 800575c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800575e:	2b00      	cmp	r3, #0
 8005760:	d112      	bne.n	8005788 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8005762:	78fb      	ldrb	r3, [r7, #3]
 8005764:	f003 020f 	and.w	r2, r3, #15
 8005768:	6879      	ldr	r1, [r7, #4]
 800576a:	4613      	mov	r3, r2
 800576c:	009b      	lsls	r3, r3, #2
 800576e:	4413      	add	r3, r2
 8005770:	009b      	lsls	r3, r3, #2
 8005772:	440b      	add	r3, r1
 8005774:	3318      	adds	r3, #24
 8005776:	2200      	movs	r2, #0
 8005778:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800577a:	78f9      	ldrb	r1, [r7, #3]
 800577c:	2300      	movs	r3, #0
 800577e:	2200      	movs	r2, #0
 8005780:	6878      	ldr	r0, [r7, #4]
 8005782:	f002 f998 	bl	8007ab6 <USBD_LL_Transmit>
 8005786:	e01f      	b.n	80057c8 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8005788:	68bb      	ldr	r3, [r7, #8]
 800578a:	2200      	movs	r2, #0
 800578c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005796:	687a      	ldr	r2, [r7, #4]
 8005798:	33b0      	adds	r3, #176	; 0xb0
 800579a:	009b      	lsls	r3, r3, #2
 800579c:	4413      	add	r3, r2
 800579e:	685b      	ldr	r3, [r3, #4]
 80057a0:	691b      	ldr	r3, [r3, #16]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d010      	beq.n	80057c8 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80057ac:	687a      	ldr	r2, [r7, #4]
 80057ae:	33b0      	adds	r3, #176	; 0xb0
 80057b0:	009b      	lsls	r3, r3, #2
 80057b2:	4413      	add	r3, r2
 80057b4:	685b      	ldr	r3, [r3, #4]
 80057b6:	691b      	ldr	r3, [r3, #16]
 80057b8:	68ba      	ldr	r2, [r7, #8]
 80057ba:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80057be:	68ba      	ldr	r2, [r7, #8]
 80057c0:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80057c4:	78fa      	ldrb	r2, [r7, #3]
 80057c6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80057c8:	2300      	movs	r3, #0
}
 80057ca:	4618      	mov	r0, r3
 80057cc:	3710      	adds	r7, #16
 80057ce:	46bd      	mov	sp, r7
 80057d0:	bd80      	pop	{r7, pc}

080057d2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80057d2:	b580      	push	{r7, lr}
 80057d4:	b084      	sub	sp, #16
 80057d6:	af00      	add	r7, sp, #0
 80057d8:	6078      	str	r0, [r7, #4]
 80057da:	460b      	mov	r3, r1
 80057dc:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	32b0      	adds	r2, #176	; 0xb0
 80057e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057ec:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	32b0      	adds	r2, #176	; 0xb0
 80057f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d101      	bne.n	8005804 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8005800:	2303      	movs	r3, #3
 8005802:	e01a      	b.n	800583a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005804:	78fb      	ldrb	r3, [r7, #3]
 8005806:	4619      	mov	r1, r3
 8005808:	6878      	ldr	r0, [r7, #4]
 800580a:	f002 f996 	bl	8007b3a <USBD_LL_GetRxDataSize>
 800580e:	4602      	mov	r2, r0
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800581c:	687a      	ldr	r2, [r7, #4]
 800581e:	33b0      	adds	r3, #176	; 0xb0
 8005820:	009b      	lsls	r3, r3, #2
 8005822:	4413      	add	r3, r2
 8005824:	685b      	ldr	r3, [r3, #4]
 8005826:	68db      	ldr	r3, [r3, #12]
 8005828:	68fa      	ldr	r2, [r7, #12]
 800582a:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800582e:	68fa      	ldr	r2, [r7, #12]
 8005830:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8005834:	4611      	mov	r1, r2
 8005836:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8005838:	2300      	movs	r3, #0
}
 800583a:	4618      	mov	r0, r3
 800583c:	3710      	adds	r7, #16
 800583e:	46bd      	mov	sp, r7
 8005840:	bd80      	pop	{r7, pc}

08005842 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005842:	b580      	push	{r7, lr}
 8005844:	b084      	sub	sp, #16
 8005846:	af00      	add	r7, sp, #0
 8005848:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	32b0      	adds	r2, #176	; 0xb0
 8005854:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005858:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	2b00      	cmp	r3, #0
 800585e:	d101      	bne.n	8005864 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005860:	2303      	movs	r3, #3
 8005862:	e025      	b.n	80058b0 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800586a:	687a      	ldr	r2, [r7, #4]
 800586c:	33b0      	adds	r3, #176	; 0xb0
 800586e:	009b      	lsls	r3, r3, #2
 8005870:	4413      	add	r3, r2
 8005872:	685b      	ldr	r3, [r3, #4]
 8005874:	2b00      	cmp	r3, #0
 8005876:	d01a      	beq.n	80058ae <USBD_CDC_EP0_RxReady+0x6c>
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800587e:	2bff      	cmp	r3, #255	; 0xff
 8005880:	d015      	beq.n	80058ae <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005888:	687a      	ldr	r2, [r7, #4]
 800588a:	33b0      	adds	r3, #176	; 0xb0
 800588c:	009b      	lsls	r3, r3, #2
 800588e:	4413      	add	r3, r2
 8005890:	685b      	ldr	r3, [r3, #4]
 8005892:	689b      	ldr	r3, [r3, #8]
 8005894:	68fa      	ldr	r2, [r7, #12]
 8005896:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800589a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800589c:	68fa      	ldr	r2, [r7, #12]
 800589e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80058a2:	b292      	uxth	r2, r2
 80058a4:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	22ff      	movs	r2, #255	; 0xff
 80058aa:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80058ae:	2300      	movs	r3, #0
}
 80058b0:	4618      	mov	r0, r3
 80058b2:	3710      	adds	r7, #16
 80058b4:	46bd      	mov	sp, r7
 80058b6:	bd80      	pop	{r7, pc}

080058b8 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80058b8:	b580      	push	{r7, lr}
 80058ba:	b086      	sub	sp, #24
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80058c0:	2182      	movs	r1, #130	; 0x82
 80058c2:	4818      	ldr	r0, [pc, #96]	; (8005924 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80058c4:	f000 fd0f 	bl	80062e6 <USBD_GetEpDesc>
 80058c8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80058ca:	2101      	movs	r1, #1
 80058cc:	4815      	ldr	r0, [pc, #84]	; (8005924 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80058ce:	f000 fd0a 	bl	80062e6 <USBD_GetEpDesc>
 80058d2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80058d4:	2181      	movs	r1, #129	; 0x81
 80058d6:	4813      	ldr	r0, [pc, #76]	; (8005924 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80058d8:	f000 fd05 	bl	80062e6 <USBD_GetEpDesc>
 80058dc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80058de:	697b      	ldr	r3, [r7, #20]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d002      	beq.n	80058ea <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80058e4:	697b      	ldr	r3, [r7, #20]
 80058e6:	2210      	movs	r2, #16
 80058e8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80058ea:	693b      	ldr	r3, [r7, #16]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d006      	beq.n	80058fe <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80058f0:	693b      	ldr	r3, [r7, #16]
 80058f2:	2200      	movs	r2, #0
 80058f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80058f8:	711a      	strb	r2, [r3, #4]
 80058fa:	2200      	movs	r2, #0
 80058fc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d006      	beq.n	8005912 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	2200      	movs	r2, #0
 8005908:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800590c:	711a      	strb	r2, [r3, #4]
 800590e:	2200      	movs	r2, #0
 8005910:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	2243      	movs	r2, #67	; 0x43
 8005916:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005918:	4b02      	ldr	r3, [pc, #8]	; (8005924 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800591a:	4618      	mov	r0, r3
 800591c:	3718      	adds	r7, #24
 800591e:	46bd      	mov	sp, r7
 8005920:	bd80      	pop	{r7, pc}
 8005922:	bf00      	nop
 8005924:	20000050 	.word	0x20000050

08005928 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005928:	b580      	push	{r7, lr}
 800592a:	b086      	sub	sp, #24
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005930:	2182      	movs	r1, #130	; 0x82
 8005932:	4818      	ldr	r0, [pc, #96]	; (8005994 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005934:	f000 fcd7 	bl	80062e6 <USBD_GetEpDesc>
 8005938:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800593a:	2101      	movs	r1, #1
 800593c:	4815      	ldr	r0, [pc, #84]	; (8005994 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800593e:	f000 fcd2 	bl	80062e6 <USBD_GetEpDesc>
 8005942:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005944:	2181      	movs	r1, #129	; 0x81
 8005946:	4813      	ldr	r0, [pc, #76]	; (8005994 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005948:	f000 fccd 	bl	80062e6 <USBD_GetEpDesc>
 800594c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800594e:	697b      	ldr	r3, [r7, #20]
 8005950:	2b00      	cmp	r3, #0
 8005952:	d002      	beq.n	800595a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8005954:	697b      	ldr	r3, [r7, #20]
 8005956:	2210      	movs	r2, #16
 8005958:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800595a:	693b      	ldr	r3, [r7, #16]
 800595c:	2b00      	cmp	r3, #0
 800595e:	d006      	beq.n	800596e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005960:	693b      	ldr	r3, [r7, #16]
 8005962:	2200      	movs	r2, #0
 8005964:	711a      	strb	r2, [r3, #4]
 8005966:	2200      	movs	r2, #0
 8005968:	f042 0202 	orr.w	r2, r2, #2
 800596c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	2b00      	cmp	r3, #0
 8005972:	d006      	beq.n	8005982 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	2200      	movs	r2, #0
 8005978:	711a      	strb	r2, [r3, #4]
 800597a:	2200      	movs	r2, #0
 800597c:	f042 0202 	orr.w	r2, r2, #2
 8005980:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	2243      	movs	r2, #67	; 0x43
 8005986:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005988:	4b02      	ldr	r3, [pc, #8]	; (8005994 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800598a:	4618      	mov	r0, r3
 800598c:	3718      	adds	r7, #24
 800598e:	46bd      	mov	sp, r7
 8005990:	bd80      	pop	{r7, pc}
 8005992:	bf00      	nop
 8005994:	20000050 	.word	0x20000050

08005998 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005998:	b580      	push	{r7, lr}
 800599a:	b086      	sub	sp, #24
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80059a0:	2182      	movs	r1, #130	; 0x82
 80059a2:	4818      	ldr	r0, [pc, #96]	; (8005a04 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80059a4:	f000 fc9f 	bl	80062e6 <USBD_GetEpDesc>
 80059a8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80059aa:	2101      	movs	r1, #1
 80059ac:	4815      	ldr	r0, [pc, #84]	; (8005a04 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80059ae:	f000 fc9a 	bl	80062e6 <USBD_GetEpDesc>
 80059b2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80059b4:	2181      	movs	r1, #129	; 0x81
 80059b6:	4813      	ldr	r0, [pc, #76]	; (8005a04 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80059b8:	f000 fc95 	bl	80062e6 <USBD_GetEpDesc>
 80059bc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80059be:	697b      	ldr	r3, [r7, #20]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d002      	beq.n	80059ca <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80059c4:	697b      	ldr	r3, [r7, #20]
 80059c6:	2210      	movs	r2, #16
 80059c8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80059ca:	693b      	ldr	r3, [r7, #16]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d006      	beq.n	80059de <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80059d0:	693b      	ldr	r3, [r7, #16]
 80059d2:	2200      	movs	r2, #0
 80059d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80059d8:	711a      	strb	r2, [r3, #4]
 80059da:	2200      	movs	r2, #0
 80059dc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d006      	beq.n	80059f2 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	2200      	movs	r2, #0
 80059e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80059ec:	711a      	strb	r2, [r3, #4]
 80059ee:	2200      	movs	r2, #0
 80059f0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	2243      	movs	r2, #67	; 0x43
 80059f6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80059f8:	4b02      	ldr	r3, [pc, #8]	; (8005a04 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80059fa:	4618      	mov	r0, r3
 80059fc:	3718      	adds	r7, #24
 80059fe:	46bd      	mov	sp, r7
 8005a00:	bd80      	pop	{r7, pc}
 8005a02:	bf00      	nop
 8005a04:	20000050 	.word	0x20000050

08005a08 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005a08:	b480      	push	{r7}
 8005a0a:	b083      	sub	sp, #12
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	220a      	movs	r2, #10
 8005a14:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8005a16:	4b03      	ldr	r3, [pc, #12]	; (8005a24 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005a18:	4618      	mov	r0, r3
 8005a1a:	370c      	adds	r7, #12
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a22:	4770      	bx	lr
 8005a24:	2000000c 	.word	0x2000000c

08005a28 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8005a28:	b480      	push	{r7}
 8005a2a:	b083      	sub	sp, #12
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
 8005a30:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8005a32:	683b      	ldr	r3, [r7, #0]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d101      	bne.n	8005a3c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8005a38:	2303      	movs	r3, #3
 8005a3a:	e009      	b.n	8005a50 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005a42:	687a      	ldr	r2, [r7, #4]
 8005a44:	33b0      	adds	r3, #176	; 0xb0
 8005a46:	009b      	lsls	r3, r3, #2
 8005a48:	4413      	add	r3, r2
 8005a4a:	683a      	ldr	r2, [r7, #0]
 8005a4c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8005a4e:	2300      	movs	r3, #0
}
 8005a50:	4618      	mov	r0, r3
 8005a52:	370c      	adds	r7, #12
 8005a54:	46bd      	mov	sp, r7
 8005a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5a:	4770      	bx	lr

08005a5c <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8005a5c:	b480      	push	{r7}
 8005a5e:	b087      	sub	sp, #28
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	60f8      	str	r0, [r7, #12]
 8005a64:	60b9      	str	r1, [r7, #8]
 8005a66:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	32b0      	adds	r2, #176	; 0xb0
 8005a72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a76:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8005a78:	697b      	ldr	r3, [r7, #20]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d101      	bne.n	8005a82 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8005a7e:	2303      	movs	r3, #3
 8005a80:	e008      	b.n	8005a94 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8005a82:	697b      	ldr	r3, [r7, #20]
 8005a84:	68ba      	ldr	r2, [r7, #8]
 8005a86:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8005a8a:	697b      	ldr	r3, [r7, #20]
 8005a8c:	687a      	ldr	r2, [r7, #4]
 8005a8e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8005a92:	2300      	movs	r3, #0
}
 8005a94:	4618      	mov	r0, r3
 8005a96:	371c      	adds	r7, #28
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9e:	4770      	bx	lr

08005aa0 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8005aa0:	b480      	push	{r7}
 8005aa2:	b085      	sub	sp, #20
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
 8005aa8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	32b0      	adds	r2, #176	; 0xb0
 8005ab4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ab8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d101      	bne.n	8005ac4 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8005ac0:	2303      	movs	r3, #3
 8005ac2:	e004      	b.n	8005ace <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	683a      	ldr	r2, [r7, #0]
 8005ac8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8005acc:	2300      	movs	r3, #0
}
 8005ace:	4618      	mov	r0, r3
 8005ad0:	3714      	adds	r7, #20
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad8:	4770      	bx	lr
	...

08005adc <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005adc:	b580      	push	{r7, lr}
 8005ade:	b084      	sub	sp, #16
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	32b0      	adds	r2, #176	; 0xb0
 8005aee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005af2:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	32b0      	adds	r2, #176	; 0xb0
 8005afe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d101      	bne.n	8005b0a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8005b06:	2303      	movs	r3, #3
 8005b08:	e018      	b.n	8005b3c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	7c1b      	ldrb	r3, [r3, #16]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d10a      	bne.n	8005b28 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005b12:	4b0c      	ldr	r3, [pc, #48]	; (8005b44 <USBD_CDC_ReceivePacket+0x68>)
 8005b14:	7819      	ldrb	r1, [r3, #0]
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005b1c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005b20:	6878      	ldr	r0, [r7, #4]
 8005b22:	f001 ffe9 	bl	8007af8 <USBD_LL_PrepareReceive>
 8005b26:	e008      	b.n	8005b3a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005b28:	4b06      	ldr	r3, [pc, #24]	; (8005b44 <USBD_CDC_ReceivePacket+0x68>)
 8005b2a:	7819      	ldrb	r1, [r3, #0]
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005b32:	2340      	movs	r3, #64	; 0x40
 8005b34:	6878      	ldr	r0, [r7, #4]
 8005b36:	f001 ffdf 	bl	8007af8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005b3a:	2300      	movs	r3, #0
}
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	3710      	adds	r7, #16
 8005b40:	46bd      	mov	sp, r7
 8005b42:	bd80      	pop	{r7, pc}
 8005b44:	20000094 	.word	0x20000094

08005b48 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	b086      	sub	sp, #24
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	60f8      	str	r0, [r7, #12]
 8005b50:	60b9      	str	r1, [r7, #8]
 8005b52:	4613      	mov	r3, r2
 8005b54:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d101      	bne.n	8005b60 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005b5c:	2303      	movs	r3, #3
 8005b5e:	e01f      	b.n	8005ba0 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	2200      	movs	r2, #0
 8005b64:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	2200      	movs	r2, #0
 8005b74:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005b78:	68bb      	ldr	r3, [r7, #8]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d003      	beq.n	8005b86 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	68ba      	ldr	r2, [r7, #8]
 8005b82:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	2201      	movs	r2, #1
 8005b8a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	79fa      	ldrb	r2, [r7, #7]
 8005b92:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005b94:	68f8      	ldr	r0, [r7, #12]
 8005b96:	f001 fe59 	bl	800784c <USBD_LL_Init>
 8005b9a:	4603      	mov	r3, r0
 8005b9c:	75fb      	strb	r3, [r7, #23]

  return ret;
 8005b9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	3718      	adds	r7, #24
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	bd80      	pop	{r7, pc}

08005ba8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b084      	sub	sp, #16
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
 8005bb0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8005bb6:	683b      	ldr	r3, [r7, #0]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d101      	bne.n	8005bc0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005bbc:	2303      	movs	r3, #3
 8005bbe:	e025      	b.n	8005c0c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	683a      	ldr	r2, [r7, #0]
 8005bc4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	32ae      	adds	r2, #174	; 0xae
 8005bd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005bd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d00f      	beq.n	8005bfc <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	32ae      	adds	r2, #174	; 0xae
 8005be6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005bea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bec:	f107 020e 	add.w	r2, r7, #14
 8005bf0:	4610      	mov	r0, r2
 8005bf2:	4798      	blx	r3
 8005bf4:	4602      	mov	r2, r0
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8005c02:	1c5a      	adds	r2, r3, #1
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8005c0a:	2300      	movs	r3, #0
}
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	3710      	adds	r7, #16
 8005c10:	46bd      	mov	sp, r7
 8005c12:	bd80      	pop	{r7, pc}

08005c14 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005c14:	b580      	push	{r7, lr}
 8005c16:	b082      	sub	sp, #8
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005c1c:	6878      	ldr	r0, [r7, #4]
 8005c1e:	f001 fe61 	bl	80078e4 <USBD_LL_Start>
 8005c22:	4603      	mov	r3, r0
}
 8005c24:	4618      	mov	r0, r3
 8005c26:	3708      	adds	r7, #8
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	bd80      	pop	{r7, pc}

08005c2c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8005c2c:	b480      	push	{r7}
 8005c2e:	b083      	sub	sp, #12
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005c34:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8005c36:	4618      	mov	r0, r3
 8005c38:	370c      	adds	r7, #12
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c40:	4770      	bx	lr

08005c42 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005c42:	b580      	push	{r7, lr}
 8005c44:	b084      	sub	sp, #16
 8005c46:	af00      	add	r7, sp, #0
 8005c48:	6078      	str	r0, [r7, #4]
 8005c4a:	460b      	mov	r3, r1
 8005c4c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005c4e:	2300      	movs	r3, #0
 8005c50:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d009      	beq.n	8005c70 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	78fa      	ldrb	r2, [r7, #3]
 8005c66:	4611      	mov	r1, r2
 8005c68:	6878      	ldr	r0, [r7, #4]
 8005c6a:	4798      	blx	r3
 8005c6c:	4603      	mov	r3, r0
 8005c6e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005c70:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c72:	4618      	mov	r0, r3
 8005c74:	3710      	adds	r7, #16
 8005c76:	46bd      	mov	sp, r7
 8005c78:	bd80      	pop	{r7, pc}

08005c7a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005c7a:	b580      	push	{r7, lr}
 8005c7c:	b084      	sub	sp, #16
 8005c7e:	af00      	add	r7, sp, #0
 8005c80:	6078      	str	r0, [r7, #4]
 8005c82:	460b      	mov	r3, r1
 8005c84:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005c86:	2300      	movs	r3, #0
 8005c88:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c90:	685b      	ldr	r3, [r3, #4]
 8005c92:	78fa      	ldrb	r2, [r7, #3]
 8005c94:	4611      	mov	r1, r2
 8005c96:	6878      	ldr	r0, [r7, #4]
 8005c98:	4798      	blx	r3
 8005c9a:	4603      	mov	r3, r0
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d001      	beq.n	8005ca4 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8005ca0:	2303      	movs	r3, #3
 8005ca2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005ca4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	3710      	adds	r7, #16
 8005caa:	46bd      	mov	sp, r7
 8005cac:	bd80      	pop	{r7, pc}

08005cae <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005cae:	b580      	push	{r7, lr}
 8005cb0:	b084      	sub	sp, #16
 8005cb2:	af00      	add	r7, sp, #0
 8005cb4:	6078      	str	r0, [r7, #4]
 8005cb6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005cbe:	6839      	ldr	r1, [r7, #0]
 8005cc0:	4618      	mov	r0, r3
 8005cc2:	f001 f90e 	bl	8006ee2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	2201      	movs	r2, #1
 8005cca:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8005cd4:	461a      	mov	r2, r3
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005ce2:	f003 031f 	and.w	r3, r3, #31
 8005ce6:	2b02      	cmp	r3, #2
 8005ce8:	d01a      	beq.n	8005d20 <USBD_LL_SetupStage+0x72>
 8005cea:	2b02      	cmp	r3, #2
 8005cec:	d822      	bhi.n	8005d34 <USBD_LL_SetupStage+0x86>
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d002      	beq.n	8005cf8 <USBD_LL_SetupStage+0x4a>
 8005cf2:	2b01      	cmp	r3, #1
 8005cf4:	d00a      	beq.n	8005d0c <USBD_LL_SetupStage+0x5e>
 8005cf6:	e01d      	b.n	8005d34 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005cfe:	4619      	mov	r1, r3
 8005d00:	6878      	ldr	r0, [r7, #4]
 8005d02:	f000 fb65 	bl	80063d0 <USBD_StdDevReq>
 8005d06:	4603      	mov	r3, r0
 8005d08:	73fb      	strb	r3, [r7, #15]
      break;
 8005d0a:	e020      	b.n	8005d4e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005d12:	4619      	mov	r1, r3
 8005d14:	6878      	ldr	r0, [r7, #4]
 8005d16:	f000 fbcd 	bl	80064b4 <USBD_StdItfReq>
 8005d1a:	4603      	mov	r3, r0
 8005d1c:	73fb      	strb	r3, [r7, #15]
      break;
 8005d1e:	e016      	b.n	8005d4e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005d26:	4619      	mov	r1, r3
 8005d28:	6878      	ldr	r0, [r7, #4]
 8005d2a:	f000 fc2f 	bl	800658c <USBD_StdEPReq>
 8005d2e:	4603      	mov	r3, r0
 8005d30:	73fb      	strb	r3, [r7, #15]
      break;
 8005d32:	e00c      	b.n	8005d4e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005d3a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005d3e:	b2db      	uxtb	r3, r3
 8005d40:	4619      	mov	r1, r3
 8005d42:	6878      	ldr	r0, [r7, #4]
 8005d44:	f001 fe2e 	bl	80079a4 <USBD_LL_StallEP>
 8005d48:	4603      	mov	r3, r0
 8005d4a:	73fb      	strb	r3, [r7, #15]
      break;
 8005d4c:	bf00      	nop
  }

  return ret;
 8005d4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d50:	4618      	mov	r0, r3
 8005d52:	3710      	adds	r7, #16
 8005d54:	46bd      	mov	sp, r7
 8005d56:	bd80      	pop	{r7, pc}

08005d58 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	b086      	sub	sp, #24
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	60f8      	str	r0, [r7, #12]
 8005d60:	460b      	mov	r3, r1
 8005d62:	607a      	str	r2, [r7, #4]
 8005d64:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8005d66:	2300      	movs	r3, #0
 8005d68:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8005d6a:	7afb      	ldrb	r3, [r7, #11]
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d16e      	bne.n	8005e4e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8005d76:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005d7e:	2b03      	cmp	r3, #3
 8005d80:	f040 8098 	bne.w	8005eb4 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8005d84:	693b      	ldr	r3, [r7, #16]
 8005d86:	689a      	ldr	r2, [r3, #8]
 8005d88:	693b      	ldr	r3, [r7, #16]
 8005d8a:	68db      	ldr	r3, [r3, #12]
 8005d8c:	429a      	cmp	r2, r3
 8005d8e:	d913      	bls.n	8005db8 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8005d90:	693b      	ldr	r3, [r7, #16]
 8005d92:	689a      	ldr	r2, [r3, #8]
 8005d94:	693b      	ldr	r3, [r7, #16]
 8005d96:	68db      	ldr	r3, [r3, #12]
 8005d98:	1ad2      	subs	r2, r2, r3
 8005d9a:	693b      	ldr	r3, [r7, #16]
 8005d9c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8005d9e:	693b      	ldr	r3, [r7, #16]
 8005da0:	68da      	ldr	r2, [r3, #12]
 8005da2:	693b      	ldr	r3, [r7, #16]
 8005da4:	689b      	ldr	r3, [r3, #8]
 8005da6:	4293      	cmp	r3, r2
 8005da8:	bf28      	it	cs
 8005daa:	4613      	movcs	r3, r2
 8005dac:	461a      	mov	r2, r3
 8005dae:	6879      	ldr	r1, [r7, #4]
 8005db0:	68f8      	ldr	r0, [r7, #12]
 8005db2:	f001 f98a 	bl	80070ca <USBD_CtlContinueRx>
 8005db6:	e07d      	b.n	8005eb4 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005dbe:	f003 031f 	and.w	r3, r3, #31
 8005dc2:	2b02      	cmp	r3, #2
 8005dc4:	d014      	beq.n	8005df0 <USBD_LL_DataOutStage+0x98>
 8005dc6:	2b02      	cmp	r3, #2
 8005dc8:	d81d      	bhi.n	8005e06 <USBD_LL_DataOutStage+0xae>
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d002      	beq.n	8005dd4 <USBD_LL_DataOutStage+0x7c>
 8005dce:	2b01      	cmp	r3, #1
 8005dd0:	d003      	beq.n	8005dda <USBD_LL_DataOutStage+0x82>
 8005dd2:	e018      	b.n	8005e06 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8005dd4:	2300      	movs	r3, #0
 8005dd6:	75bb      	strb	r3, [r7, #22]
            break;
 8005dd8:	e018      	b.n	8005e0c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8005de0:	b2db      	uxtb	r3, r3
 8005de2:	4619      	mov	r1, r3
 8005de4:	68f8      	ldr	r0, [r7, #12]
 8005de6:	f000 fa64 	bl	80062b2 <USBD_CoreFindIF>
 8005dea:	4603      	mov	r3, r0
 8005dec:	75bb      	strb	r3, [r7, #22]
            break;
 8005dee:	e00d      	b.n	8005e0c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8005df6:	b2db      	uxtb	r3, r3
 8005df8:	4619      	mov	r1, r3
 8005dfa:	68f8      	ldr	r0, [r7, #12]
 8005dfc:	f000 fa66 	bl	80062cc <USBD_CoreFindEP>
 8005e00:	4603      	mov	r3, r0
 8005e02:	75bb      	strb	r3, [r7, #22]
            break;
 8005e04:	e002      	b.n	8005e0c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8005e06:	2300      	movs	r3, #0
 8005e08:	75bb      	strb	r3, [r7, #22]
            break;
 8005e0a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8005e0c:	7dbb      	ldrb	r3, [r7, #22]
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d119      	bne.n	8005e46 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e18:	b2db      	uxtb	r3, r3
 8005e1a:	2b03      	cmp	r3, #3
 8005e1c:	d113      	bne.n	8005e46 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8005e1e:	7dba      	ldrb	r2, [r7, #22]
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	32ae      	adds	r2, #174	; 0xae
 8005e24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e28:	691b      	ldr	r3, [r3, #16]
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d00b      	beq.n	8005e46 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8005e2e:	7dba      	ldrb	r2, [r7, #22]
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8005e36:	7dba      	ldrb	r2, [r7, #22]
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	32ae      	adds	r2, #174	; 0xae
 8005e3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e40:	691b      	ldr	r3, [r3, #16]
 8005e42:	68f8      	ldr	r0, [r7, #12]
 8005e44:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8005e46:	68f8      	ldr	r0, [r7, #12]
 8005e48:	f001 f950 	bl	80070ec <USBD_CtlSendStatus>
 8005e4c:	e032      	b.n	8005eb4 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8005e4e:	7afb      	ldrb	r3, [r7, #11]
 8005e50:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e54:	b2db      	uxtb	r3, r3
 8005e56:	4619      	mov	r1, r3
 8005e58:	68f8      	ldr	r0, [r7, #12]
 8005e5a:	f000 fa37 	bl	80062cc <USBD_CoreFindEP>
 8005e5e:	4603      	mov	r3, r0
 8005e60:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005e62:	7dbb      	ldrb	r3, [r7, #22]
 8005e64:	2bff      	cmp	r3, #255	; 0xff
 8005e66:	d025      	beq.n	8005eb4 <USBD_LL_DataOutStage+0x15c>
 8005e68:	7dbb      	ldrb	r3, [r7, #22]
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d122      	bne.n	8005eb4 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e74:	b2db      	uxtb	r3, r3
 8005e76:	2b03      	cmp	r3, #3
 8005e78:	d117      	bne.n	8005eaa <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8005e7a:	7dba      	ldrb	r2, [r7, #22]
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	32ae      	adds	r2, #174	; 0xae
 8005e80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e84:	699b      	ldr	r3, [r3, #24]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d00f      	beq.n	8005eaa <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8005e8a:	7dba      	ldrb	r2, [r7, #22]
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8005e92:	7dba      	ldrb	r2, [r7, #22]
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	32ae      	adds	r2, #174	; 0xae
 8005e98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e9c:	699b      	ldr	r3, [r3, #24]
 8005e9e:	7afa      	ldrb	r2, [r7, #11]
 8005ea0:	4611      	mov	r1, r2
 8005ea2:	68f8      	ldr	r0, [r7, #12]
 8005ea4:	4798      	blx	r3
 8005ea6:	4603      	mov	r3, r0
 8005ea8:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8005eaa:	7dfb      	ldrb	r3, [r7, #23]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d001      	beq.n	8005eb4 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8005eb0:	7dfb      	ldrb	r3, [r7, #23]
 8005eb2:	e000      	b.n	8005eb6 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8005eb4:	2300      	movs	r3, #0
}
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	3718      	adds	r7, #24
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	bd80      	pop	{r7, pc}

08005ebe <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005ebe:	b580      	push	{r7, lr}
 8005ec0:	b086      	sub	sp, #24
 8005ec2:	af00      	add	r7, sp, #0
 8005ec4:	60f8      	str	r0, [r7, #12]
 8005ec6:	460b      	mov	r3, r1
 8005ec8:	607a      	str	r2, [r7, #4]
 8005eca:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8005ecc:	7afb      	ldrb	r3, [r7, #11]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d16f      	bne.n	8005fb2 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	3314      	adds	r3, #20
 8005ed6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005ede:	2b02      	cmp	r3, #2
 8005ee0:	d15a      	bne.n	8005f98 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8005ee2:	693b      	ldr	r3, [r7, #16]
 8005ee4:	689a      	ldr	r2, [r3, #8]
 8005ee6:	693b      	ldr	r3, [r7, #16]
 8005ee8:	68db      	ldr	r3, [r3, #12]
 8005eea:	429a      	cmp	r2, r3
 8005eec:	d914      	bls.n	8005f18 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005eee:	693b      	ldr	r3, [r7, #16]
 8005ef0:	689a      	ldr	r2, [r3, #8]
 8005ef2:	693b      	ldr	r3, [r7, #16]
 8005ef4:	68db      	ldr	r3, [r3, #12]
 8005ef6:	1ad2      	subs	r2, r2, r3
 8005ef8:	693b      	ldr	r3, [r7, #16]
 8005efa:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8005efc:	693b      	ldr	r3, [r7, #16]
 8005efe:	689b      	ldr	r3, [r3, #8]
 8005f00:	461a      	mov	r2, r3
 8005f02:	6879      	ldr	r1, [r7, #4]
 8005f04:	68f8      	ldr	r0, [r7, #12]
 8005f06:	f001 f8b2 	bl	800706e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	2100      	movs	r1, #0
 8005f10:	68f8      	ldr	r0, [r7, #12]
 8005f12:	f001 fdf1 	bl	8007af8 <USBD_LL_PrepareReceive>
 8005f16:	e03f      	b.n	8005f98 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8005f18:	693b      	ldr	r3, [r7, #16]
 8005f1a:	68da      	ldr	r2, [r3, #12]
 8005f1c:	693b      	ldr	r3, [r7, #16]
 8005f1e:	689b      	ldr	r3, [r3, #8]
 8005f20:	429a      	cmp	r2, r3
 8005f22:	d11c      	bne.n	8005f5e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8005f24:	693b      	ldr	r3, [r7, #16]
 8005f26:	685a      	ldr	r2, [r3, #4]
 8005f28:	693b      	ldr	r3, [r7, #16]
 8005f2a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8005f2c:	429a      	cmp	r2, r3
 8005f2e:	d316      	bcc.n	8005f5e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8005f30:	693b      	ldr	r3, [r7, #16]
 8005f32:	685a      	ldr	r2, [r3, #4]
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005f3a:	429a      	cmp	r2, r3
 8005f3c:	d20f      	bcs.n	8005f5e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005f3e:	2200      	movs	r2, #0
 8005f40:	2100      	movs	r1, #0
 8005f42:	68f8      	ldr	r0, [r7, #12]
 8005f44:	f001 f893 	bl	800706e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005f50:	2300      	movs	r3, #0
 8005f52:	2200      	movs	r2, #0
 8005f54:	2100      	movs	r1, #0
 8005f56:	68f8      	ldr	r0, [r7, #12]
 8005f58:	f001 fdce 	bl	8007af8 <USBD_LL_PrepareReceive>
 8005f5c:	e01c      	b.n	8005f98 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f64:	b2db      	uxtb	r3, r3
 8005f66:	2b03      	cmp	r3, #3
 8005f68:	d10f      	bne.n	8005f8a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f70:	68db      	ldr	r3, [r3, #12]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d009      	beq.n	8005f8a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	2200      	movs	r2, #0
 8005f7a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f84:	68db      	ldr	r3, [r3, #12]
 8005f86:	68f8      	ldr	r0, [r7, #12]
 8005f88:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005f8a:	2180      	movs	r1, #128	; 0x80
 8005f8c:	68f8      	ldr	r0, [r7, #12]
 8005f8e:	f001 fd09 	bl	80079a4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8005f92:	68f8      	ldr	r0, [r7, #12]
 8005f94:	f001 f8bd 	bl	8007112 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d03a      	beq.n	8006018 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8005fa2:	68f8      	ldr	r0, [r7, #12]
 8005fa4:	f7ff fe42 	bl	8005c2c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	2200      	movs	r2, #0
 8005fac:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8005fb0:	e032      	b.n	8006018 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8005fb2:	7afb      	ldrb	r3, [r7, #11]
 8005fb4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005fb8:	b2db      	uxtb	r3, r3
 8005fba:	4619      	mov	r1, r3
 8005fbc:	68f8      	ldr	r0, [r7, #12]
 8005fbe:	f000 f985 	bl	80062cc <USBD_CoreFindEP>
 8005fc2:	4603      	mov	r3, r0
 8005fc4:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005fc6:	7dfb      	ldrb	r3, [r7, #23]
 8005fc8:	2bff      	cmp	r3, #255	; 0xff
 8005fca:	d025      	beq.n	8006018 <USBD_LL_DataInStage+0x15a>
 8005fcc:	7dfb      	ldrb	r3, [r7, #23]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d122      	bne.n	8006018 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005fd8:	b2db      	uxtb	r3, r3
 8005fda:	2b03      	cmp	r3, #3
 8005fdc:	d11c      	bne.n	8006018 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8005fde:	7dfa      	ldrb	r2, [r7, #23]
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	32ae      	adds	r2, #174	; 0xae
 8005fe4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005fe8:	695b      	ldr	r3, [r3, #20]
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d014      	beq.n	8006018 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8005fee:	7dfa      	ldrb	r2, [r7, #23]
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8005ff6:	7dfa      	ldrb	r2, [r7, #23]
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	32ae      	adds	r2, #174	; 0xae
 8005ffc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006000:	695b      	ldr	r3, [r3, #20]
 8006002:	7afa      	ldrb	r2, [r7, #11]
 8006004:	4611      	mov	r1, r2
 8006006:	68f8      	ldr	r0, [r7, #12]
 8006008:	4798      	blx	r3
 800600a:	4603      	mov	r3, r0
 800600c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800600e:	7dbb      	ldrb	r3, [r7, #22]
 8006010:	2b00      	cmp	r3, #0
 8006012:	d001      	beq.n	8006018 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8006014:	7dbb      	ldrb	r3, [r7, #22]
 8006016:	e000      	b.n	800601a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8006018:	2300      	movs	r3, #0
}
 800601a:	4618      	mov	r0, r3
 800601c:	3718      	adds	r7, #24
 800601e:	46bd      	mov	sp, r7
 8006020:	bd80      	pop	{r7, pc}

08006022 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006022:	b580      	push	{r7, lr}
 8006024:	b084      	sub	sp, #16
 8006026:	af00      	add	r7, sp, #0
 8006028:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800602a:	2300      	movs	r3, #0
 800602c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	2201      	movs	r2, #1
 8006032:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	2200      	movs	r2, #0
 800603a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	2200      	movs	r2, #0
 8006042:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2200      	movs	r2, #0
 8006048:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2200      	movs	r2, #0
 8006050:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800605a:	2b00      	cmp	r3, #0
 800605c:	d014      	beq.n	8006088 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006064:	685b      	ldr	r3, [r3, #4]
 8006066:	2b00      	cmp	r3, #0
 8006068:	d00e      	beq.n	8006088 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006070:	685b      	ldr	r3, [r3, #4]
 8006072:	687a      	ldr	r2, [r7, #4]
 8006074:	6852      	ldr	r2, [r2, #4]
 8006076:	b2d2      	uxtb	r2, r2
 8006078:	4611      	mov	r1, r2
 800607a:	6878      	ldr	r0, [r7, #4]
 800607c:	4798      	blx	r3
 800607e:	4603      	mov	r3, r0
 8006080:	2b00      	cmp	r3, #0
 8006082:	d001      	beq.n	8006088 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8006084:	2303      	movs	r3, #3
 8006086:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006088:	2340      	movs	r3, #64	; 0x40
 800608a:	2200      	movs	r2, #0
 800608c:	2100      	movs	r1, #0
 800608e:	6878      	ldr	r0, [r7, #4]
 8006090:	f001 fc43 	bl	800791a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	2201      	movs	r2, #1
 8006098:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2240      	movs	r2, #64	; 0x40
 80060a0:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80060a4:	2340      	movs	r3, #64	; 0x40
 80060a6:	2200      	movs	r2, #0
 80060a8:	2180      	movs	r1, #128	; 0x80
 80060aa:	6878      	ldr	r0, [r7, #4]
 80060ac:	f001 fc35 	bl	800791a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2201      	movs	r2, #1
 80060b4:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	2240      	movs	r2, #64	; 0x40
 80060ba:	621a      	str	r2, [r3, #32]

  return ret;
 80060bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80060be:	4618      	mov	r0, r3
 80060c0:	3710      	adds	r7, #16
 80060c2:	46bd      	mov	sp, r7
 80060c4:	bd80      	pop	{r7, pc}

080060c6 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80060c6:	b480      	push	{r7}
 80060c8:	b083      	sub	sp, #12
 80060ca:	af00      	add	r7, sp, #0
 80060cc:	6078      	str	r0, [r7, #4]
 80060ce:	460b      	mov	r3, r1
 80060d0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	78fa      	ldrb	r2, [r7, #3]
 80060d6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80060d8:	2300      	movs	r3, #0
}
 80060da:	4618      	mov	r0, r3
 80060dc:	370c      	adds	r7, #12
 80060de:	46bd      	mov	sp, r7
 80060e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e4:	4770      	bx	lr

080060e6 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80060e6:	b480      	push	{r7}
 80060e8:	b083      	sub	sp, #12
 80060ea:	af00      	add	r7, sp, #0
 80060ec:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80060f4:	b2db      	uxtb	r3, r3
 80060f6:	2b04      	cmp	r3, #4
 80060f8:	d006      	beq.n	8006108 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006100:	b2da      	uxtb	r2, r3
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2204      	movs	r2, #4
 800610c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006110:	2300      	movs	r3, #0
}
 8006112:	4618      	mov	r0, r3
 8006114:	370c      	adds	r7, #12
 8006116:	46bd      	mov	sp, r7
 8006118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611c:	4770      	bx	lr

0800611e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800611e:	b480      	push	{r7}
 8006120:	b083      	sub	sp, #12
 8006122:	af00      	add	r7, sp, #0
 8006124:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800612c:	b2db      	uxtb	r3, r3
 800612e:	2b04      	cmp	r3, #4
 8006130:	d106      	bne.n	8006140 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8006138:	b2da      	uxtb	r2, r3
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006140:	2300      	movs	r3, #0
}
 8006142:	4618      	mov	r0, r3
 8006144:	370c      	adds	r7, #12
 8006146:	46bd      	mov	sp, r7
 8006148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614c:	4770      	bx	lr

0800614e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800614e:	b580      	push	{r7, lr}
 8006150:	b082      	sub	sp, #8
 8006152:	af00      	add	r7, sp, #0
 8006154:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800615c:	b2db      	uxtb	r3, r3
 800615e:	2b03      	cmp	r3, #3
 8006160:	d110      	bne.n	8006184 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006168:	2b00      	cmp	r3, #0
 800616a:	d00b      	beq.n	8006184 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006172:	69db      	ldr	r3, [r3, #28]
 8006174:	2b00      	cmp	r3, #0
 8006176:	d005      	beq.n	8006184 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800617e:	69db      	ldr	r3, [r3, #28]
 8006180:	6878      	ldr	r0, [r7, #4]
 8006182:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8006184:	2300      	movs	r3, #0
}
 8006186:	4618      	mov	r0, r3
 8006188:	3708      	adds	r7, #8
 800618a:	46bd      	mov	sp, r7
 800618c:	bd80      	pop	{r7, pc}

0800618e <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800618e:	b580      	push	{r7, lr}
 8006190:	b082      	sub	sp, #8
 8006192:	af00      	add	r7, sp, #0
 8006194:	6078      	str	r0, [r7, #4]
 8006196:	460b      	mov	r3, r1
 8006198:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	32ae      	adds	r2, #174	; 0xae
 80061a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d101      	bne.n	80061b0 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80061ac:	2303      	movs	r3, #3
 80061ae:	e01c      	b.n	80061ea <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80061b6:	b2db      	uxtb	r3, r3
 80061b8:	2b03      	cmp	r3, #3
 80061ba:	d115      	bne.n	80061e8 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	32ae      	adds	r2, #174	; 0xae
 80061c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061ca:	6a1b      	ldr	r3, [r3, #32]
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d00b      	beq.n	80061e8 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	32ae      	adds	r2, #174	; 0xae
 80061da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061de:	6a1b      	ldr	r3, [r3, #32]
 80061e0:	78fa      	ldrb	r2, [r7, #3]
 80061e2:	4611      	mov	r1, r2
 80061e4:	6878      	ldr	r0, [r7, #4]
 80061e6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80061e8:	2300      	movs	r3, #0
}
 80061ea:	4618      	mov	r0, r3
 80061ec:	3708      	adds	r7, #8
 80061ee:	46bd      	mov	sp, r7
 80061f0:	bd80      	pop	{r7, pc}

080061f2 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80061f2:	b580      	push	{r7, lr}
 80061f4:	b082      	sub	sp, #8
 80061f6:	af00      	add	r7, sp, #0
 80061f8:	6078      	str	r0, [r7, #4]
 80061fa:	460b      	mov	r3, r1
 80061fc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	32ae      	adds	r2, #174	; 0xae
 8006208:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800620c:	2b00      	cmp	r3, #0
 800620e:	d101      	bne.n	8006214 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8006210:	2303      	movs	r3, #3
 8006212:	e01c      	b.n	800624e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800621a:	b2db      	uxtb	r3, r3
 800621c:	2b03      	cmp	r3, #3
 800621e:	d115      	bne.n	800624c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	32ae      	adds	r2, #174	; 0xae
 800622a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800622e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006230:	2b00      	cmp	r3, #0
 8006232:	d00b      	beq.n	800624c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	32ae      	adds	r2, #174	; 0xae
 800623e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006244:	78fa      	ldrb	r2, [r7, #3]
 8006246:	4611      	mov	r1, r2
 8006248:	6878      	ldr	r0, [r7, #4]
 800624a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800624c:	2300      	movs	r3, #0
}
 800624e:	4618      	mov	r0, r3
 8006250:	3708      	adds	r7, #8
 8006252:	46bd      	mov	sp, r7
 8006254:	bd80      	pop	{r7, pc}

08006256 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006256:	b480      	push	{r7}
 8006258:	b083      	sub	sp, #12
 800625a:	af00      	add	r7, sp, #0
 800625c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800625e:	2300      	movs	r3, #0
}
 8006260:	4618      	mov	r0, r3
 8006262:	370c      	adds	r7, #12
 8006264:	46bd      	mov	sp, r7
 8006266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626a:	4770      	bx	lr

0800626c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800626c:	b580      	push	{r7, lr}
 800626e:	b084      	sub	sp, #16
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8006274:	2300      	movs	r3, #0
 8006276:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2201      	movs	r2, #1
 800627c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006286:	2b00      	cmp	r3, #0
 8006288:	d00e      	beq.n	80062a8 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006290:	685b      	ldr	r3, [r3, #4]
 8006292:	687a      	ldr	r2, [r7, #4]
 8006294:	6852      	ldr	r2, [r2, #4]
 8006296:	b2d2      	uxtb	r2, r2
 8006298:	4611      	mov	r1, r2
 800629a:	6878      	ldr	r0, [r7, #4]
 800629c:	4798      	blx	r3
 800629e:	4603      	mov	r3, r0
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d001      	beq.n	80062a8 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80062a4:	2303      	movs	r3, #3
 80062a6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80062a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80062aa:	4618      	mov	r0, r3
 80062ac:	3710      	adds	r7, #16
 80062ae:	46bd      	mov	sp, r7
 80062b0:	bd80      	pop	{r7, pc}

080062b2 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80062b2:	b480      	push	{r7}
 80062b4:	b083      	sub	sp, #12
 80062b6:	af00      	add	r7, sp, #0
 80062b8:	6078      	str	r0, [r7, #4]
 80062ba:	460b      	mov	r3, r1
 80062bc:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80062be:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80062c0:	4618      	mov	r0, r3
 80062c2:	370c      	adds	r7, #12
 80062c4:	46bd      	mov	sp, r7
 80062c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ca:	4770      	bx	lr

080062cc <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80062cc:	b480      	push	{r7}
 80062ce:	b083      	sub	sp, #12
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]
 80062d4:	460b      	mov	r3, r1
 80062d6:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80062d8:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80062da:	4618      	mov	r0, r3
 80062dc:	370c      	adds	r7, #12
 80062de:	46bd      	mov	sp, r7
 80062e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e4:	4770      	bx	lr

080062e6 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80062e6:	b580      	push	{r7, lr}
 80062e8:	b086      	sub	sp, #24
 80062ea:	af00      	add	r7, sp, #0
 80062ec:	6078      	str	r0, [r7, #4]
 80062ee:	460b      	mov	r3, r1
 80062f0:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80062fa:	2300      	movs	r3, #0
 80062fc:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	885b      	ldrh	r3, [r3, #2]
 8006302:	b29a      	uxth	r2, r3
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	781b      	ldrb	r3, [r3, #0]
 8006308:	b29b      	uxth	r3, r3
 800630a:	429a      	cmp	r2, r3
 800630c:	d920      	bls.n	8006350 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	781b      	ldrb	r3, [r3, #0]
 8006312:	b29b      	uxth	r3, r3
 8006314:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8006316:	e013      	b.n	8006340 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8006318:	f107 030a 	add.w	r3, r7, #10
 800631c:	4619      	mov	r1, r3
 800631e:	6978      	ldr	r0, [r7, #20]
 8006320:	f000 f81b 	bl	800635a <USBD_GetNextDesc>
 8006324:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8006326:	697b      	ldr	r3, [r7, #20]
 8006328:	785b      	ldrb	r3, [r3, #1]
 800632a:	2b05      	cmp	r3, #5
 800632c:	d108      	bne.n	8006340 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800632e:	697b      	ldr	r3, [r7, #20]
 8006330:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8006332:	693b      	ldr	r3, [r7, #16]
 8006334:	789b      	ldrb	r3, [r3, #2]
 8006336:	78fa      	ldrb	r2, [r7, #3]
 8006338:	429a      	cmp	r2, r3
 800633a:	d008      	beq.n	800634e <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800633c:	2300      	movs	r3, #0
 800633e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	885b      	ldrh	r3, [r3, #2]
 8006344:	b29a      	uxth	r2, r3
 8006346:	897b      	ldrh	r3, [r7, #10]
 8006348:	429a      	cmp	r2, r3
 800634a:	d8e5      	bhi.n	8006318 <USBD_GetEpDesc+0x32>
 800634c:	e000      	b.n	8006350 <USBD_GetEpDesc+0x6a>
          break;
 800634e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8006350:	693b      	ldr	r3, [r7, #16]
}
 8006352:	4618      	mov	r0, r3
 8006354:	3718      	adds	r7, #24
 8006356:	46bd      	mov	sp, r7
 8006358:	bd80      	pop	{r7, pc}

0800635a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800635a:	b480      	push	{r7}
 800635c:	b085      	sub	sp, #20
 800635e:	af00      	add	r7, sp, #0
 8006360:	6078      	str	r0, [r7, #4]
 8006362:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8006368:	683b      	ldr	r3, [r7, #0]
 800636a:	881a      	ldrh	r2, [r3, #0]
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	781b      	ldrb	r3, [r3, #0]
 8006370:	b29b      	uxth	r3, r3
 8006372:	4413      	add	r3, r2
 8006374:	b29a      	uxth	r2, r3
 8006376:	683b      	ldr	r3, [r7, #0]
 8006378:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	781b      	ldrb	r3, [r3, #0]
 800637e:	461a      	mov	r2, r3
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	4413      	add	r3, r2
 8006384:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8006386:	68fb      	ldr	r3, [r7, #12]
}
 8006388:	4618      	mov	r0, r3
 800638a:	3714      	adds	r7, #20
 800638c:	46bd      	mov	sp, r7
 800638e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006392:	4770      	bx	lr

08006394 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006394:	b480      	push	{r7}
 8006396:	b087      	sub	sp, #28
 8006398:	af00      	add	r7, sp, #0
 800639a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80063a0:	697b      	ldr	r3, [r7, #20]
 80063a2:	781b      	ldrb	r3, [r3, #0]
 80063a4:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80063a6:	697b      	ldr	r3, [r7, #20]
 80063a8:	3301      	adds	r3, #1
 80063aa:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80063ac:	697b      	ldr	r3, [r7, #20]
 80063ae:	781b      	ldrb	r3, [r3, #0]
 80063b0:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80063b2:	8a3b      	ldrh	r3, [r7, #16]
 80063b4:	021b      	lsls	r3, r3, #8
 80063b6:	b21a      	sxth	r2, r3
 80063b8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80063bc:	4313      	orrs	r3, r2
 80063be:	b21b      	sxth	r3, r3
 80063c0:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80063c2:	89fb      	ldrh	r3, [r7, #14]
}
 80063c4:	4618      	mov	r0, r3
 80063c6:	371c      	adds	r7, #28
 80063c8:	46bd      	mov	sp, r7
 80063ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ce:	4770      	bx	lr

080063d0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80063d0:	b580      	push	{r7, lr}
 80063d2:	b084      	sub	sp, #16
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]
 80063d8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80063da:	2300      	movs	r3, #0
 80063dc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80063de:	683b      	ldr	r3, [r7, #0]
 80063e0:	781b      	ldrb	r3, [r3, #0]
 80063e2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80063e6:	2b40      	cmp	r3, #64	; 0x40
 80063e8:	d005      	beq.n	80063f6 <USBD_StdDevReq+0x26>
 80063ea:	2b40      	cmp	r3, #64	; 0x40
 80063ec:	d857      	bhi.n	800649e <USBD_StdDevReq+0xce>
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d00f      	beq.n	8006412 <USBD_StdDevReq+0x42>
 80063f2:	2b20      	cmp	r3, #32
 80063f4:	d153      	bne.n	800649e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	32ae      	adds	r2, #174	; 0xae
 8006400:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006404:	689b      	ldr	r3, [r3, #8]
 8006406:	6839      	ldr	r1, [r7, #0]
 8006408:	6878      	ldr	r0, [r7, #4]
 800640a:	4798      	blx	r3
 800640c:	4603      	mov	r3, r0
 800640e:	73fb      	strb	r3, [r7, #15]
      break;
 8006410:	e04a      	b.n	80064a8 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	785b      	ldrb	r3, [r3, #1]
 8006416:	2b09      	cmp	r3, #9
 8006418:	d83b      	bhi.n	8006492 <USBD_StdDevReq+0xc2>
 800641a:	a201      	add	r2, pc, #4	; (adr r2, 8006420 <USBD_StdDevReq+0x50>)
 800641c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006420:	08006475 	.word	0x08006475
 8006424:	08006489 	.word	0x08006489
 8006428:	08006493 	.word	0x08006493
 800642c:	0800647f 	.word	0x0800647f
 8006430:	08006493 	.word	0x08006493
 8006434:	08006453 	.word	0x08006453
 8006438:	08006449 	.word	0x08006449
 800643c:	08006493 	.word	0x08006493
 8006440:	0800646b 	.word	0x0800646b
 8006444:	0800645d 	.word	0x0800645d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006448:	6839      	ldr	r1, [r7, #0]
 800644a:	6878      	ldr	r0, [r7, #4]
 800644c:	f000 fa3c 	bl	80068c8 <USBD_GetDescriptor>
          break;
 8006450:	e024      	b.n	800649c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006452:	6839      	ldr	r1, [r7, #0]
 8006454:	6878      	ldr	r0, [r7, #4]
 8006456:	f000 fba1 	bl	8006b9c <USBD_SetAddress>
          break;
 800645a:	e01f      	b.n	800649c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800645c:	6839      	ldr	r1, [r7, #0]
 800645e:	6878      	ldr	r0, [r7, #4]
 8006460:	f000 fbe0 	bl	8006c24 <USBD_SetConfig>
 8006464:	4603      	mov	r3, r0
 8006466:	73fb      	strb	r3, [r7, #15]
          break;
 8006468:	e018      	b.n	800649c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800646a:	6839      	ldr	r1, [r7, #0]
 800646c:	6878      	ldr	r0, [r7, #4]
 800646e:	f000 fc83 	bl	8006d78 <USBD_GetConfig>
          break;
 8006472:	e013      	b.n	800649c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006474:	6839      	ldr	r1, [r7, #0]
 8006476:	6878      	ldr	r0, [r7, #4]
 8006478:	f000 fcb4 	bl	8006de4 <USBD_GetStatus>
          break;
 800647c:	e00e      	b.n	800649c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800647e:	6839      	ldr	r1, [r7, #0]
 8006480:	6878      	ldr	r0, [r7, #4]
 8006482:	f000 fce3 	bl	8006e4c <USBD_SetFeature>
          break;
 8006486:	e009      	b.n	800649c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006488:	6839      	ldr	r1, [r7, #0]
 800648a:	6878      	ldr	r0, [r7, #4]
 800648c:	f000 fd07 	bl	8006e9e <USBD_ClrFeature>
          break;
 8006490:	e004      	b.n	800649c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8006492:	6839      	ldr	r1, [r7, #0]
 8006494:	6878      	ldr	r0, [r7, #4]
 8006496:	f000 fd5e 	bl	8006f56 <USBD_CtlError>
          break;
 800649a:	bf00      	nop
      }
      break;
 800649c:	e004      	b.n	80064a8 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800649e:	6839      	ldr	r1, [r7, #0]
 80064a0:	6878      	ldr	r0, [r7, #4]
 80064a2:	f000 fd58 	bl	8006f56 <USBD_CtlError>
      break;
 80064a6:	bf00      	nop
  }

  return ret;
 80064a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80064aa:	4618      	mov	r0, r3
 80064ac:	3710      	adds	r7, #16
 80064ae:	46bd      	mov	sp, r7
 80064b0:	bd80      	pop	{r7, pc}
 80064b2:	bf00      	nop

080064b4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80064b4:	b580      	push	{r7, lr}
 80064b6:	b084      	sub	sp, #16
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	6078      	str	r0, [r7, #4]
 80064bc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80064be:	2300      	movs	r3, #0
 80064c0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80064c2:	683b      	ldr	r3, [r7, #0]
 80064c4:	781b      	ldrb	r3, [r3, #0]
 80064c6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80064ca:	2b40      	cmp	r3, #64	; 0x40
 80064cc:	d005      	beq.n	80064da <USBD_StdItfReq+0x26>
 80064ce:	2b40      	cmp	r3, #64	; 0x40
 80064d0:	d852      	bhi.n	8006578 <USBD_StdItfReq+0xc4>
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d001      	beq.n	80064da <USBD_StdItfReq+0x26>
 80064d6:	2b20      	cmp	r3, #32
 80064d8:	d14e      	bne.n	8006578 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80064e0:	b2db      	uxtb	r3, r3
 80064e2:	3b01      	subs	r3, #1
 80064e4:	2b02      	cmp	r3, #2
 80064e6:	d840      	bhi.n	800656a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80064e8:	683b      	ldr	r3, [r7, #0]
 80064ea:	889b      	ldrh	r3, [r3, #4]
 80064ec:	b2db      	uxtb	r3, r3
 80064ee:	2b01      	cmp	r3, #1
 80064f0:	d836      	bhi.n	8006560 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80064f2:	683b      	ldr	r3, [r7, #0]
 80064f4:	889b      	ldrh	r3, [r3, #4]
 80064f6:	b2db      	uxtb	r3, r3
 80064f8:	4619      	mov	r1, r3
 80064fa:	6878      	ldr	r0, [r7, #4]
 80064fc:	f7ff fed9 	bl	80062b2 <USBD_CoreFindIF>
 8006500:	4603      	mov	r3, r0
 8006502:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006504:	7bbb      	ldrb	r3, [r7, #14]
 8006506:	2bff      	cmp	r3, #255	; 0xff
 8006508:	d01d      	beq.n	8006546 <USBD_StdItfReq+0x92>
 800650a:	7bbb      	ldrb	r3, [r7, #14]
 800650c:	2b00      	cmp	r3, #0
 800650e:	d11a      	bne.n	8006546 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8006510:	7bba      	ldrb	r2, [r7, #14]
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	32ae      	adds	r2, #174	; 0xae
 8006516:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800651a:	689b      	ldr	r3, [r3, #8]
 800651c:	2b00      	cmp	r3, #0
 800651e:	d00f      	beq.n	8006540 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8006520:	7bba      	ldrb	r2, [r7, #14]
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006528:	7bba      	ldrb	r2, [r7, #14]
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	32ae      	adds	r2, #174	; 0xae
 800652e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006532:	689b      	ldr	r3, [r3, #8]
 8006534:	6839      	ldr	r1, [r7, #0]
 8006536:	6878      	ldr	r0, [r7, #4]
 8006538:	4798      	blx	r3
 800653a:	4603      	mov	r3, r0
 800653c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800653e:	e004      	b.n	800654a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8006540:	2303      	movs	r3, #3
 8006542:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006544:	e001      	b.n	800654a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8006546:	2303      	movs	r3, #3
 8006548:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800654a:	683b      	ldr	r3, [r7, #0]
 800654c:	88db      	ldrh	r3, [r3, #6]
 800654e:	2b00      	cmp	r3, #0
 8006550:	d110      	bne.n	8006574 <USBD_StdItfReq+0xc0>
 8006552:	7bfb      	ldrb	r3, [r7, #15]
 8006554:	2b00      	cmp	r3, #0
 8006556:	d10d      	bne.n	8006574 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006558:	6878      	ldr	r0, [r7, #4]
 800655a:	f000 fdc7 	bl	80070ec <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800655e:	e009      	b.n	8006574 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8006560:	6839      	ldr	r1, [r7, #0]
 8006562:	6878      	ldr	r0, [r7, #4]
 8006564:	f000 fcf7 	bl	8006f56 <USBD_CtlError>
          break;
 8006568:	e004      	b.n	8006574 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800656a:	6839      	ldr	r1, [r7, #0]
 800656c:	6878      	ldr	r0, [r7, #4]
 800656e:	f000 fcf2 	bl	8006f56 <USBD_CtlError>
          break;
 8006572:	e000      	b.n	8006576 <USBD_StdItfReq+0xc2>
          break;
 8006574:	bf00      	nop
      }
      break;
 8006576:	e004      	b.n	8006582 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8006578:	6839      	ldr	r1, [r7, #0]
 800657a:	6878      	ldr	r0, [r7, #4]
 800657c:	f000 fceb 	bl	8006f56 <USBD_CtlError>
      break;
 8006580:	bf00      	nop
  }

  return ret;
 8006582:	7bfb      	ldrb	r3, [r7, #15]
}
 8006584:	4618      	mov	r0, r3
 8006586:	3710      	adds	r7, #16
 8006588:	46bd      	mov	sp, r7
 800658a:	bd80      	pop	{r7, pc}

0800658c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800658c:	b580      	push	{r7, lr}
 800658e:	b084      	sub	sp, #16
 8006590:	af00      	add	r7, sp, #0
 8006592:	6078      	str	r0, [r7, #4]
 8006594:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8006596:	2300      	movs	r3, #0
 8006598:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800659a:	683b      	ldr	r3, [r7, #0]
 800659c:	889b      	ldrh	r3, [r3, #4]
 800659e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80065a0:	683b      	ldr	r3, [r7, #0]
 80065a2:	781b      	ldrb	r3, [r3, #0]
 80065a4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80065a8:	2b40      	cmp	r3, #64	; 0x40
 80065aa:	d007      	beq.n	80065bc <USBD_StdEPReq+0x30>
 80065ac:	2b40      	cmp	r3, #64	; 0x40
 80065ae:	f200 817f 	bhi.w	80068b0 <USBD_StdEPReq+0x324>
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d02a      	beq.n	800660c <USBD_StdEPReq+0x80>
 80065b6:	2b20      	cmp	r3, #32
 80065b8:	f040 817a 	bne.w	80068b0 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80065bc:	7bbb      	ldrb	r3, [r7, #14]
 80065be:	4619      	mov	r1, r3
 80065c0:	6878      	ldr	r0, [r7, #4]
 80065c2:	f7ff fe83 	bl	80062cc <USBD_CoreFindEP>
 80065c6:	4603      	mov	r3, r0
 80065c8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80065ca:	7b7b      	ldrb	r3, [r7, #13]
 80065cc:	2bff      	cmp	r3, #255	; 0xff
 80065ce:	f000 8174 	beq.w	80068ba <USBD_StdEPReq+0x32e>
 80065d2:	7b7b      	ldrb	r3, [r7, #13]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	f040 8170 	bne.w	80068ba <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80065da:	7b7a      	ldrb	r2, [r7, #13]
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80065e2:	7b7a      	ldrb	r2, [r7, #13]
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	32ae      	adds	r2, #174	; 0xae
 80065e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065ec:	689b      	ldr	r3, [r3, #8]
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	f000 8163 	beq.w	80068ba <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80065f4:	7b7a      	ldrb	r2, [r7, #13]
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	32ae      	adds	r2, #174	; 0xae
 80065fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065fe:	689b      	ldr	r3, [r3, #8]
 8006600:	6839      	ldr	r1, [r7, #0]
 8006602:	6878      	ldr	r0, [r7, #4]
 8006604:	4798      	blx	r3
 8006606:	4603      	mov	r3, r0
 8006608:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800660a:	e156      	b.n	80068ba <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800660c:	683b      	ldr	r3, [r7, #0]
 800660e:	785b      	ldrb	r3, [r3, #1]
 8006610:	2b03      	cmp	r3, #3
 8006612:	d008      	beq.n	8006626 <USBD_StdEPReq+0x9a>
 8006614:	2b03      	cmp	r3, #3
 8006616:	f300 8145 	bgt.w	80068a4 <USBD_StdEPReq+0x318>
 800661a:	2b00      	cmp	r3, #0
 800661c:	f000 809b 	beq.w	8006756 <USBD_StdEPReq+0x1ca>
 8006620:	2b01      	cmp	r3, #1
 8006622:	d03c      	beq.n	800669e <USBD_StdEPReq+0x112>
 8006624:	e13e      	b.n	80068a4 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800662c:	b2db      	uxtb	r3, r3
 800662e:	2b02      	cmp	r3, #2
 8006630:	d002      	beq.n	8006638 <USBD_StdEPReq+0xac>
 8006632:	2b03      	cmp	r3, #3
 8006634:	d016      	beq.n	8006664 <USBD_StdEPReq+0xd8>
 8006636:	e02c      	b.n	8006692 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006638:	7bbb      	ldrb	r3, [r7, #14]
 800663a:	2b00      	cmp	r3, #0
 800663c:	d00d      	beq.n	800665a <USBD_StdEPReq+0xce>
 800663e:	7bbb      	ldrb	r3, [r7, #14]
 8006640:	2b80      	cmp	r3, #128	; 0x80
 8006642:	d00a      	beq.n	800665a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006644:	7bbb      	ldrb	r3, [r7, #14]
 8006646:	4619      	mov	r1, r3
 8006648:	6878      	ldr	r0, [r7, #4]
 800664a:	f001 f9ab 	bl	80079a4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800664e:	2180      	movs	r1, #128	; 0x80
 8006650:	6878      	ldr	r0, [r7, #4]
 8006652:	f001 f9a7 	bl	80079a4 <USBD_LL_StallEP>
 8006656:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006658:	e020      	b.n	800669c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800665a:	6839      	ldr	r1, [r7, #0]
 800665c:	6878      	ldr	r0, [r7, #4]
 800665e:	f000 fc7a 	bl	8006f56 <USBD_CtlError>
              break;
 8006662:	e01b      	b.n	800669c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006664:	683b      	ldr	r3, [r7, #0]
 8006666:	885b      	ldrh	r3, [r3, #2]
 8006668:	2b00      	cmp	r3, #0
 800666a:	d10e      	bne.n	800668a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800666c:	7bbb      	ldrb	r3, [r7, #14]
 800666e:	2b00      	cmp	r3, #0
 8006670:	d00b      	beq.n	800668a <USBD_StdEPReq+0xfe>
 8006672:	7bbb      	ldrb	r3, [r7, #14]
 8006674:	2b80      	cmp	r3, #128	; 0x80
 8006676:	d008      	beq.n	800668a <USBD_StdEPReq+0xfe>
 8006678:	683b      	ldr	r3, [r7, #0]
 800667a:	88db      	ldrh	r3, [r3, #6]
 800667c:	2b00      	cmp	r3, #0
 800667e:	d104      	bne.n	800668a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006680:	7bbb      	ldrb	r3, [r7, #14]
 8006682:	4619      	mov	r1, r3
 8006684:	6878      	ldr	r0, [r7, #4]
 8006686:	f001 f98d 	bl	80079a4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800668a:	6878      	ldr	r0, [r7, #4]
 800668c:	f000 fd2e 	bl	80070ec <USBD_CtlSendStatus>

              break;
 8006690:	e004      	b.n	800669c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8006692:	6839      	ldr	r1, [r7, #0]
 8006694:	6878      	ldr	r0, [r7, #4]
 8006696:	f000 fc5e 	bl	8006f56 <USBD_CtlError>
              break;
 800669a:	bf00      	nop
          }
          break;
 800669c:	e107      	b.n	80068ae <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80066a4:	b2db      	uxtb	r3, r3
 80066a6:	2b02      	cmp	r3, #2
 80066a8:	d002      	beq.n	80066b0 <USBD_StdEPReq+0x124>
 80066aa:	2b03      	cmp	r3, #3
 80066ac:	d016      	beq.n	80066dc <USBD_StdEPReq+0x150>
 80066ae:	e04b      	b.n	8006748 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80066b0:	7bbb      	ldrb	r3, [r7, #14]
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d00d      	beq.n	80066d2 <USBD_StdEPReq+0x146>
 80066b6:	7bbb      	ldrb	r3, [r7, #14]
 80066b8:	2b80      	cmp	r3, #128	; 0x80
 80066ba:	d00a      	beq.n	80066d2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80066bc:	7bbb      	ldrb	r3, [r7, #14]
 80066be:	4619      	mov	r1, r3
 80066c0:	6878      	ldr	r0, [r7, #4]
 80066c2:	f001 f96f 	bl	80079a4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80066c6:	2180      	movs	r1, #128	; 0x80
 80066c8:	6878      	ldr	r0, [r7, #4]
 80066ca:	f001 f96b 	bl	80079a4 <USBD_LL_StallEP>
 80066ce:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80066d0:	e040      	b.n	8006754 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80066d2:	6839      	ldr	r1, [r7, #0]
 80066d4:	6878      	ldr	r0, [r7, #4]
 80066d6:	f000 fc3e 	bl	8006f56 <USBD_CtlError>
              break;
 80066da:	e03b      	b.n	8006754 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80066dc:	683b      	ldr	r3, [r7, #0]
 80066de:	885b      	ldrh	r3, [r3, #2]
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d136      	bne.n	8006752 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80066e4:	7bbb      	ldrb	r3, [r7, #14]
 80066e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d004      	beq.n	80066f8 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80066ee:	7bbb      	ldrb	r3, [r7, #14]
 80066f0:	4619      	mov	r1, r3
 80066f2:	6878      	ldr	r0, [r7, #4]
 80066f4:	f001 f975 	bl	80079e2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80066f8:	6878      	ldr	r0, [r7, #4]
 80066fa:	f000 fcf7 	bl	80070ec <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80066fe:	7bbb      	ldrb	r3, [r7, #14]
 8006700:	4619      	mov	r1, r3
 8006702:	6878      	ldr	r0, [r7, #4]
 8006704:	f7ff fde2 	bl	80062cc <USBD_CoreFindEP>
 8006708:	4603      	mov	r3, r0
 800670a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800670c:	7b7b      	ldrb	r3, [r7, #13]
 800670e:	2bff      	cmp	r3, #255	; 0xff
 8006710:	d01f      	beq.n	8006752 <USBD_StdEPReq+0x1c6>
 8006712:	7b7b      	ldrb	r3, [r7, #13]
 8006714:	2b00      	cmp	r3, #0
 8006716:	d11c      	bne.n	8006752 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8006718:	7b7a      	ldrb	r2, [r7, #13]
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8006720:	7b7a      	ldrb	r2, [r7, #13]
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	32ae      	adds	r2, #174	; 0xae
 8006726:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800672a:	689b      	ldr	r3, [r3, #8]
 800672c:	2b00      	cmp	r3, #0
 800672e:	d010      	beq.n	8006752 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006730:	7b7a      	ldrb	r2, [r7, #13]
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	32ae      	adds	r2, #174	; 0xae
 8006736:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800673a:	689b      	ldr	r3, [r3, #8]
 800673c:	6839      	ldr	r1, [r7, #0]
 800673e:	6878      	ldr	r0, [r7, #4]
 8006740:	4798      	blx	r3
 8006742:	4603      	mov	r3, r0
 8006744:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8006746:	e004      	b.n	8006752 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8006748:	6839      	ldr	r1, [r7, #0]
 800674a:	6878      	ldr	r0, [r7, #4]
 800674c:	f000 fc03 	bl	8006f56 <USBD_CtlError>
              break;
 8006750:	e000      	b.n	8006754 <USBD_StdEPReq+0x1c8>
              break;
 8006752:	bf00      	nop
          }
          break;
 8006754:	e0ab      	b.n	80068ae <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800675c:	b2db      	uxtb	r3, r3
 800675e:	2b02      	cmp	r3, #2
 8006760:	d002      	beq.n	8006768 <USBD_StdEPReq+0x1dc>
 8006762:	2b03      	cmp	r3, #3
 8006764:	d032      	beq.n	80067cc <USBD_StdEPReq+0x240>
 8006766:	e097      	b.n	8006898 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006768:	7bbb      	ldrb	r3, [r7, #14]
 800676a:	2b00      	cmp	r3, #0
 800676c:	d007      	beq.n	800677e <USBD_StdEPReq+0x1f2>
 800676e:	7bbb      	ldrb	r3, [r7, #14]
 8006770:	2b80      	cmp	r3, #128	; 0x80
 8006772:	d004      	beq.n	800677e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8006774:	6839      	ldr	r1, [r7, #0]
 8006776:	6878      	ldr	r0, [r7, #4]
 8006778:	f000 fbed 	bl	8006f56 <USBD_CtlError>
                break;
 800677c:	e091      	b.n	80068a2 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800677e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006782:	2b00      	cmp	r3, #0
 8006784:	da0b      	bge.n	800679e <USBD_StdEPReq+0x212>
 8006786:	7bbb      	ldrb	r3, [r7, #14]
 8006788:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800678c:	4613      	mov	r3, r2
 800678e:	009b      	lsls	r3, r3, #2
 8006790:	4413      	add	r3, r2
 8006792:	009b      	lsls	r3, r3, #2
 8006794:	3310      	adds	r3, #16
 8006796:	687a      	ldr	r2, [r7, #4]
 8006798:	4413      	add	r3, r2
 800679a:	3304      	adds	r3, #4
 800679c:	e00b      	b.n	80067b6 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800679e:	7bbb      	ldrb	r3, [r7, #14]
 80067a0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80067a4:	4613      	mov	r3, r2
 80067a6:	009b      	lsls	r3, r3, #2
 80067a8:	4413      	add	r3, r2
 80067aa:	009b      	lsls	r3, r3, #2
 80067ac:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80067b0:	687a      	ldr	r2, [r7, #4]
 80067b2:	4413      	add	r3, r2
 80067b4:	3304      	adds	r3, #4
 80067b6:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80067b8:	68bb      	ldr	r3, [r7, #8]
 80067ba:	2200      	movs	r2, #0
 80067bc:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80067be:	68bb      	ldr	r3, [r7, #8]
 80067c0:	2202      	movs	r2, #2
 80067c2:	4619      	mov	r1, r3
 80067c4:	6878      	ldr	r0, [r7, #4]
 80067c6:	f000 fc37 	bl	8007038 <USBD_CtlSendData>
              break;
 80067ca:	e06a      	b.n	80068a2 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80067cc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	da11      	bge.n	80067f8 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80067d4:	7bbb      	ldrb	r3, [r7, #14]
 80067d6:	f003 020f 	and.w	r2, r3, #15
 80067da:	6879      	ldr	r1, [r7, #4]
 80067dc:	4613      	mov	r3, r2
 80067de:	009b      	lsls	r3, r3, #2
 80067e0:	4413      	add	r3, r2
 80067e2:	009b      	lsls	r3, r3, #2
 80067e4:	440b      	add	r3, r1
 80067e6:	3324      	adds	r3, #36	; 0x24
 80067e8:	881b      	ldrh	r3, [r3, #0]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d117      	bne.n	800681e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80067ee:	6839      	ldr	r1, [r7, #0]
 80067f0:	6878      	ldr	r0, [r7, #4]
 80067f2:	f000 fbb0 	bl	8006f56 <USBD_CtlError>
                  break;
 80067f6:	e054      	b.n	80068a2 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80067f8:	7bbb      	ldrb	r3, [r7, #14]
 80067fa:	f003 020f 	and.w	r2, r3, #15
 80067fe:	6879      	ldr	r1, [r7, #4]
 8006800:	4613      	mov	r3, r2
 8006802:	009b      	lsls	r3, r3, #2
 8006804:	4413      	add	r3, r2
 8006806:	009b      	lsls	r3, r3, #2
 8006808:	440b      	add	r3, r1
 800680a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800680e:	881b      	ldrh	r3, [r3, #0]
 8006810:	2b00      	cmp	r3, #0
 8006812:	d104      	bne.n	800681e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006814:	6839      	ldr	r1, [r7, #0]
 8006816:	6878      	ldr	r0, [r7, #4]
 8006818:	f000 fb9d 	bl	8006f56 <USBD_CtlError>
                  break;
 800681c:	e041      	b.n	80068a2 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800681e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006822:	2b00      	cmp	r3, #0
 8006824:	da0b      	bge.n	800683e <USBD_StdEPReq+0x2b2>
 8006826:	7bbb      	ldrb	r3, [r7, #14]
 8006828:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800682c:	4613      	mov	r3, r2
 800682e:	009b      	lsls	r3, r3, #2
 8006830:	4413      	add	r3, r2
 8006832:	009b      	lsls	r3, r3, #2
 8006834:	3310      	adds	r3, #16
 8006836:	687a      	ldr	r2, [r7, #4]
 8006838:	4413      	add	r3, r2
 800683a:	3304      	adds	r3, #4
 800683c:	e00b      	b.n	8006856 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800683e:	7bbb      	ldrb	r3, [r7, #14]
 8006840:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006844:	4613      	mov	r3, r2
 8006846:	009b      	lsls	r3, r3, #2
 8006848:	4413      	add	r3, r2
 800684a:	009b      	lsls	r3, r3, #2
 800684c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006850:	687a      	ldr	r2, [r7, #4]
 8006852:	4413      	add	r3, r2
 8006854:	3304      	adds	r3, #4
 8006856:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006858:	7bbb      	ldrb	r3, [r7, #14]
 800685a:	2b00      	cmp	r3, #0
 800685c:	d002      	beq.n	8006864 <USBD_StdEPReq+0x2d8>
 800685e:	7bbb      	ldrb	r3, [r7, #14]
 8006860:	2b80      	cmp	r3, #128	; 0x80
 8006862:	d103      	bne.n	800686c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8006864:	68bb      	ldr	r3, [r7, #8]
 8006866:	2200      	movs	r2, #0
 8006868:	601a      	str	r2, [r3, #0]
 800686a:	e00e      	b.n	800688a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800686c:	7bbb      	ldrb	r3, [r7, #14]
 800686e:	4619      	mov	r1, r3
 8006870:	6878      	ldr	r0, [r7, #4]
 8006872:	f001 f8d5 	bl	8007a20 <USBD_LL_IsStallEP>
 8006876:	4603      	mov	r3, r0
 8006878:	2b00      	cmp	r3, #0
 800687a:	d003      	beq.n	8006884 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800687c:	68bb      	ldr	r3, [r7, #8]
 800687e:	2201      	movs	r2, #1
 8006880:	601a      	str	r2, [r3, #0]
 8006882:	e002      	b.n	800688a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8006884:	68bb      	ldr	r3, [r7, #8]
 8006886:	2200      	movs	r2, #0
 8006888:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800688a:	68bb      	ldr	r3, [r7, #8]
 800688c:	2202      	movs	r2, #2
 800688e:	4619      	mov	r1, r3
 8006890:	6878      	ldr	r0, [r7, #4]
 8006892:	f000 fbd1 	bl	8007038 <USBD_CtlSendData>
              break;
 8006896:	e004      	b.n	80068a2 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8006898:	6839      	ldr	r1, [r7, #0]
 800689a:	6878      	ldr	r0, [r7, #4]
 800689c:	f000 fb5b 	bl	8006f56 <USBD_CtlError>
              break;
 80068a0:	bf00      	nop
          }
          break;
 80068a2:	e004      	b.n	80068ae <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80068a4:	6839      	ldr	r1, [r7, #0]
 80068a6:	6878      	ldr	r0, [r7, #4]
 80068a8:	f000 fb55 	bl	8006f56 <USBD_CtlError>
          break;
 80068ac:	bf00      	nop
      }
      break;
 80068ae:	e005      	b.n	80068bc <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80068b0:	6839      	ldr	r1, [r7, #0]
 80068b2:	6878      	ldr	r0, [r7, #4]
 80068b4:	f000 fb4f 	bl	8006f56 <USBD_CtlError>
      break;
 80068b8:	e000      	b.n	80068bc <USBD_StdEPReq+0x330>
      break;
 80068ba:	bf00      	nop
  }

  return ret;
 80068bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80068be:	4618      	mov	r0, r3
 80068c0:	3710      	adds	r7, #16
 80068c2:	46bd      	mov	sp, r7
 80068c4:	bd80      	pop	{r7, pc}
	...

080068c8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80068c8:	b580      	push	{r7, lr}
 80068ca:	b084      	sub	sp, #16
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	6078      	str	r0, [r7, #4]
 80068d0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80068d2:	2300      	movs	r3, #0
 80068d4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80068d6:	2300      	movs	r3, #0
 80068d8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80068da:	2300      	movs	r3, #0
 80068dc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80068de:	683b      	ldr	r3, [r7, #0]
 80068e0:	885b      	ldrh	r3, [r3, #2]
 80068e2:	0a1b      	lsrs	r3, r3, #8
 80068e4:	b29b      	uxth	r3, r3
 80068e6:	3b01      	subs	r3, #1
 80068e8:	2b06      	cmp	r3, #6
 80068ea:	f200 8128 	bhi.w	8006b3e <USBD_GetDescriptor+0x276>
 80068ee:	a201      	add	r2, pc, #4	; (adr r2, 80068f4 <USBD_GetDescriptor+0x2c>)
 80068f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068f4:	08006911 	.word	0x08006911
 80068f8:	08006929 	.word	0x08006929
 80068fc:	08006969 	.word	0x08006969
 8006900:	08006b3f 	.word	0x08006b3f
 8006904:	08006b3f 	.word	0x08006b3f
 8006908:	08006adf 	.word	0x08006adf
 800690c:	08006b0b 	.word	0x08006b0b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	687a      	ldr	r2, [r7, #4]
 800691a:	7c12      	ldrb	r2, [r2, #16]
 800691c:	f107 0108 	add.w	r1, r7, #8
 8006920:	4610      	mov	r0, r2
 8006922:	4798      	blx	r3
 8006924:	60f8      	str	r0, [r7, #12]
      break;
 8006926:	e112      	b.n	8006b4e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	7c1b      	ldrb	r3, [r3, #16]
 800692c:	2b00      	cmp	r3, #0
 800692e:	d10d      	bne.n	800694c <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006936:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006938:	f107 0208 	add.w	r2, r7, #8
 800693c:	4610      	mov	r0, r2
 800693e:	4798      	blx	r3
 8006940:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	3301      	adds	r3, #1
 8006946:	2202      	movs	r2, #2
 8006948:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800694a:	e100      	b.n	8006b4e <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006954:	f107 0208 	add.w	r2, r7, #8
 8006958:	4610      	mov	r0, r2
 800695a:	4798      	blx	r3
 800695c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	3301      	adds	r3, #1
 8006962:	2202      	movs	r2, #2
 8006964:	701a      	strb	r2, [r3, #0]
      break;
 8006966:	e0f2      	b.n	8006b4e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006968:	683b      	ldr	r3, [r7, #0]
 800696a:	885b      	ldrh	r3, [r3, #2]
 800696c:	b2db      	uxtb	r3, r3
 800696e:	2b05      	cmp	r3, #5
 8006970:	f200 80ac 	bhi.w	8006acc <USBD_GetDescriptor+0x204>
 8006974:	a201      	add	r2, pc, #4	; (adr r2, 800697c <USBD_GetDescriptor+0xb4>)
 8006976:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800697a:	bf00      	nop
 800697c:	08006995 	.word	0x08006995
 8006980:	080069c9 	.word	0x080069c9
 8006984:	080069fd 	.word	0x080069fd
 8006988:	08006a31 	.word	0x08006a31
 800698c:	08006a65 	.word	0x08006a65
 8006990:	08006a99 	.word	0x08006a99
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800699a:	685b      	ldr	r3, [r3, #4]
 800699c:	2b00      	cmp	r3, #0
 800699e:	d00b      	beq.n	80069b8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80069a6:	685b      	ldr	r3, [r3, #4]
 80069a8:	687a      	ldr	r2, [r7, #4]
 80069aa:	7c12      	ldrb	r2, [r2, #16]
 80069ac:	f107 0108 	add.w	r1, r7, #8
 80069b0:	4610      	mov	r0, r2
 80069b2:	4798      	blx	r3
 80069b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80069b6:	e091      	b.n	8006adc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80069b8:	6839      	ldr	r1, [r7, #0]
 80069ba:	6878      	ldr	r0, [r7, #4]
 80069bc:	f000 facb 	bl	8006f56 <USBD_CtlError>
            err++;
 80069c0:	7afb      	ldrb	r3, [r7, #11]
 80069c2:	3301      	adds	r3, #1
 80069c4:	72fb      	strb	r3, [r7, #11]
          break;
 80069c6:	e089      	b.n	8006adc <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80069ce:	689b      	ldr	r3, [r3, #8]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d00b      	beq.n	80069ec <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80069da:	689b      	ldr	r3, [r3, #8]
 80069dc:	687a      	ldr	r2, [r7, #4]
 80069de:	7c12      	ldrb	r2, [r2, #16]
 80069e0:	f107 0108 	add.w	r1, r7, #8
 80069e4:	4610      	mov	r0, r2
 80069e6:	4798      	blx	r3
 80069e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80069ea:	e077      	b.n	8006adc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80069ec:	6839      	ldr	r1, [r7, #0]
 80069ee:	6878      	ldr	r0, [r7, #4]
 80069f0:	f000 fab1 	bl	8006f56 <USBD_CtlError>
            err++;
 80069f4:	7afb      	ldrb	r3, [r7, #11]
 80069f6:	3301      	adds	r3, #1
 80069f8:	72fb      	strb	r3, [r7, #11]
          break;
 80069fa:	e06f      	b.n	8006adc <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a02:	68db      	ldr	r3, [r3, #12]
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d00b      	beq.n	8006a20 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a0e:	68db      	ldr	r3, [r3, #12]
 8006a10:	687a      	ldr	r2, [r7, #4]
 8006a12:	7c12      	ldrb	r2, [r2, #16]
 8006a14:	f107 0108 	add.w	r1, r7, #8
 8006a18:	4610      	mov	r0, r2
 8006a1a:	4798      	blx	r3
 8006a1c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006a1e:	e05d      	b.n	8006adc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006a20:	6839      	ldr	r1, [r7, #0]
 8006a22:	6878      	ldr	r0, [r7, #4]
 8006a24:	f000 fa97 	bl	8006f56 <USBD_CtlError>
            err++;
 8006a28:	7afb      	ldrb	r3, [r7, #11]
 8006a2a:	3301      	adds	r3, #1
 8006a2c:	72fb      	strb	r3, [r7, #11]
          break;
 8006a2e:	e055      	b.n	8006adc <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a36:	691b      	ldr	r3, [r3, #16]
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d00b      	beq.n	8006a54 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a42:	691b      	ldr	r3, [r3, #16]
 8006a44:	687a      	ldr	r2, [r7, #4]
 8006a46:	7c12      	ldrb	r2, [r2, #16]
 8006a48:	f107 0108 	add.w	r1, r7, #8
 8006a4c:	4610      	mov	r0, r2
 8006a4e:	4798      	blx	r3
 8006a50:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006a52:	e043      	b.n	8006adc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006a54:	6839      	ldr	r1, [r7, #0]
 8006a56:	6878      	ldr	r0, [r7, #4]
 8006a58:	f000 fa7d 	bl	8006f56 <USBD_CtlError>
            err++;
 8006a5c:	7afb      	ldrb	r3, [r7, #11]
 8006a5e:	3301      	adds	r3, #1
 8006a60:	72fb      	strb	r3, [r7, #11]
          break;
 8006a62:	e03b      	b.n	8006adc <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a6a:	695b      	ldr	r3, [r3, #20]
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d00b      	beq.n	8006a88 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a76:	695b      	ldr	r3, [r3, #20]
 8006a78:	687a      	ldr	r2, [r7, #4]
 8006a7a:	7c12      	ldrb	r2, [r2, #16]
 8006a7c:	f107 0108 	add.w	r1, r7, #8
 8006a80:	4610      	mov	r0, r2
 8006a82:	4798      	blx	r3
 8006a84:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006a86:	e029      	b.n	8006adc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006a88:	6839      	ldr	r1, [r7, #0]
 8006a8a:	6878      	ldr	r0, [r7, #4]
 8006a8c:	f000 fa63 	bl	8006f56 <USBD_CtlError>
            err++;
 8006a90:	7afb      	ldrb	r3, [r7, #11]
 8006a92:	3301      	adds	r3, #1
 8006a94:	72fb      	strb	r3, [r7, #11]
          break;
 8006a96:	e021      	b.n	8006adc <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a9e:	699b      	ldr	r3, [r3, #24]
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d00b      	beq.n	8006abc <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006aaa:	699b      	ldr	r3, [r3, #24]
 8006aac:	687a      	ldr	r2, [r7, #4]
 8006aae:	7c12      	ldrb	r2, [r2, #16]
 8006ab0:	f107 0108 	add.w	r1, r7, #8
 8006ab4:	4610      	mov	r0, r2
 8006ab6:	4798      	blx	r3
 8006ab8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006aba:	e00f      	b.n	8006adc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006abc:	6839      	ldr	r1, [r7, #0]
 8006abe:	6878      	ldr	r0, [r7, #4]
 8006ac0:	f000 fa49 	bl	8006f56 <USBD_CtlError>
            err++;
 8006ac4:	7afb      	ldrb	r3, [r7, #11]
 8006ac6:	3301      	adds	r3, #1
 8006ac8:	72fb      	strb	r3, [r7, #11]
          break;
 8006aca:	e007      	b.n	8006adc <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8006acc:	6839      	ldr	r1, [r7, #0]
 8006ace:	6878      	ldr	r0, [r7, #4]
 8006ad0:	f000 fa41 	bl	8006f56 <USBD_CtlError>
          err++;
 8006ad4:	7afb      	ldrb	r3, [r7, #11]
 8006ad6:	3301      	adds	r3, #1
 8006ad8:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8006ada:	bf00      	nop
      }
      break;
 8006adc:	e037      	b.n	8006b4e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	7c1b      	ldrb	r3, [r3, #16]
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d109      	bne.n	8006afa <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006aec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006aee:	f107 0208 	add.w	r2, r7, #8
 8006af2:	4610      	mov	r0, r2
 8006af4:	4798      	blx	r3
 8006af6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006af8:	e029      	b.n	8006b4e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006afa:	6839      	ldr	r1, [r7, #0]
 8006afc:	6878      	ldr	r0, [r7, #4]
 8006afe:	f000 fa2a 	bl	8006f56 <USBD_CtlError>
        err++;
 8006b02:	7afb      	ldrb	r3, [r7, #11]
 8006b04:	3301      	adds	r3, #1
 8006b06:	72fb      	strb	r3, [r7, #11]
      break;
 8006b08:	e021      	b.n	8006b4e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	7c1b      	ldrb	r3, [r3, #16]
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d10d      	bne.n	8006b2e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b1a:	f107 0208 	add.w	r2, r7, #8
 8006b1e:	4610      	mov	r0, r2
 8006b20:	4798      	blx	r3
 8006b22:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	3301      	adds	r3, #1
 8006b28:	2207      	movs	r2, #7
 8006b2a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006b2c:	e00f      	b.n	8006b4e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006b2e:	6839      	ldr	r1, [r7, #0]
 8006b30:	6878      	ldr	r0, [r7, #4]
 8006b32:	f000 fa10 	bl	8006f56 <USBD_CtlError>
        err++;
 8006b36:	7afb      	ldrb	r3, [r7, #11]
 8006b38:	3301      	adds	r3, #1
 8006b3a:	72fb      	strb	r3, [r7, #11]
      break;
 8006b3c:	e007      	b.n	8006b4e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8006b3e:	6839      	ldr	r1, [r7, #0]
 8006b40:	6878      	ldr	r0, [r7, #4]
 8006b42:	f000 fa08 	bl	8006f56 <USBD_CtlError>
      err++;
 8006b46:	7afb      	ldrb	r3, [r7, #11]
 8006b48:	3301      	adds	r3, #1
 8006b4a:	72fb      	strb	r3, [r7, #11]
      break;
 8006b4c:	bf00      	nop
  }

  if (err != 0U)
 8006b4e:	7afb      	ldrb	r3, [r7, #11]
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d11e      	bne.n	8006b92 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8006b54:	683b      	ldr	r3, [r7, #0]
 8006b56:	88db      	ldrh	r3, [r3, #6]
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d016      	beq.n	8006b8a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8006b5c:	893b      	ldrh	r3, [r7, #8]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d00e      	beq.n	8006b80 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8006b62:	683b      	ldr	r3, [r7, #0]
 8006b64:	88da      	ldrh	r2, [r3, #6]
 8006b66:	893b      	ldrh	r3, [r7, #8]
 8006b68:	4293      	cmp	r3, r2
 8006b6a:	bf28      	it	cs
 8006b6c:	4613      	movcs	r3, r2
 8006b6e:	b29b      	uxth	r3, r3
 8006b70:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006b72:	893b      	ldrh	r3, [r7, #8]
 8006b74:	461a      	mov	r2, r3
 8006b76:	68f9      	ldr	r1, [r7, #12]
 8006b78:	6878      	ldr	r0, [r7, #4]
 8006b7a:	f000 fa5d 	bl	8007038 <USBD_CtlSendData>
 8006b7e:	e009      	b.n	8006b94 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006b80:	6839      	ldr	r1, [r7, #0]
 8006b82:	6878      	ldr	r0, [r7, #4]
 8006b84:	f000 f9e7 	bl	8006f56 <USBD_CtlError>
 8006b88:	e004      	b.n	8006b94 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8006b8a:	6878      	ldr	r0, [r7, #4]
 8006b8c:	f000 faae 	bl	80070ec <USBD_CtlSendStatus>
 8006b90:	e000      	b.n	8006b94 <USBD_GetDescriptor+0x2cc>
    return;
 8006b92:	bf00      	nop
  }
}
 8006b94:	3710      	adds	r7, #16
 8006b96:	46bd      	mov	sp, r7
 8006b98:	bd80      	pop	{r7, pc}
 8006b9a:	bf00      	nop

08006b9c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006b9c:	b580      	push	{r7, lr}
 8006b9e:	b084      	sub	sp, #16
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	6078      	str	r0, [r7, #4]
 8006ba4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006ba6:	683b      	ldr	r3, [r7, #0]
 8006ba8:	889b      	ldrh	r3, [r3, #4]
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d131      	bne.n	8006c12 <USBD_SetAddress+0x76>
 8006bae:	683b      	ldr	r3, [r7, #0]
 8006bb0:	88db      	ldrh	r3, [r3, #6]
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d12d      	bne.n	8006c12 <USBD_SetAddress+0x76>
 8006bb6:	683b      	ldr	r3, [r7, #0]
 8006bb8:	885b      	ldrh	r3, [r3, #2]
 8006bba:	2b7f      	cmp	r3, #127	; 0x7f
 8006bbc:	d829      	bhi.n	8006c12 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006bbe:	683b      	ldr	r3, [r7, #0]
 8006bc0:	885b      	ldrh	r3, [r3, #2]
 8006bc2:	b2db      	uxtb	r3, r3
 8006bc4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006bc8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006bd0:	b2db      	uxtb	r3, r3
 8006bd2:	2b03      	cmp	r3, #3
 8006bd4:	d104      	bne.n	8006be0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8006bd6:	6839      	ldr	r1, [r7, #0]
 8006bd8:	6878      	ldr	r0, [r7, #4]
 8006bda:	f000 f9bc 	bl	8006f56 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006bde:	e01d      	b.n	8006c1c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	7bfa      	ldrb	r2, [r7, #15]
 8006be4:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006be8:	7bfb      	ldrb	r3, [r7, #15]
 8006bea:	4619      	mov	r1, r3
 8006bec:	6878      	ldr	r0, [r7, #4]
 8006bee:	f000 ff43 	bl	8007a78 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8006bf2:	6878      	ldr	r0, [r7, #4]
 8006bf4:	f000 fa7a 	bl	80070ec <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006bf8:	7bfb      	ldrb	r3, [r7, #15]
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d004      	beq.n	8006c08 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	2202      	movs	r2, #2
 8006c02:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c06:	e009      	b.n	8006c1c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	2201      	movs	r2, #1
 8006c0c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c10:	e004      	b.n	8006c1c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006c12:	6839      	ldr	r1, [r7, #0]
 8006c14:	6878      	ldr	r0, [r7, #4]
 8006c16:	f000 f99e 	bl	8006f56 <USBD_CtlError>
  }
}
 8006c1a:	bf00      	nop
 8006c1c:	bf00      	nop
 8006c1e:	3710      	adds	r7, #16
 8006c20:	46bd      	mov	sp, r7
 8006c22:	bd80      	pop	{r7, pc}

08006c24 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006c24:	b580      	push	{r7, lr}
 8006c26:	b084      	sub	sp, #16
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	6078      	str	r0, [r7, #4]
 8006c2c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006c2e:	2300      	movs	r3, #0
 8006c30:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006c32:	683b      	ldr	r3, [r7, #0]
 8006c34:	885b      	ldrh	r3, [r3, #2]
 8006c36:	b2da      	uxtb	r2, r3
 8006c38:	4b4e      	ldr	r3, [pc, #312]	; (8006d74 <USBD_SetConfig+0x150>)
 8006c3a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006c3c:	4b4d      	ldr	r3, [pc, #308]	; (8006d74 <USBD_SetConfig+0x150>)
 8006c3e:	781b      	ldrb	r3, [r3, #0]
 8006c40:	2b01      	cmp	r3, #1
 8006c42:	d905      	bls.n	8006c50 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006c44:	6839      	ldr	r1, [r7, #0]
 8006c46:	6878      	ldr	r0, [r7, #4]
 8006c48:	f000 f985 	bl	8006f56 <USBD_CtlError>
    return USBD_FAIL;
 8006c4c:	2303      	movs	r3, #3
 8006c4e:	e08c      	b.n	8006d6a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c56:	b2db      	uxtb	r3, r3
 8006c58:	2b02      	cmp	r3, #2
 8006c5a:	d002      	beq.n	8006c62 <USBD_SetConfig+0x3e>
 8006c5c:	2b03      	cmp	r3, #3
 8006c5e:	d029      	beq.n	8006cb4 <USBD_SetConfig+0x90>
 8006c60:	e075      	b.n	8006d4e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8006c62:	4b44      	ldr	r3, [pc, #272]	; (8006d74 <USBD_SetConfig+0x150>)
 8006c64:	781b      	ldrb	r3, [r3, #0]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d020      	beq.n	8006cac <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8006c6a:	4b42      	ldr	r3, [pc, #264]	; (8006d74 <USBD_SetConfig+0x150>)
 8006c6c:	781b      	ldrb	r3, [r3, #0]
 8006c6e:	461a      	mov	r2, r3
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006c74:	4b3f      	ldr	r3, [pc, #252]	; (8006d74 <USBD_SetConfig+0x150>)
 8006c76:	781b      	ldrb	r3, [r3, #0]
 8006c78:	4619      	mov	r1, r3
 8006c7a:	6878      	ldr	r0, [r7, #4]
 8006c7c:	f7fe ffe1 	bl	8005c42 <USBD_SetClassConfig>
 8006c80:	4603      	mov	r3, r0
 8006c82:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8006c84:	7bfb      	ldrb	r3, [r7, #15]
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d008      	beq.n	8006c9c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8006c8a:	6839      	ldr	r1, [r7, #0]
 8006c8c:	6878      	ldr	r0, [r7, #4]
 8006c8e:	f000 f962 	bl	8006f56 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	2202      	movs	r2, #2
 8006c96:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006c9a:	e065      	b.n	8006d68 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006c9c:	6878      	ldr	r0, [r7, #4]
 8006c9e:	f000 fa25 	bl	80070ec <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	2203      	movs	r2, #3
 8006ca6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006caa:	e05d      	b.n	8006d68 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006cac:	6878      	ldr	r0, [r7, #4]
 8006cae:	f000 fa1d 	bl	80070ec <USBD_CtlSendStatus>
      break;
 8006cb2:	e059      	b.n	8006d68 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8006cb4:	4b2f      	ldr	r3, [pc, #188]	; (8006d74 <USBD_SetConfig+0x150>)
 8006cb6:	781b      	ldrb	r3, [r3, #0]
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d112      	bne.n	8006ce2 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	2202      	movs	r2, #2
 8006cc0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8006cc4:	4b2b      	ldr	r3, [pc, #172]	; (8006d74 <USBD_SetConfig+0x150>)
 8006cc6:	781b      	ldrb	r3, [r3, #0]
 8006cc8:	461a      	mov	r2, r3
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006cce:	4b29      	ldr	r3, [pc, #164]	; (8006d74 <USBD_SetConfig+0x150>)
 8006cd0:	781b      	ldrb	r3, [r3, #0]
 8006cd2:	4619      	mov	r1, r3
 8006cd4:	6878      	ldr	r0, [r7, #4]
 8006cd6:	f7fe ffd0 	bl	8005c7a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8006cda:	6878      	ldr	r0, [r7, #4]
 8006cdc:	f000 fa06 	bl	80070ec <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006ce0:	e042      	b.n	8006d68 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8006ce2:	4b24      	ldr	r3, [pc, #144]	; (8006d74 <USBD_SetConfig+0x150>)
 8006ce4:	781b      	ldrb	r3, [r3, #0]
 8006ce6:	461a      	mov	r2, r3
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	685b      	ldr	r3, [r3, #4]
 8006cec:	429a      	cmp	r2, r3
 8006cee:	d02a      	beq.n	8006d46 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	685b      	ldr	r3, [r3, #4]
 8006cf4:	b2db      	uxtb	r3, r3
 8006cf6:	4619      	mov	r1, r3
 8006cf8:	6878      	ldr	r0, [r7, #4]
 8006cfa:	f7fe ffbe 	bl	8005c7a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8006cfe:	4b1d      	ldr	r3, [pc, #116]	; (8006d74 <USBD_SetConfig+0x150>)
 8006d00:	781b      	ldrb	r3, [r3, #0]
 8006d02:	461a      	mov	r2, r3
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006d08:	4b1a      	ldr	r3, [pc, #104]	; (8006d74 <USBD_SetConfig+0x150>)
 8006d0a:	781b      	ldrb	r3, [r3, #0]
 8006d0c:	4619      	mov	r1, r3
 8006d0e:	6878      	ldr	r0, [r7, #4]
 8006d10:	f7fe ff97 	bl	8005c42 <USBD_SetClassConfig>
 8006d14:	4603      	mov	r3, r0
 8006d16:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8006d18:	7bfb      	ldrb	r3, [r7, #15]
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d00f      	beq.n	8006d3e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8006d1e:	6839      	ldr	r1, [r7, #0]
 8006d20:	6878      	ldr	r0, [r7, #4]
 8006d22:	f000 f918 	bl	8006f56 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	685b      	ldr	r3, [r3, #4]
 8006d2a:	b2db      	uxtb	r3, r3
 8006d2c:	4619      	mov	r1, r3
 8006d2e:	6878      	ldr	r0, [r7, #4]
 8006d30:	f7fe ffa3 	bl	8005c7a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	2202      	movs	r2, #2
 8006d38:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006d3c:	e014      	b.n	8006d68 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006d3e:	6878      	ldr	r0, [r7, #4]
 8006d40:	f000 f9d4 	bl	80070ec <USBD_CtlSendStatus>
      break;
 8006d44:	e010      	b.n	8006d68 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006d46:	6878      	ldr	r0, [r7, #4]
 8006d48:	f000 f9d0 	bl	80070ec <USBD_CtlSendStatus>
      break;
 8006d4c:	e00c      	b.n	8006d68 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8006d4e:	6839      	ldr	r1, [r7, #0]
 8006d50:	6878      	ldr	r0, [r7, #4]
 8006d52:	f000 f900 	bl	8006f56 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006d56:	4b07      	ldr	r3, [pc, #28]	; (8006d74 <USBD_SetConfig+0x150>)
 8006d58:	781b      	ldrb	r3, [r3, #0]
 8006d5a:	4619      	mov	r1, r3
 8006d5c:	6878      	ldr	r0, [r7, #4]
 8006d5e:	f7fe ff8c 	bl	8005c7a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8006d62:	2303      	movs	r3, #3
 8006d64:	73fb      	strb	r3, [r7, #15]
      break;
 8006d66:	bf00      	nop
  }

  return ret;
 8006d68:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d6a:	4618      	mov	r0, r3
 8006d6c:	3710      	adds	r7, #16
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	bd80      	pop	{r7, pc}
 8006d72:	bf00      	nop
 8006d74:	20000574 	.word	0x20000574

08006d78 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006d78:	b580      	push	{r7, lr}
 8006d7a:	b082      	sub	sp, #8
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	6078      	str	r0, [r7, #4]
 8006d80:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006d82:	683b      	ldr	r3, [r7, #0]
 8006d84:	88db      	ldrh	r3, [r3, #6]
 8006d86:	2b01      	cmp	r3, #1
 8006d88:	d004      	beq.n	8006d94 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006d8a:	6839      	ldr	r1, [r7, #0]
 8006d8c:	6878      	ldr	r0, [r7, #4]
 8006d8e:	f000 f8e2 	bl	8006f56 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006d92:	e023      	b.n	8006ddc <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d9a:	b2db      	uxtb	r3, r3
 8006d9c:	2b02      	cmp	r3, #2
 8006d9e:	dc02      	bgt.n	8006da6 <USBD_GetConfig+0x2e>
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	dc03      	bgt.n	8006dac <USBD_GetConfig+0x34>
 8006da4:	e015      	b.n	8006dd2 <USBD_GetConfig+0x5a>
 8006da6:	2b03      	cmp	r3, #3
 8006da8:	d00b      	beq.n	8006dc2 <USBD_GetConfig+0x4a>
 8006daa:	e012      	b.n	8006dd2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	2200      	movs	r2, #0
 8006db0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	3308      	adds	r3, #8
 8006db6:	2201      	movs	r2, #1
 8006db8:	4619      	mov	r1, r3
 8006dba:	6878      	ldr	r0, [r7, #4]
 8006dbc:	f000 f93c 	bl	8007038 <USBD_CtlSendData>
        break;
 8006dc0:	e00c      	b.n	8006ddc <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	3304      	adds	r3, #4
 8006dc6:	2201      	movs	r2, #1
 8006dc8:	4619      	mov	r1, r3
 8006dca:	6878      	ldr	r0, [r7, #4]
 8006dcc:	f000 f934 	bl	8007038 <USBD_CtlSendData>
        break;
 8006dd0:	e004      	b.n	8006ddc <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8006dd2:	6839      	ldr	r1, [r7, #0]
 8006dd4:	6878      	ldr	r0, [r7, #4]
 8006dd6:	f000 f8be 	bl	8006f56 <USBD_CtlError>
        break;
 8006dda:	bf00      	nop
}
 8006ddc:	bf00      	nop
 8006dde:	3708      	adds	r7, #8
 8006de0:	46bd      	mov	sp, r7
 8006de2:	bd80      	pop	{r7, pc}

08006de4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006de4:	b580      	push	{r7, lr}
 8006de6:	b082      	sub	sp, #8
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]
 8006dec:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006df4:	b2db      	uxtb	r3, r3
 8006df6:	3b01      	subs	r3, #1
 8006df8:	2b02      	cmp	r3, #2
 8006dfa:	d81e      	bhi.n	8006e3a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006dfc:	683b      	ldr	r3, [r7, #0]
 8006dfe:	88db      	ldrh	r3, [r3, #6]
 8006e00:	2b02      	cmp	r3, #2
 8006e02:	d004      	beq.n	8006e0e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8006e04:	6839      	ldr	r1, [r7, #0]
 8006e06:	6878      	ldr	r0, [r7, #4]
 8006e08:	f000 f8a5 	bl	8006f56 <USBD_CtlError>
        break;
 8006e0c:	e01a      	b.n	8006e44 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	2201      	movs	r2, #1
 8006e12:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d005      	beq.n	8006e2a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	68db      	ldr	r3, [r3, #12]
 8006e22:	f043 0202 	orr.w	r2, r3, #2
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	330c      	adds	r3, #12
 8006e2e:	2202      	movs	r2, #2
 8006e30:	4619      	mov	r1, r3
 8006e32:	6878      	ldr	r0, [r7, #4]
 8006e34:	f000 f900 	bl	8007038 <USBD_CtlSendData>
      break;
 8006e38:	e004      	b.n	8006e44 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8006e3a:	6839      	ldr	r1, [r7, #0]
 8006e3c:	6878      	ldr	r0, [r7, #4]
 8006e3e:	f000 f88a 	bl	8006f56 <USBD_CtlError>
      break;
 8006e42:	bf00      	nop
  }
}
 8006e44:	bf00      	nop
 8006e46:	3708      	adds	r7, #8
 8006e48:	46bd      	mov	sp, r7
 8006e4a:	bd80      	pop	{r7, pc}

08006e4c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006e4c:	b580      	push	{r7, lr}
 8006e4e:	b082      	sub	sp, #8
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	6078      	str	r0, [r7, #4]
 8006e54:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006e56:	683b      	ldr	r3, [r7, #0]
 8006e58:	885b      	ldrh	r3, [r3, #2]
 8006e5a:	2b01      	cmp	r3, #1
 8006e5c:	d107      	bne.n	8006e6e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	2201      	movs	r2, #1
 8006e62:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8006e66:	6878      	ldr	r0, [r7, #4]
 8006e68:	f000 f940 	bl	80070ec <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8006e6c:	e013      	b.n	8006e96 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8006e6e:	683b      	ldr	r3, [r7, #0]
 8006e70:	885b      	ldrh	r3, [r3, #2]
 8006e72:	2b02      	cmp	r3, #2
 8006e74:	d10b      	bne.n	8006e8e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8006e76:	683b      	ldr	r3, [r7, #0]
 8006e78:	889b      	ldrh	r3, [r3, #4]
 8006e7a:	0a1b      	lsrs	r3, r3, #8
 8006e7c:	b29b      	uxth	r3, r3
 8006e7e:	b2da      	uxtb	r2, r3
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8006e86:	6878      	ldr	r0, [r7, #4]
 8006e88:	f000 f930 	bl	80070ec <USBD_CtlSendStatus>
}
 8006e8c:	e003      	b.n	8006e96 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8006e8e:	6839      	ldr	r1, [r7, #0]
 8006e90:	6878      	ldr	r0, [r7, #4]
 8006e92:	f000 f860 	bl	8006f56 <USBD_CtlError>
}
 8006e96:	bf00      	nop
 8006e98:	3708      	adds	r7, #8
 8006e9a:	46bd      	mov	sp, r7
 8006e9c:	bd80      	pop	{r7, pc}

08006e9e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006e9e:	b580      	push	{r7, lr}
 8006ea0:	b082      	sub	sp, #8
 8006ea2:	af00      	add	r7, sp, #0
 8006ea4:	6078      	str	r0, [r7, #4]
 8006ea6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006eae:	b2db      	uxtb	r3, r3
 8006eb0:	3b01      	subs	r3, #1
 8006eb2:	2b02      	cmp	r3, #2
 8006eb4:	d80b      	bhi.n	8006ece <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006eb6:	683b      	ldr	r3, [r7, #0]
 8006eb8:	885b      	ldrh	r3, [r3, #2]
 8006eba:	2b01      	cmp	r3, #1
 8006ebc:	d10c      	bne.n	8006ed8 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	2200      	movs	r2, #0
 8006ec2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006ec6:	6878      	ldr	r0, [r7, #4]
 8006ec8:	f000 f910 	bl	80070ec <USBD_CtlSendStatus>
      }
      break;
 8006ecc:	e004      	b.n	8006ed8 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8006ece:	6839      	ldr	r1, [r7, #0]
 8006ed0:	6878      	ldr	r0, [r7, #4]
 8006ed2:	f000 f840 	bl	8006f56 <USBD_CtlError>
      break;
 8006ed6:	e000      	b.n	8006eda <USBD_ClrFeature+0x3c>
      break;
 8006ed8:	bf00      	nop
  }
}
 8006eda:	bf00      	nop
 8006edc:	3708      	adds	r7, #8
 8006ede:	46bd      	mov	sp, r7
 8006ee0:	bd80      	pop	{r7, pc}

08006ee2 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006ee2:	b580      	push	{r7, lr}
 8006ee4:	b084      	sub	sp, #16
 8006ee6:	af00      	add	r7, sp, #0
 8006ee8:	6078      	str	r0, [r7, #4]
 8006eea:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8006eec:	683b      	ldr	r3, [r7, #0]
 8006eee:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	781a      	ldrb	r2, [r3, #0]
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	3301      	adds	r3, #1
 8006efc:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	781a      	ldrb	r2, [r3, #0]
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	3301      	adds	r3, #1
 8006f0a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8006f0c:	68f8      	ldr	r0, [r7, #12]
 8006f0e:	f7ff fa41 	bl	8006394 <SWAPBYTE>
 8006f12:	4603      	mov	r3, r0
 8006f14:	461a      	mov	r2, r3
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	3301      	adds	r3, #1
 8006f1e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	3301      	adds	r3, #1
 8006f24:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8006f26:	68f8      	ldr	r0, [r7, #12]
 8006f28:	f7ff fa34 	bl	8006394 <SWAPBYTE>
 8006f2c:	4603      	mov	r3, r0
 8006f2e:	461a      	mov	r2, r3
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	3301      	adds	r3, #1
 8006f38:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	3301      	adds	r3, #1
 8006f3e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8006f40:	68f8      	ldr	r0, [r7, #12]
 8006f42:	f7ff fa27 	bl	8006394 <SWAPBYTE>
 8006f46:	4603      	mov	r3, r0
 8006f48:	461a      	mov	r2, r3
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	80da      	strh	r2, [r3, #6]
}
 8006f4e:	bf00      	nop
 8006f50:	3710      	adds	r7, #16
 8006f52:	46bd      	mov	sp, r7
 8006f54:	bd80      	pop	{r7, pc}

08006f56 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006f56:	b580      	push	{r7, lr}
 8006f58:	b082      	sub	sp, #8
 8006f5a:	af00      	add	r7, sp, #0
 8006f5c:	6078      	str	r0, [r7, #4]
 8006f5e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006f60:	2180      	movs	r1, #128	; 0x80
 8006f62:	6878      	ldr	r0, [r7, #4]
 8006f64:	f000 fd1e 	bl	80079a4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006f68:	2100      	movs	r1, #0
 8006f6a:	6878      	ldr	r0, [r7, #4]
 8006f6c:	f000 fd1a 	bl	80079a4 <USBD_LL_StallEP>
}
 8006f70:	bf00      	nop
 8006f72:	3708      	adds	r7, #8
 8006f74:	46bd      	mov	sp, r7
 8006f76:	bd80      	pop	{r7, pc}

08006f78 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006f78:	b580      	push	{r7, lr}
 8006f7a:	b086      	sub	sp, #24
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	60f8      	str	r0, [r7, #12]
 8006f80:	60b9      	str	r1, [r7, #8]
 8006f82:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006f84:	2300      	movs	r3, #0
 8006f86:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d036      	beq.n	8006ffc <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8006f92:	6938      	ldr	r0, [r7, #16]
 8006f94:	f000 f836 	bl	8007004 <USBD_GetLen>
 8006f98:	4603      	mov	r3, r0
 8006f9a:	3301      	adds	r3, #1
 8006f9c:	b29b      	uxth	r3, r3
 8006f9e:	005b      	lsls	r3, r3, #1
 8006fa0:	b29a      	uxth	r2, r3
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8006fa6:	7dfb      	ldrb	r3, [r7, #23]
 8006fa8:	68ba      	ldr	r2, [r7, #8]
 8006faa:	4413      	add	r3, r2
 8006fac:	687a      	ldr	r2, [r7, #4]
 8006fae:	7812      	ldrb	r2, [r2, #0]
 8006fb0:	701a      	strb	r2, [r3, #0]
  idx++;
 8006fb2:	7dfb      	ldrb	r3, [r7, #23]
 8006fb4:	3301      	adds	r3, #1
 8006fb6:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8006fb8:	7dfb      	ldrb	r3, [r7, #23]
 8006fba:	68ba      	ldr	r2, [r7, #8]
 8006fbc:	4413      	add	r3, r2
 8006fbe:	2203      	movs	r2, #3
 8006fc0:	701a      	strb	r2, [r3, #0]
  idx++;
 8006fc2:	7dfb      	ldrb	r3, [r7, #23]
 8006fc4:	3301      	adds	r3, #1
 8006fc6:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8006fc8:	e013      	b.n	8006ff2 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8006fca:	7dfb      	ldrb	r3, [r7, #23]
 8006fcc:	68ba      	ldr	r2, [r7, #8]
 8006fce:	4413      	add	r3, r2
 8006fd0:	693a      	ldr	r2, [r7, #16]
 8006fd2:	7812      	ldrb	r2, [r2, #0]
 8006fd4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8006fd6:	693b      	ldr	r3, [r7, #16]
 8006fd8:	3301      	adds	r3, #1
 8006fda:	613b      	str	r3, [r7, #16]
    idx++;
 8006fdc:	7dfb      	ldrb	r3, [r7, #23]
 8006fde:	3301      	adds	r3, #1
 8006fe0:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8006fe2:	7dfb      	ldrb	r3, [r7, #23]
 8006fe4:	68ba      	ldr	r2, [r7, #8]
 8006fe6:	4413      	add	r3, r2
 8006fe8:	2200      	movs	r2, #0
 8006fea:	701a      	strb	r2, [r3, #0]
    idx++;
 8006fec:	7dfb      	ldrb	r3, [r7, #23]
 8006fee:	3301      	adds	r3, #1
 8006ff0:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8006ff2:	693b      	ldr	r3, [r7, #16]
 8006ff4:	781b      	ldrb	r3, [r3, #0]
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d1e7      	bne.n	8006fca <USBD_GetString+0x52>
 8006ffa:	e000      	b.n	8006ffe <USBD_GetString+0x86>
    return;
 8006ffc:	bf00      	nop
  }
}
 8006ffe:	3718      	adds	r7, #24
 8007000:	46bd      	mov	sp, r7
 8007002:	bd80      	pop	{r7, pc}

08007004 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007004:	b480      	push	{r7}
 8007006:	b085      	sub	sp, #20
 8007008:	af00      	add	r7, sp, #0
 800700a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800700c:	2300      	movs	r3, #0
 800700e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007014:	e005      	b.n	8007022 <USBD_GetLen+0x1e>
  {
    len++;
 8007016:	7bfb      	ldrb	r3, [r7, #15]
 8007018:	3301      	adds	r3, #1
 800701a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800701c:	68bb      	ldr	r3, [r7, #8]
 800701e:	3301      	adds	r3, #1
 8007020:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007022:	68bb      	ldr	r3, [r7, #8]
 8007024:	781b      	ldrb	r3, [r3, #0]
 8007026:	2b00      	cmp	r3, #0
 8007028:	d1f5      	bne.n	8007016 <USBD_GetLen+0x12>
  }

  return len;
 800702a:	7bfb      	ldrb	r3, [r7, #15]
}
 800702c:	4618      	mov	r0, r3
 800702e:	3714      	adds	r7, #20
 8007030:	46bd      	mov	sp, r7
 8007032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007036:	4770      	bx	lr

08007038 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007038:	b580      	push	{r7, lr}
 800703a:	b084      	sub	sp, #16
 800703c:	af00      	add	r7, sp, #0
 800703e:	60f8      	str	r0, [r7, #12]
 8007040:	60b9      	str	r1, [r7, #8]
 8007042:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	2202      	movs	r2, #2
 8007048:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	687a      	ldr	r2, [r7, #4]
 8007050:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	687a      	ldr	r2, [r7, #4]
 8007056:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	68ba      	ldr	r2, [r7, #8]
 800705c:	2100      	movs	r1, #0
 800705e:	68f8      	ldr	r0, [r7, #12]
 8007060:	f000 fd29 	bl	8007ab6 <USBD_LL_Transmit>

  return USBD_OK;
 8007064:	2300      	movs	r3, #0
}
 8007066:	4618      	mov	r0, r3
 8007068:	3710      	adds	r7, #16
 800706a:	46bd      	mov	sp, r7
 800706c:	bd80      	pop	{r7, pc}

0800706e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800706e:	b580      	push	{r7, lr}
 8007070:	b084      	sub	sp, #16
 8007072:	af00      	add	r7, sp, #0
 8007074:	60f8      	str	r0, [r7, #12]
 8007076:	60b9      	str	r1, [r7, #8]
 8007078:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	68ba      	ldr	r2, [r7, #8]
 800707e:	2100      	movs	r1, #0
 8007080:	68f8      	ldr	r0, [r7, #12]
 8007082:	f000 fd18 	bl	8007ab6 <USBD_LL_Transmit>

  return USBD_OK;
 8007086:	2300      	movs	r3, #0
}
 8007088:	4618      	mov	r0, r3
 800708a:	3710      	adds	r7, #16
 800708c:	46bd      	mov	sp, r7
 800708e:	bd80      	pop	{r7, pc}

08007090 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007090:	b580      	push	{r7, lr}
 8007092:	b084      	sub	sp, #16
 8007094:	af00      	add	r7, sp, #0
 8007096:	60f8      	str	r0, [r7, #12]
 8007098:	60b9      	str	r1, [r7, #8]
 800709a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	2203      	movs	r2, #3
 80070a0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	687a      	ldr	r2, [r7, #4]
 80070a8:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	687a      	ldr	r2, [r7, #4]
 80070b0:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	68ba      	ldr	r2, [r7, #8]
 80070b8:	2100      	movs	r1, #0
 80070ba:	68f8      	ldr	r0, [r7, #12]
 80070bc:	f000 fd1c 	bl	8007af8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80070c0:	2300      	movs	r3, #0
}
 80070c2:	4618      	mov	r0, r3
 80070c4:	3710      	adds	r7, #16
 80070c6:	46bd      	mov	sp, r7
 80070c8:	bd80      	pop	{r7, pc}

080070ca <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80070ca:	b580      	push	{r7, lr}
 80070cc:	b084      	sub	sp, #16
 80070ce:	af00      	add	r7, sp, #0
 80070d0:	60f8      	str	r0, [r7, #12]
 80070d2:	60b9      	str	r1, [r7, #8]
 80070d4:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	68ba      	ldr	r2, [r7, #8]
 80070da:	2100      	movs	r1, #0
 80070dc:	68f8      	ldr	r0, [r7, #12]
 80070de:	f000 fd0b 	bl	8007af8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80070e2:	2300      	movs	r3, #0
}
 80070e4:	4618      	mov	r0, r3
 80070e6:	3710      	adds	r7, #16
 80070e8:	46bd      	mov	sp, r7
 80070ea:	bd80      	pop	{r7, pc}

080070ec <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80070ec:	b580      	push	{r7, lr}
 80070ee:	b082      	sub	sp, #8
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	2204      	movs	r2, #4
 80070f8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80070fc:	2300      	movs	r3, #0
 80070fe:	2200      	movs	r2, #0
 8007100:	2100      	movs	r1, #0
 8007102:	6878      	ldr	r0, [r7, #4]
 8007104:	f000 fcd7 	bl	8007ab6 <USBD_LL_Transmit>

  return USBD_OK;
 8007108:	2300      	movs	r3, #0
}
 800710a:	4618      	mov	r0, r3
 800710c:	3708      	adds	r7, #8
 800710e:	46bd      	mov	sp, r7
 8007110:	bd80      	pop	{r7, pc}

08007112 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007112:	b580      	push	{r7, lr}
 8007114:	b082      	sub	sp, #8
 8007116:	af00      	add	r7, sp, #0
 8007118:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	2205      	movs	r2, #5
 800711e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007122:	2300      	movs	r3, #0
 8007124:	2200      	movs	r2, #0
 8007126:	2100      	movs	r1, #0
 8007128:	6878      	ldr	r0, [r7, #4]
 800712a:	f000 fce5 	bl	8007af8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800712e:	2300      	movs	r3, #0
}
 8007130:	4618      	mov	r0, r3
 8007132:	3708      	adds	r7, #8
 8007134:	46bd      	mov	sp, r7
 8007136:	bd80      	pop	{r7, pc}

08007138 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007138:	b580      	push	{r7, lr}
 800713a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800713c:	2200      	movs	r2, #0
 800713e:	4912      	ldr	r1, [pc, #72]	; (8007188 <MX_USB_DEVICE_Init+0x50>)
 8007140:	4812      	ldr	r0, [pc, #72]	; (800718c <MX_USB_DEVICE_Init+0x54>)
 8007142:	f7fe fd01 	bl	8005b48 <USBD_Init>
 8007146:	4603      	mov	r3, r0
 8007148:	2b00      	cmp	r3, #0
 800714a:	d001      	beq.n	8007150 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800714c:	f7f9 fa60 	bl	8000610 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007150:	490f      	ldr	r1, [pc, #60]	; (8007190 <MX_USB_DEVICE_Init+0x58>)
 8007152:	480e      	ldr	r0, [pc, #56]	; (800718c <MX_USB_DEVICE_Init+0x54>)
 8007154:	f7fe fd28 	bl	8005ba8 <USBD_RegisterClass>
 8007158:	4603      	mov	r3, r0
 800715a:	2b00      	cmp	r3, #0
 800715c:	d001      	beq.n	8007162 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800715e:	f7f9 fa57 	bl	8000610 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007162:	490c      	ldr	r1, [pc, #48]	; (8007194 <MX_USB_DEVICE_Init+0x5c>)
 8007164:	4809      	ldr	r0, [pc, #36]	; (800718c <MX_USB_DEVICE_Init+0x54>)
 8007166:	f7fe fc5f 	bl	8005a28 <USBD_CDC_RegisterInterface>
 800716a:	4603      	mov	r3, r0
 800716c:	2b00      	cmp	r3, #0
 800716e:	d001      	beq.n	8007174 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007170:	f7f9 fa4e 	bl	8000610 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007174:	4805      	ldr	r0, [pc, #20]	; (800718c <MX_USB_DEVICE_Init+0x54>)
 8007176:	f7fe fd4d 	bl	8005c14 <USBD_Start>
 800717a:	4603      	mov	r3, r0
 800717c:	2b00      	cmp	r3, #0
 800717e:	d001      	beq.n	8007184 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007180:	f7f9 fa46 	bl	8000610 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007184:	bf00      	nop
 8007186:	bd80      	pop	{r7, pc}
 8007188:	200000b4 	.word	0x200000b4
 800718c:	20000578 	.word	0x20000578
 8007190:	20000018 	.word	0x20000018
 8007194:	200000a0 	.word	0x200000a0

08007198 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007198:	b580      	push	{r7, lr}
 800719a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800719c:	2200      	movs	r2, #0
 800719e:	4905      	ldr	r1, [pc, #20]	; (80071b4 <CDC_Init_FS+0x1c>)
 80071a0:	4805      	ldr	r0, [pc, #20]	; (80071b8 <CDC_Init_FS+0x20>)
 80071a2:	f7fe fc5b 	bl	8005a5c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80071a6:	4905      	ldr	r1, [pc, #20]	; (80071bc <CDC_Init_FS+0x24>)
 80071a8:	4803      	ldr	r0, [pc, #12]	; (80071b8 <CDC_Init_FS+0x20>)
 80071aa:	f7fe fc79 	bl	8005aa0 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80071ae:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80071b0:	4618      	mov	r0, r3
 80071b2:	bd80      	pop	{r7, pc}
 80071b4:	20001054 	.word	0x20001054
 80071b8:	20000578 	.word	0x20000578
 80071bc:	20000854 	.word	0x20000854

080071c0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80071c0:	b480      	push	{r7}
 80071c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80071c4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80071c6:	4618      	mov	r0, r3
 80071c8:	46bd      	mov	sp, r7
 80071ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ce:	4770      	bx	lr

080071d0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80071d0:	b480      	push	{r7}
 80071d2:	b083      	sub	sp, #12
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	4603      	mov	r3, r0
 80071d8:	6039      	str	r1, [r7, #0]
 80071da:	71fb      	strb	r3, [r7, #7]
 80071dc:	4613      	mov	r3, r2
 80071de:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80071e0:	79fb      	ldrb	r3, [r7, #7]
 80071e2:	2b23      	cmp	r3, #35	; 0x23
 80071e4:	f200 80a3 	bhi.w	800732e <CDC_Control_FS+0x15e>
 80071e8:	a201      	add	r2, pc, #4	; (adr r2, 80071f0 <CDC_Control_FS+0x20>)
 80071ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071ee:	bf00      	nop
 80071f0:	0800732f 	.word	0x0800732f
 80071f4:	0800732f 	.word	0x0800732f
 80071f8:	0800732f 	.word	0x0800732f
 80071fc:	0800732f 	.word	0x0800732f
 8007200:	0800732f 	.word	0x0800732f
 8007204:	0800732f 	.word	0x0800732f
 8007208:	0800732f 	.word	0x0800732f
 800720c:	0800732f 	.word	0x0800732f
 8007210:	0800732f 	.word	0x0800732f
 8007214:	0800732f 	.word	0x0800732f
 8007218:	0800732f 	.word	0x0800732f
 800721c:	0800732f 	.word	0x0800732f
 8007220:	0800732f 	.word	0x0800732f
 8007224:	0800732f 	.word	0x0800732f
 8007228:	0800732f 	.word	0x0800732f
 800722c:	0800732f 	.word	0x0800732f
 8007230:	0800732f 	.word	0x0800732f
 8007234:	0800732f 	.word	0x0800732f
 8007238:	0800732f 	.word	0x0800732f
 800723c:	0800732f 	.word	0x0800732f
 8007240:	0800732f 	.word	0x0800732f
 8007244:	0800732f 	.word	0x0800732f
 8007248:	0800732f 	.word	0x0800732f
 800724c:	0800732f 	.word	0x0800732f
 8007250:	0800732f 	.word	0x0800732f
 8007254:	0800732f 	.word	0x0800732f
 8007258:	0800732f 	.word	0x0800732f
 800725c:	0800732f 	.word	0x0800732f
 8007260:	0800732f 	.word	0x0800732f
 8007264:	0800732f 	.word	0x0800732f
 8007268:	0800732f 	.word	0x0800732f
 800726c:	0800732f 	.word	0x0800732f
 8007270:	08007281 	.word	0x08007281
 8007274:	080072db 	.word	0x080072db
 8007278:	0800732f 	.word	0x0800732f
 800727c:	0800732f 	.word	0x0800732f
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	Linecoding.bitrate = (uint32_t)(pbuf[0]);
 8007280:	683b      	ldr	r3, [r7, #0]
 8007282:	781b      	ldrb	r3, [r3, #0]
 8007284:	461a      	mov	r2, r3
 8007286:	4b2e      	ldr	r3, [pc, #184]	; (8007340 <CDC_Control_FS+0x170>)
 8007288:	601a      	str	r2, [r3, #0]
    	Linecoding.bitrate |= (uint32_t)(pbuf[1]<<8);
 800728a:	4b2d      	ldr	r3, [pc, #180]	; (8007340 <CDC_Control_FS+0x170>)
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	683a      	ldr	r2, [r7, #0]
 8007290:	3201      	adds	r2, #1
 8007292:	7812      	ldrb	r2, [r2, #0]
 8007294:	0212      	lsls	r2, r2, #8
 8007296:	4313      	orrs	r3, r2
 8007298:	4a29      	ldr	r2, [pc, #164]	; (8007340 <CDC_Control_FS+0x170>)
 800729a:	6013      	str	r3, [r2, #0]
    	Linecoding.bitrate |= (uint32_t)(pbuf[2]<<16);
 800729c:	4b28      	ldr	r3, [pc, #160]	; (8007340 <CDC_Control_FS+0x170>)
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	683a      	ldr	r2, [r7, #0]
 80072a2:	3202      	adds	r2, #2
 80072a4:	7812      	ldrb	r2, [r2, #0]
 80072a6:	0412      	lsls	r2, r2, #16
 80072a8:	4313      	orrs	r3, r2
 80072aa:	4a25      	ldr	r2, [pc, #148]	; (8007340 <CDC_Control_FS+0x170>)
 80072ac:	6013      	str	r3, [r2, #0]
    	Linecoding.bitrate |= (uint32_t)(pbuf[3]<<24);
 80072ae:	4b24      	ldr	r3, [pc, #144]	; (8007340 <CDC_Control_FS+0x170>)
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	683a      	ldr	r2, [r7, #0]
 80072b4:	3203      	adds	r2, #3
 80072b6:	7812      	ldrb	r2, [r2, #0]
 80072b8:	0612      	lsls	r2, r2, #24
 80072ba:	4313      	orrs	r3, r2
 80072bc:	4a20      	ldr	r2, [pc, #128]	; (8007340 <CDC_Control_FS+0x170>)
 80072be:	6013      	str	r3, [r2, #0]
    	Linecoding.format = pbuf[4];
 80072c0:	683b      	ldr	r3, [r7, #0]
 80072c2:	791a      	ldrb	r2, [r3, #4]
 80072c4:	4b1e      	ldr	r3, [pc, #120]	; (8007340 <CDC_Control_FS+0x170>)
 80072c6:	711a      	strb	r2, [r3, #4]
    	Linecoding.paritytype = pbuf[5];
 80072c8:	683b      	ldr	r3, [r7, #0]
 80072ca:	795a      	ldrb	r2, [r3, #5]
 80072cc:	4b1c      	ldr	r3, [pc, #112]	; (8007340 <CDC_Control_FS+0x170>)
 80072ce:	715a      	strb	r2, [r3, #5]
    	Linecoding.datatype = pbuf[6];
 80072d0:	683b      	ldr	r3, [r7, #0]
 80072d2:	799a      	ldrb	r2, [r3, #6]
 80072d4:	4b1a      	ldr	r3, [pc, #104]	; (8007340 <CDC_Control_FS+0x170>)
 80072d6:	719a      	strb	r2, [r3, #6]
    break;
 80072d8:	e02a      	b.n	8007330 <CDC_Control_FS+0x160>

    case CDC_GET_LINE_CODING:
      pbuf[0] = (uint8_t)(Linecoding.bitrate);
 80072da:	4b19      	ldr	r3, [pc, #100]	; (8007340 <CDC_Control_FS+0x170>)
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	b2da      	uxtb	r2, r3
 80072e0:	683b      	ldr	r3, [r7, #0]
 80072e2:	701a      	strb	r2, [r3, #0]
      pbuf[1] = (uint8_t)(Linecoding.bitrate>>8);
 80072e4:	4b16      	ldr	r3, [pc, #88]	; (8007340 <CDC_Control_FS+0x170>)
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	0a1a      	lsrs	r2, r3, #8
 80072ea:	683b      	ldr	r3, [r7, #0]
 80072ec:	3301      	adds	r3, #1
 80072ee:	b2d2      	uxtb	r2, r2
 80072f0:	701a      	strb	r2, [r3, #0]
      pbuf[2] = (uint8_t)(Linecoding.bitrate>>16);
 80072f2:	4b13      	ldr	r3, [pc, #76]	; (8007340 <CDC_Control_FS+0x170>)
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	0c1a      	lsrs	r2, r3, #16
 80072f8:	683b      	ldr	r3, [r7, #0]
 80072fa:	3302      	adds	r3, #2
 80072fc:	b2d2      	uxtb	r2, r2
 80072fe:	701a      	strb	r2, [r3, #0]
      pbuf[3] = (uint8_t)(Linecoding.bitrate>>24);
 8007300:	4b0f      	ldr	r3, [pc, #60]	; (8007340 <CDC_Control_FS+0x170>)
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	0e1a      	lsrs	r2, r3, #24
 8007306:	683b      	ldr	r3, [r7, #0]
 8007308:	3303      	adds	r3, #3
 800730a:	b2d2      	uxtb	r2, r2
 800730c:	701a      	strb	r2, [r3, #0]
      pbuf[4] = Linecoding.format;
 800730e:	683b      	ldr	r3, [r7, #0]
 8007310:	3304      	adds	r3, #4
 8007312:	4a0b      	ldr	r2, [pc, #44]	; (8007340 <CDC_Control_FS+0x170>)
 8007314:	7912      	ldrb	r2, [r2, #4]
 8007316:	701a      	strb	r2, [r3, #0]
      pbuf[5] = Linecoding.paritytype;
 8007318:	683b      	ldr	r3, [r7, #0]
 800731a:	3305      	adds	r3, #5
 800731c:	4a08      	ldr	r2, [pc, #32]	; (8007340 <CDC_Control_FS+0x170>)
 800731e:	7952      	ldrb	r2, [r2, #5]
 8007320:	701a      	strb	r2, [r3, #0]
      pbuf[6] = Linecoding.datatype;
 8007322:	683b      	ldr	r3, [r7, #0]
 8007324:	3306      	adds	r3, #6
 8007326:	4a06      	ldr	r2, [pc, #24]	; (8007340 <CDC_Control_FS+0x170>)
 8007328:	7992      	ldrb	r2, [r2, #6]
 800732a:	701a      	strb	r2, [r3, #0]
    break;
 800732c:	e000      	b.n	8007330 <CDC_Control_FS+0x160>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800732e:	bf00      	nop
  }

  return (USBD_OK);
 8007330:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007332:	4618      	mov	r0, r3
 8007334:	370c      	adds	r7, #12
 8007336:	46bd      	mov	sp, r7
 8007338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800733c:	4770      	bx	lr
 800733e:	bf00      	nop
 8007340:	20000098 	.word	0x20000098

08007344 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007344:	b580      	push	{r7, lr}
 8007346:	b084      	sub	sp, #16
 8007348:	af00      	add	r7, sp, #0
 800734a:	6078      	str	r0, [r7, #4]
 800734c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800734e:	6879      	ldr	r1, [r7, #4]
 8007350:	480e      	ldr	r0, [pc, #56]	; (800738c <CDC_Receive_FS+0x48>)
 8007352:	f7fe fba5 	bl	8005aa0 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007356:	480d      	ldr	r0, [pc, #52]	; (800738c <CDC_Receive_FS+0x48>)
 8007358:	f7fe fbc0 	bl	8005adc <USBD_CDC_ReceivePacket>

  for(int i=0; i<*Len; i++)
 800735c:	2300      	movs	r3, #0
 800735e:	60fb      	str	r3, [r7, #12]
 8007360:	e009      	b.n	8007376 <CDC_Receive_FS+0x32>
  {
  	cdcDataIn(Buf[i]);
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	687a      	ldr	r2, [r7, #4]
 8007366:	4413      	add	r3, r2
 8007368:	781b      	ldrb	r3, [r3, #0]
 800736a:	4618      	mov	r0, r3
 800736c:	f7f9 fa72 	bl	8000854 <cdcDataIn>
  for(int i=0; i<*Len; i++)
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	3301      	adds	r3, #1
 8007374:	60fb      	str	r3, [r7, #12]
 8007376:	683b      	ldr	r3, [r7, #0]
 8007378:	681a      	ldr	r2, [r3, #0]
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	429a      	cmp	r2, r3
 800737e:	d8f0      	bhi.n	8007362 <CDC_Receive_FS+0x1e>
  }

  return (USBD_OK);
 8007380:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007382:	4618      	mov	r0, r3
 8007384:	3710      	adds	r7, #16
 8007386:	46bd      	mov	sp, r7
 8007388:	bd80      	pop	{r7, pc}
 800738a:	bf00      	nop
 800738c:	20000578 	.word	0x20000578

08007390 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8007390:	b480      	push	{r7}
 8007392:	b087      	sub	sp, #28
 8007394:	af00      	add	r7, sp, #0
 8007396:	60f8      	str	r0, [r7, #12]
 8007398:	60b9      	str	r1, [r7, #8]
 800739a:	4613      	mov	r3, r2
 800739c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800739e:	2300      	movs	r3, #0
 80073a0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80073a2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80073a6:	4618      	mov	r0, r3
 80073a8:	371c      	adds	r7, #28
 80073aa:	46bd      	mov	sp, r7
 80073ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b0:	4770      	bx	lr
	...

080073b4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80073b4:	b480      	push	{r7}
 80073b6:	b083      	sub	sp, #12
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	4603      	mov	r3, r0
 80073bc:	6039      	str	r1, [r7, #0]
 80073be:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80073c0:	683b      	ldr	r3, [r7, #0]
 80073c2:	2212      	movs	r2, #18
 80073c4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80073c6:	4b03      	ldr	r3, [pc, #12]	; (80073d4 <USBD_FS_DeviceDescriptor+0x20>)
}
 80073c8:	4618      	mov	r0, r3
 80073ca:	370c      	adds	r7, #12
 80073cc:	46bd      	mov	sp, r7
 80073ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d2:	4770      	bx	lr
 80073d4:	200000d0 	.word	0x200000d0

080073d8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80073d8:	b480      	push	{r7}
 80073da:	b083      	sub	sp, #12
 80073dc:	af00      	add	r7, sp, #0
 80073de:	4603      	mov	r3, r0
 80073e0:	6039      	str	r1, [r7, #0]
 80073e2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80073e4:	683b      	ldr	r3, [r7, #0]
 80073e6:	2204      	movs	r2, #4
 80073e8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80073ea:	4b03      	ldr	r3, [pc, #12]	; (80073f8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80073ec:	4618      	mov	r0, r3
 80073ee:	370c      	adds	r7, #12
 80073f0:	46bd      	mov	sp, r7
 80073f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f6:	4770      	bx	lr
 80073f8:	200000e4 	.word	0x200000e4

080073fc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80073fc:	b580      	push	{r7, lr}
 80073fe:	b082      	sub	sp, #8
 8007400:	af00      	add	r7, sp, #0
 8007402:	4603      	mov	r3, r0
 8007404:	6039      	str	r1, [r7, #0]
 8007406:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007408:	79fb      	ldrb	r3, [r7, #7]
 800740a:	2b00      	cmp	r3, #0
 800740c:	d105      	bne.n	800741a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800740e:	683a      	ldr	r2, [r7, #0]
 8007410:	4907      	ldr	r1, [pc, #28]	; (8007430 <USBD_FS_ProductStrDescriptor+0x34>)
 8007412:	4808      	ldr	r0, [pc, #32]	; (8007434 <USBD_FS_ProductStrDescriptor+0x38>)
 8007414:	f7ff fdb0 	bl	8006f78 <USBD_GetString>
 8007418:	e004      	b.n	8007424 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800741a:	683a      	ldr	r2, [r7, #0]
 800741c:	4904      	ldr	r1, [pc, #16]	; (8007430 <USBD_FS_ProductStrDescriptor+0x34>)
 800741e:	4805      	ldr	r0, [pc, #20]	; (8007434 <USBD_FS_ProductStrDescriptor+0x38>)
 8007420:	f7ff fdaa 	bl	8006f78 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007424:	4b02      	ldr	r3, [pc, #8]	; (8007430 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007426:	4618      	mov	r0, r3
 8007428:	3708      	adds	r7, #8
 800742a:	46bd      	mov	sp, r7
 800742c:	bd80      	pop	{r7, pc}
 800742e:	bf00      	nop
 8007430:	20001854 	.word	0x20001854
 8007434:	08007c58 	.word	0x08007c58

08007438 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007438:	b580      	push	{r7, lr}
 800743a:	b082      	sub	sp, #8
 800743c:	af00      	add	r7, sp, #0
 800743e:	4603      	mov	r3, r0
 8007440:	6039      	str	r1, [r7, #0]
 8007442:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007444:	683a      	ldr	r2, [r7, #0]
 8007446:	4904      	ldr	r1, [pc, #16]	; (8007458 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007448:	4804      	ldr	r0, [pc, #16]	; (800745c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800744a:	f7ff fd95 	bl	8006f78 <USBD_GetString>
  return USBD_StrDesc;
 800744e:	4b02      	ldr	r3, [pc, #8]	; (8007458 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007450:	4618      	mov	r0, r3
 8007452:	3708      	adds	r7, #8
 8007454:	46bd      	mov	sp, r7
 8007456:	bd80      	pop	{r7, pc}
 8007458:	20001854 	.word	0x20001854
 800745c:	08007c70 	.word	0x08007c70

08007460 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007460:	b580      	push	{r7, lr}
 8007462:	b082      	sub	sp, #8
 8007464:	af00      	add	r7, sp, #0
 8007466:	4603      	mov	r3, r0
 8007468:	6039      	str	r1, [r7, #0]
 800746a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800746c:	683b      	ldr	r3, [r7, #0]
 800746e:	221a      	movs	r2, #26
 8007470:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007472:	f000 f843 	bl	80074fc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007476:	4b02      	ldr	r3, [pc, #8]	; (8007480 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007478:	4618      	mov	r0, r3
 800747a:	3708      	adds	r7, #8
 800747c:	46bd      	mov	sp, r7
 800747e:	bd80      	pop	{r7, pc}
 8007480:	200000e8 	.word	0x200000e8

08007484 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007484:	b580      	push	{r7, lr}
 8007486:	b082      	sub	sp, #8
 8007488:	af00      	add	r7, sp, #0
 800748a:	4603      	mov	r3, r0
 800748c:	6039      	str	r1, [r7, #0]
 800748e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007490:	79fb      	ldrb	r3, [r7, #7]
 8007492:	2b00      	cmp	r3, #0
 8007494:	d105      	bne.n	80074a2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007496:	683a      	ldr	r2, [r7, #0]
 8007498:	4907      	ldr	r1, [pc, #28]	; (80074b8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800749a:	4808      	ldr	r0, [pc, #32]	; (80074bc <USBD_FS_ConfigStrDescriptor+0x38>)
 800749c:	f7ff fd6c 	bl	8006f78 <USBD_GetString>
 80074a0:	e004      	b.n	80074ac <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80074a2:	683a      	ldr	r2, [r7, #0]
 80074a4:	4904      	ldr	r1, [pc, #16]	; (80074b8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80074a6:	4805      	ldr	r0, [pc, #20]	; (80074bc <USBD_FS_ConfigStrDescriptor+0x38>)
 80074a8:	f7ff fd66 	bl	8006f78 <USBD_GetString>
  }
  return USBD_StrDesc;
 80074ac:	4b02      	ldr	r3, [pc, #8]	; (80074b8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80074ae:	4618      	mov	r0, r3
 80074b0:	3708      	adds	r7, #8
 80074b2:	46bd      	mov	sp, r7
 80074b4:	bd80      	pop	{r7, pc}
 80074b6:	bf00      	nop
 80074b8:	20001854 	.word	0x20001854
 80074bc:	08007c84 	.word	0x08007c84

080074c0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80074c0:	b580      	push	{r7, lr}
 80074c2:	b082      	sub	sp, #8
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	4603      	mov	r3, r0
 80074c8:	6039      	str	r1, [r7, #0]
 80074ca:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80074cc:	79fb      	ldrb	r3, [r7, #7]
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d105      	bne.n	80074de <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80074d2:	683a      	ldr	r2, [r7, #0]
 80074d4:	4907      	ldr	r1, [pc, #28]	; (80074f4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80074d6:	4808      	ldr	r0, [pc, #32]	; (80074f8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80074d8:	f7ff fd4e 	bl	8006f78 <USBD_GetString>
 80074dc:	e004      	b.n	80074e8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80074de:	683a      	ldr	r2, [r7, #0]
 80074e0:	4904      	ldr	r1, [pc, #16]	; (80074f4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80074e2:	4805      	ldr	r0, [pc, #20]	; (80074f8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80074e4:	f7ff fd48 	bl	8006f78 <USBD_GetString>
  }
  return USBD_StrDesc;
 80074e8:	4b02      	ldr	r3, [pc, #8]	; (80074f4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80074ea:	4618      	mov	r0, r3
 80074ec:	3708      	adds	r7, #8
 80074ee:	46bd      	mov	sp, r7
 80074f0:	bd80      	pop	{r7, pc}
 80074f2:	bf00      	nop
 80074f4:	20001854 	.word	0x20001854
 80074f8:	08007c90 	.word	0x08007c90

080074fc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80074fc:	b580      	push	{r7, lr}
 80074fe:	b084      	sub	sp, #16
 8007500:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007502:	4b0f      	ldr	r3, [pc, #60]	; (8007540 <Get_SerialNum+0x44>)
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007508:	4b0e      	ldr	r3, [pc, #56]	; (8007544 <Get_SerialNum+0x48>)
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800750e:	4b0e      	ldr	r3, [pc, #56]	; (8007548 <Get_SerialNum+0x4c>)
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007514:	68fa      	ldr	r2, [r7, #12]
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	4413      	add	r3, r2
 800751a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	2b00      	cmp	r3, #0
 8007520:	d009      	beq.n	8007536 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007522:	2208      	movs	r2, #8
 8007524:	4909      	ldr	r1, [pc, #36]	; (800754c <Get_SerialNum+0x50>)
 8007526:	68f8      	ldr	r0, [r7, #12]
 8007528:	f000 f814 	bl	8007554 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800752c:	2204      	movs	r2, #4
 800752e:	4908      	ldr	r1, [pc, #32]	; (8007550 <Get_SerialNum+0x54>)
 8007530:	68b8      	ldr	r0, [r7, #8]
 8007532:	f000 f80f 	bl	8007554 <IntToUnicode>
  }
}
 8007536:	bf00      	nop
 8007538:	3710      	adds	r7, #16
 800753a:	46bd      	mov	sp, r7
 800753c:	bd80      	pop	{r7, pc}
 800753e:	bf00      	nop
 8007540:	1fff7a10 	.word	0x1fff7a10
 8007544:	1fff7a14 	.word	0x1fff7a14
 8007548:	1fff7a18 	.word	0x1fff7a18
 800754c:	200000ea 	.word	0x200000ea
 8007550:	200000fa 	.word	0x200000fa

08007554 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007554:	b480      	push	{r7}
 8007556:	b087      	sub	sp, #28
 8007558:	af00      	add	r7, sp, #0
 800755a:	60f8      	str	r0, [r7, #12]
 800755c:	60b9      	str	r1, [r7, #8]
 800755e:	4613      	mov	r3, r2
 8007560:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007562:	2300      	movs	r3, #0
 8007564:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007566:	2300      	movs	r3, #0
 8007568:	75fb      	strb	r3, [r7, #23]
 800756a:	e027      	b.n	80075bc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	0f1b      	lsrs	r3, r3, #28
 8007570:	2b09      	cmp	r3, #9
 8007572:	d80b      	bhi.n	800758c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	0f1b      	lsrs	r3, r3, #28
 8007578:	b2da      	uxtb	r2, r3
 800757a:	7dfb      	ldrb	r3, [r7, #23]
 800757c:	005b      	lsls	r3, r3, #1
 800757e:	4619      	mov	r1, r3
 8007580:	68bb      	ldr	r3, [r7, #8]
 8007582:	440b      	add	r3, r1
 8007584:	3230      	adds	r2, #48	; 0x30
 8007586:	b2d2      	uxtb	r2, r2
 8007588:	701a      	strb	r2, [r3, #0]
 800758a:	e00a      	b.n	80075a2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	0f1b      	lsrs	r3, r3, #28
 8007590:	b2da      	uxtb	r2, r3
 8007592:	7dfb      	ldrb	r3, [r7, #23]
 8007594:	005b      	lsls	r3, r3, #1
 8007596:	4619      	mov	r1, r3
 8007598:	68bb      	ldr	r3, [r7, #8]
 800759a:	440b      	add	r3, r1
 800759c:	3237      	adds	r2, #55	; 0x37
 800759e:	b2d2      	uxtb	r2, r2
 80075a0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	011b      	lsls	r3, r3, #4
 80075a6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80075a8:	7dfb      	ldrb	r3, [r7, #23]
 80075aa:	005b      	lsls	r3, r3, #1
 80075ac:	3301      	adds	r3, #1
 80075ae:	68ba      	ldr	r2, [r7, #8]
 80075b0:	4413      	add	r3, r2
 80075b2:	2200      	movs	r2, #0
 80075b4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80075b6:	7dfb      	ldrb	r3, [r7, #23]
 80075b8:	3301      	adds	r3, #1
 80075ba:	75fb      	strb	r3, [r7, #23]
 80075bc:	7dfa      	ldrb	r2, [r7, #23]
 80075be:	79fb      	ldrb	r3, [r7, #7]
 80075c0:	429a      	cmp	r2, r3
 80075c2:	d3d3      	bcc.n	800756c <IntToUnicode+0x18>
  }
}
 80075c4:	bf00      	nop
 80075c6:	bf00      	nop
 80075c8:	371c      	adds	r7, #28
 80075ca:	46bd      	mov	sp, r7
 80075cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d0:	4770      	bx	lr
	...

080075d4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80075d4:	b580      	push	{r7, lr}
 80075d6:	b08a      	sub	sp, #40	; 0x28
 80075d8:	af00      	add	r7, sp, #0
 80075da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80075dc:	f107 0314 	add.w	r3, r7, #20
 80075e0:	2200      	movs	r2, #0
 80075e2:	601a      	str	r2, [r3, #0]
 80075e4:	605a      	str	r2, [r3, #4]
 80075e6:	609a      	str	r2, [r3, #8]
 80075e8:	60da      	str	r2, [r3, #12]
 80075ea:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80075f4:	d13a      	bne.n	800766c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80075f6:	2300      	movs	r3, #0
 80075f8:	613b      	str	r3, [r7, #16]
 80075fa:	4b1e      	ldr	r3, [pc, #120]	; (8007674 <HAL_PCD_MspInit+0xa0>)
 80075fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075fe:	4a1d      	ldr	r2, [pc, #116]	; (8007674 <HAL_PCD_MspInit+0xa0>)
 8007600:	f043 0301 	orr.w	r3, r3, #1
 8007604:	6313      	str	r3, [r2, #48]	; 0x30
 8007606:	4b1b      	ldr	r3, [pc, #108]	; (8007674 <HAL_PCD_MspInit+0xa0>)
 8007608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800760a:	f003 0301 	and.w	r3, r3, #1
 800760e:	613b      	str	r3, [r7, #16]
 8007610:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA8     ------> USB_OTG_FS_SOF
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8007612:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8007616:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007618:	2302      	movs	r3, #2
 800761a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800761c:	2300      	movs	r3, #0
 800761e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007620:	2303      	movs	r3, #3
 8007622:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007624:	230a      	movs	r3, #10
 8007626:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007628:	f107 0314 	add.w	r3, r7, #20
 800762c:	4619      	mov	r1, r3
 800762e:	4812      	ldr	r0, [pc, #72]	; (8007678 <HAL_PCD_MspInit+0xa4>)
 8007630:	f7f9 fb6e 	bl	8000d10 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007634:	4b0f      	ldr	r3, [pc, #60]	; (8007674 <HAL_PCD_MspInit+0xa0>)
 8007636:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007638:	4a0e      	ldr	r2, [pc, #56]	; (8007674 <HAL_PCD_MspInit+0xa0>)
 800763a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800763e:	6353      	str	r3, [r2, #52]	; 0x34
 8007640:	2300      	movs	r3, #0
 8007642:	60fb      	str	r3, [r7, #12]
 8007644:	4b0b      	ldr	r3, [pc, #44]	; (8007674 <HAL_PCD_MspInit+0xa0>)
 8007646:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007648:	4a0a      	ldr	r2, [pc, #40]	; (8007674 <HAL_PCD_MspInit+0xa0>)
 800764a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800764e:	6453      	str	r3, [r2, #68]	; 0x44
 8007650:	4b08      	ldr	r3, [pc, #32]	; (8007674 <HAL_PCD_MspInit+0xa0>)
 8007652:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007654:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007658:	60fb      	str	r3, [r7, #12]
 800765a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800765c:	2200      	movs	r2, #0
 800765e:	2100      	movs	r1, #0
 8007660:	2043      	movs	r0, #67	; 0x43
 8007662:	f7f9 fa8c 	bl	8000b7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007666:	2043      	movs	r0, #67	; 0x43
 8007668:	f7f9 faa5 	bl	8000bb6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800766c:	bf00      	nop
 800766e:	3728      	adds	r7, #40	; 0x28
 8007670:	46bd      	mov	sp, r7
 8007672:	bd80      	pop	{r7, pc}
 8007674:	40023800 	.word	0x40023800
 8007678:	40020000 	.word	0x40020000

0800767c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800767c:	b580      	push	{r7, lr}
 800767e:	b082      	sub	sp, #8
 8007680:	af00      	add	r7, sp, #0
 8007682:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	; 0x4e0
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8007690:	4619      	mov	r1, r3
 8007692:	4610      	mov	r0, r2
 8007694:	f7fe fb0b 	bl	8005cae <USBD_LL_SetupStage>
}
 8007698:	bf00      	nop
 800769a:	3708      	adds	r7, #8
 800769c:	46bd      	mov	sp, r7
 800769e:	bd80      	pop	{r7, pc}

080076a0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80076a0:	b580      	push	{r7, lr}
 80076a2:	b082      	sub	sp, #8
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	6078      	str	r0, [r7, #4]
 80076a8:	460b      	mov	r3, r1
 80076aa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 80076b2:	78fa      	ldrb	r2, [r7, #3]
 80076b4:	6879      	ldr	r1, [r7, #4]
 80076b6:	4613      	mov	r3, r2
 80076b8:	00db      	lsls	r3, r3, #3
 80076ba:	4413      	add	r3, r2
 80076bc:	009b      	lsls	r3, r3, #2
 80076be:	440b      	add	r3, r1
 80076c0:	f503 7318 	add.w	r3, r3, #608	; 0x260
 80076c4:	681a      	ldr	r2, [r3, #0]
 80076c6:	78fb      	ldrb	r3, [r7, #3]
 80076c8:	4619      	mov	r1, r3
 80076ca:	f7fe fb45 	bl	8005d58 <USBD_LL_DataOutStage>
}
 80076ce:	bf00      	nop
 80076d0:	3708      	adds	r7, #8
 80076d2:	46bd      	mov	sp, r7
 80076d4:	bd80      	pop	{r7, pc}

080076d6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80076d6:	b580      	push	{r7, lr}
 80076d8:	b082      	sub	sp, #8
 80076da:	af00      	add	r7, sp, #0
 80076dc:	6078      	str	r0, [r7, #4]
 80076de:	460b      	mov	r3, r1
 80076e0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 80076e8:	78fa      	ldrb	r2, [r7, #3]
 80076ea:	6879      	ldr	r1, [r7, #4]
 80076ec:	4613      	mov	r3, r2
 80076ee:	00db      	lsls	r3, r3, #3
 80076f0:	4413      	add	r3, r2
 80076f2:	009b      	lsls	r3, r3, #2
 80076f4:	440b      	add	r3, r1
 80076f6:	3320      	adds	r3, #32
 80076f8:	681a      	ldr	r2, [r3, #0]
 80076fa:	78fb      	ldrb	r3, [r7, #3]
 80076fc:	4619      	mov	r1, r3
 80076fe:	f7fe fbde 	bl	8005ebe <USBD_LL_DataInStage>
}
 8007702:	bf00      	nop
 8007704:	3708      	adds	r7, #8
 8007706:	46bd      	mov	sp, r7
 8007708:	bd80      	pop	{r7, pc}

0800770a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800770a:	b580      	push	{r7, lr}
 800770c:	b082      	sub	sp, #8
 800770e:	af00      	add	r7, sp, #0
 8007710:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8007718:	4618      	mov	r0, r3
 800771a:	f7fe fd18 	bl	800614e <USBD_LL_SOF>
}
 800771e:	bf00      	nop
 8007720:	3708      	adds	r7, #8
 8007722:	46bd      	mov	sp, r7
 8007724:	bd80      	pop	{r7, pc}

08007726 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007726:	b580      	push	{r7, lr}
 8007728:	b084      	sub	sp, #16
 800772a:	af00      	add	r7, sp, #0
 800772c:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800772e:	2301      	movs	r3, #1
 8007730:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	79db      	ldrb	r3, [r3, #7]
 8007736:	2b02      	cmp	r3, #2
 8007738:	d001      	beq.n	800773e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800773a:	f7f8 ff69 	bl	8000610 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8007744:	7bfa      	ldrb	r2, [r7, #15]
 8007746:	4611      	mov	r1, r2
 8007748:	4618      	mov	r0, r3
 800774a:	f7fe fcbc 	bl	80060c6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8007754:	4618      	mov	r0, r3
 8007756:	f7fe fc64 	bl	8006022 <USBD_LL_Reset>
}
 800775a:	bf00      	nop
 800775c:	3710      	adds	r7, #16
 800775e:	46bd      	mov	sp, r7
 8007760:	bd80      	pop	{r7, pc}
	...

08007764 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007764:	b580      	push	{r7, lr}
 8007766:	b082      	sub	sp, #8
 8007768:	af00      	add	r7, sp, #0
 800776a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8007772:	4618      	mov	r0, r3
 8007774:	f7fe fcb7 	bl	80060e6 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	687a      	ldr	r2, [r7, #4]
 8007784:	6812      	ldr	r2, [r2, #0]
 8007786:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800778a:	f043 0301 	orr.w	r3, r3, #1
 800778e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	7adb      	ldrb	r3, [r3, #11]
 8007794:	2b00      	cmp	r3, #0
 8007796:	d005      	beq.n	80077a4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007798:	4b04      	ldr	r3, [pc, #16]	; (80077ac <HAL_PCD_SuspendCallback+0x48>)
 800779a:	691b      	ldr	r3, [r3, #16]
 800779c:	4a03      	ldr	r2, [pc, #12]	; (80077ac <HAL_PCD_SuspendCallback+0x48>)
 800779e:	f043 0306 	orr.w	r3, r3, #6
 80077a2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80077a4:	bf00      	nop
 80077a6:	3708      	adds	r7, #8
 80077a8:	46bd      	mov	sp, r7
 80077aa:	bd80      	pop	{r7, pc}
 80077ac:	e000ed00 	.word	0xe000ed00

080077b0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80077b0:	b580      	push	{r7, lr}
 80077b2:	b082      	sub	sp, #8
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 80077be:	4618      	mov	r0, r3
 80077c0:	f7fe fcad 	bl	800611e <USBD_LL_Resume>
}
 80077c4:	bf00      	nop
 80077c6:	3708      	adds	r7, #8
 80077c8:	46bd      	mov	sp, r7
 80077ca:	bd80      	pop	{r7, pc}

080077cc <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80077cc:	b580      	push	{r7, lr}
 80077ce:	b082      	sub	sp, #8
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	6078      	str	r0, [r7, #4]
 80077d4:	460b      	mov	r3, r1
 80077d6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 80077de:	78fa      	ldrb	r2, [r7, #3]
 80077e0:	4611      	mov	r1, r2
 80077e2:	4618      	mov	r0, r3
 80077e4:	f7fe fd05 	bl	80061f2 <USBD_LL_IsoOUTIncomplete>
}
 80077e8:	bf00      	nop
 80077ea:	3708      	adds	r7, #8
 80077ec:	46bd      	mov	sp, r7
 80077ee:	bd80      	pop	{r7, pc}

080077f0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80077f0:	b580      	push	{r7, lr}
 80077f2:	b082      	sub	sp, #8
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	6078      	str	r0, [r7, #4]
 80077f8:	460b      	mov	r3, r1
 80077fa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8007802:	78fa      	ldrb	r2, [r7, #3]
 8007804:	4611      	mov	r1, r2
 8007806:	4618      	mov	r0, r3
 8007808:	f7fe fcc1 	bl	800618e <USBD_LL_IsoINIncomplete>
}
 800780c:	bf00      	nop
 800780e:	3708      	adds	r7, #8
 8007810:	46bd      	mov	sp, r7
 8007812:	bd80      	pop	{r7, pc}

08007814 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007814:	b580      	push	{r7, lr}
 8007816:	b082      	sub	sp, #8
 8007818:	af00      	add	r7, sp, #0
 800781a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8007822:	4618      	mov	r0, r3
 8007824:	f7fe fd17 	bl	8006256 <USBD_LL_DevConnected>
}
 8007828:	bf00      	nop
 800782a:	3708      	adds	r7, #8
 800782c:	46bd      	mov	sp, r7
 800782e:	bd80      	pop	{r7, pc}

08007830 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007830:	b580      	push	{r7, lr}
 8007832:	b082      	sub	sp, #8
 8007834:	af00      	add	r7, sp, #0
 8007836:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800783e:	4618      	mov	r0, r3
 8007840:	f7fe fd14 	bl	800626c <USBD_LL_DevDisconnected>
}
 8007844:	bf00      	nop
 8007846:	3708      	adds	r7, #8
 8007848:	46bd      	mov	sp, r7
 800784a:	bd80      	pop	{r7, pc}

0800784c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800784c:	b580      	push	{r7, lr}
 800784e:	b082      	sub	sp, #8
 8007850:	af00      	add	r7, sp, #0
 8007852:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	781b      	ldrb	r3, [r3, #0]
 8007858:	2b00      	cmp	r3, #0
 800785a:	d13c      	bne.n	80078d6 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800785c:	4a20      	ldr	r2, [pc, #128]	; (80078e0 <USBD_LL_Init+0x94>)
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	f8c2 34e0 	str.w	r3, [r2, #1248]	; 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	4a1e      	ldr	r2, [pc, #120]	; (80078e0 <USBD_LL_Init+0x94>)
 8007868:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800786c:	4b1c      	ldr	r3, [pc, #112]	; (80078e0 <USBD_LL_Init+0x94>)
 800786e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007872:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8007874:	4b1a      	ldr	r3, [pc, #104]	; (80078e0 <USBD_LL_Init+0x94>)
 8007876:	2204      	movs	r2, #4
 8007878:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800787a:	4b19      	ldr	r3, [pc, #100]	; (80078e0 <USBD_LL_Init+0x94>)
 800787c:	2202      	movs	r2, #2
 800787e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007880:	4b17      	ldr	r3, [pc, #92]	; (80078e0 <USBD_LL_Init+0x94>)
 8007882:	2200      	movs	r2, #0
 8007884:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007886:	4b16      	ldr	r3, [pc, #88]	; (80078e0 <USBD_LL_Init+0x94>)
 8007888:	2202      	movs	r2, #2
 800788a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800788c:	4b14      	ldr	r3, [pc, #80]	; (80078e0 <USBD_LL_Init+0x94>)
 800788e:	2201      	movs	r2, #1
 8007890:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8007892:	4b13      	ldr	r3, [pc, #76]	; (80078e0 <USBD_LL_Init+0x94>)
 8007894:	2200      	movs	r2, #0
 8007896:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007898:	4b11      	ldr	r3, [pc, #68]	; (80078e0 <USBD_LL_Init+0x94>)
 800789a:	2200      	movs	r2, #0
 800789c:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800789e:	4b10      	ldr	r3, [pc, #64]	; (80078e0 <USBD_LL_Init+0x94>)
 80078a0:	2200      	movs	r2, #0
 80078a2:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80078a4:	4b0e      	ldr	r3, [pc, #56]	; (80078e0 <USBD_LL_Init+0x94>)
 80078a6:	2200      	movs	r2, #0
 80078a8:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80078aa:	480d      	ldr	r0, [pc, #52]	; (80078e0 <USBD_LL_Init+0x94>)
 80078ac:	f7f9 fbb4 	bl	8001018 <HAL_PCD_Init>
 80078b0:	4603      	mov	r3, r0
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d001      	beq.n	80078ba <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80078b6:	f7f8 feab 	bl	8000610 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80078ba:	2180      	movs	r1, #128	; 0x80
 80078bc:	4808      	ldr	r0, [pc, #32]	; (80078e0 <USBD_LL_Init+0x94>)
 80078be:	f7fa fdde 	bl	800247e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80078c2:	2240      	movs	r2, #64	; 0x40
 80078c4:	2100      	movs	r1, #0
 80078c6:	4806      	ldr	r0, [pc, #24]	; (80078e0 <USBD_LL_Init+0x94>)
 80078c8:	f7fa fd92 	bl	80023f0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80078cc:	2280      	movs	r2, #128	; 0x80
 80078ce:	2101      	movs	r1, #1
 80078d0:	4803      	ldr	r0, [pc, #12]	; (80078e0 <USBD_LL_Init+0x94>)
 80078d2:	f7fa fd8d 	bl	80023f0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80078d6:	2300      	movs	r3, #0
}
 80078d8:	4618      	mov	r0, r3
 80078da:	3708      	adds	r7, #8
 80078dc:	46bd      	mov	sp, r7
 80078de:	bd80      	pop	{r7, pc}
 80078e0:	20001a54 	.word	0x20001a54

080078e4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80078e4:	b580      	push	{r7, lr}
 80078e6:	b084      	sub	sp, #16
 80078e8:	af00      	add	r7, sp, #0
 80078ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80078ec:	2300      	movs	r3, #0
 80078ee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80078f0:	2300      	movs	r3, #0
 80078f2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80078fa:	4618      	mov	r0, r3
 80078fc:	f7f9 fc9b 	bl	8001236 <HAL_PCD_Start>
 8007900:	4603      	mov	r3, r0
 8007902:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007904:	7bfb      	ldrb	r3, [r7, #15]
 8007906:	4618      	mov	r0, r3
 8007908:	f000 f942 	bl	8007b90 <USBD_Get_USB_Status>
 800790c:	4603      	mov	r3, r0
 800790e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007910:	7bbb      	ldrb	r3, [r7, #14]
}
 8007912:	4618      	mov	r0, r3
 8007914:	3710      	adds	r7, #16
 8007916:	46bd      	mov	sp, r7
 8007918:	bd80      	pop	{r7, pc}

0800791a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800791a:	b580      	push	{r7, lr}
 800791c:	b084      	sub	sp, #16
 800791e:	af00      	add	r7, sp, #0
 8007920:	6078      	str	r0, [r7, #4]
 8007922:	4608      	mov	r0, r1
 8007924:	4611      	mov	r1, r2
 8007926:	461a      	mov	r2, r3
 8007928:	4603      	mov	r3, r0
 800792a:	70fb      	strb	r3, [r7, #3]
 800792c:	460b      	mov	r3, r1
 800792e:	70bb      	strb	r3, [r7, #2]
 8007930:	4613      	mov	r3, r2
 8007932:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007934:	2300      	movs	r3, #0
 8007936:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007938:	2300      	movs	r3, #0
 800793a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007942:	78bb      	ldrb	r3, [r7, #2]
 8007944:	883a      	ldrh	r2, [r7, #0]
 8007946:	78f9      	ldrb	r1, [r7, #3]
 8007948:	f7fa f96f 	bl	8001c2a <HAL_PCD_EP_Open>
 800794c:	4603      	mov	r3, r0
 800794e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007950:	7bfb      	ldrb	r3, [r7, #15]
 8007952:	4618      	mov	r0, r3
 8007954:	f000 f91c 	bl	8007b90 <USBD_Get_USB_Status>
 8007958:	4603      	mov	r3, r0
 800795a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800795c:	7bbb      	ldrb	r3, [r7, #14]
}
 800795e:	4618      	mov	r0, r3
 8007960:	3710      	adds	r7, #16
 8007962:	46bd      	mov	sp, r7
 8007964:	bd80      	pop	{r7, pc}

08007966 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007966:	b580      	push	{r7, lr}
 8007968:	b084      	sub	sp, #16
 800796a:	af00      	add	r7, sp, #0
 800796c:	6078      	str	r0, [r7, #4]
 800796e:	460b      	mov	r3, r1
 8007970:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007972:	2300      	movs	r3, #0
 8007974:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007976:	2300      	movs	r3, #0
 8007978:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007980:	78fa      	ldrb	r2, [r7, #3]
 8007982:	4611      	mov	r1, r2
 8007984:	4618      	mov	r0, r3
 8007986:	f7fa f9b8 	bl	8001cfa <HAL_PCD_EP_Close>
 800798a:	4603      	mov	r3, r0
 800798c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800798e:	7bfb      	ldrb	r3, [r7, #15]
 8007990:	4618      	mov	r0, r3
 8007992:	f000 f8fd 	bl	8007b90 <USBD_Get_USB_Status>
 8007996:	4603      	mov	r3, r0
 8007998:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800799a:	7bbb      	ldrb	r3, [r7, #14]
}
 800799c:	4618      	mov	r0, r3
 800799e:	3710      	adds	r7, #16
 80079a0:	46bd      	mov	sp, r7
 80079a2:	bd80      	pop	{r7, pc}

080079a4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80079a4:	b580      	push	{r7, lr}
 80079a6:	b084      	sub	sp, #16
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	6078      	str	r0, [r7, #4]
 80079ac:	460b      	mov	r3, r1
 80079ae:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80079b0:	2300      	movs	r3, #0
 80079b2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80079b4:	2300      	movs	r3, #0
 80079b6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80079be:	78fa      	ldrb	r2, [r7, #3]
 80079c0:	4611      	mov	r1, r2
 80079c2:	4618      	mov	r0, r3
 80079c4:	f7fa fa70 	bl	8001ea8 <HAL_PCD_EP_SetStall>
 80079c8:	4603      	mov	r3, r0
 80079ca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80079cc:	7bfb      	ldrb	r3, [r7, #15]
 80079ce:	4618      	mov	r0, r3
 80079d0:	f000 f8de 	bl	8007b90 <USBD_Get_USB_Status>
 80079d4:	4603      	mov	r3, r0
 80079d6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80079d8:	7bbb      	ldrb	r3, [r7, #14]
}
 80079da:	4618      	mov	r0, r3
 80079dc:	3710      	adds	r7, #16
 80079de:	46bd      	mov	sp, r7
 80079e0:	bd80      	pop	{r7, pc}

080079e2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80079e2:	b580      	push	{r7, lr}
 80079e4:	b084      	sub	sp, #16
 80079e6:	af00      	add	r7, sp, #0
 80079e8:	6078      	str	r0, [r7, #4]
 80079ea:	460b      	mov	r3, r1
 80079ec:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80079ee:	2300      	movs	r3, #0
 80079f0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80079f2:	2300      	movs	r3, #0
 80079f4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80079fc:	78fa      	ldrb	r2, [r7, #3]
 80079fe:	4611      	mov	r1, r2
 8007a00:	4618      	mov	r0, r3
 8007a02:	f7fa fab4 	bl	8001f6e <HAL_PCD_EP_ClrStall>
 8007a06:	4603      	mov	r3, r0
 8007a08:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007a0a:	7bfb      	ldrb	r3, [r7, #15]
 8007a0c:	4618      	mov	r0, r3
 8007a0e:	f000 f8bf 	bl	8007b90 <USBD_Get_USB_Status>
 8007a12:	4603      	mov	r3, r0
 8007a14:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007a16:	7bbb      	ldrb	r3, [r7, #14]
}
 8007a18:	4618      	mov	r0, r3
 8007a1a:	3710      	adds	r7, #16
 8007a1c:	46bd      	mov	sp, r7
 8007a1e:	bd80      	pop	{r7, pc}

08007a20 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007a20:	b480      	push	{r7}
 8007a22:	b085      	sub	sp, #20
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	6078      	str	r0, [r7, #4]
 8007a28:	460b      	mov	r3, r1
 8007a2a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007a32:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007a34:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	da0b      	bge.n	8007a54 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007a3c:	78fb      	ldrb	r3, [r7, #3]
 8007a3e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007a42:	68f9      	ldr	r1, [r7, #12]
 8007a44:	4613      	mov	r3, r2
 8007a46:	00db      	lsls	r3, r3, #3
 8007a48:	4413      	add	r3, r2
 8007a4a:	009b      	lsls	r3, r3, #2
 8007a4c:	440b      	add	r3, r1
 8007a4e:	3316      	adds	r3, #22
 8007a50:	781b      	ldrb	r3, [r3, #0]
 8007a52:	e00b      	b.n	8007a6c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007a54:	78fb      	ldrb	r3, [r7, #3]
 8007a56:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007a5a:	68f9      	ldr	r1, [r7, #12]
 8007a5c:	4613      	mov	r3, r2
 8007a5e:	00db      	lsls	r3, r3, #3
 8007a60:	4413      	add	r3, r2
 8007a62:	009b      	lsls	r3, r3, #2
 8007a64:	440b      	add	r3, r1
 8007a66:	f203 2356 	addw	r3, r3, #598	; 0x256
 8007a6a:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007a6c:	4618      	mov	r0, r3
 8007a6e:	3714      	adds	r7, #20
 8007a70:	46bd      	mov	sp, r7
 8007a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a76:	4770      	bx	lr

08007a78 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007a78:	b580      	push	{r7, lr}
 8007a7a:	b084      	sub	sp, #16
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	6078      	str	r0, [r7, #4]
 8007a80:	460b      	mov	r3, r1
 8007a82:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007a84:	2300      	movs	r3, #0
 8007a86:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007a88:	2300      	movs	r3, #0
 8007a8a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007a92:	78fa      	ldrb	r2, [r7, #3]
 8007a94:	4611      	mov	r1, r2
 8007a96:	4618      	mov	r0, r3
 8007a98:	f7fa f8a3 	bl	8001be2 <HAL_PCD_SetAddress>
 8007a9c:	4603      	mov	r3, r0
 8007a9e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007aa0:	7bfb      	ldrb	r3, [r7, #15]
 8007aa2:	4618      	mov	r0, r3
 8007aa4:	f000 f874 	bl	8007b90 <USBD_Get_USB_Status>
 8007aa8:	4603      	mov	r3, r0
 8007aaa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007aac:	7bbb      	ldrb	r3, [r7, #14]
}
 8007aae:	4618      	mov	r0, r3
 8007ab0:	3710      	adds	r7, #16
 8007ab2:	46bd      	mov	sp, r7
 8007ab4:	bd80      	pop	{r7, pc}

08007ab6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007ab6:	b580      	push	{r7, lr}
 8007ab8:	b086      	sub	sp, #24
 8007aba:	af00      	add	r7, sp, #0
 8007abc:	60f8      	str	r0, [r7, #12]
 8007abe:	607a      	str	r2, [r7, #4]
 8007ac0:	603b      	str	r3, [r7, #0]
 8007ac2:	460b      	mov	r3, r1
 8007ac4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007ac6:	2300      	movs	r3, #0
 8007ac8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007aca:	2300      	movs	r3, #0
 8007acc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007ad4:	7af9      	ldrb	r1, [r7, #11]
 8007ad6:	683b      	ldr	r3, [r7, #0]
 8007ad8:	687a      	ldr	r2, [r7, #4]
 8007ada:	f7fa f9ab 	bl	8001e34 <HAL_PCD_EP_Transmit>
 8007ade:	4603      	mov	r3, r0
 8007ae0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007ae2:	7dfb      	ldrb	r3, [r7, #23]
 8007ae4:	4618      	mov	r0, r3
 8007ae6:	f000 f853 	bl	8007b90 <USBD_Get_USB_Status>
 8007aea:	4603      	mov	r3, r0
 8007aec:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007aee:	7dbb      	ldrb	r3, [r7, #22]
}
 8007af0:	4618      	mov	r0, r3
 8007af2:	3718      	adds	r7, #24
 8007af4:	46bd      	mov	sp, r7
 8007af6:	bd80      	pop	{r7, pc}

08007af8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007af8:	b580      	push	{r7, lr}
 8007afa:	b086      	sub	sp, #24
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	60f8      	str	r0, [r7, #12]
 8007b00:	607a      	str	r2, [r7, #4]
 8007b02:	603b      	str	r3, [r7, #0]
 8007b04:	460b      	mov	r3, r1
 8007b06:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007b08:	2300      	movs	r3, #0
 8007b0a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007b0c:	2300      	movs	r3, #0
 8007b0e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007b16:	7af9      	ldrb	r1, [r7, #11]
 8007b18:	683b      	ldr	r3, [r7, #0]
 8007b1a:	687a      	ldr	r2, [r7, #4]
 8007b1c:	f7fa f937 	bl	8001d8e <HAL_PCD_EP_Receive>
 8007b20:	4603      	mov	r3, r0
 8007b22:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007b24:	7dfb      	ldrb	r3, [r7, #23]
 8007b26:	4618      	mov	r0, r3
 8007b28:	f000 f832 	bl	8007b90 <USBD_Get_USB_Status>
 8007b2c:	4603      	mov	r3, r0
 8007b2e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007b30:	7dbb      	ldrb	r3, [r7, #22]
}
 8007b32:	4618      	mov	r0, r3
 8007b34:	3718      	adds	r7, #24
 8007b36:	46bd      	mov	sp, r7
 8007b38:	bd80      	pop	{r7, pc}

08007b3a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007b3a:	b580      	push	{r7, lr}
 8007b3c:	b082      	sub	sp, #8
 8007b3e:	af00      	add	r7, sp, #0
 8007b40:	6078      	str	r0, [r7, #4]
 8007b42:	460b      	mov	r3, r1
 8007b44:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007b4c:	78fa      	ldrb	r2, [r7, #3]
 8007b4e:	4611      	mov	r1, r2
 8007b50:	4618      	mov	r0, r3
 8007b52:	f7fa f957 	bl	8001e04 <HAL_PCD_EP_GetRxCount>
 8007b56:	4603      	mov	r3, r0
}
 8007b58:	4618      	mov	r0, r3
 8007b5a:	3708      	adds	r7, #8
 8007b5c:	46bd      	mov	sp, r7
 8007b5e:	bd80      	pop	{r7, pc}

08007b60 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007b60:	b480      	push	{r7}
 8007b62:	b083      	sub	sp, #12
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007b68:	4b03      	ldr	r3, [pc, #12]	; (8007b78 <USBD_static_malloc+0x18>)
}
 8007b6a:	4618      	mov	r0, r3
 8007b6c:	370c      	adds	r7, #12
 8007b6e:	46bd      	mov	sp, r7
 8007b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b74:	4770      	bx	lr
 8007b76:	bf00      	nop
 8007b78:	20001f38 	.word	0x20001f38

08007b7c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007b7c:	b480      	push	{r7}
 8007b7e:	b083      	sub	sp, #12
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	6078      	str	r0, [r7, #4]

}
 8007b84:	bf00      	nop
 8007b86:	370c      	adds	r7, #12
 8007b88:	46bd      	mov	sp, r7
 8007b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b8e:	4770      	bx	lr

08007b90 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007b90:	b480      	push	{r7}
 8007b92:	b085      	sub	sp, #20
 8007b94:	af00      	add	r7, sp, #0
 8007b96:	4603      	mov	r3, r0
 8007b98:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007b9a:	2300      	movs	r3, #0
 8007b9c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007b9e:	79fb      	ldrb	r3, [r7, #7]
 8007ba0:	2b03      	cmp	r3, #3
 8007ba2:	d817      	bhi.n	8007bd4 <USBD_Get_USB_Status+0x44>
 8007ba4:	a201      	add	r2, pc, #4	; (adr r2, 8007bac <USBD_Get_USB_Status+0x1c>)
 8007ba6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007baa:	bf00      	nop
 8007bac:	08007bbd 	.word	0x08007bbd
 8007bb0:	08007bc3 	.word	0x08007bc3
 8007bb4:	08007bc9 	.word	0x08007bc9
 8007bb8:	08007bcf 	.word	0x08007bcf
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007bbc:	2300      	movs	r3, #0
 8007bbe:	73fb      	strb	r3, [r7, #15]
    break;
 8007bc0:	e00b      	b.n	8007bda <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007bc2:	2303      	movs	r3, #3
 8007bc4:	73fb      	strb	r3, [r7, #15]
    break;
 8007bc6:	e008      	b.n	8007bda <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007bc8:	2301      	movs	r3, #1
 8007bca:	73fb      	strb	r3, [r7, #15]
    break;
 8007bcc:	e005      	b.n	8007bda <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007bce:	2303      	movs	r3, #3
 8007bd0:	73fb      	strb	r3, [r7, #15]
    break;
 8007bd2:	e002      	b.n	8007bda <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007bd4:	2303      	movs	r3, #3
 8007bd6:	73fb      	strb	r3, [r7, #15]
    break;
 8007bd8:	bf00      	nop
  }
  return usb_status;
 8007bda:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bdc:	4618      	mov	r0, r3
 8007bde:	3714      	adds	r7, #20
 8007be0:	46bd      	mov	sp, r7
 8007be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be6:	4770      	bx	lr

08007be8 <memset>:
 8007be8:	4402      	add	r2, r0
 8007bea:	4603      	mov	r3, r0
 8007bec:	4293      	cmp	r3, r2
 8007bee:	d100      	bne.n	8007bf2 <memset+0xa>
 8007bf0:	4770      	bx	lr
 8007bf2:	f803 1b01 	strb.w	r1, [r3], #1
 8007bf6:	e7f9      	b.n	8007bec <memset+0x4>

08007bf8 <__libc_init_array>:
 8007bf8:	b570      	push	{r4, r5, r6, lr}
 8007bfa:	4d0d      	ldr	r5, [pc, #52]	; (8007c30 <__libc_init_array+0x38>)
 8007bfc:	4c0d      	ldr	r4, [pc, #52]	; (8007c34 <__libc_init_array+0x3c>)
 8007bfe:	1b64      	subs	r4, r4, r5
 8007c00:	10a4      	asrs	r4, r4, #2
 8007c02:	2600      	movs	r6, #0
 8007c04:	42a6      	cmp	r6, r4
 8007c06:	d109      	bne.n	8007c1c <__libc_init_array+0x24>
 8007c08:	4d0b      	ldr	r5, [pc, #44]	; (8007c38 <__libc_init_array+0x40>)
 8007c0a:	4c0c      	ldr	r4, [pc, #48]	; (8007c3c <__libc_init_array+0x44>)
 8007c0c:	f000 f818 	bl	8007c40 <_init>
 8007c10:	1b64      	subs	r4, r4, r5
 8007c12:	10a4      	asrs	r4, r4, #2
 8007c14:	2600      	movs	r6, #0
 8007c16:	42a6      	cmp	r6, r4
 8007c18:	d105      	bne.n	8007c26 <__libc_init_array+0x2e>
 8007c1a:	bd70      	pop	{r4, r5, r6, pc}
 8007c1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c20:	4798      	blx	r3
 8007c22:	3601      	adds	r6, #1
 8007c24:	e7ee      	b.n	8007c04 <__libc_init_array+0xc>
 8007c26:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c2a:	4798      	blx	r3
 8007c2c:	3601      	adds	r6, #1
 8007c2e:	e7f2      	b.n	8007c16 <__libc_init_array+0x1e>
 8007c30:	08007cc0 	.word	0x08007cc0
 8007c34:	08007cc0 	.word	0x08007cc0
 8007c38:	08007cc0 	.word	0x08007cc0
 8007c3c:	08007cc4 	.word	0x08007cc4

08007c40 <_init>:
 8007c40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c42:	bf00      	nop
 8007c44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c46:	bc08      	pop	{r3}
 8007c48:	469e      	mov	lr, r3
 8007c4a:	4770      	bx	lr

08007c4c <_fini>:
 8007c4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c4e:	bf00      	nop
 8007c50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c52:	bc08      	pop	{r3}
 8007c54:	469e      	mov	lr, r3
 8007c56:	4770      	bx	lr
