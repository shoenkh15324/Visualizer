
visualizer_fw.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009708  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  080098a8  080098a8  000198a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009958  08009958  00020154  2**0
                  CONTENTS
  4 .ARM          00000008  08009958  08009958  00019958  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009960  08009960  00020154  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009960  08009960  00019960  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009964  08009964  00019964  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000154  20000000  08009968  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002344  20000154  08009abc  00020154  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002498  08009abc  00022498  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020154  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020184  2**0
                  CONTENTS, READONLY
 13 .debug_info   000133bd  00000000  00000000  000201c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000039b2  00000000  00000000  00033584  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f68  00000000  00000000  00036f38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b79  00000000  00000000  00037ea0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019b18  00000000  00000000  00038a19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000175ec  00000000  00000000  00052531  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008a3ee  00000000  00000000  00069b1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000418c  00000000  00000000  000f3f0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000081  00000000  00000000  000f8098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000154 	.word	0x20000154
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009890 	.word	0x08009890

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000158 	.word	0x20000158
 80001dc:	08009890 	.word	0x08009890

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b082      	sub	sp, #8
 8000580:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000582:	2300      	movs	r3, #0
 8000584:	607b      	str	r3, [r7, #4]
 8000586:	4b0c      	ldr	r3, [pc, #48]	; (80005b8 <MX_DMA_Init+0x3c>)
 8000588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800058a:	4a0b      	ldr	r2, [pc, #44]	; (80005b8 <MX_DMA_Init+0x3c>)
 800058c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000590:	6313      	str	r3, [r2, #48]	; 0x30
 8000592:	4b09      	ldr	r3, [pc, #36]	; (80005b8 <MX_DMA_Init+0x3c>)
 8000594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000596:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800059a:	607b      	str	r3, [r7, #4]
 800059c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800059e:	2200      	movs	r2, #0
 80005a0:	2100      	movs	r1, #0
 80005a2:	203a      	movs	r0, #58	; 0x3a
 80005a4:	f000 fdd7 	bl	8001156 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80005a8:	203a      	movs	r0, #58	; 0x3a
 80005aa:	f000 fdf0 	bl	800118e <HAL_NVIC_EnableIRQ>

}
 80005ae:	bf00      	nop
 80005b0:	3708      	adds	r7, #8
 80005b2:	46bd      	mov	sp, r7
 80005b4:	bd80      	pop	{r7, pc}
 80005b6:	bf00      	nop
 80005b8:	40023800 	.word	0x40023800

080005bc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005bc:	b480      	push	{r7}
 80005be:	b083      	sub	sp, #12
 80005c0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005c2:	2300      	movs	r3, #0
 80005c4:	607b      	str	r3, [r7, #4]
 80005c6:	4b10      	ldr	r3, [pc, #64]	; (8000608 <MX_GPIO_Init+0x4c>)
 80005c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ca:	4a0f      	ldr	r2, [pc, #60]	; (8000608 <MX_GPIO_Init+0x4c>)
 80005cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005d0:	6313      	str	r3, [r2, #48]	; 0x30
 80005d2:	4b0d      	ldr	r3, [pc, #52]	; (8000608 <MX_GPIO_Init+0x4c>)
 80005d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005da:	607b      	str	r3, [r7, #4]
 80005dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005de:	2300      	movs	r3, #0
 80005e0:	603b      	str	r3, [r7, #0]
 80005e2:	4b09      	ldr	r3, [pc, #36]	; (8000608 <MX_GPIO_Init+0x4c>)
 80005e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e6:	4a08      	ldr	r2, [pc, #32]	; (8000608 <MX_GPIO_Init+0x4c>)
 80005e8:	f043 0301 	orr.w	r3, r3, #1
 80005ec:	6313      	str	r3, [r2, #48]	; 0x30
 80005ee:	4b06      	ldr	r3, [pc, #24]	; (8000608 <MX_GPIO_Init+0x4c>)
 80005f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f2:	f003 0301 	and.w	r3, r3, #1
 80005f6:	603b      	str	r3, [r7, #0]
 80005f8:	683b      	ldr	r3, [r7, #0]

}
 80005fa:	bf00      	nop
 80005fc:	370c      	adds	r7, #12
 80005fe:	46bd      	mov	sp, r7
 8000600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000604:	4770      	bx	lr
 8000606:	bf00      	nop
 8000608:	40023800 	.word	0x40023800

0800060c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b082      	sub	sp, #8
 8000610:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000612:	f000 fc2f 	bl	8000e74 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000616:	f000 f821 	bl	800065c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800061a:	f7ff ffcf 	bl	80005bc <MX_GPIO_Init>
  MX_DMA_Init();
 800061e:	f7ff ffad 	bl	800057c <MX_DMA_Init>
  MX_USB_DEVICE_Init();
 8000622:	f007 fef9 	bl	8008418 <MX_USB_DEVICE_Init>
  MX_USART1_UART_Init();
 8000626:	f000 f93f 	bl	80008a8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  uartOpen(_DEF_UART2, 115200);
 800062a:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 800062e:	2001      	movs	r0, #1
 8000630:	f000 fb14 	bl	8000c5c <uartOpen>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  	if(uartAvailable(_DEF_UART2) > 0)
 8000634:	2001      	movs	r0, #1
 8000636:	f000 fb6b 	bl	8000d10 <uartAvailable>
 800063a:	4603      	mov	r3, r0
 800063c:	2b00      	cmp	r3, #0
 800063e:	d0f9      	beq.n	8000634 <main+0x28>
  		{
    		uint8_t rx_data;
    		rx_data = uartRead(_DEF_UART2);
 8000640:	2001      	movs	r0, #1
 8000642:	f000 fb95 	bl	8000d70 <uartRead>
 8000646:	4603      	mov	r3, r0
 8000648:	71fb      	strb	r3, [r7, #7]
    		uartPrintf(_DEF_UART2, "UART Rx : %c %X\n", rx_data, rx_data);
 800064a:	79fa      	ldrb	r2, [r7, #7]
 800064c:	79fb      	ldrb	r3, [r7, #7]
 800064e:	4902      	ldr	r1, [pc, #8]	; (8000658 <main+0x4c>)
 8000650:	2001      	movs	r0, #1
 8000652:	f000 fbd7 	bl	8000e04 <uartPrintf>
  	if(uartAvailable(_DEF_UART2) > 0)
 8000656:	e7ed      	b.n	8000634 <main+0x28>
 8000658:	080098a8 	.word	0x080098a8

0800065c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b094      	sub	sp, #80	; 0x50
 8000660:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000662:	f107 0320 	add.w	r3, r7, #32
 8000666:	2230      	movs	r2, #48	; 0x30
 8000668:	2100      	movs	r1, #0
 800066a:	4618      	mov	r0, r3
 800066c:	f008 fc8c 	bl	8008f88 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000670:	f107 030c 	add.w	r3, r7, #12
 8000674:	2200      	movs	r2, #0
 8000676:	601a      	str	r2, [r3, #0]
 8000678:	605a      	str	r2, [r3, #4]
 800067a:	609a      	str	r2, [r3, #8]
 800067c:	60da      	str	r2, [r3, #12]
 800067e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000680:	2300      	movs	r3, #0
 8000682:	60bb      	str	r3, [r7, #8]
 8000684:	4b27      	ldr	r3, [pc, #156]	; (8000724 <SystemClock_Config+0xc8>)
 8000686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000688:	4a26      	ldr	r2, [pc, #152]	; (8000724 <SystemClock_Config+0xc8>)
 800068a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800068e:	6413      	str	r3, [r2, #64]	; 0x40
 8000690:	4b24      	ldr	r3, [pc, #144]	; (8000724 <SystemClock_Config+0xc8>)
 8000692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000694:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000698:	60bb      	str	r3, [r7, #8]
 800069a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800069c:	2300      	movs	r3, #0
 800069e:	607b      	str	r3, [r7, #4]
 80006a0:	4b21      	ldr	r3, [pc, #132]	; (8000728 <SystemClock_Config+0xcc>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	4a20      	ldr	r2, [pc, #128]	; (8000728 <SystemClock_Config+0xcc>)
 80006a6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006aa:	6013      	str	r3, [r2, #0]
 80006ac:	4b1e      	ldr	r3, [pc, #120]	; (8000728 <SystemClock_Config+0xcc>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006b4:	607b      	str	r3, [r7, #4]
 80006b6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006b8:	2301      	movs	r3, #1
 80006ba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006bc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006c0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006c2:	2302      	movs	r3, #2
 80006c4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006c6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80006cc:	2319      	movs	r3, #25
 80006ce:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 80006d0:	23c0      	movs	r3, #192	; 0xc0
 80006d2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006d4:	2302      	movs	r3, #2
 80006d6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006d8:	2304      	movs	r3, #4
 80006da:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006dc:	f107 0320 	add.w	r3, r7, #32
 80006e0:	4618      	mov	r0, r3
 80006e2:	f002 fd45 	bl	8003170 <HAL_RCC_OscConfig>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d001      	beq.n	80006f0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006ec:	f000 f81e 	bl	800072c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006f0:	230f      	movs	r3, #15
 80006f2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006f4:	2302      	movs	r3, #2
 80006f6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006f8:	2300      	movs	r3, #0
 80006fa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000700:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000702:	2300      	movs	r3, #0
 8000704:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000706:	f107 030c 	add.w	r3, r7, #12
 800070a:	2103      	movs	r1, #3
 800070c:	4618      	mov	r0, r3
 800070e:	f002 ffa7 	bl	8003660 <HAL_RCC_ClockConfig>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d001      	beq.n	800071c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000718:	f000 f808 	bl	800072c <Error_Handler>
  }
}
 800071c:	bf00      	nop
 800071e:	3750      	adds	r7, #80	; 0x50
 8000720:	46bd      	mov	sp, r7
 8000722:	bd80      	pop	{r7, pc}
 8000724:	40023800 	.word	0x40023800
 8000728:	40007000 	.word	0x40007000

0800072c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800072c:	b480      	push	{r7}
 800072e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000730:	b672      	cpsid	i
}
 8000732:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000734:	e7fe      	b.n	8000734 <Error_Handler+0x8>
	...

08000738 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000738:	b480      	push	{r7}
 800073a:	b083      	sub	sp, #12
 800073c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800073e:	2300      	movs	r3, #0
 8000740:	607b      	str	r3, [r7, #4]
 8000742:	4b10      	ldr	r3, [pc, #64]	; (8000784 <HAL_MspInit+0x4c>)
 8000744:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000746:	4a0f      	ldr	r2, [pc, #60]	; (8000784 <HAL_MspInit+0x4c>)
 8000748:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800074c:	6453      	str	r3, [r2, #68]	; 0x44
 800074e:	4b0d      	ldr	r3, [pc, #52]	; (8000784 <HAL_MspInit+0x4c>)
 8000750:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000752:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000756:	607b      	str	r3, [r7, #4]
 8000758:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800075a:	2300      	movs	r3, #0
 800075c:	603b      	str	r3, [r7, #0]
 800075e:	4b09      	ldr	r3, [pc, #36]	; (8000784 <HAL_MspInit+0x4c>)
 8000760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000762:	4a08      	ldr	r2, [pc, #32]	; (8000784 <HAL_MspInit+0x4c>)
 8000764:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000768:	6413      	str	r3, [r2, #64]	; 0x40
 800076a:	4b06      	ldr	r3, [pc, #24]	; (8000784 <HAL_MspInit+0x4c>)
 800076c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800076e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000772:	603b      	str	r3, [r7, #0]
 8000774:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000776:	bf00      	nop
 8000778:	370c      	adds	r7, #12
 800077a:	46bd      	mov	sp, r7
 800077c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000780:	4770      	bx	lr
 8000782:	bf00      	nop
 8000784:	40023800 	.word	0x40023800

08000788 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000788:	b480      	push	{r7}
 800078a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800078c:	e7fe      	b.n	800078c <NMI_Handler+0x4>

0800078e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800078e:	b480      	push	{r7}
 8000790:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000792:	e7fe      	b.n	8000792 <HardFault_Handler+0x4>

08000794 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000794:	b480      	push	{r7}
 8000796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000798:	e7fe      	b.n	8000798 <MemManage_Handler+0x4>

0800079a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800079a:	b480      	push	{r7}
 800079c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800079e:	e7fe      	b.n	800079e <BusFault_Handler+0x4>

080007a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007a0:	b480      	push	{r7}
 80007a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007a4:	e7fe      	b.n	80007a4 <UsageFault_Handler+0x4>

080007a6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007a6:	b480      	push	{r7}
 80007a8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007aa:	bf00      	nop
 80007ac:	46bd      	mov	sp, r7
 80007ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b2:	4770      	bx	lr

080007b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007b4:	b480      	push	{r7}
 80007b6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007b8:	bf00      	nop
 80007ba:	46bd      	mov	sp, r7
 80007bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c0:	4770      	bx	lr

080007c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007c2:	b480      	push	{r7}
 80007c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007c6:	bf00      	nop
 80007c8:	46bd      	mov	sp, r7
 80007ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ce:	4770      	bx	lr

080007d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007d4:	f000 fba0 	bl	8000f18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007d8:	bf00      	nop
 80007da:	bd80      	pop	{r7, pc}

080007dc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80007e0:	4802      	ldr	r0, [pc, #8]	; (80007ec <USART1_IRQHandler+0x10>)
 80007e2:	f003 fa1d 	bl	8003c20 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80007e6:	bf00      	nop
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	20000174 	.word	0x20000174

080007f0 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80007f4:	4802      	ldr	r0, [pc, #8]	; (8000800 <DMA2_Stream2_IRQHandler+0x10>)
 80007f6:	f000 fe7d 	bl	80014f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80007fa:	bf00      	nop
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	200001bc 	.word	0x200001bc

08000804 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000808:	4802      	ldr	r0, [pc, #8]	; (8000814 <OTG_FS_IRQHandler+0x10>)
 800080a:	f001 fba5 	bl	8001f58 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800080e:	bf00      	nop
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	20001c4c 	.word	0x20001c4c

08000818 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b086      	sub	sp, #24
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000820:	4a14      	ldr	r2, [pc, #80]	; (8000874 <_sbrk+0x5c>)
 8000822:	4b15      	ldr	r3, [pc, #84]	; (8000878 <_sbrk+0x60>)
 8000824:	1ad3      	subs	r3, r2, r3
 8000826:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000828:	697b      	ldr	r3, [r7, #20]
 800082a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800082c:	4b13      	ldr	r3, [pc, #76]	; (800087c <_sbrk+0x64>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	2b00      	cmp	r3, #0
 8000832:	d102      	bne.n	800083a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000834:	4b11      	ldr	r3, [pc, #68]	; (800087c <_sbrk+0x64>)
 8000836:	4a12      	ldr	r2, [pc, #72]	; (8000880 <_sbrk+0x68>)
 8000838:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800083a:	4b10      	ldr	r3, [pc, #64]	; (800087c <_sbrk+0x64>)
 800083c:	681a      	ldr	r2, [r3, #0]
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	4413      	add	r3, r2
 8000842:	693a      	ldr	r2, [r7, #16]
 8000844:	429a      	cmp	r2, r3
 8000846:	d207      	bcs.n	8000858 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000848:	f008 fba6 	bl	8008f98 <__errno>
 800084c:	4603      	mov	r3, r0
 800084e:	220c      	movs	r2, #12
 8000850:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000852:	f04f 33ff 	mov.w	r3, #4294967295
 8000856:	e009      	b.n	800086c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000858:	4b08      	ldr	r3, [pc, #32]	; (800087c <_sbrk+0x64>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800085e:	4b07      	ldr	r3, [pc, #28]	; (800087c <_sbrk+0x64>)
 8000860:	681a      	ldr	r2, [r3, #0]
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	4413      	add	r3, r2
 8000866:	4a05      	ldr	r2, [pc, #20]	; (800087c <_sbrk+0x64>)
 8000868:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800086a:	68fb      	ldr	r3, [r7, #12]
}
 800086c:	4618      	mov	r0, r3
 800086e:	3718      	adds	r7, #24
 8000870:	46bd      	mov	sp, r7
 8000872:	bd80      	pop	{r7, pc}
 8000874:	20020000 	.word	0x20020000
 8000878:	00000400 	.word	0x00000400
 800087c:	20000170 	.word	0x20000170
 8000880:	20002498 	.word	0x20002498

08000884 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000884:	b480      	push	{r7}
 8000886:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000888:	4b06      	ldr	r3, [pc, #24]	; (80008a4 <SystemInit+0x20>)
 800088a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800088e:	4a05      	ldr	r2, [pc, #20]	; (80008a4 <SystemInit+0x20>)
 8000890:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000894:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000898:	bf00      	nop
 800089a:	46bd      	mov	sp, r7
 800089c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a0:	4770      	bx	lr
 80008a2:	bf00      	nop
 80008a4:	e000ed00 	.word	0xe000ed00

080008a8 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80008ac:	4b11      	ldr	r3, [pc, #68]	; (80008f4 <MX_USART1_UART_Init+0x4c>)
 80008ae:	4a12      	ldr	r2, [pc, #72]	; (80008f8 <MX_USART1_UART_Init+0x50>)
 80008b0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80008b2:	4b10      	ldr	r3, [pc, #64]	; (80008f4 <MX_USART1_UART_Init+0x4c>)
 80008b4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008b8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80008ba:	4b0e      	ldr	r3, [pc, #56]	; (80008f4 <MX_USART1_UART_Init+0x4c>)
 80008bc:	2200      	movs	r2, #0
 80008be:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80008c0:	4b0c      	ldr	r3, [pc, #48]	; (80008f4 <MX_USART1_UART_Init+0x4c>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80008c6:	4b0b      	ldr	r3, [pc, #44]	; (80008f4 <MX_USART1_UART_Init+0x4c>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80008cc:	4b09      	ldr	r3, [pc, #36]	; (80008f4 <MX_USART1_UART_Init+0x4c>)
 80008ce:	220c      	movs	r2, #12
 80008d0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008d2:	4b08      	ldr	r3, [pc, #32]	; (80008f4 <MX_USART1_UART_Init+0x4c>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80008d8:	4b06      	ldr	r3, [pc, #24]	; (80008f4 <MX_USART1_UART_Init+0x4c>)
 80008da:	2200      	movs	r2, #0
 80008dc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80008de:	4805      	ldr	r0, [pc, #20]	; (80008f4 <MX_USART1_UART_Init+0x4c>)
 80008e0:	f003 f89e 	bl	8003a20 <HAL_UART_Init>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d001      	beq.n	80008ee <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80008ea:	f7ff ff1f 	bl	800072c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80008ee:	bf00      	nop
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	20000174 	.word	0x20000174
 80008f8:	40011000 	.word	0x40011000

080008fc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b08a      	sub	sp, #40	; 0x28
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000904:	f107 0314 	add.w	r3, r7, #20
 8000908:	2200      	movs	r2, #0
 800090a:	601a      	str	r2, [r3, #0]
 800090c:	605a      	str	r2, [r3, #4]
 800090e:	609a      	str	r2, [r3, #8]
 8000910:	60da      	str	r2, [r3, #12]
 8000912:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	4a35      	ldr	r2, [pc, #212]	; (80009f0 <HAL_UART_MspInit+0xf4>)
 800091a:	4293      	cmp	r3, r2
 800091c:	d163      	bne.n	80009e6 <HAL_UART_MspInit+0xea>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800091e:	2300      	movs	r3, #0
 8000920:	613b      	str	r3, [r7, #16]
 8000922:	4b34      	ldr	r3, [pc, #208]	; (80009f4 <HAL_UART_MspInit+0xf8>)
 8000924:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000926:	4a33      	ldr	r2, [pc, #204]	; (80009f4 <HAL_UART_MspInit+0xf8>)
 8000928:	f043 0310 	orr.w	r3, r3, #16
 800092c:	6453      	str	r3, [r2, #68]	; 0x44
 800092e:	4b31      	ldr	r3, [pc, #196]	; (80009f4 <HAL_UART_MspInit+0xf8>)
 8000930:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000932:	f003 0310 	and.w	r3, r3, #16
 8000936:	613b      	str	r3, [r7, #16]
 8000938:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800093a:	2300      	movs	r3, #0
 800093c:	60fb      	str	r3, [r7, #12]
 800093e:	4b2d      	ldr	r3, [pc, #180]	; (80009f4 <HAL_UART_MspInit+0xf8>)
 8000940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000942:	4a2c      	ldr	r2, [pc, #176]	; (80009f4 <HAL_UART_MspInit+0xf8>)
 8000944:	f043 0301 	orr.w	r3, r3, #1
 8000948:	6313      	str	r3, [r2, #48]	; 0x30
 800094a:	4b2a      	ldr	r3, [pc, #168]	; (80009f4 <HAL_UART_MspInit+0xf8>)
 800094c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094e:	f003 0301 	and.w	r3, r3, #1
 8000952:	60fb      	str	r3, [r7, #12]
 8000954:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000956:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800095a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800095c:	2302      	movs	r3, #2
 800095e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000960:	2300      	movs	r3, #0
 8000962:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000964:	2303      	movs	r3, #3
 8000966:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000968:	2307      	movs	r3, #7
 800096a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800096c:	f107 0314 	add.w	r3, r7, #20
 8000970:	4619      	mov	r1, r3
 8000972:	4821      	ldr	r0, [pc, #132]	; (80009f8 <HAL_UART_MspInit+0xfc>)
 8000974:	f001 f828 	bl	80019c8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8000978:	4b20      	ldr	r3, [pc, #128]	; (80009fc <HAL_UART_MspInit+0x100>)
 800097a:	4a21      	ldr	r2, [pc, #132]	; (8000a00 <HAL_UART_MspInit+0x104>)
 800097c:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 800097e:	4b1f      	ldr	r3, [pc, #124]	; (80009fc <HAL_UART_MspInit+0x100>)
 8000980:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000984:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000986:	4b1d      	ldr	r3, [pc, #116]	; (80009fc <HAL_UART_MspInit+0x100>)
 8000988:	2200      	movs	r2, #0
 800098a:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800098c:	4b1b      	ldr	r3, [pc, #108]	; (80009fc <HAL_UART_MspInit+0x100>)
 800098e:	2200      	movs	r2, #0
 8000990:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000992:	4b1a      	ldr	r3, [pc, #104]	; (80009fc <HAL_UART_MspInit+0x100>)
 8000994:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000998:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800099a:	4b18      	ldr	r3, [pc, #96]	; (80009fc <HAL_UART_MspInit+0x100>)
 800099c:	2200      	movs	r2, #0
 800099e:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80009a0:	4b16      	ldr	r3, [pc, #88]	; (80009fc <HAL_UART_MspInit+0x100>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80009a6:	4b15      	ldr	r3, [pc, #84]	; (80009fc <HAL_UART_MspInit+0x100>)
 80009a8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80009ac:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80009ae:	4b13      	ldr	r3, [pc, #76]	; (80009fc <HAL_UART_MspInit+0x100>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80009b4:	4b11      	ldr	r3, [pc, #68]	; (80009fc <HAL_UART_MspInit+0x100>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80009ba:	4810      	ldr	r0, [pc, #64]	; (80009fc <HAL_UART_MspInit+0x100>)
 80009bc:	f000 fc02 	bl	80011c4 <HAL_DMA_Init>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d001      	beq.n	80009ca <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 80009c6:	f7ff feb1 	bl	800072c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	4a0b      	ldr	r2, [pc, #44]	; (80009fc <HAL_UART_MspInit+0x100>)
 80009ce:	63da      	str	r2, [r3, #60]	; 0x3c
 80009d0:	4a0a      	ldr	r2, [pc, #40]	; (80009fc <HAL_UART_MspInit+0x100>)
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80009d6:	2200      	movs	r2, #0
 80009d8:	2100      	movs	r1, #0
 80009da:	2025      	movs	r0, #37	; 0x25
 80009dc:	f000 fbbb 	bl	8001156 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80009e0:	2025      	movs	r0, #37	; 0x25
 80009e2:	f000 fbd4 	bl	800118e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80009e6:	bf00      	nop
 80009e8:	3728      	adds	r7, #40	; 0x28
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	40011000 	.word	0x40011000
 80009f4:	40023800 	.word	0x40023800
 80009f8:	40020000 	.word	0x40020000
 80009fc:	200001bc 	.word	0x200001bc
 8000a00:	40026440 	.word	0x40026440

08000a04 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000a04:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a3c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000a08:	f7ff ff3c 	bl	8000884 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a0c:	480c      	ldr	r0, [pc, #48]	; (8000a40 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000a0e:	490d      	ldr	r1, [pc, #52]	; (8000a44 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000a10:	4a0d      	ldr	r2, [pc, #52]	; (8000a48 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000a12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a14:	e002      	b.n	8000a1c <LoopCopyDataInit>

08000a16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a1a:	3304      	adds	r3, #4

08000a1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a20:	d3f9      	bcc.n	8000a16 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a22:	4a0a      	ldr	r2, [pc, #40]	; (8000a4c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000a24:	4c0a      	ldr	r4, [pc, #40]	; (8000a50 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000a26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a28:	e001      	b.n	8000a2e <LoopFillZerobss>

08000a2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a2c:	3204      	adds	r2, #4

08000a2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a30:	d3fb      	bcc.n	8000a2a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a32:	f008 fab7 	bl	8008fa4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a36:	f7ff fde9 	bl	800060c <main>
  bx  lr    
 8000a3a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000a3c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a44:	20000154 	.word	0x20000154
  ldr r2, =_sidata
 8000a48:	08009968 	.word	0x08009968
  ldr r2, =_sbss
 8000a4c:	20000154 	.word	0x20000154
  ldr r4, =_ebss
 8000a50:	20002498 	.word	0x20002498

08000a54 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a54:	e7fe      	b.n	8000a54 <ADC_IRQHandler>

08000a56 <millis>:
	HAL_Delay(ms);
}


uint32_t millis(void)
{
 8000a56:	b580      	push	{r7, lr}
 8000a58:	af00      	add	r7, sp, #0
	return HAL_GetTick();
 8000a5a:	f000 fa71 	bl	8000f40 <HAL_GetTick>
 8000a5e:	4603      	mov	r3, r0
}
 8000a60:	4618      	mov	r0, r3
 8000a62:	bd80      	pop	{r7, pc}

08000a64 <qbufferCreate>:
{

}

bool qbufferCreate(qbuffer_t *p_node, uint8_t *p_buf, uint32_t len)
{
 8000a64:	b480      	push	{r7}
 8000a66:	b087      	sub	sp, #28
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	60f8      	str	r0, [r7, #12]
 8000a6c:	60b9      	str	r1, [r7, #8]
 8000a6e:	607a      	str	r2, [r7, #4]
	bool ret = true;
 8000a70:	2301      	movs	r3, #1
 8000a72:	75fb      	strb	r3, [r7, #23]

	p_node->in = 0;
 8000a74:	68fb      	ldr	r3, [r7, #12]
 8000a76:	2200      	movs	r2, #0
 8000a78:	601a      	str	r2, [r3, #0]
	p_node->out = 0;
 8000a7a:	68fb      	ldr	r3, [r7, #12]
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	605a      	str	r2, [r3, #4]
	p_node->len = len;
 8000a80:	68fb      	ldr	r3, [r7, #12]
 8000a82:	687a      	ldr	r2, [r7, #4]
 8000a84:	609a      	str	r2, [r3, #8]
	p_node->p_buf = p_buf;
 8000a86:	68fb      	ldr	r3, [r7, #12]
 8000a88:	68ba      	ldr	r2, [r7, #8]
 8000a8a:	60da      	str	r2, [r3, #12]

	return ret;
 8000a8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8000a8e:	4618      	mov	r0, r3
 8000a90:	371c      	adds	r7, #28
 8000a92:	46bd      	mov	sp, r7
 8000a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a98:	4770      	bx	lr

08000a9a <qbufferRead>:

	return ret;
}

bool qbufferRead(qbuffer_t *p_node, uint8_t *p_data, uint32_t len)
{
 8000a9a:	b480      	push	{r7}
 8000a9c:	b087      	sub	sp, #28
 8000a9e:	af00      	add	r7, sp, #0
 8000aa0:	60f8      	str	r0, [r7, #12]
 8000aa2:	60b9      	str	r1, [r7, #8]
 8000aa4:	607a      	str	r2, [r7, #4]
	bool ret = true;
 8000aa6:	2301      	movs	r3, #1
 8000aa8:	75fb      	strb	r3, [r7, #23]

	for(int i=0; i<len; i++)
 8000aaa:	2300      	movs	r3, #0
 8000aac:	613b      	str	r3, [r7, #16]
 8000aae:	e026      	b.n	8000afe <qbufferRead+0x64>
	{
		if(p_node->p_buf != NULL)
 8000ab0:	68fb      	ldr	r3, [r7, #12]
 8000ab2:	68db      	ldr	r3, [r3, #12]
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d009      	beq.n	8000acc <qbufferRead+0x32>
		{
			p_data[i] = p_node->p_buf[p_node->out];
 8000ab8:	68fb      	ldr	r3, [r7, #12]
 8000aba:	68da      	ldr	r2, [r3, #12]
 8000abc:	68fb      	ldr	r3, [r7, #12]
 8000abe:	685b      	ldr	r3, [r3, #4]
 8000ac0:	441a      	add	r2, r3
 8000ac2:	693b      	ldr	r3, [r7, #16]
 8000ac4:	68b9      	ldr	r1, [r7, #8]
 8000ac6:	440b      	add	r3, r1
 8000ac8:	7812      	ldrb	r2, [r2, #0]
 8000aca:	701a      	strb	r2, [r3, #0]
		}

		if(p_node->out != p_node->in)
 8000acc:	68fb      	ldr	r3, [r7, #12]
 8000ace:	685a      	ldr	r2, [r3, #4]
 8000ad0:	68fb      	ldr	r3, [r7, #12]
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	429a      	cmp	r2, r3
 8000ad6:	d00c      	beq.n	8000af2 <qbufferRead+0x58>
		{
			p_node->out = (p_node->out + 1) % p_node->len;
 8000ad8:	68fb      	ldr	r3, [r7, #12]
 8000ada:	685b      	ldr	r3, [r3, #4]
 8000adc:	3301      	adds	r3, #1
 8000ade:	68fa      	ldr	r2, [r7, #12]
 8000ae0:	6892      	ldr	r2, [r2, #8]
 8000ae2:	fbb3 f1f2 	udiv	r1, r3, r2
 8000ae6:	fb01 f202 	mul.w	r2, r1, r2
 8000aea:	1a9a      	subs	r2, r3, r2
 8000aec:	68fb      	ldr	r3, [r7, #12]
 8000aee:	605a      	str	r2, [r3, #4]
 8000af0:	e002      	b.n	8000af8 <qbufferRead+0x5e>
		}
		else
		{
			ret = false;
 8000af2:	2300      	movs	r3, #0
 8000af4:	75fb      	strb	r3, [r7, #23]
			break;
 8000af6:	e006      	b.n	8000b06 <qbufferRead+0x6c>
	for(int i=0; i<len; i++)
 8000af8:	693b      	ldr	r3, [r7, #16]
 8000afa:	3301      	adds	r3, #1
 8000afc:	613b      	str	r3, [r7, #16]
 8000afe:	693b      	ldr	r3, [r7, #16]
 8000b00:	687a      	ldr	r2, [r7, #4]
 8000b02:	429a      	cmp	r2, r3
 8000b04:	d8d4      	bhi.n	8000ab0 <qbufferRead+0x16>
		}
	}

	return ret;
 8000b06:	7dfb      	ldrb	r3, [r7, #23]
}
 8000b08:	4618      	mov	r0, r3
 8000b0a:	371c      	adds	r7, #28
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b12:	4770      	bx	lr

08000b14 <qbufferAvailable>:
uint32_t qbufferAvailable(qbuffer_t *p_node)
{
 8000b14:	b480      	push	{r7}
 8000b16:	b085      	sub	sp, #20
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
	uint32_t ret = (p_node->in - p_node->out) % p_node->len;
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	681a      	ldr	r2, [r3, #0]
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	685b      	ldr	r3, [r3, #4]
 8000b24:	1ad3      	subs	r3, r2, r3
 8000b26:	687a      	ldr	r2, [r7, #4]
 8000b28:	6892      	ldr	r2, [r2, #8]
 8000b2a:	fbb3 f1f2 	udiv	r1, r3, r2
 8000b2e:	fb01 f202 	mul.w	r2, r1, r2
 8000b32:	1a9b      	subs	r3, r3, r2
 8000b34:	60fb      	str	r3, [r7, #12]
	return ret;
 8000b36:	68fb      	ldr	r3, [r7, #12]
}
 8000b38:	4618      	mov	r0, r3
 8000b3a:	3714      	adds	r7, #20
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b42:	4770      	bx	lr

08000b44 <cdcAvailable>:
bool rx_full=false;



uint32_t cdcAvailable(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	b083      	sub	sp, #12
 8000b48:	af00      	add	r7, sp, #0
	uint32_t ret = -1;
 8000b4a:	f04f 33ff 	mov.w	r3, #4294967295
 8000b4e:	607b      	str	r3, [r7, #4]

	ret = (rx_in - rx_out) % BUF_SIZE;
 8000b50:	4b07      	ldr	r3, [pc, #28]	; (8000b70 <cdcAvailable+0x2c>)
 8000b52:	681a      	ldr	r2, [r3, #0]
 8000b54:	4b07      	ldr	r3, [pc, #28]	; (8000b74 <cdcAvailable+0x30>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	1ad3      	subs	r3, r2, r3
 8000b5a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000b5e:	607b      	str	r3, [r7, #4]

	return ret;
 8000b60:	687b      	ldr	r3, [r7, #4]
}
 8000b62:	4618      	mov	r0, r3
 8000b64:	370c      	adds	r7, #12
 8000b66:	46bd      	mov	sp, r7
 8000b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6c:	4770      	bx	lr
 8000b6e:	bf00      	nop
 8000b70:	2000061c 	.word	0x2000061c
 8000b74:	20000620 	.word	0x20000620

08000b78 <cdcRead>:

uint8_t cdcRead(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	b083      	sub	sp, #12
 8000b7c:	af00      	add	r7, sp, #0
	uint8_t ret = 0;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	71fb      	strb	r3, [r7, #7]

	ret = rx_buf[rx_out];
 8000b82:	4b0c      	ldr	r3, [pc, #48]	; (8000bb4 <cdcRead+0x3c>)
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	4a0c      	ldr	r2, [pc, #48]	; (8000bb8 <cdcRead+0x40>)
 8000b88:	5cd3      	ldrb	r3, [r2, r3]
 8000b8a:	71fb      	strb	r3, [r7, #7]

	if(rx_out != rx_in)
 8000b8c:	4b09      	ldr	r3, [pc, #36]	; (8000bb4 <cdcRead+0x3c>)
 8000b8e:	681a      	ldr	r2, [r3, #0]
 8000b90:	4b0a      	ldr	r3, [pc, #40]	; (8000bbc <cdcRead+0x44>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	429a      	cmp	r2, r3
 8000b96:	d006      	beq.n	8000ba6 <cdcRead+0x2e>
	{
		rx_out = (rx_out + 1) % BUF_SIZE;
 8000b98:	4b06      	ldr	r3, [pc, #24]	; (8000bb4 <cdcRead+0x3c>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	3301      	adds	r3, #1
 8000b9e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000ba2:	4a04      	ldr	r2, [pc, #16]	; (8000bb4 <cdcRead+0x3c>)
 8000ba4:	6013      	str	r3, [r2, #0]
	}

	return ret;
 8000ba6:	79fb      	ldrb	r3, [r7, #7]
}
 8000ba8:	4618      	mov	r0, r3
 8000baa:	370c      	adds	r7, #12
 8000bac:	46bd      	mov	sp, r7
 8000bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb2:	4770      	bx	lr
 8000bb4:	20000620 	.word	0x20000620
 8000bb8:	2000021c 	.word	0x2000021c
 8000bbc:	2000061c 	.word	0x2000061c

08000bc0 <cdcDataIn>:

void cdcDataIn(uint8_t rx_data)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	b085      	sub	sp, #20
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	71fb      	strb	r3, [r7, #7]
	rx_buf[rx_in] = rx_data;
 8000bca:	4b0c      	ldr	r3, [pc, #48]	; (8000bfc <cdcDataIn+0x3c>)
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	490c      	ldr	r1, [pc, #48]	; (8000c00 <cdcDataIn+0x40>)
 8000bd0:	79fa      	ldrb	r2, [r7, #7]
 8000bd2:	54ca      	strb	r2, [r1, r3]

	uint8_t next_rx_in = (rx_in + 1) % BUF_SIZE;
 8000bd4:	4b09      	ldr	r3, [pc, #36]	; (8000bfc <cdcDataIn+0x3c>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	b2db      	uxtb	r3, r3
 8000bda:	3301      	adds	r3, #1
 8000bdc:	73fb      	strb	r3, [r7, #15]

	if(next_rx_in != rx_out)
 8000bde:	7bfa      	ldrb	r2, [r7, #15]
 8000be0:	4b08      	ldr	r3, [pc, #32]	; (8000c04 <cdcDataIn+0x44>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	429a      	cmp	r2, r3
 8000be6:	d002      	beq.n	8000bee <cdcDataIn+0x2e>
	{
		rx_in = next_rx_in;
 8000be8:	7bfb      	ldrb	r3, [r7, #15]
 8000bea:	4a04      	ldr	r2, [pc, #16]	; (8000bfc <cdcDataIn+0x3c>)
 8000bec:	6013      	str	r3, [r2, #0]
	}
}
 8000bee:	bf00      	nop
 8000bf0:	3714      	adds	r7, #20
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf8:	4770      	bx	lr
 8000bfa:	bf00      	nop
 8000bfc:	2000061c 	.word	0x2000061c
 8000c00:	2000021c 	.word	0x2000021c
 8000c04:	20000620 	.word	0x20000620

08000c08 <cdcWrite>:

uint32_t cdcWrite(uint8_t *p_data, uint32_t len)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b084      	sub	sp, #16
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
 8000c10:	6039      	str	r1, [r7, #0]
	uint32_t pre_time = 0;
 8000c12:	2300      	movs	r3, #0
 8000c14:	60fb      	str	r3, [r7, #12]
	uint8_t ret;

	pre_time = millis();
 8000c16:	f7ff ff1e 	bl	8000a56 <millis>
 8000c1a:	60f8      	str	r0, [r7, #12]
	while(1)
	{
		ret = CDC_Transmit_FS(p_data, len);
 8000c1c:	683b      	ldr	r3, [r7, #0]
 8000c1e:	b29b      	uxth	r3, r3
 8000c20:	4619      	mov	r1, r3
 8000c22:	6878      	ldr	r0, [r7, #4]
 8000c24:	f007 fd24 	bl	8008670 <CDC_Transmit_FS>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	72fb      	strb	r3, [r7, #11]

		if(ret == USBD_OK)
 8000c2c:	7afb      	ldrb	r3, [r7, #11]
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d101      	bne.n	8000c36 <cdcWrite+0x2e>
			{
				return len;
 8000c32:	683b      	ldr	r3, [r7, #0]
 8000c34:	e00e      	b.n	8000c54 <cdcWrite+0x4c>
			}
			else if(ret == USBD_FAIL)
 8000c36:	7afb      	ldrb	r3, [r7, #11]
 8000c38:	2b03      	cmp	r3, #3
 8000c3a:	d101      	bne.n	8000c40 <cdcWrite+0x38>
			{
				return 0;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	e009      	b.n	8000c54 <cdcWrite+0x4c>
			}

			if(millis() - pre_time >= 100)
 8000c40:	f7ff ff09 	bl	8000a56 <millis>
 8000c44:	4602      	mov	r2, r0
 8000c46:	68fb      	ldr	r3, [r7, #12]
 8000c48:	1ad3      	subs	r3, r2, r3
 8000c4a:	2b63      	cmp	r3, #99	; 0x63
 8000c4c:	d800      	bhi.n	8000c50 <cdcWrite+0x48>
		ret = CDC_Transmit_FS(p_data, len);
 8000c4e:	e7e5      	b.n	8000c1c <cdcWrite+0x14>
			{
				break;
 8000c50:	bf00      	nop
			}
	}

	return 0;
 8000c52:	2300      	movs	r3, #0
}
 8000c54:	4618      	mov	r0, r3
 8000c56:	3710      	adds	r7, #16
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}

08000c5c <uartOpen>:
{
	return true;
}

bool uartOpen(uint8_t ch, uint32_t baud)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b084      	sub	sp, #16
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	4603      	mov	r3, r0
 8000c64:	6039      	str	r1, [r7, #0]
 8000c66:	71fb      	strb	r3, [r7, #7]
	bool ret = false;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	73fb      	strb	r3, [r7, #15]

	switch(ch)
 8000c6c:	79fb      	ldrb	r3, [r7, #7]
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d002      	beq.n	8000c78 <uartOpen+0x1c>
 8000c72:	2b01      	cmp	r3, #1
 8000c74:	d007      	beq.n	8000c86 <uartOpen+0x2a>
 8000c76:	e03c      	b.n	8000cf2 <uartOpen+0x96>
	{
		case _DEF_UART1:
			is_open[ch] = true;
 8000c78:	79fb      	ldrb	r3, [r7, #7]
 8000c7a:	4a20      	ldr	r2, [pc, #128]	; (8000cfc <uartOpen+0xa0>)
 8000c7c:	2101      	movs	r1, #1
 8000c7e:	54d1      	strb	r1, [r2, r3]
			ret = true;
 8000c80:	2301      	movs	r3, #1
 8000c82:	73fb      	strb	r3, [r7, #15]
			break;
 8000c84:	e035      	b.n	8000cf2 <uartOpen+0x96>

		case _DEF_UART2:
			#ifdef _USE_UART2
			ret = true;
 8000c86:	2301      	movs	r3, #1
 8000c88:	73fb      	strb	r3, [r7, #15]
			is_open[ch] = true;
 8000c8a:	79fb      	ldrb	r3, [r7, #7]
 8000c8c:	4a1b      	ldr	r2, [pc, #108]	; (8000cfc <uartOpen+0xa0>)
 8000c8e:	2101      	movs	r1, #1
 8000c90:	54d1      	strb	r1, [r2, r3]

			qbufferCreate(&qbuffer[ch], &rx_buf[0], 256);
 8000c92:	79fb      	ldrb	r3, [r7, #7]
 8000c94:	011b      	lsls	r3, r3, #4
 8000c96:	4a1a      	ldr	r2, [pc, #104]	; (8000d00 <uartOpen+0xa4>)
 8000c98:	4413      	add	r3, r2
 8000c9a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c9e:	4919      	ldr	r1, [pc, #100]	; (8000d04 <uartOpen+0xa8>)
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	f7ff fedf 	bl	8000a64 <qbufferCreate>

			if(HAL_UART_Receive_DMA(&huart1, (uint8_t *)&rx_buf[0], 256) != HAL_OK)
 8000ca6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000caa:	4916      	ldr	r1, [pc, #88]	; (8000d04 <uartOpen+0xa8>)
 8000cac:	4816      	ldr	r0, [pc, #88]	; (8000d08 <uartOpen+0xac>)
 8000cae:	f002 ff92 	bl	8003bd6 <HAL_UART_Receive_DMA>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d001      	beq.n	8000cbc <uartOpen+0x60>
				{
					 ret = false;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	73fb      	strb	r3, [r7, #15]
			  }

			qbuffer[ch].in = qbuffer[ch].len - hdma_usart1_rx.Instance->NDTR;
 8000cbc:	79fb      	ldrb	r3, [r7, #7]
 8000cbe:	4a10      	ldr	r2, [pc, #64]	; (8000d00 <uartOpen+0xa4>)
 8000cc0:	011b      	lsls	r3, r3, #4
 8000cc2:	4413      	add	r3, r2
 8000cc4:	3308      	adds	r3, #8
 8000cc6:	6819      	ldr	r1, [r3, #0]
 8000cc8:	4b10      	ldr	r3, [pc, #64]	; (8000d0c <uartOpen+0xb0>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	685a      	ldr	r2, [r3, #4]
 8000cce:	79fb      	ldrb	r3, [r7, #7]
 8000cd0:	1a8a      	subs	r2, r1, r2
 8000cd2:	490b      	ldr	r1, [pc, #44]	; (8000d00 <uartOpen+0xa4>)
 8000cd4:	011b      	lsls	r3, r3, #4
 8000cd6:	440b      	add	r3, r1
 8000cd8:	601a      	str	r2, [r3, #0]
			qbuffer[ch].out = qbuffer[ch].in;
 8000cda:	79fa      	ldrb	r2, [r7, #7]
 8000cdc:	79fb      	ldrb	r3, [r7, #7]
 8000cde:	4908      	ldr	r1, [pc, #32]	; (8000d00 <uartOpen+0xa4>)
 8000ce0:	0112      	lsls	r2, r2, #4
 8000ce2:	440a      	add	r2, r1
 8000ce4:	6812      	ldr	r2, [r2, #0]
 8000ce6:	4906      	ldr	r1, [pc, #24]	; (8000d00 <uartOpen+0xa4>)
 8000ce8:	011b      	lsls	r3, r3, #4
 8000cea:	440b      	add	r3, r1
 8000cec:	3304      	adds	r3, #4
 8000cee:	601a      	str	r2, [r3, #0]
			break;
 8000cf0:	bf00      	nop
			#endif
	}

	return ret;
 8000cf2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	3710      	adds	r7, #16
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}
 8000cfc:	20000624 	.word	0x20000624
 8000d00:	20000628 	.word	0x20000628
 8000d04:	20000668 	.word	0x20000668
 8000d08:	20000174 	.word	0x20000174
 8000d0c:	200001bc 	.word	0x200001bc

08000d10 <uartAvailable>:

uint32_t uartAvailable(uint8_t ch)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b084      	sub	sp, #16
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	4603      	mov	r3, r0
 8000d18:	71fb      	strb	r3, [r7, #7]
	uint32_t ret;

	switch(ch)
 8000d1a:	79fb      	ldrb	r3, [r7, #7]
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d002      	beq.n	8000d26 <uartAvailable+0x16>
 8000d20:	2b01      	cmp	r3, #1
 8000d22:	d004      	beq.n	8000d2e <uartAvailable+0x1e>
 8000d24:	e01b      	b.n	8000d5e <uartAvailable+0x4e>
	{
		case _DEF_UART1:
			ret = cdcAvailable();
 8000d26:	f7ff ff0d 	bl	8000b44 <cdcAvailable>
 8000d2a:	60f8      	str	r0, [r7, #12]
			break;
 8000d2c:	e017      	b.n	8000d5e <uartAvailable+0x4e>

		case _DEF_UART2:
			#ifdef _USE_UART2
			qbuffer[ch].in = (qbuffer[ch].len - hdma_usart1_rx.Instance->NDTR);
 8000d2e:	79fb      	ldrb	r3, [r7, #7]
 8000d30:	4a0d      	ldr	r2, [pc, #52]	; (8000d68 <uartAvailable+0x58>)
 8000d32:	011b      	lsls	r3, r3, #4
 8000d34:	4413      	add	r3, r2
 8000d36:	3308      	adds	r3, #8
 8000d38:	6819      	ldr	r1, [r3, #0]
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	; (8000d6c <uartAvailable+0x5c>)
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	685a      	ldr	r2, [r3, #4]
 8000d40:	79fb      	ldrb	r3, [r7, #7]
 8000d42:	1a8a      	subs	r2, r1, r2
 8000d44:	4908      	ldr	r1, [pc, #32]	; (8000d68 <uartAvailable+0x58>)
 8000d46:	011b      	lsls	r3, r3, #4
 8000d48:	440b      	add	r3, r1
 8000d4a:	601a      	str	r2, [r3, #0]
			ret = qbufferAvailable(&qbuffer[ch]);
 8000d4c:	79fb      	ldrb	r3, [r7, #7]
 8000d4e:	011b      	lsls	r3, r3, #4
 8000d50:	4a05      	ldr	r2, [pc, #20]	; (8000d68 <uartAvailable+0x58>)
 8000d52:	4413      	add	r3, r2
 8000d54:	4618      	mov	r0, r3
 8000d56:	f7ff fedd 	bl	8000b14 <qbufferAvailable>
 8000d5a:	60f8      	str	r0, [r7, #12]
			#endif
			break;
 8000d5c:	bf00      	nop
	}

	return ret;
 8000d5e:	68fb      	ldr	r3, [r7, #12]
}
 8000d60:	4618      	mov	r0, r3
 8000d62:	3710      	adds	r7, #16
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	20000628 	.word	0x20000628
 8000d6c:	200001bc 	.word	0x200001bc

08000d70 <uartRead>:

uint8_t uartRead(uint8_t ch)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b084      	sub	sp, #16
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	4603      	mov	r3, r0
 8000d78:	71fb      	strb	r3, [r7, #7]
	uint8_t ret;

	switch(ch)
 8000d7a:	79fb      	ldrb	r3, [r7, #7]
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d002      	beq.n	8000d86 <uartRead+0x16>
 8000d80:	2b01      	cmp	r3, #1
 8000d82:	d005      	beq.n	8000d90 <uartRead+0x20>
 8000d84:	e00c      	b.n	8000da0 <uartRead+0x30>
	{
		case _DEF_UART1:
			ret = cdcRead();
 8000d86:	f7ff fef7 	bl	8000b78 <cdcRead>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	73fb      	strb	r3, [r7, #15]
			break;
 8000d8e:	e007      	b.n	8000da0 <uartRead+0x30>

		case _DEF_UART2:
			#ifdef _USE_UART2
			qbufferRead(&qbuffer[_DEF_UART2], &ret, 1);
 8000d90:	f107 030f 	add.w	r3, r7, #15
 8000d94:	2201      	movs	r2, #1
 8000d96:	4619      	mov	r1, r3
 8000d98:	4804      	ldr	r0, [pc, #16]	; (8000dac <uartRead+0x3c>)
 8000d9a:	f7ff fe7e 	bl	8000a9a <qbufferRead>
			#endif
			break;
 8000d9e:	bf00      	nop
	}

	return ret;
 8000da0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000da2:	4618      	mov	r0, r3
 8000da4:	3710      	adds	r7, #16
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	20000638 	.word	0x20000638

08000db0 <uartWrite>:

uint32_t uartWrite(uint8_t ch, uint8_t *p_data, uint32_t length)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b086      	sub	sp, #24
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	4603      	mov	r3, r0
 8000db8:	60b9      	str	r1, [r7, #8]
 8000dba:	607a      	str	r2, [r7, #4]
 8000dbc:	73fb      	strb	r3, [r7, #15]

	#ifdef _USE_UART2
	HAL_StatusTypeDef status;
	#endif

	switch(ch)
 8000dbe:	7bfb      	ldrb	r3, [r7, #15]
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d002      	beq.n	8000dca <uartWrite+0x1a>
 8000dc4:	2b01      	cmp	r3, #1
 8000dc6:	d006      	beq.n	8000dd6 <uartWrite+0x26>
 8000dc8:	e014      	b.n	8000df4 <uartWrite+0x44>
	{
		case _DEF_UART1:
			ret = cdcWrite(p_data, length);
 8000dca:	6879      	ldr	r1, [r7, #4]
 8000dcc:	68b8      	ldr	r0, [r7, #8]
 8000dce:	f7ff ff1b 	bl	8000c08 <cdcWrite>
 8000dd2:	6178      	str	r0, [r7, #20]
			break;
 8000dd4:	e00e      	b.n	8000df4 <uartWrite+0x44>

		case _DEF_UART2:
			#ifdef _USE_UART2
			status = HAL_UART_Transmit(&huart1, p_data, length, 100);
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	b29a      	uxth	r2, r3
 8000dda:	2364      	movs	r3, #100	; 0x64
 8000ddc:	68b9      	ldr	r1, [r7, #8]
 8000dde:	4808      	ldr	r0, [pc, #32]	; (8000e00 <uartWrite+0x50>)
 8000de0:	f002 fe6e 	bl	8003ac0 <HAL_UART_Transmit>
 8000de4:	4603      	mov	r3, r0
 8000de6:	74fb      	strb	r3, [r7, #19]
			if(status == HAL_OK)
 8000de8:	7cfb      	ldrb	r3, [r7, #19]
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d101      	bne.n	8000df2 <uartWrite+0x42>
			{
				ret = length;
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	617b      	str	r3, [r7, #20]
			}
			#endif
			break;
 8000df2:	bf00      	nop
	}

	return ret;
 8000df4:	697b      	ldr	r3, [r7, #20]
}
 8000df6:	4618      	mov	r0, r3
 8000df8:	3718      	adds	r7, #24
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	20000174 	.word	0x20000174

08000e04 <uartPrintf>:

uint32_t uartPrintf(uint8_t ch, char *fmt, ...)
{
 8000e04:	b40e      	push	{r1, r2, r3}
 8000e06:	b580      	push	{r7, lr}
 8000e08:	b0c7      	sub	sp, #284	; 0x11c
 8000e0a:	af00      	add	r7, sp, #0
 8000e0c:	4602      	mov	r2, r0
 8000e0e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000e12:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 8000e16:	701a      	strb	r2, [r3, #0]
	char buf[256];
	va_list args;
	int len;
	uint32_t ret;

	va_start(args, fmt);
 8000e18:	f507 7294 	add.w	r2, r7, #296	; 0x128
 8000e1c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000e20:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000e24:	601a      	str	r2, [r3, #0]
	len = vsnprintf(buf, 256, fmt, args);
 8000e26:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000e2a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000e2e:	f107 0010 	add.w	r0, r7, #16
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8000e38:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e3c:	f008 f896 	bl	8008f6c <vsniprintf>
 8000e40:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114

	ret = uartWrite(ch, (uint8_t *)buf, len);
 8000e44:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8000e48:	f107 0110 	add.w	r1, r7, #16
 8000e4c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000e50:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 8000e54:	781b      	ldrb	r3, [r3, #0]
 8000e56:	4618      	mov	r0, r3
 8000e58:	f7ff ffaa 	bl	8000db0 <uartWrite>
 8000e5c:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

	va_end(args);

	return ret;
 8000e60:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
}
 8000e64:	4618      	mov	r0, r3
 8000e66:	f507 778e 	add.w	r7, r7, #284	; 0x11c
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000e70:	b003      	add	sp, #12
 8000e72:	4770      	bx	lr

08000e74 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e78:	4b0e      	ldr	r3, [pc, #56]	; (8000eb4 <HAL_Init+0x40>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	4a0d      	ldr	r2, [pc, #52]	; (8000eb4 <HAL_Init+0x40>)
 8000e7e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e82:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e84:	4b0b      	ldr	r3, [pc, #44]	; (8000eb4 <HAL_Init+0x40>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	4a0a      	ldr	r2, [pc, #40]	; (8000eb4 <HAL_Init+0x40>)
 8000e8a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e8e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e90:	4b08      	ldr	r3, [pc, #32]	; (8000eb4 <HAL_Init+0x40>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	4a07      	ldr	r2, [pc, #28]	; (8000eb4 <HAL_Init+0x40>)
 8000e96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e9a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e9c:	2003      	movs	r0, #3
 8000e9e:	f000 f94f 	bl	8001140 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ea2:	200f      	movs	r0, #15
 8000ea4:	f000 f808 	bl	8000eb8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ea8:	f7ff fc46 	bl	8000738 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000eac:	2300      	movs	r3, #0
}
 8000eae:	4618      	mov	r0, r3
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	40023c00 	.word	0x40023c00

08000eb8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ec0:	4b12      	ldr	r3, [pc, #72]	; (8000f0c <HAL_InitTick+0x54>)
 8000ec2:	681a      	ldr	r2, [r3, #0]
 8000ec4:	4b12      	ldr	r3, [pc, #72]	; (8000f10 <HAL_InitTick+0x58>)
 8000ec6:	781b      	ldrb	r3, [r3, #0]
 8000ec8:	4619      	mov	r1, r3
 8000eca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ece:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ed2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	f000 f967 	bl	80011aa <HAL_SYSTICK_Config>
 8000edc:	4603      	mov	r3, r0
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d001      	beq.n	8000ee6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ee2:	2301      	movs	r3, #1
 8000ee4:	e00e      	b.n	8000f04 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	2b0f      	cmp	r3, #15
 8000eea:	d80a      	bhi.n	8000f02 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000eec:	2200      	movs	r2, #0
 8000eee:	6879      	ldr	r1, [r7, #4]
 8000ef0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ef4:	f000 f92f 	bl	8001156 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ef8:	4a06      	ldr	r2, [pc, #24]	; (8000f14 <HAL_InitTick+0x5c>)
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000efe:	2300      	movs	r3, #0
 8000f00:	e000      	b.n	8000f04 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f02:	2301      	movs	r3, #1
}
 8000f04:	4618      	mov	r0, r3
 8000f06:	3708      	adds	r7, #8
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}
 8000f0c:	20000000 	.word	0x20000000
 8000f10:	20000008 	.word	0x20000008
 8000f14:	20000004 	.word	0x20000004

08000f18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f1c:	4b06      	ldr	r3, [pc, #24]	; (8000f38 <HAL_IncTick+0x20>)
 8000f1e:	781b      	ldrb	r3, [r3, #0]
 8000f20:	461a      	mov	r2, r3
 8000f22:	4b06      	ldr	r3, [pc, #24]	; (8000f3c <HAL_IncTick+0x24>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	4413      	add	r3, r2
 8000f28:	4a04      	ldr	r2, [pc, #16]	; (8000f3c <HAL_IncTick+0x24>)
 8000f2a:	6013      	str	r3, [r2, #0]
}
 8000f2c:	bf00      	nop
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop
 8000f38:	20000008 	.word	0x20000008
 8000f3c:	20000768 	.word	0x20000768

08000f40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0
  return uwTick;
 8000f44:	4b03      	ldr	r3, [pc, #12]	; (8000f54 <HAL_GetTick+0x14>)
 8000f46:	681b      	ldr	r3, [r3, #0]
}
 8000f48:	4618      	mov	r0, r3
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop
 8000f54:	20000768 	.word	0x20000768

08000f58 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b084      	sub	sp, #16
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f60:	f7ff ffee 	bl	8000f40 <HAL_GetTick>
 8000f64:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f70:	d005      	beq.n	8000f7e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f72:	4b0a      	ldr	r3, [pc, #40]	; (8000f9c <HAL_Delay+0x44>)
 8000f74:	781b      	ldrb	r3, [r3, #0]
 8000f76:	461a      	mov	r2, r3
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	4413      	add	r3, r2
 8000f7c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f7e:	bf00      	nop
 8000f80:	f7ff ffde 	bl	8000f40 <HAL_GetTick>
 8000f84:	4602      	mov	r2, r0
 8000f86:	68bb      	ldr	r3, [r7, #8]
 8000f88:	1ad3      	subs	r3, r2, r3
 8000f8a:	68fa      	ldr	r2, [r7, #12]
 8000f8c:	429a      	cmp	r2, r3
 8000f8e:	d8f7      	bhi.n	8000f80 <HAL_Delay+0x28>
  {
  }
}
 8000f90:	bf00      	nop
 8000f92:	bf00      	nop
 8000f94:	3710      	adds	r7, #16
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	20000008 	.word	0x20000008

08000fa0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b085      	sub	sp, #20
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	f003 0307 	and.w	r3, r3, #7
 8000fae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fb0:	4b0c      	ldr	r3, [pc, #48]	; (8000fe4 <__NVIC_SetPriorityGrouping+0x44>)
 8000fb2:	68db      	ldr	r3, [r3, #12]
 8000fb4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fb6:	68ba      	ldr	r2, [r7, #8]
 8000fb8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fbc:	4013      	ands	r3, r2
 8000fbe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fc4:	68bb      	ldr	r3, [r7, #8]
 8000fc6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fc8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fcc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fd0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fd2:	4a04      	ldr	r2, [pc, #16]	; (8000fe4 <__NVIC_SetPriorityGrouping+0x44>)
 8000fd4:	68bb      	ldr	r3, [r7, #8]
 8000fd6:	60d3      	str	r3, [r2, #12]
}
 8000fd8:	bf00      	nop
 8000fda:	3714      	adds	r7, #20
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe2:	4770      	bx	lr
 8000fe4:	e000ed00 	.word	0xe000ed00

08000fe8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fec:	4b04      	ldr	r3, [pc, #16]	; (8001000 <__NVIC_GetPriorityGrouping+0x18>)
 8000fee:	68db      	ldr	r3, [r3, #12]
 8000ff0:	0a1b      	lsrs	r3, r3, #8
 8000ff2:	f003 0307 	and.w	r3, r3, #7
}
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffe:	4770      	bx	lr
 8001000:	e000ed00 	.word	0xe000ed00

08001004 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001004:	b480      	push	{r7}
 8001006:	b083      	sub	sp, #12
 8001008:	af00      	add	r7, sp, #0
 800100a:	4603      	mov	r3, r0
 800100c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800100e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001012:	2b00      	cmp	r3, #0
 8001014:	db0b      	blt.n	800102e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001016:	79fb      	ldrb	r3, [r7, #7]
 8001018:	f003 021f 	and.w	r2, r3, #31
 800101c:	4907      	ldr	r1, [pc, #28]	; (800103c <__NVIC_EnableIRQ+0x38>)
 800101e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001022:	095b      	lsrs	r3, r3, #5
 8001024:	2001      	movs	r0, #1
 8001026:	fa00 f202 	lsl.w	r2, r0, r2
 800102a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800102e:	bf00      	nop
 8001030:	370c      	adds	r7, #12
 8001032:	46bd      	mov	sp, r7
 8001034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001038:	4770      	bx	lr
 800103a:	bf00      	nop
 800103c:	e000e100 	.word	0xe000e100

08001040 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001040:	b480      	push	{r7}
 8001042:	b083      	sub	sp, #12
 8001044:	af00      	add	r7, sp, #0
 8001046:	4603      	mov	r3, r0
 8001048:	6039      	str	r1, [r7, #0]
 800104a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800104c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001050:	2b00      	cmp	r3, #0
 8001052:	db0a      	blt.n	800106a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	b2da      	uxtb	r2, r3
 8001058:	490c      	ldr	r1, [pc, #48]	; (800108c <__NVIC_SetPriority+0x4c>)
 800105a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800105e:	0112      	lsls	r2, r2, #4
 8001060:	b2d2      	uxtb	r2, r2
 8001062:	440b      	add	r3, r1
 8001064:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001068:	e00a      	b.n	8001080 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	b2da      	uxtb	r2, r3
 800106e:	4908      	ldr	r1, [pc, #32]	; (8001090 <__NVIC_SetPriority+0x50>)
 8001070:	79fb      	ldrb	r3, [r7, #7]
 8001072:	f003 030f 	and.w	r3, r3, #15
 8001076:	3b04      	subs	r3, #4
 8001078:	0112      	lsls	r2, r2, #4
 800107a:	b2d2      	uxtb	r2, r2
 800107c:	440b      	add	r3, r1
 800107e:	761a      	strb	r2, [r3, #24]
}
 8001080:	bf00      	nop
 8001082:	370c      	adds	r7, #12
 8001084:	46bd      	mov	sp, r7
 8001086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108a:	4770      	bx	lr
 800108c:	e000e100 	.word	0xe000e100
 8001090:	e000ed00 	.word	0xe000ed00

08001094 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001094:	b480      	push	{r7}
 8001096:	b089      	sub	sp, #36	; 0x24
 8001098:	af00      	add	r7, sp, #0
 800109a:	60f8      	str	r0, [r7, #12]
 800109c:	60b9      	str	r1, [r7, #8]
 800109e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	f003 0307 	and.w	r3, r3, #7
 80010a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010a8:	69fb      	ldr	r3, [r7, #28]
 80010aa:	f1c3 0307 	rsb	r3, r3, #7
 80010ae:	2b04      	cmp	r3, #4
 80010b0:	bf28      	it	cs
 80010b2:	2304      	movcs	r3, #4
 80010b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010b6:	69fb      	ldr	r3, [r7, #28]
 80010b8:	3304      	adds	r3, #4
 80010ba:	2b06      	cmp	r3, #6
 80010bc:	d902      	bls.n	80010c4 <NVIC_EncodePriority+0x30>
 80010be:	69fb      	ldr	r3, [r7, #28]
 80010c0:	3b03      	subs	r3, #3
 80010c2:	e000      	b.n	80010c6 <NVIC_EncodePriority+0x32>
 80010c4:	2300      	movs	r3, #0
 80010c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010c8:	f04f 32ff 	mov.w	r2, #4294967295
 80010cc:	69bb      	ldr	r3, [r7, #24]
 80010ce:	fa02 f303 	lsl.w	r3, r2, r3
 80010d2:	43da      	mvns	r2, r3
 80010d4:	68bb      	ldr	r3, [r7, #8]
 80010d6:	401a      	ands	r2, r3
 80010d8:	697b      	ldr	r3, [r7, #20]
 80010da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010dc:	f04f 31ff 	mov.w	r1, #4294967295
 80010e0:	697b      	ldr	r3, [r7, #20]
 80010e2:	fa01 f303 	lsl.w	r3, r1, r3
 80010e6:	43d9      	mvns	r1, r3
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010ec:	4313      	orrs	r3, r2
         );
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	3724      	adds	r7, #36	; 0x24
 80010f2:	46bd      	mov	sp, r7
 80010f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f8:	4770      	bx	lr
	...

080010fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b082      	sub	sp, #8
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	3b01      	subs	r3, #1
 8001108:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800110c:	d301      	bcc.n	8001112 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800110e:	2301      	movs	r3, #1
 8001110:	e00f      	b.n	8001132 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001112:	4a0a      	ldr	r2, [pc, #40]	; (800113c <SysTick_Config+0x40>)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	3b01      	subs	r3, #1
 8001118:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800111a:	210f      	movs	r1, #15
 800111c:	f04f 30ff 	mov.w	r0, #4294967295
 8001120:	f7ff ff8e 	bl	8001040 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001124:	4b05      	ldr	r3, [pc, #20]	; (800113c <SysTick_Config+0x40>)
 8001126:	2200      	movs	r2, #0
 8001128:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800112a:	4b04      	ldr	r3, [pc, #16]	; (800113c <SysTick_Config+0x40>)
 800112c:	2207      	movs	r2, #7
 800112e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001130:	2300      	movs	r3, #0
}
 8001132:	4618      	mov	r0, r3
 8001134:	3708      	adds	r7, #8
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	e000e010 	.word	0xe000e010

08001140 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b082      	sub	sp, #8
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001148:	6878      	ldr	r0, [r7, #4]
 800114a:	f7ff ff29 	bl	8000fa0 <__NVIC_SetPriorityGrouping>
}
 800114e:	bf00      	nop
 8001150:	3708      	adds	r7, #8
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}

08001156 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001156:	b580      	push	{r7, lr}
 8001158:	b086      	sub	sp, #24
 800115a:	af00      	add	r7, sp, #0
 800115c:	4603      	mov	r3, r0
 800115e:	60b9      	str	r1, [r7, #8]
 8001160:	607a      	str	r2, [r7, #4]
 8001162:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001164:	2300      	movs	r3, #0
 8001166:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001168:	f7ff ff3e 	bl	8000fe8 <__NVIC_GetPriorityGrouping>
 800116c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800116e:	687a      	ldr	r2, [r7, #4]
 8001170:	68b9      	ldr	r1, [r7, #8]
 8001172:	6978      	ldr	r0, [r7, #20]
 8001174:	f7ff ff8e 	bl	8001094 <NVIC_EncodePriority>
 8001178:	4602      	mov	r2, r0
 800117a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800117e:	4611      	mov	r1, r2
 8001180:	4618      	mov	r0, r3
 8001182:	f7ff ff5d 	bl	8001040 <__NVIC_SetPriority>
}
 8001186:	bf00      	nop
 8001188:	3718      	adds	r7, #24
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}

0800118e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800118e:	b580      	push	{r7, lr}
 8001190:	b082      	sub	sp, #8
 8001192:	af00      	add	r7, sp, #0
 8001194:	4603      	mov	r3, r0
 8001196:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001198:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800119c:	4618      	mov	r0, r3
 800119e:	f7ff ff31 	bl	8001004 <__NVIC_EnableIRQ>
}
 80011a2:	bf00      	nop
 80011a4:	3708      	adds	r7, #8
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}

080011aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011aa:	b580      	push	{r7, lr}
 80011ac:	b082      	sub	sp, #8
 80011ae:	af00      	add	r7, sp, #0
 80011b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011b2:	6878      	ldr	r0, [r7, #4]
 80011b4:	f7ff ffa2 	bl	80010fc <SysTick_Config>
 80011b8:	4603      	mov	r3, r0
}
 80011ba:	4618      	mov	r0, r3
 80011bc:	3708      	adds	r7, #8
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
	...

080011c4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b086      	sub	sp, #24
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80011cc:	2300      	movs	r3, #0
 80011ce:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80011d0:	f7ff feb6 	bl	8000f40 <HAL_GetTick>
 80011d4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d101      	bne.n	80011e0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80011dc:	2301      	movs	r3, #1
 80011de:	e099      	b.n	8001314 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	2202      	movs	r2, #2
 80011e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	2200      	movs	r2, #0
 80011ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	681a      	ldr	r2, [r3, #0]
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f022 0201 	bic.w	r2, r2, #1
 80011fe:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001200:	e00f      	b.n	8001222 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001202:	f7ff fe9d 	bl	8000f40 <HAL_GetTick>
 8001206:	4602      	mov	r2, r0
 8001208:	693b      	ldr	r3, [r7, #16]
 800120a:	1ad3      	subs	r3, r2, r3
 800120c:	2b05      	cmp	r3, #5
 800120e:	d908      	bls.n	8001222 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	2220      	movs	r2, #32
 8001214:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	2203      	movs	r2, #3
 800121a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800121e:	2303      	movs	r3, #3
 8001220:	e078      	b.n	8001314 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f003 0301 	and.w	r3, r3, #1
 800122c:	2b00      	cmp	r3, #0
 800122e:	d1e8      	bne.n	8001202 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001238:	697a      	ldr	r2, [r7, #20]
 800123a:	4b38      	ldr	r3, [pc, #224]	; (800131c <HAL_DMA_Init+0x158>)
 800123c:	4013      	ands	r3, r2
 800123e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	685a      	ldr	r2, [r3, #4]
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	689b      	ldr	r3, [r3, #8]
 8001248:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800124e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	691b      	ldr	r3, [r3, #16]
 8001254:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800125a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	699b      	ldr	r3, [r3, #24]
 8001260:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001266:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	6a1b      	ldr	r3, [r3, #32]
 800126c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800126e:	697a      	ldr	r2, [r7, #20]
 8001270:	4313      	orrs	r3, r2
 8001272:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001278:	2b04      	cmp	r3, #4
 800127a:	d107      	bne.n	800128c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001284:	4313      	orrs	r3, r2
 8001286:	697a      	ldr	r2, [r7, #20]
 8001288:	4313      	orrs	r3, r2
 800128a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	697a      	ldr	r2, [r7, #20]
 8001292:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	695b      	ldr	r3, [r3, #20]
 800129a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800129c:	697b      	ldr	r3, [r7, #20]
 800129e:	f023 0307 	bic.w	r3, r3, #7
 80012a2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012a8:	697a      	ldr	r2, [r7, #20]
 80012aa:	4313      	orrs	r3, r2
 80012ac:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012b2:	2b04      	cmp	r3, #4
 80012b4:	d117      	bne.n	80012e6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012ba:	697a      	ldr	r2, [r7, #20]
 80012bc:	4313      	orrs	r3, r2
 80012be:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d00e      	beq.n	80012e6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80012c8:	6878      	ldr	r0, [r7, #4]
 80012ca:	f000 fb01 	bl	80018d0 <DMA_CheckFifoParam>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d008      	beq.n	80012e6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	2240      	movs	r2, #64	; 0x40
 80012d8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	2201      	movs	r2, #1
 80012de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80012e2:	2301      	movs	r3, #1
 80012e4:	e016      	b.n	8001314 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	697a      	ldr	r2, [r7, #20]
 80012ec:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80012ee:	6878      	ldr	r0, [r7, #4]
 80012f0:	f000 fab8 	bl	8001864 <DMA_CalcBaseAndBitshift>
 80012f4:	4603      	mov	r3, r0
 80012f6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012fc:	223f      	movs	r2, #63	; 0x3f
 80012fe:	409a      	lsls	r2, r3
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	2200      	movs	r2, #0
 8001308:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	2201      	movs	r2, #1
 800130e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001312:	2300      	movs	r3, #0
}
 8001314:	4618      	mov	r0, r3
 8001316:	3718      	adds	r7, #24
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}
 800131c:	f010803f 	.word	0xf010803f

08001320 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b086      	sub	sp, #24
 8001324:	af00      	add	r7, sp, #0
 8001326:	60f8      	str	r0, [r7, #12]
 8001328:	60b9      	str	r1, [r7, #8]
 800132a:	607a      	str	r2, [r7, #4]
 800132c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800132e:	2300      	movs	r3, #0
 8001330:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001336:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800133e:	2b01      	cmp	r3, #1
 8001340:	d101      	bne.n	8001346 <HAL_DMA_Start_IT+0x26>
 8001342:	2302      	movs	r3, #2
 8001344:	e040      	b.n	80013c8 <HAL_DMA_Start_IT+0xa8>
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	2201      	movs	r2, #1
 800134a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001354:	b2db      	uxtb	r3, r3
 8001356:	2b01      	cmp	r3, #1
 8001358:	d12f      	bne.n	80013ba <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	2202      	movs	r2, #2
 800135e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	2200      	movs	r2, #0
 8001366:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	687a      	ldr	r2, [r7, #4]
 800136c:	68b9      	ldr	r1, [r7, #8]
 800136e:	68f8      	ldr	r0, [r7, #12]
 8001370:	f000 fa4a 	bl	8001808 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001378:	223f      	movs	r2, #63	; 0x3f
 800137a:	409a      	lsls	r2, r3
 800137c:	693b      	ldr	r3, [r7, #16]
 800137e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	681a      	ldr	r2, [r3, #0]
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f042 0216 	orr.w	r2, r2, #22
 800138e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001394:	2b00      	cmp	r3, #0
 8001396:	d007      	beq.n	80013a8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	681a      	ldr	r2, [r3, #0]
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f042 0208 	orr.w	r2, r2, #8
 80013a6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	681a      	ldr	r2, [r3, #0]
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f042 0201 	orr.w	r2, r2, #1
 80013b6:	601a      	str	r2, [r3, #0]
 80013b8:	e005      	b.n	80013c6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	2200      	movs	r2, #0
 80013be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80013c2:	2302      	movs	r3, #2
 80013c4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80013c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80013c8:	4618      	mov	r0, r3
 80013ca:	3718      	adds	r7, #24
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}

080013d0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b084      	sub	sp, #16
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013dc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80013de:	f7ff fdaf 	bl	8000f40 <HAL_GetTick>
 80013e2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80013ea:	b2db      	uxtb	r3, r3
 80013ec:	2b02      	cmp	r3, #2
 80013ee:	d008      	beq.n	8001402 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	2280      	movs	r2, #128	; 0x80
 80013f4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	2200      	movs	r2, #0
 80013fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80013fe:	2301      	movs	r3, #1
 8001400:	e052      	b.n	80014a8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	681a      	ldr	r2, [r3, #0]
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f022 0216 	bic.w	r2, r2, #22
 8001410:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	695a      	ldr	r2, [r3, #20]
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001420:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001426:	2b00      	cmp	r3, #0
 8001428:	d103      	bne.n	8001432 <HAL_DMA_Abort+0x62>
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800142e:	2b00      	cmp	r3, #0
 8001430:	d007      	beq.n	8001442 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	681a      	ldr	r2, [r3, #0]
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f022 0208 	bic.w	r2, r2, #8
 8001440:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	681a      	ldr	r2, [r3, #0]
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f022 0201 	bic.w	r2, r2, #1
 8001450:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001452:	e013      	b.n	800147c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001454:	f7ff fd74 	bl	8000f40 <HAL_GetTick>
 8001458:	4602      	mov	r2, r0
 800145a:	68bb      	ldr	r3, [r7, #8]
 800145c:	1ad3      	subs	r3, r2, r3
 800145e:	2b05      	cmp	r3, #5
 8001460:	d90c      	bls.n	800147c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	2220      	movs	r2, #32
 8001466:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	2203      	movs	r2, #3
 800146c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	2200      	movs	r2, #0
 8001474:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001478:	2303      	movs	r3, #3
 800147a:	e015      	b.n	80014a8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f003 0301 	and.w	r3, r3, #1
 8001486:	2b00      	cmp	r3, #0
 8001488:	d1e4      	bne.n	8001454 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800148e:	223f      	movs	r2, #63	; 0x3f
 8001490:	409a      	lsls	r2, r3
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	2201      	movs	r2, #1
 800149a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	2200      	movs	r2, #0
 80014a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80014a6:	2300      	movs	r3, #0
}
 80014a8:	4618      	mov	r0, r3
 80014aa:	3710      	adds	r7, #16
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}

080014b0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80014b0:	b480      	push	{r7}
 80014b2:	b083      	sub	sp, #12
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80014be:	b2db      	uxtb	r3, r3
 80014c0:	2b02      	cmp	r3, #2
 80014c2:	d004      	beq.n	80014ce <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	2280      	movs	r2, #128	; 0x80
 80014c8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80014ca:	2301      	movs	r3, #1
 80014cc:	e00c      	b.n	80014e8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	2205      	movs	r2, #5
 80014d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	681a      	ldr	r2, [r3, #0]
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f022 0201 	bic.w	r2, r2, #1
 80014e4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80014e6:	2300      	movs	r3, #0
}
 80014e8:	4618      	mov	r0, r3
 80014ea:	370c      	adds	r7, #12
 80014ec:	46bd      	mov	sp, r7
 80014ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f2:	4770      	bx	lr

080014f4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b086      	sub	sp, #24
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80014fc:	2300      	movs	r3, #0
 80014fe:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001500:	4b8e      	ldr	r3, [pc, #568]	; (800173c <HAL_DMA_IRQHandler+0x248>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	4a8e      	ldr	r2, [pc, #568]	; (8001740 <HAL_DMA_IRQHandler+0x24c>)
 8001506:	fba2 2303 	umull	r2, r3, r2, r3
 800150a:	0a9b      	lsrs	r3, r3, #10
 800150c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001512:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001514:	693b      	ldr	r3, [r7, #16]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800151e:	2208      	movs	r2, #8
 8001520:	409a      	lsls	r2, r3
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	4013      	ands	r3, r2
 8001526:	2b00      	cmp	r3, #0
 8001528:	d01a      	beq.n	8001560 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f003 0304 	and.w	r3, r3, #4
 8001534:	2b00      	cmp	r3, #0
 8001536:	d013      	beq.n	8001560 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	681a      	ldr	r2, [r3, #0]
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f022 0204 	bic.w	r2, r2, #4
 8001546:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800154c:	2208      	movs	r2, #8
 800154e:	409a      	lsls	r2, r3
 8001550:	693b      	ldr	r3, [r7, #16]
 8001552:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001558:	f043 0201 	orr.w	r2, r3, #1
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001564:	2201      	movs	r2, #1
 8001566:	409a      	lsls	r2, r3
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	4013      	ands	r3, r2
 800156c:	2b00      	cmp	r3, #0
 800156e:	d012      	beq.n	8001596 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	695b      	ldr	r3, [r3, #20]
 8001576:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800157a:	2b00      	cmp	r3, #0
 800157c:	d00b      	beq.n	8001596 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001582:	2201      	movs	r2, #1
 8001584:	409a      	lsls	r2, r3
 8001586:	693b      	ldr	r3, [r7, #16]
 8001588:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800158e:	f043 0202 	orr.w	r2, r3, #2
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800159a:	2204      	movs	r2, #4
 800159c:	409a      	lsls	r2, r3
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	4013      	ands	r3, r2
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d012      	beq.n	80015cc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f003 0302 	and.w	r3, r3, #2
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d00b      	beq.n	80015cc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015b8:	2204      	movs	r2, #4
 80015ba:	409a      	lsls	r2, r3
 80015bc:	693b      	ldr	r3, [r7, #16]
 80015be:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015c4:	f043 0204 	orr.w	r2, r3, #4
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015d0:	2210      	movs	r2, #16
 80015d2:	409a      	lsls	r2, r3
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	4013      	ands	r3, r2
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d043      	beq.n	8001664 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f003 0308 	and.w	r3, r3, #8
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d03c      	beq.n	8001664 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015ee:	2210      	movs	r2, #16
 80015f0:	409a      	lsls	r2, r3
 80015f2:	693b      	ldr	r3, [r7, #16]
 80015f4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001600:	2b00      	cmp	r3, #0
 8001602:	d018      	beq.n	8001636 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800160e:	2b00      	cmp	r3, #0
 8001610:	d108      	bne.n	8001624 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001616:	2b00      	cmp	r3, #0
 8001618:	d024      	beq.n	8001664 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800161e:	6878      	ldr	r0, [r7, #4]
 8001620:	4798      	blx	r3
 8001622:	e01f      	b.n	8001664 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001628:	2b00      	cmp	r3, #0
 800162a:	d01b      	beq.n	8001664 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001630:	6878      	ldr	r0, [r7, #4]
 8001632:	4798      	blx	r3
 8001634:	e016      	b.n	8001664 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001640:	2b00      	cmp	r3, #0
 8001642:	d107      	bne.n	8001654 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	681a      	ldr	r2, [r3, #0]
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f022 0208 	bic.w	r2, r2, #8
 8001652:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001658:	2b00      	cmp	r3, #0
 800165a:	d003      	beq.n	8001664 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001660:	6878      	ldr	r0, [r7, #4]
 8001662:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001668:	2220      	movs	r2, #32
 800166a:	409a      	lsls	r2, r3
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	4013      	ands	r3, r2
 8001670:	2b00      	cmp	r3, #0
 8001672:	f000 808f 	beq.w	8001794 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f003 0310 	and.w	r3, r3, #16
 8001680:	2b00      	cmp	r3, #0
 8001682:	f000 8087 	beq.w	8001794 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800168a:	2220      	movs	r2, #32
 800168c:	409a      	lsls	r2, r3
 800168e:	693b      	ldr	r3, [r7, #16]
 8001690:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001698:	b2db      	uxtb	r3, r3
 800169a:	2b05      	cmp	r3, #5
 800169c:	d136      	bne.n	800170c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	681a      	ldr	r2, [r3, #0]
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f022 0216 	bic.w	r2, r2, #22
 80016ac:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	695a      	ldr	r2, [r3, #20]
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80016bc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d103      	bne.n	80016ce <HAL_DMA_IRQHandler+0x1da>
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d007      	beq.n	80016de <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	681a      	ldr	r2, [r3, #0]
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f022 0208 	bic.w	r2, r2, #8
 80016dc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016e2:	223f      	movs	r2, #63	; 0x3f
 80016e4:	409a      	lsls	r2, r3
 80016e6:	693b      	ldr	r3, [r7, #16]
 80016e8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	2201      	movs	r2, #1
 80016ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	2200      	movs	r2, #0
 80016f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d07e      	beq.n	8001800 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001706:	6878      	ldr	r0, [r7, #4]
 8001708:	4798      	blx	r3
        }
        return;
 800170a:	e079      	b.n	8001800 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001716:	2b00      	cmp	r3, #0
 8001718:	d01d      	beq.n	8001756 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001724:	2b00      	cmp	r3, #0
 8001726:	d10d      	bne.n	8001744 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800172c:	2b00      	cmp	r3, #0
 800172e:	d031      	beq.n	8001794 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001734:	6878      	ldr	r0, [r7, #4]
 8001736:	4798      	blx	r3
 8001738:	e02c      	b.n	8001794 <HAL_DMA_IRQHandler+0x2a0>
 800173a:	bf00      	nop
 800173c:	20000000 	.word	0x20000000
 8001740:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001748:	2b00      	cmp	r3, #0
 800174a:	d023      	beq.n	8001794 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001750:	6878      	ldr	r0, [r7, #4]
 8001752:	4798      	blx	r3
 8001754:	e01e      	b.n	8001794 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001760:	2b00      	cmp	r3, #0
 8001762:	d10f      	bne.n	8001784 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	681a      	ldr	r2, [r3, #0]
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f022 0210 	bic.w	r2, r2, #16
 8001772:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	2201      	movs	r2, #1
 8001778:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	2200      	movs	r2, #0
 8001780:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001788:	2b00      	cmp	r3, #0
 800178a:	d003      	beq.n	8001794 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001790:	6878      	ldr	r0, [r7, #4]
 8001792:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001798:	2b00      	cmp	r3, #0
 800179a:	d032      	beq.n	8001802 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017a0:	f003 0301 	and.w	r3, r3, #1
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d022      	beq.n	80017ee <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	2205      	movs	r2, #5
 80017ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	681a      	ldr	r2, [r3, #0]
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f022 0201 	bic.w	r2, r2, #1
 80017be:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80017c0:	68bb      	ldr	r3, [r7, #8]
 80017c2:	3301      	adds	r3, #1
 80017c4:	60bb      	str	r3, [r7, #8]
 80017c6:	697a      	ldr	r2, [r7, #20]
 80017c8:	429a      	cmp	r2, r3
 80017ca:	d307      	bcc.n	80017dc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f003 0301 	and.w	r3, r3, #1
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d1f2      	bne.n	80017c0 <HAL_DMA_IRQHandler+0x2cc>
 80017da:	e000      	b.n	80017de <HAL_DMA_IRQHandler+0x2ea>
          break;
 80017dc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	2201      	movs	r2, #1
 80017e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	2200      	movs	r2, #0
 80017ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d005      	beq.n	8001802 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017fa:	6878      	ldr	r0, [r7, #4]
 80017fc:	4798      	blx	r3
 80017fe:	e000      	b.n	8001802 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001800:	bf00      	nop
    }
  }
}
 8001802:	3718      	adds	r7, #24
 8001804:	46bd      	mov	sp, r7
 8001806:	bd80      	pop	{r7, pc}

08001808 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001808:	b480      	push	{r7}
 800180a:	b085      	sub	sp, #20
 800180c:	af00      	add	r7, sp, #0
 800180e:	60f8      	str	r0, [r7, #12]
 8001810:	60b9      	str	r1, [r7, #8]
 8001812:	607a      	str	r2, [r7, #4]
 8001814:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	681a      	ldr	r2, [r3, #0]
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001824:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	683a      	ldr	r2, [r7, #0]
 800182c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	689b      	ldr	r3, [r3, #8]
 8001832:	2b40      	cmp	r3, #64	; 0x40
 8001834:	d108      	bne.n	8001848 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	687a      	ldr	r2, [r7, #4]
 800183c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	68ba      	ldr	r2, [r7, #8]
 8001844:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001846:	e007      	b.n	8001858 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	68ba      	ldr	r2, [r7, #8]
 800184e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	687a      	ldr	r2, [r7, #4]
 8001856:	60da      	str	r2, [r3, #12]
}
 8001858:	bf00      	nop
 800185a:	3714      	adds	r7, #20
 800185c:	46bd      	mov	sp, r7
 800185e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001862:	4770      	bx	lr

08001864 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001864:	b480      	push	{r7}
 8001866:	b085      	sub	sp, #20
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	b2db      	uxtb	r3, r3
 8001872:	3b10      	subs	r3, #16
 8001874:	4a14      	ldr	r2, [pc, #80]	; (80018c8 <DMA_CalcBaseAndBitshift+0x64>)
 8001876:	fba2 2303 	umull	r2, r3, r2, r3
 800187a:	091b      	lsrs	r3, r3, #4
 800187c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800187e:	4a13      	ldr	r2, [pc, #76]	; (80018cc <DMA_CalcBaseAndBitshift+0x68>)
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	4413      	add	r3, r2
 8001884:	781b      	ldrb	r3, [r3, #0]
 8001886:	461a      	mov	r2, r3
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	2b03      	cmp	r3, #3
 8001890:	d909      	bls.n	80018a6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800189a:	f023 0303 	bic.w	r3, r3, #3
 800189e:	1d1a      	adds	r2, r3, #4
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	659a      	str	r2, [r3, #88]	; 0x58
 80018a4:	e007      	b.n	80018b6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80018ae:	f023 0303 	bic.w	r3, r3, #3
 80018b2:	687a      	ldr	r2, [r7, #4]
 80018b4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80018ba:	4618      	mov	r0, r3
 80018bc:	3714      	adds	r7, #20
 80018be:	46bd      	mov	sp, r7
 80018c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c4:	4770      	bx	lr
 80018c6:	bf00      	nop
 80018c8:	aaaaaaab 	.word	0xaaaaaaab
 80018cc:	0800991c 	.word	0x0800991c

080018d0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80018d0:	b480      	push	{r7}
 80018d2:	b085      	sub	sp, #20
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80018d8:	2300      	movs	r3, #0
 80018da:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018e0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	699b      	ldr	r3, [r3, #24]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d11f      	bne.n	800192a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80018ea:	68bb      	ldr	r3, [r7, #8]
 80018ec:	2b03      	cmp	r3, #3
 80018ee:	d856      	bhi.n	800199e <DMA_CheckFifoParam+0xce>
 80018f0:	a201      	add	r2, pc, #4	; (adr r2, 80018f8 <DMA_CheckFifoParam+0x28>)
 80018f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018f6:	bf00      	nop
 80018f8:	08001909 	.word	0x08001909
 80018fc:	0800191b 	.word	0x0800191b
 8001900:	08001909 	.word	0x08001909
 8001904:	0800199f 	.word	0x0800199f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800190c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001910:	2b00      	cmp	r3, #0
 8001912:	d046      	beq.n	80019a2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001914:	2301      	movs	r3, #1
 8001916:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001918:	e043      	b.n	80019a2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800191e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001922:	d140      	bne.n	80019a6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001924:	2301      	movs	r3, #1
 8001926:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001928:	e03d      	b.n	80019a6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	699b      	ldr	r3, [r3, #24]
 800192e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001932:	d121      	bne.n	8001978 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001934:	68bb      	ldr	r3, [r7, #8]
 8001936:	2b03      	cmp	r3, #3
 8001938:	d837      	bhi.n	80019aa <DMA_CheckFifoParam+0xda>
 800193a:	a201      	add	r2, pc, #4	; (adr r2, 8001940 <DMA_CheckFifoParam+0x70>)
 800193c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001940:	08001951 	.word	0x08001951
 8001944:	08001957 	.word	0x08001957
 8001948:	08001951 	.word	0x08001951
 800194c:	08001969 	.word	0x08001969
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001950:	2301      	movs	r3, #1
 8001952:	73fb      	strb	r3, [r7, #15]
      break;
 8001954:	e030      	b.n	80019b8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800195a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800195e:	2b00      	cmp	r3, #0
 8001960:	d025      	beq.n	80019ae <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001962:	2301      	movs	r3, #1
 8001964:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001966:	e022      	b.n	80019ae <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800196c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001970:	d11f      	bne.n	80019b2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001972:	2301      	movs	r3, #1
 8001974:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001976:	e01c      	b.n	80019b2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001978:	68bb      	ldr	r3, [r7, #8]
 800197a:	2b02      	cmp	r3, #2
 800197c:	d903      	bls.n	8001986 <DMA_CheckFifoParam+0xb6>
 800197e:	68bb      	ldr	r3, [r7, #8]
 8001980:	2b03      	cmp	r3, #3
 8001982:	d003      	beq.n	800198c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001984:	e018      	b.n	80019b8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001986:	2301      	movs	r3, #1
 8001988:	73fb      	strb	r3, [r7, #15]
      break;
 800198a:	e015      	b.n	80019b8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001990:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001994:	2b00      	cmp	r3, #0
 8001996:	d00e      	beq.n	80019b6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001998:	2301      	movs	r3, #1
 800199a:	73fb      	strb	r3, [r7, #15]
      break;
 800199c:	e00b      	b.n	80019b6 <DMA_CheckFifoParam+0xe6>
      break;
 800199e:	bf00      	nop
 80019a0:	e00a      	b.n	80019b8 <DMA_CheckFifoParam+0xe8>
      break;
 80019a2:	bf00      	nop
 80019a4:	e008      	b.n	80019b8 <DMA_CheckFifoParam+0xe8>
      break;
 80019a6:	bf00      	nop
 80019a8:	e006      	b.n	80019b8 <DMA_CheckFifoParam+0xe8>
      break;
 80019aa:	bf00      	nop
 80019ac:	e004      	b.n	80019b8 <DMA_CheckFifoParam+0xe8>
      break;
 80019ae:	bf00      	nop
 80019b0:	e002      	b.n	80019b8 <DMA_CheckFifoParam+0xe8>
      break;   
 80019b2:	bf00      	nop
 80019b4:	e000      	b.n	80019b8 <DMA_CheckFifoParam+0xe8>
      break;
 80019b6:	bf00      	nop
    }
  } 
  
  return status; 
 80019b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80019ba:	4618      	mov	r0, r3
 80019bc:	3714      	adds	r7, #20
 80019be:	46bd      	mov	sp, r7
 80019c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c4:	4770      	bx	lr
 80019c6:	bf00      	nop

080019c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019c8:	b480      	push	{r7}
 80019ca:	b089      	sub	sp, #36	; 0x24
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
 80019d0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80019d2:	2300      	movs	r3, #0
 80019d4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80019d6:	2300      	movs	r3, #0
 80019d8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80019da:	2300      	movs	r3, #0
 80019dc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019de:	2300      	movs	r3, #0
 80019e0:	61fb      	str	r3, [r7, #28]
 80019e2:	e159      	b.n	8001c98 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80019e4:	2201      	movs	r2, #1
 80019e6:	69fb      	ldr	r3, [r7, #28]
 80019e8:	fa02 f303 	lsl.w	r3, r2, r3
 80019ec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	697a      	ldr	r2, [r7, #20]
 80019f4:	4013      	ands	r3, r2
 80019f6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80019f8:	693a      	ldr	r2, [r7, #16]
 80019fa:	697b      	ldr	r3, [r7, #20]
 80019fc:	429a      	cmp	r2, r3
 80019fe:	f040 8148 	bne.w	8001c92 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	f003 0303 	and.w	r3, r3, #3
 8001a0a:	2b01      	cmp	r3, #1
 8001a0c:	d005      	beq.n	8001a1a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a16:	2b02      	cmp	r3, #2
 8001a18:	d130      	bne.n	8001a7c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	689b      	ldr	r3, [r3, #8]
 8001a1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a20:	69fb      	ldr	r3, [r7, #28]
 8001a22:	005b      	lsls	r3, r3, #1
 8001a24:	2203      	movs	r2, #3
 8001a26:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2a:	43db      	mvns	r3, r3
 8001a2c:	69ba      	ldr	r2, [r7, #24]
 8001a2e:	4013      	ands	r3, r2
 8001a30:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	68da      	ldr	r2, [r3, #12]
 8001a36:	69fb      	ldr	r3, [r7, #28]
 8001a38:	005b      	lsls	r3, r3, #1
 8001a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3e:	69ba      	ldr	r2, [r7, #24]
 8001a40:	4313      	orrs	r3, r2
 8001a42:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	69ba      	ldr	r2, [r7, #24]
 8001a48:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a50:	2201      	movs	r2, #1
 8001a52:	69fb      	ldr	r3, [r7, #28]
 8001a54:	fa02 f303 	lsl.w	r3, r2, r3
 8001a58:	43db      	mvns	r3, r3
 8001a5a:	69ba      	ldr	r2, [r7, #24]
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	091b      	lsrs	r3, r3, #4
 8001a66:	f003 0201 	and.w	r2, r3, #1
 8001a6a:	69fb      	ldr	r3, [r7, #28]
 8001a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a70:	69ba      	ldr	r2, [r7, #24]
 8001a72:	4313      	orrs	r3, r2
 8001a74:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	69ba      	ldr	r2, [r7, #24]
 8001a7a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	f003 0303 	and.w	r3, r3, #3
 8001a84:	2b03      	cmp	r3, #3
 8001a86:	d017      	beq.n	8001ab8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	68db      	ldr	r3, [r3, #12]
 8001a8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a8e:	69fb      	ldr	r3, [r7, #28]
 8001a90:	005b      	lsls	r3, r3, #1
 8001a92:	2203      	movs	r2, #3
 8001a94:	fa02 f303 	lsl.w	r3, r2, r3
 8001a98:	43db      	mvns	r3, r3
 8001a9a:	69ba      	ldr	r2, [r7, #24]
 8001a9c:	4013      	ands	r3, r2
 8001a9e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	689a      	ldr	r2, [r3, #8]
 8001aa4:	69fb      	ldr	r3, [r7, #28]
 8001aa6:	005b      	lsls	r3, r3, #1
 8001aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8001aac:	69ba      	ldr	r2, [r7, #24]
 8001aae:	4313      	orrs	r3, r2
 8001ab0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	69ba      	ldr	r2, [r7, #24]
 8001ab6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	f003 0303 	and.w	r3, r3, #3
 8001ac0:	2b02      	cmp	r3, #2
 8001ac2:	d123      	bne.n	8001b0c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ac4:	69fb      	ldr	r3, [r7, #28]
 8001ac6:	08da      	lsrs	r2, r3, #3
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	3208      	adds	r2, #8
 8001acc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ad0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001ad2:	69fb      	ldr	r3, [r7, #28]
 8001ad4:	f003 0307 	and.w	r3, r3, #7
 8001ad8:	009b      	lsls	r3, r3, #2
 8001ada:	220f      	movs	r2, #15
 8001adc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae0:	43db      	mvns	r3, r3
 8001ae2:	69ba      	ldr	r2, [r7, #24]
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	691a      	ldr	r2, [r3, #16]
 8001aec:	69fb      	ldr	r3, [r7, #28]
 8001aee:	f003 0307 	and.w	r3, r3, #7
 8001af2:	009b      	lsls	r3, r3, #2
 8001af4:	fa02 f303 	lsl.w	r3, r2, r3
 8001af8:	69ba      	ldr	r2, [r7, #24]
 8001afa:	4313      	orrs	r3, r2
 8001afc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001afe:	69fb      	ldr	r3, [r7, #28]
 8001b00:	08da      	lsrs	r2, r3, #3
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	3208      	adds	r2, #8
 8001b06:	69b9      	ldr	r1, [r7, #24]
 8001b08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b12:	69fb      	ldr	r3, [r7, #28]
 8001b14:	005b      	lsls	r3, r3, #1
 8001b16:	2203      	movs	r2, #3
 8001b18:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1c:	43db      	mvns	r3, r3
 8001b1e:	69ba      	ldr	r2, [r7, #24]
 8001b20:	4013      	ands	r3, r2
 8001b22:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	f003 0203 	and.w	r2, r3, #3
 8001b2c:	69fb      	ldr	r3, [r7, #28]
 8001b2e:	005b      	lsls	r3, r3, #1
 8001b30:	fa02 f303 	lsl.w	r3, r2, r3
 8001b34:	69ba      	ldr	r2, [r7, #24]
 8001b36:	4313      	orrs	r3, r2
 8001b38:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	69ba      	ldr	r2, [r7, #24]
 8001b3e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	f000 80a2 	beq.w	8001c92 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b4e:	2300      	movs	r3, #0
 8001b50:	60fb      	str	r3, [r7, #12]
 8001b52:	4b57      	ldr	r3, [pc, #348]	; (8001cb0 <HAL_GPIO_Init+0x2e8>)
 8001b54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b56:	4a56      	ldr	r2, [pc, #344]	; (8001cb0 <HAL_GPIO_Init+0x2e8>)
 8001b58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b5c:	6453      	str	r3, [r2, #68]	; 0x44
 8001b5e:	4b54      	ldr	r3, [pc, #336]	; (8001cb0 <HAL_GPIO_Init+0x2e8>)
 8001b60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b66:	60fb      	str	r3, [r7, #12]
 8001b68:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b6a:	4a52      	ldr	r2, [pc, #328]	; (8001cb4 <HAL_GPIO_Init+0x2ec>)
 8001b6c:	69fb      	ldr	r3, [r7, #28]
 8001b6e:	089b      	lsrs	r3, r3, #2
 8001b70:	3302      	adds	r3, #2
 8001b72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b76:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b78:	69fb      	ldr	r3, [r7, #28]
 8001b7a:	f003 0303 	and.w	r3, r3, #3
 8001b7e:	009b      	lsls	r3, r3, #2
 8001b80:	220f      	movs	r2, #15
 8001b82:	fa02 f303 	lsl.w	r3, r2, r3
 8001b86:	43db      	mvns	r3, r3
 8001b88:	69ba      	ldr	r2, [r7, #24]
 8001b8a:	4013      	ands	r3, r2
 8001b8c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	4a49      	ldr	r2, [pc, #292]	; (8001cb8 <HAL_GPIO_Init+0x2f0>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d019      	beq.n	8001bca <HAL_GPIO_Init+0x202>
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	4a48      	ldr	r2, [pc, #288]	; (8001cbc <HAL_GPIO_Init+0x2f4>)
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d013      	beq.n	8001bc6 <HAL_GPIO_Init+0x1fe>
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	4a47      	ldr	r2, [pc, #284]	; (8001cc0 <HAL_GPIO_Init+0x2f8>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d00d      	beq.n	8001bc2 <HAL_GPIO_Init+0x1fa>
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	4a46      	ldr	r2, [pc, #280]	; (8001cc4 <HAL_GPIO_Init+0x2fc>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d007      	beq.n	8001bbe <HAL_GPIO_Init+0x1f6>
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	4a45      	ldr	r2, [pc, #276]	; (8001cc8 <HAL_GPIO_Init+0x300>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d101      	bne.n	8001bba <HAL_GPIO_Init+0x1f2>
 8001bb6:	2304      	movs	r3, #4
 8001bb8:	e008      	b.n	8001bcc <HAL_GPIO_Init+0x204>
 8001bba:	2307      	movs	r3, #7
 8001bbc:	e006      	b.n	8001bcc <HAL_GPIO_Init+0x204>
 8001bbe:	2303      	movs	r3, #3
 8001bc0:	e004      	b.n	8001bcc <HAL_GPIO_Init+0x204>
 8001bc2:	2302      	movs	r3, #2
 8001bc4:	e002      	b.n	8001bcc <HAL_GPIO_Init+0x204>
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	e000      	b.n	8001bcc <HAL_GPIO_Init+0x204>
 8001bca:	2300      	movs	r3, #0
 8001bcc:	69fa      	ldr	r2, [r7, #28]
 8001bce:	f002 0203 	and.w	r2, r2, #3
 8001bd2:	0092      	lsls	r2, r2, #2
 8001bd4:	4093      	lsls	r3, r2
 8001bd6:	69ba      	ldr	r2, [r7, #24]
 8001bd8:	4313      	orrs	r3, r2
 8001bda:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001bdc:	4935      	ldr	r1, [pc, #212]	; (8001cb4 <HAL_GPIO_Init+0x2ec>)
 8001bde:	69fb      	ldr	r3, [r7, #28]
 8001be0:	089b      	lsrs	r3, r3, #2
 8001be2:	3302      	adds	r3, #2
 8001be4:	69ba      	ldr	r2, [r7, #24]
 8001be6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001bea:	4b38      	ldr	r3, [pc, #224]	; (8001ccc <HAL_GPIO_Init+0x304>)
 8001bec:	689b      	ldr	r3, [r3, #8]
 8001bee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bf0:	693b      	ldr	r3, [r7, #16]
 8001bf2:	43db      	mvns	r3, r3
 8001bf4:	69ba      	ldr	r2, [r7, #24]
 8001bf6:	4013      	ands	r3, r2
 8001bf8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d003      	beq.n	8001c0e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001c06:	69ba      	ldr	r2, [r7, #24]
 8001c08:	693b      	ldr	r3, [r7, #16]
 8001c0a:	4313      	orrs	r3, r2
 8001c0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c0e:	4a2f      	ldr	r2, [pc, #188]	; (8001ccc <HAL_GPIO_Init+0x304>)
 8001c10:	69bb      	ldr	r3, [r7, #24]
 8001c12:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c14:	4b2d      	ldr	r3, [pc, #180]	; (8001ccc <HAL_GPIO_Init+0x304>)
 8001c16:	68db      	ldr	r3, [r3, #12]
 8001c18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c1a:	693b      	ldr	r3, [r7, #16]
 8001c1c:	43db      	mvns	r3, r3
 8001c1e:	69ba      	ldr	r2, [r7, #24]
 8001c20:	4013      	ands	r3, r2
 8001c22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d003      	beq.n	8001c38 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001c30:	69ba      	ldr	r2, [r7, #24]
 8001c32:	693b      	ldr	r3, [r7, #16]
 8001c34:	4313      	orrs	r3, r2
 8001c36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c38:	4a24      	ldr	r2, [pc, #144]	; (8001ccc <HAL_GPIO_Init+0x304>)
 8001c3a:	69bb      	ldr	r3, [r7, #24]
 8001c3c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001c3e:	4b23      	ldr	r3, [pc, #140]	; (8001ccc <HAL_GPIO_Init+0x304>)
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c44:	693b      	ldr	r3, [r7, #16]
 8001c46:	43db      	mvns	r3, r3
 8001c48:	69ba      	ldr	r2, [r7, #24]
 8001c4a:	4013      	ands	r3, r2
 8001c4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d003      	beq.n	8001c62 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001c5a:	69ba      	ldr	r2, [r7, #24]
 8001c5c:	693b      	ldr	r3, [r7, #16]
 8001c5e:	4313      	orrs	r3, r2
 8001c60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c62:	4a1a      	ldr	r2, [pc, #104]	; (8001ccc <HAL_GPIO_Init+0x304>)
 8001c64:	69bb      	ldr	r3, [r7, #24]
 8001c66:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c68:	4b18      	ldr	r3, [pc, #96]	; (8001ccc <HAL_GPIO_Init+0x304>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c6e:	693b      	ldr	r3, [r7, #16]
 8001c70:	43db      	mvns	r3, r3
 8001c72:	69ba      	ldr	r2, [r7, #24]
 8001c74:	4013      	ands	r3, r2
 8001c76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d003      	beq.n	8001c8c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001c84:	69ba      	ldr	r2, [r7, #24]
 8001c86:	693b      	ldr	r3, [r7, #16]
 8001c88:	4313      	orrs	r3, r2
 8001c8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c8c:	4a0f      	ldr	r2, [pc, #60]	; (8001ccc <HAL_GPIO_Init+0x304>)
 8001c8e:	69bb      	ldr	r3, [r7, #24]
 8001c90:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c92:	69fb      	ldr	r3, [r7, #28]
 8001c94:	3301      	adds	r3, #1
 8001c96:	61fb      	str	r3, [r7, #28]
 8001c98:	69fb      	ldr	r3, [r7, #28]
 8001c9a:	2b0f      	cmp	r3, #15
 8001c9c:	f67f aea2 	bls.w	80019e4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ca0:	bf00      	nop
 8001ca2:	bf00      	nop
 8001ca4:	3724      	adds	r7, #36	; 0x24
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cac:	4770      	bx	lr
 8001cae:	bf00      	nop
 8001cb0:	40023800 	.word	0x40023800
 8001cb4:	40013800 	.word	0x40013800
 8001cb8:	40020000 	.word	0x40020000
 8001cbc:	40020400 	.word	0x40020400
 8001cc0:	40020800 	.word	0x40020800
 8001cc4:	40020c00 	.word	0x40020c00
 8001cc8:	40021000 	.word	0x40021000
 8001ccc:	40013c00 	.word	0x40013c00

08001cd0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b086      	sub	sp, #24
 8001cd4:	af02      	add	r7, sp, #8
 8001cd6:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d101      	bne.n	8001ce2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	e101      	b.n	8001ee6 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 8001cee:	b2db      	uxtb	r3, r3
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d106      	bne.n	8001d02 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001cfc:	6878      	ldr	r0, [r7, #4]
 8001cfe:	f006 fdff 	bl	8008900 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2203      	movs	r2, #3
 8001d06:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8001d0a:	68bb      	ldr	r3, [r7, #8]
 8001d0c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001d10:	d102      	bne.n	8001d18 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2200      	movs	r2, #0
 8001d16:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f003 f988 	bl	8005032 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6818      	ldr	r0, [r3, #0]
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	7c1a      	ldrb	r2, [r3, #16]
 8001d2a:	f88d 2000 	strb.w	r2, [sp]
 8001d2e:	3304      	adds	r3, #4
 8001d30:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d32:	f003 f867 	bl	8004e04 <USB_CoreInit>
 8001d36:	4603      	mov	r3, r0
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d005      	beq.n	8001d48 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2202      	movs	r2, #2
 8001d40:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8001d44:	2301      	movs	r3, #1
 8001d46:	e0ce      	b.n	8001ee6 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	2100      	movs	r1, #0
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f003 f980 	bl	8005054 <USB_SetCurrentMode>
 8001d54:	4603      	mov	r3, r0
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d005      	beq.n	8001d66 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2202      	movs	r2, #2
 8001d5e:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8001d62:	2301      	movs	r3, #1
 8001d64:	e0bf      	b.n	8001ee6 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d66:	2300      	movs	r3, #0
 8001d68:	73fb      	strb	r3, [r7, #15]
 8001d6a:	e04a      	b.n	8001e02 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001d6c:	7bfa      	ldrb	r2, [r7, #15]
 8001d6e:	6879      	ldr	r1, [r7, #4]
 8001d70:	4613      	mov	r3, r2
 8001d72:	00db      	lsls	r3, r3, #3
 8001d74:	4413      	add	r3, r2
 8001d76:	009b      	lsls	r3, r3, #2
 8001d78:	440b      	add	r3, r1
 8001d7a:	3315      	adds	r3, #21
 8001d7c:	2201      	movs	r2, #1
 8001d7e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001d80:	7bfa      	ldrb	r2, [r7, #15]
 8001d82:	6879      	ldr	r1, [r7, #4]
 8001d84:	4613      	mov	r3, r2
 8001d86:	00db      	lsls	r3, r3, #3
 8001d88:	4413      	add	r3, r2
 8001d8a:	009b      	lsls	r3, r3, #2
 8001d8c:	440b      	add	r3, r1
 8001d8e:	3314      	adds	r3, #20
 8001d90:	7bfa      	ldrb	r2, [r7, #15]
 8001d92:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001d94:	7bfa      	ldrb	r2, [r7, #15]
 8001d96:	7bfb      	ldrb	r3, [r7, #15]
 8001d98:	b298      	uxth	r0, r3
 8001d9a:	6879      	ldr	r1, [r7, #4]
 8001d9c:	4613      	mov	r3, r2
 8001d9e:	00db      	lsls	r3, r3, #3
 8001da0:	4413      	add	r3, r2
 8001da2:	009b      	lsls	r3, r3, #2
 8001da4:	440b      	add	r3, r1
 8001da6:	332e      	adds	r3, #46	; 0x2e
 8001da8:	4602      	mov	r2, r0
 8001daa:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001dac:	7bfa      	ldrb	r2, [r7, #15]
 8001dae:	6879      	ldr	r1, [r7, #4]
 8001db0:	4613      	mov	r3, r2
 8001db2:	00db      	lsls	r3, r3, #3
 8001db4:	4413      	add	r3, r2
 8001db6:	009b      	lsls	r3, r3, #2
 8001db8:	440b      	add	r3, r1
 8001dba:	3318      	adds	r3, #24
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001dc0:	7bfa      	ldrb	r2, [r7, #15]
 8001dc2:	6879      	ldr	r1, [r7, #4]
 8001dc4:	4613      	mov	r3, r2
 8001dc6:	00db      	lsls	r3, r3, #3
 8001dc8:	4413      	add	r3, r2
 8001dca:	009b      	lsls	r3, r3, #2
 8001dcc:	440b      	add	r3, r1
 8001dce:	331c      	adds	r3, #28
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001dd4:	7bfa      	ldrb	r2, [r7, #15]
 8001dd6:	6879      	ldr	r1, [r7, #4]
 8001dd8:	4613      	mov	r3, r2
 8001dda:	00db      	lsls	r3, r3, #3
 8001ddc:	4413      	add	r3, r2
 8001dde:	009b      	lsls	r3, r3, #2
 8001de0:	440b      	add	r3, r1
 8001de2:	3320      	adds	r3, #32
 8001de4:	2200      	movs	r2, #0
 8001de6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001de8:	7bfa      	ldrb	r2, [r7, #15]
 8001dea:	6879      	ldr	r1, [r7, #4]
 8001dec:	4613      	mov	r3, r2
 8001dee:	00db      	lsls	r3, r3, #3
 8001df0:	4413      	add	r3, r2
 8001df2:	009b      	lsls	r3, r3, #2
 8001df4:	440b      	add	r3, r1
 8001df6:	3324      	adds	r3, #36	; 0x24
 8001df8:	2200      	movs	r2, #0
 8001dfa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001dfc:	7bfb      	ldrb	r3, [r7, #15]
 8001dfe:	3301      	adds	r3, #1
 8001e00:	73fb      	strb	r3, [r7, #15]
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	791b      	ldrb	r3, [r3, #4]
 8001e06:	7bfa      	ldrb	r2, [r7, #15]
 8001e08:	429a      	cmp	r2, r3
 8001e0a:	d3af      	bcc.n	8001d6c <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	73fb      	strb	r3, [r7, #15]
 8001e10:	e044      	b.n	8001e9c <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001e12:	7bfa      	ldrb	r2, [r7, #15]
 8001e14:	6879      	ldr	r1, [r7, #4]
 8001e16:	4613      	mov	r3, r2
 8001e18:	00db      	lsls	r3, r3, #3
 8001e1a:	4413      	add	r3, r2
 8001e1c:	009b      	lsls	r3, r3, #2
 8001e1e:	440b      	add	r3, r1
 8001e20:	f203 2355 	addw	r3, r3, #597	; 0x255
 8001e24:	2200      	movs	r2, #0
 8001e26:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001e28:	7bfa      	ldrb	r2, [r7, #15]
 8001e2a:	6879      	ldr	r1, [r7, #4]
 8001e2c:	4613      	mov	r3, r2
 8001e2e:	00db      	lsls	r3, r3, #3
 8001e30:	4413      	add	r3, r2
 8001e32:	009b      	lsls	r3, r3, #2
 8001e34:	440b      	add	r3, r1
 8001e36:	f503 7315 	add.w	r3, r3, #596	; 0x254
 8001e3a:	7bfa      	ldrb	r2, [r7, #15]
 8001e3c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001e3e:	7bfa      	ldrb	r2, [r7, #15]
 8001e40:	6879      	ldr	r1, [r7, #4]
 8001e42:	4613      	mov	r3, r2
 8001e44:	00db      	lsls	r3, r3, #3
 8001e46:	4413      	add	r3, r2
 8001e48:	009b      	lsls	r3, r3, #2
 8001e4a:	440b      	add	r3, r1
 8001e4c:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8001e50:	2200      	movs	r2, #0
 8001e52:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001e54:	7bfa      	ldrb	r2, [r7, #15]
 8001e56:	6879      	ldr	r1, [r7, #4]
 8001e58:	4613      	mov	r3, r2
 8001e5a:	00db      	lsls	r3, r3, #3
 8001e5c:	4413      	add	r3, r2
 8001e5e:	009b      	lsls	r3, r3, #2
 8001e60:	440b      	add	r3, r1
 8001e62:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 8001e66:	2200      	movs	r2, #0
 8001e68:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001e6a:	7bfa      	ldrb	r2, [r7, #15]
 8001e6c:	6879      	ldr	r1, [r7, #4]
 8001e6e:	4613      	mov	r3, r2
 8001e70:	00db      	lsls	r3, r3, #3
 8001e72:	4413      	add	r3, r2
 8001e74:	009b      	lsls	r3, r3, #2
 8001e76:	440b      	add	r3, r1
 8001e78:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001e80:	7bfa      	ldrb	r2, [r7, #15]
 8001e82:	6879      	ldr	r1, [r7, #4]
 8001e84:	4613      	mov	r3, r2
 8001e86:	00db      	lsls	r3, r3, #3
 8001e88:	4413      	add	r3, r2
 8001e8a:	009b      	lsls	r3, r3, #2
 8001e8c:	440b      	add	r3, r1
 8001e8e:	f503 7319 	add.w	r3, r3, #612	; 0x264
 8001e92:	2200      	movs	r2, #0
 8001e94:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e96:	7bfb      	ldrb	r3, [r7, #15]
 8001e98:	3301      	adds	r3, #1
 8001e9a:	73fb      	strb	r3, [r7, #15]
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	791b      	ldrb	r3, [r3, #4]
 8001ea0:	7bfa      	ldrb	r2, [r7, #15]
 8001ea2:	429a      	cmp	r2, r3
 8001ea4:	d3b5      	bcc.n	8001e12 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6818      	ldr	r0, [r3, #0]
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	7c1a      	ldrb	r2, [r3, #16]
 8001eae:	f88d 2000 	strb.w	r2, [sp]
 8001eb2:	3304      	adds	r3, #4
 8001eb4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001eb6:	f003 f919 	bl	80050ec <USB_DevInit>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d005      	beq.n	8001ecc <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2202      	movs	r2, #2
 8001ec4:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8001ec8:	2301      	movs	r3, #1
 8001eca:	e00c      	b.n	8001ee6 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2200      	movs	r2, #0
 8001ed0:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2201      	movs	r2, #1
 8001ed6:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4618      	mov	r0, r3
 8001ee0:	f004 f95d 	bl	800619e <USB_DevDisconnect>

  return HAL_OK;
 8001ee4:	2300      	movs	r3, #0
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	3710      	adds	r7, #16
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}

08001eee <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001eee:	b580      	push	{r7, lr}
 8001ef0:	b084      	sub	sp, #16
 8001ef2:	af00      	add	r7, sp, #0
 8001ef4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8001f02:	2b01      	cmp	r3, #1
 8001f04:	d101      	bne.n	8001f0a <HAL_PCD_Start+0x1c>
 8001f06:	2302      	movs	r3, #2
 8001f08:	e022      	b.n	8001f50 <HAL_PCD_Start+0x62>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	2201      	movs	r2, #1
 8001f0e:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	68db      	ldr	r3, [r3, #12]
 8001f16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d009      	beq.n	8001f32 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8001f22:	2b01      	cmp	r3, #1
 8001f24:	d105      	bne.n	8001f32 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f2a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4618      	mov	r0, r3
 8001f38:	f003 f86a 	bl	8005010 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4618      	mov	r0, r3
 8001f42:	f004 f90b 	bl	800615c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2200      	movs	r2, #0
 8001f4a:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8001f4e:	2300      	movs	r3, #0
}
 8001f50:	4618      	mov	r0, r3
 8001f52:	3710      	adds	r7, #16
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bd80      	pop	{r7, pc}

08001f58 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001f58:	b590      	push	{r4, r7, lr}
 8001f5a:	b08d      	sub	sp, #52	; 0x34
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001f66:	6a3b      	ldr	r3, [r7, #32]
 8001f68:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f004 f9c9 	bl	8006306 <USB_GetMode>
 8001f74:	4603      	mov	r3, r0
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	f040 848c 	bne.w	8002894 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4618      	mov	r0, r3
 8001f82:	f004 f92d 	bl	80061e0 <USB_ReadInterrupts>
 8001f86:	4603      	mov	r3, r0
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	f000 8482 	beq.w	8002892 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001f8e:	69fb      	ldr	r3, [r7, #28]
 8001f90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f94:	689b      	ldr	r3, [r3, #8]
 8001f96:	0a1b      	lsrs	r3, r3, #8
 8001f98:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	f8c3 24d4 	str.w	r2, [r3, #1236]	; 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f004 f91a 	bl	80061e0 <USB_ReadInterrupts>
 8001fac:	4603      	mov	r3, r0
 8001fae:	f003 0302 	and.w	r3, r3, #2
 8001fb2:	2b02      	cmp	r3, #2
 8001fb4:	d107      	bne.n	8001fc6 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	695a      	ldr	r2, [r3, #20]
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f002 0202 	and.w	r2, r2, #2
 8001fc4:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f004 f908 	bl	80061e0 <USB_ReadInterrupts>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	f003 0310 	and.w	r3, r3, #16
 8001fd6:	2b10      	cmp	r3, #16
 8001fd8:	d161      	bne.n	800209e <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	699a      	ldr	r2, [r3, #24]
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f022 0210 	bic.w	r2, r2, #16
 8001fe8:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001fea:	6a3b      	ldr	r3, [r7, #32]
 8001fec:	6a1b      	ldr	r3, [r3, #32]
 8001fee:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001ff0:	69bb      	ldr	r3, [r7, #24]
 8001ff2:	f003 020f 	and.w	r2, r3, #15
 8001ff6:	4613      	mov	r3, r2
 8001ff8:	00db      	lsls	r3, r3, #3
 8001ffa:	4413      	add	r3, r2
 8001ffc:	009b      	lsls	r3, r3, #2
 8001ffe:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8002002:	687a      	ldr	r2, [r7, #4]
 8002004:	4413      	add	r3, r2
 8002006:	3304      	adds	r3, #4
 8002008:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800200a:	69bb      	ldr	r3, [r7, #24]
 800200c:	0c5b      	lsrs	r3, r3, #17
 800200e:	f003 030f 	and.w	r3, r3, #15
 8002012:	2b02      	cmp	r3, #2
 8002014:	d124      	bne.n	8002060 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002016:	69ba      	ldr	r2, [r7, #24]
 8002018:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800201c:	4013      	ands	r3, r2
 800201e:	2b00      	cmp	r3, #0
 8002020:	d035      	beq.n	800208e <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002022:	697b      	ldr	r3, [r7, #20]
 8002024:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002026:	69bb      	ldr	r3, [r7, #24]
 8002028:	091b      	lsrs	r3, r3, #4
 800202a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800202c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002030:	b29b      	uxth	r3, r3
 8002032:	461a      	mov	r2, r3
 8002034:	6a38      	ldr	r0, [r7, #32]
 8002036:	f003 ff3f 	bl	8005eb8 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800203a:	697b      	ldr	r3, [r7, #20]
 800203c:	68da      	ldr	r2, [r3, #12]
 800203e:	69bb      	ldr	r3, [r7, #24]
 8002040:	091b      	lsrs	r3, r3, #4
 8002042:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002046:	441a      	add	r2, r3
 8002048:	697b      	ldr	r3, [r7, #20]
 800204a:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800204c:	697b      	ldr	r3, [r7, #20]
 800204e:	695a      	ldr	r2, [r3, #20]
 8002050:	69bb      	ldr	r3, [r7, #24]
 8002052:	091b      	lsrs	r3, r3, #4
 8002054:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002058:	441a      	add	r2, r3
 800205a:	697b      	ldr	r3, [r7, #20]
 800205c:	615a      	str	r2, [r3, #20]
 800205e:	e016      	b.n	800208e <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002060:	69bb      	ldr	r3, [r7, #24]
 8002062:	0c5b      	lsrs	r3, r3, #17
 8002064:	f003 030f 	and.w	r3, r3, #15
 8002068:	2b06      	cmp	r3, #6
 800206a:	d110      	bne.n	800208e <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8002072:	2208      	movs	r2, #8
 8002074:	4619      	mov	r1, r3
 8002076:	6a38      	ldr	r0, [r7, #32]
 8002078:	f003 ff1e 	bl	8005eb8 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800207c:	697b      	ldr	r3, [r7, #20]
 800207e:	695a      	ldr	r2, [r3, #20]
 8002080:	69bb      	ldr	r3, [r7, #24]
 8002082:	091b      	lsrs	r3, r3, #4
 8002084:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002088:	441a      	add	r2, r3
 800208a:	697b      	ldr	r3, [r7, #20]
 800208c:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	699a      	ldr	r2, [r3, #24]
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f042 0210 	orr.w	r2, r2, #16
 800209c:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4618      	mov	r0, r3
 80020a4:	f004 f89c 	bl	80061e0 <USB_ReadInterrupts>
 80020a8:	4603      	mov	r3, r0
 80020aa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80020ae:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80020b2:	f040 80a7 	bne.w	8002204 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80020b6:	2300      	movs	r3, #0
 80020b8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4618      	mov	r0, r3
 80020c0:	f004 f8a1 	bl	8006206 <USB_ReadDevAllOutEpInterrupt>
 80020c4:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80020c6:	e099      	b.n	80021fc <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80020c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020ca:	f003 0301 	and.w	r3, r3, #1
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	f000 808e 	beq.w	80021f0 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020da:	b2d2      	uxtb	r2, r2
 80020dc:	4611      	mov	r1, r2
 80020de:	4618      	mov	r0, r3
 80020e0:	f004 f8c5 	bl	800626e <USB_ReadDevOutEPInterrupt>
 80020e4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80020e6:	693b      	ldr	r3, [r7, #16]
 80020e8:	f003 0301 	and.w	r3, r3, #1
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d00c      	beq.n	800210a <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80020f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020f2:	015a      	lsls	r2, r3, #5
 80020f4:	69fb      	ldr	r3, [r7, #28]
 80020f6:	4413      	add	r3, r2
 80020f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80020fc:	461a      	mov	r2, r3
 80020fe:	2301      	movs	r3, #1
 8002100:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002102:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002104:	6878      	ldr	r0, [r7, #4]
 8002106:	f000 fea1 	bl	8002e4c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800210a:	693b      	ldr	r3, [r7, #16]
 800210c:	f003 0308 	and.w	r3, r3, #8
 8002110:	2b00      	cmp	r3, #0
 8002112:	d00c      	beq.n	800212e <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002116:	015a      	lsls	r2, r3, #5
 8002118:	69fb      	ldr	r3, [r7, #28]
 800211a:	4413      	add	r3, r2
 800211c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002120:	461a      	mov	r2, r3
 8002122:	2308      	movs	r3, #8
 8002124:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002126:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002128:	6878      	ldr	r0, [r7, #4]
 800212a:	f000 ff77 	bl	800301c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800212e:	693b      	ldr	r3, [r7, #16]
 8002130:	f003 0310 	and.w	r3, r3, #16
 8002134:	2b00      	cmp	r3, #0
 8002136:	d008      	beq.n	800214a <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800213a:	015a      	lsls	r2, r3, #5
 800213c:	69fb      	ldr	r3, [r7, #28]
 800213e:	4413      	add	r3, r2
 8002140:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002144:	461a      	mov	r2, r3
 8002146:	2310      	movs	r3, #16
 8002148:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800214a:	693b      	ldr	r3, [r7, #16]
 800214c:	f003 0302 	and.w	r3, r3, #2
 8002150:	2b00      	cmp	r3, #0
 8002152:	d030      	beq.n	80021b6 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002154:	6a3b      	ldr	r3, [r7, #32]
 8002156:	695b      	ldr	r3, [r3, #20]
 8002158:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800215c:	2b80      	cmp	r3, #128	; 0x80
 800215e:	d109      	bne.n	8002174 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002160:	69fb      	ldr	r3, [r7, #28]
 8002162:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	69fa      	ldr	r2, [r7, #28]
 800216a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800216e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002172:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002174:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002176:	4613      	mov	r3, r2
 8002178:	00db      	lsls	r3, r3, #3
 800217a:	4413      	add	r3, r2
 800217c:	009b      	lsls	r3, r3, #2
 800217e:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8002182:	687a      	ldr	r2, [r7, #4]
 8002184:	4413      	add	r3, r2
 8002186:	3304      	adds	r3, #4
 8002188:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800218a:	697b      	ldr	r3, [r7, #20]
 800218c:	78db      	ldrb	r3, [r3, #3]
 800218e:	2b01      	cmp	r3, #1
 8002190:	d108      	bne.n	80021a4 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002192:	697b      	ldr	r3, [r7, #20]
 8002194:	2200      	movs	r2, #0
 8002196:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800219a:	b2db      	uxtb	r3, r3
 800219c:	4619      	mov	r1, r3
 800219e:	6878      	ldr	r0, [r7, #4]
 80021a0:	f006 fcaa 	bl	8008af8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80021a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a6:	015a      	lsls	r2, r3, #5
 80021a8:	69fb      	ldr	r3, [r7, #28]
 80021aa:	4413      	add	r3, r2
 80021ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021b0:	461a      	mov	r2, r3
 80021b2:	2302      	movs	r3, #2
 80021b4:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80021b6:	693b      	ldr	r3, [r7, #16]
 80021b8:	f003 0320 	and.w	r3, r3, #32
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d008      	beq.n	80021d2 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80021c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c2:	015a      	lsls	r2, r3, #5
 80021c4:	69fb      	ldr	r3, [r7, #28]
 80021c6:	4413      	add	r3, r2
 80021c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021cc:	461a      	mov	r2, r3
 80021ce:	2320      	movs	r3, #32
 80021d0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80021d2:	693b      	ldr	r3, [r7, #16]
 80021d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d009      	beq.n	80021f0 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80021dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021de:	015a      	lsls	r2, r3, #5
 80021e0:	69fb      	ldr	r3, [r7, #28]
 80021e2:	4413      	add	r3, r2
 80021e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021e8:	461a      	mov	r2, r3
 80021ea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80021ee:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80021f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f2:	3301      	adds	r3, #1
 80021f4:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80021f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021f8:	085b      	lsrs	r3, r3, #1
 80021fa:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80021fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021fe:	2b00      	cmp	r3, #0
 8002200:	f47f af62 	bne.w	80020c8 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4618      	mov	r0, r3
 800220a:	f003 ffe9 	bl	80061e0 <USB_ReadInterrupts>
 800220e:	4603      	mov	r3, r0
 8002210:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002214:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002218:	f040 80db 	bne.w	80023d2 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4618      	mov	r0, r3
 8002222:	f004 f80a 	bl	800623a <USB_ReadDevAllInEpInterrupt>
 8002226:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002228:	2300      	movs	r3, #0
 800222a:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800222c:	e0cd      	b.n	80023ca <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800222e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002230:	f003 0301 	and.w	r3, r3, #1
 8002234:	2b00      	cmp	r3, #0
 8002236:	f000 80c2 	beq.w	80023be <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002240:	b2d2      	uxtb	r2, r2
 8002242:	4611      	mov	r1, r2
 8002244:	4618      	mov	r0, r3
 8002246:	f004 f830 	bl	80062aa <USB_ReadDevInEPInterrupt>
 800224a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800224c:	693b      	ldr	r3, [r7, #16]
 800224e:	f003 0301 	and.w	r3, r3, #1
 8002252:	2b00      	cmp	r3, #0
 8002254:	d057      	beq.n	8002306 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002258:	f003 030f 	and.w	r3, r3, #15
 800225c:	2201      	movs	r2, #1
 800225e:	fa02 f303 	lsl.w	r3, r2, r3
 8002262:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002264:	69fb      	ldr	r3, [r7, #28]
 8002266:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800226a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	43db      	mvns	r3, r3
 8002270:	69f9      	ldr	r1, [r7, #28]
 8002272:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002276:	4013      	ands	r3, r2
 8002278:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800227a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800227c:	015a      	lsls	r2, r3, #5
 800227e:	69fb      	ldr	r3, [r7, #28]
 8002280:	4413      	add	r3, r2
 8002282:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002286:	461a      	mov	r2, r3
 8002288:	2301      	movs	r3, #1
 800228a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	799b      	ldrb	r3, [r3, #6]
 8002290:	2b01      	cmp	r3, #1
 8002292:	d132      	bne.n	80022fa <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002294:	6879      	ldr	r1, [r7, #4]
 8002296:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002298:	4613      	mov	r3, r2
 800229a:	00db      	lsls	r3, r3, #3
 800229c:	4413      	add	r3, r2
 800229e:	009b      	lsls	r3, r3, #2
 80022a0:	440b      	add	r3, r1
 80022a2:	3320      	adds	r3, #32
 80022a4:	6819      	ldr	r1, [r3, #0]
 80022a6:	6878      	ldr	r0, [r7, #4]
 80022a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022aa:	4613      	mov	r3, r2
 80022ac:	00db      	lsls	r3, r3, #3
 80022ae:	4413      	add	r3, r2
 80022b0:	009b      	lsls	r3, r3, #2
 80022b2:	4403      	add	r3, r0
 80022b4:	331c      	adds	r3, #28
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4419      	add	r1, r3
 80022ba:	6878      	ldr	r0, [r7, #4]
 80022bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022be:	4613      	mov	r3, r2
 80022c0:	00db      	lsls	r3, r3, #3
 80022c2:	4413      	add	r3, r2
 80022c4:	009b      	lsls	r3, r3, #2
 80022c6:	4403      	add	r3, r0
 80022c8:	3320      	adds	r3, #32
 80022ca:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80022cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d113      	bne.n	80022fa <HAL_PCD_IRQHandler+0x3a2>
 80022d2:	6879      	ldr	r1, [r7, #4]
 80022d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022d6:	4613      	mov	r3, r2
 80022d8:	00db      	lsls	r3, r3, #3
 80022da:	4413      	add	r3, r2
 80022dc:	009b      	lsls	r3, r3, #2
 80022de:	440b      	add	r3, r1
 80022e0:	3324      	adds	r3, #36	; 0x24
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d108      	bne.n	80022fa <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6818      	ldr	r0, [r3, #0]
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 80022f2:	461a      	mov	r2, r3
 80022f4:	2101      	movs	r1, #1
 80022f6:	f004 f837 	bl	8006368 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80022fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022fc:	b2db      	uxtb	r3, r3
 80022fe:	4619      	mov	r1, r3
 8002300:	6878      	ldr	r0, [r7, #4]
 8002302:	f006 fb7e 	bl	8008a02 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002306:	693b      	ldr	r3, [r7, #16]
 8002308:	f003 0308 	and.w	r3, r3, #8
 800230c:	2b00      	cmp	r3, #0
 800230e:	d008      	beq.n	8002322 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002312:	015a      	lsls	r2, r3, #5
 8002314:	69fb      	ldr	r3, [r7, #28]
 8002316:	4413      	add	r3, r2
 8002318:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800231c:	461a      	mov	r2, r3
 800231e:	2308      	movs	r3, #8
 8002320:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002322:	693b      	ldr	r3, [r7, #16]
 8002324:	f003 0310 	and.w	r3, r3, #16
 8002328:	2b00      	cmp	r3, #0
 800232a:	d008      	beq.n	800233e <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800232c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800232e:	015a      	lsls	r2, r3, #5
 8002330:	69fb      	ldr	r3, [r7, #28]
 8002332:	4413      	add	r3, r2
 8002334:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002338:	461a      	mov	r2, r3
 800233a:	2310      	movs	r3, #16
 800233c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800233e:	693b      	ldr	r3, [r7, #16]
 8002340:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002344:	2b00      	cmp	r3, #0
 8002346:	d008      	beq.n	800235a <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800234a:	015a      	lsls	r2, r3, #5
 800234c:	69fb      	ldr	r3, [r7, #28]
 800234e:	4413      	add	r3, r2
 8002350:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002354:	461a      	mov	r2, r3
 8002356:	2340      	movs	r3, #64	; 0x40
 8002358:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800235a:	693b      	ldr	r3, [r7, #16]
 800235c:	f003 0302 	and.w	r3, r3, #2
 8002360:	2b00      	cmp	r3, #0
 8002362:	d023      	beq.n	80023ac <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002364:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002366:	6a38      	ldr	r0, [r7, #32]
 8002368:	f003 f824 	bl	80053b4 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800236c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800236e:	4613      	mov	r3, r2
 8002370:	00db      	lsls	r3, r3, #3
 8002372:	4413      	add	r3, r2
 8002374:	009b      	lsls	r3, r3, #2
 8002376:	3310      	adds	r3, #16
 8002378:	687a      	ldr	r2, [r7, #4]
 800237a:	4413      	add	r3, r2
 800237c:	3304      	adds	r3, #4
 800237e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002380:	697b      	ldr	r3, [r7, #20]
 8002382:	78db      	ldrb	r3, [r3, #3]
 8002384:	2b01      	cmp	r3, #1
 8002386:	d108      	bne.n	800239a <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002388:	697b      	ldr	r3, [r7, #20]
 800238a:	2200      	movs	r2, #0
 800238c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800238e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002390:	b2db      	uxtb	r3, r3
 8002392:	4619      	mov	r1, r3
 8002394:	6878      	ldr	r0, [r7, #4]
 8002396:	f006 fbc1 	bl	8008b1c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800239a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800239c:	015a      	lsls	r2, r3, #5
 800239e:	69fb      	ldr	r3, [r7, #28]
 80023a0:	4413      	add	r3, r2
 80023a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80023a6:	461a      	mov	r2, r3
 80023a8:	2302      	movs	r3, #2
 80023aa:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80023ac:	693b      	ldr	r3, [r7, #16]
 80023ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d003      	beq.n	80023be <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80023b6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80023b8:	6878      	ldr	r0, [r7, #4]
 80023ba:	f000 fcbb 	bl	8002d34 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80023be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023c0:	3301      	adds	r3, #1
 80023c2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80023c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023c6:	085b      	lsrs	r3, r3, #1
 80023c8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80023ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	f47f af2e 	bne.w	800222e <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4618      	mov	r0, r3
 80023d8:	f003 ff02 	bl	80061e0 <USB_ReadInterrupts>
 80023dc:	4603      	mov	r3, r0
 80023de:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80023e2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80023e6:	d122      	bne.n	800242e <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80023e8:	69fb      	ldr	r3, [r7, #28]
 80023ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	69fa      	ldr	r2, [r7, #28]
 80023f2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80023f6:	f023 0301 	bic.w	r3, r3, #1
 80023fa:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	f893 34cc 	ldrb.w	r3, [r3, #1228]	; 0x4cc
 8002402:	2b01      	cmp	r3, #1
 8002404:	d108      	bne.n	8002418 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	2200      	movs	r2, #0
 800240a:	f883 24cc 	strb.w	r2, [r3, #1228]	; 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800240e:	2100      	movs	r1, #0
 8002410:	6878      	ldr	r0, [r7, #4]
 8002412:	f000 fea1 	bl	8003158 <HAL_PCDEx_LPM_Callback>
 8002416:	e002      	b.n	800241e <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002418:	6878      	ldr	r0, [r7, #4]
 800241a:	f006 fb5f 	bl	8008adc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	695a      	ldr	r2, [r3, #20]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800242c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4618      	mov	r0, r3
 8002434:	f003 fed4 	bl	80061e0 <USB_ReadInterrupts>
 8002438:	4603      	mov	r3, r0
 800243a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800243e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002442:	d112      	bne.n	800246a <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002444:	69fb      	ldr	r3, [r7, #28]
 8002446:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800244a:	689b      	ldr	r3, [r3, #8]
 800244c:	f003 0301 	and.w	r3, r3, #1
 8002450:	2b01      	cmp	r3, #1
 8002452:	d102      	bne.n	800245a <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002454:	6878      	ldr	r0, [r7, #4]
 8002456:	f006 fb1b 	bl	8008a90 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	695a      	ldr	r2, [r3, #20]
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002468:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4618      	mov	r0, r3
 8002470:	f003 feb6 	bl	80061e0 <USB_ReadInterrupts>
 8002474:	4603      	mov	r3, r0
 8002476:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800247a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800247e:	f040 80b7 	bne.w	80025f0 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002482:	69fb      	ldr	r3, [r7, #28]
 8002484:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	69fa      	ldr	r2, [r7, #28]
 800248c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002490:	f023 0301 	bic.w	r3, r3, #1
 8002494:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	2110      	movs	r1, #16
 800249c:	4618      	mov	r0, r3
 800249e:	f002 ff89 	bl	80053b4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80024a2:	2300      	movs	r3, #0
 80024a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80024a6:	e046      	b.n	8002536 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80024a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024aa:	015a      	lsls	r2, r3, #5
 80024ac:	69fb      	ldr	r3, [r7, #28]
 80024ae:	4413      	add	r3, r2
 80024b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80024b4:	461a      	mov	r2, r3
 80024b6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80024ba:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80024bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024be:	015a      	lsls	r2, r3, #5
 80024c0:	69fb      	ldr	r3, [r7, #28]
 80024c2:	4413      	add	r3, r2
 80024c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80024cc:	0151      	lsls	r1, r2, #5
 80024ce:	69fa      	ldr	r2, [r7, #28]
 80024d0:	440a      	add	r2, r1
 80024d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80024d6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80024da:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80024dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024de:	015a      	lsls	r2, r3, #5
 80024e0:	69fb      	ldr	r3, [r7, #28]
 80024e2:	4413      	add	r3, r2
 80024e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024e8:	461a      	mov	r2, r3
 80024ea:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80024ee:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80024f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024f2:	015a      	lsls	r2, r3, #5
 80024f4:	69fb      	ldr	r3, [r7, #28]
 80024f6:	4413      	add	r3, r2
 80024f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002500:	0151      	lsls	r1, r2, #5
 8002502:	69fa      	ldr	r2, [r7, #28]
 8002504:	440a      	add	r2, r1
 8002506:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800250a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800250e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002510:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002512:	015a      	lsls	r2, r3, #5
 8002514:	69fb      	ldr	r3, [r7, #28]
 8002516:	4413      	add	r3, r2
 8002518:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002520:	0151      	lsls	r1, r2, #5
 8002522:	69fa      	ldr	r2, [r7, #28]
 8002524:	440a      	add	r2, r1
 8002526:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800252a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800252e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002530:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002532:	3301      	adds	r3, #1
 8002534:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	791b      	ldrb	r3, [r3, #4]
 800253a:	461a      	mov	r2, r3
 800253c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800253e:	4293      	cmp	r3, r2
 8002540:	d3b2      	bcc.n	80024a8 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002542:	69fb      	ldr	r3, [r7, #28]
 8002544:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002548:	69db      	ldr	r3, [r3, #28]
 800254a:	69fa      	ldr	r2, [r7, #28]
 800254c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002550:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002554:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	7bdb      	ldrb	r3, [r3, #15]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d016      	beq.n	800258c <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800255e:	69fb      	ldr	r3, [r7, #28]
 8002560:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002564:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002568:	69fa      	ldr	r2, [r7, #28]
 800256a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800256e:	f043 030b 	orr.w	r3, r3, #11
 8002572:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002576:	69fb      	ldr	r3, [r7, #28]
 8002578:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800257c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800257e:	69fa      	ldr	r2, [r7, #28]
 8002580:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002584:	f043 030b 	orr.w	r3, r3, #11
 8002588:	6453      	str	r3, [r2, #68]	; 0x44
 800258a:	e015      	b.n	80025b8 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800258c:	69fb      	ldr	r3, [r7, #28]
 800258e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002592:	695b      	ldr	r3, [r3, #20]
 8002594:	69fa      	ldr	r2, [r7, #28]
 8002596:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800259a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800259e:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80025a2:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80025a4:	69fb      	ldr	r3, [r7, #28]
 80025a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80025aa:	691b      	ldr	r3, [r3, #16]
 80025ac:	69fa      	ldr	r2, [r7, #28]
 80025ae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80025b2:	f043 030b 	orr.w	r3, r3, #11
 80025b6:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80025b8:	69fb      	ldr	r3, [r7, #28]
 80025ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	69fa      	ldr	r2, [r7, #28]
 80025c2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80025c6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80025ca:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6818      	ldr	r0, [r3, #0]
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	f203 439c 	addw	r3, r3, #1180	; 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80025da:	461a      	mov	r2, r3
 80025dc:	f003 fec4 	bl	8006368 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	695a      	ldr	r2, [r3, #20]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80025ee:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4618      	mov	r0, r3
 80025f6:	f003 fdf3 	bl	80061e0 <USB_ReadInterrupts>
 80025fa:	4603      	mov	r3, r0
 80025fc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002600:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002604:	d123      	bne.n	800264e <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4618      	mov	r0, r3
 800260c:	f003 fe89 	bl	8006322 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4618      	mov	r0, r3
 8002616:	f002 ff46 	bl	80054a6 <USB_GetDevSpeed>
 800261a:	4603      	mov	r3, r0
 800261c:	461a      	mov	r2, r3
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681c      	ldr	r4, [r3, #0]
 8002626:	f001 f9c7 	bl	80039b8 <HAL_RCC_GetHCLKFreq>
 800262a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002630:	461a      	mov	r2, r3
 8002632:	4620      	mov	r0, r4
 8002634:	f002 fc4a 	bl	8004ecc <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002638:	6878      	ldr	r0, [r7, #4]
 800263a:	f006 fa0a 	bl	8008a52 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	695a      	ldr	r2, [r3, #20]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800264c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4618      	mov	r0, r3
 8002654:	f003 fdc4 	bl	80061e0 <USB_ReadInterrupts>
 8002658:	4603      	mov	r3, r0
 800265a:	f003 0308 	and.w	r3, r3, #8
 800265e:	2b08      	cmp	r3, #8
 8002660:	d10a      	bne.n	8002678 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002662:	6878      	ldr	r0, [r7, #4]
 8002664:	f006 f9e7 	bl	8008a36 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	695a      	ldr	r2, [r3, #20]
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f002 0208 	and.w	r2, r2, #8
 8002676:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4618      	mov	r0, r3
 800267e:	f003 fdaf 	bl	80061e0 <USB_ReadInterrupts>
 8002682:	4603      	mov	r3, r0
 8002684:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002688:	2b80      	cmp	r3, #128	; 0x80
 800268a:	d123      	bne.n	80026d4 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800268c:	6a3b      	ldr	r3, [r7, #32]
 800268e:	699b      	ldr	r3, [r3, #24]
 8002690:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002694:	6a3b      	ldr	r3, [r7, #32]
 8002696:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002698:	2301      	movs	r3, #1
 800269a:	627b      	str	r3, [r7, #36]	; 0x24
 800269c:	e014      	b.n	80026c8 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800269e:	6879      	ldr	r1, [r7, #4]
 80026a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026a2:	4613      	mov	r3, r2
 80026a4:	00db      	lsls	r3, r3, #3
 80026a6:	4413      	add	r3, r2
 80026a8:	009b      	lsls	r3, r3, #2
 80026aa:	440b      	add	r3, r1
 80026ac:	f203 2357 	addw	r3, r3, #599	; 0x257
 80026b0:	781b      	ldrb	r3, [r3, #0]
 80026b2:	2b01      	cmp	r3, #1
 80026b4:	d105      	bne.n	80026c2 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80026b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b8:	b2db      	uxtb	r3, r3
 80026ba:	4619      	mov	r1, r3
 80026bc:	6878      	ldr	r0, [r7, #4]
 80026be:	f000 fb08 	bl	8002cd2 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80026c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c4:	3301      	adds	r3, #1
 80026c6:	627b      	str	r3, [r7, #36]	; 0x24
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	791b      	ldrb	r3, [r3, #4]
 80026cc:	461a      	mov	r2, r3
 80026ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d3e4      	bcc.n	800269e <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4618      	mov	r0, r3
 80026da:	f003 fd81 	bl	80061e0 <USB_ReadInterrupts>
 80026de:	4603      	mov	r3, r0
 80026e0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026e4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80026e8:	d13c      	bne.n	8002764 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80026ea:	2301      	movs	r3, #1
 80026ec:	627b      	str	r3, [r7, #36]	; 0x24
 80026ee:	e02b      	b.n	8002748 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80026f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026f2:	015a      	lsls	r2, r3, #5
 80026f4:	69fb      	ldr	r3, [r7, #28]
 80026f6:	4413      	add	r3, r2
 80026f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002700:	6879      	ldr	r1, [r7, #4]
 8002702:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002704:	4613      	mov	r3, r2
 8002706:	00db      	lsls	r3, r3, #3
 8002708:	4413      	add	r3, r2
 800270a:	009b      	lsls	r3, r3, #2
 800270c:	440b      	add	r3, r1
 800270e:	3318      	adds	r3, #24
 8002710:	781b      	ldrb	r3, [r3, #0]
 8002712:	2b01      	cmp	r3, #1
 8002714:	d115      	bne.n	8002742 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002716:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002718:	2b00      	cmp	r3, #0
 800271a:	da12      	bge.n	8002742 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800271c:	6879      	ldr	r1, [r7, #4]
 800271e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002720:	4613      	mov	r3, r2
 8002722:	00db      	lsls	r3, r3, #3
 8002724:	4413      	add	r3, r2
 8002726:	009b      	lsls	r3, r3, #2
 8002728:	440b      	add	r3, r1
 800272a:	3317      	adds	r3, #23
 800272c:	2201      	movs	r2, #1
 800272e:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002732:	b2db      	uxtb	r3, r3
 8002734:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002738:	b2db      	uxtb	r3, r3
 800273a:	4619      	mov	r1, r3
 800273c:	6878      	ldr	r0, [r7, #4]
 800273e:	f000 fac8 	bl	8002cd2 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002744:	3301      	adds	r3, #1
 8002746:	627b      	str	r3, [r7, #36]	; 0x24
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	791b      	ldrb	r3, [r3, #4]
 800274c:	461a      	mov	r2, r3
 800274e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002750:	4293      	cmp	r3, r2
 8002752:	d3cd      	bcc.n	80026f0 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	695a      	ldr	r2, [r3, #20]
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002762:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4618      	mov	r0, r3
 800276a:	f003 fd39 	bl	80061e0 <USB_ReadInterrupts>
 800276e:	4603      	mov	r3, r0
 8002770:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002774:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002778:	d156      	bne.n	8002828 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800277a:	2301      	movs	r3, #1
 800277c:	627b      	str	r3, [r7, #36]	; 0x24
 800277e:	e045      	b.n	800280c <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002782:	015a      	lsls	r2, r3, #5
 8002784:	69fb      	ldr	r3, [r7, #28]
 8002786:	4413      	add	r3, r2
 8002788:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002790:	6879      	ldr	r1, [r7, #4]
 8002792:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002794:	4613      	mov	r3, r2
 8002796:	00db      	lsls	r3, r3, #3
 8002798:	4413      	add	r3, r2
 800279a:	009b      	lsls	r3, r3, #2
 800279c:	440b      	add	r3, r1
 800279e:	f503 7316 	add.w	r3, r3, #600	; 0x258
 80027a2:	781b      	ldrb	r3, [r3, #0]
 80027a4:	2b01      	cmp	r3, #1
 80027a6:	d12e      	bne.n	8002806 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80027a8:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	da2b      	bge.n	8002806 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80027ae:	69bb      	ldr	r3, [r7, #24]
 80027b0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 80027ba:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80027be:	429a      	cmp	r2, r3
 80027c0:	d121      	bne.n	8002806 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80027c2:	6879      	ldr	r1, [r7, #4]
 80027c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027c6:	4613      	mov	r3, r2
 80027c8:	00db      	lsls	r3, r3, #3
 80027ca:	4413      	add	r3, r2
 80027cc:	009b      	lsls	r3, r3, #2
 80027ce:	440b      	add	r3, r1
 80027d0:	f203 2357 	addw	r3, r3, #599	; 0x257
 80027d4:	2201      	movs	r2, #1
 80027d6:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80027d8:	6a3b      	ldr	r3, [r7, #32]
 80027da:	699b      	ldr	r3, [r3, #24]
 80027dc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80027e0:	6a3b      	ldr	r3, [r7, #32]
 80027e2:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80027e4:	6a3b      	ldr	r3, [r7, #32]
 80027e6:	695b      	ldr	r3, [r3, #20]
 80027e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d10a      	bne.n	8002806 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80027f0:	69fb      	ldr	r3, [r7, #28]
 80027f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	69fa      	ldr	r2, [r7, #28]
 80027fa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80027fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002802:	6053      	str	r3, [r2, #4]
            break;
 8002804:	e008      	b.n	8002818 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002808:	3301      	adds	r3, #1
 800280a:	627b      	str	r3, [r7, #36]	; 0x24
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	791b      	ldrb	r3, [r3, #4]
 8002810:	461a      	mov	r2, r3
 8002812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002814:	4293      	cmp	r3, r2
 8002816:	d3b3      	bcc.n	8002780 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	695a      	ldr	r2, [r3, #20]
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002826:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4618      	mov	r0, r3
 800282e:	f003 fcd7 	bl	80061e0 <USB_ReadInterrupts>
 8002832:	4603      	mov	r3, r0
 8002834:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002838:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800283c:	d10a      	bne.n	8002854 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800283e:	6878      	ldr	r0, [r7, #4]
 8002840:	f006 f97e 	bl	8008b40 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	695a      	ldr	r2, [r3, #20]
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002852:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4618      	mov	r0, r3
 800285a:	f003 fcc1 	bl	80061e0 <USB_ReadInterrupts>
 800285e:	4603      	mov	r3, r0
 8002860:	f003 0304 	and.w	r3, r3, #4
 8002864:	2b04      	cmp	r3, #4
 8002866:	d115      	bne.n	8002894 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002870:	69bb      	ldr	r3, [r7, #24]
 8002872:	f003 0304 	and.w	r3, r3, #4
 8002876:	2b00      	cmp	r3, #0
 8002878:	d002      	beq.n	8002880 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800287a:	6878      	ldr	r0, [r7, #4]
 800287c:	f006 f96e 	bl	8008b5c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	6859      	ldr	r1, [r3, #4]
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	69ba      	ldr	r2, [r7, #24]
 800288c:	430a      	orrs	r2, r1
 800288e:	605a      	str	r2, [r3, #4]
 8002890:	e000      	b.n	8002894 <HAL_PCD_IRQHandler+0x93c>
      return;
 8002892:	bf00      	nop
    }
  }
}
 8002894:	3734      	adds	r7, #52	; 0x34
 8002896:	46bd      	mov	sp, r7
 8002898:	bd90      	pop	{r4, r7, pc}

0800289a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800289a:	b580      	push	{r7, lr}
 800289c:	b082      	sub	sp, #8
 800289e:	af00      	add	r7, sp, #0
 80028a0:	6078      	str	r0, [r7, #4]
 80028a2:	460b      	mov	r3, r1
 80028a4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 80028ac:	2b01      	cmp	r3, #1
 80028ae:	d101      	bne.n	80028b4 <HAL_PCD_SetAddress+0x1a>
 80028b0:	2302      	movs	r3, #2
 80028b2:	e012      	b.n	80028da <HAL_PCD_SetAddress+0x40>
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2201      	movs	r2, #1
 80028b8:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  hpcd->USB_Address = address;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	78fa      	ldrb	r2, [r7, #3]
 80028c0:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	78fa      	ldrb	r2, [r7, #3]
 80028c8:	4611      	mov	r1, r2
 80028ca:	4618      	mov	r0, r3
 80028cc:	f003 fc20 	bl	8006110 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2200      	movs	r2, #0
 80028d4:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 80028d8:	2300      	movs	r3, #0
}
 80028da:	4618      	mov	r0, r3
 80028dc:	3708      	adds	r7, #8
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd80      	pop	{r7, pc}

080028e2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80028e2:	b580      	push	{r7, lr}
 80028e4:	b084      	sub	sp, #16
 80028e6:	af00      	add	r7, sp, #0
 80028e8:	6078      	str	r0, [r7, #4]
 80028ea:	4608      	mov	r0, r1
 80028ec:	4611      	mov	r1, r2
 80028ee:	461a      	mov	r2, r3
 80028f0:	4603      	mov	r3, r0
 80028f2:	70fb      	strb	r3, [r7, #3]
 80028f4:	460b      	mov	r3, r1
 80028f6:	803b      	strh	r3, [r7, #0]
 80028f8:	4613      	mov	r3, r2
 80028fa:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80028fc:	2300      	movs	r3, #0
 80028fe:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002900:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002904:	2b00      	cmp	r3, #0
 8002906:	da0f      	bge.n	8002928 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002908:	78fb      	ldrb	r3, [r7, #3]
 800290a:	f003 020f 	and.w	r2, r3, #15
 800290e:	4613      	mov	r3, r2
 8002910:	00db      	lsls	r3, r3, #3
 8002912:	4413      	add	r3, r2
 8002914:	009b      	lsls	r3, r3, #2
 8002916:	3310      	adds	r3, #16
 8002918:	687a      	ldr	r2, [r7, #4]
 800291a:	4413      	add	r3, r2
 800291c:	3304      	adds	r3, #4
 800291e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	2201      	movs	r2, #1
 8002924:	705a      	strb	r2, [r3, #1]
 8002926:	e00f      	b.n	8002948 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002928:	78fb      	ldrb	r3, [r7, #3]
 800292a:	f003 020f 	and.w	r2, r3, #15
 800292e:	4613      	mov	r3, r2
 8002930:	00db      	lsls	r3, r3, #3
 8002932:	4413      	add	r3, r2
 8002934:	009b      	lsls	r3, r3, #2
 8002936:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800293a:	687a      	ldr	r2, [r7, #4]
 800293c:	4413      	add	r3, r2
 800293e:	3304      	adds	r3, #4
 8002940:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	2200      	movs	r2, #0
 8002946:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002948:	78fb      	ldrb	r3, [r7, #3]
 800294a:	f003 030f 	and.w	r3, r3, #15
 800294e:	b2da      	uxtb	r2, r3
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002954:	883a      	ldrh	r2, [r7, #0]
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	78ba      	ldrb	r2, [r7, #2]
 800295e:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	785b      	ldrb	r3, [r3, #1]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d004      	beq.n	8002972 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	781b      	ldrb	r3, [r3, #0]
 800296c:	b29a      	uxth	r2, r3
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002972:	78bb      	ldrb	r3, [r7, #2]
 8002974:	2b02      	cmp	r3, #2
 8002976:	d102      	bne.n	800297e <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	2200      	movs	r2, #0
 800297c:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8002984:	2b01      	cmp	r3, #1
 8002986:	d101      	bne.n	800298c <HAL_PCD_EP_Open+0xaa>
 8002988:	2302      	movs	r3, #2
 800298a:	e00e      	b.n	80029aa <HAL_PCD_EP_Open+0xc8>
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2201      	movs	r2, #1
 8002990:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	68f9      	ldr	r1, [r7, #12]
 800299a:	4618      	mov	r0, r3
 800299c:	f002 fda8 	bl	80054f0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2200      	movs	r2, #0
 80029a4:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return ret;
 80029a8:	7afb      	ldrb	r3, [r7, #11]
}
 80029aa:	4618      	mov	r0, r3
 80029ac:	3710      	adds	r7, #16
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}

080029b2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80029b2:	b580      	push	{r7, lr}
 80029b4:	b084      	sub	sp, #16
 80029b6:	af00      	add	r7, sp, #0
 80029b8:	6078      	str	r0, [r7, #4]
 80029ba:	460b      	mov	r3, r1
 80029bc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80029be:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	da0f      	bge.n	80029e6 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80029c6:	78fb      	ldrb	r3, [r7, #3]
 80029c8:	f003 020f 	and.w	r2, r3, #15
 80029cc:	4613      	mov	r3, r2
 80029ce:	00db      	lsls	r3, r3, #3
 80029d0:	4413      	add	r3, r2
 80029d2:	009b      	lsls	r3, r3, #2
 80029d4:	3310      	adds	r3, #16
 80029d6:	687a      	ldr	r2, [r7, #4]
 80029d8:	4413      	add	r3, r2
 80029da:	3304      	adds	r3, #4
 80029dc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	2201      	movs	r2, #1
 80029e2:	705a      	strb	r2, [r3, #1]
 80029e4:	e00f      	b.n	8002a06 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80029e6:	78fb      	ldrb	r3, [r7, #3]
 80029e8:	f003 020f 	and.w	r2, r3, #15
 80029ec:	4613      	mov	r3, r2
 80029ee:	00db      	lsls	r3, r3, #3
 80029f0:	4413      	add	r3, r2
 80029f2:	009b      	lsls	r3, r3, #2
 80029f4:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80029f8:	687a      	ldr	r2, [r7, #4]
 80029fa:	4413      	add	r3, r2
 80029fc:	3304      	adds	r3, #4
 80029fe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	2200      	movs	r2, #0
 8002a04:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8002a06:	78fb      	ldrb	r3, [r7, #3]
 8002a08:	f003 030f 	and.w	r3, r3, #15
 8002a0c:	b2da      	uxtb	r2, r3
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8002a18:	2b01      	cmp	r3, #1
 8002a1a:	d101      	bne.n	8002a20 <HAL_PCD_EP_Close+0x6e>
 8002a1c:	2302      	movs	r3, #2
 8002a1e:	e00e      	b.n	8002a3e <HAL_PCD_EP_Close+0x8c>
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2201      	movs	r2, #1
 8002a24:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	68f9      	ldr	r1, [r7, #12]
 8002a2e:	4618      	mov	r0, r3
 8002a30:	f002 fde6 	bl	8005600 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2200      	movs	r2, #0
 8002a38:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  return HAL_OK;
 8002a3c:	2300      	movs	r3, #0
}
 8002a3e:	4618      	mov	r0, r3
 8002a40:	3710      	adds	r7, #16
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bd80      	pop	{r7, pc}

08002a46 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002a46:	b580      	push	{r7, lr}
 8002a48:	b086      	sub	sp, #24
 8002a4a:	af00      	add	r7, sp, #0
 8002a4c:	60f8      	str	r0, [r7, #12]
 8002a4e:	607a      	str	r2, [r7, #4]
 8002a50:	603b      	str	r3, [r7, #0]
 8002a52:	460b      	mov	r3, r1
 8002a54:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002a56:	7afb      	ldrb	r3, [r7, #11]
 8002a58:	f003 020f 	and.w	r2, r3, #15
 8002a5c:	4613      	mov	r3, r2
 8002a5e:	00db      	lsls	r3, r3, #3
 8002a60:	4413      	add	r3, r2
 8002a62:	009b      	lsls	r3, r3, #2
 8002a64:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8002a68:	68fa      	ldr	r2, [r7, #12]
 8002a6a:	4413      	add	r3, r2
 8002a6c:	3304      	adds	r3, #4
 8002a6e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002a70:	697b      	ldr	r3, [r7, #20]
 8002a72:	687a      	ldr	r2, [r7, #4]
 8002a74:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002a76:	697b      	ldr	r3, [r7, #20]
 8002a78:	683a      	ldr	r2, [r7, #0]
 8002a7a:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8002a7c:	697b      	ldr	r3, [r7, #20]
 8002a7e:	2200      	movs	r2, #0
 8002a80:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8002a82:	697b      	ldr	r3, [r7, #20]
 8002a84:	2200      	movs	r2, #0
 8002a86:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002a88:	7afb      	ldrb	r3, [r7, #11]
 8002a8a:	f003 030f 	and.w	r3, r3, #15
 8002a8e:	b2da      	uxtb	r2, r3
 8002a90:	697b      	ldr	r3, [r7, #20]
 8002a92:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	799b      	ldrb	r3, [r3, #6]
 8002a98:	2b01      	cmp	r3, #1
 8002a9a:	d102      	bne.n	8002aa2 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002a9c:	687a      	ldr	r2, [r7, #4]
 8002a9e:	697b      	ldr	r3, [r7, #20]
 8002aa0:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	6818      	ldr	r0, [r3, #0]
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	799b      	ldrb	r3, [r3, #6]
 8002aaa:	461a      	mov	r2, r3
 8002aac:	6979      	ldr	r1, [r7, #20]
 8002aae:	f002 fe83 	bl	80057b8 <USB_EPStartXfer>

  return HAL_OK;
 8002ab2:	2300      	movs	r3, #0
}
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	3718      	adds	r7, #24
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bd80      	pop	{r7, pc}

08002abc <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8002abc:	b480      	push	{r7}
 8002abe:	b083      	sub	sp, #12
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
 8002ac4:	460b      	mov	r3, r1
 8002ac6:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002ac8:	78fb      	ldrb	r3, [r7, #3]
 8002aca:	f003 020f 	and.w	r2, r3, #15
 8002ace:	6879      	ldr	r1, [r7, #4]
 8002ad0:	4613      	mov	r3, r2
 8002ad2:	00db      	lsls	r3, r3, #3
 8002ad4:	4413      	add	r3, r2
 8002ad6:	009b      	lsls	r3, r3, #2
 8002ad8:	440b      	add	r3, r1
 8002ada:	f503 731a 	add.w	r3, r3, #616	; 0x268
 8002ade:	681b      	ldr	r3, [r3, #0]
}
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	370c      	adds	r7, #12
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aea:	4770      	bx	lr

08002aec <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b086      	sub	sp, #24
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	60f8      	str	r0, [r7, #12]
 8002af4:	607a      	str	r2, [r7, #4]
 8002af6:	603b      	str	r3, [r7, #0]
 8002af8:	460b      	mov	r3, r1
 8002afa:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002afc:	7afb      	ldrb	r3, [r7, #11]
 8002afe:	f003 020f 	and.w	r2, r3, #15
 8002b02:	4613      	mov	r3, r2
 8002b04:	00db      	lsls	r3, r3, #3
 8002b06:	4413      	add	r3, r2
 8002b08:	009b      	lsls	r3, r3, #2
 8002b0a:	3310      	adds	r3, #16
 8002b0c:	68fa      	ldr	r2, [r7, #12]
 8002b0e:	4413      	add	r3, r2
 8002b10:	3304      	adds	r3, #4
 8002b12:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002b14:	697b      	ldr	r3, [r7, #20]
 8002b16:	687a      	ldr	r2, [r7, #4]
 8002b18:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002b1a:	697b      	ldr	r3, [r7, #20]
 8002b1c:	683a      	ldr	r2, [r7, #0]
 8002b1e:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8002b20:	697b      	ldr	r3, [r7, #20]
 8002b22:	2200      	movs	r2, #0
 8002b24:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8002b26:	697b      	ldr	r3, [r7, #20]
 8002b28:	2201      	movs	r2, #1
 8002b2a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002b2c:	7afb      	ldrb	r3, [r7, #11]
 8002b2e:	f003 030f 	and.w	r3, r3, #15
 8002b32:	b2da      	uxtb	r2, r3
 8002b34:	697b      	ldr	r3, [r7, #20]
 8002b36:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	799b      	ldrb	r3, [r3, #6]
 8002b3c:	2b01      	cmp	r3, #1
 8002b3e:	d102      	bne.n	8002b46 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002b40:	687a      	ldr	r2, [r7, #4]
 8002b42:	697b      	ldr	r3, [r7, #20]
 8002b44:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	6818      	ldr	r0, [r3, #0]
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	799b      	ldrb	r3, [r3, #6]
 8002b4e:	461a      	mov	r2, r3
 8002b50:	6979      	ldr	r1, [r7, #20]
 8002b52:	f002 fe31 	bl	80057b8 <USB_EPStartXfer>

  return HAL_OK;
 8002b56:	2300      	movs	r3, #0
}
 8002b58:	4618      	mov	r0, r3
 8002b5a:	3718      	adds	r7, #24
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bd80      	pop	{r7, pc}

08002b60 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b084      	sub	sp, #16
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
 8002b68:	460b      	mov	r3, r1
 8002b6a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002b6c:	78fb      	ldrb	r3, [r7, #3]
 8002b6e:	f003 030f 	and.w	r3, r3, #15
 8002b72:	687a      	ldr	r2, [r7, #4]
 8002b74:	7912      	ldrb	r2, [r2, #4]
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d901      	bls.n	8002b7e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	e04f      	b.n	8002c1e <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002b7e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	da0f      	bge.n	8002ba6 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b86:	78fb      	ldrb	r3, [r7, #3]
 8002b88:	f003 020f 	and.w	r2, r3, #15
 8002b8c:	4613      	mov	r3, r2
 8002b8e:	00db      	lsls	r3, r3, #3
 8002b90:	4413      	add	r3, r2
 8002b92:	009b      	lsls	r3, r3, #2
 8002b94:	3310      	adds	r3, #16
 8002b96:	687a      	ldr	r2, [r7, #4]
 8002b98:	4413      	add	r3, r2
 8002b9a:	3304      	adds	r3, #4
 8002b9c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	2201      	movs	r2, #1
 8002ba2:	705a      	strb	r2, [r3, #1]
 8002ba4:	e00d      	b.n	8002bc2 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002ba6:	78fa      	ldrb	r2, [r7, #3]
 8002ba8:	4613      	mov	r3, r2
 8002baa:	00db      	lsls	r3, r3, #3
 8002bac:	4413      	add	r3, r2
 8002bae:	009b      	lsls	r3, r3, #2
 8002bb0:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8002bb4:	687a      	ldr	r2, [r7, #4]
 8002bb6:	4413      	add	r3, r2
 8002bb8:	3304      	adds	r3, #4
 8002bba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	2201      	movs	r2, #1
 8002bc6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002bc8:	78fb      	ldrb	r3, [r7, #3]
 8002bca:	f003 030f 	and.w	r3, r3, #15
 8002bce:	b2da      	uxtb	r2, r3
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8002bda:	2b01      	cmp	r3, #1
 8002bdc:	d101      	bne.n	8002be2 <HAL_PCD_EP_SetStall+0x82>
 8002bde:	2302      	movs	r3, #2
 8002be0:	e01d      	b.n	8002c1e <HAL_PCD_EP_SetStall+0xbe>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2201      	movs	r2, #1
 8002be6:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	68f9      	ldr	r1, [r7, #12]
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	f003 f9b9 	bl	8005f68 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002bf6:	78fb      	ldrb	r3, [r7, #3]
 8002bf8:	f003 030f 	and.w	r3, r3, #15
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d109      	bne.n	8002c14 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6818      	ldr	r0, [r3, #0]
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	7999      	ldrb	r1, [r3, #6]
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8002c0e:	461a      	mov	r2, r3
 8002c10:	f003 fbaa 	bl	8006368 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2200      	movs	r2, #0
 8002c18:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8002c1c:	2300      	movs	r3, #0
}
 8002c1e:	4618      	mov	r0, r3
 8002c20:	3710      	adds	r7, #16
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bd80      	pop	{r7, pc}

08002c26 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002c26:	b580      	push	{r7, lr}
 8002c28:	b084      	sub	sp, #16
 8002c2a:	af00      	add	r7, sp, #0
 8002c2c:	6078      	str	r0, [r7, #4]
 8002c2e:	460b      	mov	r3, r1
 8002c30:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002c32:	78fb      	ldrb	r3, [r7, #3]
 8002c34:	f003 030f 	and.w	r3, r3, #15
 8002c38:	687a      	ldr	r2, [r7, #4]
 8002c3a:	7912      	ldrb	r2, [r2, #4]
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d901      	bls.n	8002c44 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002c40:	2301      	movs	r3, #1
 8002c42:	e042      	b.n	8002cca <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002c44:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	da0f      	bge.n	8002c6c <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c4c:	78fb      	ldrb	r3, [r7, #3]
 8002c4e:	f003 020f 	and.w	r2, r3, #15
 8002c52:	4613      	mov	r3, r2
 8002c54:	00db      	lsls	r3, r3, #3
 8002c56:	4413      	add	r3, r2
 8002c58:	009b      	lsls	r3, r3, #2
 8002c5a:	3310      	adds	r3, #16
 8002c5c:	687a      	ldr	r2, [r7, #4]
 8002c5e:	4413      	add	r3, r2
 8002c60:	3304      	adds	r3, #4
 8002c62:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	2201      	movs	r2, #1
 8002c68:	705a      	strb	r2, [r3, #1]
 8002c6a:	e00f      	b.n	8002c8c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002c6c:	78fb      	ldrb	r3, [r7, #3]
 8002c6e:	f003 020f 	and.w	r2, r3, #15
 8002c72:	4613      	mov	r3, r2
 8002c74:	00db      	lsls	r3, r3, #3
 8002c76:	4413      	add	r3, r2
 8002c78:	009b      	lsls	r3, r3, #2
 8002c7a:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8002c7e:	687a      	ldr	r2, [r7, #4]
 8002c80:	4413      	add	r3, r2
 8002c82:	3304      	adds	r3, #4
 8002c84:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	2200      	movs	r2, #0
 8002c8a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	2200      	movs	r2, #0
 8002c90:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002c92:	78fb      	ldrb	r3, [r7, #3]
 8002c94:	f003 030f 	and.w	r3, r3, #15
 8002c98:	b2da      	uxtb	r2, r3
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8002ca4:	2b01      	cmp	r3, #1
 8002ca6:	d101      	bne.n	8002cac <HAL_PCD_EP_ClrStall+0x86>
 8002ca8:	2302      	movs	r3, #2
 8002caa:	e00e      	b.n	8002cca <HAL_PCD_EP_ClrStall+0xa4>
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2201      	movs	r2, #1
 8002cb0:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	68f9      	ldr	r1, [r7, #12]
 8002cba:	4618      	mov	r0, r3
 8002cbc:	f003 f9c2 	bl	8006044 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8002cc8:	2300      	movs	r3, #0
}
 8002cca:	4618      	mov	r0, r3
 8002ccc:	3710      	adds	r7, #16
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bd80      	pop	{r7, pc}

08002cd2 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002cd2:	b580      	push	{r7, lr}
 8002cd4:	b084      	sub	sp, #16
 8002cd6:	af00      	add	r7, sp, #0
 8002cd8:	6078      	str	r0, [r7, #4]
 8002cda:	460b      	mov	r3, r1
 8002cdc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002cde:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	da0c      	bge.n	8002d00 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ce6:	78fb      	ldrb	r3, [r7, #3]
 8002ce8:	f003 020f 	and.w	r2, r3, #15
 8002cec:	4613      	mov	r3, r2
 8002cee:	00db      	lsls	r3, r3, #3
 8002cf0:	4413      	add	r3, r2
 8002cf2:	009b      	lsls	r3, r3, #2
 8002cf4:	3310      	adds	r3, #16
 8002cf6:	687a      	ldr	r2, [r7, #4]
 8002cf8:	4413      	add	r3, r2
 8002cfa:	3304      	adds	r3, #4
 8002cfc:	60fb      	str	r3, [r7, #12]
 8002cfe:	e00c      	b.n	8002d1a <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002d00:	78fb      	ldrb	r3, [r7, #3]
 8002d02:	f003 020f 	and.w	r2, r3, #15
 8002d06:	4613      	mov	r3, r2
 8002d08:	00db      	lsls	r3, r3, #3
 8002d0a:	4413      	add	r3, r2
 8002d0c:	009b      	lsls	r3, r3, #2
 8002d0e:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8002d12:	687a      	ldr	r2, [r7, #4]
 8002d14:	4413      	add	r3, r2
 8002d16:	3304      	adds	r3, #4
 8002d18:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	68f9      	ldr	r1, [r7, #12]
 8002d20:	4618      	mov	r0, r3
 8002d22:	f002 ffe1 	bl	8005ce8 <USB_EPStopXfer>
 8002d26:	4603      	mov	r3, r0
 8002d28:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002d2a:	7afb      	ldrb	r3, [r7, #11]
}
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	3710      	adds	r7, #16
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bd80      	pop	{r7, pc}

08002d34 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b08a      	sub	sp, #40	; 0x28
 8002d38:	af02      	add	r7, sp, #8
 8002d3a:	6078      	str	r0, [r7, #4]
 8002d3c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d44:	697b      	ldr	r3, [r7, #20]
 8002d46:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002d48:	683a      	ldr	r2, [r7, #0]
 8002d4a:	4613      	mov	r3, r2
 8002d4c:	00db      	lsls	r3, r3, #3
 8002d4e:	4413      	add	r3, r2
 8002d50:	009b      	lsls	r3, r3, #2
 8002d52:	3310      	adds	r3, #16
 8002d54:	687a      	ldr	r2, [r7, #4]
 8002d56:	4413      	add	r3, r2
 8002d58:	3304      	adds	r3, #4
 8002d5a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	695a      	ldr	r2, [r3, #20]
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	691b      	ldr	r3, [r3, #16]
 8002d64:	429a      	cmp	r2, r3
 8002d66:	d901      	bls.n	8002d6c <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002d68:	2301      	movs	r3, #1
 8002d6a:	e06b      	b.n	8002e44 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	691a      	ldr	r2, [r3, #16]
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	695b      	ldr	r3, [r3, #20]
 8002d74:	1ad3      	subs	r3, r2, r3
 8002d76:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	689b      	ldr	r3, [r3, #8]
 8002d7c:	69fa      	ldr	r2, [r7, #28]
 8002d7e:	429a      	cmp	r2, r3
 8002d80:	d902      	bls.n	8002d88 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	689b      	ldr	r3, [r3, #8]
 8002d86:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002d88:	69fb      	ldr	r3, [r7, #28]
 8002d8a:	3303      	adds	r3, #3
 8002d8c:	089b      	lsrs	r3, r3, #2
 8002d8e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002d90:	e02a      	b.n	8002de8 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	691a      	ldr	r2, [r3, #16]
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	695b      	ldr	r3, [r3, #20]
 8002d9a:	1ad3      	subs	r3, r2, r3
 8002d9c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	689b      	ldr	r3, [r3, #8]
 8002da2:	69fa      	ldr	r2, [r7, #28]
 8002da4:	429a      	cmp	r2, r3
 8002da6:	d902      	bls.n	8002dae <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	689b      	ldr	r3, [r3, #8]
 8002dac:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002dae:	69fb      	ldr	r3, [r7, #28]
 8002db0:	3303      	adds	r3, #3
 8002db2:	089b      	lsrs	r3, r3, #2
 8002db4:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	68d9      	ldr	r1, [r3, #12]
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	b2da      	uxtb	r2, r3
 8002dbe:	69fb      	ldr	r3, [r7, #28]
 8002dc0:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002dc6:	9300      	str	r3, [sp, #0]
 8002dc8:	4603      	mov	r3, r0
 8002dca:	6978      	ldr	r0, [r7, #20]
 8002dcc:	f003 f836 	bl	8005e3c <USB_WritePacket>

    ep->xfer_buff  += len;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	68da      	ldr	r2, [r3, #12]
 8002dd4:	69fb      	ldr	r3, [r7, #28]
 8002dd6:	441a      	add	r2, r3
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	695a      	ldr	r2, [r3, #20]
 8002de0:	69fb      	ldr	r3, [r7, #28]
 8002de2:	441a      	add	r2, r3
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	015a      	lsls	r2, r3, #5
 8002dec:	693b      	ldr	r3, [r7, #16]
 8002dee:	4413      	add	r3, r2
 8002df0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002df4:	699b      	ldr	r3, [r3, #24]
 8002df6:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002df8:	69ba      	ldr	r2, [r7, #24]
 8002dfa:	429a      	cmp	r2, r3
 8002dfc:	d809      	bhi.n	8002e12 <PCD_WriteEmptyTxFifo+0xde>
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	695a      	ldr	r2, [r3, #20]
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002e06:	429a      	cmp	r2, r3
 8002e08:	d203      	bcs.n	8002e12 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	691b      	ldr	r3, [r3, #16]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d1bf      	bne.n	8002d92 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	691a      	ldr	r2, [r3, #16]
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	695b      	ldr	r3, [r3, #20]
 8002e1a:	429a      	cmp	r2, r3
 8002e1c:	d811      	bhi.n	8002e42 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	f003 030f 	and.w	r3, r3, #15
 8002e24:	2201      	movs	r2, #1
 8002e26:	fa02 f303 	lsl.w	r3, r2, r3
 8002e2a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002e2c:	693b      	ldr	r3, [r7, #16]
 8002e2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e32:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e34:	68bb      	ldr	r3, [r7, #8]
 8002e36:	43db      	mvns	r3, r3
 8002e38:	6939      	ldr	r1, [r7, #16]
 8002e3a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002e3e:	4013      	ands	r3, r2
 8002e40:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002e42:	2300      	movs	r3, #0
}
 8002e44:	4618      	mov	r0, r3
 8002e46:	3720      	adds	r7, #32
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bd80      	pop	{r7, pc}

08002e4c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b088      	sub	sp, #32
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
 8002e54:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e5c:	69fb      	ldr	r3, [r7, #28]
 8002e5e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002e60:	69fb      	ldr	r3, [r7, #28]
 8002e62:	333c      	adds	r3, #60	; 0x3c
 8002e64:	3304      	adds	r3, #4
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	015a      	lsls	r2, r3, #5
 8002e6e:	69bb      	ldr	r3, [r7, #24]
 8002e70:	4413      	add	r3, r2
 8002e72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e76:	689b      	ldr	r3, [r3, #8]
 8002e78:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	799b      	ldrb	r3, [r3, #6]
 8002e7e:	2b01      	cmp	r3, #1
 8002e80:	d17b      	bne.n	8002f7a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002e82:	693b      	ldr	r3, [r7, #16]
 8002e84:	f003 0308 	and.w	r3, r3, #8
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d015      	beq.n	8002eb8 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002e8c:	697b      	ldr	r3, [r7, #20]
 8002e8e:	4a61      	ldr	r2, [pc, #388]	; (8003014 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002e90:	4293      	cmp	r3, r2
 8002e92:	f240 80b9 	bls.w	8003008 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002e96:	693b      	ldr	r3, [r7, #16]
 8002e98:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	f000 80b3 	beq.w	8003008 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	015a      	lsls	r2, r3, #5
 8002ea6:	69bb      	ldr	r3, [r7, #24]
 8002ea8:	4413      	add	r3, r2
 8002eaa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002eae:	461a      	mov	r2, r3
 8002eb0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002eb4:	6093      	str	r3, [r2, #8]
 8002eb6:	e0a7      	b.n	8003008 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002eb8:	693b      	ldr	r3, [r7, #16]
 8002eba:	f003 0320 	and.w	r3, r3, #32
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d009      	beq.n	8002ed6 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	015a      	lsls	r2, r3, #5
 8002ec6:	69bb      	ldr	r3, [r7, #24]
 8002ec8:	4413      	add	r3, r2
 8002eca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ece:	461a      	mov	r2, r3
 8002ed0:	2320      	movs	r3, #32
 8002ed2:	6093      	str	r3, [r2, #8]
 8002ed4:	e098      	b.n	8003008 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002ed6:	693b      	ldr	r3, [r7, #16]
 8002ed8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	f040 8093 	bne.w	8003008 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002ee2:	697b      	ldr	r3, [r7, #20]
 8002ee4:	4a4b      	ldr	r2, [pc, #300]	; (8003014 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d90f      	bls.n	8002f0a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002eea:	693b      	ldr	r3, [r7, #16]
 8002eec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d00a      	beq.n	8002f0a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	015a      	lsls	r2, r3, #5
 8002ef8:	69bb      	ldr	r3, [r7, #24]
 8002efa:	4413      	add	r3, r2
 8002efc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f00:	461a      	mov	r2, r3
 8002f02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f06:	6093      	str	r3, [r2, #8]
 8002f08:	e07e      	b.n	8003008 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8002f0a:	683a      	ldr	r2, [r7, #0]
 8002f0c:	4613      	mov	r3, r2
 8002f0e:	00db      	lsls	r3, r3, #3
 8002f10:	4413      	add	r3, r2
 8002f12:	009b      	lsls	r3, r3, #2
 8002f14:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8002f18:	687a      	ldr	r2, [r7, #4]
 8002f1a:	4413      	add	r3, r2
 8002f1c:	3304      	adds	r3, #4
 8002f1e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	6a1a      	ldr	r2, [r3, #32]
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	0159      	lsls	r1, r3, #5
 8002f28:	69bb      	ldr	r3, [r7, #24]
 8002f2a:	440b      	add	r3, r1
 8002f2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f30:	691b      	ldr	r3, [r3, #16]
 8002f32:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f36:	1ad2      	subs	r2, r2, r3
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d114      	bne.n	8002f6c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	691b      	ldr	r3, [r3, #16]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d109      	bne.n	8002f5e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6818      	ldr	r0, [r3, #0]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8002f54:	461a      	mov	r2, r3
 8002f56:	2101      	movs	r1, #1
 8002f58:	f003 fa06 	bl	8006368 <USB_EP0_OutStart>
 8002f5c:	e006      	b.n	8002f6c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	68da      	ldr	r2, [r3, #12]
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	695b      	ldr	r3, [r3, #20]
 8002f66:	441a      	add	r2, r3
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	b2db      	uxtb	r3, r3
 8002f70:	4619      	mov	r1, r3
 8002f72:	6878      	ldr	r0, [r7, #4]
 8002f74:	f005 fd2a 	bl	80089cc <HAL_PCD_DataOutStageCallback>
 8002f78:	e046      	b.n	8003008 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002f7a:	697b      	ldr	r3, [r7, #20]
 8002f7c:	4a26      	ldr	r2, [pc, #152]	; (8003018 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d124      	bne.n	8002fcc <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002f82:	693b      	ldr	r3, [r7, #16]
 8002f84:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d00a      	beq.n	8002fa2 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	015a      	lsls	r2, r3, #5
 8002f90:	69bb      	ldr	r3, [r7, #24]
 8002f92:	4413      	add	r3, r2
 8002f94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f98:	461a      	mov	r2, r3
 8002f9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f9e:	6093      	str	r3, [r2, #8]
 8002fa0:	e032      	b.n	8003008 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002fa2:	693b      	ldr	r3, [r7, #16]
 8002fa4:	f003 0320 	and.w	r3, r3, #32
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d008      	beq.n	8002fbe <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	015a      	lsls	r2, r3, #5
 8002fb0:	69bb      	ldr	r3, [r7, #24]
 8002fb2:	4413      	add	r3, r2
 8002fb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002fb8:	461a      	mov	r2, r3
 8002fba:	2320      	movs	r3, #32
 8002fbc:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	b2db      	uxtb	r3, r3
 8002fc2:	4619      	mov	r1, r3
 8002fc4:	6878      	ldr	r0, [r7, #4]
 8002fc6:	f005 fd01 	bl	80089cc <HAL_PCD_DataOutStageCallback>
 8002fca:	e01d      	b.n	8003008 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d114      	bne.n	8002ffc <PCD_EP_OutXfrComplete_int+0x1b0>
 8002fd2:	6879      	ldr	r1, [r7, #4]
 8002fd4:	683a      	ldr	r2, [r7, #0]
 8002fd6:	4613      	mov	r3, r2
 8002fd8:	00db      	lsls	r3, r3, #3
 8002fda:	4413      	add	r3, r2
 8002fdc:	009b      	lsls	r3, r3, #2
 8002fde:	440b      	add	r3, r1
 8002fe0:	f503 7319 	add.w	r3, r3, #612	; 0x264
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d108      	bne.n	8002ffc <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6818      	ldr	r0, [r3, #0]
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8002ff4:	461a      	mov	r2, r3
 8002ff6:	2100      	movs	r1, #0
 8002ff8:	f003 f9b6 	bl	8006368 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	b2db      	uxtb	r3, r3
 8003000:	4619      	mov	r1, r3
 8003002:	6878      	ldr	r0, [r7, #4]
 8003004:	f005 fce2 	bl	80089cc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003008:	2300      	movs	r3, #0
}
 800300a:	4618      	mov	r0, r3
 800300c:	3720      	adds	r7, #32
 800300e:	46bd      	mov	sp, r7
 8003010:	bd80      	pop	{r7, pc}
 8003012:	bf00      	nop
 8003014:	4f54300a 	.word	0x4f54300a
 8003018:	4f54310a 	.word	0x4f54310a

0800301c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b086      	sub	sp, #24
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
 8003024:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800302c:	697b      	ldr	r3, [r7, #20]
 800302e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003030:	697b      	ldr	r3, [r7, #20]
 8003032:	333c      	adds	r3, #60	; 0x3c
 8003034:	3304      	adds	r3, #4
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	015a      	lsls	r2, r3, #5
 800303e:	693b      	ldr	r3, [r7, #16]
 8003040:	4413      	add	r3, r2
 8003042:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003046:	689b      	ldr	r3, [r3, #8]
 8003048:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	4a15      	ldr	r2, [pc, #84]	; (80030a4 <PCD_EP_OutSetupPacket_int+0x88>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d90e      	bls.n	8003070 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003052:	68bb      	ldr	r3, [r7, #8]
 8003054:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003058:	2b00      	cmp	r3, #0
 800305a:	d009      	beq.n	8003070 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	015a      	lsls	r2, r3, #5
 8003060:	693b      	ldr	r3, [r7, #16]
 8003062:	4413      	add	r3, r2
 8003064:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003068:	461a      	mov	r2, r3
 800306a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800306e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003070:	6878      	ldr	r0, [r7, #4]
 8003072:	f005 fc99 	bl	80089a8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	4a0a      	ldr	r2, [pc, #40]	; (80030a4 <PCD_EP_OutSetupPacket_int+0x88>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d90c      	bls.n	8003098 <PCD_EP_OutSetupPacket_int+0x7c>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	799b      	ldrb	r3, [r3, #6]
 8003082:	2b01      	cmp	r3, #1
 8003084:	d108      	bne.n	8003098 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6818      	ldr	r0, [r3, #0]
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8003090:	461a      	mov	r2, r3
 8003092:	2101      	movs	r1, #1
 8003094:	f003 f968 	bl	8006368 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003098:	2300      	movs	r3, #0
}
 800309a:	4618      	mov	r0, r3
 800309c:	3718      	adds	r7, #24
 800309e:	46bd      	mov	sp, r7
 80030a0:	bd80      	pop	{r7, pc}
 80030a2:	bf00      	nop
 80030a4:	4f54300a 	.word	0x4f54300a

080030a8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80030a8:	b480      	push	{r7}
 80030aa:	b085      	sub	sp, #20
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
 80030b0:	460b      	mov	r3, r1
 80030b2:	70fb      	strb	r3, [r7, #3]
 80030b4:	4613      	mov	r3, r2
 80030b6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030be:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80030c0:	78fb      	ldrb	r3, [r7, #3]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d107      	bne.n	80030d6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80030c6:	883b      	ldrh	r3, [r7, #0]
 80030c8:	0419      	lsls	r1, r3, #16
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	68ba      	ldr	r2, [r7, #8]
 80030d0:	430a      	orrs	r2, r1
 80030d2:	629a      	str	r2, [r3, #40]	; 0x28
 80030d4:	e028      	b.n	8003128 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030dc:	0c1b      	lsrs	r3, r3, #16
 80030de:	68ba      	ldr	r2, [r7, #8]
 80030e0:	4413      	add	r3, r2
 80030e2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80030e4:	2300      	movs	r3, #0
 80030e6:	73fb      	strb	r3, [r7, #15]
 80030e8:	e00d      	b.n	8003106 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681a      	ldr	r2, [r3, #0]
 80030ee:	7bfb      	ldrb	r3, [r7, #15]
 80030f0:	3340      	adds	r3, #64	; 0x40
 80030f2:	009b      	lsls	r3, r3, #2
 80030f4:	4413      	add	r3, r2
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	0c1b      	lsrs	r3, r3, #16
 80030fa:	68ba      	ldr	r2, [r7, #8]
 80030fc:	4413      	add	r3, r2
 80030fe:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003100:	7bfb      	ldrb	r3, [r7, #15]
 8003102:	3301      	adds	r3, #1
 8003104:	73fb      	strb	r3, [r7, #15]
 8003106:	7bfa      	ldrb	r2, [r7, #15]
 8003108:	78fb      	ldrb	r3, [r7, #3]
 800310a:	3b01      	subs	r3, #1
 800310c:	429a      	cmp	r2, r3
 800310e:	d3ec      	bcc.n	80030ea <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003110:	883b      	ldrh	r3, [r7, #0]
 8003112:	0418      	lsls	r0, r3, #16
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6819      	ldr	r1, [r3, #0]
 8003118:	78fb      	ldrb	r3, [r7, #3]
 800311a:	3b01      	subs	r3, #1
 800311c:	68ba      	ldr	r2, [r7, #8]
 800311e:	4302      	orrs	r2, r0
 8003120:	3340      	adds	r3, #64	; 0x40
 8003122:	009b      	lsls	r3, r3, #2
 8003124:	440b      	add	r3, r1
 8003126:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003128:	2300      	movs	r3, #0
}
 800312a:	4618      	mov	r0, r3
 800312c:	3714      	adds	r7, #20
 800312e:	46bd      	mov	sp, r7
 8003130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003134:	4770      	bx	lr

08003136 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003136:	b480      	push	{r7}
 8003138:	b083      	sub	sp, #12
 800313a:	af00      	add	r7, sp, #0
 800313c:	6078      	str	r0, [r7, #4]
 800313e:	460b      	mov	r3, r1
 8003140:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	887a      	ldrh	r2, [r7, #2]
 8003148:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800314a:	2300      	movs	r3, #0
}
 800314c:	4618      	mov	r0, r3
 800314e:	370c      	adds	r7, #12
 8003150:	46bd      	mov	sp, r7
 8003152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003156:	4770      	bx	lr

08003158 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003158:	b480      	push	{r7}
 800315a:	b083      	sub	sp, #12
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
 8003160:	460b      	mov	r3, r1
 8003162:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003164:	bf00      	nop
 8003166:	370c      	adds	r7, #12
 8003168:	46bd      	mov	sp, r7
 800316a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316e:	4770      	bx	lr

08003170 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b086      	sub	sp, #24
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d101      	bne.n	8003182 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800317e:	2301      	movs	r3, #1
 8003180:	e267      	b.n	8003652 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f003 0301 	and.w	r3, r3, #1
 800318a:	2b00      	cmp	r3, #0
 800318c:	d075      	beq.n	800327a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800318e:	4b88      	ldr	r3, [pc, #544]	; (80033b0 <HAL_RCC_OscConfig+0x240>)
 8003190:	689b      	ldr	r3, [r3, #8]
 8003192:	f003 030c 	and.w	r3, r3, #12
 8003196:	2b04      	cmp	r3, #4
 8003198:	d00c      	beq.n	80031b4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800319a:	4b85      	ldr	r3, [pc, #532]	; (80033b0 <HAL_RCC_OscConfig+0x240>)
 800319c:	689b      	ldr	r3, [r3, #8]
 800319e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80031a2:	2b08      	cmp	r3, #8
 80031a4:	d112      	bne.n	80031cc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80031a6:	4b82      	ldr	r3, [pc, #520]	; (80033b0 <HAL_RCC_OscConfig+0x240>)
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031ae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80031b2:	d10b      	bne.n	80031cc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031b4:	4b7e      	ldr	r3, [pc, #504]	; (80033b0 <HAL_RCC_OscConfig+0x240>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d05b      	beq.n	8003278 <HAL_RCC_OscConfig+0x108>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d157      	bne.n	8003278 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80031c8:	2301      	movs	r3, #1
 80031ca:	e242      	b.n	8003652 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031d4:	d106      	bne.n	80031e4 <HAL_RCC_OscConfig+0x74>
 80031d6:	4b76      	ldr	r3, [pc, #472]	; (80033b0 <HAL_RCC_OscConfig+0x240>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4a75      	ldr	r2, [pc, #468]	; (80033b0 <HAL_RCC_OscConfig+0x240>)
 80031dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031e0:	6013      	str	r3, [r2, #0]
 80031e2:	e01d      	b.n	8003220 <HAL_RCC_OscConfig+0xb0>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80031ec:	d10c      	bne.n	8003208 <HAL_RCC_OscConfig+0x98>
 80031ee:	4b70      	ldr	r3, [pc, #448]	; (80033b0 <HAL_RCC_OscConfig+0x240>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4a6f      	ldr	r2, [pc, #444]	; (80033b0 <HAL_RCC_OscConfig+0x240>)
 80031f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80031f8:	6013      	str	r3, [r2, #0]
 80031fa:	4b6d      	ldr	r3, [pc, #436]	; (80033b0 <HAL_RCC_OscConfig+0x240>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4a6c      	ldr	r2, [pc, #432]	; (80033b0 <HAL_RCC_OscConfig+0x240>)
 8003200:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003204:	6013      	str	r3, [r2, #0]
 8003206:	e00b      	b.n	8003220 <HAL_RCC_OscConfig+0xb0>
 8003208:	4b69      	ldr	r3, [pc, #420]	; (80033b0 <HAL_RCC_OscConfig+0x240>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4a68      	ldr	r2, [pc, #416]	; (80033b0 <HAL_RCC_OscConfig+0x240>)
 800320e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003212:	6013      	str	r3, [r2, #0]
 8003214:	4b66      	ldr	r3, [pc, #408]	; (80033b0 <HAL_RCC_OscConfig+0x240>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4a65      	ldr	r2, [pc, #404]	; (80033b0 <HAL_RCC_OscConfig+0x240>)
 800321a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800321e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	2b00      	cmp	r3, #0
 8003226:	d013      	beq.n	8003250 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003228:	f7fd fe8a 	bl	8000f40 <HAL_GetTick>
 800322c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800322e:	e008      	b.n	8003242 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003230:	f7fd fe86 	bl	8000f40 <HAL_GetTick>
 8003234:	4602      	mov	r2, r0
 8003236:	693b      	ldr	r3, [r7, #16]
 8003238:	1ad3      	subs	r3, r2, r3
 800323a:	2b64      	cmp	r3, #100	; 0x64
 800323c:	d901      	bls.n	8003242 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800323e:	2303      	movs	r3, #3
 8003240:	e207      	b.n	8003652 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003242:	4b5b      	ldr	r3, [pc, #364]	; (80033b0 <HAL_RCC_OscConfig+0x240>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800324a:	2b00      	cmp	r3, #0
 800324c:	d0f0      	beq.n	8003230 <HAL_RCC_OscConfig+0xc0>
 800324e:	e014      	b.n	800327a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003250:	f7fd fe76 	bl	8000f40 <HAL_GetTick>
 8003254:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003256:	e008      	b.n	800326a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003258:	f7fd fe72 	bl	8000f40 <HAL_GetTick>
 800325c:	4602      	mov	r2, r0
 800325e:	693b      	ldr	r3, [r7, #16]
 8003260:	1ad3      	subs	r3, r2, r3
 8003262:	2b64      	cmp	r3, #100	; 0x64
 8003264:	d901      	bls.n	800326a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003266:	2303      	movs	r3, #3
 8003268:	e1f3      	b.n	8003652 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800326a:	4b51      	ldr	r3, [pc, #324]	; (80033b0 <HAL_RCC_OscConfig+0x240>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003272:	2b00      	cmp	r3, #0
 8003274:	d1f0      	bne.n	8003258 <HAL_RCC_OscConfig+0xe8>
 8003276:	e000      	b.n	800327a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003278:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f003 0302 	and.w	r3, r3, #2
 8003282:	2b00      	cmp	r3, #0
 8003284:	d063      	beq.n	800334e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003286:	4b4a      	ldr	r3, [pc, #296]	; (80033b0 <HAL_RCC_OscConfig+0x240>)
 8003288:	689b      	ldr	r3, [r3, #8]
 800328a:	f003 030c 	and.w	r3, r3, #12
 800328e:	2b00      	cmp	r3, #0
 8003290:	d00b      	beq.n	80032aa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003292:	4b47      	ldr	r3, [pc, #284]	; (80033b0 <HAL_RCC_OscConfig+0x240>)
 8003294:	689b      	ldr	r3, [r3, #8]
 8003296:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800329a:	2b08      	cmp	r3, #8
 800329c:	d11c      	bne.n	80032d8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800329e:	4b44      	ldr	r3, [pc, #272]	; (80033b0 <HAL_RCC_OscConfig+0x240>)
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d116      	bne.n	80032d8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032aa:	4b41      	ldr	r3, [pc, #260]	; (80033b0 <HAL_RCC_OscConfig+0x240>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f003 0302 	and.w	r3, r3, #2
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d005      	beq.n	80032c2 <HAL_RCC_OscConfig+0x152>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	68db      	ldr	r3, [r3, #12]
 80032ba:	2b01      	cmp	r3, #1
 80032bc:	d001      	beq.n	80032c2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80032be:	2301      	movs	r3, #1
 80032c0:	e1c7      	b.n	8003652 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032c2:	4b3b      	ldr	r3, [pc, #236]	; (80033b0 <HAL_RCC_OscConfig+0x240>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	691b      	ldr	r3, [r3, #16]
 80032ce:	00db      	lsls	r3, r3, #3
 80032d0:	4937      	ldr	r1, [pc, #220]	; (80033b0 <HAL_RCC_OscConfig+0x240>)
 80032d2:	4313      	orrs	r3, r2
 80032d4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032d6:	e03a      	b.n	800334e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	68db      	ldr	r3, [r3, #12]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d020      	beq.n	8003322 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80032e0:	4b34      	ldr	r3, [pc, #208]	; (80033b4 <HAL_RCC_OscConfig+0x244>)
 80032e2:	2201      	movs	r2, #1
 80032e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032e6:	f7fd fe2b 	bl	8000f40 <HAL_GetTick>
 80032ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032ec:	e008      	b.n	8003300 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80032ee:	f7fd fe27 	bl	8000f40 <HAL_GetTick>
 80032f2:	4602      	mov	r2, r0
 80032f4:	693b      	ldr	r3, [r7, #16]
 80032f6:	1ad3      	subs	r3, r2, r3
 80032f8:	2b02      	cmp	r3, #2
 80032fa:	d901      	bls.n	8003300 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80032fc:	2303      	movs	r3, #3
 80032fe:	e1a8      	b.n	8003652 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003300:	4b2b      	ldr	r3, [pc, #172]	; (80033b0 <HAL_RCC_OscConfig+0x240>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f003 0302 	and.w	r3, r3, #2
 8003308:	2b00      	cmp	r3, #0
 800330a:	d0f0      	beq.n	80032ee <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800330c:	4b28      	ldr	r3, [pc, #160]	; (80033b0 <HAL_RCC_OscConfig+0x240>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	691b      	ldr	r3, [r3, #16]
 8003318:	00db      	lsls	r3, r3, #3
 800331a:	4925      	ldr	r1, [pc, #148]	; (80033b0 <HAL_RCC_OscConfig+0x240>)
 800331c:	4313      	orrs	r3, r2
 800331e:	600b      	str	r3, [r1, #0]
 8003320:	e015      	b.n	800334e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003322:	4b24      	ldr	r3, [pc, #144]	; (80033b4 <HAL_RCC_OscConfig+0x244>)
 8003324:	2200      	movs	r2, #0
 8003326:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003328:	f7fd fe0a 	bl	8000f40 <HAL_GetTick>
 800332c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800332e:	e008      	b.n	8003342 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003330:	f7fd fe06 	bl	8000f40 <HAL_GetTick>
 8003334:	4602      	mov	r2, r0
 8003336:	693b      	ldr	r3, [r7, #16]
 8003338:	1ad3      	subs	r3, r2, r3
 800333a:	2b02      	cmp	r3, #2
 800333c:	d901      	bls.n	8003342 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800333e:	2303      	movs	r3, #3
 8003340:	e187      	b.n	8003652 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003342:	4b1b      	ldr	r3, [pc, #108]	; (80033b0 <HAL_RCC_OscConfig+0x240>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f003 0302 	and.w	r3, r3, #2
 800334a:	2b00      	cmp	r3, #0
 800334c:	d1f0      	bne.n	8003330 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f003 0308 	and.w	r3, r3, #8
 8003356:	2b00      	cmp	r3, #0
 8003358:	d036      	beq.n	80033c8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	695b      	ldr	r3, [r3, #20]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d016      	beq.n	8003390 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003362:	4b15      	ldr	r3, [pc, #84]	; (80033b8 <HAL_RCC_OscConfig+0x248>)
 8003364:	2201      	movs	r2, #1
 8003366:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003368:	f7fd fdea 	bl	8000f40 <HAL_GetTick>
 800336c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800336e:	e008      	b.n	8003382 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003370:	f7fd fde6 	bl	8000f40 <HAL_GetTick>
 8003374:	4602      	mov	r2, r0
 8003376:	693b      	ldr	r3, [r7, #16]
 8003378:	1ad3      	subs	r3, r2, r3
 800337a:	2b02      	cmp	r3, #2
 800337c:	d901      	bls.n	8003382 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800337e:	2303      	movs	r3, #3
 8003380:	e167      	b.n	8003652 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003382:	4b0b      	ldr	r3, [pc, #44]	; (80033b0 <HAL_RCC_OscConfig+0x240>)
 8003384:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003386:	f003 0302 	and.w	r3, r3, #2
 800338a:	2b00      	cmp	r3, #0
 800338c:	d0f0      	beq.n	8003370 <HAL_RCC_OscConfig+0x200>
 800338e:	e01b      	b.n	80033c8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003390:	4b09      	ldr	r3, [pc, #36]	; (80033b8 <HAL_RCC_OscConfig+0x248>)
 8003392:	2200      	movs	r2, #0
 8003394:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003396:	f7fd fdd3 	bl	8000f40 <HAL_GetTick>
 800339a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800339c:	e00e      	b.n	80033bc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800339e:	f7fd fdcf 	bl	8000f40 <HAL_GetTick>
 80033a2:	4602      	mov	r2, r0
 80033a4:	693b      	ldr	r3, [r7, #16]
 80033a6:	1ad3      	subs	r3, r2, r3
 80033a8:	2b02      	cmp	r3, #2
 80033aa:	d907      	bls.n	80033bc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80033ac:	2303      	movs	r3, #3
 80033ae:	e150      	b.n	8003652 <HAL_RCC_OscConfig+0x4e2>
 80033b0:	40023800 	.word	0x40023800
 80033b4:	42470000 	.word	0x42470000
 80033b8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033bc:	4b88      	ldr	r3, [pc, #544]	; (80035e0 <HAL_RCC_OscConfig+0x470>)
 80033be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033c0:	f003 0302 	and.w	r3, r3, #2
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d1ea      	bne.n	800339e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f003 0304 	and.w	r3, r3, #4
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	f000 8097 	beq.w	8003504 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033d6:	2300      	movs	r3, #0
 80033d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033da:	4b81      	ldr	r3, [pc, #516]	; (80035e0 <HAL_RCC_OscConfig+0x470>)
 80033dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d10f      	bne.n	8003406 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033e6:	2300      	movs	r3, #0
 80033e8:	60bb      	str	r3, [r7, #8]
 80033ea:	4b7d      	ldr	r3, [pc, #500]	; (80035e0 <HAL_RCC_OscConfig+0x470>)
 80033ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ee:	4a7c      	ldr	r2, [pc, #496]	; (80035e0 <HAL_RCC_OscConfig+0x470>)
 80033f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033f4:	6413      	str	r3, [r2, #64]	; 0x40
 80033f6:	4b7a      	ldr	r3, [pc, #488]	; (80035e0 <HAL_RCC_OscConfig+0x470>)
 80033f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033fe:	60bb      	str	r3, [r7, #8]
 8003400:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003402:	2301      	movs	r3, #1
 8003404:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003406:	4b77      	ldr	r3, [pc, #476]	; (80035e4 <HAL_RCC_OscConfig+0x474>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800340e:	2b00      	cmp	r3, #0
 8003410:	d118      	bne.n	8003444 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003412:	4b74      	ldr	r3, [pc, #464]	; (80035e4 <HAL_RCC_OscConfig+0x474>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4a73      	ldr	r2, [pc, #460]	; (80035e4 <HAL_RCC_OscConfig+0x474>)
 8003418:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800341c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800341e:	f7fd fd8f 	bl	8000f40 <HAL_GetTick>
 8003422:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003424:	e008      	b.n	8003438 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003426:	f7fd fd8b 	bl	8000f40 <HAL_GetTick>
 800342a:	4602      	mov	r2, r0
 800342c:	693b      	ldr	r3, [r7, #16]
 800342e:	1ad3      	subs	r3, r2, r3
 8003430:	2b02      	cmp	r3, #2
 8003432:	d901      	bls.n	8003438 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003434:	2303      	movs	r3, #3
 8003436:	e10c      	b.n	8003652 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003438:	4b6a      	ldr	r3, [pc, #424]	; (80035e4 <HAL_RCC_OscConfig+0x474>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003440:	2b00      	cmp	r3, #0
 8003442:	d0f0      	beq.n	8003426 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	689b      	ldr	r3, [r3, #8]
 8003448:	2b01      	cmp	r3, #1
 800344a:	d106      	bne.n	800345a <HAL_RCC_OscConfig+0x2ea>
 800344c:	4b64      	ldr	r3, [pc, #400]	; (80035e0 <HAL_RCC_OscConfig+0x470>)
 800344e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003450:	4a63      	ldr	r2, [pc, #396]	; (80035e0 <HAL_RCC_OscConfig+0x470>)
 8003452:	f043 0301 	orr.w	r3, r3, #1
 8003456:	6713      	str	r3, [r2, #112]	; 0x70
 8003458:	e01c      	b.n	8003494 <HAL_RCC_OscConfig+0x324>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	689b      	ldr	r3, [r3, #8]
 800345e:	2b05      	cmp	r3, #5
 8003460:	d10c      	bne.n	800347c <HAL_RCC_OscConfig+0x30c>
 8003462:	4b5f      	ldr	r3, [pc, #380]	; (80035e0 <HAL_RCC_OscConfig+0x470>)
 8003464:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003466:	4a5e      	ldr	r2, [pc, #376]	; (80035e0 <HAL_RCC_OscConfig+0x470>)
 8003468:	f043 0304 	orr.w	r3, r3, #4
 800346c:	6713      	str	r3, [r2, #112]	; 0x70
 800346e:	4b5c      	ldr	r3, [pc, #368]	; (80035e0 <HAL_RCC_OscConfig+0x470>)
 8003470:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003472:	4a5b      	ldr	r2, [pc, #364]	; (80035e0 <HAL_RCC_OscConfig+0x470>)
 8003474:	f043 0301 	orr.w	r3, r3, #1
 8003478:	6713      	str	r3, [r2, #112]	; 0x70
 800347a:	e00b      	b.n	8003494 <HAL_RCC_OscConfig+0x324>
 800347c:	4b58      	ldr	r3, [pc, #352]	; (80035e0 <HAL_RCC_OscConfig+0x470>)
 800347e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003480:	4a57      	ldr	r2, [pc, #348]	; (80035e0 <HAL_RCC_OscConfig+0x470>)
 8003482:	f023 0301 	bic.w	r3, r3, #1
 8003486:	6713      	str	r3, [r2, #112]	; 0x70
 8003488:	4b55      	ldr	r3, [pc, #340]	; (80035e0 <HAL_RCC_OscConfig+0x470>)
 800348a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800348c:	4a54      	ldr	r2, [pc, #336]	; (80035e0 <HAL_RCC_OscConfig+0x470>)
 800348e:	f023 0304 	bic.w	r3, r3, #4
 8003492:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	689b      	ldr	r3, [r3, #8]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d015      	beq.n	80034c8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800349c:	f7fd fd50 	bl	8000f40 <HAL_GetTick>
 80034a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034a2:	e00a      	b.n	80034ba <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034a4:	f7fd fd4c 	bl	8000f40 <HAL_GetTick>
 80034a8:	4602      	mov	r2, r0
 80034aa:	693b      	ldr	r3, [r7, #16]
 80034ac:	1ad3      	subs	r3, r2, r3
 80034ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d901      	bls.n	80034ba <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80034b6:	2303      	movs	r3, #3
 80034b8:	e0cb      	b.n	8003652 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034ba:	4b49      	ldr	r3, [pc, #292]	; (80035e0 <HAL_RCC_OscConfig+0x470>)
 80034bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034be:	f003 0302 	and.w	r3, r3, #2
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d0ee      	beq.n	80034a4 <HAL_RCC_OscConfig+0x334>
 80034c6:	e014      	b.n	80034f2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034c8:	f7fd fd3a 	bl	8000f40 <HAL_GetTick>
 80034cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034ce:	e00a      	b.n	80034e6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034d0:	f7fd fd36 	bl	8000f40 <HAL_GetTick>
 80034d4:	4602      	mov	r2, r0
 80034d6:	693b      	ldr	r3, [r7, #16]
 80034d8:	1ad3      	subs	r3, r2, r3
 80034da:	f241 3288 	movw	r2, #5000	; 0x1388
 80034de:	4293      	cmp	r3, r2
 80034e0:	d901      	bls.n	80034e6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80034e2:	2303      	movs	r3, #3
 80034e4:	e0b5      	b.n	8003652 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034e6:	4b3e      	ldr	r3, [pc, #248]	; (80035e0 <HAL_RCC_OscConfig+0x470>)
 80034e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034ea:	f003 0302 	and.w	r3, r3, #2
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d1ee      	bne.n	80034d0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80034f2:	7dfb      	ldrb	r3, [r7, #23]
 80034f4:	2b01      	cmp	r3, #1
 80034f6:	d105      	bne.n	8003504 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034f8:	4b39      	ldr	r3, [pc, #228]	; (80035e0 <HAL_RCC_OscConfig+0x470>)
 80034fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034fc:	4a38      	ldr	r2, [pc, #224]	; (80035e0 <HAL_RCC_OscConfig+0x470>)
 80034fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003502:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	699b      	ldr	r3, [r3, #24]
 8003508:	2b00      	cmp	r3, #0
 800350a:	f000 80a1 	beq.w	8003650 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800350e:	4b34      	ldr	r3, [pc, #208]	; (80035e0 <HAL_RCC_OscConfig+0x470>)
 8003510:	689b      	ldr	r3, [r3, #8]
 8003512:	f003 030c 	and.w	r3, r3, #12
 8003516:	2b08      	cmp	r3, #8
 8003518:	d05c      	beq.n	80035d4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	699b      	ldr	r3, [r3, #24]
 800351e:	2b02      	cmp	r3, #2
 8003520:	d141      	bne.n	80035a6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003522:	4b31      	ldr	r3, [pc, #196]	; (80035e8 <HAL_RCC_OscConfig+0x478>)
 8003524:	2200      	movs	r2, #0
 8003526:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003528:	f7fd fd0a 	bl	8000f40 <HAL_GetTick>
 800352c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800352e:	e008      	b.n	8003542 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003530:	f7fd fd06 	bl	8000f40 <HAL_GetTick>
 8003534:	4602      	mov	r2, r0
 8003536:	693b      	ldr	r3, [r7, #16]
 8003538:	1ad3      	subs	r3, r2, r3
 800353a:	2b02      	cmp	r3, #2
 800353c:	d901      	bls.n	8003542 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800353e:	2303      	movs	r3, #3
 8003540:	e087      	b.n	8003652 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003542:	4b27      	ldr	r3, [pc, #156]	; (80035e0 <HAL_RCC_OscConfig+0x470>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800354a:	2b00      	cmp	r3, #0
 800354c:	d1f0      	bne.n	8003530 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	69da      	ldr	r2, [r3, #28]
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6a1b      	ldr	r3, [r3, #32]
 8003556:	431a      	orrs	r2, r3
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800355c:	019b      	lsls	r3, r3, #6
 800355e:	431a      	orrs	r2, r3
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003564:	085b      	lsrs	r3, r3, #1
 8003566:	3b01      	subs	r3, #1
 8003568:	041b      	lsls	r3, r3, #16
 800356a:	431a      	orrs	r2, r3
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003570:	061b      	lsls	r3, r3, #24
 8003572:	491b      	ldr	r1, [pc, #108]	; (80035e0 <HAL_RCC_OscConfig+0x470>)
 8003574:	4313      	orrs	r3, r2
 8003576:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003578:	4b1b      	ldr	r3, [pc, #108]	; (80035e8 <HAL_RCC_OscConfig+0x478>)
 800357a:	2201      	movs	r2, #1
 800357c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800357e:	f7fd fcdf 	bl	8000f40 <HAL_GetTick>
 8003582:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003584:	e008      	b.n	8003598 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003586:	f7fd fcdb 	bl	8000f40 <HAL_GetTick>
 800358a:	4602      	mov	r2, r0
 800358c:	693b      	ldr	r3, [r7, #16]
 800358e:	1ad3      	subs	r3, r2, r3
 8003590:	2b02      	cmp	r3, #2
 8003592:	d901      	bls.n	8003598 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003594:	2303      	movs	r3, #3
 8003596:	e05c      	b.n	8003652 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003598:	4b11      	ldr	r3, [pc, #68]	; (80035e0 <HAL_RCC_OscConfig+0x470>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d0f0      	beq.n	8003586 <HAL_RCC_OscConfig+0x416>
 80035a4:	e054      	b.n	8003650 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035a6:	4b10      	ldr	r3, [pc, #64]	; (80035e8 <HAL_RCC_OscConfig+0x478>)
 80035a8:	2200      	movs	r2, #0
 80035aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035ac:	f7fd fcc8 	bl	8000f40 <HAL_GetTick>
 80035b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035b2:	e008      	b.n	80035c6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035b4:	f7fd fcc4 	bl	8000f40 <HAL_GetTick>
 80035b8:	4602      	mov	r2, r0
 80035ba:	693b      	ldr	r3, [r7, #16]
 80035bc:	1ad3      	subs	r3, r2, r3
 80035be:	2b02      	cmp	r3, #2
 80035c0:	d901      	bls.n	80035c6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80035c2:	2303      	movs	r3, #3
 80035c4:	e045      	b.n	8003652 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035c6:	4b06      	ldr	r3, [pc, #24]	; (80035e0 <HAL_RCC_OscConfig+0x470>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d1f0      	bne.n	80035b4 <HAL_RCC_OscConfig+0x444>
 80035d2:	e03d      	b.n	8003650 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	699b      	ldr	r3, [r3, #24]
 80035d8:	2b01      	cmp	r3, #1
 80035da:	d107      	bne.n	80035ec <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80035dc:	2301      	movs	r3, #1
 80035de:	e038      	b.n	8003652 <HAL_RCC_OscConfig+0x4e2>
 80035e0:	40023800 	.word	0x40023800
 80035e4:	40007000 	.word	0x40007000
 80035e8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80035ec:	4b1b      	ldr	r3, [pc, #108]	; (800365c <HAL_RCC_OscConfig+0x4ec>)
 80035ee:	685b      	ldr	r3, [r3, #4]
 80035f0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	699b      	ldr	r3, [r3, #24]
 80035f6:	2b01      	cmp	r3, #1
 80035f8:	d028      	beq.n	800364c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003604:	429a      	cmp	r2, r3
 8003606:	d121      	bne.n	800364c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003612:	429a      	cmp	r2, r3
 8003614:	d11a      	bne.n	800364c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003616:	68fa      	ldr	r2, [r7, #12]
 8003618:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800361c:	4013      	ands	r3, r2
 800361e:	687a      	ldr	r2, [r7, #4]
 8003620:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003622:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003624:	4293      	cmp	r3, r2
 8003626:	d111      	bne.n	800364c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003632:	085b      	lsrs	r3, r3, #1
 8003634:	3b01      	subs	r3, #1
 8003636:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003638:	429a      	cmp	r2, r3
 800363a:	d107      	bne.n	800364c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003646:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003648:	429a      	cmp	r2, r3
 800364a:	d001      	beq.n	8003650 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800364c:	2301      	movs	r3, #1
 800364e:	e000      	b.n	8003652 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003650:	2300      	movs	r3, #0
}
 8003652:	4618      	mov	r0, r3
 8003654:	3718      	adds	r7, #24
 8003656:	46bd      	mov	sp, r7
 8003658:	bd80      	pop	{r7, pc}
 800365a:	bf00      	nop
 800365c:	40023800 	.word	0x40023800

08003660 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b084      	sub	sp, #16
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
 8003668:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d101      	bne.n	8003674 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003670:	2301      	movs	r3, #1
 8003672:	e0cc      	b.n	800380e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003674:	4b68      	ldr	r3, [pc, #416]	; (8003818 <HAL_RCC_ClockConfig+0x1b8>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f003 0307 	and.w	r3, r3, #7
 800367c:	683a      	ldr	r2, [r7, #0]
 800367e:	429a      	cmp	r2, r3
 8003680:	d90c      	bls.n	800369c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003682:	4b65      	ldr	r3, [pc, #404]	; (8003818 <HAL_RCC_ClockConfig+0x1b8>)
 8003684:	683a      	ldr	r2, [r7, #0]
 8003686:	b2d2      	uxtb	r2, r2
 8003688:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800368a:	4b63      	ldr	r3, [pc, #396]	; (8003818 <HAL_RCC_ClockConfig+0x1b8>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f003 0307 	and.w	r3, r3, #7
 8003692:	683a      	ldr	r2, [r7, #0]
 8003694:	429a      	cmp	r2, r3
 8003696:	d001      	beq.n	800369c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003698:	2301      	movs	r3, #1
 800369a:	e0b8      	b.n	800380e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f003 0302 	and.w	r3, r3, #2
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d020      	beq.n	80036ea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f003 0304 	and.w	r3, r3, #4
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d005      	beq.n	80036c0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80036b4:	4b59      	ldr	r3, [pc, #356]	; (800381c <HAL_RCC_ClockConfig+0x1bc>)
 80036b6:	689b      	ldr	r3, [r3, #8]
 80036b8:	4a58      	ldr	r2, [pc, #352]	; (800381c <HAL_RCC_ClockConfig+0x1bc>)
 80036ba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80036be:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f003 0308 	and.w	r3, r3, #8
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d005      	beq.n	80036d8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80036cc:	4b53      	ldr	r3, [pc, #332]	; (800381c <HAL_RCC_ClockConfig+0x1bc>)
 80036ce:	689b      	ldr	r3, [r3, #8]
 80036d0:	4a52      	ldr	r2, [pc, #328]	; (800381c <HAL_RCC_ClockConfig+0x1bc>)
 80036d2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80036d6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036d8:	4b50      	ldr	r3, [pc, #320]	; (800381c <HAL_RCC_ClockConfig+0x1bc>)
 80036da:	689b      	ldr	r3, [r3, #8]
 80036dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	689b      	ldr	r3, [r3, #8]
 80036e4:	494d      	ldr	r1, [pc, #308]	; (800381c <HAL_RCC_ClockConfig+0x1bc>)
 80036e6:	4313      	orrs	r3, r2
 80036e8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f003 0301 	and.w	r3, r3, #1
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d044      	beq.n	8003780 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	2b01      	cmp	r3, #1
 80036fc:	d107      	bne.n	800370e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036fe:	4b47      	ldr	r3, [pc, #284]	; (800381c <HAL_RCC_ClockConfig+0x1bc>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003706:	2b00      	cmp	r3, #0
 8003708:	d119      	bne.n	800373e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800370a:	2301      	movs	r3, #1
 800370c:	e07f      	b.n	800380e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	685b      	ldr	r3, [r3, #4]
 8003712:	2b02      	cmp	r3, #2
 8003714:	d003      	beq.n	800371e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800371a:	2b03      	cmp	r3, #3
 800371c:	d107      	bne.n	800372e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800371e:	4b3f      	ldr	r3, [pc, #252]	; (800381c <HAL_RCC_ClockConfig+0x1bc>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003726:	2b00      	cmp	r3, #0
 8003728:	d109      	bne.n	800373e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800372a:	2301      	movs	r3, #1
 800372c:	e06f      	b.n	800380e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800372e:	4b3b      	ldr	r3, [pc, #236]	; (800381c <HAL_RCC_ClockConfig+0x1bc>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f003 0302 	and.w	r3, r3, #2
 8003736:	2b00      	cmp	r3, #0
 8003738:	d101      	bne.n	800373e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800373a:	2301      	movs	r3, #1
 800373c:	e067      	b.n	800380e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800373e:	4b37      	ldr	r3, [pc, #220]	; (800381c <HAL_RCC_ClockConfig+0x1bc>)
 8003740:	689b      	ldr	r3, [r3, #8]
 8003742:	f023 0203 	bic.w	r2, r3, #3
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	4934      	ldr	r1, [pc, #208]	; (800381c <HAL_RCC_ClockConfig+0x1bc>)
 800374c:	4313      	orrs	r3, r2
 800374e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003750:	f7fd fbf6 	bl	8000f40 <HAL_GetTick>
 8003754:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003756:	e00a      	b.n	800376e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003758:	f7fd fbf2 	bl	8000f40 <HAL_GetTick>
 800375c:	4602      	mov	r2, r0
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	1ad3      	subs	r3, r2, r3
 8003762:	f241 3288 	movw	r2, #5000	; 0x1388
 8003766:	4293      	cmp	r3, r2
 8003768:	d901      	bls.n	800376e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800376a:	2303      	movs	r3, #3
 800376c:	e04f      	b.n	800380e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800376e:	4b2b      	ldr	r3, [pc, #172]	; (800381c <HAL_RCC_ClockConfig+0x1bc>)
 8003770:	689b      	ldr	r3, [r3, #8]
 8003772:	f003 020c 	and.w	r2, r3, #12
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	009b      	lsls	r3, r3, #2
 800377c:	429a      	cmp	r2, r3
 800377e:	d1eb      	bne.n	8003758 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003780:	4b25      	ldr	r3, [pc, #148]	; (8003818 <HAL_RCC_ClockConfig+0x1b8>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f003 0307 	and.w	r3, r3, #7
 8003788:	683a      	ldr	r2, [r7, #0]
 800378a:	429a      	cmp	r2, r3
 800378c:	d20c      	bcs.n	80037a8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800378e:	4b22      	ldr	r3, [pc, #136]	; (8003818 <HAL_RCC_ClockConfig+0x1b8>)
 8003790:	683a      	ldr	r2, [r7, #0]
 8003792:	b2d2      	uxtb	r2, r2
 8003794:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003796:	4b20      	ldr	r3, [pc, #128]	; (8003818 <HAL_RCC_ClockConfig+0x1b8>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f003 0307 	and.w	r3, r3, #7
 800379e:	683a      	ldr	r2, [r7, #0]
 80037a0:	429a      	cmp	r2, r3
 80037a2:	d001      	beq.n	80037a8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80037a4:	2301      	movs	r3, #1
 80037a6:	e032      	b.n	800380e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f003 0304 	and.w	r3, r3, #4
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d008      	beq.n	80037c6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80037b4:	4b19      	ldr	r3, [pc, #100]	; (800381c <HAL_RCC_ClockConfig+0x1bc>)
 80037b6:	689b      	ldr	r3, [r3, #8]
 80037b8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	68db      	ldr	r3, [r3, #12]
 80037c0:	4916      	ldr	r1, [pc, #88]	; (800381c <HAL_RCC_ClockConfig+0x1bc>)
 80037c2:	4313      	orrs	r3, r2
 80037c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f003 0308 	and.w	r3, r3, #8
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d009      	beq.n	80037e6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80037d2:	4b12      	ldr	r3, [pc, #72]	; (800381c <HAL_RCC_ClockConfig+0x1bc>)
 80037d4:	689b      	ldr	r3, [r3, #8]
 80037d6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	691b      	ldr	r3, [r3, #16]
 80037de:	00db      	lsls	r3, r3, #3
 80037e0:	490e      	ldr	r1, [pc, #56]	; (800381c <HAL_RCC_ClockConfig+0x1bc>)
 80037e2:	4313      	orrs	r3, r2
 80037e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80037e6:	f000 f821 	bl	800382c <HAL_RCC_GetSysClockFreq>
 80037ea:	4602      	mov	r2, r0
 80037ec:	4b0b      	ldr	r3, [pc, #44]	; (800381c <HAL_RCC_ClockConfig+0x1bc>)
 80037ee:	689b      	ldr	r3, [r3, #8]
 80037f0:	091b      	lsrs	r3, r3, #4
 80037f2:	f003 030f 	and.w	r3, r3, #15
 80037f6:	490a      	ldr	r1, [pc, #40]	; (8003820 <HAL_RCC_ClockConfig+0x1c0>)
 80037f8:	5ccb      	ldrb	r3, [r1, r3]
 80037fa:	fa22 f303 	lsr.w	r3, r2, r3
 80037fe:	4a09      	ldr	r2, [pc, #36]	; (8003824 <HAL_RCC_ClockConfig+0x1c4>)
 8003800:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003802:	4b09      	ldr	r3, [pc, #36]	; (8003828 <HAL_RCC_ClockConfig+0x1c8>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4618      	mov	r0, r3
 8003808:	f7fd fb56 	bl	8000eb8 <HAL_InitTick>

  return HAL_OK;
 800380c:	2300      	movs	r3, #0
}
 800380e:	4618      	mov	r0, r3
 8003810:	3710      	adds	r7, #16
 8003812:	46bd      	mov	sp, r7
 8003814:	bd80      	pop	{r7, pc}
 8003816:	bf00      	nop
 8003818:	40023c00 	.word	0x40023c00
 800381c:	40023800 	.word	0x40023800
 8003820:	08009904 	.word	0x08009904
 8003824:	20000000 	.word	0x20000000
 8003828:	20000004 	.word	0x20000004

0800382c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800382c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003830:	b090      	sub	sp, #64	; 0x40
 8003832:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003834:	2300      	movs	r3, #0
 8003836:	637b      	str	r3, [r7, #52]	; 0x34
 8003838:	2300      	movs	r3, #0
 800383a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800383c:	2300      	movs	r3, #0
 800383e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003840:	2300      	movs	r3, #0
 8003842:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003844:	4b59      	ldr	r3, [pc, #356]	; (80039ac <HAL_RCC_GetSysClockFreq+0x180>)
 8003846:	689b      	ldr	r3, [r3, #8]
 8003848:	f003 030c 	and.w	r3, r3, #12
 800384c:	2b08      	cmp	r3, #8
 800384e:	d00d      	beq.n	800386c <HAL_RCC_GetSysClockFreq+0x40>
 8003850:	2b08      	cmp	r3, #8
 8003852:	f200 80a1 	bhi.w	8003998 <HAL_RCC_GetSysClockFreq+0x16c>
 8003856:	2b00      	cmp	r3, #0
 8003858:	d002      	beq.n	8003860 <HAL_RCC_GetSysClockFreq+0x34>
 800385a:	2b04      	cmp	r3, #4
 800385c:	d003      	beq.n	8003866 <HAL_RCC_GetSysClockFreq+0x3a>
 800385e:	e09b      	b.n	8003998 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003860:	4b53      	ldr	r3, [pc, #332]	; (80039b0 <HAL_RCC_GetSysClockFreq+0x184>)
 8003862:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003864:	e09b      	b.n	800399e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003866:	4b53      	ldr	r3, [pc, #332]	; (80039b4 <HAL_RCC_GetSysClockFreq+0x188>)
 8003868:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800386a:	e098      	b.n	800399e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800386c:	4b4f      	ldr	r3, [pc, #316]	; (80039ac <HAL_RCC_GetSysClockFreq+0x180>)
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003874:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003876:	4b4d      	ldr	r3, [pc, #308]	; (80039ac <HAL_RCC_GetSysClockFreq+0x180>)
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800387e:	2b00      	cmp	r3, #0
 8003880:	d028      	beq.n	80038d4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003882:	4b4a      	ldr	r3, [pc, #296]	; (80039ac <HAL_RCC_GetSysClockFreq+0x180>)
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	099b      	lsrs	r3, r3, #6
 8003888:	2200      	movs	r2, #0
 800388a:	623b      	str	r3, [r7, #32]
 800388c:	627a      	str	r2, [r7, #36]	; 0x24
 800388e:	6a3b      	ldr	r3, [r7, #32]
 8003890:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003894:	2100      	movs	r1, #0
 8003896:	4b47      	ldr	r3, [pc, #284]	; (80039b4 <HAL_RCC_GetSysClockFreq+0x188>)
 8003898:	fb03 f201 	mul.w	r2, r3, r1
 800389c:	2300      	movs	r3, #0
 800389e:	fb00 f303 	mul.w	r3, r0, r3
 80038a2:	4413      	add	r3, r2
 80038a4:	4a43      	ldr	r2, [pc, #268]	; (80039b4 <HAL_RCC_GetSysClockFreq+0x188>)
 80038a6:	fba0 1202 	umull	r1, r2, r0, r2
 80038aa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80038ac:	460a      	mov	r2, r1
 80038ae:	62ba      	str	r2, [r7, #40]	; 0x28
 80038b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80038b2:	4413      	add	r3, r2
 80038b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80038b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038b8:	2200      	movs	r2, #0
 80038ba:	61bb      	str	r3, [r7, #24]
 80038bc:	61fa      	str	r2, [r7, #28]
 80038be:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80038c2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80038c6:	f7fc fcdb 	bl	8000280 <__aeabi_uldivmod>
 80038ca:	4602      	mov	r2, r0
 80038cc:	460b      	mov	r3, r1
 80038ce:	4613      	mov	r3, r2
 80038d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80038d2:	e053      	b.n	800397c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80038d4:	4b35      	ldr	r3, [pc, #212]	; (80039ac <HAL_RCC_GetSysClockFreq+0x180>)
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	099b      	lsrs	r3, r3, #6
 80038da:	2200      	movs	r2, #0
 80038dc:	613b      	str	r3, [r7, #16]
 80038de:	617a      	str	r2, [r7, #20]
 80038e0:	693b      	ldr	r3, [r7, #16]
 80038e2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80038e6:	f04f 0b00 	mov.w	fp, #0
 80038ea:	4652      	mov	r2, sl
 80038ec:	465b      	mov	r3, fp
 80038ee:	f04f 0000 	mov.w	r0, #0
 80038f2:	f04f 0100 	mov.w	r1, #0
 80038f6:	0159      	lsls	r1, r3, #5
 80038f8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80038fc:	0150      	lsls	r0, r2, #5
 80038fe:	4602      	mov	r2, r0
 8003900:	460b      	mov	r3, r1
 8003902:	ebb2 080a 	subs.w	r8, r2, sl
 8003906:	eb63 090b 	sbc.w	r9, r3, fp
 800390a:	f04f 0200 	mov.w	r2, #0
 800390e:	f04f 0300 	mov.w	r3, #0
 8003912:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003916:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800391a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800391e:	ebb2 0408 	subs.w	r4, r2, r8
 8003922:	eb63 0509 	sbc.w	r5, r3, r9
 8003926:	f04f 0200 	mov.w	r2, #0
 800392a:	f04f 0300 	mov.w	r3, #0
 800392e:	00eb      	lsls	r3, r5, #3
 8003930:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003934:	00e2      	lsls	r2, r4, #3
 8003936:	4614      	mov	r4, r2
 8003938:	461d      	mov	r5, r3
 800393a:	eb14 030a 	adds.w	r3, r4, sl
 800393e:	603b      	str	r3, [r7, #0]
 8003940:	eb45 030b 	adc.w	r3, r5, fp
 8003944:	607b      	str	r3, [r7, #4]
 8003946:	f04f 0200 	mov.w	r2, #0
 800394a:	f04f 0300 	mov.w	r3, #0
 800394e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003952:	4629      	mov	r1, r5
 8003954:	028b      	lsls	r3, r1, #10
 8003956:	4621      	mov	r1, r4
 8003958:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800395c:	4621      	mov	r1, r4
 800395e:	028a      	lsls	r2, r1, #10
 8003960:	4610      	mov	r0, r2
 8003962:	4619      	mov	r1, r3
 8003964:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003966:	2200      	movs	r2, #0
 8003968:	60bb      	str	r3, [r7, #8]
 800396a:	60fa      	str	r2, [r7, #12]
 800396c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003970:	f7fc fc86 	bl	8000280 <__aeabi_uldivmod>
 8003974:	4602      	mov	r2, r0
 8003976:	460b      	mov	r3, r1
 8003978:	4613      	mov	r3, r2
 800397a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800397c:	4b0b      	ldr	r3, [pc, #44]	; (80039ac <HAL_RCC_GetSysClockFreq+0x180>)
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	0c1b      	lsrs	r3, r3, #16
 8003982:	f003 0303 	and.w	r3, r3, #3
 8003986:	3301      	adds	r3, #1
 8003988:	005b      	lsls	r3, r3, #1
 800398a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800398c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800398e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003990:	fbb2 f3f3 	udiv	r3, r2, r3
 8003994:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003996:	e002      	b.n	800399e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003998:	4b05      	ldr	r3, [pc, #20]	; (80039b0 <HAL_RCC_GetSysClockFreq+0x184>)
 800399a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800399c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800399e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80039a0:	4618      	mov	r0, r3
 80039a2:	3740      	adds	r7, #64	; 0x40
 80039a4:	46bd      	mov	sp, r7
 80039a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80039aa:	bf00      	nop
 80039ac:	40023800 	.word	0x40023800
 80039b0:	00f42400 	.word	0x00f42400
 80039b4:	017d7840 	.word	0x017d7840

080039b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80039b8:	b480      	push	{r7}
 80039ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80039bc:	4b03      	ldr	r3, [pc, #12]	; (80039cc <HAL_RCC_GetHCLKFreq+0x14>)
 80039be:	681b      	ldr	r3, [r3, #0]
}
 80039c0:	4618      	mov	r0, r3
 80039c2:	46bd      	mov	sp, r7
 80039c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c8:	4770      	bx	lr
 80039ca:	bf00      	nop
 80039cc:	20000000 	.word	0x20000000

080039d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80039d4:	f7ff fff0 	bl	80039b8 <HAL_RCC_GetHCLKFreq>
 80039d8:	4602      	mov	r2, r0
 80039da:	4b05      	ldr	r3, [pc, #20]	; (80039f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80039dc:	689b      	ldr	r3, [r3, #8]
 80039de:	0a9b      	lsrs	r3, r3, #10
 80039e0:	f003 0307 	and.w	r3, r3, #7
 80039e4:	4903      	ldr	r1, [pc, #12]	; (80039f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80039e6:	5ccb      	ldrb	r3, [r1, r3]
 80039e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039ec:	4618      	mov	r0, r3
 80039ee:	bd80      	pop	{r7, pc}
 80039f0:	40023800 	.word	0x40023800
 80039f4:	08009914 	.word	0x08009914

080039f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80039fc:	f7ff ffdc 	bl	80039b8 <HAL_RCC_GetHCLKFreq>
 8003a00:	4602      	mov	r2, r0
 8003a02:	4b05      	ldr	r3, [pc, #20]	; (8003a18 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003a04:	689b      	ldr	r3, [r3, #8]
 8003a06:	0b5b      	lsrs	r3, r3, #13
 8003a08:	f003 0307 	and.w	r3, r3, #7
 8003a0c:	4903      	ldr	r1, [pc, #12]	; (8003a1c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a0e:	5ccb      	ldrb	r3, [r1, r3]
 8003a10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a14:	4618      	mov	r0, r3
 8003a16:	bd80      	pop	{r7, pc}
 8003a18:	40023800 	.word	0x40023800
 8003a1c:	08009914 	.word	0x08009914

08003a20 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b082      	sub	sp, #8
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d101      	bne.n	8003a32 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a2e:	2301      	movs	r3, #1
 8003a30:	e042      	b.n	8003ab8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a38:	b2db      	uxtb	r3, r3
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d106      	bne.n	8003a4c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2200      	movs	r2, #0
 8003a42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a46:	6878      	ldr	r0, [r7, #4]
 8003a48:	f7fc ff58 	bl	80008fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2224      	movs	r2, #36	; 0x24
 8003a50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	68da      	ldr	r2, [r3, #12]
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003a62:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003a64:	6878      	ldr	r0, [r7, #4]
 8003a66:	f000 ff59 	bl	800491c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	691a      	ldr	r2, [r3, #16]
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003a78:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	695a      	ldr	r2, [r3, #20]
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003a88:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	68da      	ldr	r2, [r3, #12]
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003a98:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2220      	movs	r2, #32
 8003aa4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2220      	movs	r2, #32
 8003aac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003ab6:	2300      	movs	r3, #0
}
 8003ab8:	4618      	mov	r0, r3
 8003aba:	3708      	adds	r7, #8
 8003abc:	46bd      	mov	sp, r7
 8003abe:	bd80      	pop	{r7, pc}

08003ac0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b08a      	sub	sp, #40	; 0x28
 8003ac4:	af02      	add	r7, sp, #8
 8003ac6:	60f8      	str	r0, [r7, #12]
 8003ac8:	60b9      	str	r1, [r7, #8]
 8003aca:	603b      	str	r3, [r7, #0]
 8003acc:	4613      	mov	r3, r2
 8003ace:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ada:	b2db      	uxtb	r3, r3
 8003adc:	2b20      	cmp	r3, #32
 8003ade:	d175      	bne.n	8003bcc <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ae0:	68bb      	ldr	r3, [r7, #8]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d002      	beq.n	8003aec <HAL_UART_Transmit+0x2c>
 8003ae6:	88fb      	ldrh	r3, [r7, #6]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d101      	bne.n	8003af0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003aec:	2301      	movs	r3, #1
 8003aee:	e06e      	b.n	8003bce <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	2200      	movs	r2, #0
 8003af4:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	2221      	movs	r2, #33	; 0x21
 8003afa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003afe:	f7fd fa1f 	bl	8000f40 <HAL_GetTick>
 8003b02:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	88fa      	ldrh	r2, [r7, #6]
 8003b08:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	88fa      	ldrh	r2, [r7, #6]
 8003b0e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	689b      	ldr	r3, [r3, #8]
 8003b14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b18:	d108      	bne.n	8003b2c <HAL_UART_Transmit+0x6c>
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	691b      	ldr	r3, [r3, #16]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d104      	bne.n	8003b2c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003b22:	2300      	movs	r3, #0
 8003b24:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003b26:	68bb      	ldr	r3, [r7, #8]
 8003b28:	61bb      	str	r3, [r7, #24]
 8003b2a:	e003      	b.n	8003b34 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003b2c:	68bb      	ldr	r3, [r7, #8]
 8003b2e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003b30:	2300      	movs	r3, #0
 8003b32:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003b34:	e02e      	b.n	8003b94 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	9300      	str	r3, [sp, #0]
 8003b3a:	697b      	ldr	r3, [r7, #20]
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	2180      	movs	r1, #128	; 0x80
 8003b40:	68f8      	ldr	r0, [r7, #12]
 8003b42:	f000 fc31 	bl	80043a8 <UART_WaitOnFlagUntilTimeout>
 8003b46:	4603      	mov	r3, r0
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d005      	beq.n	8003b58 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	2220      	movs	r2, #32
 8003b50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8003b54:	2303      	movs	r3, #3
 8003b56:	e03a      	b.n	8003bce <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003b58:	69fb      	ldr	r3, [r7, #28]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d10b      	bne.n	8003b76 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003b5e:	69bb      	ldr	r3, [r7, #24]
 8003b60:	881b      	ldrh	r3, [r3, #0]
 8003b62:	461a      	mov	r2, r3
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003b6c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003b6e:	69bb      	ldr	r3, [r7, #24]
 8003b70:	3302      	adds	r3, #2
 8003b72:	61bb      	str	r3, [r7, #24]
 8003b74:	e007      	b.n	8003b86 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003b76:	69fb      	ldr	r3, [r7, #28]
 8003b78:	781a      	ldrb	r2, [r3, #0]
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003b80:	69fb      	ldr	r3, [r7, #28]
 8003b82:	3301      	adds	r3, #1
 8003b84:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003b8a:	b29b      	uxth	r3, r3
 8003b8c:	3b01      	subs	r3, #1
 8003b8e:	b29a      	uxth	r2, r3
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003b98:	b29b      	uxth	r3, r3
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d1cb      	bne.n	8003b36 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	9300      	str	r3, [sp, #0]
 8003ba2:	697b      	ldr	r3, [r7, #20]
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	2140      	movs	r1, #64	; 0x40
 8003ba8:	68f8      	ldr	r0, [r7, #12]
 8003baa:	f000 fbfd 	bl	80043a8 <UART_WaitOnFlagUntilTimeout>
 8003bae:	4603      	mov	r3, r0
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d005      	beq.n	8003bc0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	2220      	movs	r2, #32
 8003bb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8003bbc:	2303      	movs	r3, #3
 8003bbe:	e006      	b.n	8003bce <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	2220      	movs	r2, #32
 8003bc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8003bc8:	2300      	movs	r3, #0
 8003bca:	e000      	b.n	8003bce <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003bcc:	2302      	movs	r3, #2
  }
}
 8003bce:	4618      	mov	r0, r3
 8003bd0:	3720      	adds	r7, #32
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	bd80      	pop	{r7, pc}

08003bd6 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003bd6:	b580      	push	{r7, lr}
 8003bd8:	b084      	sub	sp, #16
 8003bda:	af00      	add	r7, sp, #0
 8003bdc:	60f8      	str	r0, [r7, #12]
 8003bde:	60b9      	str	r1, [r7, #8]
 8003be0:	4613      	mov	r3, r2
 8003be2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003bea:	b2db      	uxtb	r3, r3
 8003bec:	2b20      	cmp	r3, #32
 8003bee:	d112      	bne.n	8003c16 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003bf0:	68bb      	ldr	r3, [r7, #8]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d002      	beq.n	8003bfc <HAL_UART_Receive_DMA+0x26>
 8003bf6:	88fb      	ldrh	r3, [r7, #6]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d101      	bne.n	8003c00 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8003bfc:	2301      	movs	r3, #1
 8003bfe:	e00b      	b.n	8003c18 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	2200      	movs	r2, #0
 8003c04:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8003c06:	88fb      	ldrh	r3, [r7, #6]
 8003c08:	461a      	mov	r2, r3
 8003c0a:	68b9      	ldr	r1, [r7, #8]
 8003c0c:	68f8      	ldr	r0, [r7, #12]
 8003c0e:	f000 fc25 	bl	800445c <UART_Start_Receive_DMA>
 8003c12:	4603      	mov	r3, r0
 8003c14:	e000      	b.n	8003c18 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003c16:	2302      	movs	r3, #2
  }
}
 8003c18:	4618      	mov	r0, r3
 8003c1a:	3710      	adds	r7, #16
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	bd80      	pop	{r7, pc}

08003c20 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b0ba      	sub	sp, #232	; 0xe8
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	68db      	ldr	r3, [r3, #12]
 8003c38:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	695b      	ldr	r3, [r3, #20]
 8003c42:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003c46:	2300      	movs	r3, #0
 8003c48:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003c52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c56:	f003 030f 	and.w	r3, r3, #15
 8003c5a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003c5e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d10f      	bne.n	8003c86 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003c66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c6a:	f003 0320 	and.w	r3, r3, #32
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d009      	beq.n	8003c86 <HAL_UART_IRQHandler+0x66>
 8003c72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c76:	f003 0320 	and.w	r3, r3, #32
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d003      	beq.n	8003c86 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003c7e:	6878      	ldr	r0, [r7, #4]
 8003c80:	f000 fd8d 	bl	800479e <UART_Receive_IT>
      return;
 8003c84:	e25b      	b.n	800413e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003c86:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	f000 80de 	beq.w	8003e4c <HAL_UART_IRQHandler+0x22c>
 8003c90:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003c94:	f003 0301 	and.w	r3, r3, #1
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d106      	bne.n	8003caa <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003c9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ca0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	f000 80d1 	beq.w	8003e4c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003caa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003cae:	f003 0301 	and.w	r3, r3, #1
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d00b      	beq.n	8003cce <HAL_UART_IRQHandler+0xae>
 8003cb6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003cba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d005      	beq.n	8003cce <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cc6:	f043 0201 	orr.w	r2, r3, #1
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003cce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003cd2:	f003 0304 	and.w	r3, r3, #4
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d00b      	beq.n	8003cf2 <HAL_UART_IRQHandler+0xd2>
 8003cda:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003cde:	f003 0301 	and.w	r3, r3, #1
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d005      	beq.n	8003cf2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cea:	f043 0202 	orr.w	r2, r3, #2
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003cf2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003cf6:	f003 0302 	and.w	r3, r3, #2
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d00b      	beq.n	8003d16 <HAL_UART_IRQHandler+0xf6>
 8003cfe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003d02:	f003 0301 	and.w	r3, r3, #1
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d005      	beq.n	8003d16 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d0e:	f043 0204 	orr.w	r2, r3, #4
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003d16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d1a:	f003 0308 	and.w	r3, r3, #8
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d011      	beq.n	8003d46 <HAL_UART_IRQHandler+0x126>
 8003d22:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d26:	f003 0320 	and.w	r3, r3, #32
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d105      	bne.n	8003d3a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003d2e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003d32:	f003 0301 	and.w	r3, r3, #1
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d005      	beq.n	8003d46 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d3e:	f043 0208 	orr.w	r2, r3, #8
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	f000 81f2 	beq.w	8004134 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003d50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d54:	f003 0320 	and.w	r3, r3, #32
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d008      	beq.n	8003d6e <HAL_UART_IRQHandler+0x14e>
 8003d5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d60:	f003 0320 	and.w	r3, r3, #32
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d002      	beq.n	8003d6e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003d68:	6878      	ldr	r0, [r7, #4]
 8003d6a:	f000 fd18 	bl	800479e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	695b      	ldr	r3, [r3, #20]
 8003d74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d78:	2b40      	cmp	r3, #64	; 0x40
 8003d7a:	bf0c      	ite	eq
 8003d7c:	2301      	moveq	r3, #1
 8003d7e:	2300      	movne	r3, #0
 8003d80:	b2db      	uxtb	r3, r3
 8003d82:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d8a:	f003 0308 	and.w	r3, r3, #8
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d103      	bne.n	8003d9a <HAL_UART_IRQHandler+0x17a>
 8003d92:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d04f      	beq.n	8003e3a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003d9a:	6878      	ldr	r0, [r7, #4]
 8003d9c:	f000 fc20 	bl	80045e0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	695b      	ldr	r3, [r3, #20]
 8003da6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003daa:	2b40      	cmp	r3, #64	; 0x40
 8003dac:	d141      	bne.n	8003e32 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	3314      	adds	r3, #20
 8003db4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003db8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003dbc:	e853 3f00 	ldrex	r3, [r3]
 8003dc0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003dc4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003dc8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003dcc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	3314      	adds	r3, #20
 8003dd6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003dda:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003dde:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003de2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003de6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003dea:	e841 2300 	strex	r3, r2, [r1]
 8003dee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003df2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d1d9      	bne.n	8003dae <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d013      	beq.n	8003e2a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e06:	4a7e      	ldr	r2, [pc, #504]	; (8004000 <HAL_UART_IRQHandler+0x3e0>)
 8003e08:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e0e:	4618      	mov	r0, r3
 8003e10:	f7fd fb4e 	bl	80014b0 <HAL_DMA_Abort_IT>
 8003e14:	4603      	mov	r3, r0
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d016      	beq.n	8003e48 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e20:	687a      	ldr	r2, [r7, #4]
 8003e22:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003e24:	4610      	mov	r0, r2
 8003e26:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e28:	e00e      	b.n	8003e48 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003e2a:	6878      	ldr	r0, [r7, #4]
 8003e2c:	f000 f9a8 	bl	8004180 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e30:	e00a      	b.n	8003e48 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003e32:	6878      	ldr	r0, [r7, #4]
 8003e34:	f000 f9a4 	bl	8004180 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e38:	e006      	b.n	8003e48 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003e3a:	6878      	ldr	r0, [r7, #4]
 8003e3c:	f000 f9a0 	bl	8004180 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2200      	movs	r2, #0
 8003e44:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8003e46:	e175      	b.n	8004134 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e48:	bf00      	nop
    return;
 8003e4a:	e173      	b.n	8004134 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e50:	2b01      	cmp	r3, #1
 8003e52:	f040 814f 	bne.w	80040f4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003e56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e5a:	f003 0310 	and.w	r3, r3, #16
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	f000 8148 	beq.w	80040f4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003e64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e68:	f003 0310 	and.w	r3, r3, #16
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	f000 8141 	beq.w	80040f4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003e72:	2300      	movs	r3, #0
 8003e74:	60bb      	str	r3, [r7, #8]
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	60bb      	str	r3, [r7, #8]
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	60bb      	str	r3, [r7, #8]
 8003e86:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	695b      	ldr	r3, [r3, #20]
 8003e8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e92:	2b40      	cmp	r3, #64	; 0x40
 8003e94:	f040 80b6 	bne.w	8004004 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	685b      	ldr	r3, [r3, #4]
 8003ea0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003ea4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	f000 8145 	beq.w	8004138 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003eb2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003eb6:	429a      	cmp	r2, r3
 8003eb8:	f080 813e 	bcs.w	8004138 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003ec2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ec8:	69db      	ldr	r3, [r3, #28]
 8003eca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ece:	f000 8088 	beq.w	8003fe2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	330c      	adds	r3, #12
 8003ed8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003edc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003ee0:	e853 3f00 	ldrex	r3, [r3]
 8003ee4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003ee8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003eec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ef0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	330c      	adds	r3, #12
 8003efa:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003efe:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003f02:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f06:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003f0a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003f0e:	e841 2300 	strex	r3, r2, [r1]
 8003f12:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003f16:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d1d9      	bne.n	8003ed2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	3314      	adds	r3, #20
 8003f24:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f26:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f28:	e853 3f00 	ldrex	r3, [r3]
 8003f2c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003f2e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003f30:	f023 0301 	bic.w	r3, r3, #1
 8003f34:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	3314      	adds	r3, #20
 8003f3e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003f42:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003f46:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f48:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003f4a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003f4e:	e841 2300 	strex	r3, r2, [r1]
 8003f52:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003f54:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d1e1      	bne.n	8003f1e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	3314      	adds	r3, #20
 8003f60:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f62:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003f64:	e853 3f00 	ldrex	r3, [r3]
 8003f68:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003f6a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003f6c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f70:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	3314      	adds	r3, #20
 8003f7a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003f7e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003f80:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f82:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003f84:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003f86:	e841 2300 	strex	r3, r2, [r1]
 8003f8a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003f8c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d1e3      	bne.n	8003f5a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2220      	movs	r2, #32
 8003f96:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	330c      	adds	r3, #12
 8003fa6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fa8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003faa:	e853 3f00 	ldrex	r3, [r3]
 8003fae:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003fb0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003fb2:	f023 0310 	bic.w	r3, r3, #16
 8003fb6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	330c      	adds	r3, #12
 8003fc0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003fc4:	65ba      	str	r2, [r7, #88]	; 0x58
 8003fc6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fc8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003fca:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003fcc:	e841 2300 	strex	r3, r2, [r1]
 8003fd0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003fd2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d1e3      	bne.n	8003fa0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fdc:	4618      	mov	r0, r3
 8003fde:	f7fd f9f7 	bl	80013d0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2202      	movs	r2, #2
 8003fe6:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003ff0:	b29b      	uxth	r3, r3
 8003ff2:	1ad3      	subs	r3, r2, r3
 8003ff4:	b29b      	uxth	r3, r3
 8003ff6:	4619      	mov	r1, r3
 8003ff8:	6878      	ldr	r0, [r7, #4]
 8003ffa:	f000 f8cb 	bl	8004194 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003ffe:	e09b      	b.n	8004138 <HAL_UART_IRQHandler+0x518>
 8004000:	080046a7 	.word	0x080046a7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800400c:	b29b      	uxth	r3, r3
 800400e:	1ad3      	subs	r3, r2, r3
 8004010:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004018:	b29b      	uxth	r3, r3
 800401a:	2b00      	cmp	r3, #0
 800401c:	f000 808e 	beq.w	800413c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004020:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004024:	2b00      	cmp	r3, #0
 8004026:	f000 8089 	beq.w	800413c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	330c      	adds	r3, #12
 8004030:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004032:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004034:	e853 3f00 	ldrex	r3, [r3]
 8004038:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800403a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800403c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004040:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	330c      	adds	r3, #12
 800404a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800404e:	647a      	str	r2, [r7, #68]	; 0x44
 8004050:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004052:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004054:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004056:	e841 2300 	strex	r3, r2, [r1]
 800405a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800405c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800405e:	2b00      	cmp	r3, #0
 8004060:	d1e3      	bne.n	800402a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	3314      	adds	r3, #20
 8004068:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800406a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800406c:	e853 3f00 	ldrex	r3, [r3]
 8004070:	623b      	str	r3, [r7, #32]
   return(result);
 8004072:	6a3b      	ldr	r3, [r7, #32]
 8004074:	f023 0301 	bic.w	r3, r3, #1
 8004078:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	3314      	adds	r3, #20
 8004082:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004086:	633a      	str	r2, [r7, #48]	; 0x30
 8004088:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800408a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800408c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800408e:	e841 2300 	strex	r3, r2, [r1]
 8004092:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004094:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004096:	2b00      	cmp	r3, #0
 8004098:	d1e3      	bne.n	8004062 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2220      	movs	r2, #32
 800409e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2200      	movs	r2, #0
 80040a6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	330c      	adds	r3, #12
 80040ae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040b0:	693b      	ldr	r3, [r7, #16]
 80040b2:	e853 3f00 	ldrex	r3, [r3]
 80040b6:	60fb      	str	r3, [r7, #12]
   return(result);
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	f023 0310 	bic.w	r3, r3, #16
 80040be:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	330c      	adds	r3, #12
 80040c8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80040cc:	61fa      	str	r2, [r7, #28]
 80040ce:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040d0:	69b9      	ldr	r1, [r7, #24]
 80040d2:	69fa      	ldr	r2, [r7, #28]
 80040d4:	e841 2300 	strex	r3, r2, [r1]
 80040d8:	617b      	str	r3, [r7, #20]
   return(result);
 80040da:	697b      	ldr	r3, [r7, #20]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d1e3      	bne.n	80040a8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2202      	movs	r2, #2
 80040e4:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80040e6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80040ea:	4619      	mov	r1, r3
 80040ec:	6878      	ldr	r0, [r7, #4]
 80040ee:	f000 f851 	bl	8004194 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80040f2:	e023      	b.n	800413c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80040f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d009      	beq.n	8004114 <HAL_UART_IRQHandler+0x4f4>
 8004100:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004104:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004108:	2b00      	cmp	r3, #0
 800410a:	d003      	beq.n	8004114 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800410c:	6878      	ldr	r0, [r7, #4]
 800410e:	f000 fade 	bl	80046ce <UART_Transmit_IT>
    return;
 8004112:	e014      	b.n	800413e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004114:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004118:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800411c:	2b00      	cmp	r3, #0
 800411e:	d00e      	beq.n	800413e <HAL_UART_IRQHandler+0x51e>
 8004120:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004124:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004128:	2b00      	cmp	r3, #0
 800412a:	d008      	beq.n	800413e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800412c:	6878      	ldr	r0, [r7, #4]
 800412e:	f000 fb1e 	bl	800476e <UART_EndTransmit_IT>
    return;
 8004132:	e004      	b.n	800413e <HAL_UART_IRQHandler+0x51e>
    return;
 8004134:	bf00      	nop
 8004136:	e002      	b.n	800413e <HAL_UART_IRQHandler+0x51e>
      return;
 8004138:	bf00      	nop
 800413a:	e000      	b.n	800413e <HAL_UART_IRQHandler+0x51e>
      return;
 800413c:	bf00      	nop
  }
}
 800413e:	37e8      	adds	r7, #232	; 0xe8
 8004140:	46bd      	mov	sp, r7
 8004142:	bd80      	pop	{r7, pc}

08004144 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004144:	b480      	push	{r7}
 8004146:	b083      	sub	sp, #12
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800414c:	bf00      	nop
 800414e:	370c      	adds	r7, #12
 8004150:	46bd      	mov	sp, r7
 8004152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004156:	4770      	bx	lr

08004158 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004158:	b480      	push	{r7}
 800415a:	b083      	sub	sp, #12
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004160:	bf00      	nop
 8004162:	370c      	adds	r7, #12
 8004164:	46bd      	mov	sp, r7
 8004166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416a:	4770      	bx	lr

0800416c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800416c:	b480      	push	{r7}
 800416e:	b083      	sub	sp, #12
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8004174:	bf00      	nop
 8004176:	370c      	adds	r7, #12
 8004178:	46bd      	mov	sp, r7
 800417a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417e:	4770      	bx	lr

08004180 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004180:	b480      	push	{r7}
 8004182:	b083      	sub	sp, #12
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004188:	bf00      	nop
 800418a:	370c      	adds	r7, #12
 800418c:	46bd      	mov	sp, r7
 800418e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004192:	4770      	bx	lr

08004194 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004194:	b480      	push	{r7}
 8004196:	b083      	sub	sp, #12
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
 800419c:	460b      	mov	r3, r1
 800419e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80041a0:	bf00      	nop
 80041a2:	370c      	adds	r7, #12
 80041a4:	46bd      	mov	sp, r7
 80041a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041aa:	4770      	bx	lr

080041ac <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b09c      	sub	sp, #112	; 0x70
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041b8:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d172      	bne.n	80042ae <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80041c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041ca:	2200      	movs	r2, #0
 80041cc:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80041ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	330c      	adds	r3, #12
 80041d4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041d8:	e853 3f00 	ldrex	r3, [r3]
 80041dc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80041de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80041e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80041e4:	66bb      	str	r3, [r7, #104]	; 0x68
 80041e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	330c      	adds	r3, #12
 80041ec:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80041ee:	65ba      	str	r2, [r7, #88]	; 0x58
 80041f0:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041f2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80041f4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80041f6:	e841 2300 	strex	r3, r2, [r1]
 80041fa:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80041fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d1e5      	bne.n	80041ce <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004202:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	3314      	adds	r3, #20
 8004208:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800420a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800420c:	e853 3f00 	ldrex	r3, [r3]
 8004210:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004212:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004214:	f023 0301 	bic.w	r3, r3, #1
 8004218:	667b      	str	r3, [r7, #100]	; 0x64
 800421a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	3314      	adds	r3, #20
 8004220:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004222:	647a      	str	r2, [r7, #68]	; 0x44
 8004224:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004226:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004228:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800422a:	e841 2300 	strex	r3, r2, [r1]
 800422e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004230:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004232:	2b00      	cmp	r3, #0
 8004234:	d1e5      	bne.n	8004202 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004236:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	3314      	adds	r3, #20
 800423c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800423e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004240:	e853 3f00 	ldrex	r3, [r3]
 8004244:	623b      	str	r3, [r7, #32]
   return(result);
 8004246:	6a3b      	ldr	r3, [r7, #32]
 8004248:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800424c:	663b      	str	r3, [r7, #96]	; 0x60
 800424e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	3314      	adds	r3, #20
 8004254:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004256:	633a      	str	r2, [r7, #48]	; 0x30
 8004258:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800425a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800425c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800425e:	e841 2300 	strex	r3, r2, [r1]
 8004262:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004264:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004266:	2b00      	cmp	r3, #0
 8004268:	d1e5      	bne.n	8004236 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800426a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800426c:	2220      	movs	r2, #32
 800426e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004272:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004276:	2b01      	cmp	r3, #1
 8004278:	d119      	bne.n	80042ae <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800427a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	330c      	adds	r3, #12
 8004280:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004282:	693b      	ldr	r3, [r7, #16]
 8004284:	e853 3f00 	ldrex	r3, [r3]
 8004288:	60fb      	str	r3, [r7, #12]
   return(result);
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	f023 0310 	bic.w	r3, r3, #16
 8004290:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004292:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	330c      	adds	r3, #12
 8004298:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800429a:	61fa      	str	r2, [r7, #28]
 800429c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800429e:	69b9      	ldr	r1, [r7, #24]
 80042a0:	69fa      	ldr	r2, [r7, #28]
 80042a2:	e841 2300 	strex	r3, r2, [r1]
 80042a6:	617b      	str	r3, [r7, #20]
   return(result);
 80042a8:	697b      	ldr	r3, [r7, #20]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d1e5      	bne.n	800427a <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80042ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042b0:	2200      	movs	r2, #0
 80042b2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042b8:	2b01      	cmp	r3, #1
 80042ba:	d106      	bne.n	80042ca <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80042bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042be:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80042c0:	4619      	mov	r1, r3
 80042c2:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80042c4:	f7ff ff66 	bl	8004194 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80042c8:	e002      	b.n	80042d0 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 80042ca:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80042cc:	f7ff ff44 	bl	8004158 <HAL_UART_RxCpltCallback>
}
 80042d0:	bf00      	nop
 80042d2:	3770      	adds	r7, #112	; 0x70
 80042d4:	46bd      	mov	sp, r7
 80042d6:	bd80      	pop	{r7, pc}

080042d8 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b084      	sub	sp, #16
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042e4:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	2201      	movs	r2, #1
 80042ea:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042f0:	2b01      	cmp	r3, #1
 80042f2:	d108      	bne.n	8004306 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80042f8:	085b      	lsrs	r3, r3, #1
 80042fa:	b29b      	uxth	r3, r3
 80042fc:	4619      	mov	r1, r3
 80042fe:	68f8      	ldr	r0, [r7, #12]
 8004300:	f7ff ff48 	bl	8004194 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004304:	e002      	b.n	800430c <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8004306:	68f8      	ldr	r0, [r7, #12]
 8004308:	f7ff ff30 	bl	800416c <HAL_UART_RxHalfCpltCallback>
}
 800430c:	bf00      	nop
 800430e:	3710      	adds	r7, #16
 8004310:	46bd      	mov	sp, r7
 8004312:	bd80      	pop	{r7, pc}

08004314 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b084      	sub	sp, #16
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800431c:	2300      	movs	r3, #0
 800431e:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004324:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004326:	68bb      	ldr	r3, [r7, #8]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	695b      	ldr	r3, [r3, #20]
 800432c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004330:	2b80      	cmp	r3, #128	; 0x80
 8004332:	bf0c      	ite	eq
 8004334:	2301      	moveq	r3, #1
 8004336:	2300      	movne	r3, #0
 8004338:	b2db      	uxtb	r3, r3
 800433a:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800433c:	68bb      	ldr	r3, [r7, #8]
 800433e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004342:	b2db      	uxtb	r3, r3
 8004344:	2b21      	cmp	r3, #33	; 0x21
 8004346:	d108      	bne.n	800435a <UART_DMAError+0x46>
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d005      	beq.n	800435a <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800434e:	68bb      	ldr	r3, [r7, #8]
 8004350:	2200      	movs	r2, #0
 8004352:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8004354:	68b8      	ldr	r0, [r7, #8]
 8004356:	f000 f91b 	bl	8004590 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800435a:	68bb      	ldr	r3, [r7, #8]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	695b      	ldr	r3, [r3, #20]
 8004360:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004364:	2b40      	cmp	r3, #64	; 0x40
 8004366:	bf0c      	ite	eq
 8004368:	2301      	moveq	r3, #1
 800436a:	2300      	movne	r3, #0
 800436c:	b2db      	uxtb	r3, r3
 800436e:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004370:	68bb      	ldr	r3, [r7, #8]
 8004372:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004376:	b2db      	uxtb	r3, r3
 8004378:	2b22      	cmp	r3, #34	; 0x22
 800437a:	d108      	bne.n	800438e <UART_DMAError+0x7a>
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d005      	beq.n	800438e <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8004382:	68bb      	ldr	r3, [r7, #8]
 8004384:	2200      	movs	r2, #0
 8004386:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8004388:	68b8      	ldr	r0, [r7, #8]
 800438a:	f000 f929 	bl	80045e0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800438e:	68bb      	ldr	r3, [r7, #8]
 8004390:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004392:	f043 0210 	orr.w	r2, r3, #16
 8004396:	68bb      	ldr	r3, [r7, #8]
 8004398:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800439a:	68b8      	ldr	r0, [r7, #8]
 800439c:	f7ff fef0 	bl	8004180 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80043a0:	bf00      	nop
 80043a2:	3710      	adds	r7, #16
 80043a4:	46bd      	mov	sp, r7
 80043a6:	bd80      	pop	{r7, pc}

080043a8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b086      	sub	sp, #24
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	60f8      	str	r0, [r7, #12]
 80043b0:	60b9      	str	r1, [r7, #8]
 80043b2:	603b      	str	r3, [r7, #0]
 80043b4:	4613      	mov	r3, r2
 80043b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043b8:	e03b      	b.n	8004432 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043ba:	6a3b      	ldr	r3, [r7, #32]
 80043bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043c0:	d037      	beq.n	8004432 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043c2:	f7fc fdbd 	bl	8000f40 <HAL_GetTick>
 80043c6:	4602      	mov	r2, r0
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	1ad3      	subs	r3, r2, r3
 80043cc:	6a3a      	ldr	r2, [r7, #32]
 80043ce:	429a      	cmp	r2, r3
 80043d0:	d302      	bcc.n	80043d8 <UART_WaitOnFlagUntilTimeout+0x30>
 80043d2:	6a3b      	ldr	r3, [r7, #32]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d101      	bne.n	80043dc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80043d8:	2303      	movs	r3, #3
 80043da:	e03a      	b.n	8004452 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	68db      	ldr	r3, [r3, #12]
 80043e2:	f003 0304 	and.w	r3, r3, #4
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d023      	beq.n	8004432 <UART_WaitOnFlagUntilTimeout+0x8a>
 80043ea:	68bb      	ldr	r3, [r7, #8]
 80043ec:	2b80      	cmp	r3, #128	; 0x80
 80043ee:	d020      	beq.n	8004432 <UART_WaitOnFlagUntilTimeout+0x8a>
 80043f0:	68bb      	ldr	r3, [r7, #8]
 80043f2:	2b40      	cmp	r3, #64	; 0x40
 80043f4:	d01d      	beq.n	8004432 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f003 0308 	and.w	r3, r3, #8
 8004400:	2b08      	cmp	r3, #8
 8004402:	d116      	bne.n	8004432 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004404:	2300      	movs	r3, #0
 8004406:	617b      	str	r3, [r7, #20]
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	617b      	str	r3, [r7, #20]
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	685b      	ldr	r3, [r3, #4]
 8004416:	617b      	str	r3, [r7, #20]
 8004418:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800441a:	68f8      	ldr	r0, [r7, #12]
 800441c:	f000 f8e0 	bl	80045e0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	2208      	movs	r2, #8
 8004424:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	2200      	movs	r2, #0
 800442a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800442e:	2301      	movs	r3, #1
 8004430:	e00f      	b.n	8004452 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	681a      	ldr	r2, [r3, #0]
 8004438:	68bb      	ldr	r3, [r7, #8]
 800443a:	4013      	ands	r3, r2
 800443c:	68ba      	ldr	r2, [r7, #8]
 800443e:	429a      	cmp	r2, r3
 8004440:	bf0c      	ite	eq
 8004442:	2301      	moveq	r3, #1
 8004444:	2300      	movne	r3, #0
 8004446:	b2db      	uxtb	r3, r3
 8004448:	461a      	mov	r2, r3
 800444a:	79fb      	ldrb	r3, [r7, #7]
 800444c:	429a      	cmp	r2, r3
 800444e:	d0b4      	beq.n	80043ba <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004450:	2300      	movs	r3, #0
}
 8004452:	4618      	mov	r0, r3
 8004454:	3718      	adds	r7, #24
 8004456:	46bd      	mov	sp, r7
 8004458:	bd80      	pop	{r7, pc}
	...

0800445c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b098      	sub	sp, #96	; 0x60
 8004460:	af00      	add	r7, sp, #0
 8004462:	60f8      	str	r0, [r7, #12]
 8004464:	60b9      	str	r1, [r7, #8]
 8004466:	4613      	mov	r3, r2
 8004468:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800446a:	68ba      	ldr	r2, [r7, #8]
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	88fa      	ldrh	r2, [r7, #6]
 8004474:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	2200      	movs	r2, #0
 800447a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	2222      	movs	r2, #34	; 0x22
 8004480:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004488:	4a3e      	ldr	r2, [pc, #248]	; (8004584 <UART_Start_Receive_DMA+0x128>)
 800448a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004490:	4a3d      	ldr	r2, [pc, #244]	; (8004588 <UART_Start_Receive_DMA+0x12c>)
 8004492:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004498:	4a3c      	ldr	r2, [pc, #240]	; (800458c <UART_Start_Receive_DMA+0x130>)
 800449a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044a0:	2200      	movs	r2, #0
 80044a2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80044a4:	f107 0308 	add.w	r3, r7, #8
 80044a8:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	3304      	adds	r3, #4
 80044b4:	4619      	mov	r1, r3
 80044b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80044b8:	681a      	ldr	r2, [r3, #0]
 80044ba:	88fb      	ldrh	r3, [r7, #6]
 80044bc:	f7fc ff30 	bl	8001320 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80044c0:	2300      	movs	r3, #0
 80044c2:	613b      	str	r3, [r7, #16]
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	613b      	str	r3, [r7, #16]
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	685b      	ldr	r3, [r3, #4]
 80044d2:	613b      	str	r3, [r7, #16]
 80044d4:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	691b      	ldr	r3, [r3, #16]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d019      	beq.n	8004512 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	330c      	adds	r3, #12
 80044e4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80044e8:	e853 3f00 	ldrex	r3, [r3]
 80044ec:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80044ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044f4:	65bb      	str	r3, [r7, #88]	; 0x58
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	330c      	adds	r3, #12
 80044fc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80044fe:	64fa      	str	r2, [r7, #76]	; 0x4c
 8004500:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004502:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8004504:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004506:	e841 2300 	strex	r3, r2, [r1]
 800450a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800450c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800450e:	2b00      	cmp	r3, #0
 8004510:	d1e5      	bne.n	80044de <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	3314      	adds	r3, #20
 8004518:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800451a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800451c:	e853 3f00 	ldrex	r3, [r3]
 8004520:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004522:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004524:	f043 0301 	orr.w	r3, r3, #1
 8004528:	657b      	str	r3, [r7, #84]	; 0x54
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	3314      	adds	r3, #20
 8004530:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004532:	63ba      	str	r2, [r7, #56]	; 0x38
 8004534:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004536:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004538:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800453a:	e841 2300 	strex	r3, r2, [r1]
 800453e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004540:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004542:	2b00      	cmp	r3, #0
 8004544:	d1e5      	bne.n	8004512 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	3314      	adds	r3, #20
 800454c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800454e:	69bb      	ldr	r3, [r7, #24]
 8004550:	e853 3f00 	ldrex	r3, [r3]
 8004554:	617b      	str	r3, [r7, #20]
   return(result);
 8004556:	697b      	ldr	r3, [r7, #20]
 8004558:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800455c:	653b      	str	r3, [r7, #80]	; 0x50
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	3314      	adds	r3, #20
 8004564:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004566:	627a      	str	r2, [r7, #36]	; 0x24
 8004568:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800456a:	6a39      	ldr	r1, [r7, #32]
 800456c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800456e:	e841 2300 	strex	r3, r2, [r1]
 8004572:	61fb      	str	r3, [r7, #28]
   return(result);
 8004574:	69fb      	ldr	r3, [r7, #28]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d1e5      	bne.n	8004546 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800457a:	2300      	movs	r3, #0
}
 800457c:	4618      	mov	r0, r3
 800457e:	3760      	adds	r7, #96	; 0x60
 8004580:	46bd      	mov	sp, r7
 8004582:	bd80      	pop	{r7, pc}
 8004584:	080041ad 	.word	0x080041ad
 8004588:	080042d9 	.word	0x080042d9
 800458c:	08004315 	.word	0x08004315

08004590 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004590:	b480      	push	{r7}
 8004592:	b089      	sub	sp, #36	; 0x24
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	330c      	adds	r3, #12
 800459e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	e853 3f00 	ldrex	r3, [r3]
 80045a6:	60bb      	str	r3, [r7, #8]
   return(result);
 80045a8:	68bb      	ldr	r3, [r7, #8]
 80045aa:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80045ae:	61fb      	str	r3, [r7, #28]
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	330c      	adds	r3, #12
 80045b6:	69fa      	ldr	r2, [r7, #28]
 80045b8:	61ba      	str	r2, [r7, #24]
 80045ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045bc:	6979      	ldr	r1, [r7, #20]
 80045be:	69ba      	ldr	r2, [r7, #24]
 80045c0:	e841 2300 	strex	r3, r2, [r1]
 80045c4:	613b      	str	r3, [r7, #16]
   return(result);
 80045c6:	693b      	ldr	r3, [r7, #16]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d1e5      	bne.n	8004598 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2220      	movs	r2, #32
 80045d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 80045d4:	bf00      	nop
 80045d6:	3724      	adds	r7, #36	; 0x24
 80045d8:	46bd      	mov	sp, r7
 80045da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045de:	4770      	bx	lr

080045e0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80045e0:	b480      	push	{r7}
 80045e2:	b095      	sub	sp, #84	; 0x54
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	330c      	adds	r3, #12
 80045ee:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045f2:	e853 3f00 	ldrex	r3, [r3]
 80045f6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80045f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045fa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80045fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	330c      	adds	r3, #12
 8004606:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004608:	643a      	str	r2, [r7, #64]	; 0x40
 800460a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800460c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800460e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004610:	e841 2300 	strex	r3, r2, [r1]
 8004614:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004616:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004618:	2b00      	cmp	r3, #0
 800461a:	d1e5      	bne.n	80045e8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	3314      	adds	r3, #20
 8004622:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004624:	6a3b      	ldr	r3, [r7, #32]
 8004626:	e853 3f00 	ldrex	r3, [r3]
 800462a:	61fb      	str	r3, [r7, #28]
   return(result);
 800462c:	69fb      	ldr	r3, [r7, #28]
 800462e:	f023 0301 	bic.w	r3, r3, #1
 8004632:	64bb      	str	r3, [r7, #72]	; 0x48
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	3314      	adds	r3, #20
 800463a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800463c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800463e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004640:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004642:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004644:	e841 2300 	strex	r3, r2, [r1]
 8004648:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800464a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800464c:	2b00      	cmp	r3, #0
 800464e:	d1e5      	bne.n	800461c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004654:	2b01      	cmp	r3, #1
 8004656:	d119      	bne.n	800468c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	330c      	adds	r3, #12
 800465e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	e853 3f00 	ldrex	r3, [r3]
 8004666:	60bb      	str	r3, [r7, #8]
   return(result);
 8004668:	68bb      	ldr	r3, [r7, #8]
 800466a:	f023 0310 	bic.w	r3, r3, #16
 800466e:	647b      	str	r3, [r7, #68]	; 0x44
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	330c      	adds	r3, #12
 8004676:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004678:	61ba      	str	r2, [r7, #24]
 800467a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800467c:	6979      	ldr	r1, [r7, #20]
 800467e:	69ba      	ldr	r2, [r7, #24]
 8004680:	e841 2300 	strex	r3, r2, [r1]
 8004684:	613b      	str	r3, [r7, #16]
   return(result);
 8004686:	693b      	ldr	r3, [r7, #16]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d1e5      	bne.n	8004658 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2220      	movs	r2, #32
 8004690:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2200      	movs	r2, #0
 8004698:	631a      	str	r2, [r3, #48]	; 0x30
}
 800469a:	bf00      	nop
 800469c:	3754      	adds	r7, #84	; 0x54
 800469e:	46bd      	mov	sp, r7
 80046a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a4:	4770      	bx	lr

080046a6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80046a6:	b580      	push	{r7, lr}
 80046a8:	b084      	sub	sp, #16
 80046aa:	af00      	add	r7, sp, #0
 80046ac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046b2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	2200      	movs	r2, #0
 80046b8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	2200      	movs	r2, #0
 80046be:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80046c0:	68f8      	ldr	r0, [r7, #12]
 80046c2:	f7ff fd5d 	bl	8004180 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80046c6:	bf00      	nop
 80046c8:	3710      	adds	r7, #16
 80046ca:	46bd      	mov	sp, r7
 80046cc:	bd80      	pop	{r7, pc}

080046ce <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80046ce:	b480      	push	{r7}
 80046d0:	b085      	sub	sp, #20
 80046d2:	af00      	add	r7, sp, #0
 80046d4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80046dc:	b2db      	uxtb	r3, r3
 80046de:	2b21      	cmp	r3, #33	; 0x21
 80046e0:	d13e      	bne.n	8004760 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	689b      	ldr	r3, [r3, #8]
 80046e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046ea:	d114      	bne.n	8004716 <UART_Transmit_IT+0x48>
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	691b      	ldr	r3, [r3, #16]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d110      	bne.n	8004716 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6a1b      	ldr	r3, [r3, #32]
 80046f8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	881b      	ldrh	r3, [r3, #0]
 80046fe:	461a      	mov	r2, r3
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004708:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6a1b      	ldr	r3, [r3, #32]
 800470e:	1c9a      	adds	r2, r3, #2
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	621a      	str	r2, [r3, #32]
 8004714:	e008      	b.n	8004728 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6a1b      	ldr	r3, [r3, #32]
 800471a:	1c59      	adds	r1, r3, #1
 800471c:	687a      	ldr	r2, [r7, #4]
 800471e:	6211      	str	r1, [r2, #32]
 8004720:	781a      	ldrb	r2, [r3, #0]
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800472c:	b29b      	uxth	r3, r3
 800472e:	3b01      	subs	r3, #1
 8004730:	b29b      	uxth	r3, r3
 8004732:	687a      	ldr	r2, [r7, #4]
 8004734:	4619      	mov	r1, r3
 8004736:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004738:	2b00      	cmp	r3, #0
 800473a:	d10f      	bne.n	800475c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	68da      	ldr	r2, [r3, #12]
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800474a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	68da      	ldr	r2, [r3, #12]
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800475a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800475c:	2300      	movs	r3, #0
 800475e:	e000      	b.n	8004762 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004760:	2302      	movs	r3, #2
  }
}
 8004762:	4618      	mov	r0, r3
 8004764:	3714      	adds	r7, #20
 8004766:	46bd      	mov	sp, r7
 8004768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476c:	4770      	bx	lr

0800476e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800476e:	b580      	push	{r7, lr}
 8004770:	b082      	sub	sp, #8
 8004772:	af00      	add	r7, sp, #0
 8004774:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	68da      	ldr	r2, [r3, #12]
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004784:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2220      	movs	r2, #32
 800478a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800478e:	6878      	ldr	r0, [r7, #4]
 8004790:	f7ff fcd8 	bl	8004144 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004794:	2300      	movs	r3, #0
}
 8004796:	4618      	mov	r0, r3
 8004798:	3708      	adds	r7, #8
 800479a:	46bd      	mov	sp, r7
 800479c:	bd80      	pop	{r7, pc}

0800479e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800479e:	b580      	push	{r7, lr}
 80047a0:	b08c      	sub	sp, #48	; 0x30
 80047a2:	af00      	add	r7, sp, #0
 80047a4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80047ac:	b2db      	uxtb	r3, r3
 80047ae:	2b22      	cmp	r3, #34	; 0x22
 80047b0:	f040 80ae 	bne.w	8004910 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	689b      	ldr	r3, [r3, #8]
 80047b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047bc:	d117      	bne.n	80047ee <UART_Receive_IT+0x50>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	691b      	ldr	r3, [r3, #16]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d113      	bne.n	80047ee <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80047c6:	2300      	movs	r3, #0
 80047c8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047ce:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	685b      	ldr	r3, [r3, #4]
 80047d6:	b29b      	uxth	r3, r3
 80047d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047dc:	b29a      	uxth	r2, r3
 80047de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047e0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047e6:	1c9a      	adds	r2, r3, #2
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	629a      	str	r2, [r3, #40]	; 0x28
 80047ec:	e026      	b.n	800483c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047f2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80047f4:	2300      	movs	r3, #0
 80047f6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	689b      	ldr	r3, [r3, #8]
 80047fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004800:	d007      	beq.n	8004812 <UART_Receive_IT+0x74>
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	689b      	ldr	r3, [r3, #8]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d10a      	bne.n	8004820 <UART_Receive_IT+0x82>
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	691b      	ldr	r3, [r3, #16]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d106      	bne.n	8004820 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	685b      	ldr	r3, [r3, #4]
 8004818:	b2da      	uxtb	r2, r3
 800481a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800481c:	701a      	strb	r2, [r3, #0]
 800481e:	e008      	b.n	8004832 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	685b      	ldr	r3, [r3, #4]
 8004826:	b2db      	uxtb	r3, r3
 8004828:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800482c:	b2da      	uxtb	r2, r3
 800482e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004830:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004836:	1c5a      	adds	r2, r3, #1
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004840:	b29b      	uxth	r3, r3
 8004842:	3b01      	subs	r3, #1
 8004844:	b29b      	uxth	r3, r3
 8004846:	687a      	ldr	r2, [r7, #4]
 8004848:	4619      	mov	r1, r3
 800484a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800484c:	2b00      	cmp	r3, #0
 800484e:	d15d      	bne.n	800490c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	68da      	ldr	r2, [r3, #12]
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f022 0220 	bic.w	r2, r2, #32
 800485e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	68da      	ldr	r2, [r3, #12]
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800486e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	695a      	ldr	r2, [r3, #20]
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f022 0201 	bic.w	r2, r2, #1
 800487e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2220      	movs	r2, #32
 8004884:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2200      	movs	r2, #0
 800488c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004892:	2b01      	cmp	r3, #1
 8004894:	d135      	bne.n	8004902 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	2200      	movs	r2, #0
 800489a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	330c      	adds	r3, #12
 80048a2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048a4:	697b      	ldr	r3, [r7, #20]
 80048a6:	e853 3f00 	ldrex	r3, [r3]
 80048aa:	613b      	str	r3, [r7, #16]
   return(result);
 80048ac:	693b      	ldr	r3, [r7, #16]
 80048ae:	f023 0310 	bic.w	r3, r3, #16
 80048b2:	627b      	str	r3, [r7, #36]	; 0x24
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	330c      	adds	r3, #12
 80048ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048bc:	623a      	str	r2, [r7, #32]
 80048be:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048c0:	69f9      	ldr	r1, [r7, #28]
 80048c2:	6a3a      	ldr	r2, [r7, #32]
 80048c4:	e841 2300 	strex	r3, r2, [r1]
 80048c8:	61bb      	str	r3, [r7, #24]
   return(result);
 80048ca:	69bb      	ldr	r3, [r7, #24]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d1e5      	bne.n	800489c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f003 0310 	and.w	r3, r3, #16
 80048da:	2b10      	cmp	r3, #16
 80048dc:	d10a      	bne.n	80048f4 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80048de:	2300      	movs	r3, #0
 80048e0:	60fb      	str	r3, [r7, #12]
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	60fb      	str	r3, [r7, #12]
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	685b      	ldr	r3, [r3, #4]
 80048f0:	60fb      	str	r3, [r7, #12]
 80048f2:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80048f8:	4619      	mov	r1, r3
 80048fa:	6878      	ldr	r0, [r7, #4]
 80048fc:	f7ff fc4a 	bl	8004194 <HAL_UARTEx_RxEventCallback>
 8004900:	e002      	b.n	8004908 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004902:	6878      	ldr	r0, [r7, #4]
 8004904:	f7ff fc28 	bl	8004158 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004908:	2300      	movs	r3, #0
 800490a:	e002      	b.n	8004912 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800490c:	2300      	movs	r3, #0
 800490e:	e000      	b.n	8004912 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004910:	2302      	movs	r3, #2
  }
}
 8004912:	4618      	mov	r0, r3
 8004914:	3730      	adds	r7, #48	; 0x30
 8004916:	46bd      	mov	sp, r7
 8004918:	bd80      	pop	{r7, pc}
	...

0800491c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800491c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004920:	b0c0      	sub	sp, #256	; 0x100
 8004922:	af00      	add	r7, sp, #0
 8004924:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004928:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	691b      	ldr	r3, [r3, #16]
 8004930:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004934:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004938:	68d9      	ldr	r1, [r3, #12]
 800493a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800493e:	681a      	ldr	r2, [r3, #0]
 8004940:	ea40 0301 	orr.w	r3, r0, r1
 8004944:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004946:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800494a:	689a      	ldr	r2, [r3, #8]
 800494c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004950:	691b      	ldr	r3, [r3, #16]
 8004952:	431a      	orrs	r2, r3
 8004954:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004958:	695b      	ldr	r3, [r3, #20]
 800495a:	431a      	orrs	r2, r3
 800495c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004960:	69db      	ldr	r3, [r3, #28]
 8004962:	4313      	orrs	r3, r2
 8004964:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004968:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	68db      	ldr	r3, [r3, #12]
 8004970:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004974:	f021 010c 	bic.w	r1, r1, #12
 8004978:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800497c:	681a      	ldr	r2, [r3, #0]
 800497e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004982:	430b      	orrs	r3, r1
 8004984:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004986:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	695b      	ldr	r3, [r3, #20]
 800498e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004992:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004996:	6999      	ldr	r1, [r3, #24]
 8004998:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800499c:	681a      	ldr	r2, [r3, #0]
 800499e:	ea40 0301 	orr.w	r3, r0, r1
 80049a2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80049a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049a8:	681a      	ldr	r2, [r3, #0]
 80049aa:	4b8f      	ldr	r3, [pc, #572]	; (8004be8 <UART_SetConfig+0x2cc>)
 80049ac:	429a      	cmp	r2, r3
 80049ae:	d005      	beq.n	80049bc <UART_SetConfig+0xa0>
 80049b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049b4:	681a      	ldr	r2, [r3, #0]
 80049b6:	4b8d      	ldr	r3, [pc, #564]	; (8004bec <UART_SetConfig+0x2d0>)
 80049b8:	429a      	cmp	r2, r3
 80049ba:	d104      	bne.n	80049c6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80049bc:	f7ff f81c 	bl	80039f8 <HAL_RCC_GetPCLK2Freq>
 80049c0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80049c4:	e003      	b.n	80049ce <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80049c6:	f7ff f803 	bl	80039d0 <HAL_RCC_GetPCLK1Freq>
 80049ca:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80049ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049d2:	69db      	ldr	r3, [r3, #28]
 80049d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80049d8:	f040 810c 	bne.w	8004bf4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80049dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80049e0:	2200      	movs	r2, #0
 80049e2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80049e6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80049ea:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80049ee:	4622      	mov	r2, r4
 80049f0:	462b      	mov	r3, r5
 80049f2:	1891      	adds	r1, r2, r2
 80049f4:	65b9      	str	r1, [r7, #88]	; 0x58
 80049f6:	415b      	adcs	r3, r3
 80049f8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80049fa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80049fe:	4621      	mov	r1, r4
 8004a00:	eb12 0801 	adds.w	r8, r2, r1
 8004a04:	4629      	mov	r1, r5
 8004a06:	eb43 0901 	adc.w	r9, r3, r1
 8004a0a:	f04f 0200 	mov.w	r2, #0
 8004a0e:	f04f 0300 	mov.w	r3, #0
 8004a12:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004a16:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004a1a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004a1e:	4690      	mov	r8, r2
 8004a20:	4699      	mov	r9, r3
 8004a22:	4623      	mov	r3, r4
 8004a24:	eb18 0303 	adds.w	r3, r8, r3
 8004a28:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004a2c:	462b      	mov	r3, r5
 8004a2e:	eb49 0303 	adc.w	r3, r9, r3
 8004a32:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004a36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a3a:	685b      	ldr	r3, [r3, #4]
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004a42:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004a46:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004a4a:	460b      	mov	r3, r1
 8004a4c:	18db      	adds	r3, r3, r3
 8004a4e:	653b      	str	r3, [r7, #80]	; 0x50
 8004a50:	4613      	mov	r3, r2
 8004a52:	eb42 0303 	adc.w	r3, r2, r3
 8004a56:	657b      	str	r3, [r7, #84]	; 0x54
 8004a58:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004a5c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004a60:	f7fb fc0e 	bl	8000280 <__aeabi_uldivmod>
 8004a64:	4602      	mov	r2, r0
 8004a66:	460b      	mov	r3, r1
 8004a68:	4b61      	ldr	r3, [pc, #388]	; (8004bf0 <UART_SetConfig+0x2d4>)
 8004a6a:	fba3 2302 	umull	r2, r3, r3, r2
 8004a6e:	095b      	lsrs	r3, r3, #5
 8004a70:	011c      	lsls	r4, r3, #4
 8004a72:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a76:	2200      	movs	r2, #0
 8004a78:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004a7c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004a80:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004a84:	4642      	mov	r2, r8
 8004a86:	464b      	mov	r3, r9
 8004a88:	1891      	adds	r1, r2, r2
 8004a8a:	64b9      	str	r1, [r7, #72]	; 0x48
 8004a8c:	415b      	adcs	r3, r3
 8004a8e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a90:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004a94:	4641      	mov	r1, r8
 8004a96:	eb12 0a01 	adds.w	sl, r2, r1
 8004a9a:	4649      	mov	r1, r9
 8004a9c:	eb43 0b01 	adc.w	fp, r3, r1
 8004aa0:	f04f 0200 	mov.w	r2, #0
 8004aa4:	f04f 0300 	mov.w	r3, #0
 8004aa8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004aac:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004ab0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004ab4:	4692      	mov	sl, r2
 8004ab6:	469b      	mov	fp, r3
 8004ab8:	4643      	mov	r3, r8
 8004aba:	eb1a 0303 	adds.w	r3, sl, r3
 8004abe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004ac2:	464b      	mov	r3, r9
 8004ac4:	eb4b 0303 	adc.w	r3, fp, r3
 8004ac8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004acc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ad0:	685b      	ldr	r3, [r3, #4]
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004ad8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004adc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004ae0:	460b      	mov	r3, r1
 8004ae2:	18db      	adds	r3, r3, r3
 8004ae4:	643b      	str	r3, [r7, #64]	; 0x40
 8004ae6:	4613      	mov	r3, r2
 8004ae8:	eb42 0303 	adc.w	r3, r2, r3
 8004aec:	647b      	str	r3, [r7, #68]	; 0x44
 8004aee:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004af2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004af6:	f7fb fbc3 	bl	8000280 <__aeabi_uldivmod>
 8004afa:	4602      	mov	r2, r0
 8004afc:	460b      	mov	r3, r1
 8004afe:	4611      	mov	r1, r2
 8004b00:	4b3b      	ldr	r3, [pc, #236]	; (8004bf0 <UART_SetConfig+0x2d4>)
 8004b02:	fba3 2301 	umull	r2, r3, r3, r1
 8004b06:	095b      	lsrs	r3, r3, #5
 8004b08:	2264      	movs	r2, #100	; 0x64
 8004b0a:	fb02 f303 	mul.w	r3, r2, r3
 8004b0e:	1acb      	subs	r3, r1, r3
 8004b10:	00db      	lsls	r3, r3, #3
 8004b12:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004b16:	4b36      	ldr	r3, [pc, #216]	; (8004bf0 <UART_SetConfig+0x2d4>)
 8004b18:	fba3 2302 	umull	r2, r3, r3, r2
 8004b1c:	095b      	lsrs	r3, r3, #5
 8004b1e:	005b      	lsls	r3, r3, #1
 8004b20:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004b24:	441c      	add	r4, r3
 8004b26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004b30:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004b34:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004b38:	4642      	mov	r2, r8
 8004b3a:	464b      	mov	r3, r9
 8004b3c:	1891      	adds	r1, r2, r2
 8004b3e:	63b9      	str	r1, [r7, #56]	; 0x38
 8004b40:	415b      	adcs	r3, r3
 8004b42:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b44:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004b48:	4641      	mov	r1, r8
 8004b4a:	1851      	adds	r1, r2, r1
 8004b4c:	6339      	str	r1, [r7, #48]	; 0x30
 8004b4e:	4649      	mov	r1, r9
 8004b50:	414b      	adcs	r3, r1
 8004b52:	637b      	str	r3, [r7, #52]	; 0x34
 8004b54:	f04f 0200 	mov.w	r2, #0
 8004b58:	f04f 0300 	mov.w	r3, #0
 8004b5c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004b60:	4659      	mov	r1, fp
 8004b62:	00cb      	lsls	r3, r1, #3
 8004b64:	4651      	mov	r1, sl
 8004b66:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004b6a:	4651      	mov	r1, sl
 8004b6c:	00ca      	lsls	r2, r1, #3
 8004b6e:	4610      	mov	r0, r2
 8004b70:	4619      	mov	r1, r3
 8004b72:	4603      	mov	r3, r0
 8004b74:	4642      	mov	r2, r8
 8004b76:	189b      	adds	r3, r3, r2
 8004b78:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004b7c:	464b      	mov	r3, r9
 8004b7e:	460a      	mov	r2, r1
 8004b80:	eb42 0303 	adc.w	r3, r2, r3
 8004b84:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004b88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b8c:	685b      	ldr	r3, [r3, #4]
 8004b8e:	2200      	movs	r2, #0
 8004b90:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004b94:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004b98:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004b9c:	460b      	mov	r3, r1
 8004b9e:	18db      	adds	r3, r3, r3
 8004ba0:	62bb      	str	r3, [r7, #40]	; 0x28
 8004ba2:	4613      	mov	r3, r2
 8004ba4:	eb42 0303 	adc.w	r3, r2, r3
 8004ba8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004baa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004bae:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004bb2:	f7fb fb65 	bl	8000280 <__aeabi_uldivmod>
 8004bb6:	4602      	mov	r2, r0
 8004bb8:	460b      	mov	r3, r1
 8004bba:	4b0d      	ldr	r3, [pc, #52]	; (8004bf0 <UART_SetConfig+0x2d4>)
 8004bbc:	fba3 1302 	umull	r1, r3, r3, r2
 8004bc0:	095b      	lsrs	r3, r3, #5
 8004bc2:	2164      	movs	r1, #100	; 0x64
 8004bc4:	fb01 f303 	mul.w	r3, r1, r3
 8004bc8:	1ad3      	subs	r3, r2, r3
 8004bca:	00db      	lsls	r3, r3, #3
 8004bcc:	3332      	adds	r3, #50	; 0x32
 8004bce:	4a08      	ldr	r2, [pc, #32]	; (8004bf0 <UART_SetConfig+0x2d4>)
 8004bd0:	fba2 2303 	umull	r2, r3, r2, r3
 8004bd4:	095b      	lsrs	r3, r3, #5
 8004bd6:	f003 0207 	and.w	r2, r3, #7
 8004bda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	4422      	add	r2, r4
 8004be2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004be4:	e106      	b.n	8004df4 <UART_SetConfig+0x4d8>
 8004be6:	bf00      	nop
 8004be8:	40011000 	.word	0x40011000
 8004bec:	40011400 	.word	0x40011400
 8004bf0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004bf4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004bfe:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004c02:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004c06:	4642      	mov	r2, r8
 8004c08:	464b      	mov	r3, r9
 8004c0a:	1891      	adds	r1, r2, r2
 8004c0c:	6239      	str	r1, [r7, #32]
 8004c0e:	415b      	adcs	r3, r3
 8004c10:	627b      	str	r3, [r7, #36]	; 0x24
 8004c12:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004c16:	4641      	mov	r1, r8
 8004c18:	1854      	adds	r4, r2, r1
 8004c1a:	4649      	mov	r1, r9
 8004c1c:	eb43 0501 	adc.w	r5, r3, r1
 8004c20:	f04f 0200 	mov.w	r2, #0
 8004c24:	f04f 0300 	mov.w	r3, #0
 8004c28:	00eb      	lsls	r3, r5, #3
 8004c2a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004c2e:	00e2      	lsls	r2, r4, #3
 8004c30:	4614      	mov	r4, r2
 8004c32:	461d      	mov	r5, r3
 8004c34:	4643      	mov	r3, r8
 8004c36:	18e3      	adds	r3, r4, r3
 8004c38:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004c3c:	464b      	mov	r3, r9
 8004c3e:	eb45 0303 	adc.w	r3, r5, r3
 8004c42:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004c46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c4a:	685b      	ldr	r3, [r3, #4]
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004c52:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004c56:	f04f 0200 	mov.w	r2, #0
 8004c5a:	f04f 0300 	mov.w	r3, #0
 8004c5e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004c62:	4629      	mov	r1, r5
 8004c64:	008b      	lsls	r3, r1, #2
 8004c66:	4621      	mov	r1, r4
 8004c68:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004c6c:	4621      	mov	r1, r4
 8004c6e:	008a      	lsls	r2, r1, #2
 8004c70:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004c74:	f7fb fb04 	bl	8000280 <__aeabi_uldivmod>
 8004c78:	4602      	mov	r2, r0
 8004c7a:	460b      	mov	r3, r1
 8004c7c:	4b60      	ldr	r3, [pc, #384]	; (8004e00 <UART_SetConfig+0x4e4>)
 8004c7e:	fba3 2302 	umull	r2, r3, r3, r2
 8004c82:	095b      	lsrs	r3, r3, #5
 8004c84:	011c      	lsls	r4, r3, #4
 8004c86:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004c90:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004c94:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004c98:	4642      	mov	r2, r8
 8004c9a:	464b      	mov	r3, r9
 8004c9c:	1891      	adds	r1, r2, r2
 8004c9e:	61b9      	str	r1, [r7, #24]
 8004ca0:	415b      	adcs	r3, r3
 8004ca2:	61fb      	str	r3, [r7, #28]
 8004ca4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004ca8:	4641      	mov	r1, r8
 8004caa:	1851      	adds	r1, r2, r1
 8004cac:	6139      	str	r1, [r7, #16]
 8004cae:	4649      	mov	r1, r9
 8004cb0:	414b      	adcs	r3, r1
 8004cb2:	617b      	str	r3, [r7, #20]
 8004cb4:	f04f 0200 	mov.w	r2, #0
 8004cb8:	f04f 0300 	mov.w	r3, #0
 8004cbc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004cc0:	4659      	mov	r1, fp
 8004cc2:	00cb      	lsls	r3, r1, #3
 8004cc4:	4651      	mov	r1, sl
 8004cc6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004cca:	4651      	mov	r1, sl
 8004ccc:	00ca      	lsls	r2, r1, #3
 8004cce:	4610      	mov	r0, r2
 8004cd0:	4619      	mov	r1, r3
 8004cd2:	4603      	mov	r3, r0
 8004cd4:	4642      	mov	r2, r8
 8004cd6:	189b      	adds	r3, r3, r2
 8004cd8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004cdc:	464b      	mov	r3, r9
 8004cde:	460a      	mov	r2, r1
 8004ce0:	eb42 0303 	adc.w	r3, r2, r3
 8004ce4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004ce8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cec:	685b      	ldr	r3, [r3, #4]
 8004cee:	2200      	movs	r2, #0
 8004cf0:	67bb      	str	r3, [r7, #120]	; 0x78
 8004cf2:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004cf4:	f04f 0200 	mov.w	r2, #0
 8004cf8:	f04f 0300 	mov.w	r3, #0
 8004cfc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004d00:	4649      	mov	r1, r9
 8004d02:	008b      	lsls	r3, r1, #2
 8004d04:	4641      	mov	r1, r8
 8004d06:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004d0a:	4641      	mov	r1, r8
 8004d0c:	008a      	lsls	r2, r1, #2
 8004d0e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004d12:	f7fb fab5 	bl	8000280 <__aeabi_uldivmod>
 8004d16:	4602      	mov	r2, r0
 8004d18:	460b      	mov	r3, r1
 8004d1a:	4611      	mov	r1, r2
 8004d1c:	4b38      	ldr	r3, [pc, #224]	; (8004e00 <UART_SetConfig+0x4e4>)
 8004d1e:	fba3 2301 	umull	r2, r3, r3, r1
 8004d22:	095b      	lsrs	r3, r3, #5
 8004d24:	2264      	movs	r2, #100	; 0x64
 8004d26:	fb02 f303 	mul.w	r3, r2, r3
 8004d2a:	1acb      	subs	r3, r1, r3
 8004d2c:	011b      	lsls	r3, r3, #4
 8004d2e:	3332      	adds	r3, #50	; 0x32
 8004d30:	4a33      	ldr	r2, [pc, #204]	; (8004e00 <UART_SetConfig+0x4e4>)
 8004d32:	fba2 2303 	umull	r2, r3, r2, r3
 8004d36:	095b      	lsrs	r3, r3, #5
 8004d38:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004d3c:	441c      	add	r4, r3
 8004d3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004d42:	2200      	movs	r2, #0
 8004d44:	673b      	str	r3, [r7, #112]	; 0x70
 8004d46:	677a      	str	r2, [r7, #116]	; 0x74
 8004d48:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004d4c:	4642      	mov	r2, r8
 8004d4e:	464b      	mov	r3, r9
 8004d50:	1891      	adds	r1, r2, r2
 8004d52:	60b9      	str	r1, [r7, #8]
 8004d54:	415b      	adcs	r3, r3
 8004d56:	60fb      	str	r3, [r7, #12]
 8004d58:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004d5c:	4641      	mov	r1, r8
 8004d5e:	1851      	adds	r1, r2, r1
 8004d60:	6039      	str	r1, [r7, #0]
 8004d62:	4649      	mov	r1, r9
 8004d64:	414b      	adcs	r3, r1
 8004d66:	607b      	str	r3, [r7, #4]
 8004d68:	f04f 0200 	mov.w	r2, #0
 8004d6c:	f04f 0300 	mov.w	r3, #0
 8004d70:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004d74:	4659      	mov	r1, fp
 8004d76:	00cb      	lsls	r3, r1, #3
 8004d78:	4651      	mov	r1, sl
 8004d7a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004d7e:	4651      	mov	r1, sl
 8004d80:	00ca      	lsls	r2, r1, #3
 8004d82:	4610      	mov	r0, r2
 8004d84:	4619      	mov	r1, r3
 8004d86:	4603      	mov	r3, r0
 8004d88:	4642      	mov	r2, r8
 8004d8a:	189b      	adds	r3, r3, r2
 8004d8c:	66bb      	str	r3, [r7, #104]	; 0x68
 8004d8e:	464b      	mov	r3, r9
 8004d90:	460a      	mov	r2, r1
 8004d92:	eb42 0303 	adc.w	r3, r2, r3
 8004d96:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004d98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d9c:	685b      	ldr	r3, [r3, #4]
 8004d9e:	2200      	movs	r2, #0
 8004da0:	663b      	str	r3, [r7, #96]	; 0x60
 8004da2:	667a      	str	r2, [r7, #100]	; 0x64
 8004da4:	f04f 0200 	mov.w	r2, #0
 8004da8:	f04f 0300 	mov.w	r3, #0
 8004dac:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004db0:	4649      	mov	r1, r9
 8004db2:	008b      	lsls	r3, r1, #2
 8004db4:	4641      	mov	r1, r8
 8004db6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004dba:	4641      	mov	r1, r8
 8004dbc:	008a      	lsls	r2, r1, #2
 8004dbe:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004dc2:	f7fb fa5d 	bl	8000280 <__aeabi_uldivmod>
 8004dc6:	4602      	mov	r2, r0
 8004dc8:	460b      	mov	r3, r1
 8004dca:	4b0d      	ldr	r3, [pc, #52]	; (8004e00 <UART_SetConfig+0x4e4>)
 8004dcc:	fba3 1302 	umull	r1, r3, r3, r2
 8004dd0:	095b      	lsrs	r3, r3, #5
 8004dd2:	2164      	movs	r1, #100	; 0x64
 8004dd4:	fb01 f303 	mul.w	r3, r1, r3
 8004dd8:	1ad3      	subs	r3, r2, r3
 8004dda:	011b      	lsls	r3, r3, #4
 8004ddc:	3332      	adds	r3, #50	; 0x32
 8004dde:	4a08      	ldr	r2, [pc, #32]	; (8004e00 <UART_SetConfig+0x4e4>)
 8004de0:	fba2 2303 	umull	r2, r3, r2, r3
 8004de4:	095b      	lsrs	r3, r3, #5
 8004de6:	f003 020f 	and.w	r2, r3, #15
 8004dea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	4422      	add	r2, r4
 8004df2:	609a      	str	r2, [r3, #8]
}
 8004df4:	bf00      	nop
 8004df6:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004e00:	51eb851f 	.word	0x51eb851f

08004e04 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004e04:	b084      	sub	sp, #16
 8004e06:	b580      	push	{r7, lr}
 8004e08:	b084      	sub	sp, #16
 8004e0a:	af00      	add	r7, sp, #0
 8004e0c:	6078      	str	r0, [r7, #4]
 8004e0e:	f107 001c 	add.w	r0, r7, #28
 8004e12:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004e16:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8004e1a:	2b01      	cmp	r3, #1
 8004e1c:	d123      	bne.n	8004e66 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e22:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	68db      	ldr	r3, [r3, #12]
 8004e2e:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004e32:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e36:	687a      	ldr	r2, [r7, #4]
 8004e38:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	68db      	ldr	r3, [r3, #12]
 8004e3e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004e46:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004e4a:	2b01      	cmp	r3, #1
 8004e4c:	d105      	bne.n	8004e5a <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	68db      	ldr	r3, [r3, #12]
 8004e52:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004e5a:	6878      	ldr	r0, [r7, #4]
 8004e5c:	f001 fae2 	bl	8006424 <USB_CoreReset>
 8004e60:	4603      	mov	r3, r0
 8004e62:	73fb      	strb	r3, [r7, #15]
 8004e64:	e01b      	b.n	8004e9e <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	68db      	ldr	r3, [r3, #12]
 8004e6a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004e72:	6878      	ldr	r0, [r7, #4]
 8004e74:	f001 fad6 	bl	8006424 <USB_CoreReset>
 8004e78:	4603      	mov	r3, r0
 8004e7a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004e7c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d106      	bne.n	8004e92 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e88:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	639a      	str	r2, [r3, #56]	; 0x38
 8004e90:	e005      	b.n	8004e9e <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e96:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004e9e:	7fbb      	ldrb	r3, [r7, #30]
 8004ea0:	2b01      	cmp	r3, #1
 8004ea2:	d10b      	bne.n	8004ebc <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	689b      	ldr	r3, [r3, #8]
 8004ea8:	f043 0206 	orr.w	r2, r3, #6
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	689b      	ldr	r3, [r3, #8]
 8004eb4:	f043 0220 	orr.w	r2, r3, #32
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004ebc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	3710      	adds	r7, #16
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004ec8:	b004      	add	sp, #16
 8004eca:	4770      	bx	lr

08004ecc <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004ecc:	b480      	push	{r7}
 8004ece:	b087      	sub	sp, #28
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	60f8      	str	r0, [r7, #12]
 8004ed4:	60b9      	str	r1, [r7, #8]
 8004ed6:	4613      	mov	r3, r2
 8004ed8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004eda:	79fb      	ldrb	r3, [r7, #7]
 8004edc:	2b02      	cmp	r3, #2
 8004ede:	d165      	bne.n	8004fac <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004ee0:	68bb      	ldr	r3, [r7, #8]
 8004ee2:	4a41      	ldr	r2, [pc, #260]	; (8004fe8 <USB_SetTurnaroundTime+0x11c>)
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	d906      	bls.n	8004ef6 <USB_SetTurnaroundTime+0x2a>
 8004ee8:	68bb      	ldr	r3, [r7, #8]
 8004eea:	4a40      	ldr	r2, [pc, #256]	; (8004fec <USB_SetTurnaroundTime+0x120>)
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d202      	bcs.n	8004ef6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004ef0:	230f      	movs	r3, #15
 8004ef2:	617b      	str	r3, [r7, #20]
 8004ef4:	e062      	b.n	8004fbc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004ef6:	68bb      	ldr	r3, [r7, #8]
 8004ef8:	4a3c      	ldr	r2, [pc, #240]	; (8004fec <USB_SetTurnaroundTime+0x120>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d306      	bcc.n	8004f0c <USB_SetTurnaroundTime+0x40>
 8004efe:	68bb      	ldr	r3, [r7, #8]
 8004f00:	4a3b      	ldr	r2, [pc, #236]	; (8004ff0 <USB_SetTurnaroundTime+0x124>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d202      	bcs.n	8004f0c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004f06:	230e      	movs	r3, #14
 8004f08:	617b      	str	r3, [r7, #20]
 8004f0a:	e057      	b.n	8004fbc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004f0c:	68bb      	ldr	r3, [r7, #8]
 8004f0e:	4a38      	ldr	r2, [pc, #224]	; (8004ff0 <USB_SetTurnaroundTime+0x124>)
 8004f10:	4293      	cmp	r3, r2
 8004f12:	d306      	bcc.n	8004f22 <USB_SetTurnaroundTime+0x56>
 8004f14:	68bb      	ldr	r3, [r7, #8]
 8004f16:	4a37      	ldr	r2, [pc, #220]	; (8004ff4 <USB_SetTurnaroundTime+0x128>)
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	d202      	bcs.n	8004f22 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004f1c:	230d      	movs	r3, #13
 8004f1e:	617b      	str	r3, [r7, #20]
 8004f20:	e04c      	b.n	8004fbc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004f22:	68bb      	ldr	r3, [r7, #8]
 8004f24:	4a33      	ldr	r2, [pc, #204]	; (8004ff4 <USB_SetTurnaroundTime+0x128>)
 8004f26:	4293      	cmp	r3, r2
 8004f28:	d306      	bcc.n	8004f38 <USB_SetTurnaroundTime+0x6c>
 8004f2a:	68bb      	ldr	r3, [r7, #8]
 8004f2c:	4a32      	ldr	r2, [pc, #200]	; (8004ff8 <USB_SetTurnaroundTime+0x12c>)
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d802      	bhi.n	8004f38 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004f32:	230c      	movs	r3, #12
 8004f34:	617b      	str	r3, [r7, #20]
 8004f36:	e041      	b.n	8004fbc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004f38:	68bb      	ldr	r3, [r7, #8]
 8004f3a:	4a2f      	ldr	r2, [pc, #188]	; (8004ff8 <USB_SetTurnaroundTime+0x12c>)
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	d906      	bls.n	8004f4e <USB_SetTurnaroundTime+0x82>
 8004f40:	68bb      	ldr	r3, [r7, #8]
 8004f42:	4a2e      	ldr	r2, [pc, #184]	; (8004ffc <USB_SetTurnaroundTime+0x130>)
 8004f44:	4293      	cmp	r3, r2
 8004f46:	d802      	bhi.n	8004f4e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004f48:	230b      	movs	r3, #11
 8004f4a:	617b      	str	r3, [r7, #20]
 8004f4c:	e036      	b.n	8004fbc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004f4e:	68bb      	ldr	r3, [r7, #8]
 8004f50:	4a2a      	ldr	r2, [pc, #168]	; (8004ffc <USB_SetTurnaroundTime+0x130>)
 8004f52:	4293      	cmp	r3, r2
 8004f54:	d906      	bls.n	8004f64 <USB_SetTurnaroundTime+0x98>
 8004f56:	68bb      	ldr	r3, [r7, #8]
 8004f58:	4a29      	ldr	r2, [pc, #164]	; (8005000 <USB_SetTurnaroundTime+0x134>)
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	d802      	bhi.n	8004f64 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004f5e:	230a      	movs	r3, #10
 8004f60:	617b      	str	r3, [r7, #20]
 8004f62:	e02b      	b.n	8004fbc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004f64:	68bb      	ldr	r3, [r7, #8]
 8004f66:	4a26      	ldr	r2, [pc, #152]	; (8005000 <USB_SetTurnaroundTime+0x134>)
 8004f68:	4293      	cmp	r3, r2
 8004f6a:	d906      	bls.n	8004f7a <USB_SetTurnaroundTime+0xae>
 8004f6c:	68bb      	ldr	r3, [r7, #8]
 8004f6e:	4a25      	ldr	r2, [pc, #148]	; (8005004 <USB_SetTurnaroundTime+0x138>)
 8004f70:	4293      	cmp	r3, r2
 8004f72:	d202      	bcs.n	8004f7a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004f74:	2309      	movs	r3, #9
 8004f76:	617b      	str	r3, [r7, #20]
 8004f78:	e020      	b.n	8004fbc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004f7a:	68bb      	ldr	r3, [r7, #8]
 8004f7c:	4a21      	ldr	r2, [pc, #132]	; (8005004 <USB_SetTurnaroundTime+0x138>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d306      	bcc.n	8004f90 <USB_SetTurnaroundTime+0xc4>
 8004f82:	68bb      	ldr	r3, [r7, #8]
 8004f84:	4a20      	ldr	r2, [pc, #128]	; (8005008 <USB_SetTurnaroundTime+0x13c>)
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d802      	bhi.n	8004f90 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004f8a:	2308      	movs	r3, #8
 8004f8c:	617b      	str	r3, [r7, #20]
 8004f8e:	e015      	b.n	8004fbc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004f90:	68bb      	ldr	r3, [r7, #8]
 8004f92:	4a1d      	ldr	r2, [pc, #116]	; (8005008 <USB_SetTurnaroundTime+0x13c>)
 8004f94:	4293      	cmp	r3, r2
 8004f96:	d906      	bls.n	8004fa6 <USB_SetTurnaroundTime+0xda>
 8004f98:	68bb      	ldr	r3, [r7, #8]
 8004f9a:	4a1c      	ldr	r2, [pc, #112]	; (800500c <USB_SetTurnaroundTime+0x140>)
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d202      	bcs.n	8004fa6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004fa0:	2307      	movs	r3, #7
 8004fa2:	617b      	str	r3, [r7, #20]
 8004fa4:	e00a      	b.n	8004fbc <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004fa6:	2306      	movs	r3, #6
 8004fa8:	617b      	str	r3, [r7, #20]
 8004faa:	e007      	b.n	8004fbc <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004fac:	79fb      	ldrb	r3, [r7, #7]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d102      	bne.n	8004fb8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004fb2:	2309      	movs	r3, #9
 8004fb4:	617b      	str	r3, [r7, #20]
 8004fb6:	e001      	b.n	8004fbc <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004fb8:	2309      	movs	r3, #9
 8004fba:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	68db      	ldr	r3, [r3, #12]
 8004fc0:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	68da      	ldr	r2, [r3, #12]
 8004fcc:	697b      	ldr	r3, [r7, #20]
 8004fce:	029b      	lsls	r3, r3, #10
 8004fd0:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004fd4:	431a      	orrs	r2, r3
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004fda:	2300      	movs	r3, #0
}
 8004fdc:	4618      	mov	r0, r3
 8004fde:	371c      	adds	r7, #28
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe6:	4770      	bx	lr
 8004fe8:	00d8acbf 	.word	0x00d8acbf
 8004fec:	00e4e1c0 	.word	0x00e4e1c0
 8004ff0:	00f42400 	.word	0x00f42400
 8004ff4:	01067380 	.word	0x01067380
 8004ff8:	011a499f 	.word	0x011a499f
 8004ffc:	01312cff 	.word	0x01312cff
 8005000:	014ca43f 	.word	0x014ca43f
 8005004:	016e3600 	.word	0x016e3600
 8005008:	01a6ab1f 	.word	0x01a6ab1f
 800500c:	01e84800 	.word	0x01e84800

08005010 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005010:	b480      	push	{r7}
 8005012:	b083      	sub	sp, #12
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	689b      	ldr	r3, [r3, #8]
 800501c:	f043 0201 	orr.w	r2, r3, #1
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005024:	2300      	movs	r3, #0
}
 8005026:	4618      	mov	r0, r3
 8005028:	370c      	adds	r7, #12
 800502a:	46bd      	mov	sp, r7
 800502c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005030:	4770      	bx	lr

08005032 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005032:	b480      	push	{r7}
 8005034:	b083      	sub	sp, #12
 8005036:	af00      	add	r7, sp, #0
 8005038:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	689b      	ldr	r3, [r3, #8]
 800503e:	f023 0201 	bic.w	r2, r3, #1
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005046:	2300      	movs	r3, #0
}
 8005048:	4618      	mov	r0, r3
 800504a:	370c      	adds	r7, #12
 800504c:	46bd      	mov	sp, r7
 800504e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005052:	4770      	bx	lr

08005054 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005054:	b580      	push	{r7, lr}
 8005056:	b084      	sub	sp, #16
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
 800505c:	460b      	mov	r3, r1
 800505e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005060:	2300      	movs	r3, #0
 8005062:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	68db      	ldr	r3, [r3, #12]
 8005068:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005070:	78fb      	ldrb	r3, [r7, #3]
 8005072:	2b01      	cmp	r3, #1
 8005074:	d115      	bne.n	80050a2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	68db      	ldr	r3, [r3, #12]
 800507a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005082:	200a      	movs	r0, #10
 8005084:	f7fb ff68 	bl	8000f58 <HAL_Delay>
      ms += 10U;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	330a      	adds	r3, #10
 800508c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800508e:	6878      	ldr	r0, [r7, #4]
 8005090:	f001 f939 	bl	8006306 <USB_GetMode>
 8005094:	4603      	mov	r3, r0
 8005096:	2b01      	cmp	r3, #1
 8005098:	d01e      	beq.n	80050d8 <USB_SetCurrentMode+0x84>
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	2bc7      	cmp	r3, #199	; 0xc7
 800509e:	d9f0      	bls.n	8005082 <USB_SetCurrentMode+0x2e>
 80050a0:	e01a      	b.n	80050d8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80050a2:	78fb      	ldrb	r3, [r7, #3]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d115      	bne.n	80050d4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	68db      	ldr	r3, [r3, #12]
 80050ac:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80050b4:	200a      	movs	r0, #10
 80050b6:	f7fb ff4f 	bl	8000f58 <HAL_Delay>
      ms += 10U;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	330a      	adds	r3, #10
 80050be:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80050c0:	6878      	ldr	r0, [r7, #4]
 80050c2:	f001 f920 	bl	8006306 <USB_GetMode>
 80050c6:	4603      	mov	r3, r0
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d005      	beq.n	80050d8 <USB_SetCurrentMode+0x84>
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	2bc7      	cmp	r3, #199	; 0xc7
 80050d0:	d9f0      	bls.n	80050b4 <USB_SetCurrentMode+0x60>
 80050d2:	e001      	b.n	80050d8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80050d4:	2301      	movs	r3, #1
 80050d6:	e005      	b.n	80050e4 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	2bc8      	cmp	r3, #200	; 0xc8
 80050dc:	d101      	bne.n	80050e2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80050de:	2301      	movs	r3, #1
 80050e0:	e000      	b.n	80050e4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80050e2:	2300      	movs	r3, #0
}
 80050e4:	4618      	mov	r0, r3
 80050e6:	3710      	adds	r7, #16
 80050e8:	46bd      	mov	sp, r7
 80050ea:	bd80      	pop	{r7, pc}

080050ec <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80050ec:	b084      	sub	sp, #16
 80050ee:	b580      	push	{r7, lr}
 80050f0:	b086      	sub	sp, #24
 80050f2:	af00      	add	r7, sp, #0
 80050f4:	6078      	str	r0, [r7, #4]
 80050f6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80050fa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80050fe:	2300      	movs	r3, #0
 8005100:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005106:	2300      	movs	r3, #0
 8005108:	613b      	str	r3, [r7, #16]
 800510a:	e009      	b.n	8005120 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800510c:	687a      	ldr	r2, [r7, #4]
 800510e:	693b      	ldr	r3, [r7, #16]
 8005110:	3340      	adds	r3, #64	; 0x40
 8005112:	009b      	lsls	r3, r3, #2
 8005114:	4413      	add	r3, r2
 8005116:	2200      	movs	r2, #0
 8005118:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800511a:	693b      	ldr	r3, [r7, #16]
 800511c:	3301      	adds	r3, #1
 800511e:	613b      	str	r3, [r7, #16]
 8005120:	693b      	ldr	r3, [r7, #16]
 8005122:	2b0e      	cmp	r3, #14
 8005124:	d9f2      	bls.n	800510c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005126:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800512a:	2b00      	cmp	r3, #0
 800512c:	d11c      	bne.n	8005168 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005134:	685b      	ldr	r3, [r3, #4]
 8005136:	68fa      	ldr	r2, [r7, #12]
 8005138:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800513c:	f043 0302 	orr.w	r3, r3, #2
 8005140:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005146:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005152:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800515e:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	639a      	str	r2, [r3, #56]	; 0x38
 8005166:	e00b      	b.n	8005180 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800516c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005178:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005186:	461a      	mov	r2, r3
 8005188:	2300      	movs	r3, #0
 800518a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800518c:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8005190:	2b01      	cmp	r3, #1
 8005192:	d10d      	bne.n	80051b0 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005194:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005198:	2b00      	cmp	r3, #0
 800519a:	d104      	bne.n	80051a6 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800519c:	2100      	movs	r1, #0
 800519e:	6878      	ldr	r0, [r7, #4]
 80051a0:	f000 f968 	bl	8005474 <USB_SetDevSpeed>
 80051a4:	e008      	b.n	80051b8 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80051a6:	2101      	movs	r1, #1
 80051a8:	6878      	ldr	r0, [r7, #4]
 80051aa:	f000 f963 	bl	8005474 <USB_SetDevSpeed>
 80051ae:	e003      	b.n	80051b8 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80051b0:	2103      	movs	r1, #3
 80051b2:	6878      	ldr	r0, [r7, #4]
 80051b4:	f000 f95e 	bl	8005474 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80051b8:	2110      	movs	r1, #16
 80051ba:	6878      	ldr	r0, [r7, #4]
 80051bc:	f000 f8fa 	bl	80053b4 <USB_FlushTxFifo>
 80051c0:	4603      	mov	r3, r0
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d001      	beq.n	80051ca <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 80051c6:	2301      	movs	r3, #1
 80051c8:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80051ca:	6878      	ldr	r0, [r7, #4]
 80051cc:	f000 f924 	bl	8005418 <USB_FlushRxFifo>
 80051d0:	4603      	mov	r3, r0
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d001      	beq.n	80051da <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 80051d6:	2301      	movs	r3, #1
 80051d8:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051e0:	461a      	mov	r2, r3
 80051e2:	2300      	movs	r3, #0
 80051e4:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051ec:	461a      	mov	r2, r3
 80051ee:	2300      	movs	r3, #0
 80051f0:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051f8:	461a      	mov	r2, r3
 80051fa:	2300      	movs	r3, #0
 80051fc:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80051fe:	2300      	movs	r3, #0
 8005200:	613b      	str	r3, [r7, #16]
 8005202:	e043      	b.n	800528c <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005204:	693b      	ldr	r3, [r7, #16]
 8005206:	015a      	lsls	r2, r3, #5
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	4413      	add	r3, r2
 800520c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005216:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800521a:	d118      	bne.n	800524e <USB_DevInit+0x162>
    {
      if (i == 0U)
 800521c:	693b      	ldr	r3, [r7, #16]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d10a      	bne.n	8005238 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005222:	693b      	ldr	r3, [r7, #16]
 8005224:	015a      	lsls	r2, r3, #5
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	4413      	add	r3, r2
 800522a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800522e:	461a      	mov	r2, r3
 8005230:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005234:	6013      	str	r3, [r2, #0]
 8005236:	e013      	b.n	8005260 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005238:	693b      	ldr	r3, [r7, #16]
 800523a:	015a      	lsls	r2, r3, #5
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	4413      	add	r3, r2
 8005240:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005244:	461a      	mov	r2, r3
 8005246:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800524a:	6013      	str	r3, [r2, #0]
 800524c:	e008      	b.n	8005260 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800524e:	693b      	ldr	r3, [r7, #16]
 8005250:	015a      	lsls	r2, r3, #5
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	4413      	add	r3, r2
 8005256:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800525a:	461a      	mov	r2, r3
 800525c:	2300      	movs	r3, #0
 800525e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005260:	693b      	ldr	r3, [r7, #16]
 8005262:	015a      	lsls	r2, r3, #5
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	4413      	add	r3, r2
 8005268:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800526c:	461a      	mov	r2, r3
 800526e:	2300      	movs	r3, #0
 8005270:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005272:	693b      	ldr	r3, [r7, #16]
 8005274:	015a      	lsls	r2, r3, #5
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	4413      	add	r3, r2
 800527a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800527e:	461a      	mov	r2, r3
 8005280:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005284:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005286:	693b      	ldr	r3, [r7, #16]
 8005288:	3301      	adds	r3, #1
 800528a:	613b      	str	r3, [r7, #16]
 800528c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005290:	461a      	mov	r2, r3
 8005292:	693b      	ldr	r3, [r7, #16]
 8005294:	4293      	cmp	r3, r2
 8005296:	d3b5      	bcc.n	8005204 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005298:	2300      	movs	r3, #0
 800529a:	613b      	str	r3, [r7, #16]
 800529c:	e043      	b.n	8005326 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800529e:	693b      	ldr	r3, [r7, #16]
 80052a0:	015a      	lsls	r2, r3, #5
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	4413      	add	r3, r2
 80052a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80052b0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80052b4:	d118      	bne.n	80052e8 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 80052b6:	693b      	ldr	r3, [r7, #16]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d10a      	bne.n	80052d2 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80052bc:	693b      	ldr	r3, [r7, #16]
 80052be:	015a      	lsls	r2, r3, #5
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	4413      	add	r3, r2
 80052c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052c8:	461a      	mov	r2, r3
 80052ca:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80052ce:	6013      	str	r3, [r2, #0]
 80052d0:	e013      	b.n	80052fa <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80052d2:	693b      	ldr	r3, [r7, #16]
 80052d4:	015a      	lsls	r2, r3, #5
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	4413      	add	r3, r2
 80052da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052de:	461a      	mov	r2, r3
 80052e0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80052e4:	6013      	str	r3, [r2, #0]
 80052e6:	e008      	b.n	80052fa <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80052e8:	693b      	ldr	r3, [r7, #16]
 80052ea:	015a      	lsls	r2, r3, #5
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	4413      	add	r3, r2
 80052f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052f4:	461a      	mov	r2, r3
 80052f6:	2300      	movs	r3, #0
 80052f8:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80052fa:	693b      	ldr	r3, [r7, #16]
 80052fc:	015a      	lsls	r2, r3, #5
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	4413      	add	r3, r2
 8005302:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005306:	461a      	mov	r2, r3
 8005308:	2300      	movs	r3, #0
 800530a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800530c:	693b      	ldr	r3, [r7, #16]
 800530e:	015a      	lsls	r2, r3, #5
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	4413      	add	r3, r2
 8005314:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005318:	461a      	mov	r2, r3
 800531a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800531e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005320:	693b      	ldr	r3, [r7, #16]
 8005322:	3301      	adds	r3, #1
 8005324:	613b      	str	r3, [r7, #16]
 8005326:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800532a:	461a      	mov	r2, r3
 800532c:	693b      	ldr	r3, [r7, #16]
 800532e:	4293      	cmp	r3, r2
 8005330:	d3b5      	bcc.n	800529e <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005338:	691b      	ldr	r3, [r3, #16]
 800533a:	68fa      	ldr	r2, [r7, #12]
 800533c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005340:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005344:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	2200      	movs	r2, #0
 800534a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005352:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005354:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005358:	2b00      	cmp	r3, #0
 800535a:	d105      	bne.n	8005368 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	699b      	ldr	r3, [r3, #24]
 8005360:	f043 0210 	orr.w	r2, r3, #16
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	699a      	ldr	r2, [r3, #24]
 800536c:	4b10      	ldr	r3, [pc, #64]	; (80053b0 <USB_DevInit+0x2c4>)
 800536e:	4313      	orrs	r3, r2
 8005370:	687a      	ldr	r2, [r7, #4]
 8005372:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005374:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8005378:	2b00      	cmp	r3, #0
 800537a:	d005      	beq.n	8005388 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	699b      	ldr	r3, [r3, #24]
 8005380:	f043 0208 	orr.w	r2, r3, #8
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005388:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800538c:	2b01      	cmp	r3, #1
 800538e:	d107      	bne.n	80053a0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	699b      	ldr	r3, [r3, #24]
 8005394:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005398:	f043 0304 	orr.w	r3, r3, #4
 800539c:	687a      	ldr	r2, [r7, #4]
 800539e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80053a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80053a2:	4618      	mov	r0, r3
 80053a4:	3718      	adds	r7, #24
 80053a6:	46bd      	mov	sp, r7
 80053a8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80053ac:	b004      	add	sp, #16
 80053ae:	4770      	bx	lr
 80053b0:	803c3800 	.word	0x803c3800

080053b4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80053b4:	b480      	push	{r7}
 80053b6:	b085      	sub	sp, #20
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
 80053bc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80053be:	2300      	movs	r3, #0
 80053c0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	3301      	adds	r3, #1
 80053c6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80053ce:	d901      	bls.n	80053d4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80053d0:	2303      	movs	r3, #3
 80053d2:	e01b      	b.n	800540c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	691b      	ldr	r3, [r3, #16]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	daf2      	bge.n	80053c2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80053dc:	2300      	movs	r3, #0
 80053de:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	019b      	lsls	r3, r3, #6
 80053e4:	f043 0220 	orr.w	r2, r3, #32
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	3301      	adds	r3, #1
 80053f0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80053f8:	d901      	bls.n	80053fe <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80053fa:	2303      	movs	r3, #3
 80053fc:	e006      	b.n	800540c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	691b      	ldr	r3, [r3, #16]
 8005402:	f003 0320 	and.w	r3, r3, #32
 8005406:	2b20      	cmp	r3, #32
 8005408:	d0f0      	beq.n	80053ec <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800540a:	2300      	movs	r3, #0
}
 800540c:	4618      	mov	r0, r3
 800540e:	3714      	adds	r7, #20
 8005410:	46bd      	mov	sp, r7
 8005412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005416:	4770      	bx	lr

08005418 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005418:	b480      	push	{r7}
 800541a:	b085      	sub	sp, #20
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005420:	2300      	movs	r3, #0
 8005422:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	3301      	adds	r3, #1
 8005428:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8005430:	d901      	bls.n	8005436 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005432:	2303      	movs	r3, #3
 8005434:	e018      	b.n	8005468 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	691b      	ldr	r3, [r3, #16]
 800543a:	2b00      	cmp	r3, #0
 800543c:	daf2      	bge.n	8005424 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800543e:	2300      	movs	r3, #0
 8005440:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	2210      	movs	r2, #16
 8005446:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	3301      	adds	r3, #1
 800544c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8005454:	d901      	bls.n	800545a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005456:	2303      	movs	r3, #3
 8005458:	e006      	b.n	8005468 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	691b      	ldr	r3, [r3, #16]
 800545e:	f003 0310 	and.w	r3, r3, #16
 8005462:	2b10      	cmp	r3, #16
 8005464:	d0f0      	beq.n	8005448 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005466:	2300      	movs	r3, #0
}
 8005468:	4618      	mov	r0, r3
 800546a:	3714      	adds	r7, #20
 800546c:	46bd      	mov	sp, r7
 800546e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005472:	4770      	bx	lr

08005474 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005474:	b480      	push	{r7}
 8005476:	b085      	sub	sp, #20
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
 800547c:	460b      	mov	r3, r1
 800547e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800548a:	681a      	ldr	r2, [r3, #0]
 800548c:	78fb      	ldrb	r3, [r7, #3]
 800548e:	68f9      	ldr	r1, [r7, #12]
 8005490:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005494:	4313      	orrs	r3, r2
 8005496:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005498:	2300      	movs	r3, #0
}
 800549a:	4618      	mov	r0, r3
 800549c:	3714      	adds	r7, #20
 800549e:	46bd      	mov	sp, r7
 80054a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a4:	4770      	bx	lr

080054a6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 80054a6:	b480      	push	{r7}
 80054a8:	b087      	sub	sp, #28
 80054aa:	af00      	add	r7, sp, #0
 80054ac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80054b2:	693b      	ldr	r3, [r7, #16]
 80054b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054b8:	689b      	ldr	r3, [r3, #8]
 80054ba:	f003 0306 	and.w	r3, r3, #6
 80054be:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d102      	bne.n	80054cc <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80054c6:	2300      	movs	r3, #0
 80054c8:	75fb      	strb	r3, [r7, #23]
 80054ca:	e00a      	b.n	80054e2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	2b02      	cmp	r3, #2
 80054d0:	d002      	beq.n	80054d8 <USB_GetDevSpeed+0x32>
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	2b06      	cmp	r3, #6
 80054d6:	d102      	bne.n	80054de <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80054d8:	2302      	movs	r3, #2
 80054da:	75fb      	strb	r3, [r7, #23]
 80054dc:	e001      	b.n	80054e2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80054de:	230f      	movs	r3, #15
 80054e0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80054e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80054e4:	4618      	mov	r0, r3
 80054e6:	371c      	adds	r7, #28
 80054e8:	46bd      	mov	sp, r7
 80054ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ee:	4770      	bx	lr

080054f0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80054f0:	b480      	push	{r7}
 80054f2:	b085      	sub	sp, #20
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
 80054f8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	781b      	ldrb	r3, [r3, #0]
 8005502:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	785b      	ldrb	r3, [r3, #1]
 8005508:	2b01      	cmp	r3, #1
 800550a:	d13a      	bne.n	8005582 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005512:	69da      	ldr	r2, [r3, #28]
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	781b      	ldrb	r3, [r3, #0]
 8005518:	f003 030f 	and.w	r3, r3, #15
 800551c:	2101      	movs	r1, #1
 800551e:	fa01 f303 	lsl.w	r3, r1, r3
 8005522:	b29b      	uxth	r3, r3
 8005524:	68f9      	ldr	r1, [r7, #12]
 8005526:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800552a:	4313      	orrs	r3, r2
 800552c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800552e:	68bb      	ldr	r3, [r7, #8]
 8005530:	015a      	lsls	r2, r3, #5
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	4413      	add	r3, r2
 8005536:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005540:	2b00      	cmp	r3, #0
 8005542:	d155      	bne.n	80055f0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005544:	68bb      	ldr	r3, [r7, #8]
 8005546:	015a      	lsls	r2, r3, #5
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	4413      	add	r3, r2
 800554c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005550:	681a      	ldr	r2, [r3, #0]
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	689b      	ldr	r3, [r3, #8]
 8005556:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	791b      	ldrb	r3, [r3, #4]
 800555e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005560:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005562:	68bb      	ldr	r3, [r7, #8]
 8005564:	059b      	lsls	r3, r3, #22
 8005566:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005568:	4313      	orrs	r3, r2
 800556a:	68ba      	ldr	r2, [r7, #8]
 800556c:	0151      	lsls	r1, r2, #5
 800556e:	68fa      	ldr	r2, [r7, #12]
 8005570:	440a      	add	r2, r1
 8005572:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005576:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800557a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800557e:	6013      	str	r3, [r2, #0]
 8005580:	e036      	b.n	80055f0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005588:	69da      	ldr	r2, [r3, #28]
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	781b      	ldrb	r3, [r3, #0]
 800558e:	f003 030f 	and.w	r3, r3, #15
 8005592:	2101      	movs	r1, #1
 8005594:	fa01 f303 	lsl.w	r3, r1, r3
 8005598:	041b      	lsls	r3, r3, #16
 800559a:	68f9      	ldr	r1, [r7, #12]
 800559c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80055a0:	4313      	orrs	r3, r2
 80055a2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80055a4:	68bb      	ldr	r3, [r7, #8]
 80055a6:	015a      	lsls	r2, r3, #5
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	4413      	add	r3, r2
 80055ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d11a      	bne.n	80055f0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80055ba:	68bb      	ldr	r3, [r7, #8]
 80055bc:	015a      	lsls	r2, r3, #5
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	4413      	add	r3, r2
 80055c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055c6:	681a      	ldr	r2, [r3, #0]
 80055c8:	683b      	ldr	r3, [r7, #0]
 80055ca:	689b      	ldr	r3, [r3, #8]
 80055cc:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	791b      	ldrb	r3, [r3, #4]
 80055d4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80055d6:	430b      	orrs	r3, r1
 80055d8:	4313      	orrs	r3, r2
 80055da:	68ba      	ldr	r2, [r7, #8]
 80055dc:	0151      	lsls	r1, r2, #5
 80055de:	68fa      	ldr	r2, [r7, #12]
 80055e0:	440a      	add	r2, r1
 80055e2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80055ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80055ee:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80055f0:	2300      	movs	r3, #0
}
 80055f2:	4618      	mov	r0, r3
 80055f4:	3714      	adds	r7, #20
 80055f6:	46bd      	mov	sp, r7
 80055f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fc:	4770      	bx	lr
	...

08005600 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005600:	b480      	push	{r7}
 8005602:	b085      	sub	sp, #20
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
 8005608:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	781b      	ldrb	r3, [r3, #0]
 8005612:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	785b      	ldrb	r3, [r3, #1]
 8005618:	2b01      	cmp	r3, #1
 800561a:	d161      	bne.n	80056e0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800561c:	68bb      	ldr	r3, [r7, #8]
 800561e:	015a      	lsls	r2, r3, #5
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	4413      	add	r3, r2
 8005624:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800562e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005632:	d11f      	bne.n	8005674 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005634:	68bb      	ldr	r3, [r7, #8]
 8005636:	015a      	lsls	r2, r3, #5
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	4413      	add	r3, r2
 800563c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	68ba      	ldr	r2, [r7, #8]
 8005644:	0151      	lsls	r1, r2, #5
 8005646:	68fa      	ldr	r2, [r7, #12]
 8005648:	440a      	add	r2, r1
 800564a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800564e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005652:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005654:	68bb      	ldr	r3, [r7, #8]
 8005656:	015a      	lsls	r2, r3, #5
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	4413      	add	r3, r2
 800565c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	68ba      	ldr	r2, [r7, #8]
 8005664:	0151      	lsls	r1, r2, #5
 8005666:	68fa      	ldr	r2, [r7, #12]
 8005668:	440a      	add	r2, r1
 800566a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800566e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005672:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800567a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	781b      	ldrb	r3, [r3, #0]
 8005680:	f003 030f 	and.w	r3, r3, #15
 8005684:	2101      	movs	r1, #1
 8005686:	fa01 f303 	lsl.w	r3, r1, r3
 800568a:	b29b      	uxth	r3, r3
 800568c:	43db      	mvns	r3, r3
 800568e:	68f9      	ldr	r1, [r7, #12]
 8005690:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005694:	4013      	ands	r3, r2
 8005696:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800569e:	69da      	ldr	r2, [r3, #28]
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	781b      	ldrb	r3, [r3, #0]
 80056a4:	f003 030f 	and.w	r3, r3, #15
 80056a8:	2101      	movs	r1, #1
 80056aa:	fa01 f303 	lsl.w	r3, r1, r3
 80056ae:	b29b      	uxth	r3, r3
 80056b0:	43db      	mvns	r3, r3
 80056b2:	68f9      	ldr	r1, [r7, #12]
 80056b4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80056b8:	4013      	ands	r3, r2
 80056ba:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80056bc:	68bb      	ldr	r3, [r7, #8]
 80056be:	015a      	lsls	r2, r3, #5
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	4413      	add	r3, r2
 80056c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056c8:	681a      	ldr	r2, [r3, #0]
 80056ca:	68bb      	ldr	r3, [r7, #8]
 80056cc:	0159      	lsls	r1, r3, #5
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	440b      	add	r3, r1
 80056d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056d6:	4619      	mov	r1, r3
 80056d8:	4b35      	ldr	r3, [pc, #212]	; (80057b0 <USB_DeactivateEndpoint+0x1b0>)
 80056da:	4013      	ands	r3, r2
 80056dc:	600b      	str	r3, [r1, #0]
 80056de:	e060      	b.n	80057a2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80056e0:	68bb      	ldr	r3, [r7, #8]
 80056e2:	015a      	lsls	r2, r3, #5
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	4413      	add	r3, r2
 80056e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80056f2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80056f6:	d11f      	bne.n	8005738 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80056f8:	68bb      	ldr	r3, [r7, #8]
 80056fa:	015a      	lsls	r2, r3, #5
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	4413      	add	r3, r2
 8005700:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	68ba      	ldr	r2, [r7, #8]
 8005708:	0151      	lsls	r1, r2, #5
 800570a:	68fa      	ldr	r2, [r7, #12]
 800570c:	440a      	add	r2, r1
 800570e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005712:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005716:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005718:	68bb      	ldr	r3, [r7, #8]
 800571a:	015a      	lsls	r2, r3, #5
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	4413      	add	r3, r2
 8005720:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	68ba      	ldr	r2, [r7, #8]
 8005728:	0151      	lsls	r1, r2, #5
 800572a:	68fa      	ldr	r2, [r7, #12]
 800572c:	440a      	add	r2, r1
 800572e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005732:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005736:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800573e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005740:	683b      	ldr	r3, [r7, #0]
 8005742:	781b      	ldrb	r3, [r3, #0]
 8005744:	f003 030f 	and.w	r3, r3, #15
 8005748:	2101      	movs	r1, #1
 800574a:	fa01 f303 	lsl.w	r3, r1, r3
 800574e:	041b      	lsls	r3, r3, #16
 8005750:	43db      	mvns	r3, r3
 8005752:	68f9      	ldr	r1, [r7, #12]
 8005754:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005758:	4013      	ands	r3, r2
 800575a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005762:	69da      	ldr	r2, [r3, #28]
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	781b      	ldrb	r3, [r3, #0]
 8005768:	f003 030f 	and.w	r3, r3, #15
 800576c:	2101      	movs	r1, #1
 800576e:	fa01 f303 	lsl.w	r3, r1, r3
 8005772:	041b      	lsls	r3, r3, #16
 8005774:	43db      	mvns	r3, r3
 8005776:	68f9      	ldr	r1, [r7, #12]
 8005778:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800577c:	4013      	ands	r3, r2
 800577e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005780:	68bb      	ldr	r3, [r7, #8]
 8005782:	015a      	lsls	r2, r3, #5
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	4413      	add	r3, r2
 8005788:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800578c:	681a      	ldr	r2, [r3, #0]
 800578e:	68bb      	ldr	r3, [r7, #8]
 8005790:	0159      	lsls	r1, r3, #5
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	440b      	add	r3, r1
 8005796:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800579a:	4619      	mov	r1, r3
 800579c:	4b05      	ldr	r3, [pc, #20]	; (80057b4 <USB_DeactivateEndpoint+0x1b4>)
 800579e:	4013      	ands	r3, r2
 80057a0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80057a2:	2300      	movs	r3, #0
}
 80057a4:	4618      	mov	r0, r3
 80057a6:	3714      	adds	r7, #20
 80057a8:	46bd      	mov	sp, r7
 80057aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ae:	4770      	bx	lr
 80057b0:	ec337800 	.word	0xec337800
 80057b4:	eff37800 	.word	0xeff37800

080057b8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80057b8:	b580      	push	{r7, lr}
 80057ba:	b08a      	sub	sp, #40	; 0x28
 80057bc:	af02      	add	r7, sp, #8
 80057be:	60f8      	str	r0, [r7, #12]
 80057c0:	60b9      	str	r1, [r7, #8]
 80057c2:	4613      	mov	r3, r2
 80057c4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80057ca:	68bb      	ldr	r3, [r7, #8]
 80057cc:	781b      	ldrb	r3, [r3, #0]
 80057ce:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80057d0:	68bb      	ldr	r3, [r7, #8]
 80057d2:	785b      	ldrb	r3, [r3, #1]
 80057d4:	2b01      	cmp	r3, #1
 80057d6:	f040 817a 	bne.w	8005ace <USB_EPStartXfer+0x316>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80057da:	68bb      	ldr	r3, [r7, #8]
 80057dc:	691b      	ldr	r3, [r3, #16]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d132      	bne.n	8005848 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80057e2:	69bb      	ldr	r3, [r7, #24]
 80057e4:	015a      	lsls	r2, r3, #5
 80057e6:	69fb      	ldr	r3, [r7, #28]
 80057e8:	4413      	add	r3, r2
 80057ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057ee:	691b      	ldr	r3, [r3, #16]
 80057f0:	69ba      	ldr	r2, [r7, #24]
 80057f2:	0151      	lsls	r1, r2, #5
 80057f4:	69fa      	ldr	r2, [r7, #28]
 80057f6:	440a      	add	r2, r1
 80057f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057fc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005800:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005804:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005806:	69bb      	ldr	r3, [r7, #24]
 8005808:	015a      	lsls	r2, r3, #5
 800580a:	69fb      	ldr	r3, [r7, #28]
 800580c:	4413      	add	r3, r2
 800580e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005812:	691b      	ldr	r3, [r3, #16]
 8005814:	69ba      	ldr	r2, [r7, #24]
 8005816:	0151      	lsls	r1, r2, #5
 8005818:	69fa      	ldr	r2, [r7, #28]
 800581a:	440a      	add	r2, r1
 800581c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005820:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005824:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005826:	69bb      	ldr	r3, [r7, #24]
 8005828:	015a      	lsls	r2, r3, #5
 800582a:	69fb      	ldr	r3, [r7, #28]
 800582c:	4413      	add	r3, r2
 800582e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005832:	691b      	ldr	r3, [r3, #16]
 8005834:	69ba      	ldr	r2, [r7, #24]
 8005836:	0151      	lsls	r1, r2, #5
 8005838:	69fa      	ldr	r2, [r7, #28]
 800583a:	440a      	add	r2, r1
 800583c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005840:	0cdb      	lsrs	r3, r3, #19
 8005842:	04db      	lsls	r3, r3, #19
 8005844:	6113      	str	r3, [r2, #16]
 8005846:	e092      	b.n	800596e <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005848:	69bb      	ldr	r3, [r7, #24]
 800584a:	015a      	lsls	r2, r3, #5
 800584c:	69fb      	ldr	r3, [r7, #28]
 800584e:	4413      	add	r3, r2
 8005850:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005854:	691b      	ldr	r3, [r3, #16]
 8005856:	69ba      	ldr	r2, [r7, #24]
 8005858:	0151      	lsls	r1, r2, #5
 800585a:	69fa      	ldr	r2, [r7, #28]
 800585c:	440a      	add	r2, r1
 800585e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005862:	0cdb      	lsrs	r3, r3, #19
 8005864:	04db      	lsls	r3, r3, #19
 8005866:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005868:	69bb      	ldr	r3, [r7, #24]
 800586a:	015a      	lsls	r2, r3, #5
 800586c:	69fb      	ldr	r3, [r7, #28]
 800586e:	4413      	add	r3, r2
 8005870:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005874:	691b      	ldr	r3, [r3, #16]
 8005876:	69ba      	ldr	r2, [r7, #24]
 8005878:	0151      	lsls	r1, r2, #5
 800587a:	69fa      	ldr	r2, [r7, #28]
 800587c:	440a      	add	r2, r1
 800587e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005882:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005886:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800588a:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 800588c:	69bb      	ldr	r3, [r7, #24]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d11a      	bne.n	80058c8 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8005892:	68bb      	ldr	r3, [r7, #8]
 8005894:	691a      	ldr	r2, [r3, #16]
 8005896:	68bb      	ldr	r3, [r7, #8]
 8005898:	689b      	ldr	r3, [r3, #8]
 800589a:	429a      	cmp	r2, r3
 800589c:	d903      	bls.n	80058a6 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800589e:	68bb      	ldr	r3, [r7, #8]
 80058a0:	689a      	ldr	r2, [r3, #8]
 80058a2:	68bb      	ldr	r3, [r7, #8]
 80058a4:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80058a6:	69bb      	ldr	r3, [r7, #24]
 80058a8:	015a      	lsls	r2, r3, #5
 80058aa:	69fb      	ldr	r3, [r7, #28]
 80058ac:	4413      	add	r3, r2
 80058ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058b2:	691b      	ldr	r3, [r3, #16]
 80058b4:	69ba      	ldr	r2, [r7, #24]
 80058b6:	0151      	lsls	r1, r2, #5
 80058b8:	69fa      	ldr	r2, [r7, #28]
 80058ba:	440a      	add	r2, r1
 80058bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058c0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80058c4:	6113      	str	r3, [r2, #16]
 80058c6:	e01b      	b.n	8005900 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80058c8:	69bb      	ldr	r3, [r7, #24]
 80058ca:	015a      	lsls	r2, r3, #5
 80058cc:	69fb      	ldr	r3, [r7, #28]
 80058ce:	4413      	add	r3, r2
 80058d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058d4:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80058d6:	68bb      	ldr	r3, [r7, #8]
 80058d8:	6919      	ldr	r1, [r3, #16]
 80058da:	68bb      	ldr	r3, [r7, #8]
 80058dc:	689b      	ldr	r3, [r3, #8]
 80058de:	440b      	add	r3, r1
 80058e0:	1e59      	subs	r1, r3, #1
 80058e2:	68bb      	ldr	r3, [r7, #8]
 80058e4:	689b      	ldr	r3, [r3, #8]
 80058e6:	fbb1 f3f3 	udiv	r3, r1, r3
 80058ea:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80058ec:	4ba2      	ldr	r3, [pc, #648]	; (8005b78 <USB_EPStartXfer+0x3c0>)
 80058ee:	400b      	ands	r3, r1
 80058f0:	69b9      	ldr	r1, [r7, #24]
 80058f2:	0148      	lsls	r0, r1, #5
 80058f4:	69f9      	ldr	r1, [r7, #28]
 80058f6:	4401      	add	r1, r0
 80058f8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80058fc:	4313      	orrs	r3, r2
 80058fe:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005900:	69bb      	ldr	r3, [r7, #24]
 8005902:	015a      	lsls	r2, r3, #5
 8005904:	69fb      	ldr	r3, [r7, #28]
 8005906:	4413      	add	r3, r2
 8005908:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800590c:	691a      	ldr	r2, [r3, #16]
 800590e:	68bb      	ldr	r3, [r7, #8]
 8005910:	691b      	ldr	r3, [r3, #16]
 8005912:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005916:	69b9      	ldr	r1, [r7, #24]
 8005918:	0148      	lsls	r0, r1, #5
 800591a:	69f9      	ldr	r1, [r7, #28]
 800591c:	4401      	add	r1, r0
 800591e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005922:	4313      	orrs	r3, r2
 8005924:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005926:	68bb      	ldr	r3, [r7, #8]
 8005928:	791b      	ldrb	r3, [r3, #4]
 800592a:	2b01      	cmp	r3, #1
 800592c:	d11f      	bne.n	800596e <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800592e:	69bb      	ldr	r3, [r7, #24]
 8005930:	015a      	lsls	r2, r3, #5
 8005932:	69fb      	ldr	r3, [r7, #28]
 8005934:	4413      	add	r3, r2
 8005936:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800593a:	691b      	ldr	r3, [r3, #16]
 800593c:	69ba      	ldr	r2, [r7, #24]
 800593e:	0151      	lsls	r1, r2, #5
 8005940:	69fa      	ldr	r2, [r7, #28]
 8005942:	440a      	add	r2, r1
 8005944:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005948:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800594c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800594e:	69bb      	ldr	r3, [r7, #24]
 8005950:	015a      	lsls	r2, r3, #5
 8005952:	69fb      	ldr	r3, [r7, #28]
 8005954:	4413      	add	r3, r2
 8005956:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800595a:	691b      	ldr	r3, [r3, #16]
 800595c:	69ba      	ldr	r2, [r7, #24]
 800595e:	0151      	lsls	r1, r2, #5
 8005960:	69fa      	ldr	r2, [r7, #28]
 8005962:	440a      	add	r2, r1
 8005964:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005968:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800596c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800596e:	79fb      	ldrb	r3, [r7, #7]
 8005970:	2b01      	cmp	r3, #1
 8005972:	d14b      	bne.n	8005a0c <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005974:	68bb      	ldr	r3, [r7, #8]
 8005976:	69db      	ldr	r3, [r3, #28]
 8005978:	2b00      	cmp	r3, #0
 800597a:	d009      	beq.n	8005990 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800597c:	69bb      	ldr	r3, [r7, #24]
 800597e:	015a      	lsls	r2, r3, #5
 8005980:	69fb      	ldr	r3, [r7, #28]
 8005982:	4413      	add	r3, r2
 8005984:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005988:	461a      	mov	r2, r3
 800598a:	68bb      	ldr	r3, [r7, #8]
 800598c:	69db      	ldr	r3, [r3, #28]
 800598e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005990:	68bb      	ldr	r3, [r7, #8]
 8005992:	791b      	ldrb	r3, [r3, #4]
 8005994:	2b01      	cmp	r3, #1
 8005996:	d128      	bne.n	80059ea <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005998:	69fb      	ldr	r3, [r7, #28]
 800599a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800599e:	689b      	ldr	r3, [r3, #8]
 80059a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d110      	bne.n	80059ca <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80059a8:	69bb      	ldr	r3, [r7, #24]
 80059aa:	015a      	lsls	r2, r3, #5
 80059ac:	69fb      	ldr	r3, [r7, #28]
 80059ae:	4413      	add	r3, r2
 80059b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	69ba      	ldr	r2, [r7, #24]
 80059b8:	0151      	lsls	r1, r2, #5
 80059ba:	69fa      	ldr	r2, [r7, #28]
 80059bc:	440a      	add	r2, r1
 80059be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059c2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80059c6:	6013      	str	r3, [r2, #0]
 80059c8:	e00f      	b.n	80059ea <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80059ca:	69bb      	ldr	r3, [r7, #24]
 80059cc:	015a      	lsls	r2, r3, #5
 80059ce:	69fb      	ldr	r3, [r7, #28]
 80059d0:	4413      	add	r3, r2
 80059d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	69ba      	ldr	r2, [r7, #24]
 80059da:	0151      	lsls	r1, r2, #5
 80059dc:	69fa      	ldr	r2, [r7, #28]
 80059de:	440a      	add	r2, r1
 80059e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80059e8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80059ea:	69bb      	ldr	r3, [r7, #24]
 80059ec:	015a      	lsls	r2, r3, #5
 80059ee:	69fb      	ldr	r3, [r7, #28]
 80059f0:	4413      	add	r3, r2
 80059f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	69ba      	ldr	r2, [r7, #24]
 80059fa:	0151      	lsls	r1, r2, #5
 80059fc:	69fa      	ldr	r2, [r7, #28]
 80059fe:	440a      	add	r2, r1
 8005a00:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a04:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005a08:	6013      	str	r3, [r2, #0]
 8005a0a:	e165      	b.n	8005cd8 <USB_EPStartXfer+0x520>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005a0c:	69bb      	ldr	r3, [r7, #24]
 8005a0e:	015a      	lsls	r2, r3, #5
 8005a10:	69fb      	ldr	r3, [r7, #28]
 8005a12:	4413      	add	r3, r2
 8005a14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	69ba      	ldr	r2, [r7, #24]
 8005a1c:	0151      	lsls	r1, r2, #5
 8005a1e:	69fa      	ldr	r2, [r7, #28]
 8005a20:	440a      	add	r2, r1
 8005a22:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a26:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005a2a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005a2c:	68bb      	ldr	r3, [r7, #8]
 8005a2e:	791b      	ldrb	r3, [r3, #4]
 8005a30:	2b01      	cmp	r3, #1
 8005a32:	d015      	beq.n	8005a60 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005a34:	68bb      	ldr	r3, [r7, #8]
 8005a36:	691b      	ldr	r3, [r3, #16]
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	f000 814d 	beq.w	8005cd8 <USB_EPStartXfer+0x520>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005a3e:	69fb      	ldr	r3, [r7, #28]
 8005a40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a44:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005a46:	68bb      	ldr	r3, [r7, #8]
 8005a48:	781b      	ldrb	r3, [r3, #0]
 8005a4a:	f003 030f 	and.w	r3, r3, #15
 8005a4e:	2101      	movs	r1, #1
 8005a50:	fa01 f303 	lsl.w	r3, r1, r3
 8005a54:	69f9      	ldr	r1, [r7, #28]
 8005a56:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005a5a:	4313      	orrs	r3, r2
 8005a5c:	634b      	str	r3, [r1, #52]	; 0x34
 8005a5e:	e13b      	b.n	8005cd8 <USB_EPStartXfer+0x520>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005a60:	69fb      	ldr	r3, [r7, #28]
 8005a62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a66:	689b      	ldr	r3, [r3, #8]
 8005a68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d110      	bne.n	8005a92 <USB_EPStartXfer+0x2da>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005a70:	69bb      	ldr	r3, [r7, #24]
 8005a72:	015a      	lsls	r2, r3, #5
 8005a74:	69fb      	ldr	r3, [r7, #28]
 8005a76:	4413      	add	r3, r2
 8005a78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	69ba      	ldr	r2, [r7, #24]
 8005a80:	0151      	lsls	r1, r2, #5
 8005a82:	69fa      	ldr	r2, [r7, #28]
 8005a84:	440a      	add	r2, r1
 8005a86:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a8a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005a8e:	6013      	str	r3, [r2, #0]
 8005a90:	e00f      	b.n	8005ab2 <USB_EPStartXfer+0x2fa>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005a92:	69bb      	ldr	r3, [r7, #24]
 8005a94:	015a      	lsls	r2, r3, #5
 8005a96:	69fb      	ldr	r3, [r7, #28]
 8005a98:	4413      	add	r3, r2
 8005a9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	69ba      	ldr	r2, [r7, #24]
 8005aa2:	0151      	lsls	r1, r2, #5
 8005aa4:	69fa      	ldr	r2, [r7, #28]
 8005aa6:	440a      	add	r2, r1
 8005aa8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005aac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ab0:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005ab2:	68bb      	ldr	r3, [r7, #8]
 8005ab4:	68d9      	ldr	r1, [r3, #12]
 8005ab6:	68bb      	ldr	r3, [r7, #8]
 8005ab8:	781a      	ldrb	r2, [r3, #0]
 8005aba:	68bb      	ldr	r3, [r7, #8]
 8005abc:	691b      	ldr	r3, [r3, #16]
 8005abe:	b298      	uxth	r0, r3
 8005ac0:	79fb      	ldrb	r3, [r7, #7]
 8005ac2:	9300      	str	r3, [sp, #0]
 8005ac4:	4603      	mov	r3, r0
 8005ac6:	68f8      	ldr	r0, [r7, #12]
 8005ac8:	f000 f9b8 	bl	8005e3c <USB_WritePacket>
 8005acc:	e104      	b.n	8005cd8 <USB_EPStartXfer+0x520>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005ace:	69bb      	ldr	r3, [r7, #24]
 8005ad0:	015a      	lsls	r2, r3, #5
 8005ad2:	69fb      	ldr	r3, [r7, #28]
 8005ad4:	4413      	add	r3, r2
 8005ad6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ada:	691b      	ldr	r3, [r3, #16]
 8005adc:	69ba      	ldr	r2, [r7, #24]
 8005ade:	0151      	lsls	r1, r2, #5
 8005ae0:	69fa      	ldr	r2, [r7, #28]
 8005ae2:	440a      	add	r2, r1
 8005ae4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ae8:	0cdb      	lsrs	r3, r3, #19
 8005aea:	04db      	lsls	r3, r3, #19
 8005aec:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005aee:	69bb      	ldr	r3, [r7, #24]
 8005af0:	015a      	lsls	r2, r3, #5
 8005af2:	69fb      	ldr	r3, [r7, #28]
 8005af4:	4413      	add	r3, r2
 8005af6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005afa:	691b      	ldr	r3, [r3, #16]
 8005afc:	69ba      	ldr	r2, [r7, #24]
 8005afe:	0151      	lsls	r1, r2, #5
 8005b00:	69fa      	ldr	r2, [r7, #28]
 8005b02:	440a      	add	r2, r1
 8005b04:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b08:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005b0c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005b10:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8005b12:	69bb      	ldr	r3, [r7, #24]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d131      	bne.n	8005b7c <USB_EPStartXfer+0x3c4>
    {
      if (ep->xfer_len > 0U)
 8005b18:	68bb      	ldr	r3, [r7, #8]
 8005b1a:	691b      	ldr	r3, [r3, #16]
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d003      	beq.n	8005b28 <USB_EPStartXfer+0x370>
      {
        ep->xfer_len = ep->maxpacket;
 8005b20:	68bb      	ldr	r3, [r7, #8]
 8005b22:	689a      	ldr	r2, [r3, #8]
 8005b24:	68bb      	ldr	r3, [r7, #8]
 8005b26:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8005b28:	68bb      	ldr	r3, [r7, #8]
 8005b2a:	689a      	ldr	r2, [r3, #8]
 8005b2c:	68bb      	ldr	r3, [r7, #8]
 8005b2e:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8005b30:	69bb      	ldr	r3, [r7, #24]
 8005b32:	015a      	lsls	r2, r3, #5
 8005b34:	69fb      	ldr	r3, [r7, #28]
 8005b36:	4413      	add	r3, r2
 8005b38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b3c:	691a      	ldr	r2, [r3, #16]
 8005b3e:	68bb      	ldr	r3, [r7, #8]
 8005b40:	6a1b      	ldr	r3, [r3, #32]
 8005b42:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005b46:	69b9      	ldr	r1, [r7, #24]
 8005b48:	0148      	lsls	r0, r1, #5
 8005b4a:	69f9      	ldr	r1, [r7, #28]
 8005b4c:	4401      	add	r1, r0
 8005b4e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005b52:	4313      	orrs	r3, r2
 8005b54:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005b56:	69bb      	ldr	r3, [r7, #24]
 8005b58:	015a      	lsls	r2, r3, #5
 8005b5a:	69fb      	ldr	r3, [r7, #28]
 8005b5c:	4413      	add	r3, r2
 8005b5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b62:	691b      	ldr	r3, [r3, #16]
 8005b64:	69ba      	ldr	r2, [r7, #24]
 8005b66:	0151      	lsls	r1, r2, #5
 8005b68:	69fa      	ldr	r2, [r7, #28]
 8005b6a:	440a      	add	r2, r1
 8005b6c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b70:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005b74:	6113      	str	r3, [r2, #16]
 8005b76:	e061      	b.n	8005c3c <USB_EPStartXfer+0x484>
 8005b78:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8005b7c:	68bb      	ldr	r3, [r7, #8]
 8005b7e:	691b      	ldr	r3, [r3, #16]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d123      	bne.n	8005bcc <USB_EPStartXfer+0x414>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005b84:	69bb      	ldr	r3, [r7, #24]
 8005b86:	015a      	lsls	r2, r3, #5
 8005b88:	69fb      	ldr	r3, [r7, #28]
 8005b8a:	4413      	add	r3, r2
 8005b8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b90:	691a      	ldr	r2, [r3, #16]
 8005b92:	68bb      	ldr	r3, [r7, #8]
 8005b94:	689b      	ldr	r3, [r3, #8]
 8005b96:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005b9a:	69b9      	ldr	r1, [r7, #24]
 8005b9c:	0148      	lsls	r0, r1, #5
 8005b9e:	69f9      	ldr	r1, [r7, #28]
 8005ba0:	4401      	add	r1, r0
 8005ba2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005ba6:	4313      	orrs	r3, r2
 8005ba8:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005baa:	69bb      	ldr	r3, [r7, #24]
 8005bac:	015a      	lsls	r2, r3, #5
 8005bae:	69fb      	ldr	r3, [r7, #28]
 8005bb0:	4413      	add	r3, r2
 8005bb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bb6:	691b      	ldr	r3, [r3, #16]
 8005bb8:	69ba      	ldr	r2, [r7, #24]
 8005bba:	0151      	lsls	r1, r2, #5
 8005bbc:	69fa      	ldr	r2, [r7, #28]
 8005bbe:	440a      	add	r2, r1
 8005bc0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005bc4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005bc8:	6113      	str	r3, [r2, #16]
 8005bca:	e037      	b.n	8005c3c <USB_EPStartXfer+0x484>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005bcc:	68bb      	ldr	r3, [r7, #8]
 8005bce:	691a      	ldr	r2, [r3, #16]
 8005bd0:	68bb      	ldr	r3, [r7, #8]
 8005bd2:	689b      	ldr	r3, [r3, #8]
 8005bd4:	4413      	add	r3, r2
 8005bd6:	1e5a      	subs	r2, r3, #1
 8005bd8:	68bb      	ldr	r3, [r7, #8]
 8005bda:	689b      	ldr	r3, [r3, #8]
 8005bdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005be0:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8005be2:	68bb      	ldr	r3, [r7, #8]
 8005be4:	689b      	ldr	r3, [r3, #8]
 8005be6:	8afa      	ldrh	r2, [r7, #22]
 8005be8:	fb03 f202 	mul.w	r2, r3, r2
 8005bec:	68bb      	ldr	r3, [r7, #8]
 8005bee:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005bf0:	69bb      	ldr	r3, [r7, #24]
 8005bf2:	015a      	lsls	r2, r3, #5
 8005bf4:	69fb      	ldr	r3, [r7, #28]
 8005bf6:	4413      	add	r3, r2
 8005bf8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bfc:	691a      	ldr	r2, [r3, #16]
 8005bfe:	8afb      	ldrh	r3, [r7, #22]
 8005c00:	04d9      	lsls	r1, r3, #19
 8005c02:	4b38      	ldr	r3, [pc, #224]	; (8005ce4 <USB_EPStartXfer+0x52c>)
 8005c04:	400b      	ands	r3, r1
 8005c06:	69b9      	ldr	r1, [r7, #24]
 8005c08:	0148      	lsls	r0, r1, #5
 8005c0a:	69f9      	ldr	r1, [r7, #28]
 8005c0c:	4401      	add	r1, r0
 8005c0e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005c12:	4313      	orrs	r3, r2
 8005c14:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8005c16:	69bb      	ldr	r3, [r7, #24]
 8005c18:	015a      	lsls	r2, r3, #5
 8005c1a:	69fb      	ldr	r3, [r7, #28]
 8005c1c:	4413      	add	r3, r2
 8005c1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c22:	691a      	ldr	r2, [r3, #16]
 8005c24:	68bb      	ldr	r3, [r7, #8]
 8005c26:	6a1b      	ldr	r3, [r3, #32]
 8005c28:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005c2c:	69b9      	ldr	r1, [r7, #24]
 8005c2e:	0148      	lsls	r0, r1, #5
 8005c30:	69f9      	ldr	r1, [r7, #28]
 8005c32:	4401      	add	r1, r0
 8005c34:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005c38:	4313      	orrs	r3, r2
 8005c3a:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8005c3c:	79fb      	ldrb	r3, [r7, #7]
 8005c3e:	2b01      	cmp	r3, #1
 8005c40:	d10d      	bne.n	8005c5e <USB_EPStartXfer+0x4a6>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005c42:	68bb      	ldr	r3, [r7, #8]
 8005c44:	68db      	ldr	r3, [r3, #12]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d009      	beq.n	8005c5e <USB_EPStartXfer+0x4a6>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005c4a:	68bb      	ldr	r3, [r7, #8]
 8005c4c:	68d9      	ldr	r1, [r3, #12]
 8005c4e:	69bb      	ldr	r3, [r7, #24]
 8005c50:	015a      	lsls	r2, r3, #5
 8005c52:	69fb      	ldr	r3, [r7, #28]
 8005c54:	4413      	add	r3, r2
 8005c56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c5a:	460a      	mov	r2, r1
 8005c5c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005c5e:	68bb      	ldr	r3, [r7, #8]
 8005c60:	791b      	ldrb	r3, [r3, #4]
 8005c62:	2b01      	cmp	r3, #1
 8005c64:	d128      	bne.n	8005cb8 <USB_EPStartXfer+0x500>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005c66:	69fb      	ldr	r3, [r7, #28]
 8005c68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c6c:	689b      	ldr	r3, [r3, #8]
 8005c6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d110      	bne.n	8005c98 <USB_EPStartXfer+0x4e0>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005c76:	69bb      	ldr	r3, [r7, #24]
 8005c78:	015a      	lsls	r2, r3, #5
 8005c7a:	69fb      	ldr	r3, [r7, #28]
 8005c7c:	4413      	add	r3, r2
 8005c7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	69ba      	ldr	r2, [r7, #24]
 8005c86:	0151      	lsls	r1, r2, #5
 8005c88:	69fa      	ldr	r2, [r7, #28]
 8005c8a:	440a      	add	r2, r1
 8005c8c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c90:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005c94:	6013      	str	r3, [r2, #0]
 8005c96:	e00f      	b.n	8005cb8 <USB_EPStartXfer+0x500>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005c98:	69bb      	ldr	r3, [r7, #24]
 8005c9a:	015a      	lsls	r2, r3, #5
 8005c9c:	69fb      	ldr	r3, [r7, #28]
 8005c9e:	4413      	add	r3, r2
 8005ca0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	69ba      	ldr	r2, [r7, #24]
 8005ca8:	0151      	lsls	r1, r2, #5
 8005caa:	69fa      	ldr	r2, [r7, #28]
 8005cac:	440a      	add	r2, r1
 8005cae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005cb2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005cb6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005cb8:	69bb      	ldr	r3, [r7, #24]
 8005cba:	015a      	lsls	r2, r3, #5
 8005cbc:	69fb      	ldr	r3, [r7, #28]
 8005cbe:	4413      	add	r3, r2
 8005cc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	69ba      	ldr	r2, [r7, #24]
 8005cc8:	0151      	lsls	r1, r2, #5
 8005cca:	69fa      	ldr	r2, [r7, #28]
 8005ccc:	440a      	add	r2, r1
 8005cce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005cd2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005cd6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005cd8:	2300      	movs	r3, #0
}
 8005cda:	4618      	mov	r0, r3
 8005cdc:	3720      	adds	r7, #32
 8005cde:	46bd      	mov	sp, r7
 8005ce0:	bd80      	pop	{r7, pc}
 8005ce2:	bf00      	nop
 8005ce4:	1ff80000 	.word	0x1ff80000

08005ce8 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005ce8:	b480      	push	{r7}
 8005cea:	b087      	sub	sp, #28
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
 8005cf0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005cf2:	2300      	movs	r3, #0
 8005cf4:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8005cf6:	2300      	movs	r3, #0
 8005cf8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	785b      	ldrb	r3, [r3, #1]
 8005d02:	2b01      	cmp	r3, #1
 8005d04:	d14a      	bne.n	8005d9c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005d06:	683b      	ldr	r3, [r7, #0]
 8005d08:	781b      	ldrb	r3, [r3, #0]
 8005d0a:	015a      	lsls	r2, r3, #5
 8005d0c:	693b      	ldr	r3, [r7, #16]
 8005d0e:	4413      	add	r3, r2
 8005d10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005d1a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005d1e:	f040 8086 	bne.w	8005e2e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8005d22:	683b      	ldr	r3, [r7, #0]
 8005d24:	781b      	ldrb	r3, [r3, #0]
 8005d26:	015a      	lsls	r2, r3, #5
 8005d28:	693b      	ldr	r3, [r7, #16]
 8005d2a:	4413      	add	r3, r2
 8005d2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	683a      	ldr	r2, [r7, #0]
 8005d34:	7812      	ldrb	r2, [r2, #0]
 8005d36:	0151      	lsls	r1, r2, #5
 8005d38:	693a      	ldr	r2, [r7, #16]
 8005d3a:	440a      	add	r2, r1
 8005d3c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d40:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005d44:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8005d46:	683b      	ldr	r3, [r7, #0]
 8005d48:	781b      	ldrb	r3, [r3, #0]
 8005d4a:	015a      	lsls	r2, r3, #5
 8005d4c:	693b      	ldr	r3, [r7, #16]
 8005d4e:	4413      	add	r3, r2
 8005d50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	683a      	ldr	r2, [r7, #0]
 8005d58:	7812      	ldrb	r2, [r2, #0]
 8005d5a:	0151      	lsls	r1, r2, #5
 8005d5c:	693a      	ldr	r2, [r7, #16]
 8005d5e:	440a      	add	r2, r1
 8005d60:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d64:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005d68:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	3301      	adds	r3, #1
 8005d6e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	f242 7210 	movw	r2, #10000	; 0x2710
 8005d76:	4293      	cmp	r3, r2
 8005d78:	d902      	bls.n	8005d80 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8005d7a:	2301      	movs	r3, #1
 8005d7c:	75fb      	strb	r3, [r7, #23]
          break;
 8005d7e:	e056      	b.n	8005e2e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8005d80:	683b      	ldr	r3, [r7, #0]
 8005d82:	781b      	ldrb	r3, [r3, #0]
 8005d84:	015a      	lsls	r2, r3, #5
 8005d86:	693b      	ldr	r3, [r7, #16]
 8005d88:	4413      	add	r3, r2
 8005d8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005d94:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005d98:	d0e7      	beq.n	8005d6a <USB_EPStopXfer+0x82>
 8005d9a:	e048      	b.n	8005e2e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005d9c:	683b      	ldr	r3, [r7, #0]
 8005d9e:	781b      	ldrb	r3, [r3, #0]
 8005da0:	015a      	lsls	r2, r3, #5
 8005da2:	693b      	ldr	r3, [r7, #16]
 8005da4:	4413      	add	r3, r2
 8005da6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005db0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005db4:	d13b      	bne.n	8005e2e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8005db6:	683b      	ldr	r3, [r7, #0]
 8005db8:	781b      	ldrb	r3, [r3, #0]
 8005dba:	015a      	lsls	r2, r3, #5
 8005dbc:	693b      	ldr	r3, [r7, #16]
 8005dbe:	4413      	add	r3, r2
 8005dc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	683a      	ldr	r2, [r7, #0]
 8005dc8:	7812      	ldrb	r2, [r2, #0]
 8005dca:	0151      	lsls	r1, r2, #5
 8005dcc:	693a      	ldr	r2, [r7, #16]
 8005dce:	440a      	add	r2, r1
 8005dd0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005dd4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005dd8:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8005dda:	683b      	ldr	r3, [r7, #0]
 8005ddc:	781b      	ldrb	r3, [r3, #0]
 8005dde:	015a      	lsls	r2, r3, #5
 8005de0:	693b      	ldr	r3, [r7, #16]
 8005de2:	4413      	add	r3, r2
 8005de4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	683a      	ldr	r2, [r7, #0]
 8005dec:	7812      	ldrb	r2, [r2, #0]
 8005dee:	0151      	lsls	r1, r2, #5
 8005df0:	693a      	ldr	r2, [r7, #16]
 8005df2:	440a      	add	r2, r1
 8005df4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005df8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005dfc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	3301      	adds	r3, #1
 8005e02:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	f242 7210 	movw	r2, #10000	; 0x2710
 8005e0a:	4293      	cmp	r3, r2
 8005e0c:	d902      	bls.n	8005e14 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8005e0e:	2301      	movs	r3, #1
 8005e10:	75fb      	strb	r3, [r7, #23]
          break;
 8005e12:	e00c      	b.n	8005e2e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	781b      	ldrb	r3, [r3, #0]
 8005e18:	015a      	lsls	r2, r3, #5
 8005e1a:	693b      	ldr	r3, [r7, #16]
 8005e1c:	4413      	add	r3, r2
 8005e1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005e28:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005e2c:	d0e7      	beq.n	8005dfe <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8005e2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e30:	4618      	mov	r0, r3
 8005e32:	371c      	adds	r7, #28
 8005e34:	46bd      	mov	sp, r7
 8005e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3a:	4770      	bx	lr

08005e3c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005e3c:	b480      	push	{r7}
 8005e3e:	b089      	sub	sp, #36	; 0x24
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	60f8      	str	r0, [r7, #12]
 8005e44:	60b9      	str	r1, [r7, #8]
 8005e46:	4611      	mov	r1, r2
 8005e48:	461a      	mov	r2, r3
 8005e4a:	460b      	mov	r3, r1
 8005e4c:	71fb      	strb	r3, [r7, #7]
 8005e4e:	4613      	mov	r3, r2
 8005e50:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005e56:	68bb      	ldr	r3, [r7, #8]
 8005e58:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005e5a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d123      	bne.n	8005eaa <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005e62:	88bb      	ldrh	r3, [r7, #4]
 8005e64:	3303      	adds	r3, #3
 8005e66:	089b      	lsrs	r3, r3, #2
 8005e68:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	61bb      	str	r3, [r7, #24]
 8005e6e:	e018      	b.n	8005ea2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005e70:	79fb      	ldrb	r3, [r7, #7]
 8005e72:	031a      	lsls	r2, r3, #12
 8005e74:	697b      	ldr	r3, [r7, #20]
 8005e76:	4413      	add	r3, r2
 8005e78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e7c:	461a      	mov	r2, r3
 8005e7e:	69fb      	ldr	r3, [r7, #28]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005e84:	69fb      	ldr	r3, [r7, #28]
 8005e86:	3301      	adds	r3, #1
 8005e88:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005e8a:	69fb      	ldr	r3, [r7, #28]
 8005e8c:	3301      	adds	r3, #1
 8005e8e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005e90:	69fb      	ldr	r3, [r7, #28]
 8005e92:	3301      	adds	r3, #1
 8005e94:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005e96:	69fb      	ldr	r3, [r7, #28]
 8005e98:	3301      	adds	r3, #1
 8005e9a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005e9c:	69bb      	ldr	r3, [r7, #24]
 8005e9e:	3301      	adds	r3, #1
 8005ea0:	61bb      	str	r3, [r7, #24]
 8005ea2:	69ba      	ldr	r2, [r7, #24]
 8005ea4:	693b      	ldr	r3, [r7, #16]
 8005ea6:	429a      	cmp	r2, r3
 8005ea8:	d3e2      	bcc.n	8005e70 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005eaa:	2300      	movs	r3, #0
}
 8005eac:	4618      	mov	r0, r3
 8005eae:	3724      	adds	r7, #36	; 0x24
 8005eb0:	46bd      	mov	sp, r7
 8005eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb6:	4770      	bx	lr

08005eb8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005eb8:	b480      	push	{r7}
 8005eba:	b08b      	sub	sp, #44	; 0x2c
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	60f8      	str	r0, [r7, #12]
 8005ec0:	60b9      	str	r1, [r7, #8]
 8005ec2:	4613      	mov	r3, r2
 8005ec4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005eca:	68bb      	ldr	r3, [r7, #8]
 8005ecc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005ece:	88fb      	ldrh	r3, [r7, #6]
 8005ed0:	089b      	lsrs	r3, r3, #2
 8005ed2:	b29b      	uxth	r3, r3
 8005ed4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005ed6:	88fb      	ldrh	r3, [r7, #6]
 8005ed8:	f003 0303 	and.w	r3, r3, #3
 8005edc:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005ede:	2300      	movs	r3, #0
 8005ee0:	623b      	str	r3, [r7, #32]
 8005ee2:	e014      	b.n	8005f0e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005ee4:	69bb      	ldr	r3, [r7, #24]
 8005ee6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005eea:	681a      	ldr	r2, [r3, #0]
 8005eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eee:	601a      	str	r2, [r3, #0]
    pDest++;
 8005ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ef2:	3301      	adds	r3, #1
 8005ef4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ef8:	3301      	adds	r3, #1
 8005efa:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005efe:	3301      	adds	r3, #1
 8005f00:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f04:	3301      	adds	r3, #1
 8005f06:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005f08:	6a3b      	ldr	r3, [r7, #32]
 8005f0a:	3301      	adds	r3, #1
 8005f0c:	623b      	str	r3, [r7, #32]
 8005f0e:	6a3a      	ldr	r2, [r7, #32]
 8005f10:	697b      	ldr	r3, [r7, #20]
 8005f12:	429a      	cmp	r2, r3
 8005f14:	d3e6      	bcc.n	8005ee4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005f16:	8bfb      	ldrh	r3, [r7, #30]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d01e      	beq.n	8005f5a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005f1c:	2300      	movs	r3, #0
 8005f1e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005f20:	69bb      	ldr	r3, [r7, #24]
 8005f22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f26:	461a      	mov	r2, r3
 8005f28:	f107 0310 	add.w	r3, r7, #16
 8005f2c:	6812      	ldr	r2, [r2, #0]
 8005f2e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005f30:	693a      	ldr	r2, [r7, #16]
 8005f32:	6a3b      	ldr	r3, [r7, #32]
 8005f34:	b2db      	uxtb	r3, r3
 8005f36:	00db      	lsls	r3, r3, #3
 8005f38:	fa22 f303 	lsr.w	r3, r2, r3
 8005f3c:	b2da      	uxtb	r2, r3
 8005f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f40:	701a      	strb	r2, [r3, #0]
      i++;
 8005f42:	6a3b      	ldr	r3, [r7, #32]
 8005f44:	3301      	adds	r3, #1
 8005f46:	623b      	str	r3, [r7, #32]
      pDest++;
 8005f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f4a:	3301      	adds	r3, #1
 8005f4c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005f4e:	8bfb      	ldrh	r3, [r7, #30]
 8005f50:	3b01      	subs	r3, #1
 8005f52:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005f54:	8bfb      	ldrh	r3, [r7, #30]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d1ea      	bne.n	8005f30 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	372c      	adds	r7, #44	; 0x2c
 8005f60:	46bd      	mov	sp, r7
 8005f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f66:	4770      	bx	lr

08005f68 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005f68:	b480      	push	{r7}
 8005f6a:	b085      	sub	sp, #20
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
 8005f70:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005f76:	683b      	ldr	r3, [r7, #0]
 8005f78:	781b      	ldrb	r3, [r3, #0]
 8005f7a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	785b      	ldrb	r3, [r3, #1]
 8005f80:	2b01      	cmp	r3, #1
 8005f82:	d12c      	bne.n	8005fde <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005f84:	68bb      	ldr	r3, [r7, #8]
 8005f86:	015a      	lsls	r2, r3, #5
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	4413      	add	r3, r2
 8005f8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	db12      	blt.n	8005fbc <USB_EPSetStall+0x54>
 8005f96:	68bb      	ldr	r3, [r7, #8]
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d00f      	beq.n	8005fbc <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005f9c:	68bb      	ldr	r3, [r7, #8]
 8005f9e:	015a      	lsls	r2, r3, #5
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	4413      	add	r3, r2
 8005fa4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	68ba      	ldr	r2, [r7, #8]
 8005fac:	0151      	lsls	r1, r2, #5
 8005fae:	68fa      	ldr	r2, [r7, #12]
 8005fb0:	440a      	add	r2, r1
 8005fb2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005fb6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005fba:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005fbc:	68bb      	ldr	r3, [r7, #8]
 8005fbe:	015a      	lsls	r2, r3, #5
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	4413      	add	r3, r2
 8005fc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	68ba      	ldr	r2, [r7, #8]
 8005fcc:	0151      	lsls	r1, r2, #5
 8005fce:	68fa      	ldr	r2, [r7, #12]
 8005fd0:	440a      	add	r2, r1
 8005fd2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005fd6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005fda:	6013      	str	r3, [r2, #0]
 8005fdc:	e02b      	b.n	8006036 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005fde:	68bb      	ldr	r3, [r7, #8]
 8005fe0:	015a      	lsls	r2, r3, #5
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	4413      	add	r3, r2
 8005fe6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	db12      	blt.n	8006016 <USB_EPSetStall+0xae>
 8005ff0:	68bb      	ldr	r3, [r7, #8]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d00f      	beq.n	8006016 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005ff6:	68bb      	ldr	r3, [r7, #8]
 8005ff8:	015a      	lsls	r2, r3, #5
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	4413      	add	r3, r2
 8005ffe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	68ba      	ldr	r2, [r7, #8]
 8006006:	0151      	lsls	r1, r2, #5
 8006008:	68fa      	ldr	r2, [r7, #12]
 800600a:	440a      	add	r2, r1
 800600c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006010:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006014:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006016:	68bb      	ldr	r3, [r7, #8]
 8006018:	015a      	lsls	r2, r3, #5
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	4413      	add	r3, r2
 800601e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	68ba      	ldr	r2, [r7, #8]
 8006026:	0151      	lsls	r1, r2, #5
 8006028:	68fa      	ldr	r2, [r7, #12]
 800602a:	440a      	add	r2, r1
 800602c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006030:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006034:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006036:	2300      	movs	r3, #0
}
 8006038:	4618      	mov	r0, r3
 800603a:	3714      	adds	r7, #20
 800603c:	46bd      	mov	sp, r7
 800603e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006042:	4770      	bx	lr

08006044 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006044:	b480      	push	{r7}
 8006046:	b085      	sub	sp, #20
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]
 800604c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006052:	683b      	ldr	r3, [r7, #0]
 8006054:	781b      	ldrb	r3, [r3, #0]
 8006056:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006058:	683b      	ldr	r3, [r7, #0]
 800605a:	785b      	ldrb	r3, [r3, #1]
 800605c:	2b01      	cmp	r3, #1
 800605e:	d128      	bne.n	80060b2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006060:	68bb      	ldr	r3, [r7, #8]
 8006062:	015a      	lsls	r2, r3, #5
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	4413      	add	r3, r2
 8006068:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	68ba      	ldr	r2, [r7, #8]
 8006070:	0151      	lsls	r1, r2, #5
 8006072:	68fa      	ldr	r2, [r7, #12]
 8006074:	440a      	add	r2, r1
 8006076:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800607a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800607e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006080:	683b      	ldr	r3, [r7, #0]
 8006082:	791b      	ldrb	r3, [r3, #4]
 8006084:	2b03      	cmp	r3, #3
 8006086:	d003      	beq.n	8006090 <USB_EPClearStall+0x4c>
 8006088:	683b      	ldr	r3, [r7, #0]
 800608a:	791b      	ldrb	r3, [r3, #4]
 800608c:	2b02      	cmp	r3, #2
 800608e:	d138      	bne.n	8006102 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006090:	68bb      	ldr	r3, [r7, #8]
 8006092:	015a      	lsls	r2, r3, #5
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	4413      	add	r3, r2
 8006098:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	68ba      	ldr	r2, [r7, #8]
 80060a0:	0151      	lsls	r1, r2, #5
 80060a2:	68fa      	ldr	r2, [r7, #12]
 80060a4:	440a      	add	r2, r1
 80060a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80060ae:	6013      	str	r3, [r2, #0]
 80060b0:	e027      	b.n	8006102 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80060b2:	68bb      	ldr	r3, [r7, #8]
 80060b4:	015a      	lsls	r2, r3, #5
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	4413      	add	r3, r2
 80060ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	68ba      	ldr	r2, [r7, #8]
 80060c2:	0151      	lsls	r1, r2, #5
 80060c4:	68fa      	ldr	r2, [r7, #12]
 80060c6:	440a      	add	r2, r1
 80060c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80060cc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80060d0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80060d2:	683b      	ldr	r3, [r7, #0]
 80060d4:	791b      	ldrb	r3, [r3, #4]
 80060d6:	2b03      	cmp	r3, #3
 80060d8:	d003      	beq.n	80060e2 <USB_EPClearStall+0x9e>
 80060da:	683b      	ldr	r3, [r7, #0]
 80060dc:	791b      	ldrb	r3, [r3, #4]
 80060de:	2b02      	cmp	r3, #2
 80060e0:	d10f      	bne.n	8006102 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80060e2:	68bb      	ldr	r3, [r7, #8]
 80060e4:	015a      	lsls	r2, r3, #5
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	4413      	add	r3, r2
 80060ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	68ba      	ldr	r2, [r7, #8]
 80060f2:	0151      	lsls	r1, r2, #5
 80060f4:	68fa      	ldr	r2, [r7, #12]
 80060f6:	440a      	add	r2, r1
 80060f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80060fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006100:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006102:	2300      	movs	r3, #0
}
 8006104:	4618      	mov	r0, r3
 8006106:	3714      	adds	r7, #20
 8006108:	46bd      	mov	sp, r7
 800610a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610e:	4770      	bx	lr

08006110 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006110:	b480      	push	{r7}
 8006112:	b085      	sub	sp, #20
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
 8006118:	460b      	mov	r3, r1
 800611a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	68fa      	ldr	r2, [r7, #12]
 800612a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800612e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006132:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800613a:	681a      	ldr	r2, [r3, #0]
 800613c:	78fb      	ldrb	r3, [r7, #3]
 800613e:	011b      	lsls	r3, r3, #4
 8006140:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8006144:	68f9      	ldr	r1, [r7, #12]
 8006146:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800614a:	4313      	orrs	r3, r2
 800614c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800614e:	2300      	movs	r3, #0
}
 8006150:	4618      	mov	r0, r3
 8006152:	3714      	adds	r7, #20
 8006154:	46bd      	mov	sp, r7
 8006156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615a:	4770      	bx	lr

0800615c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800615c:	b480      	push	{r7}
 800615e:	b085      	sub	sp, #20
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	68fa      	ldr	r2, [r7, #12]
 8006172:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006176:	f023 0303 	bic.w	r3, r3, #3
 800617a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006182:	685b      	ldr	r3, [r3, #4]
 8006184:	68fa      	ldr	r2, [r7, #12]
 8006186:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800618a:	f023 0302 	bic.w	r3, r3, #2
 800618e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006190:	2300      	movs	r3, #0
}
 8006192:	4618      	mov	r0, r3
 8006194:	3714      	adds	r7, #20
 8006196:	46bd      	mov	sp, r7
 8006198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619c:	4770      	bx	lr

0800619e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800619e:	b480      	push	{r7}
 80061a0:	b085      	sub	sp, #20
 80061a2:	af00      	add	r7, sp, #0
 80061a4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	68fa      	ldr	r2, [r7, #12]
 80061b4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80061b8:	f023 0303 	bic.w	r3, r3, #3
 80061bc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061c4:	685b      	ldr	r3, [r3, #4]
 80061c6:	68fa      	ldr	r2, [r7, #12]
 80061c8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80061cc:	f043 0302 	orr.w	r3, r3, #2
 80061d0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80061d2:	2300      	movs	r3, #0
}
 80061d4:	4618      	mov	r0, r3
 80061d6:	3714      	adds	r7, #20
 80061d8:	46bd      	mov	sp, r7
 80061da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061de:	4770      	bx	lr

080061e0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80061e0:	b480      	push	{r7}
 80061e2:	b085      	sub	sp, #20
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	695b      	ldr	r3, [r3, #20]
 80061ec:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	699b      	ldr	r3, [r3, #24]
 80061f2:	68fa      	ldr	r2, [r7, #12]
 80061f4:	4013      	ands	r3, r2
 80061f6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80061f8:	68fb      	ldr	r3, [r7, #12]
}
 80061fa:	4618      	mov	r0, r3
 80061fc:	3714      	adds	r7, #20
 80061fe:	46bd      	mov	sp, r7
 8006200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006204:	4770      	bx	lr

08006206 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8006206:	b480      	push	{r7}
 8006208:	b085      	sub	sp, #20
 800620a:	af00      	add	r7, sp, #0
 800620c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006218:	699b      	ldr	r3, [r3, #24]
 800621a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006222:	69db      	ldr	r3, [r3, #28]
 8006224:	68ba      	ldr	r2, [r7, #8]
 8006226:	4013      	ands	r3, r2
 8006228:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800622a:	68bb      	ldr	r3, [r7, #8]
 800622c:	0c1b      	lsrs	r3, r3, #16
}
 800622e:	4618      	mov	r0, r3
 8006230:	3714      	adds	r7, #20
 8006232:	46bd      	mov	sp, r7
 8006234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006238:	4770      	bx	lr

0800623a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800623a:	b480      	push	{r7}
 800623c:	b085      	sub	sp, #20
 800623e:	af00      	add	r7, sp, #0
 8006240:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800624c:	699b      	ldr	r3, [r3, #24]
 800624e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006256:	69db      	ldr	r3, [r3, #28]
 8006258:	68ba      	ldr	r2, [r7, #8]
 800625a:	4013      	ands	r3, r2
 800625c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800625e:	68bb      	ldr	r3, [r7, #8]
 8006260:	b29b      	uxth	r3, r3
}
 8006262:	4618      	mov	r0, r3
 8006264:	3714      	adds	r7, #20
 8006266:	46bd      	mov	sp, r7
 8006268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626c:	4770      	bx	lr

0800626e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800626e:	b480      	push	{r7}
 8006270:	b085      	sub	sp, #20
 8006272:	af00      	add	r7, sp, #0
 8006274:	6078      	str	r0, [r7, #4]
 8006276:	460b      	mov	r3, r1
 8006278:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800627e:	78fb      	ldrb	r3, [r7, #3]
 8006280:	015a      	lsls	r2, r3, #5
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	4413      	add	r3, r2
 8006286:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800628a:	689b      	ldr	r3, [r3, #8]
 800628c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006294:	695b      	ldr	r3, [r3, #20]
 8006296:	68ba      	ldr	r2, [r7, #8]
 8006298:	4013      	ands	r3, r2
 800629a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800629c:	68bb      	ldr	r3, [r7, #8]
}
 800629e:	4618      	mov	r0, r3
 80062a0:	3714      	adds	r7, #20
 80062a2:	46bd      	mov	sp, r7
 80062a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a8:	4770      	bx	lr

080062aa <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80062aa:	b480      	push	{r7}
 80062ac:	b087      	sub	sp, #28
 80062ae:	af00      	add	r7, sp, #0
 80062b0:	6078      	str	r0, [r7, #4]
 80062b2:	460b      	mov	r3, r1
 80062b4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80062ba:	697b      	ldr	r3, [r7, #20]
 80062bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062c0:	691b      	ldr	r3, [r3, #16]
 80062c2:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80062c4:	697b      	ldr	r3, [r7, #20]
 80062c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062cc:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80062ce:	78fb      	ldrb	r3, [r7, #3]
 80062d0:	f003 030f 	and.w	r3, r3, #15
 80062d4:	68fa      	ldr	r2, [r7, #12]
 80062d6:	fa22 f303 	lsr.w	r3, r2, r3
 80062da:	01db      	lsls	r3, r3, #7
 80062dc:	b2db      	uxtb	r3, r3
 80062de:	693a      	ldr	r2, [r7, #16]
 80062e0:	4313      	orrs	r3, r2
 80062e2:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80062e4:	78fb      	ldrb	r3, [r7, #3]
 80062e6:	015a      	lsls	r2, r3, #5
 80062e8:	697b      	ldr	r3, [r7, #20]
 80062ea:	4413      	add	r3, r2
 80062ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062f0:	689b      	ldr	r3, [r3, #8]
 80062f2:	693a      	ldr	r2, [r7, #16]
 80062f4:	4013      	ands	r3, r2
 80062f6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80062f8:	68bb      	ldr	r3, [r7, #8]
}
 80062fa:	4618      	mov	r0, r3
 80062fc:	371c      	adds	r7, #28
 80062fe:	46bd      	mov	sp, r7
 8006300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006304:	4770      	bx	lr

08006306 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8006306:	b480      	push	{r7}
 8006308:	b083      	sub	sp, #12
 800630a:	af00      	add	r7, sp, #0
 800630c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	695b      	ldr	r3, [r3, #20]
 8006312:	f003 0301 	and.w	r3, r3, #1
}
 8006316:	4618      	mov	r0, r3
 8006318:	370c      	adds	r7, #12
 800631a:	46bd      	mov	sp, r7
 800631c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006320:	4770      	bx	lr

08006322 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8006322:	b480      	push	{r7}
 8006324:	b085      	sub	sp, #20
 8006326:	af00      	add	r7, sp, #0
 8006328:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	68fa      	ldr	r2, [r7, #12]
 8006338:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800633c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006340:	f023 0307 	bic.w	r3, r3, #7
 8006344:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800634c:	685b      	ldr	r3, [r3, #4]
 800634e:	68fa      	ldr	r2, [r7, #12]
 8006350:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006354:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006358:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800635a:	2300      	movs	r3, #0
}
 800635c:	4618      	mov	r0, r3
 800635e:	3714      	adds	r7, #20
 8006360:	46bd      	mov	sp, r7
 8006362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006366:	4770      	bx	lr

08006368 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8006368:	b480      	push	{r7}
 800636a:	b087      	sub	sp, #28
 800636c:	af00      	add	r7, sp, #0
 800636e:	60f8      	str	r0, [r7, #12]
 8006370:	460b      	mov	r3, r1
 8006372:	607a      	str	r2, [r7, #4]
 8006374:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	333c      	adds	r3, #60	; 0x3c
 800637e:	3304      	adds	r3, #4
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006384:	693b      	ldr	r3, [r7, #16]
 8006386:	4a26      	ldr	r2, [pc, #152]	; (8006420 <USB_EP0_OutStart+0xb8>)
 8006388:	4293      	cmp	r3, r2
 800638a:	d90a      	bls.n	80063a2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800638c:	697b      	ldr	r3, [r7, #20]
 800638e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006398:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800639c:	d101      	bne.n	80063a2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800639e:	2300      	movs	r3, #0
 80063a0:	e037      	b.n	8006412 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80063a2:	697b      	ldr	r3, [r7, #20]
 80063a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063a8:	461a      	mov	r2, r3
 80063aa:	2300      	movs	r3, #0
 80063ac:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80063ae:	697b      	ldr	r3, [r7, #20]
 80063b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063b4:	691b      	ldr	r3, [r3, #16]
 80063b6:	697a      	ldr	r2, [r7, #20]
 80063b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80063bc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80063c0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80063c2:	697b      	ldr	r3, [r7, #20]
 80063c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063c8:	691b      	ldr	r3, [r3, #16]
 80063ca:	697a      	ldr	r2, [r7, #20]
 80063cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80063d0:	f043 0318 	orr.w	r3, r3, #24
 80063d4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80063d6:	697b      	ldr	r3, [r7, #20]
 80063d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063dc:	691b      	ldr	r3, [r3, #16]
 80063de:	697a      	ldr	r2, [r7, #20]
 80063e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80063e4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80063e8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80063ea:	7afb      	ldrb	r3, [r7, #11]
 80063ec:	2b01      	cmp	r3, #1
 80063ee:	d10f      	bne.n	8006410 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80063f0:	697b      	ldr	r3, [r7, #20]
 80063f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063f6:	461a      	mov	r2, r3
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80063fc:	697b      	ldr	r3, [r7, #20]
 80063fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	697a      	ldr	r2, [r7, #20]
 8006406:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800640a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800640e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006410:	2300      	movs	r3, #0
}
 8006412:	4618      	mov	r0, r3
 8006414:	371c      	adds	r7, #28
 8006416:	46bd      	mov	sp, r7
 8006418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641c:	4770      	bx	lr
 800641e:	bf00      	nop
 8006420:	4f54300a 	.word	0x4f54300a

08006424 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006424:	b480      	push	{r7}
 8006426:	b085      	sub	sp, #20
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800642c:	2300      	movs	r3, #0
 800642e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	3301      	adds	r3, #1
 8006434:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800643c:	d901      	bls.n	8006442 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800643e:	2303      	movs	r3, #3
 8006440:	e01b      	b.n	800647a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	691b      	ldr	r3, [r3, #16]
 8006446:	2b00      	cmp	r3, #0
 8006448:	daf2      	bge.n	8006430 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800644a:	2300      	movs	r3, #0
 800644c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	691b      	ldr	r3, [r3, #16]
 8006452:	f043 0201 	orr.w	r2, r3, #1
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	3301      	adds	r3, #1
 800645e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8006466:	d901      	bls.n	800646c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006468:	2303      	movs	r3, #3
 800646a:	e006      	b.n	800647a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	691b      	ldr	r3, [r3, #16]
 8006470:	f003 0301 	and.w	r3, r3, #1
 8006474:	2b01      	cmp	r3, #1
 8006476:	d0f0      	beq.n	800645a <USB_CoreReset+0x36>

  return HAL_OK;
 8006478:	2300      	movs	r3, #0
}
 800647a:	4618      	mov	r0, r3
 800647c:	3714      	adds	r7, #20
 800647e:	46bd      	mov	sp, r7
 8006480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006484:	4770      	bx	lr
	...

08006488 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006488:	b580      	push	{r7, lr}
 800648a:	b084      	sub	sp, #16
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]
 8006490:	460b      	mov	r3, r1
 8006492:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006494:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006498:	f002 fcf8 	bl	8008e8c <USBD_static_malloc>
 800649c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d109      	bne.n	80064b8 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	32b0      	adds	r2, #176	; 0xb0
 80064ae:	2100      	movs	r1, #0
 80064b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80064b4:	2302      	movs	r3, #2
 80064b6:	e0d4      	b.n	8006662 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80064b8:	f44f 7207 	mov.w	r2, #540	; 0x21c
 80064bc:	2100      	movs	r1, #0
 80064be:	68f8      	ldr	r0, [r7, #12]
 80064c0:	f002 fd62 	bl	8008f88 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	32b0      	adds	r2, #176	; 0xb0
 80064ce:	68f9      	ldr	r1, [r7, #12]
 80064d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	32b0      	adds	r2, #176	; 0xb0
 80064de:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	7c1b      	ldrb	r3, [r3, #16]
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d138      	bne.n	8006562 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80064f0:	4b5e      	ldr	r3, [pc, #376]	; (800666c <USBD_CDC_Init+0x1e4>)
 80064f2:	7819      	ldrb	r1, [r3, #0]
 80064f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80064f8:	2202      	movs	r2, #2
 80064fa:	6878      	ldr	r0, [r7, #4]
 80064fc:	f002 fba3 	bl	8008c46 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006500:	4b5a      	ldr	r3, [pc, #360]	; (800666c <USBD_CDC_Init+0x1e4>)
 8006502:	781b      	ldrb	r3, [r3, #0]
 8006504:	f003 020f 	and.w	r2, r3, #15
 8006508:	6879      	ldr	r1, [r7, #4]
 800650a:	4613      	mov	r3, r2
 800650c:	009b      	lsls	r3, r3, #2
 800650e:	4413      	add	r3, r2
 8006510:	009b      	lsls	r3, r3, #2
 8006512:	440b      	add	r3, r1
 8006514:	3324      	adds	r3, #36	; 0x24
 8006516:	2201      	movs	r2, #1
 8006518:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800651a:	4b55      	ldr	r3, [pc, #340]	; (8006670 <USBD_CDC_Init+0x1e8>)
 800651c:	7819      	ldrb	r1, [r3, #0]
 800651e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006522:	2202      	movs	r2, #2
 8006524:	6878      	ldr	r0, [r7, #4]
 8006526:	f002 fb8e 	bl	8008c46 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800652a:	4b51      	ldr	r3, [pc, #324]	; (8006670 <USBD_CDC_Init+0x1e8>)
 800652c:	781b      	ldrb	r3, [r3, #0]
 800652e:	f003 020f 	and.w	r2, r3, #15
 8006532:	6879      	ldr	r1, [r7, #4]
 8006534:	4613      	mov	r3, r2
 8006536:	009b      	lsls	r3, r3, #2
 8006538:	4413      	add	r3, r2
 800653a:	009b      	lsls	r3, r3, #2
 800653c:	440b      	add	r3, r1
 800653e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006542:	2201      	movs	r2, #1
 8006544:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006546:	4b4b      	ldr	r3, [pc, #300]	; (8006674 <USBD_CDC_Init+0x1ec>)
 8006548:	781b      	ldrb	r3, [r3, #0]
 800654a:	f003 020f 	and.w	r2, r3, #15
 800654e:	6879      	ldr	r1, [r7, #4]
 8006550:	4613      	mov	r3, r2
 8006552:	009b      	lsls	r3, r3, #2
 8006554:	4413      	add	r3, r2
 8006556:	009b      	lsls	r3, r3, #2
 8006558:	440b      	add	r3, r1
 800655a:	3326      	adds	r3, #38	; 0x26
 800655c:	2210      	movs	r2, #16
 800655e:	801a      	strh	r2, [r3, #0]
 8006560:	e035      	b.n	80065ce <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006562:	4b42      	ldr	r3, [pc, #264]	; (800666c <USBD_CDC_Init+0x1e4>)
 8006564:	7819      	ldrb	r1, [r3, #0]
 8006566:	2340      	movs	r3, #64	; 0x40
 8006568:	2202      	movs	r2, #2
 800656a:	6878      	ldr	r0, [r7, #4]
 800656c:	f002 fb6b 	bl	8008c46 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006570:	4b3e      	ldr	r3, [pc, #248]	; (800666c <USBD_CDC_Init+0x1e4>)
 8006572:	781b      	ldrb	r3, [r3, #0]
 8006574:	f003 020f 	and.w	r2, r3, #15
 8006578:	6879      	ldr	r1, [r7, #4]
 800657a:	4613      	mov	r3, r2
 800657c:	009b      	lsls	r3, r3, #2
 800657e:	4413      	add	r3, r2
 8006580:	009b      	lsls	r3, r3, #2
 8006582:	440b      	add	r3, r1
 8006584:	3324      	adds	r3, #36	; 0x24
 8006586:	2201      	movs	r2, #1
 8006588:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800658a:	4b39      	ldr	r3, [pc, #228]	; (8006670 <USBD_CDC_Init+0x1e8>)
 800658c:	7819      	ldrb	r1, [r3, #0]
 800658e:	2340      	movs	r3, #64	; 0x40
 8006590:	2202      	movs	r2, #2
 8006592:	6878      	ldr	r0, [r7, #4]
 8006594:	f002 fb57 	bl	8008c46 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006598:	4b35      	ldr	r3, [pc, #212]	; (8006670 <USBD_CDC_Init+0x1e8>)
 800659a:	781b      	ldrb	r3, [r3, #0]
 800659c:	f003 020f 	and.w	r2, r3, #15
 80065a0:	6879      	ldr	r1, [r7, #4]
 80065a2:	4613      	mov	r3, r2
 80065a4:	009b      	lsls	r3, r3, #2
 80065a6:	4413      	add	r3, r2
 80065a8:	009b      	lsls	r3, r3, #2
 80065aa:	440b      	add	r3, r1
 80065ac:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80065b0:	2201      	movs	r2, #1
 80065b2:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80065b4:	4b2f      	ldr	r3, [pc, #188]	; (8006674 <USBD_CDC_Init+0x1ec>)
 80065b6:	781b      	ldrb	r3, [r3, #0]
 80065b8:	f003 020f 	and.w	r2, r3, #15
 80065bc:	6879      	ldr	r1, [r7, #4]
 80065be:	4613      	mov	r3, r2
 80065c0:	009b      	lsls	r3, r3, #2
 80065c2:	4413      	add	r3, r2
 80065c4:	009b      	lsls	r3, r3, #2
 80065c6:	440b      	add	r3, r1
 80065c8:	3326      	adds	r3, #38	; 0x26
 80065ca:	2210      	movs	r2, #16
 80065cc:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80065ce:	4b29      	ldr	r3, [pc, #164]	; (8006674 <USBD_CDC_Init+0x1ec>)
 80065d0:	7819      	ldrb	r1, [r3, #0]
 80065d2:	2308      	movs	r3, #8
 80065d4:	2203      	movs	r2, #3
 80065d6:	6878      	ldr	r0, [r7, #4]
 80065d8:	f002 fb35 	bl	8008c46 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80065dc:	4b25      	ldr	r3, [pc, #148]	; (8006674 <USBD_CDC_Init+0x1ec>)
 80065de:	781b      	ldrb	r3, [r3, #0]
 80065e0:	f003 020f 	and.w	r2, r3, #15
 80065e4:	6879      	ldr	r1, [r7, #4]
 80065e6:	4613      	mov	r3, r2
 80065e8:	009b      	lsls	r3, r3, #2
 80065ea:	4413      	add	r3, r2
 80065ec:	009b      	lsls	r3, r3, #2
 80065ee:	440b      	add	r3, r1
 80065f0:	3324      	adds	r3, #36	; 0x24
 80065f2:	2201      	movs	r2, #1
 80065f4:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	2200      	movs	r2, #0
 80065fa:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006604:	687a      	ldr	r2, [r7, #4]
 8006606:	33b0      	adds	r3, #176	; 0xb0
 8006608:	009b      	lsls	r3, r3, #2
 800660a:	4413      	add	r3, r2
 800660c:	685b      	ldr	r3, [r3, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	2200      	movs	r2, #0
 8006616:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	2200      	movs	r2, #0
 800661e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8006628:	2b00      	cmp	r3, #0
 800662a:	d101      	bne.n	8006630 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800662c:	2302      	movs	r3, #2
 800662e:	e018      	b.n	8006662 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	7c1b      	ldrb	r3, [r3, #16]
 8006634:	2b00      	cmp	r3, #0
 8006636:	d10a      	bne.n	800664e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006638:	4b0d      	ldr	r3, [pc, #52]	; (8006670 <USBD_CDC_Init+0x1e8>)
 800663a:	7819      	ldrb	r1, [r3, #0]
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006642:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006646:	6878      	ldr	r0, [r7, #4]
 8006648:	f002 fbec 	bl	8008e24 <USBD_LL_PrepareReceive>
 800664c:	e008      	b.n	8006660 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800664e:	4b08      	ldr	r3, [pc, #32]	; (8006670 <USBD_CDC_Init+0x1e8>)
 8006650:	7819      	ldrb	r1, [r3, #0]
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006658:	2340      	movs	r3, #64	; 0x40
 800665a:	6878      	ldr	r0, [r7, #4]
 800665c:	f002 fbe2 	bl	8008e24 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006660:	2300      	movs	r3, #0
}
 8006662:	4618      	mov	r0, r3
 8006664:	3710      	adds	r7, #16
 8006666:	46bd      	mov	sp, r7
 8006668:	bd80      	pop	{r7, pc}
 800666a:	bf00      	nop
 800666c:	20000093 	.word	0x20000093
 8006670:	20000094 	.word	0x20000094
 8006674:	20000095 	.word	0x20000095

08006678 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006678:	b580      	push	{r7, lr}
 800667a:	b082      	sub	sp, #8
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
 8006680:	460b      	mov	r3, r1
 8006682:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8006684:	4b3a      	ldr	r3, [pc, #232]	; (8006770 <USBD_CDC_DeInit+0xf8>)
 8006686:	781b      	ldrb	r3, [r3, #0]
 8006688:	4619      	mov	r1, r3
 800668a:	6878      	ldr	r0, [r7, #4]
 800668c:	f002 fb01 	bl	8008c92 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8006690:	4b37      	ldr	r3, [pc, #220]	; (8006770 <USBD_CDC_DeInit+0xf8>)
 8006692:	781b      	ldrb	r3, [r3, #0]
 8006694:	f003 020f 	and.w	r2, r3, #15
 8006698:	6879      	ldr	r1, [r7, #4]
 800669a:	4613      	mov	r3, r2
 800669c:	009b      	lsls	r3, r3, #2
 800669e:	4413      	add	r3, r2
 80066a0:	009b      	lsls	r3, r3, #2
 80066a2:	440b      	add	r3, r1
 80066a4:	3324      	adds	r3, #36	; 0x24
 80066a6:	2200      	movs	r2, #0
 80066a8:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80066aa:	4b32      	ldr	r3, [pc, #200]	; (8006774 <USBD_CDC_DeInit+0xfc>)
 80066ac:	781b      	ldrb	r3, [r3, #0]
 80066ae:	4619      	mov	r1, r3
 80066b0:	6878      	ldr	r0, [r7, #4]
 80066b2:	f002 faee 	bl	8008c92 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80066b6:	4b2f      	ldr	r3, [pc, #188]	; (8006774 <USBD_CDC_DeInit+0xfc>)
 80066b8:	781b      	ldrb	r3, [r3, #0]
 80066ba:	f003 020f 	and.w	r2, r3, #15
 80066be:	6879      	ldr	r1, [r7, #4]
 80066c0:	4613      	mov	r3, r2
 80066c2:	009b      	lsls	r3, r3, #2
 80066c4:	4413      	add	r3, r2
 80066c6:	009b      	lsls	r3, r3, #2
 80066c8:	440b      	add	r3, r1
 80066ca:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80066ce:	2200      	movs	r2, #0
 80066d0:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80066d2:	4b29      	ldr	r3, [pc, #164]	; (8006778 <USBD_CDC_DeInit+0x100>)
 80066d4:	781b      	ldrb	r3, [r3, #0]
 80066d6:	4619      	mov	r1, r3
 80066d8:	6878      	ldr	r0, [r7, #4]
 80066da:	f002 fada 	bl	8008c92 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80066de:	4b26      	ldr	r3, [pc, #152]	; (8006778 <USBD_CDC_DeInit+0x100>)
 80066e0:	781b      	ldrb	r3, [r3, #0]
 80066e2:	f003 020f 	and.w	r2, r3, #15
 80066e6:	6879      	ldr	r1, [r7, #4]
 80066e8:	4613      	mov	r3, r2
 80066ea:	009b      	lsls	r3, r3, #2
 80066ec:	4413      	add	r3, r2
 80066ee:	009b      	lsls	r3, r3, #2
 80066f0:	440b      	add	r3, r1
 80066f2:	3324      	adds	r3, #36	; 0x24
 80066f4:	2200      	movs	r2, #0
 80066f6:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80066f8:	4b1f      	ldr	r3, [pc, #124]	; (8006778 <USBD_CDC_DeInit+0x100>)
 80066fa:	781b      	ldrb	r3, [r3, #0]
 80066fc:	f003 020f 	and.w	r2, r3, #15
 8006700:	6879      	ldr	r1, [r7, #4]
 8006702:	4613      	mov	r3, r2
 8006704:	009b      	lsls	r3, r3, #2
 8006706:	4413      	add	r3, r2
 8006708:	009b      	lsls	r3, r3, #2
 800670a:	440b      	add	r3, r1
 800670c:	3326      	adds	r3, #38	; 0x26
 800670e:	2200      	movs	r2, #0
 8006710:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	32b0      	adds	r2, #176	; 0xb0
 800671c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006720:	2b00      	cmp	r3, #0
 8006722:	d01f      	beq.n	8006764 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800672a:	687a      	ldr	r2, [r7, #4]
 800672c:	33b0      	adds	r3, #176	; 0xb0
 800672e:	009b      	lsls	r3, r3, #2
 8006730:	4413      	add	r3, r2
 8006732:	685b      	ldr	r3, [r3, #4]
 8006734:	685b      	ldr	r3, [r3, #4]
 8006736:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	32b0      	adds	r2, #176	; 0xb0
 8006742:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006746:	4618      	mov	r0, r3
 8006748:	f002 fbae 	bl	8008ea8 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	32b0      	adds	r2, #176	; 0xb0
 8006756:	2100      	movs	r1, #0
 8006758:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	2200      	movs	r2, #0
 8006760:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006764:	2300      	movs	r3, #0
}
 8006766:	4618      	mov	r0, r3
 8006768:	3708      	adds	r7, #8
 800676a:	46bd      	mov	sp, r7
 800676c:	bd80      	pop	{r7, pc}
 800676e:	bf00      	nop
 8006770:	20000093 	.word	0x20000093
 8006774:	20000094 	.word	0x20000094
 8006778:	20000095 	.word	0x20000095

0800677c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800677c:	b580      	push	{r7, lr}
 800677e:	b086      	sub	sp, #24
 8006780:	af00      	add	r7, sp, #0
 8006782:	6078      	str	r0, [r7, #4]
 8006784:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	32b0      	adds	r2, #176	; 0xb0
 8006790:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006794:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8006796:	2300      	movs	r3, #0
 8006798:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800679a:	2300      	movs	r3, #0
 800679c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800679e:	2300      	movs	r3, #0
 80067a0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80067a2:	693b      	ldr	r3, [r7, #16]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d101      	bne.n	80067ac <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80067a8:	2303      	movs	r3, #3
 80067aa:	e0bf      	b.n	800692c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80067ac:	683b      	ldr	r3, [r7, #0]
 80067ae:	781b      	ldrb	r3, [r3, #0]
 80067b0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d050      	beq.n	800685a <USBD_CDC_Setup+0xde>
 80067b8:	2b20      	cmp	r3, #32
 80067ba:	f040 80af 	bne.w	800691c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80067be:	683b      	ldr	r3, [r7, #0]
 80067c0:	88db      	ldrh	r3, [r3, #6]
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d03a      	beq.n	800683c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80067c6:	683b      	ldr	r3, [r7, #0]
 80067c8:	781b      	ldrb	r3, [r3, #0]
 80067ca:	b25b      	sxtb	r3, r3
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	da1b      	bge.n	8006808 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80067d6:	687a      	ldr	r2, [r7, #4]
 80067d8:	33b0      	adds	r3, #176	; 0xb0
 80067da:	009b      	lsls	r3, r3, #2
 80067dc:	4413      	add	r3, r2
 80067de:	685b      	ldr	r3, [r3, #4]
 80067e0:	689b      	ldr	r3, [r3, #8]
 80067e2:	683a      	ldr	r2, [r7, #0]
 80067e4:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80067e6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80067e8:	683a      	ldr	r2, [r7, #0]
 80067ea:	88d2      	ldrh	r2, [r2, #6]
 80067ec:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80067ee:	683b      	ldr	r3, [r7, #0]
 80067f0:	88db      	ldrh	r3, [r3, #6]
 80067f2:	2b07      	cmp	r3, #7
 80067f4:	bf28      	it	cs
 80067f6:	2307      	movcs	r3, #7
 80067f8:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80067fa:	693b      	ldr	r3, [r7, #16]
 80067fc:	89fa      	ldrh	r2, [r7, #14]
 80067fe:	4619      	mov	r1, r3
 8006800:	6878      	ldr	r0, [r7, #4]
 8006802:	f001 fd89 	bl	8008318 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8006806:	e090      	b.n	800692a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8006808:	683b      	ldr	r3, [r7, #0]
 800680a:	785a      	ldrb	r2, [r3, #1]
 800680c:	693b      	ldr	r3, [r7, #16]
 800680e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8006812:	683b      	ldr	r3, [r7, #0]
 8006814:	88db      	ldrh	r3, [r3, #6]
 8006816:	2b3f      	cmp	r3, #63	; 0x3f
 8006818:	d803      	bhi.n	8006822 <USBD_CDC_Setup+0xa6>
 800681a:	683b      	ldr	r3, [r7, #0]
 800681c:	88db      	ldrh	r3, [r3, #6]
 800681e:	b2da      	uxtb	r2, r3
 8006820:	e000      	b.n	8006824 <USBD_CDC_Setup+0xa8>
 8006822:	2240      	movs	r2, #64	; 0x40
 8006824:	693b      	ldr	r3, [r7, #16]
 8006826:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800682a:	6939      	ldr	r1, [r7, #16]
 800682c:	693b      	ldr	r3, [r7, #16]
 800682e:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8006832:	461a      	mov	r2, r3
 8006834:	6878      	ldr	r0, [r7, #4]
 8006836:	f001 fd9b 	bl	8008370 <USBD_CtlPrepareRx>
      break;
 800683a:	e076      	b.n	800692a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006842:	687a      	ldr	r2, [r7, #4]
 8006844:	33b0      	adds	r3, #176	; 0xb0
 8006846:	009b      	lsls	r3, r3, #2
 8006848:	4413      	add	r3, r2
 800684a:	685b      	ldr	r3, [r3, #4]
 800684c:	689b      	ldr	r3, [r3, #8]
 800684e:	683a      	ldr	r2, [r7, #0]
 8006850:	7850      	ldrb	r0, [r2, #1]
 8006852:	2200      	movs	r2, #0
 8006854:	6839      	ldr	r1, [r7, #0]
 8006856:	4798      	blx	r3
      break;
 8006858:	e067      	b.n	800692a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800685a:	683b      	ldr	r3, [r7, #0]
 800685c:	785b      	ldrb	r3, [r3, #1]
 800685e:	2b0b      	cmp	r3, #11
 8006860:	d851      	bhi.n	8006906 <USBD_CDC_Setup+0x18a>
 8006862:	a201      	add	r2, pc, #4	; (adr r2, 8006868 <USBD_CDC_Setup+0xec>)
 8006864:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006868:	08006899 	.word	0x08006899
 800686c:	08006915 	.word	0x08006915
 8006870:	08006907 	.word	0x08006907
 8006874:	08006907 	.word	0x08006907
 8006878:	08006907 	.word	0x08006907
 800687c:	08006907 	.word	0x08006907
 8006880:	08006907 	.word	0x08006907
 8006884:	08006907 	.word	0x08006907
 8006888:	08006907 	.word	0x08006907
 800688c:	08006907 	.word	0x08006907
 8006890:	080068c3 	.word	0x080068c3
 8006894:	080068ed 	.word	0x080068ed
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800689e:	b2db      	uxtb	r3, r3
 80068a0:	2b03      	cmp	r3, #3
 80068a2:	d107      	bne.n	80068b4 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80068a4:	f107 030a 	add.w	r3, r7, #10
 80068a8:	2202      	movs	r2, #2
 80068aa:	4619      	mov	r1, r3
 80068ac:	6878      	ldr	r0, [r7, #4]
 80068ae:	f001 fd33 	bl	8008318 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80068b2:	e032      	b.n	800691a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80068b4:	6839      	ldr	r1, [r7, #0]
 80068b6:	6878      	ldr	r0, [r7, #4]
 80068b8:	f001 fcbd 	bl	8008236 <USBD_CtlError>
            ret = USBD_FAIL;
 80068bc:	2303      	movs	r3, #3
 80068be:	75fb      	strb	r3, [r7, #23]
          break;
 80068c0:	e02b      	b.n	800691a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80068c8:	b2db      	uxtb	r3, r3
 80068ca:	2b03      	cmp	r3, #3
 80068cc:	d107      	bne.n	80068de <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80068ce:	f107 030d 	add.w	r3, r7, #13
 80068d2:	2201      	movs	r2, #1
 80068d4:	4619      	mov	r1, r3
 80068d6:	6878      	ldr	r0, [r7, #4]
 80068d8:	f001 fd1e 	bl	8008318 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80068dc:	e01d      	b.n	800691a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80068de:	6839      	ldr	r1, [r7, #0]
 80068e0:	6878      	ldr	r0, [r7, #4]
 80068e2:	f001 fca8 	bl	8008236 <USBD_CtlError>
            ret = USBD_FAIL;
 80068e6:	2303      	movs	r3, #3
 80068e8:	75fb      	strb	r3, [r7, #23]
          break;
 80068ea:	e016      	b.n	800691a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80068f2:	b2db      	uxtb	r3, r3
 80068f4:	2b03      	cmp	r3, #3
 80068f6:	d00f      	beq.n	8006918 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80068f8:	6839      	ldr	r1, [r7, #0]
 80068fa:	6878      	ldr	r0, [r7, #4]
 80068fc:	f001 fc9b 	bl	8008236 <USBD_CtlError>
            ret = USBD_FAIL;
 8006900:	2303      	movs	r3, #3
 8006902:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006904:	e008      	b.n	8006918 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006906:	6839      	ldr	r1, [r7, #0]
 8006908:	6878      	ldr	r0, [r7, #4]
 800690a:	f001 fc94 	bl	8008236 <USBD_CtlError>
          ret = USBD_FAIL;
 800690e:	2303      	movs	r3, #3
 8006910:	75fb      	strb	r3, [r7, #23]
          break;
 8006912:	e002      	b.n	800691a <USBD_CDC_Setup+0x19e>
          break;
 8006914:	bf00      	nop
 8006916:	e008      	b.n	800692a <USBD_CDC_Setup+0x1ae>
          break;
 8006918:	bf00      	nop
      }
      break;
 800691a:	e006      	b.n	800692a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800691c:	6839      	ldr	r1, [r7, #0]
 800691e:	6878      	ldr	r0, [r7, #4]
 8006920:	f001 fc89 	bl	8008236 <USBD_CtlError>
      ret = USBD_FAIL;
 8006924:	2303      	movs	r3, #3
 8006926:	75fb      	strb	r3, [r7, #23]
      break;
 8006928:	bf00      	nop
  }

  return (uint8_t)ret;
 800692a:	7dfb      	ldrb	r3, [r7, #23]
}
 800692c:	4618      	mov	r0, r3
 800692e:	3718      	adds	r7, #24
 8006930:	46bd      	mov	sp, r7
 8006932:	bd80      	pop	{r7, pc}

08006934 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006934:	b580      	push	{r7, lr}
 8006936:	b084      	sub	sp, #16
 8006938:	af00      	add	r7, sp, #0
 800693a:	6078      	str	r0, [r7, #4]
 800693c:	460b      	mov	r3, r1
 800693e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006946:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	32b0      	adds	r2, #176	; 0xb0
 8006952:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006956:	2b00      	cmp	r3, #0
 8006958:	d101      	bne.n	800695e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800695a:	2303      	movs	r3, #3
 800695c:	e065      	b.n	8006a2a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	32b0      	adds	r2, #176	; 0xb0
 8006968:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800696c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800696e:	78fb      	ldrb	r3, [r7, #3]
 8006970:	f003 020f 	and.w	r2, r3, #15
 8006974:	6879      	ldr	r1, [r7, #4]
 8006976:	4613      	mov	r3, r2
 8006978:	009b      	lsls	r3, r3, #2
 800697a:	4413      	add	r3, r2
 800697c:	009b      	lsls	r3, r3, #2
 800697e:	440b      	add	r3, r1
 8006980:	3318      	adds	r3, #24
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	2b00      	cmp	r3, #0
 8006986:	d02f      	beq.n	80069e8 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8006988:	78fb      	ldrb	r3, [r7, #3]
 800698a:	f003 020f 	and.w	r2, r3, #15
 800698e:	6879      	ldr	r1, [r7, #4]
 8006990:	4613      	mov	r3, r2
 8006992:	009b      	lsls	r3, r3, #2
 8006994:	4413      	add	r3, r2
 8006996:	009b      	lsls	r3, r3, #2
 8006998:	440b      	add	r3, r1
 800699a:	3318      	adds	r3, #24
 800699c:	681a      	ldr	r2, [r3, #0]
 800699e:	78fb      	ldrb	r3, [r7, #3]
 80069a0:	f003 010f 	and.w	r1, r3, #15
 80069a4:	68f8      	ldr	r0, [r7, #12]
 80069a6:	460b      	mov	r3, r1
 80069a8:	00db      	lsls	r3, r3, #3
 80069aa:	440b      	add	r3, r1
 80069ac:	009b      	lsls	r3, r3, #2
 80069ae:	4403      	add	r3, r0
 80069b0:	331c      	adds	r3, #28
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	fbb2 f1f3 	udiv	r1, r2, r3
 80069b8:	fb01 f303 	mul.w	r3, r1, r3
 80069bc:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d112      	bne.n	80069e8 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80069c2:	78fb      	ldrb	r3, [r7, #3]
 80069c4:	f003 020f 	and.w	r2, r3, #15
 80069c8:	6879      	ldr	r1, [r7, #4]
 80069ca:	4613      	mov	r3, r2
 80069cc:	009b      	lsls	r3, r3, #2
 80069ce:	4413      	add	r3, r2
 80069d0:	009b      	lsls	r3, r3, #2
 80069d2:	440b      	add	r3, r1
 80069d4:	3318      	adds	r3, #24
 80069d6:	2200      	movs	r2, #0
 80069d8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80069da:	78f9      	ldrb	r1, [r7, #3]
 80069dc:	2300      	movs	r3, #0
 80069de:	2200      	movs	r2, #0
 80069e0:	6878      	ldr	r0, [r7, #4]
 80069e2:	f002 f9fe 	bl	8008de2 <USBD_LL_Transmit>
 80069e6:	e01f      	b.n	8006a28 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80069e8:	68bb      	ldr	r3, [r7, #8]
 80069ea:	2200      	movs	r2, #0
 80069ec:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80069f6:	687a      	ldr	r2, [r7, #4]
 80069f8:	33b0      	adds	r3, #176	; 0xb0
 80069fa:	009b      	lsls	r3, r3, #2
 80069fc:	4413      	add	r3, r2
 80069fe:	685b      	ldr	r3, [r3, #4]
 8006a00:	691b      	ldr	r3, [r3, #16]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d010      	beq.n	8006a28 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006a0c:	687a      	ldr	r2, [r7, #4]
 8006a0e:	33b0      	adds	r3, #176	; 0xb0
 8006a10:	009b      	lsls	r3, r3, #2
 8006a12:	4413      	add	r3, r2
 8006a14:	685b      	ldr	r3, [r3, #4]
 8006a16:	691b      	ldr	r3, [r3, #16]
 8006a18:	68ba      	ldr	r2, [r7, #8]
 8006a1a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8006a1e:	68ba      	ldr	r2, [r7, #8]
 8006a20:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8006a24:	78fa      	ldrb	r2, [r7, #3]
 8006a26:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8006a28:	2300      	movs	r3, #0
}
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	3710      	adds	r7, #16
 8006a2e:	46bd      	mov	sp, r7
 8006a30:	bd80      	pop	{r7, pc}

08006a32 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006a32:	b580      	push	{r7, lr}
 8006a34:	b084      	sub	sp, #16
 8006a36:	af00      	add	r7, sp, #0
 8006a38:	6078      	str	r0, [r7, #4]
 8006a3a:	460b      	mov	r3, r1
 8006a3c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	32b0      	adds	r2, #176	; 0xb0
 8006a48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a4c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	32b0      	adds	r2, #176	; 0xb0
 8006a58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d101      	bne.n	8006a64 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8006a60:	2303      	movs	r3, #3
 8006a62:	e01a      	b.n	8006a9a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006a64:	78fb      	ldrb	r3, [r7, #3]
 8006a66:	4619      	mov	r1, r3
 8006a68:	6878      	ldr	r0, [r7, #4]
 8006a6a:	f002 f9fc 	bl	8008e66 <USBD_LL_GetRxDataSize>
 8006a6e:	4602      	mov	r2, r0
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006a7c:	687a      	ldr	r2, [r7, #4]
 8006a7e:	33b0      	adds	r3, #176	; 0xb0
 8006a80:	009b      	lsls	r3, r3, #2
 8006a82:	4413      	add	r3, r2
 8006a84:	685b      	ldr	r3, [r3, #4]
 8006a86:	68db      	ldr	r3, [r3, #12]
 8006a88:	68fa      	ldr	r2, [r7, #12]
 8006a8a:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006a8e:	68fa      	ldr	r2, [r7, #12]
 8006a90:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006a94:	4611      	mov	r1, r2
 8006a96:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006a98:	2300      	movs	r3, #0
}
 8006a9a:	4618      	mov	r0, r3
 8006a9c:	3710      	adds	r7, #16
 8006a9e:	46bd      	mov	sp, r7
 8006aa0:	bd80      	pop	{r7, pc}

08006aa2 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006aa2:	b580      	push	{r7, lr}
 8006aa4:	b084      	sub	sp, #16
 8006aa6:	af00      	add	r7, sp, #0
 8006aa8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	32b0      	adds	r2, #176	; 0xb0
 8006ab4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ab8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d101      	bne.n	8006ac4 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006ac0:	2303      	movs	r3, #3
 8006ac2:	e025      	b.n	8006b10 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006aca:	687a      	ldr	r2, [r7, #4]
 8006acc:	33b0      	adds	r3, #176	; 0xb0
 8006ace:	009b      	lsls	r3, r3, #2
 8006ad0:	4413      	add	r3, r2
 8006ad2:	685b      	ldr	r3, [r3, #4]
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d01a      	beq.n	8006b0e <USBD_CDC_EP0_RxReady+0x6c>
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006ade:	2bff      	cmp	r3, #255	; 0xff
 8006ae0:	d015      	beq.n	8006b0e <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006ae8:	687a      	ldr	r2, [r7, #4]
 8006aea:	33b0      	adds	r3, #176	; 0xb0
 8006aec:	009b      	lsls	r3, r3, #2
 8006aee:	4413      	add	r3, r2
 8006af0:	685b      	ldr	r3, [r3, #4]
 8006af2:	689b      	ldr	r3, [r3, #8]
 8006af4:	68fa      	ldr	r2, [r7, #12]
 8006af6:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8006afa:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8006afc:	68fa      	ldr	r2, [r7, #12]
 8006afe:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006b02:	b292      	uxth	r2, r2
 8006b04:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	22ff      	movs	r2, #255	; 0xff
 8006b0a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8006b0e:	2300      	movs	r3, #0
}
 8006b10:	4618      	mov	r0, r3
 8006b12:	3710      	adds	r7, #16
 8006b14:	46bd      	mov	sp, r7
 8006b16:	bd80      	pop	{r7, pc}

08006b18 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006b18:	b580      	push	{r7, lr}
 8006b1a:	b086      	sub	sp, #24
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006b20:	2182      	movs	r1, #130	; 0x82
 8006b22:	4818      	ldr	r0, [pc, #96]	; (8006b84 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006b24:	f000 fd4f 	bl	80075c6 <USBD_GetEpDesc>
 8006b28:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006b2a:	2101      	movs	r1, #1
 8006b2c:	4815      	ldr	r0, [pc, #84]	; (8006b84 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006b2e:	f000 fd4a 	bl	80075c6 <USBD_GetEpDesc>
 8006b32:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006b34:	2181      	movs	r1, #129	; 0x81
 8006b36:	4813      	ldr	r0, [pc, #76]	; (8006b84 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006b38:	f000 fd45 	bl	80075c6 <USBD_GetEpDesc>
 8006b3c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006b3e:	697b      	ldr	r3, [r7, #20]
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d002      	beq.n	8006b4a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006b44:	697b      	ldr	r3, [r7, #20]
 8006b46:	2210      	movs	r2, #16
 8006b48:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006b4a:	693b      	ldr	r3, [r7, #16]
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d006      	beq.n	8006b5e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006b50:	693b      	ldr	r3, [r7, #16]
 8006b52:	2200      	movs	r2, #0
 8006b54:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006b58:	711a      	strb	r2, [r3, #4]
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d006      	beq.n	8006b72 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	2200      	movs	r2, #0
 8006b68:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006b6c:	711a      	strb	r2, [r3, #4]
 8006b6e:	2200      	movs	r2, #0
 8006b70:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	2243      	movs	r2, #67	; 0x43
 8006b76:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006b78:	4b02      	ldr	r3, [pc, #8]	; (8006b84 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8006b7a:	4618      	mov	r0, r3
 8006b7c:	3718      	adds	r7, #24
 8006b7e:	46bd      	mov	sp, r7
 8006b80:	bd80      	pop	{r7, pc}
 8006b82:	bf00      	nop
 8006b84:	20000050 	.word	0x20000050

08006b88 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006b88:	b580      	push	{r7, lr}
 8006b8a:	b086      	sub	sp, #24
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006b90:	2182      	movs	r1, #130	; 0x82
 8006b92:	4818      	ldr	r0, [pc, #96]	; (8006bf4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006b94:	f000 fd17 	bl	80075c6 <USBD_GetEpDesc>
 8006b98:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006b9a:	2101      	movs	r1, #1
 8006b9c:	4815      	ldr	r0, [pc, #84]	; (8006bf4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006b9e:	f000 fd12 	bl	80075c6 <USBD_GetEpDesc>
 8006ba2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006ba4:	2181      	movs	r1, #129	; 0x81
 8006ba6:	4813      	ldr	r0, [pc, #76]	; (8006bf4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006ba8:	f000 fd0d 	bl	80075c6 <USBD_GetEpDesc>
 8006bac:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006bae:	697b      	ldr	r3, [r7, #20]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d002      	beq.n	8006bba <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8006bb4:	697b      	ldr	r3, [r7, #20]
 8006bb6:	2210      	movs	r2, #16
 8006bb8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006bba:	693b      	ldr	r3, [r7, #16]
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d006      	beq.n	8006bce <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006bc0:	693b      	ldr	r3, [r7, #16]
 8006bc2:	2200      	movs	r2, #0
 8006bc4:	711a      	strb	r2, [r3, #4]
 8006bc6:	2200      	movs	r2, #0
 8006bc8:	f042 0202 	orr.w	r2, r2, #2
 8006bcc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d006      	beq.n	8006be2 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	2200      	movs	r2, #0
 8006bd8:	711a      	strb	r2, [r3, #4]
 8006bda:	2200      	movs	r2, #0
 8006bdc:	f042 0202 	orr.w	r2, r2, #2
 8006be0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	2243      	movs	r2, #67	; 0x43
 8006be6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006be8:	4b02      	ldr	r3, [pc, #8]	; (8006bf4 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8006bea:	4618      	mov	r0, r3
 8006bec:	3718      	adds	r7, #24
 8006bee:	46bd      	mov	sp, r7
 8006bf0:	bd80      	pop	{r7, pc}
 8006bf2:	bf00      	nop
 8006bf4:	20000050 	.word	0x20000050

08006bf8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006bf8:	b580      	push	{r7, lr}
 8006bfa:	b086      	sub	sp, #24
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006c00:	2182      	movs	r1, #130	; 0x82
 8006c02:	4818      	ldr	r0, [pc, #96]	; (8006c64 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006c04:	f000 fcdf 	bl	80075c6 <USBD_GetEpDesc>
 8006c08:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006c0a:	2101      	movs	r1, #1
 8006c0c:	4815      	ldr	r0, [pc, #84]	; (8006c64 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006c0e:	f000 fcda 	bl	80075c6 <USBD_GetEpDesc>
 8006c12:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006c14:	2181      	movs	r1, #129	; 0x81
 8006c16:	4813      	ldr	r0, [pc, #76]	; (8006c64 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006c18:	f000 fcd5 	bl	80075c6 <USBD_GetEpDesc>
 8006c1c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006c1e:	697b      	ldr	r3, [r7, #20]
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d002      	beq.n	8006c2a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006c24:	697b      	ldr	r3, [r7, #20]
 8006c26:	2210      	movs	r2, #16
 8006c28:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006c2a:	693b      	ldr	r3, [r7, #16]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d006      	beq.n	8006c3e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006c30:	693b      	ldr	r3, [r7, #16]
 8006c32:	2200      	movs	r2, #0
 8006c34:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006c38:	711a      	strb	r2, [r3, #4]
 8006c3a:	2200      	movs	r2, #0
 8006c3c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d006      	beq.n	8006c52 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	2200      	movs	r2, #0
 8006c48:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006c4c:	711a      	strb	r2, [r3, #4]
 8006c4e:	2200      	movs	r2, #0
 8006c50:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	2243      	movs	r2, #67	; 0x43
 8006c56:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006c58:	4b02      	ldr	r3, [pc, #8]	; (8006c64 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8006c5a:	4618      	mov	r0, r3
 8006c5c:	3718      	adds	r7, #24
 8006c5e:	46bd      	mov	sp, r7
 8006c60:	bd80      	pop	{r7, pc}
 8006c62:	bf00      	nop
 8006c64:	20000050 	.word	0x20000050

08006c68 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006c68:	b480      	push	{r7}
 8006c6a:	b083      	sub	sp, #12
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	220a      	movs	r2, #10
 8006c74:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8006c76:	4b03      	ldr	r3, [pc, #12]	; (8006c84 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006c78:	4618      	mov	r0, r3
 8006c7a:	370c      	adds	r7, #12
 8006c7c:	46bd      	mov	sp, r7
 8006c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c82:	4770      	bx	lr
 8006c84:	2000000c 	.word	0x2000000c

08006c88 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006c88:	b480      	push	{r7}
 8006c8a:	b083      	sub	sp, #12
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	6078      	str	r0, [r7, #4]
 8006c90:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006c92:	683b      	ldr	r3, [r7, #0]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d101      	bne.n	8006c9c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006c98:	2303      	movs	r3, #3
 8006c9a:	e009      	b.n	8006cb0 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006ca2:	687a      	ldr	r2, [r7, #4]
 8006ca4:	33b0      	adds	r3, #176	; 0xb0
 8006ca6:	009b      	lsls	r3, r3, #2
 8006ca8:	4413      	add	r3, r2
 8006caa:	683a      	ldr	r2, [r7, #0]
 8006cac:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8006cae:	2300      	movs	r3, #0
}
 8006cb0:	4618      	mov	r0, r3
 8006cb2:	370c      	adds	r7, #12
 8006cb4:	46bd      	mov	sp, r7
 8006cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cba:	4770      	bx	lr

08006cbc <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006cbc:	b480      	push	{r7}
 8006cbe:	b087      	sub	sp, #28
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	60f8      	str	r0, [r7, #12]
 8006cc4:	60b9      	str	r1, [r7, #8]
 8006cc6:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	32b0      	adds	r2, #176	; 0xb0
 8006cd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006cd6:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8006cd8:	697b      	ldr	r3, [r7, #20]
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d101      	bne.n	8006ce2 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8006cde:	2303      	movs	r3, #3
 8006ce0:	e008      	b.n	8006cf4 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8006ce2:	697b      	ldr	r3, [r7, #20]
 8006ce4:	68ba      	ldr	r2, [r7, #8]
 8006ce6:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006cea:	697b      	ldr	r3, [r7, #20]
 8006cec:	687a      	ldr	r2, [r7, #4]
 8006cee:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8006cf2:	2300      	movs	r3, #0
}
 8006cf4:	4618      	mov	r0, r3
 8006cf6:	371c      	adds	r7, #28
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfe:	4770      	bx	lr

08006d00 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006d00:	b480      	push	{r7}
 8006d02:	b085      	sub	sp, #20
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]
 8006d08:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	32b0      	adds	r2, #176	; 0xb0
 8006d14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d18:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d101      	bne.n	8006d24 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8006d20:	2303      	movs	r3, #3
 8006d22:	e004      	b.n	8006d2e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	683a      	ldr	r2, [r7, #0]
 8006d28:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8006d2c:	2300      	movs	r3, #0
}
 8006d2e:	4618      	mov	r0, r3
 8006d30:	3714      	adds	r7, #20
 8006d32:	46bd      	mov	sp, r7
 8006d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d38:	4770      	bx	lr
	...

08006d3c <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006d3c:	b580      	push	{r7, lr}
 8006d3e:	b084      	sub	sp, #16
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	32b0      	adds	r2, #176	; 0xb0
 8006d4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d52:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8006d54:	2301      	movs	r3, #1
 8006d56:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8006d58:	68bb      	ldr	r3, [r7, #8]
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d101      	bne.n	8006d62 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8006d5e:	2303      	movs	r3, #3
 8006d60:	e025      	b.n	8006dae <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8006d62:	68bb      	ldr	r3, [r7, #8]
 8006d64:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d11f      	bne.n	8006dac <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8006d6c:	68bb      	ldr	r3, [r7, #8]
 8006d6e:	2201      	movs	r2, #1
 8006d70:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8006d74:	4b10      	ldr	r3, [pc, #64]	; (8006db8 <USBD_CDC_TransmitPacket+0x7c>)
 8006d76:	781b      	ldrb	r3, [r3, #0]
 8006d78:	f003 020f 	and.w	r2, r3, #15
 8006d7c:	68bb      	ldr	r3, [r7, #8]
 8006d7e:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8006d82:	6878      	ldr	r0, [r7, #4]
 8006d84:	4613      	mov	r3, r2
 8006d86:	009b      	lsls	r3, r3, #2
 8006d88:	4413      	add	r3, r2
 8006d8a:	009b      	lsls	r3, r3, #2
 8006d8c:	4403      	add	r3, r0
 8006d8e:	3318      	adds	r3, #24
 8006d90:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8006d92:	4b09      	ldr	r3, [pc, #36]	; (8006db8 <USBD_CDC_TransmitPacket+0x7c>)
 8006d94:	7819      	ldrb	r1, [r3, #0]
 8006d96:	68bb      	ldr	r3, [r7, #8]
 8006d98:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8006d9c:	68bb      	ldr	r3, [r7, #8]
 8006d9e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006da2:	6878      	ldr	r0, [r7, #4]
 8006da4:	f002 f81d 	bl	8008de2 <USBD_LL_Transmit>

    ret = USBD_OK;
 8006da8:	2300      	movs	r3, #0
 8006daa:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8006dac:	7bfb      	ldrb	r3, [r7, #15]
}
 8006dae:	4618      	mov	r0, r3
 8006db0:	3710      	adds	r7, #16
 8006db2:	46bd      	mov	sp, r7
 8006db4:	bd80      	pop	{r7, pc}
 8006db6:	bf00      	nop
 8006db8:	20000093 	.word	0x20000093

08006dbc <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006dbc:	b580      	push	{r7, lr}
 8006dbe:	b084      	sub	sp, #16
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	32b0      	adds	r2, #176	; 0xb0
 8006dce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006dd2:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	32b0      	adds	r2, #176	; 0xb0
 8006dde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d101      	bne.n	8006dea <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8006de6:	2303      	movs	r3, #3
 8006de8:	e018      	b.n	8006e1c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	7c1b      	ldrb	r3, [r3, #16]
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d10a      	bne.n	8006e08 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006df2:	4b0c      	ldr	r3, [pc, #48]	; (8006e24 <USBD_CDC_ReceivePacket+0x68>)
 8006df4:	7819      	ldrb	r1, [r3, #0]
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006dfc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006e00:	6878      	ldr	r0, [r7, #4]
 8006e02:	f002 f80f 	bl	8008e24 <USBD_LL_PrepareReceive>
 8006e06:	e008      	b.n	8006e1a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006e08:	4b06      	ldr	r3, [pc, #24]	; (8006e24 <USBD_CDC_ReceivePacket+0x68>)
 8006e0a:	7819      	ldrb	r1, [r3, #0]
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006e12:	2340      	movs	r3, #64	; 0x40
 8006e14:	6878      	ldr	r0, [r7, #4]
 8006e16:	f002 f805 	bl	8008e24 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006e1a:	2300      	movs	r3, #0
}
 8006e1c:	4618      	mov	r0, r3
 8006e1e:	3710      	adds	r7, #16
 8006e20:	46bd      	mov	sp, r7
 8006e22:	bd80      	pop	{r7, pc}
 8006e24:	20000094 	.word	0x20000094

08006e28 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006e28:	b580      	push	{r7, lr}
 8006e2a:	b086      	sub	sp, #24
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	60f8      	str	r0, [r7, #12]
 8006e30:	60b9      	str	r1, [r7, #8]
 8006e32:	4613      	mov	r3, r2
 8006e34:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d101      	bne.n	8006e40 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006e3c:	2303      	movs	r3, #3
 8006e3e:	e01f      	b.n	8006e80 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	2200      	movs	r2, #0
 8006e44:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	2200      	movs	r2, #0
 8006e4c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	2200      	movs	r2, #0
 8006e54:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006e58:	68bb      	ldr	r3, [r7, #8]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d003      	beq.n	8006e66 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	68ba      	ldr	r2, [r7, #8]
 8006e62:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	2201      	movs	r2, #1
 8006e6a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	79fa      	ldrb	r2, [r7, #7]
 8006e72:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006e74:	68f8      	ldr	r0, [r7, #12]
 8006e76:	f001 fe7f 	bl	8008b78 <USBD_LL_Init>
 8006e7a:	4603      	mov	r3, r0
 8006e7c:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006e7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e80:	4618      	mov	r0, r3
 8006e82:	3718      	adds	r7, #24
 8006e84:	46bd      	mov	sp, r7
 8006e86:	bd80      	pop	{r7, pc}

08006e88 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006e88:	b580      	push	{r7, lr}
 8006e8a:	b084      	sub	sp, #16
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	6078      	str	r0, [r7, #4]
 8006e90:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006e92:	2300      	movs	r3, #0
 8006e94:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006e96:	683b      	ldr	r3, [r7, #0]
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d101      	bne.n	8006ea0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006e9c:	2303      	movs	r3, #3
 8006e9e:	e025      	b.n	8006eec <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	683a      	ldr	r2, [r7, #0]
 8006ea4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	32ae      	adds	r2, #174	; 0xae
 8006eb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006eb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d00f      	beq.n	8006edc <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	32ae      	adds	r2, #174	; 0xae
 8006ec6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006eca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ecc:	f107 020e 	add.w	r2, r7, #14
 8006ed0:	4610      	mov	r0, r2
 8006ed2:	4798      	blx	r3
 8006ed4:	4602      	mov	r2, r0
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8006ee2:	1c5a      	adds	r2, r3, #1
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8006eea:	2300      	movs	r3, #0
}
 8006eec:	4618      	mov	r0, r3
 8006eee:	3710      	adds	r7, #16
 8006ef0:	46bd      	mov	sp, r7
 8006ef2:	bd80      	pop	{r7, pc}

08006ef4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006ef4:	b580      	push	{r7, lr}
 8006ef6:	b082      	sub	sp, #8
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006efc:	6878      	ldr	r0, [r7, #4]
 8006efe:	f001 fe87 	bl	8008c10 <USBD_LL_Start>
 8006f02:	4603      	mov	r3, r0
}
 8006f04:	4618      	mov	r0, r3
 8006f06:	3708      	adds	r7, #8
 8006f08:	46bd      	mov	sp, r7
 8006f0a:	bd80      	pop	{r7, pc}

08006f0c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8006f0c:	b480      	push	{r7}
 8006f0e:	b083      	sub	sp, #12
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006f14:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8006f16:	4618      	mov	r0, r3
 8006f18:	370c      	adds	r7, #12
 8006f1a:	46bd      	mov	sp, r7
 8006f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f20:	4770      	bx	lr

08006f22 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006f22:	b580      	push	{r7, lr}
 8006f24:	b084      	sub	sp, #16
 8006f26:	af00      	add	r7, sp, #0
 8006f28:	6078      	str	r0, [r7, #4]
 8006f2a:	460b      	mov	r3, r1
 8006f2c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006f2e:	2300      	movs	r3, #0
 8006f30:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d009      	beq.n	8006f50 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	78fa      	ldrb	r2, [r7, #3]
 8006f46:	4611      	mov	r1, r2
 8006f48:	6878      	ldr	r0, [r7, #4]
 8006f4a:	4798      	blx	r3
 8006f4c:	4603      	mov	r3, r0
 8006f4e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006f50:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f52:	4618      	mov	r0, r3
 8006f54:	3710      	adds	r7, #16
 8006f56:	46bd      	mov	sp, r7
 8006f58:	bd80      	pop	{r7, pc}

08006f5a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006f5a:	b580      	push	{r7, lr}
 8006f5c:	b084      	sub	sp, #16
 8006f5e:	af00      	add	r7, sp, #0
 8006f60:	6078      	str	r0, [r7, #4]
 8006f62:	460b      	mov	r3, r1
 8006f64:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006f66:	2300      	movs	r3, #0
 8006f68:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f70:	685b      	ldr	r3, [r3, #4]
 8006f72:	78fa      	ldrb	r2, [r7, #3]
 8006f74:	4611      	mov	r1, r2
 8006f76:	6878      	ldr	r0, [r7, #4]
 8006f78:	4798      	blx	r3
 8006f7a:	4603      	mov	r3, r0
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d001      	beq.n	8006f84 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8006f80:	2303      	movs	r3, #3
 8006f82:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006f84:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f86:	4618      	mov	r0, r3
 8006f88:	3710      	adds	r7, #16
 8006f8a:	46bd      	mov	sp, r7
 8006f8c:	bd80      	pop	{r7, pc}

08006f8e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006f8e:	b580      	push	{r7, lr}
 8006f90:	b084      	sub	sp, #16
 8006f92:	af00      	add	r7, sp, #0
 8006f94:	6078      	str	r0, [r7, #4]
 8006f96:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006f9e:	6839      	ldr	r1, [r7, #0]
 8006fa0:	4618      	mov	r0, r3
 8006fa2:	f001 f90e 	bl	80081c2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	2201      	movs	r2, #1
 8006faa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8006fb4:	461a      	mov	r2, r3
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006fc2:	f003 031f 	and.w	r3, r3, #31
 8006fc6:	2b02      	cmp	r3, #2
 8006fc8:	d01a      	beq.n	8007000 <USBD_LL_SetupStage+0x72>
 8006fca:	2b02      	cmp	r3, #2
 8006fcc:	d822      	bhi.n	8007014 <USBD_LL_SetupStage+0x86>
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d002      	beq.n	8006fd8 <USBD_LL_SetupStage+0x4a>
 8006fd2:	2b01      	cmp	r3, #1
 8006fd4:	d00a      	beq.n	8006fec <USBD_LL_SetupStage+0x5e>
 8006fd6:	e01d      	b.n	8007014 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006fde:	4619      	mov	r1, r3
 8006fe0:	6878      	ldr	r0, [r7, #4]
 8006fe2:	f000 fb65 	bl	80076b0 <USBD_StdDevReq>
 8006fe6:	4603      	mov	r3, r0
 8006fe8:	73fb      	strb	r3, [r7, #15]
      break;
 8006fea:	e020      	b.n	800702e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006ff2:	4619      	mov	r1, r3
 8006ff4:	6878      	ldr	r0, [r7, #4]
 8006ff6:	f000 fbcd 	bl	8007794 <USBD_StdItfReq>
 8006ffa:	4603      	mov	r3, r0
 8006ffc:	73fb      	strb	r3, [r7, #15]
      break;
 8006ffe:	e016      	b.n	800702e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007006:	4619      	mov	r1, r3
 8007008:	6878      	ldr	r0, [r7, #4]
 800700a:	f000 fc2f 	bl	800786c <USBD_StdEPReq>
 800700e:	4603      	mov	r3, r0
 8007010:	73fb      	strb	r3, [r7, #15]
      break;
 8007012:	e00c      	b.n	800702e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800701a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800701e:	b2db      	uxtb	r3, r3
 8007020:	4619      	mov	r1, r3
 8007022:	6878      	ldr	r0, [r7, #4]
 8007024:	f001 fe54 	bl	8008cd0 <USBD_LL_StallEP>
 8007028:	4603      	mov	r3, r0
 800702a:	73fb      	strb	r3, [r7, #15]
      break;
 800702c:	bf00      	nop
  }

  return ret;
 800702e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007030:	4618      	mov	r0, r3
 8007032:	3710      	adds	r7, #16
 8007034:	46bd      	mov	sp, r7
 8007036:	bd80      	pop	{r7, pc}

08007038 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007038:	b580      	push	{r7, lr}
 800703a:	b086      	sub	sp, #24
 800703c:	af00      	add	r7, sp, #0
 800703e:	60f8      	str	r0, [r7, #12]
 8007040:	460b      	mov	r3, r1
 8007042:	607a      	str	r2, [r7, #4]
 8007044:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8007046:	2300      	movs	r3, #0
 8007048:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800704a:	7afb      	ldrb	r3, [r7, #11]
 800704c:	2b00      	cmp	r3, #0
 800704e:	d16e      	bne.n	800712e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007056:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800705e:	2b03      	cmp	r3, #3
 8007060:	f040 8098 	bne.w	8007194 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8007064:	693b      	ldr	r3, [r7, #16]
 8007066:	689a      	ldr	r2, [r3, #8]
 8007068:	693b      	ldr	r3, [r7, #16]
 800706a:	68db      	ldr	r3, [r3, #12]
 800706c:	429a      	cmp	r2, r3
 800706e:	d913      	bls.n	8007098 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8007070:	693b      	ldr	r3, [r7, #16]
 8007072:	689a      	ldr	r2, [r3, #8]
 8007074:	693b      	ldr	r3, [r7, #16]
 8007076:	68db      	ldr	r3, [r3, #12]
 8007078:	1ad2      	subs	r2, r2, r3
 800707a:	693b      	ldr	r3, [r7, #16]
 800707c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800707e:	693b      	ldr	r3, [r7, #16]
 8007080:	68da      	ldr	r2, [r3, #12]
 8007082:	693b      	ldr	r3, [r7, #16]
 8007084:	689b      	ldr	r3, [r3, #8]
 8007086:	4293      	cmp	r3, r2
 8007088:	bf28      	it	cs
 800708a:	4613      	movcs	r3, r2
 800708c:	461a      	mov	r2, r3
 800708e:	6879      	ldr	r1, [r7, #4]
 8007090:	68f8      	ldr	r0, [r7, #12]
 8007092:	f001 f98a 	bl	80083aa <USBD_CtlContinueRx>
 8007096:	e07d      	b.n	8007194 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800709e:	f003 031f 	and.w	r3, r3, #31
 80070a2:	2b02      	cmp	r3, #2
 80070a4:	d014      	beq.n	80070d0 <USBD_LL_DataOutStage+0x98>
 80070a6:	2b02      	cmp	r3, #2
 80070a8:	d81d      	bhi.n	80070e6 <USBD_LL_DataOutStage+0xae>
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d002      	beq.n	80070b4 <USBD_LL_DataOutStage+0x7c>
 80070ae:	2b01      	cmp	r3, #1
 80070b0:	d003      	beq.n	80070ba <USBD_LL_DataOutStage+0x82>
 80070b2:	e018      	b.n	80070e6 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80070b4:	2300      	movs	r3, #0
 80070b6:	75bb      	strb	r3, [r7, #22]
            break;
 80070b8:	e018      	b.n	80070ec <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80070c0:	b2db      	uxtb	r3, r3
 80070c2:	4619      	mov	r1, r3
 80070c4:	68f8      	ldr	r0, [r7, #12]
 80070c6:	f000 fa64 	bl	8007592 <USBD_CoreFindIF>
 80070ca:	4603      	mov	r3, r0
 80070cc:	75bb      	strb	r3, [r7, #22]
            break;
 80070ce:	e00d      	b.n	80070ec <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80070d6:	b2db      	uxtb	r3, r3
 80070d8:	4619      	mov	r1, r3
 80070da:	68f8      	ldr	r0, [r7, #12]
 80070dc:	f000 fa66 	bl	80075ac <USBD_CoreFindEP>
 80070e0:	4603      	mov	r3, r0
 80070e2:	75bb      	strb	r3, [r7, #22]
            break;
 80070e4:	e002      	b.n	80070ec <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80070e6:	2300      	movs	r3, #0
 80070e8:	75bb      	strb	r3, [r7, #22]
            break;
 80070ea:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80070ec:	7dbb      	ldrb	r3, [r7, #22]
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d119      	bne.n	8007126 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80070f8:	b2db      	uxtb	r3, r3
 80070fa:	2b03      	cmp	r3, #3
 80070fc:	d113      	bne.n	8007126 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80070fe:	7dba      	ldrb	r2, [r7, #22]
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	32ae      	adds	r2, #174	; 0xae
 8007104:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007108:	691b      	ldr	r3, [r3, #16]
 800710a:	2b00      	cmp	r3, #0
 800710c:	d00b      	beq.n	8007126 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800710e:	7dba      	ldrb	r2, [r7, #22]
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8007116:	7dba      	ldrb	r2, [r7, #22]
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	32ae      	adds	r2, #174	; 0xae
 800711c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007120:	691b      	ldr	r3, [r3, #16]
 8007122:	68f8      	ldr	r0, [r7, #12]
 8007124:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007126:	68f8      	ldr	r0, [r7, #12]
 8007128:	f001 f950 	bl	80083cc <USBD_CtlSendStatus>
 800712c:	e032      	b.n	8007194 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800712e:	7afb      	ldrb	r3, [r7, #11]
 8007130:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007134:	b2db      	uxtb	r3, r3
 8007136:	4619      	mov	r1, r3
 8007138:	68f8      	ldr	r0, [r7, #12]
 800713a:	f000 fa37 	bl	80075ac <USBD_CoreFindEP>
 800713e:	4603      	mov	r3, r0
 8007140:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007142:	7dbb      	ldrb	r3, [r7, #22]
 8007144:	2bff      	cmp	r3, #255	; 0xff
 8007146:	d025      	beq.n	8007194 <USBD_LL_DataOutStage+0x15c>
 8007148:	7dbb      	ldrb	r3, [r7, #22]
 800714a:	2b00      	cmp	r3, #0
 800714c:	d122      	bne.n	8007194 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007154:	b2db      	uxtb	r3, r3
 8007156:	2b03      	cmp	r3, #3
 8007158:	d117      	bne.n	800718a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800715a:	7dba      	ldrb	r2, [r7, #22]
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	32ae      	adds	r2, #174	; 0xae
 8007160:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007164:	699b      	ldr	r3, [r3, #24]
 8007166:	2b00      	cmp	r3, #0
 8007168:	d00f      	beq.n	800718a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800716a:	7dba      	ldrb	r2, [r7, #22]
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8007172:	7dba      	ldrb	r2, [r7, #22]
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	32ae      	adds	r2, #174	; 0xae
 8007178:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800717c:	699b      	ldr	r3, [r3, #24]
 800717e:	7afa      	ldrb	r2, [r7, #11]
 8007180:	4611      	mov	r1, r2
 8007182:	68f8      	ldr	r0, [r7, #12]
 8007184:	4798      	blx	r3
 8007186:	4603      	mov	r3, r0
 8007188:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800718a:	7dfb      	ldrb	r3, [r7, #23]
 800718c:	2b00      	cmp	r3, #0
 800718e:	d001      	beq.n	8007194 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8007190:	7dfb      	ldrb	r3, [r7, #23]
 8007192:	e000      	b.n	8007196 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8007194:	2300      	movs	r3, #0
}
 8007196:	4618      	mov	r0, r3
 8007198:	3718      	adds	r7, #24
 800719a:	46bd      	mov	sp, r7
 800719c:	bd80      	pop	{r7, pc}

0800719e <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800719e:	b580      	push	{r7, lr}
 80071a0:	b086      	sub	sp, #24
 80071a2:	af00      	add	r7, sp, #0
 80071a4:	60f8      	str	r0, [r7, #12]
 80071a6:	460b      	mov	r3, r1
 80071a8:	607a      	str	r2, [r7, #4]
 80071aa:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80071ac:	7afb      	ldrb	r3, [r7, #11]
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d16f      	bne.n	8007292 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	3314      	adds	r3, #20
 80071b6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80071be:	2b02      	cmp	r3, #2
 80071c0:	d15a      	bne.n	8007278 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80071c2:	693b      	ldr	r3, [r7, #16]
 80071c4:	689a      	ldr	r2, [r3, #8]
 80071c6:	693b      	ldr	r3, [r7, #16]
 80071c8:	68db      	ldr	r3, [r3, #12]
 80071ca:	429a      	cmp	r2, r3
 80071cc:	d914      	bls.n	80071f8 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80071ce:	693b      	ldr	r3, [r7, #16]
 80071d0:	689a      	ldr	r2, [r3, #8]
 80071d2:	693b      	ldr	r3, [r7, #16]
 80071d4:	68db      	ldr	r3, [r3, #12]
 80071d6:	1ad2      	subs	r2, r2, r3
 80071d8:	693b      	ldr	r3, [r7, #16]
 80071da:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80071dc:	693b      	ldr	r3, [r7, #16]
 80071de:	689b      	ldr	r3, [r3, #8]
 80071e0:	461a      	mov	r2, r3
 80071e2:	6879      	ldr	r1, [r7, #4]
 80071e4:	68f8      	ldr	r0, [r7, #12]
 80071e6:	f001 f8b2 	bl	800834e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80071ea:	2300      	movs	r3, #0
 80071ec:	2200      	movs	r2, #0
 80071ee:	2100      	movs	r1, #0
 80071f0:	68f8      	ldr	r0, [r7, #12]
 80071f2:	f001 fe17 	bl	8008e24 <USBD_LL_PrepareReceive>
 80071f6:	e03f      	b.n	8007278 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80071f8:	693b      	ldr	r3, [r7, #16]
 80071fa:	68da      	ldr	r2, [r3, #12]
 80071fc:	693b      	ldr	r3, [r7, #16]
 80071fe:	689b      	ldr	r3, [r3, #8]
 8007200:	429a      	cmp	r2, r3
 8007202:	d11c      	bne.n	800723e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007204:	693b      	ldr	r3, [r7, #16]
 8007206:	685a      	ldr	r2, [r3, #4]
 8007208:	693b      	ldr	r3, [r7, #16]
 800720a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800720c:	429a      	cmp	r2, r3
 800720e:	d316      	bcc.n	800723e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007210:	693b      	ldr	r3, [r7, #16]
 8007212:	685a      	ldr	r2, [r3, #4]
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800721a:	429a      	cmp	r2, r3
 800721c:	d20f      	bcs.n	800723e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800721e:	2200      	movs	r2, #0
 8007220:	2100      	movs	r1, #0
 8007222:	68f8      	ldr	r0, [r7, #12]
 8007224:	f001 f893 	bl	800834e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	2200      	movs	r2, #0
 800722c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007230:	2300      	movs	r3, #0
 8007232:	2200      	movs	r2, #0
 8007234:	2100      	movs	r1, #0
 8007236:	68f8      	ldr	r0, [r7, #12]
 8007238:	f001 fdf4 	bl	8008e24 <USBD_LL_PrepareReceive>
 800723c:	e01c      	b.n	8007278 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007244:	b2db      	uxtb	r3, r3
 8007246:	2b03      	cmp	r3, #3
 8007248:	d10f      	bne.n	800726a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007250:	68db      	ldr	r3, [r3, #12]
 8007252:	2b00      	cmp	r3, #0
 8007254:	d009      	beq.n	800726a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	2200      	movs	r2, #0
 800725a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007264:	68db      	ldr	r3, [r3, #12]
 8007266:	68f8      	ldr	r0, [r7, #12]
 8007268:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800726a:	2180      	movs	r1, #128	; 0x80
 800726c:	68f8      	ldr	r0, [r7, #12]
 800726e:	f001 fd2f 	bl	8008cd0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007272:	68f8      	ldr	r0, [r7, #12]
 8007274:	f001 f8bd 	bl	80083f2 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800727e:	2b00      	cmp	r3, #0
 8007280:	d03a      	beq.n	80072f8 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8007282:	68f8      	ldr	r0, [r7, #12]
 8007284:	f7ff fe42 	bl	8006f0c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	2200      	movs	r2, #0
 800728c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007290:	e032      	b.n	80072f8 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8007292:	7afb      	ldrb	r3, [r7, #11]
 8007294:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007298:	b2db      	uxtb	r3, r3
 800729a:	4619      	mov	r1, r3
 800729c:	68f8      	ldr	r0, [r7, #12]
 800729e:	f000 f985 	bl	80075ac <USBD_CoreFindEP>
 80072a2:	4603      	mov	r3, r0
 80072a4:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80072a6:	7dfb      	ldrb	r3, [r7, #23]
 80072a8:	2bff      	cmp	r3, #255	; 0xff
 80072aa:	d025      	beq.n	80072f8 <USBD_LL_DataInStage+0x15a>
 80072ac:	7dfb      	ldrb	r3, [r7, #23]
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d122      	bne.n	80072f8 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80072b8:	b2db      	uxtb	r3, r3
 80072ba:	2b03      	cmp	r3, #3
 80072bc:	d11c      	bne.n	80072f8 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80072be:	7dfa      	ldrb	r2, [r7, #23]
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	32ae      	adds	r2, #174	; 0xae
 80072c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072c8:	695b      	ldr	r3, [r3, #20]
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d014      	beq.n	80072f8 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80072ce:	7dfa      	ldrb	r2, [r7, #23]
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80072d6:	7dfa      	ldrb	r2, [r7, #23]
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	32ae      	adds	r2, #174	; 0xae
 80072dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072e0:	695b      	ldr	r3, [r3, #20]
 80072e2:	7afa      	ldrb	r2, [r7, #11]
 80072e4:	4611      	mov	r1, r2
 80072e6:	68f8      	ldr	r0, [r7, #12]
 80072e8:	4798      	blx	r3
 80072ea:	4603      	mov	r3, r0
 80072ec:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80072ee:	7dbb      	ldrb	r3, [r7, #22]
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d001      	beq.n	80072f8 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80072f4:	7dbb      	ldrb	r3, [r7, #22]
 80072f6:	e000      	b.n	80072fa <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80072f8:	2300      	movs	r3, #0
}
 80072fa:	4618      	mov	r0, r3
 80072fc:	3718      	adds	r7, #24
 80072fe:	46bd      	mov	sp, r7
 8007300:	bd80      	pop	{r7, pc}

08007302 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007302:	b580      	push	{r7, lr}
 8007304:	b084      	sub	sp, #16
 8007306:	af00      	add	r7, sp, #0
 8007308:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800730a:	2300      	movs	r3, #0
 800730c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	2201      	movs	r2, #1
 8007312:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	2200      	movs	r2, #0
 800731a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	2200      	movs	r2, #0
 8007322:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	2200      	movs	r2, #0
 8007328:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	2200      	movs	r2, #0
 8007330:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800733a:	2b00      	cmp	r3, #0
 800733c:	d014      	beq.n	8007368 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007344:	685b      	ldr	r3, [r3, #4]
 8007346:	2b00      	cmp	r3, #0
 8007348:	d00e      	beq.n	8007368 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007350:	685b      	ldr	r3, [r3, #4]
 8007352:	687a      	ldr	r2, [r7, #4]
 8007354:	6852      	ldr	r2, [r2, #4]
 8007356:	b2d2      	uxtb	r2, r2
 8007358:	4611      	mov	r1, r2
 800735a:	6878      	ldr	r0, [r7, #4]
 800735c:	4798      	blx	r3
 800735e:	4603      	mov	r3, r0
 8007360:	2b00      	cmp	r3, #0
 8007362:	d001      	beq.n	8007368 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8007364:	2303      	movs	r3, #3
 8007366:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007368:	2340      	movs	r3, #64	; 0x40
 800736a:	2200      	movs	r2, #0
 800736c:	2100      	movs	r1, #0
 800736e:	6878      	ldr	r0, [r7, #4]
 8007370:	f001 fc69 	bl	8008c46 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	2201      	movs	r2, #1
 8007378:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	2240      	movs	r2, #64	; 0x40
 8007380:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007384:	2340      	movs	r3, #64	; 0x40
 8007386:	2200      	movs	r2, #0
 8007388:	2180      	movs	r1, #128	; 0x80
 800738a:	6878      	ldr	r0, [r7, #4]
 800738c:	f001 fc5b 	bl	8008c46 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	2201      	movs	r2, #1
 8007394:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	2240      	movs	r2, #64	; 0x40
 800739a:	621a      	str	r2, [r3, #32]

  return ret;
 800739c:	7bfb      	ldrb	r3, [r7, #15]
}
 800739e:	4618      	mov	r0, r3
 80073a0:	3710      	adds	r7, #16
 80073a2:	46bd      	mov	sp, r7
 80073a4:	bd80      	pop	{r7, pc}

080073a6 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80073a6:	b480      	push	{r7}
 80073a8:	b083      	sub	sp, #12
 80073aa:	af00      	add	r7, sp, #0
 80073ac:	6078      	str	r0, [r7, #4]
 80073ae:	460b      	mov	r3, r1
 80073b0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	78fa      	ldrb	r2, [r7, #3]
 80073b6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80073b8:	2300      	movs	r3, #0
}
 80073ba:	4618      	mov	r0, r3
 80073bc:	370c      	adds	r7, #12
 80073be:	46bd      	mov	sp, r7
 80073c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c4:	4770      	bx	lr

080073c6 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80073c6:	b480      	push	{r7}
 80073c8:	b083      	sub	sp, #12
 80073ca:	af00      	add	r7, sp, #0
 80073cc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80073d4:	b2db      	uxtb	r3, r3
 80073d6:	2b04      	cmp	r3, #4
 80073d8:	d006      	beq.n	80073e8 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80073e0:	b2da      	uxtb	r2, r3
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	2204      	movs	r2, #4
 80073ec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80073f0:	2300      	movs	r3, #0
}
 80073f2:	4618      	mov	r0, r3
 80073f4:	370c      	adds	r7, #12
 80073f6:	46bd      	mov	sp, r7
 80073f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fc:	4770      	bx	lr

080073fe <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80073fe:	b480      	push	{r7}
 8007400:	b083      	sub	sp, #12
 8007402:	af00      	add	r7, sp, #0
 8007404:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800740c:	b2db      	uxtb	r3, r3
 800740e:	2b04      	cmp	r3, #4
 8007410:	d106      	bne.n	8007420 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8007418:	b2da      	uxtb	r2, r3
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007420:	2300      	movs	r3, #0
}
 8007422:	4618      	mov	r0, r3
 8007424:	370c      	adds	r7, #12
 8007426:	46bd      	mov	sp, r7
 8007428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742c:	4770      	bx	lr

0800742e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800742e:	b580      	push	{r7, lr}
 8007430:	b082      	sub	sp, #8
 8007432:	af00      	add	r7, sp, #0
 8007434:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800743c:	b2db      	uxtb	r3, r3
 800743e:	2b03      	cmp	r3, #3
 8007440:	d110      	bne.n	8007464 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007448:	2b00      	cmp	r3, #0
 800744a:	d00b      	beq.n	8007464 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007452:	69db      	ldr	r3, [r3, #28]
 8007454:	2b00      	cmp	r3, #0
 8007456:	d005      	beq.n	8007464 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800745e:	69db      	ldr	r3, [r3, #28]
 8007460:	6878      	ldr	r0, [r7, #4]
 8007462:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8007464:	2300      	movs	r3, #0
}
 8007466:	4618      	mov	r0, r3
 8007468:	3708      	adds	r7, #8
 800746a:	46bd      	mov	sp, r7
 800746c:	bd80      	pop	{r7, pc}

0800746e <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800746e:	b580      	push	{r7, lr}
 8007470:	b082      	sub	sp, #8
 8007472:	af00      	add	r7, sp, #0
 8007474:	6078      	str	r0, [r7, #4]
 8007476:	460b      	mov	r3, r1
 8007478:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	32ae      	adds	r2, #174	; 0xae
 8007484:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007488:	2b00      	cmp	r3, #0
 800748a:	d101      	bne.n	8007490 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800748c:	2303      	movs	r3, #3
 800748e:	e01c      	b.n	80074ca <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007496:	b2db      	uxtb	r3, r3
 8007498:	2b03      	cmp	r3, #3
 800749a:	d115      	bne.n	80074c8 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	32ae      	adds	r2, #174	; 0xae
 80074a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074aa:	6a1b      	ldr	r3, [r3, #32]
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d00b      	beq.n	80074c8 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	32ae      	adds	r2, #174	; 0xae
 80074ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074be:	6a1b      	ldr	r3, [r3, #32]
 80074c0:	78fa      	ldrb	r2, [r7, #3]
 80074c2:	4611      	mov	r1, r2
 80074c4:	6878      	ldr	r0, [r7, #4]
 80074c6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80074c8:	2300      	movs	r3, #0
}
 80074ca:	4618      	mov	r0, r3
 80074cc:	3708      	adds	r7, #8
 80074ce:	46bd      	mov	sp, r7
 80074d0:	bd80      	pop	{r7, pc}

080074d2 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80074d2:	b580      	push	{r7, lr}
 80074d4:	b082      	sub	sp, #8
 80074d6:	af00      	add	r7, sp, #0
 80074d8:	6078      	str	r0, [r7, #4]
 80074da:	460b      	mov	r3, r1
 80074dc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	32ae      	adds	r2, #174	; 0xae
 80074e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d101      	bne.n	80074f4 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80074f0:	2303      	movs	r3, #3
 80074f2:	e01c      	b.n	800752e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80074fa:	b2db      	uxtb	r3, r3
 80074fc:	2b03      	cmp	r3, #3
 80074fe:	d115      	bne.n	800752c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	32ae      	adds	r2, #174	; 0xae
 800750a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800750e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007510:	2b00      	cmp	r3, #0
 8007512:	d00b      	beq.n	800752c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	32ae      	adds	r2, #174	; 0xae
 800751e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007524:	78fa      	ldrb	r2, [r7, #3]
 8007526:	4611      	mov	r1, r2
 8007528:	6878      	ldr	r0, [r7, #4]
 800752a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800752c:	2300      	movs	r3, #0
}
 800752e:	4618      	mov	r0, r3
 8007530:	3708      	adds	r7, #8
 8007532:	46bd      	mov	sp, r7
 8007534:	bd80      	pop	{r7, pc}

08007536 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007536:	b480      	push	{r7}
 8007538:	b083      	sub	sp, #12
 800753a:	af00      	add	r7, sp, #0
 800753c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800753e:	2300      	movs	r3, #0
}
 8007540:	4618      	mov	r0, r3
 8007542:	370c      	adds	r7, #12
 8007544:	46bd      	mov	sp, r7
 8007546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754a:	4770      	bx	lr

0800754c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800754c:	b580      	push	{r7, lr}
 800754e:	b084      	sub	sp, #16
 8007550:	af00      	add	r7, sp, #0
 8007552:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8007554:	2300      	movs	r3, #0
 8007556:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	2201      	movs	r2, #1
 800755c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007566:	2b00      	cmp	r3, #0
 8007568:	d00e      	beq.n	8007588 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007570:	685b      	ldr	r3, [r3, #4]
 8007572:	687a      	ldr	r2, [r7, #4]
 8007574:	6852      	ldr	r2, [r2, #4]
 8007576:	b2d2      	uxtb	r2, r2
 8007578:	4611      	mov	r1, r2
 800757a:	6878      	ldr	r0, [r7, #4]
 800757c:	4798      	blx	r3
 800757e:	4603      	mov	r3, r0
 8007580:	2b00      	cmp	r3, #0
 8007582:	d001      	beq.n	8007588 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8007584:	2303      	movs	r3, #3
 8007586:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007588:	7bfb      	ldrb	r3, [r7, #15]
}
 800758a:	4618      	mov	r0, r3
 800758c:	3710      	adds	r7, #16
 800758e:	46bd      	mov	sp, r7
 8007590:	bd80      	pop	{r7, pc}

08007592 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007592:	b480      	push	{r7}
 8007594:	b083      	sub	sp, #12
 8007596:	af00      	add	r7, sp, #0
 8007598:	6078      	str	r0, [r7, #4]
 800759a:	460b      	mov	r3, r1
 800759c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800759e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80075a0:	4618      	mov	r0, r3
 80075a2:	370c      	adds	r7, #12
 80075a4:	46bd      	mov	sp, r7
 80075a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075aa:	4770      	bx	lr

080075ac <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80075ac:	b480      	push	{r7}
 80075ae:	b083      	sub	sp, #12
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	6078      	str	r0, [r7, #4]
 80075b4:	460b      	mov	r3, r1
 80075b6:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80075b8:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80075ba:	4618      	mov	r0, r3
 80075bc:	370c      	adds	r7, #12
 80075be:	46bd      	mov	sp, r7
 80075c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c4:	4770      	bx	lr

080075c6 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80075c6:	b580      	push	{r7, lr}
 80075c8:	b086      	sub	sp, #24
 80075ca:	af00      	add	r7, sp, #0
 80075cc:	6078      	str	r0, [r7, #4]
 80075ce:	460b      	mov	r3, r1
 80075d0:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80075da:	2300      	movs	r3, #0
 80075dc:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	885b      	ldrh	r3, [r3, #2]
 80075e2:	b29a      	uxth	r2, r3
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	781b      	ldrb	r3, [r3, #0]
 80075e8:	b29b      	uxth	r3, r3
 80075ea:	429a      	cmp	r2, r3
 80075ec:	d920      	bls.n	8007630 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	781b      	ldrb	r3, [r3, #0]
 80075f2:	b29b      	uxth	r3, r3
 80075f4:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80075f6:	e013      	b.n	8007620 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80075f8:	f107 030a 	add.w	r3, r7, #10
 80075fc:	4619      	mov	r1, r3
 80075fe:	6978      	ldr	r0, [r7, #20]
 8007600:	f000 f81b 	bl	800763a <USBD_GetNextDesc>
 8007604:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007606:	697b      	ldr	r3, [r7, #20]
 8007608:	785b      	ldrb	r3, [r3, #1]
 800760a:	2b05      	cmp	r3, #5
 800760c:	d108      	bne.n	8007620 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800760e:	697b      	ldr	r3, [r7, #20]
 8007610:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8007612:	693b      	ldr	r3, [r7, #16]
 8007614:	789b      	ldrb	r3, [r3, #2]
 8007616:	78fa      	ldrb	r2, [r7, #3]
 8007618:	429a      	cmp	r2, r3
 800761a:	d008      	beq.n	800762e <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800761c:	2300      	movs	r3, #0
 800761e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	885b      	ldrh	r3, [r3, #2]
 8007624:	b29a      	uxth	r2, r3
 8007626:	897b      	ldrh	r3, [r7, #10]
 8007628:	429a      	cmp	r2, r3
 800762a:	d8e5      	bhi.n	80075f8 <USBD_GetEpDesc+0x32>
 800762c:	e000      	b.n	8007630 <USBD_GetEpDesc+0x6a>
          break;
 800762e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8007630:	693b      	ldr	r3, [r7, #16]
}
 8007632:	4618      	mov	r0, r3
 8007634:	3718      	adds	r7, #24
 8007636:	46bd      	mov	sp, r7
 8007638:	bd80      	pop	{r7, pc}

0800763a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800763a:	b480      	push	{r7}
 800763c:	b085      	sub	sp, #20
 800763e:	af00      	add	r7, sp, #0
 8007640:	6078      	str	r0, [r7, #4]
 8007642:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8007648:	683b      	ldr	r3, [r7, #0]
 800764a:	881a      	ldrh	r2, [r3, #0]
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	781b      	ldrb	r3, [r3, #0]
 8007650:	b29b      	uxth	r3, r3
 8007652:	4413      	add	r3, r2
 8007654:	b29a      	uxth	r2, r3
 8007656:	683b      	ldr	r3, [r7, #0]
 8007658:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	781b      	ldrb	r3, [r3, #0]
 800765e:	461a      	mov	r2, r3
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	4413      	add	r3, r2
 8007664:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007666:	68fb      	ldr	r3, [r7, #12]
}
 8007668:	4618      	mov	r0, r3
 800766a:	3714      	adds	r7, #20
 800766c:	46bd      	mov	sp, r7
 800766e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007672:	4770      	bx	lr

08007674 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007674:	b480      	push	{r7}
 8007676:	b087      	sub	sp, #28
 8007678:	af00      	add	r7, sp, #0
 800767a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007680:	697b      	ldr	r3, [r7, #20]
 8007682:	781b      	ldrb	r3, [r3, #0]
 8007684:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007686:	697b      	ldr	r3, [r7, #20]
 8007688:	3301      	adds	r3, #1
 800768a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800768c:	697b      	ldr	r3, [r7, #20]
 800768e:	781b      	ldrb	r3, [r3, #0]
 8007690:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007692:	8a3b      	ldrh	r3, [r7, #16]
 8007694:	021b      	lsls	r3, r3, #8
 8007696:	b21a      	sxth	r2, r3
 8007698:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800769c:	4313      	orrs	r3, r2
 800769e:	b21b      	sxth	r3, r3
 80076a0:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80076a2:	89fb      	ldrh	r3, [r7, #14]
}
 80076a4:	4618      	mov	r0, r3
 80076a6:	371c      	adds	r7, #28
 80076a8:	46bd      	mov	sp, r7
 80076aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ae:	4770      	bx	lr

080076b0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80076b0:	b580      	push	{r7, lr}
 80076b2:	b084      	sub	sp, #16
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	6078      	str	r0, [r7, #4]
 80076b8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80076ba:	2300      	movs	r3, #0
 80076bc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80076be:	683b      	ldr	r3, [r7, #0]
 80076c0:	781b      	ldrb	r3, [r3, #0]
 80076c2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80076c6:	2b40      	cmp	r3, #64	; 0x40
 80076c8:	d005      	beq.n	80076d6 <USBD_StdDevReq+0x26>
 80076ca:	2b40      	cmp	r3, #64	; 0x40
 80076cc:	d857      	bhi.n	800777e <USBD_StdDevReq+0xce>
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d00f      	beq.n	80076f2 <USBD_StdDevReq+0x42>
 80076d2:	2b20      	cmp	r3, #32
 80076d4:	d153      	bne.n	800777e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	32ae      	adds	r2, #174	; 0xae
 80076e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076e4:	689b      	ldr	r3, [r3, #8]
 80076e6:	6839      	ldr	r1, [r7, #0]
 80076e8:	6878      	ldr	r0, [r7, #4]
 80076ea:	4798      	blx	r3
 80076ec:	4603      	mov	r3, r0
 80076ee:	73fb      	strb	r3, [r7, #15]
      break;
 80076f0:	e04a      	b.n	8007788 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80076f2:	683b      	ldr	r3, [r7, #0]
 80076f4:	785b      	ldrb	r3, [r3, #1]
 80076f6:	2b09      	cmp	r3, #9
 80076f8:	d83b      	bhi.n	8007772 <USBD_StdDevReq+0xc2>
 80076fa:	a201      	add	r2, pc, #4	; (adr r2, 8007700 <USBD_StdDevReq+0x50>)
 80076fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007700:	08007755 	.word	0x08007755
 8007704:	08007769 	.word	0x08007769
 8007708:	08007773 	.word	0x08007773
 800770c:	0800775f 	.word	0x0800775f
 8007710:	08007773 	.word	0x08007773
 8007714:	08007733 	.word	0x08007733
 8007718:	08007729 	.word	0x08007729
 800771c:	08007773 	.word	0x08007773
 8007720:	0800774b 	.word	0x0800774b
 8007724:	0800773d 	.word	0x0800773d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007728:	6839      	ldr	r1, [r7, #0]
 800772a:	6878      	ldr	r0, [r7, #4]
 800772c:	f000 fa3c 	bl	8007ba8 <USBD_GetDescriptor>
          break;
 8007730:	e024      	b.n	800777c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007732:	6839      	ldr	r1, [r7, #0]
 8007734:	6878      	ldr	r0, [r7, #4]
 8007736:	f000 fba1 	bl	8007e7c <USBD_SetAddress>
          break;
 800773a:	e01f      	b.n	800777c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800773c:	6839      	ldr	r1, [r7, #0]
 800773e:	6878      	ldr	r0, [r7, #4]
 8007740:	f000 fbe0 	bl	8007f04 <USBD_SetConfig>
 8007744:	4603      	mov	r3, r0
 8007746:	73fb      	strb	r3, [r7, #15]
          break;
 8007748:	e018      	b.n	800777c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800774a:	6839      	ldr	r1, [r7, #0]
 800774c:	6878      	ldr	r0, [r7, #4]
 800774e:	f000 fc83 	bl	8008058 <USBD_GetConfig>
          break;
 8007752:	e013      	b.n	800777c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007754:	6839      	ldr	r1, [r7, #0]
 8007756:	6878      	ldr	r0, [r7, #4]
 8007758:	f000 fcb4 	bl	80080c4 <USBD_GetStatus>
          break;
 800775c:	e00e      	b.n	800777c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800775e:	6839      	ldr	r1, [r7, #0]
 8007760:	6878      	ldr	r0, [r7, #4]
 8007762:	f000 fce3 	bl	800812c <USBD_SetFeature>
          break;
 8007766:	e009      	b.n	800777c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007768:	6839      	ldr	r1, [r7, #0]
 800776a:	6878      	ldr	r0, [r7, #4]
 800776c:	f000 fd07 	bl	800817e <USBD_ClrFeature>
          break;
 8007770:	e004      	b.n	800777c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8007772:	6839      	ldr	r1, [r7, #0]
 8007774:	6878      	ldr	r0, [r7, #4]
 8007776:	f000 fd5e 	bl	8008236 <USBD_CtlError>
          break;
 800777a:	bf00      	nop
      }
      break;
 800777c:	e004      	b.n	8007788 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800777e:	6839      	ldr	r1, [r7, #0]
 8007780:	6878      	ldr	r0, [r7, #4]
 8007782:	f000 fd58 	bl	8008236 <USBD_CtlError>
      break;
 8007786:	bf00      	nop
  }

  return ret;
 8007788:	7bfb      	ldrb	r3, [r7, #15]
}
 800778a:	4618      	mov	r0, r3
 800778c:	3710      	adds	r7, #16
 800778e:	46bd      	mov	sp, r7
 8007790:	bd80      	pop	{r7, pc}
 8007792:	bf00      	nop

08007794 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007794:	b580      	push	{r7, lr}
 8007796:	b084      	sub	sp, #16
 8007798:	af00      	add	r7, sp, #0
 800779a:	6078      	str	r0, [r7, #4]
 800779c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800779e:	2300      	movs	r3, #0
 80077a0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80077a2:	683b      	ldr	r3, [r7, #0]
 80077a4:	781b      	ldrb	r3, [r3, #0]
 80077a6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80077aa:	2b40      	cmp	r3, #64	; 0x40
 80077ac:	d005      	beq.n	80077ba <USBD_StdItfReq+0x26>
 80077ae:	2b40      	cmp	r3, #64	; 0x40
 80077b0:	d852      	bhi.n	8007858 <USBD_StdItfReq+0xc4>
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d001      	beq.n	80077ba <USBD_StdItfReq+0x26>
 80077b6:	2b20      	cmp	r3, #32
 80077b8:	d14e      	bne.n	8007858 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80077c0:	b2db      	uxtb	r3, r3
 80077c2:	3b01      	subs	r3, #1
 80077c4:	2b02      	cmp	r3, #2
 80077c6:	d840      	bhi.n	800784a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80077c8:	683b      	ldr	r3, [r7, #0]
 80077ca:	889b      	ldrh	r3, [r3, #4]
 80077cc:	b2db      	uxtb	r3, r3
 80077ce:	2b01      	cmp	r3, #1
 80077d0:	d836      	bhi.n	8007840 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80077d2:	683b      	ldr	r3, [r7, #0]
 80077d4:	889b      	ldrh	r3, [r3, #4]
 80077d6:	b2db      	uxtb	r3, r3
 80077d8:	4619      	mov	r1, r3
 80077da:	6878      	ldr	r0, [r7, #4]
 80077dc:	f7ff fed9 	bl	8007592 <USBD_CoreFindIF>
 80077e0:	4603      	mov	r3, r0
 80077e2:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80077e4:	7bbb      	ldrb	r3, [r7, #14]
 80077e6:	2bff      	cmp	r3, #255	; 0xff
 80077e8:	d01d      	beq.n	8007826 <USBD_StdItfReq+0x92>
 80077ea:	7bbb      	ldrb	r3, [r7, #14]
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d11a      	bne.n	8007826 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80077f0:	7bba      	ldrb	r2, [r7, #14]
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	32ae      	adds	r2, #174	; 0xae
 80077f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077fa:	689b      	ldr	r3, [r3, #8]
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d00f      	beq.n	8007820 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8007800:	7bba      	ldrb	r2, [r7, #14]
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007808:	7bba      	ldrb	r2, [r7, #14]
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	32ae      	adds	r2, #174	; 0xae
 800780e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007812:	689b      	ldr	r3, [r3, #8]
 8007814:	6839      	ldr	r1, [r7, #0]
 8007816:	6878      	ldr	r0, [r7, #4]
 8007818:	4798      	blx	r3
 800781a:	4603      	mov	r3, r0
 800781c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800781e:	e004      	b.n	800782a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8007820:	2303      	movs	r3, #3
 8007822:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007824:	e001      	b.n	800782a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8007826:	2303      	movs	r3, #3
 8007828:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800782a:	683b      	ldr	r3, [r7, #0]
 800782c:	88db      	ldrh	r3, [r3, #6]
 800782e:	2b00      	cmp	r3, #0
 8007830:	d110      	bne.n	8007854 <USBD_StdItfReq+0xc0>
 8007832:	7bfb      	ldrb	r3, [r7, #15]
 8007834:	2b00      	cmp	r3, #0
 8007836:	d10d      	bne.n	8007854 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007838:	6878      	ldr	r0, [r7, #4]
 800783a:	f000 fdc7 	bl	80083cc <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800783e:	e009      	b.n	8007854 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8007840:	6839      	ldr	r1, [r7, #0]
 8007842:	6878      	ldr	r0, [r7, #4]
 8007844:	f000 fcf7 	bl	8008236 <USBD_CtlError>
          break;
 8007848:	e004      	b.n	8007854 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800784a:	6839      	ldr	r1, [r7, #0]
 800784c:	6878      	ldr	r0, [r7, #4]
 800784e:	f000 fcf2 	bl	8008236 <USBD_CtlError>
          break;
 8007852:	e000      	b.n	8007856 <USBD_StdItfReq+0xc2>
          break;
 8007854:	bf00      	nop
      }
      break;
 8007856:	e004      	b.n	8007862 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8007858:	6839      	ldr	r1, [r7, #0]
 800785a:	6878      	ldr	r0, [r7, #4]
 800785c:	f000 fceb 	bl	8008236 <USBD_CtlError>
      break;
 8007860:	bf00      	nop
  }

  return ret;
 8007862:	7bfb      	ldrb	r3, [r7, #15]
}
 8007864:	4618      	mov	r0, r3
 8007866:	3710      	adds	r7, #16
 8007868:	46bd      	mov	sp, r7
 800786a:	bd80      	pop	{r7, pc}

0800786c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800786c:	b580      	push	{r7, lr}
 800786e:	b084      	sub	sp, #16
 8007870:	af00      	add	r7, sp, #0
 8007872:	6078      	str	r0, [r7, #4]
 8007874:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8007876:	2300      	movs	r3, #0
 8007878:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800787a:	683b      	ldr	r3, [r7, #0]
 800787c:	889b      	ldrh	r3, [r3, #4]
 800787e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007880:	683b      	ldr	r3, [r7, #0]
 8007882:	781b      	ldrb	r3, [r3, #0]
 8007884:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007888:	2b40      	cmp	r3, #64	; 0x40
 800788a:	d007      	beq.n	800789c <USBD_StdEPReq+0x30>
 800788c:	2b40      	cmp	r3, #64	; 0x40
 800788e:	f200 817f 	bhi.w	8007b90 <USBD_StdEPReq+0x324>
 8007892:	2b00      	cmp	r3, #0
 8007894:	d02a      	beq.n	80078ec <USBD_StdEPReq+0x80>
 8007896:	2b20      	cmp	r3, #32
 8007898:	f040 817a 	bne.w	8007b90 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800789c:	7bbb      	ldrb	r3, [r7, #14]
 800789e:	4619      	mov	r1, r3
 80078a0:	6878      	ldr	r0, [r7, #4]
 80078a2:	f7ff fe83 	bl	80075ac <USBD_CoreFindEP>
 80078a6:	4603      	mov	r3, r0
 80078a8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80078aa:	7b7b      	ldrb	r3, [r7, #13]
 80078ac:	2bff      	cmp	r3, #255	; 0xff
 80078ae:	f000 8174 	beq.w	8007b9a <USBD_StdEPReq+0x32e>
 80078b2:	7b7b      	ldrb	r3, [r7, #13]
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	f040 8170 	bne.w	8007b9a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80078ba:	7b7a      	ldrb	r2, [r7, #13]
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80078c2:	7b7a      	ldrb	r2, [r7, #13]
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	32ae      	adds	r2, #174	; 0xae
 80078c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078cc:	689b      	ldr	r3, [r3, #8]
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	f000 8163 	beq.w	8007b9a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80078d4:	7b7a      	ldrb	r2, [r7, #13]
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	32ae      	adds	r2, #174	; 0xae
 80078da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078de:	689b      	ldr	r3, [r3, #8]
 80078e0:	6839      	ldr	r1, [r7, #0]
 80078e2:	6878      	ldr	r0, [r7, #4]
 80078e4:	4798      	blx	r3
 80078e6:	4603      	mov	r3, r0
 80078e8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80078ea:	e156      	b.n	8007b9a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80078ec:	683b      	ldr	r3, [r7, #0]
 80078ee:	785b      	ldrb	r3, [r3, #1]
 80078f0:	2b03      	cmp	r3, #3
 80078f2:	d008      	beq.n	8007906 <USBD_StdEPReq+0x9a>
 80078f4:	2b03      	cmp	r3, #3
 80078f6:	f300 8145 	bgt.w	8007b84 <USBD_StdEPReq+0x318>
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	f000 809b 	beq.w	8007a36 <USBD_StdEPReq+0x1ca>
 8007900:	2b01      	cmp	r3, #1
 8007902:	d03c      	beq.n	800797e <USBD_StdEPReq+0x112>
 8007904:	e13e      	b.n	8007b84 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800790c:	b2db      	uxtb	r3, r3
 800790e:	2b02      	cmp	r3, #2
 8007910:	d002      	beq.n	8007918 <USBD_StdEPReq+0xac>
 8007912:	2b03      	cmp	r3, #3
 8007914:	d016      	beq.n	8007944 <USBD_StdEPReq+0xd8>
 8007916:	e02c      	b.n	8007972 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007918:	7bbb      	ldrb	r3, [r7, #14]
 800791a:	2b00      	cmp	r3, #0
 800791c:	d00d      	beq.n	800793a <USBD_StdEPReq+0xce>
 800791e:	7bbb      	ldrb	r3, [r7, #14]
 8007920:	2b80      	cmp	r3, #128	; 0x80
 8007922:	d00a      	beq.n	800793a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007924:	7bbb      	ldrb	r3, [r7, #14]
 8007926:	4619      	mov	r1, r3
 8007928:	6878      	ldr	r0, [r7, #4]
 800792a:	f001 f9d1 	bl	8008cd0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800792e:	2180      	movs	r1, #128	; 0x80
 8007930:	6878      	ldr	r0, [r7, #4]
 8007932:	f001 f9cd 	bl	8008cd0 <USBD_LL_StallEP>
 8007936:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007938:	e020      	b.n	800797c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800793a:	6839      	ldr	r1, [r7, #0]
 800793c:	6878      	ldr	r0, [r7, #4]
 800793e:	f000 fc7a 	bl	8008236 <USBD_CtlError>
              break;
 8007942:	e01b      	b.n	800797c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007944:	683b      	ldr	r3, [r7, #0]
 8007946:	885b      	ldrh	r3, [r3, #2]
 8007948:	2b00      	cmp	r3, #0
 800794a:	d10e      	bne.n	800796a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800794c:	7bbb      	ldrb	r3, [r7, #14]
 800794e:	2b00      	cmp	r3, #0
 8007950:	d00b      	beq.n	800796a <USBD_StdEPReq+0xfe>
 8007952:	7bbb      	ldrb	r3, [r7, #14]
 8007954:	2b80      	cmp	r3, #128	; 0x80
 8007956:	d008      	beq.n	800796a <USBD_StdEPReq+0xfe>
 8007958:	683b      	ldr	r3, [r7, #0]
 800795a:	88db      	ldrh	r3, [r3, #6]
 800795c:	2b00      	cmp	r3, #0
 800795e:	d104      	bne.n	800796a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007960:	7bbb      	ldrb	r3, [r7, #14]
 8007962:	4619      	mov	r1, r3
 8007964:	6878      	ldr	r0, [r7, #4]
 8007966:	f001 f9b3 	bl	8008cd0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800796a:	6878      	ldr	r0, [r7, #4]
 800796c:	f000 fd2e 	bl	80083cc <USBD_CtlSendStatus>

              break;
 8007970:	e004      	b.n	800797c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8007972:	6839      	ldr	r1, [r7, #0]
 8007974:	6878      	ldr	r0, [r7, #4]
 8007976:	f000 fc5e 	bl	8008236 <USBD_CtlError>
              break;
 800797a:	bf00      	nop
          }
          break;
 800797c:	e107      	b.n	8007b8e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007984:	b2db      	uxtb	r3, r3
 8007986:	2b02      	cmp	r3, #2
 8007988:	d002      	beq.n	8007990 <USBD_StdEPReq+0x124>
 800798a:	2b03      	cmp	r3, #3
 800798c:	d016      	beq.n	80079bc <USBD_StdEPReq+0x150>
 800798e:	e04b      	b.n	8007a28 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007990:	7bbb      	ldrb	r3, [r7, #14]
 8007992:	2b00      	cmp	r3, #0
 8007994:	d00d      	beq.n	80079b2 <USBD_StdEPReq+0x146>
 8007996:	7bbb      	ldrb	r3, [r7, #14]
 8007998:	2b80      	cmp	r3, #128	; 0x80
 800799a:	d00a      	beq.n	80079b2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800799c:	7bbb      	ldrb	r3, [r7, #14]
 800799e:	4619      	mov	r1, r3
 80079a0:	6878      	ldr	r0, [r7, #4]
 80079a2:	f001 f995 	bl	8008cd0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80079a6:	2180      	movs	r1, #128	; 0x80
 80079a8:	6878      	ldr	r0, [r7, #4]
 80079aa:	f001 f991 	bl	8008cd0 <USBD_LL_StallEP>
 80079ae:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80079b0:	e040      	b.n	8007a34 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80079b2:	6839      	ldr	r1, [r7, #0]
 80079b4:	6878      	ldr	r0, [r7, #4]
 80079b6:	f000 fc3e 	bl	8008236 <USBD_CtlError>
              break;
 80079ba:	e03b      	b.n	8007a34 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80079bc:	683b      	ldr	r3, [r7, #0]
 80079be:	885b      	ldrh	r3, [r3, #2]
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d136      	bne.n	8007a32 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80079c4:	7bbb      	ldrb	r3, [r7, #14]
 80079c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d004      	beq.n	80079d8 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80079ce:	7bbb      	ldrb	r3, [r7, #14]
 80079d0:	4619      	mov	r1, r3
 80079d2:	6878      	ldr	r0, [r7, #4]
 80079d4:	f001 f99b 	bl	8008d0e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80079d8:	6878      	ldr	r0, [r7, #4]
 80079da:	f000 fcf7 	bl	80083cc <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80079de:	7bbb      	ldrb	r3, [r7, #14]
 80079e0:	4619      	mov	r1, r3
 80079e2:	6878      	ldr	r0, [r7, #4]
 80079e4:	f7ff fde2 	bl	80075ac <USBD_CoreFindEP>
 80079e8:	4603      	mov	r3, r0
 80079ea:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80079ec:	7b7b      	ldrb	r3, [r7, #13]
 80079ee:	2bff      	cmp	r3, #255	; 0xff
 80079f0:	d01f      	beq.n	8007a32 <USBD_StdEPReq+0x1c6>
 80079f2:	7b7b      	ldrb	r3, [r7, #13]
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d11c      	bne.n	8007a32 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80079f8:	7b7a      	ldrb	r2, [r7, #13]
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8007a00:	7b7a      	ldrb	r2, [r7, #13]
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	32ae      	adds	r2, #174	; 0xae
 8007a06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a0a:	689b      	ldr	r3, [r3, #8]
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d010      	beq.n	8007a32 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007a10:	7b7a      	ldrb	r2, [r7, #13]
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	32ae      	adds	r2, #174	; 0xae
 8007a16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a1a:	689b      	ldr	r3, [r3, #8]
 8007a1c:	6839      	ldr	r1, [r7, #0]
 8007a1e:	6878      	ldr	r0, [r7, #4]
 8007a20:	4798      	blx	r3
 8007a22:	4603      	mov	r3, r0
 8007a24:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8007a26:	e004      	b.n	8007a32 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8007a28:	6839      	ldr	r1, [r7, #0]
 8007a2a:	6878      	ldr	r0, [r7, #4]
 8007a2c:	f000 fc03 	bl	8008236 <USBD_CtlError>
              break;
 8007a30:	e000      	b.n	8007a34 <USBD_StdEPReq+0x1c8>
              break;
 8007a32:	bf00      	nop
          }
          break;
 8007a34:	e0ab      	b.n	8007b8e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a3c:	b2db      	uxtb	r3, r3
 8007a3e:	2b02      	cmp	r3, #2
 8007a40:	d002      	beq.n	8007a48 <USBD_StdEPReq+0x1dc>
 8007a42:	2b03      	cmp	r3, #3
 8007a44:	d032      	beq.n	8007aac <USBD_StdEPReq+0x240>
 8007a46:	e097      	b.n	8007b78 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007a48:	7bbb      	ldrb	r3, [r7, #14]
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d007      	beq.n	8007a5e <USBD_StdEPReq+0x1f2>
 8007a4e:	7bbb      	ldrb	r3, [r7, #14]
 8007a50:	2b80      	cmp	r3, #128	; 0x80
 8007a52:	d004      	beq.n	8007a5e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8007a54:	6839      	ldr	r1, [r7, #0]
 8007a56:	6878      	ldr	r0, [r7, #4]
 8007a58:	f000 fbed 	bl	8008236 <USBD_CtlError>
                break;
 8007a5c:	e091      	b.n	8007b82 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007a5e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	da0b      	bge.n	8007a7e <USBD_StdEPReq+0x212>
 8007a66:	7bbb      	ldrb	r3, [r7, #14]
 8007a68:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007a6c:	4613      	mov	r3, r2
 8007a6e:	009b      	lsls	r3, r3, #2
 8007a70:	4413      	add	r3, r2
 8007a72:	009b      	lsls	r3, r3, #2
 8007a74:	3310      	adds	r3, #16
 8007a76:	687a      	ldr	r2, [r7, #4]
 8007a78:	4413      	add	r3, r2
 8007a7a:	3304      	adds	r3, #4
 8007a7c:	e00b      	b.n	8007a96 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007a7e:	7bbb      	ldrb	r3, [r7, #14]
 8007a80:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007a84:	4613      	mov	r3, r2
 8007a86:	009b      	lsls	r3, r3, #2
 8007a88:	4413      	add	r3, r2
 8007a8a:	009b      	lsls	r3, r3, #2
 8007a8c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007a90:	687a      	ldr	r2, [r7, #4]
 8007a92:	4413      	add	r3, r2
 8007a94:	3304      	adds	r3, #4
 8007a96:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007a98:	68bb      	ldr	r3, [r7, #8]
 8007a9a:	2200      	movs	r2, #0
 8007a9c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007a9e:	68bb      	ldr	r3, [r7, #8]
 8007aa0:	2202      	movs	r2, #2
 8007aa2:	4619      	mov	r1, r3
 8007aa4:	6878      	ldr	r0, [r7, #4]
 8007aa6:	f000 fc37 	bl	8008318 <USBD_CtlSendData>
              break;
 8007aaa:	e06a      	b.n	8007b82 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007aac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	da11      	bge.n	8007ad8 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007ab4:	7bbb      	ldrb	r3, [r7, #14]
 8007ab6:	f003 020f 	and.w	r2, r3, #15
 8007aba:	6879      	ldr	r1, [r7, #4]
 8007abc:	4613      	mov	r3, r2
 8007abe:	009b      	lsls	r3, r3, #2
 8007ac0:	4413      	add	r3, r2
 8007ac2:	009b      	lsls	r3, r3, #2
 8007ac4:	440b      	add	r3, r1
 8007ac6:	3324      	adds	r3, #36	; 0x24
 8007ac8:	881b      	ldrh	r3, [r3, #0]
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d117      	bne.n	8007afe <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007ace:	6839      	ldr	r1, [r7, #0]
 8007ad0:	6878      	ldr	r0, [r7, #4]
 8007ad2:	f000 fbb0 	bl	8008236 <USBD_CtlError>
                  break;
 8007ad6:	e054      	b.n	8007b82 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007ad8:	7bbb      	ldrb	r3, [r7, #14]
 8007ada:	f003 020f 	and.w	r2, r3, #15
 8007ade:	6879      	ldr	r1, [r7, #4]
 8007ae0:	4613      	mov	r3, r2
 8007ae2:	009b      	lsls	r3, r3, #2
 8007ae4:	4413      	add	r3, r2
 8007ae6:	009b      	lsls	r3, r3, #2
 8007ae8:	440b      	add	r3, r1
 8007aea:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007aee:	881b      	ldrh	r3, [r3, #0]
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d104      	bne.n	8007afe <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007af4:	6839      	ldr	r1, [r7, #0]
 8007af6:	6878      	ldr	r0, [r7, #4]
 8007af8:	f000 fb9d 	bl	8008236 <USBD_CtlError>
                  break;
 8007afc:	e041      	b.n	8007b82 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007afe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	da0b      	bge.n	8007b1e <USBD_StdEPReq+0x2b2>
 8007b06:	7bbb      	ldrb	r3, [r7, #14]
 8007b08:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007b0c:	4613      	mov	r3, r2
 8007b0e:	009b      	lsls	r3, r3, #2
 8007b10:	4413      	add	r3, r2
 8007b12:	009b      	lsls	r3, r3, #2
 8007b14:	3310      	adds	r3, #16
 8007b16:	687a      	ldr	r2, [r7, #4]
 8007b18:	4413      	add	r3, r2
 8007b1a:	3304      	adds	r3, #4
 8007b1c:	e00b      	b.n	8007b36 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007b1e:	7bbb      	ldrb	r3, [r7, #14]
 8007b20:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007b24:	4613      	mov	r3, r2
 8007b26:	009b      	lsls	r3, r3, #2
 8007b28:	4413      	add	r3, r2
 8007b2a:	009b      	lsls	r3, r3, #2
 8007b2c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007b30:	687a      	ldr	r2, [r7, #4]
 8007b32:	4413      	add	r3, r2
 8007b34:	3304      	adds	r3, #4
 8007b36:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007b38:	7bbb      	ldrb	r3, [r7, #14]
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d002      	beq.n	8007b44 <USBD_StdEPReq+0x2d8>
 8007b3e:	7bbb      	ldrb	r3, [r7, #14]
 8007b40:	2b80      	cmp	r3, #128	; 0x80
 8007b42:	d103      	bne.n	8007b4c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8007b44:	68bb      	ldr	r3, [r7, #8]
 8007b46:	2200      	movs	r2, #0
 8007b48:	601a      	str	r2, [r3, #0]
 8007b4a:	e00e      	b.n	8007b6a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007b4c:	7bbb      	ldrb	r3, [r7, #14]
 8007b4e:	4619      	mov	r1, r3
 8007b50:	6878      	ldr	r0, [r7, #4]
 8007b52:	f001 f8fb 	bl	8008d4c <USBD_LL_IsStallEP>
 8007b56:	4603      	mov	r3, r0
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d003      	beq.n	8007b64 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8007b5c:	68bb      	ldr	r3, [r7, #8]
 8007b5e:	2201      	movs	r2, #1
 8007b60:	601a      	str	r2, [r3, #0]
 8007b62:	e002      	b.n	8007b6a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8007b64:	68bb      	ldr	r3, [r7, #8]
 8007b66:	2200      	movs	r2, #0
 8007b68:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007b6a:	68bb      	ldr	r3, [r7, #8]
 8007b6c:	2202      	movs	r2, #2
 8007b6e:	4619      	mov	r1, r3
 8007b70:	6878      	ldr	r0, [r7, #4]
 8007b72:	f000 fbd1 	bl	8008318 <USBD_CtlSendData>
              break;
 8007b76:	e004      	b.n	8007b82 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8007b78:	6839      	ldr	r1, [r7, #0]
 8007b7a:	6878      	ldr	r0, [r7, #4]
 8007b7c:	f000 fb5b 	bl	8008236 <USBD_CtlError>
              break;
 8007b80:	bf00      	nop
          }
          break;
 8007b82:	e004      	b.n	8007b8e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8007b84:	6839      	ldr	r1, [r7, #0]
 8007b86:	6878      	ldr	r0, [r7, #4]
 8007b88:	f000 fb55 	bl	8008236 <USBD_CtlError>
          break;
 8007b8c:	bf00      	nop
      }
      break;
 8007b8e:	e005      	b.n	8007b9c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8007b90:	6839      	ldr	r1, [r7, #0]
 8007b92:	6878      	ldr	r0, [r7, #4]
 8007b94:	f000 fb4f 	bl	8008236 <USBD_CtlError>
      break;
 8007b98:	e000      	b.n	8007b9c <USBD_StdEPReq+0x330>
      break;
 8007b9a:	bf00      	nop
  }

  return ret;
 8007b9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b9e:	4618      	mov	r0, r3
 8007ba0:	3710      	adds	r7, #16
 8007ba2:	46bd      	mov	sp, r7
 8007ba4:	bd80      	pop	{r7, pc}
	...

08007ba8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ba8:	b580      	push	{r7, lr}
 8007baa:	b084      	sub	sp, #16
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	6078      	str	r0, [r7, #4]
 8007bb0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007bb2:	2300      	movs	r3, #0
 8007bb4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007bb6:	2300      	movs	r3, #0
 8007bb8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007bba:	2300      	movs	r3, #0
 8007bbc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007bbe:	683b      	ldr	r3, [r7, #0]
 8007bc0:	885b      	ldrh	r3, [r3, #2]
 8007bc2:	0a1b      	lsrs	r3, r3, #8
 8007bc4:	b29b      	uxth	r3, r3
 8007bc6:	3b01      	subs	r3, #1
 8007bc8:	2b06      	cmp	r3, #6
 8007bca:	f200 8128 	bhi.w	8007e1e <USBD_GetDescriptor+0x276>
 8007bce:	a201      	add	r2, pc, #4	; (adr r2, 8007bd4 <USBD_GetDescriptor+0x2c>)
 8007bd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bd4:	08007bf1 	.word	0x08007bf1
 8007bd8:	08007c09 	.word	0x08007c09
 8007bdc:	08007c49 	.word	0x08007c49
 8007be0:	08007e1f 	.word	0x08007e1f
 8007be4:	08007e1f 	.word	0x08007e1f
 8007be8:	08007dbf 	.word	0x08007dbf
 8007bec:	08007deb 	.word	0x08007deb
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	687a      	ldr	r2, [r7, #4]
 8007bfa:	7c12      	ldrb	r2, [r2, #16]
 8007bfc:	f107 0108 	add.w	r1, r7, #8
 8007c00:	4610      	mov	r0, r2
 8007c02:	4798      	blx	r3
 8007c04:	60f8      	str	r0, [r7, #12]
      break;
 8007c06:	e112      	b.n	8007e2e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	7c1b      	ldrb	r3, [r3, #16]
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d10d      	bne.n	8007c2c <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c18:	f107 0208 	add.w	r2, r7, #8
 8007c1c:	4610      	mov	r0, r2
 8007c1e:	4798      	blx	r3
 8007c20:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	3301      	adds	r3, #1
 8007c26:	2202      	movs	r2, #2
 8007c28:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007c2a:	e100      	b.n	8007e2e <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c34:	f107 0208 	add.w	r2, r7, #8
 8007c38:	4610      	mov	r0, r2
 8007c3a:	4798      	blx	r3
 8007c3c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	3301      	adds	r3, #1
 8007c42:	2202      	movs	r2, #2
 8007c44:	701a      	strb	r2, [r3, #0]
      break;
 8007c46:	e0f2      	b.n	8007e2e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007c48:	683b      	ldr	r3, [r7, #0]
 8007c4a:	885b      	ldrh	r3, [r3, #2]
 8007c4c:	b2db      	uxtb	r3, r3
 8007c4e:	2b05      	cmp	r3, #5
 8007c50:	f200 80ac 	bhi.w	8007dac <USBD_GetDescriptor+0x204>
 8007c54:	a201      	add	r2, pc, #4	; (adr r2, 8007c5c <USBD_GetDescriptor+0xb4>)
 8007c56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c5a:	bf00      	nop
 8007c5c:	08007c75 	.word	0x08007c75
 8007c60:	08007ca9 	.word	0x08007ca9
 8007c64:	08007cdd 	.word	0x08007cdd
 8007c68:	08007d11 	.word	0x08007d11
 8007c6c:	08007d45 	.word	0x08007d45
 8007c70:	08007d79 	.word	0x08007d79
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c7a:	685b      	ldr	r3, [r3, #4]
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d00b      	beq.n	8007c98 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c86:	685b      	ldr	r3, [r3, #4]
 8007c88:	687a      	ldr	r2, [r7, #4]
 8007c8a:	7c12      	ldrb	r2, [r2, #16]
 8007c8c:	f107 0108 	add.w	r1, r7, #8
 8007c90:	4610      	mov	r0, r2
 8007c92:	4798      	blx	r3
 8007c94:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007c96:	e091      	b.n	8007dbc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007c98:	6839      	ldr	r1, [r7, #0]
 8007c9a:	6878      	ldr	r0, [r7, #4]
 8007c9c:	f000 facb 	bl	8008236 <USBD_CtlError>
            err++;
 8007ca0:	7afb      	ldrb	r3, [r7, #11]
 8007ca2:	3301      	adds	r3, #1
 8007ca4:	72fb      	strb	r3, [r7, #11]
          break;
 8007ca6:	e089      	b.n	8007dbc <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007cae:	689b      	ldr	r3, [r3, #8]
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d00b      	beq.n	8007ccc <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007cba:	689b      	ldr	r3, [r3, #8]
 8007cbc:	687a      	ldr	r2, [r7, #4]
 8007cbe:	7c12      	ldrb	r2, [r2, #16]
 8007cc0:	f107 0108 	add.w	r1, r7, #8
 8007cc4:	4610      	mov	r0, r2
 8007cc6:	4798      	blx	r3
 8007cc8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007cca:	e077      	b.n	8007dbc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007ccc:	6839      	ldr	r1, [r7, #0]
 8007cce:	6878      	ldr	r0, [r7, #4]
 8007cd0:	f000 fab1 	bl	8008236 <USBD_CtlError>
            err++;
 8007cd4:	7afb      	ldrb	r3, [r7, #11]
 8007cd6:	3301      	adds	r3, #1
 8007cd8:	72fb      	strb	r3, [r7, #11]
          break;
 8007cda:	e06f      	b.n	8007dbc <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ce2:	68db      	ldr	r3, [r3, #12]
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d00b      	beq.n	8007d00 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007cee:	68db      	ldr	r3, [r3, #12]
 8007cf0:	687a      	ldr	r2, [r7, #4]
 8007cf2:	7c12      	ldrb	r2, [r2, #16]
 8007cf4:	f107 0108 	add.w	r1, r7, #8
 8007cf8:	4610      	mov	r0, r2
 8007cfa:	4798      	blx	r3
 8007cfc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007cfe:	e05d      	b.n	8007dbc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007d00:	6839      	ldr	r1, [r7, #0]
 8007d02:	6878      	ldr	r0, [r7, #4]
 8007d04:	f000 fa97 	bl	8008236 <USBD_CtlError>
            err++;
 8007d08:	7afb      	ldrb	r3, [r7, #11]
 8007d0a:	3301      	adds	r3, #1
 8007d0c:	72fb      	strb	r3, [r7, #11]
          break;
 8007d0e:	e055      	b.n	8007dbc <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d16:	691b      	ldr	r3, [r3, #16]
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d00b      	beq.n	8007d34 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d22:	691b      	ldr	r3, [r3, #16]
 8007d24:	687a      	ldr	r2, [r7, #4]
 8007d26:	7c12      	ldrb	r2, [r2, #16]
 8007d28:	f107 0108 	add.w	r1, r7, #8
 8007d2c:	4610      	mov	r0, r2
 8007d2e:	4798      	blx	r3
 8007d30:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007d32:	e043      	b.n	8007dbc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007d34:	6839      	ldr	r1, [r7, #0]
 8007d36:	6878      	ldr	r0, [r7, #4]
 8007d38:	f000 fa7d 	bl	8008236 <USBD_CtlError>
            err++;
 8007d3c:	7afb      	ldrb	r3, [r7, #11]
 8007d3e:	3301      	adds	r3, #1
 8007d40:	72fb      	strb	r3, [r7, #11]
          break;
 8007d42:	e03b      	b.n	8007dbc <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d4a:	695b      	ldr	r3, [r3, #20]
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d00b      	beq.n	8007d68 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d56:	695b      	ldr	r3, [r3, #20]
 8007d58:	687a      	ldr	r2, [r7, #4]
 8007d5a:	7c12      	ldrb	r2, [r2, #16]
 8007d5c:	f107 0108 	add.w	r1, r7, #8
 8007d60:	4610      	mov	r0, r2
 8007d62:	4798      	blx	r3
 8007d64:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007d66:	e029      	b.n	8007dbc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007d68:	6839      	ldr	r1, [r7, #0]
 8007d6a:	6878      	ldr	r0, [r7, #4]
 8007d6c:	f000 fa63 	bl	8008236 <USBD_CtlError>
            err++;
 8007d70:	7afb      	ldrb	r3, [r7, #11]
 8007d72:	3301      	adds	r3, #1
 8007d74:	72fb      	strb	r3, [r7, #11]
          break;
 8007d76:	e021      	b.n	8007dbc <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d7e:	699b      	ldr	r3, [r3, #24]
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d00b      	beq.n	8007d9c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d8a:	699b      	ldr	r3, [r3, #24]
 8007d8c:	687a      	ldr	r2, [r7, #4]
 8007d8e:	7c12      	ldrb	r2, [r2, #16]
 8007d90:	f107 0108 	add.w	r1, r7, #8
 8007d94:	4610      	mov	r0, r2
 8007d96:	4798      	blx	r3
 8007d98:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007d9a:	e00f      	b.n	8007dbc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007d9c:	6839      	ldr	r1, [r7, #0]
 8007d9e:	6878      	ldr	r0, [r7, #4]
 8007da0:	f000 fa49 	bl	8008236 <USBD_CtlError>
            err++;
 8007da4:	7afb      	ldrb	r3, [r7, #11]
 8007da6:	3301      	adds	r3, #1
 8007da8:	72fb      	strb	r3, [r7, #11]
          break;
 8007daa:	e007      	b.n	8007dbc <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007dac:	6839      	ldr	r1, [r7, #0]
 8007dae:	6878      	ldr	r0, [r7, #4]
 8007db0:	f000 fa41 	bl	8008236 <USBD_CtlError>
          err++;
 8007db4:	7afb      	ldrb	r3, [r7, #11]
 8007db6:	3301      	adds	r3, #1
 8007db8:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8007dba:	bf00      	nop
      }
      break;
 8007dbc:	e037      	b.n	8007e2e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	7c1b      	ldrb	r3, [r3, #16]
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d109      	bne.n	8007dda <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007dcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007dce:	f107 0208 	add.w	r2, r7, #8
 8007dd2:	4610      	mov	r0, r2
 8007dd4:	4798      	blx	r3
 8007dd6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007dd8:	e029      	b.n	8007e2e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007dda:	6839      	ldr	r1, [r7, #0]
 8007ddc:	6878      	ldr	r0, [r7, #4]
 8007dde:	f000 fa2a 	bl	8008236 <USBD_CtlError>
        err++;
 8007de2:	7afb      	ldrb	r3, [r7, #11]
 8007de4:	3301      	adds	r3, #1
 8007de6:	72fb      	strb	r3, [r7, #11]
      break;
 8007de8:	e021      	b.n	8007e2e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	7c1b      	ldrb	r3, [r3, #16]
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d10d      	bne.n	8007e0e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007dfa:	f107 0208 	add.w	r2, r7, #8
 8007dfe:	4610      	mov	r0, r2
 8007e00:	4798      	blx	r3
 8007e02:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	3301      	adds	r3, #1
 8007e08:	2207      	movs	r2, #7
 8007e0a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007e0c:	e00f      	b.n	8007e2e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007e0e:	6839      	ldr	r1, [r7, #0]
 8007e10:	6878      	ldr	r0, [r7, #4]
 8007e12:	f000 fa10 	bl	8008236 <USBD_CtlError>
        err++;
 8007e16:	7afb      	ldrb	r3, [r7, #11]
 8007e18:	3301      	adds	r3, #1
 8007e1a:	72fb      	strb	r3, [r7, #11]
      break;
 8007e1c:	e007      	b.n	8007e2e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007e1e:	6839      	ldr	r1, [r7, #0]
 8007e20:	6878      	ldr	r0, [r7, #4]
 8007e22:	f000 fa08 	bl	8008236 <USBD_CtlError>
      err++;
 8007e26:	7afb      	ldrb	r3, [r7, #11]
 8007e28:	3301      	adds	r3, #1
 8007e2a:	72fb      	strb	r3, [r7, #11]
      break;
 8007e2c:	bf00      	nop
  }

  if (err != 0U)
 8007e2e:	7afb      	ldrb	r3, [r7, #11]
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d11e      	bne.n	8007e72 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8007e34:	683b      	ldr	r3, [r7, #0]
 8007e36:	88db      	ldrh	r3, [r3, #6]
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d016      	beq.n	8007e6a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8007e3c:	893b      	ldrh	r3, [r7, #8]
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d00e      	beq.n	8007e60 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8007e42:	683b      	ldr	r3, [r7, #0]
 8007e44:	88da      	ldrh	r2, [r3, #6]
 8007e46:	893b      	ldrh	r3, [r7, #8]
 8007e48:	4293      	cmp	r3, r2
 8007e4a:	bf28      	it	cs
 8007e4c:	4613      	movcs	r3, r2
 8007e4e:	b29b      	uxth	r3, r3
 8007e50:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007e52:	893b      	ldrh	r3, [r7, #8]
 8007e54:	461a      	mov	r2, r3
 8007e56:	68f9      	ldr	r1, [r7, #12]
 8007e58:	6878      	ldr	r0, [r7, #4]
 8007e5a:	f000 fa5d 	bl	8008318 <USBD_CtlSendData>
 8007e5e:	e009      	b.n	8007e74 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007e60:	6839      	ldr	r1, [r7, #0]
 8007e62:	6878      	ldr	r0, [r7, #4]
 8007e64:	f000 f9e7 	bl	8008236 <USBD_CtlError>
 8007e68:	e004      	b.n	8007e74 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8007e6a:	6878      	ldr	r0, [r7, #4]
 8007e6c:	f000 faae 	bl	80083cc <USBD_CtlSendStatus>
 8007e70:	e000      	b.n	8007e74 <USBD_GetDescriptor+0x2cc>
    return;
 8007e72:	bf00      	nop
  }
}
 8007e74:	3710      	adds	r7, #16
 8007e76:	46bd      	mov	sp, r7
 8007e78:	bd80      	pop	{r7, pc}
 8007e7a:	bf00      	nop

08007e7c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e7c:	b580      	push	{r7, lr}
 8007e7e:	b084      	sub	sp, #16
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	6078      	str	r0, [r7, #4]
 8007e84:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007e86:	683b      	ldr	r3, [r7, #0]
 8007e88:	889b      	ldrh	r3, [r3, #4]
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d131      	bne.n	8007ef2 <USBD_SetAddress+0x76>
 8007e8e:	683b      	ldr	r3, [r7, #0]
 8007e90:	88db      	ldrh	r3, [r3, #6]
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d12d      	bne.n	8007ef2 <USBD_SetAddress+0x76>
 8007e96:	683b      	ldr	r3, [r7, #0]
 8007e98:	885b      	ldrh	r3, [r3, #2]
 8007e9a:	2b7f      	cmp	r3, #127	; 0x7f
 8007e9c:	d829      	bhi.n	8007ef2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007e9e:	683b      	ldr	r3, [r7, #0]
 8007ea0:	885b      	ldrh	r3, [r3, #2]
 8007ea2:	b2db      	uxtb	r3, r3
 8007ea4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007ea8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007eb0:	b2db      	uxtb	r3, r3
 8007eb2:	2b03      	cmp	r3, #3
 8007eb4:	d104      	bne.n	8007ec0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007eb6:	6839      	ldr	r1, [r7, #0]
 8007eb8:	6878      	ldr	r0, [r7, #4]
 8007eba:	f000 f9bc 	bl	8008236 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ebe:	e01d      	b.n	8007efc <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	7bfa      	ldrb	r2, [r7, #15]
 8007ec4:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007ec8:	7bfb      	ldrb	r3, [r7, #15]
 8007eca:	4619      	mov	r1, r3
 8007ecc:	6878      	ldr	r0, [r7, #4]
 8007ece:	f000 ff69 	bl	8008da4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007ed2:	6878      	ldr	r0, [r7, #4]
 8007ed4:	f000 fa7a 	bl	80083cc <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007ed8:	7bfb      	ldrb	r3, [r7, #15]
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d004      	beq.n	8007ee8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	2202      	movs	r2, #2
 8007ee2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ee6:	e009      	b.n	8007efc <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	2201      	movs	r2, #1
 8007eec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ef0:	e004      	b.n	8007efc <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007ef2:	6839      	ldr	r1, [r7, #0]
 8007ef4:	6878      	ldr	r0, [r7, #4]
 8007ef6:	f000 f99e 	bl	8008236 <USBD_CtlError>
  }
}
 8007efa:	bf00      	nop
 8007efc:	bf00      	nop
 8007efe:	3710      	adds	r7, #16
 8007f00:	46bd      	mov	sp, r7
 8007f02:	bd80      	pop	{r7, pc}

08007f04 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007f04:	b580      	push	{r7, lr}
 8007f06:	b084      	sub	sp, #16
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	6078      	str	r0, [r7, #4]
 8007f0c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007f0e:	2300      	movs	r3, #0
 8007f10:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007f12:	683b      	ldr	r3, [r7, #0]
 8007f14:	885b      	ldrh	r3, [r3, #2]
 8007f16:	b2da      	uxtb	r2, r3
 8007f18:	4b4e      	ldr	r3, [pc, #312]	; (8008054 <USBD_SetConfig+0x150>)
 8007f1a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007f1c:	4b4d      	ldr	r3, [pc, #308]	; (8008054 <USBD_SetConfig+0x150>)
 8007f1e:	781b      	ldrb	r3, [r3, #0]
 8007f20:	2b01      	cmp	r3, #1
 8007f22:	d905      	bls.n	8007f30 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007f24:	6839      	ldr	r1, [r7, #0]
 8007f26:	6878      	ldr	r0, [r7, #4]
 8007f28:	f000 f985 	bl	8008236 <USBD_CtlError>
    return USBD_FAIL;
 8007f2c:	2303      	movs	r3, #3
 8007f2e:	e08c      	b.n	800804a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f36:	b2db      	uxtb	r3, r3
 8007f38:	2b02      	cmp	r3, #2
 8007f3a:	d002      	beq.n	8007f42 <USBD_SetConfig+0x3e>
 8007f3c:	2b03      	cmp	r3, #3
 8007f3e:	d029      	beq.n	8007f94 <USBD_SetConfig+0x90>
 8007f40:	e075      	b.n	800802e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007f42:	4b44      	ldr	r3, [pc, #272]	; (8008054 <USBD_SetConfig+0x150>)
 8007f44:	781b      	ldrb	r3, [r3, #0]
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d020      	beq.n	8007f8c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8007f4a:	4b42      	ldr	r3, [pc, #264]	; (8008054 <USBD_SetConfig+0x150>)
 8007f4c:	781b      	ldrb	r3, [r3, #0]
 8007f4e:	461a      	mov	r2, r3
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007f54:	4b3f      	ldr	r3, [pc, #252]	; (8008054 <USBD_SetConfig+0x150>)
 8007f56:	781b      	ldrb	r3, [r3, #0]
 8007f58:	4619      	mov	r1, r3
 8007f5a:	6878      	ldr	r0, [r7, #4]
 8007f5c:	f7fe ffe1 	bl	8006f22 <USBD_SetClassConfig>
 8007f60:	4603      	mov	r3, r0
 8007f62:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007f64:	7bfb      	ldrb	r3, [r7, #15]
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d008      	beq.n	8007f7c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8007f6a:	6839      	ldr	r1, [r7, #0]
 8007f6c:	6878      	ldr	r0, [r7, #4]
 8007f6e:	f000 f962 	bl	8008236 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	2202      	movs	r2, #2
 8007f76:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007f7a:	e065      	b.n	8008048 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007f7c:	6878      	ldr	r0, [r7, #4]
 8007f7e:	f000 fa25 	bl	80083cc <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	2203      	movs	r2, #3
 8007f86:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007f8a:	e05d      	b.n	8008048 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007f8c:	6878      	ldr	r0, [r7, #4]
 8007f8e:	f000 fa1d 	bl	80083cc <USBD_CtlSendStatus>
      break;
 8007f92:	e059      	b.n	8008048 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007f94:	4b2f      	ldr	r3, [pc, #188]	; (8008054 <USBD_SetConfig+0x150>)
 8007f96:	781b      	ldrb	r3, [r3, #0]
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d112      	bne.n	8007fc2 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	2202      	movs	r2, #2
 8007fa0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8007fa4:	4b2b      	ldr	r3, [pc, #172]	; (8008054 <USBD_SetConfig+0x150>)
 8007fa6:	781b      	ldrb	r3, [r3, #0]
 8007fa8:	461a      	mov	r2, r3
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007fae:	4b29      	ldr	r3, [pc, #164]	; (8008054 <USBD_SetConfig+0x150>)
 8007fb0:	781b      	ldrb	r3, [r3, #0]
 8007fb2:	4619      	mov	r1, r3
 8007fb4:	6878      	ldr	r0, [r7, #4]
 8007fb6:	f7fe ffd0 	bl	8006f5a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8007fba:	6878      	ldr	r0, [r7, #4]
 8007fbc:	f000 fa06 	bl	80083cc <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007fc0:	e042      	b.n	8008048 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8007fc2:	4b24      	ldr	r3, [pc, #144]	; (8008054 <USBD_SetConfig+0x150>)
 8007fc4:	781b      	ldrb	r3, [r3, #0]
 8007fc6:	461a      	mov	r2, r3
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	685b      	ldr	r3, [r3, #4]
 8007fcc:	429a      	cmp	r2, r3
 8007fce:	d02a      	beq.n	8008026 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	685b      	ldr	r3, [r3, #4]
 8007fd4:	b2db      	uxtb	r3, r3
 8007fd6:	4619      	mov	r1, r3
 8007fd8:	6878      	ldr	r0, [r7, #4]
 8007fda:	f7fe ffbe 	bl	8006f5a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007fde:	4b1d      	ldr	r3, [pc, #116]	; (8008054 <USBD_SetConfig+0x150>)
 8007fe0:	781b      	ldrb	r3, [r3, #0]
 8007fe2:	461a      	mov	r2, r3
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007fe8:	4b1a      	ldr	r3, [pc, #104]	; (8008054 <USBD_SetConfig+0x150>)
 8007fea:	781b      	ldrb	r3, [r3, #0]
 8007fec:	4619      	mov	r1, r3
 8007fee:	6878      	ldr	r0, [r7, #4]
 8007ff0:	f7fe ff97 	bl	8006f22 <USBD_SetClassConfig>
 8007ff4:	4603      	mov	r3, r0
 8007ff6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007ff8:	7bfb      	ldrb	r3, [r7, #15]
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d00f      	beq.n	800801e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8007ffe:	6839      	ldr	r1, [r7, #0]
 8008000:	6878      	ldr	r0, [r7, #4]
 8008002:	f000 f918 	bl	8008236 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	685b      	ldr	r3, [r3, #4]
 800800a:	b2db      	uxtb	r3, r3
 800800c:	4619      	mov	r1, r3
 800800e:	6878      	ldr	r0, [r7, #4]
 8008010:	f7fe ffa3 	bl	8006f5a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	2202      	movs	r2, #2
 8008018:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800801c:	e014      	b.n	8008048 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800801e:	6878      	ldr	r0, [r7, #4]
 8008020:	f000 f9d4 	bl	80083cc <USBD_CtlSendStatus>
      break;
 8008024:	e010      	b.n	8008048 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008026:	6878      	ldr	r0, [r7, #4]
 8008028:	f000 f9d0 	bl	80083cc <USBD_CtlSendStatus>
      break;
 800802c:	e00c      	b.n	8008048 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800802e:	6839      	ldr	r1, [r7, #0]
 8008030:	6878      	ldr	r0, [r7, #4]
 8008032:	f000 f900 	bl	8008236 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008036:	4b07      	ldr	r3, [pc, #28]	; (8008054 <USBD_SetConfig+0x150>)
 8008038:	781b      	ldrb	r3, [r3, #0]
 800803a:	4619      	mov	r1, r3
 800803c:	6878      	ldr	r0, [r7, #4]
 800803e:	f7fe ff8c 	bl	8006f5a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008042:	2303      	movs	r3, #3
 8008044:	73fb      	strb	r3, [r7, #15]
      break;
 8008046:	bf00      	nop
  }

  return ret;
 8008048:	7bfb      	ldrb	r3, [r7, #15]
}
 800804a:	4618      	mov	r0, r3
 800804c:	3710      	adds	r7, #16
 800804e:	46bd      	mov	sp, r7
 8008050:	bd80      	pop	{r7, pc}
 8008052:	bf00      	nop
 8008054:	2000076c 	.word	0x2000076c

08008058 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008058:	b580      	push	{r7, lr}
 800805a:	b082      	sub	sp, #8
 800805c:	af00      	add	r7, sp, #0
 800805e:	6078      	str	r0, [r7, #4]
 8008060:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008062:	683b      	ldr	r3, [r7, #0]
 8008064:	88db      	ldrh	r3, [r3, #6]
 8008066:	2b01      	cmp	r3, #1
 8008068:	d004      	beq.n	8008074 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800806a:	6839      	ldr	r1, [r7, #0]
 800806c:	6878      	ldr	r0, [r7, #4]
 800806e:	f000 f8e2 	bl	8008236 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008072:	e023      	b.n	80080bc <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800807a:	b2db      	uxtb	r3, r3
 800807c:	2b02      	cmp	r3, #2
 800807e:	dc02      	bgt.n	8008086 <USBD_GetConfig+0x2e>
 8008080:	2b00      	cmp	r3, #0
 8008082:	dc03      	bgt.n	800808c <USBD_GetConfig+0x34>
 8008084:	e015      	b.n	80080b2 <USBD_GetConfig+0x5a>
 8008086:	2b03      	cmp	r3, #3
 8008088:	d00b      	beq.n	80080a2 <USBD_GetConfig+0x4a>
 800808a:	e012      	b.n	80080b2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	2200      	movs	r2, #0
 8008090:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	3308      	adds	r3, #8
 8008096:	2201      	movs	r2, #1
 8008098:	4619      	mov	r1, r3
 800809a:	6878      	ldr	r0, [r7, #4]
 800809c:	f000 f93c 	bl	8008318 <USBD_CtlSendData>
        break;
 80080a0:	e00c      	b.n	80080bc <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	3304      	adds	r3, #4
 80080a6:	2201      	movs	r2, #1
 80080a8:	4619      	mov	r1, r3
 80080aa:	6878      	ldr	r0, [r7, #4]
 80080ac:	f000 f934 	bl	8008318 <USBD_CtlSendData>
        break;
 80080b0:	e004      	b.n	80080bc <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80080b2:	6839      	ldr	r1, [r7, #0]
 80080b4:	6878      	ldr	r0, [r7, #4]
 80080b6:	f000 f8be 	bl	8008236 <USBD_CtlError>
        break;
 80080ba:	bf00      	nop
}
 80080bc:	bf00      	nop
 80080be:	3708      	adds	r7, #8
 80080c0:	46bd      	mov	sp, r7
 80080c2:	bd80      	pop	{r7, pc}

080080c4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80080c4:	b580      	push	{r7, lr}
 80080c6:	b082      	sub	sp, #8
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	6078      	str	r0, [r7, #4]
 80080cc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80080d4:	b2db      	uxtb	r3, r3
 80080d6:	3b01      	subs	r3, #1
 80080d8:	2b02      	cmp	r3, #2
 80080da:	d81e      	bhi.n	800811a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80080dc:	683b      	ldr	r3, [r7, #0]
 80080de:	88db      	ldrh	r3, [r3, #6]
 80080e0:	2b02      	cmp	r3, #2
 80080e2:	d004      	beq.n	80080ee <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80080e4:	6839      	ldr	r1, [r7, #0]
 80080e6:	6878      	ldr	r0, [r7, #4]
 80080e8:	f000 f8a5 	bl	8008236 <USBD_CtlError>
        break;
 80080ec:	e01a      	b.n	8008124 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	2201      	movs	r2, #1
 80080f2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d005      	beq.n	800810a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	68db      	ldr	r3, [r3, #12]
 8008102:	f043 0202 	orr.w	r2, r3, #2
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	330c      	adds	r3, #12
 800810e:	2202      	movs	r2, #2
 8008110:	4619      	mov	r1, r3
 8008112:	6878      	ldr	r0, [r7, #4]
 8008114:	f000 f900 	bl	8008318 <USBD_CtlSendData>
      break;
 8008118:	e004      	b.n	8008124 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800811a:	6839      	ldr	r1, [r7, #0]
 800811c:	6878      	ldr	r0, [r7, #4]
 800811e:	f000 f88a 	bl	8008236 <USBD_CtlError>
      break;
 8008122:	bf00      	nop
  }
}
 8008124:	bf00      	nop
 8008126:	3708      	adds	r7, #8
 8008128:	46bd      	mov	sp, r7
 800812a:	bd80      	pop	{r7, pc}

0800812c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800812c:	b580      	push	{r7, lr}
 800812e:	b082      	sub	sp, #8
 8008130:	af00      	add	r7, sp, #0
 8008132:	6078      	str	r0, [r7, #4]
 8008134:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008136:	683b      	ldr	r3, [r7, #0]
 8008138:	885b      	ldrh	r3, [r3, #2]
 800813a:	2b01      	cmp	r3, #1
 800813c:	d107      	bne.n	800814e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	2201      	movs	r2, #1
 8008142:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008146:	6878      	ldr	r0, [r7, #4]
 8008148:	f000 f940 	bl	80083cc <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800814c:	e013      	b.n	8008176 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800814e:	683b      	ldr	r3, [r7, #0]
 8008150:	885b      	ldrh	r3, [r3, #2]
 8008152:	2b02      	cmp	r3, #2
 8008154:	d10b      	bne.n	800816e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8008156:	683b      	ldr	r3, [r7, #0]
 8008158:	889b      	ldrh	r3, [r3, #4]
 800815a:	0a1b      	lsrs	r3, r3, #8
 800815c:	b29b      	uxth	r3, r3
 800815e:	b2da      	uxtb	r2, r3
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8008166:	6878      	ldr	r0, [r7, #4]
 8008168:	f000 f930 	bl	80083cc <USBD_CtlSendStatus>
}
 800816c:	e003      	b.n	8008176 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800816e:	6839      	ldr	r1, [r7, #0]
 8008170:	6878      	ldr	r0, [r7, #4]
 8008172:	f000 f860 	bl	8008236 <USBD_CtlError>
}
 8008176:	bf00      	nop
 8008178:	3708      	adds	r7, #8
 800817a:	46bd      	mov	sp, r7
 800817c:	bd80      	pop	{r7, pc}

0800817e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800817e:	b580      	push	{r7, lr}
 8008180:	b082      	sub	sp, #8
 8008182:	af00      	add	r7, sp, #0
 8008184:	6078      	str	r0, [r7, #4]
 8008186:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800818e:	b2db      	uxtb	r3, r3
 8008190:	3b01      	subs	r3, #1
 8008192:	2b02      	cmp	r3, #2
 8008194:	d80b      	bhi.n	80081ae <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008196:	683b      	ldr	r3, [r7, #0]
 8008198:	885b      	ldrh	r3, [r3, #2]
 800819a:	2b01      	cmp	r3, #1
 800819c:	d10c      	bne.n	80081b8 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	2200      	movs	r2, #0
 80081a2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80081a6:	6878      	ldr	r0, [r7, #4]
 80081a8:	f000 f910 	bl	80083cc <USBD_CtlSendStatus>
      }
      break;
 80081ac:	e004      	b.n	80081b8 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80081ae:	6839      	ldr	r1, [r7, #0]
 80081b0:	6878      	ldr	r0, [r7, #4]
 80081b2:	f000 f840 	bl	8008236 <USBD_CtlError>
      break;
 80081b6:	e000      	b.n	80081ba <USBD_ClrFeature+0x3c>
      break;
 80081b8:	bf00      	nop
  }
}
 80081ba:	bf00      	nop
 80081bc:	3708      	adds	r7, #8
 80081be:	46bd      	mov	sp, r7
 80081c0:	bd80      	pop	{r7, pc}

080081c2 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80081c2:	b580      	push	{r7, lr}
 80081c4:	b084      	sub	sp, #16
 80081c6:	af00      	add	r7, sp, #0
 80081c8:	6078      	str	r0, [r7, #4]
 80081ca:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80081cc:	683b      	ldr	r3, [r7, #0]
 80081ce:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	781a      	ldrb	r2, [r3, #0]
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	3301      	adds	r3, #1
 80081dc:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	781a      	ldrb	r2, [r3, #0]
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	3301      	adds	r3, #1
 80081ea:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80081ec:	68f8      	ldr	r0, [r7, #12]
 80081ee:	f7ff fa41 	bl	8007674 <SWAPBYTE>
 80081f2:	4603      	mov	r3, r0
 80081f4:	461a      	mov	r2, r3
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	3301      	adds	r3, #1
 80081fe:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	3301      	adds	r3, #1
 8008204:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008206:	68f8      	ldr	r0, [r7, #12]
 8008208:	f7ff fa34 	bl	8007674 <SWAPBYTE>
 800820c:	4603      	mov	r3, r0
 800820e:	461a      	mov	r2, r3
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	3301      	adds	r3, #1
 8008218:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	3301      	adds	r3, #1
 800821e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008220:	68f8      	ldr	r0, [r7, #12]
 8008222:	f7ff fa27 	bl	8007674 <SWAPBYTE>
 8008226:	4603      	mov	r3, r0
 8008228:	461a      	mov	r2, r3
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	80da      	strh	r2, [r3, #6]
}
 800822e:	bf00      	nop
 8008230:	3710      	adds	r7, #16
 8008232:	46bd      	mov	sp, r7
 8008234:	bd80      	pop	{r7, pc}

08008236 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008236:	b580      	push	{r7, lr}
 8008238:	b082      	sub	sp, #8
 800823a:	af00      	add	r7, sp, #0
 800823c:	6078      	str	r0, [r7, #4]
 800823e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008240:	2180      	movs	r1, #128	; 0x80
 8008242:	6878      	ldr	r0, [r7, #4]
 8008244:	f000 fd44 	bl	8008cd0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008248:	2100      	movs	r1, #0
 800824a:	6878      	ldr	r0, [r7, #4]
 800824c:	f000 fd40 	bl	8008cd0 <USBD_LL_StallEP>
}
 8008250:	bf00      	nop
 8008252:	3708      	adds	r7, #8
 8008254:	46bd      	mov	sp, r7
 8008256:	bd80      	pop	{r7, pc}

08008258 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008258:	b580      	push	{r7, lr}
 800825a:	b086      	sub	sp, #24
 800825c:	af00      	add	r7, sp, #0
 800825e:	60f8      	str	r0, [r7, #12]
 8008260:	60b9      	str	r1, [r7, #8]
 8008262:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008264:	2300      	movs	r3, #0
 8008266:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	2b00      	cmp	r3, #0
 800826c:	d036      	beq.n	80082dc <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008272:	6938      	ldr	r0, [r7, #16]
 8008274:	f000 f836 	bl	80082e4 <USBD_GetLen>
 8008278:	4603      	mov	r3, r0
 800827a:	3301      	adds	r3, #1
 800827c:	b29b      	uxth	r3, r3
 800827e:	005b      	lsls	r3, r3, #1
 8008280:	b29a      	uxth	r2, r3
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008286:	7dfb      	ldrb	r3, [r7, #23]
 8008288:	68ba      	ldr	r2, [r7, #8]
 800828a:	4413      	add	r3, r2
 800828c:	687a      	ldr	r2, [r7, #4]
 800828e:	7812      	ldrb	r2, [r2, #0]
 8008290:	701a      	strb	r2, [r3, #0]
  idx++;
 8008292:	7dfb      	ldrb	r3, [r7, #23]
 8008294:	3301      	adds	r3, #1
 8008296:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008298:	7dfb      	ldrb	r3, [r7, #23]
 800829a:	68ba      	ldr	r2, [r7, #8]
 800829c:	4413      	add	r3, r2
 800829e:	2203      	movs	r2, #3
 80082a0:	701a      	strb	r2, [r3, #0]
  idx++;
 80082a2:	7dfb      	ldrb	r3, [r7, #23]
 80082a4:	3301      	adds	r3, #1
 80082a6:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80082a8:	e013      	b.n	80082d2 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80082aa:	7dfb      	ldrb	r3, [r7, #23]
 80082ac:	68ba      	ldr	r2, [r7, #8]
 80082ae:	4413      	add	r3, r2
 80082b0:	693a      	ldr	r2, [r7, #16]
 80082b2:	7812      	ldrb	r2, [r2, #0]
 80082b4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80082b6:	693b      	ldr	r3, [r7, #16]
 80082b8:	3301      	adds	r3, #1
 80082ba:	613b      	str	r3, [r7, #16]
    idx++;
 80082bc:	7dfb      	ldrb	r3, [r7, #23]
 80082be:	3301      	adds	r3, #1
 80082c0:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80082c2:	7dfb      	ldrb	r3, [r7, #23]
 80082c4:	68ba      	ldr	r2, [r7, #8]
 80082c6:	4413      	add	r3, r2
 80082c8:	2200      	movs	r2, #0
 80082ca:	701a      	strb	r2, [r3, #0]
    idx++;
 80082cc:	7dfb      	ldrb	r3, [r7, #23]
 80082ce:	3301      	adds	r3, #1
 80082d0:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80082d2:	693b      	ldr	r3, [r7, #16]
 80082d4:	781b      	ldrb	r3, [r3, #0]
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d1e7      	bne.n	80082aa <USBD_GetString+0x52>
 80082da:	e000      	b.n	80082de <USBD_GetString+0x86>
    return;
 80082dc:	bf00      	nop
  }
}
 80082de:	3718      	adds	r7, #24
 80082e0:	46bd      	mov	sp, r7
 80082e2:	bd80      	pop	{r7, pc}

080082e4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80082e4:	b480      	push	{r7}
 80082e6:	b085      	sub	sp, #20
 80082e8:	af00      	add	r7, sp, #0
 80082ea:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80082ec:	2300      	movs	r3, #0
 80082ee:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80082f4:	e005      	b.n	8008302 <USBD_GetLen+0x1e>
  {
    len++;
 80082f6:	7bfb      	ldrb	r3, [r7, #15]
 80082f8:	3301      	adds	r3, #1
 80082fa:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80082fc:	68bb      	ldr	r3, [r7, #8]
 80082fe:	3301      	adds	r3, #1
 8008300:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008302:	68bb      	ldr	r3, [r7, #8]
 8008304:	781b      	ldrb	r3, [r3, #0]
 8008306:	2b00      	cmp	r3, #0
 8008308:	d1f5      	bne.n	80082f6 <USBD_GetLen+0x12>
  }

  return len;
 800830a:	7bfb      	ldrb	r3, [r7, #15]
}
 800830c:	4618      	mov	r0, r3
 800830e:	3714      	adds	r7, #20
 8008310:	46bd      	mov	sp, r7
 8008312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008316:	4770      	bx	lr

08008318 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008318:	b580      	push	{r7, lr}
 800831a:	b084      	sub	sp, #16
 800831c:	af00      	add	r7, sp, #0
 800831e:	60f8      	str	r0, [r7, #12]
 8008320:	60b9      	str	r1, [r7, #8]
 8008322:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	2202      	movs	r2, #2
 8008328:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	687a      	ldr	r2, [r7, #4]
 8008330:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	687a      	ldr	r2, [r7, #4]
 8008336:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	68ba      	ldr	r2, [r7, #8]
 800833c:	2100      	movs	r1, #0
 800833e:	68f8      	ldr	r0, [r7, #12]
 8008340:	f000 fd4f 	bl	8008de2 <USBD_LL_Transmit>

  return USBD_OK;
 8008344:	2300      	movs	r3, #0
}
 8008346:	4618      	mov	r0, r3
 8008348:	3710      	adds	r7, #16
 800834a:	46bd      	mov	sp, r7
 800834c:	bd80      	pop	{r7, pc}

0800834e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800834e:	b580      	push	{r7, lr}
 8008350:	b084      	sub	sp, #16
 8008352:	af00      	add	r7, sp, #0
 8008354:	60f8      	str	r0, [r7, #12]
 8008356:	60b9      	str	r1, [r7, #8]
 8008358:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	68ba      	ldr	r2, [r7, #8]
 800835e:	2100      	movs	r1, #0
 8008360:	68f8      	ldr	r0, [r7, #12]
 8008362:	f000 fd3e 	bl	8008de2 <USBD_LL_Transmit>

  return USBD_OK;
 8008366:	2300      	movs	r3, #0
}
 8008368:	4618      	mov	r0, r3
 800836a:	3710      	adds	r7, #16
 800836c:	46bd      	mov	sp, r7
 800836e:	bd80      	pop	{r7, pc}

08008370 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008370:	b580      	push	{r7, lr}
 8008372:	b084      	sub	sp, #16
 8008374:	af00      	add	r7, sp, #0
 8008376:	60f8      	str	r0, [r7, #12]
 8008378:	60b9      	str	r1, [r7, #8]
 800837a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	2203      	movs	r2, #3
 8008380:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	687a      	ldr	r2, [r7, #4]
 8008388:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	687a      	ldr	r2, [r7, #4]
 8008390:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	68ba      	ldr	r2, [r7, #8]
 8008398:	2100      	movs	r1, #0
 800839a:	68f8      	ldr	r0, [r7, #12]
 800839c:	f000 fd42 	bl	8008e24 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80083a0:	2300      	movs	r3, #0
}
 80083a2:	4618      	mov	r0, r3
 80083a4:	3710      	adds	r7, #16
 80083a6:	46bd      	mov	sp, r7
 80083a8:	bd80      	pop	{r7, pc}

080083aa <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80083aa:	b580      	push	{r7, lr}
 80083ac:	b084      	sub	sp, #16
 80083ae:	af00      	add	r7, sp, #0
 80083b0:	60f8      	str	r0, [r7, #12]
 80083b2:	60b9      	str	r1, [r7, #8]
 80083b4:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	68ba      	ldr	r2, [r7, #8]
 80083ba:	2100      	movs	r1, #0
 80083bc:	68f8      	ldr	r0, [r7, #12]
 80083be:	f000 fd31 	bl	8008e24 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80083c2:	2300      	movs	r3, #0
}
 80083c4:	4618      	mov	r0, r3
 80083c6:	3710      	adds	r7, #16
 80083c8:	46bd      	mov	sp, r7
 80083ca:	bd80      	pop	{r7, pc}

080083cc <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80083cc:	b580      	push	{r7, lr}
 80083ce:	b082      	sub	sp, #8
 80083d0:	af00      	add	r7, sp, #0
 80083d2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	2204      	movs	r2, #4
 80083d8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80083dc:	2300      	movs	r3, #0
 80083de:	2200      	movs	r2, #0
 80083e0:	2100      	movs	r1, #0
 80083e2:	6878      	ldr	r0, [r7, #4]
 80083e4:	f000 fcfd 	bl	8008de2 <USBD_LL_Transmit>

  return USBD_OK;
 80083e8:	2300      	movs	r3, #0
}
 80083ea:	4618      	mov	r0, r3
 80083ec:	3708      	adds	r7, #8
 80083ee:	46bd      	mov	sp, r7
 80083f0:	bd80      	pop	{r7, pc}

080083f2 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80083f2:	b580      	push	{r7, lr}
 80083f4:	b082      	sub	sp, #8
 80083f6:	af00      	add	r7, sp, #0
 80083f8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	2205      	movs	r2, #5
 80083fe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008402:	2300      	movs	r3, #0
 8008404:	2200      	movs	r2, #0
 8008406:	2100      	movs	r1, #0
 8008408:	6878      	ldr	r0, [r7, #4]
 800840a:	f000 fd0b 	bl	8008e24 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800840e:	2300      	movs	r3, #0
}
 8008410:	4618      	mov	r0, r3
 8008412:	3708      	adds	r7, #8
 8008414:	46bd      	mov	sp, r7
 8008416:	bd80      	pop	{r7, pc}

08008418 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008418:	b580      	push	{r7, lr}
 800841a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800841c:	2200      	movs	r2, #0
 800841e:	4912      	ldr	r1, [pc, #72]	; (8008468 <MX_USB_DEVICE_Init+0x50>)
 8008420:	4812      	ldr	r0, [pc, #72]	; (800846c <MX_USB_DEVICE_Init+0x54>)
 8008422:	f7fe fd01 	bl	8006e28 <USBD_Init>
 8008426:	4603      	mov	r3, r0
 8008428:	2b00      	cmp	r3, #0
 800842a:	d001      	beq.n	8008430 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800842c:	f7f8 f97e 	bl	800072c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008430:	490f      	ldr	r1, [pc, #60]	; (8008470 <MX_USB_DEVICE_Init+0x58>)
 8008432:	480e      	ldr	r0, [pc, #56]	; (800846c <MX_USB_DEVICE_Init+0x54>)
 8008434:	f7fe fd28 	bl	8006e88 <USBD_RegisterClass>
 8008438:	4603      	mov	r3, r0
 800843a:	2b00      	cmp	r3, #0
 800843c:	d001      	beq.n	8008442 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800843e:	f7f8 f975 	bl	800072c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008442:	490c      	ldr	r1, [pc, #48]	; (8008474 <MX_USB_DEVICE_Init+0x5c>)
 8008444:	4809      	ldr	r0, [pc, #36]	; (800846c <MX_USB_DEVICE_Init+0x54>)
 8008446:	f7fe fc1f 	bl	8006c88 <USBD_CDC_RegisterInterface>
 800844a:	4603      	mov	r3, r0
 800844c:	2b00      	cmp	r3, #0
 800844e:	d001      	beq.n	8008454 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008450:	f7f8 f96c 	bl	800072c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008454:	4805      	ldr	r0, [pc, #20]	; (800846c <MX_USB_DEVICE_Init+0x54>)
 8008456:	f7fe fd4d 	bl	8006ef4 <USBD_Start>
 800845a:	4603      	mov	r3, r0
 800845c:	2b00      	cmp	r3, #0
 800845e:	d001      	beq.n	8008464 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008460:	f7f8 f964 	bl	800072c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008464:	bf00      	nop
 8008466:	bd80      	pop	{r7, pc}
 8008468:	200000b4 	.word	0x200000b4
 800846c:	20000770 	.word	0x20000770
 8008470:	20000018 	.word	0x20000018
 8008474:	200000a0 	.word	0x200000a0

08008478 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008478:	b580      	push	{r7, lr}
 800847a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800847c:	2200      	movs	r2, #0
 800847e:	4905      	ldr	r1, [pc, #20]	; (8008494 <CDC_Init_FS+0x1c>)
 8008480:	4805      	ldr	r0, [pc, #20]	; (8008498 <CDC_Init_FS+0x20>)
 8008482:	f7fe fc1b 	bl	8006cbc <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008486:	4905      	ldr	r1, [pc, #20]	; (800849c <CDC_Init_FS+0x24>)
 8008488:	4803      	ldr	r0, [pc, #12]	; (8008498 <CDC_Init_FS+0x20>)
 800848a:	f7fe fc39 	bl	8006d00 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800848e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008490:	4618      	mov	r0, r3
 8008492:	bd80      	pop	{r7, pc}
 8008494:	2000124c 	.word	0x2000124c
 8008498:	20000770 	.word	0x20000770
 800849c:	20000a4c 	.word	0x20000a4c

080084a0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80084a0:	b480      	push	{r7}
 80084a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80084a4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80084a6:	4618      	mov	r0, r3
 80084a8:	46bd      	mov	sp, r7
 80084aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ae:	4770      	bx	lr

080084b0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80084b0:	b480      	push	{r7}
 80084b2:	b083      	sub	sp, #12
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	4603      	mov	r3, r0
 80084b8:	6039      	str	r1, [r7, #0]
 80084ba:	71fb      	strb	r3, [r7, #7]
 80084bc:	4613      	mov	r3, r2
 80084be:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80084c0:	79fb      	ldrb	r3, [r7, #7]
 80084c2:	2b23      	cmp	r3, #35	; 0x23
 80084c4:	f200 80a3 	bhi.w	800860e <CDC_Control_FS+0x15e>
 80084c8:	a201      	add	r2, pc, #4	; (adr r2, 80084d0 <CDC_Control_FS+0x20>)
 80084ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084ce:	bf00      	nop
 80084d0:	0800860f 	.word	0x0800860f
 80084d4:	0800860f 	.word	0x0800860f
 80084d8:	0800860f 	.word	0x0800860f
 80084dc:	0800860f 	.word	0x0800860f
 80084e0:	0800860f 	.word	0x0800860f
 80084e4:	0800860f 	.word	0x0800860f
 80084e8:	0800860f 	.word	0x0800860f
 80084ec:	0800860f 	.word	0x0800860f
 80084f0:	0800860f 	.word	0x0800860f
 80084f4:	0800860f 	.word	0x0800860f
 80084f8:	0800860f 	.word	0x0800860f
 80084fc:	0800860f 	.word	0x0800860f
 8008500:	0800860f 	.word	0x0800860f
 8008504:	0800860f 	.word	0x0800860f
 8008508:	0800860f 	.word	0x0800860f
 800850c:	0800860f 	.word	0x0800860f
 8008510:	0800860f 	.word	0x0800860f
 8008514:	0800860f 	.word	0x0800860f
 8008518:	0800860f 	.word	0x0800860f
 800851c:	0800860f 	.word	0x0800860f
 8008520:	0800860f 	.word	0x0800860f
 8008524:	0800860f 	.word	0x0800860f
 8008528:	0800860f 	.word	0x0800860f
 800852c:	0800860f 	.word	0x0800860f
 8008530:	0800860f 	.word	0x0800860f
 8008534:	0800860f 	.word	0x0800860f
 8008538:	0800860f 	.word	0x0800860f
 800853c:	0800860f 	.word	0x0800860f
 8008540:	0800860f 	.word	0x0800860f
 8008544:	0800860f 	.word	0x0800860f
 8008548:	0800860f 	.word	0x0800860f
 800854c:	0800860f 	.word	0x0800860f
 8008550:	08008561 	.word	0x08008561
 8008554:	080085bb 	.word	0x080085bb
 8008558:	0800860f 	.word	0x0800860f
 800855c:	0800860f 	.word	0x0800860f
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	Linecoding.bitrate = (uint32_t)(pbuf[0]);
 8008560:	683b      	ldr	r3, [r7, #0]
 8008562:	781b      	ldrb	r3, [r3, #0]
 8008564:	461a      	mov	r2, r3
 8008566:	4b2e      	ldr	r3, [pc, #184]	; (8008620 <CDC_Control_FS+0x170>)
 8008568:	601a      	str	r2, [r3, #0]
    	Linecoding.bitrate |= (uint32_t)(pbuf[1]<<8);
 800856a:	4b2d      	ldr	r3, [pc, #180]	; (8008620 <CDC_Control_FS+0x170>)
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	683a      	ldr	r2, [r7, #0]
 8008570:	3201      	adds	r2, #1
 8008572:	7812      	ldrb	r2, [r2, #0]
 8008574:	0212      	lsls	r2, r2, #8
 8008576:	4313      	orrs	r3, r2
 8008578:	4a29      	ldr	r2, [pc, #164]	; (8008620 <CDC_Control_FS+0x170>)
 800857a:	6013      	str	r3, [r2, #0]
    	Linecoding.bitrate |= (uint32_t)(pbuf[2]<<16);
 800857c:	4b28      	ldr	r3, [pc, #160]	; (8008620 <CDC_Control_FS+0x170>)
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	683a      	ldr	r2, [r7, #0]
 8008582:	3202      	adds	r2, #2
 8008584:	7812      	ldrb	r2, [r2, #0]
 8008586:	0412      	lsls	r2, r2, #16
 8008588:	4313      	orrs	r3, r2
 800858a:	4a25      	ldr	r2, [pc, #148]	; (8008620 <CDC_Control_FS+0x170>)
 800858c:	6013      	str	r3, [r2, #0]
    	Linecoding.bitrate |= (uint32_t)(pbuf[3]<<24);
 800858e:	4b24      	ldr	r3, [pc, #144]	; (8008620 <CDC_Control_FS+0x170>)
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	683a      	ldr	r2, [r7, #0]
 8008594:	3203      	adds	r2, #3
 8008596:	7812      	ldrb	r2, [r2, #0]
 8008598:	0612      	lsls	r2, r2, #24
 800859a:	4313      	orrs	r3, r2
 800859c:	4a20      	ldr	r2, [pc, #128]	; (8008620 <CDC_Control_FS+0x170>)
 800859e:	6013      	str	r3, [r2, #0]
    	Linecoding.format = pbuf[4];
 80085a0:	683b      	ldr	r3, [r7, #0]
 80085a2:	791a      	ldrb	r2, [r3, #4]
 80085a4:	4b1e      	ldr	r3, [pc, #120]	; (8008620 <CDC_Control_FS+0x170>)
 80085a6:	711a      	strb	r2, [r3, #4]
    	Linecoding.paritytype = pbuf[5];
 80085a8:	683b      	ldr	r3, [r7, #0]
 80085aa:	795a      	ldrb	r2, [r3, #5]
 80085ac:	4b1c      	ldr	r3, [pc, #112]	; (8008620 <CDC_Control_FS+0x170>)
 80085ae:	715a      	strb	r2, [r3, #5]
    	Linecoding.datatype = pbuf[6];
 80085b0:	683b      	ldr	r3, [r7, #0]
 80085b2:	799a      	ldrb	r2, [r3, #6]
 80085b4:	4b1a      	ldr	r3, [pc, #104]	; (8008620 <CDC_Control_FS+0x170>)
 80085b6:	719a      	strb	r2, [r3, #6]
    break;
 80085b8:	e02a      	b.n	8008610 <CDC_Control_FS+0x160>

    case CDC_GET_LINE_CODING:
      pbuf[0] = (uint8_t)(Linecoding.bitrate);
 80085ba:	4b19      	ldr	r3, [pc, #100]	; (8008620 <CDC_Control_FS+0x170>)
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	b2da      	uxtb	r2, r3
 80085c0:	683b      	ldr	r3, [r7, #0]
 80085c2:	701a      	strb	r2, [r3, #0]
      pbuf[1] = (uint8_t)(Linecoding.bitrate>>8);
 80085c4:	4b16      	ldr	r3, [pc, #88]	; (8008620 <CDC_Control_FS+0x170>)
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	0a1a      	lsrs	r2, r3, #8
 80085ca:	683b      	ldr	r3, [r7, #0]
 80085cc:	3301      	adds	r3, #1
 80085ce:	b2d2      	uxtb	r2, r2
 80085d0:	701a      	strb	r2, [r3, #0]
      pbuf[2] = (uint8_t)(Linecoding.bitrate>>16);
 80085d2:	4b13      	ldr	r3, [pc, #76]	; (8008620 <CDC_Control_FS+0x170>)
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	0c1a      	lsrs	r2, r3, #16
 80085d8:	683b      	ldr	r3, [r7, #0]
 80085da:	3302      	adds	r3, #2
 80085dc:	b2d2      	uxtb	r2, r2
 80085de:	701a      	strb	r2, [r3, #0]
      pbuf[3] = (uint8_t)(Linecoding.bitrate>>24);
 80085e0:	4b0f      	ldr	r3, [pc, #60]	; (8008620 <CDC_Control_FS+0x170>)
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	0e1a      	lsrs	r2, r3, #24
 80085e6:	683b      	ldr	r3, [r7, #0]
 80085e8:	3303      	adds	r3, #3
 80085ea:	b2d2      	uxtb	r2, r2
 80085ec:	701a      	strb	r2, [r3, #0]
      pbuf[4] = Linecoding.format;
 80085ee:	683b      	ldr	r3, [r7, #0]
 80085f0:	3304      	adds	r3, #4
 80085f2:	4a0b      	ldr	r2, [pc, #44]	; (8008620 <CDC_Control_FS+0x170>)
 80085f4:	7912      	ldrb	r2, [r2, #4]
 80085f6:	701a      	strb	r2, [r3, #0]
      pbuf[5] = Linecoding.paritytype;
 80085f8:	683b      	ldr	r3, [r7, #0]
 80085fa:	3305      	adds	r3, #5
 80085fc:	4a08      	ldr	r2, [pc, #32]	; (8008620 <CDC_Control_FS+0x170>)
 80085fe:	7952      	ldrb	r2, [r2, #5]
 8008600:	701a      	strb	r2, [r3, #0]
      pbuf[6] = Linecoding.datatype;
 8008602:	683b      	ldr	r3, [r7, #0]
 8008604:	3306      	adds	r3, #6
 8008606:	4a06      	ldr	r2, [pc, #24]	; (8008620 <CDC_Control_FS+0x170>)
 8008608:	7992      	ldrb	r2, [r2, #6]
 800860a:	701a      	strb	r2, [r3, #0]
    break;
 800860c:	e000      	b.n	8008610 <CDC_Control_FS+0x160>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800860e:	bf00      	nop
  }

  return (USBD_OK);
 8008610:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008612:	4618      	mov	r0, r3
 8008614:	370c      	adds	r7, #12
 8008616:	46bd      	mov	sp, r7
 8008618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800861c:	4770      	bx	lr
 800861e:	bf00      	nop
 8008620:	20000098 	.word	0x20000098

08008624 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008624:	b580      	push	{r7, lr}
 8008626:	b084      	sub	sp, #16
 8008628:	af00      	add	r7, sp, #0
 800862a:	6078      	str	r0, [r7, #4]
 800862c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800862e:	6879      	ldr	r1, [r7, #4]
 8008630:	480e      	ldr	r0, [pc, #56]	; (800866c <CDC_Receive_FS+0x48>)
 8008632:	f7fe fb65 	bl	8006d00 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008636:	480d      	ldr	r0, [pc, #52]	; (800866c <CDC_Receive_FS+0x48>)
 8008638:	f7fe fbc0 	bl	8006dbc <USBD_CDC_ReceivePacket>

  for(int i=0; i<*Len; i++)
 800863c:	2300      	movs	r3, #0
 800863e:	60fb      	str	r3, [r7, #12]
 8008640:	e009      	b.n	8008656 <CDC_Receive_FS+0x32>
  {
  	cdcDataIn(Buf[i]);
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	687a      	ldr	r2, [r7, #4]
 8008646:	4413      	add	r3, r2
 8008648:	781b      	ldrb	r3, [r3, #0]
 800864a:	4618      	mov	r0, r3
 800864c:	f7f8 fab8 	bl	8000bc0 <cdcDataIn>
  for(int i=0; i<*Len; i++)
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	3301      	adds	r3, #1
 8008654:	60fb      	str	r3, [r7, #12]
 8008656:	683b      	ldr	r3, [r7, #0]
 8008658:	681a      	ldr	r2, [r3, #0]
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	429a      	cmp	r2, r3
 800865e:	d8f0      	bhi.n	8008642 <CDC_Receive_FS+0x1e>
  }

  return (USBD_OK);
 8008660:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008662:	4618      	mov	r0, r3
 8008664:	3710      	adds	r7, #16
 8008666:	46bd      	mov	sp, r7
 8008668:	bd80      	pop	{r7, pc}
 800866a:	bf00      	nop
 800866c:	20000770 	.word	0x20000770

08008670 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008670:	b580      	push	{r7, lr}
 8008672:	b084      	sub	sp, #16
 8008674:	af00      	add	r7, sp, #0
 8008676:	6078      	str	r0, [r7, #4]
 8008678:	460b      	mov	r3, r1
 800867a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800867c:	2300      	movs	r3, #0
 800867e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008680:	4b0d      	ldr	r3, [pc, #52]	; (80086b8 <CDC_Transmit_FS+0x48>)
 8008682:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008686:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008688:	68bb      	ldr	r3, [r7, #8]
 800868a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800868e:	2b00      	cmp	r3, #0
 8008690:	d001      	beq.n	8008696 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8008692:	2301      	movs	r3, #1
 8008694:	e00b      	b.n	80086ae <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008696:	887b      	ldrh	r3, [r7, #2]
 8008698:	461a      	mov	r2, r3
 800869a:	6879      	ldr	r1, [r7, #4]
 800869c:	4806      	ldr	r0, [pc, #24]	; (80086b8 <CDC_Transmit_FS+0x48>)
 800869e:	f7fe fb0d 	bl	8006cbc <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80086a2:	4805      	ldr	r0, [pc, #20]	; (80086b8 <CDC_Transmit_FS+0x48>)
 80086a4:	f7fe fb4a 	bl	8006d3c <USBD_CDC_TransmitPacket>
 80086a8:	4603      	mov	r3, r0
 80086aa:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80086ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80086ae:	4618      	mov	r0, r3
 80086b0:	3710      	adds	r7, #16
 80086b2:	46bd      	mov	sp, r7
 80086b4:	bd80      	pop	{r7, pc}
 80086b6:	bf00      	nop
 80086b8:	20000770 	.word	0x20000770

080086bc <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80086bc:	b480      	push	{r7}
 80086be:	b087      	sub	sp, #28
 80086c0:	af00      	add	r7, sp, #0
 80086c2:	60f8      	str	r0, [r7, #12]
 80086c4:	60b9      	str	r1, [r7, #8]
 80086c6:	4613      	mov	r3, r2
 80086c8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80086ca:	2300      	movs	r3, #0
 80086cc:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80086ce:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80086d2:	4618      	mov	r0, r3
 80086d4:	371c      	adds	r7, #28
 80086d6:	46bd      	mov	sp, r7
 80086d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086dc:	4770      	bx	lr
	...

080086e0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80086e0:	b480      	push	{r7}
 80086e2:	b083      	sub	sp, #12
 80086e4:	af00      	add	r7, sp, #0
 80086e6:	4603      	mov	r3, r0
 80086e8:	6039      	str	r1, [r7, #0]
 80086ea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80086ec:	683b      	ldr	r3, [r7, #0]
 80086ee:	2212      	movs	r2, #18
 80086f0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80086f2:	4b03      	ldr	r3, [pc, #12]	; (8008700 <USBD_FS_DeviceDescriptor+0x20>)
}
 80086f4:	4618      	mov	r0, r3
 80086f6:	370c      	adds	r7, #12
 80086f8:	46bd      	mov	sp, r7
 80086fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086fe:	4770      	bx	lr
 8008700:	200000d0 	.word	0x200000d0

08008704 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008704:	b480      	push	{r7}
 8008706:	b083      	sub	sp, #12
 8008708:	af00      	add	r7, sp, #0
 800870a:	4603      	mov	r3, r0
 800870c:	6039      	str	r1, [r7, #0]
 800870e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008710:	683b      	ldr	r3, [r7, #0]
 8008712:	2204      	movs	r2, #4
 8008714:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008716:	4b03      	ldr	r3, [pc, #12]	; (8008724 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008718:	4618      	mov	r0, r3
 800871a:	370c      	adds	r7, #12
 800871c:	46bd      	mov	sp, r7
 800871e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008722:	4770      	bx	lr
 8008724:	200000e4 	.word	0x200000e4

08008728 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008728:	b580      	push	{r7, lr}
 800872a:	b082      	sub	sp, #8
 800872c:	af00      	add	r7, sp, #0
 800872e:	4603      	mov	r3, r0
 8008730:	6039      	str	r1, [r7, #0]
 8008732:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008734:	79fb      	ldrb	r3, [r7, #7]
 8008736:	2b00      	cmp	r3, #0
 8008738:	d105      	bne.n	8008746 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800873a:	683a      	ldr	r2, [r7, #0]
 800873c:	4907      	ldr	r1, [pc, #28]	; (800875c <USBD_FS_ProductStrDescriptor+0x34>)
 800873e:	4808      	ldr	r0, [pc, #32]	; (8008760 <USBD_FS_ProductStrDescriptor+0x38>)
 8008740:	f7ff fd8a 	bl	8008258 <USBD_GetString>
 8008744:	e004      	b.n	8008750 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008746:	683a      	ldr	r2, [r7, #0]
 8008748:	4904      	ldr	r1, [pc, #16]	; (800875c <USBD_FS_ProductStrDescriptor+0x34>)
 800874a:	4805      	ldr	r0, [pc, #20]	; (8008760 <USBD_FS_ProductStrDescriptor+0x38>)
 800874c:	f7ff fd84 	bl	8008258 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008750:	4b02      	ldr	r3, [pc, #8]	; (800875c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008752:	4618      	mov	r0, r3
 8008754:	3708      	adds	r7, #8
 8008756:	46bd      	mov	sp, r7
 8008758:	bd80      	pop	{r7, pc}
 800875a:	bf00      	nop
 800875c:	20001a4c 	.word	0x20001a4c
 8008760:	080098bc 	.word	0x080098bc

08008764 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008764:	b580      	push	{r7, lr}
 8008766:	b082      	sub	sp, #8
 8008768:	af00      	add	r7, sp, #0
 800876a:	4603      	mov	r3, r0
 800876c:	6039      	str	r1, [r7, #0]
 800876e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008770:	683a      	ldr	r2, [r7, #0]
 8008772:	4904      	ldr	r1, [pc, #16]	; (8008784 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008774:	4804      	ldr	r0, [pc, #16]	; (8008788 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008776:	f7ff fd6f 	bl	8008258 <USBD_GetString>
  return USBD_StrDesc;
 800877a:	4b02      	ldr	r3, [pc, #8]	; (8008784 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800877c:	4618      	mov	r0, r3
 800877e:	3708      	adds	r7, #8
 8008780:	46bd      	mov	sp, r7
 8008782:	bd80      	pop	{r7, pc}
 8008784:	20001a4c 	.word	0x20001a4c
 8008788:	080098d4 	.word	0x080098d4

0800878c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800878c:	b580      	push	{r7, lr}
 800878e:	b082      	sub	sp, #8
 8008790:	af00      	add	r7, sp, #0
 8008792:	4603      	mov	r3, r0
 8008794:	6039      	str	r1, [r7, #0]
 8008796:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008798:	683b      	ldr	r3, [r7, #0]
 800879a:	221a      	movs	r2, #26
 800879c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800879e:	f000 f843 	bl	8008828 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80087a2:	4b02      	ldr	r3, [pc, #8]	; (80087ac <USBD_FS_SerialStrDescriptor+0x20>)
}
 80087a4:	4618      	mov	r0, r3
 80087a6:	3708      	adds	r7, #8
 80087a8:	46bd      	mov	sp, r7
 80087aa:	bd80      	pop	{r7, pc}
 80087ac:	200000e8 	.word	0x200000e8

080087b0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80087b0:	b580      	push	{r7, lr}
 80087b2:	b082      	sub	sp, #8
 80087b4:	af00      	add	r7, sp, #0
 80087b6:	4603      	mov	r3, r0
 80087b8:	6039      	str	r1, [r7, #0]
 80087ba:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80087bc:	79fb      	ldrb	r3, [r7, #7]
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d105      	bne.n	80087ce <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80087c2:	683a      	ldr	r2, [r7, #0]
 80087c4:	4907      	ldr	r1, [pc, #28]	; (80087e4 <USBD_FS_ConfigStrDescriptor+0x34>)
 80087c6:	4808      	ldr	r0, [pc, #32]	; (80087e8 <USBD_FS_ConfigStrDescriptor+0x38>)
 80087c8:	f7ff fd46 	bl	8008258 <USBD_GetString>
 80087cc:	e004      	b.n	80087d8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80087ce:	683a      	ldr	r2, [r7, #0]
 80087d0:	4904      	ldr	r1, [pc, #16]	; (80087e4 <USBD_FS_ConfigStrDescriptor+0x34>)
 80087d2:	4805      	ldr	r0, [pc, #20]	; (80087e8 <USBD_FS_ConfigStrDescriptor+0x38>)
 80087d4:	f7ff fd40 	bl	8008258 <USBD_GetString>
  }
  return USBD_StrDesc;
 80087d8:	4b02      	ldr	r3, [pc, #8]	; (80087e4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80087da:	4618      	mov	r0, r3
 80087dc:	3708      	adds	r7, #8
 80087de:	46bd      	mov	sp, r7
 80087e0:	bd80      	pop	{r7, pc}
 80087e2:	bf00      	nop
 80087e4:	20001a4c 	.word	0x20001a4c
 80087e8:	080098e8 	.word	0x080098e8

080087ec <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80087ec:	b580      	push	{r7, lr}
 80087ee:	b082      	sub	sp, #8
 80087f0:	af00      	add	r7, sp, #0
 80087f2:	4603      	mov	r3, r0
 80087f4:	6039      	str	r1, [r7, #0]
 80087f6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80087f8:	79fb      	ldrb	r3, [r7, #7]
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d105      	bne.n	800880a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80087fe:	683a      	ldr	r2, [r7, #0]
 8008800:	4907      	ldr	r1, [pc, #28]	; (8008820 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008802:	4808      	ldr	r0, [pc, #32]	; (8008824 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008804:	f7ff fd28 	bl	8008258 <USBD_GetString>
 8008808:	e004      	b.n	8008814 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800880a:	683a      	ldr	r2, [r7, #0]
 800880c:	4904      	ldr	r1, [pc, #16]	; (8008820 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800880e:	4805      	ldr	r0, [pc, #20]	; (8008824 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008810:	f7ff fd22 	bl	8008258 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008814:	4b02      	ldr	r3, [pc, #8]	; (8008820 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008816:	4618      	mov	r0, r3
 8008818:	3708      	adds	r7, #8
 800881a:	46bd      	mov	sp, r7
 800881c:	bd80      	pop	{r7, pc}
 800881e:	bf00      	nop
 8008820:	20001a4c 	.word	0x20001a4c
 8008824:	080098f4 	.word	0x080098f4

08008828 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008828:	b580      	push	{r7, lr}
 800882a:	b084      	sub	sp, #16
 800882c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800882e:	4b0f      	ldr	r3, [pc, #60]	; (800886c <Get_SerialNum+0x44>)
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008834:	4b0e      	ldr	r3, [pc, #56]	; (8008870 <Get_SerialNum+0x48>)
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800883a:	4b0e      	ldr	r3, [pc, #56]	; (8008874 <Get_SerialNum+0x4c>)
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008840:	68fa      	ldr	r2, [r7, #12]
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	4413      	add	r3, r2
 8008846:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	2b00      	cmp	r3, #0
 800884c:	d009      	beq.n	8008862 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800884e:	2208      	movs	r2, #8
 8008850:	4909      	ldr	r1, [pc, #36]	; (8008878 <Get_SerialNum+0x50>)
 8008852:	68f8      	ldr	r0, [r7, #12]
 8008854:	f000 f814 	bl	8008880 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008858:	2204      	movs	r2, #4
 800885a:	4908      	ldr	r1, [pc, #32]	; (800887c <Get_SerialNum+0x54>)
 800885c:	68b8      	ldr	r0, [r7, #8]
 800885e:	f000 f80f 	bl	8008880 <IntToUnicode>
  }
}
 8008862:	bf00      	nop
 8008864:	3710      	adds	r7, #16
 8008866:	46bd      	mov	sp, r7
 8008868:	bd80      	pop	{r7, pc}
 800886a:	bf00      	nop
 800886c:	1fff7a10 	.word	0x1fff7a10
 8008870:	1fff7a14 	.word	0x1fff7a14
 8008874:	1fff7a18 	.word	0x1fff7a18
 8008878:	200000ea 	.word	0x200000ea
 800887c:	200000fa 	.word	0x200000fa

08008880 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008880:	b480      	push	{r7}
 8008882:	b087      	sub	sp, #28
 8008884:	af00      	add	r7, sp, #0
 8008886:	60f8      	str	r0, [r7, #12]
 8008888:	60b9      	str	r1, [r7, #8]
 800888a:	4613      	mov	r3, r2
 800888c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800888e:	2300      	movs	r3, #0
 8008890:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008892:	2300      	movs	r3, #0
 8008894:	75fb      	strb	r3, [r7, #23]
 8008896:	e027      	b.n	80088e8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	0f1b      	lsrs	r3, r3, #28
 800889c:	2b09      	cmp	r3, #9
 800889e:	d80b      	bhi.n	80088b8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	0f1b      	lsrs	r3, r3, #28
 80088a4:	b2da      	uxtb	r2, r3
 80088a6:	7dfb      	ldrb	r3, [r7, #23]
 80088a8:	005b      	lsls	r3, r3, #1
 80088aa:	4619      	mov	r1, r3
 80088ac:	68bb      	ldr	r3, [r7, #8]
 80088ae:	440b      	add	r3, r1
 80088b0:	3230      	adds	r2, #48	; 0x30
 80088b2:	b2d2      	uxtb	r2, r2
 80088b4:	701a      	strb	r2, [r3, #0]
 80088b6:	e00a      	b.n	80088ce <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	0f1b      	lsrs	r3, r3, #28
 80088bc:	b2da      	uxtb	r2, r3
 80088be:	7dfb      	ldrb	r3, [r7, #23]
 80088c0:	005b      	lsls	r3, r3, #1
 80088c2:	4619      	mov	r1, r3
 80088c4:	68bb      	ldr	r3, [r7, #8]
 80088c6:	440b      	add	r3, r1
 80088c8:	3237      	adds	r2, #55	; 0x37
 80088ca:	b2d2      	uxtb	r2, r2
 80088cc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	011b      	lsls	r3, r3, #4
 80088d2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80088d4:	7dfb      	ldrb	r3, [r7, #23]
 80088d6:	005b      	lsls	r3, r3, #1
 80088d8:	3301      	adds	r3, #1
 80088da:	68ba      	ldr	r2, [r7, #8]
 80088dc:	4413      	add	r3, r2
 80088de:	2200      	movs	r2, #0
 80088e0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80088e2:	7dfb      	ldrb	r3, [r7, #23]
 80088e4:	3301      	adds	r3, #1
 80088e6:	75fb      	strb	r3, [r7, #23]
 80088e8:	7dfa      	ldrb	r2, [r7, #23]
 80088ea:	79fb      	ldrb	r3, [r7, #7]
 80088ec:	429a      	cmp	r2, r3
 80088ee:	d3d3      	bcc.n	8008898 <IntToUnicode+0x18>
  }
}
 80088f0:	bf00      	nop
 80088f2:	bf00      	nop
 80088f4:	371c      	adds	r7, #28
 80088f6:	46bd      	mov	sp, r7
 80088f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088fc:	4770      	bx	lr
	...

08008900 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008900:	b580      	push	{r7, lr}
 8008902:	b08a      	sub	sp, #40	; 0x28
 8008904:	af00      	add	r7, sp, #0
 8008906:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008908:	f107 0314 	add.w	r3, r7, #20
 800890c:	2200      	movs	r2, #0
 800890e:	601a      	str	r2, [r3, #0]
 8008910:	605a      	str	r2, [r3, #4]
 8008912:	609a      	str	r2, [r3, #8]
 8008914:	60da      	str	r2, [r3, #12]
 8008916:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008920:	d13a      	bne.n	8008998 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008922:	2300      	movs	r3, #0
 8008924:	613b      	str	r3, [r7, #16]
 8008926:	4b1e      	ldr	r3, [pc, #120]	; (80089a0 <HAL_PCD_MspInit+0xa0>)
 8008928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800892a:	4a1d      	ldr	r2, [pc, #116]	; (80089a0 <HAL_PCD_MspInit+0xa0>)
 800892c:	f043 0301 	orr.w	r3, r3, #1
 8008930:	6313      	str	r3, [r2, #48]	; 0x30
 8008932:	4b1b      	ldr	r3, [pc, #108]	; (80089a0 <HAL_PCD_MspInit+0xa0>)
 8008934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008936:	f003 0301 	and.w	r3, r3, #1
 800893a:	613b      	str	r3, [r7, #16]
 800893c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA8     ------> USB_OTG_FS_SOF
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 800893e:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8008942:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008944:	2302      	movs	r3, #2
 8008946:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008948:	2300      	movs	r3, #0
 800894a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800894c:	2303      	movs	r3, #3
 800894e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008950:	230a      	movs	r3, #10
 8008952:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008954:	f107 0314 	add.w	r3, r7, #20
 8008958:	4619      	mov	r1, r3
 800895a:	4812      	ldr	r0, [pc, #72]	; (80089a4 <HAL_PCD_MspInit+0xa4>)
 800895c:	f7f9 f834 	bl	80019c8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008960:	4b0f      	ldr	r3, [pc, #60]	; (80089a0 <HAL_PCD_MspInit+0xa0>)
 8008962:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008964:	4a0e      	ldr	r2, [pc, #56]	; (80089a0 <HAL_PCD_MspInit+0xa0>)
 8008966:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800896a:	6353      	str	r3, [r2, #52]	; 0x34
 800896c:	2300      	movs	r3, #0
 800896e:	60fb      	str	r3, [r7, #12]
 8008970:	4b0b      	ldr	r3, [pc, #44]	; (80089a0 <HAL_PCD_MspInit+0xa0>)
 8008972:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008974:	4a0a      	ldr	r2, [pc, #40]	; (80089a0 <HAL_PCD_MspInit+0xa0>)
 8008976:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800897a:	6453      	str	r3, [r2, #68]	; 0x44
 800897c:	4b08      	ldr	r3, [pc, #32]	; (80089a0 <HAL_PCD_MspInit+0xa0>)
 800897e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008980:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008984:	60fb      	str	r3, [r7, #12]
 8008986:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008988:	2200      	movs	r2, #0
 800898a:	2100      	movs	r1, #0
 800898c:	2043      	movs	r0, #67	; 0x43
 800898e:	f7f8 fbe2 	bl	8001156 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008992:	2043      	movs	r0, #67	; 0x43
 8008994:	f7f8 fbfb 	bl	800118e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008998:	bf00      	nop
 800899a:	3728      	adds	r7, #40	; 0x28
 800899c:	46bd      	mov	sp, r7
 800899e:	bd80      	pop	{r7, pc}
 80089a0:	40023800 	.word	0x40023800
 80089a4:	40020000 	.word	0x40020000

080089a8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80089a8:	b580      	push	{r7, lr}
 80089aa:	b082      	sub	sp, #8
 80089ac:	af00      	add	r7, sp, #0
 80089ae:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	; 0x4e0
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 80089bc:	4619      	mov	r1, r3
 80089be:	4610      	mov	r0, r2
 80089c0:	f7fe fae5 	bl	8006f8e <USBD_LL_SetupStage>
}
 80089c4:	bf00      	nop
 80089c6:	3708      	adds	r7, #8
 80089c8:	46bd      	mov	sp, r7
 80089ca:	bd80      	pop	{r7, pc}

080089cc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80089cc:	b580      	push	{r7, lr}
 80089ce:	b082      	sub	sp, #8
 80089d0:	af00      	add	r7, sp, #0
 80089d2:	6078      	str	r0, [r7, #4]
 80089d4:	460b      	mov	r3, r1
 80089d6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 80089de:	78fa      	ldrb	r2, [r7, #3]
 80089e0:	6879      	ldr	r1, [r7, #4]
 80089e2:	4613      	mov	r3, r2
 80089e4:	00db      	lsls	r3, r3, #3
 80089e6:	4413      	add	r3, r2
 80089e8:	009b      	lsls	r3, r3, #2
 80089ea:	440b      	add	r3, r1
 80089ec:	f503 7318 	add.w	r3, r3, #608	; 0x260
 80089f0:	681a      	ldr	r2, [r3, #0]
 80089f2:	78fb      	ldrb	r3, [r7, #3]
 80089f4:	4619      	mov	r1, r3
 80089f6:	f7fe fb1f 	bl	8007038 <USBD_LL_DataOutStage>
}
 80089fa:	bf00      	nop
 80089fc:	3708      	adds	r7, #8
 80089fe:	46bd      	mov	sp, r7
 8008a00:	bd80      	pop	{r7, pc}

08008a02 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a02:	b580      	push	{r7, lr}
 8008a04:	b082      	sub	sp, #8
 8008a06:	af00      	add	r7, sp, #0
 8008a08:	6078      	str	r0, [r7, #4]
 8008a0a:	460b      	mov	r3, r1
 8008a0c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 8008a14:	78fa      	ldrb	r2, [r7, #3]
 8008a16:	6879      	ldr	r1, [r7, #4]
 8008a18:	4613      	mov	r3, r2
 8008a1a:	00db      	lsls	r3, r3, #3
 8008a1c:	4413      	add	r3, r2
 8008a1e:	009b      	lsls	r3, r3, #2
 8008a20:	440b      	add	r3, r1
 8008a22:	3320      	adds	r3, #32
 8008a24:	681a      	ldr	r2, [r3, #0]
 8008a26:	78fb      	ldrb	r3, [r7, #3]
 8008a28:	4619      	mov	r1, r3
 8008a2a:	f7fe fbb8 	bl	800719e <USBD_LL_DataInStage>
}
 8008a2e:	bf00      	nop
 8008a30:	3708      	adds	r7, #8
 8008a32:	46bd      	mov	sp, r7
 8008a34:	bd80      	pop	{r7, pc}

08008a36 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a36:	b580      	push	{r7, lr}
 8008a38:	b082      	sub	sp, #8
 8008a3a:	af00      	add	r7, sp, #0
 8008a3c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8008a44:	4618      	mov	r0, r3
 8008a46:	f7fe fcf2 	bl	800742e <USBD_LL_SOF>
}
 8008a4a:	bf00      	nop
 8008a4c:	3708      	adds	r7, #8
 8008a4e:	46bd      	mov	sp, r7
 8008a50:	bd80      	pop	{r7, pc}

08008a52 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a52:	b580      	push	{r7, lr}
 8008a54:	b084      	sub	sp, #16
 8008a56:	af00      	add	r7, sp, #0
 8008a58:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008a5a:	2301      	movs	r3, #1
 8008a5c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	79db      	ldrb	r3, [r3, #7]
 8008a62:	2b02      	cmp	r3, #2
 8008a64:	d001      	beq.n	8008a6a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008a66:	f7f7 fe61 	bl	800072c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8008a70:	7bfa      	ldrb	r2, [r7, #15]
 8008a72:	4611      	mov	r1, r2
 8008a74:	4618      	mov	r0, r3
 8008a76:	f7fe fc96 	bl	80073a6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8008a80:	4618      	mov	r0, r3
 8008a82:	f7fe fc3e 	bl	8007302 <USBD_LL_Reset>
}
 8008a86:	bf00      	nop
 8008a88:	3710      	adds	r7, #16
 8008a8a:	46bd      	mov	sp, r7
 8008a8c:	bd80      	pop	{r7, pc}
	...

08008a90 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a90:	b580      	push	{r7, lr}
 8008a92:	b082      	sub	sp, #8
 8008a94:	af00      	add	r7, sp, #0
 8008a96:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8008a9e:	4618      	mov	r0, r3
 8008aa0:	f7fe fc91 	bl	80073c6 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	687a      	ldr	r2, [r7, #4]
 8008ab0:	6812      	ldr	r2, [r2, #0]
 8008ab2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008ab6:	f043 0301 	orr.w	r3, r3, #1
 8008aba:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	7adb      	ldrb	r3, [r3, #11]
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d005      	beq.n	8008ad0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008ac4:	4b04      	ldr	r3, [pc, #16]	; (8008ad8 <HAL_PCD_SuspendCallback+0x48>)
 8008ac6:	691b      	ldr	r3, [r3, #16]
 8008ac8:	4a03      	ldr	r2, [pc, #12]	; (8008ad8 <HAL_PCD_SuspendCallback+0x48>)
 8008aca:	f043 0306 	orr.w	r3, r3, #6
 8008ace:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008ad0:	bf00      	nop
 8008ad2:	3708      	adds	r7, #8
 8008ad4:	46bd      	mov	sp, r7
 8008ad6:	bd80      	pop	{r7, pc}
 8008ad8:	e000ed00 	.word	0xe000ed00

08008adc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008adc:	b580      	push	{r7, lr}
 8008ade:	b082      	sub	sp, #8
 8008ae0:	af00      	add	r7, sp, #0
 8008ae2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8008aea:	4618      	mov	r0, r3
 8008aec:	f7fe fc87 	bl	80073fe <USBD_LL_Resume>
}
 8008af0:	bf00      	nop
 8008af2:	3708      	adds	r7, #8
 8008af4:	46bd      	mov	sp, r7
 8008af6:	bd80      	pop	{r7, pc}

08008af8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008af8:	b580      	push	{r7, lr}
 8008afa:	b082      	sub	sp, #8
 8008afc:	af00      	add	r7, sp, #0
 8008afe:	6078      	str	r0, [r7, #4]
 8008b00:	460b      	mov	r3, r1
 8008b02:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8008b0a:	78fa      	ldrb	r2, [r7, #3]
 8008b0c:	4611      	mov	r1, r2
 8008b0e:	4618      	mov	r0, r3
 8008b10:	f7fe fcdf 	bl	80074d2 <USBD_LL_IsoOUTIncomplete>
}
 8008b14:	bf00      	nop
 8008b16:	3708      	adds	r7, #8
 8008b18:	46bd      	mov	sp, r7
 8008b1a:	bd80      	pop	{r7, pc}

08008b1c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b1c:	b580      	push	{r7, lr}
 8008b1e:	b082      	sub	sp, #8
 8008b20:	af00      	add	r7, sp, #0
 8008b22:	6078      	str	r0, [r7, #4]
 8008b24:	460b      	mov	r3, r1
 8008b26:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8008b2e:	78fa      	ldrb	r2, [r7, #3]
 8008b30:	4611      	mov	r1, r2
 8008b32:	4618      	mov	r0, r3
 8008b34:	f7fe fc9b 	bl	800746e <USBD_LL_IsoINIncomplete>
}
 8008b38:	bf00      	nop
 8008b3a:	3708      	adds	r7, #8
 8008b3c:	46bd      	mov	sp, r7
 8008b3e:	bd80      	pop	{r7, pc}

08008b40 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b40:	b580      	push	{r7, lr}
 8008b42:	b082      	sub	sp, #8
 8008b44:	af00      	add	r7, sp, #0
 8008b46:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8008b4e:	4618      	mov	r0, r3
 8008b50:	f7fe fcf1 	bl	8007536 <USBD_LL_DevConnected>
}
 8008b54:	bf00      	nop
 8008b56:	3708      	adds	r7, #8
 8008b58:	46bd      	mov	sp, r7
 8008b5a:	bd80      	pop	{r7, pc}

08008b5c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b5c:	b580      	push	{r7, lr}
 8008b5e:	b082      	sub	sp, #8
 8008b60:	af00      	add	r7, sp, #0
 8008b62:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8008b6a:	4618      	mov	r0, r3
 8008b6c:	f7fe fcee 	bl	800754c <USBD_LL_DevDisconnected>
}
 8008b70:	bf00      	nop
 8008b72:	3708      	adds	r7, #8
 8008b74:	46bd      	mov	sp, r7
 8008b76:	bd80      	pop	{r7, pc}

08008b78 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008b78:	b580      	push	{r7, lr}
 8008b7a:	b082      	sub	sp, #8
 8008b7c:	af00      	add	r7, sp, #0
 8008b7e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	781b      	ldrb	r3, [r3, #0]
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d13c      	bne.n	8008c02 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008b88:	4a20      	ldr	r2, [pc, #128]	; (8008c0c <USBD_LL_Init+0x94>)
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	f8c2 34e0 	str.w	r3, [r2, #1248]	; 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	4a1e      	ldr	r2, [pc, #120]	; (8008c0c <USBD_LL_Init+0x94>)
 8008b94:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008b98:	4b1c      	ldr	r3, [pc, #112]	; (8008c0c <USBD_LL_Init+0x94>)
 8008b9a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008b9e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8008ba0:	4b1a      	ldr	r3, [pc, #104]	; (8008c0c <USBD_LL_Init+0x94>)
 8008ba2:	2204      	movs	r2, #4
 8008ba4:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8008ba6:	4b19      	ldr	r3, [pc, #100]	; (8008c0c <USBD_LL_Init+0x94>)
 8008ba8:	2202      	movs	r2, #2
 8008baa:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008bac:	4b17      	ldr	r3, [pc, #92]	; (8008c0c <USBD_LL_Init+0x94>)
 8008bae:	2200      	movs	r2, #0
 8008bb0:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008bb2:	4b16      	ldr	r3, [pc, #88]	; (8008c0c <USBD_LL_Init+0x94>)
 8008bb4:	2202      	movs	r2, #2
 8008bb6:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8008bb8:	4b14      	ldr	r3, [pc, #80]	; (8008c0c <USBD_LL_Init+0x94>)
 8008bba:	2201      	movs	r2, #1
 8008bbc:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008bbe:	4b13      	ldr	r3, [pc, #76]	; (8008c0c <USBD_LL_Init+0x94>)
 8008bc0:	2200      	movs	r2, #0
 8008bc2:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008bc4:	4b11      	ldr	r3, [pc, #68]	; (8008c0c <USBD_LL_Init+0x94>)
 8008bc6:	2200      	movs	r2, #0
 8008bc8:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8008bca:	4b10      	ldr	r3, [pc, #64]	; (8008c0c <USBD_LL_Init+0x94>)
 8008bcc:	2200      	movs	r2, #0
 8008bce:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008bd0:	4b0e      	ldr	r3, [pc, #56]	; (8008c0c <USBD_LL_Init+0x94>)
 8008bd2:	2200      	movs	r2, #0
 8008bd4:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8008bd6:	480d      	ldr	r0, [pc, #52]	; (8008c0c <USBD_LL_Init+0x94>)
 8008bd8:	f7f9 f87a 	bl	8001cd0 <HAL_PCD_Init>
 8008bdc:	4603      	mov	r3, r0
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d001      	beq.n	8008be6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8008be2:	f7f7 fda3 	bl	800072c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8008be6:	2180      	movs	r1, #128	; 0x80
 8008be8:	4808      	ldr	r0, [pc, #32]	; (8008c0c <USBD_LL_Init+0x94>)
 8008bea:	f7fa faa4 	bl	8003136 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008bee:	2240      	movs	r2, #64	; 0x40
 8008bf0:	2100      	movs	r1, #0
 8008bf2:	4806      	ldr	r0, [pc, #24]	; (8008c0c <USBD_LL_Init+0x94>)
 8008bf4:	f7fa fa58 	bl	80030a8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008bf8:	2280      	movs	r2, #128	; 0x80
 8008bfa:	2101      	movs	r1, #1
 8008bfc:	4803      	ldr	r0, [pc, #12]	; (8008c0c <USBD_LL_Init+0x94>)
 8008bfe:	f7fa fa53 	bl	80030a8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8008c02:	2300      	movs	r3, #0
}
 8008c04:	4618      	mov	r0, r3
 8008c06:	3708      	adds	r7, #8
 8008c08:	46bd      	mov	sp, r7
 8008c0a:	bd80      	pop	{r7, pc}
 8008c0c:	20001c4c 	.word	0x20001c4c

08008c10 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008c10:	b580      	push	{r7, lr}
 8008c12:	b084      	sub	sp, #16
 8008c14:	af00      	add	r7, sp, #0
 8008c16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c18:	2300      	movs	r3, #0
 8008c1a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c1c:	2300      	movs	r3, #0
 8008c1e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008c26:	4618      	mov	r0, r3
 8008c28:	f7f9 f961 	bl	8001eee <HAL_PCD_Start>
 8008c2c:	4603      	mov	r3, r0
 8008c2e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008c30:	7bfb      	ldrb	r3, [r7, #15]
 8008c32:	4618      	mov	r0, r3
 8008c34:	f000 f942 	bl	8008ebc <USBD_Get_USB_Status>
 8008c38:	4603      	mov	r3, r0
 8008c3a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008c3c:	7bbb      	ldrb	r3, [r7, #14]
}
 8008c3e:	4618      	mov	r0, r3
 8008c40:	3710      	adds	r7, #16
 8008c42:	46bd      	mov	sp, r7
 8008c44:	bd80      	pop	{r7, pc}

08008c46 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008c46:	b580      	push	{r7, lr}
 8008c48:	b084      	sub	sp, #16
 8008c4a:	af00      	add	r7, sp, #0
 8008c4c:	6078      	str	r0, [r7, #4]
 8008c4e:	4608      	mov	r0, r1
 8008c50:	4611      	mov	r1, r2
 8008c52:	461a      	mov	r2, r3
 8008c54:	4603      	mov	r3, r0
 8008c56:	70fb      	strb	r3, [r7, #3]
 8008c58:	460b      	mov	r3, r1
 8008c5a:	70bb      	strb	r3, [r7, #2]
 8008c5c:	4613      	mov	r3, r2
 8008c5e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c60:	2300      	movs	r3, #0
 8008c62:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c64:	2300      	movs	r3, #0
 8008c66:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008c6e:	78bb      	ldrb	r3, [r7, #2]
 8008c70:	883a      	ldrh	r2, [r7, #0]
 8008c72:	78f9      	ldrb	r1, [r7, #3]
 8008c74:	f7f9 fe35 	bl	80028e2 <HAL_PCD_EP_Open>
 8008c78:	4603      	mov	r3, r0
 8008c7a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008c7c:	7bfb      	ldrb	r3, [r7, #15]
 8008c7e:	4618      	mov	r0, r3
 8008c80:	f000 f91c 	bl	8008ebc <USBD_Get_USB_Status>
 8008c84:	4603      	mov	r3, r0
 8008c86:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008c88:	7bbb      	ldrb	r3, [r7, #14]
}
 8008c8a:	4618      	mov	r0, r3
 8008c8c:	3710      	adds	r7, #16
 8008c8e:	46bd      	mov	sp, r7
 8008c90:	bd80      	pop	{r7, pc}

08008c92 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008c92:	b580      	push	{r7, lr}
 8008c94:	b084      	sub	sp, #16
 8008c96:	af00      	add	r7, sp, #0
 8008c98:	6078      	str	r0, [r7, #4]
 8008c9a:	460b      	mov	r3, r1
 8008c9c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c9e:	2300      	movs	r3, #0
 8008ca0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ca2:	2300      	movs	r3, #0
 8008ca4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008cac:	78fa      	ldrb	r2, [r7, #3]
 8008cae:	4611      	mov	r1, r2
 8008cb0:	4618      	mov	r0, r3
 8008cb2:	f7f9 fe7e 	bl	80029b2 <HAL_PCD_EP_Close>
 8008cb6:	4603      	mov	r3, r0
 8008cb8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008cba:	7bfb      	ldrb	r3, [r7, #15]
 8008cbc:	4618      	mov	r0, r3
 8008cbe:	f000 f8fd 	bl	8008ebc <USBD_Get_USB_Status>
 8008cc2:	4603      	mov	r3, r0
 8008cc4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008cc6:	7bbb      	ldrb	r3, [r7, #14]
}
 8008cc8:	4618      	mov	r0, r3
 8008cca:	3710      	adds	r7, #16
 8008ccc:	46bd      	mov	sp, r7
 8008cce:	bd80      	pop	{r7, pc}

08008cd0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008cd0:	b580      	push	{r7, lr}
 8008cd2:	b084      	sub	sp, #16
 8008cd4:	af00      	add	r7, sp, #0
 8008cd6:	6078      	str	r0, [r7, #4]
 8008cd8:	460b      	mov	r3, r1
 8008cda:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008cdc:	2300      	movs	r3, #0
 8008cde:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ce0:	2300      	movs	r3, #0
 8008ce2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008cea:	78fa      	ldrb	r2, [r7, #3]
 8008cec:	4611      	mov	r1, r2
 8008cee:	4618      	mov	r0, r3
 8008cf0:	f7f9 ff36 	bl	8002b60 <HAL_PCD_EP_SetStall>
 8008cf4:	4603      	mov	r3, r0
 8008cf6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008cf8:	7bfb      	ldrb	r3, [r7, #15]
 8008cfa:	4618      	mov	r0, r3
 8008cfc:	f000 f8de 	bl	8008ebc <USBD_Get_USB_Status>
 8008d00:	4603      	mov	r3, r0
 8008d02:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008d04:	7bbb      	ldrb	r3, [r7, #14]
}
 8008d06:	4618      	mov	r0, r3
 8008d08:	3710      	adds	r7, #16
 8008d0a:	46bd      	mov	sp, r7
 8008d0c:	bd80      	pop	{r7, pc}

08008d0e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008d0e:	b580      	push	{r7, lr}
 8008d10:	b084      	sub	sp, #16
 8008d12:	af00      	add	r7, sp, #0
 8008d14:	6078      	str	r0, [r7, #4]
 8008d16:	460b      	mov	r3, r1
 8008d18:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d1a:	2300      	movs	r3, #0
 8008d1c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d1e:	2300      	movs	r3, #0
 8008d20:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008d28:	78fa      	ldrb	r2, [r7, #3]
 8008d2a:	4611      	mov	r1, r2
 8008d2c:	4618      	mov	r0, r3
 8008d2e:	f7f9 ff7a 	bl	8002c26 <HAL_PCD_EP_ClrStall>
 8008d32:	4603      	mov	r3, r0
 8008d34:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008d36:	7bfb      	ldrb	r3, [r7, #15]
 8008d38:	4618      	mov	r0, r3
 8008d3a:	f000 f8bf 	bl	8008ebc <USBD_Get_USB_Status>
 8008d3e:	4603      	mov	r3, r0
 8008d40:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008d42:	7bbb      	ldrb	r3, [r7, #14]
}
 8008d44:	4618      	mov	r0, r3
 8008d46:	3710      	adds	r7, #16
 8008d48:	46bd      	mov	sp, r7
 8008d4a:	bd80      	pop	{r7, pc}

08008d4c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008d4c:	b480      	push	{r7}
 8008d4e:	b085      	sub	sp, #20
 8008d50:	af00      	add	r7, sp, #0
 8008d52:	6078      	str	r0, [r7, #4]
 8008d54:	460b      	mov	r3, r1
 8008d56:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008d5e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008d60:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	da0b      	bge.n	8008d80 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008d68:	78fb      	ldrb	r3, [r7, #3]
 8008d6a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008d6e:	68f9      	ldr	r1, [r7, #12]
 8008d70:	4613      	mov	r3, r2
 8008d72:	00db      	lsls	r3, r3, #3
 8008d74:	4413      	add	r3, r2
 8008d76:	009b      	lsls	r3, r3, #2
 8008d78:	440b      	add	r3, r1
 8008d7a:	3316      	adds	r3, #22
 8008d7c:	781b      	ldrb	r3, [r3, #0]
 8008d7e:	e00b      	b.n	8008d98 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008d80:	78fb      	ldrb	r3, [r7, #3]
 8008d82:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008d86:	68f9      	ldr	r1, [r7, #12]
 8008d88:	4613      	mov	r3, r2
 8008d8a:	00db      	lsls	r3, r3, #3
 8008d8c:	4413      	add	r3, r2
 8008d8e:	009b      	lsls	r3, r3, #2
 8008d90:	440b      	add	r3, r1
 8008d92:	f203 2356 	addw	r3, r3, #598	; 0x256
 8008d96:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008d98:	4618      	mov	r0, r3
 8008d9a:	3714      	adds	r7, #20
 8008d9c:	46bd      	mov	sp, r7
 8008d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da2:	4770      	bx	lr

08008da4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008da4:	b580      	push	{r7, lr}
 8008da6:	b084      	sub	sp, #16
 8008da8:	af00      	add	r7, sp, #0
 8008daa:	6078      	str	r0, [r7, #4]
 8008dac:	460b      	mov	r3, r1
 8008dae:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008db0:	2300      	movs	r3, #0
 8008db2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008db4:	2300      	movs	r3, #0
 8008db6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008dbe:	78fa      	ldrb	r2, [r7, #3]
 8008dc0:	4611      	mov	r1, r2
 8008dc2:	4618      	mov	r0, r3
 8008dc4:	f7f9 fd69 	bl	800289a <HAL_PCD_SetAddress>
 8008dc8:	4603      	mov	r3, r0
 8008dca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008dcc:	7bfb      	ldrb	r3, [r7, #15]
 8008dce:	4618      	mov	r0, r3
 8008dd0:	f000 f874 	bl	8008ebc <USBD_Get_USB_Status>
 8008dd4:	4603      	mov	r3, r0
 8008dd6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008dd8:	7bbb      	ldrb	r3, [r7, #14]
}
 8008dda:	4618      	mov	r0, r3
 8008ddc:	3710      	adds	r7, #16
 8008dde:	46bd      	mov	sp, r7
 8008de0:	bd80      	pop	{r7, pc}

08008de2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008de2:	b580      	push	{r7, lr}
 8008de4:	b086      	sub	sp, #24
 8008de6:	af00      	add	r7, sp, #0
 8008de8:	60f8      	str	r0, [r7, #12]
 8008dea:	607a      	str	r2, [r7, #4]
 8008dec:	603b      	str	r3, [r7, #0]
 8008dee:	460b      	mov	r3, r1
 8008df0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008df2:	2300      	movs	r3, #0
 8008df4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008df6:	2300      	movs	r3, #0
 8008df8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008e00:	7af9      	ldrb	r1, [r7, #11]
 8008e02:	683b      	ldr	r3, [r7, #0]
 8008e04:	687a      	ldr	r2, [r7, #4]
 8008e06:	f7f9 fe71 	bl	8002aec <HAL_PCD_EP_Transmit>
 8008e0a:	4603      	mov	r3, r0
 8008e0c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008e0e:	7dfb      	ldrb	r3, [r7, #23]
 8008e10:	4618      	mov	r0, r3
 8008e12:	f000 f853 	bl	8008ebc <USBD_Get_USB_Status>
 8008e16:	4603      	mov	r3, r0
 8008e18:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008e1a:	7dbb      	ldrb	r3, [r7, #22]
}
 8008e1c:	4618      	mov	r0, r3
 8008e1e:	3718      	adds	r7, #24
 8008e20:	46bd      	mov	sp, r7
 8008e22:	bd80      	pop	{r7, pc}

08008e24 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008e24:	b580      	push	{r7, lr}
 8008e26:	b086      	sub	sp, #24
 8008e28:	af00      	add	r7, sp, #0
 8008e2a:	60f8      	str	r0, [r7, #12]
 8008e2c:	607a      	str	r2, [r7, #4]
 8008e2e:	603b      	str	r3, [r7, #0]
 8008e30:	460b      	mov	r3, r1
 8008e32:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008e34:	2300      	movs	r3, #0
 8008e36:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008e38:	2300      	movs	r3, #0
 8008e3a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008e42:	7af9      	ldrb	r1, [r7, #11]
 8008e44:	683b      	ldr	r3, [r7, #0]
 8008e46:	687a      	ldr	r2, [r7, #4]
 8008e48:	f7f9 fdfd 	bl	8002a46 <HAL_PCD_EP_Receive>
 8008e4c:	4603      	mov	r3, r0
 8008e4e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008e50:	7dfb      	ldrb	r3, [r7, #23]
 8008e52:	4618      	mov	r0, r3
 8008e54:	f000 f832 	bl	8008ebc <USBD_Get_USB_Status>
 8008e58:	4603      	mov	r3, r0
 8008e5a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008e5c:	7dbb      	ldrb	r3, [r7, #22]
}
 8008e5e:	4618      	mov	r0, r3
 8008e60:	3718      	adds	r7, #24
 8008e62:	46bd      	mov	sp, r7
 8008e64:	bd80      	pop	{r7, pc}

08008e66 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008e66:	b580      	push	{r7, lr}
 8008e68:	b082      	sub	sp, #8
 8008e6a:	af00      	add	r7, sp, #0
 8008e6c:	6078      	str	r0, [r7, #4]
 8008e6e:	460b      	mov	r3, r1
 8008e70:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008e78:	78fa      	ldrb	r2, [r7, #3]
 8008e7a:	4611      	mov	r1, r2
 8008e7c:	4618      	mov	r0, r3
 8008e7e:	f7f9 fe1d 	bl	8002abc <HAL_PCD_EP_GetRxCount>
 8008e82:	4603      	mov	r3, r0
}
 8008e84:	4618      	mov	r0, r3
 8008e86:	3708      	adds	r7, #8
 8008e88:	46bd      	mov	sp, r7
 8008e8a:	bd80      	pop	{r7, pc}

08008e8c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008e8c:	b480      	push	{r7}
 8008e8e:	b083      	sub	sp, #12
 8008e90:	af00      	add	r7, sp, #0
 8008e92:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008e94:	4b03      	ldr	r3, [pc, #12]	; (8008ea4 <USBD_static_malloc+0x18>)
}
 8008e96:	4618      	mov	r0, r3
 8008e98:	370c      	adds	r7, #12
 8008e9a:	46bd      	mov	sp, r7
 8008e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea0:	4770      	bx	lr
 8008ea2:	bf00      	nop
 8008ea4:	20002130 	.word	0x20002130

08008ea8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008ea8:	b480      	push	{r7}
 8008eaa:	b083      	sub	sp, #12
 8008eac:	af00      	add	r7, sp, #0
 8008eae:	6078      	str	r0, [r7, #4]

}
 8008eb0:	bf00      	nop
 8008eb2:	370c      	adds	r7, #12
 8008eb4:	46bd      	mov	sp, r7
 8008eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eba:	4770      	bx	lr

08008ebc <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008ebc:	b480      	push	{r7}
 8008ebe:	b085      	sub	sp, #20
 8008ec0:	af00      	add	r7, sp, #0
 8008ec2:	4603      	mov	r3, r0
 8008ec4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ec6:	2300      	movs	r3, #0
 8008ec8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008eca:	79fb      	ldrb	r3, [r7, #7]
 8008ecc:	2b03      	cmp	r3, #3
 8008ece:	d817      	bhi.n	8008f00 <USBD_Get_USB_Status+0x44>
 8008ed0:	a201      	add	r2, pc, #4	; (adr r2, 8008ed8 <USBD_Get_USB_Status+0x1c>)
 8008ed2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ed6:	bf00      	nop
 8008ed8:	08008ee9 	.word	0x08008ee9
 8008edc:	08008eef 	.word	0x08008eef
 8008ee0:	08008ef5 	.word	0x08008ef5
 8008ee4:	08008efb 	.word	0x08008efb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008ee8:	2300      	movs	r3, #0
 8008eea:	73fb      	strb	r3, [r7, #15]
    break;
 8008eec:	e00b      	b.n	8008f06 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008eee:	2303      	movs	r3, #3
 8008ef0:	73fb      	strb	r3, [r7, #15]
    break;
 8008ef2:	e008      	b.n	8008f06 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008ef4:	2301      	movs	r3, #1
 8008ef6:	73fb      	strb	r3, [r7, #15]
    break;
 8008ef8:	e005      	b.n	8008f06 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008efa:	2303      	movs	r3, #3
 8008efc:	73fb      	strb	r3, [r7, #15]
    break;
 8008efe:	e002      	b.n	8008f06 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008f00:	2303      	movs	r3, #3
 8008f02:	73fb      	strb	r3, [r7, #15]
    break;
 8008f04:	bf00      	nop
  }
  return usb_status;
 8008f06:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f08:	4618      	mov	r0, r3
 8008f0a:	3714      	adds	r7, #20
 8008f0c:	46bd      	mov	sp, r7
 8008f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f12:	4770      	bx	lr

08008f14 <_vsniprintf_r>:
 8008f14:	b530      	push	{r4, r5, lr}
 8008f16:	4614      	mov	r4, r2
 8008f18:	2c00      	cmp	r4, #0
 8008f1a:	b09b      	sub	sp, #108	; 0x6c
 8008f1c:	4605      	mov	r5, r0
 8008f1e:	461a      	mov	r2, r3
 8008f20:	da05      	bge.n	8008f2e <_vsniprintf_r+0x1a>
 8008f22:	238b      	movs	r3, #139	; 0x8b
 8008f24:	6003      	str	r3, [r0, #0]
 8008f26:	f04f 30ff 	mov.w	r0, #4294967295
 8008f2a:	b01b      	add	sp, #108	; 0x6c
 8008f2c:	bd30      	pop	{r4, r5, pc}
 8008f2e:	f44f 7302 	mov.w	r3, #520	; 0x208
 8008f32:	f8ad 300c 	strh.w	r3, [sp, #12]
 8008f36:	bf14      	ite	ne
 8008f38:	f104 33ff 	addne.w	r3, r4, #4294967295
 8008f3c:	4623      	moveq	r3, r4
 8008f3e:	9302      	str	r3, [sp, #8]
 8008f40:	9305      	str	r3, [sp, #20]
 8008f42:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008f46:	9100      	str	r1, [sp, #0]
 8008f48:	9104      	str	r1, [sp, #16]
 8008f4a:	f8ad 300e 	strh.w	r3, [sp, #14]
 8008f4e:	4669      	mov	r1, sp
 8008f50:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8008f52:	f000 f99f 	bl	8009294 <_svfiprintf_r>
 8008f56:	1c43      	adds	r3, r0, #1
 8008f58:	bfbc      	itt	lt
 8008f5a:	238b      	movlt	r3, #139	; 0x8b
 8008f5c:	602b      	strlt	r3, [r5, #0]
 8008f5e:	2c00      	cmp	r4, #0
 8008f60:	d0e3      	beq.n	8008f2a <_vsniprintf_r+0x16>
 8008f62:	9b00      	ldr	r3, [sp, #0]
 8008f64:	2200      	movs	r2, #0
 8008f66:	701a      	strb	r2, [r3, #0]
 8008f68:	e7df      	b.n	8008f2a <_vsniprintf_r+0x16>
	...

08008f6c <vsniprintf>:
 8008f6c:	b507      	push	{r0, r1, r2, lr}
 8008f6e:	9300      	str	r3, [sp, #0]
 8008f70:	4613      	mov	r3, r2
 8008f72:	460a      	mov	r2, r1
 8008f74:	4601      	mov	r1, r0
 8008f76:	4803      	ldr	r0, [pc, #12]	; (8008f84 <vsniprintf+0x18>)
 8008f78:	6800      	ldr	r0, [r0, #0]
 8008f7a:	f7ff ffcb 	bl	8008f14 <_vsniprintf_r>
 8008f7e:	b003      	add	sp, #12
 8008f80:	f85d fb04 	ldr.w	pc, [sp], #4
 8008f84:	20000150 	.word	0x20000150

08008f88 <memset>:
 8008f88:	4402      	add	r2, r0
 8008f8a:	4603      	mov	r3, r0
 8008f8c:	4293      	cmp	r3, r2
 8008f8e:	d100      	bne.n	8008f92 <memset+0xa>
 8008f90:	4770      	bx	lr
 8008f92:	f803 1b01 	strb.w	r1, [r3], #1
 8008f96:	e7f9      	b.n	8008f8c <memset+0x4>

08008f98 <__errno>:
 8008f98:	4b01      	ldr	r3, [pc, #4]	; (8008fa0 <__errno+0x8>)
 8008f9a:	6818      	ldr	r0, [r3, #0]
 8008f9c:	4770      	bx	lr
 8008f9e:	bf00      	nop
 8008fa0:	20000150 	.word	0x20000150

08008fa4 <__libc_init_array>:
 8008fa4:	b570      	push	{r4, r5, r6, lr}
 8008fa6:	4d0d      	ldr	r5, [pc, #52]	; (8008fdc <__libc_init_array+0x38>)
 8008fa8:	4c0d      	ldr	r4, [pc, #52]	; (8008fe0 <__libc_init_array+0x3c>)
 8008faa:	1b64      	subs	r4, r4, r5
 8008fac:	10a4      	asrs	r4, r4, #2
 8008fae:	2600      	movs	r6, #0
 8008fb0:	42a6      	cmp	r6, r4
 8008fb2:	d109      	bne.n	8008fc8 <__libc_init_array+0x24>
 8008fb4:	4d0b      	ldr	r5, [pc, #44]	; (8008fe4 <__libc_init_array+0x40>)
 8008fb6:	4c0c      	ldr	r4, [pc, #48]	; (8008fe8 <__libc_init_array+0x44>)
 8008fb8:	f000 fc6a 	bl	8009890 <_init>
 8008fbc:	1b64      	subs	r4, r4, r5
 8008fbe:	10a4      	asrs	r4, r4, #2
 8008fc0:	2600      	movs	r6, #0
 8008fc2:	42a6      	cmp	r6, r4
 8008fc4:	d105      	bne.n	8008fd2 <__libc_init_array+0x2e>
 8008fc6:	bd70      	pop	{r4, r5, r6, pc}
 8008fc8:	f855 3b04 	ldr.w	r3, [r5], #4
 8008fcc:	4798      	blx	r3
 8008fce:	3601      	adds	r6, #1
 8008fd0:	e7ee      	b.n	8008fb0 <__libc_init_array+0xc>
 8008fd2:	f855 3b04 	ldr.w	r3, [r5], #4
 8008fd6:	4798      	blx	r3
 8008fd8:	3601      	adds	r6, #1
 8008fda:	e7f2      	b.n	8008fc2 <__libc_init_array+0x1e>
 8008fdc:	08009960 	.word	0x08009960
 8008fe0:	08009960 	.word	0x08009960
 8008fe4:	08009960 	.word	0x08009960
 8008fe8:	08009964 	.word	0x08009964

08008fec <__retarget_lock_acquire_recursive>:
 8008fec:	4770      	bx	lr

08008fee <__retarget_lock_release_recursive>:
 8008fee:	4770      	bx	lr

08008ff0 <_free_r>:
 8008ff0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008ff2:	2900      	cmp	r1, #0
 8008ff4:	d044      	beq.n	8009080 <_free_r+0x90>
 8008ff6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008ffa:	9001      	str	r0, [sp, #4]
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	f1a1 0404 	sub.w	r4, r1, #4
 8009002:	bfb8      	it	lt
 8009004:	18e4      	addlt	r4, r4, r3
 8009006:	f000 f8df 	bl	80091c8 <__malloc_lock>
 800900a:	4a1e      	ldr	r2, [pc, #120]	; (8009084 <_free_r+0x94>)
 800900c:	9801      	ldr	r0, [sp, #4]
 800900e:	6813      	ldr	r3, [r2, #0]
 8009010:	b933      	cbnz	r3, 8009020 <_free_r+0x30>
 8009012:	6063      	str	r3, [r4, #4]
 8009014:	6014      	str	r4, [r2, #0]
 8009016:	b003      	add	sp, #12
 8009018:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800901c:	f000 b8da 	b.w	80091d4 <__malloc_unlock>
 8009020:	42a3      	cmp	r3, r4
 8009022:	d908      	bls.n	8009036 <_free_r+0x46>
 8009024:	6825      	ldr	r5, [r4, #0]
 8009026:	1961      	adds	r1, r4, r5
 8009028:	428b      	cmp	r3, r1
 800902a:	bf01      	itttt	eq
 800902c:	6819      	ldreq	r1, [r3, #0]
 800902e:	685b      	ldreq	r3, [r3, #4]
 8009030:	1949      	addeq	r1, r1, r5
 8009032:	6021      	streq	r1, [r4, #0]
 8009034:	e7ed      	b.n	8009012 <_free_r+0x22>
 8009036:	461a      	mov	r2, r3
 8009038:	685b      	ldr	r3, [r3, #4]
 800903a:	b10b      	cbz	r3, 8009040 <_free_r+0x50>
 800903c:	42a3      	cmp	r3, r4
 800903e:	d9fa      	bls.n	8009036 <_free_r+0x46>
 8009040:	6811      	ldr	r1, [r2, #0]
 8009042:	1855      	adds	r5, r2, r1
 8009044:	42a5      	cmp	r5, r4
 8009046:	d10b      	bne.n	8009060 <_free_r+0x70>
 8009048:	6824      	ldr	r4, [r4, #0]
 800904a:	4421      	add	r1, r4
 800904c:	1854      	adds	r4, r2, r1
 800904e:	42a3      	cmp	r3, r4
 8009050:	6011      	str	r1, [r2, #0]
 8009052:	d1e0      	bne.n	8009016 <_free_r+0x26>
 8009054:	681c      	ldr	r4, [r3, #0]
 8009056:	685b      	ldr	r3, [r3, #4]
 8009058:	6053      	str	r3, [r2, #4]
 800905a:	440c      	add	r4, r1
 800905c:	6014      	str	r4, [r2, #0]
 800905e:	e7da      	b.n	8009016 <_free_r+0x26>
 8009060:	d902      	bls.n	8009068 <_free_r+0x78>
 8009062:	230c      	movs	r3, #12
 8009064:	6003      	str	r3, [r0, #0]
 8009066:	e7d6      	b.n	8009016 <_free_r+0x26>
 8009068:	6825      	ldr	r5, [r4, #0]
 800906a:	1961      	adds	r1, r4, r5
 800906c:	428b      	cmp	r3, r1
 800906e:	bf04      	itt	eq
 8009070:	6819      	ldreq	r1, [r3, #0]
 8009072:	685b      	ldreq	r3, [r3, #4]
 8009074:	6063      	str	r3, [r4, #4]
 8009076:	bf04      	itt	eq
 8009078:	1949      	addeq	r1, r1, r5
 800907a:	6021      	streq	r1, [r4, #0]
 800907c:	6054      	str	r4, [r2, #4]
 800907e:	e7ca      	b.n	8009016 <_free_r+0x26>
 8009080:	b003      	add	sp, #12
 8009082:	bd30      	pop	{r4, r5, pc}
 8009084:	20002490 	.word	0x20002490

08009088 <sbrk_aligned>:
 8009088:	b570      	push	{r4, r5, r6, lr}
 800908a:	4e0e      	ldr	r6, [pc, #56]	; (80090c4 <sbrk_aligned+0x3c>)
 800908c:	460c      	mov	r4, r1
 800908e:	6831      	ldr	r1, [r6, #0]
 8009090:	4605      	mov	r5, r0
 8009092:	b911      	cbnz	r1, 800909a <sbrk_aligned+0x12>
 8009094:	f000 fba6 	bl	80097e4 <_sbrk_r>
 8009098:	6030      	str	r0, [r6, #0]
 800909a:	4621      	mov	r1, r4
 800909c:	4628      	mov	r0, r5
 800909e:	f000 fba1 	bl	80097e4 <_sbrk_r>
 80090a2:	1c43      	adds	r3, r0, #1
 80090a4:	d00a      	beq.n	80090bc <sbrk_aligned+0x34>
 80090a6:	1cc4      	adds	r4, r0, #3
 80090a8:	f024 0403 	bic.w	r4, r4, #3
 80090ac:	42a0      	cmp	r0, r4
 80090ae:	d007      	beq.n	80090c0 <sbrk_aligned+0x38>
 80090b0:	1a21      	subs	r1, r4, r0
 80090b2:	4628      	mov	r0, r5
 80090b4:	f000 fb96 	bl	80097e4 <_sbrk_r>
 80090b8:	3001      	adds	r0, #1
 80090ba:	d101      	bne.n	80090c0 <sbrk_aligned+0x38>
 80090bc:	f04f 34ff 	mov.w	r4, #4294967295
 80090c0:	4620      	mov	r0, r4
 80090c2:	bd70      	pop	{r4, r5, r6, pc}
 80090c4:	20002494 	.word	0x20002494

080090c8 <_malloc_r>:
 80090c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80090cc:	1ccd      	adds	r5, r1, #3
 80090ce:	f025 0503 	bic.w	r5, r5, #3
 80090d2:	3508      	adds	r5, #8
 80090d4:	2d0c      	cmp	r5, #12
 80090d6:	bf38      	it	cc
 80090d8:	250c      	movcc	r5, #12
 80090da:	2d00      	cmp	r5, #0
 80090dc:	4607      	mov	r7, r0
 80090de:	db01      	blt.n	80090e4 <_malloc_r+0x1c>
 80090e0:	42a9      	cmp	r1, r5
 80090e2:	d905      	bls.n	80090f0 <_malloc_r+0x28>
 80090e4:	230c      	movs	r3, #12
 80090e6:	603b      	str	r3, [r7, #0]
 80090e8:	2600      	movs	r6, #0
 80090ea:	4630      	mov	r0, r6
 80090ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80090f0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80091c4 <_malloc_r+0xfc>
 80090f4:	f000 f868 	bl	80091c8 <__malloc_lock>
 80090f8:	f8d8 3000 	ldr.w	r3, [r8]
 80090fc:	461c      	mov	r4, r3
 80090fe:	bb5c      	cbnz	r4, 8009158 <_malloc_r+0x90>
 8009100:	4629      	mov	r1, r5
 8009102:	4638      	mov	r0, r7
 8009104:	f7ff ffc0 	bl	8009088 <sbrk_aligned>
 8009108:	1c43      	adds	r3, r0, #1
 800910a:	4604      	mov	r4, r0
 800910c:	d155      	bne.n	80091ba <_malloc_r+0xf2>
 800910e:	f8d8 4000 	ldr.w	r4, [r8]
 8009112:	4626      	mov	r6, r4
 8009114:	2e00      	cmp	r6, #0
 8009116:	d145      	bne.n	80091a4 <_malloc_r+0xdc>
 8009118:	2c00      	cmp	r4, #0
 800911a:	d048      	beq.n	80091ae <_malloc_r+0xe6>
 800911c:	6823      	ldr	r3, [r4, #0]
 800911e:	4631      	mov	r1, r6
 8009120:	4638      	mov	r0, r7
 8009122:	eb04 0903 	add.w	r9, r4, r3
 8009126:	f000 fb5d 	bl	80097e4 <_sbrk_r>
 800912a:	4581      	cmp	r9, r0
 800912c:	d13f      	bne.n	80091ae <_malloc_r+0xe6>
 800912e:	6821      	ldr	r1, [r4, #0]
 8009130:	1a6d      	subs	r5, r5, r1
 8009132:	4629      	mov	r1, r5
 8009134:	4638      	mov	r0, r7
 8009136:	f7ff ffa7 	bl	8009088 <sbrk_aligned>
 800913a:	3001      	adds	r0, #1
 800913c:	d037      	beq.n	80091ae <_malloc_r+0xe6>
 800913e:	6823      	ldr	r3, [r4, #0]
 8009140:	442b      	add	r3, r5
 8009142:	6023      	str	r3, [r4, #0]
 8009144:	f8d8 3000 	ldr.w	r3, [r8]
 8009148:	2b00      	cmp	r3, #0
 800914a:	d038      	beq.n	80091be <_malloc_r+0xf6>
 800914c:	685a      	ldr	r2, [r3, #4]
 800914e:	42a2      	cmp	r2, r4
 8009150:	d12b      	bne.n	80091aa <_malloc_r+0xe2>
 8009152:	2200      	movs	r2, #0
 8009154:	605a      	str	r2, [r3, #4]
 8009156:	e00f      	b.n	8009178 <_malloc_r+0xb0>
 8009158:	6822      	ldr	r2, [r4, #0]
 800915a:	1b52      	subs	r2, r2, r5
 800915c:	d41f      	bmi.n	800919e <_malloc_r+0xd6>
 800915e:	2a0b      	cmp	r2, #11
 8009160:	d917      	bls.n	8009192 <_malloc_r+0xca>
 8009162:	1961      	adds	r1, r4, r5
 8009164:	42a3      	cmp	r3, r4
 8009166:	6025      	str	r5, [r4, #0]
 8009168:	bf18      	it	ne
 800916a:	6059      	strne	r1, [r3, #4]
 800916c:	6863      	ldr	r3, [r4, #4]
 800916e:	bf08      	it	eq
 8009170:	f8c8 1000 	streq.w	r1, [r8]
 8009174:	5162      	str	r2, [r4, r5]
 8009176:	604b      	str	r3, [r1, #4]
 8009178:	4638      	mov	r0, r7
 800917a:	f104 060b 	add.w	r6, r4, #11
 800917e:	f000 f829 	bl	80091d4 <__malloc_unlock>
 8009182:	f026 0607 	bic.w	r6, r6, #7
 8009186:	1d23      	adds	r3, r4, #4
 8009188:	1af2      	subs	r2, r6, r3
 800918a:	d0ae      	beq.n	80090ea <_malloc_r+0x22>
 800918c:	1b9b      	subs	r3, r3, r6
 800918e:	50a3      	str	r3, [r4, r2]
 8009190:	e7ab      	b.n	80090ea <_malloc_r+0x22>
 8009192:	42a3      	cmp	r3, r4
 8009194:	6862      	ldr	r2, [r4, #4]
 8009196:	d1dd      	bne.n	8009154 <_malloc_r+0x8c>
 8009198:	f8c8 2000 	str.w	r2, [r8]
 800919c:	e7ec      	b.n	8009178 <_malloc_r+0xb0>
 800919e:	4623      	mov	r3, r4
 80091a0:	6864      	ldr	r4, [r4, #4]
 80091a2:	e7ac      	b.n	80090fe <_malloc_r+0x36>
 80091a4:	4634      	mov	r4, r6
 80091a6:	6876      	ldr	r6, [r6, #4]
 80091a8:	e7b4      	b.n	8009114 <_malloc_r+0x4c>
 80091aa:	4613      	mov	r3, r2
 80091ac:	e7cc      	b.n	8009148 <_malloc_r+0x80>
 80091ae:	230c      	movs	r3, #12
 80091b0:	603b      	str	r3, [r7, #0]
 80091b2:	4638      	mov	r0, r7
 80091b4:	f000 f80e 	bl	80091d4 <__malloc_unlock>
 80091b8:	e797      	b.n	80090ea <_malloc_r+0x22>
 80091ba:	6025      	str	r5, [r4, #0]
 80091bc:	e7dc      	b.n	8009178 <_malloc_r+0xb0>
 80091be:	605b      	str	r3, [r3, #4]
 80091c0:	deff      	udf	#255	; 0xff
 80091c2:	bf00      	nop
 80091c4:	20002490 	.word	0x20002490

080091c8 <__malloc_lock>:
 80091c8:	4801      	ldr	r0, [pc, #4]	; (80091d0 <__malloc_lock+0x8>)
 80091ca:	f7ff bf0f 	b.w	8008fec <__retarget_lock_acquire_recursive>
 80091ce:	bf00      	nop
 80091d0:	2000248c 	.word	0x2000248c

080091d4 <__malloc_unlock>:
 80091d4:	4801      	ldr	r0, [pc, #4]	; (80091dc <__malloc_unlock+0x8>)
 80091d6:	f7ff bf0a 	b.w	8008fee <__retarget_lock_release_recursive>
 80091da:	bf00      	nop
 80091dc:	2000248c 	.word	0x2000248c

080091e0 <__ssputs_r>:
 80091e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80091e4:	688e      	ldr	r6, [r1, #8]
 80091e6:	461f      	mov	r7, r3
 80091e8:	42be      	cmp	r6, r7
 80091ea:	680b      	ldr	r3, [r1, #0]
 80091ec:	4682      	mov	sl, r0
 80091ee:	460c      	mov	r4, r1
 80091f0:	4690      	mov	r8, r2
 80091f2:	d82c      	bhi.n	800924e <__ssputs_r+0x6e>
 80091f4:	898a      	ldrh	r2, [r1, #12]
 80091f6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80091fa:	d026      	beq.n	800924a <__ssputs_r+0x6a>
 80091fc:	6965      	ldr	r5, [r4, #20]
 80091fe:	6909      	ldr	r1, [r1, #16]
 8009200:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009204:	eba3 0901 	sub.w	r9, r3, r1
 8009208:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800920c:	1c7b      	adds	r3, r7, #1
 800920e:	444b      	add	r3, r9
 8009210:	106d      	asrs	r5, r5, #1
 8009212:	429d      	cmp	r5, r3
 8009214:	bf38      	it	cc
 8009216:	461d      	movcc	r5, r3
 8009218:	0553      	lsls	r3, r2, #21
 800921a:	d527      	bpl.n	800926c <__ssputs_r+0x8c>
 800921c:	4629      	mov	r1, r5
 800921e:	f7ff ff53 	bl	80090c8 <_malloc_r>
 8009222:	4606      	mov	r6, r0
 8009224:	b360      	cbz	r0, 8009280 <__ssputs_r+0xa0>
 8009226:	6921      	ldr	r1, [r4, #16]
 8009228:	464a      	mov	r2, r9
 800922a:	f000 faeb 	bl	8009804 <memcpy>
 800922e:	89a3      	ldrh	r3, [r4, #12]
 8009230:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009234:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009238:	81a3      	strh	r3, [r4, #12]
 800923a:	6126      	str	r6, [r4, #16]
 800923c:	6165      	str	r5, [r4, #20]
 800923e:	444e      	add	r6, r9
 8009240:	eba5 0509 	sub.w	r5, r5, r9
 8009244:	6026      	str	r6, [r4, #0]
 8009246:	60a5      	str	r5, [r4, #8]
 8009248:	463e      	mov	r6, r7
 800924a:	42be      	cmp	r6, r7
 800924c:	d900      	bls.n	8009250 <__ssputs_r+0x70>
 800924e:	463e      	mov	r6, r7
 8009250:	6820      	ldr	r0, [r4, #0]
 8009252:	4632      	mov	r2, r6
 8009254:	4641      	mov	r1, r8
 8009256:	f000 faab 	bl	80097b0 <memmove>
 800925a:	68a3      	ldr	r3, [r4, #8]
 800925c:	1b9b      	subs	r3, r3, r6
 800925e:	60a3      	str	r3, [r4, #8]
 8009260:	6823      	ldr	r3, [r4, #0]
 8009262:	4433      	add	r3, r6
 8009264:	6023      	str	r3, [r4, #0]
 8009266:	2000      	movs	r0, #0
 8009268:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800926c:	462a      	mov	r2, r5
 800926e:	f000 fad7 	bl	8009820 <_realloc_r>
 8009272:	4606      	mov	r6, r0
 8009274:	2800      	cmp	r0, #0
 8009276:	d1e0      	bne.n	800923a <__ssputs_r+0x5a>
 8009278:	6921      	ldr	r1, [r4, #16]
 800927a:	4650      	mov	r0, sl
 800927c:	f7ff feb8 	bl	8008ff0 <_free_r>
 8009280:	230c      	movs	r3, #12
 8009282:	f8ca 3000 	str.w	r3, [sl]
 8009286:	89a3      	ldrh	r3, [r4, #12]
 8009288:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800928c:	81a3      	strh	r3, [r4, #12]
 800928e:	f04f 30ff 	mov.w	r0, #4294967295
 8009292:	e7e9      	b.n	8009268 <__ssputs_r+0x88>

08009294 <_svfiprintf_r>:
 8009294:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009298:	4698      	mov	r8, r3
 800929a:	898b      	ldrh	r3, [r1, #12]
 800929c:	061b      	lsls	r3, r3, #24
 800929e:	b09d      	sub	sp, #116	; 0x74
 80092a0:	4607      	mov	r7, r0
 80092a2:	460d      	mov	r5, r1
 80092a4:	4614      	mov	r4, r2
 80092a6:	d50e      	bpl.n	80092c6 <_svfiprintf_r+0x32>
 80092a8:	690b      	ldr	r3, [r1, #16]
 80092aa:	b963      	cbnz	r3, 80092c6 <_svfiprintf_r+0x32>
 80092ac:	2140      	movs	r1, #64	; 0x40
 80092ae:	f7ff ff0b 	bl	80090c8 <_malloc_r>
 80092b2:	6028      	str	r0, [r5, #0]
 80092b4:	6128      	str	r0, [r5, #16]
 80092b6:	b920      	cbnz	r0, 80092c2 <_svfiprintf_r+0x2e>
 80092b8:	230c      	movs	r3, #12
 80092ba:	603b      	str	r3, [r7, #0]
 80092bc:	f04f 30ff 	mov.w	r0, #4294967295
 80092c0:	e0d0      	b.n	8009464 <_svfiprintf_r+0x1d0>
 80092c2:	2340      	movs	r3, #64	; 0x40
 80092c4:	616b      	str	r3, [r5, #20]
 80092c6:	2300      	movs	r3, #0
 80092c8:	9309      	str	r3, [sp, #36]	; 0x24
 80092ca:	2320      	movs	r3, #32
 80092cc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80092d0:	f8cd 800c 	str.w	r8, [sp, #12]
 80092d4:	2330      	movs	r3, #48	; 0x30
 80092d6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800947c <_svfiprintf_r+0x1e8>
 80092da:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80092de:	f04f 0901 	mov.w	r9, #1
 80092e2:	4623      	mov	r3, r4
 80092e4:	469a      	mov	sl, r3
 80092e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80092ea:	b10a      	cbz	r2, 80092f0 <_svfiprintf_r+0x5c>
 80092ec:	2a25      	cmp	r2, #37	; 0x25
 80092ee:	d1f9      	bne.n	80092e4 <_svfiprintf_r+0x50>
 80092f0:	ebba 0b04 	subs.w	fp, sl, r4
 80092f4:	d00b      	beq.n	800930e <_svfiprintf_r+0x7a>
 80092f6:	465b      	mov	r3, fp
 80092f8:	4622      	mov	r2, r4
 80092fa:	4629      	mov	r1, r5
 80092fc:	4638      	mov	r0, r7
 80092fe:	f7ff ff6f 	bl	80091e0 <__ssputs_r>
 8009302:	3001      	adds	r0, #1
 8009304:	f000 80a9 	beq.w	800945a <_svfiprintf_r+0x1c6>
 8009308:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800930a:	445a      	add	r2, fp
 800930c:	9209      	str	r2, [sp, #36]	; 0x24
 800930e:	f89a 3000 	ldrb.w	r3, [sl]
 8009312:	2b00      	cmp	r3, #0
 8009314:	f000 80a1 	beq.w	800945a <_svfiprintf_r+0x1c6>
 8009318:	2300      	movs	r3, #0
 800931a:	f04f 32ff 	mov.w	r2, #4294967295
 800931e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009322:	f10a 0a01 	add.w	sl, sl, #1
 8009326:	9304      	str	r3, [sp, #16]
 8009328:	9307      	str	r3, [sp, #28]
 800932a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800932e:	931a      	str	r3, [sp, #104]	; 0x68
 8009330:	4654      	mov	r4, sl
 8009332:	2205      	movs	r2, #5
 8009334:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009338:	4850      	ldr	r0, [pc, #320]	; (800947c <_svfiprintf_r+0x1e8>)
 800933a:	f7f6 ff51 	bl	80001e0 <memchr>
 800933e:	9a04      	ldr	r2, [sp, #16]
 8009340:	b9d8      	cbnz	r0, 800937a <_svfiprintf_r+0xe6>
 8009342:	06d0      	lsls	r0, r2, #27
 8009344:	bf44      	itt	mi
 8009346:	2320      	movmi	r3, #32
 8009348:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800934c:	0711      	lsls	r1, r2, #28
 800934e:	bf44      	itt	mi
 8009350:	232b      	movmi	r3, #43	; 0x2b
 8009352:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009356:	f89a 3000 	ldrb.w	r3, [sl]
 800935a:	2b2a      	cmp	r3, #42	; 0x2a
 800935c:	d015      	beq.n	800938a <_svfiprintf_r+0xf6>
 800935e:	9a07      	ldr	r2, [sp, #28]
 8009360:	4654      	mov	r4, sl
 8009362:	2000      	movs	r0, #0
 8009364:	f04f 0c0a 	mov.w	ip, #10
 8009368:	4621      	mov	r1, r4
 800936a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800936e:	3b30      	subs	r3, #48	; 0x30
 8009370:	2b09      	cmp	r3, #9
 8009372:	d94d      	bls.n	8009410 <_svfiprintf_r+0x17c>
 8009374:	b1b0      	cbz	r0, 80093a4 <_svfiprintf_r+0x110>
 8009376:	9207      	str	r2, [sp, #28]
 8009378:	e014      	b.n	80093a4 <_svfiprintf_r+0x110>
 800937a:	eba0 0308 	sub.w	r3, r0, r8
 800937e:	fa09 f303 	lsl.w	r3, r9, r3
 8009382:	4313      	orrs	r3, r2
 8009384:	9304      	str	r3, [sp, #16]
 8009386:	46a2      	mov	sl, r4
 8009388:	e7d2      	b.n	8009330 <_svfiprintf_r+0x9c>
 800938a:	9b03      	ldr	r3, [sp, #12]
 800938c:	1d19      	adds	r1, r3, #4
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	9103      	str	r1, [sp, #12]
 8009392:	2b00      	cmp	r3, #0
 8009394:	bfbb      	ittet	lt
 8009396:	425b      	neglt	r3, r3
 8009398:	f042 0202 	orrlt.w	r2, r2, #2
 800939c:	9307      	strge	r3, [sp, #28]
 800939e:	9307      	strlt	r3, [sp, #28]
 80093a0:	bfb8      	it	lt
 80093a2:	9204      	strlt	r2, [sp, #16]
 80093a4:	7823      	ldrb	r3, [r4, #0]
 80093a6:	2b2e      	cmp	r3, #46	; 0x2e
 80093a8:	d10c      	bne.n	80093c4 <_svfiprintf_r+0x130>
 80093aa:	7863      	ldrb	r3, [r4, #1]
 80093ac:	2b2a      	cmp	r3, #42	; 0x2a
 80093ae:	d134      	bne.n	800941a <_svfiprintf_r+0x186>
 80093b0:	9b03      	ldr	r3, [sp, #12]
 80093b2:	1d1a      	adds	r2, r3, #4
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	9203      	str	r2, [sp, #12]
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	bfb8      	it	lt
 80093bc:	f04f 33ff 	movlt.w	r3, #4294967295
 80093c0:	3402      	adds	r4, #2
 80093c2:	9305      	str	r3, [sp, #20]
 80093c4:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800948c <_svfiprintf_r+0x1f8>
 80093c8:	7821      	ldrb	r1, [r4, #0]
 80093ca:	2203      	movs	r2, #3
 80093cc:	4650      	mov	r0, sl
 80093ce:	f7f6 ff07 	bl	80001e0 <memchr>
 80093d2:	b138      	cbz	r0, 80093e4 <_svfiprintf_r+0x150>
 80093d4:	9b04      	ldr	r3, [sp, #16]
 80093d6:	eba0 000a 	sub.w	r0, r0, sl
 80093da:	2240      	movs	r2, #64	; 0x40
 80093dc:	4082      	lsls	r2, r0
 80093de:	4313      	orrs	r3, r2
 80093e0:	3401      	adds	r4, #1
 80093e2:	9304      	str	r3, [sp, #16]
 80093e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80093e8:	4825      	ldr	r0, [pc, #148]	; (8009480 <_svfiprintf_r+0x1ec>)
 80093ea:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80093ee:	2206      	movs	r2, #6
 80093f0:	f7f6 fef6 	bl	80001e0 <memchr>
 80093f4:	2800      	cmp	r0, #0
 80093f6:	d038      	beq.n	800946a <_svfiprintf_r+0x1d6>
 80093f8:	4b22      	ldr	r3, [pc, #136]	; (8009484 <_svfiprintf_r+0x1f0>)
 80093fa:	bb1b      	cbnz	r3, 8009444 <_svfiprintf_r+0x1b0>
 80093fc:	9b03      	ldr	r3, [sp, #12]
 80093fe:	3307      	adds	r3, #7
 8009400:	f023 0307 	bic.w	r3, r3, #7
 8009404:	3308      	adds	r3, #8
 8009406:	9303      	str	r3, [sp, #12]
 8009408:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800940a:	4433      	add	r3, r6
 800940c:	9309      	str	r3, [sp, #36]	; 0x24
 800940e:	e768      	b.n	80092e2 <_svfiprintf_r+0x4e>
 8009410:	fb0c 3202 	mla	r2, ip, r2, r3
 8009414:	460c      	mov	r4, r1
 8009416:	2001      	movs	r0, #1
 8009418:	e7a6      	b.n	8009368 <_svfiprintf_r+0xd4>
 800941a:	2300      	movs	r3, #0
 800941c:	3401      	adds	r4, #1
 800941e:	9305      	str	r3, [sp, #20]
 8009420:	4619      	mov	r1, r3
 8009422:	f04f 0c0a 	mov.w	ip, #10
 8009426:	4620      	mov	r0, r4
 8009428:	f810 2b01 	ldrb.w	r2, [r0], #1
 800942c:	3a30      	subs	r2, #48	; 0x30
 800942e:	2a09      	cmp	r2, #9
 8009430:	d903      	bls.n	800943a <_svfiprintf_r+0x1a6>
 8009432:	2b00      	cmp	r3, #0
 8009434:	d0c6      	beq.n	80093c4 <_svfiprintf_r+0x130>
 8009436:	9105      	str	r1, [sp, #20]
 8009438:	e7c4      	b.n	80093c4 <_svfiprintf_r+0x130>
 800943a:	fb0c 2101 	mla	r1, ip, r1, r2
 800943e:	4604      	mov	r4, r0
 8009440:	2301      	movs	r3, #1
 8009442:	e7f0      	b.n	8009426 <_svfiprintf_r+0x192>
 8009444:	ab03      	add	r3, sp, #12
 8009446:	9300      	str	r3, [sp, #0]
 8009448:	462a      	mov	r2, r5
 800944a:	4b0f      	ldr	r3, [pc, #60]	; (8009488 <_svfiprintf_r+0x1f4>)
 800944c:	a904      	add	r1, sp, #16
 800944e:	4638      	mov	r0, r7
 8009450:	f3af 8000 	nop.w
 8009454:	1c42      	adds	r2, r0, #1
 8009456:	4606      	mov	r6, r0
 8009458:	d1d6      	bne.n	8009408 <_svfiprintf_r+0x174>
 800945a:	89ab      	ldrh	r3, [r5, #12]
 800945c:	065b      	lsls	r3, r3, #25
 800945e:	f53f af2d 	bmi.w	80092bc <_svfiprintf_r+0x28>
 8009462:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009464:	b01d      	add	sp, #116	; 0x74
 8009466:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800946a:	ab03      	add	r3, sp, #12
 800946c:	9300      	str	r3, [sp, #0]
 800946e:	462a      	mov	r2, r5
 8009470:	4b05      	ldr	r3, [pc, #20]	; (8009488 <_svfiprintf_r+0x1f4>)
 8009472:	a904      	add	r1, sp, #16
 8009474:	4638      	mov	r0, r7
 8009476:	f000 f879 	bl	800956c <_printf_i>
 800947a:	e7eb      	b.n	8009454 <_svfiprintf_r+0x1c0>
 800947c:	08009924 	.word	0x08009924
 8009480:	0800992e 	.word	0x0800992e
 8009484:	00000000 	.word	0x00000000
 8009488:	080091e1 	.word	0x080091e1
 800948c:	0800992a 	.word	0x0800992a

08009490 <_printf_common>:
 8009490:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009494:	4616      	mov	r6, r2
 8009496:	4699      	mov	r9, r3
 8009498:	688a      	ldr	r2, [r1, #8]
 800949a:	690b      	ldr	r3, [r1, #16]
 800949c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80094a0:	4293      	cmp	r3, r2
 80094a2:	bfb8      	it	lt
 80094a4:	4613      	movlt	r3, r2
 80094a6:	6033      	str	r3, [r6, #0]
 80094a8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80094ac:	4607      	mov	r7, r0
 80094ae:	460c      	mov	r4, r1
 80094b0:	b10a      	cbz	r2, 80094b6 <_printf_common+0x26>
 80094b2:	3301      	adds	r3, #1
 80094b4:	6033      	str	r3, [r6, #0]
 80094b6:	6823      	ldr	r3, [r4, #0]
 80094b8:	0699      	lsls	r1, r3, #26
 80094ba:	bf42      	ittt	mi
 80094bc:	6833      	ldrmi	r3, [r6, #0]
 80094be:	3302      	addmi	r3, #2
 80094c0:	6033      	strmi	r3, [r6, #0]
 80094c2:	6825      	ldr	r5, [r4, #0]
 80094c4:	f015 0506 	ands.w	r5, r5, #6
 80094c8:	d106      	bne.n	80094d8 <_printf_common+0x48>
 80094ca:	f104 0a19 	add.w	sl, r4, #25
 80094ce:	68e3      	ldr	r3, [r4, #12]
 80094d0:	6832      	ldr	r2, [r6, #0]
 80094d2:	1a9b      	subs	r3, r3, r2
 80094d4:	42ab      	cmp	r3, r5
 80094d6:	dc26      	bgt.n	8009526 <_printf_common+0x96>
 80094d8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80094dc:	1e13      	subs	r3, r2, #0
 80094de:	6822      	ldr	r2, [r4, #0]
 80094e0:	bf18      	it	ne
 80094e2:	2301      	movne	r3, #1
 80094e4:	0692      	lsls	r2, r2, #26
 80094e6:	d42b      	bmi.n	8009540 <_printf_common+0xb0>
 80094e8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80094ec:	4649      	mov	r1, r9
 80094ee:	4638      	mov	r0, r7
 80094f0:	47c0      	blx	r8
 80094f2:	3001      	adds	r0, #1
 80094f4:	d01e      	beq.n	8009534 <_printf_common+0xa4>
 80094f6:	6823      	ldr	r3, [r4, #0]
 80094f8:	6922      	ldr	r2, [r4, #16]
 80094fa:	f003 0306 	and.w	r3, r3, #6
 80094fe:	2b04      	cmp	r3, #4
 8009500:	bf02      	ittt	eq
 8009502:	68e5      	ldreq	r5, [r4, #12]
 8009504:	6833      	ldreq	r3, [r6, #0]
 8009506:	1aed      	subeq	r5, r5, r3
 8009508:	68a3      	ldr	r3, [r4, #8]
 800950a:	bf0c      	ite	eq
 800950c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009510:	2500      	movne	r5, #0
 8009512:	4293      	cmp	r3, r2
 8009514:	bfc4      	itt	gt
 8009516:	1a9b      	subgt	r3, r3, r2
 8009518:	18ed      	addgt	r5, r5, r3
 800951a:	2600      	movs	r6, #0
 800951c:	341a      	adds	r4, #26
 800951e:	42b5      	cmp	r5, r6
 8009520:	d11a      	bne.n	8009558 <_printf_common+0xc8>
 8009522:	2000      	movs	r0, #0
 8009524:	e008      	b.n	8009538 <_printf_common+0xa8>
 8009526:	2301      	movs	r3, #1
 8009528:	4652      	mov	r2, sl
 800952a:	4649      	mov	r1, r9
 800952c:	4638      	mov	r0, r7
 800952e:	47c0      	blx	r8
 8009530:	3001      	adds	r0, #1
 8009532:	d103      	bne.n	800953c <_printf_common+0xac>
 8009534:	f04f 30ff 	mov.w	r0, #4294967295
 8009538:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800953c:	3501      	adds	r5, #1
 800953e:	e7c6      	b.n	80094ce <_printf_common+0x3e>
 8009540:	18e1      	adds	r1, r4, r3
 8009542:	1c5a      	adds	r2, r3, #1
 8009544:	2030      	movs	r0, #48	; 0x30
 8009546:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800954a:	4422      	add	r2, r4
 800954c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009550:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009554:	3302      	adds	r3, #2
 8009556:	e7c7      	b.n	80094e8 <_printf_common+0x58>
 8009558:	2301      	movs	r3, #1
 800955a:	4622      	mov	r2, r4
 800955c:	4649      	mov	r1, r9
 800955e:	4638      	mov	r0, r7
 8009560:	47c0      	blx	r8
 8009562:	3001      	adds	r0, #1
 8009564:	d0e6      	beq.n	8009534 <_printf_common+0xa4>
 8009566:	3601      	adds	r6, #1
 8009568:	e7d9      	b.n	800951e <_printf_common+0x8e>
	...

0800956c <_printf_i>:
 800956c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009570:	7e0f      	ldrb	r7, [r1, #24]
 8009572:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009574:	2f78      	cmp	r7, #120	; 0x78
 8009576:	4691      	mov	r9, r2
 8009578:	4680      	mov	r8, r0
 800957a:	460c      	mov	r4, r1
 800957c:	469a      	mov	sl, r3
 800957e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009582:	d807      	bhi.n	8009594 <_printf_i+0x28>
 8009584:	2f62      	cmp	r7, #98	; 0x62
 8009586:	d80a      	bhi.n	800959e <_printf_i+0x32>
 8009588:	2f00      	cmp	r7, #0
 800958a:	f000 80d4 	beq.w	8009736 <_printf_i+0x1ca>
 800958e:	2f58      	cmp	r7, #88	; 0x58
 8009590:	f000 80c0 	beq.w	8009714 <_printf_i+0x1a8>
 8009594:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009598:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800959c:	e03a      	b.n	8009614 <_printf_i+0xa8>
 800959e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80095a2:	2b15      	cmp	r3, #21
 80095a4:	d8f6      	bhi.n	8009594 <_printf_i+0x28>
 80095a6:	a101      	add	r1, pc, #4	; (adr r1, 80095ac <_printf_i+0x40>)
 80095a8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80095ac:	08009605 	.word	0x08009605
 80095b0:	08009619 	.word	0x08009619
 80095b4:	08009595 	.word	0x08009595
 80095b8:	08009595 	.word	0x08009595
 80095bc:	08009595 	.word	0x08009595
 80095c0:	08009595 	.word	0x08009595
 80095c4:	08009619 	.word	0x08009619
 80095c8:	08009595 	.word	0x08009595
 80095cc:	08009595 	.word	0x08009595
 80095d0:	08009595 	.word	0x08009595
 80095d4:	08009595 	.word	0x08009595
 80095d8:	0800971d 	.word	0x0800971d
 80095dc:	08009645 	.word	0x08009645
 80095e0:	080096d7 	.word	0x080096d7
 80095e4:	08009595 	.word	0x08009595
 80095e8:	08009595 	.word	0x08009595
 80095ec:	0800973f 	.word	0x0800973f
 80095f0:	08009595 	.word	0x08009595
 80095f4:	08009645 	.word	0x08009645
 80095f8:	08009595 	.word	0x08009595
 80095fc:	08009595 	.word	0x08009595
 8009600:	080096df 	.word	0x080096df
 8009604:	682b      	ldr	r3, [r5, #0]
 8009606:	1d1a      	adds	r2, r3, #4
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	602a      	str	r2, [r5, #0]
 800960c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009610:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009614:	2301      	movs	r3, #1
 8009616:	e09f      	b.n	8009758 <_printf_i+0x1ec>
 8009618:	6820      	ldr	r0, [r4, #0]
 800961a:	682b      	ldr	r3, [r5, #0]
 800961c:	0607      	lsls	r7, r0, #24
 800961e:	f103 0104 	add.w	r1, r3, #4
 8009622:	6029      	str	r1, [r5, #0]
 8009624:	d501      	bpl.n	800962a <_printf_i+0xbe>
 8009626:	681e      	ldr	r6, [r3, #0]
 8009628:	e003      	b.n	8009632 <_printf_i+0xc6>
 800962a:	0646      	lsls	r6, r0, #25
 800962c:	d5fb      	bpl.n	8009626 <_printf_i+0xba>
 800962e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8009632:	2e00      	cmp	r6, #0
 8009634:	da03      	bge.n	800963e <_printf_i+0xd2>
 8009636:	232d      	movs	r3, #45	; 0x2d
 8009638:	4276      	negs	r6, r6
 800963a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800963e:	485a      	ldr	r0, [pc, #360]	; (80097a8 <_printf_i+0x23c>)
 8009640:	230a      	movs	r3, #10
 8009642:	e012      	b.n	800966a <_printf_i+0xfe>
 8009644:	682b      	ldr	r3, [r5, #0]
 8009646:	6820      	ldr	r0, [r4, #0]
 8009648:	1d19      	adds	r1, r3, #4
 800964a:	6029      	str	r1, [r5, #0]
 800964c:	0605      	lsls	r5, r0, #24
 800964e:	d501      	bpl.n	8009654 <_printf_i+0xe8>
 8009650:	681e      	ldr	r6, [r3, #0]
 8009652:	e002      	b.n	800965a <_printf_i+0xee>
 8009654:	0641      	lsls	r1, r0, #25
 8009656:	d5fb      	bpl.n	8009650 <_printf_i+0xe4>
 8009658:	881e      	ldrh	r6, [r3, #0]
 800965a:	4853      	ldr	r0, [pc, #332]	; (80097a8 <_printf_i+0x23c>)
 800965c:	2f6f      	cmp	r7, #111	; 0x6f
 800965e:	bf0c      	ite	eq
 8009660:	2308      	moveq	r3, #8
 8009662:	230a      	movne	r3, #10
 8009664:	2100      	movs	r1, #0
 8009666:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800966a:	6865      	ldr	r5, [r4, #4]
 800966c:	60a5      	str	r5, [r4, #8]
 800966e:	2d00      	cmp	r5, #0
 8009670:	bfa2      	ittt	ge
 8009672:	6821      	ldrge	r1, [r4, #0]
 8009674:	f021 0104 	bicge.w	r1, r1, #4
 8009678:	6021      	strge	r1, [r4, #0]
 800967a:	b90e      	cbnz	r6, 8009680 <_printf_i+0x114>
 800967c:	2d00      	cmp	r5, #0
 800967e:	d04b      	beq.n	8009718 <_printf_i+0x1ac>
 8009680:	4615      	mov	r5, r2
 8009682:	fbb6 f1f3 	udiv	r1, r6, r3
 8009686:	fb03 6711 	mls	r7, r3, r1, r6
 800968a:	5dc7      	ldrb	r7, [r0, r7]
 800968c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009690:	4637      	mov	r7, r6
 8009692:	42bb      	cmp	r3, r7
 8009694:	460e      	mov	r6, r1
 8009696:	d9f4      	bls.n	8009682 <_printf_i+0x116>
 8009698:	2b08      	cmp	r3, #8
 800969a:	d10b      	bne.n	80096b4 <_printf_i+0x148>
 800969c:	6823      	ldr	r3, [r4, #0]
 800969e:	07de      	lsls	r6, r3, #31
 80096a0:	d508      	bpl.n	80096b4 <_printf_i+0x148>
 80096a2:	6923      	ldr	r3, [r4, #16]
 80096a4:	6861      	ldr	r1, [r4, #4]
 80096a6:	4299      	cmp	r1, r3
 80096a8:	bfde      	ittt	le
 80096aa:	2330      	movle	r3, #48	; 0x30
 80096ac:	f805 3c01 	strble.w	r3, [r5, #-1]
 80096b0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80096b4:	1b52      	subs	r2, r2, r5
 80096b6:	6122      	str	r2, [r4, #16]
 80096b8:	f8cd a000 	str.w	sl, [sp]
 80096bc:	464b      	mov	r3, r9
 80096be:	aa03      	add	r2, sp, #12
 80096c0:	4621      	mov	r1, r4
 80096c2:	4640      	mov	r0, r8
 80096c4:	f7ff fee4 	bl	8009490 <_printf_common>
 80096c8:	3001      	adds	r0, #1
 80096ca:	d14a      	bne.n	8009762 <_printf_i+0x1f6>
 80096cc:	f04f 30ff 	mov.w	r0, #4294967295
 80096d0:	b004      	add	sp, #16
 80096d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80096d6:	6823      	ldr	r3, [r4, #0]
 80096d8:	f043 0320 	orr.w	r3, r3, #32
 80096dc:	6023      	str	r3, [r4, #0]
 80096de:	4833      	ldr	r0, [pc, #204]	; (80097ac <_printf_i+0x240>)
 80096e0:	2778      	movs	r7, #120	; 0x78
 80096e2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80096e6:	6823      	ldr	r3, [r4, #0]
 80096e8:	6829      	ldr	r1, [r5, #0]
 80096ea:	061f      	lsls	r7, r3, #24
 80096ec:	f851 6b04 	ldr.w	r6, [r1], #4
 80096f0:	d402      	bmi.n	80096f8 <_printf_i+0x18c>
 80096f2:	065f      	lsls	r7, r3, #25
 80096f4:	bf48      	it	mi
 80096f6:	b2b6      	uxthmi	r6, r6
 80096f8:	07df      	lsls	r7, r3, #31
 80096fa:	bf48      	it	mi
 80096fc:	f043 0320 	orrmi.w	r3, r3, #32
 8009700:	6029      	str	r1, [r5, #0]
 8009702:	bf48      	it	mi
 8009704:	6023      	strmi	r3, [r4, #0]
 8009706:	b91e      	cbnz	r6, 8009710 <_printf_i+0x1a4>
 8009708:	6823      	ldr	r3, [r4, #0]
 800970a:	f023 0320 	bic.w	r3, r3, #32
 800970e:	6023      	str	r3, [r4, #0]
 8009710:	2310      	movs	r3, #16
 8009712:	e7a7      	b.n	8009664 <_printf_i+0xf8>
 8009714:	4824      	ldr	r0, [pc, #144]	; (80097a8 <_printf_i+0x23c>)
 8009716:	e7e4      	b.n	80096e2 <_printf_i+0x176>
 8009718:	4615      	mov	r5, r2
 800971a:	e7bd      	b.n	8009698 <_printf_i+0x12c>
 800971c:	682b      	ldr	r3, [r5, #0]
 800971e:	6826      	ldr	r6, [r4, #0]
 8009720:	6961      	ldr	r1, [r4, #20]
 8009722:	1d18      	adds	r0, r3, #4
 8009724:	6028      	str	r0, [r5, #0]
 8009726:	0635      	lsls	r5, r6, #24
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	d501      	bpl.n	8009730 <_printf_i+0x1c4>
 800972c:	6019      	str	r1, [r3, #0]
 800972e:	e002      	b.n	8009736 <_printf_i+0x1ca>
 8009730:	0670      	lsls	r0, r6, #25
 8009732:	d5fb      	bpl.n	800972c <_printf_i+0x1c0>
 8009734:	8019      	strh	r1, [r3, #0]
 8009736:	2300      	movs	r3, #0
 8009738:	6123      	str	r3, [r4, #16]
 800973a:	4615      	mov	r5, r2
 800973c:	e7bc      	b.n	80096b8 <_printf_i+0x14c>
 800973e:	682b      	ldr	r3, [r5, #0]
 8009740:	1d1a      	adds	r2, r3, #4
 8009742:	602a      	str	r2, [r5, #0]
 8009744:	681d      	ldr	r5, [r3, #0]
 8009746:	6862      	ldr	r2, [r4, #4]
 8009748:	2100      	movs	r1, #0
 800974a:	4628      	mov	r0, r5
 800974c:	f7f6 fd48 	bl	80001e0 <memchr>
 8009750:	b108      	cbz	r0, 8009756 <_printf_i+0x1ea>
 8009752:	1b40      	subs	r0, r0, r5
 8009754:	6060      	str	r0, [r4, #4]
 8009756:	6863      	ldr	r3, [r4, #4]
 8009758:	6123      	str	r3, [r4, #16]
 800975a:	2300      	movs	r3, #0
 800975c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009760:	e7aa      	b.n	80096b8 <_printf_i+0x14c>
 8009762:	6923      	ldr	r3, [r4, #16]
 8009764:	462a      	mov	r2, r5
 8009766:	4649      	mov	r1, r9
 8009768:	4640      	mov	r0, r8
 800976a:	47d0      	blx	sl
 800976c:	3001      	adds	r0, #1
 800976e:	d0ad      	beq.n	80096cc <_printf_i+0x160>
 8009770:	6823      	ldr	r3, [r4, #0]
 8009772:	079b      	lsls	r3, r3, #30
 8009774:	d413      	bmi.n	800979e <_printf_i+0x232>
 8009776:	68e0      	ldr	r0, [r4, #12]
 8009778:	9b03      	ldr	r3, [sp, #12]
 800977a:	4298      	cmp	r0, r3
 800977c:	bfb8      	it	lt
 800977e:	4618      	movlt	r0, r3
 8009780:	e7a6      	b.n	80096d0 <_printf_i+0x164>
 8009782:	2301      	movs	r3, #1
 8009784:	4632      	mov	r2, r6
 8009786:	4649      	mov	r1, r9
 8009788:	4640      	mov	r0, r8
 800978a:	47d0      	blx	sl
 800978c:	3001      	adds	r0, #1
 800978e:	d09d      	beq.n	80096cc <_printf_i+0x160>
 8009790:	3501      	adds	r5, #1
 8009792:	68e3      	ldr	r3, [r4, #12]
 8009794:	9903      	ldr	r1, [sp, #12]
 8009796:	1a5b      	subs	r3, r3, r1
 8009798:	42ab      	cmp	r3, r5
 800979a:	dcf2      	bgt.n	8009782 <_printf_i+0x216>
 800979c:	e7eb      	b.n	8009776 <_printf_i+0x20a>
 800979e:	2500      	movs	r5, #0
 80097a0:	f104 0619 	add.w	r6, r4, #25
 80097a4:	e7f5      	b.n	8009792 <_printf_i+0x226>
 80097a6:	bf00      	nop
 80097a8:	08009935 	.word	0x08009935
 80097ac:	08009946 	.word	0x08009946

080097b0 <memmove>:
 80097b0:	4288      	cmp	r0, r1
 80097b2:	b510      	push	{r4, lr}
 80097b4:	eb01 0402 	add.w	r4, r1, r2
 80097b8:	d902      	bls.n	80097c0 <memmove+0x10>
 80097ba:	4284      	cmp	r4, r0
 80097bc:	4623      	mov	r3, r4
 80097be:	d807      	bhi.n	80097d0 <memmove+0x20>
 80097c0:	1e43      	subs	r3, r0, #1
 80097c2:	42a1      	cmp	r1, r4
 80097c4:	d008      	beq.n	80097d8 <memmove+0x28>
 80097c6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80097ca:	f803 2f01 	strb.w	r2, [r3, #1]!
 80097ce:	e7f8      	b.n	80097c2 <memmove+0x12>
 80097d0:	4402      	add	r2, r0
 80097d2:	4601      	mov	r1, r0
 80097d4:	428a      	cmp	r2, r1
 80097d6:	d100      	bne.n	80097da <memmove+0x2a>
 80097d8:	bd10      	pop	{r4, pc}
 80097da:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80097de:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80097e2:	e7f7      	b.n	80097d4 <memmove+0x24>

080097e4 <_sbrk_r>:
 80097e4:	b538      	push	{r3, r4, r5, lr}
 80097e6:	4d06      	ldr	r5, [pc, #24]	; (8009800 <_sbrk_r+0x1c>)
 80097e8:	2300      	movs	r3, #0
 80097ea:	4604      	mov	r4, r0
 80097ec:	4608      	mov	r0, r1
 80097ee:	602b      	str	r3, [r5, #0]
 80097f0:	f7f7 f812 	bl	8000818 <_sbrk>
 80097f4:	1c43      	adds	r3, r0, #1
 80097f6:	d102      	bne.n	80097fe <_sbrk_r+0x1a>
 80097f8:	682b      	ldr	r3, [r5, #0]
 80097fa:	b103      	cbz	r3, 80097fe <_sbrk_r+0x1a>
 80097fc:	6023      	str	r3, [r4, #0]
 80097fe:	bd38      	pop	{r3, r4, r5, pc}
 8009800:	20002488 	.word	0x20002488

08009804 <memcpy>:
 8009804:	440a      	add	r2, r1
 8009806:	4291      	cmp	r1, r2
 8009808:	f100 33ff 	add.w	r3, r0, #4294967295
 800980c:	d100      	bne.n	8009810 <memcpy+0xc>
 800980e:	4770      	bx	lr
 8009810:	b510      	push	{r4, lr}
 8009812:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009816:	f803 4f01 	strb.w	r4, [r3, #1]!
 800981a:	4291      	cmp	r1, r2
 800981c:	d1f9      	bne.n	8009812 <memcpy+0xe>
 800981e:	bd10      	pop	{r4, pc}

08009820 <_realloc_r>:
 8009820:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009824:	4680      	mov	r8, r0
 8009826:	4614      	mov	r4, r2
 8009828:	460e      	mov	r6, r1
 800982a:	b921      	cbnz	r1, 8009836 <_realloc_r+0x16>
 800982c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009830:	4611      	mov	r1, r2
 8009832:	f7ff bc49 	b.w	80090c8 <_malloc_r>
 8009836:	b92a      	cbnz	r2, 8009844 <_realloc_r+0x24>
 8009838:	f7ff fbda 	bl	8008ff0 <_free_r>
 800983c:	4625      	mov	r5, r4
 800983e:	4628      	mov	r0, r5
 8009840:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009844:	f000 f81b 	bl	800987e <_malloc_usable_size_r>
 8009848:	4284      	cmp	r4, r0
 800984a:	4607      	mov	r7, r0
 800984c:	d802      	bhi.n	8009854 <_realloc_r+0x34>
 800984e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009852:	d812      	bhi.n	800987a <_realloc_r+0x5a>
 8009854:	4621      	mov	r1, r4
 8009856:	4640      	mov	r0, r8
 8009858:	f7ff fc36 	bl	80090c8 <_malloc_r>
 800985c:	4605      	mov	r5, r0
 800985e:	2800      	cmp	r0, #0
 8009860:	d0ed      	beq.n	800983e <_realloc_r+0x1e>
 8009862:	42bc      	cmp	r4, r7
 8009864:	4622      	mov	r2, r4
 8009866:	4631      	mov	r1, r6
 8009868:	bf28      	it	cs
 800986a:	463a      	movcs	r2, r7
 800986c:	f7ff ffca 	bl	8009804 <memcpy>
 8009870:	4631      	mov	r1, r6
 8009872:	4640      	mov	r0, r8
 8009874:	f7ff fbbc 	bl	8008ff0 <_free_r>
 8009878:	e7e1      	b.n	800983e <_realloc_r+0x1e>
 800987a:	4635      	mov	r5, r6
 800987c:	e7df      	b.n	800983e <_realloc_r+0x1e>

0800987e <_malloc_usable_size_r>:
 800987e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009882:	1f18      	subs	r0, r3, #4
 8009884:	2b00      	cmp	r3, #0
 8009886:	bfbc      	itt	lt
 8009888:	580b      	ldrlt	r3, [r1, r0]
 800988a:	18c0      	addlt	r0, r0, r3
 800988c:	4770      	bx	lr
	...

08009890 <_init>:
 8009890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009892:	bf00      	nop
 8009894:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009896:	bc08      	pop	{r3}
 8009898:	469e      	mov	lr, r3
 800989a:	4770      	bx	lr

0800989c <_fini>:
 800989c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800989e:	bf00      	nop
 80098a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80098a2:	bc08      	pop	{r3}
 80098a4:	469e      	mov	lr, r3
 80098a6:	4770      	bx	lr
