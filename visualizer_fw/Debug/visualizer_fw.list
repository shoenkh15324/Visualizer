
visualizer_fw.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000166c0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000cf2c  08016880  08016880  00026880  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080237ac  080237ac  00040350  2**0
                  CONTENTS
  4 .ARM          00000008  080237ac  080237ac  000337ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080237b4  080237b4  00040350  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080237b4  080237b4  000337b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080237b8  080237b8  000337b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000350  20000000  080237bc  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00008cec  20000380  08023b0c  00040380  2**6
                  ALLOC
 10 ._user_heap_stack 00000604  2000906c  08023b0c  0004906c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00040350  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00040380  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001fdb5  00000000  00000000  000403c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000068fa  00000000  00000000  00060178  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001cd0  00000000  00000000  00066a78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000156b  00000000  00000000  00068748  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f93a  00000000  00000000  00069cb3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002b3ea  00000000  00000000  000895ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000946f3  00000000  00000000  000b49d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00008634  00000000  00000000  001490cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000081  00000000  00000000  00151700  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000380 	.word	0x20000380
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08016848 	.word	0x08016848

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000384 	.word	0x20000384
 80001dc:	08016848 	.word	0x08016848

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2uiz>:
 8000b78:	004a      	lsls	r2, r1, #1
 8000b7a:	d211      	bcs.n	8000ba0 <__aeabi_d2uiz+0x28>
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d211      	bcs.n	8000ba6 <__aeabi_d2uiz+0x2e>
 8000b82:	d50d      	bpl.n	8000ba0 <__aeabi_d2uiz+0x28>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d40e      	bmi.n	8000bac <__aeabi_d2uiz+0x34>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_d2uiz+0x3a>
 8000bac:	f04f 30ff 	mov.w	r0, #4294967295
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0000 	mov.w	r0, #0
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b9a6 	b.w	8000fbc <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f83c 	bl	8000cf4 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__aeabi_d2lz>:
 8000c88:	b538      	push	{r3, r4, r5, lr}
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	4604      	mov	r4, r0
 8000c90:	460d      	mov	r5, r1
 8000c92:	f7ff ff33 	bl	8000afc <__aeabi_dcmplt>
 8000c96:	b928      	cbnz	r0, 8000ca4 <__aeabi_d2lz+0x1c>
 8000c98:	4620      	mov	r0, r4
 8000c9a:	4629      	mov	r1, r5
 8000c9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ca0:	f000 b80a 	b.w	8000cb8 <__aeabi_d2ulz>
 8000ca4:	4620      	mov	r0, r4
 8000ca6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000caa:	f000 f805 	bl	8000cb8 <__aeabi_d2ulz>
 8000cae:	4240      	negs	r0, r0
 8000cb0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cb4:	bd38      	pop	{r3, r4, r5, pc}
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_d2ulz>:
 8000cb8:	b5d0      	push	{r4, r6, r7, lr}
 8000cba:	4b0c      	ldr	r3, [pc, #48]	; (8000cec <__aeabi_d2ulz+0x34>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	4606      	mov	r6, r0
 8000cc0:	460f      	mov	r7, r1
 8000cc2:	f7ff fca9 	bl	8000618 <__aeabi_dmul>
 8000cc6:	f7ff ff57 	bl	8000b78 <__aeabi_d2uiz>
 8000cca:	4604      	mov	r4, r0
 8000ccc:	f7ff fc2a 	bl	8000524 <__aeabi_ui2d>
 8000cd0:	4b07      	ldr	r3, [pc, #28]	; (8000cf0 <__aeabi_d2ulz+0x38>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	f7ff fca0 	bl	8000618 <__aeabi_dmul>
 8000cd8:	4602      	mov	r2, r0
 8000cda:	460b      	mov	r3, r1
 8000cdc:	4630      	mov	r0, r6
 8000cde:	4639      	mov	r1, r7
 8000ce0:	f7ff fae2 	bl	80002a8 <__aeabi_dsub>
 8000ce4:	f7ff ff48 	bl	8000b78 <__aeabi_d2uiz>
 8000ce8:	4621      	mov	r1, r4
 8000cea:	bdd0      	pop	{r4, r6, r7, pc}
 8000cec:	3df00000 	.word	0x3df00000
 8000cf0:	41f00000 	.word	0x41f00000

08000cf4 <__udivmoddi4>:
 8000cf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cf8:	9e08      	ldr	r6, [sp, #32]
 8000cfa:	460d      	mov	r5, r1
 8000cfc:	4604      	mov	r4, r0
 8000cfe:	460f      	mov	r7, r1
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d14a      	bne.n	8000d9a <__udivmoddi4+0xa6>
 8000d04:	428a      	cmp	r2, r1
 8000d06:	4694      	mov	ip, r2
 8000d08:	d965      	bls.n	8000dd6 <__udivmoddi4+0xe2>
 8000d0a:	fab2 f382 	clz	r3, r2
 8000d0e:	b143      	cbz	r3, 8000d22 <__udivmoddi4+0x2e>
 8000d10:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d14:	f1c3 0220 	rsb	r2, r3, #32
 8000d18:	409f      	lsls	r7, r3
 8000d1a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d1e:	4317      	orrs	r7, r2
 8000d20:	409c      	lsls	r4, r3
 8000d22:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d26:	fa1f f58c 	uxth.w	r5, ip
 8000d2a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d2e:	0c22      	lsrs	r2, r4, #16
 8000d30:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d34:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d38:	fb01 f005 	mul.w	r0, r1, r5
 8000d3c:	4290      	cmp	r0, r2
 8000d3e:	d90a      	bls.n	8000d56 <__udivmoddi4+0x62>
 8000d40:	eb1c 0202 	adds.w	r2, ip, r2
 8000d44:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d48:	f080 811c 	bcs.w	8000f84 <__udivmoddi4+0x290>
 8000d4c:	4290      	cmp	r0, r2
 8000d4e:	f240 8119 	bls.w	8000f84 <__udivmoddi4+0x290>
 8000d52:	3902      	subs	r1, #2
 8000d54:	4462      	add	r2, ip
 8000d56:	1a12      	subs	r2, r2, r0
 8000d58:	b2a4      	uxth	r4, r4
 8000d5a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d5e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d62:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d66:	fb00 f505 	mul.w	r5, r0, r5
 8000d6a:	42a5      	cmp	r5, r4
 8000d6c:	d90a      	bls.n	8000d84 <__udivmoddi4+0x90>
 8000d6e:	eb1c 0404 	adds.w	r4, ip, r4
 8000d72:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d76:	f080 8107 	bcs.w	8000f88 <__udivmoddi4+0x294>
 8000d7a:	42a5      	cmp	r5, r4
 8000d7c:	f240 8104 	bls.w	8000f88 <__udivmoddi4+0x294>
 8000d80:	4464      	add	r4, ip
 8000d82:	3802      	subs	r0, #2
 8000d84:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d88:	1b64      	subs	r4, r4, r5
 8000d8a:	2100      	movs	r1, #0
 8000d8c:	b11e      	cbz	r6, 8000d96 <__udivmoddi4+0xa2>
 8000d8e:	40dc      	lsrs	r4, r3
 8000d90:	2300      	movs	r3, #0
 8000d92:	e9c6 4300 	strd	r4, r3, [r6]
 8000d96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d9a:	428b      	cmp	r3, r1
 8000d9c:	d908      	bls.n	8000db0 <__udivmoddi4+0xbc>
 8000d9e:	2e00      	cmp	r6, #0
 8000da0:	f000 80ed 	beq.w	8000f7e <__udivmoddi4+0x28a>
 8000da4:	2100      	movs	r1, #0
 8000da6:	e9c6 0500 	strd	r0, r5, [r6]
 8000daa:	4608      	mov	r0, r1
 8000dac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000db0:	fab3 f183 	clz	r1, r3
 8000db4:	2900      	cmp	r1, #0
 8000db6:	d149      	bne.n	8000e4c <__udivmoddi4+0x158>
 8000db8:	42ab      	cmp	r3, r5
 8000dba:	d302      	bcc.n	8000dc2 <__udivmoddi4+0xce>
 8000dbc:	4282      	cmp	r2, r0
 8000dbe:	f200 80f8 	bhi.w	8000fb2 <__udivmoddi4+0x2be>
 8000dc2:	1a84      	subs	r4, r0, r2
 8000dc4:	eb65 0203 	sbc.w	r2, r5, r3
 8000dc8:	2001      	movs	r0, #1
 8000dca:	4617      	mov	r7, r2
 8000dcc:	2e00      	cmp	r6, #0
 8000dce:	d0e2      	beq.n	8000d96 <__udivmoddi4+0xa2>
 8000dd0:	e9c6 4700 	strd	r4, r7, [r6]
 8000dd4:	e7df      	b.n	8000d96 <__udivmoddi4+0xa2>
 8000dd6:	b902      	cbnz	r2, 8000dda <__udivmoddi4+0xe6>
 8000dd8:	deff      	udf	#255	; 0xff
 8000dda:	fab2 f382 	clz	r3, r2
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	f040 8090 	bne.w	8000f04 <__udivmoddi4+0x210>
 8000de4:	1a8a      	subs	r2, r1, r2
 8000de6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dea:	fa1f fe8c 	uxth.w	lr, ip
 8000dee:	2101      	movs	r1, #1
 8000df0:	fbb2 f5f7 	udiv	r5, r2, r7
 8000df4:	fb07 2015 	mls	r0, r7, r5, r2
 8000df8:	0c22      	lsrs	r2, r4, #16
 8000dfa:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000dfe:	fb0e f005 	mul.w	r0, lr, r5
 8000e02:	4290      	cmp	r0, r2
 8000e04:	d908      	bls.n	8000e18 <__udivmoddi4+0x124>
 8000e06:	eb1c 0202 	adds.w	r2, ip, r2
 8000e0a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e0e:	d202      	bcs.n	8000e16 <__udivmoddi4+0x122>
 8000e10:	4290      	cmp	r0, r2
 8000e12:	f200 80cb 	bhi.w	8000fac <__udivmoddi4+0x2b8>
 8000e16:	4645      	mov	r5, r8
 8000e18:	1a12      	subs	r2, r2, r0
 8000e1a:	b2a4      	uxth	r4, r4
 8000e1c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e20:	fb07 2210 	mls	r2, r7, r0, r2
 8000e24:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e28:	fb0e fe00 	mul.w	lr, lr, r0
 8000e2c:	45a6      	cmp	lr, r4
 8000e2e:	d908      	bls.n	8000e42 <__udivmoddi4+0x14e>
 8000e30:	eb1c 0404 	adds.w	r4, ip, r4
 8000e34:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e38:	d202      	bcs.n	8000e40 <__udivmoddi4+0x14c>
 8000e3a:	45a6      	cmp	lr, r4
 8000e3c:	f200 80bb 	bhi.w	8000fb6 <__udivmoddi4+0x2c2>
 8000e40:	4610      	mov	r0, r2
 8000e42:	eba4 040e 	sub.w	r4, r4, lr
 8000e46:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e4a:	e79f      	b.n	8000d8c <__udivmoddi4+0x98>
 8000e4c:	f1c1 0720 	rsb	r7, r1, #32
 8000e50:	408b      	lsls	r3, r1
 8000e52:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e56:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e5a:	fa05 f401 	lsl.w	r4, r5, r1
 8000e5e:	fa20 f307 	lsr.w	r3, r0, r7
 8000e62:	40fd      	lsrs	r5, r7
 8000e64:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e68:	4323      	orrs	r3, r4
 8000e6a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e6e:	fa1f fe8c 	uxth.w	lr, ip
 8000e72:	fb09 5518 	mls	r5, r9, r8, r5
 8000e76:	0c1c      	lsrs	r4, r3, #16
 8000e78:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e7c:	fb08 f50e 	mul.w	r5, r8, lr
 8000e80:	42a5      	cmp	r5, r4
 8000e82:	fa02 f201 	lsl.w	r2, r2, r1
 8000e86:	fa00 f001 	lsl.w	r0, r0, r1
 8000e8a:	d90b      	bls.n	8000ea4 <__udivmoddi4+0x1b0>
 8000e8c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e90:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e94:	f080 8088 	bcs.w	8000fa8 <__udivmoddi4+0x2b4>
 8000e98:	42a5      	cmp	r5, r4
 8000e9a:	f240 8085 	bls.w	8000fa8 <__udivmoddi4+0x2b4>
 8000e9e:	f1a8 0802 	sub.w	r8, r8, #2
 8000ea2:	4464      	add	r4, ip
 8000ea4:	1b64      	subs	r4, r4, r5
 8000ea6:	b29d      	uxth	r5, r3
 8000ea8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000eac:	fb09 4413 	mls	r4, r9, r3, r4
 8000eb0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000eb4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000eb8:	45a6      	cmp	lr, r4
 8000eba:	d908      	bls.n	8000ece <__udivmoddi4+0x1da>
 8000ebc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ec0:	f103 35ff 	add.w	r5, r3, #4294967295
 8000ec4:	d26c      	bcs.n	8000fa0 <__udivmoddi4+0x2ac>
 8000ec6:	45a6      	cmp	lr, r4
 8000ec8:	d96a      	bls.n	8000fa0 <__udivmoddi4+0x2ac>
 8000eca:	3b02      	subs	r3, #2
 8000ecc:	4464      	add	r4, ip
 8000ece:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ed2:	fba3 9502 	umull	r9, r5, r3, r2
 8000ed6:	eba4 040e 	sub.w	r4, r4, lr
 8000eda:	42ac      	cmp	r4, r5
 8000edc:	46c8      	mov	r8, r9
 8000ede:	46ae      	mov	lr, r5
 8000ee0:	d356      	bcc.n	8000f90 <__udivmoddi4+0x29c>
 8000ee2:	d053      	beq.n	8000f8c <__udivmoddi4+0x298>
 8000ee4:	b156      	cbz	r6, 8000efc <__udivmoddi4+0x208>
 8000ee6:	ebb0 0208 	subs.w	r2, r0, r8
 8000eea:	eb64 040e 	sbc.w	r4, r4, lr
 8000eee:	fa04 f707 	lsl.w	r7, r4, r7
 8000ef2:	40ca      	lsrs	r2, r1
 8000ef4:	40cc      	lsrs	r4, r1
 8000ef6:	4317      	orrs	r7, r2
 8000ef8:	e9c6 7400 	strd	r7, r4, [r6]
 8000efc:	4618      	mov	r0, r3
 8000efe:	2100      	movs	r1, #0
 8000f00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f04:	f1c3 0120 	rsb	r1, r3, #32
 8000f08:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f0c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f10:	fa25 f101 	lsr.w	r1, r5, r1
 8000f14:	409d      	lsls	r5, r3
 8000f16:	432a      	orrs	r2, r5
 8000f18:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f1c:	fa1f fe8c 	uxth.w	lr, ip
 8000f20:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f24:	fb07 1510 	mls	r5, r7, r0, r1
 8000f28:	0c11      	lsrs	r1, r2, #16
 8000f2a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f2e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f32:	428d      	cmp	r5, r1
 8000f34:	fa04 f403 	lsl.w	r4, r4, r3
 8000f38:	d908      	bls.n	8000f4c <__udivmoddi4+0x258>
 8000f3a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f3e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f42:	d22f      	bcs.n	8000fa4 <__udivmoddi4+0x2b0>
 8000f44:	428d      	cmp	r5, r1
 8000f46:	d92d      	bls.n	8000fa4 <__udivmoddi4+0x2b0>
 8000f48:	3802      	subs	r0, #2
 8000f4a:	4461      	add	r1, ip
 8000f4c:	1b49      	subs	r1, r1, r5
 8000f4e:	b292      	uxth	r2, r2
 8000f50:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f54:	fb07 1115 	mls	r1, r7, r5, r1
 8000f58:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f5c:	fb05 f10e 	mul.w	r1, r5, lr
 8000f60:	4291      	cmp	r1, r2
 8000f62:	d908      	bls.n	8000f76 <__udivmoddi4+0x282>
 8000f64:	eb1c 0202 	adds.w	r2, ip, r2
 8000f68:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f6c:	d216      	bcs.n	8000f9c <__udivmoddi4+0x2a8>
 8000f6e:	4291      	cmp	r1, r2
 8000f70:	d914      	bls.n	8000f9c <__udivmoddi4+0x2a8>
 8000f72:	3d02      	subs	r5, #2
 8000f74:	4462      	add	r2, ip
 8000f76:	1a52      	subs	r2, r2, r1
 8000f78:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f7c:	e738      	b.n	8000df0 <__udivmoddi4+0xfc>
 8000f7e:	4631      	mov	r1, r6
 8000f80:	4630      	mov	r0, r6
 8000f82:	e708      	b.n	8000d96 <__udivmoddi4+0xa2>
 8000f84:	4639      	mov	r1, r7
 8000f86:	e6e6      	b.n	8000d56 <__udivmoddi4+0x62>
 8000f88:	4610      	mov	r0, r2
 8000f8a:	e6fb      	b.n	8000d84 <__udivmoddi4+0x90>
 8000f8c:	4548      	cmp	r0, r9
 8000f8e:	d2a9      	bcs.n	8000ee4 <__udivmoddi4+0x1f0>
 8000f90:	ebb9 0802 	subs.w	r8, r9, r2
 8000f94:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f98:	3b01      	subs	r3, #1
 8000f9a:	e7a3      	b.n	8000ee4 <__udivmoddi4+0x1f0>
 8000f9c:	4645      	mov	r5, r8
 8000f9e:	e7ea      	b.n	8000f76 <__udivmoddi4+0x282>
 8000fa0:	462b      	mov	r3, r5
 8000fa2:	e794      	b.n	8000ece <__udivmoddi4+0x1da>
 8000fa4:	4640      	mov	r0, r8
 8000fa6:	e7d1      	b.n	8000f4c <__udivmoddi4+0x258>
 8000fa8:	46d0      	mov	r8, sl
 8000faa:	e77b      	b.n	8000ea4 <__udivmoddi4+0x1b0>
 8000fac:	3d02      	subs	r5, #2
 8000fae:	4462      	add	r2, ip
 8000fb0:	e732      	b.n	8000e18 <__udivmoddi4+0x124>
 8000fb2:	4608      	mov	r0, r1
 8000fb4:	e70a      	b.n	8000dcc <__udivmoddi4+0xd8>
 8000fb6:	4464      	add	r4, ip
 8000fb8:	3802      	subs	r0, #2
 8000fba:	e742      	b.n	8000e42 <__udivmoddi4+0x14e>

08000fbc <__aeabi_idiv0>:
 8000fbc:	4770      	bx	lr
 8000fbe:	bf00      	nop

08000fc0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b082      	sub	sp, #8
 8000fc4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	607b      	str	r3, [r7, #4]
 8000fca:	4b14      	ldr	r3, [pc, #80]	; (800101c <MX_DMA_Init+0x5c>)
 8000fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fce:	4a13      	ldr	r2, [pc, #76]	; (800101c <MX_DMA_Init+0x5c>)
 8000fd0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000fd4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fd6:	4b11      	ldr	r3, [pc, #68]	; (800101c <MX_DMA_Init+0x5c>)
 8000fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000fde:	607b      	str	r3, [r7, #4]
 8000fe0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	2100      	movs	r1, #0
 8000fe6:	2039      	movs	r0, #57	; 0x39
 8000fe8:	f004 fd6f 	bl	8005aca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000fec:	2039      	movs	r0, #57	; 0x39
 8000fee:	f004 fd88 	bl	8005b02 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	2105      	movs	r1, #5
 8000ff6:	203b      	movs	r0, #59	; 0x3b
 8000ff8:	f004 fd67 	bl	8005aca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000ffc:	203b      	movs	r0, #59	; 0x3b
 8000ffe:	f004 fd80 	bl	8005b02 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 8001002:	2200      	movs	r2, #0
 8001004:	2105      	movs	r1, #5
 8001006:	2045      	movs	r0, #69	; 0x45
 8001008:	f004 fd5f 	bl	8005aca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 800100c:	2045      	movs	r0, #69	; 0x45
 800100e:	f004 fd78 	bl	8005b02 <HAL_NVIC_EnableIRQ>

}
 8001012:	bf00      	nop
 8001014:	3708      	adds	r7, #8
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	40023800 	.word	0x40023800

08001020 <flashInit>:
#ifdef _USE_HW_CLI
static void cliFlash(cli_args_t *args);
#endif

bool flashInit(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	af00      	add	r7, sp, #0

#ifdef _USE_HW_CLI
	cliAdd("flash", cliFlash);
 8001024:	4903      	ldr	r1, [pc, #12]	; (8001034 <flashInit+0x14>)
 8001026:	4804      	ldr	r0, [pc, #16]	; (8001038 <flashInit+0x18>)
 8001028:	f002 fbf6 	bl	8003818 <cliAdd>
#endif

	return true;
 800102c:	2301      	movs	r3, #1
}
 800102e:	4618      	mov	r0, r3
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	080011ed 	.word	0x080011ed
 8001038:	08016880 	.word	0x08016880

0800103c <flashErase>:

bool flashErase(uint32_t addr, uint32_t length)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b08c      	sub	sp, #48	; 0x30
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
 8001044:	6039      	str	r1, [r7, #0]
	bool ret = false;
 8001046:	2300      	movs	r3, #0
 8001048:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  HAL_StatusTypeDef status;
  FLASH_EraseInitTypeDef init;
  uint32_t page_error;

  uint16_t start_sector_num = -1;
 800104c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001050:	84fb      	strh	r3, [r7, #38]	; 0x26
  uint16_t sector_count = 0;
 8001052:	2300      	movs	r3, #0
 8001054:	85bb      	strh	r3, [r7, #44]	; 0x2c

  for(int i=0; i<FLASH_SECTOR_MAX; i++)
 8001056:	2300      	movs	r3, #0
 8001058:	62bb      	str	r3, [r7, #40]	; 0x28
 800105a:	e00f      	b.n	800107c <flashErase+0x40>
  {
  	if(flashInSector(i, addr, length) == true)
 800105c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800105e:	b29b      	uxth	r3, r3
 8001060:	683a      	ldr	r2, [r7, #0]
 8001062:	6879      	ldr	r1, [r7, #4]
 8001064:	4618      	mov	r0, r3
 8001066:	f000 f869 	bl	800113c <flashInSector>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	d002      	beq.n	8001076 <flashErase+0x3a>
  	{
  		if(start_sector_num < 0)
  		{
  			start_sector_num = i;
  		}
  		sector_count++;
 8001070:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001072:	3301      	adds	r3, #1
 8001074:	85bb      	strh	r3, [r7, #44]	; 0x2c
  for(int i=0; i<FLASH_SECTOR_MAX; i++)
 8001076:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001078:	3301      	adds	r3, #1
 800107a:	62bb      	str	r3, [r7, #40]	; 0x28
 800107c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800107e:	2b07      	cmp	r3, #7
 8001080:	ddec      	ble.n	800105c <flashErase+0x20>
  	}
  }

  if(sector_count > 0)
 8001082:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001084:	2b00      	cmp	r3, #0
 8001086:	d01f      	beq.n	80010c8 <flashErase+0x8c>
  {
  	HAL_FLASH_Unlock();
 8001088:	f005 f948 	bl	800631c <HAL_FLASH_Unlock>

    init.TypeErase   = FLASH_TYPEERASE_SECTORS;
 800108c:	2300      	movs	r3, #0
 800108e:	613b      	str	r3, [r7, #16]
    init.Banks       = FLASH_BANK_1;
 8001090:	2301      	movs	r3, #1
 8001092:	617b      	str	r3, [r7, #20]
    init.Sector      = start_sector_num;
 8001094:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001096:	61bb      	str	r3, [r7, #24]
    init.NbSectors   = sector_count;
 8001098:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800109a:	61fb      	str	r3, [r7, #28]
    init.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 800109c:	2302      	movs	r3, #2
 800109e:	623b      	str	r3, [r7, #32]

    status = HAL_FLASHEx_Erase(&init, &page_error);
 80010a0:	f107 020c 	add.w	r2, r7, #12
 80010a4:	f107 0310 	add.w	r3, r7, #16
 80010a8:	4611      	mov	r1, r2
 80010aa:	4618      	mov	r0, r3
 80010ac:	f005 faa8 	bl	8006600 <HAL_FLASHEx_Erase>
 80010b0:	4603      	mov	r3, r0
 80010b2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    if(status == HAL_OK)
 80010b6:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d102      	bne.n	80010c4 <flashErase+0x88>
    {
    	ret = true;
 80010be:	2301      	movs	r3, #1
 80010c0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    HAL_FLASH_Lock();
 80010c4:	f005 f94c 	bl	8006360 <HAL_FLASH_Lock>
  }

  return ret;
 80010c8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80010cc:	4618      	mov	r0, r3
 80010ce:	3730      	adds	r7, #48	; 0x30
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}

080010d4 <flashWrite>:

bool flashWrite(uint32_t addr, uint8_t *p_data, uint32_t length)
{
 80010d4:	b5b0      	push	{r4, r5, r7, lr}
 80010d6:	b088      	sub	sp, #32
 80010d8:	af00      	add	r7, sp, #0
 80010da:	60f8      	str	r0, [r7, #12]
 80010dc:	60b9      	str	r1, [r7, #8]
 80010de:	607a      	str	r2, [r7, #4]
	bool ret = true;
 80010e0:	2301      	movs	r3, #1
 80010e2:	77fb      	strb	r3, [r7, #31]
	HAL_StatusTypeDef status;

	HAL_FLASH_Unlock();
 80010e4:	f005 f91a 	bl	800631c <HAL_FLASH_Unlock>

	for(int i=0; i<length; i++)
 80010e8:	2300      	movs	r3, #0
 80010ea:	61bb      	str	r3, [r7, #24]
 80010ec:	e01b      	b.n	8001126 <flashWrite+0x52>
	{
		uint16_t data;

		data = p_data[i+0] << 0;
 80010ee:	69bb      	ldr	r3, [r7, #24]
 80010f0:	68ba      	ldr	r2, [r7, #8]
 80010f2:	4413      	add	r3, r2
 80010f4:	781b      	ldrb	r3, [r3, #0]
 80010f6:	82fb      	strh	r3, [r7, #22]

		status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, addr + i, (uint16_t)data);
 80010f8:	69ba      	ldr	r2, [r7, #24]
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	18d1      	adds	r1, r2, r3
 80010fe:	8afb      	ldrh	r3, [r7, #22]
 8001100:	2200      	movs	r2, #0
 8001102:	461c      	mov	r4, r3
 8001104:	4615      	mov	r5, r2
 8001106:	4622      	mov	r2, r4
 8001108:	462b      	mov	r3, r5
 800110a:	2000      	movs	r0, #0
 800110c:	f005 f8b2 	bl	8006274 <HAL_FLASH_Program>
 8001110:	4603      	mov	r3, r0
 8001112:	757b      	strb	r3, [r7, #21]
		if(status != HAL_OK)
 8001114:	7d7b      	ldrb	r3, [r7, #21]
 8001116:	2b00      	cmp	r3, #0
 8001118:	d002      	beq.n	8001120 <flashWrite+0x4c>
		{
			ret = false;
 800111a:	2300      	movs	r3, #0
 800111c:	77fb      	strb	r3, [r7, #31]
			break;
 800111e:	e006      	b.n	800112e <flashWrite+0x5a>
	for(int i=0; i<length; i++)
 8001120:	69bb      	ldr	r3, [r7, #24]
 8001122:	3301      	adds	r3, #1
 8001124:	61bb      	str	r3, [r7, #24]
 8001126:	69bb      	ldr	r3, [r7, #24]
 8001128:	687a      	ldr	r2, [r7, #4]
 800112a:	429a      	cmp	r2, r3
 800112c:	d8df      	bhi.n	80010ee <flashWrite+0x1a>
		}
	}

	HAL_FLASH_Lock();
 800112e:	f005 f917 	bl	8006360 <HAL_FLASH_Lock>

	return ret;
 8001132:	7ffb      	ldrb	r3, [r7, #31]
}
 8001134:	4618      	mov	r0, r3
 8001136:	3720      	adds	r7, #32
 8001138:	46bd      	mov	sp, r7
 800113a:	bdb0      	pop	{r4, r5, r7, pc}

0800113c <flashInSector>:

	return ret;
}

bool flashInSector(uint16_t sector_num, uint32_t addr, uint32_t length)
{
 800113c:	b480      	push	{r7}
 800113e:	b08b      	sub	sp, #44	; 0x2c
 8001140:	af00      	add	r7, sp, #0
 8001142:	4603      	mov	r3, r0
 8001144:	60b9      	str	r1, [r7, #8]
 8001146:	607a      	str	r2, [r7, #4]
 8001148:	81fb      	strh	r3, [r7, #14]
	bool ret = false;
 800114a:	2300      	movs	r3, #0
 800114c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint32_t sector_start;
	uint32_t sector_end;
	uint32_t flash_start;
	uint32_t flash_end;

	sector_start = flash_tbl[sector_num].addr;
 8001150:	89fb      	ldrh	r3, [r7, #14]
 8001152:	4a25      	ldr	r2, [pc, #148]	; (80011e8 <flashInSector+0xac>)
 8001154:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001158:	623b      	str	r3, [r7, #32]
	sector_end = flash_tbl[sector_num].addr + flash_tbl[sector_num].length - 1;
 800115a:	89fb      	ldrh	r3, [r7, #14]
 800115c:	4a22      	ldr	r2, [pc, #136]	; (80011e8 <flashInSector+0xac>)
 800115e:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8001162:	89fb      	ldrh	r3, [r7, #14]
 8001164:	4920      	ldr	r1, [pc, #128]	; (80011e8 <flashInSector+0xac>)
 8001166:	00db      	lsls	r3, r3, #3
 8001168:	440b      	add	r3, r1
 800116a:	685b      	ldr	r3, [r3, #4]
 800116c:	4413      	add	r3, r2
 800116e:	3b01      	subs	r3, #1
 8001170:	61fb      	str	r3, [r7, #28]
	flash_start = addr;
 8001172:	68bb      	ldr	r3, [r7, #8]
 8001174:	61bb      	str	r3, [r7, #24]
	flash_end = addr + length - 1;
 8001176:	68ba      	ldr	r2, [r7, #8]
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	4413      	add	r3, r2
 800117c:	3b01      	subs	r3, #1
 800117e:	617b      	str	r3, [r7, #20]

	if(sector_start >= flash_start && sector_start <= flash_end)
 8001180:	6a3a      	ldr	r2, [r7, #32]
 8001182:	69bb      	ldr	r3, [r7, #24]
 8001184:	429a      	cmp	r2, r3
 8001186:	d306      	bcc.n	8001196 <flashInSector+0x5a>
 8001188:	6a3a      	ldr	r2, [r7, #32]
 800118a:	697b      	ldr	r3, [r7, #20]
 800118c:	429a      	cmp	r2, r3
 800118e:	d802      	bhi.n	8001196 <flashInSector+0x5a>
	{
		ret = true;
 8001190:	2301      	movs	r3, #1
 8001192:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

  if (sector_end >= flash_start && sector_end <= flash_end)
 8001196:	69fa      	ldr	r2, [r7, #28]
 8001198:	69bb      	ldr	r3, [r7, #24]
 800119a:	429a      	cmp	r2, r3
 800119c:	d306      	bcc.n	80011ac <flashInSector+0x70>
 800119e:	69fa      	ldr	r2, [r7, #28]
 80011a0:	697b      	ldr	r3, [r7, #20]
 80011a2:	429a      	cmp	r2, r3
 80011a4:	d802      	bhi.n	80011ac <flashInSector+0x70>
  {
    ret = true;
 80011a6:	2301      	movs	r3, #1
 80011a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (flash_start >= sector_start && flash_start <= sector_end)
 80011ac:	69ba      	ldr	r2, [r7, #24]
 80011ae:	6a3b      	ldr	r3, [r7, #32]
 80011b0:	429a      	cmp	r2, r3
 80011b2:	d306      	bcc.n	80011c2 <flashInSector+0x86>
 80011b4:	69ba      	ldr	r2, [r7, #24]
 80011b6:	69fb      	ldr	r3, [r7, #28]
 80011b8:	429a      	cmp	r2, r3
 80011ba:	d802      	bhi.n	80011c2 <flashInSector+0x86>
  {
    ret = true;
 80011bc:	2301      	movs	r3, #1
 80011be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (flash_end >= sector_start && flash_end <= sector_end)
 80011c2:	697a      	ldr	r2, [r7, #20]
 80011c4:	6a3b      	ldr	r3, [r7, #32]
 80011c6:	429a      	cmp	r2, r3
 80011c8:	d306      	bcc.n	80011d8 <flashInSector+0x9c>
 80011ca:	697a      	ldr	r2, [r7, #20]
 80011cc:	69fb      	ldr	r3, [r7, #28]
 80011ce:	429a      	cmp	r2, r3
 80011d0:	d802      	bhi.n	80011d8 <flashInSector+0x9c>
  {
    ret = true;
 80011d2:	2301      	movs	r3, #1
 80011d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return ret;
 80011d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80011dc:	4618      	mov	r0, r3
 80011de:	372c      	adds	r7, #44	; 0x2c
 80011e0:	46bd      	mov	sp, r7
 80011e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e6:	4770      	bx	lr
 80011e8:	20000000 	.word	0x20000000

080011ec <cliFlash>:


#ifdef _USE_HW_CLI

void cliFlash(cli_args_t *args)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b08c      	sub	sp, #48	; 0x30
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
	bool ret = false;
 80011f4:	2300      	movs	r3, #0
 80011f6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if(args->argc == 1 && args->isStr(0, "info") == true)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	881b      	ldrh	r3, [r3, #0]
 80011fe:	2b01      	cmp	r3, #1
 8001200:	d121      	bne.n	8001246 <cliFlash+0x5a>
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	695b      	ldr	r3, [r3, #20]
 8001206:	495c      	ldr	r1, [pc, #368]	; (8001378 <cliFlash+0x18c>)
 8001208:	2000      	movs	r0, #0
 800120a:	4798      	blx	r3
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	d019      	beq.n	8001246 <cliFlash+0x5a>
	{
		for(int i=0; i<FLASH_SECTOR_MAX; i++)
 8001212:	2300      	movs	r3, #0
 8001214:	62bb      	str	r3, [r7, #40]	; 0x28
 8001216:	e010      	b.n	800123a <cliFlash+0x4e>
		{
			cliPrintf("0x%X : %dKB\n", flash_tbl[i].addr, flash_tbl[i].length / 1024);
 8001218:	4a58      	ldr	r2, [pc, #352]	; (800137c <cliFlash+0x190>)
 800121a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800121c:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 8001220:	4a56      	ldr	r2, [pc, #344]	; (800137c <cliFlash+0x190>)
 8001222:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001224:	00db      	lsls	r3, r3, #3
 8001226:	4413      	add	r3, r2
 8001228:	685b      	ldr	r3, [r3, #4]
 800122a:	0a9b      	lsrs	r3, r3, #10
 800122c:	461a      	mov	r2, r3
 800122e:	4854      	ldr	r0, [pc, #336]	; (8001380 <cliFlash+0x194>)
 8001230:	f002 f9e2 	bl	80035f8 <cliPrintf>
		for(int i=0; i<FLASH_SECTOR_MAX; i++)
 8001234:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001236:	3301      	adds	r3, #1
 8001238:	62bb      	str	r3, [r7, #40]	; 0x28
 800123a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800123c:	2b07      	cmp	r3, #7
 800123e:	ddeb      	ble.n	8001218 <cliFlash+0x2c>
		}

		ret = true;
 8001240:	2301      	movs	r3, #1
 8001242:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	}

	if(args->argc == 2 && args->isStr(0, "read") == true)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	881b      	ldrh	r3, [r3, #0]
 800124a:	2b02      	cmp	r3, #2
 800124c:	d12b      	bne.n	80012a6 <cliFlash+0xba>
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	695b      	ldr	r3, [r3, #20]
 8001252:	494c      	ldr	r1, [pc, #304]	; (8001384 <cliFlash+0x198>)
 8001254:	2000      	movs	r0, #0
 8001256:	4798      	blx	r3
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d023      	beq.n	80012a6 <cliFlash+0xba>
	{
		uint32_t addr;
		uint32_t length;

		addr = (uint32_t)args->getData(1);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	689b      	ldr	r3, [r3, #8]
 8001262:	2001      	movs	r0, #1
 8001264:	4798      	blx	r3
 8001266:	4603      	mov	r3, r0
 8001268:	623b      	str	r3, [r7, #32]
		length = (uint32_t)args->getData(2);
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	689b      	ldr	r3, [r3, #8]
 800126e:	2002      	movs	r0, #2
 8001270:	4798      	blx	r3
 8001272:	4603      	mov	r3, r0
 8001274:	61fb      	str	r3, [r7, #28]

		for(int i=0; i<length; i++)
 8001276:	2300      	movs	r3, #0
 8001278:	627b      	str	r3, [r7, #36]	; 0x24
 800127a:	e00d      	b.n	8001298 <cliFlash+0xac>
		{
			cliPrintf("0x%X : 0x%X\n", addr + i, *((uint8_t *)(addr + i)));
 800127c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800127e:	6a3b      	ldr	r3, [r7, #32]
 8001280:	18d1      	adds	r1, r2, r3
 8001282:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001284:	6a3b      	ldr	r3, [r7, #32]
 8001286:	4413      	add	r3, r2
 8001288:	781b      	ldrb	r3, [r3, #0]
 800128a:	461a      	mov	r2, r3
 800128c:	483e      	ldr	r0, [pc, #248]	; (8001388 <cliFlash+0x19c>)
 800128e:	f002 f9b3 	bl	80035f8 <cliPrintf>
		for(int i=0; i<length; i++)
 8001292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001294:	3301      	adds	r3, #1
 8001296:	627b      	str	r3, [r7, #36]	; 0x24
 8001298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800129a:	69fa      	ldr	r2, [r7, #28]
 800129c:	429a      	cmp	r2, r3
 800129e:	d8ed      	bhi.n	800127c <cliFlash+0x90>
		}

		ret = true;
 80012a0:	2301      	movs	r3, #1
 80012a2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	}

	if(args->argc == 3 && args->isStr(0, "erase") == true)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	881b      	ldrh	r3, [r3, #0]
 80012aa:	2b03      	cmp	r3, #3
 80012ac:	d121      	bne.n	80012f2 <cliFlash+0x106>
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	695b      	ldr	r3, [r3, #20]
 80012b2:	4936      	ldr	r1, [pc, #216]	; (800138c <cliFlash+0x1a0>)
 80012b4:	2000      	movs	r0, #0
 80012b6:	4798      	blx	r3
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d019      	beq.n	80012f2 <cliFlash+0x106>
	{
		uint32_t addr;
		uint32_t length;

		addr = (uint32_t)args->getData(1);
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	689b      	ldr	r3, [r3, #8]
 80012c2:	2001      	movs	r0, #1
 80012c4:	4798      	blx	r3
 80012c6:	4603      	mov	r3, r0
 80012c8:	61bb      	str	r3, [r7, #24]
		length = (uint32_t)args->getData(2);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	689b      	ldr	r3, [r3, #8]
 80012ce:	2002      	movs	r0, #2
 80012d0:	4798      	blx	r3
 80012d2:	4603      	mov	r3, r0
 80012d4:	617b      	str	r3, [r7, #20]

		if(flashErase(addr, length) == true)
 80012d6:	6979      	ldr	r1, [r7, #20]
 80012d8:	69b8      	ldr	r0, [r7, #24]
 80012da:	f7ff feaf 	bl	800103c <flashErase>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d003      	beq.n	80012ec <cliFlash+0x100>
		{
			cliPrintf("Erase OK\n");
 80012e4:	482a      	ldr	r0, [pc, #168]	; (8001390 <cliFlash+0x1a4>)
 80012e6:	f002 f987 	bl	80035f8 <cliPrintf>
 80012ea:	e002      	b.n	80012f2 <cliFlash+0x106>
		}
		else
		{
			cliPrintf("Erase Fail\n");
 80012ec:	4829      	ldr	r0, [pc, #164]	; (8001394 <cliFlash+0x1a8>)
 80012ee:	f002 f983 	bl	80035f8 <cliPrintf>
		}
	}


  if (args->argc == 3 && args->isStr(0, "write") == true)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	881b      	ldrh	r3, [r3, #0]
 80012f6:	2b03      	cmp	r3, #3
 80012f8:	d127      	bne.n	800134a <cliFlash+0x15e>
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	695b      	ldr	r3, [r3, #20]
 80012fe:	4926      	ldr	r1, [pc, #152]	; (8001398 <cliFlash+0x1ac>)
 8001300:	2000      	movs	r0, #0
 8001302:	4798      	blx	r3
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	d01f      	beq.n	800134a <cliFlash+0x15e>
  {
    uint32_t addr;
    uint32_t data;

    addr   = (uint32_t)args->getData(1);
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	689b      	ldr	r3, [r3, #8]
 800130e:	2001      	movs	r0, #1
 8001310:	4798      	blx	r3
 8001312:	4603      	mov	r3, r0
 8001314:	613b      	str	r3, [r7, #16]
    data   = (uint32_t)args->getData(2);
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	689b      	ldr	r3, [r3, #8]
 800131a:	2002      	movs	r0, #2
 800131c:	4798      	blx	r3
 800131e:	4603      	mov	r3, r0
 8001320:	60fb      	str	r3, [r7, #12]

    if (flashWrite(addr, (uint8_t *)&data, 4) == true)
 8001322:	f107 030c 	add.w	r3, r7, #12
 8001326:	2204      	movs	r2, #4
 8001328:	4619      	mov	r1, r3
 800132a:	6938      	ldr	r0, [r7, #16]
 800132c:	f7ff fed2 	bl	80010d4 <flashWrite>
 8001330:	4603      	mov	r3, r0
 8001332:	2b00      	cmp	r3, #0
 8001334:	d003      	beq.n	800133e <cliFlash+0x152>
    {
      cliPrintf("Write OK\n");
 8001336:	4819      	ldr	r0, [pc, #100]	; (800139c <cliFlash+0x1b0>)
 8001338:	f002 f95e 	bl	80035f8 <cliPrintf>
 800133c:	e002      	b.n	8001344 <cliFlash+0x158>
    }
    else
    {
      cliPrintf("Write Fail\n");
 800133e:	4818      	ldr	r0, [pc, #96]	; (80013a0 <cliFlash+0x1b4>)
 8001340:	f002 f95a 	bl	80035f8 <cliPrintf>
    }

    ret = true;
 8001344:	2301      	movs	r3, #1
 8001346:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  if (ret != true)
 800134a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800134e:	f083 0301 	eor.w	r3, r3, #1
 8001352:	b2db      	uxtb	r3, r3
 8001354:	2b00      	cmp	r3, #0
 8001356:	d00b      	beq.n	8001370 <cliFlash+0x184>
  {
    cliPrintf("flash info\n");
 8001358:	4812      	ldr	r0, [pc, #72]	; (80013a4 <cliFlash+0x1b8>)
 800135a:	f002 f94d 	bl	80035f8 <cliPrintf>
    cliPrintf("flash read  addr length\n");
 800135e:	4812      	ldr	r0, [pc, #72]	; (80013a8 <cliFlash+0x1bc>)
 8001360:	f002 f94a 	bl	80035f8 <cliPrintf>
    cliPrintf("flash erase addr length\n");
 8001364:	4811      	ldr	r0, [pc, #68]	; (80013ac <cliFlash+0x1c0>)
 8001366:	f002 f947 	bl	80035f8 <cliPrintf>
    cliPrintf("flash write addr data\n");
 800136a:	4811      	ldr	r0, [pc, #68]	; (80013b0 <cliFlash+0x1c4>)
 800136c:	f002 f944 	bl	80035f8 <cliPrintf>
  }
}
 8001370:	bf00      	nop
 8001372:	3730      	adds	r7, #48	; 0x30
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}
 8001378:	08016888 	.word	0x08016888
 800137c:	20000000 	.word	0x20000000
 8001380:	08016890 	.word	0x08016890
 8001384:	080168a0 	.word	0x080168a0
 8001388:	080168a8 	.word	0x080168a8
 800138c:	080168b8 	.word	0x080168b8
 8001390:	080168c0 	.word	0x080168c0
 8001394:	080168cc 	.word	0x080168cc
 8001398:	080168d8 	.word	0x080168d8
 800139c:	080168e0 	.word	0x080168e0
 80013a0:	080168ec 	.word	0x080168ec
 80013a4:	080168f8 	.word	0x080168f8
 80013a8:	08016904 	.word	0x08016904
 80013ac:	08016920 	.word	0x08016920
 80013b0:	0801693c 	.word	0x0801693c

080013b4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b08a      	sub	sp, #40	; 0x28
 80013b8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013ba:	f107 0314 	add.w	r3, r7, #20
 80013be:	2200      	movs	r2, #0
 80013c0:	601a      	str	r2, [r3, #0]
 80013c2:	605a      	str	r2, [r3, #4]
 80013c4:	609a      	str	r2, [r3, #8]
 80013c6:	60da      	str	r2, [r3, #12]
 80013c8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013ca:	2300      	movs	r3, #0
 80013cc:	613b      	str	r3, [r7, #16]
 80013ce:	4b37      	ldr	r3, [pc, #220]	; (80014ac <MX_GPIO_Init+0xf8>)
 80013d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d2:	4a36      	ldr	r2, [pc, #216]	; (80014ac <MX_GPIO_Init+0xf8>)
 80013d4:	f043 0304 	orr.w	r3, r3, #4
 80013d8:	6313      	str	r3, [r2, #48]	; 0x30
 80013da:	4b34      	ldr	r3, [pc, #208]	; (80014ac <MX_GPIO_Init+0xf8>)
 80013dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013de:	f003 0304 	and.w	r3, r3, #4
 80013e2:	613b      	str	r3, [r7, #16]
 80013e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013e6:	2300      	movs	r3, #0
 80013e8:	60fb      	str	r3, [r7, #12]
 80013ea:	4b30      	ldr	r3, [pc, #192]	; (80014ac <MX_GPIO_Init+0xf8>)
 80013ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ee:	4a2f      	ldr	r2, [pc, #188]	; (80014ac <MX_GPIO_Init+0xf8>)
 80013f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013f4:	6313      	str	r3, [r2, #48]	; 0x30
 80013f6:	4b2d      	ldr	r3, [pc, #180]	; (80014ac <MX_GPIO_Init+0xf8>)
 80013f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013fe:	60fb      	str	r3, [r7, #12]
 8001400:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001402:	2300      	movs	r3, #0
 8001404:	60bb      	str	r3, [r7, #8]
 8001406:	4b29      	ldr	r3, [pc, #164]	; (80014ac <MX_GPIO_Init+0xf8>)
 8001408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800140a:	4a28      	ldr	r2, [pc, #160]	; (80014ac <MX_GPIO_Init+0xf8>)
 800140c:	f043 0301 	orr.w	r3, r3, #1
 8001410:	6313      	str	r3, [r2, #48]	; 0x30
 8001412:	4b26      	ldr	r3, [pc, #152]	; (80014ac <MX_GPIO_Init+0xf8>)
 8001414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001416:	f003 0301 	and.w	r3, r3, #1
 800141a:	60bb      	str	r3, [r7, #8]
 800141c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800141e:	2300      	movs	r3, #0
 8001420:	607b      	str	r3, [r7, #4]
 8001422:	4b22      	ldr	r3, [pc, #136]	; (80014ac <MX_GPIO_Init+0xf8>)
 8001424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001426:	4a21      	ldr	r2, [pc, #132]	; (80014ac <MX_GPIO_Init+0xf8>)
 8001428:	f043 0302 	orr.w	r3, r3, #2
 800142c:	6313      	str	r3, [r2, #48]	; 0x30
 800142e:	4b1f      	ldr	r3, [pc, #124]	; (80014ac <MX_GPIO_Init+0xf8>)
 8001430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001432:	f003 0302 	and.w	r3, r3, #2
 8001436:	607b      	str	r3, [r7, #4]
 8001438:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800143a:	2200      	movs	r2, #0
 800143c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001440:	481b      	ldr	r0, [pc, #108]	; (80014b0 <MX_GPIO_Init+0xfc>)
 8001442:	f005 fb9b 	bl	8006b7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);
 8001446:	2200      	movs	r2, #0
 8001448:	211c      	movs	r1, #28
 800144a:	481a      	ldr	r0, [pc, #104]	; (80014b4 <MX_GPIO_Init+0x100>)
 800144c:	f005 fb96 	bl	8006b7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001450:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001454:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001456:	2301      	movs	r3, #1
 8001458:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800145a:	2300      	movs	r3, #0
 800145c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800145e:	2300      	movs	r3, #0
 8001460:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001462:	f107 0314 	add.w	r3, r7, #20
 8001466:	4619      	mov	r1, r3
 8001468:	4811      	ldr	r0, [pc, #68]	; (80014b0 <MX_GPIO_Init+0xfc>)
 800146a:	f005 f9eb 	bl	8006844 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 800146e:	231c      	movs	r3, #28
 8001470:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001472:	2301      	movs	r3, #1
 8001474:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001476:	2300      	movs	r3, #0
 8001478:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800147a:	2300      	movs	r3, #0
 800147c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800147e:	f107 0314 	add.w	r3, r7, #20
 8001482:	4619      	mov	r1, r3
 8001484:	480b      	ldr	r0, [pc, #44]	; (80014b4 <MX_GPIO_Init+0x100>)
 8001486:	f005 f9dd 	bl	8006844 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 800148a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800148e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001490:	2300      	movs	r3, #0
 8001492:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001494:	2300      	movs	r3, #0
 8001496:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001498:	f107 0314 	add.w	r3, r7, #20
 800149c:	4619      	mov	r1, r3
 800149e:	4806      	ldr	r0, [pc, #24]	; (80014b8 <MX_GPIO_Init+0x104>)
 80014a0:	f005 f9d0 	bl	8006844 <HAL_GPIO_Init>

}
 80014a4:	bf00      	nop
 80014a6:	3728      	adds	r7, #40	; 0x28
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	40023800 	.word	0x40023800
 80014b0:	40020800 	.word	0x40020800
 80014b4:	40020000 	.word	0x40020000
 80014b8:	40020400 	.word	0x40020400

080014bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014c0:	f004 f992 	bl	80057e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014c4:	f000 f822 	bl	800150c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014c8:	f7ff ff74 	bl	80013b4 <MX_GPIO_Init>
  MX_DMA_Init();
 80014cc:	f7ff fd78 	bl	8000fc0 <MX_DMA_Init>
  MX_USB_DEVICE_Init();
 80014d0:	f011 fb20 	bl	8012b14 <MX_USB_DEVICE_Init>
  MX_SDIO_SD_Init();
 80014d4:	f000 f888 	bl	80015e8 <MX_SDIO_SD_Init>
  MX_SPI4_Init();
 80014d8:	f000 f9a6 	bl	8001828 <MX_SPI4_Init>
  /* USER CODE BEGIN 2 */
  cliInit();
 80014dc:	f001 fb72 	bl	8002bc4 <cliInit>
  ledInit();
 80014e0:	f003 fb1c 	bl	8004b1c <ledInit>
  gpioInit();
 80014e4:	f002 fcba 	bl	8003e5c <gpioInit>
  sdInit();
 80014e8:	f003 fbc2 	bl	8004c70 <sdInit>
  fatfsInit();
 80014ec:	f002 fab8 	bl	8003a60 <fatfsInit>
  flashInit();
 80014f0:	f7ff fd96 	bl	8001020 <flashInit>
  spiInit();
 80014f4:	f003 fe98 	bl	8005228 <spiInit>
  lcdInit();
 80014f8:	f002 fe26 	bl	8004148 <lcdInit>

  cliOpen(_DEF_UART1, 115200);
 80014fc:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8001500:	2000      	movs	r0, #0
 8001502:	f001 fbab 	bl	8002c5c <cliOpen>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */


  	cliMain();
 8001506:	f001 fc61 	bl	8002dcc <cliMain>
 800150a:	e7fc      	b.n	8001506 <main+0x4a>

0800150c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b094      	sub	sp, #80	; 0x50
 8001510:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001512:	f107 0320 	add.w	r3, r7, #32
 8001516:	2230      	movs	r2, #48	; 0x30
 8001518:	2100      	movs	r1, #0
 800151a:	4618      	mov	r0, r3
 800151c:	f013 f960 	bl	80147e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001520:	f107 030c 	add.w	r3, r7, #12
 8001524:	2200      	movs	r2, #0
 8001526:	601a      	str	r2, [r3, #0]
 8001528:	605a      	str	r2, [r3, #4]
 800152a:	609a      	str	r2, [r3, #8]
 800152c:	60da      	str	r2, [r3, #12]
 800152e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001530:	2300      	movs	r3, #0
 8001532:	60bb      	str	r3, [r7, #8]
 8001534:	4b27      	ldr	r3, [pc, #156]	; (80015d4 <SystemClock_Config+0xc8>)
 8001536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001538:	4a26      	ldr	r2, [pc, #152]	; (80015d4 <SystemClock_Config+0xc8>)
 800153a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800153e:	6413      	str	r3, [r2, #64]	; 0x40
 8001540:	4b24      	ldr	r3, [pc, #144]	; (80015d4 <SystemClock_Config+0xc8>)
 8001542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001544:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001548:	60bb      	str	r3, [r7, #8]
 800154a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800154c:	2300      	movs	r3, #0
 800154e:	607b      	str	r3, [r7, #4]
 8001550:	4b21      	ldr	r3, [pc, #132]	; (80015d8 <SystemClock_Config+0xcc>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4a20      	ldr	r2, [pc, #128]	; (80015d8 <SystemClock_Config+0xcc>)
 8001556:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800155a:	6013      	str	r3, [r2, #0]
 800155c:	4b1e      	ldr	r3, [pc, #120]	; (80015d8 <SystemClock_Config+0xcc>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001564:	607b      	str	r3, [r7, #4]
 8001566:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001568:	2301      	movs	r3, #1
 800156a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800156c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001570:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001572:	2302      	movs	r3, #2
 8001574:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001576:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800157a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 800157c:	2319      	movs	r3, #25
 800157e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8001580:	23c0      	movs	r3, #192	; 0xc0
 8001582:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001584:	2302      	movs	r3, #2
 8001586:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001588:	2304      	movs	r3, #4
 800158a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800158c:	f107 0320 	add.w	r3, r7, #32
 8001590:	4618      	mov	r0, r3
 8001592:	f006 fd77 	bl	8008084 <HAL_RCC_OscConfig>
 8001596:	4603      	mov	r3, r0
 8001598:	2b00      	cmp	r3, #0
 800159a:	d001      	beq.n	80015a0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800159c:	f000 f81e 	bl	80015dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015a0:	230f      	movs	r3, #15
 80015a2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015a4:	2302      	movs	r3, #2
 80015a6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015a8:	2300      	movs	r3, #0
 80015aa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80015ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015b0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015b2:	2300      	movs	r3, #0
 80015b4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80015b6:	f107 030c 	add.w	r3, r7, #12
 80015ba:	2103      	movs	r1, #3
 80015bc:	4618      	mov	r0, r3
 80015be:	f006 ffd9 	bl	8008574 <HAL_RCC_ClockConfig>
 80015c2:	4603      	mov	r3, r0
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d001      	beq.n	80015cc <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80015c8:	f000 f808 	bl	80015dc <Error_Handler>
  }
}
 80015cc:	bf00      	nop
 80015ce:	3750      	adds	r7, #80	; 0x50
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}
 80015d4:	40023800 	.word	0x40023800
 80015d8:	40007000 	.word	0x40007000

080015dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015dc:	b480      	push	{r7}
 80015de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015e0:	b672      	cpsid	i
}
 80015e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015e4:	e7fe      	b.n	80015e4 <Error_Handler+0x8>
	...

080015e8 <MX_SDIO_SD_Init>:
DMA_HandleTypeDef hdma_sdio_tx;

/* SDIO init function */

void MX_SDIO_SD_Init(void)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 80015ec:	4b14      	ldr	r3, [pc, #80]	; (8001640 <MX_SDIO_SD_Init+0x58>)
 80015ee:	4a15      	ldr	r2, [pc, #84]	; (8001644 <MX_SDIO_SD_Init+0x5c>)
 80015f0:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 80015f2:	4b13      	ldr	r3, [pc, #76]	; (8001640 <MX_SDIO_SD_Init+0x58>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 80015f8:	4b11      	ldr	r3, [pc, #68]	; (8001640 <MX_SDIO_SD_Init+0x58>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80015fe:	4b10      	ldr	r3, [pc, #64]	; (8001640 <MX_SDIO_SD_Init+0x58>)
 8001600:	2200      	movs	r2, #0
 8001602:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8001604:	4b0e      	ldr	r3, [pc, #56]	; (8001640 <MX_SDIO_SD_Init+0x58>)
 8001606:	2200      	movs	r2, #0
 8001608:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800160a:	4b0d      	ldr	r3, [pc, #52]	; (8001640 <MX_SDIO_SD_Init+0x58>)
 800160c:	2200      	movs	r2, #0
 800160e:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8001610:	4b0b      	ldr	r3, [pc, #44]	; (8001640 <MX_SDIO_SD_Init+0x58>)
 8001612:	2200      	movs	r2, #0
 8001614:	619a      	str	r2, [r3, #24]
  if (HAL_SD_Init(&hsd) != HAL_OK)
 8001616:	480a      	ldr	r0, [pc, #40]	; (8001640 <MX_SDIO_SD_Init+0x58>)
 8001618:	f007 f964 	bl	80088e4 <HAL_SD_Init>
 800161c:	4603      	mov	r3, r0
 800161e:	2b00      	cmp	r3, #0
 8001620:	d001      	beq.n	8001626 <MX_SDIO_SD_Init+0x3e>
  {
    Error_Handler();
 8001622:	f7ff ffdb 	bl	80015dc <Error_Handler>
  }
  if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8001626:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800162a:	4805      	ldr	r0, [pc, #20]	; (8001640 <MX_SDIO_SD_Init+0x58>)
 800162c:	f007 ff3c 	bl	80094a8 <HAL_SD_ConfigWideBusOperation>
 8001630:	4603      	mov	r3, r0
 8001632:	2b00      	cmp	r3, #0
 8001634:	d001      	beq.n	800163a <MX_SDIO_SD_Init+0x52>
  {
    Error_Handler();
 8001636:	f7ff ffd1 	bl	80015dc <Error_Handler>
  }
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 800163a:	bf00      	nop
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	2000039c 	.word	0x2000039c
 8001644:	40012c00 	.word	0x40012c00

08001648 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b08a      	sub	sp, #40	; 0x28
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001650:	f107 0314 	add.w	r3, r7, #20
 8001654:	2200      	movs	r2, #0
 8001656:	601a      	str	r2, [r3, #0]
 8001658:	605a      	str	r2, [r3, #4]
 800165a:	609a      	str	r2, [r3, #8]
 800165c:	60da      	str	r2, [r3, #12]
 800165e:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDIO)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4a68      	ldr	r2, [pc, #416]	; (8001808 <HAL_SD_MspInit+0x1c0>)
 8001666:	4293      	cmp	r3, r2
 8001668:	f040 80ca 	bne.w	8001800 <HAL_SD_MspInit+0x1b8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* SDIO clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 800166c:	2300      	movs	r3, #0
 800166e:	613b      	str	r3, [r7, #16]
 8001670:	4b66      	ldr	r3, [pc, #408]	; (800180c <HAL_SD_MspInit+0x1c4>)
 8001672:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001674:	4a65      	ldr	r2, [pc, #404]	; (800180c <HAL_SD_MspInit+0x1c4>)
 8001676:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800167a:	6453      	str	r3, [r2, #68]	; 0x44
 800167c:	4b63      	ldr	r3, [pc, #396]	; (800180c <HAL_SD_MspInit+0x1c4>)
 800167e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001680:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001684:	613b      	str	r3, [r7, #16]
 8001686:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001688:	2300      	movs	r3, #0
 800168a:	60fb      	str	r3, [r7, #12]
 800168c:	4b5f      	ldr	r3, [pc, #380]	; (800180c <HAL_SD_MspInit+0x1c4>)
 800168e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001690:	4a5e      	ldr	r2, [pc, #376]	; (800180c <HAL_SD_MspInit+0x1c4>)
 8001692:	f043 0301 	orr.w	r3, r3, #1
 8001696:	6313      	str	r3, [r2, #48]	; 0x30
 8001698:	4b5c      	ldr	r3, [pc, #368]	; (800180c <HAL_SD_MspInit+0x1c4>)
 800169a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800169c:	f003 0301 	and.w	r3, r3, #1
 80016a0:	60fb      	str	r3, [r7, #12]
 80016a2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016a4:	2300      	movs	r3, #0
 80016a6:	60bb      	str	r3, [r7, #8]
 80016a8:	4b58      	ldr	r3, [pc, #352]	; (800180c <HAL_SD_MspInit+0x1c4>)
 80016aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ac:	4a57      	ldr	r2, [pc, #348]	; (800180c <HAL_SD_MspInit+0x1c4>)
 80016ae:	f043 0302 	orr.w	r3, r3, #2
 80016b2:	6313      	str	r3, [r2, #48]	; 0x30
 80016b4:	4b55      	ldr	r3, [pc, #340]	; (800180c <HAL_SD_MspInit+0x1c4>)
 80016b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b8:	f003 0302 	and.w	r3, r3, #2
 80016bc:	60bb      	str	r3, [r7, #8]
 80016be:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> SDIO_D1
    PA9     ------> SDIO_D2
    PB5     ------> SDIO_D3
    PB7     ------> SDIO_D0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9;
 80016c0:	f44f 7350 	mov.w	r3, #832	; 0x340
 80016c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016c6:	2302      	movs	r3, #2
 80016c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016ca:	2301      	movs	r3, #1
 80016cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016ce:	2303      	movs	r3, #3
 80016d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80016d2:	230c      	movs	r3, #12
 80016d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016d6:	f107 0314 	add.w	r3, r7, #20
 80016da:	4619      	mov	r1, r3
 80016dc:	484c      	ldr	r0, [pc, #304]	; (8001810 <HAL_SD_MspInit+0x1c8>)
 80016de:	f005 f8b1 	bl	8006844 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_5|GPIO_PIN_7;
 80016e2:	f248 03a0 	movw	r3, #32928	; 0x80a0
 80016e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016e8:	2302      	movs	r3, #2
 80016ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016ec:	2301      	movs	r3, #1
 80016ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016f0:	2303      	movs	r3, #3
 80016f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80016f4:	230c      	movs	r3, #12
 80016f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016f8:	f107 0314 	add.w	r3, r7, #20
 80016fc:	4619      	mov	r1, r3
 80016fe:	4845      	ldr	r0, [pc, #276]	; (8001814 <HAL_SD_MspInit+0x1cc>)
 8001700:	f005 f8a0 	bl	8006844 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 8001704:	4b44      	ldr	r3, [pc, #272]	; (8001818 <HAL_SD_MspInit+0x1d0>)
 8001706:	4a45      	ldr	r2, [pc, #276]	; (800181c <HAL_SD_MspInit+0x1d4>)
 8001708:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 800170a:	4b43      	ldr	r3, [pc, #268]	; (8001818 <HAL_SD_MspInit+0x1d0>)
 800170c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001710:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001712:	4b41      	ldr	r3, [pc, #260]	; (8001818 <HAL_SD_MspInit+0x1d0>)
 8001714:	2200      	movs	r2, #0
 8001716:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001718:	4b3f      	ldr	r3, [pc, #252]	; (8001818 <HAL_SD_MspInit+0x1d0>)
 800171a:	2200      	movs	r2, #0
 800171c:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 800171e:	4b3e      	ldr	r3, [pc, #248]	; (8001818 <HAL_SD_MspInit+0x1d0>)
 8001720:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001724:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001726:	4b3c      	ldr	r3, [pc, #240]	; (8001818 <HAL_SD_MspInit+0x1d0>)
 8001728:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800172c:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800172e:	4b3a      	ldr	r3, [pc, #232]	; (8001818 <HAL_SD_MspInit+0x1d0>)
 8001730:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001734:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8001736:	4b38      	ldr	r3, [pc, #224]	; (8001818 <HAL_SD_MspInit+0x1d0>)
 8001738:	2220      	movs	r2, #32
 800173a:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 800173c:	4b36      	ldr	r3, [pc, #216]	; (8001818 <HAL_SD_MspInit+0x1d0>)
 800173e:	2200      	movs	r2, #0
 8001740:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001742:	4b35      	ldr	r3, [pc, #212]	; (8001818 <HAL_SD_MspInit+0x1d0>)
 8001744:	2204      	movs	r2, #4
 8001746:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001748:	4b33      	ldr	r3, [pc, #204]	; (8001818 <HAL_SD_MspInit+0x1d0>)
 800174a:	2203      	movs	r2, #3
 800174c:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 800174e:	4b32      	ldr	r3, [pc, #200]	; (8001818 <HAL_SD_MspInit+0x1d0>)
 8001750:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001754:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8001756:	4b30      	ldr	r3, [pc, #192]	; (8001818 <HAL_SD_MspInit+0x1d0>)
 8001758:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800175c:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 800175e:	482e      	ldr	r0, [pc, #184]	; (8001818 <HAL_SD_MspInit+0x1d0>)
 8001760:	f004 f9ea 	bl	8005b38 <HAL_DMA_Init>
 8001764:	4603      	mov	r3, r0
 8001766:	2b00      	cmp	r3, #0
 8001768:	d001      	beq.n	800176e <HAL_SD_MspInit+0x126>
    {
      Error_Handler();
 800176a:	f7ff ff37 	bl	80015dc <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmarx,hdma_sdio_rx);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	4a29      	ldr	r2, [pc, #164]	; (8001818 <HAL_SD_MspInit+0x1d0>)
 8001772:	641a      	str	r2, [r3, #64]	; 0x40
 8001774:	4a28      	ldr	r2, [pc, #160]	; (8001818 <HAL_SD_MspInit+0x1d0>)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 800177a:	4b29      	ldr	r3, [pc, #164]	; (8001820 <HAL_SD_MspInit+0x1d8>)
 800177c:	4a29      	ldr	r2, [pc, #164]	; (8001824 <HAL_SD_MspInit+0x1dc>)
 800177e:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8001780:	4b27      	ldr	r3, [pc, #156]	; (8001820 <HAL_SD_MspInit+0x1d8>)
 8001782:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001786:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001788:	4b25      	ldr	r3, [pc, #148]	; (8001820 <HAL_SD_MspInit+0x1d8>)
 800178a:	2240      	movs	r2, #64	; 0x40
 800178c:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800178e:	4b24      	ldr	r3, [pc, #144]	; (8001820 <HAL_SD_MspInit+0x1d8>)
 8001790:	2200      	movs	r2, #0
 8001792:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001794:	4b22      	ldr	r3, [pc, #136]	; (8001820 <HAL_SD_MspInit+0x1d8>)
 8001796:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800179a:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800179c:	4b20      	ldr	r3, [pc, #128]	; (8001820 <HAL_SD_MspInit+0x1d8>)
 800179e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80017a2:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80017a4:	4b1e      	ldr	r3, [pc, #120]	; (8001820 <HAL_SD_MspInit+0x1d8>)
 80017a6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80017aa:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 80017ac:	4b1c      	ldr	r3, [pc, #112]	; (8001820 <HAL_SD_MspInit+0x1d8>)
 80017ae:	2220      	movs	r2, #32
 80017b0:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 80017b2:	4b1b      	ldr	r3, [pc, #108]	; (8001820 <HAL_SD_MspInit+0x1d8>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80017b8:	4b19      	ldr	r3, [pc, #100]	; (8001820 <HAL_SD_MspInit+0x1d8>)
 80017ba:	2204      	movs	r2, #4
 80017bc:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80017be:	4b18      	ldr	r3, [pc, #96]	; (8001820 <HAL_SD_MspInit+0x1d8>)
 80017c0:	2203      	movs	r2, #3
 80017c2:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 80017c4:	4b16      	ldr	r3, [pc, #88]	; (8001820 <HAL_SD_MspInit+0x1d8>)
 80017c6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80017ca:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 80017cc:	4b14      	ldr	r3, [pc, #80]	; (8001820 <HAL_SD_MspInit+0x1d8>)
 80017ce:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80017d2:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 80017d4:	4812      	ldr	r0, [pc, #72]	; (8001820 <HAL_SD_MspInit+0x1d8>)
 80017d6:	f004 f9af 	bl	8005b38 <HAL_DMA_Init>
 80017da:	4603      	mov	r3, r0
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d001      	beq.n	80017e4 <HAL_SD_MspInit+0x19c>
    {
      Error_Handler();
 80017e0:	f7ff fefc 	bl	80015dc <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmatx,hdma_sdio_tx);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	4a0e      	ldr	r2, [pc, #56]	; (8001820 <HAL_SD_MspInit+0x1d8>)
 80017e8:	63da      	str	r2, [r3, #60]	; 0x3c
 80017ea:	4a0d      	ldr	r2, [pc, #52]	; (8001820 <HAL_SD_MspInit+0x1d8>)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 5, 0);
 80017f0:	2200      	movs	r2, #0
 80017f2:	2105      	movs	r1, #5
 80017f4:	2031      	movs	r0, #49	; 0x31
 80017f6:	f004 f968 	bl	8005aca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 80017fa:	2031      	movs	r0, #49	; 0x31
 80017fc:	f004 f981 	bl	8005b02 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }
}
 8001800:	bf00      	nop
 8001802:	3728      	adds	r7, #40	; 0x28
 8001804:	46bd      	mov	sp, r7
 8001806:	bd80      	pop	{r7, pc}
 8001808:	40012c00 	.word	0x40012c00
 800180c:	40023800 	.word	0x40023800
 8001810:	40020000 	.word	0x40020000
 8001814:	40020400 	.word	0x40020400
 8001818:	20000420 	.word	0x20000420
 800181c:	40026458 	.word	0x40026458
 8001820:	20000480 	.word	0x20000480
 8001824:	400264a0 	.word	0x400264a0

08001828 <MX_SPI4_Init>:
SPI_HandleTypeDef hspi4;
DMA_HandleTypeDef hdma_spi4_tx;

/* SPI4 init function */
void MX_SPI4_Init(void)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 800182c:	4b17      	ldr	r3, [pc, #92]	; (800188c <MX_SPI4_Init+0x64>)
 800182e:	4a18      	ldr	r2, [pc, #96]	; (8001890 <MX_SPI4_Init+0x68>)
 8001830:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8001832:	4b16      	ldr	r3, [pc, #88]	; (800188c <MX_SPI4_Init+0x64>)
 8001834:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001838:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 800183a:	4b14      	ldr	r3, [pc, #80]	; (800188c <MX_SPI4_Init+0x64>)
 800183c:	2200      	movs	r2, #0
 800183e:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8001840:	4b12      	ldr	r3, [pc, #72]	; (800188c <MX_SPI4_Init+0x64>)
 8001842:	2200      	movs	r2, #0
 8001844:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001846:	4b11      	ldr	r3, [pc, #68]	; (800188c <MX_SPI4_Init+0x64>)
 8001848:	2200      	movs	r2, #0
 800184a:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 800184c:	4b0f      	ldr	r3, [pc, #60]	; (800188c <MX_SPI4_Init+0x64>)
 800184e:	2200      	movs	r2, #0
 8001850:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8001852:	4b0e      	ldr	r3, [pc, #56]	; (800188c <MX_SPI4_Init+0x64>)
 8001854:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001858:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800185a:	4b0c      	ldr	r3, [pc, #48]	; (800188c <MX_SPI4_Init+0x64>)
 800185c:	2200      	movs	r2, #0
 800185e:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001860:	4b0a      	ldr	r3, [pc, #40]	; (800188c <MX_SPI4_Init+0x64>)
 8001862:	2200      	movs	r2, #0
 8001864:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8001866:	4b09      	ldr	r3, [pc, #36]	; (800188c <MX_SPI4_Init+0x64>)
 8001868:	2200      	movs	r2, #0
 800186a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800186c:	4b07      	ldr	r3, [pc, #28]	; (800188c <MX_SPI4_Init+0x64>)
 800186e:	2200      	movs	r2, #0
 8001870:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 10;
 8001872:	4b06      	ldr	r3, [pc, #24]	; (800188c <MX_SPI4_Init+0x64>)
 8001874:	220a      	movs	r2, #10
 8001876:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8001878:	4804      	ldr	r0, [pc, #16]	; (800188c <MX_SPI4_Init+0x64>)
 800187a:	f008 fb77 	bl	8009f6c <HAL_SPI_Init>
 800187e:	4603      	mov	r3, r0
 8001880:	2b00      	cmp	r3, #0
 8001882:	d001      	beq.n	8001888 <MX_SPI4_Init+0x60>
  {
    Error_Handler();
 8001884:	f7ff feaa 	bl	80015dc <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8001888:	bf00      	nop
 800188a:	bd80      	pop	{r7, pc}
 800188c:	200004e0 	.word	0x200004e0
 8001890:	40013400 	.word	0x40013400

08001894 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b08a      	sub	sp, #40	; 0x28
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800189c:	f107 0314 	add.w	r3, r7, #20
 80018a0:	2200      	movs	r2, #0
 80018a2:	601a      	str	r2, [r3, #0]
 80018a4:	605a      	str	r2, [r3, #4]
 80018a6:	609a      	str	r2, [r3, #8]
 80018a8:	60da      	str	r2, [r3, #12]
 80018aa:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI4)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4a45      	ldr	r2, [pc, #276]	; (80019c8 <HAL_SPI_MspInit+0x134>)
 80018b2:	4293      	cmp	r3, r2
 80018b4:	f040 8083 	bne.w	80019be <HAL_SPI_MspInit+0x12a>
  {
  /* USER CODE BEGIN SPI4_MspInit 0 */

  /* USER CODE END SPI4_MspInit 0 */
    /* SPI4 clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 80018b8:	2300      	movs	r3, #0
 80018ba:	613b      	str	r3, [r7, #16]
 80018bc:	4b43      	ldr	r3, [pc, #268]	; (80019cc <HAL_SPI_MspInit+0x138>)
 80018be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018c0:	4a42      	ldr	r2, [pc, #264]	; (80019cc <HAL_SPI_MspInit+0x138>)
 80018c2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80018c6:	6453      	str	r3, [r2, #68]	; 0x44
 80018c8:	4b40      	ldr	r3, [pc, #256]	; (80019cc <HAL_SPI_MspInit+0x138>)
 80018ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018cc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80018d0:	613b      	str	r3, [r7, #16]
 80018d2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018d4:	2300      	movs	r3, #0
 80018d6:	60fb      	str	r3, [r7, #12]
 80018d8:	4b3c      	ldr	r3, [pc, #240]	; (80019cc <HAL_SPI_MspInit+0x138>)
 80018da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018dc:	4a3b      	ldr	r2, [pc, #236]	; (80019cc <HAL_SPI_MspInit+0x138>)
 80018de:	f043 0301 	orr.w	r3, r3, #1
 80018e2:	6313      	str	r3, [r2, #48]	; 0x30
 80018e4:	4b39      	ldr	r3, [pc, #228]	; (80019cc <HAL_SPI_MspInit+0x138>)
 80018e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e8:	f003 0301 	and.w	r3, r3, #1
 80018ec:	60fb      	str	r3, [r7, #12]
 80018ee:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018f0:	2300      	movs	r3, #0
 80018f2:	60bb      	str	r3, [r7, #8]
 80018f4:	4b35      	ldr	r3, [pc, #212]	; (80019cc <HAL_SPI_MspInit+0x138>)
 80018f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f8:	4a34      	ldr	r2, [pc, #208]	; (80019cc <HAL_SPI_MspInit+0x138>)
 80018fa:	f043 0302 	orr.w	r3, r3, #2
 80018fe:	6313      	str	r3, [r2, #48]	; 0x30
 8001900:	4b32      	ldr	r3, [pc, #200]	; (80019cc <HAL_SPI_MspInit+0x138>)
 8001902:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001904:	f003 0302 	and.w	r3, r3, #2
 8001908:	60bb      	str	r3, [r7, #8]
 800190a:	68bb      	ldr	r3, [r7, #8]
    /**SPI4 GPIO Configuration
    PA1     ------> SPI4_MOSI
    PB13     ------> SPI4_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800190c:	2302      	movs	r3, #2
 800190e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001910:	2302      	movs	r3, #2
 8001912:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001914:	2300      	movs	r3, #0
 8001916:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001918:	2303      	movs	r3, #3
 800191a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 800191c:	2305      	movs	r3, #5
 800191e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001920:	f107 0314 	add.w	r3, r7, #20
 8001924:	4619      	mov	r1, r3
 8001926:	482a      	ldr	r0, [pc, #168]	; (80019d0 <HAL_SPI_MspInit+0x13c>)
 8001928:	f004 ff8c 	bl	8006844 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800192c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001930:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001932:	2302      	movs	r3, #2
 8001934:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001936:	2300      	movs	r3, #0
 8001938:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800193a:	2303      	movs	r3, #3
 800193c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI4;
 800193e:	2306      	movs	r3, #6
 8001940:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001942:	f107 0314 	add.w	r3, r7, #20
 8001946:	4619      	mov	r1, r3
 8001948:	4822      	ldr	r0, [pc, #136]	; (80019d4 <HAL_SPI_MspInit+0x140>)
 800194a:	f004 ff7b 	bl	8006844 <HAL_GPIO_Init>

    /* SPI4 DMA Init */
    /* SPI4_TX Init */
    hdma_spi4_tx.Instance = DMA2_Stream1;
 800194e:	4b22      	ldr	r3, [pc, #136]	; (80019d8 <HAL_SPI_MspInit+0x144>)
 8001950:	4a22      	ldr	r2, [pc, #136]	; (80019dc <HAL_SPI_MspInit+0x148>)
 8001952:	601a      	str	r2, [r3, #0]
    hdma_spi4_tx.Init.Channel = DMA_CHANNEL_4;
 8001954:	4b20      	ldr	r3, [pc, #128]	; (80019d8 <HAL_SPI_MspInit+0x144>)
 8001956:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800195a:	605a      	str	r2, [r3, #4]
    hdma_spi4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800195c:	4b1e      	ldr	r3, [pc, #120]	; (80019d8 <HAL_SPI_MspInit+0x144>)
 800195e:	2240      	movs	r2, #64	; 0x40
 8001960:	609a      	str	r2, [r3, #8]
    hdma_spi4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001962:	4b1d      	ldr	r3, [pc, #116]	; (80019d8 <HAL_SPI_MspInit+0x144>)
 8001964:	2200      	movs	r2, #0
 8001966:	60da      	str	r2, [r3, #12]
    hdma_spi4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001968:	4b1b      	ldr	r3, [pc, #108]	; (80019d8 <HAL_SPI_MspInit+0x144>)
 800196a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800196e:	611a      	str	r2, [r3, #16]
    hdma_spi4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001970:	4b19      	ldr	r3, [pc, #100]	; (80019d8 <HAL_SPI_MspInit+0x144>)
 8001972:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001976:	615a      	str	r2, [r3, #20]
    hdma_spi4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001978:	4b17      	ldr	r3, [pc, #92]	; (80019d8 <HAL_SPI_MspInit+0x144>)
 800197a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800197e:	619a      	str	r2, [r3, #24]
    hdma_spi4_tx.Init.Mode = DMA_NORMAL;
 8001980:	4b15      	ldr	r3, [pc, #84]	; (80019d8 <HAL_SPI_MspInit+0x144>)
 8001982:	2200      	movs	r2, #0
 8001984:	61da      	str	r2, [r3, #28]
    hdma_spi4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001986:	4b14      	ldr	r3, [pc, #80]	; (80019d8 <HAL_SPI_MspInit+0x144>)
 8001988:	2200      	movs	r2, #0
 800198a:	621a      	str	r2, [r3, #32]
    hdma_spi4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800198c:	4b12      	ldr	r3, [pc, #72]	; (80019d8 <HAL_SPI_MspInit+0x144>)
 800198e:	2200      	movs	r2, #0
 8001990:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi4_tx) != HAL_OK)
 8001992:	4811      	ldr	r0, [pc, #68]	; (80019d8 <HAL_SPI_MspInit+0x144>)
 8001994:	f004 f8d0 	bl	8005b38 <HAL_DMA_Init>
 8001998:	4603      	mov	r3, r0
 800199a:	2b00      	cmp	r3, #0
 800199c:	d001      	beq.n	80019a2 <HAL_SPI_MspInit+0x10e>
    {
      Error_Handler();
 800199e:	f7ff fe1d 	bl	80015dc <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi4_tx);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	4a0c      	ldr	r2, [pc, #48]	; (80019d8 <HAL_SPI_MspInit+0x144>)
 80019a6:	649a      	str	r2, [r3, #72]	; 0x48
 80019a8:	4a0b      	ldr	r2, [pc, #44]	; (80019d8 <HAL_SPI_MspInit+0x144>)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI4 interrupt Init */
    HAL_NVIC_SetPriority(SPI4_IRQn, 0, 0);
 80019ae:	2200      	movs	r2, #0
 80019b0:	2100      	movs	r1, #0
 80019b2:	2054      	movs	r0, #84	; 0x54
 80019b4:	f004 f889 	bl	8005aca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
 80019b8:	2054      	movs	r0, #84	; 0x54
 80019ba:	f004 f8a2 	bl	8005b02 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 80019be:	bf00      	nop
 80019c0:	3728      	adds	r7, #40	; 0x28
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	40013400 	.word	0x40013400
 80019cc:	40023800 	.word	0x40023800
 80019d0:	40020000 	.word	0x40020000
 80019d4:	40020400 	.word	0x40020400
 80019d8:	20000538 	.word	0x20000538
 80019dc:	40026428 	.word	0x40026428

080019e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b083      	sub	sp, #12
 80019e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019e6:	2300      	movs	r3, #0
 80019e8:	607b      	str	r3, [r7, #4]
 80019ea:	4b10      	ldr	r3, [pc, #64]	; (8001a2c <HAL_MspInit+0x4c>)
 80019ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ee:	4a0f      	ldr	r2, [pc, #60]	; (8001a2c <HAL_MspInit+0x4c>)
 80019f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019f4:	6453      	str	r3, [r2, #68]	; 0x44
 80019f6:	4b0d      	ldr	r3, [pc, #52]	; (8001a2c <HAL_MspInit+0x4c>)
 80019f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019fe:	607b      	str	r3, [r7, #4]
 8001a00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a02:	2300      	movs	r3, #0
 8001a04:	603b      	str	r3, [r7, #0]
 8001a06:	4b09      	ldr	r3, [pc, #36]	; (8001a2c <HAL_MspInit+0x4c>)
 8001a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a0a:	4a08      	ldr	r2, [pc, #32]	; (8001a2c <HAL_MspInit+0x4c>)
 8001a0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a10:	6413      	str	r3, [r2, #64]	; 0x40
 8001a12:	4b06      	ldr	r3, [pc, #24]	; (8001a2c <HAL_MspInit+0x4c>)
 8001a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a1a:	603b      	str	r3, [r7, #0]
 8001a1c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a1e:	bf00      	nop
 8001a20:	370c      	adds	r7, #12
 8001a22:	46bd      	mov	sp, r7
 8001a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a28:	4770      	bx	lr
 8001a2a:	bf00      	nop
 8001a2c:	40023800 	.word	0x40023800

08001a30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a30:	b480      	push	{r7}
 8001a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001a34:	e7fe      	b.n	8001a34 <NMI_Handler+0x4>

08001a36 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a36:	b480      	push	{r7}
 8001a38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a3a:	e7fe      	b.n	8001a3a <HardFault_Handler+0x4>

08001a3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a40:	e7fe      	b.n	8001a40 <MemManage_Handler+0x4>

08001a42 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a42:	b480      	push	{r7}
 8001a44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a46:	e7fe      	b.n	8001a46 <BusFault_Handler+0x4>

08001a48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a4c:	e7fe      	b.n	8001a4c <UsageFault_Handler+0x4>

08001a4e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a4e:	b480      	push	{r7}
 8001a50:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a52:	bf00      	nop
 8001a54:	46bd      	mov	sp, r7
 8001a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5a:	4770      	bx	lr

08001a5c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a60:	bf00      	nop
 8001a62:	46bd      	mov	sp, r7
 8001a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a68:	4770      	bx	lr

08001a6a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a6a:	b480      	push	{r7}
 8001a6c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a6e:	bf00      	nop
 8001a70:	46bd      	mov	sp, r7
 8001a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a76:	4770      	bx	lr

08001a78 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a7c:	f003 ff06 	bl	800588c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a80:	bf00      	nop
 8001a82:	bd80      	pop	{r7, pc}

08001a84 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8001a88:	4802      	ldr	r0, [pc, #8]	; (8001a94 <SDIO_IRQHandler+0x10>)
 8001a8a:	f007 f9a3 	bl	8008dd4 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 8001a8e:	bf00      	nop
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	bf00      	nop
 8001a94:	2000039c 	.word	0x2000039c

08001a98 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_tx);
 8001a9c:	4802      	ldr	r0, [pc, #8]	; (8001aa8 <DMA2_Stream1_IRQHandler+0x10>)
 8001a9e:	f004 f973 	bl	8005d88 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8001aa2:	bf00      	nop
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	20000538 	.word	0x20000538

08001aac <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8001ab0:	4802      	ldr	r0, [pc, #8]	; (8001abc <DMA2_Stream3_IRQHandler+0x10>)
 8001ab2:	f004 f969 	bl	8005d88 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8001ab6:	bf00      	nop
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	bf00      	nop
 8001abc:	20000420 	.word	0x20000420

08001ac0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001ac4:	4802      	ldr	r0, [pc, #8]	; (8001ad0 <OTG_FS_IRQHandler+0x10>)
 8001ac6:	f005 f9d0 	bl	8006e6a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001aca:	bf00      	nop
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	bf00      	nop
 8001ad0:	2000881c 	.word	0x2000881c

08001ad4 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8001ad8:	4802      	ldr	r0, [pc, #8]	; (8001ae4 <DMA2_Stream6_IRQHandler+0x10>)
 8001ada:	f004 f955 	bl	8005d88 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8001ade:	bf00      	nop
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	20000480 	.word	0x20000480

08001ae8 <SPI4_IRQHandler>:

/**
  * @brief This function handles SPI4 global interrupt.
  */
void SPI4_IRQHandler(void)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI4_IRQn 0 */

  /* USER CODE END SPI4_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi4);
 8001aec:	4802      	ldr	r0, [pc, #8]	; (8001af8 <SPI4_IRQHandler+0x10>)
 8001aee:	f008 fd29 	bl	800a544 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI4_IRQn 1 */

  /* USER CODE END SPI4_IRQn 1 */
}
 8001af2:	bf00      	nop
 8001af4:	bd80      	pop	{r7, pc}
 8001af6:	bf00      	nop
 8001af8:	200004e0 	.word	0x200004e0

08001afc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001afc:	b480      	push	{r7}
 8001afe:	af00      	add	r7, sp, #0
  return 1;
 8001b00:	2301      	movs	r3, #1
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	46bd      	mov	sp, r7
 8001b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0a:	4770      	bx	lr

08001b0c <_kill>:

int _kill(int pid, int sig)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b082      	sub	sp, #8
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
 8001b14:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001b16:	f012 feff 	bl	8014918 <__errno>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	2216      	movs	r2, #22
 8001b1e:	601a      	str	r2, [r3, #0]
  return -1;
 8001b20:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b24:	4618      	mov	r0, r3
 8001b26:	3708      	adds	r7, #8
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}

08001b2c <_exit>:

void _exit (int status)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b082      	sub	sp, #8
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001b34:	f04f 31ff 	mov.w	r1, #4294967295
 8001b38:	6878      	ldr	r0, [r7, #4]
 8001b3a:	f7ff ffe7 	bl	8001b0c <_kill>
  while (1) {}    /* Make sure we hang here */
 8001b3e:	e7fe      	b.n	8001b3e <_exit+0x12>

08001b40 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b086      	sub	sp, #24
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	60f8      	str	r0, [r7, #12]
 8001b48:	60b9      	str	r1, [r7, #8]
 8001b4a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	617b      	str	r3, [r7, #20]
 8001b50:	e00a      	b.n	8001b68 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001b52:	f3af 8000 	nop.w
 8001b56:	4601      	mov	r1, r0
 8001b58:	68bb      	ldr	r3, [r7, #8]
 8001b5a:	1c5a      	adds	r2, r3, #1
 8001b5c:	60ba      	str	r2, [r7, #8]
 8001b5e:	b2ca      	uxtb	r2, r1
 8001b60:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b62:	697b      	ldr	r3, [r7, #20]
 8001b64:	3301      	adds	r3, #1
 8001b66:	617b      	str	r3, [r7, #20]
 8001b68:	697a      	ldr	r2, [r7, #20]
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	429a      	cmp	r2, r3
 8001b6e:	dbf0      	blt.n	8001b52 <_read+0x12>
  }

  return len;
 8001b70:	687b      	ldr	r3, [r7, #4]
}
 8001b72:	4618      	mov	r0, r3
 8001b74:	3718      	adds	r7, #24
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}

08001b7a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001b7a:	b580      	push	{r7, lr}
 8001b7c:	b086      	sub	sp, #24
 8001b7e:	af00      	add	r7, sp, #0
 8001b80:	60f8      	str	r0, [r7, #12]
 8001b82:	60b9      	str	r1, [r7, #8]
 8001b84:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b86:	2300      	movs	r3, #0
 8001b88:	617b      	str	r3, [r7, #20]
 8001b8a:	e009      	b.n	8001ba0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001b8c:	68bb      	ldr	r3, [r7, #8]
 8001b8e:	1c5a      	adds	r2, r3, #1
 8001b90:	60ba      	str	r2, [r7, #8]
 8001b92:	781b      	ldrb	r3, [r3, #0]
 8001b94:	4618      	mov	r0, r3
 8001b96:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b9a:	697b      	ldr	r3, [r7, #20]
 8001b9c:	3301      	adds	r3, #1
 8001b9e:	617b      	str	r3, [r7, #20]
 8001ba0:	697a      	ldr	r2, [r7, #20]
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	429a      	cmp	r2, r3
 8001ba6:	dbf1      	blt.n	8001b8c <_write+0x12>
  }
  return len;
 8001ba8:	687b      	ldr	r3, [r7, #4]
}
 8001baa:	4618      	mov	r0, r3
 8001bac:	3718      	adds	r7, #24
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}

08001bb2 <_close>:

int _close(int file)
{
 8001bb2:	b480      	push	{r7}
 8001bb4:	b083      	sub	sp, #12
 8001bb6:	af00      	add	r7, sp, #0
 8001bb8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001bba:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	370c      	adds	r7, #12
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc8:	4770      	bx	lr

08001bca <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001bca:	b480      	push	{r7}
 8001bcc:	b083      	sub	sp, #12
 8001bce:	af00      	add	r7, sp, #0
 8001bd0:	6078      	str	r0, [r7, #4]
 8001bd2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001bda:	605a      	str	r2, [r3, #4]
  return 0;
 8001bdc:	2300      	movs	r3, #0
}
 8001bde:	4618      	mov	r0, r3
 8001be0:	370c      	adds	r7, #12
 8001be2:	46bd      	mov	sp, r7
 8001be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be8:	4770      	bx	lr

08001bea <_isatty>:

int _isatty(int file)
{
 8001bea:	b480      	push	{r7}
 8001bec:	b083      	sub	sp, #12
 8001bee:	af00      	add	r7, sp, #0
 8001bf0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001bf2:	2301      	movs	r3, #1
}
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	370c      	adds	r7, #12
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfe:	4770      	bx	lr

08001c00 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c00:	b480      	push	{r7}
 8001c02:	b085      	sub	sp, #20
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	60f8      	str	r0, [r7, #12]
 8001c08:	60b9      	str	r1, [r7, #8]
 8001c0a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001c0c:	2300      	movs	r3, #0
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	3714      	adds	r7, #20
 8001c12:	46bd      	mov	sp, r7
 8001c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c18:	4770      	bx	lr
	...

08001c1c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b086      	sub	sp, #24
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c24:	4a14      	ldr	r2, [pc, #80]	; (8001c78 <_sbrk+0x5c>)
 8001c26:	4b15      	ldr	r3, [pc, #84]	; (8001c7c <_sbrk+0x60>)
 8001c28:	1ad3      	subs	r3, r2, r3
 8001c2a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c2c:	697b      	ldr	r3, [r7, #20]
 8001c2e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c30:	4b13      	ldr	r3, [pc, #76]	; (8001c80 <_sbrk+0x64>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d102      	bne.n	8001c3e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c38:	4b11      	ldr	r3, [pc, #68]	; (8001c80 <_sbrk+0x64>)
 8001c3a:	4a12      	ldr	r2, [pc, #72]	; (8001c84 <_sbrk+0x68>)
 8001c3c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c3e:	4b10      	ldr	r3, [pc, #64]	; (8001c80 <_sbrk+0x64>)
 8001c40:	681a      	ldr	r2, [r3, #0]
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	4413      	add	r3, r2
 8001c46:	693a      	ldr	r2, [r7, #16]
 8001c48:	429a      	cmp	r2, r3
 8001c4a:	d207      	bcs.n	8001c5c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c4c:	f012 fe64 	bl	8014918 <__errno>
 8001c50:	4603      	mov	r3, r0
 8001c52:	220c      	movs	r2, #12
 8001c54:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c56:	f04f 33ff 	mov.w	r3, #4294967295
 8001c5a:	e009      	b.n	8001c70 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c5c:	4b08      	ldr	r3, [pc, #32]	; (8001c80 <_sbrk+0x64>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c62:	4b07      	ldr	r3, [pc, #28]	; (8001c80 <_sbrk+0x64>)
 8001c64:	681a      	ldr	r2, [r3, #0]
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	4413      	add	r3, r2
 8001c6a:	4a05      	ldr	r2, [pc, #20]	; (8001c80 <_sbrk+0x64>)
 8001c6c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c6e:	68fb      	ldr	r3, [r7, #12]
}
 8001c70:	4618      	mov	r0, r3
 8001c72:	3718      	adds	r7, #24
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}
 8001c78:	20020000 	.word	0x20020000
 8001c7c:	00000400 	.word	0x00000400
 8001c80:	20000598 	.word	0x20000598
 8001c84:	20009070 	.word	0x20009070

08001c88 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c8c:	4b06      	ldr	r3, [pc, #24]	; (8001ca8 <SystemInit+0x20>)
 8001c8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c92:	4a05      	ldr	r2, [pc, #20]	; (8001ca8 <SystemInit+0x20>)
 8001c94:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c98:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c9c:	bf00      	nop
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca4:	4770      	bx	lr
 8001ca6:	bf00      	nop
 8001ca8:	e000ed00 	.word	0xe000ed00

08001cac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001cac:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ce4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001cb0:	f7ff ffea 	bl	8001c88 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001cb4:	480c      	ldr	r0, [pc, #48]	; (8001ce8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001cb6:	490d      	ldr	r1, [pc, #52]	; (8001cec <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001cb8:	4a0d      	ldr	r2, [pc, #52]	; (8001cf0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001cba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001cbc:	e002      	b.n	8001cc4 <LoopCopyDataInit>

08001cbe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001cbe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001cc0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001cc2:	3304      	adds	r3, #4

08001cc4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001cc4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001cc6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001cc8:	d3f9      	bcc.n	8001cbe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001cca:	4a0a      	ldr	r2, [pc, #40]	; (8001cf4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001ccc:	4c0a      	ldr	r4, [pc, #40]	; (8001cf8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001cce:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001cd0:	e001      	b.n	8001cd6 <LoopFillZerobss>

08001cd2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001cd2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001cd4:	3204      	adds	r2, #4

08001cd6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001cd6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001cd8:	d3fb      	bcc.n	8001cd2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001cda:	f012 fe23 	bl	8014924 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001cde:	f7ff fbed 	bl	80014bc <main>
  bx  lr    
 8001ce2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001ce4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001ce8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001cec:	20000350 	.word	0x20000350
  ldr r2, =_sidata
 8001cf0:	080237bc 	.word	0x080237bc
  ldr r2, =_sbss
 8001cf4:	20000380 	.word	0x20000380
  ldr r4, =_ebss
 8001cf8:	2000906c 	.word	0x2000906c

08001cfc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001cfc:	e7fe      	b.n	8001cfc <ADC_IRQHandler>

08001cfe <delay>:
#include "common.h"



void delay(uint32_t ms)
{
 8001cfe:	b580      	push	{r7, lr}
 8001d00:	b082      	sub	sp, #8
 8001d02:	af00      	add	r7, sp, #0
 8001d04:	6078      	str	r0, [r7, #4]
	HAL_Delay(ms);
 8001d06:	6878      	ldr	r0, [r7, #4]
 8001d08:	f003 fde0 	bl	80058cc <HAL_Delay>
}
 8001d0c:	bf00      	nop
 8001d0e:	3708      	adds	r7, #8
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bd80      	pop	{r7, pc}

08001d14 <millis>:


uint32_t millis(void)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	af00      	add	r7, sp, #0
	return HAL_GetTick();
 8001d18:	f003 fdcc 	bl	80058b4 <HAL_GetTick>
 8001d1c:	4603      	mov	r3, r0
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	bd80      	pop	{r7, pc}
	...

08001d24 <SD_CheckStatus>:
#endif /* _USE_IOCTL == 1 */
};

/* Private functions ---------------------------------------------------------*/
static DSTATUS SD_CheckStatus(BYTE lun)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b082      	sub	sp, #8
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	71fb      	strb	r3, [r7, #7]
  Stat = 0;
 8001d2e:	4b1d      	ldr	r3, [pc, #116]	; (8001da4 <SD_CheckStatus+0x80>)
 8001d30:	2200      	movs	r2, #0
 8001d32:	701a      	strb	r2, [r3, #0]


  if (sdIsInit() != true)
 8001d34:	f002 ffda 	bl	8004cec <sdIsInit>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	f083 0301 	eor.w	r3, r3, #1
 8001d3e:	b2db      	uxtb	r3, r3
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d007      	beq.n	8001d54 <SD_CheckStatus+0x30>
  {
    Stat |= STA_NOINIT;
 8001d44:	4b17      	ldr	r3, [pc, #92]	; (8001da4 <SD_CheckStatus+0x80>)
 8001d46:	781b      	ldrb	r3, [r3, #0]
 8001d48:	b2db      	uxtb	r3, r3
 8001d4a:	f043 0301 	orr.w	r3, r3, #1
 8001d4e:	b2da      	uxtb	r2, r3
 8001d50:	4b14      	ldr	r3, [pc, #80]	; (8001da4 <SD_CheckStatus+0x80>)
 8001d52:	701a      	strb	r2, [r3, #0]
  }
  if (sdIsDetected() != true)
 8001d54:	f002 ffd6 	bl	8004d04 <sdIsDetected>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	f083 0301 	eor.w	r3, r3, #1
 8001d5e:	b2db      	uxtb	r3, r3
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d007      	beq.n	8001d74 <SD_CheckStatus+0x50>
  {
    Stat |= STA_NODISK;
 8001d64:	4b0f      	ldr	r3, [pc, #60]	; (8001da4 <SD_CheckStatus+0x80>)
 8001d66:	781b      	ldrb	r3, [r3, #0]
 8001d68:	b2db      	uxtb	r3, r3
 8001d6a:	f043 0302 	orr.w	r3, r3, #2
 8001d6e:	b2da      	uxtb	r2, r3
 8001d70:	4b0c      	ldr	r3, [pc, #48]	; (8001da4 <SD_CheckStatus+0x80>)
 8001d72:	701a      	strb	r2, [r3, #0]
  }
  if (sdIsReady(10) != true)
 8001d74:	200a      	movs	r0, #10
 8001d76:	f003 f849 	bl	8004e0c <sdIsReady>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	f083 0301 	eor.w	r3, r3, #1
 8001d80:	b2db      	uxtb	r3, r3
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d007      	beq.n	8001d96 <SD_CheckStatus+0x72>
  {
    Stat |= STA_NOINIT;
 8001d86:	4b07      	ldr	r3, [pc, #28]	; (8001da4 <SD_CheckStatus+0x80>)
 8001d88:	781b      	ldrb	r3, [r3, #0]
 8001d8a:	b2db      	uxtb	r3, r3
 8001d8c:	f043 0301 	orr.w	r3, r3, #1
 8001d90:	b2da      	uxtb	r2, r3
 8001d92:	4b04      	ldr	r3, [pc, #16]	; (8001da4 <SD_CheckStatus+0x80>)
 8001d94:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8001d96:	4b03      	ldr	r3, [pc, #12]	; (8001da4 <SD_CheckStatus+0x80>)
 8001d98:	781b      	ldrb	r3, [r3, #0]
 8001d9a:	b2db      	uxtb	r3, r3
}
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	3708      	adds	r7, #8
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd80      	pop	{r7, pc}
 8001da4:	20000044 	.word	0x20000044

08001da8 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b082      	sub	sp, #8
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	4603      	mov	r3, r0
 8001db0:	71fb      	strb	r3, [r7, #7]
  Stat = 0;
 8001db2:	4b0d      	ldr	r3, [pc, #52]	; (8001de8 <SD_initialize+0x40>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	701a      	strb	r2, [r3, #0]

  if (sdIsInit() != true)
 8001db8:	f002 ff98 	bl	8004cec <sdIsInit>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	f083 0301 	eor.w	r3, r3, #1
 8001dc2:	b2db      	uxtb	r3, r3
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d007      	beq.n	8001dd8 <SD_initialize+0x30>
  {
    Stat |= STA_NOINIT;
 8001dc8:	4b07      	ldr	r3, [pc, #28]	; (8001de8 <SD_initialize+0x40>)
 8001dca:	781b      	ldrb	r3, [r3, #0]
 8001dcc:	b2db      	uxtb	r3, r3
 8001dce:	f043 0301 	orr.w	r3, r3, #1
 8001dd2:	b2da      	uxtb	r2, r3
 8001dd4:	4b04      	ldr	r3, [pc, #16]	; (8001de8 <SD_initialize+0x40>)
 8001dd6:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8001dd8:	4b03      	ldr	r3, [pc, #12]	; (8001de8 <SD_initialize+0x40>)
 8001dda:	781b      	ldrb	r3, [r3, #0]
 8001ddc:	b2db      	uxtb	r3, r3
}
 8001dde:	4618      	mov	r0, r3
 8001de0:	3708      	adds	r7, #8
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	bf00      	nop
 8001de8:	20000044 	.word	0x20000044

08001dec <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b082      	sub	sp, #8
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	4603      	mov	r3, r0
 8001df4:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8001df6:	79fb      	ldrb	r3, [r7, #7]
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f7ff ff93 	bl	8001d24 <SD_CheckStatus>
 8001dfe:	4603      	mov	r3, r0
}
 8001e00:	4618      	mov	r0, r3
 8001e02:	3708      	adds	r7, #8
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bd80      	pop	{r7, pc}

08001e08 <SD_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b086      	sub	sp, #24
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	60b9      	str	r1, [r7, #8]
 8001e10:	607a      	str	r2, [r7, #4]
 8001e12:	603b      	str	r3, [r7, #0]
 8001e14:	4603      	mov	r3, r0
 8001e16:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8001e18:	2301      	movs	r3, #1
 8001e1a:	75fb      	strb	r3, [r7, #23]


  if (sdReadBlocks(sector, buff, count, SD_TIMEOUT) == true)
 8001e1c:	f242 7310 	movw	r3, #10000	; 0x2710
 8001e20:	683a      	ldr	r2, [r7, #0]
 8001e22:	68b9      	ldr	r1, [r7, #8]
 8001e24:	6878      	ldr	r0, [r7, #4]
 8001e26:	f003 f811 	bl	8004e4c <sdReadBlocks>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d001      	beq.n	8001e34 <SD_read+0x2c>
  {
    res = RES_OK;
 8001e30:	2300      	movs	r3, #0
 8001e32:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8001e34:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e36:	4618      	mov	r0, r3
 8001e38:	3718      	adds	r7, #24
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}

08001e3e <SD_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8001e3e:	b580      	push	{r7, lr}
 8001e40:	b086      	sub	sp, #24
 8001e42:	af00      	add	r7, sp, #0
 8001e44:	60b9      	str	r1, [r7, #8]
 8001e46:	607a      	str	r2, [r7, #4]
 8001e48:	603b      	str	r3, [r7, #0]
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	75fb      	strb	r3, [r7, #23]

  if (sdWriteBlocks(sector, (uint8_t *)buff, count, SD_TIMEOUT) == true)
 8001e52:	f242 7310 	movw	r3, #10000	; 0x2710
 8001e56:	683a      	ldr	r2, [r7, #0]
 8001e58:	68b9      	ldr	r1, [r7, #8]
 8001e5a:	6878      	ldr	r0, [r7, #4]
 8001e5c:	f003 f840 	bl	8004ee0 <sdWriteBlocks>
 8001e60:	4603      	mov	r3, r0
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d001      	beq.n	8001e6a <SD_write+0x2c>
  {
    res = RES_OK;
 8001e66:	2300      	movs	r3, #0
 8001e68:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8001e6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	3718      	adds	r7, #24
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd80      	pop	{r7, pc}

08001e74 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b08c      	sub	sp, #48	; 0x30
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	603a      	str	r2, [r7, #0]
 8001e7e:	71fb      	strb	r3, [r7, #7]
 8001e80:	460b      	mov	r3, r1
 8001e82:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8001e84:	2301      	movs	r3, #1
 8001e86:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  sd_info_t sd_info;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001e8a:	4b25      	ldr	r3, [pc, #148]	; (8001f20 <SD_ioctl+0xac>)
 8001e8c:	781b      	ldrb	r3, [r3, #0]
 8001e8e:	b2db      	uxtb	r3, r3
 8001e90:	f003 0301 	and.w	r3, r3, #1
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d001      	beq.n	8001e9c <SD_ioctl+0x28>
 8001e98:	2303      	movs	r3, #3
 8001e9a:	e03c      	b.n	8001f16 <SD_ioctl+0xa2>

  switch (cmd)
 8001e9c:	79bb      	ldrb	r3, [r7, #6]
 8001e9e:	2b03      	cmp	r3, #3
 8001ea0:	d834      	bhi.n	8001f0c <SD_ioctl+0x98>
 8001ea2:	a201      	add	r2, pc, #4	; (adr r2, 8001ea8 <SD_ioctl+0x34>)
 8001ea4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ea8:	08001eb9 	.word	0x08001eb9
 8001eac:	08001ec1 	.word	0x08001ec1
 8001eb0:	08001ed9 	.word	0x08001ed9
 8001eb4:	08001ef3 	.word	0x08001ef3
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8001ebe:	e028      	b.n	8001f12 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    sdGetInfo(&sd_info);
 8001ec0:	f107 0308 	add.w	r3, r7, #8
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	f002 ff33 	bl	8004d30 <sdGetInfo>
    *(DWORD*)buff = sd_info.log_block_numbers;
 8001eca:	6a3a      	ldr	r2, [r7, #32]
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8001ed6:	e01c      	b.n	8001f12 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    sdGetInfo(&sd_info);
 8001ed8:	f107 0308 	add.w	r3, r7, #8
 8001edc:	4618      	mov	r0, r3
 8001ede:	f002 ff27 	bl	8004d30 <sdGetInfo>
    *(WORD*)buff = sd_info.log_block_size;
 8001ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ee4:	b29a      	uxth	r2, r3
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8001eea:	2300      	movs	r3, #0
 8001eec:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8001ef0:	e00f      	b.n	8001f12 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    sdGetInfo(&sd_info);
 8001ef2:	f107 0308 	add.w	r3, r7, #8
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f002 ff1a 	bl	8004d30 <sdGetInfo>
    *(DWORD*)buff = sd_info.log_block_size / SD_DEFAULT_BLOCK_SIZE;
 8001efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001efe:	0a5a      	lsrs	r2, r3, #9
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8001f04:	2300      	movs	r3, #0
 8001f06:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8001f0a:	e002      	b.n	8001f12 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8001f0c:	2304      	movs	r3, #4
 8001f0e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8001f12:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	3730      	adds	r7, #48	; 0x30
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}
 8001f1e:	bf00      	nop
 8001f20:	20000044 	.word	0x20000044

08001f24 <hanFontLoad>:
void hanWanFontLoad(char *HanCode, han_font_t *FontPtr);
void hanUniFontLoad(char *HanCode, han_font_t *FontPtr);
uint16_t hanCnvCodeWan2Johab(uint16_t WanCode);

uint16_t hanFontLoad(char *HanCode, han_font_t *FontPtr)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b084      	sub	sp, #16
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
 8001f2c:	6039      	str	r1, [r7, #0]
	// buffer reset
	memset(FontPtr->FontBuffer, 0x00, 32);
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	3306      	adds	r3, #6
 8001f32:	2220      	movs	r2, #32
 8001f34:	2100      	movs	r1, #0
 8001f36:	4618      	mov	r0, r3
 8001f38:	f012 fc52 	bl	80147e0 <memset>

	FontPtr->Code_Type = PHAN_NULL_CODE;
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	2200      	movs	r2, #0
 8001f40:	809a      	strh	r2, [r3, #4]

	// Identifying if it's a Korean code
	if(!HanCode[0] || HanCode[0] == 0x0A)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	781b      	ldrb	r3, [r3, #0]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d003      	beq.n	8001f52 <hanFontLoad+0x2e>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	781b      	ldrb	r3, [r3, #0]
 8001f4e:	2b0a      	cmp	r3, #10
 8001f50:	d107      	bne.n	8001f62 <hanFontLoad+0x3e>
	{
		FontPtr->Code_Type = PHAN_END_CODE;
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	2204      	movs	r2, #4
 8001f56:	809a      	strh	r2, [r3, #4]
		FontPtr->Size_Char = 1;
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	2201      	movs	r2, #1
 8001f5c:	805a      	strh	r2, [r3, #2]
		return PHAN_END_CODE;
 8001f5e:	2304      	movs	r3, #4
 8001f60:	e03b      	b.n	8001fda <hanFontLoad+0xb6>
	}
	else if(HanCode[0] & 0x80)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	781b      	ldrb	r3, [r3, #0]
 8001f66:	b25b      	sxtb	r3, r3
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	da2b      	bge.n	8001fc4 <hanFontLoad+0xa0>
	{
		uint32_t utf8_code;

		utf8_code = ((uint8_t)HanCode[0]<<16) | ((uint8_t)HanCode[1]<<8) | ((uint8_t)HanCode[2]<<0);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	781b      	ldrb	r3, [r3, #0]
 8001f70:	041a      	lsls	r2, r3, #16
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	3301      	adds	r3, #1
 8001f76:	781b      	ldrb	r3, [r3, #0]
 8001f78:	021b      	lsls	r3, r3, #8
 8001f7a:	4313      	orrs	r3, r2
 8001f7c:	687a      	ldr	r2, [r7, #4]
 8001f7e:	3202      	adds	r2, #2
 8001f80:	7812      	ldrb	r2, [r2, #0]
 8001f82:	4313      	orrs	r3, r2
 8001f84:	60fb      	str	r3, [r7, #12]

		if(utf8_code >= 0xEAB080 && utf8_code <= 0xED9FB0)
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	4a16      	ldr	r2, [pc, #88]	; (8001fe4 <hanFontLoad+0xc0>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d30e      	bcc.n	8001fac <hanFontLoad+0x88>
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	4a15      	ldr	r2, [pc, #84]	; (8001fe8 <hanFontLoad+0xc4>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d80a      	bhi.n	8001fac <hanFontLoad+0x88>
		{
			FontPtr->Code_Type = PHAN_HANGUL_CODE;
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	2201      	movs	r2, #1
 8001f9a:	809a      	strh	r2, [r3, #4]
			FontPtr->Size_Char = 3;
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	2203      	movs	r2, #3
 8001fa0:	805a      	strh	r2, [r3, #2]
			hanUniFontLoad(HanCode, FontPtr);
 8001fa2:	6839      	ldr	r1, [r7, #0]
 8001fa4:	6878      	ldr	r0, [r7, #4]
 8001fa6:	f000 f91f 	bl	80021e8 <hanUniFontLoad>
 8001faa:	e009      	b.n	8001fc0 <hanFontLoad+0x9c>
		}
		else
		{
			FontPtr->Code_Type = PHAN_HANGUL_CODE;
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	2201      	movs	r2, #1
 8001fb0:	809a      	strh	r2, [r3, #4]
			FontPtr->Size_Char = 2;
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	2202      	movs	r2, #2
 8001fb6:	805a      	strh	r2, [r3, #2]
			hanWanFontLoad(HanCode, FontPtr);
 8001fb8:	6839      	ldr	r1, [r7, #0]
 8001fba:	6878      	ldr	r0, [r7, #4]
 8001fbc:	f000 f816 	bl	8001fec <hanWanFontLoad>
		}

		return PHAN_HANGUL_CODE;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	e00a      	b.n	8001fda <hanFontLoad+0xb6>
	}
	else // eng code
	{
		FontPtr->Code_Type = PHAN_ENG_CODE;
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	2202      	movs	r2, #2
 8001fc8:	809a      	strh	r2, [r3, #4]
		FontPtr->Size_Char = 1;
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	2201      	movs	r2, #1
 8001fce:	805a      	strh	r2, [r3, #2]
		hanEngFontLoad(HanCode, FontPtr);
 8001fd0:	6839      	ldr	r1, [r7, #0]
 8001fd2:	6878      	ldr	r0, [r7, #4]
 8001fd4:	f000 fa30 	bl	8002438 <hanEngFontLoad>
		return PHAN_ENG_CODE;
 8001fd8:	2302      	movs	r3, #2
	}

	return FontPtr->Code_Type;
}
 8001fda:	4618      	mov	r0, r3
 8001fdc:	3710      	adds	r7, #16
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}
 8001fe2:	bf00      	nop
 8001fe4:	00eab080 	.word	0x00eab080
 8001fe8:	00ed9fb0 	.word	0x00ed9fb0

08001fec <hanWanFontLoad>:

// 완성형 한글 코드를 기반으로 한글 폰트를 로드
void hanWanFontLoad(char *HanCode, han_font_t *FontPtr)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b084      	sub	sp, #16
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
 8001ff4:	6039      	str	r1, [r7, #0]
	uint16_t wHanCode;

	// static declaration 은 속도를 높이기 위한것임.
	static uint16_t uChosung, uJoongsung, uJongsung, uChoType, uJooType, uJonType;

	wHanCode = (uint16_t)HanCode[0]<<8 | ((uint16_t)HanCode[1] & 0x00FF);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	781b      	ldrb	r3, [r3, #0]
 8001ffa:	021b      	lsls	r3, r3, #8
 8001ffc:	b21a      	sxth	r2, r3
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	3301      	adds	r3, #1
 8002002:	781b      	ldrb	r3, [r3, #0]
 8002004:	b21b      	sxth	r3, r3
 8002006:	4313      	orrs	r3, r2
 8002008:	b21b      	sxth	r3, r3
 800200a:	81bb      	strh	r3, [r7, #12]
	wHanCode = hanCnvCodeWan2Johab(wHanCode);
 800200c:	89bb      	ldrh	r3, [r7, #12]
 800200e:	4618      	mov	r0, r3
 8002010:	f000 fa3c 	bl	800248c <hanCnvCodeWan2Johab>
 8002014:	4603      	mov	r3, r0
 8002016:	81bb      	strh	r3, [r7, #12]

	// seperate phoneme code
	uChosung = (wHanCode>>10) & 0x001F; // Chosung code
 8002018:	89bb      	ldrh	r3, [r7, #12]
 800201a:	0a9b      	lsrs	r3, r3, #10
 800201c:	b29b      	uxth	r3, r3
 800201e:	f003 031f 	and.w	r3, r3, #31
 8002022:	b29a      	uxth	r2, r3
 8002024:	4b63      	ldr	r3, [pc, #396]	; (80021b4 <hanWanFontLoad+0x1c8>)
 8002026:	801a      	strh	r2, [r3, #0]
  uJoongsung = (wHanCode>>5) & 0x001F;//Joongsung code
 8002028:	89bb      	ldrh	r3, [r7, #12]
 800202a:	095b      	lsrs	r3, r3, #5
 800202c:	b29b      	uxth	r3, r3
 800202e:	f003 031f 	and.w	r3, r3, #31
 8002032:	b29a      	uxth	r2, r3
 8002034:	4b60      	ldr	r3, [pc, #384]	; (80021b8 <hanWanFontLoad+0x1cc>)
 8002036:	801a      	strh	r2, [r3, #0]
	uJongsung  = wHanCode & 0x001F;    //Jongsung code
 8002038:	89bb      	ldrh	r3, [r7, #12]
 800203a:	f003 031f 	and.w	r3, r3, #31
 800203e:	b29a      	uxth	r2, r3
 8002040:	4b5e      	ldr	r3, [pc, #376]	; (80021bc <hanWanFontLoad+0x1d0>)
 8002042:	801a      	strh	r2, [r3, #0]

  //make font index
  uChosung   = ChoIdxTbl[uChosung];    //Chosung index
 8002044:	4b5b      	ldr	r3, [pc, #364]	; (80021b4 <hanWanFontLoad+0x1c8>)
 8002046:	881b      	ldrh	r3, [r3, #0]
 8002048:	461a      	mov	r2, r3
 800204a:	4b5d      	ldr	r3, [pc, #372]	; (80021c0 <hanWanFontLoad+0x1d4>)
 800204c:	5c9b      	ldrb	r3, [r3, r2]
 800204e:	b29a      	uxth	r2, r3
 8002050:	4b58      	ldr	r3, [pc, #352]	; (80021b4 <hanWanFontLoad+0x1c8>)
 8002052:	801a      	strh	r2, [r3, #0]
  uJoongsung = JooIdxTbl[uJoongsung];  //Joongsung index
 8002054:	4b58      	ldr	r3, [pc, #352]	; (80021b8 <hanWanFontLoad+0x1cc>)
 8002056:	881b      	ldrh	r3, [r3, #0]
 8002058:	461a      	mov	r2, r3
 800205a:	4b5a      	ldr	r3, [pc, #360]	; (80021c4 <hanWanFontLoad+0x1d8>)
 800205c:	5c9b      	ldrb	r3, [r3, r2]
 800205e:	b29a      	uxth	r2, r3
 8002060:	4b55      	ldr	r3, [pc, #340]	; (80021b8 <hanWanFontLoad+0x1cc>)
 8002062:	801a      	strh	r2, [r3, #0]
  uJongsung  = JonIdxTbl[uJongsung];   //Jongsung index
 8002064:	4b55      	ldr	r3, [pc, #340]	; (80021bc <hanWanFontLoad+0x1d0>)
 8002066:	881b      	ldrh	r3, [r3, #0]
 8002068:	461a      	mov	r2, r3
 800206a:	4b57      	ldr	r3, [pc, #348]	; (80021c8 <hanWanFontLoad+0x1dc>)
 800206c:	5c9b      	ldrb	r3, [r3, r2]
 800206e:	b29a      	uxth	r2, r3
 8002070:	4b52      	ldr	r3, [pc, #328]	; (80021bc <hanWanFontLoad+0x1d0>)
 8002072:	801a      	strh	r2, [r3, #0]

  //decide a character type (몇번째 벌을 사용할지 결정)
  uChoType = uJongsung ? ChoTypeCaseJongYes[uJoongsung]:ChoTypeCaseJongNo [uJoongsung];
 8002074:	4b51      	ldr	r3, [pc, #324]	; (80021bc <hanWanFontLoad+0x1d0>)
 8002076:	881b      	ldrh	r3, [r3, #0]
 8002078:	2b00      	cmp	r3, #0
 800207a:	d006      	beq.n	800208a <hanWanFontLoad+0x9e>
 800207c:	4b4e      	ldr	r3, [pc, #312]	; (80021b8 <hanWanFontLoad+0x1cc>)
 800207e:	881b      	ldrh	r3, [r3, #0]
 8002080:	461a      	mov	r2, r3
 8002082:	4b52      	ldr	r3, [pc, #328]	; (80021cc <hanWanFontLoad+0x1e0>)
 8002084:	5c9b      	ldrb	r3, [r3, r2]
 8002086:	b29b      	uxth	r3, r3
 8002088:	e005      	b.n	8002096 <hanWanFontLoad+0xaa>
 800208a:	4b4b      	ldr	r3, [pc, #300]	; (80021b8 <hanWanFontLoad+0x1cc>)
 800208c:	881b      	ldrh	r3, [r3, #0]
 800208e:	461a      	mov	r2, r3
 8002090:	4b4f      	ldr	r3, [pc, #316]	; (80021d0 <hanWanFontLoad+0x1e4>)
 8002092:	5c9b      	ldrb	r3, [r3, r2]
 8002094:	b29b      	uxth	r3, r3
 8002096:	4a4f      	ldr	r2, [pc, #316]	; (80021d4 <hanWanFontLoad+0x1e8>)
 8002098:	8013      	strh	r3, [r2, #0]

  //'ㄱ'(1) 이나 'ㅋ'(16) 인경우는
  uJooType = ((uChosung == 0 || uChosung == 1 || uChosung == 16 ) ? 0: 1) + (uJongsung ? 2 : 0);
 800209a:	4b46      	ldr	r3, [pc, #280]	; (80021b4 <hanWanFontLoad+0x1c8>)
 800209c:	881b      	ldrh	r3, [r3, #0]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d009      	beq.n	80020b6 <hanWanFontLoad+0xca>
 80020a2:	4b44      	ldr	r3, [pc, #272]	; (80021b4 <hanWanFontLoad+0x1c8>)
 80020a4:	881b      	ldrh	r3, [r3, #0]
 80020a6:	2b01      	cmp	r3, #1
 80020a8:	d005      	beq.n	80020b6 <hanWanFontLoad+0xca>
 80020aa:	4b42      	ldr	r3, [pc, #264]	; (80021b4 <hanWanFontLoad+0x1c8>)
 80020ac:	881b      	ldrh	r3, [r3, #0]
 80020ae:	2b10      	cmp	r3, #16
 80020b0:	d001      	beq.n	80020b6 <hanWanFontLoad+0xca>
 80020b2:	2301      	movs	r3, #1
 80020b4:	e000      	b.n	80020b8 <hanWanFontLoad+0xcc>
 80020b6:	2300      	movs	r3, #0
 80020b8:	b29b      	uxth	r3, r3
 80020ba:	4a40      	ldr	r2, [pc, #256]	; (80021bc <hanWanFontLoad+0x1d0>)
 80020bc:	8812      	ldrh	r2, [r2, #0]
 80020be:	2a00      	cmp	r2, #0
 80020c0:	d001      	beq.n	80020c6 <hanWanFontLoad+0xda>
 80020c2:	2202      	movs	r2, #2
 80020c4:	e000      	b.n	80020c8 <hanWanFontLoad+0xdc>
 80020c6:	2200      	movs	r2, #0
 80020c8:	4413      	add	r3, r2
 80020ca:	b29a      	uxth	r2, r3
 80020cc:	4b42      	ldr	r3, [pc, #264]	; (80021d8 <hanWanFontLoad+0x1ec>)
 80020ce:	801a      	strh	r2, [r3, #0]
  uJonType = JonType[uJoongsung];
 80020d0:	4b39      	ldr	r3, [pc, #228]	; (80021b8 <hanWanFontLoad+0x1cc>)
 80020d2:	881b      	ldrh	r3, [r3, #0]
 80020d4:	461a      	mov	r2, r3
 80020d6:	4b41      	ldr	r3, [pc, #260]	; (80021dc <hanWanFontLoad+0x1f0>)
 80020d8:	5c9b      	ldrb	r3, [r3, r2]
 80020da:	b29a      	uxth	r2, r3
 80020dc:	4b40      	ldr	r3, [pc, #256]	; (80021e0 <hanWanFontLoad+0x1f4>)
 80020de:	801a      	strh	r2, [r3, #0]

  for(i = 0; i<32; i++)
 80020e0:	2300      	movs	r3, #0
 80020e2:	81fb      	strh	r3, [r7, #14]
 80020e4:	e035      	b.n	8002152 <hanWanFontLoad+0x166>
  {
    FontPtr->FontBuffer[i]  = K_font[uChoType*20+uChosung][i];
 80020e6:	4b3b      	ldr	r3, [pc, #236]	; (80021d4 <hanWanFontLoad+0x1e8>)
 80020e8:	881b      	ldrh	r3, [r3, #0]
 80020ea:	461a      	mov	r2, r3
 80020ec:	4613      	mov	r3, r2
 80020ee:	009b      	lsls	r3, r3, #2
 80020f0:	4413      	add	r3, r2
 80020f2:	009b      	lsls	r3, r3, #2
 80020f4:	461a      	mov	r2, r3
 80020f6:	4b2f      	ldr	r3, [pc, #188]	; (80021b4 <hanWanFontLoad+0x1c8>)
 80020f8:	881b      	ldrh	r3, [r3, #0]
 80020fa:	441a      	add	r2, r3
 80020fc:	89fb      	ldrh	r3, [r7, #14]
 80020fe:	4939      	ldr	r1, [pc, #228]	; (80021e4 <hanWanFontLoad+0x1f8>)
 8002100:	0152      	lsls	r2, r2, #5
 8002102:	4413      	add	r3, r2
 8002104:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8002108:	89fb      	ldrh	r3, [r7, #14]
 800210a:	b2d1      	uxtb	r1, r2
 800210c:	683a      	ldr	r2, [r7, #0]
 800210e:	4413      	add	r3, r2
 8002110:	460a      	mov	r2, r1
 8002112:	719a      	strb	r2, [r3, #6]
    FontPtr->FontBuffer[i] |= K_font[160 + uJooType*22+uJoongsung][i];
 8002114:	89fb      	ldrh	r3, [r7, #14]
 8002116:	683a      	ldr	r2, [r7, #0]
 8002118:	4413      	add	r3, r2
 800211a:	7999      	ldrb	r1, [r3, #6]
 800211c:	4b2e      	ldr	r3, [pc, #184]	; (80021d8 <hanWanFontLoad+0x1ec>)
 800211e:	881b      	ldrh	r3, [r3, #0]
 8002120:	461a      	mov	r2, r3
 8002122:	2316      	movs	r3, #22
 8002124:	fb02 f303 	mul.w	r3, r2, r3
 8002128:	33a0      	adds	r3, #160	; 0xa0
 800212a:	4a23      	ldr	r2, [pc, #140]	; (80021b8 <hanWanFontLoad+0x1cc>)
 800212c:	8812      	ldrh	r2, [r2, #0]
 800212e:	441a      	add	r2, r3
 8002130:	89fb      	ldrh	r3, [r7, #14]
 8002132:	482c      	ldr	r0, [pc, #176]	; (80021e4 <hanWanFontLoad+0x1f8>)
 8002134:	0152      	lsls	r2, r2, #5
 8002136:	4413      	add	r3, r2
 8002138:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 800213c:	b2da      	uxtb	r2, r3
 800213e:	89fb      	ldrh	r3, [r7, #14]
 8002140:	430a      	orrs	r2, r1
 8002142:	b2d1      	uxtb	r1, r2
 8002144:	683a      	ldr	r2, [r7, #0]
 8002146:	4413      	add	r3, r2
 8002148:	460a      	mov	r2, r1
 800214a:	719a      	strb	r2, [r3, #6]
  for(i = 0; i<32; i++)
 800214c:	89fb      	ldrh	r3, [r7, #14]
 800214e:	3301      	adds	r3, #1
 8002150:	81fb      	strh	r3, [r7, #14]
 8002152:	89fb      	ldrh	r3, [r7, #14]
 8002154:	2b1f      	cmp	r3, #31
 8002156:	d9c6      	bls.n	80020e6 <hanWanFontLoad+0xfa>
  }

  //combine Jongsung
  if(uJongsung)
 8002158:	4b18      	ldr	r3, [pc, #96]	; (80021bc <hanWanFontLoad+0x1d0>)
 800215a:	881b      	ldrh	r3, [r3, #0]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d025      	beq.n	80021ac <hanWanFontLoad+0x1c0>
  {
    for(i = 0; i < 32; i++)   FontPtr->FontBuffer[i] |= K_font[248 + uJonType*28+uJongsung][i];
 8002160:	2300      	movs	r3, #0
 8002162:	81fb      	strh	r3, [r7, #14]
 8002164:	e01f      	b.n	80021a6 <hanWanFontLoad+0x1ba>
 8002166:	89fb      	ldrh	r3, [r7, #14]
 8002168:	683a      	ldr	r2, [r7, #0]
 800216a:	4413      	add	r3, r2
 800216c:	7999      	ldrb	r1, [r3, #6]
 800216e:	4b1c      	ldr	r3, [pc, #112]	; (80021e0 <hanWanFontLoad+0x1f4>)
 8002170:	881b      	ldrh	r3, [r3, #0]
 8002172:	461a      	mov	r2, r3
 8002174:	4613      	mov	r3, r2
 8002176:	00db      	lsls	r3, r3, #3
 8002178:	1a9b      	subs	r3, r3, r2
 800217a:	009b      	lsls	r3, r3, #2
 800217c:	33f8      	adds	r3, #248	; 0xf8
 800217e:	4a0f      	ldr	r2, [pc, #60]	; (80021bc <hanWanFontLoad+0x1d0>)
 8002180:	8812      	ldrh	r2, [r2, #0]
 8002182:	441a      	add	r2, r3
 8002184:	89fb      	ldrh	r3, [r7, #14]
 8002186:	4817      	ldr	r0, [pc, #92]	; (80021e4 <hanWanFontLoad+0x1f8>)
 8002188:	0152      	lsls	r2, r2, #5
 800218a:	4413      	add	r3, r2
 800218c:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8002190:	b2da      	uxtb	r2, r3
 8002192:	89fb      	ldrh	r3, [r7, #14]
 8002194:	430a      	orrs	r2, r1
 8002196:	b2d1      	uxtb	r1, r2
 8002198:	683a      	ldr	r2, [r7, #0]
 800219a:	4413      	add	r3, r2
 800219c:	460a      	mov	r2, r1
 800219e:	719a      	strb	r2, [r3, #6]
 80021a0:	89fb      	ldrh	r3, [r7, #14]
 80021a2:	3301      	adds	r3, #1
 80021a4:	81fb      	strh	r3, [r7, #14]
 80021a6:	89fb      	ldrh	r3, [r7, #14]
 80021a8:	2b1f      	cmp	r3, #31
 80021aa:	d9dc      	bls.n	8002166 <hanWanFontLoad+0x17a>
  }
}
 80021ac:	bf00      	nop
 80021ae:	3710      	adds	r7, #16
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd80      	pop	{r7, pc}
 80021b4:	2000059c 	.word	0x2000059c
 80021b8:	2000059e 	.word	0x2000059e
 80021bc:	200005a0 	.word	0x200005a0
 80021c0:	08018700 	.word	0x08018700
 80021c4:	08018720 	.word	0x08018720
 80021c8:	08018740 	.word	0x08018740
 80021cc:	080187d8 	.word	0x080187d8
 80021d0:	080187c0 	.word	0x080187c0
 80021d4:	200005a2 	.word	0x200005a2
 80021d8:	200005a4 	.word	0x200005a4
 80021dc:	080187f0 	.word	0x080187f0
 80021e0:	200005a6 	.word	0x200005a6
 80021e4:	0801ad00 	.word	0x0801ad00

080021e8 <hanUniFontLoad>:

// 유니코드를 기반으로 한글 폰트를 로드
void hanUniFontLoad(char *HanCode, han_font_t *FontPtr)
{
 80021e8:	b480      	push	{r7}
 80021ea:	b085      	sub	sp, #20
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
 80021f0:	6039      	str	r1, [r7, #0]
  uint16_t utf16;

  //static declaration 은 속도를 높이기 위한것임.
  static uint16_t uChosung, uJoongsung, uJongsung, uChoType, uJooType,uJonType;

  utf16 = (uint8_t)(HanCode[0] & 0x0f) << 12 | (uint8_t)(HanCode[1] & 0x3f) << 6 | (uint8_t)(HanCode[2] & 0x3f);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	781b      	ldrb	r3, [r3, #0]
 80021f6:	031b      	lsls	r3, r3, #12
 80021f8:	b21a      	sxth	r2, r3
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	3301      	adds	r3, #1
 80021fe:	781b      	ldrb	r3, [r3, #0]
 8002200:	019b      	lsls	r3, r3, #6
 8002202:	b21b      	sxth	r3, r3
 8002204:	f403 637c 	and.w	r3, r3, #4032	; 0xfc0
 8002208:	b21b      	sxth	r3, r3
 800220a:	4313      	orrs	r3, r2
 800220c:	b21a      	sxth	r2, r3
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	3302      	adds	r3, #2
 8002212:	781b      	ldrb	r3, [r3, #0]
 8002214:	b21b      	sxth	r3, r3
 8002216:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800221a:	b21b      	sxth	r3, r3
 800221c:	4313      	orrs	r3, r2
 800221e:	b21b      	sxth	r3, r3
 8002220:	81bb      	strh	r3, [r7, #12]

  //seperate phoneme code
  utf16 -= 0xac00;
 8002222:	89bb      	ldrh	r3, [r7, #12]
 8002224:	f503 43a8 	add.w	r3, r3, #21504	; 0x5400
 8002228:	81bb      	strh	r3, [r7, #12]
  uJongsung  = utf16 % 28;
 800222a:	89ba      	ldrh	r2, [r7, #12]
 800222c:	0893      	lsrs	r3, r2, #2
 800222e:	4973      	ldr	r1, [pc, #460]	; (80023fc <hanUniFontLoad+0x214>)
 8002230:	fba1 3103 	umull	r3, r1, r1, r3
 8002234:	460b      	mov	r3, r1
 8002236:	00db      	lsls	r3, r3, #3
 8002238:	1a5b      	subs	r3, r3, r1
 800223a:	009b      	lsls	r3, r3, #2
 800223c:	1ad3      	subs	r3, r2, r3
 800223e:	b29a      	uxth	r2, r3
 8002240:	4b6f      	ldr	r3, [pc, #444]	; (8002400 <hanUniFontLoad+0x218>)
 8002242:	801a      	strh	r2, [r3, #0]
  utf16 /= 28;
 8002244:	89bb      	ldrh	r3, [r7, #12]
 8002246:	089b      	lsrs	r3, r3, #2
 8002248:	4a6c      	ldr	r2, [pc, #432]	; (80023fc <hanUniFontLoad+0x214>)
 800224a:	fba2 2303 	umull	r2, r3, r2, r3
 800224e:	81bb      	strh	r3, [r7, #12]
  uJoongsung = utf16 % 21;
 8002250:	89b9      	ldrh	r1, [r7, #12]
 8002252:	4b6c      	ldr	r3, [pc, #432]	; (8002404 <hanUniFontLoad+0x21c>)
 8002254:	fba3 2301 	umull	r2, r3, r3, r1
 8002258:	1aca      	subs	r2, r1, r3
 800225a:	0852      	lsrs	r2, r2, #1
 800225c:	4413      	add	r3, r2
 800225e:	091a      	lsrs	r2, r3, #4
 8002260:	4613      	mov	r3, r2
 8002262:	005b      	lsls	r3, r3, #1
 8002264:	4413      	add	r3, r2
 8002266:	00da      	lsls	r2, r3, #3
 8002268:	1ad2      	subs	r2, r2, r3
 800226a:	1a8b      	subs	r3, r1, r2
 800226c:	b29a      	uxth	r2, r3
 800226e:	4b66      	ldr	r3, [pc, #408]	; (8002408 <hanUniFontLoad+0x220>)
 8002270:	801a      	strh	r2, [r3, #0]
  uChosung   = utf16 / 21;
 8002272:	89ba      	ldrh	r2, [r7, #12]
 8002274:	4b63      	ldr	r3, [pc, #396]	; (8002404 <hanUniFontLoad+0x21c>)
 8002276:	fba3 1302 	umull	r1, r3, r3, r2
 800227a:	1ad2      	subs	r2, r2, r3
 800227c:	0852      	lsrs	r2, r2, #1
 800227e:	4413      	add	r3, r2
 8002280:	091b      	lsrs	r3, r3, #4
 8002282:	b29a      	uxth	r2, r3
 8002284:	4b61      	ldr	r3, [pc, #388]	; (800240c <hanUniFontLoad+0x224>)
 8002286:	801a      	strh	r2, [r3, #0]

  //make font index
  uChosung   = UniChoIdxTbl[uChosung];    //Chosung index
 8002288:	4b60      	ldr	r3, [pc, #384]	; (800240c <hanUniFontLoad+0x224>)
 800228a:	881b      	ldrh	r3, [r3, #0]
 800228c:	461a      	mov	r2, r3
 800228e:	4b60      	ldr	r3, [pc, #384]	; (8002410 <hanUniFontLoad+0x228>)
 8002290:	5c9b      	ldrb	r3, [r3, r2]
 8002292:	b29a      	uxth	r2, r3
 8002294:	4b5d      	ldr	r3, [pc, #372]	; (800240c <hanUniFontLoad+0x224>)
 8002296:	801a      	strh	r2, [r3, #0]
  uJoongsung = UniJooIdxTbl[uJoongsung];  //Joongsung index
 8002298:	4b5b      	ldr	r3, [pc, #364]	; (8002408 <hanUniFontLoad+0x220>)
 800229a:	881b      	ldrh	r3, [r3, #0]
 800229c:	461a      	mov	r2, r3
 800229e:	4b5d      	ldr	r3, [pc, #372]	; (8002414 <hanUniFontLoad+0x22c>)
 80022a0:	5c9b      	ldrb	r3, [r3, r2]
 80022a2:	b29a      	uxth	r2, r3
 80022a4:	4b58      	ldr	r3, [pc, #352]	; (8002408 <hanUniFontLoad+0x220>)
 80022a6:	801a      	strh	r2, [r3, #0]
  uJongsung  = UniJonIdxTbl[uJongsung];   //Jongsung index
 80022a8:	4b55      	ldr	r3, [pc, #340]	; (8002400 <hanUniFontLoad+0x218>)
 80022aa:	881b      	ldrh	r3, [r3, #0]
 80022ac:	461a      	mov	r2, r3
 80022ae:	4b5a      	ldr	r3, [pc, #360]	; (8002418 <hanUniFontLoad+0x230>)
 80022b0:	5c9b      	ldrb	r3, [r3, r2]
 80022b2:	b29a      	uxth	r2, r3
 80022b4:	4b52      	ldr	r3, [pc, #328]	; (8002400 <hanUniFontLoad+0x218>)
 80022b6:	801a      	strh	r2, [r3, #0]

  //decide a character type (몇번째 벌을 사용할지 결정)
  uChoType = uJongsung ? ChoTypeCaseJongYes[uJoongsung]:ChoTypeCaseJongNo [uJoongsung];
 80022b8:	4b51      	ldr	r3, [pc, #324]	; (8002400 <hanUniFontLoad+0x218>)
 80022ba:	881b      	ldrh	r3, [r3, #0]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d006      	beq.n	80022ce <hanUniFontLoad+0xe6>
 80022c0:	4b51      	ldr	r3, [pc, #324]	; (8002408 <hanUniFontLoad+0x220>)
 80022c2:	881b      	ldrh	r3, [r3, #0]
 80022c4:	461a      	mov	r2, r3
 80022c6:	4b55      	ldr	r3, [pc, #340]	; (800241c <hanUniFontLoad+0x234>)
 80022c8:	5c9b      	ldrb	r3, [r3, r2]
 80022ca:	b29b      	uxth	r3, r3
 80022cc:	e005      	b.n	80022da <hanUniFontLoad+0xf2>
 80022ce:	4b4e      	ldr	r3, [pc, #312]	; (8002408 <hanUniFontLoad+0x220>)
 80022d0:	881b      	ldrh	r3, [r3, #0]
 80022d2:	461a      	mov	r2, r3
 80022d4:	4b52      	ldr	r3, [pc, #328]	; (8002420 <hanUniFontLoad+0x238>)
 80022d6:	5c9b      	ldrb	r3, [r3, r2]
 80022d8:	b29b      	uxth	r3, r3
 80022da:	4a52      	ldr	r2, [pc, #328]	; (8002424 <hanUniFontLoad+0x23c>)
 80022dc:	8013      	strh	r3, [r2, #0]

  //'ㄱ'(1) 이나 'ㅋ'(16) 인경우는
  uJooType = ((uChosung == 0 || uChosung == 1 ||uChosung == 16 ) ? 0: 1) + (uJongsung ? 2: 0);
 80022de:	4b4b      	ldr	r3, [pc, #300]	; (800240c <hanUniFontLoad+0x224>)
 80022e0:	881b      	ldrh	r3, [r3, #0]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d009      	beq.n	80022fa <hanUniFontLoad+0x112>
 80022e6:	4b49      	ldr	r3, [pc, #292]	; (800240c <hanUniFontLoad+0x224>)
 80022e8:	881b      	ldrh	r3, [r3, #0]
 80022ea:	2b01      	cmp	r3, #1
 80022ec:	d005      	beq.n	80022fa <hanUniFontLoad+0x112>
 80022ee:	4b47      	ldr	r3, [pc, #284]	; (800240c <hanUniFontLoad+0x224>)
 80022f0:	881b      	ldrh	r3, [r3, #0]
 80022f2:	2b10      	cmp	r3, #16
 80022f4:	d001      	beq.n	80022fa <hanUniFontLoad+0x112>
 80022f6:	2301      	movs	r3, #1
 80022f8:	e000      	b.n	80022fc <hanUniFontLoad+0x114>
 80022fa:	2300      	movs	r3, #0
 80022fc:	b29b      	uxth	r3, r3
 80022fe:	4a40      	ldr	r2, [pc, #256]	; (8002400 <hanUniFontLoad+0x218>)
 8002300:	8812      	ldrh	r2, [r2, #0]
 8002302:	2a00      	cmp	r2, #0
 8002304:	d001      	beq.n	800230a <hanUniFontLoad+0x122>
 8002306:	2202      	movs	r2, #2
 8002308:	e000      	b.n	800230c <hanUniFontLoad+0x124>
 800230a:	2200      	movs	r2, #0
 800230c:	4413      	add	r3, r2
 800230e:	b29a      	uxth	r2, r3
 8002310:	4b45      	ldr	r3, [pc, #276]	; (8002428 <hanUniFontLoad+0x240>)
 8002312:	801a      	strh	r2, [r3, #0]
  uJonType = JonType[uJoongsung];
 8002314:	4b3c      	ldr	r3, [pc, #240]	; (8002408 <hanUniFontLoad+0x220>)
 8002316:	881b      	ldrh	r3, [r3, #0]
 8002318:	461a      	mov	r2, r3
 800231a:	4b44      	ldr	r3, [pc, #272]	; (800242c <hanUniFontLoad+0x244>)
 800231c:	5c9b      	ldrb	r3, [r3, r2]
 800231e:	b29a      	uxth	r2, r3
 8002320:	4b43      	ldr	r3, [pc, #268]	; (8002430 <hanUniFontLoad+0x248>)
 8002322:	801a      	strh	r2, [r3, #0]

  for(i = 0; i<32; i++)
 8002324:	2300      	movs	r3, #0
 8002326:	81fb      	strh	r3, [r7, #14]
 8002328:	e035      	b.n	8002396 <hanUniFontLoad+0x1ae>
  {
    FontPtr->FontBuffer[i]  = (uint8_t)K_font[uChoType*20+uChosung][i];
 800232a:	4b3e      	ldr	r3, [pc, #248]	; (8002424 <hanUniFontLoad+0x23c>)
 800232c:	881b      	ldrh	r3, [r3, #0]
 800232e:	461a      	mov	r2, r3
 8002330:	4613      	mov	r3, r2
 8002332:	009b      	lsls	r3, r3, #2
 8002334:	4413      	add	r3, r2
 8002336:	009b      	lsls	r3, r3, #2
 8002338:	461a      	mov	r2, r3
 800233a:	4b34      	ldr	r3, [pc, #208]	; (800240c <hanUniFontLoad+0x224>)
 800233c:	881b      	ldrh	r3, [r3, #0]
 800233e:	441a      	add	r2, r3
 8002340:	89fb      	ldrh	r3, [r7, #14]
 8002342:	493c      	ldr	r1, [pc, #240]	; (8002434 <hanUniFontLoad+0x24c>)
 8002344:	0152      	lsls	r2, r2, #5
 8002346:	4413      	add	r3, r2
 8002348:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 800234c:	89fb      	ldrh	r3, [r7, #14]
 800234e:	b2d1      	uxtb	r1, r2
 8002350:	683a      	ldr	r2, [r7, #0]
 8002352:	4413      	add	r3, r2
 8002354:	460a      	mov	r2, r1
 8002356:	719a      	strb	r2, [r3, #6]
    FontPtr->FontBuffer[i] |= (uint8_t)K_font[160 + uJooType*22+uJoongsung][i];
 8002358:	89fb      	ldrh	r3, [r7, #14]
 800235a:	683a      	ldr	r2, [r7, #0]
 800235c:	4413      	add	r3, r2
 800235e:	7999      	ldrb	r1, [r3, #6]
 8002360:	4b31      	ldr	r3, [pc, #196]	; (8002428 <hanUniFontLoad+0x240>)
 8002362:	881b      	ldrh	r3, [r3, #0]
 8002364:	461a      	mov	r2, r3
 8002366:	2316      	movs	r3, #22
 8002368:	fb02 f303 	mul.w	r3, r2, r3
 800236c:	33a0      	adds	r3, #160	; 0xa0
 800236e:	4a26      	ldr	r2, [pc, #152]	; (8002408 <hanUniFontLoad+0x220>)
 8002370:	8812      	ldrh	r2, [r2, #0]
 8002372:	441a      	add	r2, r3
 8002374:	89fb      	ldrh	r3, [r7, #14]
 8002376:	482f      	ldr	r0, [pc, #188]	; (8002434 <hanUniFontLoad+0x24c>)
 8002378:	0152      	lsls	r2, r2, #5
 800237a:	4413      	add	r3, r2
 800237c:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8002380:	b2da      	uxtb	r2, r3
 8002382:	89fb      	ldrh	r3, [r7, #14]
 8002384:	430a      	orrs	r2, r1
 8002386:	b2d1      	uxtb	r1, r2
 8002388:	683a      	ldr	r2, [r7, #0]
 800238a:	4413      	add	r3, r2
 800238c:	460a      	mov	r2, r1
 800238e:	719a      	strb	r2, [r3, #6]
  for(i = 0; i<32; i++)
 8002390:	89fb      	ldrh	r3, [r7, #14]
 8002392:	3301      	adds	r3, #1
 8002394:	81fb      	strh	r3, [r7, #14]
 8002396:	89fb      	ldrh	r3, [r7, #14]
 8002398:	2b1f      	cmp	r3, #31
 800239a:	d9c6      	bls.n	800232a <hanUniFontLoad+0x142>
  }

  //combine Jongsung
  if(uJongsung)
 800239c:	4b18      	ldr	r3, [pc, #96]	; (8002400 <hanUniFontLoad+0x218>)
 800239e:	881b      	ldrh	r3, [r3, #0]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d025      	beq.n	80023f0 <hanUniFontLoad+0x208>
  {
    for(i = 0; i < 32; i++)   FontPtr->FontBuffer[i] |= K_font[248 + uJonType*28+uJongsung][i];
 80023a4:	2300      	movs	r3, #0
 80023a6:	81fb      	strh	r3, [r7, #14]
 80023a8:	e01f      	b.n	80023ea <hanUniFontLoad+0x202>
 80023aa:	89fb      	ldrh	r3, [r7, #14]
 80023ac:	683a      	ldr	r2, [r7, #0]
 80023ae:	4413      	add	r3, r2
 80023b0:	7999      	ldrb	r1, [r3, #6]
 80023b2:	4b1f      	ldr	r3, [pc, #124]	; (8002430 <hanUniFontLoad+0x248>)
 80023b4:	881b      	ldrh	r3, [r3, #0]
 80023b6:	461a      	mov	r2, r3
 80023b8:	4613      	mov	r3, r2
 80023ba:	00db      	lsls	r3, r3, #3
 80023bc:	1a9b      	subs	r3, r3, r2
 80023be:	009b      	lsls	r3, r3, #2
 80023c0:	33f8      	adds	r3, #248	; 0xf8
 80023c2:	4a0f      	ldr	r2, [pc, #60]	; (8002400 <hanUniFontLoad+0x218>)
 80023c4:	8812      	ldrh	r2, [r2, #0]
 80023c6:	441a      	add	r2, r3
 80023c8:	89fb      	ldrh	r3, [r7, #14]
 80023ca:	481a      	ldr	r0, [pc, #104]	; (8002434 <hanUniFontLoad+0x24c>)
 80023cc:	0152      	lsls	r2, r2, #5
 80023ce:	4413      	add	r3, r2
 80023d0:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 80023d4:	b2da      	uxtb	r2, r3
 80023d6:	89fb      	ldrh	r3, [r7, #14]
 80023d8:	430a      	orrs	r2, r1
 80023da:	b2d1      	uxtb	r1, r2
 80023dc:	683a      	ldr	r2, [r7, #0]
 80023de:	4413      	add	r3, r2
 80023e0:	460a      	mov	r2, r1
 80023e2:	719a      	strb	r2, [r3, #6]
 80023e4:	89fb      	ldrh	r3, [r7, #14]
 80023e6:	3301      	adds	r3, #1
 80023e8:	81fb      	strh	r3, [r7, #14]
 80023ea:	89fb      	ldrh	r3, [r7, #14]
 80023ec:	2b1f      	cmp	r3, #31
 80023ee:	d9dc      	bls.n	80023aa <hanUniFontLoad+0x1c2>
  }
}
 80023f0:	bf00      	nop
 80023f2:	3714      	adds	r7, #20
 80023f4:	46bd      	mov	sp, r7
 80023f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fa:	4770      	bx	lr
 80023fc:	24924925 	.word	0x24924925
 8002400:	200005a8 	.word	0x200005a8
 8002404:	86186187 	.word	0x86186187
 8002408:	200005aa 	.word	0x200005aa
 800240c:	200005ac 	.word	0x200005ac
 8002410:	08018760 	.word	0x08018760
 8002414:	08018780 	.word	0x08018780
 8002418:	080187a0 	.word	0x080187a0
 800241c:	080187d8 	.word	0x080187d8
 8002420:	080187c0 	.word	0x080187c0
 8002424:	200005ae 	.word	0x200005ae
 8002428:	200005b0 	.word	0x200005b0
 800242c:	080187f0 	.word	0x080187f0
 8002430:	200005b2 	.word	0x200005b2
 8002434:	0801ad00 	.word	0x0801ad00

08002438 <hanEngFontLoad>:

// 영문 코드를 기반으로 영문 폰트를 로드
void hanEngFontLoad(char *HanCode, han_font_t *FontPtr)
{
 8002438:	b480      	push	{r7}
 800243a:	b085      	sub	sp, #20
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
 8002440:	6039      	str	r1, [r7, #0]
  uint16_t i;
  char EngCode;

  EngCode = *HanCode;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	781b      	ldrb	r3, [r3, #0]
 8002446:	737b      	strb	r3, [r7, #13]

  EngCode -= 0x20;  // FONT는 스페이스 부터 시작한다.
 8002448:	7b7b      	ldrb	r3, [r7, #13]
 800244a:	3b20      	subs	r3, #32
 800244c:	737b      	strb	r3, [r7, #13]

  for ( i = 0 ; i < 16 ; i++ )
 800244e:	2300      	movs	r3, #0
 8002450:	81fb      	strh	r3, [r7, #14]
 8002452:	e00f      	b.n	8002474 <hanEngFontLoad+0x3c>
  {
     FontPtr->FontBuffer[ i ] = (char)wEngFon[(int)EngCode][i];
 8002454:	7b7a      	ldrb	r2, [r7, #13]
 8002456:	89fb      	ldrh	r3, [r7, #14]
 8002458:	490b      	ldr	r1, [pc, #44]	; (8002488 <hanEngFontLoad+0x50>)
 800245a:	0112      	lsls	r2, r2, #4
 800245c:	4413      	add	r3, r2
 800245e:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 8002462:	89fb      	ldrh	r3, [r7, #14]
 8002464:	b2d1      	uxtb	r1, r2
 8002466:	683a      	ldr	r2, [r7, #0]
 8002468:	4413      	add	r3, r2
 800246a:	460a      	mov	r2, r1
 800246c:	719a      	strb	r2, [r3, #6]
  for ( i = 0 ; i < 16 ; i++ )
 800246e:	89fb      	ldrh	r3, [r7, #14]
 8002470:	3301      	adds	r3, #1
 8002472:	81fb      	strh	r3, [r7, #14]
 8002474:	89fb      	ldrh	r3, [r7, #14]
 8002476:	2b0f      	cmp	r3, #15
 8002478:	d9ec      	bls.n	8002454 <hanEngFontLoad+0x1c>
  }
}
 800247a:	bf00      	nop
 800247c:	bf00      	nop
 800247e:	3714      	adds	r7, #20
 8002480:	46bd      	mov	sp, r7
 8002482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002486:	4770      	bx	lr
 8002488:	08016f00 	.word	0x08016f00

0800248c <hanCnvCodeWan2Johab>:

// 완성형 코드를 조합형 코드로 변환
uint16_t hanCnvCodeWan2Johab(uint16_t WanCode)
{
 800248c:	b480      	push	{r7}
 800248e:	b085      	sub	sp, #20
 8002490:	af00      	add	r7, sp, #0
 8002492:	4603      	mov	r3, r0
 8002494:	80fb      	strh	r3, [r7, #6]
  int index;
  uint16_t hcode, lcode;

  hcode = (WanCode >> 8) & 0xFF;
 8002496:	88fb      	ldrh	r3, [r7, #6]
 8002498:	0a1b      	lsrs	r3, r3, #8
 800249a:	81fb      	strh	r3, [r7, #14]
  lcode = WanCode & 0x0ff;
 800249c:	88fb      	ldrh	r3, [r7, #6]
 800249e:	b2db      	uxtb	r3, r3
 80024a0:	81bb      	strh	r3, [r7, #12]

  index = (hcode - 0x0B0) * 94 + (lcode - 0x0A1);
 80024a2:	89fb      	ldrh	r3, [r7, #14]
 80024a4:	3bb0      	subs	r3, #176	; 0xb0
 80024a6:	225e      	movs	r2, #94	; 0x5e
 80024a8:	fb03 f202 	mul.w	r2, r3, r2
 80024ac:	89bb      	ldrh	r3, [r7, #12]
 80024ae:	3ba1      	subs	r3, #161	; 0xa1
 80024b0:	4413      	add	r3, r2
 80024b2:	60bb      	str	r3, [r7, #8]

  return wWanToJohabTable[index];
 80024b4:	4a05      	ldr	r2, [pc, #20]	; (80024cc <hanCnvCodeWan2Johab+0x40>)
 80024b6:	68bb      	ldr	r3, [r7, #8]
 80024b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024bc:	b29b      	uxth	r3, r3
}
 80024be:	4618      	mov	r0, r3
 80024c0:	3714      	adds	r7, #20
 80024c2:	46bd      	mov	sp, r7
 80024c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c8:	4770      	bx	lr
 80024ca:	bf00      	nop
 80024cc:	08018840 	.word	0x08018840

080024d0 <TransferDoneISR>:
static void st7735FillRect(int32_t x, int32_t y, int32_t w, int32_t h, uint32_t color);
static void st7735SetRotation(uint8_t m);
static bool st7735Reset(void);

static void TransferDoneISR(void)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	af00      	add	r7, sp, #0
	if(is_write_frame == true)
 80024d4:	4b0a      	ldr	r3, [pc, #40]	; (8002500 <TransferDoneISR+0x30>)
 80024d6:	781b      	ldrb	r3, [r3, #0]
 80024d8:	b2db      	uxtb	r3, r3
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d00d      	beq.n	80024fa <TransferDoneISR+0x2a>
	{
		is_write_frame = false;
 80024de:	4b08      	ldr	r3, [pc, #32]	; (8002500 <TransferDoneISR+0x30>)
 80024e0:	2200      	movs	r2, #0
 80024e2:	701a      	strb	r2, [r3, #0]
		gpioPinWrite(_PIN_DEF_CS, _DEF_HIGH);
 80024e4:	2101      	movs	r1, #1
 80024e6:	2002      	movs	r0, #2
 80024e8:	f001 fcca 	bl	8003e80 <gpioPinWrite>

		if(frameCallBack != NULL)
 80024ec:	4b05      	ldr	r3, [pc, #20]	; (8002504 <TransferDoneISR+0x34>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d002      	beq.n	80024fa <TransferDoneISR+0x2a>
		{
			frameCallBack();
 80024f4:	4b03      	ldr	r3, [pc, #12]	; (8002504 <TransferDoneISR+0x34>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4798      	blx	r3
		}
	}
}
 80024fa:	bf00      	nop
 80024fc:	bd80      	pop	{r7, pc}
 80024fe:	bf00      	nop
 8002500:	200005bc 	.word	0x200005bc
 8002504:	200005b8 	.word	0x200005b8

08002508 <st7735Init>:

bool st7735Init(void)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b082      	sub	sp, #8
 800250c:	af00      	add	r7, sp, #0
	bool ret;

	ret = st7735Reset();
 800250e:	f000 f835 	bl	800257c <st7735Reset>
 8002512:	4603      	mov	r3, r0
 8002514:	71fb      	strb	r3, [r7, #7]

	return ret;
 8002516:	79fb      	ldrb	r3, [r7, #7]
}
 8002518:	4618      	mov	r0, r3
 800251a:	3708      	adds	r7, #8
 800251c:	46bd      	mov	sp, r7
 800251e:	bd80      	pop	{r7, pc}

08002520 <st7735InitDriver>:

bool st7735InitDriver(lcd_driver_t *p_driver)
{
 8002520:	b480      	push	{r7}
 8002522:	b083      	sub	sp, #12
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
	p_driver->init = st7735Init;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	4a0d      	ldr	r2, [pc, #52]	; (8002560 <st7735InitDriver+0x40>)
 800252c:	601a      	str	r2, [r3, #0]
	p_driver->reset = st7735Reset;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	4a0c      	ldr	r2, [pc, #48]	; (8002564 <st7735InitDriver+0x44>)
 8002532:	605a      	str	r2, [r3, #4]
	p_driver->setWindow = st7735SetWindow;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	4a0c      	ldr	r2, [pc, #48]	; (8002568 <st7735InitDriver+0x48>)
 8002538:	609a      	str	r2, [r3, #8]
	p_driver->getWidth = st7735GetWidth;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	4a0b      	ldr	r2, [pc, #44]	; (800256c <st7735InitDriver+0x4c>)
 800253e:	60da      	str	r2, [r3, #12]
	p_driver->getHeight = st7735GetHeight;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	4a0b      	ldr	r2, [pc, #44]	; (8002570 <st7735InitDriver+0x50>)
 8002544:	611a      	str	r2, [r3, #16]
	p_driver->setCallBack = st7735SetCallBack;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	4a0a      	ldr	r2, [pc, #40]	; (8002574 <st7735InitDriver+0x54>)
 800254a:	615a      	str	r2, [r3, #20]
	p_driver->sendBuffer = st7735SendBuffer;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	4a0a      	ldr	r2, [pc, #40]	; (8002578 <st7735InitDriver+0x58>)
 8002550:	619a      	str	r2, [r3, #24]

	return true;
 8002552:	2301      	movs	r3, #1
}
 8002554:	4618      	mov	r0, r3
 8002556:	370c      	adds	r7, #12
 8002558:	46bd      	mov	sp, r7
 800255a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255e:	4770      	bx	lr
 8002560:	08002509 	.word	0x08002509
 8002564:	0800257d 	.word	0x0800257d
 8002568:	08002841 	.word	0x08002841
 800256c:	080025f5 	.word	0x080025f5
 8002570:	08002605 	.word	0x08002605
 8002574:	08002a95 	.word	0x08002a95
 8002578:	08002a49 	.word	0x08002a49

0800257c <st7735Reset>:

bool st7735Reset(void)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b082      	sub	sp, #8
 8002580:	af02      	add	r7, sp, #8
	spiBegin(spi_ch);
 8002582:	4b1a      	ldr	r3, [pc, #104]	; (80025ec <st7735Reset+0x70>)
 8002584:	781b      	ldrb	r3, [r3, #0]
 8002586:	4618      	mov	r0, r3
 8002588:	f002 fea6 	bl	80052d8 <spiBegin>
	spiSetDataMode(spi_ch, SPI_MODE0);
 800258c:	4b17      	ldr	r3, [pc, #92]	; (80025ec <st7735Reset+0x70>)
 800258e:	781b      	ldrb	r3, [r3, #0]
 8002590:	2100      	movs	r1, #0
 8002592:	4618      	mov	r0, r3
 8002594:	f002 fecc 	bl	8005330 <spiSetDataMode>

	spiAttachTxInterrupt(spi_ch, TransferDoneISR);
 8002598:	4b14      	ldr	r3, [pc, #80]	; (80025ec <st7735Reset+0x70>)
 800259a:	781b      	ldrb	r3, [r3, #0]
 800259c:	4914      	ldr	r1, [pc, #80]	; (80025f0 <st7735Reset+0x74>)
 800259e:	4618      	mov	r0, r3
 80025a0:	f002 fffc 	bl	800559c <spiAttachTxInterrupt>

	gpioPinWrite(_PIN_DEF_BKT, _DEF_LOW);
 80025a4:	2100      	movs	r1, #0
 80025a6:	2001      	movs	r0, #1
 80025a8:	f001 fc6a 	bl	8003e80 <gpioPinWrite>
	gpioPinWrite(_PIN_DEF_DC, _DEF_HIGH);
 80025ac:	2101      	movs	r1, #1
 80025ae:	2003      	movs	r0, #3
 80025b0:	f001 fc66 	bl	8003e80 <gpioPinWrite>
	gpioPinWrite(_PIN_DEF_CS, _DEF_HIGH);
 80025b4:	2101      	movs	r1, #1
 80025b6:	2002      	movs	r0, #2
 80025b8:	f001 fc62 	bl	8003e80 <gpioPinWrite>
	delay(10);
 80025bc:	200a      	movs	r0, #10
 80025be:	f7ff fb9e 	bl	8001cfe <delay>

	st7735InitRegs();
 80025c2:	f000 f863 	bl	800268c <st7735InitRegs>

	st7735SetRotation(3);
 80025c6:	2003      	movs	r0, #3
 80025c8:	f000 f910 	bl	80027ec <st7735SetRotation>
	st7735FillRect(0, 0, HW_LCD_WIDTH, HW_LCD_HEIGHT, black);
 80025cc:	2300      	movs	r3, #0
 80025ce:	9300      	str	r3, [sp, #0]
 80025d0:	2350      	movs	r3, #80	; 0x50
 80025d2:	22a0      	movs	r2, #160	; 0xa0
 80025d4:	2100      	movs	r1, #0
 80025d6:	2000      	movs	r0, #0
 80025d8:	f000 f97e 	bl	80028d8 <st7735FillRect>
	gpioPinWrite(_PIN_DEF_BKT, _DEF_LOW);
 80025dc:	2100      	movs	r1, #0
 80025de:	2001      	movs	r0, #1
 80025e0:	f001 fc4e 	bl	8003e80 <gpioPinWrite>

	return true;
 80025e4:	2301      	movs	r3, #1
}
 80025e6:	4618      	mov	r0, r3
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bd80      	pop	{r7, pc}
 80025ec:	200005b4 	.word	0x200005b4
 80025f0:	080024d1 	.word	0x080024d1

080025f4 <st7735GetWidth>:

uint16_t st7735GetWidth(void)
{
 80025f4:	b480      	push	{r7}
 80025f6:	af00      	add	r7, sp, #0
	return HW_LCD_WIDTH;
 80025f8:	23a0      	movs	r3, #160	; 0xa0
}
 80025fa:	4618      	mov	r0, r3
 80025fc:	46bd      	mov	sp, r7
 80025fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002602:	4770      	bx	lr

08002604 <st7735GetHeight>:

uint16_t st7735GetHeight(void)
{
 8002604:	b480      	push	{r7}
 8002606:	af00      	add	r7, sp, #0
	return HW_LCD_HEIGHT;
 8002608:	2350      	movs	r3, #80	; 0x50
}
 800260a:	4618      	mov	r0, r3
 800260c:	46bd      	mov	sp, r7
 800260e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002612:	4770      	bx	lr

08002614 <writecommand>:

void writecommand(uint8_t c)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b082      	sub	sp, #8
 8002618:	af00      	add	r7, sp, #0
 800261a:	4603      	mov	r3, r0
 800261c:	71fb      	strb	r3, [r7, #7]
  gpioPinWrite(_PIN_DEF_DC, _DEF_LOW);
 800261e:	2100      	movs	r1, #0
 8002620:	2003      	movs	r0, #3
 8002622:	f001 fc2d 	bl	8003e80 <gpioPinWrite>
  gpioPinWrite(_PIN_DEF_CS, _DEF_LOW);
 8002626:	2100      	movs	r1, #0
 8002628:	2002      	movs	r0, #2
 800262a:	f001 fc29 	bl	8003e80 <gpioPinWrite>

  spiTransfer8(spi_ch, c);
 800262e:	4b07      	ldr	r3, [pc, #28]	; (800264c <writecommand+0x38>)
 8002630:	781b      	ldrb	r3, [r3, #0]
 8002632:	79fa      	ldrb	r2, [r7, #7]
 8002634:	4611      	mov	r1, r2
 8002636:	4618      	mov	r0, r3
 8002638:	f002 ff0e 	bl	8005458 <spiTransfer8>

  gpioPinWrite(_PIN_DEF_CS, _DEF_HIGH);
 800263c:	2101      	movs	r1, #1
 800263e:	2002      	movs	r0, #2
 8002640:	f001 fc1e 	bl	8003e80 <gpioPinWrite>
}
 8002644:	bf00      	nop
 8002646:	3708      	adds	r7, #8
 8002648:	46bd      	mov	sp, r7
 800264a:	bd80      	pop	{r7, pc}
 800264c:	200005b4 	.word	0x200005b4

08002650 <writedata>:

void writedata(uint8_t d)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b082      	sub	sp, #8
 8002654:	af00      	add	r7, sp, #0
 8002656:	4603      	mov	r3, r0
 8002658:	71fb      	strb	r3, [r7, #7]
  gpioPinWrite(_PIN_DEF_DC, _DEF_HIGH);
 800265a:	2101      	movs	r1, #1
 800265c:	2003      	movs	r0, #3
 800265e:	f001 fc0f 	bl	8003e80 <gpioPinWrite>
  gpioPinWrite(_PIN_DEF_CS, _DEF_LOW);
 8002662:	2100      	movs	r1, #0
 8002664:	2002      	movs	r0, #2
 8002666:	f001 fc0b 	bl	8003e80 <gpioPinWrite>

  spiTransfer8(spi_ch, d);
 800266a:	4b07      	ldr	r3, [pc, #28]	; (8002688 <writedata+0x38>)
 800266c:	781b      	ldrb	r3, [r3, #0]
 800266e:	79fa      	ldrb	r2, [r7, #7]
 8002670:	4611      	mov	r1, r2
 8002672:	4618      	mov	r0, r3
 8002674:	f002 fef0 	bl	8005458 <spiTransfer8>

  gpioPinWrite(_PIN_DEF_CS, _DEF_HIGH);
 8002678:	2101      	movs	r1, #1
 800267a:	2002      	movs	r0, #2
 800267c:	f001 fc00 	bl	8003e80 <gpioPinWrite>
}
 8002680:	bf00      	nop
 8002682:	3708      	adds	r7, #8
 8002684:	46bd      	mov	sp, r7
 8002686:	bd80      	pop	{r7, pc}
 8002688:	200005b4 	.word	0x200005b4

0800268c <st7735InitRegs>:

void st7735InitRegs(void)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	af00      	add	r7, sp, #0
  writecommand(ST7735_SWRESET); //  1: Software reset, 0 args, w/delay
 8002690:	2001      	movs	r0, #1
 8002692:	f7ff ffbf 	bl	8002614 <writecommand>
  delay(10);
 8002696:	200a      	movs	r0, #10
 8002698:	f7ff fb31 	bl	8001cfe <delay>

  writecommand(ST7735_SLPOUT);  //  2: Out of sleep mode, 0 args, w/delay
 800269c:	2011      	movs	r0, #17
 800269e:	f7ff ffb9 	bl	8002614 <writecommand>
  delay(10);
 80026a2:	200a      	movs	r0, #10
 80026a4:	f7ff fb2b 	bl	8001cfe <delay>

  writecommand(ST7735_FRMCTR1); //  3: Frame rate ctrl - normal mode, 3 args:
 80026a8:	20b1      	movs	r0, #177	; 0xb1
 80026aa:	f7ff ffb3 	bl	8002614 <writecommand>
  writedata(0x01);              //     Rate = fosc/(1x2+40) * (LINE+2C+2D)
 80026ae:	2001      	movs	r0, #1
 80026b0:	f7ff ffce 	bl	8002650 <writedata>
  writedata(0x2C);
 80026b4:	202c      	movs	r0, #44	; 0x2c
 80026b6:	f7ff ffcb 	bl	8002650 <writedata>
  writedata(0x2D);
 80026ba:	202d      	movs	r0, #45	; 0x2d
 80026bc:	f7ff ffc8 	bl	8002650 <writedata>

  writecommand(ST7735_FRMCTR2); //  4: Frame rate control - idle mode, 3 args:
 80026c0:	20b2      	movs	r0, #178	; 0xb2
 80026c2:	f7ff ffa7 	bl	8002614 <writecommand>
  writedata(0x01);              //     Rate = fosc/(1x2+40) * (LINE+2C+2D)
 80026c6:	2001      	movs	r0, #1
 80026c8:	f7ff ffc2 	bl	8002650 <writedata>
  writedata(0x2C);
 80026cc:	202c      	movs	r0, #44	; 0x2c
 80026ce:	f7ff ffbf 	bl	8002650 <writedata>
  writedata(0x2D);
 80026d2:	202d      	movs	r0, #45	; 0x2d
 80026d4:	f7ff ffbc 	bl	8002650 <writedata>

  writecommand(ST7735_FRMCTR3); //  5: Frame rate ctrl - partial mode, 6 args:
 80026d8:	20b3      	movs	r0, #179	; 0xb3
 80026da:	f7ff ff9b 	bl	8002614 <writecommand>
  writedata(0x01);              //     Dot inversion mode
 80026de:	2001      	movs	r0, #1
 80026e0:	f7ff ffb6 	bl	8002650 <writedata>
  writedata(0x2C);
 80026e4:	202c      	movs	r0, #44	; 0x2c
 80026e6:	f7ff ffb3 	bl	8002650 <writedata>
  writedata(0x2D);
 80026ea:	202d      	movs	r0, #45	; 0x2d
 80026ec:	f7ff ffb0 	bl	8002650 <writedata>
  writedata(0x01);              //     Line inversion mode
 80026f0:	2001      	movs	r0, #1
 80026f2:	f7ff ffad 	bl	8002650 <writedata>
  writedata(0x2C);
 80026f6:	202c      	movs	r0, #44	; 0x2c
 80026f8:	f7ff ffaa 	bl	8002650 <writedata>
  writedata(0x2D);
 80026fc:	202d      	movs	r0, #45	; 0x2d
 80026fe:	f7ff ffa7 	bl	8002650 <writedata>

  writecommand(ST7735_INVCTR);  //  6: Display inversion ctrl, 1 arg, no delay:
 8002702:	20b4      	movs	r0, #180	; 0xb4
 8002704:	f7ff ff86 	bl	8002614 <writecommand>
  writedata(0x07);              //     No inversion
 8002708:	2007      	movs	r0, #7
 800270a:	f7ff ffa1 	bl	8002650 <writedata>

  writecommand(ST7735_PWCTR1);  //  7: Power control, 3 args, no delay:
 800270e:	20c0      	movs	r0, #192	; 0xc0
 8002710:	f7ff ff80 	bl	8002614 <writecommand>
  writedata(0xA2);
 8002714:	20a2      	movs	r0, #162	; 0xa2
 8002716:	f7ff ff9b 	bl	8002650 <writedata>
  writedata(0x02);              //     -4.6V
 800271a:	2002      	movs	r0, #2
 800271c:	f7ff ff98 	bl	8002650 <writedata>
  writedata(0x84);              //     AUTO mode
 8002720:	2084      	movs	r0, #132	; 0x84
 8002722:	f7ff ff95 	bl	8002650 <writedata>

  writecommand(ST7735_PWCTR2);  //  8: Power control, 1 arg, no delay:
 8002726:	20c1      	movs	r0, #193	; 0xc1
 8002728:	f7ff ff74 	bl	8002614 <writecommand>
  writedata(0xC5);              //     VGH25 = 2.4C VGSEL = -10 VGH = 3 * AVDD
 800272c:	20c5      	movs	r0, #197	; 0xc5
 800272e:	f7ff ff8f 	bl	8002650 <writedata>

  writecommand(ST7735_PWCTR3);  //  9: Power control, 2 args, no delay:
 8002732:	20c2      	movs	r0, #194	; 0xc2
 8002734:	f7ff ff6e 	bl	8002614 <writecommand>
  writedata(0x0A);              //     Opamp current small
 8002738:	200a      	movs	r0, #10
 800273a:	f7ff ff89 	bl	8002650 <writedata>
  writedata(0x00);              //     Boost frequency
 800273e:	2000      	movs	r0, #0
 8002740:	f7ff ff86 	bl	8002650 <writedata>

  writecommand(ST7735_PWCTR4);  // 10: Power control, 2 args, no delay:
 8002744:	20c3      	movs	r0, #195	; 0xc3
 8002746:	f7ff ff65 	bl	8002614 <writecommand>
  writedata(0x8A);              //     BCLK/2, Opamp current small & Medium low
 800274a:	208a      	movs	r0, #138	; 0x8a
 800274c:	f7ff ff80 	bl	8002650 <writedata>
  writedata(0x2A);
 8002750:	202a      	movs	r0, #42	; 0x2a
 8002752:	f7ff ff7d 	bl	8002650 <writedata>

  writecommand(ST7735_PWCTR5);  // 11: Power control, 2 args, no delay:
 8002756:	20c4      	movs	r0, #196	; 0xc4
 8002758:	f7ff ff5c 	bl	8002614 <writecommand>
  writedata(0x8A);
 800275c:	208a      	movs	r0, #138	; 0x8a
 800275e:	f7ff ff77 	bl	8002650 <writedata>
  writedata(0xEE);
 8002762:	20ee      	movs	r0, #238	; 0xee
 8002764:	f7ff ff74 	bl	8002650 <writedata>

  writecommand(ST7735_VMCTR1);  // 12: Power control, 1 arg, no delay:
 8002768:	20c5      	movs	r0, #197	; 0xc5
 800276a:	f7ff ff53 	bl	8002614 <writecommand>
  writedata(0x0E);
 800276e:	200e      	movs	r0, #14
 8002770:	f7ff ff6e 	bl	8002650 <writedata>

#if HW_ST7735_MODEL == 0
  writecommand(ST7735_INVON);   // 13: Don't invert display, no args, no delay
 8002774:	2021      	movs	r0, #33	; 0x21
 8002776:	f7ff ff4d 	bl	8002614 <writecommand>
#else
  writecommand(ST7735_INVOFF);  // 13: Don't invert display, no args, no delay
#endif

  writecommand(ST7735_MADCTL);  // 14: Memory access control (directions), 1 arg:
 800277a:	2036      	movs	r0, #54	; 0x36
 800277c:	f7ff ff4a 	bl	8002614 <writecommand>
  writedata(0xC8);              //     row addr/col addr, bottom to top refresh
 8002780:	20c8      	movs	r0, #200	; 0xc8
 8002782:	f7ff ff65 	bl	8002650 <writedata>

  writecommand(ST7735_COLMOD);  // 15: set color mode, 1 arg, no delay:
 8002786:	203a      	movs	r0, #58	; 0x3a
 8002788:	f7ff ff44 	bl	8002614 <writecommand>
  writedata(0x05);              //     16-bit color
 800278c:	2005      	movs	r0, #5
 800278e:	f7ff ff5f 	bl	8002650 <writedata>


  writecommand(ST7735_CASET);   //  1: Column addr set, 4 args, no delay:
 8002792:	202a      	movs	r0, #42	; 0x2a
 8002794:	f7ff ff3e 	bl	8002614 <writecommand>
  writedata(0x00);
 8002798:	2000      	movs	r0, #0
 800279a:	f7ff ff59 	bl	8002650 <writedata>
  writedata(0x00);              //     XSTART = 0
 800279e:	2000      	movs	r0, #0
 80027a0:	f7ff ff56 	bl	8002650 <writedata>
  writedata(0x00);
 80027a4:	2000      	movs	r0, #0
 80027a6:	f7ff ff53 	bl	8002650 <writedata>
  writedata(HW_LCD_WIDTH-1);    //     XEND = 159
 80027aa:	209f      	movs	r0, #159	; 0x9f
 80027ac:	f7ff ff50 	bl	8002650 <writedata>

  writecommand(ST7735_RASET);   //  2: Row addr set, 4 args, no delay:
 80027b0:	202b      	movs	r0, #43	; 0x2b
 80027b2:	f7ff ff2f 	bl	8002614 <writecommand>
  writedata(0x00);
 80027b6:	2000      	movs	r0, #0
 80027b8:	f7ff ff4a 	bl	8002650 <writedata>
  writedata(0x00);              //     XSTART = 0
 80027bc:	2000      	movs	r0, #0
 80027be:	f7ff ff47 	bl	8002650 <writedata>
  writedata(0x00);
 80027c2:	2000      	movs	r0, #0
 80027c4:	f7ff ff44 	bl	8002650 <writedata>
  writedata(HW_LCD_HEIGHT-1);   //     XEND = 79
 80027c8:	204f      	movs	r0, #79	; 0x4f
 80027ca:	f7ff ff41 	bl	8002650 <writedata>


  writecommand(ST7735_NORON);   //  3: Normal display on, no args, w/delay
 80027ce:	2013      	movs	r0, #19
 80027d0:	f7ff ff20 	bl	8002614 <writecommand>
  delay(10);
 80027d4:	200a      	movs	r0, #10
 80027d6:	f7ff fa92 	bl	8001cfe <delay>
  writecommand(ST7735_DISPON);  //  4: Main screen turn on, no args w/delay
 80027da:	2029      	movs	r0, #41	; 0x29
 80027dc:	f7ff ff1a 	bl	8002614 <writecommand>
  delay(10);
 80027e0:	200a      	movs	r0, #10
 80027e2:	f7ff fa8c 	bl	8001cfe <delay>
}
 80027e6:	bf00      	nop
 80027e8:	bd80      	pop	{r7, pc}
	...

080027ec <st7735SetRotation>:

void st7735SetRotation(uint8_t mode)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b082      	sub	sp, #8
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	4603      	mov	r3, r0
 80027f4:	71fb      	strb	r3, [r7, #7]
  writecommand(ST7735_MADCTL);
 80027f6:	2036      	movs	r0, #54	; 0x36
 80027f8:	f7ff ff0c 	bl	8002614 <writecommand>

  switch (mode)
 80027fc:	79fb      	ldrb	r3, [r7, #7]
 80027fe:	2b03      	cmp	r3, #3
 8002800:	d81a      	bhi.n	8002838 <st7735SetRotation+0x4c>
 8002802:	a201      	add	r2, pc, #4	; (adr r2, 8002808 <st7735SetRotation+0x1c>)
 8002804:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002808:	08002819 	.word	0x08002819
 800280c:	08002821 	.word	0x08002821
 8002810:	08002829 	.word	0x08002829
 8002814:	08002831 	.word	0x08002831
  {
   case 0:
     writedata(MADCTL_MX | MADCTL_MY | MADCTL_BGR);
 8002818:	20c8      	movs	r0, #200	; 0xc8
 800281a:	f7ff ff19 	bl	8002650 <writedata>
     break;
 800281e:	e00b      	b.n	8002838 <st7735SetRotation+0x4c>

   case 1:
     writedata(MADCTL_MY | MADCTL_MV | MADCTL_BGR);
 8002820:	20a8      	movs	r0, #168	; 0xa8
 8002822:	f7ff ff15 	bl	8002650 <writedata>
     break;
 8002826:	e007      	b.n	8002838 <st7735SetRotation+0x4c>

  case 2:
    writedata(MADCTL_BGR);
 8002828:	2008      	movs	r0, #8
 800282a:	f7ff ff11 	bl	8002650 <writedata>
    break;
 800282e:	e003      	b.n	8002838 <st7735SetRotation+0x4c>

   case 3:
     writedata(MADCTL_MX | MADCTL_MV | MADCTL_BGR);
 8002830:	2068      	movs	r0, #104	; 0x68
 8002832:	f7ff ff0d 	bl	8002650 <writedata>
     break;
 8002836:	bf00      	nop
  }
}
 8002838:	bf00      	nop
 800283a:	3708      	adds	r7, #8
 800283c:	46bd      	mov	sp, r7
 800283e:	bd80      	pop	{r7, pc}

08002840 <st7735SetWindow>:

void st7735SetWindow(int32_t x0, int32_t y0, int32_t x1, int32_t y1)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b084      	sub	sp, #16
 8002844:	af00      	add	r7, sp, #0
 8002846:	60f8      	str	r0, [r7, #12]
 8002848:	60b9      	str	r1, [r7, #8]
 800284a:	607a      	str	r2, [r7, #4]
 800284c:	603b      	str	r3, [r7, #0]
  spiSetBitWidth(spi_ch, 8);
 800284e:	4b21      	ldr	r3, [pc, #132]	; (80028d4 <st7735SetWindow+0x94>)
 8002850:	781b      	ldrb	r3, [r3, #0]
 8002852:	2108      	movs	r1, #8
 8002854:	4618      	mov	r0, r3
 8002856:	f002 fdcf 	bl	80053f8 <spiSetBitWidth>

  writecommand(ST7735_CASET); // Column addr set
 800285a:	202a      	movs	r0, #42	; 0x2a
 800285c:	f7ff feda 	bl	8002614 <writecommand>
  writedata(0x00);
 8002860:	2000      	movs	r0, #0
 8002862:	f7ff fef5 	bl	8002650 <writedata>
  writedata(x0+colstart);     // XSTART
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	b2da      	uxtb	r2, r3
 800286a:	2301      	movs	r3, #1
 800286c:	b2db      	uxtb	r3, r3
 800286e:	4413      	add	r3, r2
 8002870:	b2db      	uxtb	r3, r3
 8002872:	4618      	mov	r0, r3
 8002874:	f7ff feec 	bl	8002650 <writedata>
  writedata(0x00);
 8002878:	2000      	movs	r0, #0
 800287a:	f7ff fee9 	bl	8002650 <writedata>
  writedata(x1+colstart);     // XEND
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	b2da      	uxtb	r2, r3
 8002882:	2301      	movs	r3, #1
 8002884:	b2db      	uxtb	r3, r3
 8002886:	4413      	add	r3, r2
 8002888:	b2db      	uxtb	r3, r3
 800288a:	4618      	mov	r0, r3
 800288c:	f7ff fee0 	bl	8002650 <writedata>

  writecommand(ST7735_RASET); // Row addr set
 8002890:	202b      	movs	r0, #43	; 0x2b
 8002892:	f7ff febf 	bl	8002614 <writecommand>
  writedata(0x00);
 8002896:	2000      	movs	r0, #0
 8002898:	f7ff feda 	bl	8002650 <writedata>
  writedata(y0+rowstart);     // YSTART
 800289c:	68bb      	ldr	r3, [r7, #8]
 800289e:	b2da      	uxtb	r2, r3
 80028a0:	231a      	movs	r3, #26
 80028a2:	b2db      	uxtb	r3, r3
 80028a4:	4413      	add	r3, r2
 80028a6:	b2db      	uxtb	r3, r3
 80028a8:	4618      	mov	r0, r3
 80028aa:	f7ff fed1 	bl	8002650 <writedata>
  writedata(0x00);
 80028ae:	2000      	movs	r0, #0
 80028b0:	f7ff fece 	bl	8002650 <writedata>
  writedata(y1+rowstart);     // YEND
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	b2da      	uxtb	r2, r3
 80028b8:	231a      	movs	r3, #26
 80028ba:	b2db      	uxtb	r3, r3
 80028bc:	4413      	add	r3, r2
 80028be:	b2db      	uxtb	r3, r3
 80028c0:	4618      	mov	r0, r3
 80028c2:	f7ff fec5 	bl	8002650 <writedata>

  writecommand(ST7735_RAMWR); // write to RAM
 80028c6:	202c      	movs	r0, #44	; 0x2c
 80028c8:	f7ff fea4 	bl	8002614 <writecommand>
}
 80028cc:	bf00      	nop
 80028ce:	3710      	adds	r7, #16
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bd80      	pop	{r7, pc}
 80028d4:	200005b4 	.word	0x200005b4

080028d8 <st7735FillRect>:

void st7735FillRect(int32_t x, int32_t y, int32_t w, int32_t h, uint32_t color)
{
 80028d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80028dc:	b089      	sub	sp, #36	; 0x24
 80028de:	af00      	add	r7, sp, #0
 80028e0:	60f8      	str	r0, [r7, #12]
 80028e2:	60b9      	str	r1, [r7, #8]
 80028e4:	607a      	str	r2, [r7, #4]
 80028e6:	603b      	str	r3, [r7, #0]
 80028e8:	466b      	mov	r3, sp
 80028ea:	461e      	mov	r6, r3
  uint16_t line_buf[w];
 80028ec:	6879      	ldr	r1, [r7, #4]
 80028ee:	1e4b      	subs	r3, r1, #1
 80028f0:	617b      	str	r3, [r7, #20]
 80028f2:	460a      	mov	r2, r1
 80028f4:	2300      	movs	r3, #0
 80028f6:	4690      	mov	r8, r2
 80028f8:	4699      	mov	r9, r3
 80028fa:	f04f 0200 	mov.w	r2, #0
 80028fe:	f04f 0300 	mov.w	r3, #0
 8002902:	ea4f 1309 	mov.w	r3, r9, lsl #4
 8002906:	ea43 7318 	orr.w	r3, r3, r8, lsr #28
 800290a:	ea4f 1208 	mov.w	r2, r8, lsl #4
 800290e:	460a      	mov	r2, r1
 8002910:	2300      	movs	r3, #0
 8002912:	4614      	mov	r4, r2
 8002914:	461d      	mov	r5, r3
 8002916:	f04f 0200 	mov.w	r2, #0
 800291a:	f04f 0300 	mov.w	r3, #0
 800291e:	012b      	lsls	r3, r5, #4
 8002920:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8002924:	0122      	lsls	r2, r4, #4
 8002926:	460b      	mov	r3, r1
 8002928:	005b      	lsls	r3, r3, #1
 800292a:	3307      	adds	r3, #7
 800292c:	08db      	lsrs	r3, r3, #3
 800292e:	00db      	lsls	r3, r3, #3
 8002930:	ebad 0d03 	sub.w	sp, sp, r3
 8002934:	466b      	mov	r3, sp
 8002936:	3301      	adds	r3, #1
 8002938:	085b      	lsrs	r3, r3, #1
 800293a:	005b      	lsls	r3, r3, #1
 800293c:	613b      	str	r3, [r7, #16]

  // Clipping
  if ((x >= _width) || (y >= _height)) return;
 800293e:	22a0      	movs	r2, #160	; 0xa0
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	4293      	cmp	r3, r2
 8002944:	da79      	bge.n	8002a3a <st7735FillRect+0x162>
 8002946:	2250      	movs	r2, #80	; 0x50
 8002948:	68bb      	ldr	r3, [r7, #8]
 800294a:	4293      	cmp	r3, r2
 800294c:	da75      	bge.n	8002a3a <st7735FillRect+0x162>

  if (x < 0) { w += x; x = 0; }
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	2b00      	cmp	r3, #0
 8002952:	da05      	bge.n	8002960 <st7735FillRect+0x88>
 8002954:	687a      	ldr	r2, [r7, #4]
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	4413      	add	r3, r2
 800295a:	607b      	str	r3, [r7, #4]
 800295c:	2300      	movs	r3, #0
 800295e:	60fb      	str	r3, [r7, #12]
  if (y < 0) { h += y; y = 0; }
 8002960:	68bb      	ldr	r3, [r7, #8]
 8002962:	2b00      	cmp	r3, #0
 8002964:	da05      	bge.n	8002972 <st7735FillRect+0x9a>
 8002966:	683a      	ldr	r2, [r7, #0]
 8002968:	68bb      	ldr	r3, [r7, #8]
 800296a:	4413      	add	r3, r2
 800296c:	603b      	str	r3, [r7, #0]
 800296e:	2300      	movs	r3, #0
 8002970:	60bb      	str	r3, [r7, #8]

  if ((x + w) > _width)  w = _width  - x;
 8002972:	68fa      	ldr	r2, [r7, #12]
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	4413      	add	r3, r2
 8002978:	22a0      	movs	r2, #160	; 0xa0
 800297a:	4293      	cmp	r3, r2
 800297c:	dd03      	ble.n	8002986 <st7735FillRect+0xae>
 800297e:	22a0      	movs	r2, #160	; 0xa0
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	1ad3      	subs	r3, r2, r3
 8002984:	607b      	str	r3, [r7, #4]
  if ((y + h) > _height) h = _height - y;
 8002986:	68ba      	ldr	r2, [r7, #8]
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	4413      	add	r3, r2
 800298c:	2250      	movs	r2, #80	; 0x50
 800298e:	4293      	cmp	r3, r2
 8002990:	dd03      	ble.n	800299a <st7735FillRect+0xc2>
 8002992:	2250      	movs	r2, #80	; 0x50
 8002994:	68bb      	ldr	r3, [r7, #8]
 8002996:	1ad3      	subs	r3, r2, r3
 8002998:	603b      	str	r3, [r7, #0]

  if ((w < 1) || (h < 1)) return;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2b00      	cmp	r3, #0
 800299e:	dd4b      	ble.n	8002a38 <st7735FillRect+0x160>
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	dd48      	ble.n	8002a38 <st7735FillRect+0x160>


  st7735SetWindow(x, y, x + w - 1, y + h - 1);
 80029a6:	68fa      	ldr	r2, [r7, #12]
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	4413      	add	r3, r2
 80029ac:	1e59      	subs	r1, r3, #1
 80029ae:	68ba      	ldr	r2, [r7, #8]
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	4413      	add	r3, r2
 80029b4:	3b01      	subs	r3, #1
 80029b6:	460a      	mov	r2, r1
 80029b8:	68b9      	ldr	r1, [r7, #8]
 80029ba:	68f8      	ldr	r0, [r7, #12]
 80029bc:	f7ff ff40 	bl	8002840 <st7735SetWindow>
  spiSetBitWidth(spi_ch, 16);
 80029c0:	4b20      	ldr	r3, [pc, #128]	; (8002a44 <st7735FillRect+0x16c>)
 80029c2:	781b      	ldrb	r3, [r3, #0]
 80029c4:	2110      	movs	r1, #16
 80029c6:	4618      	mov	r0, r3
 80029c8:	f002 fd16 	bl	80053f8 <spiSetBitWidth>

  gpioPinWrite(_PIN_DEF_DC, _DEF_HIGH);
 80029cc:	2101      	movs	r1, #1
 80029ce:	2003      	movs	r0, #3
 80029d0:	f001 fa56 	bl	8003e80 <gpioPinWrite>
  gpioPinWrite(_PIN_DEF_CS, _DEF_LOW);
 80029d4:	2100      	movs	r1, #0
 80029d6:	2002      	movs	r0, #2
 80029d8:	f001 fa52 	bl	8003e80 <gpioPinWrite>

  for (int i=0; i<w; i++)
 80029dc:	2300      	movs	r3, #0
 80029de:	61fb      	str	r3, [r7, #28]
 80029e0:	e008      	b.n	80029f4 <st7735FillRect+0x11c>
  {
    line_buf[i] = color;
 80029e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80029e4:	b299      	uxth	r1, r3
 80029e6:	693b      	ldr	r3, [r7, #16]
 80029e8:	69fa      	ldr	r2, [r7, #28]
 80029ea:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
  for (int i=0; i<w; i++)
 80029ee:	69fb      	ldr	r3, [r7, #28]
 80029f0:	3301      	adds	r3, #1
 80029f2:	61fb      	str	r3, [r7, #28]
 80029f4:	69fa      	ldr	r2, [r7, #28]
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	429a      	cmp	r2, r3
 80029fa:	dbf2      	blt.n	80029e2 <st7735FillRect+0x10a>
  }
  for (int i=0; i<h; i++)
 80029fc:	2300      	movs	r3, #0
 80029fe:	61bb      	str	r3, [r7, #24]
 8002a00:	e00e      	b.n	8002a20 <st7735FillRect+0x148>
  {
    if (spiDmaTxTransfer(_DEF_SPI1, (void *)line_buf, w, 10) != true)
 8002a02:	687a      	ldr	r2, [r7, #4]
 8002a04:	230a      	movs	r3, #10
 8002a06:	6939      	ldr	r1, [r7, #16]
 8002a08:	2000      	movs	r0, #0
 8002a0a:	f002 fd77 	bl	80054fc <spiDmaTxTransfer>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	f083 0301 	eor.w	r3, r3, #1
 8002a14:	b2db      	uxtb	r3, r3
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d107      	bne.n	8002a2a <st7735FillRect+0x152>
  for (int i=0; i<h; i++)
 8002a1a:	69bb      	ldr	r3, [r7, #24]
 8002a1c:	3301      	adds	r3, #1
 8002a1e:	61bb      	str	r3, [r7, #24]
 8002a20:	69ba      	ldr	r2, [r7, #24]
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	429a      	cmp	r2, r3
 8002a26:	dbec      	blt.n	8002a02 <st7735FillRect+0x12a>
 8002a28:	e000      	b.n	8002a2c <st7735FillRect+0x154>
    {
      break;
 8002a2a:	bf00      	nop
    }
  }
  gpioPinWrite(_PIN_DEF_CS, _DEF_HIGH);
 8002a2c:	2101      	movs	r1, #1
 8002a2e:	2002      	movs	r0, #2
 8002a30:	f001 fa26 	bl	8003e80 <gpioPinWrite>
 8002a34:	46b5      	mov	sp, r6
 8002a36:	e001      	b.n	8002a3c <st7735FillRect+0x164>
  if ((w < 1) || (h < 1)) return;
 8002a38:	bf00      	nop
  if ((x >= _width) || (y >= _height)) return;
 8002a3a:	46b5      	mov	sp, r6
}
 8002a3c:	3724      	adds	r7, #36	; 0x24
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002a44:	200005b4 	.word	0x200005b4

08002a48 <st7735SendBuffer>:

bool st7735SendBuffer(uint8_t *p_data, uint32_t length, uint32_t timeout_ms)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b084      	sub	sp, #16
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	60f8      	str	r0, [r7, #12]
 8002a50:	60b9      	str	r1, [r7, #8]
 8002a52:	607a      	str	r2, [r7, #4]
	is_write_frame = true;
 8002a54:	4b0d      	ldr	r3, [pc, #52]	; (8002a8c <st7735SendBuffer+0x44>)
 8002a56:	2201      	movs	r2, #1
 8002a58:	701a      	strb	r2, [r3, #0]

	spiSetBitWidth(spi_ch, 16);
 8002a5a:	4b0d      	ldr	r3, [pc, #52]	; (8002a90 <st7735SendBuffer+0x48>)
 8002a5c:	781b      	ldrb	r3, [r3, #0]
 8002a5e:	2110      	movs	r1, #16
 8002a60:	4618      	mov	r0, r3
 8002a62:	f002 fcc9 	bl	80053f8 <spiSetBitWidth>

	gpioPinWrite(_PIN_DEF_DC, _DEF_HIGH);
 8002a66:	2101      	movs	r1, #1
 8002a68:	2003      	movs	r0, #3
 8002a6a:	f001 fa09 	bl	8003e80 <gpioPinWrite>
	gpioPinWrite(_PIN_DEF_CS, _DEF_LOW);
 8002a6e:	2100      	movs	r1, #0
 8002a70:	2002      	movs	r0, #2
 8002a72:	f001 fa05 	bl	8003e80 <gpioPinWrite>

	spiDmaTxTransfer(_DEF_SPI1, (void *)p_data, length, 0);
 8002a76:	2300      	movs	r3, #0
 8002a78:	68ba      	ldr	r2, [r7, #8]
 8002a7a:	68f9      	ldr	r1, [r7, #12]
 8002a7c:	2000      	movs	r0, #0
 8002a7e:	f002 fd3d 	bl	80054fc <spiDmaTxTransfer>

	return true;
 8002a82:	2301      	movs	r3, #1
}
 8002a84:	4618      	mov	r0, r3
 8002a86:	3710      	adds	r7, #16
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	bd80      	pop	{r7, pc}
 8002a8c:	200005bc 	.word	0x200005bc
 8002a90:	200005b4 	.word	0x200005b4

08002a94 <st7735SetCallBack>:

bool st7735SetCallBack(void (*p_func)(void))
{
 8002a94:	b480      	push	{r7}
 8002a96:	b083      	sub	sp, #12
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
	frameCallBack = p_func;
 8002a9c:	4a04      	ldr	r2, [pc, #16]	; (8002ab0 <st7735SetCallBack+0x1c>)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6013      	str	r3, [r2, #0]

	return true;
 8002aa2:	2301      	movs	r3, #1
}
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	370c      	adds	r7, #12
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aae:	4770      	bx	lr
 8002ab0:	200005b8 	.word	0x200005b8

08002ab4 <cdcAvailable>:
bool rx_full=false;



uint32_t cdcAvailable(void)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	b083      	sub	sp, #12
 8002ab8:	af00      	add	r7, sp, #0
	uint32_t ret;

	ret = (rx_in - rx_out) % BUF_SIZE;
 8002aba:	4b07      	ldr	r3, [pc, #28]	; (8002ad8 <cdcAvailable+0x24>)
 8002abc:	681a      	ldr	r2, [r3, #0]
 8002abe:	4b07      	ldr	r3, [pc, #28]	; (8002adc <cdcAvailable+0x28>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	1ad3      	subs	r3, r2, r3
 8002ac4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ac8:	607b      	str	r3, [r7, #4]

	return ret;
 8002aca:	687b      	ldr	r3, [r7, #4]
}
 8002acc:	4618      	mov	r0, r3
 8002ace:	370c      	adds	r7, #12
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad6:	4770      	bx	lr
 8002ad8:	200007c0 	.word	0x200007c0
 8002adc:	200007c4 	.word	0x200007c4

08002ae0 <cdcRead>:

uint8_t cdcRead(void)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	b083      	sub	sp, #12
 8002ae4:	af00      	add	r7, sp, #0
	uint8_t ret = 0;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	71fb      	strb	r3, [r7, #7]

	ret = rx_buf[rx_out];
 8002aea:	4b0c      	ldr	r3, [pc, #48]	; (8002b1c <cdcRead+0x3c>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4a0c      	ldr	r2, [pc, #48]	; (8002b20 <cdcRead+0x40>)
 8002af0:	5cd3      	ldrb	r3, [r2, r3]
 8002af2:	71fb      	strb	r3, [r7, #7]

	if(rx_out != rx_in)
 8002af4:	4b09      	ldr	r3, [pc, #36]	; (8002b1c <cdcRead+0x3c>)
 8002af6:	681a      	ldr	r2, [r3, #0]
 8002af8:	4b0a      	ldr	r3, [pc, #40]	; (8002b24 <cdcRead+0x44>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	429a      	cmp	r2, r3
 8002afe:	d006      	beq.n	8002b0e <cdcRead+0x2e>
	{
		rx_out = (rx_out + 1) % BUF_SIZE;
 8002b00:	4b06      	ldr	r3, [pc, #24]	; (8002b1c <cdcRead+0x3c>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	3301      	adds	r3, #1
 8002b06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b0a:	4a04      	ldr	r2, [pc, #16]	; (8002b1c <cdcRead+0x3c>)
 8002b0c:	6013      	str	r3, [r2, #0]
	}

	return ret;
 8002b0e:	79fb      	ldrb	r3, [r7, #7]
}
 8002b10:	4618      	mov	r0, r3
 8002b12:	370c      	adds	r7, #12
 8002b14:	46bd      	mov	sp, r7
 8002b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1a:	4770      	bx	lr
 8002b1c:	200007c4 	.word	0x200007c4
 8002b20:	200005c0 	.word	0x200005c0
 8002b24:	200007c0 	.word	0x200007c0

08002b28 <cdcDataIn>:

void cdcDataIn(uint8_t rx_data)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	b085      	sub	sp, #20
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	4603      	mov	r3, r0
 8002b30:	71fb      	strb	r3, [r7, #7]
	rx_buf[rx_in] = rx_data;
 8002b32:	4b0c      	ldr	r3, [pc, #48]	; (8002b64 <cdcDataIn+0x3c>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	490c      	ldr	r1, [pc, #48]	; (8002b68 <cdcDataIn+0x40>)
 8002b38:	79fa      	ldrb	r2, [r7, #7]
 8002b3a:	54ca      	strb	r2, [r1, r3]

	uint8_t next_rx_in = (rx_in + 1) % BUF_SIZE;
 8002b3c:	4b09      	ldr	r3, [pc, #36]	; (8002b64 <cdcDataIn+0x3c>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	b2db      	uxtb	r3, r3
 8002b42:	3301      	adds	r3, #1
 8002b44:	73fb      	strb	r3, [r7, #15]

	if(next_rx_in != rx_out)
 8002b46:	7bfa      	ldrb	r2, [r7, #15]
 8002b48:	4b08      	ldr	r3, [pc, #32]	; (8002b6c <cdcDataIn+0x44>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	429a      	cmp	r2, r3
 8002b4e:	d002      	beq.n	8002b56 <cdcDataIn+0x2e>
	{
		rx_in = next_rx_in;
 8002b50:	7bfb      	ldrb	r3, [r7, #15]
 8002b52:	4a04      	ldr	r2, [pc, #16]	; (8002b64 <cdcDataIn+0x3c>)
 8002b54:	6013      	str	r3, [r2, #0]
	}
}
 8002b56:	bf00      	nop
 8002b58:	3714      	adds	r7, #20
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b60:	4770      	bx	lr
 8002b62:	bf00      	nop
 8002b64:	200007c0 	.word	0x200007c0
 8002b68:	200005c0 	.word	0x200005c0
 8002b6c:	200007c4 	.word	0x200007c4

08002b70 <cdcWrite>:

uint32_t cdcWrite(uint8_t *p_data, uint32_t len)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b084      	sub	sp, #16
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
 8002b78:	6039      	str	r1, [r7, #0]
	uint32_t pre_time = 0;
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	60fb      	str	r3, [r7, #12]
	uint8_t ret;

	pre_time = millis();
 8002b7e:	f7ff f8c9 	bl	8001d14 <millis>
 8002b82:	60f8      	str	r0, [r7, #12]
	while(1)
	{
		ret = CDC_Transmit_FS(p_data, len);
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	b29b      	uxth	r3, r3
 8002b88:	4619      	mov	r1, r3
 8002b8a:	6878      	ldr	r0, [r7, #4]
 8002b8c:	f010 f8ee 	bl	8012d6c <CDC_Transmit_FS>
 8002b90:	4603      	mov	r3, r0
 8002b92:	72fb      	strb	r3, [r7, #11]

		if(ret == USBD_OK)
 8002b94:	7afb      	ldrb	r3, [r7, #11]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d101      	bne.n	8002b9e <cdcWrite+0x2e>
			{
				return len;
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	e00e      	b.n	8002bbc <cdcWrite+0x4c>
			}
			else if(ret == USBD_FAIL)
 8002b9e:	7afb      	ldrb	r3, [r7, #11]
 8002ba0:	2b03      	cmp	r3, #3
 8002ba2:	d101      	bne.n	8002ba8 <cdcWrite+0x38>
			{
				return 0;
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	e009      	b.n	8002bbc <cdcWrite+0x4c>
			}

			if(millis() - pre_time >= 100)
 8002ba8:	f7ff f8b4 	bl	8001d14 <millis>
 8002bac:	4602      	mov	r2, r0
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	1ad3      	subs	r3, r2, r3
 8002bb2:	2b63      	cmp	r3, #99	; 0x63
 8002bb4:	d800      	bhi.n	8002bb8 <cdcWrite+0x48>
		ret = CDC_Transmit_FS(p_data, len);
 8002bb6:	e7e5      	b.n	8002b84 <cdcWrite+0x14>
			{
				break;
 8002bb8:	bf00      	nop
			}
	}

	return 0;
 8002bba:	2300      	movs	r3, #0
}
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	3710      	adds	r7, #16
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bd80      	pop	{r7, pc}

08002bc4 <cliInit>:
void cliShowList(cli_args_t *args);
void cliMemoryDump(cli_args_t *args);


bool cliInit(void)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	af00      	add	r7, sp, #0
  cli_node.is_open = false;
 8002bc8:	4b1b      	ldr	r3, [pc, #108]	; (8002c38 <cliInit+0x74>)
 8002bca:	2200      	movs	r2, #0
 8002bcc:	721a      	strb	r2, [r3, #8]
  cli_node.is_log  = false;
 8002bce:	4b1a      	ldr	r3, [pc, #104]	; (8002c38 <cliInit+0x74>)
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	725a      	strb	r2, [r3, #9]
  cli_node.state   = CLI_RX_IDLE;
 8002bd4:	4b18      	ldr	r3, [pc, #96]	; (8002c38 <cliInit+0x74>)
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	741a      	strb	r2, [r3, #16]

  cli_node.hist_line_i     = 0;
 8002bda:	4b17      	ldr	r3, [pc, #92]	; (8002c38 <cliInit+0x74>)
 8002bdc:	2200      	movs	r2, #0
 8002bde:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
  cli_node.hist_line_last  = 0;
 8002be2:	4b15      	ldr	r3, [pc, #84]	; (8002c38 <cliInit+0x74>)
 8002be4:	2200      	movs	r2, #0
 8002be6:	f883 2196 	strb.w	r2, [r3, #406]	; 0x196
  cli_node.hist_line_count = 0;
 8002bea:	4b13      	ldr	r3, [pc, #76]	; (8002c38 <cliInit+0x74>)
 8002bec:	2200      	movs	r2, #0
 8002bee:	f883 2197 	strb.w	r2, [r3, #407]	; 0x197
  cli_node.hist_line_new   = false;
 8002bf2:	4b11      	ldr	r3, [pc, #68]	; (8002c38 <cliInit+0x74>)
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194

  cli_node.cmd_args.getData  = cliArgsGetData;
 8002bfa:	4b0f      	ldr	r3, [pc, #60]	; (8002c38 <cliInit+0x74>)
 8002bfc:	4a0f      	ldr	r2, [pc, #60]	; (8002c3c <cliInit+0x78>)
 8002bfe:	f8c3 2474 	str.w	r2, [r3, #1140]	; 0x474
  cli_node.cmd_args.getFloat = cliArgsGetFloat;
 8002c02:	4b0d      	ldr	r3, [pc, #52]	; (8002c38 <cliInit+0x74>)
 8002c04:	4a0e      	ldr	r2, [pc, #56]	; (8002c40 <cliInit+0x7c>)
 8002c06:	f8c3 2478 	str.w	r2, [r3, #1144]	; 0x478
  cli_node.cmd_args.getStr   = cliArgsGetStr;
 8002c0a:	4b0b      	ldr	r3, [pc, #44]	; (8002c38 <cliInit+0x74>)
 8002c0c:	4a0d      	ldr	r2, [pc, #52]	; (8002c44 <cliInit+0x80>)
 8002c0e:	f8c3 247c 	str.w	r2, [r3, #1148]	; 0x47c
  cli_node.cmd_args.isStr    = cliArgsIsStr;
 8002c12:	4b09      	ldr	r3, [pc, #36]	; (8002c38 <cliInit+0x74>)
 8002c14:	4a0c      	ldr	r2, [pc, #48]	; (8002c48 <cliInit+0x84>)
 8002c16:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480

  cliLineClean(&cli_node);
 8002c1a:	4807      	ldr	r0, [pc, #28]	; (8002c38 <cliInit+0x74>)
 8002c1c:	f000 fb5c 	bl	80032d8 <cliLineClean>


  cliAdd("help", cliShowList);
 8002c20:	490a      	ldr	r1, [pc, #40]	; (8002c4c <cliInit+0x88>)
 8002c22:	480b      	ldr	r0, [pc, #44]	; (8002c50 <cliInit+0x8c>)
 8002c24:	f000 fdf8 	bl	8003818 <cliAdd>
  cliAdd("md"  , cliMemoryDump);
 8002c28:	490a      	ldr	r1, [pc, #40]	; (8002c54 <cliInit+0x90>)
 8002c2a:	480b      	ldr	r0, [pc, #44]	; (8002c58 <cliInit+0x94>)
 8002c2c:	f000 fdf4 	bl	8003818 <cliAdd>

  return true;
 8002c30:	2301      	movs	r3, #1
}
 8002c32:	4618      	mov	r0, r3
 8002c34:	bd80      	pop	{r7, pc}
 8002c36:	bf00      	nop
 8002c38:	200007c8 	.word	0x200007c8
 8002c3c:	080036a9 	.word	0x080036a9
 8002c40:	080036f9 	.word	0x080036f9
 8002c44:	08003751 	.word	0x08003751
 8002c48:	08003799 	.word	0x08003799
 8002c4c:	080038ad 	.word	0x080038ad
 8002c50:	08016954 	.word	0x08016954
 8002c54:	0800391d 	.word	0x0800391d
 8002c58:	0801695c 	.word	0x0801695c

08002c5c <cliOpen>:

bool cliOpen(uint8_t ch, uint32_t baud)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b082      	sub	sp, #8
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	4603      	mov	r3, r0
 8002c64:	6039      	str	r1, [r7, #0]
 8002c66:	71fb      	strb	r3, [r7, #7]
  cli_node.ch = ch;
 8002c68:	4a0a      	ldr	r2, [pc, #40]	; (8002c94 <cliOpen+0x38>)
 8002c6a:	79fb      	ldrb	r3, [r7, #7]
 8002c6c:	7013      	strb	r3, [r2, #0]
  cli_node.baud = baud;
 8002c6e:	4a09      	ldr	r2, [pc, #36]	; (8002c94 <cliOpen+0x38>)
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	6053      	str	r3, [r2, #4]

  cli_node.is_open = uartOpen(ch, baud);
 8002c74:	79fb      	ldrb	r3, [r7, #7]
 8002c76:	6839      	ldr	r1, [r7, #0]
 8002c78:	4618      	mov	r0, r3
 8002c7a:	f002 fd23 	bl	80056c4 <uartOpen>
 8002c7e:	4603      	mov	r3, r0
 8002c80:	461a      	mov	r2, r3
 8002c82:	4b04      	ldr	r3, [pc, #16]	; (8002c94 <cliOpen+0x38>)
 8002c84:	721a      	strb	r2, [r3, #8]

  return cli_node.is_open;
 8002c86:	4b03      	ldr	r3, [pc, #12]	; (8002c94 <cliOpen+0x38>)
 8002c88:	7a1b      	ldrb	r3, [r3, #8]
}
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	3708      	adds	r7, #8
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bd80      	pop	{r7, pc}
 8002c92:	bf00      	nop
 8002c94:	200007c8 	.word	0x200007c8

08002c98 <cliShowLog>:
  cli_node.is_log = false;
  return true;
}

void cliShowLog(cli_t *p_cli)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b084      	sub	sp, #16
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
  if (cli_node.is_log == true)
 8002ca0:	4b34      	ldr	r3, [pc, #208]	; (8002d74 <cliShowLog+0xdc>)
 8002ca2:	7a5b      	ldrb	r3, [r3, #9]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d061      	beq.n	8002d6c <cliShowLog+0xd4>
  {
    uartPrintf(p_cli->log_ch, "Cursor  : %d\n", p_cli->line.cursor);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	7a98      	ldrb	r0, [r3, #10]
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	f893 3328 	ldrb.w	r3, [r3, #808]	; 0x328
 8002cb2:	461a      	mov	r2, r3
 8002cb4:	4930      	ldr	r1, [pc, #192]	; (8002d78 <cliShowLog+0xe0>)
 8002cb6:	f002 fd5f 	bl	8005778 <uartPrintf>
    uartPrintf(p_cli->log_ch, "Count   : %d\n", p_cli->line.count);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	7a98      	ldrb	r0, [r3, #10]
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	f893 3329 	ldrb.w	r3, [r3, #809]	; 0x329
 8002cc4:	461a      	mov	r2, r3
 8002cc6:	492d      	ldr	r1, [pc, #180]	; (8002d7c <cliShowLog+0xe4>)
 8002cc8:	f002 fd56 	bl	8005778 <uartPrintf>
    uartPrintf(p_cli->log_ch, "buf_len : %d\n", p_cli->line.buf_len);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	7a98      	ldrb	r0, [r3, #10]
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	f893 3327 	ldrb.w	r3, [r3, #807]	; 0x327
 8002cd6:	461a      	mov	r2, r3
 8002cd8:	4929      	ldr	r1, [pc, #164]	; (8002d80 <cliShowLog+0xe8>)
 8002cda:	f002 fd4d 	bl	8005778 <uartPrintf>
    uartPrintf(p_cli->log_ch, "buf     : %s\n", p_cli->line.buf);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	7a98      	ldrb	r0, [r3, #10]
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	f203 23e7 	addw	r3, r3, #743	; 0x2e7
 8002ce8:	461a      	mov	r2, r3
 8002cea:	4926      	ldr	r1, [pc, #152]	; (8002d84 <cliShowLog+0xec>)
 8002cec:	f002 fd44 	bl	8005778 <uartPrintf>
    uartPrintf(p_cli->log_ch, "line_i  : %d\n", p_cli->hist_line_i);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	7a98      	ldrb	r0, [r3, #10]
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	f993 3195 	ldrsb.w	r3, [r3, #405]	; 0x195
 8002cfa:	461a      	mov	r2, r3
 8002cfc:	4922      	ldr	r1, [pc, #136]	; (8002d88 <cliShowLog+0xf0>)
 8002cfe:	f002 fd3b 	bl	8005778 <uartPrintf>
    uartPrintf(p_cli->log_ch, "line_lt : %d\n", p_cli->hist_line_last);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	7a98      	ldrb	r0, [r3, #10]
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	f893 3196 	ldrb.w	r3, [r3, #406]	; 0x196
 8002d0c:	461a      	mov	r2, r3
 8002d0e:	491f      	ldr	r1, [pc, #124]	; (8002d8c <cliShowLog+0xf4>)
 8002d10:	f002 fd32 	bl	8005778 <uartPrintf>
    uartPrintf(p_cli->log_ch, "line_c  : %d\n", p_cli->hist_line_count);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	7a98      	ldrb	r0, [r3, #10]
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	f893 3197 	ldrb.w	r3, [r3, #407]	; 0x197
 8002d1e:	461a      	mov	r2, r3
 8002d20:	491b      	ldr	r1, [pc, #108]	; (8002d90 <cliShowLog+0xf8>)
 8002d22:	f002 fd29 	bl	8005778 <uartPrintf>

    for (int i=0; i<p_cli->hist_line_count; i++)
 8002d26:	2300      	movs	r3, #0
 8002d28:	60fb      	str	r3, [r7, #12]
 8002d2a:	e012      	b.n	8002d52 <cliShowLog+0xba>
    {
      uartPrintf(p_cli->log_ch, "buf %d   : %s\n", i, p_cli->line_buf[i].buf);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	7a98      	ldrb	r0, [r3, #10]
 8002d30:	68fa      	ldr	r2, [r7, #12]
 8002d32:	4613      	mov	r3, r2
 8002d34:	015b      	lsls	r3, r3, #5
 8002d36:	4413      	add	r3, r2
 8002d38:	005b      	lsls	r3, r3, #1
 8002d3a:	4413      	add	r3, r2
 8002d3c:	f503 73cc 	add.w	r3, r3, #408	; 0x198
 8002d40:	687a      	ldr	r2, [r7, #4]
 8002d42:	4413      	add	r3, r2
 8002d44:	68fa      	ldr	r2, [r7, #12]
 8002d46:	4913      	ldr	r1, [pc, #76]	; (8002d94 <cliShowLog+0xfc>)
 8002d48:	f002 fd16 	bl	8005778 <uartPrintf>
    for (int i=0; i<p_cli->hist_line_count; i++)
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	3301      	adds	r3, #1
 8002d50:	60fb      	str	r3, [r7, #12]
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	f893 3197 	ldrb.w	r3, [r3, #407]	; 0x197
 8002d58:	461a      	mov	r2, r3
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	dbe5      	blt.n	8002d2c <cliShowLog+0x94>
    }
    uartPrintf(p_cli->log_ch, "\n");
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	7a9b      	ldrb	r3, [r3, #10]
 8002d64:	490c      	ldr	r1, [pc, #48]	; (8002d98 <cliShowLog+0x100>)
 8002d66:	4618      	mov	r0, r3
 8002d68:	f002 fd06 	bl	8005778 <uartPrintf>
  }
}
 8002d6c:	bf00      	nop
 8002d6e:	3710      	adds	r7, #16
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bd80      	pop	{r7, pc}
 8002d74:	200007c8 	.word	0x200007c8
 8002d78:	08016960 	.word	0x08016960
 8002d7c:	08016970 	.word	0x08016970
 8002d80:	08016980 	.word	0x08016980
 8002d84:	08016990 	.word	0x08016990
 8002d88:	080169a0 	.word	0x080169a0
 8002d8c:	080169b0 	.word	0x080169b0
 8002d90:	080169c0 	.word	0x080169c0
 8002d94:	080169d0 	.word	0x080169d0
 8002d98:	080169e0 	.word	0x080169e0

08002d9c <cliShowPrompt>:

void cliShowPrompt(cli_t *p_cli)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b082      	sub	sp, #8
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
  uartPrintf(p_cli->ch, "\n\r");
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	781b      	ldrb	r3, [r3, #0]
 8002da8:	4906      	ldr	r1, [pc, #24]	; (8002dc4 <cliShowPrompt+0x28>)
 8002daa:	4618      	mov	r0, r3
 8002dac:	f002 fce4 	bl	8005778 <uartPrintf>
  uartPrintf(p_cli->ch, CLI_PROMPT_STR);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	781b      	ldrb	r3, [r3, #0]
 8002db4:	4904      	ldr	r1, [pc, #16]	; (8002dc8 <cliShowPrompt+0x2c>)
 8002db6:	4618      	mov	r0, r3
 8002db8:	f002 fcde 	bl	8005778 <uartPrintf>
}
 8002dbc:	bf00      	nop
 8002dbe:	3708      	adds	r7, #8
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bd80      	pop	{r7, pc}
 8002dc4:	080169e4 	.word	0x080169e4
 8002dc8:	080169e8 	.word	0x080169e8

08002dcc <cliMain>:

bool cliMain(void)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	af00      	add	r7, sp, #0
  if (cli_node.is_open != true)
 8002dd0:	4b0e      	ldr	r3, [pc, #56]	; (8002e0c <cliMain+0x40>)
 8002dd2:	7a1b      	ldrb	r3, [r3, #8]
 8002dd4:	f083 0301 	eor.w	r3, r3, #1
 8002dd8:	b2db      	uxtb	r3, r3
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d001      	beq.n	8002de2 <cliMain+0x16>
  {
    return false;
 8002dde:	2300      	movs	r3, #0
 8002de0:	e012      	b.n	8002e08 <cliMain+0x3c>
  }

  if (uartAvailable(cli_node.ch) > 0)
 8002de2:	4b0a      	ldr	r3, [pc, #40]	; (8002e0c <cliMain+0x40>)
 8002de4:	781b      	ldrb	r3, [r3, #0]
 8002de6:	4618      	mov	r0, r3
 8002de8:	f002 fc88 	bl	80056fc <uartAvailable>
 8002dec:	4603      	mov	r3, r0
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d009      	beq.n	8002e06 <cliMain+0x3a>
  {
    cliUpdate(&cli_node, uartRead(cli_node.ch));
 8002df2:	4b06      	ldr	r3, [pc, #24]	; (8002e0c <cliMain+0x40>)
 8002df4:	781b      	ldrb	r3, [r3, #0]
 8002df6:	4618      	mov	r0, r3
 8002df8:	f002 fc93 	bl	8005722 <uartRead>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	4619      	mov	r1, r3
 8002e00:	4802      	ldr	r0, [pc, #8]	; (8002e0c <cliMain+0x40>)
 8002e02:	f000 f805 	bl	8002e10 <cliUpdate>
  }

  return true;
 8002e06:	2301      	movs	r3, #1
}
 8002e08:	4618      	mov	r0, r3
 8002e0a:	bd80      	pop	{r7, pc}
 8002e0c:	200007c8 	.word	0x200007c8

08002e10 <cliUpdate>:
{
  return uartWrite(cli_node.ch, p_data, length);
}

bool cliUpdate(cli_t *p_cli, uint8_t rx_data)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b08c      	sub	sp, #48	; 0x30
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
 8002e18:	460b      	mov	r3, r1
 8002e1a:	70fb      	strb	r3, [r7, #3]
  bool ret = false;
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t tx_buf[8];
  cli_line_t *line;

  line = &p_cli->line;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	f203 23e7 	addw	r3, r3, #743	; 0x2e7
 8002e28:	61fb      	str	r3, [r7, #28]

  if (p_cli->state == CLI_RX_IDLE)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	7c1b      	ldrb	r3, [r3, #16]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	f040 816d 	bne.w	800310e <cliUpdate+0x2fe>
  {
    switch(rx_data)
 8002e34:	78fb      	ldrb	r3, [r7, #3]
 8002e36:	2b7f      	cmp	r3, #127	; 0x7f
 8002e38:	d02a      	beq.n	8002e90 <cliUpdate+0x80>
 8002e3a:	2b7f      	cmp	r3, #127	; 0x7f
 8002e3c:	f300 80da 	bgt.w	8002ff4 <cliUpdate+0x1e4>
 8002e40:	2b1b      	cmp	r3, #27
 8002e42:	d021      	beq.n	8002e88 <cliUpdate+0x78>
 8002e44:	2b1b      	cmp	r3, #27
 8002e46:	f300 80d5 	bgt.w	8002ff4 <cliUpdate+0x1e4>
 8002e4a:	2b08      	cmp	r3, #8
 8002e4c:	d062      	beq.n	8002f14 <cliUpdate+0x104>
 8002e4e:	2b0d      	cmp	r3, #13
 8002e50:	f040 80d0 	bne.w	8002ff4 <cliUpdate+0x1e4>
    {
      // 엔터
      case CLI_KEY_ENTER:
        if (line->count > 0)
 8002e54:	69fb      	ldr	r3, [r7, #28]
 8002e56:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d005      	beq.n	8002e6a <cliUpdate+0x5a>
        {
          cliLineAdd(p_cli);
 8002e5e:	6878      	ldr	r0, [r7, #4]
 8002e60:	f000 fa54 	bl	800330c <cliLineAdd>
          cliRunCmd(p_cli);
 8002e64:	6878      	ldr	r0, [r7, #4]
 8002e66:	f000 fb25 	bl	80034b4 <cliRunCmd>
        }

        line->count = 0;
 8002e6a:	69fb      	ldr	r3, [r7, #28]
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        line->cursor = 0;
 8002e72:	69fb      	ldr	r3, [r7, #28]
 8002e74:	2200      	movs	r2, #0
 8002e76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        line->buf[0] = 0;
 8002e7a:	69fb      	ldr	r3, [r7, #28]
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	701a      	strb	r2, [r3, #0]
        cliShowPrompt(p_cli);
 8002e80:	6878      	ldr	r0, [r7, #4]
 8002e82:	f7ff ff8b 	bl	8002d9c <cliShowPrompt>
        break;
 8002e86:	e142      	b.n	800310e <cliUpdate+0x2fe>


      case CLI_KEY_ESC:
        p_cli->state = CLI_RX_SP1;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2201      	movs	r2, #1
 8002e8c:	741a      	strb	r2, [r3, #16]
        break;
 8002e8e:	e13e      	b.n	800310e <cliUpdate+0x2fe>

      // DEL
      case CLI_KEY_DEL:
        if (line->cursor < line->count)
 8002e90:	69fb      	ldr	r3, [r7, #28]
 8002e92:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 8002e96:	69fb      	ldr	r3, [r7, #28]
 8002e98:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002e9c:	429a      	cmp	r2, r3
 8002e9e:	f080 8131 	bcs.w	8003104 <cliUpdate+0x2f4>
        {
          uint8_t mov_len;

          mov_len = line->count - line->cursor;
 8002ea2:	69fb      	ldr	r3, [r7, #28]
 8002ea4:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
 8002ea8:	69fb      	ldr	r3, [r7, #28]
 8002eaa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002eae:	1ad3      	subs	r3, r2, r3
 8002eb0:	76fb      	strb	r3, [r7, #27]
          for (int i=1; i<mov_len; i++)
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002eb6:	e013      	b.n	8002ee0 <cliUpdate+0xd0>
          {
            line->buf[line->cursor + i - 1] = line->buf[line->cursor + i];
 8002eb8:	69fb      	ldr	r3, [r7, #28]
 8002eba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ebe:	461a      	mov	r2, r3
 8002ec0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ec2:	441a      	add	r2, r3
 8002ec4:	69fb      	ldr	r3, [r7, #28]
 8002ec6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002eca:	4619      	mov	r1, r3
 8002ecc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ece:	440b      	add	r3, r1
 8002ed0:	3b01      	subs	r3, #1
 8002ed2:	69f9      	ldr	r1, [r7, #28]
 8002ed4:	5c89      	ldrb	r1, [r1, r2]
 8002ed6:	69fa      	ldr	r2, [r7, #28]
 8002ed8:	54d1      	strb	r1, [r2, r3]
          for (int i=1; i<mov_len; i++)
 8002eda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002edc:	3301      	adds	r3, #1
 8002ede:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ee0:	7efb      	ldrb	r3, [r7, #27]
 8002ee2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ee4:	429a      	cmp	r2, r3
 8002ee6:	dbe7      	blt.n	8002eb8 <cliUpdate+0xa8>
          }

          line->count--;
 8002ee8:	69fb      	ldr	r3, [r7, #28]
 8002eea:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002eee:	3b01      	subs	r3, #1
 8002ef0:	b2da      	uxtb	r2, r3
 8002ef2:	69fb      	ldr	r3, [r7, #28]
 8002ef4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          line->buf[line->count] = 0;
 8002ef8:	69fb      	ldr	r3, [r7, #28]
 8002efa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002efe:	461a      	mov	r2, r3
 8002f00:	69fb      	ldr	r3, [r7, #28]
 8002f02:	2100      	movs	r1, #0
 8002f04:	5499      	strb	r1, [r3, r2]

          uartPrintf(p_cli->ch, "\x1B[1P");
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	781b      	ldrb	r3, [r3, #0]
 8002f0a:	498d      	ldr	r1, [pc, #564]	; (8003140 <cliUpdate+0x330>)
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	f002 fc33 	bl	8005778 <uartPrintf>
        }
        break;
 8002f12:	e0f7      	b.n	8003104 <cliUpdate+0x2f4>

      // 백스페이스
      case CLI_KEY_BACK:
        if (line->count > 0 && line->cursor > 0)
 8002f14:	69fb      	ldr	r3, [r7, #28]
 8002f16:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d055      	beq.n	8002fca <cliUpdate+0x1ba>
 8002f1e:	69fb      	ldr	r3, [r7, #28]
 8002f20:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d050      	beq.n	8002fca <cliUpdate+0x1ba>
        {
          if (line->cursor == line->count)
 8002f28:	69fb      	ldr	r3, [r7, #28]
 8002f2a:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 8002f2e:	69fb      	ldr	r3, [r7, #28]
 8002f30:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002f34:	429a      	cmp	r2, r3
 8002f36:	d10e      	bne.n	8002f56 <cliUpdate+0x146>
          {
            line->count--;
 8002f38:	69fb      	ldr	r3, [r7, #28]
 8002f3a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002f3e:	3b01      	subs	r3, #1
 8002f40:	b2da      	uxtb	r2, r3
 8002f42:	69fb      	ldr	r3, [r7, #28]
 8002f44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
            line->buf[line->count] = 0;
 8002f48:	69fb      	ldr	r3, [r7, #28]
 8002f4a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002f4e:	461a      	mov	r2, r3
 8002f50:	69fb      	ldr	r3, [r7, #28]
 8002f52:	2100      	movs	r1, #0
 8002f54:	5499      	strb	r1, [r3, r2]
          }

          if (line->cursor < line->count)
 8002f56:	69fb      	ldr	r3, [r7, #28]
 8002f58:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 8002f5c:	69fb      	ldr	r3, [r7, #28]
 8002f5e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002f62:	429a      	cmp	r2, r3
 8002f64:	d231      	bcs.n	8002fca <cliUpdate+0x1ba>
          {
            uint8_t mov_len;

            mov_len = line->count - line->cursor;
 8002f66:	69fb      	ldr	r3, [r7, #28]
 8002f68:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
 8002f6c:	69fb      	ldr	r3, [r7, #28]
 8002f6e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f72:	1ad3      	subs	r3, r2, r3
 8002f74:	76bb      	strb	r3, [r7, #26]

            for (int i=0; i<mov_len; i++)
 8002f76:	2300      	movs	r3, #0
 8002f78:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f7a:	e013      	b.n	8002fa4 <cliUpdate+0x194>
            {
              line->buf[line->cursor + i - 1] = line->buf[line->cursor + i];
 8002f7c:	69fb      	ldr	r3, [r7, #28]
 8002f7e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f82:	461a      	mov	r2, r3
 8002f84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f86:	441a      	add	r2, r3
 8002f88:	69fb      	ldr	r3, [r7, #28]
 8002f8a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f8e:	4619      	mov	r1, r3
 8002f90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f92:	440b      	add	r3, r1
 8002f94:	3b01      	subs	r3, #1
 8002f96:	69f9      	ldr	r1, [r7, #28]
 8002f98:	5c89      	ldrb	r1, [r1, r2]
 8002f9a:	69fa      	ldr	r2, [r7, #28]
 8002f9c:	54d1      	strb	r1, [r2, r3]
            for (int i=0; i<mov_len; i++)
 8002f9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fa0:	3301      	adds	r3, #1
 8002fa2:	62bb      	str	r3, [r7, #40]	; 0x28
 8002fa4:	7ebb      	ldrb	r3, [r7, #26]
 8002fa6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002fa8:	429a      	cmp	r2, r3
 8002faa:	dbe7      	blt.n	8002f7c <cliUpdate+0x16c>
            }

            line->count--;
 8002fac:	69fb      	ldr	r3, [r7, #28]
 8002fae:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002fb2:	3b01      	subs	r3, #1
 8002fb4:	b2da      	uxtb	r2, r3
 8002fb6:	69fb      	ldr	r3, [r7, #28]
 8002fb8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
            line->buf[line->count] = 0;
 8002fbc:	69fb      	ldr	r3, [r7, #28]
 8002fbe:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002fc2:	461a      	mov	r2, r3
 8002fc4:	69fb      	ldr	r3, [r7, #28]
 8002fc6:	2100      	movs	r1, #0
 8002fc8:	5499      	strb	r1, [r3, r2]
          }
        }

        if (line->cursor > 0)
 8002fca:	69fb      	ldr	r3, [r7, #28]
 8002fcc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	f000 8099 	beq.w	8003108 <cliUpdate+0x2f8>
        {
          line->cursor--;
 8002fd6:	69fb      	ldr	r3, [r7, #28]
 8002fd8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002fdc:	3b01      	subs	r3, #1
 8002fde:	b2da      	uxtb	r2, r3
 8002fe0:	69fb      	ldr	r3, [r7, #28]
 8002fe2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          uartPrintf(p_cli->ch, "\b \b\x1B[1P");
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	781b      	ldrb	r3, [r3, #0]
 8002fea:	4956      	ldr	r1, [pc, #344]	; (8003144 <cliUpdate+0x334>)
 8002fec:	4618      	mov	r0, r3
 8002fee:	f002 fbc3 	bl	8005778 <uartPrintf>
        }
        break;
 8002ff2:	e089      	b.n	8003108 <cliUpdate+0x2f8>

      default:
        if ((line->count + 1) < line->buf_len)
 8002ff4:	69fb      	ldr	r3, [r7, #28]
 8002ff6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002ffa:	3301      	adds	r3, #1
 8002ffc:	69fa      	ldr	r2, [r7, #28]
 8002ffe:	f892 2040 	ldrb.w	r2, [r2, #64]	; 0x40
 8003002:	4293      	cmp	r3, r2
 8003004:	f280 8082 	bge.w	800310c <cliUpdate+0x2fc>
        {
          if (line->cursor == line->count)
 8003008:	69fb      	ldr	r3, [r7, #28]
 800300a:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 800300e:	69fb      	ldr	r3, [r7, #28]
 8003010:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003014:	429a      	cmp	r2, r3
 8003016:	d124      	bne.n	8003062 <cliUpdate+0x252>
          {
            uartWrite(p_cli->ch, &rx_data, 1);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	781b      	ldrb	r3, [r3, #0]
 800301c:	1cf9      	adds	r1, r7, #3
 800301e:	2201      	movs	r2, #1
 8003020:	4618      	mov	r0, r3
 8003022:	f002 fb92 	bl	800574a <uartWrite>

            line->buf[line->cursor] = rx_data;
 8003026:	69fb      	ldr	r3, [r7, #28]
 8003028:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800302c:	461a      	mov	r2, r3
 800302e:	78f9      	ldrb	r1, [r7, #3]
 8003030:	69fb      	ldr	r3, [r7, #28]
 8003032:	5499      	strb	r1, [r3, r2]
            line->count++;
 8003034:	69fb      	ldr	r3, [r7, #28]
 8003036:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800303a:	3301      	adds	r3, #1
 800303c:	b2da      	uxtb	r2, r3
 800303e:	69fb      	ldr	r3, [r7, #28]
 8003040:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
            line->cursor++;
 8003044:	69fb      	ldr	r3, [r7, #28]
 8003046:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800304a:	3301      	adds	r3, #1
 800304c:	b2da      	uxtb	r2, r3
 800304e:	69fb      	ldr	r3, [r7, #28]
 8003050:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
            line->buf[line->count] = 0;
 8003054:	69fb      	ldr	r3, [r7, #28]
 8003056:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800305a:	461a      	mov	r2, r3
 800305c:	69fb      	ldr	r3, [r7, #28]
 800305e:	2100      	movs	r1, #0
 8003060:	5499      	strb	r1, [r3, r2]
          }
          if (line->cursor < line->count)
 8003062:	69fb      	ldr	r3, [r7, #28]
 8003064:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 8003068:	69fb      	ldr	r3, [r7, #28]
 800306a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800306e:	429a      	cmp	r2, r3
 8003070:	d24c      	bcs.n	800310c <cliUpdate+0x2fc>
          {
            uint8_t mov_len;

            mov_len = line->count - line->cursor;
 8003072:	69fb      	ldr	r3, [r7, #28]
 8003074:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
 8003078:	69fb      	ldr	r3, [r7, #28]
 800307a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800307e:	1ad3      	subs	r3, r2, r3
 8003080:	767b      	strb	r3, [r7, #25]
            for (int i=0; i<mov_len; i++)
 8003082:	2300      	movs	r3, #0
 8003084:	627b      	str	r3, [r7, #36]	; 0x24
 8003086:	e013      	b.n	80030b0 <cliUpdate+0x2a0>
            {
              line->buf[line->count - i] = line->buf[line->count - i - 1];
 8003088:	69fb      	ldr	r3, [r7, #28]
 800308a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800308e:	461a      	mov	r2, r3
 8003090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003092:	1ad3      	subs	r3, r2, r3
 8003094:	1e5a      	subs	r2, r3, #1
 8003096:	69fb      	ldr	r3, [r7, #28]
 8003098:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800309c:	4619      	mov	r1, r3
 800309e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030a0:	1acb      	subs	r3, r1, r3
 80030a2:	69f9      	ldr	r1, [r7, #28]
 80030a4:	5c89      	ldrb	r1, [r1, r2]
 80030a6:	69fa      	ldr	r2, [r7, #28]
 80030a8:	54d1      	strb	r1, [r2, r3]
            for (int i=0; i<mov_len; i++)
 80030aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ac:	3301      	adds	r3, #1
 80030ae:	627b      	str	r3, [r7, #36]	; 0x24
 80030b0:	7e7b      	ldrb	r3, [r7, #25]
 80030b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030b4:	429a      	cmp	r2, r3
 80030b6:	dbe7      	blt.n	8003088 <cliUpdate+0x278>
            }
            line->buf[line->cursor] = rx_data;
 80030b8:	69fb      	ldr	r3, [r7, #28]
 80030ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80030be:	461a      	mov	r2, r3
 80030c0:	78f9      	ldrb	r1, [r7, #3]
 80030c2:	69fb      	ldr	r3, [r7, #28]
 80030c4:	5499      	strb	r1, [r3, r2]
            line->count++;
 80030c6:	69fb      	ldr	r3, [r7, #28]
 80030c8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80030cc:	3301      	adds	r3, #1
 80030ce:	b2da      	uxtb	r2, r3
 80030d0:	69fb      	ldr	r3, [r7, #28]
 80030d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
            line->cursor++;
 80030d6:	69fb      	ldr	r3, [r7, #28]
 80030d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80030dc:	3301      	adds	r3, #1
 80030de:	b2da      	uxtb	r2, r3
 80030e0:	69fb      	ldr	r3, [r7, #28]
 80030e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
            line->buf[line->count] = 0;
 80030e6:	69fb      	ldr	r3, [r7, #28]
 80030e8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80030ec:	461a      	mov	r2, r3
 80030ee:	69fb      	ldr	r3, [r7, #28]
 80030f0:	2100      	movs	r1, #0
 80030f2:	5499      	strb	r1, [r3, r2]

            uartPrintf(p_cli->ch, "\x1B[4h%c\x1B[4l", rx_data);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	781b      	ldrb	r3, [r3, #0]
 80030f8:	78fa      	ldrb	r2, [r7, #3]
 80030fa:	4913      	ldr	r1, [pc, #76]	; (8003148 <cliUpdate+0x338>)
 80030fc:	4618      	mov	r0, r3
 80030fe:	f002 fb3b 	bl	8005778 <uartPrintf>
          }
        }
        break;
 8003102:	e003      	b.n	800310c <cliUpdate+0x2fc>
        break;
 8003104:	bf00      	nop
 8003106:	e002      	b.n	800310e <cliUpdate+0x2fe>
        break;
 8003108:	bf00      	nop
 800310a:	e000      	b.n	800310e <cliUpdate+0x2fe>
        break;
 800310c:	bf00      	nop
    }
  }

  switch(p_cli->state)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	7c1b      	ldrb	r3, [r3, #16]
 8003112:	3b01      	subs	r3, #1
 8003114:	2b03      	cmp	r3, #3
 8003116:	f200 80d2 	bhi.w	80032be <cliUpdate+0x4ae>
 800311a:	a201      	add	r2, pc, #4	; (adr r2, 8003120 <cliUpdate+0x310>)
 800311c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003120:	08003131 	.word	0x08003131
 8003124:	08003139 	.word	0x08003139
 8003128:	0800314d 	.word	0x0800314d
 800312c:	080032b5 	.word	0x080032b5
  {
    case CLI_RX_SP1:
      p_cli->state = CLI_RX_SP2;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2202      	movs	r2, #2
 8003134:	741a      	strb	r2, [r3, #16]
      break;
 8003136:	e0c2      	b.n	80032be <cliUpdate+0x4ae>

    case CLI_RX_SP2:
      p_cli->state = CLI_RX_SP3;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2203      	movs	r2, #3
 800313c:	741a      	strb	r2, [r3, #16]
      break;
 800313e:	e0be      	b.n	80032be <cliUpdate+0x4ae>
 8003140:	080169f0 	.word	0x080169f0
 8003144:	080169f8 	.word	0x080169f8
 8003148:	08016a00 	.word	0x08016a00

    case CLI_RX_SP3:
      p_cli->state = CLI_RX_IDLE;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2200      	movs	r2, #0
 8003150:	741a      	strb	r2, [r3, #16]

      if (rx_data == CLI_KEY_LEFT)
 8003152:	78fb      	ldrb	r3, [r7, #3]
 8003154:	2b44      	cmp	r3, #68	; 0x44
 8003156:	d11a      	bne.n	800318e <cliUpdate+0x37e>
      {
        if (line->cursor > 0)
 8003158:	69fb      	ldr	r3, [r7, #28]
 800315a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800315e:	2b00      	cmp	r3, #0
 8003160:	d015      	beq.n	800318e <cliUpdate+0x37e>
        {
          line->cursor--;
 8003162:	69fb      	ldr	r3, [r7, #28]
 8003164:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003168:	3b01      	subs	r3, #1
 800316a:	b2da      	uxtb	r2, r3
 800316c:	69fb      	ldr	r3, [r7, #28]
 800316e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          tx_buf[0] = 0x1B;
 8003172:	231b      	movs	r3, #27
 8003174:	733b      	strb	r3, [r7, #12]
          tx_buf[1] = 0x5B;
 8003176:	235b      	movs	r3, #91	; 0x5b
 8003178:	737b      	strb	r3, [r7, #13]
          tx_buf[2] = rx_data;
 800317a:	78fb      	ldrb	r3, [r7, #3]
 800317c:	73bb      	strb	r3, [r7, #14]
          uartWrite(p_cli->ch, tx_buf, 3);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	781b      	ldrb	r3, [r3, #0]
 8003182:	f107 010c 	add.w	r1, r7, #12
 8003186:	2203      	movs	r2, #3
 8003188:	4618      	mov	r0, r3
 800318a:	f002 fade 	bl	800574a <uartWrite>
        }
      }

      if (rx_data == CLI_KEY_RIGHT)
 800318e:	78fb      	ldrb	r3, [r7, #3]
 8003190:	2b43      	cmp	r3, #67	; 0x43
 8003192:	d11d      	bne.n	80031d0 <cliUpdate+0x3c0>
      {
        if (line->cursor < line->count)
 8003194:	69fb      	ldr	r3, [r7, #28]
 8003196:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 800319a:	69fb      	ldr	r3, [r7, #28]
 800319c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80031a0:	429a      	cmp	r2, r3
 80031a2:	d215      	bcs.n	80031d0 <cliUpdate+0x3c0>
        {
          line->cursor++;
 80031a4:	69fb      	ldr	r3, [r7, #28]
 80031a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80031aa:	3301      	adds	r3, #1
 80031ac:	b2da      	uxtb	r2, r3
 80031ae:	69fb      	ldr	r3, [r7, #28]
 80031b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

          tx_buf[0] = 0x1B;
 80031b4:	231b      	movs	r3, #27
 80031b6:	733b      	strb	r3, [r7, #12]
          tx_buf[1] = 0x5B;
 80031b8:	235b      	movs	r3, #91	; 0x5b
 80031ba:	737b      	strb	r3, [r7, #13]
          tx_buf[2] = rx_data;
 80031bc:	78fb      	ldrb	r3, [r7, #3]
 80031be:	73bb      	strb	r3, [r7, #14]
          uartWrite(p_cli->ch, tx_buf, 3);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	781b      	ldrb	r3, [r3, #0]
 80031c4:	f107 010c 	add.w	r1, r7, #12
 80031c8:	2203      	movs	r2, #3
 80031ca:	4618      	mov	r0, r3
 80031cc:	f002 fabd 	bl	800574a <uartWrite>
        }
      }

      if (rx_data == CLI_KEY_UP)
 80031d0:	78fb      	ldrb	r3, [r7, #3]
 80031d2:	2b41      	cmp	r3, #65	; 0x41
 80031d4:	d10c      	bne.n	80031f0 <cliUpdate+0x3e0>
      {
        cliLineChange(p_cli, true);
 80031d6:	2101      	movs	r1, #1
 80031d8:	6878      	ldr	r0, [r7, #4]
 80031da:	f000 f8e1 	bl	80033a0 <cliLineChange>
        uartPrintf(p_cli->ch, (char *)p_cli->line.buf);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	781a      	ldrb	r2, [r3, #0]
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	f203 23e7 	addw	r3, r3, #743	; 0x2e7
 80031e8:	4619      	mov	r1, r3
 80031ea:	4610      	mov	r0, r2
 80031ec:	f002 fac4 	bl	8005778 <uartPrintf>
      }

      if (rx_data == CLI_KEY_DOWN)
 80031f0:	78fb      	ldrb	r3, [r7, #3]
 80031f2:	2b42      	cmp	r3, #66	; 0x42
 80031f4:	d10c      	bne.n	8003210 <cliUpdate+0x400>
      {
        cliLineChange(p_cli, false);
 80031f6:	2100      	movs	r1, #0
 80031f8:	6878      	ldr	r0, [r7, #4]
 80031fa:	f000 f8d1 	bl	80033a0 <cliLineChange>
        uartPrintf(p_cli->ch, (char *)p_cli->line.buf);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	781a      	ldrb	r2, [r3, #0]
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	f203 23e7 	addw	r3, r3, #743	; 0x2e7
 8003208:	4619      	mov	r1, r3
 800320a:	4610      	mov	r0, r2
 800320c:	f002 fab4 	bl	8005778 <uartPrintf>
      }

      if (rx_data == CLI_KEY_HOME)
 8003210:	78fb      	ldrb	r3, [r7, #3]
 8003212:	2b31      	cmp	r3, #49	; 0x31
 8003214:	d10f      	bne.n	8003236 <cliUpdate+0x426>
      {
        uartPrintf(p_cli->ch, "\x1B[%dD", line->cursor);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	7818      	ldrb	r0, [r3, #0]
 800321a:	69fb      	ldr	r3, [r7, #28]
 800321c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003220:	461a      	mov	r2, r3
 8003222:	492b      	ldr	r1, [pc, #172]	; (80032d0 <cliUpdate+0x4c0>)
 8003224:	f002 faa8 	bl	8005778 <uartPrintf>
        line->cursor = 0;
 8003228:	69fb      	ldr	r3, [r7, #28]
 800322a:	2200      	movs	r2, #0
 800322c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        p_cli->state = CLI_RX_SP4;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2204      	movs	r2, #4
 8003234:	741a      	strb	r2, [r3, #16]
      }

      if (rx_data == CLI_KEY_END)
 8003236:	78fb      	ldrb	r3, [r7, #3]
 8003238:	2b34      	cmp	r3, #52	; 0x34
 800323a:	d13f      	bne.n	80032bc <cliUpdate+0x4ac>
      {
        uint16_t mov_len;

        if (line->cursor < line->count)
 800323c:	69fb      	ldr	r3, [r7, #28]
 800323e:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 8003242:	69fb      	ldr	r3, [r7, #28]
 8003244:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003248:	429a      	cmp	r2, r3
 800324a:	d210      	bcs.n	800326e <cliUpdate+0x45e>
        {
          mov_len = line->count - line->cursor;
 800324c:	69fb      	ldr	r3, [r7, #28]
 800324e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003252:	b29a      	uxth	r2, r3
 8003254:	69fb      	ldr	r3, [r7, #28]
 8003256:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800325a:	b29b      	uxth	r3, r3
 800325c:	1ad3      	subs	r3, r2, r3
 800325e:	82fb      	strh	r3, [r7, #22]
          uartPrintf(p_cli->ch, "\x1B[%dC", mov_len);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	781b      	ldrb	r3, [r3, #0]
 8003264:	8afa      	ldrh	r2, [r7, #22]
 8003266:	491b      	ldr	r1, [pc, #108]	; (80032d4 <cliUpdate+0x4c4>)
 8003268:	4618      	mov	r0, r3
 800326a:	f002 fa85 	bl	8005778 <uartPrintf>
        }
        if (line->cursor > line->count)
 800326e:	69fb      	ldr	r3, [r7, #28]
 8003270:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 8003274:	69fb      	ldr	r3, [r7, #28]
 8003276:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800327a:	429a      	cmp	r2, r3
 800327c:	d910      	bls.n	80032a0 <cliUpdate+0x490>
        {
          mov_len = line->cursor - line->count;
 800327e:	69fb      	ldr	r3, [r7, #28]
 8003280:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003284:	b29a      	uxth	r2, r3
 8003286:	69fb      	ldr	r3, [r7, #28]
 8003288:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800328c:	b29b      	uxth	r3, r3
 800328e:	1ad3      	subs	r3, r2, r3
 8003290:	82fb      	strh	r3, [r7, #22]
          uartPrintf(p_cli->ch, "\x1B[%dD", mov_len);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	781b      	ldrb	r3, [r3, #0]
 8003296:	8afa      	ldrh	r2, [r7, #22]
 8003298:	490d      	ldr	r1, [pc, #52]	; (80032d0 <cliUpdate+0x4c0>)
 800329a:	4618      	mov	r0, r3
 800329c:	f002 fa6c 	bl	8005778 <uartPrintf>
        }
        line->cursor = line->count;
 80032a0:	69fb      	ldr	r3, [r7, #28]
 80032a2:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
 80032a6:	69fb      	ldr	r3, [r7, #28]
 80032a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        p_cli->state = CLI_RX_SP4;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2204      	movs	r2, #4
 80032b0:	741a      	strb	r2, [r3, #16]
      }
      break;
 80032b2:	e003      	b.n	80032bc <cliUpdate+0x4ac>

    case CLI_RX_SP4:
      p_cli->state = CLI_RX_IDLE;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2200      	movs	r2, #0
 80032b8:	741a      	strb	r2, [r3, #16]
      break;
 80032ba:	e000      	b.n	80032be <cliUpdate+0x4ae>
      break;
 80032bc:	bf00      	nop
  }

  cliShowLog(p_cli);
 80032be:	6878      	ldr	r0, [r7, #4]
 80032c0:	f7ff fcea 	bl	8002c98 <cliShowLog>

  return ret;
 80032c4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80032c8:	4618      	mov	r0, r3
 80032ca:	3730      	adds	r7, #48	; 0x30
 80032cc:	46bd      	mov	sp, r7
 80032ce:	bd80      	pop	{r7, pc}
 80032d0:	08016a0c 	.word	0x08016a0c
 80032d4:	08016a14 	.word	0x08016a14

080032d8 <cliLineClean>:

void cliLineClean(cli_t *p_cli)
{
 80032d8:	b480      	push	{r7}
 80032da:	b083      	sub	sp, #12
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
  p_cli->line.count   = 0;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2200      	movs	r2, #0
 80032e4:	f883 2329 	strb.w	r2, [r3, #809]	; 0x329
  p_cli->line.cursor  = 0;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2200      	movs	r2, #0
 80032ec:	f883 2328 	strb.w	r2, [r3, #808]	; 0x328
  p_cli->line.buf_len = CLI_LINE_BUF_MAX - 1;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	223f      	movs	r2, #63	; 0x3f
 80032f4:	f883 2327 	strb.w	r2, [r3, #807]	; 0x327
  p_cli->line.buf[0]  = 0;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2200      	movs	r2, #0
 80032fc:	f883 22e7 	strb.w	r2, [r3, #743]	; 0x2e7
}
 8003300:	bf00      	nop
 8003302:	370c      	adds	r7, #12
 8003304:	46bd      	mov	sp, r7
 8003306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330a:	4770      	bx	lr

0800330c <cliLineAdd>:

void cliLineAdd(cli_t *p_cli)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b082      	sub	sp, #8
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]

  p_cli->line_buf[p_cli->hist_line_last] = p_cli->line;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	f893 3196 	ldrb.w	r3, [r3, #406]	; 0x196
 800331a:	461a      	mov	r2, r3
 800331c:	6879      	ldr	r1, [r7, #4]
 800331e:	4613      	mov	r3, r2
 8003320:	015b      	lsls	r3, r3, #5
 8003322:	4413      	add	r3, r2
 8003324:	005b      	lsls	r3, r3, #1
 8003326:	4413      	add	r3, r2
 8003328:	440b      	add	r3, r1
 800332a:	f503 72cc 	add.w	r2, r3, #408	; 0x198
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	4610      	mov	r0, r2
 8003332:	f203 23e7 	addw	r3, r3, #743	; 0x2e7
 8003336:	2243      	movs	r2, #67	; 0x43
 8003338:	4619      	mov	r1, r3
 800333a:	f011 fb22 	bl	8014982 <memcpy>

  if (p_cli->hist_line_count < CLI_LINE_HIS_MAX)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	f893 3197 	ldrb.w	r3, [r3, #407]	; 0x197
 8003344:	2b04      	cmp	r3, #4
 8003346:	d807      	bhi.n	8003358 <cliLineAdd+0x4c>
  {
    p_cli->hist_line_count++;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	f893 3197 	ldrb.w	r3, [r3, #407]	; 0x197
 800334e:	3301      	adds	r3, #1
 8003350:	b2da      	uxtb	r2, r3
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	f883 2197 	strb.w	r2, [r3, #407]	; 0x197
  }

  p_cli->hist_line_i    = p_cli->hist_line_last;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	f893 3196 	ldrb.w	r3, [r3, #406]	; 0x196
 800335e:	b25a      	sxtb	r2, r3
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
  p_cli->hist_line_last = (p_cli->hist_line_last + 1) % CLI_LINE_HIS_MAX;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	f893 3196 	ldrb.w	r3, [r3, #406]	; 0x196
 800336c:	1c5a      	adds	r2, r3, #1
 800336e:	4b0b      	ldr	r3, [pc, #44]	; (800339c <cliLineAdd+0x90>)
 8003370:	fb83 1302 	smull	r1, r3, r3, r2
 8003374:	1059      	asrs	r1, r3, #1
 8003376:	17d3      	asrs	r3, r2, #31
 8003378:	1ac9      	subs	r1, r1, r3
 800337a:	460b      	mov	r3, r1
 800337c:	009b      	lsls	r3, r3, #2
 800337e:	440b      	add	r3, r1
 8003380:	1ad1      	subs	r1, r2, r3
 8003382:	b2ca      	uxtb	r2, r1
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	f883 2196 	strb.w	r2, [r3, #406]	; 0x196
  p_cli->hist_line_new  = true;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2201      	movs	r2, #1
 800338e:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194
}
 8003392:	bf00      	nop
 8003394:	3708      	adds	r7, #8
 8003396:	46bd      	mov	sp, r7
 8003398:	bd80      	pop	{r7, pc}
 800339a:	bf00      	nop
 800339c:	66666667 	.word	0x66666667

080033a0 <cliLineChange>:

void cliLineChange(cli_t *p_cli, int8_t key_up)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b084      	sub	sp, #16
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
 80033a8:	460b      	mov	r3, r1
 80033aa:	70fb      	strb	r3, [r7, #3]
  uint8_t change_i;


  if (p_cli->hist_line_count == 0)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	f893 3197 	ldrb.w	r3, [r3, #407]	; 0x197
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d076      	beq.n	80034a4 <cliLineChange+0x104>
  {
    return;
  }


  if (p_cli->line.cursor > 0)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	f893 3328 	ldrb.w	r3, [r3, #808]	; 0x328
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d008      	beq.n	80033d2 <cliLineChange+0x32>
  {
    uartPrintf(p_cli->ch, "\x1B[%dD", p_cli->line.cursor);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	7818      	ldrb	r0, [r3, #0]
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	f893 3328 	ldrb.w	r3, [r3, #808]	; 0x328
 80033ca:	461a      	mov	r2, r3
 80033cc:	4937      	ldr	r1, [pc, #220]	; (80034ac <cliLineChange+0x10c>)
 80033ce:	f002 f9d3 	bl	8005778 <uartPrintf>
  }
  if (p_cli->line.count > 0)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	f893 3329 	ldrb.w	r3, [r3, #809]	; 0x329
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d008      	beq.n	80033ee <cliLineChange+0x4e>
  {
    uartPrintf(p_cli->ch, "\x1B[%dP", p_cli->line.count);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	7818      	ldrb	r0, [r3, #0]
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	f893 3329 	ldrb.w	r3, [r3, #809]	; 0x329
 80033e6:	461a      	mov	r2, r3
 80033e8:	4931      	ldr	r1, [pc, #196]	; (80034b0 <cliLineChange+0x110>)
 80033ea:	f002 f9c5 	bl	8005778 <uartPrintf>
  }


  if (key_up == true)
 80033ee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80033f2:	2b01      	cmp	r3, #1
 80033f4:	d125      	bne.n	8003442 <cliLineChange+0xa2>
  {
    if (p_cli->hist_line_new == true)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	f893 3194 	ldrb.w	r3, [r3, #404]	; 0x194
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d006      	beq.n	800340e <cliLineChange+0x6e>
    {
      p_cli->hist_line_i = p_cli->hist_line_last;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	f893 3196 	ldrb.w	r3, [r3, #406]	; 0x196
 8003406:	b25a      	sxtb	r2, r3
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
    }
    p_cli->hist_line_i = (p_cli->hist_line_i + p_cli->hist_line_count - 1) % p_cli->hist_line_count;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	f993 3195 	ldrsb.w	r3, [r3, #405]	; 0x195
 8003414:	461a      	mov	r2, r3
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	f893 3197 	ldrb.w	r3, [r3, #407]	; 0x197
 800341c:	4413      	add	r3, r2
 800341e:	3b01      	subs	r3, #1
 8003420:	687a      	ldr	r2, [r7, #4]
 8003422:	f892 2197 	ldrb.w	r2, [r2, #407]	; 0x197
 8003426:	fb93 f1f2 	sdiv	r1, r3, r2
 800342a:	fb01 f202 	mul.w	r2, r1, r2
 800342e:	1a9b      	subs	r3, r3, r2
 8003430:	b25a      	sxtb	r2, r3
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
    change_i = p_cli->hist_line_i;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	f993 3195 	ldrsb.w	r3, [r3, #405]	; 0x195
 800343e:	73fb      	strb	r3, [r7, #15]
 8003440:	e013      	b.n	800346a <cliLineChange+0xca>
  }
  else
  {
    p_cli->hist_line_i = (p_cli->hist_line_i + 1) % p_cli->hist_line_count;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	f993 3195 	ldrsb.w	r3, [r3, #405]	; 0x195
 8003448:	3301      	adds	r3, #1
 800344a:	687a      	ldr	r2, [r7, #4]
 800344c:	f892 2197 	ldrb.w	r2, [r2, #407]	; 0x197
 8003450:	fb93 f1f2 	sdiv	r1, r3, r2
 8003454:	fb01 f202 	mul.w	r2, r1, r2
 8003458:	1a9b      	subs	r3, r3, r2
 800345a:	b25a      	sxtb	r2, r3
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
    change_i = p_cli->hist_line_i;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	f993 3195 	ldrsb.w	r3, [r3, #405]	; 0x195
 8003468:	73fb      	strb	r3, [r7, #15]
  }

  p_cli->line = p_cli->line_buf[change_i];
 800346a:	7bfa      	ldrb	r2, [r7, #15]
 800346c:	6879      	ldr	r1, [r7, #4]
 800346e:	6878      	ldr	r0, [r7, #4]
 8003470:	4613      	mov	r3, r2
 8003472:	015b      	lsls	r3, r3, #5
 8003474:	4413      	add	r3, r2
 8003476:	005b      	lsls	r3, r3, #1
 8003478:	4413      	add	r3, r2
 800347a:	4403      	add	r3, r0
 800347c:	f503 72cc 	add.w	r2, r3, #408	; 0x198
 8003480:	f201 23e7 	addw	r3, r1, #743	; 0x2e7
 8003484:	4611      	mov	r1, r2
 8003486:	2243      	movs	r2, #67	; 0x43
 8003488:	4618      	mov	r0, r3
 800348a:	f011 fa7a 	bl	8014982 <memcpy>
  p_cli->line.cursor = p_cli->line.count;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	f893 2329 	ldrb.w	r2, [r3, #809]	; 0x329
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	f883 2328 	strb.w	r2, [r3, #808]	; 0x328

  p_cli->hist_line_new = false;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2200      	movs	r2, #0
 800349e:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194
 80034a2:	e000      	b.n	80034a6 <cliLineChange+0x106>
    return;
 80034a4:	bf00      	nop
}
 80034a6:	3710      	adds	r7, #16
 80034a8:	46bd      	mov	sp, r7
 80034aa:	bd80      	pop	{r7, pc}
 80034ac:	08016a0c 	.word	0x08016a0c
 80034b0:	08016a1c 	.word	0x08016a1c

080034b4 <cliRunCmd>:

bool cliRunCmd(cli_t *p_cli)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b084      	sub	sp, #16
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
  bool ret = false;
 80034bc:	2300      	movs	r3, #0
 80034be:	72fb      	strb	r3, [r7, #11]


  if (cliParseArgs(p_cli) == true)
 80034c0:	6878      	ldr	r0, [r7, #4]
 80034c2:	f000 f851 	bl	8003568 <cliParseArgs>
 80034c6:	4603      	mov	r3, r0
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d046      	beq.n	800355a <cliRunCmd+0xa6>
  {
    cliPrintf("\r\n");
 80034cc:	4825      	ldr	r0, [pc, #148]	; (8003564 <cliRunCmd+0xb0>)
 80034ce:	f000 f893 	bl	80035f8 <cliPrintf>

    cliToUpper(p_cli->argv[0]);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 80034d8:	4618      	mov	r0, r3
 80034da:	f000 f8b1 	bl	8003640 <cliToUpper>

    for (int i=0; i<p_cli->cmd_count; i++)
 80034de:	2300      	movs	r3, #0
 80034e0:	60fb      	str	r3, [r7, #12]
 80034e2:	e033      	b.n	800354c <cliRunCmd+0x98>
    {
      if (strcmp(p_cli->argv[0], p_cli->cmd_list[i].cmd_str) == 0)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
 80034ea:	68fa      	ldr	r2, [r7, #12]
 80034ec:	4613      	mov	r3, r2
 80034ee:	009b      	lsls	r3, r3, #2
 80034f0:	4413      	add	r3, r2
 80034f2:	009b      	lsls	r3, r3, #2
 80034f4:	f503 734a 	add.w	r3, r3, #808	; 0x328
 80034f8:	687a      	ldr	r2, [r7, #4]
 80034fa:	4413      	add	r3, r2
 80034fc:	3304      	adds	r3, #4
 80034fe:	4619      	mov	r1, r3
 8003500:	f7fc fe6e 	bl	80001e0 <strcmp>
 8003504:	4603      	mov	r3, r0
 8003506:	2b00      	cmp	r3, #0
 8003508:	d11d      	bne.n	8003546 <cliRunCmd+0x92>
      {
        p_cli->cmd_args.argc =  p_cli->argc - 1;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	f8b3 3112 	ldrh.w	r3, [r3, #274]	; 0x112
 8003510:	3b01      	subs	r3, #1
 8003512:	b29a      	uxth	r2, r3
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	f8a3 246c 	strh.w	r2, [r3, #1132]	; 0x46c
        p_cli->cmd_args.argv = &p_cli->argv[1];
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	f503 728c 	add.w	r2, r3, #280	; 0x118
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	f8c3 2470 	str.w	r2, [r3, #1136]	; 0x470
        p_cli->cmd_list[i].cmd_func(&p_cli->cmd_args);
 8003526:	6879      	ldr	r1, [r7, #4]
 8003528:	68fa      	ldr	r2, [r7, #12]
 800352a:	4613      	mov	r3, r2
 800352c:	009b      	lsls	r3, r3, #2
 800352e:	4413      	add	r3, r2
 8003530:	009b      	lsls	r3, r3, #2
 8003532:	440b      	add	r3, r1
 8003534:	f503 734f 	add.w	r3, r3, #828	; 0x33c
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	687a      	ldr	r2, [r7, #4]
 800353c:	f202 426c 	addw	r2, r2, #1132	; 0x46c
 8003540:	4610      	mov	r0, r2
 8003542:	4798      	blx	r3
        break;
 8003544:	e009      	b.n	800355a <cliRunCmd+0xa6>
    for (int i=0; i<p_cli->cmd_count; i++)
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	3301      	adds	r3, #1
 800354a:	60fb      	str	r3, [r7, #12]
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	f8b3 332a 	ldrh.w	r3, [r3, #810]	; 0x32a
 8003552:	461a      	mov	r2, r3
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	4293      	cmp	r3, r2
 8003558:	dbc4      	blt.n	80034e4 <cliRunCmd+0x30>
      }
    }
  }

  return ret;
 800355a:	7afb      	ldrb	r3, [r7, #11]
}
 800355c:	4618      	mov	r0, r3
 800355e:	3710      	adds	r7, #16
 8003560:	46bd      	mov	sp, r7
 8003562:	bd80      	pop	{r7, pc}
 8003564:	08016a24 	.word	0x08016a24

08003568 <cliParseArgs>:

bool cliParseArgs(cli_t *p_cli)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b088      	sub	sp, #32
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
  bool ret = false;
 8003570:	2300      	movs	r3, #0
 8003572:	77fb      	strb	r3, [r7, #31]
  char *tok;
  char *next_ptr;
  uint16_t argc = 0;
 8003574:	2300      	movs	r3, #0
 8003576:	82fb      	strh	r3, [r7, #22]
  static const char *delim = " \f\n\r\t\v";
  char *cmdline;
  char **argv;

  p_cli->argc = 0;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2200      	movs	r2, #0
 800357c:	f8a3 2112 	strh.w	r2, [r3, #274]	; 0x112

  cmdline = (char *)p_cli->line.buf;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	f203 23e7 	addw	r3, r3, #743	; 0x2e7
 8003586:	613b      	str	r3, [r7, #16]
  argv    = p_cli->argv;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	f503 738a 	add.w	r3, r3, #276	; 0x114
 800358e:	60fb      	str	r3, [r7, #12]

  argv[argc] = NULL;
 8003590:	8afb      	ldrh	r3, [r7, #22]
 8003592:	009b      	lsls	r3, r3, #2
 8003594:	68fa      	ldr	r2, [r7, #12]
 8003596:	4413      	add	r3, r2
 8003598:	2200      	movs	r2, #0
 800359a:	601a      	str	r2, [r3, #0]

  for (tok = strtok_r(cmdline, delim, &next_ptr); tok; tok = strtok_r(NULL, delim, &next_ptr))
 800359c:	4b15      	ldr	r3, [pc, #84]	; (80035f4 <cliParseArgs+0x8c>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f107 0208 	add.w	r2, r7, #8
 80035a4:	4619      	mov	r1, r3
 80035a6:	6938      	ldr	r0, [r7, #16]
 80035a8:	f011 f95c 	bl	8014864 <strtok_r>
 80035ac:	61b8      	str	r0, [r7, #24]
 80035ae:	e010      	b.n	80035d2 <cliParseArgs+0x6a>
  {
    argv[argc++] = tok;
 80035b0:	8afb      	ldrh	r3, [r7, #22]
 80035b2:	1c5a      	adds	r2, r3, #1
 80035b4:	82fa      	strh	r2, [r7, #22]
 80035b6:	009b      	lsls	r3, r3, #2
 80035b8:	68fa      	ldr	r2, [r7, #12]
 80035ba:	4413      	add	r3, r2
 80035bc:	69ba      	ldr	r2, [r7, #24]
 80035be:	601a      	str	r2, [r3, #0]
  for (tok = strtok_r(cmdline, delim, &next_ptr); tok; tok = strtok_r(NULL, delim, &next_ptr))
 80035c0:	4b0c      	ldr	r3, [pc, #48]	; (80035f4 <cliParseArgs+0x8c>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f107 0208 	add.w	r2, r7, #8
 80035c8:	4619      	mov	r1, r3
 80035ca:	2000      	movs	r0, #0
 80035cc:	f011 f94a 	bl	8014864 <strtok_r>
 80035d0:	61b8      	str	r0, [r7, #24]
 80035d2:	69bb      	ldr	r3, [r7, #24]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d1eb      	bne.n	80035b0 <cliParseArgs+0x48>
  }

  p_cli->argc = argc;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	8afa      	ldrh	r2, [r7, #22]
 80035dc:	f8a3 2112 	strh.w	r2, [r3, #274]	; 0x112

  if (argc > 0)
 80035e0:	8afb      	ldrh	r3, [r7, #22]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d001      	beq.n	80035ea <cliParseArgs+0x82>
  {
    ret = true;
 80035e6:	2301      	movs	r3, #1
 80035e8:	77fb      	strb	r3, [r7, #31]
  }

  return ret;
 80035ea:	7ffb      	ldrb	r3, [r7, #31]
}
 80035ec:	4618      	mov	r0, r3
 80035ee:	3720      	adds	r7, #32
 80035f0:	46bd      	mov	sp, r7
 80035f2:	bd80      	pop	{r7, pc}
 80035f4:	20000068 	.word	0x20000068

080035f8 <cliPrintf>:

void cliPrintf(const char *fmt, ...)
{
 80035f8:	b40f      	push	{r0, r1, r2, r3}
 80035fa:	b580      	push	{r7, lr}
 80035fc:	b084      	sub	sp, #16
 80035fe:	af00      	add	r7, sp, #0
  va_list arg;
  va_start (arg, fmt);
 8003600:	f107 031c 	add.w	r3, r7, #28
 8003604:	607b      	str	r3, [r7, #4]
  int32_t len;
  cli_t *p_cli = &cli_node;
 8003606:	4b0d      	ldr	r3, [pc, #52]	; (800363c <cliPrintf+0x44>)
 8003608:	60fb      	str	r3, [r7, #12]


  len = vsnprintf(p_cli->print_buffer, 256, fmt, arg);
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	f103 0011 	add.w	r0, r3, #17
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	69ba      	ldr	r2, [r7, #24]
 8003614:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003618:	f011 f8d4 	bl	80147c4 <vsniprintf>
 800361c:	60b8      	str	r0, [r7, #8]
  va_end (arg);

  uartWrite(p_cli->ch, (uint8_t *)p_cli->print_buffer, len);
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	7818      	ldrb	r0, [r3, #0]
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	3311      	adds	r3, #17
 8003626:	68ba      	ldr	r2, [r7, #8]
 8003628:	4619      	mov	r1, r3
 800362a:	f002 f88e 	bl	800574a <uartWrite>
}
 800362e:	bf00      	nop
 8003630:	3710      	adds	r7, #16
 8003632:	46bd      	mov	sp, r7
 8003634:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003638:	b004      	add	sp, #16
 800363a:	4770      	bx	lr
 800363c:	200007c8 	.word	0x200007c8

08003640 <cliToUpper>:

void cliToUpper(char *str)
{
 8003640:	b480      	push	{r7}
 8003642:	b085      	sub	sp, #20
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
  uint16_t i;
  uint8_t  str_ch;

  for (i=0; i<CLI_CMD_NAME_MAX; i++)
 8003648:	2300      	movs	r3, #0
 800364a:	81fb      	strh	r3, [r7, #14]
 800364c:	e018      	b.n	8003680 <cliToUpper+0x40>
  {
    str_ch = str[i];
 800364e:	89fb      	ldrh	r3, [r7, #14]
 8003650:	687a      	ldr	r2, [r7, #4]
 8003652:	4413      	add	r3, r2
 8003654:	781b      	ldrb	r3, [r3, #0]
 8003656:	737b      	strb	r3, [r7, #13]

    if (str_ch == 0)
 8003658:	7b7b      	ldrb	r3, [r7, #13]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d014      	beq.n	8003688 <cliToUpper+0x48>
    {
      break;
    }

    if ((str_ch >= 'a') && (str_ch <= 'z'))
 800365e:	7b7b      	ldrb	r3, [r7, #13]
 8003660:	2b60      	cmp	r3, #96	; 0x60
 8003662:	d905      	bls.n	8003670 <cliToUpper+0x30>
 8003664:	7b7b      	ldrb	r3, [r7, #13]
 8003666:	2b7a      	cmp	r3, #122	; 0x7a
 8003668:	d802      	bhi.n	8003670 <cliToUpper+0x30>
    {
      str_ch = str_ch - 'a' + 'A';
 800366a:	7b7b      	ldrb	r3, [r7, #13]
 800366c:	3b20      	subs	r3, #32
 800366e:	737b      	strb	r3, [r7, #13]
    }
    str[i] = str_ch;
 8003670:	89fb      	ldrh	r3, [r7, #14]
 8003672:	687a      	ldr	r2, [r7, #4]
 8003674:	4413      	add	r3, r2
 8003676:	7b7a      	ldrb	r2, [r7, #13]
 8003678:	701a      	strb	r2, [r3, #0]
  for (i=0; i<CLI_CMD_NAME_MAX; i++)
 800367a:	89fb      	ldrh	r3, [r7, #14]
 800367c:	3301      	adds	r3, #1
 800367e:	81fb      	strh	r3, [r7, #14]
 8003680:	89fb      	ldrh	r3, [r7, #14]
 8003682:	2b0f      	cmp	r3, #15
 8003684:	d9e3      	bls.n	800364e <cliToUpper+0xe>
 8003686:	e000      	b.n	800368a <cliToUpper+0x4a>
      break;
 8003688:	bf00      	nop
  }

  if (i == CLI_CMD_NAME_MAX)
 800368a:	89fb      	ldrh	r3, [r7, #14]
 800368c:	2b10      	cmp	r3, #16
 800368e:	d105      	bne.n	800369c <cliToUpper+0x5c>
  {
    str[i-1] = 0;
 8003690:	89fb      	ldrh	r3, [r7, #14]
 8003692:	3b01      	subs	r3, #1
 8003694:	687a      	ldr	r2, [r7, #4]
 8003696:	4413      	add	r3, r2
 8003698:	2200      	movs	r2, #0
 800369a:	701a      	strb	r2, [r3, #0]
  }
}
 800369c:	bf00      	nop
 800369e:	3714      	adds	r7, #20
 80036a0:	46bd      	mov	sp, r7
 80036a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a6:	4770      	bx	lr

080036a8 <cliArgsGetData>:

int32_t cliArgsGetData(uint8_t index)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b084      	sub	sp, #16
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	4603      	mov	r3, r0
 80036b0:	71fb      	strb	r3, [r7, #7]
  int32_t ret = 0;
 80036b2:	2300      	movs	r3, #0
 80036b4:	60fb      	str	r3, [r7, #12]
  cli_t *p_cli = &cli_node;
 80036b6:	4b0f      	ldr	r3, [pc, #60]	; (80036f4 <cliArgsGetData+0x4c>)
 80036b8:	60bb      	str	r3, [r7, #8]


  if (index >= p_cli->cmd_args.argc)
 80036ba:	79fb      	ldrb	r3, [r7, #7]
 80036bc:	b29a      	uxth	r2, r3
 80036be:	68bb      	ldr	r3, [r7, #8]
 80036c0:	f8b3 346c 	ldrh.w	r3, [r3, #1132]	; 0x46c
 80036c4:	429a      	cmp	r2, r3
 80036c6:	d301      	bcc.n	80036cc <cliArgsGetData+0x24>
  {
    return 0;
 80036c8:	2300      	movs	r3, #0
 80036ca:	e00e      	b.n	80036ea <cliArgsGetData+0x42>
  }

  ret = (int32_t)strtoul((const char * ) p_cli->cmd_args.argv[index], (char **)NULL, (int) 0);
 80036cc:	68bb      	ldr	r3, [r7, #8]
 80036ce:	f8d3 2470 	ldr.w	r2, [r3, #1136]	; 0x470
 80036d2:	79fb      	ldrb	r3, [r7, #7]
 80036d4:	009b      	lsls	r3, r3, #2
 80036d6:	4413      	add	r3, r2
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	2200      	movs	r2, #0
 80036dc:	2100      	movs	r1, #0
 80036de:	4618      	mov	r0, r3
 80036e0:	f010 ff36 	bl	8014550 <strtoul>
 80036e4:	4603      	mov	r3, r0
 80036e6:	60fb      	str	r3, [r7, #12]

  return ret;
 80036e8:	68fb      	ldr	r3, [r7, #12]
}
 80036ea:	4618      	mov	r0, r3
 80036ec:	3710      	adds	r7, #16
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bd80      	pop	{r7, pc}
 80036f2:	bf00      	nop
 80036f4:	200007c8 	.word	0x200007c8

080036f8 <cliArgsGetFloat>:

float cliArgsGetFloat(uint8_t index)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b084      	sub	sp, #16
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	4603      	mov	r3, r0
 8003700:	71fb      	strb	r3, [r7, #7]
  float ret = 0.0;
 8003702:	f04f 0300 	mov.w	r3, #0
 8003706:	60fb      	str	r3, [r7, #12]
  cli_t *p_cli = &cli_node;
 8003708:	4b10      	ldr	r3, [pc, #64]	; (800374c <cliArgsGetFloat+0x54>)
 800370a:	60bb      	str	r3, [r7, #8]


  if (index >= p_cli->cmd_args.argc)
 800370c:	79fb      	ldrb	r3, [r7, #7]
 800370e:	b29a      	uxth	r2, r3
 8003710:	68bb      	ldr	r3, [r7, #8]
 8003712:	f8b3 346c 	ldrh.w	r3, [r3, #1132]	; 0x46c
 8003716:	429a      	cmp	r2, r3
 8003718:	d302      	bcc.n	8003720 <cliArgsGetFloat+0x28>
  {
    return 0;
 800371a:	f04f 0300 	mov.w	r3, #0
 800371e:	e00d      	b.n	800373c <cliArgsGetFloat+0x44>
  }

  ret = (float)strtof((const char * ) p_cli->cmd_args.argv[index], (char **)NULL);
 8003720:	68bb      	ldr	r3, [r7, #8]
 8003722:	f8d3 2470 	ldr.w	r2, [r3, #1136]	; 0x470
 8003726:	79fb      	ldrb	r3, [r7, #7]
 8003728:	009b      	lsls	r3, r3, #2
 800372a:	4413      	add	r3, r2
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	2100      	movs	r1, #0
 8003730:	4618      	mov	r0, r3
 8003732:	f010 fe35 	bl	80143a0 <strtof>
 8003736:	ed87 0a03 	vstr	s0, [r7, #12]

  return ret;
 800373a:	68fb      	ldr	r3, [r7, #12]
}
 800373c:	ee07 3a90 	vmov	s15, r3
 8003740:	eeb0 0a67 	vmov.f32	s0, s15
 8003744:	3710      	adds	r7, #16
 8003746:	46bd      	mov	sp, r7
 8003748:	bd80      	pop	{r7, pc}
 800374a:	bf00      	nop
 800374c:	200007c8 	.word	0x200007c8

08003750 <cliArgsGetStr>:

char *cliArgsGetStr(uint8_t index)
{
 8003750:	b480      	push	{r7}
 8003752:	b085      	sub	sp, #20
 8003754:	af00      	add	r7, sp, #0
 8003756:	4603      	mov	r3, r0
 8003758:	71fb      	strb	r3, [r7, #7]
  char *ret = NULL;
 800375a:	2300      	movs	r3, #0
 800375c:	60fb      	str	r3, [r7, #12]
  cli_t *p_cli = &cli_node;
 800375e:	4b0d      	ldr	r3, [pc, #52]	; (8003794 <cliArgsGetStr+0x44>)
 8003760:	60bb      	str	r3, [r7, #8]


  if (index >= p_cli->cmd_args.argc)
 8003762:	79fb      	ldrb	r3, [r7, #7]
 8003764:	b29a      	uxth	r2, r3
 8003766:	68bb      	ldr	r3, [r7, #8]
 8003768:	f8b3 346c 	ldrh.w	r3, [r3, #1132]	; 0x46c
 800376c:	429a      	cmp	r2, r3
 800376e:	d301      	bcc.n	8003774 <cliArgsGetStr+0x24>
  {
    return 0;
 8003770:	2300      	movs	r3, #0
 8003772:	e008      	b.n	8003786 <cliArgsGetStr+0x36>
  }

  ret = p_cli->cmd_args.argv[index];
 8003774:	68bb      	ldr	r3, [r7, #8]
 8003776:	f8d3 2470 	ldr.w	r2, [r3, #1136]	; 0x470
 800377a:	79fb      	ldrb	r3, [r7, #7]
 800377c:	009b      	lsls	r3, r3, #2
 800377e:	4413      	add	r3, r2
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	60fb      	str	r3, [r7, #12]

  return ret;
 8003784:	68fb      	ldr	r3, [r7, #12]
}
 8003786:	4618      	mov	r0, r3
 8003788:	3714      	adds	r7, #20
 800378a:	46bd      	mov	sp, r7
 800378c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003790:	4770      	bx	lr
 8003792:	bf00      	nop
 8003794:	200007c8 	.word	0x200007c8

08003798 <cliArgsIsStr>:

bool cliArgsIsStr(uint8_t index, char *p_str)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b084      	sub	sp, #16
 800379c:	af00      	add	r7, sp, #0
 800379e:	4603      	mov	r3, r0
 80037a0:	6039      	str	r1, [r7, #0]
 80037a2:	71fb      	strb	r3, [r7, #7]
  bool ret = false;
 80037a4:	2300      	movs	r3, #0
 80037a6:	73fb      	strb	r3, [r7, #15]
  cli_t *p_cli = &cli_node;
 80037a8:	4b0f      	ldr	r3, [pc, #60]	; (80037e8 <cliArgsIsStr+0x50>)
 80037aa:	60bb      	str	r3, [r7, #8]


  if (index >= p_cli->cmd_args.argc)
 80037ac:	79fb      	ldrb	r3, [r7, #7]
 80037ae:	b29a      	uxth	r2, r3
 80037b0:	68bb      	ldr	r3, [r7, #8]
 80037b2:	f8b3 346c 	ldrh.w	r3, [r3, #1132]	; 0x46c
 80037b6:	429a      	cmp	r2, r3
 80037b8:	d301      	bcc.n	80037be <cliArgsIsStr+0x26>
  {
    return 0;
 80037ba:	2300      	movs	r3, #0
 80037bc:	e010      	b.n	80037e0 <cliArgsIsStr+0x48>
  }

  if(strcmp(p_str, p_cli->cmd_args.argv[index]) == 0)
 80037be:	68bb      	ldr	r3, [r7, #8]
 80037c0:	f8d3 2470 	ldr.w	r2, [r3, #1136]	; 0x470
 80037c4:	79fb      	ldrb	r3, [r7, #7]
 80037c6:	009b      	lsls	r3, r3, #2
 80037c8:	4413      	add	r3, r2
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4619      	mov	r1, r3
 80037ce:	6838      	ldr	r0, [r7, #0]
 80037d0:	f7fc fd06 	bl	80001e0 <strcmp>
 80037d4:	4603      	mov	r3, r0
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d101      	bne.n	80037de <cliArgsIsStr+0x46>
  {
    ret = true;
 80037da:	2301      	movs	r3, #1
 80037dc:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80037de:	7bfb      	ldrb	r3, [r7, #15]
}
 80037e0:	4618      	mov	r0, r3
 80037e2:	3710      	adds	r7, #16
 80037e4:	46bd      	mov	sp, r7
 80037e6:	bd80      	pop	{r7, pc}
 80037e8:	200007c8 	.word	0x200007c8

080037ec <cliKeepLoop>:

bool cliKeepLoop(void)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b082      	sub	sp, #8
 80037f0:	af00      	add	r7, sp, #0
  cli_t *p_cli = &cli_node;
 80037f2:	4b08      	ldr	r3, [pc, #32]	; (8003814 <cliKeepLoop+0x28>)
 80037f4:	607b      	str	r3, [r7, #4]


  if (uartAvailable(p_cli->ch) == 0)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	781b      	ldrb	r3, [r3, #0]
 80037fa:	4618      	mov	r0, r3
 80037fc:	f001 ff7e 	bl	80056fc <uartAvailable>
 8003800:	4603      	mov	r3, r0
 8003802:	2b00      	cmp	r3, #0
 8003804:	d101      	bne.n	800380a <cliKeepLoop+0x1e>
  {
    return true;
 8003806:	2301      	movs	r3, #1
 8003808:	e000      	b.n	800380c <cliKeepLoop+0x20>
  }
  else
  {
    return false;
 800380a:	2300      	movs	r3, #0
  }
}
 800380c:	4618      	mov	r0, r3
 800380e:	3708      	adds	r7, #8
 8003810:	46bd      	mov	sp, r7
 8003812:	bd80      	pop	{r7, pc}
 8003814:	200007c8 	.word	0x200007c8

08003818 <cliAdd>:

bool cliAdd(const char *cmd_str, void (*p_func)(cli_args_t *))
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b086      	sub	sp, #24
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
 8003820:	6039      	str	r1, [r7, #0]
  bool ret = true;
 8003822:	2301      	movs	r3, #1
 8003824:	75fb      	strb	r3, [r7, #23]
  cli_t *p_cli = &cli_node;
 8003826:	4b20      	ldr	r3, [pc, #128]	; (80038a8 <cliAdd+0x90>)
 8003828:	613b      	str	r3, [r7, #16]
  uint16_t index;

  if (p_cli->cmd_count >= CLI_CMD_LIST_MAX)
 800382a:	693b      	ldr	r3, [r7, #16]
 800382c:	f8b3 332a 	ldrh.w	r3, [r3, #810]	; 0x32a
 8003830:	2b0f      	cmp	r3, #15
 8003832:	d901      	bls.n	8003838 <cliAdd+0x20>
  {
    return false;
 8003834:	2300      	movs	r3, #0
 8003836:	e032      	b.n	800389e <cliAdd+0x86>
  }

  index = p_cli->cmd_count;
 8003838:	693b      	ldr	r3, [r7, #16]
 800383a:	f8b3 332a 	ldrh.w	r3, [r3, #810]	; 0x32a
 800383e:	81fb      	strh	r3, [r7, #14]

  strcpy(p_cli->cmd_list[index].cmd_str, cmd_str);
 8003840:	89fa      	ldrh	r2, [r7, #14]
 8003842:	4613      	mov	r3, r2
 8003844:	009b      	lsls	r3, r3, #2
 8003846:	4413      	add	r3, r2
 8003848:	009b      	lsls	r3, r3, #2
 800384a:	f503 734a 	add.w	r3, r3, #808	; 0x328
 800384e:	693a      	ldr	r2, [r7, #16]
 8003850:	4413      	add	r3, r2
 8003852:	3304      	adds	r3, #4
 8003854:	6879      	ldr	r1, [r7, #4]
 8003856:	4618      	mov	r0, r3
 8003858:	f011 f88b 	bl	8014972 <strcpy>
  p_cli->cmd_list[index].cmd_func = p_func;
 800385c:	89fa      	ldrh	r2, [r7, #14]
 800385e:	6939      	ldr	r1, [r7, #16]
 8003860:	4613      	mov	r3, r2
 8003862:	009b      	lsls	r3, r3, #2
 8003864:	4413      	add	r3, r2
 8003866:	009b      	lsls	r3, r3, #2
 8003868:	440b      	add	r3, r1
 800386a:	f503 734f 	add.w	r3, r3, #828	; 0x33c
 800386e:	683a      	ldr	r2, [r7, #0]
 8003870:	601a      	str	r2, [r3, #0]

  cliToUpper(p_cli->cmd_list[index].cmd_str);
 8003872:	89fa      	ldrh	r2, [r7, #14]
 8003874:	4613      	mov	r3, r2
 8003876:	009b      	lsls	r3, r3, #2
 8003878:	4413      	add	r3, r2
 800387a:	009b      	lsls	r3, r3, #2
 800387c:	f503 734a 	add.w	r3, r3, #808	; 0x328
 8003880:	693a      	ldr	r2, [r7, #16]
 8003882:	4413      	add	r3, r2
 8003884:	3304      	adds	r3, #4
 8003886:	4618      	mov	r0, r3
 8003888:	f7ff feda 	bl	8003640 <cliToUpper>

  p_cli->cmd_count++;
 800388c:	693b      	ldr	r3, [r7, #16]
 800388e:	f8b3 332a 	ldrh.w	r3, [r3, #810]	; 0x32a
 8003892:	3301      	adds	r3, #1
 8003894:	b29a      	uxth	r2, r3
 8003896:	693b      	ldr	r3, [r7, #16]
 8003898:	f8a3 232a 	strh.w	r2, [r3, #810]	; 0x32a

  return ret;
 800389c:	7dfb      	ldrb	r3, [r7, #23]
}
 800389e:	4618      	mov	r0, r3
 80038a0:	3718      	adds	r7, #24
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bd80      	pop	{r7, pc}
 80038a6:	bf00      	nop
 80038a8:	200007c8 	.word	0x200007c8

080038ac <cliShowList>:

void cliShowList(cli_args_t *args)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b084      	sub	sp, #16
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
  cli_t *p_cli = &cli_node;
 80038b4:	4b15      	ldr	r3, [pc, #84]	; (800390c <cliShowList+0x60>)
 80038b6:	60bb      	str	r3, [r7, #8]


  cliPrintf("\r\n");
 80038b8:	4815      	ldr	r0, [pc, #84]	; (8003910 <cliShowList+0x64>)
 80038ba:	f7ff fe9d 	bl	80035f8 <cliPrintf>
  cliPrintf("---------- cmd list ---------\r\n");
 80038be:	4815      	ldr	r0, [pc, #84]	; (8003914 <cliShowList+0x68>)
 80038c0:	f7ff fe9a 	bl	80035f8 <cliPrintf>

  for (int i=0; i<p_cli->cmd_count; i++)
 80038c4:	2300      	movs	r3, #0
 80038c6:	60fb      	str	r3, [r7, #12]
 80038c8:	e012      	b.n	80038f0 <cliShowList+0x44>
  {
    cliPrintf(p_cli->cmd_list[i].cmd_str);
 80038ca:	68fa      	ldr	r2, [r7, #12]
 80038cc:	4613      	mov	r3, r2
 80038ce:	009b      	lsls	r3, r3, #2
 80038d0:	4413      	add	r3, r2
 80038d2:	009b      	lsls	r3, r3, #2
 80038d4:	f503 734a 	add.w	r3, r3, #808	; 0x328
 80038d8:	68ba      	ldr	r2, [r7, #8]
 80038da:	4413      	add	r3, r2
 80038dc:	3304      	adds	r3, #4
 80038de:	4618      	mov	r0, r3
 80038e0:	f7ff fe8a 	bl	80035f8 <cliPrintf>
    cliPrintf("\r\n");
 80038e4:	480a      	ldr	r0, [pc, #40]	; (8003910 <cliShowList+0x64>)
 80038e6:	f7ff fe87 	bl	80035f8 <cliPrintf>
  for (int i=0; i<p_cli->cmd_count; i++)
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	3301      	adds	r3, #1
 80038ee:	60fb      	str	r3, [r7, #12]
 80038f0:	68bb      	ldr	r3, [r7, #8]
 80038f2:	f8b3 332a 	ldrh.w	r3, [r3, #810]	; 0x32a
 80038f6:	461a      	mov	r2, r3
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	4293      	cmp	r3, r2
 80038fc:	dbe5      	blt.n	80038ca <cliShowList+0x1e>
  }

  cliPrintf("-----------------------------\r\n");
 80038fe:	4806      	ldr	r0, [pc, #24]	; (8003918 <cliShowList+0x6c>)
 8003900:	f7ff fe7a 	bl	80035f8 <cliPrintf>
}
 8003904:	bf00      	nop
 8003906:	3710      	adds	r7, #16
 8003908:	46bd      	mov	sp, r7
 800390a:	bd80      	pop	{r7, pc}
 800390c:	200007c8 	.word	0x200007c8
 8003910:	08016a24 	.word	0x08016a24
 8003914:	08016a28 	.word	0x08016a28
 8003918:	08016a48 	.word	0x08016a48

0800391c <cliMemoryDump>:

void cliMemoryDump(cli_args_t *args)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b08c      	sub	sp, #48	; 0x30
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
  int idx, size = 16;
 8003924:	2310      	movs	r3, #16
 8003926:	62bb      	str	r3, [r7, #40]	; 0x28
  unsigned int *addr;
  int idx1, i;
  unsigned int *ascptr;
  unsigned char asc[4];

  int    argc = args->argc;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	881b      	ldrh	r3, [r3, #0]
 800392c:	617b      	str	r3, [r7, #20]
  char **argv = args->argv;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	613b      	str	r3, [r7, #16]


  if(args->argc < 1)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	881b      	ldrh	r3, [r3, #0]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d103      	bne.n	8003944 <cliMemoryDump+0x28>
  {
    cliPrintf(">> md addr [size] \n");
 800393c:	4840      	ldr	r0, [pc, #256]	; (8003a40 <cliMemoryDump+0x124>)
 800393e:	f7ff fe5b 	bl	80035f8 <cliPrintf>
 8003942:	e07a      	b.n	8003a3a <cliMemoryDump+0x11e>
    return;
  }

  if(argc > 1)
 8003944:	697b      	ldr	r3, [r7, #20]
 8003946:	2b01      	cmp	r3, #1
 8003948:	dd09      	ble.n	800395e <cliMemoryDump+0x42>
  {
    size = (int)strtoul((const char * ) argv[1], (char **)NULL, (int) 0);
 800394a:	693b      	ldr	r3, [r7, #16]
 800394c:	3304      	adds	r3, #4
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	2200      	movs	r2, #0
 8003952:	2100      	movs	r1, #0
 8003954:	4618      	mov	r0, r3
 8003956:	f010 fdfb 	bl	8014550 <strtoul>
 800395a:	4603      	mov	r3, r0
 800395c:	62bb      	str	r3, [r7, #40]	; 0x28
  }
  addr   = (unsigned int *)strtoul((const char * ) argv[0], (char **)NULL, (int) 0);
 800395e:	693b      	ldr	r3, [r7, #16]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	2200      	movs	r2, #0
 8003964:	2100      	movs	r1, #0
 8003966:	4618      	mov	r0, r3
 8003968:	f010 fdf2 	bl	8014550 <strtoul>
 800396c:	4603      	mov	r3, r0
 800396e:	627b      	str	r3, [r7, #36]	; 0x24
  ascptr = (unsigned int *)addr;
 8003970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003972:	61bb      	str	r3, [r7, #24]

  cliPrintf("\n   ");
 8003974:	4833      	ldr	r0, [pc, #204]	; (8003a44 <cliMemoryDump+0x128>)
 8003976:	f7ff fe3f 	bl	80035f8 <cliPrintf>
  for (idx = 0; idx<size; idx++)
 800397a:	2300      	movs	r3, #0
 800397c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800397e:	e058      	b.n	8003a32 <cliMemoryDump+0x116>
  {
    if((idx%4) == 0)
 8003980:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003982:	f003 0303 	and.w	r3, r3, #3
 8003986:	2b00      	cmp	r3, #0
 8003988:	d104      	bne.n	8003994 <cliMemoryDump+0x78>
    {
      cliPrintf(" 0x%08X: ", (unsigned int)addr);
 800398a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800398c:	4619      	mov	r1, r3
 800398e:	482e      	ldr	r0, [pc, #184]	; (8003a48 <cliMemoryDump+0x12c>)
 8003990:	f7ff fe32 	bl	80035f8 <cliPrintf>
    }
    cliPrintf(" 0x%08X", *(addr));
 8003994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4619      	mov	r1, r3
 800399a:	482c      	ldr	r0, [pc, #176]	; (8003a4c <cliMemoryDump+0x130>)
 800399c:	f7ff fe2c 	bl	80035f8 <cliPrintf>

    if ((idx%4) == 3)
 80039a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039a2:	425a      	negs	r2, r3
 80039a4:	f003 0303 	and.w	r3, r3, #3
 80039a8:	f002 0203 	and.w	r2, r2, #3
 80039ac:	bf58      	it	pl
 80039ae:	4253      	negpl	r3, r2
 80039b0:	2b03      	cmp	r3, #3
 80039b2:	d138      	bne.n	8003a26 <cliMemoryDump+0x10a>
    {
      cliPrintf ("  |");
 80039b4:	4826      	ldr	r0, [pc, #152]	; (8003a50 <cliMemoryDump+0x134>)
 80039b6:	f7ff fe1f 	bl	80035f8 <cliPrintf>
      for (idx1= 0; idx1< 4; idx1++)
 80039ba:	2300      	movs	r3, #0
 80039bc:	623b      	str	r3, [r7, #32]
 80039be:	e02c      	b.n	8003a1a <cliMemoryDump+0xfe>
 80039c0:	69bb      	ldr	r3, [r7, #24]
 80039c2:	681b      	ldr	r3, [r3, #0]
      {
        memcpy((char *)asc, (char *)ascptr, 4);
 80039c4:	60fb      	str	r3, [r7, #12]
        for (i=0;i<4;i++)
 80039c6:	2300      	movs	r3, #0
 80039c8:	61fb      	str	r3, [r7, #28]
 80039ca:	e01d      	b.n	8003a08 <cliMemoryDump+0xec>
        {
          if (asc[i] > 0x1f && asc[i] < 0x7f)
 80039cc:	f107 020c 	add.w	r2, r7, #12
 80039d0:	69fb      	ldr	r3, [r7, #28]
 80039d2:	4413      	add	r3, r2
 80039d4:	781b      	ldrb	r3, [r3, #0]
 80039d6:	2b1f      	cmp	r3, #31
 80039d8:	d910      	bls.n	80039fc <cliMemoryDump+0xe0>
 80039da:	f107 020c 	add.w	r2, r7, #12
 80039de:	69fb      	ldr	r3, [r7, #28]
 80039e0:	4413      	add	r3, r2
 80039e2:	781b      	ldrb	r3, [r3, #0]
 80039e4:	2b7e      	cmp	r3, #126	; 0x7e
 80039e6:	d809      	bhi.n	80039fc <cliMemoryDump+0xe0>
          {
            cliPrintf("%c", asc[i]);
 80039e8:	f107 020c 	add.w	r2, r7, #12
 80039ec:	69fb      	ldr	r3, [r7, #28]
 80039ee:	4413      	add	r3, r2
 80039f0:	781b      	ldrb	r3, [r3, #0]
 80039f2:	4619      	mov	r1, r3
 80039f4:	4817      	ldr	r0, [pc, #92]	; (8003a54 <cliMemoryDump+0x138>)
 80039f6:	f7ff fdff 	bl	80035f8 <cliPrintf>
 80039fa:	e002      	b.n	8003a02 <cliMemoryDump+0xe6>
          }
          else
          {
            cliPrintf(".");
 80039fc:	4816      	ldr	r0, [pc, #88]	; (8003a58 <cliMemoryDump+0x13c>)
 80039fe:	f7ff fdfb 	bl	80035f8 <cliPrintf>
        for (i=0;i<4;i++)
 8003a02:	69fb      	ldr	r3, [r7, #28]
 8003a04:	3301      	adds	r3, #1
 8003a06:	61fb      	str	r3, [r7, #28]
 8003a08:	69fb      	ldr	r3, [r7, #28]
 8003a0a:	2b03      	cmp	r3, #3
 8003a0c:	ddde      	ble.n	80039cc <cliMemoryDump+0xb0>
          }
        }
        ascptr+=1;
 8003a0e:	69bb      	ldr	r3, [r7, #24]
 8003a10:	3304      	adds	r3, #4
 8003a12:	61bb      	str	r3, [r7, #24]
      for (idx1= 0; idx1< 4; idx1++)
 8003a14:	6a3b      	ldr	r3, [r7, #32]
 8003a16:	3301      	adds	r3, #1
 8003a18:	623b      	str	r3, [r7, #32]
 8003a1a:	6a3b      	ldr	r3, [r7, #32]
 8003a1c:	2b03      	cmp	r3, #3
 8003a1e:	ddcf      	ble.n	80039c0 <cliMemoryDump+0xa4>
      }
      cliPrintf("|\n   ");
 8003a20:	480e      	ldr	r0, [pc, #56]	; (8003a5c <cliMemoryDump+0x140>)
 8003a22:	f7ff fde9 	bl	80035f8 <cliPrintf>
    }
    addr++;
 8003a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a28:	3304      	adds	r3, #4
 8003a2a:	627b      	str	r3, [r7, #36]	; 0x24
  for (idx = 0; idx<size; idx++)
 8003a2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a2e:	3301      	adds	r3, #1
 8003a30:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a32:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003a34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a36:	429a      	cmp	r2, r3
 8003a38:	dba2      	blt.n	8003980 <cliMemoryDump+0x64>
  }
}
 8003a3a:	3730      	adds	r7, #48	; 0x30
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	bd80      	pop	{r7, pc}
 8003a40:	08016a68 	.word	0x08016a68
 8003a44:	08016a7c 	.word	0x08016a7c
 8003a48:	08016a84 	.word	0x08016a84
 8003a4c:	08016a90 	.word	0x08016a90
 8003a50:	08016a98 	.word	0x08016a98
 8003a54:	08016a9c 	.word	0x08016a9c
 8003a58:	08016aa0 	.word	0x08016aa0
 8003a5c:	08016aa4 	.word	0x08016aa4

08003a60 <fatfsInit>:
#ifdef _USE_HW_CLI
static void cliFatfs(cli_args_t *args);
#endif

bool fatfsInit(void)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b082      	sub	sp, #8
 8003a64:	af00      	add	r7, sp, #0
	bool ret = false;
 8003a66:	2300      	movs	r3, #0
 8003a68:	71fb      	strb	r3, [r7, #7]

	if(FATFS_LinkDriver(&SD_Driver, SDPath) == 0)
 8003a6a:	490d      	ldr	r1, [pc, #52]	; (8003aa0 <fatfsInit+0x40>)
 8003a6c:	480d      	ldr	r0, [pc, #52]	; (8003aa4 <fatfsInit+0x44>)
 8003a6e:	f00c ff9d 	bl	80109ac <FATFS_LinkDriver>
 8003a72:	4603      	mov	r3, r0
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d10a      	bne.n	8003a8e <fatfsInit+0x2e>
	{
		if(f_mount(&SDFatFs, (TCHAR const*)SDPath, 0) == FR_OK)
 8003a78:	2200      	movs	r2, #0
 8003a7a:	4909      	ldr	r1, [pc, #36]	; (8003aa0 <fatfsInit+0x40>)
 8003a7c:	480a      	ldr	r0, [pc, #40]	; (8003aa8 <fatfsInit+0x48>)
 8003a7e:	f00b fb8f 	bl	800f1a0 <f_mount>
 8003a82:	4603      	mov	r3, r0
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d102      	bne.n	8003a8e <fatfsInit+0x2e>
		{
			is_init = true;
 8003a88:	4b08      	ldr	r3, [pc, #32]	; (8003aac <fatfsInit+0x4c>)
 8003a8a:	2201      	movs	r2, #1
 8003a8c:	701a      	strb	r2, [r3, #0]
		}
	}

	#ifdef _USE_HW_CLI
		cliAdd("fatfs", cliFatfs);
 8003a8e:	4908      	ldr	r1, [pc, #32]	; (8003ab0 <fatfsInit+0x50>)
 8003a90:	4808      	ldr	r0, [pc, #32]	; (8003ab4 <fatfsInit+0x54>)
 8003a92:	f7ff fec1 	bl	8003818 <cliAdd>
	#endif

	return ret;
 8003a96:	79fb      	ldrb	r3, [r7, #7]
}
 8003a98:	4618      	mov	r0, r3
 8003a9a:	3708      	adds	r7, #8
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	bd80      	pop	{r7, pc}
 8003aa0:	20000e84 	.word	0x20000e84
 8003aa4:	08016eec 	.word	0x08016eec
 8003aa8:	20000c50 	.word	0x20000c50
 8003aac:	20000c4c 	.word	0x20000c4c
 8003ab0:	08003b8d 	.word	0x08003b8d
 8003ab4:	08016ab4 	.word	0x08016ab4

08003ab8 <fatfsDir>:


#ifdef _USE_HW_CLI

FRESULT fatfsDir(char *path)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b0d6      	sub	sp, #344	; 0x158
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8003ac2:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8003ac6:	6018      	str	r0, [r3, #0]
	FRESULT res;
	DIR dir;
	FILINFO fno;

	res = f_opendir(&dir, path);
 8003ac8:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8003acc:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8003ad0:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8003ad4:	6819      	ldr	r1, [r3, #0]
 8003ad6:	4610      	mov	r0, r2
 8003ad8:	f00c fadb 	bl	8010092 <f_opendir>
 8003adc:	4603      	mov	r3, r0
 8003ade:	f887 3157 	strb.w	r3, [r7, #343]	; 0x157
	if(res == FR_OK)
 8003ae2:	f897 3157 	ldrb.w	r3, [r7, #343]	; 0x157
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d144      	bne.n	8003b74 <fatfsDir+0xbc>
	{
		for(;;)
		{
			res = f_readdir(&dir, &fno);
 8003aea:	f107 0208 	add.w	r2, r7, #8
 8003aee:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8003af2:	4611      	mov	r1, r2
 8003af4:	4618      	mov	r0, r3
 8003af6:	f00c fb75 	bl	80101e4 <f_readdir>
 8003afa:	4603      	mov	r3, r0
 8003afc:	f887 3157 	strb.w	r3, [r7, #343]	; 0x157
			if(res != FR_OK || fno.fname[0] == 0)
 8003b00:	f897 3157 	ldrb.w	r3, [r7, #343]	; 0x157
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d130      	bne.n	8003b6a <fatfsDir+0xb2>
 8003b08:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8003b0c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003b10:	7d9b      	ldrb	r3, [r3, #22]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d029      	beq.n	8003b6a <fatfsDir+0xb2>
				break;

			if(fno.fattrib & AM_DIR)
 8003b16:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8003b1a:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003b1e:	7a1b      	ldrb	r3, [r3, #8]
 8003b20:	f003 0310 	and.w	r3, r3, #16
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d00c      	beq.n	8003b42 <fatfsDir+0x8a>
			{
				cliPrintf(" %s/%s \n", path, fno.fname);
 8003b28:	f107 0308 	add.w	r3, r7, #8
 8003b2c:	f103 0216 	add.w	r2, r3, #22
 8003b30:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8003b34:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8003b38:	6819      	ldr	r1, [r3, #0]
 8003b3a:	4812      	ldr	r0, [pc, #72]	; (8003b84 <fatfsDir+0xcc>)
 8003b3c:	f7ff fd5c 	bl	80035f8 <cliPrintf>
 8003b40:	e7d3      	b.n	8003aea <fatfsDir+0x32>
			}
			else
			{
				cliPrintf(" %s/%32s \t%d bytes\n", path, fno.fname, (int)fno.fsize);
 8003b42:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8003b46:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	f107 0308 	add.w	r3, r7, #8
 8003b52:	f103 0216 	add.w	r2, r3, #22
 8003b56:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8003b5a:	f5a3 71aa 	sub.w	r1, r3, #340	; 0x154
 8003b5e:	4603      	mov	r3, r0
 8003b60:	6809      	ldr	r1, [r1, #0]
 8003b62:	4809      	ldr	r0, [pc, #36]	; (8003b88 <fatfsDir+0xd0>)
 8003b64:	f7ff fd48 	bl	80035f8 <cliPrintf>
			res = f_readdir(&dir, &fno);
 8003b68:	e7bf      	b.n	8003aea <fatfsDir+0x32>
			}
		}

		f_closedir(&dir);
 8003b6a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8003b6e:	4618      	mov	r0, r3
 8003b70:	f00c fb12 	bl	8010198 <f_closedir>
	}

	return res;
 8003b74:	f897 3157 	ldrb.w	r3, [r7, #343]	; 0x157
}
 8003b78:	4618      	mov	r0, r3
 8003b7a:	f507 77ac 	add.w	r7, r7, #344	; 0x158
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bd80      	pop	{r7, pc}
 8003b82:	bf00      	nop
 8003b84:	08016abc 	.word	0x08016abc
 8003b88:	08016ac8 	.word	0x08016ac8

08003b8c <cliFatfs>:

void cliFatfs(cli_args_t *args)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	f5ad 7d1a 	sub.w	sp, sp, #616	; 0x268
 8003b92:	af00      	add	r7, sp, #0
 8003b94:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8003b98:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8003b9c:	6018      	str	r0, [r3, #0]
	bool ret = false;
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267

	if(args->argc == 1 && args->isStr(0, "info") == true)
 8003ba4:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8003ba8:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	881b      	ldrh	r3, [r3, #0]
 8003bb0:	2b01      	cmp	r3, #1
 8003bb2:	d14d      	bne.n	8003c50 <cliFatfs+0xc4>
 8003bb4:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8003bb8:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	695b      	ldr	r3, [r3, #20]
 8003bc0:	4990      	ldr	r1, [pc, #576]	; (8003e04 <cliFatfs+0x278>)
 8003bc2:	2000      	movs	r0, #0
 8003bc4:	4798      	blx	r3
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d041      	beq.n	8003c50 <cliFatfs+0xc4>
	{
		cliPrintf("fatfs init \t: %d\n", is_init);
 8003bcc:	4b8e      	ldr	r3, [pc, #568]	; (8003e08 <cliFatfs+0x27c>)
 8003bce:	781b      	ldrb	r3, [r3, #0]
 8003bd0:	4619      	mov	r1, r3
 8003bd2:	488e      	ldr	r0, [pc, #568]	; (8003e0c <cliFatfs+0x280>)
 8003bd4:	f7ff fd10 	bl	80035f8 <cliPrintf>

		if(is_init == true)
 8003bd8:	4b8b      	ldr	r3, [pc, #556]	; (8003e08 <cliFatfs+0x27c>)
 8003bda:	781b      	ldrb	r3, [r3, #0]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d034      	beq.n	8003c4a <cliFatfs+0xbe>
			FATFS *fs;
			DWORD fre_clust, fre_sect, tot_sect;
			FRESULT res;

			/* Get volume information and free clusters of drive 1 */
			res = f_getfree("", &fre_clust, &fs);
 8003be0:	f507 7211 	add.w	r2, r7, #580	; 0x244
 8003be4:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8003be8:	4619      	mov	r1, r3
 8003bea:	4889      	ldr	r0, [pc, #548]	; (8003e10 <cliFatfs+0x284>)
 8003bec:	f00c fb47 	bl	801027e <f_getfree>
 8003bf0:	4603      	mov	r3, r0
 8003bf2:	f887 325f 	strb.w	r3, [r7, #607]	; 0x25f
			if(res == FR_OK)
 8003bf6:	f897 325f 	ldrb.w	r3, [r7, #607]	; 0x25f
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d11f      	bne.n	8003c3e <cliFatfs+0xb2>
			{
				/* Get total sectors and free sectors */
				tot_sect = (fs->n_fatent - 2) * fs->csize;
 8003bfe:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8003c02:	699b      	ldr	r3, [r3, #24]
 8003c04:	3b02      	subs	r3, #2
 8003c06:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 8003c0a:	8952      	ldrh	r2, [r2, #10]
 8003c0c:	fb02 f303 	mul.w	r3, r2, r3
 8003c10:	f8c7 3258 	str.w	r3, [r7, #600]	; 0x258
				fre_sect = fre_clust * fs->csize;
 8003c14:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8003c18:	895b      	ldrh	r3, [r3, #10]
 8003c1a:	461a      	mov	r2, r3
 8003c1c:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 8003c20:	fb02 f303 	mul.w	r3, r2, r3
 8003c24:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254

				/* Print the free space (assuming 512 bytes/sector) */
				cliPrintf("%10lu KiB total drive space.\n%10lu KiB available.\n", tot_sect/2, fre_sect/2);
 8003c28:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 8003c2c:	0859      	lsrs	r1, r3, #1
 8003c2e:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8003c32:	085b      	lsrs	r3, r3, #1
 8003c34:	461a      	mov	r2, r3
 8003c36:	4877      	ldr	r0, [pc, #476]	; (8003e14 <cliFatfs+0x288>)
 8003c38:	f7ff fcde 	bl	80035f8 <cliPrintf>
 8003c3c:	e005      	b.n	8003c4a <cliFatfs+0xbe>
			}
			else
			{
				cliPrintf(" err : %d\n", res);
 8003c3e:	f897 325f 	ldrb.w	r3, [r7, #607]	; 0x25f
 8003c42:	4619      	mov	r1, r3
 8003c44:	4874      	ldr	r0, [pc, #464]	; (8003e18 <cliFatfs+0x28c>)
 8003c46:	f7ff fcd7 	bl	80035f8 <cliPrintf>
			}
		}

		ret = true;
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
	}

	if(args->argc == 1 && args->isStr(0, "dir") == true)
 8003c50:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8003c54:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	881b      	ldrh	r3, [r3, #0]
 8003c5c:	2b01      	cmp	r3, #1
 8003c5e:	d11e      	bne.n	8003c9e <cliFatfs+0x112>
 8003c60:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8003c64:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	695b      	ldr	r3, [r3, #20]
 8003c6c:	496b      	ldr	r1, [pc, #428]	; (8003e1c <cliFatfs+0x290>)
 8003c6e:	2000      	movs	r0, #0
 8003c70:	4798      	blx	r3
 8003c72:	4603      	mov	r3, r0
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d012      	beq.n	8003c9e <cliFatfs+0x112>
	{
		FRESULT res;

		res = fatfsDir("/");
 8003c78:	4869      	ldr	r0, [pc, #420]	; (8003e20 <cliFatfs+0x294>)
 8003c7a:	f7ff ff1d 	bl	8003ab8 <fatfsDir>
 8003c7e:	4603      	mov	r3, r0
 8003c80:	f887 3253 	strb.w	r3, [r7, #595]	; 0x253
		if(res != FR_OK)
 8003c84:	f897 3253 	ldrb.w	r3, [r7, #595]	; 0x253
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d005      	beq.n	8003c98 <cliFatfs+0x10c>
		{
			cliPrintf(" err : %d\n", res);
 8003c8c:	f897 3253 	ldrb.w	r3, [r7, #595]	; 0x253
 8003c90:	4619      	mov	r1, r3
 8003c92:	4861      	ldr	r0, [pc, #388]	; (8003e18 <cliFatfs+0x28c>)
 8003c94:	f7ff fcb0 	bl	80035f8 <cliPrintf>
		}

		ret = true;
 8003c98:	2301      	movs	r3, #1
 8003c9a:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
	}

	if(args->argc == 1 && args->isStr(0, "test") == true)
 8003c9e:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8003ca2:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	881b      	ldrh	r3, [r3, #0]
 8003caa:	2b01      	cmp	r3, #1
 8003cac:	f040 8095 	bne.w	8003dda <cliFatfs+0x24e>
 8003cb0:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8003cb4:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	695b      	ldr	r3, [r3, #20]
 8003cbc:	4959      	ldr	r1, [pc, #356]	; (8003e24 <cliFatfs+0x298>)
 8003cbe:	2000      	movs	r0, #0
 8003cc0:	4798      	blx	r3
 8003cc2:	4603      	mov	r3, r0
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	f000 8088 	beq.w	8003dda <cliFatfs+0x24e>
	{
		FRESULT fp_ret;
		FIL log_file;
		uint32_t pre_time;

		pre_time = millis();
 8003cca:	f7fe f823 	bl	8001d14 <millis>
 8003cce:	f8c7 024c 	str.w	r0, [r7, #588]	; 0x24c
		fp_ret = f_open(&log_file, "1.csv", FA_CREATE_ALWAYS | FA_WRITE | FA_READ);
 8003cd2:	f107 0308 	add.w	r3, r7, #8
 8003cd6:	220b      	movs	r2, #11
 8003cd8:	4953      	ldr	r1, [pc, #332]	; (8003e28 <cliFatfs+0x29c>)
 8003cda:	4618      	mov	r0, r3
 8003cdc:	f00b faa6 	bl	800f22c <f_open>
 8003ce0:	4603      	mov	r3, r0
 8003ce2:	f887 324b 	strb.w	r3, [r7, #587]	; 0x24b
		if(fp_ret == FR_OK)
 8003ce6:	f897 324b 	ldrb.w	r3, [r7, #587]	; 0x24b
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d165      	bne.n	8003dba <cliFatfs+0x22e>
		{
			f_printf(&log_file, "test1, ");
 8003cee:	f107 0308 	add.w	r3, r7, #8
 8003cf2:	494e      	ldr	r1, [pc, #312]	; (8003e2c <cliFatfs+0x2a0>)
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	f00c fbef 	bl	80104d8 <f_printf>
			f_printf(&log_file, "test2, ");
 8003cfa:	f107 0308 	add.w	r3, r7, #8
 8003cfe:	494c      	ldr	r1, [pc, #304]	; (8003e30 <cliFatfs+0x2a4>)
 8003d00:	4618      	mov	r0, r3
 8003d02:	f00c fbe9 	bl	80104d8 <f_printf>
			f_printf(&log_file, "test3, ");
 8003d06:	f107 0308 	add.w	r3, r7, #8
 8003d0a:	494a      	ldr	r1, [pc, #296]	; (8003e34 <cliFatfs+0x2a8>)
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	f00c fbe3 	bl	80104d8 <f_printf>
			f_printf(&log_file, ", ");
 8003d12:	f107 0308 	add.w	r3, r7, #8
 8003d16:	4948      	ldr	r1, [pc, #288]	; (8003e38 <cliFatfs+0x2ac>)
 8003d18:	4618      	mov	r0, r3
 8003d1a:	f00c fbdd 	bl	80104d8 <f_printf>
			f_printf(&log_file, "\n");
 8003d1e:	f107 0308 	add.w	r3, r7, #8
 8003d22:	4946      	ldr	r1, [pc, #280]	; (8003e3c <cliFatfs+0x2b0>)
 8003d24:	4618      	mov	r0, r3
 8003d26:	f00c fbd7 	bl	80104d8 <f_printf>

			for(int i=0; i<8; i++)
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
 8003d30:	e00c      	b.n	8003d4c <cliFatfs+0x1c0>
			{
				f_printf(&log_file, "%d \n", i);
 8003d32:	f107 0308 	add.w	r3, r7, #8
 8003d36:	f8d7 2260 	ldr.w	r2, [r7, #608]	; 0x260
 8003d3a:	4941      	ldr	r1, [pc, #260]	; (8003e40 <cliFatfs+0x2b4>)
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	f00c fbcb 	bl	80104d8 <f_printf>
			for(int i=0; i<8; i++)
 8003d42:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 8003d46:	3301      	adds	r3, #1
 8003d48:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
 8003d4c:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 8003d50:	2b07      	cmp	r3, #7
 8003d52:	ddee      	ble.n	8003d32 <cliFatfs+0x1a6>
			}

			f_rewind(&log_file);
 8003d54:	f107 0308 	add.w	r3, r7, #8
 8003d58:	2100      	movs	r1, #0
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	f00b ff90 	bl	800fc80 <f_lseek>


			UINT len;
			uint8_t data;

			while(cliKeepLoop())
 8003d60:	e01c      	b.n	8003d9c <cliFatfs+0x210>
			{
				len = 0;
 8003d62:	2300      	movs	r3, #0
 8003d64:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
				fp_ret = f_read(&log_file, &data, 1, &len);
 8003d68:	f507 730f 	add.w	r3, r7, #572	; 0x23c
 8003d6c:	f207 213b 	addw	r1, r7, #571	; 0x23b
 8003d70:	f107 0008 	add.w	r0, r7, #8
 8003d74:	2201      	movs	r2, #1
 8003d76:	f00b fc27 	bl	800f5c8 <f_read>
 8003d7a:	4603      	mov	r3, r0
 8003d7c:	f887 324b 	strb.w	r3, [r7, #587]	; 0x24b

				if(fp_ret != FR_OK)
 8003d80:	f897 324b 	ldrb.w	r3, [r7, #587]	; 0x24b
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d10f      	bne.n	8003da8 <cliFatfs+0x21c>
				{
					break;
				}

				if(len == 0)
 8003d88:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d00d      	beq.n	8003dac <cliFatfs+0x220>
				{
					break;
				}

				cliPrintf("%c", data);
 8003d90:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
 8003d94:	4619      	mov	r1, r3
 8003d96:	482b      	ldr	r0, [pc, #172]	; (8003e44 <cliFatfs+0x2b8>)
 8003d98:	f7ff fc2e 	bl	80035f8 <cliPrintf>
			while(cliKeepLoop())
 8003d9c:	f7ff fd26 	bl	80037ec <cliKeepLoop>
 8003da0:	4603      	mov	r3, r0
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d1dd      	bne.n	8003d62 <cliFatfs+0x1d6>
 8003da6:	e002      	b.n	8003dae <cliFatfs+0x222>
					break;
 8003da8:	bf00      	nop
 8003daa:	e000      	b.n	8003dae <cliFatfs+0x222>
					break;
 8003dac:	bf00      	nop
			}

			f_close(&log_file);
 8003dae:	f107 0308 	add.w	r3, r7, #8
 8003db2:	4618      	mov	r0, r3
 8003db4:	f00b ff3a 	bl	800fc2c <f_close>
 8003db8:	e002      	b.n	8003dc0 <cliFatfs+0x234>
		}
		else
		{
			cliPrintf("f_open fail\r\n");
 8003dba:	4823      	ldr	r0, [pc, #140]	; (8003e48 <cliFatfs+0x2bc>)
 8003dbc:	f7ff fc1c 	bl	80035f8 <cliPrintf>
		}

		cliPrintf("%d ms\r\n", millis() - pre_time);
 8003dc0:	f7fd ffa8 	bl	8001d14 <millis>
 8003dc4:	4602      	mov	r2, r0
 8003dc6:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8003dca:	1ad3      	subs	r3, r2, r3
 8003dcc:	4619      	mov	r1, r3
 8003dce:	481f      	ldr	r0, [pc, #124]	; (8003e4c <cliFatfs+0x2c0>)
 8003dd0:	f7ff fc12 	bl	80035f8 <cliPrintf>

		ret = true;
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
	}

	if(ret != true)
 8003dda:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8003dde:	f083 0301 	eor.w	r3, r3, #1
 8003de2:	b2db      	uxtb	r3, r3
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d008      	beq.n	8003dfa <cliFatfs+0x26e>
	{
		cliPrintf("fatfs info\n");
 8003de8:	4819      	ldr	r0, [pc, #100]	; (8003e50 <cliFatfs+0x2c4>)
 8003dea:	f7ff fc05 	bl	80035f8 <cliPrintf>
		cliPrintf("fatfs dir\n");
 8003dee:	4819      	ldr	r0, [pc, #100]	; (8003e54 <cliFatfs+0x2c8>)
 8003df0:	f7ff fc02 	bl	80035f8 <cliPrintf>
		cliPrintf("fatfs test\n");
 8003df4:	4818      	ldr	r0, [pc, #96]	; (8003e58 <cliFatfs+0x2cc>)
 8003df6:	f7ff fbff 	bl	80035f8 <cliPrintf>
	}
}
 8003dfa:	bf00      	nop
 8003dfc:	f507 771a 	add.w	r7, r7, #616	; 0x268
 8003e00:	46bd      	mov	sp, r7
 8003e02:	bd80      	pop	{r7, pc}
 8003e04:	08016adc 	.word	0x08016adc
 8003e08:	20000c4c 	.word	0x20000c4c
 8003e0c:	08016ae4 	.word	0x08016ae4
 8003e10:	08016af8 	.word	0x08016af8
 8003e14:	08016afc 	.word	0x08016afc
 8003e18:	08016b30 	.word	0x08016b30
 8003e1c:	08016b3c 	.word	0x08016b3c
 8003e20:	08016b40 	.word	0x08016b40
 8003e24:	08016b44 	.word	0x08016b44
 8003e28:	08016b4c 	.word	0x08016b4c
 8003e2c:	08016b54 	.word	0x08016b54
 8003e30:	08016b5c 	.word	0x08016b5c
 8003e34:	08016b64 	.word	0x08016b64
 8003e38:	08016b6c 	.word	0x08016b6c
 8003e3c:	08016b70 	.word	0x08016b70
 8003e40:	08016b74 	.word	0x08016b74
 8003e44:	08016b7c 	.word	0x08016b7c
 8003e48:	08016b80 	.word	0x08016b80
 8003e4c:	08016b90 	.word	0x08016b90
 8003e50:	08016b98 	.word	0x08016b98
 8003e54:	08016ba4 	.word	0x08016ba4
 8003e58:	08016bb0 	.word	0x08016bb0

08003e5c <gpioInit>:
static void cliGpio(cli_args_t *args);
#endif


bool gpioInit(void)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b082      	sub	sp, #8
 8003e60:	af00      	add	r7, sp, #0
	bool ret = true;
 8003e62:	2301      	movs	r3, #1
 8003e64:	71fb      	strb	r3, [r7, #7]

#ifdef _USE_HW_CLI
	cliAdd("gpio", cliGpio);
 8003e66:	4904      	ldr	r1, [pc, #16]	; (8003e78 <gpioInit+0x1c>)
 8003e68:	4804      	ldr	r0, [pc, #16]	; (8003e7c <gpioInit+0x20>)
 8003e6a:	f7ff fcd5 	bl	8003818 <cliAdd>
#endif

	return ret;
 8003e6e:	79fb      	ldrb	r3, [r7, #7]
}
 8003e70:	4618      	mov	r0, r3
 8003e72:	3708      	adds	r7, #8
 8003e74:	46bd      	mov	sp, r7
 8003e76:	bd80      	pop	{r7, pc}
 8003e78:	08003f95 	.word	0x08003f95
 8003e7c:	08016bbc 	.word	0x08016bbc

08003e80 <gpioPinWrite>:

	return ret;
}

void gpioPinWrite(uint8_t ch, bool value)
{
 8003e80:	b590      	push	{r4, r7, lr}
 8003e82:	b083      	sub	sp, #12
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	4603      	mov	r3, r0
 8003e88:	460a      	mov	r2, r1
 8003e8a:	71fb      	strb	r3, [r7, #7]
 8003e8c:	4613      	mov	r3, r2
 8003e8e:	71bb      	strb	r3, [r7, #6]
	if(ch >= GPIO_MAX_CH)
 8003e90:	79fb      	ldrb	r3, [r7, #7]
 8003e92:	2b03      	cmp	r3, #3
 8003e94:	d840      	bhi.n	8003f18 <gpioPinWrite+0x98>
	{
		return;
	}

	if(value)
 8003e96:	79bb      	ldrb	r3, [r7, #6]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d01e      	beq.n	8003eda <gpioPinWrite+0x5a>
	{
		HAL_GPIO_WritePin(gpio_tbl[ch].port, gpio_tbl[ch].pin, gpio_tbl[ch].on_state);
 8003e9c:	79fa      	ldrb	r2, [r7, #7]
 8003e9e:	4920      	ldr	r1, [pc, #128]	; (8003f20 <gpioPinWrite+0xa0>)
 8003ea0:	4613      	mov	r3, r2
 8003ea2:	005b      	lsls	r3, r3, #1
 8003ea4:	4413      	add	r3, r2
 8003ea6:	009b      	lsls	r3, r3, #2
 8003ea8:	440b      	add	r3, r1
 8003eaa:	6818      	ldr	r0, [r3, #0]
 8003eac:	79fa      	ldrb	r2, [r7, #7]
 8003eae:	491c      	ldr	r1, [pc, #112]	; (8003f20 <gpioPinWrite+0xa0>)
 8003eb0:	4613      	mov	r3, r2
 8003eb2:	005b      	lsls	r3, r3, #1
 8003eb4:	4413      	add	r3, r2
 8003eb6:	009b      	lsls	r3, r3, #2
 8003eb8:	440b      	add	r3, r1
 8003eba:	3304      	adds	r3, #4
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	b299      	uxth	r1, r3
 8003ec0:	79fa      	ldrb	r2, [r7, #7]
 8003ec2:	4c17      	ldr	r4, [pc, #92]	; (8003f20 <gpioPinWrite+0xa0>)
 8003ec4:	4613      	mov	r3, r2
 8003ec6:	005b      	lsls	r3, r3, #1
 8003ec8:	4413      	add	r3, r2
 8003eca:	009b      	lsls	r3, r3, #2
 8003ecc:	4423      	add	r3, r4
 8003ece:	3309      	adds	r3, #9
 8003ed0:	781b      	ldrb	r3, [r3, #0]
 8003ed2:	461a      	mov	r2, r3
 8003ed4:	f002 fe52 	bl	8006b7c <HAL_GPIO_WritePin>
 8003ed8:	e01f      	b.n	8003f1a <gpioPinWrite+0x9a>
	}
	else
	{
		HAL_GPIO_WritePin(gpio_tbl[ch].port, gpio_tbl[ch].pin, gpio_tbl[ch].off_state);
 8003eda:	79fa      	ldrb	r2, [r7, #7]
 8003edc:	4910      	ldr	r1, [pc, #64]	; (8003f20 <gpioPinWrite+0xa0>)
 8003ede:	4613      	mov	r3, r2
 8003ee0:	005b      	lsls	r3, r3, #1
 8003ee2:	4413      	add	r3, r2
 8003ee4:	009b      	lsls	r3, r3, #2
 8003ee6:	440b      	add	r3, r1
 8003ee8:	6818      	ldr	r0, [r3, #0]
 8003eea:	79fa      	ldrb	r2, [r7, #7]
 8003eec:	490c      	ldr	r1, [pc, #48]	; (8003f20 <gpioPinWrite+0xa0>)
 8003eee:	4613      	mov	r3, r2
 8003ef0:	005b      	lsls	r3, r3, #1
 8003ef2:	4413      	add	r3, r2
 8003ef4:	009b      	lsls	r3, r3, #2
 8003ef6:	440b      	add	r3, r1
 8003ef8:	3304      	adds	r3, #4
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	b299      	uxth	r1, r3
 8003efe:	79fa      	ldrb	r2, [r7, #7]
 8003f00:	4c07      	ldr	r4, [pc, #28]	; (8003f20 <gpioPinWrite+0xa0>)
 8003f02:	4613      	mov	r3, r2
 8003f04:	005b      	lsls	r3, r3, #1
 8003f06:	4413      	add	r3, r2
 8003f08:	009b      	lsls	r3, r3, #2
 8003f0a:	4423      	add	r3, r4
 8003f0c:	330a      	adds	r3, #10
 8003f0e:	781b      	ldrb	r3, [r3, #0]
 8003f10:	461a      	mov	r2, r3
 8003f12:	f002 fe33 	bl	8006b7c <HAL_GPIO_WritePin>
 8003f16:	e000      	b.n	8003f1a <gpioPinWrite+0x9a>
		return;
 8003f18:	bf00      	nop
	}
}
 8003f1a:	370c      	adds	r7, #12
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	bd90      	pop	{r4, r7, pc}
 8003f20:	08022f14 	.word	0x08022f14

08003f24 <gpioPinRead>:

bool gpioPinRead(uint8_t ch)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b084      	sub	sp, #16
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	4603      	mov	r3, r0
 8003f2c:	71fb      	strb	r3, [r7, #7]
	bool ret = false;
 8003f2e:	2300      	movs	r3, #0
 8003f30:	73fb      	strb	r3, [r7, #15]

	if(ch >= GPIO_MAX_CH)
 8003f32:	79fb      	ldrb	r3, [r7, #7]
 8003f34:	2b03      	cmp	r3, #3
 8003f36:	d901      	bls.n	8003f3c <gpioPinRead+0x18>
	{
		return false;
 8003f38:	2300      	movs	r3, #0
 8003f3a:	e024      	b.n	8003f86 <gpioPinRead+0x62>
	}

	if(HAL_GPIO_ReadPin(gpio_tbl[ch].port, gpio_tbl[ch].pin) == gpio_tbl[ch].on_state)
 8003f3c:	79fa      	ldrb	r2, [r7, #7]
 8003f3e:	4914      	ldr	r1, [pc, #80]	; (8003f90 <gpioPinRead+0x6c>)
 8003f40:	4613      	mov	r3, r2
 8003f42:	005b      	lsls	r3, r3, #1
 8003f44:	4413      	add	r3, r2
 8003f46:	009b      	lsls	r3, r3, #2
 8003f48:	440b      	add	r3, r1
 8003f4a:	6818      	ldr	r0, [r3, #0]
 8003f4c:	79fa      	ldrb	r2, [r7, #7]
 8003f4e:	4910      	ldr	r1, [pc, #64]	; (8003f90 <gpioPinRead+0x6c>)
 8003f50:	4613      	mov	r3, r2
 8003f52:	005b      	lsls	r3, r3, #1
 8003f54:	4413      	add	r3, r2
 8003f56:	009b      	lsls	r3, r3, #2
 8003f58:	440b      	add	r3, r1
 8003f5a:	3304      	adds	r3, #4
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	b29b      	uxth	r3, r3
 8003f60:	4619      	mov	r1, r3
 8003f62:	f002 fdf3 	bl	8006b4c <HAL_GPIO_ReadPin>
 8003f66:	4603      	mov	r3, r0
 8003f68:	4618      	mov	r0, r3
 8003f6a:	79fa      	ldrb	r2, [r7, #7]
 8003f6c:	4908      	ldr	r1, [pc, #32]	; (8003f90 <gpioPinRead+0x6c>)
 8003f6e:	4613      	mov	r3, r2
 8003f70:	005b      	lsls	r3, r3, #1
 8003f72:	4413      	add	r3, r2
 8003f74:	009b      	lsls	r3, r3, #2
 8003f76:	440b      	add	r3, r1
 8003f78:	3309      	adds	r3, #9
 8003f7a:	781b      	ldrb	r3, [r3, #0]
 8003f7c:	4298      	cmp	r0, r3
 8003f7e:	d101      	bne.n	8003f84 <gpioPinRead+0x60>
	{
		ret = true;
 8003f80:	2301      	movs	r3, #1
 8003f82:	73fb      	strb	r3, [r7, #15]
	}

	return ret;
 8003f84:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f86:	4618      	mov	r0, r3
 8003f88:	3710      	adds	r7, #16
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	bd80      	pop	{r7, pc}
 8003f8e:	bf00      	nop
 8003f90:	08022f14 	.word	0x08022f14

08003f94 <cliGpio>:


#ifdef _USE_HW_CLI

void cliGpio(cli_args_t *args)
{
 8003f94:	b590      	push	{r4, r7, lr}
 8003f96:	b087      	sub	sp, #28
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
	bool ret = false;
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	75fb      	strb	r3, [r7, #23]

	if(args->argc == 1 && args->isStr(0, "show") == true)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	881b      	ldrh	r3, [r3, #0]
 8003fa4:	2b01      	cmp	r3, #1
 8003fa6:	d129      	bne.n	8003ffc <cliGpio+0x68>
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	695b      	ldr	r3, [r3, #20]
 8003fac:	4948      	ldr	r1, [pc, #288]	; (80040d0 <cliGpio+0x13c>)
 8003fae:	2000      	movs	r0, #0
 8003fb0:	4798      	blx	r3
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d021      	beq.n	8003ffc <cliGpio+0x68>
	{
		while(cliKeepLoop())
 8003fb8:	e019      	b.n	8003fee <cliGpio+0x5a>
		{
			for(int i=0; i<GPIO_MAX_CH; i++)
 8003fba:	2300      	movs	r3, #0
 8003fbc:	613b      	str	r3, [r7, #16]
 8003fbe:	e00c      	b.n	8003fda <cliGpio+0x46>
			{
				cliPrintf("%d", gpioPinRead(i));
 8003fc0:	693b      	ldr	r3, [r7, #16]
 8003fc2:	b2db      	uxtb	r3, r3
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	f7ff ffad 	bl	8003f24 <gpioPinRead>
 8003fca:	4603      	mov	r3, r0
 8003fcc:	4619      	mov	r1, r3
 8003fce:	4841      	ldr	r0, [pc, #260]	; (80040d4 <cliGpio+0x140>)
 8003fd0:	f7ff fb12 	bl	80035f8 <cliPrintf>
			for(int i=0; i<GPIO_MAX_CH; i++)
 8003fd4:	693b      	ldr	r3, [r7, #16]
 8003fd6:	3301      	adds	r3, #1
 8003fd8:	613b      	str	r3, [r7, #16]
 8003fda:	693b      	ldr	r3, [r7, #16]
 8003fdc:	2b03      	cmp	r3, #3
 8003fde:	ddef      	ble.n	8003fc0 <cliGpio+0x2c>
			}
			cliPrintf("\n");
 8003fe0:	483d      	ldr	r0, [pc, #244]	; (80040d8 <cliGpio+0x144>)
 8003fe2:	f7ff fb09 	bl	80035f8 <cliPrintf>
			delay(300);
 8003fe6:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8003fea:	f7fd fe88 	bl	8001cfe <delay>
		while(cliKeepLoop())
 8003fee:	f7ff fbfd 	bl	80037ec <cliKeepLoop>
 8003ff2:	4603      	mov	r3, r0
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d1e0      	bne.n	8003fba <cliGpio+0x26>
		}

		ret = true;
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	75fb      	strb	r3, [r7, #23]
	}

	if(args->argc == 2 && args->isStr(0, "read") == true)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	881b      	ldrh	r3, [r3, #0]
 8004000:	2b02      	cmp	r3, #2
 8004002:	d124      	bne.n	800404e <cliGpio+0xba>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	695b      	ldr	r3, [r3, #20]
 8004008:	4934      	ldr	r1, [pc, #208]	; (80040dc <cliGpio+0x148>)
 800400a:	2000      	movs	r0, #0
 800400c:	4798      	blx	r3
 800400e:	4603      	mov	r3, r0
 8004010:	2b00      	cmp	r3, #0
 8004012:	d01c      	beq.n	800404e <cliGpio+0xba>
	{
		uint8_t ch;

		ch = (uint8_t)args->getData(1);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	689b      	ldr	r3, [r3, #8]
 8004018:	2001      	movs	r0, #1
 800401a:	4798      	blx	r3
 800401c:	4603      	mov	r3, r0
 800401e:	73fb      	strb	r3, [r7, #15]

		while(cliKeepLoop())
 8004020:	e00e      	b.n	8004040 <cliGpio+0xac>
		{
			cliPrintf("gpio read %d : %d\n", ch, gpioPinRead(ch));
 8004022:	7bfc      	ldrb	r4, [r7, #15]
 8004024:	7bfb      	ldrb	r3, [r7, #15]
 8004026:	4618      	mov	r0, r3
 8004028:	f7ff ff7c 	bl	8003f24 <gpioPinRead>
 800402c:	4603      	mov	r3, r0
 800402e:	461a      	mov	r2, r3
 8004030:	4621      	mov	r1, r4
 8004032:	482b      	ldr	r0, [pc, #172]	; (80040e0 <cliGpio+0x14c>)
 8004034:	f7ff fae0 	bl	80035f8 <cliPrintf>
			delay(300);
 8004038:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800403c:	f7fd fe5f 	bl	8001cfe <delay>
		while(cliKeepLoop())
 8004040:	f7ff fbd4 	bl	80037ec <cliKeepLoop>
 8004044:	4603      	mov	r3, r0
 8004046:	2b00      	cmp	r3, #0
 8004048:	d1eb      	bne.n	8004022 <cliGpio+0x8e>
		}

		ret = true;
 800404a:	2301      	movs	r3, #1
 800404c:	75fb      	strb	r3, [r7, #23]
	}

	if(args->argc == 3 && args->isStr(0, "write") == true)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	881b      	ldrh	r3, [r3, #0]
 8004052:	2b03      	cmp	r3, #3
 8004054:	d126      	bne.n	80040a4 <cliGpio+0x110>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	695b      	ldr	r3, [r3, #20]
 800405a:	4922      	ldr	r1, [pc, #136]	; (80040e4 <cliGpio+0x150>)
 800405c:	2000      	movs	r0, #0
 800405e:	4798      	blx	r3
 8004060:	4603      	mov	r3, r0
 8004062:	2b00      	cmp	r3, #0
 8004064:	d01e      	beq.n	80040a4 <cliGpio+0x110>
	{
		uint8_t ch;
		uint8_t data;

		ch = (uint8_t)args->getData(1);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	689b      	ldr	r3, [r3, #8]
 800406a:	2001      	movs	r0, #1
 800406c:	4798      	blx	r3
 800406e:	4603      	mov	r3, r0
 8004070:	73bb      	strb	r3, [r7, #14]
		data = (uint8_t)args->getData(2);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	689b      	ldr	r3, [r3, #8]
 8004076:	2002      	movs	r0, #2
 8004078:	4798      	blx	r3
 800407a:	4603      	mov	r3, r0
 800407c:	737b      	strb	r3, [r7, #13]

		gpioPinWrite(ch, data);
 800407e:	7b7b      	ldrb	r3, [r7, #13]
 8004080:	2b00      	cmp	r3, #0
 8004082:	bf14      	ite	ne
 8004084:	2301      	movne	r3, #1
 8004086:	2300      	moveq	r3, #0
 8004088:	b2da      	uxtb	r2, r3
 800408a:	7bbb      	ldrb	r3, [r7, #14]
 800408c:	4611      	mov	r1, r2
 800408e:	4618      	mov	r0, r3
 8004090:	f7ff fef6 	bl	8003e80 <gpioPinWrite>

		cliPrintf("gpio write %d : %d\n", ch, data);
 8004094:	7bbb      	ldrb	r3, [r7, #14]
 8004096:	7b7a      	ldrb	r2, [r7, #13]
 8004098:	4619      	mov	r1, r3
 800409a:	4813      	ldr	r0, [pc, #76]	; (80040e8 <cliGpio+0x154>)
 800409c:	f7ff faac 	bl	80035f8 <cliPrintf>

		ret = true;
 80040a0:	2301      	movs	r3, #1
 80040a2:	75fb      	strb	r3, [r7, #23]
	}

	if(ret != true)
 80040a4:	7dfb      	ldrb	r3, [r7, #23]
 80040a6:	f083 0301 	eor.w	r3, r3, #1
 80040aa:	b2db      	uxtb	r3, r3
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d00a      	beq.n	80040c6 <cliGpio+0x132>
	{
		cliPrintf("gpio show\n");
 80040b0:	480e      	ldr	r0, [pc, #56]	; (80040ec <cliGpio+0x158>)
 80040b2:	f7ff faa1 	bl	80035f8 <cliPrintf>
		cliPrintf("gpio read ch[0~%d]\n", GPIO_MAX_CH-1);
 80040b6:	2103      	movs	r1, #3
 80040b8:	480d      	ldr	r0, [pc, #52]	; (80040f0 <cliGpio+0x15c>)
 80040ba:	f7ff fa9d 	bl	80035f8 <cliPrintf>
		cliPrintf("gpio write ch[0~%d]\n", GPIO_MAX_CH-1);
 80040be:	2103      	movs	r1, #3
 80040c0:	480c      	ldr	r0, [pc, #48]	; (80040f4 <cliGpio+0x160>)
 80040c2:	f7ff fa99 	bl	80035f8 <cliPrintf>
	}
}
 80040c6:	bf00      	nop
 80040c8:	371c      	adds	r7, #28
 80040ca:	46bd      	mov	sp, r7
 80040cc:	bd90      	pop	{r4, r7, pc}
 80040ce:	bf00      	nop
 80040d0:	08016bc4 	.word	0x08016bc4
 80040d4:	08016bcc 	.word	0x08016bcc
 80040d8:	08016bd0 	.word	0x08016bd0
 80040dc:	08016bd4 	.word	0x08016bd4
 80040e0:	08016bdc 	.word	0x08016bdc
 80040e4:	08016bf0 	.word	0x08016bf0
 80040e8:	08016bf8 	.word	0x08016bf8
 80040ec:	08016c0c 	.word	0x08016c0c
 80040f0:	08016c18 	.word	0x08016c18
 80040f4:	08016c2c 	.word	0x08016c2c

080040f8 <TransferDoneISR>:
#ifdef _USE_HW_CLI
static void cliLcd(cli_args_t *args);
#endif

void TransferDoneISR(void)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	af00      	add	r7, sp, #0
	fps_time = millis() - fps_pre_time;
 80040fc:	f7fd fe0a 	bl	8001d14 <millis>
 8004100:	4602      	mov	r2, r0
 8004102:	4b0d      	ldr	r3, [pc, #52]	; (8004138 <TransferDoneISR+0x40>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	1ad3      	subs	r3, r2, r3
 8004108:	4a0c      	ldr	r2, [pc, #48]	; (800413c <TransferDoneISR+0x44>)
 800410a:	6013      	str	r3, [r2, #0]
	fps_pre_time = millis();
 800410c:	f7fd fe02 	bl	8001d14 <millis>
 8004110:	4603      	mov	r3, r0
 8004112:	4a09      	ldr	r2, [pc, #36]	; (8004138 <TransferDoneISR+0x40>)
 8004114:	6013      	str	r3, [r2, #0]

	if(fps_time > 0)
 8004116:	4b09      	ldr	r3, [pc, #36]	; (800413c <TransferDoneISR+0x44>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d007      	beq.n	800412e <TransferDoneISR+0x36>
	{
		fps_count = 1000 / fps_time;
 800411e:	4b07      	ldr	r3, [pc, #28]	; (800413c <TransferDoneISR+0x44>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004126:	fbb2 f3f3 	udiv	r3, r2, r3
 800412a:	4a05      	ldr	r2, [pc, #20]	; (8004140 <TransferDoneISR+0x48>)
 800412c:	6013      	str	r3, [r2, #0]
	}

	lcd_request_draw = false;
 800412e:	4b05      	ldr	r3, [pc, #20]	; (8004144 <TransferDoneISR+0x4c>)
 8004130:	2200      	movs	r2, #0
 8004132:	701a      	strb	r2, [r3, #0]
}
 8004134:	bf00      	nop
 8004136:	bd80      	pop	{r7, pc}
 8004138:	20000ea8 	.word	0x20000ea8
 800413c:	20000eac 	.word	0x20000eac
 8004140:	20000eb0 	.word	0x20000eb0
 8004144:	20000ea6 	.word	0x20000ea6

08004148 <lcdInit>:

bool lcdInit(void)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b084      	sub	sp, #16
 800414c:	af02      	add	r7, sp, #8
	backlight_value = 100;
 800414e:	4b27      	ldr	r3, [pc, #156]	; (80041ec <lcdInit+0xa4>)
 8004150:	2264      	movs	r2, #100	; 0x64
 8004152:	701a      	strb	r2, [r3, #0]

#ifdef _USE_HW_ST7735
	is_init = st7735Init();
 8004154:	f7fe f9d8 	bl	8002508 <st7735Init>
 8004158:	4603      	mov	r3, r0
 800415a:	461a      	mov	r2, r3
 800415c:	4b24      	ldr	r3, [pc, #144]	; (80041f0 <lcdInit+0xa8>)
 800415e:	701a      	strb	r2, [r3, #0]
	st7735InitDriver(&lcd);
 8004160:	4824      	ldr	r0, [pc, #144]	; (80041f4 <lcdInit+0xac>)
 8004162:	f7fe f9dd 	bl	8002520 <st7735InitDriver>
#endif

	lcd.setCallBack(TransferDoneISR);
 8004166:	4b23      	ldr	r3, [pc, #140]	; (80041f4 <lcdInit+0xac>)
 8004168:	695b      	ldr	r3, [r3, #20]
 800416a:	4823      	ldr	r0, [pc, #140]	; (80041f8 <lcdInit+0xb0>)
 800416c:	4798      	blx	r3

	for(int i=0; i<LCD_WIDTH*LCD_HEIGHT; i++)
 800416e:	2300      	movs	r3, #0
 8004170:	607b      	str	r3, [r7, #4]
 8004172:	e007      	b.n	8004184 <lcdInit+0x3c>
	{
		frame_buffer[0][i] = black;
 8004174:	4a21      	ldr	r2, [pc, #132]	; (80041fc <lcdInit+0xb4>)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2100      	movs	r1, #0
 800417a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(int i=0; i<LCD_WIDTH*LCD_HEIGHT; i++)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	3301      	adds	r3, #1
 8004182:	607b      	str	r3, [r7, #4]
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	f5b3 5f48 	cmp.w	r3, #12800	; 0x3200
 800418a:	dbf3      	blt.n	8004174 <lcdInit+0x2c>
	}

	memset(frame_buffer, 0x00, sizeof(frame_buffer));
 800418c:	f44f 42c8 	mov.w	r2, #25600	; 0x6400
 8004190:	2100      	movs	r1, #0
 8004192:	481a      	ldr	r0, [pc, #104]	; (80041fc <lcdInit+0xb4>)
 8004194:	f010 fb24 	bl	80147e0 <memset>

	p_draw_frame_buf = frame_buffer[frame_index];
 8004198:	4b19      	ldr	r3, [pc, #100]	; (8004200 <lcdInit+0xb8>)
 800419a:	781b      	ldrb	r3, [r3, #0]
 800419c:	461a      	mov	r2, r3
 800419e:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 80041a2:	fb02 f303 	mul.w	r3, r2, r3
 80041a6:	4a15      	ldr	r2, [pc, #84]	; (80041fc <lcdInit+0xb4>)
 80041a8:	4413      	add	r3, r2
 80041aa:	4a16      	ldr	r2, [pc, #88]	; (8004204 <lcdInit+0xbc>)
 80041ac:	6013      	str	r3, [r2, #0]

	lcdDrawFillRect(0, 0, LCD_WIDTH, LCD_HEIGHT, black);
 80041ae:	2300      	movs	r3, #0
 80041b0:	9300      	str	r3, [sp, #0]
 80041b2:	2350      	movs	r3, #80	; 0x50
 80041b4:	22a0      	movs	r2, #160	; 0xa0
 80041b6:	2100      	movs	r1, #0
 80041b8:	2000      	movs	r0, #0
 80041ba:	f000 f9e3 	bl	8004584 <lcdDrawFillRect>
	lcdUpdateDraw();
 80041be:	f000 f8cd 	bl	800435c <lcdUpdateDraw>
	lcdSetBackLight(100);
 80041c2:	2064      	movs	r0, #100	; 0x64
 80041c4:	f000 f824 	bl	8004210 <lcdSetBackLight>

	if(is_init != true)
 80041c8:	4b09      	ldr	r3, [pc, #36]	; (80041f0 <lcdInit+0xa8>)
 80041ca:	781b      	ldrb	r3, [r3, #0]
 80041cc:	f083 0301 	eor.w	r3, r3, #1
 80041d0:	b2db      	uxtb	r3, r3
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d001      	beq.n	80041da <lcdInit+0x92>
	{
		return false;
 80041d6:	2300      	movs	r3, #0
 80041d8:	e004      	b.n	80041e4 <lcdInit+0x9c>
	}

#ifdef _USE_HW_CLI
	cliAdd("lcd", cliLcd);
 80041da:	490b      	ldr	r1, [pc, #44]	; (8004208 <lcdInit+0xc0>)
 80041dc:	480b      	ldr	r0, [pc, #44]	; (800420c <lcdInit+0xc4>)
 80041de:	f7ff fb1b 	bl	8003818 <cliAdd>
#endif

	return true;
 80041e2:	2301      	movs	r3, #1
}
 80041e4:	4618      	mov	r0, r3
 80041e6:	3708      	adds	r7, #8
 80041e8:	46bd      	mov	sp, r7
 80041ea:	bd80      	pop	{r7, pc}
 80041ec:	2000006c 	.word	0x2000006c
 80041f0:	20000ea4 	.word	0x20000ea4
 80041f4:	20000e88 	.word	0x20000e88
 80041f8:	080040f9 	.word	0x080040f9
 80041fc:	20000ec0 	.word	0x20000ec0
 8004200:	20000ea5 	.word	0x20000ea5
 8004204:	20000eb4 	.word	0x20000eb4
 8004208:	080049a5 	.word	0x080049a5
 800420c:	08022f44 	.word	0x08022f44

08004210 <lcdSetBackLight>:
{
	return backlight_value;
}

void lcdSetBackLight(uint8_t value)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	b082      	sub	sp, #8
 8004214:	af00      	add	r7, sp, #0
 8004216:	4603      	mov	r3, r0
 8004218:	71fb      	strb	r3, [r7, #7]
	value = constrain(value, 0, 100);
 800421a:	79fb      	ldrb	r3, [r7, #7]
 800421c:	2b64      	cmp	r3, #100	; 0x64
 800421e:	bf28      	it	cs
 8004220:	2364      	movcs	r3, #100	; 0x64
 8004222:	71fb      	strb	r3, [r7, #7]

	if(value != backlight_value)
 8004224:	4b0c      	ldr	r3, [pc, #48]	; (8004258 <lcdSetBackLight+0x48>)
 8004226:	781b      	ldrb	r3, [r3, #0]
 8004228:	79fa      	ldrb	r2, [r7, #7]
 800422a:	429a      	cmp	r2, r3
 800422c:	d002      	beq.n	8004234 <lcdSetBackLight+0x24>
	{
		backlight_value = value;
 800422e:	4a0a      	ldr	r2, [pc, #40]	; (8004258 <lcdSetBackLight+0x48>)
 8004230:	79fb      	ldrb	r3, [r7, #7]
 8004232:	7013      	strb	r3, [r2, #0]
	}

	if(backlight_value > 0)
 8004234:	4b08      	ldr	r3, [pc, #32]	; (8004258 <lcdSetBackLight+0x48>)
 8004236:	781b      	ldrb	r3, [r3, #0]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d004      	beq.n	8004246 <lcdSetBackLight+0x36>
	{
		gpioPinWrite(_PIN_DEF_BL_CTL, _DEF_HIGH);
 800423c:	2101      	movs	r1, #1
 800423e:	2001      	movs	r0, #1
 8004240:	f7ff fe1e 	bl	8003e80 <gpioPinWrite>
	}
	else
	{
		gpioPinWrite(_PIN_DEF_BL_CTL, _DEF_LOW);
	}
}
 8004244:	e003      	b.n	800424e <lcdSetBackLight+0x3e>
		gpioPinWrite(_PIN_DEF_BL_CTL, _DEF_LOW);
 8004246:	2100      	movs	r1, #0
 8004248:	2001      	movs	r0, #1
 800424a:	f7ff fe19 	bl	8003e80 <gpioPinWrite>
}
 800424e:	bf00      	nop
 8004250:	3708      	adds	r7, #8
 8004252:	46bd      	mov	sp, r7
 8004254:	bd80      	pop	{r7, pc}
 8004256:	bf00      	nop
 8004258:	2000006c 	.word	0x2000006c

0800425c <lcdDrawPixel>:
	return p_draw_frame_buf[y_pos * LCD_WIDTH + x_pos];
}

LCD_OPT_DEF void lcdDrawPixel(uint16_t x_pos, uint16_t y_pos, uint32_t rgb_code)
{
	p_draw_frame_buf[y_pos * LCD_WIDTH + x_pos] = rgb_code;
 800425c:	4b04      	ldr	r3, [pc, #16]	; (8004270 <lcdDrawPixel+0x14>)
 800425e:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	eb00 1041 	add.w	r0, r0, r1, lsl #5
 8004268:	f823 2010 	strh.w	r2, [r3, r0, lsl #1]
}
 800426c:	4770      	bx	lr
 800426e:	bf00      	nop
 8004270:	20000eb4 	.word	0x20000eb4

08004274 <lcdClearBuffer>:
	lcdClearBuffer(rgb_code);
	lcdUpdateDraw();
}

LCD_OPT_DEF void lcdClearBuffer(uint32_t rgb_code)
{
 8004274:	b510      	push	{r4, lr}
 8004276:	4604      	mov	r4, r0
	uint16_t *p_buf = lcdGetFrameBuffer();
 8004278:	f000 f89c 	bl	80043b4 <lcdGetFrameBuffer>
 800427c:	f500 41c7 	add.w	r1, r0, #25472	; 0x6380

	for(int i=0; i<LCD_WIDTH * LCD_HEIGHT; i++)
	{
		p_buf[i] = rgb_code;
 8004280:	b2a2      	uxth	r2, r4
 8004282:	1e83      	subs	r3, r0, #2
 8004284:	317e      	adds	r1, #126	; 0x7e
 8004286:	f823 2f02 	strh.w	r2, [r3, #2]!
	for(int i=0; i<LCD_WIDTH * LCD_HEIGHT; i++)
 800428a:	428b      	cmp	r3, r1
 800428c:	d1fb      	bne.n	8004286 <lcdClearBuffer+0x12>
	}
}
 800428e:	bd10      	pop	{r4, pc}

08004290 <lcdGetFps>:
		lcdDrawLine(x1, y1, line[i].x, line[i].y, color);
	}
}

uint32_t lcdGetFps(void)
{
 8004290:	b480      	push	{r7}
 8004292:	af00      	add	r7, sp, #0
	return fps_count;
 8004294:	4b03      	ldr	r3, [pc, #12]	; (80042a4 <lcdGetFps+0x14>)
 8004296:	681b      	ldr	r3, [r3, #0]
}
 8004298:	4618      	mov	r0, r3
 800429a:	46bd      	mov	sp, r7
 800429c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a0:	4770      	bx	lr
 80042a2:	bf00      	nop
 80042a4:	20000eb0 	.word	0x20000eb0

080042a8 <lcdGetFpsTime>:

uint32_t lcdGetFpsTime(void)
{
 80042a8:	b480      	push	{r7}
 80042aa:	af00      	add	r7, sp, #0
	return fps_time;
 80042ac:	4b03      	ldr	r3, [pc, #12]	; (80042bc <lcdGetFpsTime+0x14>)
 80042ae:	681b      	ldr	r3, [r3, #0]
}
 80042b0:	4618      	mov	r0, r3
 80042b2:	46bd      	mov	sp, r7
 80042b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b8:	4770      	bx	lr
 80042ba:	bf00      	nop
 80042bc:	20000eac 	.word	0x20000eac

080042c0 <lcdDrawAvailable>:

bool lcdDrawAvailable(void)
{
 80042c0:	b480      	push	{r7}
 80042c2:	af00      	add	r7, sp, #0
	return !lcd_request_draw;
 80042c4:	4b08      	ldr	r3, [pc, #32]	; (80042e8 <lcdDrawAvailable+0x28>)
 80042c6:	781b      	ldrb	r3, [r3, #0]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	bf14      	ite	ne
 80042cc:	2301      	movne	r3, #1
 80042ce:	2300      	moveq	r3, #0
 80042d0:	b2db      	uxtb	r3, r3
 80042d2:	f083 0301 	eor.w	r3, r3, #1
 80042d6:	b2db      	uxtb	r3, r3
 80042d8:	f003 0301 	and.w	r3, r3, #1
 80042dc:	b2db      	uxtb	r3, r3
}
 80042de:	4618      	mov	r0, r3
 80042e0:	46bd      	mov	sp, r7
 80042e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e6:	4770      	bx	lr
 80042e8:	20000ea6 	.word	0x20000ea6

080042ec <lcdRequestDraw>:

bool lcdRequestDraw(void)
{
 80042ec:	b598      	push	{r3, r4, r7, lr}
 80042ee:	af00      	add	r7, sp, #0
	if(is_init != true)
 80042f0:	4b15      	ldr	r3, [pc, #84]	; (8004348 <lcdRequestDraw+0x5c>)
 80042f2:	781b      	ldrb	r3, [r3, #0]
 80042f4:	f083 0301 	eor.w	r3, r3, #1
 80042f8:	b2db      	uxtb	r3, r3
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d001      	beq.n	8004302 <lcdRequestDraw+0x16>
	{
		return false;
 80042fe:	2300      	movs	r3, #0
 8004300:	e01f      	b.n	8004342 <lcdRequestDraw+0x56>
	}
	if(lcd_request_draw == true)
 8004302:	4b12      	ldr	r3, [pc, #72]	; (800434c <lcdRequestDraw+0x60>)
 8004304:	781b      	ldrb	r3, [r3, #0]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d001      	beq.n	800430e <lcdRequestDraw+0x22>
	{
		return false;
 800430a:	2300      	movs	r3, #0
 800430c:	e019      	b.n	8004342 <lcdRequestDraw+0x56>
	}

	lcd.setWindow(0, 0, LCD_WIDTH - 1, LCD_HEIGHT - 1);
 800430e:	4b10      	ldr	r3, [pc, #64]	; (8004350 <lcdRequestDraw+0x64>)
 8004310:	689c      	ldr	r4, [r3, #8]
 8004312:	234f      	movs	r3, #79	; 0x4f
 8004314:	229f      	movs	r2, #159	; 0x9f
 8004316:	2100      	movs	r1, #0
 8004318:	2000      	movs	r0, #0
 800431a:	47a0      	blx	r4

	lcd_request_draw = true;
 800431c:	4b0b      	ldr	r3, [pc, #44]	; (800434c <lcdRequestDraw+0x60>)
 800431e:	2201      	movs	r2, #1
 8004320:	701a      	strb	r2, [r3, #0]
	lcd.sendBuffer((uint8_t *)frame_buffer[frame_index], LCD_WIDTH * LCD_HEIGHT, 0);
 8004322:	4b0b      	ldr	r3, [pc, #44]	; (8004350 <lcdRequestDraw+0x64>)
 8004324:	699b      	ldr	r3, [r3, #24]
 8004326:	4a0b      	ldr	r2, [pc, #44]	; (8004354 <lcdRequestDraw+0x68>)
 8004328:	7812      	ldrb	r2, [r2, #0]
 800432a:	4611      	mov	r1, r2
 800432c:	f44f 42c8 	mov.w	r2, #25600	; 0x6400
 8004330:	fb01 f202 	mul.w	r2, r1, r2
 8004334:	4908      	ldr	r1, [pc, #32]	; (8004358 <lcdRequestDraw+0x6c>)
 8004336:	1850      	adds	r0, r2, r1
 8004338:	2200      	movs	r2, #0
 800433a:	f44f 5148 	mov.w	r1, #12800	; 0x3200
 800433e:	4798      	blx	r3

	return true;
 8004340:	2301      	movs	r3, #1
}
 8004342:	4618      	mov	r0, r3
 8004344:	bd98      	pop	{r3, r4, r7, pc}
 8004346:	bf00      	nop
 8004348:	20000ea4 	.word	0x20000ea4
 800434c:	20000ea6 	.word	0x20000ea6
 8004350:	20000e88 	.word	0x20000e88
 8004354:	20000ea5 	.word	0x20000ea5
 8004358:	20000ec0 	.word	0x20000ec0

0800435c <lcdUpdateDraw>:

void lcdUpdateDraw(void)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b082      	sub	sp, #8
 8004360:	af00      	add	r7, sp, #0
	uint32_t pre_time;

	if(is_init != true)
 8004362:	4b13      	ldr	r3, [pc, #76]	; (80043b0 <lcdUpdateDraw+0x54>)
 8004364:	781b      	ldrb	r3, [r3, #0]
 8004366:	f083 0301 	eor.w	r3, r3, #1
 800436a:	b2db      	uxtb	r3, r3
 800436c:	2b00      	cmp	r3, #0
 800436e:	d118      	bne.n	80043a2 <lcdUpdateDraw+0x46>
	{
		return;
	}

	lcdRequestDraw();
 8004370:	f7ff ffbc 	bl	80042ec <lcdRequestDraw>

	pre_time = millis();
 8004374:	f7fd fcce 	bl	8001d14 <millis>
 8004378:	6078      	str	r0, [r7, #4]
	while(lcdDrawAvailable() != true)
 800437a:	e009      	b.n	8004390 <lcdUpdateDraw+0x34>
	{
		delay(1);
 800437c:	2001      	movs	r0, #1
 800437e:	f7fd fcbe 	bl	8001cfe <delay>
		if(millis() - pre_time >= 100)
 8004382:	f7fd fcc7 	bl	8001d14 <millis>
 8004386:	4602      	mov	r2, r0
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	1ad3      	subs	r3, r2, r3
 800438c:	2b63      	cmp	r3, #99	; 0x63
 800438e:	d80a      	bhi.n	80043a6 <lcdUpdateDraw+0x4a>
	while(lcdDrawAvailable() != true)
 8004390:	f7ff ff96 	bl	80042c0 <lcdDrawAvailable>
 8004394:	4603      	mov	r3, r0
 8004396:	f083 0301 	eor.w	r3, r3, #1
 800439a:	b2db      	uxtb	r3, r3
 800439c:	2b00      	cmp	r3, #0
 800439e:	d1ed      	bne.n	800437c <lcdUpdateDraw+0x20>
 80043a0:	e002      	b.n	80043a8 <lcdUpdateDraw+0x4c>
		return;
 80043a2:	bf00      	nop
 80043a4:	e000      	b.n	80043a8 <lcdUpdateDraw+0x4c>
		{
			break;
 80043a6:	bf00      	nop
		}
	}
}
 80043a8:	3708      	adds	r7, #8
 80043aa:	46bd      	mov	sp, r7
 80043ac:	bd80      	pop	{r7, pc}
 80043ae:	bf00      	nop
 80043b0:	20000ea4 	.word	0x20000ea4

080043b4 <lcdGetFrameBuffer>:

	lcd.setWindow(x, y, w, h);
}

uint16_t *lcdGetFrameBuffer(void)
{
 80043b4:	b480      	push	{r7}
 80043b6:	af00      	add	r7, sp, #0
	return (uint16_t *)p_draw_frame_buf;
 80043b8:	4b03      	ldr	r3, [pc, #12]	; (80043c8 <lcdGetFrameBuffer+0x14>)
 80043ba:	681b      	ldr	r3, [r3, #0]
}
 80043bc:	4618      	mov	r0, r3
 80043be:	46bd      	mov	sp, r7
 80043c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c4:	4770      	bx	lr
 80043c6:	bf00      	nop
 80043c8:	20000eb4 	.word	0x20000eb4

080043cc <lcdDrawLine>:
{
	return LCD_HEIGHT;
}

void lcdDrawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color)
{
 80043cc:	b590      	push	{r4, r7, lr}
 80043ce:	b089      	sub	sp, #36	; 0x24
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	4604      	mov	r4, r0
 80043d4:	4608      	mov	r0, r1
 80043d6:	4611      	mov	r1, r2
 80043d8:	461a      	mov	r2, r3
 80043da:	4623      	mov	r3, r4
 80043dc:	80fb      	strh	r3, [r7, #6]
 80043de:	4603      	mov	r3, r0
 80043e0:	80bb      	strh	r3, [r7, #4]
 80043e2:	460b      	mov	r3, r1
 80043e4:	807b      	strh	r3, [r7, #2]
 80043e6:	4613      	mov	r3, r2
 80043e8:	803b      	strh	r3, [r7, #0]
	int16_t steep = abs(y1 - y0) > abs(x1 - x0);
 80043ea:	f9b7 2000 	ldrsh.w	r2, [r7]
 80043ee:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80043f2:	1ad3      	subs	r3, r2, r3
 80043f4:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80043f8:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80043fc:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8004400:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004404:	1acb      	subs	r3, r1, r3
 8004406:	2b00      	cmp	r3, #0
 8004408:	bfb8      	it	lt
 800440a:	425b      	neglt	r3, r3
 800440c:	429a      	cmp	r2, r3
 800440e:	bfcc      	ite	gt
 8004410:	2301      	movgt	r3, #1
 8004412:	2300      	movle	r3, #0
 8004414:	b2db      	uxtb	r3, r3
 8004416:	837b      	strh	r3, [r7, #26]

	if(x0 < 0) x0 = 0;
 8004418:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800441c:	2b00      	cmp	r3, #0
 800441e:	da01      	bge.n	8004424 <lcdDrawLine+0x58>
 8004420:	2300      	movs	r3, #0
 8004422:	80fb      	strh	r3, [r7, #6]
	if(y0 < 0) y0 = 0;
 8004424:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004428:	2b00      	cmp	r3, #0
 800442a:	da01      	bge.n	8004430 <lcdDrawLine+0x64>
 800442c:	2300      	movs	r3, #0
 800442e:	80bb      	strh	r3, [r7, #4]
	if(x1 < 0) x1 = 0;
 8004430:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004434:	2b00      	cmp	r3, #0
 8004436:	da01      	bge.n	800443c <lcdDrawLine+0x70>
 8004438:	2300      	movs	r3, #0
 800443a:	807b      	strh	r3, [r7, #2]
	if(y1 < 0) y1 = 0;
 800443c:	f9b7 3000 	ldrsh.w	r3, [r7]
 8004440:	2b00      	cmp	r3, #0
 8004442:	da01      	bge.n	8004448 <lcdDrawLine+0x7c>
 8004444:	2300      	movs	r3, #0
 8004446:	803b      	strh	r3, [r7, #0]

	if(steep)
 8004448:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d00b      	beq.n	8004468 <lcdDrawLine+0x9c>
	{
		_swap_int16_t(x0, y0);
 8004450:	88fb      	ldrh	r3, [r7, #6]
 8004452:	833b      	strh	r3, [r7, #24]
 8004454:	88bb      	ldrh	r3, [r7, #4]
 8004456:	80fb      	strh	r3, [r7, #6]
 8004458:	8b3b      	ldrh	r3, [r7, #24]
 800445a:	80bb      	strh	r3, [r7, #4]
		_swap_int16_t(x1, y1);
 800445c:	887b      	ldrh	r3, [r7, #2]
 800445e:	82fb      	strh	r3, [r7, #22]
 8004460:	883b      	ldrh	r3, [r7, #0]
 8004462:	807b      	strh	r3, [r7, #2]
 8004464:	8afb      	ldrh	r3, [r7, #22]
 8004466:	803b      	strh	r3, [r7, #0]
	}

	if(x0 > x1)
 8004468:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800446c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004470:	429a      	cmp	r2, r3
 8004472:	dd0b      	ble.n	800448c <lcdDrawLine+0xc0>
	{
		_swap_int16_t(x0, x1);
 8004474:	88fb      	ldrh	r3, [r7, #6]
 8004476:	82bb      	strh	r3, [r7, #20]
 8004478:	887b      	ldrh	r3, [r7, #2]
 800447a:	80fb      	strh	r3, [r7, #6]
 800447c:	8abb      	ldrh	r3, [r7, #20]
 800447e:	807b      	strh	r3, [r7, #2]
		_swap_int16_t(y0, y1);
 8004480:	88bb      	ldrh	r3, [r7, #4]
 8004482:	827b      	strh	r3, [r7, #18]
 8004484:	883b      	ldrh	r3, [r7, #0]
 8004486:	80bb      	strh	r3, [r7, #4]
 8004488:	8a7b      	ldrh	r3, [r7, #18]
 800448a:	803b      	strh	r3, [r7, #0]
	}

	int16_t dx, dy;
	dx = x1 - x0;
 800448c:	887a      	ldrh	r2, [r7, #2]
 800448e:	88fb      	ldrh	r3, [r7, #6]
 8004490:	1ad3      	subs	r3, r2, r3
 8004492:	b29b      	uxth	r3, r3
 8004494:	823b      	strh	r3, [r7, #16]
	dy = abs(y1 - y0);
 8004496:	f9b7 2000 	ldrsh.w	r2, [r7]
 800449a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800449e:	1ad3      	subs	r3, r2, r3
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	bfb8      	it	lt
 80044a4:	425b      	neglt	r3, r3
 80044a6:	81fb      	strh	r3, [r7, #14]

	int16_t err = dx / 2;
 80044a8:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80044ac:	0fda      	lsrs	r2, r3, #31
 80044ae:	4413      	add	r3, r2
 80044b0:	105b      	asrs	r3, r3, #1
 80044b2:	83fb      	strh	r3, [r7, #30]
	int16_t ystep;

	if(y0 < y1)
 80044b4:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80044b8:	f9b7 3000 	ldrsh.w	r3, [r7]
 80044bc:	429a      	cmp	r2, r3
 80044be:	da02      	bge.n	80044c6 <lcdDrawLine+0xfa>
	{
		ystep = 1;
 80044c0:	2301      	movs	r3, #1
 80044c2:	83bb      	strh	r3, [r7, #28]
 80044c4:	e02d      	b.n	8004522 <lcdDrawLine+0x156>
	}
	else
	{
		ystep = -1;
 80044c6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80044ca:	83bb      	strh	r3, [r7, #28]
	}

	for(; x0<x1; x0++)
 80044cc:	e029      	b.n	8004522 <lcdDrawLine+0x156>
	{
		if(steep)
 80044ce:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d006      	beq.n	80044e4 <lcdDrawLine+0x118>
		{
			lcdDrawPixel(y0, x0, color);
 80044d6:	88bb      	ldrh	r3, [r7, #4]
 80044d8:	88f9      	ldrh	r1, [r7, #6]
 80044da:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 80044dc:	4618      	mov	r0, r3
 80044de:	f7ff febd 	bl	800425c <lcdDrawPixel>
 80044e2:	e005      	b.n	80044f0 <lcdDrawLine+0x124>
		}
		else
		{
			lcdDrawPixel(x0, y0, color);
 80044e4:	88fb      	ldrh	r3, [r7, #6]
 80044e6:	88b9      	ldrh	r1, [r7, #4]
 80044e8:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 80044ea:	4618      	mov	r0, r3
 80044ec:	f7ff feb6 	bl	800425c <lcdDrawPixel>
		}

		err -= dy;
 80044f0:	8bfa      	ldrh	r2, [r7, #30]
 80044f2:	89fb      	ldrh	r3, [r7, #14]
 80044f4:	1ad3      	subs	r3, r2, r3
 80044f6:	b29b      	uxth	r3, r3
 80044f8:	83fb      	strh	r3, [r7, #30]
		if(err < 0)
 80044fa:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	da09      	bge.n	8004516 <lcdDrawLine+0x14a>
		{
			y0 += ystep;
 8004502:	88ba      	ldrh	r2, [r7, #4]
 8004504:	8bbb      	ldrh	r3, [r7, #28]
 8004506:	4413      	add	r3, r2
 8004508:	b29b      	uxth	r3, r3
 800450a:	80bb      	strh	r3, [r7, #4]
			err += dx;
 800450c:	8bfa      	ldrh	r2, [r7, #30]
 800450e:	8a3b      	ldrh	r3, [r7, #16]
 8004510:	4413      	add	r3, r2
 8004512:	b29b      	uxth	r3, r3
 8004514:	83fb      	strh	r3, [r7, #30]
	for(; x0<x1; x0++)
 8004516:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800451a:	b29b      	uxth	r3, r3
 800451c:	3301      	adds	r3, #1
 800451e:	b29b      	uxth	r3, r3
 8004520:	80fb      	strh	r3, [r7, #6]
 8004522:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004526:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800452a:	429a      	cmp	r2, r3
 800452c:	dbcf      	blt.n	80044ce <lcdDrawLine+0x102>
		}
	}
}
 800452e:	bf00      	nop
 8004530:	bf00      	nop
 8004532:	3724      	adds	r7, #36	; 0x24
 8004534:	46bd      	mov	sp, r7
 8004536:	bd90      	pop	{r4, r7, pc}

08004538 <lcdDrawVLine>:
		}
	}
}

void lcdDrawVLine(int16_t x, int16_t y, int16_t h, uint16_t color)
{
 8004538:	b590      	push	{r4, r7, lr}
 800453a:	b085      	sub	sp, #20
 800453c:	af02      	add	r7, sp, #8
 800453e:	4604      	mov	r4, r0
 8004540:	4608      	mov	r0, r1
 8004542:	4611      	mov	r1, r2
 8004544:	461a      	mov	r2, r3
 8004546:	4623      	mov	r3, r4
 8004548:	80fb      	strh	r3, [r7, #6]
 800454a:	4603      	mov	r3, r0
 800454c:	80bb      	strh	r3, [r7, #4]
 800454e:	460b      	mov	r3, r1
 8004550:	807b      	strh	r3, [r7, #2]
 8004552:	4613      	mov	r3, r2
 8004554:	803b      	strh	r3, [r7, #0]
	lcdDrawLine(x, y, x, y+h-1, color);
 8004556:	88ba      	ldrh	r2, [r7, #4]
 8004558:	887b      	ldrh	r3, [r7, #2]
 800455a:	4413      	add	r3, r2
 800455c:	b29b      	uxth	r3, r3
 800455e:	3b01      	subs	r3, #1
 8004560:	b29b      	uxth	r3, r3
 8004562:	b21c      	sxth	r4, r3
 8004564:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004568:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800456c:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8004570:	883b      	ldrh	r3, [r7, #0]
 8004572:	9300      	str	r3, [sp, #0]
 8004574:	4623      	mov	r3, r4
 8004576:	f7ff ff29 	bl	80043cc <lcdDrawLine>
}
 800457a:	bf00      	nop
 800457c:	370c      	adds	r7, #12
 800457e:	46bd      	mov	sp, r7
 8004580:	bd90      	pop	{r4, r7, pc}
 8004582:	bf00      	nop

08004584 <lcdDrawFillRect>:
{
	lcdDrawLine(x, y, x+w-1, y, color);
}

void lcdDrawFillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 8004584:	b590      	push	{r4, r7, lr}
 8004586:	b085      	sub	sp, #20
 8004588:	af00      	add	r7, sp, #0
 800458a:	4604      	mov	r4, r0
 800458c:	4608      	mov	r0, r1
 800458e:	4611      	mov	r1, r2
 8004590:	461a      	mov	r2, r3
 8004592:	4623      	mov	r3, r4
 8004594:	80fb      	strh	r3, [r7, #6]
 8004596:	4603      	mov	r3, r0
 8004598:	80bb      	strh	r3, [r7, #4]
 800459a:	460b      	mov	r3, r1
 800459c:	807b      	strh	r3, [r7, #2]
 800459e:	4613      	mov	r3, r2
 80045a0:	803b      	strh	r3, [r7, #0]
	for(int16_t i=x; i<x+w; i++)
 80045a2:	88fb      	ldrh	r3, [r7, #6]
 80045a4:	81fb      	strh	r3, [r7, #14]
 80045a6:	e00e      	b.n	80045c6 <lcdDrawFillRect+0x42>
	{
		lcdDrawVLine(i, y, h, color);
 80045a8:	8c3b      	ldrh	r3, [r7, #32]
 80045aa:	f9b7 2000 	ldrsh.w	r2, [r7]
 80045ae:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80045b2:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 80045b6:	f7ff ffbf 	bl	8004538 <lcdDrawVLine>
	for(int16_t i=x; i<x+w; i++)
 80045ba:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80045be:	b29b      	uxth	r3, r3
 80045c0:	3301      	adds	r3, #1
 80045c2:	b29b      	uxth	r3, r3
 80045c4:	81fb      	strh	r3, [r7, #14]
 80045c6:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80045ca:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 80045ce:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80045d2:	440b      	add	r3, r1
 80045d4:	429a      	cmp	r2, r3
 80045d6:	dbe7      	blt.n	80045a8 <lcdDrawFillRect+0x24>
	}
}
 80045d8:	bf00      	nop
 80045da:	bf00      	nop
 80045dc:	3714      	adds	r7, #20
 80045de:	46bd      	mov	sp, r7
 80045e0:	bd90      	pop	{r4, r7, pc}
 80045e2:	bf00      	nop

080045e4 <lcdPrintf>:
{
	lcdDrawFillRect(0, 0, HW_LCD_WIDTH, HW_LCD_HEIGHT, color);
}

void lcdPrintf(int x, int y, uint16_t color, const char *fmt, ...)
{
 80045e4:	b408      	push	{r3}
 80045e6:	b590      	push	{r4, r7, lr}
 80045e8:	b0d8      	sub	sp, #352	; 0x160
 80045ea:	af02      	add	r7, sp, #8
 80045ec:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80045f0:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80045f4:	6018      	str	r0, [r3, #0]
 80045f6:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80045fa:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80045fe:	6019      	str	r1, [r3, #0]
 8004600:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8004604:	f5a3 73a9 	sub.w	r3, r3, #338	; 0x152
 8004608:	801a      	strh	r2, [r3, #0]
	va_list arg;
	va_start(arg, fmt);
 800460a:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 800460e:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
	int32_t len;
	char print_buffer[256];
	int Size_Char;
	int i, x_Pre = x;
 8004612:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8004616:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
	han_font_t FontBuf;
	uint8_t font_width;
	uint8_t font_height;

	len = vsnprintf(print_buffer, 255, fmt, arg);
 8004620:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 8004624:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8004628:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
 800462c:	21ff      	movs	r1, #255	; 0xff
 800462e:	f010 f8c9 	bl	80147c4 <vsniprintf>
 8004632:	f8c7 0148 	str.w	r0, [r7, #328]	; 0x148
	va_end(arg);

	if(font_tbl[lcd_font]->data != NULL)
 8004636:	4b80      	ldr	r3, [pc, #512]	; (8004838 <lcdPrintf+0x254>)
 8004638:	781b      	ldrb	r3, [r3, #0]
 800463a:	461a      	mov	r2, r3
 800463c:	4b7f      	ldr	r3, [pc, #508]	; (800483c <lcdPrintf+0x258>)
 800463e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004642:	685b      	ldr	r3, [r3, #4]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d072      	beq.n	800472e <lcdPrintf+0x14a>
	{
		for(i=0; i<len; i+=Size_Char)
 8004648:	2300      	movs	r3, #0
 800464a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800464e:	e067      	b.n	8004720 <lcdPrintf+0x13c>
		{
			disEngFont(x, y, print_buffer[i], font_tbl[lcd_font], color);
 8004650:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8004654:	f5a3 728e 	sub.w	r2, r3, #284	; 0x11c
 8004658:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800465c:	4413      	add	r3, r2
 800465e:	781a      	ldrb	r2, [r3, #0]
 8004660:	4b75      	ldr	r3, [pc, #468]	; (8004838 <lcdPrintf+0x254>)
 8004662:	781b      	ldrb	r3, [r3, #0]
 8004664:	4619      	mov	r1, r3
 8004666:	4b75      	ldr	r3, [pc, #468]	; (800483c <lcdPrintf+0x258>)
 8004668:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
 800466c:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8004670:	f5a3 71a8 	sub.w	r1, r3, #336	; 0x150
 8004674:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8004678:	f5a3 70a6 	sub.w	r0, r3, #332	; 0x14c
 800467c:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8004680:	f5a3 73a9 	sub.w	r3, r3, #338	; 0x152
 8004684:	881b      	ldrh	r3, [r3, #0]
 8004686:	9300      	str	r3, [sp, #0]
 8004688:	4623      	mov	r3, r4
 800468a:	6809      	ldr	r1, [r1, #0]
 800468c:	6800      	ldr	r0, [r0, #0]
 800468e:	f000 f92d 	bl	80048ec <disEngFont>

			Size_Char = 1;
 8004692:	2301      	movs	r3, #1
 8004694:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
			font_width = font_tbl[lcd_font]->width;
 8004698:	4b67      	ldr	r3, [pc, #412]	; (8004838 <lcdPrintf+0x254>)
 800469a:	781b      	ldrb	r3, [r3, #0]
 800469c:	461a      	mov	r2, r3
 800469e:	4b67      	ldr	r3, [pc, #412]	; (800483c <lcdPrintf+0x258>)
 80046a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80046a4:	781b      	ldrb	r3, [r3, #0]
 80046a6:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
			font_height = font_tbl[lcd_font]->height;
 80046aa:	4b63      	ldr	r3, [pc, #396]	; (8004838 <lcdPrintf+0x254>)
 80046ac:	781b      	ldrb	r3, [r3, #0]
 80046ae:	461a      	mov	r2, r3
 80046b0:	4b62      	ldr	r3, [pc, #392]	; (800483c <lcdPrintf+0x258>)
 80046b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80046b6:	785b      	ldrb	r3, [r3, #1]
 80046b8:	f887 3143 	strb.w	r3, [r7, #323]	; 0x143
			x += font_width;
 80046bc:	f897 2153 	ldrb.w	r2, [r7, #339]	; 0x153
 80046c0:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80046c4:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80046c8:	f507 71ac 	add.w	r1, r7, #344	; 0x158
 80046cc:	f5a1 71a6 	sub.w	r1, r1, #332	; 0x14c
 80046d0:	6809      	ldr	r1, [r1, #0]
 80046d2:	440a      	add	r2, r1
 80046d4:	601a      	str	r2, [r3, #0]

			if((x+font_width) > HW_LCD_WIDTH)
 80046d6:	f897 2153 	ldrb.w	r2, [r7, #339]	; 0x153
 80046da:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80046de:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4413      	add	r3, r2
 80046e6:	2ba0      	cmp	r3, #160	; 0xa0
 80046e8:	dd13      	ble.n	8004712 <lcdPrintf+0x12e>
			{
				x = x_Pre;
 80046ea:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80046ee:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80046f2:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80046f6:	601a      	str	r2, [r3, #0]
				y += font_height;
 80046f8:	f897 2143 	ldrb.w	r2, [r7, #323]	; 0x143
 80046fc:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8004700:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8004704:	f507 71ac 	add.w	r1, r7, #344	; 0x158
 8004708:	f5a1 71a8 	sub.w	r1, r1, #336	; 0x150
 800470c:	6809      	ldr	r1, [r1, #0]
 800470e:	440a      	add	r2, r1
 8004710:	601a      	str	r2, [r3, #0]
		for(i=0; i<len; i+=Size_Char)
 8004712:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 8004716:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800471a:	4413      	add	r3, r2
 800471c:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8004720:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 8004724:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8004728:	429a      	cmp	r2, r3
 800472a:	db91      	blt.n	8004650 <lcdPrintf+0x6c>
			}

			if(FontBuf.Code_Type == PHAN_END_CODE) break;
		}
	}
}
 800472c:	e07b      	b.n	8004826 <lcdPrintf+0x242>
		for(i=0; i<len; i+=Size_Char)
 800472e:	2300      	movs	r3, #0
 8004730:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8004734:	e06f      	b.n	8004816 <lcdPrintf+0x232>
			hanFontLoad(&print_buffer[i], &FontBuf);
 8004736:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800473a:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800473e:	4413      	add	r3, r2
 8004740:	f107 0214 	add.w	r2, r7, #20
 8004744:	4611      	mov	r1, r2
 8004746:	4618      	mov	r0, r3
 8004748:	f7fd fbec 	bl	8001f24 <hanFontLoad>
			disHanFont(x, y, &FontBuf, color);
 800474c:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8004750:	f5a3 73a9 	sub.w	r3, r3, #338	; 0x152
 8004754:	881b      	ldrh	r3, [r3, #0]
 8004756:	f107 0214 	add.w	r2, r7, #20
 800475a:	f507 71ac 	add.w	r1, r7, #344	; 0x158
 800475e:	f5a1 71a8 	sub.w	r1, r1, #336	; 0x150
 8004762:	f507 70ac 	add.w	r0, r7, #344	; 0x158
 8004766:	f5a0 70a6 	sub.w	r0, r0, #332	; 0x14c
 800476a:	6809      	ldr	r1, [r1, #0]
 800476c:	6800      	ldr	r0, [r0, #0]
 800476e:	f000 f867 	bl	8004840 <disHanFont>
			Size_Char = FontBuf.Size_Char;
 8004772:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8004776:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800477a:	885b      	ldrh	r3, [r3, #2]
 800477c:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
			if(Size_Char >= 2)
 8004780:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8004784:	2b01      	cmp	r3, #1
 8004786:	dd0e      	ble.n	80047a6 <lcdPrintf+0x1c2>
				font_width = 16;
 8004788:	2310      	movs	r3, #16
 800478a:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
				x += 2*8;
 800478e:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8004792:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8004796:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800479a:	f5a2 72a6 	sub.w	r2, r2, #332	; 0x14c
 800479e:	6812      	ldr	r2, [r2, #0]
 80047a0:	3210      	adds	r2, #16
 80047a2:	601a      	str	r2, [r3, #0]
 80047a4:	e00d      	b.n	80047c2 <lcdPrintf+0x1de>
				font_width = 8;
 80047a6:	2308      	movs	r3, #8
 80047a8:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
				x += 1*8;
 80047ac:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80047b0:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80047b4:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 80047b8:	f5a2 72a6 	sub.w	r2, r2, #332	; 0x14c
 80047bc:	6812      	ldr	r2, [r2, #0]
 80047be:	3208      	adds	r2, #8
 80047c0:	601a      	str	r2, [r3, #0]
			if((x+font_width) > HW_LCD_WIDTH)
 80047c2:	f897 2153 	ldrb.w	r2, [r7, #339]	; 0x153
 80047c6:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80047ca:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	4413      	add	r3, r2
 80047d2:	2ba0      	cmp	r3, #160	; 0xa0
 80047d4:	dd11      	ble.n	80047fa <lcdPrintf+0x216>
				x = x_Pre;
 80047d6:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80047da:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80047de:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80047e2:	601a      	str	r2, [r3, #0]
				y += 16;
 80047e4:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80047e8:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80047ec:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 80047f0:	f5a2 72a8 	sub.w	r2, r2, #336	; 0x150
 80047f4:	6812      	ldr	r2, [r2, #0]
 80047f6:	3210      	adds	r2, #16
 80047f8:	601a      	str	r2, [r3, #0]
			if(FontBuf.Code_Type == PHAN_END_CODE) break;
 80047fa:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80047fe:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8004802:	889b      	ldrh	r3, [r3, #4]
 8004804:	2b04      	cmp	r3, #4
 8004806:	d00d      	beq.n	8004824 <lcdPrintf+0x240>
		for(i=0; i<len; i+=Size_Char)
 8004808:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 800480c:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8004810:	4413      	add	r3, r2
 8004812:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8004816:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 800481a:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800481e:	429a      	cmp	r2, r3
 8004820:	db89      	blt.n	8004736 <lcdPrintf+0x152>
}
 8004822:	e000      	b.n	8004826 <lcdPrintf+0x242>
			if(FontBuf.Code_Type == PHAN_END_CODE) break;
 8004824:	bf00      	nop
}
 8004826:	bf00      	nop
 8004828:	f507 77ac 	add.w	r7, r7, #344	; 0x158
 800482c:	46bd      	mov	sp, r7
 800482e:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8004832:	b001      	add	sp, #4
 8004834:	4770      	bx	lr
 8004836:	bf00      	nop
 8004838:	2000006d 	.word	0x2000006d
 800483c:	20000070 	.word	0x20000070

08004840 <disHanFont>:

	return str_len;
}

void disHanFont(int x, int y, han_font_t *FontPtr, uint16_t textcolor)
{
 8004840:	b580      	push	{r7, lr}
 8004842:	b088      	sub	sp, #32
 8004844:	af00      	add	r7, sp, #0
 8004846:	60f8      	str	r0, [r7, #12]
 8004848:	60b9      	str	r1, [r7, #8]
 800484a:	607a      	str	r2, [r7, #4]
 800484c:	807b      	strh	r3, [r7, #2]
	uint16_t i, j, Loop;
	uint16_t FontSize = FontPtr->Size_Char;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	885b      	ldrh	r3, [r3, #2]
 8004852:	833b      	strh	r3, [r7, #24]
	uint16_t index_x;

	if(FontSize > 2)
 8004854:	8b3b      	ldrh	r3, [r7, #24]
 8004856:	2b02      	cmp	r3, #2
 8004858:	d901      	bls.n	800485e <disHanFont+0x1e>
	{
		FontSize = 2;
 800485a:	2302      	movs	r3, #2
 800485c:	833b      	strh	r3, [r7, #24]
	}

	for(i=0; i<16; i++)
 800485e:	2300      	movs	r3, #0
 8004860:	83fb      	strh	r3, [r7, #30]
 8004862:	e03a      	b.n	80048da <disHanFont+0x9a>
	{
		index_x = 0;
 8004864:	2300      	movs	r3, #0
 8004866:	82fb      	strh	r3, [r7, #22]
		for(j=0; j<FontSize; j++)
 8004868:	2300      	movs	r3, #0
 800486a:	83bb      	strh	r3, [r7, #28]
 800486c:	e02e      	b.n	80048cc <disHanFont+0x8c>
		{
			uint8_t font_data;

			font_data = FontPtr->FontBuffer[i*FontSize + j];
 800486e:	8bfb      	ldrh	r3, [r7, #30]
 8004870:	8b3a      	ldrh	r2, [r7, #24]
 8004872:	fb03 f202 	mul.w	r2, r3, r2
 8004876:	8bbb      	ldrh	r3, [r7, #28]
 8004878:	4413      	add	r3, r2
 800487a:	687a      	ldr	r2, [r7, #4]
 800487c:	4413      	add	r3, r2
 800487e:	799b      	ldrb	r3, [r3, #6]
 8004880:	757b      	strb	r3, [r7, #21]

			for(Loop=0; Loop<8; Loop++)
 8004882:	2300      	movs	r3, #0
 8004884:	837b      	strh	r3, [r7, #26]
 8004886:	e01b      	b.n	80048c0 <disHanFont+0x80>
			{
				if((font_data<<Loop) & (0x80))
 8004888:	7d7a      	ldrb	r2, [r7, #21]
 800488a:	8b7b      	ldrh	r3, [r7, #26]
 800488c:	fa02 f303 	lsl.w	r3, r2, r3
 8004890:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004894:	2b00      	cmp	r3, #0
 8004896:	d00d      	beq.n	80048b4 <disHanFont+0x74>
				{
					lcdDrawPixel(x + index_x, y + i, textcolor);
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	b29a      	uxth	r2, r3
 800489c:	8afb      	ldrh	r3, [r7, #22]
 800489e:	4413      	add	r3, r2
 80048a0:	b298      	uxth	r0, r3
 80048a2:	68bb      	ldr	r3, [r7, #8]
 80048a4:	b29a      	uxth	r2, r3
 80048a6:	8bfb      	ldrh	r3, [r7, #30]
 80048a8:	4413      	add	r3, r2
 80048aa:	b29b      	uxth	r3, r3
 80048ac:	887a      	ldrh	r2, [r7, #2]
 80048ae:	4619      	mov	r1, r3
 80048b0:	f7ff fcd4 	bl	800425c <lcdDrawPixel>
				}

				index_x++;
 80048b4:	8afb      	ldrh	r3, [r7, #22]
 80048b6:	3301      	adds	r3, #1
 80048b8:	82fb      	strh	r3, [r7, #22]
			for(Loop=0; Loop<8; Loop++)
 80048ba:	8b7b      	ldrh	r3, [r7, #26]
 80048bc:	3301      	adds	r3, #1
 80048be:	837b      	strh	r3, [r7, #26]
 80048c0:	8b7b      	ldrh	r3, [r7, #26]
 80048c2:	2b07      	cmp	r3, #7
 80048c4:	d9e0      	bls.n	8004888 <disHanFont+0x48>
		for(j=0; j<FontSize; j++)
 80048c6:	8bbb      	ldrh	r3, [r7, #28]
 80048c8:	3301      	adds	r3, #1
 80048ca:	83bb      	strh	r3, [r7, #28]
 80048cc:	8bba      	ldrh	r2, [r7, #28]
 80048ce:	8b3b      	ldrh	r3, [r7, #24]
 80048d0:	429a      	cmp	r2, r3
 80048d2:	d3cc      	bcc.n	800486e <disHanFont+0x2e>
	for(i=0; i<16; i++)
 80048d4:	8bfb      	ldrh	r3, [r7, #30]
 80048d6:	3301      	adds	r3, #1
 80048d8:	83fb      	strh	r3, [r7, #30]
 80048da:	8bfb      	ldrh	r3, [r7, #30]
 80048dc:	2b0f      	cmp	r3, #15
 80048de:	d9c1      	bls.n	8004864 <disHanFont+0x24>
			}
		}
	}
}
 80048e0:	bf00      	nop
 80048e2:	bf00      	nop
 80048e4:	3720      	adds	r7, #32
 80048e6:	46bd      	mov	sp, r7
 80048e8:	bd80      	pop	{r7, pc}
 80048ea:	bf00      	nop

080048ec <disEngFont>:

void disEngFont(int x, int y, char ch, lcd_font_t *font, uint16_t textcolor)
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b088      	sub	sp, #32
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	60f8      	str	r0, [r7, #12]
 80048f4:	60b9      	str	r1, [r7, #8]
 80048f6:	603b      	str	r3, [r7, #0]
 80048f8:	4613      	mov	r3, r2
 80048fa:	71fb      	strb	r3, [r7, #7]
	uint32_t i, b, j;

	// we gaan door het font
	for(i=0; i<font->height; i++)
 80048fc:	2300      	movs	r3, #0
 80048fe:	61fb      	str	r3, [r7, #28]
 8004900:	e035      	b.n	800496e <disEngFont+0x82>
	{
		b = font->data[(ch-32)*font->height+i];
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	685a      	ldr	r2, [r3, #4]
 8004906:	79fb      	ldrb	r3, [r7, #7]
 8004908:	3b20      	subs	r3, #32
 800490a:	6839      	ldr	r1, [r7, #0]
 800490c:	7849      	ldrb	r1, [r1, #1]
 800490e:	fb01 f303 	mul.w	r3, r1, r3
 8004912:	4619      	mov	r1, r3
 8004914:	69fb      	ldr	r3, [r7, #28]
 8004916:	440b      	add	r3, r1
 8004918:	005b      	lsls	r3, r3, #1
 800491a:	4413      	add	r3, r2
 800491c:	881b      	ldrh	r3, [r3, #0]
 800491e:	617b      	str	r3, [r7, #20]
		for(j=0; j<font->width; j++)
 8004920:	2300      	movs	r3, #0
 8004922:	61bb      	str	r3, [r7, #24]
 8004924:	e01a      	b.n	800495c <disEngFont+0x70>
		{
			if((b<<j) & 0x8000)
 8004926:	697a      	ldr	r2, [r7, #20]
 8004928:	69bb      	ldr	r3, [r7, #24]
 800492a:	fa02 f303 	lsl.w	r3, r2, r3
 800492e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004932:	2b00      	cmp	r3, #0
 8004934:	d00f      	beq.n	8004956 <disEngFont+0x6a>
			{
				lcdDrawPixel(x+j, (y+i), textcolor);
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	b29a      	uxth	r2, r3
 800493a:	69bb      	ldr	r3, [r7, #24]
 800493c:	b29b      	uxth	r3, r3
 800493e:	4413      	add	r3, r2
 8004940:	b298      	uxth	r0, r3
 8004942:	68bb      	ldr	r3, [r7, #8]
 8004944:	b29a      	uxth	r2, r3
 8004946:	69fb      	ldr	r3, [r7, #28]
 8004948:	b29b      	uxth	r3, r3
 800494a:	4413      	add	r3, r2
 800494c:	b29b      	uxth	r3, r3
 800494e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8004950:	4619      	mov	r1, r3
 8004952:	f7ff fc83 	bl	800425c <lcdDrawPixel>
		for(j=0; j<font->width; j++)
 8004956:	69bb      	ldr	r3, [r7, #24]
 8004958:	3301      	adds	r3, #1
 800495a:	61bb      	str	r3, [r7, #24]
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	781b      	ldrb	r3, [r3, #0]
 8004960:	461a      	mov	r2, r3
 8004962:	69bb      	ldr	r3, [r7, #24]
 8004964:	4293      	cmp	r3, r2
 8004966:	d3de      	bcc.n	8004926 <disEngFont+0x3a>
	for(i=0; i<font->height; i++)
 8004968:	69fb      	ldr	r3, [r7, #28]
 800496a:	3301      	adds	r3, #1
 800496c:	61fb      	str	r3, [r7, #28]
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	785b      	ldrb	r3, [r3, #1]
 8004972:	461a      	mov	r2, r3
 8004974:	69fb      	ldr	r3, [r7, #28]
 8004976:	4293      	cmp	r3, r2
 8004978:	d3c3      	bcc.n	8004902 <disEngFont+0x16>
			}
		}
	}
}
 800497a:	bf00      	nop
 800497c:	bf00      	nop
 800497e:	3720      	adds	r7, #32
 8004980:	46bd      	mov	sp, r7
 8004982:	bd80      	pop	{r7, pc}

08004984 <lcdSetFont>:

void lcdSetFont(LcdFont font)
{
 8004984:	b480      	push	{r7}
 8004986:	b083      	sub	sp, #12
 8004988:	af00      	add	r7, sp, #0
 800498a:	4603      	mov	r3, r0
 800498c:	71fb      	strb	r3, [r7, #7]
	lcd_font = font;
 800498e:	4a04      	ldr	r2, [pc, #16]	; (80049a0 <lcdSetFont+0x1c>)
 8004990:	79fb      	ldrb	r3, [r7, #7]
 8004992:	7013      	strb	r3, [r2, #0]
}
 8004994:	bf00      	nop
 8004996:	370c      	adds	r7, #12
 8004998:	46bd      	mov	sp, r7
 800499a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499e:	4770      	bx	lr
 80049a0:	2000006d 	.word	0x2000006d

080049a4 <cliLcd>:


#ifdef _USE_HW_CLI

void cliLcd(cli_args_t *args)
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b086      	sub	sp, #24
 80049a8:	af02      	add	r7, sp, #8
 80049aa:	6078      	str	r0, [r7, #4]
	bool ret = false;
 80049ac:	2300      	movs	r3, #0
 80049ae:	73fb      	strb	r3, [r7, #15]

	if(args->argc == 1 && args->isStr(0, "test") == true)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	881b      	ldrh	r3, [r3, #0]
 80049b4:	2b01      	cmp	r3, #1
 80049b6:	d163      	bne.n	8004a80 <cliLcd+0xdc>
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	695b      	ldr	r3, [r3, #20]
 80049bc:	494e      	ldr	r1, [pc, #312]	; (8004af8 <cliLcd+0x154>)
 80049be:	2000      	movs	r0, #0
 80049c0:	4798      	blx	r3
 80049c2:	4603      	mov	r3, r0
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d05b      	beq.n	8004a80 <cliLcd+0xdc>
	{
		lcdSetFont(LCD_FONT_HAN);
 80049c8:	2003      	movs	r0, #3
 80049ca:	f7ff ffdb 	bl	8004984 <lcdSetFont>

		while(cliKeepLoop())
 80049ce:	e04b      	b.n	8004a68 <cliLcd+0xc4>
		{
			if(lcdDrawAvailable() == true)
 80049d0:	f7ff fc76 	bl	80042c0 <lcdDrawAvailable>
 80049d4:	4603      	mov	r3, r0
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d046      	beq.n	8004a68 <cliLcd+0xc4>
			{
				lcdClearBuffer(black);
 80049da:	2000      	movs	r0, #0
 80049dc:	f7ff fc4a 	bl	8004274 <lcdClearBuffer>

				lcdPrintf(25, 16*0, green, "[LCD Test]");
 80049e0:	4b46      	ldr	r3, [pc, #280]	; (8004afc <cliLcd+0x158>)
 80049e2:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80049e6:	2100      	movs	r1, #0
 80049e8:	2019      	movs	r0, #25
 80049ea:	f7ff fdfb 	bl	80045e4 <lcdPrintf>

				lcdPrintf(0, 16*1, white, "%d fps", lcdGetFps());
 80049ee:	f7ff fc4f 	bl	8004290 <lcdGetFps>
 80049f2:	4603      	mov	r3, r0
 80049f4:	9300      	str	r3, [sp, #0]
 80049f6:	4b42      	ldr	r3, [pc, #264]	; (8004b00 <cliLcd+0x15c>)
 80049f8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80049fc:	2110      	movs	r1, #16
 80049fe:	2000      	movs	r0, #0
 8004a00:	f7ff fdf0 	bl	80045e4 <lcdPrintf>
				lcdPrintf(0, 16*2, white, "%d ms", lcdGetFpsTime());
 8004a04:	f7ff fc50 	bl	80042a8 <lcdGetFpsTime>
 8004a08:	4603      	mov	r3, r0
 8004a0a:	9300      	str	r3, [sp, #0]
 8004a0c:	4b3d      	ldr	r3, [pc, #244]	; (8004b04 <cliLcd+0x160>)
 8004a0e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004a12:	2120      	movs	r1, #32
 8004a14:	2000      	movs	r0, #0
 8004a16:	f7ff fde5 	bl	80045e4 <lcdPrintf>
				lcdPrintf(0, 16*3, white, "%d ms", millis());
 8004a1a:	f7fd f97b 	bl	8001d14 <millis>
 8004a1e:	4603      	mov	r3, r0
 8004a20:	9300      	str	r3, [sp, #0]
 8004a22:	4b38      	ldr	r3, [pc, #224]	; (8004b04 <cliLcd+0x160>)
 8004a24:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004a28:	2130      	movs	r1, #48	; 0x30
 8004a2a:	2000      	movs	r0, #0
 8004a2c:	f7ff fdda 	bl	80045e4 <lcdPrintf>

				lcdDrawFillRect(0, 70, 10, 10, red);
 8004a30:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004a34:	9300      	str	r3, [sp, #0]
 8004a36:	230a      	movs	r3, #10
 8004a38:	220a      	movs	r2, #10
 8004a3a:	2146      	movs	r1, #70	; 0x46
 8004a3c:	2000      	movs	r0, #0
 8004a3e:	f7ff fda1 	bl	8004584 <lcdDrawFillRect>
				lcdDrawFillRect(10, 70, 10, 10, green);
 8004a42:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8004a46:	9300      	str	r3, [sp, #0]
 8004a48:	230a      	movs	r3, #10
 8004a4a:	220a      	movs	r2, #10
 8004a4c:	2146      	movs	r1, #70	; 0x46
 8004a4e:	200a      	movs	r0, #10
 8004a50:	f7ff fd98 	bl	8004584 <lcdDrawFillRect>
				lcdDrawFillRect(20, 70, 10, 10, blue);
 8004a54:	231f      	movs	r3, #31
 8004a56:	9300      	str	r3, [sp, #0]
 8004a58:	230a      	movs	r3, #10
 8004a5a:	220a      	movs	r2, #10
 8004a5c:	2146      	movs	r1, #70	; 0x46
 8004a5e:	2014      	movs	r0, #20
 8004a60:	f7ff fd90 	bl	8004584 <lcdDrawFillRect>

				lcdRequestDraw();
 8004a64:	f7ff fc42 	bl	80042ec <lcdRequestDraw>
		while(cliKeepLoop())
 8004a68:	f7fe fec0 	bl	80037ec <cliKeepLoop>
 8004a6c:	4603      	mov	r3, r0
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d1ae      	bne.n	80049d0 <cliLcd+0x2c>
			}
		}

		lcdClearBuffer(black);
 8004a72:	2000      	movs	r0, #0
 8004a74:	f7ff fbfe 	bl	8004274 <lcdClearBuffer>
		lcdUpdateDraw();
 8004a78:	f7ff fc70 	bl	800435c <lcdUpdateDraw>

		ret = true;
 8004a7c:	2301      	movs	r3, #1
 8004a7e:	73fb      	strb	r3, [r7, #15]
	}

	if(args->argc == 2 && args->isStr(0, "backlight") == true)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	881b      	ldrh	r3, [r3, #0]
 8004a84:	2b02      	cmp	r3, #2
 8004a86:	d126      	bne.n	8004ad6 <cliLcd+0x132>
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	695b      	ldr	r3, [r3, #20]
 8004a8c:	491e      	ldr	r1, [pc, #120]	; (8004b08 <cliLcd+0x164>)
 8004a8e:	2000      	movs	r0, #0
 8004a90:	4798      	blx	r3
 8004a92:	4603      	mov	r3, r0
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d01e      	beq.n	8004ad6 <cliLcd+0x132>
	{
		char *bl_status;

		bl_status = args->getStr(1);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	691b      	ldr	r3, [r3, #16]
 8004a9c:	2001      	movs	r0, #1
 8004a9e:	4798      	blx	r3
 8004aa0:	60b8      	str	r0, [r7, #8]

		if(bl_status != NULL)
 8004aa2:	68bb      	ldr	r3, [r7, #8]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d014      	beq.n	8004ad2 <cliLcd+0x12e>
		{
			if(strcmp(bl_status, "on") == 0)
 8004aa8:	4918      	ldr	r1, [pc, #96]	; (8004b0c <cliLcd+0x168>)
 8004aaa:	68b8      	ldr	r0, [r7, #8]
 8004aac:	f7fb fb98 	bl	80001e0 <strcmp>
 8004ab0:	4603      	mov	r3, r0
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d103      	bne.n	8004abe <cliLcd+0x11a>
			{
				lcdSetBackLight(100);
 8004ab6:	2064      	movs	r0, #100	; 0x64
 8004ab8:	f7ff fbaa 	bl	8004210 <lcdSetBackLight>
 8004abc:	e009      	b.n	8004ad2 <cliLcd+0x12e>
			}
			else if(strcmp(bl_status, "off") == 0)
 8004abe:	4914      	ldr	r1, [pc, #80]	; (8004b10 <cliLcd+0x16c>)
 8004ac0:	68b8      	ldr	r0, [r7, #8]
 8004ac2:	f7fb fb8d 	bl	80001e0 <strcmp>
 8004ac6:	4603      	mov	r3, r0
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d102      	bne.n	8004ad2 <cliLcd+0x12e>
			{
				lcdSetBackLight(0);
 8004acc:	2000      	movs	r0, #0
 8004ace:	f7ff fb9f 	bl	8004210 <lcdSetBackLight>
			else
			{
			}
		}

		ret = true;
 8004ad2:	2301      	movs	r3, #1
 8004ad4:	73fb      	strb	r3, [r7, #15]
	}

	if(ret != true)
 8004ad6:	7bfb      	ldrb	r3, [r7, #15]
 8004ad8:	f083 0301 	eor.w	r3, r3, #1
 8004adc:	b2db      	uxtb	r3, r3
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d005      	beq.n	8004aee <cliLcd+0x14a>
	{
		cliPrintf("lcd test\n");
 8004ae2:	480c      	ldr	r0, [pc, #48]	; (8004b14 <cliLcd+0x170>)
 8004ae4:	f7fe fd88 	bl	80035f8 <cliPrintf>
		cliPrintf("lcd backlight on/off\n");
 8004ae8:	480b      	ldr	r0, [pc, #44]	; (8004b18 <cliLcd+0x174>)
 8004aea:	f7fe fd85 	bl	80035f8 <cliPrintf>
	}
}
 8004aee:	bf00      	nop
 8004af0:	3710      	adds	r7, #16
 8004af2:	46bd      	mov	sp, r7
 8004af4:	bd80      	pop	{r7, pc}
 8004af6:	bf00      	nop
 8004af8:	08022f48 	.word	0x08022f48
 8004afc:	08022f50 	.word	0x08022f50
 8004b00:	08022f5c 	.word	0x08022f5c
 8004b04:	08022f64 	.word	0x08022f64
 8004b08:	08022f6c 	.word	0x08022f6c
 8004b0c:	08022f78 	.word	0x08022f78
 8004b10:	08022f7c 	.word	0x08022f7c
 8004b14:	08022f80 	.word	0x08022f80
 8004b18:	08022f8c 	.word	0x08022f8c

08004b1c <ledInit>:
				{GPIOC, GPIO_PIN_13, GPIO_PIN_RESET, GPIO_PIN_SET},
		};


bool ledInit(void)
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b082      	sub	sp, #8
 8004b20:	af00      	add	r7, sp, #0
	for(int i=0; i<LED_MAX_CH; i++)
 8004b22:	2300      	movs	r3, #0
 8004b24:	607b      	str	r3, [r7, #4]
 8004b26:	e007      	b.n	8004b38 <ledInit+0x1c>
	{
		ledOff(i);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	b2db      	uxtb	r3, r3
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	f000 f813 	bl	8004b58 <ledOff>
	for(int i=0; i<LED_MAX_CH; i++)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	3301      	adds	r3, #1
 8004b36:	607b      	str	r3, [r7, #4]
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	ddf4      	ble.n	8004b28 <ledInit+0xc>
	}

#ifdef _USE_HW_CLI
	cliAdd("led", cliLed);
 8004b3e:	4904      	ldr	r1, [pc, #16]	; (8004b50 <ledInit+0x34>)
 8004b40:	4804      	ldr	r0, [pc, #16]	; (8004b54 <ledInit+0x38>)
 8004b42:	f7fe fe69 	bl	8003818 <cliAdd>
#endif

	return true;
 8004b46:	2301      	movs	r3, #1
}
 8004b48:	4618      	mov	r0, r3
 8004b4a:	3708      	adds	r7, #8
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	bd80      	pop	{r7, pc}
 8004b50:	08004bd1 	.word	0x08004bd1
 8004b54:	08016c44 	.word	0x08016c44

08004b58 <ledOff>:

	HAL_GPIO_WritePin(led_tbl[ch].port, led_tbl[ch].pin, led_tbl[ch].on_state);
}

void ledOff(uint8_t ch)
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b082      	sub	sp, #8
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	4603      	mov	r3, r0
 8004b60:	71fb      	strb	r3, [r7, #7]
	if(ch >= LED_MAX_CH) return;
 8004b62:	79fb      	ldrb	r3, [r7, #7]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d111      	bne.n	8004b8c <ledOff+0x34>

	HAL_GPIO_WritePin(led_tbl[ch].port, led_tbl[ch].pin, led_tbl[ch].off_state);
 8004b68:	79fb      	ldrb	r3, [r7, #7]
 8004b6a:	4a0a      	ldr	r2, [pc, #40]	; (8004b94 <ledOff+0x3c>)
 8004b6c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8004b70:	79fb      	ldrb	r3, [r7, #7]
 8004b72:	4a08      	ldr	r2, [pc, #32]	; (8004b94 <ledOff+0x3c>)
 8004b74:	00db      	lsls	r3, r3, #3
 8004b76:	4413      	add	r3, r2
 8004b78:	8899      	ldrh	r1, [r3, #4]
 8004b7a:	79fb      	ldrb	r3, [r7, #7]
 8004b7c:	4a05      	ldr	r2, [pc, #20]	; (8004b94 <ledOff+0x3c>)
 8004b7e:	00db      	lsls	r3, r3, #3
 8004b80:	4413      	add	r3, r2
 8004b82:	79db      	ldrb	r3, [r3, #7]
 8004b84:	461a      	mov	r2, r3
 8004b86:	f001 fff9 	bl	8006b7c <HAL_GPIO_WritePin>
 8004b8a:	e000      	b.n	8004b8e <ledOff+0x36>
	if(ch >= LED_MAX_CH) return;
 8004b8c:	bf00      	nop
}
 8004b8e:	3708      	adds	r7, #8
 8004b90:	46bd      	mov	sp, r7
 8004b92:	bd80      	pop	{r7, pc}
 8004b94:	20000080 	.word	0x20000080

08004b98 <ledToggle>:

void ledToggle(uint8_t ch)
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b082      	sub	sp, #8
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	4603      	mov	r3, r0
 8004ba0:	71fb      	strb	r3, [r7, #7]
	if(ch >= LED_MAX_CH) return;
 8004ba2:	79fb      	ldrb	r3, [r7, #7]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d10d      	bne.n	8004bc4 <ledToggle+0x2c>

	HAL_GPIO_TogglePin(led_tbl[ch].port, led_tbl[ch].pin);
 8004ba8:	79fb      	ldrb	r3, [r7, #7]
 8004baa:	4a08      	ldr	r2, [pc, #32]	; (8004bcc <ledToggle+0x34>)
 8004bac:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8004bb0:	79fb      	ldrb	r3, [r7, #7]
 8004bb2:	4906      	ldr	r1, [pc, #24]	; (8004bcc <ledToggle+0x34>)
 8004bb4:	00db      	lsls	r3, r3, #3
 8004bb6:	440b      	add	r3, r1
 8004bb8:	889b      	ldrh	r3, [r3, #4]
 8004bba:	4619      	mov	r1, r3
 8004bbc:	4610      	mov	r0, r2
 8004bbe:	f001 fff6 	bl	8006bae <HAL_GPIO_TogglePin>
 8004bc2:	e000      	b.n	8004bc6 <ledToggle+0x2e>
	if(ch >= LED_MAX_CH) return;
 8004bc4:	bf00      	nop
}
 8004bc6:	3708      	adds	r7, #8
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	bd80      	pop	{r7, pc}
 8004bcc:	20000080 	.word	0x20000080

08004bd0 <cliLed>:


#ifdef _USE_HW_CLI

void cliLed(cli_args_t *args)
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b086      	sub	sp, #24
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
	bool ret = false;
 8004bd8:	2300      	movs	r3, #0
 8004bda:	75fb      	strb	r3, [r7, #23]

	if(args->argc == 3 && args->isStr(0, "toggle") == true)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	881b      	ldrh	r3, [r3, #0]
 8004be0:	2b03      	cmp	r3, #3
 8004be2:	d133      	bne.n	8004c4c <cliLed+0x7c>
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	695b      	ldr	r3, [r3, #20]
 8004be8:	491f      	ldr	r1, [pc, #124]	; (8004c68 <cliLed+0x98>)
 8004bea:	2000      	movs	r0, #0
 8004bec:	4798      	blx	r3
 8004bee:	4603      	mov	r3, r0
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d02b      	beq.n	8004c4c <cliLed+0x7c>
	{
		uint8_t led_ch;
		uint32_t toggle_time;
		uint32_t pre_time;

		led_ch = (uint8_t)args->getData(1);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	689b      	ldr	r3, [r3, #8]
 8004bf8:	2001      	movs	r0, #1
 8004bfa:	4798      	blx	r3
 8004bfc:	4603      	mov	r3, r0
 8004bfe:	75bb      	strb	r3, [r7, #22]
		toggle_time = (uint32_t)args->getData(2);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	689b      	ldr	r3, [r3, #8]
 8004c04:	2002      	movs	r0, #2
 8004c06:	4798      	blx	r3
 8004c08:	4603      	mov	r3, r0
 8004c0a:	60fb      	str	r3, [r7, #12]

		if(led_ch > 0)
 8004c0c:	7dbb      	ldrb	r3, [r7, #22]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d002      	beq.n	8004c18 <cliLed+0x48>
		{
			led_ch--;
 8004c12:	7dbb      	ldrb	r3, [r7, #22]
 8004c14:	3b01      	subs	r3, #1
 8004c16:	75bb      	strb	r3, [r7, #22]
		}

		pre_time = millis();
 8004c18:	f7fd f87c 	bl	8001d14 <millis>
 8004c1c:	6138      	str	r0, [r7, #16]
		while(cliKeepLoop())
 8004c1e:	e00e      	b.n	8004c3e <cliLed+0x6e>
		{
			if(millis() - pre_time >= toggle_time)
 8004c20:	f7fd f878 	bl	8001d14 <millis>
 8004c24:	4602      	mov	r2, r0
 8004c26:	693b      	ldr	r3, [r7, #16]
 8004c28:	1ad3      	subs	r3, r2, r3
 8004c2a:	68fa      	ldr	r2, [r7, #12]
 8004c2c:	429a      	cmp	r2, r3
 8004c2e:	d806      	bhi.n	8004c3e <cliLed+0x6e>
			{
				pre_time = millis();
 8004c30:	f7fd f870 	bl	8001d14 <millis>
 8004c34:	6138      	str	r0, [r7, #16]
				ledToggle(led_ch);
 8004c36:	7dbb      	ldrb	r3, [r7, #22]
 8004c38:	4618      	mov	r0, r3
 8004c3a:	f7ff ffad 	bl	8004b98 <ledToggle>
		while(cliKeepLoop())
 8004c3e:	f7fe fdd5 	bl	80037ec <cliKeepLoop>
 8004c42:	4603      	mov	r3, r0
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d1eb      	bne.n	8004c20 <cliLed+0x50>
			}
		}

		ret = true;
 8004c48:	2301      	movs	r3, #1
 8004c4a:	75fb      	strb	r3, [r7, #23]
	}

	if(ret != true)
 8004c4c:	7dfb      	ldrb	r3, [r7, #23]
 8004c4e:	f083 0301 	eor.w	r3, r3, #1
 8004c52:	b2db      	uxtb	r3, r3
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d003      	beq.n	8004c60 <cliLed+0x90>
	{
		cliPrintf("led toggle ch[1~%d] time_ms\n", LED_MAX_CH);
 8004c58:	2101      	movs	r1, #1
 8004c5a:	4804      	ldr	r0, [pc, #16]	; (8004c6c <cliLed+0x9c>)
 8004c5c:	f7fe fccc 	bl	80035f8 <cliPrintf>
	}
}
 8004c60:	bf00      	nop
 8004c62:	3718      	adds	r7, #24
 8004c64:	46bd      	mov	sp, r7
 8004c66:	bd80      	pop	{r7, pc}
 8004c68:	08016c48 	.word	0x08016c48
 8004c6c:	08016c50 	.word	0x08016c50

08004c70 <sdInit>:
static void cliSd(cli_args_t *args);
#endif


bool sdInit(void)
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b082      	sub	sp, #8
 8004c74:	af00      	add	r7, sp, #0
	bool ret = false;
 8004c76:	2300      	movs	r3, #0
 8004c78:	71fb      	strb	r3, [r7, #7]

  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8004c7a:	4b17      	ldr	r3, [pc, #92]	; (8004cd8 <sdInit+0x68>)
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	611a      	str	r2, [r3, #16]

	is_detected = false;
 8004c80:	4b16      	ldr	r3, [pc, #88]	; (8004cdc <sdInit+0x6c>)
 8004c82:	2200      	movs	r2, #0
 8004c84:	701a      	strb	r2, [r3, #0]
	if(gpioPinRead(_PIN_GPIO_SDCARD_DETECT) == true)
 8004c86:	2000      	movs	r0, #0
 8004c88:	f7ff f94c 	bl	8003f24 <gpioPinRead>
 8004c8c:	4603      	mov	r3, r0
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d002      	beq.n	8004c98 <sdInit+0x28>
	{
		is_detected = true;
 8004c92:	4b12      	ldr	r3, [pc, #72]	; (8004cdc <sdInit+0x6c>)
 8004c94:	2201      	movs	r2, #1
 8004c96:	701a      	strb	r2, [r3, #0]
	}

	if(is_detected == true)
 8004c98:	4b10      	ldr	r3, [pc, #64]	; (8004cdc <sdInit+0x6c>)
 8004c9a:	781b      	ldrb	r3, [r3, #0]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d00f      	beq.n	8004cc0 <sdInit+0x50>
	{
		if(HAL_SD_Init(&hsd) == HAL_OK)
 8004ca0:	480d      	ldr	r0, [pc, #52]	; (8004cd8 <sdInit+0x68>)
 8004ca2:	f003 fe1f 	bl	80088e4 <HAL_SD_Init>
 8004ca6:	4603      	mov	r3, r0
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d109      	bne.n	8004cc0 <sdInit+0x50>
		{
			if(HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) == HAL_OK)
 8004cac:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004cb0:	4809      	ldr	r0, [pc, #36]	; (8004cd8 <sdInit+0x68>)
 8004cb2:	f004 fbf9 	bl	80094a8 <HAL_SD_ConfigWideBusOperation>
 8004cb6:	4603      	mov	r3, r0
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d101      	bne.n	8004cc0 <sdInit+0x50>
			{
				ret = true;
 8004cbc:	2301      	movs	r3, #1
 8004cbe:	71fb      	strb	r3, [r7, #7]
			}
		}
	}

	is_init = ret;
 8004cc0:	4a07      	ldr	r2, [pc, #28]	; (8004ce0 <sdInit+0x70>)
 8004cc2:	79fb      	ldrb	r3, [r7, #7]
 8004cc4:	7013      	strb	r3, [r2, #0]

	#ifdef _USE_HW_CLI
		cliAdd("sd", cliSd);
 8004cc6:	4907      	ldr	r1, [pc, #28]	; (8004ce4 <sdInit+0x74>)
 8004cc8:	4807      	ldr	r0, [pc, #28]	; (8004ce8 <sdInit+0x78>)
 8004cca:	f7fe fda5 	bl	8003818 <cliAdd>
	#endif

	return ret;
 8004cce:	79fb      	ldrb	r3, [r7, #7]
}
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	3708      	adds	r7, #8
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	bd80      	pop	{r7, pc}
 8004cd8:	2000039c 	.word	0x2000039c
 8004cdc:	200072c1 	.word	0x200072c1
 8004ce0:	200072c0 	.word	0x200072c0
 8004ce4:	08004fb9 	.word	0x08004fb9
 8004ce8:	08016c70 	.word	0x08016c70

08004cec <sdIsInit>:

	return ret;
}

bool sdIsInit(void)
{
 8004cec:	b480      	push	{r7}
 8004cee:	af00      	add	r7, sp, #0
	return is_init;
 8004cf0:	4b03      	ldr	r3, [pc, #12]	; (8004d00 <sdIsInit+0x14>)
 8004cf2:	781b      	ldrb	r3, [r3, #0]
}
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfc:	4770      	bx	lr
 8004cfe:	bf00      	nop
 8004d00:	200072c0 	.word	0x200072c0

08004d04 <sdIsDetected>:

bool sdIsDetected(void)
{
 8004d04:	b580      	push	{r7, lr}
 8004d06:	af00      	add	r7, sp, #0
	if(gpioPinRead(_PIN_GPIO_SDCARD_DETECT) == true)
 8004d08:	2000      	movs	r0, #0
 8004d0a:	f7ff f90b 	bl	8003f24 <gpioPinRead>
 8004d0e:	4603      	mov	r3, r0
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d003      	beq.n	8004d1c <sdIsDetected+0x18>
	{
		is_detected = true;
 8004d14:	4b05      	ldr	r3, [pc, #20]	; (8004d2c <sdIsDetected+0x28>)
 8004d16:	2201      	movs	r2, #1
 8004d18:	701a      	strb	r2, [r3, #0]
 8004d1a:	e002      	b.n	8004d22 <sdIsDetected+0x1e>
	}
	else
	{
		is_detected = false;
 8004d1c:	4b03      	ldr	r3, [pc, #12]	; (8004d2c <sdIsDetected+0x28>)
 8004d1e:	2200      	movs	r2, #0
 8004d20:	701a      	strb	r2, [r3, #0]
	}

	return is_detected;
 8004d22:	4b02      	ldr	r3, [pc, #8]	; (8004d2c <sdIsDetected+0x28>)
 8004d24:	781b      	ldrb	r3, [r3, #0]
}
 8004d26:	4618      	mov	r0, r3
 8004d28:	bd80      	pop	{r7, pc}
 8004d2a:	bf00      	nop
 8004d2c:	200072c1 	.word	0x200072c1

08004d30 <sdGetInfo>:

bool sdGetInfo(sd_info_t *p_info)
{
 8004d30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004d34:	b08c      	sub	sp, #48	; 0x30
 8004d36:	af00      	add	r7, sp, #0
 8004d38:	6078      	str	r0, [r7, #4]
	bool ret = false;
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	sd_info_t *p_sd_info = (sd_info_t *)p_info;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	62bb      	str	r3, [r7, #40]	; 0x28

	HAL_SD_CardInfoTypeDef card_info;

	if(is_init == true)
 8004d44:	4b24      	ldr	r3, [pc, #144]	; (8004dd8 <sdGetInfo+0xa8>)
 8004d46:	781b      	ldrb	r3, [r3, #0]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d03d      	beq.n	8004dc8 <sdGetInfo+0x98>
	{
		HAL_SD_GetCardInfo(&hsd, &card_info);
 8004d4c:	f107 0308 	add.w	r3, r7, #8
 8004d50:	4619      	mov	r1, r3
 8004d52:	4822      	ldr	r0, [pc, #136]	; (8004ddc <sdGetInfo+0xac>)
 8004d54:	f004 fb7c 	bl	8009450 <HAL_SD_GetCardInfo>

		p_sd_info->card_type 					= card_info.CardType;
 8004d58:	68ba      	ldr	r2, [r7, #8]
 8004d5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d5c:	601a      	str	r2, [r3, #0]
    p_sd_info->card_version       = card_info.CardVersion;
 8004d5e:	68fa      	ldr	r2, [r7, #12]
 8004d60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d62:	605a      	str	r2, [r3, #4]
    p_sd_info->card_class         = card_info.Class;
 8004d64:	693a      	ldr	r2, [r7, #16]
 8004d66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d68:	609a      	str	r2, [r3, #8]
    p_sd_info->rel_card_Add       = card_info.RelCardAdd;
 8004d6a:	697a      	ldr	r2, [r7, #20]
 8004d6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d6e:	60da      	str	r2, [r3, #12]
    p_sd_info->block_numbers      = card_info.BlockNbr;
 8004d70:	69ba      	ldr	r2, [r7, #24]
 8004d72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d74:	611a      	str	r2, [r3, #16]
    p_sd_info->block_size         = card_info.BlockSize;
 8004d76:	69fa      	ldr	r2, [r7, #28]
 8004d78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d7a:	615a      	str	r2, [r3, #20]
    p_sd_info->log_block_numbers  = card_info.LogBlockNbr;
 8004d7c:	6a3a      	ldr	r2, [r7, #32]
 8004d7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d80:	619a      	str	r2, [r3, #24]
    p_sd_info->log_block_size     = card_info.LogBlockSize;
 8004d82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d86:	61da      	str	r2, [r3, #28]
    p_sd_info->card_size          =  (uint32_t)((uint64_t)p_sd_info->block_numbers * (uint64_t) p_sd_info->block_size / (uint64_t)1024 / (uint64_t)1024);
 8004d88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d8a:	691b      	ldr	r3, [r3, #16]
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	469a      	mov	sl, r3
 8004d90:	4693      	mov	fp, r2
 8004d92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d94:	695b      	ldr	r3, [r3, #20]
 8004d96:	2200      	movs	r2, #0
 8004d98:	4698      	mov	r8, r3
 8004d9a:	4691      	mov	r9, r2
 8004d9c:	fb08 f20b 	mul.w	r2, r8, fp
 8004da0:	fb0a f309 	mul.w	r3, sl, r9
 8004da4:	4413      	add	r3, r2
 8004da6:	fbaa 4508 	umull	r4, r5, sl, r8
 8004daa:	442b      	add	r3, r5
 8004dac:	461d      	mov	r5, r3
 8004dae:	f04f 0200 	mov.w	r2, #0
 8004db2:	f04f 0300 	mov.w	r3, #0
 8004db6:	0d22      	lsrs	r2, r4, #20
 8004db8:	ea42 3205 	orr.w	r2, r2, r5, lsl #12
 8004dbc:	0d2b      	lsrs	r3, r5, #20
 8004dbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dc0:	621a      	str	r2, [r3, #32]

    ret = true;
 8004dc2:	2301      	movs	r3, #1
 8004dc4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	}

	return ret;
 8004dc8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8004dcc:	4618      	mov	r0, r3
 8004dce:	3730      	adds	r7, #48	; 0x30
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004dd6:	bf00      	nop
 8004dd8:	200072c0 	.word	0x200072c0
 8004ddc:	2000039c 	.word	0x2000039c

08004de0 <sdIsBusy>:

bool sdIsBusy(void)
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b082      	sub	sp, #8
 8004de4:	af00      	add	r7, sp, #0
	bool is_busy;

	if(HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER)
 8004de6:	4808      	ldr	r0, [pc, #32]	; (8004e08 <sdIsBusy+0x28>)
 8004de8:	f004 fbf8 	bl	80095dc <HAL_SD_GetCardState>
 8004dec:	4603      	mov	r3, r0
 8004dee:	2b04      	cmp	r3, #4
 8004df0:	d102      	bne.n	8004df8 <sdIsBusy+0x18>
	{
		is_busy = false;
 8004df2:	2300      	movs	r3, #0
 8004df4:	71fb      	strb	r3, [r7, #7]
 8004df6:	e001      	b.n	8004dfc <sdIsBusy+0x1c>
	}
	else
	{
		is_busy = true;
 8004df8:	2301      	movs	r3, #1
 8004dfa:	71fb      	strb	r3, [r7, #7]
	}

	return is_busy;
 8004dfc:	79fb      	ldrb	r3, [r7, #7]
}
 8004dfe:	4618      	mov	r0, r3
 8004e00:	3708      	adds	r7, #8
 8004e02:	46bd      	mov	sp, r7
 8004e04:	bd80      	pop	{r7, pc}
 8004e06:	bf00      	nop
 8004e08:	2000039c 	.word	0x2000039c

08004e0c <sdIsReady>:

bool sdIsReady(uint32_t timeout)
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b084      	sub	sp, #16
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
	uint32_t pre_time;

	pre_time = millis();
 8004e14:	f7fc ff7e 	bl	8001d14 <millis>
 8004e18:	60f8      	str	r0, [r7, #12]
	while(millis() - pre_time < timeout)
 8004e1a:	e009      	b.n	8004e30 <sdIsReady+0x24>
	{
		if(sdIsBusy() == false)
 8004e1c:	f7ff ffe0 	bl	8004de0 <sdIsBusy>
 8004e20:	4603      	mov	r3, r0
 8004e22:	f083 0301 	eor.w	r3, r3, #1
 8004e26:	b2db      	uxtb	r3, r3
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d001      	beq.n	8004e30 <sdIsReady+0x24>
		{
			return true;
 8004e2c:	2301      	movs	r3, #1
 8004e2e:	e008      	b.n	8004e42 <sdIsReady+0x36>
	while(millis() - pre_time < timeout)
 8004e30:	f7fc ff70 	bl	8001d14 <millis>
 8004e34:	4602      	mov	r2, r0
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	1ad3      	subs	r3, r2, r3
 8004e3a:	687a      	ldr	r2, [r7, #4]
 8004e3c:	429a      	cmp	r2, r3
 8004e3e:	d8ed      	bhi.n	8004e1c <sdIsReady+0x10>
		}
	}

	return false;
 8004e40:	2300      	movs	r3, #0
}
 8004e42:	4618      	mov	r0, r3
 8004e44:	3710      	adds	r7, #16
 8004e46:	46bd      	mov	sp, r7
 8004e48:	bd80      	pop	{r7, pc}
	...

08004e4c <sdReadBlocks>:

bool sdReadBlocks(uint32_t block_addr, uint8_t *p_data, uint32_t num_of_blocks, uint32_t timeout_ms)
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b086      	sub	sp, #24
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	60f8      	str	r0, [r7, #12]
 8004e54:	60b9      	str	r1, [r7, #8]
 8004e56:	607a      	str	r2, [r7, #4]
 8004e58:	603b      	str	r3, [r7, #0]
	bool ret = false;
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	75fb      	strb	r3, [r7, #23]
	uint32_t pre_time;

	is_rx_done = false;
 8004e5e:	4b1e      	ldr	r3, [pc, #120]	; (8004ed8 <sdReadBlocks+0x8c>)
 8004e60:	2200      	movs	r2, #0
 8004e62:	701a      	strb	r2, [r3, #0]
	if(HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)p_data, block_addr, num_of_blocks) == HAL_OK)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	68fa      	ldr	r2, [r7, #12]
 8004e68:	68b9      	ldr	r1, [r7, #8]
 8004e6a:	481c      	ldr	r0, [pc, #112]	; (8004edc <sdReadBlocks+0x90>)
 8004e6c:	f003 fdea 	bl	8008a44 <HAL_SD_ReadBlocks_DMA>
 8004e70:	4603      	mov	r3, r0
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d12a      	bne.n	8004ecc <sdReadBlocks+0x80>
	{
		pre_time = millis();
 8004e76:	f7fc ff4d 	bl	8001d14 <millis>
 8004e7a:	6138      	str	r0, [r7, #16]
		while(is_rx_done == false)
 8004e7c:	e007      	b.n	8004e8e <sdReadBlocks+0x42>
		{
			if(millis() - pre_time >= timeout_ms)
 8004e7e:	f7fc ff49 	bl	8001d14 <millis>
 8004e82:	4602      	mov	r2, r0
 8004e84:	693b      	ldr	r3, [r7, #16]
 8004e86:	1ad3      	subs	r3, r2, r3
 8004e88:	683a      	ldr	r2, [r7, #0]
 8004e8a:	429a      	cmp	r2, r3
 8004e8c:	d908      	bls.n	8004ea0 <sdReadBlocks+0x54>
		while(is_rx_done == false)
 8004e8e:	4b12      	ldr	r3, [pc, #72]	; (8004ed8 <sdReadBlocks+0x8c>)
 8004e90:	781b      	ldrb	r3, [r3, #0]
 8004e92:	b2db      	uxtb	r3, r3
 8004e94:	f083 0301 	eor.w	r3, r3, #1
 8004e98:	b2db      	uxtb	r3, r3
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d1ef      	bne.n	8004e7e <sdReadBlocks+0x32>
 8004e9e:	e00d      	b.n	8004ebc <sdReadBlocks+0x70>
			{
				break;
 8004ea0:	bf00      	nop
			}
		}

		while(sdIsBusy() == true)
 8004ea2:	e00b      	b.n	8004ebc <sdReadBlocks+0x70>
			{
				if(millis() - pre_time >= timeout_ms)
 8004ea4:	f7fc ff36 	bl	8001d14 <millis>
 8004ea8:	4602      	mov	r2, r0
 8004eaa:	693b      	ldr	r3, [r7, #16]
 8004eac:	1ad3      	subs	r3, r2, r3
 8004eae:	683a      	ldr	r2, [r7, #0]
 8004eb0:	429a      	cmp	r2, r3
 8004eb2:	d803      	bhi.n	8004ebc <sdReadBlocks+0x70>
				{
					is_rx_done = false;
 8004eb4:	4b08      	ldr	r3, [pc, #32]	; (8004ed8 <sdReadBlocks+0x8c>)
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	701a      	strb	r2, [r3, #0]
					break;
 8004eba:	e004      	b.n	8004ec6 <sdReadBlocks+0x7a>
		while(sdIsBusy() == true)
 8004ebc:	f7ff ff90 	bl	8004de0 <sdIsBusy>
 8004ec0:	4603      	mov	r3, r0
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d1ee      	bne.n	8004ea4 <sdReadBlocks+0x58>
				}
			}

			ret = is_rx_done;
 8004ec6:	4b04      	ldr	r3, [pc, #16]	; (8004ed8 <sdReadBlocks+0x8c>)
 8004ec8:	781b      	ldrb	r3, [r3, #0]
 8004eca:	75fb      	strb	r3, [r7, #23]
	}

	return ret;
 8004ecc:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ece:	4618      	mov	r0, r3
 8004ed0:	3718      	adds	r7, #24
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	bd80      	pop	{r7, pc}
 8004ed6:	bf00      	nop
 8004ed8:	200072c2 	.word	0x200072c2
 8004edc:	2000039c 	.word	0x2000039c

08004ee0 <sdWriteBlocks>:

bool sdWriteBlocks(uint32_t block_addr, uint8_t *p_data, uint32_t num_of_blocks, uint32_t timeout_ms)
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b086      	sub	sp, #24
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	60f8      	str	r0, [r7, #12]
 8004ee8:	60b9      	str	r1, [r7, #8]
 8004eea:	607a      	str	r2, [r7, #4]
 8004eec:	603b      	str	r3, [r7, #0]
	bool ret = false;
 8004eee:	2300      	movs	r3, #0
 8004ef0:	75fb      	strb	r3, [r7, #23]
	uint32_t pre_time;

	is_tx_done = false;
 8004ef2:	4b1f      	ldr	r3, [pc, #124]	; (8004f70 <sdWriteBlocks+0x90>)
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	701a      	strb	r2, [r3, #0]
	if(HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)p_data, block_addr, num_of_blocks) == HAL_OK)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	68fa      	ldr	r2, [r7, #12]
 8004efc:	68b9      	ldr	r1, [r7, #8]
 8004efe:	481d      	ldr	r0, [pc, #116]	; (8004f74 <sdWriteBlocks+0x94>)
 8004f00:	f003 fe82 	bl	8008c08 <HAL_SD_WriteBlocks_DMA>
 8004f04:	4603      	mov	r3, r0
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d12d      	bne.n	8004f66 <sdWriteBlocks+0x86>
	{
		pre_time = millis();
 8004f0a:	f7fc ff03 	bl	8001d14 <millis>
 8004f0e:	6138      	str	r0, [r7, #16]
		while(is_tx_done == false)
 8004f10:	e007      	b.n	8004f22 <sdWriteBlocks+0x42>
		{
			if(millis() - pre_time >= timeout_ms)
 8004f12:	f7fc feff 	bl	8001d14 <millis>
 8004f16:	4602      	mov	r2, r0
 8004f18:	693b      	ldr	r3, [r7, #16]
 8004f1a:	1ad3      	subs	r3, r2, r3
 8004f1c:	683a      	ldr	r2, [r7, #0]
 8004f1e:	429a      	cmp	r2, r3
 8004f20:	d908      	bls.n	8004f34 <sdWriteBlocks+0x54>
		while(is_tx_done == false)
 8004f22:	4b13      	ldr	r3, [pc, #76]	; (8004f70 <sdWriteBlocks+0x90>)
 8004f24:	781b      	ldrb	r3, [r3, #0]
 8004f26:	b2db      	uxtb	r3, r3
 8004f28:	f083 0301 	eor.w	r3, r3, #1
 8004f2c:	b2db      	uxtb	r3, r3
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d1ef      	bne.n	8004f12 <sdWriteBlocks+0x32>
 8004f32:	e000      	b.n	8004f36 <sdWriteBlocks+0x56>
			{
				break;
 8004f34:	bf00      	nop
			}
		}

		pre_time = millis();
 8004f36:	f7fc feed 	bl	8001d14 <millis>
 8004f3a:	6138      	str	r0, [r7, #16]
		while(sdIsBusy() == true)
 8004f3c:	e00b      	b.n	8004f56 <sdWriteBlocks+0x76>
		{
			if(millis() - pre_time >= timeout_ms)
 8004f3e:	f7fc fee9 	bl	8001d14 <millis>
 8004f42:	4602      	mov	r2, r0
 8004f44:	693b      	ldr	r3, [r7, #16]
 8004f46:	1ad3      	subs	r3, r2, r3
 8004f48:	683a      	ldr	r2, [r7, #0]
 8004f4a:	429a      	cmp	r2, r3
 8004f4c:	d803      	bhi.n	8004f56 <sdWriteBlocks+0x76>
			{
				is_tx_done = false;
 8004f4e:	4b08      	ldr	r3, [pc, #32]	; (8004f70 <sdWriteBlocks+0x90>)
 8004f50:	2200      	movs	r2, #0
 8004f52:	701a      	strb	r2, [r3, #0]
				break;
 8004f54:	e004      	b.n	8004f60 <sdWriteBlocks+0x80>
		while(sdIsBusy() == true)
 8004f56:	f7ff ff43 	bl	8004de0 <sdIsBusy>
 8004f5a:	4603      	mov	r3, r0
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d1ee      	bne.n	8004f3e <sdWriteBlocks+0x5e>
			}
		}

		ret = is_tx_done;
 8004f60:	4b03      	ldr	r3, [pc, #12]	; (8004f70 <sdWriteBlocks+0x90>)
 8004f62:	781b      	ldrb	r3, [r3, #0]
 8004f64:	75fb      	strb	r3, [r7, #23]
	}

	return ret;
 8004f66:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f68:	4618      	mov	r0, r3
 8004f6a:	3718      	adds	r7, #24
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	bd80      	pop	{r7, pc}
 8004f70:	200072c3 	.word	0x200072c3
 8004f74:	2000039c 	.word	0x2000039c

08004f78 <HAL_SD_TxCpltCallback>:
	return ret;
}


__weak void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8004f78:	b480      	push	{r7}
 8004f7a:	b083      	sub	sp, #12
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
	is_tx_done = true;
 8004f80:	4b04      	ldr	r3, [pc, #16]	; (8004f94 <HAL_SD_TxCpltCallback+0x1c>)
 8004f82:	2201      	movs	r2, #1
 8004f84:	701a      	strb	r2, [r3, #0]
}
 8004f86:	bf00      	nop
 8004f88:	370c      	adds	r7, #12
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f90:	4770      	bx	lr
 8004f92:	bf00      	nop
 8004f94:	200072c3 	.word	0x200072c3

08004f98 <HAL_SD_RxCpltCallback>:

__weak void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8004f98:	b480      	push	{r7}
 8004f9a:	b083      	sub	sp, #12
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
	is_rx_done = true;
 8004fa0:	4b04      	ldr	r3, [pc, #16]	; (8004fb4 <HAL_SD_RxCpltCallback+0x1c>)
 8004fa2:	2201      	movs	r2, #1
 8004fa4:	701a      	strb	r2, [r3, #0]
}
 8004fa6:	bf00      	nop
 8004fa8:	370c      	adds	r7, #12
 8004faa:	46bd      	mov	sp, r7
 8004fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb0:	4770      	bx	lr
 8004fb2:	bf00      	nop
 8004fb4:	200072c2 	.word	0x200072c2

08004fb8 <cliSd>:

#ifdef _USE_HW_CLI

void cliSd(cli_args_t *args)
{
 8004fb8:	b590      	push	{r4, r7, lr}
 8004fba:	f5ad 7d07 	sub.w	sp, sp, #540	; 0x21c
 8004fbe:	af00      	add	r7, sp, #0
 8004fc0:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8004fc4:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8004fc8:	6018      	str	r0, [r3, #0]
	bool ret = false;
 8004fca:	2300      	movs	r3, #0
 8004fcc:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217

	if(args->argc == 1 && args->isStr(0, "info") == true)
 8004fd0:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8004fd4:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	881b      	ldrh	r3, [r3, #0]
 8004fdc:	2b01      	cmp	r3, #1
 8004fde:	f040 8094 	bne.w	800510a <cliSd+0x152>
 8004fe2:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8004fe6:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	695b      	ldr	r3, [r3, #20]
 8004fee:	497a      	ldr	r1, [pc, #488]	; (80051d8 <cliSd+0x220>)
 8004ff0:	2000      	movs	r0, #0
 8004ff2:	4798      	blx	r3
 8004ff4:	4603      	mov	r3, r0
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	f000 8087 	beq.w	800510a <cliSd+0x152>
	{
		sd_info_t sd_info;

		cliPrintf("sd init : %d\n", is_init);
 8004ffc:	4b77      	ldr	r3, [pc, #476]	; (80051dc <cliSd+0x224>)
 8004ffe:	781b      	ldrb	r3, [r3, #0]
 8005000:	4619      	mov	r1, r3
 8005002:	4877      	ldr	r0, [pc, #476]	; (80051e0 <cliSd+0x228>)
 8005004:	f7fe faf8 	bl	80035f8 <cliPrintf>
		cliPrintf("sd connected : %d\n", is_detected);
 8005008:	4b76      	ldr	r3, [pc, #472]	; (80051e4 <cliSd+0x22c>)
 800500a:	781b      	ldrb	r3, [r3, #0]
 800500c:	4619      	mov	r1, r3
 800500e:	4876      	ldr	r0, [pc, #472]	; (80051e8 <cliSd+0x230>)
 8005010:	f7fe faf2 	bl	80035f8 <cliPrintf>

		if(is_init == true)
 8005014:	4b71      	ldr	r3, [pc, #452]	; (80051dc <cliSd+0x224>)
 8005016:	781b      	ldrb	r3, [r3, #0]
 8005018:	2b00      	cmp	r3, #0
 800501a:	d073      	beq.n	8005104 <cliSd+0x14c>
		{
			if(sdGetInfo(&sd_info) == true)
 800501c:	f107 030c 	add.w	r3, r7, #12
 8005020:	4618      	mov	r0, r3
 8005022:	f7ff fe85 	bl	8004d30 <sdGetInfo>
 8005026:	4603      	mov	r3, r0
 8005028:	2b00      	cmp	r3, #0
 800502a:	d06b      	beq.n	8005104 <cliSd+0x14c>
			{
        cliPrintf("   card_type            : %d\n", sd_info.card_type);
 800502c:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8005030:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	4619      	mov	r1, r3
 8005038:	486c      	ldr	r0, [pc, #432]	; (80051ec <cliSd+0x234>)
 800503a:	f7fe fadd 	bl	80035f8 <cliPrintf>
        cliPrintf("   card_version         : %d\n", sd_info.card_version);
 800503e:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8005042:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8005046:	685b      	ldr	r3, [r3, #4]
 8005048:	4619      	mov	r1, r3
 800504a:	4869      	ldr	r0, [pc, #420]	; (80051f0 <cliSd+0x238>)
 800504c:	f7fe fad4 	bl	80035f8 <cliPrintf>
        cliPrintf("   card_class           : %d\n", sd_info.card_class);
 8005050:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8005054:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8005058:	689b      	ldr	r3, [r3, #8]
 800505a:	4619      	mov	r1, r3
 800505c:	4865      	ldr	r0, [pc, #404]	; (80051f4 <cliSd+0x23c>)
 800505e:	f7fe facb 	bl	80035f8 <cliPrintf>
        cliPrintf("   rel_card_Add         : %d\n", sd_info.rel_card_Add);
 8005062:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8005066:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 800506a:	68db      	ldr	r3, [r3, #12]
 800506c:	4619      	mov	r1, r3
 800506e:	4862      	ldr	r0, [pc, #392]	; (80051f8 <cliSd+0x240>)
 8005070:	f7fe fac2 	bl	80035f8 <cliPrintf>
        cliPrintf("   block_numbers        : %d\n", sd_info.block_numbers);
 8005074:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8005078:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 800507c:	691b      	ldr	r3, [r3, #16]
 800507e:	4619      	mov	r1, r3
 8005080:	485e      	ldr	r0, [pc, #376]	; (80051fc <cliSd+0x244>)
 8005082:	f7fe fab9 	bl	80035f8 <cliPrintf>
        cliPrintf("   block_size           : %d\n", sd_info.block_size);
 8005086:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800508a:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 800508e:	695b      	ldr	r3, [r3, #20]
 8005090:	4619      	mov	r1, r3
 8005092:	485b      	ldr	r0, [pc, #364]	; (8005200 <cliSd+0x248>)
 8005094:	f7fe fab0 	bl	80035f8 <cliPrintf>
        cliPrintf("   log_block_numbers    : %d\n", sd_info.log_block_numbers);
 8005098:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800509c:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80050a0:	699b      	ldr	r3, [r3, #24]
 80050a2:	4619      	mov	r1, r3
 80050a4:	4857      	ldr	r0, [pc, #348]	; (8005204 <cliSd+0x24c>)
 80050a6:	f7fe faa7 	bl	80035f8 <cliPrintf>
        cliPrintf("   log_block_size       : %d\n", sd_info.log_block_size);
 80050aa:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80050ae:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80050b2:	69db      	ldr	r3, [r3, #28]
 80050b4:	4619      	mov	r1, r3
 80050b6:	4854      	ldr	r0, [pc, #336]	; (8005208 <cliSd+0x250>)
 80050b8:	f7fe fa9e 	bl	80035f8 <cliPrintf>
        cliPrintf("   card_size            : %d MB, %d.%d GB\n", sd_info.card_size, sd_info.card_size/1024, ((sd_info.card_size * 10)/1024) % 10);
 80050bc:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80050c0:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80050c4:	6a18      	ldr	r0, [r3, #32]
 80050c6:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80050ca:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80050ce:	6a1b      	ldr	r3, [r3, #32]
 80050d0:	0a9c      	lsrs	r4, r3, #10
 80050d2:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80050d6:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80050da:	6a1a      	ldr	r2, [r3, #32]
 80050dc:	4613      	mov	r3, r2
 80050de:	009b      	lsls	r3, r3, #2
 80050e0:	4413      	add	r3, r2
 80050e2:	005b      	lsls	r3, r3, #1
 80050e4:	0a99      	lsrs	r1, r3, #10
 80050e6:	4b49      	ldr	r3, [pc, #292]	; (800520c <cliSd+0x254>)
 80050e8:	fba3 2301 	umull	r2, r3, r3, r1
 80050ec:	08da      	lsrs	r2, r3, #3
 80050ee:	4613      	mov	r3, r2
 80050f0:	009b      	lsls	r3, r3, #2
 80050f2:	4413      	add	r3, r2
 80050f4:	005b      	lsls	r3, r3, #1
 80050f6:	1aca      	subs	r2, r1, r3
 80050f8:	4613      	mov	r3, r2
 80050fa:	4622      	mov	r2, r4
 80050fc:	4601      	mov	r1, r0
 80050fe:	4844      	ldr	r0, [pc, #272]	; (8005210 <cliSd+0x258>)
 8005100:	f7fe fa7a 	bl	80035f8 <cliPrintf>
			}
		}

		ret = true;
 8005104:	2301      	movs	r3, #1
 8005106:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
	}

	if(args->argc == 2 && args->isStr(0, "read") == true)
 800510a:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800510e:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	881b      	ldrh	r3, [r3, #0]
 8005116:	2b02      	cmp	r3, #2
 8005118:	d147      	bne.n	80051aa <cliSd+0x1f2>
 800511a:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800511e:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	695b      	ldr	r3, [r3, #20]
 8005126:	493b      	ldr	r1, [pc, #236]	; (8005214 <cliSd+0x25c>)
 8005128:	2000      	movs	r0, #0
 800512a:	4798      	blx	r3
 800512c:	4603      	mov	r3, r0
 800512e:	2b00      	cmp	r3, #0
 8005130:	d03b      	beq.n	80051aa <cliSd+0x1f2>
	{
		uint32_t number;
		uint32_t buf[512/4];

		number = args->getData(1);
 8005132:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8005136:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	689b      	ldr	r3, [r3, #8]
 800513e:	2001      	movs	r0, #1
 8005140:	4798      	blx	r3
 8005142:	4603      	mov	r3, r0
 8005144:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c

		if(sdReadBlocks(number, (uint8_t *)buf, 1, 1000) == true)
 8005148:	f107 010c 	add.w	r1, r7, #12
 800514c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005150:	2201      	movs	r2, #1
 8005152:	f8d7 020c 	ldr.w	r0, [r7, #524]	; 0x20c
 8005156:	f7ff fe79 	bl	8004e4c <sdReadBlocks>
 800515a:	4603      	mov	r3, r0
 800515c:	2b00      	cmp	r3, #0
 800515e:	d01e      	beq.n	800519e <cliSd+0x1e6>
		{
			for(int i=0; i<512/4; i++)
 8005160:	2300      	movs	r3, #0
 8005162:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 8005166:	e015      	b.n	8005194 <cliSd+0x1dc>
			{
				cliPrintf("%d:%04d : 0x%08X\n", number, i*4, buf[i]);
 8005168:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800516c:	0099      	lsls	r1, r3, #2
 800516e:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8005172:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8005176:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 800517a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800517e:	460a      	mov	r2, r1
 8005180:	f8d7 120c 	ldr.w	r1, [r7, #524]	; 0x20c
 8005184:	4824      	ldr	r0, [pc, #144]	; (8005218 <cliSd+0x260>)
 8005186:	f7fe fa37 	bl	80035f8 <cliPrintf>
			for(int i=0; i<512/4; i++)
 800518a:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800518e:	3301      	adds	r3, #1
 8005190:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 8005194:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8005198:	2b7f      	cmp	r3, #127	; 0x7f
 800519a:	dde5      	ble.n	8005168 <cliSd+0x1b0>
 800519c:	e002      	b.n	80051a4 <cliSd+0x1ec>
			}
		}
		else
		{
			cliPrintf("sdRead Fail\n");
 800519e:	481f      	ldr	r0, [pc, #124]	; (800521c <cliSd+0x264>)
 80051a0:	f7fe fa2a 	bl	80035f8 <cliPrintf>
		}

		ret = true;
 80051a4:	2301      	movs	r3, #1
 80051a6:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
	}

	if(ret != true)
 80051aa:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 80051ae:	f083 0301 	eor.w	r3, r3, #1
 80051b2:	b2db      	uxtb	r3, r3
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d009      	beq.n	80051cc <cliSd+0x214>
	{
		cliPrintf("sd info\n");
 80051b8:	4819      	ldr	r0, [pc, #100]	; (8005220 <cliSd+0x268>)
 80051ba:	f7fe fa1d 	bl	80035f8 <cliPrintf>

		if(is_init == true)
 80051be:	4b07      	ldr	r3, [pc, #28]	; (80051dc <cliSd+0x224>)
 80051c0:	781b      	ldrb	r3, [r3, #0]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d002      	beq.n	80051cc <cliSd+0x214>
		{
			cliPrintf("sd read block_number\n");
 80051c6:	4817      	ldr	r0, [pc, #92]	; (8005224 <cliSd+0x26c>)
 80051c8:	f7fe fa16 	bl	80035f8 <cliPrintf>
		}
	}
}
 80051cc:	bf00      	nop
 80051ce:	f507 7707 	add.w	r7, r7, #540	; 0x21c
 80051d2:	46bd      	mov	sp, r7
 80051d4:	bd90      	pop	{r4, r7, pc}
 80051d6:	bf00      	nop
 80051d8:	08016c74 	.word	0x08016c74
 80051dc:	200072c0 	.word	0x200072c0
 80051e0:	08016c7c 	.word	0x08016c7c
 80051e4:	200072c1 	.word	0x200072c1
 80051e8:	08016c8c 	.word	0x08016c8c
 80051ec:	08016ca0 	.word	0x08016ca0
 80051f0:	08016cc0 	.word	0x08016cc0
 80051f4:	08016ce0 	.word	0x08016ce0
 80051f8:	08016d00 	.word	0x08016d00
 80051fc:	08016d20 	.word	0x08016d20
 8005200:	08016d40 	.word	0x08016d40
 8005204:	08016d60 	.word	0x08016d60
 8005208:	08016d80 	.word	0x08016d80
 800520c:	cccccccd 	.word	0xcccccccd
 8005210:	08016da0 	.word	0x08016da0
 8005214:	08016dcc 	.word	0x08016dcc
 8005218:	08016dd4 	.word	0x08016dd4
 800521c:	08016de8 	.word	0x08016de8
 8005220:	08016df8 	.word	0x08016df8
 8005224:	08016e04 	.word	0x08016e04

08005228 <spiInit>:
#ifdef _USE_HW_CLI
	static void cliSpi(cli_args_t *agrs);
#endif

bool spiInit(void)
{
 8005228:	b580      	push	{r7, lr}
 800522a:	b082      	sub	sp, #8
 800522c:	af00      	add	r7, sp, #0
	bool ret = true;
 800522e:	2301      	movs	r3, #1
 8005230:	70fb      	strb	r3, [r7, #3]

	for(int i=0; i<SPI_MAX_CH; i++)
 8005232:	2300      	movs	r3, #0
 8005234:	607b      	str	r3, [r7, #4]
 8005236:	e03d      	b.n	80052b4 <spiInit+0x8c>
	{
		spi_tbl[i].is_open = false;
 8005238:	4924      	ldr	r1, [pc, #144]	; (80052cc <spiInit+0xa4>)
 800523a:	687a      	ldr	r2, [r7, #4]
 800523c:	4613      	mov	r3, r2
 800523e:	009b      	lsls	r3, r3, #2
 8005240:	4413      	add	r3, r2
 8005242:	009b      	lsls	r3, r3, #2
 8005244:	440b      	add	r3, r1
 8005246:	2200      	movs	r2, #0
 8005248:	701a      	strb	r2, [r3, #0]
		spi_tbl[i].is_tx_done = false;
 800524a:	4920      	ldr	r1, [pc, #128]	; (80052cc <spiInit+0xa4>)
 800524c:	687a      	ldr	r2, [r7, #4]
 800524e:	4613      	mov	r3, r2
 8005250:	009b      	lsls	r3, r3, #2
 8005252:	4413      	add	r3, r2
 8005254:	009b      	lsls	r3, r3, #2
 8005256:	440b      	add	r3, r1
 8005258:	3301      	adds	r3, #1
 800525a:	2200      	movs	r2, #0
 800525c:	701a      	strb	r2, [r3, #0]
		spi_tbl[i].is_error = false;
 800525e:	491b      	ldr	r1, [pc, #108]	; (80052cc <spiInit+0xa4>)
 8005260:	687a      	ldr	r2, [r7, #4]
 8005262:	4613      	mov	r3, r2
 8005264:	009b      	lsls	r3, r3, #2
 8005266:	4413      	add	r3, r2
 8005268:	009b      	lsls	r3, r3, #2
 800526a:	440b      	add	r3, r1
 800526c:	3302      	adds	r3, #2
 800526e:	2200      	movs	r2, #0
 8005270:	701a      	strb	r2, [r3, #0]
		spi_tbl[i].func_tx = NULL;
 8005272:	4916      	ldr	r1, [pc, #88]	; (80052cc <spiInit+0xa4>)
 8005274:	687a      	ldr	r2, [r7, #4]
 8005276:	4613      	mov	r3, r2
 8005278:	009b      	lsls	r3, r3, #2
 800527a:	4413      	add	r3, r2
 800527c:	009b      	lsls	r3, r3, #2
 800527e:	440b      	add	r3, r1
 8005280:	3304      	adds	r3, #4
 8005282:	2200      	movs	r2, #0
 8005284:	601a      	str	r2, [r3, #0]
		spi_tbl[i].h_dma_tx = NULL;
 8005286:	4911      	ldr	r1, [pc, #68]	; (80052cc <spiInit+0xa4>)
 8005288:	687a      	ldr	r2, [r7, #4]
 800528a:	4613      	mov	r3, r2
 800528c:	009b      	lsls	r3, r3, #2
 800528e:	4413      	add	r3, r2
 8005290:	009b      	lsls	r3, r3, #2
 8005292:	440b      	add	r3, r1
 8005294:	330c      	adds	r3, #12
 8005296:	2200      	movs	r2, #0
 8005298:	601a      	str	r2, [r3, #0]
		spi_tbl[i].h_dma_rx = NULL;
 800529a:	490c      	ldr	r1, [pc, #48]	; (80052cc <spiInit+0xa4>)
 800529c:	687a      	ldr	r2, [r7, #4]
 800529e:	4613      	mov	r3, r2
 80052a0:	009b      	lsls	r3, r3, #2
 80052a2:	4413      	add	r3, r2
 80052a4:	009b      	lsls	r3, r3, #2
 80052a6:	440b      	add	r3, r1
 80052a8:	3310      	adds	r3, #16
 80052aa:	2200      	movs	r2, #0
 80052ac:	601a      	str	r2, [r3, #0]
	for(int i=0; i<SPI_MAX_CH; i++)
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	3301      	adds	r3, #1
 80052b2:	607b      	str	r3, [r7, #4]
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	ddbe      	ble.n	8005238 <spiInit+0x10>
	}

#ifdef _USE_HW_CLI
	cliAdd("spi", cliSpi);
 80052ba:	4905      	ldr	r1, [pc, #20]	; (80052d0 <spiInit+0xa8>)
 80052bc:	4805      	ldr	r0, [pc, #20]	; (80052d4 <spiInit+0xac>)
 80052be:	f7fe faab 	bl	8003818 <cliAdd>
#endif

	return ret;
 80052c2:	78fb      	ldrb	r3, [r7, #3]
}
 80052c4:	4618      	mov	r0, r3
 80052c6:	3708      	adds	r7, #8
 80052c8:	46bd      	mov	sp, r7
 80052ca:	bd80      	pop	{r7, pc}
 80052cc:	200072c4 	.word	0x200072c4
 80052d0:	08005649 	.word	0x08005649
 80052d4:	08016e1c 	.word	0x08016e1c

080052d8 <spiBegin>:

bool spiBegin(uint8_t ch)
{
 80052d8:	b480      	push	{r7}
 80052da:	b085      	sub	sp, #20
 80052dc:	af00      	add	r7, sp, #0
 80052de:	4603      	mov	r3, r0
 80052e0:	71fb      	strb	r3, [r7, #7]
	bool ret = false;
 80052e2:	2300      	movs	r3, #0
 80052e4:	73fb      	strb	r3, [r7, #15]
	spi_t *p_spi = &spi_tbl[ch];
 80052e6:	79fa      	ldrb	r2, [r7, #7]
 80052e8:	4613      	mov	r3, r2
 80052ea:	009b      	lsls	r3, r3, #2
 80052ec:	4413      	add	r3, r2
 80052ee:	009b      	lsls	r3, r3, #2
 80052f0:	4a0c      	ldr	r2, [pc, #48]	; (8005324 <spiBegin+0x4c>)
 80052f2:	4413      	add	r3, r2
 80052f4:	60bb      	str	r3, [r7, #8]

	switch(ch)
 80052f6:	79fb      	ldrb	r3, [r7, #7]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d10b      	bne.n	8005314 <spiBegin+0x3c>
	{
		case _DEF_SPI1:
			p_spi->h_spi = &hspi4;
 80052fc:	68bb      	ldr	r3, [r7, #8]
 80052fe:	4a0a      	ldr	r2, [pc, #40]	; (8005328 <spiBegin+0x50>)
 8005300:	609a      	str	r2, [r3, #8]
			p_spi->h_dma_tx = &hdma_spi4_tx;
 8005302:	68bb      	ldr	r3, [r7, #8]
 8005304:	4a09      	ldr	r2, [pc, #36]	; (800532c <spiBegin+0x54>)
 8005306:	60da      	str	r2, [r3, #12]
			p_spi->is_open = true;
 8005308:	68bb      	ldr	r3, [r7, #8]
 800530a:	2201      	movs	r2, #1
 800530c:	701a      	strb	r2, [r3, #0]
			ret = true;
 800530e:	2301      	movs	r3, #1
 8005310:	73fb      	strb	r3, [r7, #15]
			break;
 8005312:	bf00      	nop

		//case _DEF_SPI2:
	}

	return ret;
 8005314:	7bfb      	ldrb	r3, [r7, #15]
}
 8005316:	4618      	mov	r0, r3
 8005318:	3714      	adds	r7, #20
 800531a:	46bd      	mov	sp, r7
 800531c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005320:	4770      	bx	lr
 8005322:	bf00      	nop
 8005324:	200072c4 	.word	0x200072c4
 8005328:	200004e0 	.word	0x200004e0
 800532c:	20000538 	.word	0x20000538

08005330 <spiSetDataMode>:

void spiSetDataMode(uint8_t ch, uint8_t dataMode)
{
 8005330:	b580      	push	{r7, lr}
 8005332:	b084      	sub	sp, #16
 8005334:	af00      	add	r7, sp, #0
 8005336:	4603      	mov	r3, r0
 8005338:	460a      	mov	r2, r1
 800533a:	71fb      	strb	r3, [r7, #7]
 800533c:	4613      	mov	r3, r2
 800533e:	71bb      	strb	r3, [r7, #6]
	spi_t *p_spi = &spi_tbl[ch];
 8005340:	79fa      	ldrb	r2, [r7, #7]
 8005342:	4613      	mov	r3, r2
 8005344:	009b      	lsls	r3, r3, #2
 8005346:	4413      	add	r3, r2
 8005348:	009b      	lsls	r3, r3, #2
 800534a:	4a2a      	ldr	r2, [pc, #168]	; (80053f4 <spiSetDataMode+0xc4>)
 800534c:	4413      	add	r3, r2
 800534e:	60fb      	str	r3, [r7, #12]

	if(p_spi->is_open == false) return;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	781b      	ldrb	r3, [r3, #0]
 8005354:	f083 0301 	eor.w	r3, r3, #1
 8005358:	b2db      	uxtb	r3, r3
 800535a:	2b00      	cmp	r3, #0
 800535c:	d146      	bne.n	80053ec <spiSetDataMode+0xbc>

	switch(dataMode)
 800535e:	79bb      	ldrb	r3, [r7, #6]
 8005360:	2b03      	cmp	r3, #3
 8005362:	d844      	bhi.n	80053ee <spiSetDataMode+0xbe>
 8005364:	a201      	add	r2, pc, #4	; (adr r2, 800536c <spiSetDataMode+0x3c>)
 8005366:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800536a:	bf00      	nop
 800536c:	0800537d 	.word	0x0800537d
 8005370:	08005399 	.word	0x08005399
 8005374:	080053b5 	.word	0x080053b5
 8005378:	080053d1 	.word	0x080053d1
	{
		// CPOL=0, CPHA=0
		case SPI_MODE0:
			p_spi->h_spi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	689b      	ldr	r3, [r3, #8]
 8005380:	2200      	movs	r2, #0
 8005382:	611a      	str	r2, [r3, #16]
			p_spi->h_spi->Init.CLKPhase = SPI_PHASE_1EDGE;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	689b      	ldr	r3, [r3, #8]
 8005388:	2200      	movs	r2, #0
 800538a:	615a      	str	r2, [r3, #20]
			HAL_SPI_Init(p_spi->h_spi);
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	689b      	ldr	r3, [r3, #8]
 8005390:	4618      	mov	r0, r3
 8005392:	f004 fdeb 	bl	8009f6c <HAL_SPI_Init>
			break;
 8005396:	e02a      	b.n	80053ee <spiSetDataMode+0xbe>

		// CPOL=0, CPHA=1
		case SPI_MODE1:
			p_spi->h_spi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	689b      	ldr	r3, [r3, #8]
 800539c:	2200      	movs	r2, #0
 800539e:	611a      	str	r2, [r3, #16]
			p_spi->h_spi->Init.CLKPhase = SPI_PHASE_2EDGE;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	689b      	ldr	r3, [r3, #8]
 80053a4:	2201      	movs	r2, #1
 80053a6:	615a      	str	r2, [r3, #20]
			HAL_SPI_Init(p_spi->h_spi);
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	689b      	ldr	r3, [r3, #8]
 80053ac:	4618      	mov	r0, r3
 80053ae:	f004 fddd 	bl	8009f6c <HAL_SPI_Init>
			break;
 80053b2:	e01c      	b.n	80053ee <spiSetDataMode+0xbe>

		// CPOL=1, CPHA=0
		case SPI_MODE2:
			p_spi->h_spi->Init.CLKPolarity = SPI_POLARITY_HIGH;
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	689b      	ldr	r3, [r3, #8]
 80053b8:	2202      	movs	r2, #2
 80053ba:	611a      	str	r2, [r3, #16]
			p_spi->h_spi->Init.CLKPhase = SPI_PHASE_1EDGE;
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	689b      	ldr	r3, [r3, #8]
 80053c0:	2200      	movs	r2, #0
 80053c2:	615a      	str	r2, [r3, #20]
			HAL_SPI_Init(p_spi->h_spi);
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	689b      	ldr	r3, [r3, #8]
 80053c8:	4618      	mov	r0, r3
 80053ca:	f004 fdcf 	bl	8009f6c <HAL_SPI_Init>
			break;
 80053ce:	e00e      	b.n	80053ee <spiSetDataMode+0xbe>

		// CPOL=1, CPHA=1
		case SPI_MODE3:
			p_spi->h_spi->Init.CLKPolarity = SPI_POLARITY_HIGH;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	689b      	ldr	r3, [r3, #8]
 80053d4:	2202      	movs	r2, #2
 80053d6:	611a      	str	r2, [r3, #16]
			p_spi->h_spi->Init.CLKPhase = SPI_PHASE_2EDGE;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	689b      	ldr	r3, [r3, #8]
 80053dc:	2201      	movs	r2, #1
 80053de:	615a      	str	r2, [r3, #20]
			HAL_SPI_Init(p_spi->h_spi);
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	689b      	ldr	r3, [r3, #8]
 80053e4:	4618      	mov	r0, r3
 80053e6:	f004 fdc1 	bl	8009f6c <HAL_SPI_Init>
			break;
 80053ea:	e000      	b.n	80053ee <spiSetDataMode+0xbe>
	if(p_spi->is_open == false) return;
 80053ec:	bf00      	nop
	}
}
 80053ee:	3710      	adds	r7, #16
 80053f0:	46bd      	mov	sp, r7
 80053f2:	bd80      	pop	{r7, pc}
 80053f4:	200072c4 	.word	0x200072c4

080053f8 <spiSetBitWidth>:

void spiSetBitWidth(uint8_t ch, uint8_t bit_width)
{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b084      	sub	sp, #16
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	4603      	mov	r3, r0
 8005400:	460a      	mov	r2, r1
 8005402:	71fb      	strb	r3, [r7, #7]
 8005404:	4613      	mov	r3, r2
 8005406:	71bb      	strb	r3, [r7, #6]
	spi_t *p_spi = &spi_tbl[ch];
 8005408:	79fa      	ldrb	r2, [r7, #7]
 800540a:	4613      	mov	r3, r2
 800540c:	009b      	lsls	r3, r3, #2
 800540e:	4413      	add	r3, r2
 8005410:	009b      	lsls	r3, r3, #2
 8005412:	4a10      	ldr	r2, [pc, #64]	; (8005454 <spiSetBitWidth+0x5c>)
 8005414:	4413      	add	r3, r2
 8005416:	60fb      	str	r3, [r7, #12]

	if(p_spi->is_open == false) return;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	781b      	ldrb	r3, [r3, #0]
 800541c:	f083 0301 	eor.w	r3, r3, #1
 8005420:	b2db      	uxtb	r3, r3
 8005422:	2b00      	cmp	r3, #0
 8005424:	d111      	bne.n	800544a <spiSetBitWidth+0x52>

	p_spi->h_spi->Init.DataSize = SPI_DATASIZE_8BIT;
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	689b      	ldr	r3, [r3, #8]
 800542a:	2200      	movs	r2, #0
 800542c:	60da      	str	r2, [r3, #12]

	if(bit_width == 16)
 800542e:	79bb      	ldrb	r3, [r7, #6]
 8005430:	2b10      	cmp	r3, #16
 8005432:	d104      	bne.n	800543e <spiSetBitWidth+0x46>
	{
		p_spi->h_spi->Init.DataSize = SPI_DATASIZE_16BIT;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	689b      	ldr	r3, [r3, #8]
 8005438:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800543c:	60da      	str	r2, [r3, #12]
	}
	HAL_SPI_Init(p_spi->h_spi);
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	689b      	ldr	r3, [r3, #8]
 8005442:	4618      	mov	r0, r3
 8005444:	f004 fd92 	bl	8009f6c <HAL_SPI_Init>
 8005448:	e000      	b.n	800544c <spiSetBitWidth+0x54>
	if(p_spi->is_open == false) return;
 800544a:	bf00      	nop
}
 800544c:	3710      	adds	r7, #16
 800544e:	46bd      	mov	sp, r7
 8005450:	bd80      	pop	{r7, pc}
 8005452:	bf00      	nop
 8005454:	200072c4 	.word	0x200072c4

08005458 <spiTransfer8>:

uint8_t spiTransfer8(uint8_t ch, uint8_t data)
{
 8005458:	b580      	push	{r7, lr}
 800545a:	b086      	sub	sp, #24
 800545c:	af02      	add	r7, sp, #8
 800545e:	4603      	mov	r3, r0
 8005460:	460a      	mov	r2, r1
 8005462:	71fb      	strb	r3, [r7, #7]
 8005464:	4613      	mov	r3, r2
 8005466:	71bb      	strb	r3, [r7, #6]
	uint8_t ret;
	spi_t *p_spi = &spi_tbl[ch];
 8005468:	79fa      	ldrb	r2, [r7, #7]
 800546a:	4613      	mov	r3, r2
 800546c:	009b      	lsls	r3, r3, #2
 800546e:	4413      	add	r3, r2
 8005470:	009b      	lsls	r3, r3, #2
 8005472:	4a0d      	ldr	r2, [pc, #52]	; (80054a8 <spiTransfer8+0x50>)
 8005474:	4413      	add	r3, r2
 8005476:	60fb      	str	r3, [r7, #12]

	if(p_spi->is_open == false) return 0;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	781b      	ldrb	r3, [r3, #0]
 800547c:	f083 0301 	eor.w	r3, r3, #1
 8005480:	b2db      	uxtb	r3, r3
 8005482:	2b00      	cmp	r3, #0
 8005484:	d001      	beq.n	800548a <spiTransfer8+0x32>
 8005486:	2300      	movs	r3, #0
 8005488:	e00a      	b.n	80054a0 <spiTransfer8+0x48>

	HAL_SPI_TransmitReceive(p_spi->h_spi, &data, &ret, 1, 10);
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	6898      	ldr	r0, [r3, #8]
 800548e:	f107 020b 	add.w	r2, r7, #11
 8005492:	1db9      	adds	r1, r7, #6
 8005494:	230a      	movs	r3, #10
 8005496:	9300      	str	r3, [sp, #0]
 8005498:	2301      	movs	r3, #1
 800549a:	f004 fdf0 	bl	800a07e <HAL_SPI_TransmitReceive>

	return ret;
 800549e:	7afb      	ldrb	r3, [r7, #11]
}
 80054a0:	4618      	mov	r0, r3
 80054a2:	3710      	adds	r7, #16
 80054a4:	46bd      	mov	sp, r7
 80054a6:	bd80      	pop	{r7, pc}
 80054a8:	200072c4 	.word	0x200072c4

080054ac <spiDmaTxStart>:

	return ret;
}

void spiDmaTxStart(uint8_t ch, uint8_t *p_buf, uint32_t length)
{
 80054ac:	b580      	push	{r7, lr}
 80054ae:	b086      	sub	sp, #24
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	4603      	mov	r3, r0
 80054b4:	60b9      	str	r1, [r7, #8]
 80054b6:	607a      	str	r2, [r7, #4]
 80054b8:	73fb      	strb	r3, [r7, #15]
	spi_t *p_spi = &spi_tbl[ch];
 80054ba:	7bfa      	ldrb	r2, [r7, #15]
 80054bc:	4613      	mov	r3, r2
 80054be:	009b      	lsls	r3, r3, #2
 80054c0:	4413      	add	r3, r2
 80054c2:	009b      	lsls	r3, r3, #2
 80054c4:	4a0c      	ldr	r2, [pc, #48]	; (80054f8 <spiDmaTxStart+0x4c>)
 80054c6:	4413      	add	r3, r2
 80054c8:	617b      	str	r3, [r7, #20]

	if(p_spi->is_open == false) return;
 80054ca:	697b      	ldr	r3, [r7, #20]
 80054cc:	781b      	ldrb	r3, [r3, #0]
 80054ce:	f083 0301 	eor.w	r3, r3, #1
 80054d2:	b2db      	uxtb	r3, r3
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d10b      	bne.n	80054f0 <spiDmaTxStart+0x44>

	p_spi->is_tx_done = false;
 80054d8:	697b      	ldr	r3, [r7, #20]
 80054da:	2200      	movs	r2, #0
 80054dc:	705a      	strb	r2, [r3, #1]
	HAL_SPI_Transmit_DMA(p_spi->h_spi, p_buf, length);
 80054de:	697b      	ldr	r3, [r7, #20]
 80054e0:	689b      	ldr	r3, [r3, #8]
 80054e2:	687a      	ldr	r2, [r7, #4]
 80054e4:	b292      	uxth	r2, r2
 80054e6:	68b9      	ldr	r1, [r7, #8]
 80054e8:	4618      	mov	r0, r3
 80054ea:	f004 ff79 	bl	800a3e0 <HAL_SPI_Transmit_DMA>
 80054ee:	e000      	b.n	80054f2 <spiDmaTxStart+0x46>
	if(p_spi->is_open == false) return;
 80054f0:	bf00      	nop
}
 80054f2:	3718      	adds	r7, #24
 80054f4:	46bd      	mov	sp, r7
 80054f6:	bd80      	pop	{r7, pc}
 80054f8:	200072c4 	.word	0x200072c4

080054fc <spiDmaTxTransfer>:

bool spiDmaTxTransfer(uint8_t ch, uint8_t *buf, uint32_t length, uint32_t timeout)
{
 80054fc:	b580      	push	{r7, lr}
 80054fe:	b086      	sub	sp, #24
 8005500:	af00      	add	r7, sp, #0
 8005502:	60b9      	str	r1, [r7, #8]
 8005504:	607a      	str	r2, [r7, #4]
 8005506:	603b      	str	r3, [r7, #0]
 8005508:	4603      	mov	r3, r0
 800550a:	73fb      	strb	r3, [r7, #15]
	bool ret = true;
 800550c:	2301      	movs	r3, #1
 800550e:	75fb      	strb	r3, [r7, #23]
	uint32_t t_time;

	spiDmaTxStart(ch, (uint8_t *)buf, length);
 8005510:	7bfb      	ldrb	r3, [r7, #15]
 8005512:	687a      	ldr	r2, [r7, #4]
 8005514:	68b9      	ldr	r1, [r7, #8]
 8005516:	4618      	mov	r0, r3
 8005518:	f7ff ffc8 	bl	80054ac <spiDmaTxStart>

	t_time = millis();
 800551c:	f7fc fbfa 	bl	8001d14 <millis>
 8005520:	6138      	str	r0, [r7, #16]

	if(timeout == 0) return true;
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	2b00      	cmp	r3, #0
 8005526:	d101      	bne.n	800552c <spiDmaTxTransfer+0x30>
 8005528:	2301      	movs	r3, #1
 800552a:	e013      	b.n	8005554 <spiDmaTxTransfer+0x58>

	while(1)
	{
		if(spiDmaTxIsDone(ch))
 800552c:	7bfb      	ldrb	r3, [r7, #15]
 800552e:	4618      	mov	r0, r3
 8005530:	f000 f814 	bl	800555c <spiDmaTxIsDone>
 8005534:	4603      	mov	r3, r0
 8005536:	2b00      	cmp	r3, #0
 8005538:	d10a      	bne.n	8005550 <spiDmaTxTransfer+0x54>
		{
			break;
		}
		if((millis() - t_time) > timeout)
 800553a:	f7fc fbeb 	bl	8001d14 <millis>
 800553e:	4602      	mov	r2, r0
 8005540:	693b      	ldr	r3, [r7, #16]
 8005542:	1ad3      	subs	r3, r2, r3
 8005544:	683a      	ldr	r2, [r7, #0]
 8005546:	429a      	cmp	r2, r3
 8005548:	d2f0      	bcs.n	800552c <spiDmaTxTransfer+0x30>
		{
			ret = false;
 800554a:	2300      	movs	r3, #0
 800554c:	75fb      	strb	r3, [r7, #23]
			break;
 800554e:	e000      	b.n	8005552 <spiDmaTxTransfer+0x56>
			break;
 8005550:	bf00      	nop
		}
	}

	return ret;
 8005552:	7dfb      	ldrb	r3, [r7, #23]
}
 8005554:	4618      	mov	r0, r3
 8005556:	3718      	adds	r7, #24
 8005558:	46bd      	mov	sp, r7
 800555a:	bd80      	pop	{r7, pc}

0800555c <spiDmaTxIsDone>:

bool spiDmaTxIsDone(uint8_t ch)
{
 800555c:	b480      	push	{r7}
 800555e:	b085      	sub	sp, #20
 8005560:	af00      	add	r7, sp, #0
 8005562:	4603      	mov	r3, r0
 8005564:	71fb      	strb	r3, [r7, #7]
	spi_t *p_spi = &spi_tbl[ch];
 8005566:	79fa      	ldrb	r2, [r7, #7]
 8005568:	4613      	mov	r3, r2
 800556a:	009b      	lsls	r3, r3, #2
 800556c:	4413      	add	r3, r2
 800556e:	009b      	lsls	r3, r3, #2
 8005570:	4a09      	ldr	r2, [pc, #36]	; (8005598 <spiDmaTxIsDone+0x3c>)
 8005572:	4413      	add	r3, r2
 8005574:	60fb      	str	r3, [r7, #12]

	if(p_spi->is_open == false) return false;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	781b      	ldrb	r3, [r3, #0]
 800557a:	f083 0301 	eor.w	r3, r3, #1
 800557e:	b2db      	uxtb	r3, r3
 8005580:	2b00      	cmp	r3, #0
 8005582:	d001      	beq.n	8005588 <spiDmaTxIsDone+0x2c>
 8005584:	2300      	movs	r3, #0
 8005586:	e001      	b.n	800558c <spiDmaTxIsDone+0x30>

	return p_spi->is_tx_done;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	785b      	ldrb	r3, [r3, #1]
}
 800558c:	4618      	mov	r0, r3
 800558e:	3714      	adds	r7, #20
 8005590:	46bd      	mov	sp, r7
 8005592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005596:	4770      	bx	lr
 8005598:	200072c4 	.word	0x200072c4

0800559c <spiAttachTxInterrupt>:

void spiAttachTxInterrupt(uint8_t ch, void (*func)())
{
 800559c:	b480      	push	{r7}
 800559e:	b085      	sub	sp, #20
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	4603      	mov	r3, r0
 80055a4:	6039      	str	r1, [r7, #0]
 80055a6:	71fb      	strb	r3, [r7, #7]
	spi_t *p_spi = &spi_tbl[ch];
 80055a8:	79fa      	ldrb	r2, [r7, #7]
 80055aa:	4613      	mov	r3, r2
 80055ac:	009b      	lsls	r3, r3, #2
 80055ae:	4413      	add	r3, r2
 80055b0:	009b      	lsls	r3, r3, #2
 80055b2:	4a0a      	ldr	r2, [pc, #40]	; (80055dc <spiAttachTxInterrupt+0x40>)
 80055b4:	4413      	add	r3, r2
 80055b6:	60fb      	str	r3, [r7, #12]

	if(p_spi->is_open == false) return;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	781b      	ldrb	r3, [r3, #0]
 80055bc:	f083 0301 	eor.w	r3, r3, #1
 80055c0:	b2db      	uxtb	r3, r3
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d103      	bne.n	80055ce <spiAttachTxInterrupt+0x32>

	p_spi->func_tx = func;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	683a      	ldr	r2, [r7, #0]
 80055ca:	605a      	str	r2, [r3, #4]
 80055cc:	e000      	b.n	80055d0 <spiAttachTxInterrupt+0x34>
	if(p_spi->is_open == false) return;
 80055ce:	bf00      	nop
}
 80055d0:	3714      	adds	r7, #20
 80055d2:	46bd      	mov	sp, r7
 80055d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d8:	4770      	bx	lr
 80055da:	bf00      	nop
 80055dc:	200072c4 	.word	0x200072c4

080055e0 <HAL_SPI_ErrorCallback>:

void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80055e0:	b480      	push	{r7}
 80055e2:	b083      	sub	sp, #12
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
	if(hspi->Instance == spi_tbl[_DEF_SPI1].h_spi->Instance)
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681a      	ldr	r2, [r3, #0]
 80055ec:	4b06      	ldr	r3, [pc, #24]	; (8005608 <HAL_SPI_ErrorCallback+0x28>)
 80055ee:	689b      	ldr	r3, [r3, #8]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	429a      	cmp	r2, r3
 80055f4:	d102      	bne.n	80055fc <HAL_SPI_ErrorCallback+0x1c>
	{
		spi_tbl[_DEF_SPI1].is_error = true;
 80055f6:	4b04      	ldr	r3, [pc, #16]	; (8005608 <HAL_SPI_ErrorCallback+0x28>)
 80055f8:	2201      	movs	r2, #1
 80055fa:	709a      	strb	r2, [r3, #2]
	}
}
 80055fc:	bf00      	nop
 80055fe:	370c      	adds	r7, #12
 8005600:	46bd      	mov	sp, r7
 8005602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005606:	4770      	bx	lr
 8005608:	200072c4 	.word	0x200072c4

0800560c <HAL_SPI_TxCpltCallback>:

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800560c:	b580      	push	{r7, lr}
 800560e:	b084      	sub	sp, #16
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
	spi_t *p_spi;

	if(hspi->Instance == spi_tbl[_DEF_SPI1].h_spi->Instance)
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681a      	ldr	r2, [r3, #0]
 8005618:	4b0a      	ldr	r3, [pc, #40]	; (8005644 <HAL_SPI_TxCpltCallback+0x38>)
 800561a:	689b      	ldr	r3, [r3, #8]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	429a      	cmp	r2, r3
 8005620:	d10b      	bne.n	800563a <HAL_SPI_TxCpltCallback+0x2e>
	{
		p_spi = &spi_tbl[_DEF_SPI1];
 8005622:	4b08      	ldr	r3, [pc, #32]	; (8005644 <HAL_SPI_TxCpltCallback+0x38>)
 8005624:	60fb      	str	r3, [r7, #12]
		p_spi->is_tx_done = true;
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	2201      	movs	r2, #1
 800562a:	705a      	strb	r2, [r3, #1]

		if(p_spi->func_tx != NULL)
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	685b      	ldr	r3, [r3, #4]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d002      	beq.n	800563a <HAL_SPI_TxCpltCallback+0x2e>
		{
			(*p_spi->func_tx)();
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	685b      	ldr	r3, [r3, #4]
 8005638:	4798      	blx	r3
		}
	}
}
 800563a:	bf00      	nop
 800563c:	3710      	adds	r7, #16
 800563e:	46bd      	mov	sp, r7
 8005640:	bd80      	pop	{r7, pc}
 8005642:	bf00      	nop
 8005644:	200072c4 	.word	0x200072c4

08005648 <cliSpi>:
}

#ifdef _USE_HW_CLI

void cliSpi(cli_args_t *args)
{
 8005648:	b580      	push	{r7, lr}
 800564a:	b084      	sub	sp, #16
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
	bool ret = false;
 8005650:	2300      	movs	r3, #0
 8005652:	73fb      	strb	r3, [r7, #15]

	if(args->argc == 2 && args->isStr(0, "info") == true)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	881b      	ldrh	r3, [r3, #0]
 8005658:	2b02      	cmp	r3, #2
 800565a:	d11d      	bne.n	8005698 <cliSpi+0x50>
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	695b      	ldr	r3, [r3, #20]
 8005660:	4914      	ldr	r1, [pc, #80]	; (80056b4 <cliSpi+0x6c>)
 8005662:	2000      	movs	r0, #0
 8005664:	4798      	blx	r3
 8005666:	4603      	mov	r3, r0
 8005668:	2b00      	cmp	r3, #0
 800566a:	d015      	beq.n	8005698 <cliSpi+0x50>
	{
		uint8_t ch;
		ch = args->getData(1);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	689b      	ldr	r3, [r3, #8]
 8005670:	2001      	movs	r0, #1
 8005672:	4798      	blx	r3
 8005674:	4603      	mov	r3, r0
 8005676:	73bb      	strb	r3, [r7, #14]

		spi_t *spi_info = &spi_tbl[ch];
 8005678:	7bba      	ldrb	r2, [r7, #14]
 800567a:	4613      	mov	r3, r2
 800567c:	009b      	lsls	r3, r3, #2
 800567e:	4413      	add	r3, r2
 8005680:	009b      	lsls	r3, r3, #2
 8005682:	4a0d      	ldr	r2, [pc, #52]	; (80056b8 <cliSpi+0x70>)
 8005684:	4413      	add	r3, r2
 8005686:	60bb      	str	r3, [r7, #8]

		cliPrintf("spi init : %d\n", spi_info->is_open);
 8005688:	68bb      	ldr	r3, [r7, #8]
 800568a:	781b      	ldrb	r3, [r3, #0]
 800568c:	4619      	mov	r1, r3
 800568e:	480b      	ldr	r0, [pc, #44]	; (80056bc <cliSpi+0x74>)
 8005690:	f7fd ffb2 	bl	80035f8 <cliPrintf>

		ret = true;
 8005694:	2301      	movs	r3, #1
 8005696:	73fb      	strb	r3, [r7, #15]
	}

	if(ret != true)
 8005698:	7bfb      	ldrb	r3, [r7, #15]
 800569a:	f083 0301 	eor.w	r3, r3, #1
 800569e:	b2db      	uxtb	r3, r3
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d003      	beq.n	80056ac <cliSpi+0x64>
	{
		cliPrintf("spi info ch[1~%d]\n", SPI_MAX_CH);
 80056a4:	2101      	movs	r1, #1
 80056a6:	4806      	ldr	r0, [pc, #24]	; (80056c0 <cliSpi+0x78>)
 80056a8:	f7fd ffa6 	bl	80035f8 <cliPrintf>
	}
}
 80056ac:	bf00      	nop
 80056ae:	3710      	adds	r7, #16
 80056b0:	46bd      	mov	sp, r7
 80056b2:	bd80      	pop	{r7, pc}
 80056b4:	08016e20 	.word	0x08016e20
 80056b8:	200072c4 	.word	0x200072c4
 80056bc:	08016e28 	.word	0x08016e28
 80056c0:	08016e38 	.word	0x08016e38

080056c4 <uartOpen>:
{
	return true;
}

bool uartOpen(uint8_t ch, uint32_t baud)
{
 80056c4:	b480      	push	{r7}
 80056c6:	b085      	sub	sp, #20
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	4603      	mov	r3, r0
 80056cc:	6039      	str	r1, [r7, #0]
 80056ce:	71fb      	strb	r3, [r7, #7]
	bool ret = false;
 80056d0:	2300      	movs	r3, #0
 80056d2:	73fb      	strb	r3, [r7, #15]

	switch(ch)
 80056d4:	79fb      	ldrb	r3, [r7, #7]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d106      	bne.n	80056e8 <uartOpen+0x24>
	{
		case _DEF_UART1:
			is_open[ch] = true;
 80056da:	79fb      	ldrb	r3, [r7, #7]
 80056dc:	4a06      	ldr	r2, [pc, #24]	; (80056f8 <uartOpen+0x34>)
 80056de:	2101      	movs	r1, #1
 80056e0:	54d1      	strb	r1, [r2, r3]
			ret = true;
 80056e2:	2301      	movs	r3, #1
 80056e4:	73fb      	strb	r3, [r7, #15]
			break;
 80056e6:	bf00      	nop
			qbuffer[ch].out = qbuffer[ch].in;
			break;
			#endif
	}

	return ret;
 80056e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80056ea:	4618      	mov	r0, r3
 80056ec:	3714      	adds	r7, #20
 80056ee:	46bd      	mov	sp, r7
 80056f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f4:	4770      	bx	lr
 80056f6:	bf00      	nop
 80056f8:	200072d8 	.word	0x200072d8

080056fc <uartAvailable>:

uint32_t uartAvailable(uint8_t ch)
{
 80056fc:	b580      	push	{r7, lr}
 80056fe:	b084      	sub	sp, #16
 8005700:	af00      	add	r7, sp, #0
 8005702:	4603      	mov	r3, r0
 8005704:	71fb      	strb	r3, [r7, #7]
	uint32_t ret;

	switch(ch)
 8005706:	79fb      	ldrb	r3, [r7, #7]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d001      	beq.n	8005710 <uartAvailable+0x14>
 800570c:	2b01      	cmp	r3, #1
		case _DEF_UART2:
			#ifdef _USE_UART2
			qbuffer[ch].in = (qbuffer[ch].len - hdma_usart1_rx.Instance->NDTR);
			ret = qbufferAvailable(&qbuffer[ch]);
			#endif
			break;
 800570e:	e003      	b.n	8005718 <uartAvailable+0x1c>
			ret = cdcAvailable();
 8005710:	f7fd f9d0 	bl	8002ab4 <cdcAvailable>
 8005714:	60f8      	str	r0, [r7, #12]
			break;
 8005716:	bf00      	nop
	}

	return ret;
 8005718:	68fb      	ldr	r3, [r7, #12]
}
 800571a:	4618      	mov	r0, r3
 800571c:	3710      	adds	r7, #16
 800571e:	46bd      	mov	sp, r7
 8005720:	bd80      	pop	{r7, pc}

08005722 <uartRead>:

uint8_t uartRead(uint8_t ch)
{
 8005722:	b580      	push	{r7, lr}
 8005724:	b084      	sub	sp, #16
 8005726:	af00      	add	r7, sp, #0
 8005728:	4603      	mov	r3, r0
 800572a:	71fb      	strb	r3, [r7, #7]
	uint8_t ret;

	switch(ch)
 800572c:	79fb      	ldrb	r3, [r7, #7]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d001      	beq.n	8005736 <uartRead+0x14>
 8005732:	2b01      	cmp	r3, #1

		case _DEF_UART2:
			#ifdef _USE_UART2
			qbufferRead(&qbuffer[_DEF_UART2], &ret, 1);
			#endif
			break;
 8005734:	e004      	b.n	8005740 <uartRead+0x1e>
			ret = cdcRead();
 8005736:	f7fd f9d3 	bl	8002ae0 <cdcRead>
 800573a:	4603      	mov	r3, r0
 800573c:	73fb      	strb	r3, [r7, #15]
			break;
 800573e:	bf00      	nop
	}

	return ret;
 8005740:	7bfb      	ldrb	r3, [r7, #15]
}
 8005742:	4618      	mov	r0, r3
 8005744:	3710      	adds	r7, #16
 8005746:	46bd      	mov	sp, r7
 8005748:	bd80      	pop	{r7, pc}

0800574a <uartWrite>:

uint32_t uartWrite(uint8_t ch, uint8_t *p_data, uint32_t length)
{
 800574a:	b580      	push	{r7, lr}
 800574c:	b086      	sub	sp, #24
 800574e:	af00      	add	r7, sp, #0
 8005750:	4603      	mov	r3, r0
 8005752:	60b9      	str	r1, [r7, #8]
 8005754:	607a      	str	r2, [r7, #4]
 8005756:	73fb      	strb	r3, [r7, #15]

	#ifdef _USE_UART2
	HAL_StatusTypeDef status;
	#endif

	switch(ch)
 8005758:	7bfb      	ldrb	r3, [r7, #15]
 800575a:	2b00      	cmp	r3, #0
 800575c:	d001      	beq.n	8005762 <uartWrite+0x18>
 800575e:	2b01      	cmp	r3, #1
			if(status == HAL_OK)
			{
				ret = length;
			}
			#endif
			break;
 8005760:	e005      	b.n	800576e <uartWrite+0x24>
			ret = cdcWrite(p_data, length);
 8005762:	6879      	ldr	r1, [r7, #4]
 8005764:	68b8      	ldr	r0, [r7, #8]
 8005766:	f7fd fa03 	bl	8002b70 <cdcWrite>
 800576a:	6178      	str	r0, [r7, #20]
			break;
 800576c:	bf00      	nop
	}

	return ret;
 800576e:	697b      	ldr	r3, [r7, #20]
}
 8005770:	4618      	mov	r0, r3
 8005772:	3718      	adds	r7, #24
 8005774:	46bd      	mov	sp, r7
 8005776:	bd80      	pop	{r7, pc}

08005778 <uartPrintf>:

uint32_t uartPrintf(uint8_t ch, char *fmt, ...)
{
 8005778:	b40e      	push	{r1, r2, r3}
 800577a:	b580      	push	{r7, lr}
 800577c:	b0c7      	sub	sp, #284	; 0x11c
 800577e:	af00      	add	r7, sp, #0
 8005780:	4602      	mov	r2, r0
 8005782:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8005786:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 800578a:	701a      	strb	r2, [r3, #0]
	char buf[256];
	va_list args;
	int len;
	uint32_t ret;

	va_start(args, fmt);
 800578c:	f507 7294 	add.w	r2, r7, #296	; 0x128
 8005790:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8005794:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005798:	601a      	str	r2, [r3, #0]
	len = vsnprintf(buf, 256, fmt, args);
 800579a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800579e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80057a2:	f107 0010 	add.w	r0, r7, #16
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 80057ac:	f44f 7180 	mov.w	r1, #256	; 0x100
 80057b0:	f00f f808 	bl	80147c4 <vsniprintf>
 80057b4:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114

	ret = uartWrite(ch, (uint8_t *)buf, len);
 80057b8:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80057bc:	f107 0110 	add.w	r1, r7, #16
 80057c0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80057c4:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 80057c8:	781b      	ldrb	r3, [r3, #0]
 80057ca:	4618      	mov	r0, r3
 80057cc:	f7ff ffbd 	bl	800574a <uartWrite>
 80057d0:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

	va_end(args);

	return ret;
 80057d4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
}
 80057d8:	4618      	mov	r0, r3
 80057da:	f507 778e 	add.w	r7, r7, #284	; 0x11c
 80057de:	46bd      	mov	sp, r7
 80057e0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80057e4:	b003      	add	sp, #12
 80057e6:	4770      	bx	lr

080057e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80057e8:	b580      	push	{r7, lr}
 80057ea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80057ec:	4b0e      	ldr	r3, [pc, #56]	; (8005828 <HAL_Init+0x40>)
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	4a0d      	ldr	r2, [pc, #52]	; (8005828 <HAL_Init+0x40>)
 80057f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80057f6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80057f8:	4b0b      	ldr	r3, [pc, #44]	; (8005828 <HAL_Init+0x40>)
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	4a0a      	ldr	r2, [pc, #40]	; (8005828 <HAL_Init+0x40>)
 80057fe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005802:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005804:	4b08      	ldr	r3, [pc, #32]	; (8005828 <HAL_Init+0x40>)
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	4a07      	ldr	r2, [pc, #28]	; (8005828 <HAL_Init+0x40>)
 800580a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800580e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005810:	2003      	movs	r0, #3
 8005812:	f000 f94f 	bl	8005ab4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005816:	200f      	movs	r0, #15
 8005818:	f000 f808 	bl	800582c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800581c:	f7fc f8e0 	bl	80019e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005820:	2300      	movs	r3, #0
}
 8005822:	4618      	mov	r0, r3
 8005824:	bd80      	pop	{r7, pc}
 8005826:	bf00      	nop
 8005828:	40023c00 	.word	0x40023c00

0800582c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800582c:	b580      	push	{r7, lr}
 800582e:	b082      	sub	sp, #8
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005834:	4b12      	ldr	r3, [pc, #72]	; (8005880 <HAL_InitTick+0x54>)
 8005836:	681a      	ldr	r2, [r3, #0]
 8005838:	4b12      	ldr	r3, [pc, #72]	; (8005884 <HAL_InitTick+0x58>)
 800583a:	781b      	ldrb	r3, [r3, #0]
 800583c:	4619      	mov	r1, r3
 800583e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005842:	fbb3 f3f1 	udiv	r3, r3, r1
 8005846:	fbb2 f3f3 	udiv	r3, r2, r3
 800584a:	4618      	mov	r0, r3
 800584c:	f000 f967 	bl	8005b1e <HAL_SYSTICK_Config>
 8005850:	4603      	mov	r3, r0
 8005852:	2b00      	cmp	r3, #0
 8005854:	d001      	beq.n	800585a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005856:	2301      	movs	r3, #1
 8005858:	e00e      	b.n	8005878 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	2b0f      	cmp	r3, #15
 800585e:	d80a      	bhi.n	8005876 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005860:	2200      	movs	r2, #0
 8005862:	6879      	ldr	r1, [r7, #4]
 8005864:	f04f 30ff 	mov.w	r0, #4294967295
 8005868:	f000 f92f 	bl	8005aca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800586c:	4a06      	ldr	r2, [pc, #24]	; (8005888 <HAL_InitTick+0x5c>)
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005872:	2300      	movs	r3, #0
 8005874:	e000      	b.n	8005878 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005876:	2301      	movs	r3, #1
}
 8005878:	4618      	mov	r0, r3
 800587a:	3708      	adds	r7, #8
 800587c:	46bd      	mov	sp, r7
 800587e:	bd80      	pop	{r7, pc}
 8005880:	20000040 	.word	0x20000040
 8005884:	2000008c 	.word	0x2000008c
 8005888:	20000088 	.word	0x20000088

0800588c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800588c:	b480      	push	{r7}
 800588e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005890:	4b06      	ldr	r3, [pc, #24]	; (80058ac <HAL_IncTick+0x20>)
 8005892:	781b      	ldrb	r3, [r3, #0]
 8005894:	461a      	mov	r2, r3
 8005896:	4b06      	ldr	r3, [pc, #24]	; (80058b0 <HAL_IncTick+0x24>)
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	4413      	add	r3, r2
 800589c:	4a04      	ldr	r2, [pc, #16]	; (80058b0 <HAL_IncTick+0x24>)
 800589e:	6013      	str	r3, [r2, #0]
}
 80058a0:	bf00      	nop
 80058a2:	46bd      	mov	sp, r7
 80058a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a8:	4770      	bx	lr
 80058aa:	bf00      	nop
 80058ac:	2000008c 	.word	0x2000008c
 80058b0:	200072dc 	.word	0x200072dc

080058b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80058b4:	b480      	push	{r7}
 80058b6:	af00      	add	r7, sp, #0
  return uwTick;
 80058b8:	4b03      	ldr	r3, [pc, #12]	; (80058c8 <HAL_GetTick+0x14>)
 80058ba:	681b      	ldr	r3, [r3, #0]
}
 80058bc:	4618      	mov	r0, r3
 80058be:	46bd      	mov	sp, r7
 80058c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c4:	4770      	bx	lr
 80058c6:	bf00      	nop
 80058c8:	200072dc 	.word	0x200072dc

080058cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80058cc:	b580      	push	{r7, lr}
 80058ce:	b084      	sub	sp, #16
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80058d4:	f7ff ffee 	bl	80058b4 <HAL_GetTick>
 80058d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058e4:	d005      	beq.n	80058f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80058e6:	4b0a      	ldr	r3, [pc, #40]	; (8005910 <HAL_Delay+0x44>)
 80058e8:	781b      	ldrb	r3, [r3, #0]
 80058ea:	461a      	mov	r2, r3
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	4413      	add	r3, r2
 80058f0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80058f2:	bf00      	nop
 80058f4:	f7ff ffde 	bl	80058b4 <HAL_GetTick>
 80058f8:	4602      	mov	r2, r0
 80058fa:	68bb      	ldr	r3, [r7, #8]
 80058fc:	1ad3      	subs	r3, r2, r3
 80058fe:	68fa      	ldr	r2, [r7, #12]
 8005900:	429a      	cmp	r2, r3
 8005902:	d8f7      	bhi.n	80058f4 <HAL_Delay+0x28>
  {
  }
}
 8005904:	bf00      	nop
 8005906:	bf00      	nop
 8005908:	3710      	adds	r7, #16
 800590a:	46bd      	mov	sp, r7
 800590c:	bd80      	pop	{r7, pc}
 800590e:	bf00      	nop
 8005910:	2000008c 	.word	0x2000008c

08005914 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005914:	b480      	push	{r7}
 8005916:	b085      	sub	sp, #20
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	f003 0307 	and.w	r3, r3, #7
 8005922:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005924:	4b0c      	ldr	r3, [pc, #48]	; (8005958 <__NVIC_SetPriorityGrouping+0x44>)
 8005926:	68db      	ldr	r3, [r3, #12]
 8005928:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800592a:	68ba      	ldr	r2, [r7, #8]
 800592c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005930:	4013      	ands	r3, r2
 8005932:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005938:	68bb      	ldr	r3, [r7, #8]
 800593a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800593c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005940:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005944:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005946:	4a04      	ldr	r2, [pc, #16]	; (8005958 <__NVIC_SetPriorityGrouping+0x44>)
 8005948:	68bb      	ldr	r3, [r7, #8]
 800594a:	60d3      	str	r3, [r2, #12]
}
 800594c:	bf00      	nop
 800594e:	3714      	adds	r7, #20
 8005950:	46bd      	mov	sp, r7
 8005952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005956:	4770      	bx	lr
 8005958:	e000ed00 	.word	0xe000ed00

0800595c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800595c:	b480      	push	{r7}
 800595e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005960:	4b04      	ldr	r3, [pc, #16]	; (8005974 <__NVIC_GetPriorityGrouping+0x18>)
 8005962:	68db      	ldr	r3, [r3, #12]
 8005964:	0a1b      	lsrs	r3, r3, #8
 8005966:	f003 0307 	and.w	r3, r3, #7
}
 800596a:	4618      	mov	r0, r3
 800596c:	46bd      	mov	sp, r7
 800596e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005972:	4770      	bx	lr
 8005974:	e000ed00 	.word	0xe000ed00

08005978 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005978:	b480      	push	{r7}
 800597a:	b083      	sub	sp, #12
 800597c:	af00      	add	r7, sp, #0
 800597e:	4603      	mov	r3, r0
 8005980:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005982:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005986:	2b00      	cmp	r3, #0
 8005988:	db0b      	blt.n	80059a2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800598a:	79fb      	ldrb	r3, [r7, #7]
 800598c:	f003 021f 	and.w	r2, r3, #31
 8005990:	4907      	ldr	r1, [pc, #28]	; (80059b0 <__NVIC_EnableIRQ+0x38>)
 8005992:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005996:	095b      	lsrs	r3, r3, #5
 8005998:	2001      	movs	r0, #1
 800599a:	fa00 f202 	lsl.w	r2, r0, r2
 800599e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80059a2:	bf00      	nop
 80059a4:	370c      	adds	r7, #12
 80059a6:	46bd      	mov	sp, r7
 80059a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ac:	4770      	bx	lr
 80059ae:	bf00      	nop
 80059b0:	e000e100 	.word	0xe000e100

080059b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80059b4:	b480      	push	{r7}
 80059b6:	b083      	sub	sp, #12
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	4603      	mov	r3, r0
 80059bc:	6039      	str	r1, [r7, #0]
 80059be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80059c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	db0a      	blt.n	80059de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80059c8:	683b      	ldr	r3, [r7, #0]
 80059ca:	b2da      	uxtb	r2, r3
 80059cc:	490c      	ldr	r1, [pc, #48]	; (8005a00 <__NVIC_SetPriority+0x4c>)
 80059ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80059d2:	0112      	lsls	r2, r2, #4
 80059d4:	b2d2      	uxtb	r2, r2
 80059d6:	440b      	add	r3, r1
 80059d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80059dc:	e00a      	b.n	80059f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80059de:	683b      	ldr	r3, [r7, #0]
 80059e0:	b2da      	uxtb	r2, r3
 80059e2:	4908      	ldr	r1, [pc, #32]	; (8005a04 <__NVIC_SetPriority+0x50>)
 80059e4:	79fb      	ldrb	r3, [r7, #7]
 80059e6:	f003 030f 	and.w	r3, r3, #15
 80059ea:	3b04      	subs	r3, #4
 80059ec:	0112      	lsls	r2, r2, #4
 80059ee:	b2d2      	uxtb	r2, r2
 80059f0:	440b      	add	r3, r1
 80059f2:	761a      	strb	r2, [r3, #24]
}
 80059f4:	bf00      	nop
 80059f6:	370c      	adds	r7, #12
 80059f8:	46bd      	mov	sp, r7
 80059fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fe:	4770      	bx	lr
 8005a00:	e000e100 	.word	0xe000e100
 8005a04:	e000ed00 	.word	0xe000ed00

08005a08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005a08:	b480      	push	{r7}
 8005a0a:	b089      	sub	sp, #36	; 0x24
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	60f8      	str	r0, [r7, #12]
 8005a10:	60b9      	str	r1, [r7, #8]
 8005a12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	f003 0307 	and.w	r3, r3, #7
 8005a1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005a1c:	69fb      	ldr	r3, [r7, #28]
 8005a1e:	f1c3 0307 	rsb	r3, r3, #7
 8005a22:	2b04      	cmp	r3, #4
 8005a24:	bf28      	it	cs
 8005a26:	2304      	movcs	r3, #4
 8005a28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005a2a:	69fb      	ldr	r3, [r7, #28]
 8005a2c:	3304      	adds	r3, #4
 8005a2e:	2b06      	cmp	r3, #6
 8005a30:	d902      	bls.n	8005a38 <NVIC_EncodePriority+0x30>
 8005a32:	69fb      	ldr	r3, [r7, #28]
 8005a34:	3b03      	subs	r3, #3
 8005a36:	e000      	b.n	8005a3a <NVIC_EncodePriority+0x32>
 8005a38:	2300      	movs	r3, #0
 8005a3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005a3c:	f04f 32ff 	mov.w	r2, #4294967295
 8005a40:	69bb      	ldr	r3, [r7, #24]
 8005a42:	fa02 f303 	lsl.w	r3, r2, r3
 8005a46:	43da      	mvns	r2, r3
 8005a48:	68bb      	ldr	r3, [r7, #8]
 8005a4a:	401a      	ands	r2, r3
 8005a4c:	697b      	ldr	r3, [r7, #20]
 8005a4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005a50:	f04f 31ff 	mov.w	r1, #4294967295
 8005a54:	697b      	ldr	r3, [r7, #20]
 8005a56:	fa01 f303 	lsl.w	r3, r1, r3
 8005a5a:	43d9      	mvns	r1, r3
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005a60:	4313      	orrs	r3, r2
         );
}
 8005a62:	4618      	mov	r0, r3
 8005a64:	3724      	adds	r7, #36	; 0x24
 8005a66:	46bd      	mov	sp, r7
 8005a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6c:	4770      	bx	lr
	...

08005a70 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005a70:	b580      	push	{r7, lr}
 8005a72:	b082      	sub	sp, #8
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	3b01      	subs	r3, #1
 8005a7c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005a80:	d301      	bcc.n	8005a86 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005a82:	2301      	movs	r3, #1
 8005a84:	e00f      	b.n	8005aa6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005a86:	4a0a      	ldr	r2, [pc, #40]	; (8005ab0 <SysTick_Config+0x40>)
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	3b01      	subs	r3, #1
 8005a8c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005a8e:	210f      	movs	r1, #15
 8005a90:	f04f 30ff 	mov.w	r0, #4294967295
 8005a94:	f7ff ff8e 	bl	80059b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005a98:	4b05      	ldr	r3, [pc, #20]	; (8005ab0 <SysTick_Config+0x40>)
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005a9e:	4b04      	ldr	r3, [pc, #16]	; (8005ab0 <SysTick_Config+0x40>)
 8005aa0:	2207      	movs	r2, #7
 8005aa2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005aa4:	2300      	movs	r3, #0
}
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	3708      	adds	r7, #8
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	bd80      	pop	{r7, pc}
 8005aae:	bf00      	nop
 8005ab0:	e000e010 	.word	0xe000e010

08005ab4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	b082      	sub	sp, #8
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005abc:	6878      	ldr	r0, [r7, #4]
 8005abe:	f7ff ff29 	bl	8005914 <__NVIC_SetPriorityGrouping>
}
 8005ac2:	bf00      	nop
 8005ac4:	3708      	adds	r7, #8
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	bd80      	pop	{r7, pc}

08005aca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005aca:	b580      	push	{r7, lr}
 8005acc:	b086      	sub	sp, #24
 8005ace:	af00      	add	r7, sp, #0
 8005ad0:	4603      	mov	r3, r0
 8005ad2:	60b9      	str	r1, [r7, #8]
 8005ad4:	607a      	str	r2, [r7, #4]
 8005ad6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005ad8:	2300      	movs	r3, #0
 8005ada:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005adc:	f7ff ff3e 	bl	800595c <__NVIC_GetPriorityGrouping>
 8005ae0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005ae2:	687a      	ldr	r2, [r7, #4]
 8005ae4:	68b9      	ldr	r1, [r7, #8]
 8005ae6:	6978      	ldr	r0, [r7, #20]
 8005ae8:	f7ff ff8e 	bl	8005a08 <NVIC_EncodePriority>
 8005aec:	4602      	mov	r2, r0
 8005aee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005af2:	4611      	mov	r1, r2
 8005af4:	4618      	mov	r0, r3
 8005af6:	f7ff ff5d 	bl	80059b4 <__NVIC_SetPriority>
}
 8005afa:	bf00      	nop
 8005afc:	3718      	adds	r7, #24
 8005afe:	46bd      	mov	sp, r7
 8005b00:	bd80      	pop	{r7, pc}

08005b02 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005b02:	b580      	push	{r7, lr}
 8005b04:	b082      	sub	sp, #8
 8005b06:	af00      	add	r7, sp, #0
 8005b08:	4603      	mov	r3, r0
 8005b0a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005b0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b10:	4618      	mov	r0, r3
 8005b12:	f7ff ff31 	bl	8005978 <__NVIC_EnableIRQ>
}
 8005b16:	bf00      	nop
 8005b18:	3708      	adds	r7, #8
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	bd80      	pop	{r7, pc}

08005b1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005b1e:	b580      	push	{r7, lr}
 8005b20:	b082      	sub	sp, #8
 8005b22:	af00      	add	r7, sp, #0
 8005b24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005b26:	6878      	ldr	r0, [r7, #4]
 8005b28:	f7ff ffa2 	bl	8005a70 <SysTick_Config>
 8005b2c:	4603      	mov	r3, r0
}
 8005b2e:	4618      	mov	r0, r3
 8005b30:	3708      	adds	r7, #8
 8005b32:	46bd      	mov	sp, r7
 8005b34:	bd80      	pop	{r7, pc}
	...

08005b38 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	b086      	sub	sp, #24
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005b40:	2300      	movs	r3, #0
 8005b42:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005b44:	f7ff feb6 	bl	80058b4 <HAL_GetTick>
 8005b48:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d101      	bne.n	8005b54 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005b50:	2301      	movs	r3, #1
 8005b52:	e099      	b.n	8005c88 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2202      	movs	r2, #2
 8005b58:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2200      	movs	r2, #0
 8005b60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	681a      	ldr	r2, [r3, #0]
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f022 0201 	bic.w	r2, r2, #1
 8005b72:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005b74:	e00f      	b.n	8005b96 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005b76:	f7ff fe9d 	bl	80058b4 <HAL_GetTick>
 8005b7a:	4602      	mov	r2, r0
 8005b7c:	693b      	ldr	r3, [r7, #16]
 8005b7e:	1ad3      	subs	r3, r2, r3
 8005b80:	2b05      	cmp	r3, #5
 8005b82:	d908      	bls.n	8005b96 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2220      	movs	r2, #32
 8005b88:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	2203      	movs	r2, #3
 8005b8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8005b92:	2303      	movs	r3, #3
 8005b94:	e078      	b.n	8005c88 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f003 0301 	and.w	r3, r3, #1
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d1e8      	bne.n	8005b76 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005bac:	697a      	ldr	r2, [r7, #20]
 8005bae:	4b38      	ldr	r3, [pc, #224]	; (8005c90 <HAL_DMA_Init+0x158>)
 8005bb0:	4013      	ands	r3, r2
 8005bb2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	685a      	ldr	r2, [r3, #4]
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	689b      	ldr	r3, [r3, #8]
 8005bbc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005bc2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	691b      	ldr	r3, [r3, #16]
 8005bc8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005bce:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	699b      	ldr	r3, [r3, #24]
 8005bd4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005bda:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	6a1b      	ldr	r3, [r3, #32]
 8005be0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005be2:	697a      	ldr	r2, [r7, #20]
 8005be4:	4313      	orrs	r3, r2
 8005be6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bec:	2b04      	cmp	r3, #4
 8005bee:	d107      	bne.n	8005c00 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bf8:	4313      	orrs	r3, r2
 8005bfa:	697a      	ldr	r2, [r7, #20]
 8005bfc:	4313      	orrs	r3, r2
 8005bfe:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	697a      	ldr	r2, [r7, #20]
 8005c06:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	695b      	ldr	r3, [r3, #20]
 8005c0e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005c10:	697b      	ldr	r3, [r7, #20]
 8005c12:	f023 0307 	bic.w	r3, r3, #7
 8005c16:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c1c:	697a      	ldr	r2, [r7, #20]
 8005c1e:	4313      	orrs	r3, r2
 8005c20:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c26:	2b04      	cmp	r3, #4
 8005c28:	d117      	bne.n	8005c5a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c2e:	697a      	ldr	r2, [r7, #20]
 8005c30:	4313      	orrs	r3, r2
 8005c32:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d00e      	beq.n	8005c5a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005c3c:	6878      	ldr	r0, [r7, #4]
 8005c3e:	f000 fa9d 	bl	800617c <DMA_CheckFifoParam>
 8005c42:	4603      	mov	r3, r0
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d008      	beq.n	8005c5a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2240      	movs	r2, #64	; 0x40
 8005c4c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	2201      	movs	r2, #1
 8005c52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8005c56:	2301      	movs	r3, #1
 8005c58:	e016      	b.n	8005c88 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	697a      	ldr	r2, [r7, #20]
 8005c60:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005c62:	6878      	ldr	r0, [r7, #4]
 8005c64:	f000 fa54 	bl	8006110 <DMA_CalcBaseAndBitshift>
 8005c68:	4603      	mov	r3, r0
 8005c6a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c70:	223f      	movs	r2, #63	; 0x3f
 8005c72:	409a      	lsls	r2, r3
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	2201      	movs	r2, #1
 8005c82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005c86:	2300      	movs	r3, #0
}
 8005c88:	4618      	mov	r0, r3
 8005c8a:	3718      	adds	r7, #24
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	bd80      	pop	{r7, pc}
 8005c90:	f010803f 	.word	0xf010803f

08005c94 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005c94:	b580      	push	{r7, lr}
 8005c96:	b086      	sub	sp, #24
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	60f8      	str	r0, [r7, #12]
 8005c9c:	60b9      	str	r1, [r7, #8]
 8005c9e:	607a      	str	r2, [r7, #4]
 8005ca0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005caa:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005cb2:	2b01      	cmp	r3, #1
 8005cb4:	d101      	bne.n	8005cba <HAL_DMA_Start_IT+0x26>
 8005cb6:	2302      	movs	r3, #2
 8005cb8:	e040      	b.n	8005d3c <HAL_DMA_Start_IT+0xa8>
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	2201      	movs	r2, #1
 8005cbe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005cc8:	b2db      	uxtb	r3, r3
 8005cca:	2b01      	cmp	r3, #1
 8005ccc:	d12f      	bne.n	8005d2e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	2202      	movs	r2, #2
 8005cd2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	2200      	movs	r2, #0
 8005cda:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	687a      	ldr	r2, [r7, #4]
 8005ce0:	68b9      	ldr	r1, [r7, #8]
 8005ce2:	68f8      	ldr	r0, [r7, #12]
 8005ce4:	f000 f9e6 	bl	80060b4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005cec:	223f      	movs	r2, #63	; 0x3f
 8005cee:	409a      	lsls	r2, r3
 8005cf0:	693b      	ldr	r3, [r7, #16]
 8005cf2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	681a      	ldr	r2, [r3, #0]
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f042 0216 	orr.w	r2, r2, #22
 8005d02:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d007      	beq.n	8005d1c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	681a      	ldr	r2, [r3, #0]
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f042 0208 	orr.w	r2, r2, #8
 8005d1a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	681a      	ldr	r2, [r3, #0]
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	f042 0201 	orr.w	r2, r2, #1
 8005d2a:	601a      	str	r2, [r3, #0]
 8005d2c:	e005      	b.n	8005d3a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	2200      	movs	r2, #0
 8005d32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005d36:	2302      	movs	r3, #2
 8005d38:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8005d3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	3718      	adds	r7, #24
 8005d40:	46bd      	mov	sp, r7
 8005d42:	bd80      	pop	{r7, pc}

08005d44 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005d44:	b480      	push	{r7}
 8005d46:	b083      	sub	sp, #12
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005d52:	b2db      	uxtb	r3, r3
 8005d54:	2b02      	cmp	r3, #2
 8005d56:	d004      	beq.n	8005d62 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2280      	movs	r2, #128	; 0x80
 8005d5c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005d5e:	2301      	movs	r3, #1
 8005d60:	e00c      	b.n	8005d7c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	2205      	movs	r2, #5
 8005d66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	681a      	ldr	r2, [r3, #0]
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f022 0201 	bic.w	r2, r2, #1
 8005d78:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005d7a:	2300      	movs	r3, #0
}
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	370c      	adds	r7, #12
 8005d80:	46bd      	mov	sp, r7
 8005d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d86:	4770      	bx	lr

08005d88 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	b086      	sub	sp, #24
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005d90:	2300      	movs	r3, #0
 8005d92:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005d94:	4b8e      	ldr	r3, [pc, #568]	; (8005fd0 <HAL_DMA_IRQHandler+0x248>)
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	4a8e      	ldr	r2, [pc, #568]	; (8005fd4 <HAL_DMA_IRQHandler+0x24c>)
 8005d9a:	fba2 2303 	umull	r2, r3, r2, r3
 8005d9e:	0a9b      	lsrs	r3, r3, #10
 8005da0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005da6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005da8:	693b      	ldr	r3, [r7, #16]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005db2:	2208      	movs	r2, #8
 8005db4:	409a      	lsls	r2, r3
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	4013      	ands	r3, r2
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d01a      	beq.n	8005df4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f003 0304 	and.w	r3, r3, #4
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d013      	beq.n	8005df4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	681a      	ldr	r2, [r3, #0]
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f022 0204 	bic.w	r2, r2, #4
 8005dda:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005de0:	2208      	movs	r2, #8
 8005de2:	409a      	lsls	r2, r3
 8005de4:	693b      	ldr	r3, [r7, #16]
 8005de6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005dec:	f043 0201 	orr.w	r2, r3, #1
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005df8:	2201      	movs	r2, #1
 8005dfa:	409a      	lsls	r2, r3
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	4013      	ands	r3, r2
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d012      	beq.n	8005e2a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	695b      	ldr	r3, [r3, #20]
 8005e0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d00b      	beq.n	8005e2a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e16:	2201      	movs	r2, #1
 8005e18:	409a      	lsls	r2, r3
 8005e1a:	693b      	ldr	r3, [r7, #16]
 8005e1c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e22:	f043 0202 	orr.w	r2, r3, #2
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e2e:	2204      	movs	r2, #4
 8005e30:	409a      	lsls	r2, r3
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	4013      	ands	r3, r2
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d012      	beq.n	8005e60 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	f003 0302 	and.w	r3, r3, #2
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d00b      	beq.n	8005e60 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e4c:	2204      	movs	r2, #4
 8005e4e:	409a      	lsls	r2, r3
 8005e50:	693b      	ldr	r3, [r7, #16]
 8005e52:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e58:	f043 0204 	orr.w	r2, r3, #4
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e64:	2210      	movs	r2, #16
 8005e66:	409a      	lsls	r2, r3
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	4013      	ands	r3, r2
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d043      	beq.n	8005ef8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f003 0308 	and.w	r3, r3, #8
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d03c      	beq.n	8005ef8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e82:	2210      	movs	r2, #16
 8005e84:	409a      	lsls	r2, r3
 8005e86:	693b      	ldr	r3, [r7, #16]
 8005e88:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d018      	beq.n	8005eca <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d108      	bne.n	8005eb8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d024      	beq.n	8005ef8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eb2:	6878      	ldr	r0, [r7, #4]
 8005eb4:	4798      	blx	r3
 8005eb6:	e01f      	b.n	8005ef8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d01b      	beq.n	8005ef8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ec4:	6878      	ldr	r0, [r7, #4]
 8005ec6:	4798      	blx	r3
 8005ec8:	e016      	b.n	8005ef8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d107      	bne.n	8005ee8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	681a      	ldr	r2, [r3, #0]
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f022 0208 	bic.w	r2, r2, #8
 8005ee6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d003      	beq.n	8005ef8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ef4:	6878      	ldr	r0, [r7, #4]
 8005ef6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005efc:	2220      	movs	r2, #32
 8005efe:	409a      	lsls	r2, r3
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	4013      	ands	r3, r2
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	f000 808f 	beq.w	8006028 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	f003 0310 	and.w	r3, r3, #16
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	f000 8087 	beq.w	8006028 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f1e:	2220      	movs	r2, #32
 8005f20:	409a      	lsls	r2, r3
 8005f22:	693b      	ldr	r3, [r7, #16]
 8005f24:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005f2c:	b2db      	uxtb	r3, r3
 8005f2e:	2b05      	cmp	r3, #5
 8005f30:	d136      	bne.n	8005fa0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	681a      	ldr	r2, [r3, #0]
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f022 0216 	bic.w	r2, r2, #22
 8005f40:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	695a      	ldr	r2, [r3, #20]
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005f50:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d103      	bne.n	8005f62 <HAL_DMA_IRQHandler+0x1da>
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d007      	beq.n	8005f72 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	681a      	ldr	r2, [r3, #0]
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	f022 0208 	bic.w	r2, r2, #8
 8005f70:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f76:	223f      	movs	r2, #63	; 0x3f
 8005f78:	409a      	lsls	r2, r3
 8005f7a:	693b      	ldr	r3, [r7, #16]
 8005f7c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	2201      	movs	r2, #1
 8005f82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	2200      	movs	r2, #0
 8005f8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d07e      	beq.n	8006094 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f9a:	6878      	ldr	r0, [r7, #4]
 8005f9c:	4798      	blx	r3
        }
        return;
 8005f9e:	e079      	b.n	8006094 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d01d      	beq.n	8005fea <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d10d      	bne.n	8005fd8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d031      	beq.n	8006028 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fc8:	6878      	ldr	r0, [r7, #4]
 8005fca:	4798      	blx	r3
 8005fcc:	e02c      	b.n	8006028 <HAL_DMA_IRQHandler+0x2a0>
 8005fce:	bf00      	nop
 8005fd0:	20000040 	.word	0x20000040
 8005fd4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d023      	beq.n	8006028 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fe4:	6878      	ldr	r0, [r7, #4]
 8005fe6:	4798      	blx	r3
 8005fe8:	e01e      	b.n	8006028 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d10f      	bne.n	8006018 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	681a      	ldr	r2, [r3, #0]
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	f022 0210 	bic.w	r2, r2, #16
 8006006:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	2201      	movs	r2, #1
 800600c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2200      	movs	r2, #0
 8006014:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800601c:	2b00      	cmp	r3, #0
 800601e:	d003      	beq.n	8006028 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006024:	6878      	ldr	r0, [r7, #4]
 8006026:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800602c:	2b00      	cmp	r3, #0
 800602e:	d032      	beq.n	8006096 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006034:	f003 0301 	and.w	r3, r3, #1
 8006038:	2b00      	cmp	r3, #0
 800603a:	d022      	beq.n	8006082 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2205      	movs	r2, #5
 8006040:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	681a      	ldr	r2, [r3, #0]
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f022 0201 	bic.w	r2, r2, #1
 8006052:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8006054:	68bb      	ldr	r3, [r7, #8]
 8006056:	3301      	adds	r3, #1
 8006058:	60bb      	str	r3, [r7, #8]
 800605a:	697a      	ldr	r2, [r7, #20]
 800605c:	429a      	cmp	r2, r3
 800605e:	d307      	bcc.n	8006070 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f003 0301 	and.w	r3, r3, #1
 800606a:	2b00      	cmp	r3, #0
 800606c:	d1f2      	bne.n	8006054 <HAL_DMA_IRQHandler+0x2cc>
 800606e:	e000      	b.n	8006072 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8006070:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	2201      	movs	r2, #1
 8006076:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	2200      	movs	r2, #0
 800607e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006086:	2b00      	cmp	r3, #0
 8006088:	d005      	beq.n	8006096 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800608e:	6878      	ldr	r0, [r7, #4]
 8006090:	4798      	blx	r3
 8006092:	e000      	b.n	8006096 <HAL_DMA_IRQHandler+0x30e>
        return;
 8006094:	bf00      	nop
    }
  }
}
 8006096:	3718      	adds	r7, #24
 8006098:	46bd      	mov	sp, r7
 800609a:	bd80      	pop	{r7, pc}

0800609c <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800609c:	b480      	push	{r7}
 800609e:	b083      	sub	sp, #12
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80060a8:	4618      	mov	r0, r3
 80060aa:	370c      	adds	r7, #12
 80060ac:	46bd      	mov	sp, r7
 80060ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b2:	4770      	bx	lr

080060b4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80060b4:	b480      	push	{r7}
 80060b6:	b085      	sub	sp, #20
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	60f8      	str	r0, [r7, #12]
 80060bc:	60b9      	str	r1, [r7, #8]
 80060be:	607a      	str	r2, [r7, #4]
 80060c0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	681a      	ldr	r2, [r3, #0]
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80060d0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	683a      	ldr	r2, [r7, #0]
 80060d8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	689b      	ldr	r3, [r3, #8]
 80060de:	2b40      	cmp	r3, #64	; 0x40
 80060e0:	d108      	bne.n	80060f4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	687a      	ldr	r2, [r7, #4]
 80060e8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	68ba      	ldr	r2, [r7, #8]
 80060f0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80060f2:	e007      	b.n	8006104 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	68ba      	ldr	r2, [r7, #8]
 80060fa:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	687a      	ldr	r2, [r7, #4]
 8006102:	60da      	str	r2, [r3, #12]
}
 8006104:	bf00      	nop
 8006106:	3714      	adds	r7, #20
 8006108:	46bd      	mov	sp, r7
 800610a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610e:	4770      	bx	lr

08006110 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006110:	b480      	push	{r7}
 8006112:	b085      	sub	sp, #20
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	b2db      	uxtb	r3, r3
 800611e:	3b10      	subs	r3, #16
 8006120:	4a14      	ldr	r2, [pc, #80]	; (8006174 <DMA_CalcBaseAndBitshift+0x64>)
 8006122:	fba2 2303 	umull	r2, r3, r2, r3
 8006126:	091b      	lsrs	r3, r3, #4
 8006128:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800612a:	4a13      	ldr	r2, [pc, #76]	; (8006178 <DMA_CalcBaseAndBitshift+0x68>)
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	4413      	add	r3, r2
 8006130:	781b      	ldrb	r3, [r3, #0]
 8006132:	461a      	mov	r2, r3
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	2b03      	cmp	r3, #3
 800613c:	d909      	bls.n	8006152 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8006146:	f023 0303 	bic.w	r3, r3, #3
 800614a:	1d1a      	adds	r2, r3, #4
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	659a      	str	r2, [r3, #88]	; 0x58
 8006150:	e007      	b.n	8006162 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800615a:	f023 0303 	bic.w	r3, r3, #3
 800615e:	687a      	ldr	r2, [r7, #4]
 8006160:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8006166:	4618      	mov	r0, r3
 8006168:	3714      	adds	r7, #20
 800616a:	46bd      	mov	sp, r7
 800616c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006170:	4770      	bx	lr
 8006172:	bf00      	nop
 8006174:	aaaaaaab 	.word	0xaaaaaaab
 8006178:	08022fa4 	.word	0x08022fa4

0800617c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800617c:	b480      	push	{r7}
 800617e:	b085      	sub	sp, #20
 8006180:	af00      	add	r7, sp, #0
 8006182:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006184:	2300      	movs	r3, #0
 8006186:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800618c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	699b      	ldr	r3, [r3, #24]
 8006192:	2b00      	cmp	r3, #0
 8006194:	d11f      	bne.n	80061d6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8006196:	68bb      	ldr	r3, [r7, #8]
 8006198:	2b03      	cmp	r3, #3
 800619a:	d856      	bhi.n	800624a <DMA_CheckFifoParam+0xce>
 800619c:	a201      	add	r2, pc, #4	; (adr r2, 80061a4 <DMA_CheckFifoParam+0x28>)
 800619e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061a2:	bf00      	nop
 80061a4:	080061b5 	.word	0x080061b5
 80061a8:	080061c7 	.word	0x080061c7
 80061ac:	080061b5 	.word	0x080061b5
 80061b0:	0800624b 	.word	0x0800624b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061b8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d046      	beq.n	800624e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80061c0:	2301      	movs	r3, #1
 80061c2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80061c4:	e043      	b.n	800624e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061ca:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80061ce:	d140      	bne.n	8006252 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80061d0:	2301      	movs	r3, #1
 80061d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80061d4:	e03d      	b.n	8006252 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	699b      	ldr	r3, [r3, #24]
 80061da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80061de:	d121      	bne.n	8006224 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80061e0:	68bb      	ldr	r3, [r7, #8]
 80061e2:	2b03      	cmp	r3, #3
 80061e4:	d837      	bhi.n	8006256 <DMA_CheckFifoParam+0xda>
 80061e6:	a201      	add	r2, pc, #4	; (adr r2, 80061ec <DMA_CheckFifoParam+0x70>)
 80061e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061ec:	080061fd 	.word	0x080061fd
 80061f0:	08006203 	.word	0x08006203
 80061f4:	080061fd 	.word	0x080061fd
 80061f8:	08006215 	.word	0x08006215
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80061fc:	2301      	movs	r3, #1
 80061fe:	73fb      	strb	r3, [r7, #15]
      break;
 8006200:	e030      	b.n	8006264 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006206:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800620a:	2b00      	cmp	r3, #0
 800620c:	d025      	beq.n	800625a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800620e:	2301      	movs	r3, #1
 8006210:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006212:	e022      	b.n	800625a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006218:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800621c:	d11f      	bne.n	800625e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800621e:	2301      	movs	r3, #1
 8006220:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8006222:	e01c      	b.n	800625e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8006224:	68bb      	ldr	r3, [r7, #8]
 8006226:	2b02      	cmp	r3, #2
 8006228:	d903      	bls.n	8006232 <DMA_CheckFifoParam+0xb6>
 800622a:	68bb      	ldr	r3, [r7, #8]
 800622c:	2b03      	cmp	r3, #3
 800622e:	d003      	beq.n	8006238 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8006230:	e018      	b.n	8006264 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8006232:	2301      	movs	r3, #1
 8006234:	73fb      	strb	r3, [r7, #15]
      break;
 8006236:	e015      	b.n	8006264 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800623c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006240:	2b00      	cmp	r3, #0
 8006242:	d00e      	beq.n	8006262 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8006244:	2301      	movs	r3, #1
 8006246:	73fb      	strb	r3, [r7, #15]
      break;
 8006248:	e00b      	b.n	8006262 <DMA_CheckFifoParam+0xe6>
      break;
 800624a:	bf00      	nop
 800624c:	e00a      	b.n	8006264 <DMA_CheckFifoParam+0xe8>
      break;
 800624e:	bf00      	nop
 8006250:	e008      	b.n	8006264 <DMA_CheckFifoParam+0xe8>
      break;
 8006252:	bf00      	nop
 8006254:	e006      	b.n	8006264 <DMA_CheckFifoParam+0xe8>
      break;
 8006256:	bf00      	nop
 8006258:	e004      	b.n	8006264 <DMA_CheckFifoParam+0xe8>
      break;
 800625a:	bf00      	nop
 800625c:	e002      	b.n	8006264 <DMA_CheckFifoParam+0xe8>
      break;   
 800625e:	bf00      	nop
 8006260:	e000      	b.n	8006264 <DMA_CheckFifoParam+0xe8>
      break;
 8006262:	bf00      	nop
    }
  } 
  
  return status; 
 8006264:	7bfb      	ldrb	r3, [r7, #15]
}
 8006266:	4618      	mov	r0, r3
 8006268:	3714      	adds	r7, #20
 800626a:	46bd      	mov	sp, r7
 800626c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006270:	4770      	bx	lr
 8006272:	bf00      	nop

08006274 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8006274:	b580      	push	{r7, lr}
 8006276:	b086      	sub	sp, #24
 8006278:	af00      	add	r7, sp, #0
 800627a:	60f8      	str	r0, [r7, #12]
 800627c:	60b9      	str	r1, [r7, #8]
 800627e:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8006282:	2301      	movs	r3, #1
 8006284:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8006286:	4b23      	ldr	r3, [pc, #140]	; (8006314 <HAL_FLASH_Program+0xa0>)
 8006288:	7e1b      	ldrb	r3, [r3, #24]
 800628a:	2b01      	cmp	r3, #1
 800628c:	d101      	bne.n	8006292 <HAL_FLASH_Program+0x1e>
 800628e:	2302      	movs	r3, #2
 8006290:	e03b      	b.n	800630a <HAL_FLASH_Program+0x96>
 8006292:	4b20      	ldr	r3, [pc, #128]	; (8006314 <HAL_FLASH_Program+0xa0>)
 8006294:	2201      	movs	r2, #1
 8006296:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8006298:	f24c 3050 	movw	r0, #50000	; 0xc350
 800629c:	f000 f870 	bl	8006380 <FLASH_WaitForLastOperation>
 80062a0:	4603      	mov	r3, r0
 80062a2:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 80062a4:	7dfb      	ldrb	r3, [r7, #23]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d12b      	bne.n	8006302 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d105      	bne.n	80062bc <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 80062b0:	783b      	ldrb	r3, [r7, #0]
 80062b2:	4619      	mov	r1, r3
 80062b4:	68b8      	ldr	r0, [r7, #8]
 80062b6:	f000 f91b 	bl	80064f0 <FLASH_Program_Byte>
 80062ba:	e016      	b.n	80062ea <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	2b01      	cmp	r3, #1
 80062c0:	d105      	bne.n	80062ce <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 80062c2:	883b      	ldrh	r3, [r7, #0]
 80062c4:	4619      	mov	r1, r3
 80062c6:	68b8      	ldr	r0, [r7, #8]
 80062c8:	f000 f8ee 	bl	80064a8 <FLASH_Program_HalfWord>
 80062cc:	e00d      	b.n	80062ea <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	2b02      	cmp	r3, #2
 80062d2:	d105      	bne.n	80062e0 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	4619      	mov	r1, r3
 80062d8:	68b8      	ldr	r0, [r7, #8]
 80062da:	f000 f8c3 	bl	8006464 <FLASH_Program_Word>
 80062de:	e004      	b.n	80062ea <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 80062e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80062e4:	68b8      	ldr	r0, [r7, #8]
 80062e6:	f000 f88b 	bl	8006400 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80062ea:	f24c 3050 	movw	r0, #50000	; 0xc350
 80062ee:	f000 f847 	bl	8006380 <FLASH_WaitForLastOperation>
 80062f2:	4603      	mov	r3, r0
 80062f4:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 80062f6:	4b08      	ldr	r3, [pc, #32]	; (8006318 <HAL_FLASH_Program+0xa4>)
 80062f8:	691b      	ldr	r3, [r3, #16]
 80062fa:	4a07      	ldr	r2, [pc, #28]	; (8006318 <HAL_FLASH_Program+0xa4>)
 80062fc:	f023 0301 	bic.w	r3, r3, #1
 8006300:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8006302:	4b04      	ldr	r3, [pc, #16]	; (8006314 <HAL_FLASH_Program+0xa0>)
 8006304:	2200      	movs	r2, #0
 8006306:	761a      	strb	r2, [r3, #24]
  
  return status;
 8006308:	7dfb      	ldrb	r3, [r7, #23]
}
 800630a:	4618      	mov	r0, r3
 800630c:	3718      	adds	r7, #24
 800630e:	46bd      	mov	sp, r7
 8006310:	bd80      	pop	{r7, pc}
 8006312:	bf00      	nop
 8006314:	200072e0 	.word	0x200072e0
 8006318:	40023c00 	.word	0x40023c00

0800631c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800631c:	b480      	push	{r7}
 800631e:	b083      	sub	sp, #12
 8006320:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8006322:	2300      	movs	r3, #0
 8006324:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8006326:	4b0b      	ldr	r3, [pc, #44]	; (8006354 <HAL_FLASH_Unlock+0x38>)
 8006328:	691b      	ldr	r3, [r3, #16]
 800632a:	2b00      	cmp	r3, #0
 800632c:	da0b      	bge.n	8006346 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800632e:	4b09      	ldr	r3, [pc, #36]	; (8006354 <HAL_FLASH_Unlock+0x38>)
 8006330:	4a09      	ldr	r2, [pc, #36]	; (8006358 <HAL_FLASH_Unlock+0x3c>)
 8006332:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8006334:	4b07      	ldr	r3, [pc, #28]	; (8006354 <HAL_FLASH_Unlock+0x38>)
 8006336:	4a09      	ldr	r2, [pc, #36]	; (800635c <HAL_FLASH_Unlock+0x40>)
 8006338:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800633a:	4b06      	ldr	r3, [pc, #24]	; (8006354 <HAL_FLASH_Unlock+0x38>)
 800633c:	691b      	ldr	r3, [r3, #16]
 800633e:	2b00      	cmp	r3, #0
 8006340:	da01      	bge.n	8006346 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8006342:	2301      	movs	r3, #1
 8006344:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8006346:	79fb      	ldrb	r3, [r7, #7]
}
 8006348:	4618      	mov	r0, r3
 800634a:	370c      	adds	r7, #12
 800634c:	46bd      	mov	sp, r7
 800634e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006352:	4770      	bx	lr
 8006354:	40023c00 	.word	0x40023c00
 8006358:	45670123 	.word	0x45670123
 800635c:	cdef89ab 	.word	0xcdef89ab

08006360 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8006360:	b480      	push	{r7}
 8006362:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8006364:	4b05      	ldr	r3, [pc, #20]	; (800637c <HAL_FLASH_Lock+0x1c>)
 8006366:	691b      	ldr	r3, [r3, #16]
 8006368:	4a04      	ldr	r2, [pc, #16]	; (800637c <HAL_FLASH_Lock+0x1c>)
 800636a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800636e:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8006370:	2300      	movs	r3, #0
}
 8006372:	4618      	mov	r0, r3
 8006374:	46bd      	mov	sp, r7
 8006376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637a:	4770      	bx	lr
 800637c:	40023c00 	.word	0x40023c00

08006380 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8006380:	b580      	push	{r7, lr}
 8006382:	b084      	sub	sp, #16
 8006384:	af00      	add	r7, sp, #0
 8006386:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006388:	2300      	movs	r3, #0
 800638a:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800638c:	4b1a      	ldr	r3, [pc, #104]	; (80063f8 <FLASH_WaitForLastOperation+0x78>)
 800638e:	2200      	movs	r2, #0
 8006390:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8006392:	f7ff fa8f 	bl	80058b4 <HAL_GetTick>
 8006396:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8006398:	e010      	b.n	80063bc <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063a0:	d00c      	beq.n	80063bc <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d007      	beq.n	80063b8 <FLASH_WaitForLastOperation+0x38>
 80063a8:	f7ff fa84 	bl	80058b4 <HAL_GetTick>
 80063ac:	4602      	mov	r2, r0
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	1ad3      	subs	r3, r2, r3
 80063b2:	687a      	ldr	r2, [r7, #4]
 80063b4:	429a      	cmp	r2, r3
 80063b6:	d201      	bcs.n	80063bc <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 80063b8:	2303      	movs	r3, #3
 80063ba:	e019      	b.n	80063f0 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80063bc:	4b0f      	ldr	r3, [pc, #60]	; (80063fc <FLASH_WaitForLastOperation+0x7c>)
 80063be:	68db      	ldr	r3, [r3, #12]
 80063c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d1e8      	bne.n	800639a <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 80063c8:	4b0c      	ldr	r3, [pc, #48]	; (80063fc <FLASH_WaitForLastOperation+0x7c>)
 80063ca:	68db      	ldr	r3, [r3, #12]
 80063cc:	f003 0301 	and.w	r3, r3, #1
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d002      	beq.n	80063da <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80063d4:	4b09      	ldr	r3, [pc, #36]	; (80063fc <FLASH_WaitForLastOperation+0x7c>)
 80063d6:	2201      	movs	r2, #1
 80063d8:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 80063da:	4b08      	ldr	r3, [pc, #32]	; (80063fc <FLASH_WaitForLastOperation+0x7c>)
 80063dc:	68db      	ldr	r3, [r3, #12]
 80063de:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d003      	beq.n	80063ee <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80063e6:	f000 f8a5 	bl	8006534 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80063ea:	2301      	movs	r3, #1
 80063ec:	e000      	b.n	80063f0 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 80063ee:	2300      	movs	r3, #0
  
}  
 80063f0:	4618      	mov	r0, r3
 80063f2:	3710      	adds	r7, #16
 80063f4:	46bd      	mov	sp, r7
 80063f6:	bd80      	pop	{r7, pc}
 80063f8:	200072e0 	.word	0x200072e0
 80063fc:	40023c00 	.word	0x40023c00

08006400 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8006400:	b480      	push	{r7}
 8006402:	b085      	sub	sp, #20
 8006404:	af00      	add	r7, sp, #0
 8006406:	60f8      	str	r0, [r7, #12]
 8006408:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800640c:	4b14      	ldr	r3, [pc, #80]	; (8006460 <FLASH_Program_DoubleWord+0x60>)
 800640e:	691b      	ldr	r3, [r3, #16]
 8006410:	4a13      	ldr	r2, [pc, #76]	; (8006460 <FLASH_Program_DoubleWord+0x60>)
 8006412:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006416:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8006418:	4b11      	ldr	r3, [pc, #68]	; (8006460 <FLASH_Program_DoubleWord+0x60>)
 800641a:	691b      	ldr	r3, [r3, #16]
 800641c:	4a10      	ldr	r2, [pc, #64]	; (8006460 <FLASH_Program_DoubleWord+0x60>)
 800641e:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8006422:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8006424:	4b0e      	ldr	r3, [pc, #56]	; (8006460 <FLASH_Program_DoubleWord+0x60>)
 8006426:	691b      	ldr	r3, [r3, #16]
 8006428:	4a0d      	ldr	r2, [pc, #52]	; (8006460 <FLASH_Program_DoubleWord+0x60>)
 800642a:	f043 0301 	orr.w	r3, r3, #1
 800642e:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	683a      	ldr	r2, [r7, #0]
 8006434:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8006436:	f3bf 8f6f 	isb	sy
}
 800643a:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 800643c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006440:	f04f 0200 	mov.w	r2, #0
 8006444:	f04f 0300 	mov.w	r3, #0
 8006448:	000a      	movs	r2, r1
 800644a:	2300      	movs	r3, #0
 800644c:	68f9      	ldr	r1, [r7, #12]
 800644e:	3104      	adds	r1, #4
 8006450:	4613      	mov	r3, r2
 8006452:	600b      	str	r3, [r1, #0]
}
 8006454:	bf00      	nop
 8006456:	3714      	adds	r7, #20
 8006458:	46bd      	mov	sp, r7
 800645a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645e:	4770      	bx	lr
 8006460:	40023c00 	.word	0x40023c00

08006464 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8006464:	b480      	push	{r7}
 8006466:	b083      	sub	sp, #12
 8006468:	af00      	add	r7, sp, #0
 800646a:	6078      	str	r0, [r7, #4]
 800646c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800646e:	4b0d      	ldr	r3, [pc, #52]	; (80064a4 <FLASH_Program_Word+0x40>)
 8006470:	691b      	ldr	r3, [r3, #16]
 8006472:	4a0c      	ldr	r2, [pc, #48]	; (80064a4 <FLASH_Program_Word+0x40>)
 8006474:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006478:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 800647a:	4b0a      	ldr	r3, [pc, #40]	; (80064a4 <FLASH_Program_Word+0x40>)
 800647c:	691b      	ldr	r3, [r3, #16]
 800647e:	4a09      	ldr	r2, [pc, #36]	; (80064a4 <FLASH_Program_Word+0x40>)
 8006480:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006484:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8006486:	4b07      	ldr	r3, [pc, #28]	; (80064a4 <FLASH_Program_Word+0x40>)
 8006488:	691b      	ldr	r3, [r3, #16]
 800648a:	4a06      	ldr	r2, [pc, #24]	; (80064a4 <FLASH_Program_Word+0x40>)
 800648c:	f043 0301 	orr.w	r3, r3, #1
 8006490:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	683a      	ldr	r2, [r7, #0]
 8006496:	601a      	str	r2, [r3, #0]
}
 8006498:	bf00      	nop
 800649a:	370c      	adds	r7, #12
 800649c:	46bd      	mov	sp, r7
 800649e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a2:	4770      	bx	lr
 80064a4:	40023c00 	.word	0x40023c00

080064a8 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80064a8:	b480      	push	{r7}
 80064aa:	b083      	sub	sp, #12
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
 80064b0:	460b      	mov	r3, r1
 80064b2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80064b4:	4b0d      	ldr	r3, [pc, #52]	; (80064ec <FLASH_Program_HalfWord+0x44>)
 80064b6:	691b      	ldr	r3, [r3, #16]
 80064b8:	4a0c      	ldr	r2, [pc, #48]	; (80064ec <FLASH_Program_HalfWord+0x44>)
 80064ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80064be:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 80064c0:	4b0a      	ldr	r3, [pc, #40]	; (80064ec <FLASH_Program_HalfWord+0x44>)
 80064c2:	691b      	ldr	r3, [r3, #16]
 80064c4:	4a09      	ldr	r2, [pc, #36]	; (80064ec <FLASH_Program_HalfWord+0x44>)
 80064c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80064ca:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80064cc:	4b07      	ldr	r3, [pc, #28]	; (80064ec <FLASH_Program_HalfWord+0x44>)
 80064ce:	691b      	ldr	r3, [r3, #16]
 80064d0:	4a06      	ldr	r2, [pc, #24]	; (80064ec <FLASH_Program_HalfWord+0x44>)
 80064d2:	f043 0301 	orr.w	r3, r3, #1
 80064d6:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	887a      	ldrh	r2, [r7, #2]
 80064dc:	801a      	strh	r2, [r3, #0]
}
 80064de:	bf00      	nop
 80064e0:	370c      	adds	r7, #12
 80064e2:	46bd      	mov	sp, r7
 80064e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e8:	4770      	bx	lr
 80064ea:	bf00      	nop
 80064ec:	40023c00 	.word	0x40023c00

080064f0 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 80064f0:	b480      	push	{r7}
 80064f2:	b083      	sub	sp, #12
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]
 80064f8:	460b      	mov	r3, r1
 80064fa:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80064fc:	4b0c      	ldr	r3, [pc, #48]	; (8006530 <FLASH_Program_Byte+0x40>)
 80064fe:	691b      	ldr	r3, [r3, #16]
 8006500:	4a0b      	ldr	r2, [pc, #44]	; (8006530 <FLASH_Program_Byte+0x40>)
 8006502:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006506:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8006508:	4b09      	ldr	r3, [pc, #36]	; (8006530 <FLASH_Program_Byte+0x40>)
 800650a:	4a09      	ldr	r2, [pc, #36]	; (8006530 <FLASH_Program_Byte+0x40>)
 800650c:	691b      	ldr	r3, [r3, #16]
 800650e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8006510:	4b07      	ldr	r3, [pc, #28]	; (8006530 <FLASH_Program_Byte+0x40>)
 8006512:	691b      	ldr	r3, [r3, #16]
 8006514:	4a06      	ldr	r2, [pc, #24]	; (8006530 <FLASH_Program_Byte+0x40>)
 8006516:	f043 0301 	orr.w	r3, r3, #1
 800651a:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	78fa      	ldrb	r2, [r7, #3]
 8006520:	701a      	strb	r2, [r3, #0]
}
 8006522:	bf00      	nop
 8006524:	370c      	adds	r7, #12
 8006526:	46bd      	mov	sp, r7
 8006528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652c:	4770      	bx	lr
 800652e:	bf00      	nop
 8006530:	40023c00 	.word	0x40023c00

08006534 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8006534:	b480      	push	{r7}
 8006536:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8006538:	4b2f      	ldr	r3, [pc, #188]	; (80065f8 <FLASH_SetErrorCode+0xc4>)
 800653a:	68db      	ldr	r3, [r3, #12]
 800653c:	f003 0310 	and.w	r3, r3, #16
 8006540:	2b00      	cmp	r3, #0
 8006542:	d008      	beq.n	8006556 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8006544:	4b2d      	ldr	r3, [pc, #180]	; (80065fc <FLASH_SetErrorCode+0xc8>)
 8006546:	69db      	ldr	r3, [r3, #28]
 8006548:	f043 0310 	orr.w	r3, r3, #16
 800654c:	4a2b      	ldr	r2, [pc, #172]	; (80065fc <FLASH_SetErrorCode+0xc8>)
 800654e:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8006550:	4b29      	ldr	r3, [pc, #164]	; (80065f8 <FLASH_SetErrorCode+0xc4>)
 8006552:	2210      	movs	r2, #16
 8006554:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8006556:	4b28      	ldr	r3, [pc, #160]	; (80065f8 <FLASH_SetErrorCode+0xc4>)
 8006558:	68db      	ldr	r3, [r3, #12]
 800655a:	f003 0320 	and.w	r3, r3, #32
 800655e:	2b00      	cmp	r3, #0
 8006560:	d008      	beq.n	8006574 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8006562:	4b26      	ldr	r3, [pc, #152]	; (80065fc <FLASH_SetErrorCode+0xc8>)
 8006564:	69db      	ldr	r3, [r3, #28]
 8006566:	f043 0308 	orr.w	r3, r3, #8
 800656a:	4a24      	ldr	r2, [pc, #144]	; (80065fc <FLASH_SetErrorCode+0xc8>)
 800656c:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 800656e:	4b22      	ldr	r3, [pc, #136]	; (80065f8 <FLASH_SetErrorCode+0xc4>)
 8006570:	2220      	movs	r2, #32
 8006572:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8006574:	4b20      	ldr	r3, [pc, #128]	; (80065f8 <FLASH_SetErrorCode+0xc4>)
 8006576:	68db      	ldr	r3, [r3, #12]
 8006578:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800657c:	2b00      	cmp	r3, #0
 800657e:	d008      	beq.n	8006592 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8006580:	4b1e      	ldr	r3, [pc, #120]	; (80065fc <FLASH_SetErrorCode+0xc8>)
 8006582:	69db      	ldr	r3, [r3, #28]
 8006584:	f043 0304 	orr.w	r3, r3, #4
 8006588:	4a1c      	ldr	r2, [pc, #112]	; (80065fc <FLASH_SetErrorCode+0xc8>)
 800658a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 800658c:	4b1a      	ldr	r3, [pc, #104]	; (80065f8 <FLASH_SetErrorCode+0xc4>)
 800658e:	2240      	movs	r2, #64	; 0x40
 8006590:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8006592:	4b19      	ldr	r3, [pc, #100]	; (80065f8 <FLASH_SetErrorCode+0xc4>)
 8006594:	68db      	ldr	r3, [r3, #12]
 8006596:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800659a:	2b00      	cmp	r3, #0
 800659c:	d008      	beq.n	80065b0 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 800659e:	4b17      	ldr	r3, [pc, #92]	; (80065fc <FLASH_SetErrorCode+0xc8>)
 80065a0:	69db      	ldr	r3, [r3, #28]
 80065a2:	f043 0302 	orr.w	r3, r3, #2
 80065a6:	4a15      	ldr	r2, [pc, #84]	; (80065fc <FLASH_SetErrorCode+0xc8>)
 80065a8:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 80065aa:	4b13      	ldr	r3, [pc, #76]	; (80065f8 <FLASH_SetErrorCode+0xc4>)
 80065ac:	2280      	movs	r2, #128	; 0x80
 80065ae:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 80065b0:	4b11      	ldr	r3, [pc, #68]	; (80065f8 <FLASH_SetErrorCode+0xc4>)
 80065b2:	68db      	ldr	r3, [r3, #12]
 80065b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d009      	beq.n	80065d0 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 80065bc:	4b0f      	ldr	r3, [pc, #60]	; (80065fc <FLASH_SetErrorCode+0xc8>)
 80065be:	69db      	ldr	r3, [r3, #28]
 80065c0:	f043 0301 	orr.w	r3, r3, #1
 80065c4:	4a0d      	ldr	r2, [pc, #52]	; (80065fc <FLASH_SetErrorCode+0xc8>)
 80065c6:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 80065c8:	4b0b      	ldr	r3, [pc, #44]	; (80065f8 <FLASH_SetErrorCode+0xc4>)
 80065ca:	f44f 7280 	mov.w	r2, #256	; 0x100
 80065ce:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 80065d0:	4b09      	ldr	r3, [pc, #36]	; (80065f8 <FLASH_SetErrorCode+0xc4>)
 80065d2:	68db      	ldr	r3, [r3, #12]
 80065d4:	f003 0302 	and.w	r3, r3, #2
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d008      	beq.n	80065ee <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 80065dc:	4b07      	ldr	r3, [pc, #28]	; (80065fc <FLASH_SetErrorCode+0xc8>)
 80065de:	69db      	ldr	r3, [r3, #28]
 80065e0:	f043 0320 	orr.w	r3, r3, #32
 80065e4:	4a05      	ldr	r2, [pc, #20]	; (80065fc <FLASH_SetErrorCode+0xc8>)
 80065e6:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 80065e8:	4b03      	ldr	r3, [pc, #12]	; (80065f8 <FLASH_SetErrorCode+0xc4>)
 80065ea:	2202      	movs	r2, #2
 80065ec:	60da      	str	r2, [r3, #12]
  }
}
 80065ee:	bf00      	nop
 80065f0:	46bd      	mov	sp, r7
 80065f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f6:	4770      	bx	lr
 80065f8:	40023c00 	.word	0x40023c00
 80065fc:	200072e0 	.word	0x200072e0

08006600 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8006600:	b580      	push	{r7, lr}
 8006602:	b084      	sub	sp, #16
 8006604:	af00      	add	r7, sp, #0
 8006606:	6078      	str	r0, [r7, #4]
 8006608:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800660a:	2301      	movs	r3, #1
 800660c:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 800660e:	2300      	movs	r3, #0
 8006610:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8006612:	4b31      	ldr	r3, [pc, #196]	; (80066d8 <HAL_FLASHEx_Erase+0xd8>)
 8006614:	7e1b      	ldrb	r3, [r3, #24]
 8006616:	2b01      	cmp	r3, #1
 8006618:	d101      	bne.n	800661e <HAL_FLASHEx_Erase+0x1e>
 800661a:	2302      	movs	r3, #2
 800661c:	e058      	b.n	80066d0 <HAL_FLASHEx_Erase+0xd0>
 800661e:	4b2e      	ldr	r3, [pc, #184]	; (80066d8 <HAL_FLASHEx_Erase+0xd8>)
 8006620:	2201      	movs	r2, #1
 8006622:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8006624:	f24c 3050 	movw	r0, #50000	; 0xc350
 8006628:	f7ff feaa 	bl	8006380 <FLASH_WaitForLastOperation>
 800662c:	4603      	mov	r3, r0
 800662e:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8006630:	7bfb      	ldrb	r3, [r7, #15]
 8006632:	2b00      	cmp	r3, #0
 8006634:	d148      	bne.n	80066c8 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8006636:	683b      	ldr	r3, [r7, #0]
 8006638:	f04f 32ff 	mov.w	r2, #4294967295
 800663c:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	2b01      	cmp	r3, #1
 8006644:	d115      	bne.n	8006672 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	691b      	ldr	r3, [r3, #16]
 800664a:	b2da      	uxtb	r2, r3
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	685b      	ldr	r3, [r3, #4]
 8006650:	4619      	mov	r1, r3
 8006652:	4610      	mov	r0, r2
 8006654:	f000 f844 	bl	80066e0 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8006658:	f24c 3050 	movw	r0, #50000	; 0xc350
 800665c:	f7ff fe90 	bl	8006380 <FLASH_WaitForLastOperation>
 8006660:	4603      	mov	r3, r0
 8006662:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8006664:	4b1d      	ldr	r3, [pc, #116]	; (80066dc <HAL_FLASHEx_Erase+0xdc>)
 8006666:	691b      	ldr	r3, [r3, #16]
 8006668:	4a1c      	ldr	r2, [pc, #112]	; (80066dc <HAL_FLASHEx_Erase+0xdc>)
 800666a:	f023 0304 	bic.w	r3, r3, #4
 800666e:	6113      	str	r3, [r2, #16]
 8006670:	e028      	b.n	80066c4 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	689b      	ldr	r3, [r3, #8]
 8006676:	60bb      	str	r3, [r7, #8]
 8006678:	e01c      	b.n	80066b4 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	691b      	ldr	r3, [r3, #16]
 800667e:	b2db      	uxtb	r3, r3
 8006680:	4619      	mov	r1, r3
 8006682:	68b8      	ldr	r0, [r7, #8]
 8006684:	f000 f850 	bl	8006728 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8006688:	f24c 3050 	movw	r0, #50000	; 0xc350
 800668c:	f7ff fe78 	bl	8006380 <FLASH_WaitForLastOperation>
 8006690:	4603      	mov	r3, r0
 8006692:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8006694:	4b11      	ldr	r3, [pc, #68]	; (80066dc <HAL_FLASHEx_Erase+0xdc>)
 8006696:	691b      	ldr	r3, [r3, #16]
 8006698:	4a10      	ldr	r2, [pc, #64]	; (80066dc <HAL_FLASHEx_Erase+0xdc>)
 800669a:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 800669e:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 80066a0:	7bfb      	ldrb	r3, [r7, #15]
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d003      	beq.n	80066ae <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 80066a6:	683b      	ldr	r3, [r7, #0]
 80066a8:	68ba      	ldr	r2, [r7, #8]
 80066aa:	601a      	str	r2, [r3, #0]
          break;
 80066ac:	e00a      	b.n	80066c4 <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80066ae:	68bb      	ldr	r3, [r7, #8]
 80066b0:	3301      	adds	r3, #1
 80066b2:	60bb      	str	r3, [r7, #8]
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	68da      	ldr	r2, [r3, #12]
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	689b      	ldr	r3, [r3, #8]
 80066bc:	4413      	add	r3, r2
 80066be:	68ba      	ldr	r2, [r7, #8]
 80066c0:	429a      	cmp	r2, r3
 80066c2:	d3da      	bcc.n	800667a <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 80066c4:	f000 f878 	bl	80067b8 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80066c8:	4b03      	ldr	r3, [pc, #12]	; (80066d8 <HAL_FLASHEx_Erase+0xd8>)
 80066ca:	2200      	movs	r2, #0
 80066cc:	761a      	strb	r2, [r3, #24]

  return status;
 80066ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80066d0:	4618      	mov	r0, r3
 80066d2:	3710      	adds	r7, #16
 80066d4:	46bd      	mov	sp, r7
 80066d6:	bd80      	pop	{r7, pc}
 80066d8:	200072e0 	.word	0x200072e0
 80066dc:	40023c00 	.word	0x40023c00

080066e0 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 80066e0:	b480      	push	{r7}
 80066e2:	b083      	sub	sp, #12
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	4603      	mov	r3, r0
 80066e8:	6039      	str	r1, [r7, #0]
 80066ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80066ec:	4b0d      	ldr	r3, [pc, #52]	; (8006724 <FLASH_MassErase+0x44>)
 80066ee:	691b      	ldr	r3, [r3, #16]
 80066f0:	4a0c      	ldr	r2, [pc, #48]	; (8006724 <FLASH_MassErase+0x44>)
 80066f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80066f6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 80066f8:	4b0a      	ldr	r3, [pc, #40]	; (8006724 <FLASH_MassErase+0x44>)
 80066fa:	691b      	ldr	r3, [r3, #16]
 80066fc:	4a09      	ldr	r2, [pc, #36]	; (8006724 <FLASH_MassErase+0x44>)
 80066fe:	f043 0304 	orr.w	r3, r3, #4
 8006702:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8006704:	4b07      	ldr	r3, [pc, #28]	; (8006724 <FLASH_MassErase+0x44>)
 8006706:	691a      	ldr	r2, [r3, #16]
 8006708:	79fb      	ldrb	r3, [r7, #7]
 800670a:	021b      	lsls	r3, r3, #8
 800670c:	4313      	orrs	r3, r2
 800670e:	4a05      	ldr	r2, [pc, #20]	; (8006724 <FLASH_MassErase+0x44>)
 8006710:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006714:	6113      	str	r3, [r2, #16]
}
 8006716:	bf00      	nop
 8006718:	370c      	adds	r7, #12
 800671a:	46bd      	mov	sp, r7
 800671c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006720:	4770      	bx	lr
 8006722:	bf00      	nop
 8006724:	40023c00 	.word	0x40023c00

08006728 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8006728:	b480      	push	{r7}
 800672a:	b085      	sub	sp, #20
 800672c:	af00      	add	r7, sp, #0
 800672e:	6078      	str	r0, [r7, #4]
 8006730:	460b      	mov	r3, r1
 8006732:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8006734:	2300      	movs	r3, #0
 8006736:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8006738:	78fb      	ldrb	r3, [r7, #3]
 800673a:	2b00      	cmp	r3, #0
 800673c:	d102      	bne.n	8006744 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 800673e:	2300      	movs	r3, #0
 8006740:	60fb      	str	r3, [r7, #12]
 8006742:	e010      	b.n	8006766 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8006744:	78fb      	ldrb	r3, [r7, #3]
 8006746:	2b01      	cmp	r3, #1
 8006748:	d103      	bne.n	8006752 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800674a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800674e:	60fb      	str	r3, [r7, #12]
 8006750:	e009      	b.n	8006766 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8006752:	78fb      	ldrb	r3, [r7, #3]
 8006754:	2b02      	cmp	r3, #2
 8006756:	d103      	bne.n	8006760 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8006758:	f44f 7300 	mov.w	r3, #512	; 0x200
 800675c:	60fb      	str	r3, [r7, #12]
 800675e:	e002      	b.n	8006766 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8006760:	f44f 7340 	mov.w	r3, #768	; 0x300
 8006764:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8006766:	4b13      	ldr	r3, [pc, #76]	; (80067b4 <FLASH_Erase_Sector+0x8c>)
 8006768:	691b      	ldr	r3, [r3, #16]
 800676a:	4a12      	ldr	r2, [pc, #72]	; (80067b4 <FLASH_Erase_Sector+0x8c>)
 800676c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006770:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8006772:	4b10      	ldr	r3, [pc, #64]	; (80067b4 <FLASH_Erase_Sector+0x8c>)
 8006774:	691a      	ldr	r2, [r3, #16]
 8006776:	490f      	ldr	r1, [pc, #60]	; (80067b4 <FLASH_Erase_Sector+0x8c>)
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	4313      	orrs	r3, r2
 800677c:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 800677e:	4b0d      	ldr	r3, [pc, #52]	; (80067b4 <FLASH_Erase_Sector+0x8c>)
 8006780:	691b      	ldr	r3, [r3, #16]
 8006782:	4a0c      	ldr	r2, [pc, #48]	; (80067b4 <FLASH_Erase_Sector+0x8c>)
 8006784:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8006788:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 800678a:	4b0a      	ldr	r3, [pc, #40]	; (80067b4 <FLASH_Erase_Sector+0x8c>)
 800678c:	691a      	ldr	r2, [r3, #16]
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	00db      	lsls	r3, r3, #3
 8006792:	4313      	orrs	r3, r2
 8006794:	4a07      	ldr	r2, [pc, #28]	; (80067b4 <FLASH_Erase_Sector+0x8c>)
 8006796:	f043 0302 	orr.w	r3, r3, #2
 800679a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 800679c:	4b05      	ldr	r3, [pc, #20]	; (80067b4 <FLASH_Erase_Sector+0x8c>)
 800679e:	691b      	ldr	r3, [r3, #16]
 80067a0:	4a04      	ldr	r2, [pc, #16]	; (80067b4 <FLASH_Erase_Sector+0x8c>)
 80067a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80067a6:	6113      	str	r3, [r2, #16]
}
 80067a8:	bf00      	nop
 80067aa:	3714      	adds	r7, #20
 80067ac:	46bd      	mov	sp, r7
 80067ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b2:	4770      	bx	lr
 80067b4:	40023c00 	.word	0x40023c00

080067b8 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 80067b8:	b480      	push	{r7}
 80067ba:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 80067bc:	4b20      	ldr	r3, [pc, #128]	; (8006840 <FLASH_FlushCaches+0x88>)
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d017      	beq.n	80067f8 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80067c8:	4b1d      	ldr	r3, [pc, #116]	; (8006840 <FLASH_FlushCaches+0x88>)
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	4a1c      	ldr	r2, [pc, #112]	; (8006840 <FLASH_FlushCaches+0x88>)
 80067ce:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80067d2:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80067d4:	4b1a      	ldr	r3, [pc, #104]	; (8006840 <FLASH_FlushCaches+0x88>)
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	4a19      	ldr	r2, [pc, #100]	; (8006840 <FLASH_FlushCaches+0x88>)
 80067da:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80067de:	6013      	str	r3, [r2, #0]
 80067e0:	4b17      	ldr	r3, [pc, #92]	; (8006840 <FLASH_FlushCaches+0x88>)
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	4a16      	ldr	r2, [pc, #88]	; (8006840 <FLASH_FlushCaches+0x88>)
 80067e6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80067ea:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80067ec:	4b14      	ldr	r3, [pc, #80]	; (8006840 <FLASH_FlushCaches+0x88>)
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	4a13      	ldr	r2, [pc, #76]	; (8006840 <FLASH_FlushCaches+0x88>)
 80067f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80067f6:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 80067f8:	4b11      	ldr	r3, [pc, #68]	; (8006840 <FLASH_FlushCaches+0x88>)
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006800:	2b00      	cmp	r3, #0
 8006802:	d017      	beq.n	8006834 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8006804:	4b0e      	ldr	r3, [pc, #56]	; (8006840 <FLASH_FlushCaches+0x88>)
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	4a0d      	ldr	r2, [pc, #52]	; (8006840 <FLASH_FlushCaches+0x88>)
 800680a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800680e:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8006810:	4b0b      	ldr	r3, [pc, #44]	; (8006840 <FLASH_FlushCaches+0x88>)
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	4a0a      	ldr	r2, [pc, #40]	; (8006840 <FLASH_FlushCaches+0x88>)
 8006816:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800681a:	6013      	str	r3, [r2, #0]
 800681c:	4b08      	ldr	r3, [pc, #32]	; (8006840 <FLASH_FlushCaches+0x88>)
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	4a07      	ldr	r2, [pc, #28]	; (8006840 <FLASH_FlushCaches+0x88>)
 8006822:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006826:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8006828:	4b05      	ldr	r3, [pc, #20]	; (8006840 <FLASH_FlushCaches+0x88>)
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	4a04      	ldr	r2, [pc, #16]	; (8006840 <FLASH_FlushCaches+0x88>)
 800682e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006832:	6013      	str	r3, [r2, #0]
  }
}
 8006834:	bf00      	nop
 8006836:	46bd      	mov	sp, r7
 8006838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683c:	4770      	bx	lr
 800683e:	bf00      	nop
 8006840:	40023c00 	.word	0x40023c00

08006844 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006844:	b480      	push	{r7}
 8006846:	b089      	sub	sp, #36	; 0x24
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
 800684c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800684e:	2300      	movs	r3, #0
 8006850:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8006852:	2300      	movs	r3, #0
 8006854:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8006856:	2300      	movs	r3, #0
 8006858:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800685a:	2300      	movs	r3, #0
 800685c:	61fb      	str	r3, [r7, #28]
 800685e:	e159      	b.n	8006b14 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006860:	2201      	movs	r2, #1
 8006862:	69fb      	ldr	r3, [r7, #28]
 8006864:	fa02 f303 	lsl.w	r3, r2, r3
 8006868:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800686a:	683b      	ldr	r3, [r7, #0]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	697a      	ldr	r2, [r7, #20]
 8006870:	4013      	ands	r3, r2
 8006872:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006874:	693a      	ldr	r2, [r7, #16]
 8006876:	697b      	ldr	r3, [r7, #20]
 8006878:	429a      	cmp	r2, r3
 800687a:	f040 8148 	bne.w	8006b0e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800687e:	683b      	ldr	r3, [r7, #0]
 8006880:	685b      	ldr	r3, [r3, #4]
 8006882:	f003 0303 	and.w	r3, r3, #3
 8006886:	2b01      	cmp	r3, #1
 8006888:	d005      	beq.n	8006896 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800688a:	683b      	ldr	r3, [r7, #0]
 800688c:	685b      	ldr	r3, [r3, #4]
 800688e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006892:	2b02      	cmp	r3, #2
 8006894:	d130      	bne.n	80068f8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	689b      	ldr	r3, [r3, #8]
 800689a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800689c:	69fb      	ldr	r3, [r7, #28]
 800689e:	005b      	lsls	r3, r3, #1
 80068a0:	2203      	movs	r2, #3
 80068a2:	fa02 f303 	lsl.w	r3, r2, r3
 80068a6:	43db      	mvns	r3, r3
 80068a8:	69ba      	ldr	r2, [r7, #24]
 80068aa:	4013      	ands	r3, r2
 80068ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80068ae:	683b      	ldr	r3, [r7, #0]
 80068b0:	68da      	ldr	r2, [r3, #12]
 80068b2:	69fb      	ldr	r3, [r7, #28]
 80068b4:	005b      	lsls	r3, r3, #1
 80068b6:	fa02 f303 	lsl.w	r3, r2, r3
 80068ba:	69ba      	ldr	r2, [r7, #24]
 80068bc:	4313      	orrs	r3, r2
 80068be:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	69ba      	ldr	r2, [r7, #24]
 80068c4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	685b      	ldr	r3, [r3, #4]
 80068ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80068cc:	2201      	movs	r2, #1
 80068ce:	69fb      	ldr	r3, [r7, #28]
 80068d0:	fa02 f303 	lsl.w	r3, r2, r3
 80068d4:	43db      	mvns	r3, r3
 80068d6:	69ba      	ldr	r2, [r7, #24]
 80068d8:	4013      	ands	r3, r2
 80068da:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80068dc:	683b      	ldr	r3, [r7, #0]
 80068de:	685b      	ldr	r3, [r3, #4]
 80068e0:	091b      	lsrs	r3, r3, #4
 80068e2:	f003 0201 	and.w	r2, r3, #1
 80068e6:	69fb      	ldr	r3, [r7, #28]
 80068e8:	fa02 f303 	lsl.w	r3, r2, r3
 80068ec:	69ba      	ldr	r2, [r7, #24]
 80068ee:	4313      	orrs	r3, r2
 80068f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	69ba      	ldr	r2, [r7, #24]
 80068f6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80068f8:	683b      	ldr	r3, [r7, #0]
 80068fa:	685b      	ldr	r3, [r3, #4]
 80068fc:	f003 0303 	and.w	r3, r3, #3
 8006900:	2b03      	cmp	r3, #3
 8006902:	d017      	beq.n	8006934 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	68db      	ldr	r3, [r3, #12]
 8006908:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800690a:	69fb      	ldr	r3, [r7, #28]
 800690c:	005b      	lsls	r3, r3, #1
 800690e:	2203      	movs	r2, #3
 8006910:	fa02 f303 	lsl.w	r3, r2, r3
 8006914:	43db      	mvns	r3, r3
 8006916:	69ba      	ldr	r2, [r7, #24]
 8006918:	4013      	ands	r3, r2
 800691a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800691c:	683b      	ldr	r3, [r7, #0]
 800691e:	689a      	ldr	r2, [r3, #8]
 8006920:	69fb      	ldr	r3, [r7, #28]
 8006922:	005b      	lsls	r3, r3, #1
 8006924:	fa02 f303 	lsl.w	r3, r2, r3
 8006928:	69ba      	ldr	r2, [r7, #24]
 800692a:	4313      	orrs	r3, r2
 800692c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	69ba      	ldr	r2, [r7, #24]
 8006932:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006934:	683b      	ldr	r3, [r7, #0]
 8006936:	685b      	ldr	r3, [r3, #4]
 8006938:	f003 0303 	and.w	r3, r3, #3
 800693c:	2b02      	cmp	r3, #2
 800693e:	d123      	bne.n	8006988 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006940:	69fb      	ldr	r3, [r7, #28]
 8006942:	08da      	lsrs	r2, r3, #3
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	3208      	adds	r2, #8
 8006948:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800694c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800694e:	69fb      	ldr	r3, [r7, #28]
 8006950:	f003 0307 	and.w	r3, r3, #7
 8006954:	009b      	lsls	r3, r3, #2
 8006956:	220f      	movs	r2, #15
 8006958:	fa02 f303 	lsl.w	r3, r2, r3
 800695c:	43db      	mvns	r3, r3
 800695e:	69ba      	ldr	r2, [r7, #24]
 8006960:	4013      	ands	r3, r2
 8006962:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006964:	683b      	ldr	r3, [r7, #0]
 8006966:	691a      	ldr	r2, [r3, #16]
 8006968:	69fb      	ldr	r3, [r7, #28]
 800696a:	f003 0307 	and.w	r3, r3, #7
 800696e:	009b      	lsls	r3, r3, #2
 8006970:	fa02 f303 	lsl.w	r3, r2, r3
 8006974:	69ba      	ldr	r2, [r7, #24]
 8006976:	4313      	orrs	r3, r2
 8006978:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800697a:	69fb      	ldr	r3, [r7, #28]
 800697c:	08da      	lsrs	r2, r3, #3
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	3208      	adds	r2, #8
 8006982:	69b9      	ldr	r1, [r7, #24]
 8006984:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800698e:	69fb      	ldr	r3, [r7, #28]
 8006990:	005b      	lsls	r3, r3, #1
 8006992:	2203      	movs	r2, #3
 8006994:	fa02 f303 	lsl.w	r3, r2, r3
 8006998:	43db      	mvns	r3, r3
 800699a:	69ba      	ldr	r2, [r7, #24]
 800699c:	4013      	ands	r3, r2
 800699e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80069a0:	683b      	ldr	r3, [r7, #0]
 80069a2:	685b      	ldr	r3, [r3, #4]
 80069a4:	f003 0203 	and.w	r2, r3, #3
 80069a8:	69fb      	ldr	r3, [r7, #28]
 80069aa:	005b      	lsls	r3, r3, #1
 80069ac:	fa02 f303 	lsl.w	r3, r2, r3
 80069b0:	69ba      	ldr	r2, [r7, #24]
 80069b2:	4313      	orrs	r3, r2
 80069b4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	69ba      	ldr	r2, [r7, #24]
 80069ba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80069bc:	683b      	ldr	r3, [r7, #0]
 80069be:	685b      	ldr	r3, [r3, #4]
 80069c0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	f000 80a2 	beq.w	8006b0e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80069ca:	2300      	movs	r3, #0
 80069cc:	60fb      	str	r3, [r7, #12]
 80069ce:	4b57      	ldr	r3, [pc, #348]	; (8006b2c <HAL_GPIO_Init+0x2e8>)
 80069d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069d2:	4a56      	ldr	r2, [pc, #344]	; (8006b2c <HAL_GPIO_Init+0x2e8>)
 80069d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80069d8:	6453      	str	r3, [r2, #68]	; 0x44
 80069da:	4b54      	ldr	r3, [pc, #336]	; (8006b2c <HAL_GPIO_Init+0x2e8>)
 80069dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80069e2:	60fb      	str	r3, [r7, #12]
 80069e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80069e6:	4a52      	ldr	r2, [pc, #328]	; (8006b30 <HAL_GPIO_Init+0x2ec>)
 80069e8:	69fb      	ldr	r3, [r7, #28]
 80069ea:	089b      	lsrs	r3, r3, #2
 80069ec:	3302      	adds	r3, #2
 80069ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80069f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80069f4:	69fb      	ldr	r3, [r7, #28]
 80069f6:	f003 0303 	and.w	r3, r3, #3
 80069fa:	009b      	lsls	r3, r3, #2
 80069fc:	220f      	movs	r2, #15
 80069fe:	fa02 f303 	lsl.w	r3, r2, r3
 8006a02:	43db      	mvns	r3, r3
 8006a04:	69ba      	ldr	r2, [r7, #24]
 8006a06:	4013      	ands	r3, r2
 8006a08:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	4a49      	ldr	r2, [pc, #292]	; (8006b34 <HAL_GPIO_Init+0x2f0>)
 8006a0e:	4293      	cmp	r3, r2
 8006a10:	d019      	beq.n	8006a46 <HAL_GPIO_Init+0x202>
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	4a48      	ldr	r2, [pc, #288]	; (8006b38 <HAL_GPIO_Init+0x2f4>)
 8006a16:	4293      	cmp	r3, r2
 8006a18:	d013      	beq.n	8006a42 <HAL_GPIO_Init+0x1fe>
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	4a47      	ldr	r2, [pc, #284]	; (8006b3c <HAL_GPIO_Init+0x2f8>)
 8006a1e:	4293      	cmp	r3, r2
 8006a20:	d00d      	beq.n	8006a3e <HAL_GPIO_Init+0x1fa>
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	4a46      	ldr	r2, [pc, #280]	; (8006b40 <HAL_GPIO_Init+0x2fc>)
 8006a26:	4293      	cmp	r3, r2
 8006a28:	d007      	beq.n	8006a3a <HAL_GPIO_Init+0x1f6>
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	4a45      	ldr	r2, [pc, #276]	; (8006b44 <HAL_GPIO_Init+0x300>)
 8006a2e:	4293      	cmp	r3, r2
 8006a30:	d101      	bne.n	8006a36 <HAL_GPIO_Init+0x1f2>
 8006a32:	2304      	movs	r3, #4
 8006a34:	e008      	b.n	8006a48 <HAL_GPIO_Init+0x204>
 8006a36:	2307      	movs	r3, #7
 8006a38:	e006      	b.n	8006a48 <HAL_GPIO_Init+0x204>
 8006a3a:	2303      	movs	r3, #3
 8006a3c:	e004      	b.n	8006a48 <HAL_GPIO_Init+0x204>
 8006a3e:	2302      	movs	r3, #2
 8006a40:	e002      	b.n	8006a48 <HAL_GPIO_Init+0x204>
 8006a42:	2301      	movs	r3, #1
 8006a44:	e000      	b.n	8006a48 <HAL_GPIO_Init+0x204>
 8006a46:	2300      	movs	r3, #0
 8006a48:	69fa      	ldr	r2, [r7, #28]
 8006a4a:	f002 0203 	and.w	r2, r2, #3
 8006a4e:	0092      	lsls	r2, r2, #2
 8006a50:	4093      	lsls	r3, r2
 8006a52:	69ba      	ldr	r2, [r7, #24]
 8006a54:	4313      	orrs	r3, r2
 8006a56:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006a58:	4935      	ldr	r1, [pc, #212]	; (8006b30 <HAL_GPIO_Init+0x2ec>)
 8006a5a:	69fb      	ldr	r3, [r7, #28]
 8006a5c:	089b      	lsrs	r3, r3, #2
 8006a5e:	3302      	adds	r3, #2
 8006a60:	69ba      	ldr	r2, [r7, #24]
 8006a62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006a66:	4b38      	ldr	r3, [pc, #224]	; (8006b48 <HAL_GPIO_Init+0x304>)
 8006a68:	689b      	ldr	r3, [r3, #8]
 8006a6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006a6c:	693b      	ldr	r3, [r7, #16]
 8006a6e:	43db      	mvns	r3, r3
 8006a70:	69ba      	ldr	r2, [r7, #24]
 8006a72:	4013      	ands	r3, r2
 8006a74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006a76:	683b      	ldr	r3, [r7, #0]
 8006a78:	685b      	ldr	r3, [r3, #4]
 8006a7a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d003      	beq.n	8006a8a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8006a82:	69ba      	ldr	r2, [r7, #24]
 8006a84:	693b      	ldr	r3, [r7, #16]
 8006a86:	4313      	orrs	r3, r2
 8006a88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006a8a:	4a2f      	ldr	r2, [pc, #188]	; (8006b48 <HAL_GPIO_Init+0x304>)
 8006a8c:	69bb      	ldr	r3, [r7, #24]
 8006a8e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006a90:	4b2d      	ldr	r3, [pc, #180]	; (8006b48 <HAL_GPIO_Init+0x304>)
 8006a92:	68db      	ldr	r3, [r3, #12]
 8006a94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006a96:	693b      	ldr	r3, [r7, #16]
 8006a98:	43db      	mvns	r3, r3
 8006a9a:	69ba      	ldr	r2, [r7, #24]
 8006a9c:	4013      	ands	r3, r2
 8006a9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006aa0:	683b      	ldr	r3, [r7, #0]
 8006aa2:	685b      	ldr	r3, [r3, #4]
 8006aa4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d003      	beq.n	8006ab4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8006aac:	69ba      	ldr	r2, [r7, #24]
 8006aae:	693b      	ldr	r3, [r7, #16]
 8006ab0:	4313      	orrs	r3, r2
 8006ab2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006ab4:	4a24      	ldr	r2, [pc, #144]	; (8006b48 <HAL_GPIO_Init+0x304>)
 8006ab6:	69bb      	ldr	r3, [r7, #24]
 8006ab8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8006aba:	4b23      	ldr	r3, [pc, #140]	; (8006b48 <HAL_GPIO_Init+0x304>)
 8006abc:	685b      	ldr	r3, [r3, #4]
 8006abe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006ac0:	693b      	ldr	r3, [r7, #16]
 8006ac2:	43db      	mvns	r3, r3
 8006ac4:	69ba      	ldr	r2, [r7, #24]
 8006ac6:	4013      	ands	r3, r2
 8006ac8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006aca:	683b      	ldr	r3, [r7, #0]
 8006acc:	685b      	ldr	r3, [r3, #4]
 8006ace:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d003      	beq.n	8006ade <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8006ad6:	69ba      	ldr	r2, [r7, #24]
 8006ad8:	693b      	ldr	r3, [r7, #16]
 8006ada:	4313      	orrs	r3, r2
 8006adc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006ade:	4a1a      	ldr	r2, [pc, #104]	; (8006b48 <HAL_GPIO_Init+0x304>)
 8006ae0:	69bb      	ldr	r3, [r7, #24]
 8006ae2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006ae4:	4b18      	ldr	r3, [pc, #96]	; (8006b48 <HAL_GPIO_Init+0x304>)
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006aea:	693b      	ldr	r3, [r7, #16]
 8006aec:	43db      	mvns	r3, r3
 8006aee:	69ba      	ldr	r2, [r7, #24]
 8006af0:	4013      	ands	r3, r2
 8006af2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006af4:	683b      	ldr	r3, [r7, #0]
 8006af6:	685b      	ldr	r3, [r3, #4]
 8006af8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d003      	beq.n	8006b08 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8006b00:	69ba      	ldr	r2, [r7, #24]
 8006b02:	693b      	ldr	r3, [r7, #16]
 8006b04:	4313      	orrs	r3, r2
 8006b06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006b08:	4a0f      	ldr	r2, [pc, #60]	; (8006b48 <HAL_GPIO_Init+0x304>)
 8006b0a:	69bb      	ldr	r3, [r7, #24]
 8006b0c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006b0e:	69fb      	ldr	r3, [r7, #28]
 8006b10:	3301      	adds	r3, #1
 8006b12:	61fb      	str	r3, [r7, #28]
 8006b14:	69fb      	ldr	r3, [r7, #28]
 8006b16:	2b0f      	cmp	r3, #15
 8006b18:	f67f aea2 	bls.w	8006860 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006b1c:	bf00      	nop
 8006b1e:	bf00      	nop
 8006b20:	3724      	adds	r7, #36	; 0x24
 8006b22:	46bd      	mov	sp, r7
 8006b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b28:	4770      	bx	lr
 8006b2a:	bf00      	nop
 8006b2c:	40023800 	.word	0x40023800
 8006b30:	40013800 	.word	0x40013800
 8006b34:	40020000 	.word	0x40020000
 8006b38:	40020400 	.word	0x40020400
 8006b3c:	40020800 	.word	0x40020800
 8006b40:	40020c00 	.word	0x40020c00
 8006b44:	40021000 	.word	0x40021000
 8006b48:	40013c00 	.word	0x40013c00

08006b4c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006b4c:	b480      	push	{r7}
 8006b4e:	b085      	sub	sp, #20
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	6078      	str	r0, [r7, #4]
 8006b54:	460b      	mov	r3, r1
 8006b56:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	691a      	ldr	r2, [r3, #16]
 8006b5c:	887b      	ldrh	r3, [r7, #2]
 8006b5e:	4013      	ands	r3, r2
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d002      	beq.n	8006b6a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006b64:	2301      	movs	r3, #1
 8006b66:	73fb      	strb	r3, [r7, #15]
 8006b68:	e001      	b.n	8006b6e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006b6a:	2300      	movs	r3, #0
 8006b6c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006b6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b70:	4618      	mov	r0, r3
 8006b72:	3714      	adds	r7, #20
 8006b74:	46bd      	mov	sp, r7
 8006b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7a:	4770      	bx	lr

08006b7c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006b7c:	b480      	push	{r7}
 8006b7e:	b083      	sub	sp, #12
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	6078      	str	r0, [r7, #4]
 8006b84:	460b      	mov	r3, r1
 8006b86:	807b      	strh	r3, [r7, #2]
 8006b88:	4613      	mov	r3, r2
 8006b8a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006b8c:	787b      	ldrb	r3, [r7, #1]
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d003      	beq.n	8006b9a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006b92:	887a      	ldrh	r2, [r7, #2]
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006b98:	e003      	b.n	8006ba2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006b9a:	887b      	ldrh	r3, [r7, #2]
 8006b9c:	041a      	lsls	r2, r3, #16
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	619a      	str	r2, [r3, #24]
}
 8006ba2:	bf00      	nop
 8006ba4:	370c      	adds	r7, #12
 8006ba6:	46bd      	mov	sp, r7
 8006ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bac:	4770      	bx	lr

08006bae <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006bae:	b480      	push	{r7}
 8006bb0:	b085      	sub	sp, #20
 8006bb2:	af00      	add	r7, sp, #0
 8006bb4:	6078      	str	r0, [r7, #4]
 8006bb6:	460b      	mov	r3, r1
 8006bb8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	695b      	ldr	r3, [r3, #20]
 8006bbe:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006bc0:	887a      	ldrh	r2, [r7, #2]
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	4013      	ands	r3, r2
 8006bc6:	041a      	lsls	r2, r3, #16
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	43d9      	mvns	r1, r3
 8006bcc:	887b      	ldrh	r3, [r7, #2]
 8006bce:	400b      	ands	r3, r1
 8006bd0:	431a      	orrs	r2, r3
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	619a      	str	r2, [r3, #24]
}
 8006bd6:	bf00      	nop
 8006bd8:	3714      	adds	r7, #20
 8006bda:	46bd      	mov	sp, r7
 8006bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be0:	4770      	bx	lr

08006be2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8006be2:	b580      	push	{r7, lr}
 8006be4:	b086      	sub	sp, #24
 8006be6:	af02      	add	r7, sp, #8
 8006be8:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d101      	bne.n	8006bf4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8006bf0:	2301      	movs	r3, #1
 8006bf2:	e101      	b.n	8006df8 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 8006c00:	b2db      	uxtb	r3, r3
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d106      	bne.n	8006c14 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	2200      	movs	r2, #0
 8006c0a:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006c0e:	6878      	ldr	r0, [r7, #4]
 8006c10:	f00c f9f4 	bl	8012ffc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	2203      	movs	r2, #3
 8006c18:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8006c1c:	68bb      	ldr	r3, [r7, #8]
 8006c1e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006c22:	d102      	bne.n	8006c2a <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	2200      	movs	r2, #0
 8006c28:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	4618      	mov	r0, r3
 8006c30:	f004 fd83 	bl	800b73a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	6818      	ldr	r0, [r3, #0]
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	7c1a      	ldrb	r2, [r3, #16]
 8006c3c:	f88d 2000 	strb.w	r2, [sp]
 8006c40:	3304      	adds	r3, #4
 8006c42:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006c44:	f004 fc62 	bl	800b50c <USB_CoreInit>
 8006c48:	4603      	mov	r3, r0
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d005      	beq.n	8006c5a <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	2202      	movs	r2, #2
 8006c52:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8006c56:	2301      	movs	r3, #1
 8006c58:	e0ce      	b.n	8006df8 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	2100      	movs	r1, #0
 8006c60:	4618      	mov	r0, r3
 8006c62:	f004 fd7b 	bl	800b75c <USB_SetCurrentMode>
 8006c66:	4603      	mov	r3, r0
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d005      	beq.n	8006c78 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	2202      	movs	r2, #2
 8006c70:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8006c74:	2301      	movs	r3, #1
 8006c76:	e0bf      	b.n	8006df8 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006c78:	2300      	movs	r3, #0
 8006c7a:	73fb      	strb	r3, [r7, #15]
 8006c7c:	e04a      	b.n	8006d14 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8006c7e:	7bfa      	ldrb	r2, [r7, #15]
 8006c80:	6879      	ldr	r1, [r7, #4]
 8006c82:	4613      	mov	r3, r2
 8006c84:	00db      	lsls	r3, r3, #3
 8006c86:	4413      	add	r3, r2
 8006c88:	009b      	lsls	r3, r3, #2
 8006c8a:	440b      	add	r3, r1
 8006c8c:	3315      	adds	r3, #21
 8006c8e:	2201      	movs	r2, #1
 8006c90:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8006c92:	7bfa      	ldrb	r2, [r7, #15]
 8006c94:	6879      	ldr	r1, [r7, #4]
 8006c96:	4613      	mov	r3, r2
 8006c98:	00db      	lsls	r3, r3, #3
 8006c9a:	4413      	add	r3, r2
 8006c9c:	009b      	lsls	r3, r3, #2
 8006c9e:	440b      	add	r3, r1
 8006ca0:	3314      	adds	r3, #20
 8006ca2:	7bfa      	ldrb	r2, [r7, #15]
 8006ca4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8006ca6:	7bfa      	ldrb	r2, [r7, #15]
 8006ca8:	7bfb      	ldrb	r3, [r7, #15]
 8006caa:	b298      	uxth	r0, r3
 8006cac:	6879      	ldr	r1, [r7, #4]
 8006cae:	4613      	mov	r3, r2
 8006cb0:	00db      	lsls	r3, r3, #3
 8006cb2:	4413      	add	r3, r2
 8006cb4:	009b      	lsls	r3, r3, #2
 8006cb6:	440b      	add	r3, r1
 8006cb8:	332e      	adds	r3, #46	; 0x2e
 8006cba:	4602      	mov	r2, r0
 8006cbc:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8006cbe:	7bfa      	ldrb	r2, [r7, #15]
 8006cc0:	6879      	ldr	r1, [r7, #4]
 8006cc2:	4613      	mov	r3, r2
 8006cc4:	00db      	lsls	r3, r3, #3
 8006cc6:	4413      	add	r3, r2
 8006cc8:	009b      	lsls	r3, r3, #2
 8006cca:	440b      	add	r3, r1
 8006ccc:	3318      	adds	r3, #24
 8006cce:	2200      	movs	r2, #0
 8006cd0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8006cd2:	7bfa      	ldrb	r2, [r7, #15]
 8006cd4:	6879      	ldr	r1, [r7, #4]
 8006cd6:	4613      	mov	r3, r2
 8006cd8:	00db      	lsls	r3, r3, #3
 8006cda:	4413      	add	r3, r2
 8006cdc:	009b      	lsls	r3, r3, #2
 8006cde:	440b      	add	r3, r1
 8006ce0:	331c      	adds	r3, #28
 8006ce2:	2200      	movs	r2, #0
 8006ce4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8006ce6:	7bfa      	ldrb	r2, [r7, #15]
 8006ce8:	6879      	ldr	r1, [r7, #4]
 8006cea:	4613      	mov	r3, r2
 8006cec:	00db      	lsls	r3, r3, #3
 8006cee:	4413      	add	r3, r2
 8006cf0:	009b      	lsls	r3, r3, #2
 8006cf2:	440b      	add	r3, r1
 8006cf4:	3320      	adds	r3, #32
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8006cfa:	7bfa      	ldrb	r2, [r7, #15]
 8006cfc:	6879      	ldr	r1, [r7, #4]
 8006cfe:	4613      	mov	r3, r2
 8006d00:	00db      	lsls	r3, r3, #3
 8006d02:	4413      	add	r3, r2
 8006d04:	009b      	lsls	r3, r3, #2
 8006d06:	440b      	add	r3, r1
 8006d08:	3324      	adds	r3, #36	; 0x24
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006d0e:	7bfb      	ldrb	r3, [r7, #15]
 8006d10:	3301      	adds	r3, #1
 8006d12:	73fb      	strb	r3, [r7, #15]
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	791b      	ldrb	r3, [r3, #4]
 8006d18:	7bfa      	ldrb	r2, [r7, #15]
 8006d1a:	429a      	cmp	r2, r3
 8006d1c:	d3af      	bcc.n	8006c7e <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006d1e:	2300      	movs	r3, #0
 8006d20:	73fb      	strb	r3, [r7, #15]
 8006d22:	e044      	b.n	8006dae <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8006d24:	7bfa      	ldrb	r2, [r7, #15]
 8006d26:	6879      	ldr	r1, [r7, #4]
 8006d28:	4613      	mov	r3, r2
 8006d2a:	00db      	lsls	r3, r3, #3
 8006d2c:	4413      	add	r3, r2
 8006d2e:	009b      	lsls	r3, r3, #2
 8006d30:	440b      	add	r3, r1
 8006d32:	f203 2355 	addw	r3, r3, #597	; 0x255
 8006d36:	2200      	movs	r2, #0
 8006d38:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8006d3a:	7bfa      	ldrb	r2, [r7, #15]
 8006d3c:	6879      	ldr	r1, [r7, #4]
 8006d3e:	4613      	mov	r3, r2
 8006d40:	00db      	lsls	r3, r3, #3
 8006d42:	4413      	add	r3, r2
 8006d44:	009b      	lsls	r3, r3, #2
 8006d46:	440b      	add	r3, r1
 8006d48:	f503 7315 	add.w	r3, r3, #596	; 0x254
 8006d4c:	7bfa      	ldrb	r2, [r7, #15]
 8006d4e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8006d50:	7bfa      	ldrb	r2, [r7, #15]
 8006d52:	6879      	ldr	r1, [r7, #4]
 8006d54:	4613      	mov	r3, r2
 8006d56:	00db      	lsls	r3, r3, #3
 8006d58:	4413      	add	r3, r2
 8006d5a:	009b      	lsls	r3, r3, #2
 8006d5c:	440b      	add	r3, r1
 8006d5e:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8006d62:	2200      	movs	r2, #0
 8006d64:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8006d66:	7bfa      	ldrb	r2, [r7, #15]
 8006d68:	6879      	ldr	r1, [r7, #4]
 8006d6a:	4613      	mov	r3, r2
 8006d6c:	00db      	lsls	r3, r3, #3
 8006d6e:	4413      	add	r3, r2
 8006d70:	009b      	lsls	r3, r3, #2
 8006d72:	440b      	add	r3, r1
 8006d74:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 8006d78:	2200      	movs	r2, #0
 8006d7a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8006d7c:	7bfa      	ldrb	r2, [r7, #15]
 8006d7e:	6879      	ldr	r1, [r7, #4]
 8006d80:	4613      	mov	r3, r2
 8006d82:	00db      	lsls	r3, r3, #3
 8006d84:	4413      	add	r3, r2
 8006d86:	009b      	lsls	r3, r3, #2
 8006d88:	440b      	add	r3, r1
 8006d8a:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8006d8e:	2200      	movs	r2, #0
 8006d90:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8006d92:	7bfa      	ldrb	r2, [r7, #15]
 8006d94:	6879      	ldr	r1, [r7, #4]
 8006d96:	4613      	mov	r3, r2
 8006d98:	00db      	lsls	r3, r3, #3
 8006d9a:	4413      	add	r3, r2
 8006d9c:	009b      	lsls	r3, r3, #2
 8006d9e:	440b      	add	r3, r1
 8006da0:	f503 7319 	add.w	r3, r3, #612	; 0x264
 8006da4:	2200      	movs	r2, #0
 8006da6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006da8:	7bfb      	ldrb	r3, [r7, #15]
 8006daa:	3301      	adds	r3, #1
 8006dac:	73fb      	strb	r3, [r7, #15]
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	791b      	ldrb	r3, [r3, #4]
 8006db2:	7bfa      	ldrb	r2, [r7, #15]
 8006db4:	429a      	cmp	r2, r3
 8006db6:	d3b5      	bcc.n	8006d24 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	6818      	ldr	r0, [r3, #0]
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	7c1a      	ldrb	r2, [r3, #16]
 8006dc0:	f88d 2000 	strb.w	r2, [sp]
 8006dc4:	3304      	adds	r3, #4
 8006dc6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006dc8:	f004 fd14 	bl	800b7f4 <USB_DevInit>
 8006dcc:	4603      	mov	r3, r0
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d005      	beq.n	8006dde <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	2202      	movs	r2, #2
 8006dd6:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8006dda:	2301      	movs	r3, #1
 8006ddc:	e00c      	b.n	8006df8 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	2200      	movs	r2, #0
 8006de2:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	2201      	movs	r2, #1
 8006de8:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	4618      	mov	r0, r3
 8006df2:	f005 fd58 	bl	800c8a6 <USB_DevDisconnect>

  return HAL_OK;
 8006df6:	2300      	movs	r3, #0
}
 8006df8:	4618      	mov	r0, r3
 8006dfa:	3710      	adds	r7, #16
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	bd80      	pop	{r7, pc}

08006e00 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b084      	sub	sp, #16
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8006e14:	2b01      	cmp	r3, #1
 8006e16:	d101      	bne.n	8006e1c <HAL_PCD_Start+0x1c>
 8006e18:	2302      	movs	r3, #2
 8006e1a:	e022      	b.n	8006e62 <HAL_PCD_Start+0x62>
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	2201      	movs	r2, #1
 8006e20:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	68db      	ldr	r3, [r3, #12]
 8006e28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d009      	beq.n	8006e44 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8006e34:	2b01      	cmp	r3, #1
 8006e36:	d105      	bne.n	8006e44 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e3c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	4618      	mov	r0, r3
 8006e4a:	f004 fc65 	bl	800b718 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	4618      	mov	r0, r3
 8006e54:	f005 fd06 	bl	800c864 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	2200      	movs	r2, #0
 8006e5c:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8006e60:	2300      	movs	r3, #0
}
 8006e62:	4618      	mov	r0, r3
 8006e64:	3710      	adds	r7, #16
 8006e66:	46bd      	mov	sp, r7
 8006e68:	bd80      	pop	{r7, pc}

08006e6a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8006e6a:	b590      	push	{r4, r7, lr}
 8006e6c:	b08d      	sub	sp, #52	; 0x34
 8006e6e:	af00      	add	r7, sp, #0
 8006e70:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e78:	6a3b      	ldr	r3, [r7, #32]
 8006e7a:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	4618      	mov	r0, r3
 8006e82:	f005 fdc4 	bl	800ca0e <USB_GetMode>
 8006e86:	4603      	mov	r3, r0
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	f040 848c 	bne.w	80077a6 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	4618      	mov	r0, r3
 8006e94:	f005 fd28 	bl	800c8e8 <USB_ReadInterrupts>
 8006e98:	4603      	mov	r3, r0
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	f000 8482 	beq.w	80077a4 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8006ea0:	69fb      	ldr	r3, [r7, #28]
 8006ea2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ea6:	689b      	ldr	r3, [r3, #8]
 8006ea8:	0a1b      	lsrs	r3, r3, #8
 8006eaa:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	f8c3 24d4 	str.w	r2, [r3, #1236]	; 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	4618      	mov	r0, r3
 8006eba:	f005 fd15 	bl	800c8e8 <USB_ReadInterrupts>
 8006ebe:	4603      	mov	r3, r0
 8006ec0:	f003 0302 	and.w	r3, r3, #2
 8006ec4:	2b02      	cmp	r3, #2
 8006ec6:	d107      	bne.n	8006ed8 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	695a      	ldr	r2, [r3, #20]
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	f002 0202 	and.w	r2, r2, #2
 8006ed6:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	4618      	mov	r0, r3
 8006ede:	f005 fd03 	bl	800c8e8 <USB_ReadInterrupts>
 8006ee2:	4603      	mov	r3, r0
 8006ee4:	f003 0310 	and.w	r3, r3, #16
 8006ee8:	2b10      	cmp	r3, #16
 8006eea:	d161      	bne.n	8006fb0 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	699a      	ldr	r2, [r3, #24]
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	f022 0210 	bic.w	r2, r2, #16
 8006efa:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8006efc:	6a3b      	ldr	r3, [r7, #32]
 8006efe:	6a1b      	ldr	r3, [r3, #32]
 8006f00:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8006f02:	69bb      	ldr	r3, [r7, #24]
 8006f04:	f003 020f 	and.w	r2, r3, #15
 8006f08:	4613      	mov	r3, r2
 8006f0a:	00db      	lsls	r3, r3, #3
 8006f0c:	4413      	add	r3, r2
 8006f0e:	009b      	lsls	r3, r3, #2
 8006f10:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8006f14:	687a      	ldr	r2, [r7, #4]
 8006f16:	4413      	add	r3, r2
 8006f18:	3304      	adds	r3, #4
 8006f1a:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8006f1c:	69bb      	ldr	r3, [r7, #24]
 8006f1e:	0c5b      	lsrs	r3, r3, #17
 8006f20:	f003 030f 	and.w	r3, r3, #15
 8006f24:	2b02      	cmp	r3, #2
 8006f26:	d124      	bne.n	8006f72 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8006f28:	69ba      	ldr	r2, [r7, #24]
 8006f2a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8006f2e:	4013      	ands	r3, r2
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d035      	beq.n	8006fa0 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8006f34:	697b      	ldr	r3, [r7, #20]
 8006f36:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8006f38:	69bb      	ldr	r3, [r7, #24]
 8006f3a:	091b      	lsrs	r3, r3, #4
 8006f3c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8006f3e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006f42:	b29b      	uxth	r3, r3
 8006f44:	461a      	mov	r2, r3
 8006f46:	6a38      	ldr	r0, [r7, #32]
 8006f48:	f005 fb3a 	bl	800c5c0 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006f4c:	697b      	ldr	r3, [r7, #20]
 8006f4e:	68da      	ldr	r2, [r3, #12]
 8006f50:	69bb      	ldr	r3, [r7, #24]
 8006f52:	091b      	lsrs	r3, r3, #4
 8006f54:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006f58:	441a      	add	r2, r3
 8006f5a:	697b      	ldr	r3, [r7, #20]
 8006f5c:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006f5e:	697b      	ldr	r3, [r7, #20]
 8006f60:	695a      	ldr	r2, [r3, #20]
 8006f62:	69bb      	ldr	r3, [r7, #24]
 8006f64:	091b      	lsrs	r3, r3, #4
 8006f66:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006f6a:	441a      	add	r2, r3
 8006f6c:	697b      	ldr	r3, [r7, #20]
 8006f6e:	615a      	str	r2, [r3, #20]
 8006f70:	e016      	b.n	8006fa0 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8006f72:	69bb      	ldr	r3, [r7, #24]
 8006f74:	0c5b      	lsrs	r3, r3, #17
 8006f76:	f003 030f 	and.w	r3, r3, #15
 8006f7a:	2b06      	cmp	r3, #6
 8006f7c:	d110      	bne.n	8006fa0 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8006f84:	2208      	movs	r2, #8
 8006f86:	4619      	mov	r1, r3
 8006f88:	6a38      	ldr	r0, [r7, #32]
 8006f8a:	f005 fb19 	bl	800c5c0 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006f8e:	697b      	ldr	r3, [r7, #20]
 8006f90:	695a      	ldr	r2, [r3, #20]
 8006f92:	69bb      	ldr	r3, [r7, #24]
 8006f94:	091b      	lsrs	r3, r3, #4
 8006f96:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006f9a:	441a      	add	r2, r3
 8006f9c:	697b      	ldr	r3, [r7, #20]
 8006f9e:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	699a      	ldr	r2, [r3, #24]
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	f042 0210 	orr.w	r2, r2, #16
 8006fae:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	4618      	mov	r0, r3
 8006fb6:	f005 fc97 	bl	800c8e8 <USB_ReadInterrupts>
 8006fba:	4603      	mov	r3, r0
 8006fbc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006fc0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006fc4:	f040 80a7 	bne.w	8007116 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8006fc8:	2300      	movs	r3, #0
 8006fca:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	4618      	mov	r0, r3
 8006fd2:	f005 fc9c 	bl	800c90e <USB_ReadDevAllOutEpInterrupt>
 8006fd6:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8006fd8:	e099      	b.n	800710e <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8006fda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fdc:	f003 0301 	and.w	r3, r3, #1
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	f000 808e 	beq.w	8007102 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006fec:	b2d2      	uxtb	r2, r2
 8006fee:	4611      	mov	r1, r2
 8006ff0:	4618      	mov	r0, r3
 8006ff2:	f005 fcc0 	bl	800c976 <USB_ReadDevOutEPInterrupt>
 8006ff6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8006ff8:	693b      	ldr	r3, [r7, #16]
 8006ffa:	f003 0301 	and.w	r3, r3, #1
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d00c      	beq.n	800701c <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8007002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007004:	015a      	lsls	r2, r3, #5
 8007006:	69fb      	ldr	r3, [r7, #28]
 8007008:	4413      	add	r3, r2
 800700a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800700e:	461a      	mov	r2, r3
 8007010:	2301      	movs	r3, #1
 8007012:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8007014:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007016:	6878      	ldr	r0, [r7, #4]
 8007018:	f000 fea2 	bl	8007d60 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800701c:	693b      	ldr	r3, [r7, #16]
 800701e:	f003 0308 	and.w	r3, r3, #8
 8007022:	2b00      	cmp	r3, #0
 8007024:	d00c      	beq.n	8007040 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8007026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007028:	015a      	lsls	r2, r3, #5
 800702a:	69fb      	ldr	r3, [r7, #28]
 800702c:	4413      	add	r3, r2
 800702e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007032:	461a      	mov	r2, r3
 8007034:	2308      	movs	r3, #8
 8007036:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8007038:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800703a:	6878      	ldr	r0, [r7, #4]
 800703c:	f000 ff78 	bl	8007f30 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8007040:	693b      	ldr	r3, [r7, #16]
 8007042:	f003 0310 	and.w	r3, r3, #16
 8007046:	2b00      	cmp	r3, #0
 8007048:	d008      	beq.n	800705c <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800704a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800704c:	015a      	lsls	r2, r3, #5
 800704e:	69fb      	ldr	r3, [r7, #28]
 8007050:	4413      	add	r3, r2
 8007052:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007056:	461a      	mov	r2, r3
 8007058:	2310      	movs	r3, #16
 800705a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800705c:	693b      	ldr	r3, [r7, #16]
 800705e:	f003 0302 	and.w	r3, r3, #2
 8007062:	2b00      	cmp	r3, #0
 8007064:	d030      	beq.n	80070c8 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8007066:	6a3b      	ldr	r3, [r7, #32]
 8007068:	695b      	ldr	r3, [r3, #20]
 800706a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800706e:	2b80      	cmp	r3, #128	; 0x80
 8007070:	d109      	bne.n	8007086 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8007072:	69fb      	ldr	r3, [r7, #28]
 8007074:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007078:	685b      	ldr	r3, [r3, #4]
 800707a:	69fa      	ldr	r2, [r7, #28]
 800707c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007080:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007084:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8007086:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007088:	4613      	mov	r3, r2
 800708a:	00db      	lsls	r3, r3, #3
 800708c:	4413      	add	r3, r2
 800708e:	009b      	lsls	r3, r3, #2
 8007090:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8007094:	687a      	ldr	r2, [r7, #4]
 8007096:	4413      	add	r3, r2
 8007098:	3304      	adds	r3, #4
 800709a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800709c:	697b      	ldr	r3, [r7, #20]
 800709e:	78db      	ldrb	r3, [r3, #3]
 80070a0:	2b01      	cmp	r3, #1
 80070a2:	d108      	bne.n	80070b6 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80070a4:	697b      	ldr	r3, [r7, #20]
 80070a6:	2200      	movs	r2, #0
 80070a8:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80070aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070ac:	b2db      	uxtb	r3, r3
 80070ae:	4619      	mov	r1, r3
 80070b0:	6878      	ldr	r0, [r7, #4]
 80070b2:	f00c f89f 	bl	80131f4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80070b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070b8:	015a      	lsls	r2, r3, #5
 80070ba:	69fb      	ldr	r3, [r7, #28]
 80070bc:	4413      	add	r3, r2
 80070be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070c2:	461a      	mov	r2, r3
 80070c4:	2302      	movs	r3, #2
 80070c6:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80070c8:	693b      	ldr	r3, [r7, #16]
 80070ca:	f003 0320 	and.w	r3, r3, #32
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d008      	beq.n	80070e4 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80070d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070d4:	015a      	lsls	r2, r3, #5
 80070d6:	69fb      	ldr	r3, [r7, #28]
 80070d8:	4413      	add	r3, r2
 80070da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070de:	461a      	mov	r2, r3
 80070e0:	2320      	movs	r3, #32
 80070e2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80070e4:	693b      	ldr	r3, [r7, #16]
 80070e6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d009      	beq.n	8007102 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80070ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070f0:	015a      	lsls	r2, r3, #5
 80070f2:	69fb      	ldr	r3, [r7, #28]
 80070f4:	4413      	add	r3, r2
 80070f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070fa:	461a      	mov	r2, r3
 80070fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007100:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8007102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007104:	3301      	adds	r3, #1
 8007106:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8007108:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800710a:	085b      	lsrs	r3, r3, #1
 800710c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800710e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007110:	2b00      	cmp	r3, #0
 8007112:	f47f af62 	bne.w	8006fda <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	4618      	mov	r0, r3
 800711c:	f005 fbe4 	bl	800c8e8 <USB_ReadInterrupts>
 8007120:	4603      	mov	r3, r0
 8007122:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007126:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800712a:	f040 80db 	bne.w	80072e4 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	4618      	mov	r0, r3
 8007134:	f005 fc05 	bl	800c942 <USB_ReadDevAllInEpInterrupt>
 8007138:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800713a:	2300      	movs	r3, #0
 800713c:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800713e:	e0cd      	b.n	80072dc <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8007140:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007142:	f003 0301 	and.w	r3, r3, #1
 8007146:	2b00      	cmp	r3, #0
 8007148:	f000 80c2 	beq.w	80072d0 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007152:	b2d2      	uxtb	r2, r2
 8007154:	4611      	mov	r1, r2
 8007156:	4618      	mov	r0, r3
 8007158:	f005 fc2b 	bl	800c9b2 <USB_ReadDevInEPInterrupt>
 800715c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800715e:	693b      	ldr	r3, [r7, #16]
 8007160:	f003 0301 	and.w	r3, r3, #1
 8007164:	2b00      	cmp	r3, #0
 8007166:	d057      	beq.n	8007218 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8007168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800716a:	f003 030f 	and.w	r3, r3, #15
 800716e:	2201      	movs	r2, #1
 8007170:	fa02 f303 	lsl.w	r3, r2, r3
 8007174:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8007176:	69fb      	ldr	r3, [r7, #28]
 8007178:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800717c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	43db      	mvns	r3, r3
 8007182:	69f9      	ldr	r1, [r7, #28]
 8007184:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007188:	4013      	ands	r3, r2
 800718a:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800718c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800718e:	015a      	lsls	r2, r3, #5
 8007190:	69fb      	ldr	r3, [r7, #28]
 8007192:	4413      	add	r3, r2
 8007194:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007198:	461a      	mov	r2, r3
 800719a:	2301      	movs	r3, #1
 800719c:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	799b      	ldrb	r3, [r3, #6]
 80071a2:	2b01      	cmp	r3, #1
 80071a4:	d132      	bne.n	800720c <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80071a6:	6879      	ldr	r1, [r7, #4]
 80071a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80071aa:	4613      	mov	r3, r2
 80071ac:	00db      	lsls	r3, r3, #3
 80071ae:	4413      	add	r3, r2
 80071b0:	009b      	lsls	r3, r3, #2
 80071b2:	440b      	add	r3, r1
 80071b4:	3320      	adds	r3, #32
 80071b6:	6819      	ldr	r1, [r3, #0]
 80071b8:	6878      	ldr	r0, [r7, #4]
 80071ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80071bc:	4613      	mov	r3, r2
 80071be:	00db      	lsls	r3, r3, #3
 80071c0:	4413      	add	r3, r2
 80071c2:	009b      	lsls	r3, r3, #2
 80071c4:	4403      	add	r3, r0
 80071c6:	331c      	adds	r3, #28
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	4419      	add	r1, r3
 80071cc:	6878      	ldr	r0, [r7, #4]
 80071ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80071d0:	4613      	mov	r3, r2
 80071d2:	00db      	lsls	r3, r3, #3
 80071d4:	4413      	add	r3, r2
 80071d6:	009b      	lsls	r3, r3, #2
 80071d8:	4403      	add	r3, r0
 80071da:	3320      	adds	r3, #32
 80071dc:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80071de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d113      	bne.n	800720c <HAL_PCD_IRQHandler+0x3a2>
 80071e4:	6879      	ldr	r1, [r7, #4]
 80071e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80071e8:	4613      	mov	r3, r2
 80071ea:	00db      	lsls	r3, r3, #3
 80071ec:	4413      	add	r3, r2
 80071ee:	009b      	lsls	r3, r3, #2
 80071f0:	440b      	add	r3, r1
 80071f2:	3324      	adds	r3, #36	; 0x24
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d108      	bne.n	800720c <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	6818      	ldr	r0, [r3, #0]
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8007204:	461a      	mov	r2, r3
 8007206:	2101      	movs	r1, #1
 8007208:	f005 fc32 	bl	800ca70 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800720c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800720e:	b2db      	uxtb	r3, r3
 8007210:	4619      	mov	r1, r3
 8007212:	6878      	ldr	r0, [r7, #4]
 8007214:	f00b ff73 	bl	80130fe <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8007218:	693b      	ldr	r3, [r7, #16]
 800721a:	f003 0308 	and.w	r3, r3, #8
 800721e:	2b00      	cmp	r3, #0
 8007220:	d008      	beq.n	8007234 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8007222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007224:	015a      	lsls	r2, r3, #5
 8007226:	69fb      	ldr	r3, [r7, #28]
 8007228:	4413      	add	r3, r2
 800722a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800722e:	461a      	mov	r2, r3
 8007230:	2308      	movs	r3, #8
 8007232:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8007234:	693b      	ldr	r3, [r7, #16]
 8007236:	f003 0310 	and.w	r3, r3, #16
 800723a:	2b00      	cmp	r3, #0
 800723c:	d008      	beq.n	8007250 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800723e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007240:	015a      	lsls	r2, r3, #5
 8007242:	69fb      	ldr	r3, [r7, #28]
 8007244:	4413      	add	r3, r2
 8007246:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800724a:	461a      	mov	r2, r3
 800724c:	2310      	movs	r3, #16
 800724e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8007250:	693b      	ldr	r3, [r7, #16]
 8007252:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007256:	2b00      	cmp	r3, #0
 8007258:	d008      	beq.n	800726c <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800725a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800725c:	015a      	lsls	r2, r3, #5
 800725e:	69fb      	ldr	r3, [r7, #28]
 8007260:	4413      	add	r3, r2
 8007262:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007266:	461a      	mov	r2, r3
 8007268:	2340      	movs	r3, #64	; 0x40
 800726a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800726c:	693b      	ldr	r3, [r7, #16]
 800726e:	f003 0302 	and.w	r3, r3, #2
 8007272:	2b00      	cmp	r3, #0
 8007274:	d023      	beq.n	80072be <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8007276:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007278:	6a38      	ldr	r0, [r7, #32]
 800727a:	f004 fc1f 	bl	800babc <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800727e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007280:	4613      	mov	r3, r2
 8007282:	00db      	lsls	r3, r3, #3
 8007284:	4413      	add	r3, r2
 8007286:	009b      	lsls	r3, r3, #2
 8007288:	3310      	adds	r3, #16
 800728a:	687a      	ldr	r2, [r7, #4]
 800728c:	4413      	add	r3, r2
 800728e:	3304      	adds	r3, #4
 8007290:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8007292:	697b      	ldr	r3, [r7, #20]
 8007294:	78db      	ldrb	r3, [r3, #3]
 8007296:	2b01      	cmp	r3, #1
 8007298:	d108      	bne.n	80072ac <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800729a:	697b      	ldr	r3, [r7, #20]
 800729c:	2200      	movs	r2, #0
 800729e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80072a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072a2:	b2db      	uxtb	r3, r3
 80072a4:	4619      	mov	r1, r3
 80072a6:	6878      	ldr	r0, [r7, #4]
 80072a8:	f00b ffb6 	bl	8013218 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80072ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072ae:	015a      	lsls	r2, r3, #5
 80072b0:	69fb      	ldr	r3, [r7, #28]
 80072b2:	4413      	add	r3, r2
 80072b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072b8:	461a      	mov	r2, r3
 80072ba:	2302      	movs	r3, #2
 80072bc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80072be:	693b      	ldr	r3, [r7, #16]
 80072c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d003      	beq.n	80072d0 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80072c8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80072ca:	6878      	ldr	r0, [r7, #4]
 80072cc:	f000 fcbb 	bl	8007c46 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80072d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072d2:	3301      	adds	r3, #1
 80072d4:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80072d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072d8:	085b      	lsrs	r3, r3, #1
 80072da:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80072dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072de:	2b00      	cmp	r3, #0
 80072e0:	f47f af2e 	bne.w	8007140 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	4618      	mov	r0, r3
 80072ea:	f005 fafd 	bl	800c8e8 <USB_ReadInterrupts>
 80072ee:	4603      	mov	r3, r0
 80072f0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80072f4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80072f8:	d122      	bne.n	8007340 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80072fa:	69fb      	ldr	r3, [r7, #28]
 80072fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007300:	685b      	ldr	r3, [r3, #4]
 8007302:	69fa      	ldr	r2, [r7, #28]
 8007304:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007308:	f023 0301 	bic.w	r3, r3, #1
 800730c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	f893 34cc 	ldrb.w	r3, [r3, #1228]	; 0x4cc
 8007314:	2b01      	cmp	r3, #1
 8007316:	d108      	bne.n	800732a <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	2200      	movs	r2, #0
 800731c:	f883 24cc 	strb.w	r2, [r3, #1228]	; 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8007320:	2100      	movs	r1, #0
 8007322:	6878      	ldr	r0, [r7, #4]
 8007324:	f000 fea2 	bl	800806c <HAL_PCDEx_LPM_Callback>
 8007328:	e002      	b.n	8007330 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800732a:	6878      	ldr	r0, [r7, #4]
 800732c:	f00b ff54 	bl	80131d8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	695a      	ldr	r2, [r3, #20]
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800733e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	4618      	mov	r0, r3
 8007346:	f005 facf 	bl	800c8e8 <USB_ReadInterrupts>
 800734a:	4603      	mov	r3, r0
 800734c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007350:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007354:	d112      	bne.n	800737c <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8007356:	69fb      	ldr	r3, [r7, #28]
 8007358:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800735c:	689b      	ldr	r3, [r3, #8]
 800735e:	f003 0301 	and.w	r3, r3, #1
 8007362:	2b01      	cmp	r3, #1
 8007364:	d102      	bne.n	800736c <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8007366:	6878      	ldr	r0, [r7, #4]
 8007368:	f00b ff10 	bl	801318c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	695a      	ldr	r2, [r3, #20]
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800737a:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	4618      	mov	r0, r3
 8007382:	f005 fab1 	bl	800c8e8 <USB_ReadInterrupts>
 8007386:	4603      	mov	r3, r0
 8007388:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800738c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007390:	f040 80b7 	bne.w	8007502 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8007394:	69fb      	ldr	r3, [r7, #28]
 8007396:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800739a:	685b      	ldr	r3, [r3, #4]
 800739c:	69fa      	ldr	r2, [r7, #28]
 800739e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80073a2:	f023 0301 	bic.w	r3, r3, #1
 80073a6:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	2110      	movs	r1, #16
 80073ae:	4618      	mov	r0, r3
 80073b0:	f004 fb84 	bl	800babc <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80073b4:	2300      	movs	r3, #0
 80073b6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80073b8:	e046      	b.n	8007448 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80073ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073bc:	015a      	lsls	r2, r3, #5
 80073be:	69fb      	ldr	r3, [r7, #28]
 80073c0:	4413      	add	r3, r2
 80073c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073c6:	461a      	mov	r2, r3
 80073c8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80073cc:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80073ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073d0:	015a      	lsls	r2, r3, #5
 80073d2:	69fb      	ldr	r3, [r7, #28]
 80073d4:	4413      	add	r3, r2
 80073d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80073de:	0151      	lsls	r1, r2, #5
 80073e0:	69fa      	ldr	r2, [r7, #28]
 80073e2:	440a      	add	r2, r1
 80073e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80073e8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80073ec:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80073ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073f0:	015a      	lsls	r2, r3, #5
 80073f2:	69fb      	ldr	r3, [r7, #28]
 80073f4:	4413      	add	r3, r2
 80073f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073fa:	461a      	mov	r2, r3
 80073fc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007400:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007402:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007404:	015a      	lsls	r2, r3, #5
 8007406:	69fb      	ldr	r3, [r7, #28]
 8007408:	4413      	add	r3, r2
 800740a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007412:	0151      	lsls	r1, r2, #5
 8007414:	69fa      	ldr	r2, [r7, #28]
 8007416:	440a      	add	r2, r1
 8007418:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800741c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007420:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007422:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007424:	015a      	lsls	r2, r3, #5
 8007426:	69fb      	ldr	r3, [r7, #28]
 8007428:	4413      	add	r3, r2
 800742a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007432:	0151      	lsls	r1, r2, #5
 8007434:	69fa      	ldr	r2, [r7, #28]
 8007436:	440a      	add	r2, r1
 8007438:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800743c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007440:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007442:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007444:	3301      	adds	r3, #1
 8007446:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	791b      	ldrb	r3, [r3, #4]
 800744c:	461a      	mov	r2, r3
 800744e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007450:	4293      	cmp	r3, r2
 8007452:	d3b2      	bcc.n	80073ba <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8007454:	69fb      	ldr	r3, [r7, #28]
 8007456:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800745a:	69db      	ldr	r3, [r3, #28]
 800745c:	69fa      	ldr	r2, [r7, #28]
 800745e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007462:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8007466:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	7bdb      	ldrb	r3, [r3, #15]
 800746c:	2b00      	cmp	r3, #0
 800746e:	d016      	beq.n	800749e <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8007470:	69fb      	ldr	r3, [r7, #28]
 8007472:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007476:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800747a:	69fa      	ldr	r2, [r7, #28]
 800747c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007480:	f043 030b 	orr.w	r3, r3, #11
 8007484:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8007488:	69fb      	ldr	r3, [r7, #28]
 800748a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800748e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007490:	69fa      	ldr	r2, [r7, #28]
 8007492:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007496:	f043 030b 	orr.w	r3, r3, #11
 800749a:	6453      	str	r3, [r2, #68]	; 0x44
 800749c:	e015      	b.n	80074ca <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800749e:	69fb      	ldr	r3, [r7, #28]
 80074a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074a4:	695b      	ldr	r3, [r3, #20]
 80074a6:	69fa      	ldr	r2, [r7, #28]
 80074a8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80074ac:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80074b0:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80074b4:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80074b6:	69fb      	ldr	r3, [r7, #28]
 80074b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074bc:	691b      	ldr	r3, [r3, #16]
 80074be:	69fa      	ldr	r2, [r7, #28]
 80074c0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80074c4:	f043 030b 	orr.w	r3, r3, #11
 80074c8:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80074ca:	69fb      	ldr	r3, [r7, #28]
 80074cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	69fa      	ldr	r2, [r7, #28]
 80074d4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80074d8:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80074dc:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	6818      	ldr	r0, [r3, #0]
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	f203 439c 	addw	r3, r3, #1180	; 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80074ec:	461a      	mov	r2, r3
 80074ee:	f005 fabf 	bl	800ca70 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	695a      	ldr	r2, [r3, #20]
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8007500:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	4618      	mov	r0, r3
 8007508:	f005 f9ee 	bl	800c8e8 <USB_ReadInterrupts>
 800750c:	4603      	mov	r3, r0
 800750e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007512:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007516:	d123      	bne.n	8007560 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	4618      	mov	r0, r3
 800751e:	f005 fa84 	bl	800ca2a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	4618      	mov	r0, r3
 8007528:	f004 fb41 	bl	800bbae <USB_GetDevSpeed>
 800752c:	4603      	mov	r3, r0
 800752e:	461a      	mov	r2, r3
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681c      	ldr	r4, [r3, #0]
 8007538:	f001 f9c8 	bl	80088cc <HAL_RCC_GetHCLKFreq>
 800753c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8007542:	461a      	mov	r2, r3
 8007544:	4620      	mov	r0, r4
 8007546:	f004 f845 	bl	800b5d4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800754a:	6878      	ldr	r0, [r7, #4]
 800754c:	f00b fdff 	bl	801314e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	695a      	ldr	r2, [r3, #20]
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800755e:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	4618      	mov	r0, r3
 8007566:	f005 f9bf 	bl	800c8e8 <USB_ReadInterrupts>
 800756a:	4603      	mov	r3, r0
 800756c:	f003 0308 	and.w	r3, r3, #8
 8007570:	2b08      	cmp	r3, #8
 8007572:	d10a      	bne.n	800758a <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8007574:	6878      	ldr	r0, [r7, #4]
 8007576:	f00b fddc 	bl	8013132 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	695a      	ldr	r2, [r3, #20]
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	f002 0208 	and.w	r2, r2, #8
 8007588:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	4618      	mov	r0, r3
 8007590:	f005 f9aa 	bl	800c8e8 <USB_ReadInterrupts>
 8007594:	4603      	mov	r3, r0
 8007596:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800759a:	2b80      	cmp	r3, #128	; 0x80
 800759c:	d123      	bne.n	80075e6 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800759e:	6a3b      	ldr	r3, [r7, #32]
 80075a0:	699b      	ldr	r3, [r3, #24]
 80075a2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80075a6:	6a3b      	ldr	r3, [r7, #32]
 80075a8:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80075aa:	2301      	movs	r3, #1
 80075ac:	627b      	str	r3, [r7, #36]	; 0x24
 80075ae:	e014      	b.n	80075da <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80075b0:	6879      	ldr	r1, [r7, #4]
 80075b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80075b4:	4613      	mov	r3, r2
 80075b6:	00db      	lsls	r3, r3, #3
 80075b8:	4413      	add	r3, r2
 80075ba:	009b      	lsls	r3, r3, #2
 80075bc:	440b      	add	r3, r1
 80075be:	f203 2357 	addw	r3, r3, #599	; 0x257
 80075c2:	781b      	ldrb	r3, [r3, #0]
 80075c4:	2b01      	cmp	r3, #1
 80075c6:	d105      	bne.n	80075d4 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80075c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075ca:	b2db      	uxtb	r3, r3
 80075cc:	4619      	mov	r1, r3
 80075ce:	6878      	ldr	r0, [r7, #4]
 80075d0:	f000 fb08 	bl	8007be4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80075d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075d6:	3301      	adds	r3, #1
 80075d8:	627b      	str	r3, [r7, #36]	; 0x24
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	791b      	ldrb	r3, [r3, #4]
 80075de:	461a      	mov	r2, r3
 80075e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075e2:	4293      	cmp	r3, r2
 80075e4:	d3e4      	bcc.n	80075b0 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	4618      	mov	r0, r3
 80075ec:	f005 f97c 	bl	800c8e8 <USB_ReadInterrupts>
 80075f0:	4603      	mov	r3, r0
 80075f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80075f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80075fa:	d13c      	bne.n	8007676 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80075fc:	2301      	movs	r3, #1
 80075fe:	627b      	str	r3, [r7, #36]	; 0x24
 8007600:	e02b      	b.n	800765a <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8007602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007604:	015a      	lsls	r2, r3, #5
 8007606:	69fb      	ldr	r3, [r7, #28]
 8007608:	4413      	add	r3, r2
 800760a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8007612:	6879      	ldr	r1, [r7, #4]
 8007614:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007616:	4613      	mov	r3, r2
 8007618:	00db      	lsls	r3, r3, #3
 800761a:	4413      	add	r3, r2
 800761c:	009b      	lsls	r3, r3, #2
 800761e:	440b      	add	r3, r1
 8007620:	3318      	adds	r3, #24
 8007622:	781b      	ldrb	r3, [r3, #0]
 8007624:	2b01      	cmp	r3, #1
 8007626:	d115      	bne.n	8007654 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8007628:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800762a:	2b00      	cmp	r3, #0
 800762c:	da12      	bge.n	8007654 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800762e:	6879      	ldr	r1, [r7, #4]
 8007630:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007632:	4613      	mov	r3, r2
 8007634:	00db      	lsls	r3, r3, #3
 8007636:	4413      	add	r3, r2
 8007638:	009b      	lsls	r3, r3, #2
 800763a:	440b      	add	r3, r1
 800763c:	3317      	adds	r3, #23
 800763e:	2201      	movs	r2, #1
 8007640:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8007642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007644:	b2db      	uxtb	r3, r3
 8007646:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800764a:	b2db      	uxtb	r3, r3
 800764c:	4619      	mov	r1, r3
 800764e:	6878      	ldr	r0, [r7, #4]
 8007650:	f000 fac8 	bl	8007be4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007656:	3301      	adds	r3, #1
 8007658:	627b      	str	r3, [r7, #36]	; 0x24
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	791b      	ldrb	r3, [r3, #4]
 800765e:	461a      	mov	r2, r3
 8007660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007662:	4293      	cmp	r3, r2
 8007664:	d3cd      	bcc.n	8007602 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	695a      	ldr	r2, [r3, #20]
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8007674:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	4618      	mov	r0, r3
 800767c:	f005 f934 	bl	800c8e8 <USB_ReadInterrupts>
 8007680:	4603      	mov	r3, r0
 8007682:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007686:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800768a:	d156      	bne.n	800773a <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800768c:	2301      	movs	r3, #1
 800768e:	627b      	str	r3, [r7, #36]	; 0x24
 8007690:	e045      	b.n	800771e <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8007692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007694:	015a      	lsls	r2, r3, #5
 8007696:	69fb      	ldr	r3, [r7, #28]
 8007698:	4413      	add	r3, r2
 800769a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80076a2:	6879      	ldr	r1, [r7, #4]
 80076a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80076a6:	4613      	mov	r3, r2
 80076a8:	00db      	lsls	r3, r3, #3
 80076aa:	4413      	add	r3, r2
 80076ac:	009b      	lsls	r3, r3, #2
 80076ae:	440b      	add	r3, r1
 80076b0:	f503 7316 	add.w	r3, r3, #600	; 0x258
 80076b4:	781b      	ldrb	r3, [r3, #0]
 80076b6:	2b01      	cmp	r3, #1
 80076b8:	d12e      	bne.n	8007718 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80076ba:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80076bc:	2b00      	cmp	r3, #0
 80076be:	da2b      	bge.n	8007718 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80076c0:	69bb      	ldr	r3, [r7, #24]
 80076c2:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 80076cc:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80076d0:	429a      	cmp	r2, r3
 80076d2:	d121      	bne.n	8007718 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80076d4:	6879      	ldr	r1, [r7, #4]
 80076d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80076d8:	4613      	mov	r3, r2
 80076da:	00db      	lsls	r3, r3, #3
 80076dc:	4413      	add	r3, r2
 80076de:	009b      	lsls	r3, r3, #2
 80076e0:	440b      	add	r3, r1
 80076e2:	f203 2357 	addw	r3, r3, #599	; 0x257
 80076e6:	2201      	movs	r2, #1
 80076e8:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80076ea:	6a3b      	ldr	r3, [r7, #32]
 80076ec:	699b      	ldr	r3, [r3, #24]
 80076ee:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80076f2:	6a3b      	ldr	r3, [r7, #32]
 80076f4:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80076f6:	6a3b      	ldr	r3, [r7, #32]
 80076f8:	695b      	ldr	r3, [r3, #20]
 80076fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d10a      	bne.n	8007718 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8007702:	69fb      	ldr	r3, [r7, #28]
 8007704:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007708:	685b      	ldr	r3, [r3, #4]
 800770a:	69fa      	ldr	r2, [r7, #28]
 800770c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007710:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007714:	6053      	str	r3, [r2, #4]
            break;
 8007716:	e008      	b.n	800772a <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800771a:	3301      	adds	r3, #1
 800771c:	627b      	str	r3, [r7, #36]	; 0x24
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	791b      	ldrb	r3, [r3, #4]
 8007722:	461a      	mov	r2, r3
 8007724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007726:	4293      	cmp	r3, r2
 8007728:	d3b3      	bcc.n	8007692 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	695a      	ldr	r2, [r3, #20]
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8007738:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	4618      	mov	r0, r3
 8007740:	f005 f8d2 	bl	800c8e8 <USB_ReadInterrupts>
 8007744:	4603      	mov	r3, r0
 8007746:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800774a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800774e:	d10a      	bne.n	8007766 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8007750:	6878      	ldr	r0, [r7, #4]
 8007752:	f00b fd73 	bl	801323c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	695a      	ldr	r2, [r3, #20]
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8007764:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	4618      	mov	r0, r3
 800776c:	f005 f8bc 	bl	800c8e8 <USB_ReadInterrupts>
 8007770:	4603      	mov	r3, r0
 8007772:	f003 0304 	and.w	r3, r3, #4
 8007776:	2b04      	cmp	r3, #4
 8007778:	d115      	bne.n	80077a6 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	685b      	ldr	r3, [r3, #4]
 8007780:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8007782:	69bb      	ldr	r3, [r7, #24]
 8007784:	f003 0304 	and.w	r3, r3, #4
 8007788:	2b00      	cmp	r3, #0
 800778a:	d002      	beq.n	8007792 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800778c:	6878      	ldr	r0, [r7, #4]
 800778e:	f00b fd63 	bl	8013258 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	6859      	ldr	r1, [r3, #4]
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	69ba      	ldr	r2, [r7, #24]
 800779e:	430a      	orrs	r2, r1
 80077a0:	605a      	str	r2, [r3, #4]
 80077a2:	e000      	b.n	80077a6 <HAL_PCD_IRQHandler+0x93c>
      return;
 80077a4:	bf00      	nop
    }
  }
}
 80077a6:	3734      	adds	r7, #52	; 0x34
 80077a8:	46bd      	mov	sp, r7
 80077aa:	bd90      	pop	{r4, r7, pc}

080077ac <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80077ac:	b580      	push	{r7, lr}
 80077ae:	b082      	sub	sp, #8
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]
 80077b4:	460b      	mov	r3, r1
 80077b6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 80077be:	2b01      	cmp	r3, #1
 80077c0:	d101      	bne.n	80077c6 <HAL_PCD_SetAddress+0x1a>
 80077c2:	2302      	movs	r3, #2
 80077c4:	e012      	b.n	80077ec <HAL_PCD_SetAddress+0x40>
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	2201      	movs	r2, #1
 80077ca:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  hpcd->USB_Address = address;
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	78fa      	ldrb	r2, [r7, #3]
 80077d2:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	78fa      	ldrb	r2, [r7, #3]
 80077da:	4611      	mov	r1, r2
 80077dc:	4618      	mov	r0, r3
 80077de:	f005 f81b 	bl	800c818 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	2200      	movs	r2, #0
 80077e6:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 80077ea:	2300      	movs	r3, #0
}
 80077ec:	4618      	mov	r0, r3
 80077ee:	3708      	adds	r7, #8
 80077f0:	46bd      	mov	sp, r7
 80077f2:	bd80      	pop	{r7, pc}

080077f4 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80077f4:	b580      	push	{r7, lr}
 80077f6:	b084      	sub	sp, #16
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	6078      	str	r0, [r7, #4]
 80077fc:	4608      	mov	r0, r1
 80077fe:	4611      	mov	r1, r2
 8007800:	461a      	mov	r2, r3
 8007802:	4603      	mov	r3, r0
 8007804:	70fb      	strb	r3, [r7, #3]
 8007806:	460b      	mov	r3, r1
 8007808:	803b      	strh	r3, [r7, #0]
 800780a:	4613      	mov	r3, r2
 800780c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800780e:	2300      	movs	r3, #0
 8007810:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8007812:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007816:	2b00      	cmp	r3, #0
 8007818:	da0f      	bge.n	800783a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800781a:	78fb      	ldrb	r3, [r7, #3]
 800781c:	f003 020f 	and.w	r2, r3, #15
 8007820:	4613      	mov	r3, r2
 8007822:	00db      	lsls	r3, r3, #3
 8007824:	4413      	add	r3, r2
 8007826:	009b      	lsls	r3, r3, #2
 8007828:	3310      	adds	r3, #16
 800782a:	687a      	ldr	r2, [r7, #4]
 800782c:	4413      	add	r3, r2
 800782e:	3304      	adds	r3, #4
 8007830:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	2201      	movs	r2, #1
 8007836:	705a      	strb	r2, [r3, #1]
 8007838:	e00f      	b.n	800785a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800783a:	78fb      	ldrb	r3, [r7, #3]
 800783c:	f003 020f 	and.w	r2, r3, #15
 8007840:	4613      	mov	r3, r2
 8007842:	00db      	lsls	r3, r3, #3
 8007844:	4413      	add	r3, r2
 8007846:	009b      	lsls	r3, r3, #2
 8007848:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800784c:	687a      	ldr	r2, [r7, #4]
 800784e:	4413      	add	r3, r2
 8007850:	3304      	adds	r3, #4
 8007852:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	2200      	movs	r2, #0
 8007858:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800785a:	78fb      	ldrb	r3, [r7, #3]
 800785c:	f003 030f 	and.w	r3, r3, #15
 8007860:	b2da      	uxtb	r2, r3
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8007866:	883a      	ldrh	r2, [r7, #0]
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	78ba      	ldrb	r2, [r7, #2]
 8007870:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	785b      	ldrb	r3, [r3, #1]
 8007876:	2b00      	cmp	r3, #0
 8007878:	d004      	beq.n	8007884 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	781b      	ldrb	r3, [r3, #0]
 800787e:	b29a      	uxth	r2, r3
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8007884:	78bb      	ldrb	r3, [r7, #2]
 8007886:	2b02      	cmp	r3, #2
 8007888:	d102      	bne.n	8007890 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	2200      	movs	r2, #0
 800788e:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8007896:	2b01      	cmp	r3, #1
 8007898:	d101      	bne.n	800789e <HAL_PCD_EP_Open+0xaa>
 800789a:	2302      	movs	r3, #2
 800789c:	e00e      	b.n	80078bc <HAL_PCD_EP_Open+0xc8>
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	2201      	movs	r2, #1
 80078a2:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	68f9      	ldr	r1, [r7, #12]
 80078ac:	4618      	mov	r0, r3
 80078ae:	f004 f9a3 	bl	800bbf8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	2200      	movs	r2, #0
 80078b6:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return ret;
 80078ba:	7afb      	ldrb	r3, [r7, #11]
}
 80078bc:	4618      	mov	r0, r3
 80078be:	3710      	adds	r7, #16
 80078c0:	46bd      	mov	sp, r7
 80078c2:	bd80      	pop	{r7, pc}

080078c4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80078c4:	b580      	push	{r7, lr}
 80078c6:	b084      	sub	sp, #16
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	6078      	str	r0, [r7, #4]
 80078cc:	460b      	mov	r3, r1
 80078ce:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80078d0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	da0f      	bge.n	80078f8 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80078d8:	78fb      	ldrb	r3, [r7, #3]
 80078da:	f003 020f 	and.w	r2, r3, #15
 80078de:	4613      	mov	r3, r2
 80078e0:	00db      	lsls	r3, r3, #3
 80078e2:	4413      	add	r3, r2
 80078e4:	009b      	lsls	r3, r3, #2
 80078e6:	3310      	adds	r3, #16
 80078e8:	687a      	ldr	r2, [r7, #4]
 80078ea:	4413      	add	r3, r2
 80078ec:	3304      	adds	r3, #4
 80078ee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	2201      	movs	r2, #1
 80078f4:	705a      	strb	r2, [r3, #1]
 80078f6:	e00f      	b.n	8007918 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80078f8:	78fb      	ldrb	r3, [r7, #3]
 80078fa:	f003 020f 	and.w	r2, r3, #15
 80078fe:	4613      	mov	r3, r2
 8007900:	00db      	lsls	r3, r3, #3
 8007902:	4413      	add	r3, r2
 8007904:	009b      	lsls	r3, r3, #2
 8007906:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800790a:	687a      	ldr	r2, [r7, #4]
 800790c:	4413      	add	r3, r2
 800790e:	3304      	adds	r3, #4
 8007910:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	2200      	movs	r2, #0
 8007916:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8007918:	78fb      	ldrb	r3, [r7, #3]
 800791a:	f003 030f 	and.w	r3, r3, #15
 800791e:	b2da      	uxtb	r2, r3
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 800792a:	2b01      	cmp	r3, #1
 800792c:	d101      	bne.n	8007932 <HAL_PCD_EP_Close+0x6e>
 800792e:	2302      	movs	r3, #2
 8007930:	e00e      	b.n	8007950 <HAL_PCD_EP_Close+0x8c>
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	2201      	movs	r2, #1
 8007936:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	68f9      	ldr	r1, [r7, #12]
 8007940:	4618      	mov	r0, r3
 8007942:	f004 f9e1 	bl	800bd08 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	2200      	movs	r2, #0
 800794a:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  return HAL_OK;
 800794e:	2300      	movs	r3, #0
}
 8007950:	4618      	mov	r0, r3
 8007952:	3710      	adds	r7, #16
 8007954:	46bd      	mov	sp, r7
 8007956:	bd80      	pop	{r7, pc}

08007958 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007958:	b580      	push	{r7, lr}
 800795a:	b086      	sub	sp, #24
 800795c:	af00      	add	r7, sp, #0
 800795e:	60f8      	str	r0, [r7, #12]
 8007960:	607a      	str	r2, [r7, #4]
 8007962:	603b      	str	r3, [r7, #0]
 8007964:	460b      	mov	r3, r1
 8007966:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007968:	7afb      	ldrb	r3, [r7, #11]
 800796a:	f003 020f 	and.w	r2, r3, #15
 800796e:	4613      	mov	r3, r2
 8007970:	00db      	lsls	r3, r3, #3
 8007972:	4413      	add	r3, r2
 8007974:	009b      	lsls	r3, r3, #2
 8007976:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800797a:	68fa      	ldr	r2, [r7, #12]
 800797c:	4413      	add	r3, r2
 800797e:	3304      	adds	r3, #4
 8007980:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007982:	697b      	ldr	r3, [r7, #20]
 8007984:	687a      	ldr	r2, [r7, #4]
 8007986:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8007988:	697b      	ldr	r3, [r7, #20]
 800798a:	683a      	ldr	r2, [r7, #0]
 800798c:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800798e:	697b      	ldr	r3, [r7, #20]
 8007990:	2200      	movs	r2, #0
 8007992:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8007994:	697b      	ldr	r3, [r7, #20]
 8007996:	2200      	movs	r2, #0
 8007998:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800799a:	7afb      	ldrb	r3, [r7, #11]
 800799c:	f003 030f 	and.w	r3, r3, #15
 80079a0:	b2da      	uxtb	r2, r3
 80079a2:	697b      	ldr	r3, [r7, #20]
 80079a4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	799b      	ldrb	r3, [r3, #6]
 80079aa:	2b01      	cmp	r3, #1
 80079ac:	d102      	bne.n	80079b4 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80079ae:	687a      	ldr	r2, [r7, #4]
 80079b0:	697b      	ldr	r3, [r7, #20]
 80079b2:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	6818      	ldr	r0, [r3, #0]
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	799b      	ldrb	r3, [r3, #6]
 80079bc:	461a      	mov	r2, r3
 80079be:	6979      	ldr	r1, [r7, #20]
 80079c0:	f004 fa7e 	bl	800bec0 <USB_EPStartXfer>

  return HAL_OK;
 80079c4:	2300      	movs	r3, #0
}
 80079c6:	4618      	mov	r0, r3
 80079c8:	3718      	adds	r7, #24
 80079ca:	46bd      	mov	sp, r7
 80079cc:	bd80      	pop	{r7, pc}

080079ce <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80079ce:	b480      	push	{r7}
 80079d0:	b083      	sub	sp, #12
 80079d2:	af00      	add	r7, sp, #0
 80079d4:	6078      	str	r0, [r7, #4]
 80079d6:	460b      	mov	r3, r1
 80079d8:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80079da:	78fb      	ldrb	r3, [r7, #3]
 80079dc:	f003 020f 	and.w	r2, r3, #15
 80079e0:	6879      	ldr	r1, [r7, #4]
 80079e2:	4613      	mov	r3, r2
 80079e4:	00db      	lsls	r3, r3, #3
 80079e6:	4413      	add	r3, r2
 80079e8:	009b      	lsls	r3, r3, #2
 80079ea:	440b      	add	r3, r1
 80079ec:	f503 731a 	add.w	r3, r3, #616	; 0x268
 80079f0:	681b      	ldr	r3, [r3, #0]
}
 80079f2:	4618      	mov	r0, r3
 80079f4:	370c      	adds	r7, #12
 80079f6:	46bd      	mov	sp, r7
 80079f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079fc:	4770      	bx	lr

080079fe <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80079fe:	b580      	push	{r7, lr}
 8007a00:	b086      	sub	sp, #24
 8007a02:	af00      	add	r7, sp, #0
 8007a04:	60f8      	str	r0, [r7, #12]
 8007a06:	607a      	str	r2, [r7, #4]
 8007a08:	603b      	str	r3, [r7, #0]
 8007a0a:	460b      	mov	r3, r1
 8007a0c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007a0e:	7afb      	ldrb	r3, [r7, #11]
 8007a10:	f003 020f 	and.w	r2, r3, #15
 8007a14:	4613      	mov	r3, r2
 8007a16:	00db      	lsls	r3, r3, #3
 8007a18:	4413      	add	r3, r2
 8007a1a:	009b      	lsls	r3, r3, #2
 8007a1c:	3310      	adds	r3, #16
 8007a1e:	68fa      	ldr	r2, [r7, #12]
 8007a20:	4413      	add	r3, r2
 8007a22:	3304      	adds	r3, #4
 8007a24:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007a26:	697b      	ldr	r3, [r7, #20]
 8007a28:	687a      	ldr	r2, [r7, #4]
 8007a2a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8007a2c:	697b      	ldr	r3, [r7, #20]
 8007a2e:	683a      	ldr	r2, [r7, #0]
 8007a30:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8007a32:	697b      	ldr	r3, [r7, #20]
 8007a34:	2200      	movs	r2, #0
 8007a36:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8007a38:	697b      	ldr	r3, [r7, #20]
 8007a3a:	2201      	movs	r2, #1
 8007a3c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007a3e:	7afb      	ldrb	r3, [r7, #11]
 8007a40:	f003 030f 	and.w	r3, r3, #15
 8007a44:	b2da      	uxtb	r2, r3
 8007a46:	697b      	ldr	r3, [r7, #20]
 8007a48:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	799b      	ldrb	r3, [r3, #6]
 8007a4e:	2b01      	cmp	r3, #1
 8007a50:	d102      	bne.n	8007a58 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8007a52:	687a      	ldr	r2, [r7, #4]
 8007a54:	697b      	ldr	r3, [r7, #20]
 8007a56:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	6818      	ldr	r0, [r3, #0]
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	799b      	ldrb	r3, [r3, #6]
 8007a60:	461a      	mov	r2, r3
 8007a62:	6979      	ldr	r1, [r7, #20]
 8007a64:	f004 fa2c 	bl	800bec0 <USB_EPStartXfer>

  return HAL_OK;
 8007a68:	2300      	movs	r3, #0
}
 8007a6a:	4618      	mov	r0, r3
 8007a6c:	3718      	adds	r7, #24
 8007a6e:	46bd      	mov	sp, r7
 8007a70:	bd80      	pop	{r7, pc}

08007a72 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007a72:	b580      	push	{r7, lr}
 8007a74:	b084      	sub	sp, #16
 8007a76:	af00      	add	r7, sp, #0
 8007a78:	6078      	str	r0, [r7, #4]
 8007a7a:	460b      	mov	r3, r1
 8007a7c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8007a7e:	78fb      	ldrb	r3, [r7, #3]
 8007a80:	f003 030f 	and.w	r3, r3, #15
 8007a84:	687a      	ldr	r2, [r7, #4]
 8007a86:	7912      	ldrb	r2, [r2, #4]
 8007a88:	4293      	cmp	r3, r2
 8007a8a:	d901      	bls.n	8007a90 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8007a8c:	2301      	movs	r3, #1
 8007a8e:	e04f      	b.n	8007b30 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8007a90:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	da0f      	bge.n	8007ab8 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007a98:	78fb      	ldrb	r3, [r7, #3]
 8007a9a:	f003 020f 	and.w	r2, r3, #15
 8007a9e:	4613      	mov	r3, r2
 8007aa0:	00db      	lsls	r3, r3, #3
 8007aa2:	4413      	add	r3, r2
 8007aa4:	009b      	lsls	r3, r3, #2
 8007aa6:	3310      	adds	r3, #16
 8007aa8:	687a      	ldr	r2, [r7, #4]
 8007aaa:	4413      	add	r3, r2
 8007aac:	3304      	adds	r3, #4
 8007aae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	2201      	movs	r2, #1
 8007ab4:	705a      	strb	r2, [r3, #1]
 8007ab6:	e00d      	b.n	8007ad4 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8007ab8:	78fa      	ldrb	r2, [r7, #3]
 8007aba:	4613      	mov	r3, r2
 8007abc:	00db      	lsls	r3, r3, #3
 8007abe:	4413      	add	r3, r2
 8007ac0:	009b      	lsls	r3, r3, #2
 8007ac2:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8007ac6:	687a      	ldr	r2, [r7, #4]
 8007ac8:	4413      	add	r3, r2
 8007aca:	3304      	adds	r3, #4
 8007acc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	2200      	movs	r2, #0
 8007ad2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	2201      	movs	r2, #1
 8007ad8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007ada:	78fb      	ldrb	r3, [r7, #3]
 8007adc:	f003 030f 	and.w	r3, r3, #15
 8007ae0:	b2da      	uxtb	r2, r3
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8007aec:	2b01      	cmp	r3, #1
 8007aee:	d101      	bne.n	8007af4 <HAL_PCD_EP_SetStall+0x82>
 8007af0:	2302      	movs	r3, #2
 8007af2:	e01d      	b.n	8007b30 <HAL_PCD_EP_SetStall+0xbe>
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	2201      	movs	r2, #1
 8007af8:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	68f9      	ldr	r1, [r7, #12]
 8007b02:	4618      	mov	r0, r3
 8007b04:	f004 fdb4 	bl	800c670 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007b08:	78fb      	ldrb	r3, [r7, #3]
 8007b0a:	f003 030f 	and.w	r3, r3, #15
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d109      	bne.n	8007b26 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	6818      	ldr	r0, [r3, #0]
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	7999      	ldrb	r1, [r3, #6]
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8007b20:	461a      	mov	r2, r3
 8007b22:	f004 ffa5 	bl	800ca70 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	2200      	movs	r2, #0
 8007b2a:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8007b2e:	2300      	movs	r3, #0
}
 8007b30:	4618      	mov	r0, r3
 8007b32:	3710      	adds	r7, #16
 8007b34:	46bd      	mov	sp, r7
 8007b36:	bd80      	pop	{r7, pc}

08007b38 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007b38:	b580      	push	{r7, lr}
 8007b3a:	b084      	sub	sp, #16
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	6078      	str	r0, [r7, #4]
 8007b40:	460b      	mov	r3, r1
 8007b42:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8007b44:	78fb      	ldrb	r3, [r7, #3]
 8007b46:	f003 030f 	and.w	r3, r3, #15
 8007b4a:	687a      	ldr	r2, [r7, #4]
 8007b4c:	7912      	ldrb	r2, [r2, #4]
 8007b4e:	4293      	cmp	r3, r2
 8007b50:	d901      	bls.n	8007b56 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8007b52:	2301      	movs	r3, #1
 8007b54:	e042      	b.n	8007bdc <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8007b56:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	da0f      	bge.n	8007b7e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007b5e:	78fb      	ldrb	r3, [r7, #3]
 8007b60:	f003 020f 	and.w	r2, r3, #15
 8007b64:	4613      	mov	r3, r2
 8007b66:	00db      	lsls	r3, r3, #3
 8007b68:	4413      	add	r3, r2
 8007b6a:	009b      	lsls	r3, r3, #2
 8007b6c:	3310      	adds	r3, #16
 8007b6e:	687a      	ldr	r2, [r7, #4]
 8007b70:	4413      	add	r3, r2
 8007b72:	3304      	adds	r3, #4
 8007b74:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	2201      	movs	r2, #1
 8007b7a:	705a      	strb	r2, [r3, #1]
 8007b7c:	e00f      	b.n	8007b9e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007b7e:	78fb      	ldrb	r3, [r7, #3]
 8007b80:	f003 020f 	and.w	r2, r3, #15
 8007b84:	4613      	mov	r3, r2
 8007b86:	00db      	lsls	r3, r3, #3
 8007b88:	4413      	add	r3, r2
 8007b8a:	009b      	lsls	r3, r3, #2
 8007b8c:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8007b90:	687a      	ldr	r2, [r7, #4]
 8007b92:	4413      	add	r3, r2
 8007b94:	3304      	adds	r3, #4
 8007b96:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	2200      	movs	r2, #0
 8007b9c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	2200      	movs	r2, #0
 8007ba2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007ba4:	78fb      	ldrb	r3, [r7, #3]
 8007ba6:	f003 030f 	and.w	r3, r3, #15
 8007baa:	b2da      	uxtb	r2, r3
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8007bb6:	2b01      	cmp	r3, #1
 8007bb8:	d101      	bne.n	8007bbe <HAL_PCD_EP_ClrStall+0x86>
 8007bba:	2302      	movs	r3, #2
 8007bbc:	e00e      	b.n	8007bdc <HAL_PCD_EP_ClrStall+0xa4>
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	2201      	movs	r2, #1
 8007bc2:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	68f9      	ldr	r1, [r7, #12]
 8007bcc:	4618      	mov	r0, r3
 8007bce:	f004 fdbd 	bl	800c74c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	2200      	movs	r2, #0
 8007bd6:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8007bda:	2300      	movs	r3, #0
}
 8007bdc:	4618      	mov	r0, r3
 8007bde:	3710      	adds	r7, #16
 8007be0:	46bd      	mov	sp, r7
 8007be2:	bd80      	pop	{r7, pc}

08007be4 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007be4:	b580      	push	{r7, lr}
 8007be6:	b084      	sub	sp, #16
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	6078      	str	r0, [r7, #4]
 8007bec:	460b      	mov	r3, r1
 8007bee:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8007bf0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	da0c      	bge.n	8007c12 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007bf8:	78fb      	ldrb	r3, [r7, #3]
 8007bfa:	f003 020f 	and.w	r2, r3, #15
 8007bfe:	4613      	mov	r3, r2
 8007c00:	00db      	lsls	r3, r3, #3
 8007c02:	4413      	add	r3, r2
 8007c04:	009b      	lsls	r3, r3, #2
 8007c06:	3310      	adds	r3, #16
 8007c08:	687a      	ldr	r2, [r7, #4]
 8007c0a:	4413      	add	r3, r2
 8007c0c:	3304      	adds	r3, #4
 8007c0e:	60fb      	str	r3, [r7, #12]
 8007c10:	e00c      	b.n	8007c2c <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007c12:	78fb      	ldrb	r3, [r7, #3]
 8007c14:	f003 020f 	and.w	r2, r3, #15
 8007c18:	4613      	mov	r3, r2
 8007c1a:	00db      	lsls	r3, r3, #3
 8007c1c:	4413      	add	r3, r2
 8007c1e:	009b      	lsls	r3, r3, #2
 8007c20:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8007c24:	687a      	ldr	r2, [r7, #4]
 8007c26:	4413      	add	r3, r2
 8007c28:	3304      	adds	r3, #4
 8007c2a:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	68f9      	ldr	r1, [r7, #12]
 8007c32:	4618      	mov	r0, r3
 8007c34:	f004 fbdc 	bl	800c3f0 <USB_EPStopXfer>
 8007c38:	4603      	mov	r3, r0
 8007c3a:	72fb      	strb	r3, [r7, #11]

  return ret;
 8007c3c:	7afb      	ldrb	r3, [r7, #11]
}
 8007c3e:	4618      	mov	r0, r3
 8007c40:	3710      	adds	r7, #16
 8007c42:	46bd      	mov	sp, r7
 8007c44:	bd80      	pop	{r7, pc}

08007c46 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007c46:	b580      	push	{r7, lr}
 8007c48:	b08a      	sub	sp, #40	; 0x28
 8007c4a:	af02      	add	r7, sp, #8
 8007c4c:	6078      	str	r0, [r7, #4]
 8007c4e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c56:	697b      	ldr	r3, [r7, #20]
 8007c58:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8007c5a:	683a      	ldr	r2, [r7, #0]
 8007c5c:	4613      	mov	r3, r2
 8007c5e:	00db      	lsls	r3, r3, #3
 8007c60:	4413      	add	r3, r2
 8007c62:	009b      	lsls	r3, r3, #2
 8007c64:	3310      	adds	r3, #16
 8007c66:	687a      	ldr	r2, [r7, #4]
 8007c68:	4413      	add	r3, r2
 8007c6a:	3304      	adds	r3, #4
 8007c6c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	695a      	ldr	r2, [r3, #20]
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	691b      	ldr	r3, [r3, #16]
 8007c76:	429a      	cmp	r2, r3
 8007c78:	d901      	bls.n	8007c7e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8007c7a:	2301      	movs	r3, #1
 8007c7c:	e06b      	b.n	8007d56 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	691a      	ldr	r2, [r3, #16]
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	695b      	ldr	r3, [r3, #20]
 8007c86:	1ad3      	subs	r3, r2, r3
 8007c88:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	689b      	ldr	r3, [r3, #8]
 8007c8e:	69fa      	ldr	r2, [r7, #28]
 8007c90:	429a      	cmp	r2, r3
 8007c92:	d902      	bls.n	8007c9a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	689b      	ldr	r3, [r3, #8]
 8007c98:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8007c9a:	69fb      	ldr	r3, [r7, #28]
 8007c9c:	3303      	adds	r3, #3
 8007c9e:	089b      	lsrs	r3, r3, #2
 8007ca0:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007ca2:	e02a      	b.n	8007cfa <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	691a      	ldr	r2, [r3, #16]
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	695b      	ldr	r3, [r3, #20]
 8007cac:	1ad3      	subs	r3, r2, r3
 8007cae:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	689b      	ldr	r3, [r3, #8]
 8007cb4:	69fa      	ldr	r2, [r7, #28]
 8007cb6:	429a      	cmp	r2, r3
 8007cb8:	d902      	bls.n	8007cc0 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	689b      	ldr	r3, [r3, #8]
 8007cbe:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8007cc0:	69fb      	ldr	r3, [r7, #28]
 8007cc2:	3303      	adds	r3, #3
 8007cc4:	089b      	lsrs	r3, r3, #2
 8007cc6:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	68d9      	ldr	r1, [r3, #12]
 8007ccc:	683b      	ldr	r3, [r7, #0]
 8007cce:	b2da      	uxtb	r2, r3
 8007cd0:	69fb      	ldr	r3, [r7, #28]
 8007cd2:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8007cd8:	9300      	str	r3, [sp, #0]
 8007cda:	4603      	mov	r3, r0
 8007cdc:	6978      	ldr	r0, [r7, #20]
 8007cde:	f004 fc31 	bl	800c544 <USB_WritePacket>

    ep->xfer_buff  += len;
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	68da      	ldr	r2, [r3, #12]
 8007ce6:	69fb      	ldr	r3, [r7, #28]
 8007ce8:	441a      	add	r2, r3
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	695a      	ldr	r2, [r3, #20]
 8007cf2:	69fb      	ldr	r3, [r7, #28]
 8007cf4:	441a      	add	r2, r3
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007cfa:	683b      	ldr	r3, [r7, #0]
 8007cfc:	015a      	lsls	r2, r3, #5
 8007cfe:	693b      	ldr	r3, [r7, #16]
 8007d00:	4413      	add	r3, r2
 8007d02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d06:	699b      	ldr	r3, [r3, #24]
 8007d08:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8007d0a:	69ba      	ldr	r2, [r7, #24]
 8007d0c:	429a      	cmp	r2, r3
 8007d0e:	d809      	bhi.n	8007d24 <PCD_WriteEmptyTxFifo+0xde>
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	695a      	ldr	r2, [r3, #20]
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007d18:	429a      	cmp	r2, r3
 8007d1a:	d203      	bcs.n	8007d24 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	691b      	ldr	r3, [r3, #16]
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d1bf      	bne.n	8007ca4 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	691a      	ldr	r2, [r3, #16]
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	695b      	ldr	r3, [r3, #20]
 8007d2c:	429a      	cmp	r2, r3
 8007d2e:	d811      	bhi.n	8007d54 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8007d30:	683b      	ldr	r3, [r7, #0]
 8007d32:	f003 030f 	and.w	r3, r3, #15
 8007d36:	2201      	movs	r2, #1
 8007d38:	fa02 f303 	lsl.w	r3, r2, r3
 8007d3c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8007d3e:	693b      	ldr	r3, [r7, #16]
 8007d40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d44:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007d46:	68bb      	ldr	r3, [r7, #8]
 8007d48:	43db      	mvns	r3, r3
 8007d4a:	6939      	ldr	r1, [r7, #16]
 8007d4c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007d50:	4013      	ands	r3, r2
 8007d52:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8007d54:	2300      	movs	r3, #0
}
 8007d56:	4618      	mov	r0, r3
 8007d58:	3720      	adds	r7, #32
 8007d5a:	46bd      	mov	sp, r7
 8007d5c:	bd80      	pop	{r7, pc}
	...

08007d60 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007d60:	b580      	push	{r7, lr}
 8007d62:	b088      	sub	sp, #32
 8007d64:	af00      	add	r7, sp, #0
 8007d66:	6078      	str	r0, [r7, #4]
 8007d68:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d70:	69fb      	ldr	r3, [r7, #28]
 8007d72:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8007d74:	69fb      	ldr	r3, [r7, #28]
 8007d76:	333c      	adds	r3, #60	; 0x3c
 8007d78:	3304      	adds	r3, #4
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8007d7e:	683b      	ldr	r3, [r7, #0]
 8007d80:	015a      	lsls	r2, r3, #5
 8007d82:	69bb      	ldr	r3, [r7, #24]
 8007d84:	4413      	add	r3, r2
 8007d86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d8a:	689b      	ldr	r3, [r3, #8]
 8007d8c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	799b      	ldrb	r3, [r3, #6]
 8007d92:	2b01      	cmp	r3, #1
 8007d94:	d17b      	bne.n	8007e8e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8007d96:	693b      	ldr	r3, [r7, #16]
 8007d98:	f003 0308 	and.w	r3, r3, #8
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d015      	beq.n	8007dcc <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007da0:	697b      	ldr	r3, [r7, #20]
 8007da2:	4a61      	ldr	r2, [pc, #388]	; (8007f28 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8007da4:	4293      	cmp	r3, r2
 8007da6:	f240 80b9 	bls.w	8007f1c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007daa:	693b      	ldr	r3, [r7, #16]
 8007dac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	f000 80b3 	beq.w	8007f1c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007db6:	683b      	ldr	r3, [r7, #0]
 8007db8:	015a      	lsls	r2, r3, #5
 8007dba:	69bb      	ldr	r3, [r7, #24]
 8007dbc:	4413      	add	r3, r2
 8007dbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007dc2:	461a      	mov	r2, r3
 8007dc4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007dc8:	6093      	str	r3, [r2, #8]
 8007dca:	e0a7      	b.n	8007f1c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8007dcc:	693b      	ldr	r3, [r7, #16]
 8007dce:	f003 0320 	and.w	r3, r3, #32
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d009      	beq.n	8007dea <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007dd6:	683b      	ldr	r3, [r7, #0]
 8007dd8:	015a      	lsls	r2, r3, #5
 8007dda:	69bb      	ldr	r3, [r7, #24]
 8007ddc:	4413      	add	r3, r2
 8007dde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007de2:	461a      	mov	r2, r3
 8007de4:	2320      	movs	r3, #32
 8007de6:	6093      	str	r3, [r2, #8]
 8007de8:	e098      	b.n	8007f1c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8007dea:	693b      	ldr	r3, [r7, #16]
 8007dec:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	f040 8093 	bne.w	8007f1c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007df6:	697b      	ldr	r3, [r7, #20]
 8007df8:	4a4b      	ldr	r2, [pc, #300]	; (8007f28 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8007dfa:	4293      	cmp	r3, r2
 8007dfc:	d90f      	bls.n	8007e1e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007dfe:	693b      	ldr	r3, [r7, #16]
 8007e00:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d00a      	beq.n	8007e1e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007e08:	683b      	ldr	r3, [r7, #0]
 8007e0a:	015a      	lsls	r2, r3, #5
 8007e0c:	69bb      	ldr	r3, [r7, #24]
 8007e0e:	4413      	add	r3, r2
 8007e10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e14:	461a      	mov	r2, r3
 8007e16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007e1a:	6093      	str	r3, [r2, #8]
 8007e1c:	e07e      	b.n	8007f1c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8007e1e:	683a      	ldr	r2, [r7, #0]
 8007e20:	4613      	mov	r3, r2
 8007e22:	00db      	lsls	r3, r3, #3
 8007e24:	4413      	add	r3, r2
 8007e26:	009b      	lsls	r3, r3, #2
 8007e28:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8007e2c:	687a      	ldr	r2, [r7, #4]
 8007e2e:	4413      	add	r3, r2
 8007e30:	3304      	adds	r3, #4
 8007e32:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	6a1a      	ldr	r2, [r3, #32]
 8007e38:	683b      	ldr	r3, [r7, #0]
 8007e3a:	0159      	lsls	r1, r3, #5
 8007e3c:	69bb      	ldr	r3, [r7, #24]
 8007e3e:	440b      	add	r3, r1
 8007e40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e44:	691b      	ldr	r3, [r3, #16]
 8007e46:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007e4a:	1ad2      	subs	r2, r2, r3
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8007e50:	683b      	ldr	r3, [r7, #0]
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d114      	bne.n	8007e80 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	691b      	ldr	r3, [r3, #16]
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d109      	bne.n	8007e72 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	6818      	ldr	r0, [r3, #0]
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8007e68:	461a      	mov	r2, r3
 8007e6a:	2101      	movs	r1, #1
 8007e6c:	f004 fe00 	bl	800ca70 <USB_EP0_OutStart>
 8007e70:	e006      	b.n	8007e80 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	68da      	ldr	r2, [r3, #12]
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	695b      	ldr	r3, [r3, #20]
 8007e7a:	441a      	add	r2, r3
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007e80:	683b      	ldr	r3, [r7, #0]
 8007e82:	b2db      	uxtb	r3, r3
 8007e84:	4619      	mov	r1, r3
 8007e86:	6878      	ldr	r0, [r7, #4]
 8007e88:	f00b f91e 	bl	80130c8 <HAL_PCD_DataOutStageCallback>
 8007e8c:	e046      	b.n	8007f1c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8007e8e:	697b      	ldr	r3, [r7, #20]
 8007e90:	4a26      	ldr	r2, [pc, #152]	; (8007f2c <PCD_EP_OutXfrComplete_int+0x1cc>)
 8007e92:	4293      	cmp	r3, r2
 8007e94:	d124      	bne.n	8007ee0 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8007e96:	693b      	ldr	r3, [r7, #16]
 8007e98:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d00a      	beq.n	8007eb6 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007ea0:	683b      	ldr	r3, [r7, #0]
 8007ea2:	015a      	lsls	r2, r3, #5
 8007ea4:	69bb      	ldr	r3, [r7, #24]
 8007ea6:	4413      	add	r3, r2
 8007ea8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007eac:	461a      	mov	r2, r3
 8007eae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007eb2:	6093      	str	r3, [r2, #8]
 8007eb4:	e032      	b.n	8007f1c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8007eb6:	693b      	ldr	r3, [r7, #16]
 8007eb8:	f003 0320 	and.w	r3, r3, #32
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d008      	beq.n	8007ed2 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007ec0:	683b      	ldr	r3, [r7, #0]
 8007ec2:	015a      	lsls	r2, r3, #5
 8007ec4:	69bb      	ldr	r3, [r7, #24]
 8007ec6:	4413      	add	r3, r2
 8007ec8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ecc:	461a      	mov	r2, r3
 8007ece:	2320      	movs	r3, #32
 8007ed0:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007ed2:	683b      	ldr	r3, [r7, #0]
 8007ed4:	b2db      	uxtb	r3, r3
 8007ed6:	4619      	mov	r1, r3
 8007ed8:	6878      	ldr	r0, [r7, #4]
 8007eda:	f00b f8f5 	bl	80130c8 <HAL_PCD_DataOutStageCallback>
 8007ede:	e01d      	b.n	8007f1c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8007ee0:	683b      	ldr	r3, [r7, #0]
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d114      	bne.n	8007f10 <PCD_EP_OutXfrComplete_int+0x1b0>
 8007ee6:	6879      	ldr	r1, [r7, #4]
 8007ee8:	683a      	ldr	r2, [r7, #0]
 8007eea:	4613      	mov	r3, r2
 8007eec:	00db      	lsls	r3, r3, #3
 8007eee:	4413      	add	r3, r2
 8007ef0:	009b      	lsls	r3, r3, #2
 8007ef2:	440b      	add	r3, r1
 8007ef4:	f503 7319 	add.w	r3, r3, #612	; 0x264
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d108      	bne.n	8007f10 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	6818      	ldr	r0, [r3, #0]
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8007f08:	461a      	mov	r2, r3
 8007f0a:	2100      	movs	r1, #0
 8007f0c:	f004 fdb0 	bl	800ca70 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007f10:	683b      	ldr	r3, [r7, #0]
 8007f12:	b2db      	uxtb	r3, r3
 8007f14:	4619      	mov	r1, r3
 8007f16:	6878      	ldr	r0, [r7, #4]
 8007f18:	f00b f8d6 	bl	80130c8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8007f1c:	2300      	movs	r3, #0
}
 8007f1e:	4618      	mov	r0, r3
 8007f20:	3720      	adds	r7, #32
 8007f22:	46bd      	mov	sp, r7
 8007f24:	bd80      	pop	{r7, pc}
 8007f26:	bf00      	nop
 8007f28:	4f54300a 	.word	0x4f54300a
 8007f2c:	4f54310a 	.word	0x4f54310a

08007f30 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007f30:	b580      	push	{r7, lr}
 8007f32:	b086      	sub	sp, #24
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	6078      	str	r0, [r7, #4]
 8007f38:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f40:	697b      	ldr	r3, [r7, #20]
 8007f42:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8007f44:	697b      	ldr	r3, [r7, #20]
 8007f46:	333c      	adds	r3, #60	; 0x3c
 8007f48:	3304      	adds	r3, #4
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8007f4e:	683b      	ldr	r3, [r7, #0]
 8007f50:	015a      	lsls	r2, r3, #5
 8007f52:	693b      	ldr	r3, [r7, #16]
 8007f54:	4413      	add	r3, r2
 8007f56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f5a:	689b      	ldr	r3, [r3, #8]
 8007f5c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	4a15      	ldr	r2, [pc, #84]	; (8007fb8 <PCD_EP_OutSetupPacket_int+0x88>)
 8007f62:	4293      	cmp	r3, r2
 8007f64:	d90e      	bls.n	8007f84 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007f66:	68bb      	ldr	r3, [r7, #8]
 8007f68:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d009      	beq.n	8007f84 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007f70:	683b      	ldr	r3, [r7, #0]
 8007f72:	015a      	lsls	r2, r3, #5
 8007f74:	693b      	ldr	r3, [r7, #16]
 8007f76:	4413      	add	r3, r2
 8007f78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f7c:	461a      	mov	r2, r3
 8007f7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007f82:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8007f84:	6878      	ldr	r0, [r7, #4]
 8007f86:	f00b f88d 	bl	80130a4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	4a0a      	ldr	r2, [pc, #40]	; (8007fb8 <PCD_EP_OutSetupPacket_int+0x88>)
 8007f8e:	4293      	cmp	r3, r2
 8007f90:	d90c      	bls.n	8007fac <PCD_EP_OutSetupPacket_int+0x7c>
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	799b      	ldrb	r3, [r3, #6]
 8007f96:	2b01      	cmp	r3, #1
 8007f98:	d108      	bne.n	8007fac <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	6818      	ldr	r0, [r3, #0]
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8007fa4:	461a      	mov	r2, r3
 8007fa6:	2101      	movs	r1, #1
 8007fa8:	f004 fd62 	bl	800ca70 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8007fac:	2300      	movs	r3, #0
}
 8007fae:	4618      	mov	r0, r3
 8007fb0:	3718      	adds	r7, #24
 8007fb2:	46bd      	mov	sp, r7
 8007fb4:	bd80      	pop	{r7, pc}
 8007fb6:	bf00      	nop
 8007fb8:	4f54300a 	.word	0x4f54300a

08007fbc <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8007fbc:	b480      	push	{r7}
 8007fbe:	b085      	sub	sp, #20
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	6078      	str	r0, [r7, #4]
 8007fc4:	460b      	mov	r3, r1
 8007fc6:	70fb      	strb	r3, [r7, #3]
 8007fc8:	4613      	mov	r3, r2
 8007fca:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fd2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8007fd4:	78fb      	ldrb	r3, [r7, #3]
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d107      	bne.n	8007fea <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8007fda:	883b      	ldrh	r3, [r7, #0]
 8007fdc:	0419      	lsls	r1, r3, #16
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	68ba      	ldr	r2, [r7, #8]
 8007fe4:	430a      	orrs	r2, r1
 8007fe6:	629a      	str	r2, [r3, #40]	; 0x28
 8007fe8:	e028      	b.n	800803c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ff0:	0c1b      	lsrs	r3, r3, #16
 8007ff2:	68ba      	ldr	r2, [r7, #8]
 8007ff4:	4413      	add	r3, r2
 8007ff6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8007ff8:	2300      	movs	r3, #0
 8007ffa:	73fb      	strb	r3, [r7, #15]
 8007ffc:	e00d      	b.n	800801a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681a      	ldr	r2, [r3, #0]
 8008002:	7bfb      	ldrb	r3, [r7, #15]
 8008004:	3340      	adds	r3, #64	; 0x40
 8008006:	009b      	lsls	r3, r3, #2
 8008008:	4413      	add	r3, r2
 800800a:	685b      	ldr	r3, [r3, #4]
 800800c:	0c1b      	lsrs	r3, r3, #16
 800800e:	68ba      	ldr	r2, [r7, #8]
 8008010:	4413      	add	r3, r2
 8008012:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8008014:	7bfb      	ldrb	r3, [r7, #15]
 8008016:	3301      	adds	r3, #1
 8008018:	73fb      	strb	r3, [r7, #15]
 800801a:	7bfa      	ldrb	r2, [r7, #15]
 800801c:	78fb      	ldrb	r3, [r7, #3]
 800801e:	3b01      	subs	r3, #1
 8008020:	429a      	cmp	r2, r3
 8008022:	d3ec      	bcc.n	8007ffe <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8008024:	883b      	ldrh	r3, [r7, #0]
 8008026:	0418      	lsls	r0, r3, #16
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	6819      	ldr	r1, [r3, #0]
 800802c:	78fb      	ldrb	r3, [r7, #3]
 800802e:	3b01      	subs	r3, #1
 8008030:	68ba      	ldr	r2, [r7, #8]
 8008032:	4302      	orrs	r2, r0
 8008034:	3340      	adds	r3, #64	; 0x40
 8008036:	009b      	lsls	r3, r3, #2
 8008038:	440b      	add	r3, r1
 800803a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800803c:	2300      	movs	r3, #0
}
 800803e:	4618      	mov	r0, r3
 8008040:	3714      	adds	r7, #20
 8008042:	46bd      	mov	sp, r7
 8008044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008048:	4770      	bx	lr

0800804a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800804a:	b480      	push	{r7}
 800804c:	b083      	sub	sp, #12
 800804e:	af00      	add	r7, sp, #0
 8008050:	6078      	str	r0, [r7, #4]
 8008052:	460b      	mov	r3, r1
 8008054:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	887a      	ldrh	r2, [r7, #2]
 800805c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800805e:	2300      	movs	r3, #0
}
 8008060:	4618      	mov	r0, r3
 8008062:	370c      	adds	r7, #12
 8008064:	46bd      	mov	sp, r7
 8008066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800806a:	4770      	bx	lr

0800806c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800806c:	b480      	push	{r7}
 800806e:	b083      	sub	sp, #12
 8008070:	af00      	add	r7, sp, #0
 8008072:	6078      	str	r0, [r7, #4]
 8008074:	460b      	mov	r3, r1
 8008076:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8008078:	bf00      	nop
 800807a:	370c      	adds	r7, #12
 800807c:	46bd      	mov	sp, r7
 800807e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008082:	4770      	bx	lr

08008084 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008084:	b580      	push	{r7, lr}
 8008086:	b086      	sub	sp, #24
 8008088:	af00      	add	r7, sp, #0
 800808a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	2b00      	cmp	r3, #0
 8008090:	d101      	bne.n	8008096 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008092:	2301      	movs	r3, #1
 8008094:	e267      	b.n	8008566 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	f003 0301 	and.w	r3, r3, #1
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d075      	beq.n	800818e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80080a2:	4b88      	ldr	r3, [pc, #544]	; (80082c4 <HAL_RCC_OscConfig+0x240>)
 80080a4:	689b      	ldr	r3, [r3, #8]
 80080a6:	f003 030c 	and.w	r3, r3, #12
 80080aa:	2b04      	cmp	r3, #4
 80080ac:	d00c      	beq.n	80080c8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80080ae:	4b85      	ldr	r3, [pc, #532]	; (80082c4 <HAL_RCC_OscConfig+0x240>)
 80080b0:	689b      	ldr	r3, [r3, #8]
 80080b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80080b6:	2b08      	cmp	r3, #8
 80080b8:	d112      	bne.n	80080e0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80080ba:	4b82      	ldr	r3, [pc, #520]	; (80082c4 <HAL_RCC_OscConfig+0x240>)
 80080bc:	685b      	ldr	r3, [r3, #4]
 80080be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80080c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80080c6:	d10b      	bne.n	80080e0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80080c8:	4b7e      	ldr	r3, [pc, #504]	; (80082c4 <HAL_RCC_OscConfig+0x240>)
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d05b      	beq.n	800818c <HAL_RCC_OscConfig+0x108>
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	685b      	ldr	r3, [r3, #4]
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d157      	bne.n	800818c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80080dc:	2301      	movs	r3, #1
 80080de:	e242      	b.n	8008566 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	685b      	ldr	r3, [r3, #4]
 80080e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80080e8:	d106      	bne.n	80080f8 <HAL_RCC_OscConfig+0x74>
 80080ea:	4b76      	ldr	r3, [pc, #472]	; (80082c4 <HAL_RCC_OscConfig+0x240>)
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	4a75      	ldr	r2, [pc, #468]	; (80082c4 <HAL_RCC_OscConfig+0x240>)
 80080f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80080f4:	6013      	str	r3, [r2, #0]
 80080f6:	e01d      	b.n	8008134 <HAL_RCC_OscConfig+0xb0>
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	685b      	ldr	r3, [r3, #4]
 80080fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008100:	d10c      	bne.n	800811c <HAL_RCC_OscConfig+0x98>
 8008102:	4b70      	ldr	r3, [pc, #448]	; (80082c4 <HAL_RCC_OscConfig+0x240>)
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	4a6f      	ldr	r2, [pc, #444]	; (80082c4 <HAL_RCC_OscConfig+0x240>)
 8008108:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800810c:	6013      	str	r3, [r2, #0]
 800810e:	4b6d      	ldr	r3, [pc, #436]	; (80082c4 <HAL_RCC_OscConfig+0x240>)
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	4a6c      	ldr	r2, [pc, #432]	; (80082c4 <HAL_RCC_OscConfig+0x240>)
 8008114:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008118:	6013      	str	r3, [r2, #0]
 800811a:	e00b      	b.n	8008134 <HAL_RCC_OscConfig+0xb0>
 800811c:	4b69      	ldr	r3, [pc, #420]	; (80082c4 <HAL_RCC_OscConfig+0x240>)
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	4a68      	ldr	r2, [pc, #416]	; (80082c4 <HAL_RCC_OscConfig+0x240>)
 8008122:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008126:	6013      	str	r3, [r2, #0]
 8008128:	4b66      	ldr	r3, [pc, #408]	; (80082c4 <HAL_RCC_OscConfig+0x240>)
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	4a65      	ldr	r2, [pc, #404]	; (80082c4 <HAL_RCC_OscConfig+0x240>)
 800812e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008132:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	685b      	ldr	r3, [r3, #4]
 8008138:	2b00      	cmp	r3, #0
 800813a:	d013      	beq.n	8008164 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800813c:	f7fd fbba 	bl	80058b4 <HAL_GetTick>
 8008140:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008142:	e008      	b.n	8008156 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008144:	f7fd fbb6 	bl	80058b4 <HAL_GetTick>
 8008148:	4602      	mov	r2, r0
 800814a:	693b      	ldr	r3, [r7, #16]
 800814c:	1ad3      	subs	r3, r2, r3
 800814e:	2b64      	cmp	r3, #100	; 0x64
 8008150:	d901      	bls.n	8008156 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8008152:	2303      	movs	r3, #3
 8008154:	e207      	b.n	8008566 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008156:	4b5b      	ldr	r3, [pc, #364]	; (80082c4 <HAL_RCC_OscConfig+0x240>)
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800815e:	2b00      	cmp	r3, #0
 8008160:	d0f0      	beq.n	8008144 <HAL_RCC_OscConfig+0xc0>
 8008162:	e014      	b.n	800818e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008164:	f7fd fba6 	bl	80058b4 <HAL_GetTick>
 8008168:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800816a:	e008      	b.n	800817e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800816c:	f7fd fba2 	bl	80058b4 <HAL_GetTick>
 8008170:	4602      	mov	r2, r0
 8008172:	693b      	ldr	r3, [r7, #16]
 8008174:	1ad3      	subs	r3, r2, r3
 8008176:	2b64      	cmp	r3, #100	; 0x64
 8008178:	d901      	bls.n	800817e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800817a:	2303      	movs	r3, #3
 800817c:	e1f3      	b.n	8008566 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800817e:	4b51      	ldr	r3, [pc, #324]	; (80082c4 <HAL_RCC_OscConfig+0x240>)
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008186:	2b00      	cmp	r3, #0
 8008188:	d1f0      	bne.n	800816c <HAL_RCC_OscConfig+0xe8>
 800818a:	e000      	b.n	800818e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800818c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	f003 0302 	and.w	r3, r3, #2
 8008196:	2b00      	cmp	r3, #0
 8008198:	d063      	beq.n	8008262 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800819a:	4b4a      	ldr	r3, [pc, #296]	; (80082c4 <HAL_RCC_OscConfig+0x240>)
 800819c:	689b      	ldr	r3, [r3, #8]
 800819e:	f003 030c 	and.w	r3, r3, #12
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d00b      	beq.n	80081be <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80081a6:	4b47      	ldr	r3, [pc, #284]	; (80082c4 <HAL_RCC_OscConfig+0x240>)
 80081a8:	689b      	ldr	r3, [r3, #8]
 80081aa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80081ae:	2b08      	cmp	r3, #8
 80081b0:	d11c      	bne.n	80081ec <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80081b2:	4b44      	ldr	r3, [pc, #272]	; (80082c4 <HAL_RCC_OscConfig+0x240>)
 80081b4:	685b      	ldr	r3, [r3, #4]
 80081b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d116      	bne.n	80081ec <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80081be:	4b41      	ldr	r3, [pc, #260]	; (80082c4 <HAL_RCC_OscConfig+0x240>)
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	f003 0302 	and.w	r3, r3, #2
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d005      	beq.n	80081d6 <HAL_RCC_OscConfig+0x152>
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	68db      	ldr	r3, [r3, #12]
 80081ce:	2b01      	cmp	r3, #1
 80081d0:	d001      	beq.n	80081d6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80081d2:	2301      	movs	r3, #1
 80081d4:	e1c7      	b.n	8008566 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80081d6:	4b3b      	ldr	r3, [pc, #236]	; (80082c4 <HAL_RCC_OscConfig+0x240>)
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	691b      	ldr	r3, [r3, #16]
 80081e2:	00db      	lsls	r3, r3, #3
 80081e4:	4937      	ldr	r1, [pc, #220]	; (80082c4 <HAL_RCC_OscConfig+0x240>)
 80081e6:	4313      	orrs	r3, r2
 80081e8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80081ea:	e03a      	b.n	8008262 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	68db      	ldr	r3, [r3, #12]
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d020      	beq.n	8008236 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80081f4:	4b34      	ldr	r3, [pc, #208]	; (80082c8 <HAL_RCC_OscConfig+0x244>)
 80081f6:	2201      	movs	r2, #1
 80081f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80081fa:	f7fd fb5b 	bl	80058b4 <HAL_GetTick>
 80081fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008200:	e008      	b.n	8008214 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008202:	f7fd fb57 	bl	80058b4 <HAL_GetTick>
 8008206:	4602      	mov	r2, r0
 8008208:	693b      	ldr	r3, [r7, #16]
 800820a:	1ad3      	subs	r3, r2, r3
 800820c:	2b02      	cmp	r3, #2
 800820e:	d901      	bls.n	8008214 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8008210:	2303      	movs	r3, #3
 8008212:	e1a8      	b.n	8008566 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008214:	4b2b      	ldr	r3, [pc, #172]	; (80082c4 <HAL_RCC_OscConfig+0x240>)
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	f003 0302 	and.w	r3, r3, #2
 800821c:	2b00      	cmp	r3, #0
 800821e:	d0f0      	beq.n	8008202 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008220:	4b28      	ldr	r3, [pc, #160]	; (80082c4 <HAL_RCC_OscConfig+0x240>)
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	691b      	ldr	r3, [r3, #16]
 800822c:	00db      	lsls	r3, r3, #3
 800822e:	4925      	ldr	r1, [pc, #148]	; (80082c4 <HAL_RCC_OscConfig+0x240>)
 8008230:	4313      	orrs	r3, r2
 8008232:	600b      	str	r3, [r1, #0]
 8008234:	e015      	b.n	8008262 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008236:	4b24      	ldr	r3, [pc, #144]	; (80082c8 <HAL_RCC_OscConfig+0x244>)
 8008238:	2200      	movs	r2, #0
 800823a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800823c:	f7fd fb3a 	bl	80058b4 <HAL_GetTick>
 8008240:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008242:	e008      	b.n	8008256 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008244:	f7fd fb36 	bl	80058b4 <HAL_GetTick>
 8008248:	4602      	mov	r2, r0
 800824a:	693b      	ldr	r3, [r7, #16]
 800824c:	1ad3      	subs	r3, r2, r3
 800824e:	2b02      	cmp	r3, #2
 8008250:	d901      	bls.n	8008256 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8008252:	2303      	movs	r3, #3
 8008254:	e187      	b.n	8008566 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008256:	4b1b      	ldr	r3, [pc, #108]	; (80082c4 <HAL_RCC_OscConfig+0x240>)
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	f003 0302 	and.w	r3, r3, #2
 800825e:	2b00      	cmp	r3, #0
 8008260:	d1f0      	bne.n	8008244 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	f003 0308 	and.w	r3, r3, #8
 800826a:	2b00      	cmp	r3, #0
 800826c:	d036      	beq.n	80082dc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	695b      	ldr	r3, [r3, #20]
 8008272:	2b00      	cmp	r3, #0
 8008274:	d016      	beq.n	80082a4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008276:	4b15      	ldr	r3, [pc, #84]	; (80082cc <HAL_RCC_OscConfig+0x248>)
 8008278:	2201      	movs	r2, #1
 800827a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800827c:	f7fd fb1a 	bl	80058b4 <HAL_GetTick>
 8008280:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008282:	e008      	b.n	8008296 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008284:	f7fd fb16 	bl	80058b4 <HAL_GetTick>
 8008288:	4602      	mov	r2, r0
 800828a:	693b      	ldr	r3, [r7, #16]
 800828c:	1ad3      	subs	r3, r2, r3
 800828e:	2b02      	cmp	r3, #2
 8008290:	d901      	bls.n	8008296 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8008292:	2303      	movs	r3, #3
 8008294:	e167      	b.n	8008566 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008296:	4b0b      	ldr	r3, [pc, #44]	; (80082c4 <HAL_RCC_OscConfig+0x240>)
 8008298:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800829a:	f003 0302 	and.w	r3, r3, #2
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d0f0      	beq.n	8008284 <HAL_RCC_OscConfig+0x200>
 80082a2:	e01b      	b.n	80082dc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80082a4:	4b09      	ldr	r3, [pc, #36]	; (80082cc <HAL_RCC_OscConfig+0x248>)
 80082a6:	2200      	movs	r2, #0
 80082a8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80082aa:	f7fd fb03 	bl	80058b4 <HAL_GetTick>
 80082ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80082b0:	e00e      	b.n	80082d0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80082b2:	f7fd faff 	bl	80058b4 <HAL_GetTick>
 80082b6:	4602      	mov	r2, r0
 80082b8:	693b      	ldr	r3, [r7, #16]
 80082ba:	1ad3      	subs	r3, r2, r3
 80082bc:	2b02      	cmp	r3, #2
 80082be:	d907      	bls.n	80082d0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80082c0:	2303      	movs	r3, #3
 80082c2:	e150      	b.n	8008566 <HAL_RCC_OscConfig+0x4e2>
 80082c4:	40023800 	.word	0x40023800
 80082c8:	42470000 	.word	0x42470000
 80082cc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80082d0:	4b88      	ldr	r3, [pc, #544]	; (80084f4 <HAL_RCC_OscConfig+0x470>)
 80082d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80082d4:	f003 0302 	and.w	r3, r3, #2
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d1ea      	bne.n	80082b2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	f003 0304 	and.w	r3, r3, #4
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	f000 8097 	beq.w	8008418 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80082ea:	2300      	movs	r3, #0
 80082ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80082ee:	4b81      	ldr	r3, [pc, #516]	; (80084f4 <HAL_RCC_OscConfig+0x470>)
 80082f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d10f      	bne.n	800831a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80082fa:	2300      	movs	r3, #0
 80082fc:	60bb      	str	r3, [r7, #8]
 80082fe:	4b7d      	ldr	r3, [pc, #500]	; (80084f4 <HAL_RCC_OscConfig+0x470>)
 8008300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008302:	4a7c      	ldr	r2, [pc, #496]	; (80084f4 <HAL_RCC_OscConfig+0x470>)
 8008304:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008308:	6413      	str	r3, [r2, #64]	; 0x40
 800830a:	4b7a      	ldr	r3, [pc, #488]	; (80084f4 <HAL_RCC_OscConfig+0x470>)
 800830c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800830e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008312:	60bb      	str	r3, [r7, #8]
 8008314:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008316:	2301      	movs	r3, #1
 8008318:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800831a:	4b77      	ldr	r3, [pc, #476]	; (80084f8 <HAL_RCC_OscConfig+0x474>)
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008322:	2b00      	cmp	r3, #0
 8008324:	d118      	bne.n	8008358 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008326:	4b74      	ldr	r3, [pc, #464]	; (80084f8 <HAL_RCC_OscConfig+0x474>)
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	4a73      	ldr	r2, [pc, #460]	; (80084f8 <HAL_RCC_OscConfig+0x474>)
 800832c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008330:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008332:	f7fd fabf 	bl	80058b4 <HAL_GetTick>
 8008336:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008338:	e008      	b.n	800834c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800833a:	f7fd fabb 	bl	80058b4 <HAL_GetTick>
 800833e:	4602      	mov	r2, r0
 8008340:	693b      	ldr	r3, [r7, #16]
 8008342:	1ad3      	subs	r3, r2, r3
 8008344:	2b02      	cmp	r3, #2
 8008346:	d901      	bls.n	800834c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8008348:	2303      	movs	r3, #3
 800834a:	e10c      	b.n	8008566 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800834c:	4b6a      	ldr	r3, [pc, #424]	; (80084f8 <HAL_RCC_OscConfig+0x474>)
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008354:	2b00      	cmp	r3, #0
 8008356:	d0f0      	beq.n	800833a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	689b      	ldr	r3, [r3, #8]
 800835c:	2b01      	cmp	r3, #1
 800835e:	d106      	bne.n	800836e <HAL_RCC_OscConfig+0x2ea>
 8008360:	4b64      	ldr	r3, [pc, #400]	; (80084f4 <HAL_RCC_OscConfig+0x470>)
 8008362:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008364:	4a63      	ldr	r2, [pc, #396]	; (80084f4 <HAL_RCC_OscConfig+0x470>)
 8008366:	f043 0301 	orr.w	r3, r3, #1
 800836a:	6713      	str	r3, [r2, #112]	; 0x70
 800836c:	e01c      	b.n	80083a8 <HAL_RCC_OscConfig+0x324>
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	689b      	ldr	r3, [r3, #8]
 8008372:	2b05      	cmp	r3, #5
 8008374:	d10c      	bne.n	8008390 <HAL_RCC_OscConfig+0x30c>
 8008376:	4b5f      	ldr	r3, [pc, #380]	; (80084f4 <HAL_RCC_OscConfig+0x470>)
 8008378:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800837a:	4a5e      	ldr	r2, [pc, #376]	; (80084f4 <HAL_RCC_OscConfig+0x470>)
 800837c:	f043 0304 	orr.w	r3, r3, #4
 8008380:	6713      	str	r3, [r2, #112]	; 0x70
 8008382:	4b5c      	ldr	r3, [pc, #368]	; (80084f4 <HAL_RCC_OscConfig+0x470>)
 8008384:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008386:	4a5b      	ldr	r2, [pc, #364]	; (80084f4 <HAL_RCC_OscConfig+0x470>)
 8008388:	f043 0301 	orr.w	r3, r3, #1
 800838c:	6713      	str	r3, [r2, #112]	; 0x70
 800838e:	e00b      	b.n	80083a8 <HAL_RCC_OscConfig+0x324>
 8008390:	4b58      	ldr	r3, [pc, #352]	; (80084f4 <HAL_RCC_OscConfig+0x470>)
 8008392:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008394:	4a57      	ldr	r2, [pc, #348]	; (80084f4 <HAL_RCC_OscConfig+0x470>)
 8008396:	f023 0301 	bic.w	r3, r3, #1
 800839a:	6713      	str	r3, [r2, #112]	; 0x70
 800839c:	4b55      	ldr	r3, [pc, #340]	; (80084f4 <HAL_RCC_OscConfig+0x470>)
 800839e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80083a0:	4a54      	ldr	r2, [pc, #336]	; (80084f4 <HAL_RCC_OscConfig+0x470>)
 80083a2:	f023 0304 	bic.w	r3, r3, #4
 80083a6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	689b      	ldr	r3, [r3, #8]
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d015      	beq.n	80083dc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80083b0:	f7fd fa80 	bl	80058b4 <HAL_GetTick>
 80083b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80083b6:	e00a      	b.n	80083ce <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80083b8:	f7fd fa7c 	bl	80058b4 <HAL_GetTick>
 80083bc:	4602      	mov	r2, r0
 80083be:	693b      	ldr	r3, [r7, #16]
 80083c0:	1ad3      	subs	r3, r2, r3
 80083c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80083c6:	4293      	cmp	r3, r2
 80083c8:	d901      	bls.n	80083ce <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80083ca:	2303      	movs	r3, #3
 80083cc:	e0cb      	b.n	8008566 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80083ce:	4b49      	ldr	r3, [pc, #292]	; (80084f4 <HAL_RCC_OscConfig+0x470>)
 80083d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80083d2:	f003 0302 	and.w	r3, r3, #2
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d0ee      	beq.n	80083b8 <HAL_RCC_OscConfig+0x334>
 80083da:	e014      	b.n	8008406 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80083dc:	f7fd fa6a 	bl	80058b4 <HAL_GetTick>
 80083e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80083e2:	e00a      	b.n	80083fa <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80083e4:	f7fd fa66 	bl	80058b4 <HAL_GetTick>
 80083e8:	4602      	mov	r2, r0
 80083ea:	693b      	ldr	r3, [r7, #16]
 80083ec:	1ad3      	subs	r3, r2, r3
 80083ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80083f2:	4293      	cmp	r3, r2
 80083f4:	d901      	bls.n	80083fa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80083f6:	2303      	movs	r3, #3
 80083f8:	e0b5      	b.n	8008566 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80083fa:	4b3e      	ldr	r3, [pc, #248]	; (80084f4 <HAL_RCC_OscConfig+0x470>)
 80083fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80083fe:	f003 0302 	and.w	r3, r3, #2
 8008402:	2b00      	cmp	r3, #0
 8008404:	d1ee      	bne.n	80083e4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008406:	7dfb      	ldrb	r3, [r7, #23]
 8008408:	2b01      	cmp	r3, #1
 800840a:	d105      	bne.n	8008418 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800840c:	4b39      	ldr	r3, [pc, #228]	; (80084f4 <HAL_RCC_OscConfig+0x470>)
 800840e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008410:	4a38      	ldr	r2, [pc, #224]	; (80084f4 <HAL_RCC_OscConfig+0x470>)
 8008412:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008416:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	699b      	ldr	r3, [r3, #24]
 800841c:	2b00      	cmp	r3, #0
 800841e:	f000 80a1 	beq.w	8008564 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008422:	4b34      	ldr	r3, [pc, #208]	; (80084f4 <HAL_RCC_OscConfig+0x470>)
 8008424:	689b      	ldr	r3, [r3, #8]
 8008426:	f003 030c 	and.w	r3, r3, #12
 800842a:	2b08      	cmp	r3, #8
 800842c:	d05c      	beq.n	80084e8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	699b      	ldr	r3, [r3, #24]
 8008432:	2b02      	cmp	r3, #2
 8008434:	d141      	bne.n	80084ba <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008436:	4b31      	ldr	r3, [pc, #196]	; (80084fc <HAL_RCC_OscConfig+0x478>)
 8008438:	2200      	movs	r2, #0
 800843a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800843c:	f7fd fa3a 	bl	80058b4 <HAL_GetTick>
 8008440:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008442:	e008      	b.n	8008456 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008444:	f7fd fa36 	bl	80058b4 <HAL_GetTick>
 8008448:	4602      	mov	r2, r0
 800844a:	693b      	ldr	r3, [r7, #16]
 800844c:	1ad3      	subs	r3, r2, r3
 800844e:	2b02      	cmp	r3, #2
 8008450:	d901      	bls.n	8008456 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8008452:	2303      	movs	r3, #3
 8008454:	e087      	b.n	8008566 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008456:	4b27      	ldr	r3, [pc, #156]	; (80084f4 <HAL_RCC_OscConfig+0x470>)
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800845e:	2b00      	cmp	r3, #0
 8008460:	d1f0      	bne.n	8008444 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	69da      	ldr	r2, [r3, #28]
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	6a1b      	ldr	r3, [r3, #32]
 800846a:	431a      	orrs	r2, r3
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008470:	019b      	lsls	r3, r3, #6
 8008472:	431a      	orrs	r2, r3
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008478:	085b      	lsrs	r3, r3, #1
 800847a:	3b01      	subs	r3, #1
 800847c:	041b      	lsls	r3, r3, #16
 800847e:	431a      	orrs	r2, r3
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008484:	061b      	lsls	r3, r3, #24
 8008486:	491b      	ldr	r1, [pc, #108]	; (80084f4 <HAL_RCC_OscConfig+0x470>)
 8008488:	4313      	orrs	r3, r2
 800848a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800848c:	4b1b      	ldr	r3, [pc, #108]	; (80084fc <HAL_RCC_OscConfig+0x478>)
 800848e:	2201      	movs	r2, #1
 8008490:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008492:	f7fd fa0f 	bl	80058b4 <HAL_GetTick>
 8008496:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008498:	e008      	b.n	80084ac <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800849a:	f7fd fa0b 	bl	80058b4 <HAL_GetTick>
 800849e:	4602      	mov	r2, r0
 80084a0:	693b      	ldr	r3, [r7, #16]
 80084a2:	1ad3      	subs	r3, r2, r3
 80084a4:	2b02      	cmp	r3, #2
 80084a6:	d901      	bls.n	80084ac <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80084a8:	2303      	movs	r3, #3
 80084aa:	e05c      	b.n	8008566 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80084ac:	4b11      	ldr	r3, [pc, #68]	; (80084f4 <HAL_RCC_OscConfig+0x470>)
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d0f0      	beq.n	800849a <HAL_RCC_OscConfig+0x416>
 80084b8:	e054      	b.n	8008564 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80084ba:	4b10      	ldr	r3, [pc, #64]	; (80084fc <HAL_RCC_OscConfig+0x478>)
 80084bc:	2200      	movs	r2, #0
 80084be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80084c0:	f7fd f9f8 	bl	80058b4 <HAL_GetTick>
 80084c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80084c6:	e008      	b.n	80084da <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80084c8:	f7fd f9f4 	bl	80058b4 <HAL_GetTick>
 80084cc:	4602      	mov	r2, r0
 80084ce:	693b      	ldr	r3, [r7, #16]
 80084d0:	1ad3      	subs	r3, r2, r3
 80084d2:	2b02      	cmp	r3, #2
 80084d4:	d901      	bls.n	80084da <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80084d6:	2303      	movs	r3, #3
 80084d8:	e045      	b.n	8008566 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80084da:	4b06      	ldr	r3, [pc, #24]	; (80084f4 <HAL_RCC_OscConfig+0x470>)
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d1f0      	bne.n	80084c8 <HAL_RCC_OscConfig+0x444>
 80084e6:	e03d      	b.n	8008564 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	699b      	ldr	r3, [r3, #24]
 80084ec:	2b01      	cmp	r3, #1
 80084ee:	d107      	bne.n	8008500 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80084f0:	2301      	movs	r3, #1
 80084f2:	e038      	b.n	8008566 <HAL_RCC_OscConfig+0x4e2>
 80084f4:	40023800 	.word	0x40023800
 80084f8:	40007000 	.word	0x40007000
 80084fc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008500:	4b1b      	ldr	r3, [pc, #108]	; (8008570 <HAL_RCC_OscConfig+0x4ec>)
 8008502:	685b      	ldr	r3, [r3, #4]
 8008504:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	699b      	ldr	r3, [r3, #24]
 800850a:	2b01      	cmp	r3, #1
 800850c:	d028      	beq.n	8008560 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008518:	429a      	cmp	r2, r3
 800851a:	d121      	bne.n	8008560 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008526:	429a      	cmp	r2, r3
 8008528:	d11a      	bne.n	8008560 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800852a:	68fa      	ldr	r2, [r7, #12]
 800852c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8008530:	4013      	ands	r3, r2
 8008532:	687a      	ldr	r2, [r7, #4]
 8008534:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008536:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008538:	4293      	cmp	r3, r2
 800853a:	d111      	bne.n	8008560 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008546:	085b      	lsrs	r3, r3, #1
 8008548:	3b01      	subs	r3, #1
 800854a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800854c:	429a      	cmp	r2, r3
 800854e:	d107      	bne.n	8008560 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800855a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800855c:	429a      	cmp	r2, r3
 800855e:	d001      	beq.n	8008564 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8008560:	2301      	movs	r3, #1
 8008562:	e000      	b.n	8008566 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8008564:	2300      	movs	r3, #0
}
 8008566:	4618      	mov	r0, r3
 8008568:	3718      	adds	r7, #24
 800856a:	46bd      	mov	sp, r7
 800856c:	bd80      	pop	{r7, pc}
 800856e:	bf00      	nop
 8008570:	40023800 	.word	0x40023800

08008574 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008574:	b580      	push	{r7, lr}
 8008576:	b084      	sub	sp, #16
 8008578:	af00      	add	r7, sp, #0
 800857a:	6078      	str	r0, [r7, #4]
 800857c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	2b00      	cmp	r3, #0
 8008582:	d101      	bne.n	8008588 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008584:	2301      	movs	r3, #1
 8008586:	e0cc      	b.n	8008722 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008588:	4b68      	ldr	r3, [pc, #416]	; (800872c <HAL_RCC_ClockConfig+0x1b8>)
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	f003 0307 	and.w	r3, r3, #7
 8008590:	683a      	ldr	r2, [r7, #0]
 8008592:	429a      	cmp	r2, r3
 8008594:	d90c      	bls.n	80085b0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008596:	4b65      	ldr	r3, [pc, #404]	; (800872c <HAL_RCC_ClockConfig+0x1b8>)
 8008598:	683a      	ldr	r2, [r7, #0]
 800859a:	b2d2      	uxtb	r2, r2
 800859c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800859e:	4b63      	ldr	r3, [pc, #396]	; (800872c <HAL_RCC_ClockConfig+0x1b8>)
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	f003 0307 	and.w	r3, r3, #7
 80085a6:	683a      	ldr	r2, [r7, #0]
 80085a8:	429a      	cmp	r2, r3
 80085aa:	d001      	beq.n	80085b0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80085ac:	2301      	movs	r3, #1
 80085ae:	e0b8      	b.n	8008722 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	f003 0302 	and.w	r3, r3, #2
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d020      	beq.n	80085fe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	f003 0304 	and.w	r3, r3, #4
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d005      	beq.n	80085d4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80085c8:	4b59      	ldr	r3, [pc, #356]	; (8008730 <HAL_RCC_ClockConfig+0x1bc>)
 80085ca:	689b      	ldr	r3, [r3, #8]
 80085cc:	4a58      	ldr	r2, [pc, #352]	; (8008730 <HAL_RCC_ClockConfig+0x1bc>)
 80085ce:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80085d2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	f003 0308 	and.w	r3, r3, #8
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d005      	beq.n	80085ec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80085e0:	4b53      	ldr	r3, [pc, #332]	; (8008730 <HAL_RCC_ClockConfig+0x1bc>)
 80085e2:	689b      	ldr	r3, [r3, #8]
 80085e4:	4a52      	ldr	r2, [pc, #328]	; (8008730 <HAL_RCC_ClockConfig+0x1bc>)
 80085e6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80085ea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80085ec:	4b50      	ldr	r3, [pc, #320]	; (8008730 <HAL_RCC_ClockConfig+0x1bc>)
 80085ee:	689b      	ldr	r3, [r3, #8]
 80085f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	689b      	ldr	r3, [r3, #8]
 80085f8:	494d      	ldr	r1, [pc, #308]	; (8008730 <HAL_RCC_ClockConfig+0x1bc>)
 80085fa:	4313      	orrs	r3, r2
 80085fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	f003 0301 	and.w	r3, r3, #1
 8008606:	2b00      	cmp	r3, #0
 8008608:	d044      	beq.n	8008694 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	685b      	ldr	r3, [r3, #4]
 800860e:	2b01      	cmp	r3, #1
 8008610:	d107      	bne.n	8008622 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008612:	4b47      	ldr	r3, [pc, #284]	; (8008730 <HAL_RCC_ClockConfig+0x1bc>)
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800861a:	2b00      	cmp	r3, #0
 800861c:	d119      	bne.n	8008652 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800861e:	2301      	movs	r3, #1
 8008620:	e07f      	b.n	8008722 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	685b      	ldr	r3, [r3, #4]
 8008626:	2b02      	cmp	r3, #2
 8008628:	d003      	beq.n	8008632 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800862e:	2b03      	cmp	r3, #3
 8008630:	d107      	bne.n	8008642 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008632:	4b3f      	ldr	r3, [pc, #252]	; (8008730 <HAL_RCC_ClockConfig+0x1bc>)
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800863a:	2b00      	cmp	r3, #0
 800863c:	d109      	bne.n	8008652 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800863e:	2301      	movs	r3, #1
 8008640:	e06f      	b.n	8008722 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008642:	4b3b      	ldr	r3, [pc, #236]	; (8008730 <HAL_RCC_ClockConfig+0x1bc>)
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	f003 0302 	and.w	r3, r3, #2
 800864a:	2b00      	cmp	r3, #0
 800864c:	d101      	bne.n	8008652 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800864e:	2301      	movs	r3, #1
 8008650:	e067      	b.n	8008722 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008652:	4b37      	ldr	r3, [pc, #220]	; (8008730 <HAL_RCC_ClockConfig+0x1bc>)
 8008654:	689b      	ldr	r3, [r3, #8]
 8008656:	f023 0203 	bic.w	r2, r3, #3
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	685b      	ldr	r3, [r3, #4]
 800865e:	4934      	ldr	r1, [pc, #208]	; (8008730 <HAL_RCC_ClockConfig+0x1bc>)
 8008660:	4313      	orrs	r3, r2
 8008662:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008664:	f7fd f926 	bl	80058b4 <HAL_GetTick>
 8008668:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800866a:	e00a      	b.n	8008682 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800866c:	f7fd f922 	bl	80058b4 <HAL_GetTick>
 8008670:	4602      	mov	r2, r0
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	1ad3      	subs	r3, r2, r3
 8008676:	f241 3288 	movw	r2, #5000	; 0x1388
 800867a:	4293      	cmp	r3, r2
 800867c:	d901      	bls.n	8008682 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800867e:	2303      	movs	r3, #3
 8008680:	e04f      	b.n	8008722 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008682:	4b2b      	ldr	r3, [pc, #172]	; (8008730 <HAL_RCC_ClockConfig+0x1bc>)
 8008684:	689b      	ldr	r3, [r3, #8]
 8008686:	f003 020c 	and.w	r2, r3, #12
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	685b      	ldr	r3, [r3, #4]
 800868e:	009b      	lsls	r3, r3, #2
 8008690:	429a      	cmp	r2, r3
 8008692:	d1eb      	bne.n	800866c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008694:	4b25      	ldr	r3, [pc, #148]	; (800872c <HAL_RCC_ClockConfig+0x1b8>)
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	f003 0307 	and.w	r3, r3, #7
 800869c:	683a      	ldr	r2, [r7, #0]
 800869e:	429a      	cmp	r2, r3
 80086a0:	d20c      	bcs.n	80086bc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80086a2:	4b22      	ldr	r3, [pc, #136]	; (800872c <HAL_RCC_ClockConfig+0x1b8>)
 80086a4:	683a      	ldr	r2, [r7, #0]
 80086a6:	b2d2      	uxtb	r2, r2
 80086a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80086aa:	4b20      	ldr	r3, [pc, #128]	; (800872c <HAL_RCC_ClockConfig+0x1b8>)
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	f003 0307 	and.w	r3, r3, #7
 80086b2:	683a      	ldr	r2, [r7, #0]
 80086b4:	429a      	cmp	r2, r3
 80086b6:	d001      	beq.n	80086bc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80086b8:	2301      	movs	r3, #1
 80086ba:	e032      	b.n	8008722 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	f003 0304 	and.w	r3, r3, #4
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d008      	beq.n	80086da <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80086c8:	4b19      	ldr	r3, [pc, #100]	; (8008730 <HAL_RCC_ClockConfig+0x1bc>)
 80086ca:	689b      	ldr	r3, [r3, #8]
 80086cc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	68db      	ldr	r3, [r3, #12]
 80086d4:	4916      	ldr	r1, [pc, #88]	; (8008730 <HAL_RCC_ClockConfig+0x1bc>)
 80086d6:	4313      	orrs	r3, r2
 80086d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	f003 0308 	and.w	r3, r3, #8
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d009      	beq.n	80086fa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80086e6:	4b12      	ldr	r3, [pc, #72]	; (8008730 <HAL_RCC_ClockConfig+0x1bc>)
 80086e8:	689b      	ldr	r3, [r3, #8]
 80086ea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	691b      	ldr	r3, [r3, #16]
 80086f2:	00db      	lsls	r3, r3, #3
 80086f4:	490e      	ldr	r1, [pc, #56]	; (8008730 <HAL_RCC_ClockConfig+0x1bc>)
 80086f6:	4313      	orrs	r3, r2
 80086f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80086fa:	f000 f821 	bl	8008740 <HAL_RCC_GetSysClockFreq>
 80086fe:	4602      	mov	r2, r0
 8008700:	4b0b      	ldr	r3, [pc, #44]	; (8008730 <HAL_RCC_ClockConfig+0x1bc>)
 8008702:	689b      	ldr	r3, [r3, #8]
 8008704:	091b      	lsrs	r3, r3, #4
 8008706:	f003 030f 	and.w	r3, r3, #15
 800870a:	490a      	ldr	r1, [pc, #40]	; (8008734 <HAL_RCC_ClockConfig+0x1c0>)
 800870c:	5ccb      	ldrb	r3, [r1, r3]
 800870e:	fa22 f303 	lsr.w	r3, r2, r3
 8008712:	4a09      	ldr	r2, [pc, #36]	; (8008738 <HAL_RCC_ClockConfig+0x1c4>)
 8008714:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8008716:	4b09      	ldr	r3, [pc, #36]	; (800873c <HAL_RCC_ClockConfig+0x1c8>)
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	4618      	mov	r0, r3
 800871c:	f7fd f886 	bl	800582c <HAL_InitTick>

  return HAL_OK;
 8008720:	2300      	movs	r3, #0
}
 8008722:	4618      	mov	r0, r3
 8008724:	3710      	adds	r7, #16
 8008726:	46bd      	mov	sp, r7
 8008728:	bd80      	pop	{r7, pc}
 800872a:	bf00      	nop
 800872c:	40023c00 	.word	0x40023c00
 8008730:	40023800 	.word	0x40023800
 8008734:	08016edc 	.word	0x08016edc
 8008738:	20000040 	.word	0x20000040
 800873c:	20000088 	.word	0x20000088

08008740 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008740:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008744:	b090      	sub	sp, #64	; 0x40
 8008746:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8008748:	2300      	movs	r3, #0
 800874a:	637b      	str	r3, [r7, #52]	; 0x34
 800874c:	2300      	movs	r3, #0
 800874e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008750:	2300      	movs	r3, #0
 8008752:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8008754:	2300      	movs	r3, #0
 8008756:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008758:	4b59      	ldr	r3, [pc, #356]	; (80088c0 <HAL_RCC_GetSysClockFreq+0x180>)
 800875a:	689b      	ldr	r3, [r3, #8]
 800875c:	f003 030c 	and.w	r3, r3, #12
 8008760:	2b08      	cmp	r3, #8
 8008762:	d00d      	beq.n	8008780 <HAL_RCC_GetSysClockFreq+0x40>
 8008764:	2b08      	cmp	r3, #8
 8008766:	f200 80a1 	bhi.w	80088ac <HAL_RCC_GetSysClockFreq+0x16c>
 800876a:	2b00      	cmp	r3, #0
 800876c:	d002      	beq.n	8008774 <HAL_RCC_GetSysClockFreq+0x34>
 800876e:	2b04      	cmp	r3, #4
 8008770:	d003      	beq.n	800877a <HAL_RCC_GetSysClockFreq+0x3a>
 8008772:	e09b      	b.n	80088ac <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008774:	4b53      	ldr	r3, [pc, #332]	; (80088c4 <HAL_RCC_GetSysClockFreq+0x184>)
 8008776:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8008778:	e09b      	b.n	80088b2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800877a:	4b53      	ldr	r3, [pc, #332]	; (80088c8 <HAL_RCC_GetSysClockFreq+0x188>)
 800877c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800877e:	e098      	b.n	80088b2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008780:	4b4f      	ldr	r3, [pc, #316]	; (80088c0 <HAL_RCC_GetSysClockFreq+0x180>)
 8008782:	685b      	ldr	r3, [r3, #4]
 8008784:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008788:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800878a:	4b4d      	ldr	r3, [pc, #308]	; (80088c0 <HAL_RCC_GetSysClockFreq+0x180>)
 800878c:	685b      	ldr	r3, [r3, #4]
 800878e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008792:	2b00      	cmp	r3, #0
 8008794:	d028      	beq.n	80087e8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008796:	4b4a      	ldr	r3, [pc, #296]	; (80088c0 <HAL_RCC_GetSysClockFreq+0x180>)
 8008798:	685b      	ldr	r3, [r3, #4]
 800879a:	099b      	lsrs	r3, r3, #6
 800879c:	2200      	movs	r2, #0
 800879e:	623b      	str	r3, [r7, #32]
 80087a0:	627a      	str	r2, [r7, #36]	; 0x24
 80087a2:	6a3b      	ldr	r3, [r7, #32]
 80087a4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80087a8:	2100      	movs	r1, #0
 80087aa:	4b47      	ldr	r3, [pc, #284]	; (80088c8 <HAL_RCC_GetSysClockFreq+0x188>)
 80087ac:	fb03 f201 	mul.w	r2, r3, r1
 80087b0:	2300      	movs	r3, #0
 80087b2:	fb00 f303 	mul.w	r3, r0, r3
 80087b6:	4413      	add	r3, r2
 80087b8:	4a43      	ldr	r2, [pc, #268]	; (80088c8 <HAL_RCC_GetSysClockFreq+0x188>)
 80087ba:	fba0 1202 	umull	r1, r2, r0, r2
 80087be:	62fa      	str	r2, [r7, #44]	; 0x2c
 80087c0:	460a      	mov	r2, r1
 80087c2:	62ba      	str	r2, [r7, #40]	; 0x28
 80087c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80087c6:	4413      	add	r3, r2
 80087c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80087ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087cc:	2200      	movs	r2, #0
 80087ce:	61bb      	str	r3, [r7, #24]
 80087d0:	61fa      	str	r2, [r7, #28]
 80087d2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80087d6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80087da:	f7f8 fa3d 	bl	8000c58 <__aeabi_uldivmod>
 80087de:	4602      	mov	r2, r0
 80087e0:	460b      	mov	r3, r1
 80087e2:	4613      	mov	r3, r2
 80087e4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80087e6:	e053      	b.n	8008890 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80087e8:	4b35      	ldr	r3, [pc, #212]	; (80088c0 <HAL_RCC_GetSysClockFreq+0x180>)
 80087ea:	685b      	ldr	r3, [r3, #4]
 80087ec:	099b      	lsrs	r3, r3, #6
 80087ee:	2200      	movs	r2, #0
 80087f0:	613b      	str	r3, [r7, #16]
 80087f2:	617a      	str	r2, [r7, #20]
 80087f4:	693b      	ldr	r3, [r7, #16]
 80087f6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80087fa:	f04f 0b00 	mov.w	fp, #0
 80087fe:	4652      	mov	r2, sl
 8008800:	465b      	mov	r3, fp
 8008802:	f04f 0000 	mov.w	r0, #0
 8008806:	f04f 0100 	mov.w	r1, #0
 800880a:	0159      	lsls	r1, r3, #5
 800880c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008810:	0150      	lsls	r0, r2, #5
 8008812:	4602      	mov	r2, r0
 8008814:	460b      	mov	r3, r1
 8008816:	ebb2 080a 	subs.w	r8, r2, sl
 800881a:	eb63 090b 	sbc.w	r9, r3, fp
 800881e:	f04f 0200 	mov.w	r2, #0
 8008822:	f04f 0300 	mov.w	r3, #0
 8008826:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800882a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800882e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8008832:	ebb2 0408 	subs.w	r4, r2, r8
 8008836:	eb63 0509 	sbc.w	r5, r3, r9
 800883a:	f04f 0200 	mov.w	r2, #0
 800883e:	f04f 0300 	mov.w	r3, #0
 8008842:	00eb      	lsls	r3, r5, #3
 8008844:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008848:	00e2      	lsls	r2, r4, #3
 800884a:	4614      	mov	r4, r2
 800884c:	461d      	mov	r5, r3
 800884e:	eb14 030a 	adds.w	r3, r4, sl
 8008852:	603b      	str	r3, [r7, #0]
 8008854:	eb45 030b 	adc.w	r3, r5, fp
 8008858:	607b      	str	r3, [r7, #4]
 800885a:	f04f 0200 	mov.w	r2, #0
 800885e:	f04f 0300 	mov.w	r3, #0
 8008862:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008866:	4629      	mov	r1, r5
 8008868:	028b      	lsls	r3, r1, #10
 800886a:	4621      	mov	r1, r4
 800886c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008870:	4621      	mov	r1, r4
 8008872:	028a      	lsls	r2, r1, #10
 8008874:	4610      	mov	r0, r2
 8008876:	4619      	mov	r1, r3
 8008878:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800887a:	2200      	movs	r2, #0
 800887c:	60bb      	str	r3, [r7, #8]
 800887e:	60fa      	str	r2, [r7, #12]
 8008880:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008884:	f7f8 f9e8 	bl	8000c58 <__aeabi_uldivmod>
 8008888:	4602      	mov	r2, r0
 800888a:	460b      	mov	r3, r1
 800888c:	4613      	mov	r3, r2
 800888e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008890:	4b0b      	ldr	r3, [pc, #44]	; (80088c0 <HAL_RCC_GetSysClockFreq+0x180>)
 8008892:	685b      	ldr	r3, [r3, #4]
 8008894:	0c1b      	lsrs	r3, r3, #16
 8008896:	f003 0303 	and.w	r3, r3, #3
 800889a:	3301      	adds	r3, #1
 800889c:	005b      	lsls	r3, r3, #1
 800889e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80088a0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80088a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80088a8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80088aa:	e002      	b.n	80088b2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80088ac:	4b05      	ldr	r3, [pc, #20]	; (80088c4 <HAL_RCC_GetSysClockFreq+0x184>)
 80088ae:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80088b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80088b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80088b4:	4618      	mov	r0, r3
 80088b6:	3740      	adds	r7, #64	; 0x40
 80088b8:	46bd      	mov	sp, r7
 80088ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80088be:	bf00      	nop
 80088c0:	40023800 	.word	0x40023800
 80088c4:	00f42400 	.word	0x00f42400
 80088c8:	017d7840 	.word	0x017d7840

080088cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80088cc:	b480      	push	{r7}
 80088ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80088d0:	4b03      	ldr	r3, [pc, #12]	; (80088e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80088d2:	681b      	ldr	r3, [r3, #0]
}
 80088d4:	4618      	mov	r0, r3
 80088d6:	46bd      	mov	sp, r7
 80088d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088dc:	4770      	bx	lr
 80088de:	bf00      	nop
 80088e0:	20000040 	.word	0x20000040

080088e4 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80088e4:	b580      	push	{r7, lr}
 80088e6:	b082      	sub	sp, #8
 80088e8:	af00      	add	r7, sp, #0
 80088ea:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d101      	bne.n	80088f6 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80088f2:	2301      	movs	r3, #1
 80088f4:	e022      	b.n	800893c <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80088fc:	b2db      	uxtb	r3, r3
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d105      	bne.n	800890e <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	2200      	movs	r2, #0
 8008906:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8008908:	6878      	ldr	r0, [r7, #4]
 800890a:	f7f8 fe9d 	bl	8001648 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	2203      	movs	r2, #3
 8008912:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8008916:	6878      	ldr	r0, [r7, #4]
 8008918:	f000 f814 	bl	8008944 <HAL_SD_InitCard>
 800891c:	4603      	mov	r3, r0
 800891e:	2b00      	cmp	r3, #0
 8008920:	d001      	beq.n	8008926 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8008922:	2301      	movs	r3, #1
 8008924:	e00a      	b.n	800893c <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	2200      	movs	r2, #0
 800892a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	2200      	movs	r2, #0
 8008930:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	2201      	movs	r2, #1
 8008936:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800893a:	2300      	movs	r3, #0
}
 800893c:	4618      	mov	r0, r3
 800893e:	3708      	adds	r7, #8
 8008940:	46bd      	mov	sp, r7
 8008942:	bd80      	pop	{r7, pc}

08008944 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008944:	b5b0      	push	{r4, r5, r7, lr}
 8008946:	b08e      	sub	sp, #56	; 0x38
 8008948:	af04      	add	r7, sp, #16
 800894a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 800894c:	2300      	movs	r3, #0
 800894e:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8008950:	2300      	movs	r3, #0
 8008952:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8008954:	2300      	movs	r3, #0
 8008956:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8008958:	2300      	movs	r3, #0
 800895a:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800895c:	2300      	movs	r3, #0
 800895e:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8008960:	2376      	movs	r3, #118	; 0x76
 8008962:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	681d      	ldr	r5, [r3, #0]
 8008968:	466c      	mov	r4, sp
 800896a:	f107 0314 	add.w	r3, r7, #20
 800896e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008972:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008976:	f107 0308 	add.w	r3, r7, #8
 800897a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800897c:	4628      	mov	r0, r5
 800897e:	f002 f851 	bl	800aa24 <SDIO_Init>
 8008982:	4603      	mov	r3, r0
 8008984:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8008988:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800898c:	2b00      	cmp	r3, #0
 800898e:	d001      	beq.n	8008994 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8008990:	2301      	movs	r3, #1
 8008992:	e04f      	b.n	8008a34 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8008994:	4b29      	ldr	r3, [pc, #164]	; (8008a3c <HAL_SD_InitCard+0xf8>)
 8008996:	2200      	movs	r2, #0
 8008998:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	4618      	mov	r0, r3
 80089a0:	f002 f889 	bl	800aab6 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 80089a4:	4b25      	ldr	r3, [pc, #148]	; (8008a3c <HAL_SD_InitCard+0xf8>)
 80089a6:	2201      	movs	r2, #1
 80089a8:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 80089aa:	2002      	movs	r0, #2
 80089ac:	f7fc ff8e 	bl	80058cc <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80089b0:	6878      	ldr	r0, [r7, #4]
 80089b2:	f001 f80f 	bl	80099d4 <SD_PowerON>
 80089b6:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80089b8:	6a3b      	ldr	r3, [r7, #32]
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d00b      	beq.n	80089d6 <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	2201      	movs	r2, #1
 80089c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80089ca:	6a3b      	ldr	r3, [r7, #32]
 80089cc:	431a      	orrs	r2, r3
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80089d2:	2301      	movs	r3, #1
 80089d4:	e02e      	b.n	8008a34 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80089d6:	6878      	ldr	r0, [r7, #4]
 80089d8:	f000 ff2e 	bl	8009838 <SD_InitCard>
 80089dc:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80089de:	6a3b      	ldr	r3, [r7, #32]
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d00b      	beq.n	80089fc <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	2201      	movs	r2, #1
 80089e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80089f0:	6a3b      	ldr	r3, [r7, #32]
 80089f2:	431a      	orrs	r2, r3
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80089f8:	2301      	movs	r3, #1
 80089fa:	e01b      	b.n	8008a34 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008a04:	4618      	mov	r0, r3
 8008a06:	f002 f8e8 	bl	800abda <SDMMC_CmdBlockLength>
 8008a0a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008a0c:	6a3b      	ldr	r3, [r7, #32]
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d00f      	beq.n	8008a32 <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	4a0a      	ldr	r2, [pc, #40]	; (8008a40 <HAL_SD_InitCard+0xfc>)
 8008a18:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008a1e:	6a3b      	ldr	r3, [r7, #32]
 8008a20:	431a      	orrs	r2, r3
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	2201      	movs	r2, #1
 8008a2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8008a2e:	2301      	movs	r3, #1
 8008a30:	e000      	b.n	8008a34 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 8008a32:	2300      	movs	r3, #0
}
 8008a34:	4618      	mov	r0, r3
 8008a36:	3728      	adds	r7, #40	; 0x28
 8008a38:	46bd      	mov	sp, r7
 8008a3a:	bdb0      	pop	{r4, r5, r7, pc}
 8008a3c:	422580a0 	.word	0x422580a0
 8008a40:	004005ff 	.word	0x004005ff

08008a44 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8008a44:	b580      	push	{r7, lr}
 8008a46:	b08c      	sub	sp, #48	; 0x30
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	60f8      	str	r0, [r7, #12]
 8008a4c:	60b9      	str	r1, [r7, #8]
 8008a4e:	607a      	str	r2, [r7, #4]
 8008a50:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8008a56:	68bb      	ldr	r3, [r7, #8]
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d107      	bne.n	8008a6c <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a60:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008a68:	2301      	movs	r3, #1
 8008a6a:	e0c0      	b.n	8008bee <HAL_SD_ReadBlocks_DMA+0x1aa>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008a72:	b2db      	uxtb	r3, r3
 8008a74:	2b01      	cmp	r3, #1
 8008a76:	f040 80b9 	bne.w	8008bec <HAL_SD_ReadBlocks_DMA+0x1a8>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	2200      	movs	r2, #0
 8008a7e:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8008a80:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008a82:	683b      	ldr	r3, [r7, #0]
 8008a84:	441a      	add	r2, r3
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008a8a:	429a      	cmp	r2, r3
 8008a8c:	d907      	bls.n	8008a9e <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a92:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8008a9a:	2301      	movs	r3, #1
 8008a9c:	e0a7      	b.n	8008bee <HAL_SD_ReadBlocks_DMA+0x1aa>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	2203      	movs	r2, #3
 8008aa2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	2200      	movs	r2, #0
 8008aac:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ab4:	68fa      	ldr	r2, [r7, #12]
 8008ab6:	6812      	ldr	r2, [r2, #0]
 8008ab8:	f443 734a 	orr.w	r3, r3, #808	; 0x328
 8008abc:	f043 0302 	orr.w	r3, r3, #2
 8008ac0:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ac6:	4a4c      	ldr	r2, [pc, #304]	; (8008bf8 <HAL_SD_ReadBlocks_DMA+0x1b4>)
 8008ac8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ace:	4a4b      	ldr	r2, [pc, #300]	; (8008bfc <HAL_SD_ReadBlocks_DMA+0x1b8>)
 8008ad0:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ad6:	2200      	movs	r2, #0
 8008ad8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ade:	2200      	movs	r2, #0
 8008ae0:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008af2:	689a      	ldr	r2, [r3, #8]
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	430a      	orrs	r2, r1
 8008afc:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	3380      	adds	r3, #128	; 0x80
 8008b08:	4619      	mov	r1, r3
 8008b0a:	68ba      	ldr	r2, [r7, #8]
 8008b0c:	683b      	ldr	r3, [r7, #0]
 8008b0e:	025b      	lsls	r3, r3, #9
 8008b10:	089b      	lsrs	r3, r3, #2
 8008b12:	f7fd f8bf 	bl	8005c94 <HAL_DMA_Start_IT>
 8008b16:	4603      	mov	r3, r0
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d017      	beq.n	8008b4c <HAL_SD_ReadBlocks_DMA+0x108>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 8008b2a:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	4a33      	ldr	r2, [pc, #204]	; (8008c00 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8008b32:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b38:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	2201      	movs	r2, #1
 8008b44:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8008b48:	2301      	movs	r3, #1
 8008b4a:	e050      	b.n	8008bee <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8008b4c:	4b2d      	ldr	r3, [pc, #180]	; (8008c04 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 8008b4e:	2201      	movs	r2, #1
 8008b50:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b56:	2b01      	cmp	r3, #1
 8008b58:	d002      	beq.n	8008b60 <HAL_SD_ReadBlocks_DMA+0x11c>
      {
        add *= 512U;
 8008b5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b5c:	025b      	lsls	r3, r3, #9
 8008b5e:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008b60:	f04f 33ff 	mov.w	r3, #4294967295
 8008b64:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8008b66:	683b      	ldr	r3, [r7, #0]
 8008b68:	025b      	lsls	r3, r3, #9
 8008b6a:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8008b6c:	2390      	movs	r3, #144	; 0x90
 8008b6e:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8008b70:	2302      	movs	r3, #2
 8008b72:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8008b74:	2300      	movs	r3, #0
 8008b76:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8008b78:	2301      	movs	r3, #1
 8008b7a:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	f107 0210 	add.w	r2, r7, #16
 8008b84:	4611      	mov	r1, r2
 8008b86:	4618      	mov	r0, r3
 8008b88:	f001 fffb 	bl	800ab82 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8008b8c:	683b      	ldr	r3, [r7, #0]
 8008b8e:	2b01      	cmp	r3, #1
 8008b90:	d90a      	bls.n	8008ba8 <HAL_SD_ReadBlocks_DMA+0x164>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	2282      	movs	r2, #130	; 0x82
 8008b96:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008b9e:	4618      	mov	r0, r3
 8008ba0:	f002 f85f 	bl	800ac62 <SDMMC_CmdReadMultiBlock>
 8008ba4:	62f8      	str	r0, [r7, #44]	; 0x2c
 8008ba6:	e009      	b.n	8008bbc <HAL_SD_ReadBlocks_DMA+0x178>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	2281      	movs	r2, #129	; 0x81
 8008bac:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008bb4:	4618      	mov	r0, r3
 8008bb6:	f002 f832 	bl	800ac1e <SDMMC_CmdReadSingleBlock>
 8008bba:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8008bbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d012      	beq.n	8008be8 <HAL_SD_ReadBlocks_DMA+0x1a4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	4a0e      	ldr	r2, [pc, #56]	; (8008c00 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8008bc8:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008bce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bd0:	431a      	orrs	r2, r3
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	2201      	movs	r2, #1
 8008bda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	2200      	movs	r2, #0
 8008be2:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8008be4:	2301      	movs	r3, #1
 8008be6:	e002      	b.n	8008bee <HAL_SD_ReadBlocks_DMA+0x1aa>
      }

      return HAL_OK;
 8008be8:	2300      	movs	r3, #0
 8008bea:	e000      	b.n	8008bee <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
  }
  else
  {
    return HAL_BUSY;
 8008bec:	2302      	movs	r3, #2
  }
}
 8008bee:	4618      	mov	r0, r3
 8008bf0:	3730      	adds	r7, #48	; 0x30
 8008bf2:	46bd      	mov	sp, r7
 8008bf4:	bd80      	pop	{r7, pc}
 8008bf6:	bf00      	nop
 8008bf8:	08009647 	.word	0x08009647
 8008bfc:	080096b9 	.word	0x080096b9
 8008c00:	004005ff 	.word	0x004005ff
 8008c04:	4225858c 	.word	0x4225858c

08008c08 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8008c08:	b580      	push	{r7, lr}
 8008c0a:	b08c      	sub	sp, #48	; 0x30
 8008c0c:	af00      	add	r7, sp, #0
 8008c0e:	60f8      	str	r0, [r7, #12]
 8008c10:	60b9      	str	r1, [r7, #8]
 8008c12:	607a      	str	r2, [r7, #4]
 8008c14:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8008c1a:	68bb      	ldr	r3, [r7, #8]
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d107      	bne.n	8008c30 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c24:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008c2c:	2301      	movs	r3, #1
 8008c2e:	e0c5      	b.n	8008dbc <HAL_SD_WriteBlocks_DMA+0x1b4>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008c36:	b2db      	uxtb	r3, r3
 8008c38:	2b01      	cmp	r3, #1
 8008c3a:	f040 80be 	bne.w	8008dba <HAL_SD_WriteBlocks_DMA+0x1b2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	2200      	movs	r2, #0
 8008c42:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8008c44:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008c46:	683b      	ldr	r3, [r7, #0]
 8008c48:	441a      	add	r2, r3
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008c4e:	429a      	cmp	r2, r3
 8008c50:	d907      	bls.n	8008c62 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c56:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8008c5e:	2301      	movs	r3, #1
 8008c60:	e0ac      	b.n	8008dbc <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	2203      	movs	r2, #3
 8008c66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	2200      	movs	r2, #0
 8008c70:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c78:	68fa      	ldr	r2, [r7, #12]
 8008c7a:	6812      	ldr	r2, [r2, #0]
 8008c7c:	f443 7306 	orr.w	r3, r3, #536	; 0x218
 8008c80:	f043 0302 	orr.w	r3, r3, #2
 8008c84:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c8a:	4a4e      	ldr	r2, [pc, #312]	; (8008dc4 <HAL_SD_WriteBlocks_DMA+0x1bc>)
 8008c8c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c92:	4a4d      	ldr	r2, [pc, #308]	; (8008dc8 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 8008c94:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c9a:	2200      	movs	r2, #0
 8008c9c:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ca2:	2b01      	cmp	r3, #1
 8008ca4:	d002      	beq.n	8008cac <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      add *= 512U;
 8008ca6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ca8:	025b      	lsls	r3, r3, #9
 8008caa:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8008cac:	683b      	ldr	r3, [r7, #0]
 8008cae:	2b01      	cmp	r3, #1
 8008cb0:	d90a      	bls.n	8008cc8 <HAL_SD_WriteBlocks_DMA+0xc0>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	22a0      	movs	r2, #160	; 0xa0
 8008cb6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008cbe:	4618      	mov	r0, r3
 8008cc0:	f002 f813 	bl	800acea <SDMMC_CmdWriteMultiBlock>
 8008cc4:	62f8      	str	r0, [r7, #44]	; 0x2c
 8008cc6:	e009      	b.n	8008cdc <HAL_SD_WriteBlocks_DMA+0xd4>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	2290      	movs	r2, #144	; 0x90
 8008ccc:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008cd4:	4618      	mov	r0, r3
 8008cd6:	f001 ffe6 	bl	800aca6 <SDMMC_CmdWriteSingleBlock>
 8008cda:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8008cdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d012      	beq.n	8008d08 <HAL_SD_WriteBlocks_DMA+0x100>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	4a39      	ldr	r2, [pc, #228]	; (8008dcc <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8008ce8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008cee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cf0:	431a      	orrs	r2, r3
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	2201      	movs	r2, #1
 8008cfa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	2200      	movs	r2, #0
 8008d02:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008d04:	2301      	movs	r3, #1
 8008d06:	e059      	b.n	8008dbc <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8008d08:	4b31      	ldr	r3, [pc, #196]	; (8008dd0 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8008d0a:	2201      	movs	r2, #1
 8008d0c:	601a      	str	r2, [r3, #0]

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d12:	2240      	movs	r2, #64	; 0x40
 8008d14:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d26:	689a      	ldr	r2, [r3, #8]
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	430a      	orrs	r2, r1
 8008d30:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8008d36:	68b9      	ldr	r1, [r7, #8]
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	3380      	adds	r3, #128	; 0x80
 8008d3e:	461a      	mov	r2, r3
 8008d40:	683b      	ldr	r3, [r7, #0]
 8008d42:	025b      	lsls	r3, r3, #9
 8008d44:	089b      	lsrs	r3, r3, #2
 8008d46:	f7fc ffa5 	bl	8005c94 <HAL_DMA_Start_IT>
 8008d4a:	4603      	mov	r3, r0
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d01c      	beq.n	8008d8a <HAL_SD_WriteBlocks_DMA+0x182>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d56:	68fa      	ldr	r2, [r7, #12]
 8008d58:	6812      	ldr	r2, [r2, #0]
 8008d5a:	f423 7306 	bic.w	r3, r3, #536	; 0x218
 8008d5e:	f023 0302 	bic.w	r3, r3, #2
 8008d62:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	4a18      	ldr	r2, [pc, #96]	; (8008dcc <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8008d6a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d70:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	2201      	movs	r2, #1
 8008d7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	2200      	movs	r2, #0
 8008d84:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008d86:	2301      	movs	r3, #1
 8008d88:	e018      	b.n	8008dbc <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008d8a:	f04f 33ff 	mov.w	r3, #4294967295
 8008d8e:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8008d90:	683b      	ldr	r3, [r7, #0]
 8008d92:	025b      	lsls	r3, r3, #9
 8008d94:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8008d96:	2390      	movs	r3, #144	; 0x90
 8008d98:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8008d9a:	2300      	movs	r3, #0
 8008d9c:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8008d9e:	2300      	movs	r3, #0
 8008da0:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8008da2:	2301      	movs	r3, #1
 8008da4:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	f107 0210 	add.w	r2, r7, #16
 8008dae:	4611      	mov	r1, r2
 8008db0:	4618      	mov	r0, r3
 8008db2:	f001 fee6 	bl	800ab82 <SDIO_ConfigData>

      return HAL_OK;
 8008db6:	2300      	movs	r3, #0
 8008db8:	e000      	b.n	8008dbc <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_BUSY;
 8008dba:	2302      	movs	r3, #2
  }
}
 8008dbc:	4618      	mov	r0, r3
 8008dbe:	3730      	adds	r7, #48	; 0x30
 8008dc0:	46bd      	mov	sp, r7
 8008dc2:	bd80      	pop	{r7, pc}
 8008dc4:	0800961d 	.word	0x0800961d
 8008dc8:	080096b9 	.word	0x080096b9
 8008dcc:	004005ff 	.word	0x004005ff
 8008dd0:	4225858c 	.word	0x4225858c

08008dd4 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8008dd4:	b580      	push	{r7, lr}
 8008dd6:	b084      	sub	sp, #16
 8008dd8:	af00      	add	r7, sp, #0
 8008dda:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008de0:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008de8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d008      	beq.n	8008e02 <HAL_SD_IRQHandler+0x2e>
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	f003 0308 	and.w	r3, r3, #8
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d003      	beq.n	8008e02 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8008dfa:	6878      	ldr	r0, [r7, #4]
 8008dfc:	f001 f810 	bl	8009e20 <SD_Read_IT>
 8008e00:	e165      	b.n	80090ce <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	f000 808f 	beq.w	8008f30 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008e1a:	639a      	str	r2, [r3, #56]	; 0x38

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e22:	687a      	ldr	r2, [r7, #4]
 8008e24:	6812      	ldr	r2, [r2, #0]
 8008e26:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 8008e2a:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8008e2e:	63d3      	str	r3, [r2, #60]	; 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	f022 0201 	bic.w	r2, r2, #1
 8008e3e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	f003 0308 	and.w	r3, r3, #8
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d039      	beq.n	8008ebe <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	f003 0302 	and.w	r3, r3, #2
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d104      	bne.n	8008e5e <HAL_SD_IRQHandler+0x8a>
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	f003 0320 	and.w	r3, r3, #32
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d011      	beq.n	8008e82 <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	4618      	mov	r0, r3
 8008e64:	f001 ff64 	bl	800ad30 <SDMMC_CmdStopTransfer>
 8008e68:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8008e6a:	68bb      	ldr	r3, [r7, #8]
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d008      	beq.n	8008e82 <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008e74:	68bb      	ldr	r3, [r7, #8]
 8008e76:	431a      	orrs	r2, r3
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8008e7c:	6878      	ldr	r0, [r7, #4]
 8008e7e:	f000 f92f 	bl	80090e0 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	f240 523a 	movw	r2, #1338	; 0x53a
 8008e8a:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	2201      	movs	r2, #1
 8008e90:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	2200      	movs	r2, #0
 8008e98:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	f003 0301 	and.w	r3, r3, #1
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d104      	bne.n	8008eae <HAL_SD_IRQHandler+0xda>
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	f003 0302 	and.w	r3, r3, #2
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d003      	beq.n	8008eb6 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8008eae:	6878      	ldr	r0, [r7, #4]
 8008eb0:	f7fc f872 	bl	8004f98 <HAL_SD_RxCpltCallback>
 8008eb4:	e10b      	b.n	80090ce <HAL_SD_IRQHandler+0x2fa>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8008eb6:	6878      	ldr	r0, [r7, #4]
 8008eb8:	f7fc f85e 	bl	8004f78 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8008ebc:	e107      	b.n	80090ce <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	f000 8102 	beq.w	80090ce <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	f003 0320 	and.w	r3, r3, #32
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d011      	beq.n	8008ef8 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	4618      	mov	r0, r3
 8008eda:	f001 ff29 	bl	800ad30 <SDMMC_CmdStopTransfer>
 8008ede:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8008ee0:	68bb      	ldr	r3, [r7, #8]
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d008      	beq.n	8008ef8 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008eea:	68bb      	ldr	r3, [r7, #8]
 8008eec:	431a      	orrs	r2, r3
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8008ef2:	6878      	ldr	r0, [r7, #4]
 8008ef4:	f000 f8f4 	bl	80090e0 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	f003 0301 	and.w	r3, r3, #1
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	f040 80e5 	bne.w	80090ce <HAL_SD_IRQHandler+0x2fa>
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	f003 0302 	and.w	r3, r3, #2
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	f040 80df 	bne.w	80090ce <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	f022 0208 	bic.w	r2, r2, #8
 8008f1e:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	2201      	movs	r2, #1
 8008f24:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8008f28:	6878      	ldr	r0, [r7, #4]
 8008f2a:	f7fc f825 	bl	8004f78 <HAL_SD_TxCpltCallback>
}
 8008f2e:	e0ce      	b.n	80090ce <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d008      	beq.n	8008f50 <HAL_SD_IRQHandler+0x17c>
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	f003 0308 	and.w	r3, r3, #8
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d003      	beq.n	8008f50 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 8008f48:	6878      	ldr	r0, [r7, #4]
 8008f4a:	f000 ffba 	bl	8009ec2 <SD_Write_IT>
 8008f4e:	e0be      	b.n	80090ce <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008f56:	f240 233a 	movw	r3, #570	; 0x23a
 8008f5a:	4013      	ands	r3, r2
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	f000 80b6 	beq.w	80090ce <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f68:	f003 0302 	and.w	r3, r3, #2
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d005      	beq.n	8008f7c <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f74:	f043 0202 	orr.w	r2, r3, #2
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f82:	f003 0308 	and.w	r3, r3, #8
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d005      	beq.n	8008f96 <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f8e:	f043 0208 	orr.w	r2, r3, #8
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f9c:	f003 0320 	and.w	r3, r3, #32
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d005      	beq.n	8008fb0 <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fa8:	f043 0220 	orr.w	r2, r3, #32
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008fb6:	f003 0310 	and.w	r3, r3, #16
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d005      	beq.n	8008fca <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fc2:	f043 0210 	orr.w	r2, r3, #16
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008fd0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d005      	beq.n	8008fe4 <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fdc:	f043 0208 	orr.w	r2, r3, #8
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	f240 723a 	movw	r2, #1850	; 0x73a
 8008fec:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ff4:	687a      	ldr	r2, [r7, #4]
 8008ff6:	6812      	ldr	r2, [r2, #0]
 8008ff8:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 8008ffc:	f023 0302 	bic.w	r3, r3, #2
 8009000:	63d3      	str	r3, [r2, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	4618      	mov	r0, r3
 8009008:	f001 fe92 	bl	800ad30 <SDMMC_CmdStopTransfer>
 800900c:	4602      	mov	r2, r0
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009012:	431a      	orrs	r2, r3
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	f003 0308 	and.w	r3, r3, #8
 800901e:	2b00      	cmp	r3, #0
 8009020:	d00a      	beq.n	8009038 <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	2201      	movs	r2, #1
 8009026:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	2200      	movs	r2, #0
 800902e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8009030:	6878      	ldr	r0, [r7, #4]
 8009032:	f000 f855 	bl	80090e0 <HAL_SD_ErrorCallback>
}
 8009036:	e04a      	b.n	80090ce <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800903e:	2b00      	cmp	r3, #0
 8009040:	d045      	beq.n	80090ce <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	f003 0310 	and.w	r3, r3, #16
 8009048:	2b00      	cmp	r3, #0
 800904a:	d104      	bne.n	8009056 <HAL_SD_IRQHandler+0x282>
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	f003 0320 	and.w	r3, r3, #32
 8009052:	2b00      	cmp	r3, #0
 8009054:	d011      	beq.n	800907a <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800905a:	4a1f      	ldr	r2, [pc, #124]	; (80090d8 <HAL_SD_IRQHandler+0x304>)
 800905c:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009062:	4618      	mov	r0, r3
 8009064:	f7fc fe6e 	bl	8005d44 <HAL_DMA_Abort_IT>
 8009068:	4603      	mov	r3, r0
 800906a:	2b00      	cmp	r3, #0
 800906c:	d02f      	beq.n	80090ce <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009072:	4618      	mov	r0, r3
 8009074:	f000 fb72 	bl	800975c <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8009078:	e029      	b.n	80090ce <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	f003 0301 	and.w	r3, r3, #1
 8009080:	2b00      	cmp	r3, #0
 8009082:	d104      	bne.n	800908e <HAL_SD_IRQHandler+0x2ba>
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	f003 0302 	and.w	r3, r3, #2
 800908a:	2b00      	cmp	r3, #0
 800908c:	d011      	beq.n	80090b2 <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009092:	4a12      	ldr	r2, [pc, #72]	; (80090dc <HAL_SD_IRQHandler+0x308>)
 8009094:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800909a:	4618      	mov	r0, r3
 800909c:	f7fc fe52 	bl	8005d44 <HAL_DMA_Abort_IT>
 80090a0:	4603      	mov	r3, r0
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d013      	beq.n	80090ce <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090aa:	4618      	mov	r0, r3
 80090ac:	f000 fb8d 	bl	80097ca <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80090b0:	e00d      	b.n	80090ce <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	2200      	movs	r2, #0
 80090b6:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	2201      	movs	r2, #1
 80090bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	2200      	movs	r2, #0
 80090c4:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 80090c6:	6878      	ldr	r0, [r7, #4]
 80090c8:	f000 f814 	bl	80090f4 <HAL_SD_AbortCallback>
}
 80090cc:	e7ff      	b.n	80090ce <HAL_SD_IRQHandler+0x2fa>
 80090ce:	bf00      	nop
 80090d0:	3710      	adds	r7, #16
 80090d2:	46bd      	mov	sp, r7
 80090d4:	bd80      	pop	{r7, pc}
 80090d6:	bf00      	nop
 80090d8:	0800975d 	.word	0x0800975d
 80090dc:	080097cb 	.word	0x080097cb

080090e0 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 80090e0:	b480      	push	{r7}
 80090e2:	b083      	sub	sp, #12
 80090e4:	af00      	add	r7, sp, #0
 80090e6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 80090e8:	bf00      	nop
 80090ea:	370c      	adds	r7, #12
 80090ec:	46bd      	mov	sp, r7
 80090ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f2:	4770      	bx	lr

080090f4 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 80090f4:	b480      	push	{r7}
 80090f6:	b083      	sub	sp, #12
 80090f8:	af00      	add	r7, sp, #0
 80090fa:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_AbortCallback can be implemented in the user file
   */
}
 80090fc:	bf00      	nop
 80090fe:	370c      	adds	r7, #12
 8009100:	46bd      	mov	sp, r7
 8009102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009106:	4770      	bx	lr

08009108 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8009108:	b480      	push	{r7}
 800910a:	b083      	sub	sp, #12
 800910c:	af00      	add	r7, sp, #0
 800910e:	6078      	str	r0, [r7, #4]
 8009110:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009116:	0f9b      	lsrs	r3, r3, #30
 8009118:	b2da      	uxtb	r2, r3
 800911a:	683b      	ldr	r3, [r7, #0]
 800911c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009122:	0e9b      	lsrs	r3, r3, #26
 8009124:	b2db      	uxtb	r3, r3
 8009126:	f003 030f 	and.w	r3, r3, #15
 800912a:	b2da      	uxtb	r2, r3
 800912c:	683b      	ldr	r3, [r7, #0]
 800912e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009134:	0e1b      	lsrs	r3, r3, #24
 8009136:	b2db      	uxtb	r3, r3
 8009138:	f003 0303 	and.w	r3, r3, #3
 800913c:	b2da      	uxtb	r2, r3
 800913e:	683b      	ldr	r3, [r7, #0]
 8009140:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009146:	0c1b      	lsrs	r3, r3, #16
 8009148:	b2da      	uxtb	r2, r3
 800914a:	683b      	ldr	r3, [r7, #0]
 800914c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009152:	0a1b      	lsrs	r3, r3, #8
 8009154:	b2da      	uxtb	r2, r3
 8009156:	683b      	ldr	r3, [r7, #0]
 8009158:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800915e:	b2da      	uxtb	r2, r3
 8009160:	683b      	ldr	r3, [r7, #0]
 8009162:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009168:	0d1b      	lsrs	r3, r3, #20
 800916a:	b29a      	uxth	r2, r3
 800916c:	683b      	ldr	r3, [r7, #0]
 800916e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009174:	0c1b      	lsrs	r3, r3, #16
 8009176:	b2db      	uxtb	r3, r3
 8009178:	f003 030f 	and.w	r3, r3, #15
 800917c:	b2da      	uxtb	r2, r3
 800917e:	683b      	ldr	r3, [r7, #0]
 8009180:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009186:	0bdb      	lsrs	r3, r3, #15
 8009188:	b2db      	uxtb	r3, r3
 800918a:	f003 0301 	and.w	r3, r3, #1
 800918e:	b2da      	uxtb	r2, r3
 8009190:	683b      	ldr	r3, [r7, #0]
 8009192:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009198:	0b9b      	lsrs	r3, r3, #14
 800919a:	b2db      	uxtb	r3, r3
 800919c:	f003 0301 	and.w	r3, r3, #1
 80091a0:	b2da      	uxtb	r2, r3
 80091a2:	683b      	ldr	r3, [r7, #0]
 80091a4:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80091aa:	0b5b      	lsrs	r3, r3, #13
 80091ac:	b2db      	uxtb	r3, r3
 80091ae:	f003 0301 	and.w	r3, r3, #1
 80091b2:	b2da      	uxtb	r2, r3
 80091b4:	683b      	ldr	r3, [r7, #0]
 80091b6:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80091bc:	0b1b      	lsrs	r3, r3, #12
 80091be:	b2db      	uxtb	r3, r3
 80091c0:	f003 0301 	and.w	r3, r3, #1
 80091c4:	b2da      	uxtb	r2, r3
 80091c6:	683b      	ldr	r3, [r7, #0]
 80091c8:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80091ca:	683b      	ldr	r3, [r7, #0]
 80091cc:	2200      	movs	r2, #0
 80091ce:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d163      	bne.n	80092a0 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80091dc:	009a      	lsls	r2, r3, #2
 80091de:	f640 73fc 	movw	r3, #4092	; 0xffc
 80091e2:	4013      	ands	r3, r2
 80091e4:	687a      	ldr	r2, [r7, #4]
 80091e6:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80091e8:	0f92      	lsrs	r2, r2, #30
 80091ea:	431a      	orrs	r2, r3
 80091ec:	683b      	ldr	r3, [r7, #0]
 80091ee:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80091f4:	0edb      	lsrs	r3, r3, #27
 80091f6:	b2db      	uxtb	r3, r3
 80091f8:	f003 0307 	and.w	r3, r3, #7
 80091fc:	b2da      	uxtb	r2, r3
 80091fe:	683b      	ldr	r3, [r7, #0]
 8009200:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009206:	0e1b      	lsrs	r3, r3, #24
 8009208:	b2db      	uxtb	r3, r3
 800920a:	f003 0307 	and.w	r3, r3, #7
 800920e:	b2da      	uxtb	r2, r3
 8009210:	683b      	ldr	r3, [r7, #0]
 8009212:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009218:	0d5b      	lsrs	r3, r3, #21
 800921a:	b2db      	uxtb	r3, r3
 800921c:	f003 0307 	and.w	r3, r3, #7
 8009220:	b2da      	uxtb	r2, r3
 8009222:	683b      	ldr	r3, [r7, #0]
 8009224:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800922a:	0c9b      	lsrs	r3, r3, #18
 800922c:	b2db      	uxtb	r3, r3
 800922e:	f003 0307 	and.w	r3, r3, #7
 8009232:	b2da      	uxtb	r2, r3
 8009234:	683b      	ldr	r3, [r7, #0]
 8009236:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800923c:	0bdb      	lsrs	r3, r3, #15
 800923e:	b2db      	uxtb	r3, r3
 8009240:	f003 0307 	and.w	r3, r3, #7
 8009244:	b2da      	uxtb	r2, r3
 8009246:	683b      	ldr	r3, [r7, #0]
 8009248:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800924a:	683b      	ldr	r3, [r7, #0]
 800924c:	691b      	ldr	r3, [r3, #16]
 800924e:	1c5a      	adds	r2, r3, #1
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8009254:	683b      	ldr	r3, [r7, #0]
 8009256:	7e1b      	ldrb	r3, [r3, #24]
 8009258:	b2db      	uxtb	r3, r3
 800925a:	f003 0307 	and.w	r3, r3, #7
 800925e:	3302      	adds	r3, #2
 8009260:	2201      	movs	r2, #1
 8009262:	fa02 f303 	lsl.w	r3, r2, r3
 8009266:	687a      	ldr	r2, [r7, #4]
 8009268:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800926a:	fb03 f202 	mul.w	r2, r3, r2
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8009272:	683b      	ldr	r3, [r7, #0]
 8009274:	7a1b      	ldrb	r3, [r3, #8]
 8009276:	b2db      	uxtb	r3, r3
 8009278:	f003 030f 	and.w	r3, r3, #15
 800927c:	2201      	movs	r2, #1
 800927e:	409a      	lsls	r2, r3
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009288:	687a      	ldr	r2, [r7, #4]
 800928a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800928c:	0a52      	lsrs	r2, r2, #9
 800928e:	fb03 f202 	mul.w	r2, r3, r2
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	f44f 7200 	mov.w	r2, #512	; 0x200
 800929c:	661a      	str	r2, [r3, #96]	; 0x60
 800929e:	e031      	b.n	8009304 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80092a4:	2b01      	cmp	r3, #1
 80092a6:	d11d      	bne.n	80092e4 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80092ac:	041b      	lsls	r3, r3, #16
 80092ae:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80092b6:	0c1b      	lsrs	r3, r3, #16
 80092b8:	431a      	orrs	r2, r3
 80092ba:	683b      	ldr	r3, [r7, #0]
 80092bc:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80092be:	683b      	ldr	r3, [r7, #0]
 80092c0:	691b      	ldr	r3, [r3, #16]
 80092c2:	3301      	adds	r3, #1
 80092c4:	029a      	lsls	r2, r3, #10
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80092d8:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	661a      	str	r2, [r3, #96]	; 0x60
 80092e2:	e00f      	b.n	8009304 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	4a58      	ldr	r2, [pc, #352]	; (800944c <HAL_SD_GetCardCSD+0x344>)
 80092ea:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092f0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	2201      	movs	r2, #1
 80092fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8009300:	2301      	movs	r3, #1
 8009302:	e09d      	b.n	8009440 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009308:	0b9b      	lsrs	r3, r3, #14
 800930a:	b2db      	uxtb	r3, r3
 800930c:	f003 0301 	and.w	r3, r3, #1
 8009310:	b2da      	uxtb	r2, r3
 8009312:	683b      	ldr	r3, [r7, #0]
 8009314:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800931a:	09db      	lsrs	r3, r3, #7
 800931c:	b2db      	uxtb	r3, r3
 800931e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009322:	b2da      	uxtb	r2, r3
 8009324:	683b      	ldr	r3, [r7, #0]
 8009326:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800932c:	b2db      	uxtb	r3, r3
 800932e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009332:	b2da      	uxtb	r2, r3
 8009334:	683b      	ldr	r3, [r7, #0]
 8009336:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800933c:	0fdb      	lsrs	r3, r3, #31
 800933e:	b2da      	uxtb	r2, r3
 8009340:	683b      	ldr	r3, [r7, #0]
 8009342:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009348:	0f5b      	lsrs	r3, r3, #29
 800934a:	b2db      	uxtb	r3, r3
 800934c:	f003 0303 	and.w	r3, r3, #3
 8009350:	b2da      	uxtb	r2, r3
 8009352:	683b      	ldr	r3, [r7, #0]
 8009354:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800935a:	0e9b      	lsrs	r3, r3, #26
 800935c:	b2db      	uxtb	r3, r3
 800935e:	f003 0307 	and.w	r3, r3, #7
 8009362:	b2da      	uxtb	r2, r3
 8009364:	683b      	ldr	r3, [r7, #0]
 8009366:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800936c:	0d9b      	lsrs	r3, r3, #22
 800936e:	b2db      	uxtb	r3, r3
 8009370:	f003 030f 	and.w	r3, r3, #15
 8009374:	b2da      	uxtb	r2, r3
 8009376:	683b      	ldr	r3, [r7, #0]
 8009378:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800937e:	0d5b      	lsrs	r3, r3, #21
 8009380:	b2db      	uxtb	r3, r3
 8009382:	f003 0301 	and.w	r3, r3, #1
 8009386:	b2da      	uxtb	r2, r3
 8009388:	683b      	ldr	r3, [r7, #0]
 800938a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800938e:	683b      	ldr	r3, [r7, #0]
 8009390:	2200      	movs	r2, #0
 8009392:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800939a:	0c1b      	lsrs	r3, r3, #16
 800939c:	b2db      	uxtb	r3, r3
 800939e:	f003 0301 	and.w	r3, r3, #1
 80093a2:	b2da      	uxtb	r2, r3
 80093a4:	683b      	ldr	r3, [r7, #0]
 80093a6:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80093ae:	0bdb      	lsrs	r3, r3, #15
 80093b0:	b2db      	uxtb	r3, r3
 80093b2:	f003 0301 	and.w	r3, r3, #1
 80093b6:	b2da      	uxtb	r2, r3
 80093b8:	683b      	ldr	r3, [r7, #0]
 80093ba:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80093c2:	0b9b      	lsrs	r3, r3, #14
 80093c4:	b2db      	uxtb	r3, r3
 80093c6:	f003 0301 	and.w	r3, r3, #1
 80093ca:	b2da      	uxtb	r2, r3
 80093cc:	683b      	ldr	r3, [r7, #0]
 80093ce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80093d6:	0b5b      	lsrs	r3, r3, #13
 80093d8:	b2db      	uxtb	r3, r3
 80093da:	f003 0301 	and.w	r3, r3, #1
 80093de:	b2da      	uxtb	r2, r3
 80093e0:	683b      	ldr	r3, [r7, #0]
 80093e2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80093ea:	0b1b      	lsrs	r3, r3, #12
 80093ec:	b2db      	uxtb	r3, r3
 80093ee:	f003 0301 	and.w	r3, r3, #1
 80093f2:	b2da      	uxtb	r2, r3
 80093f4:	683b      	ldr	r3, [r7, #0]
 80093f6:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80093fe:	0a9b      	lsrs	r3, r3, #10
 8009400:	b2db      	uxtb	r3, r3
 8009402:	f003 0303 	and.w	r3, r3, #3
 8009406:	b2da      	uxtb	r2, r3
 8009408:	683b      	ldr	r3, [r7, #0]
 800940a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009412:	0a1b      	lsrs	r3, r3, #8
 8009414:	b2db      	uxtb	r3, r3
 8009416:	f003 0303 	and.w	r3, r3, #3
 800941a:	b2da      	uxtb	r2, r3
 800941c:	683b      	ldr	r3, [r7, #0]
 800941e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009426:	085b      	lsrs	r3, r3, #1
 8009428:	b2db      	uxtb	r3, r3
 800942a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800942e:	b2da      	uxtb	r2, r3
 8009430:	683b      	ldr	r3, [r7, #0]
 8009432:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8009436:	683b      	ldr	r3, [r7, #0]
 8009438:	2201      	movs	r2, #1
 800943a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800943e:	2300      	movs	r3, #0
}
 8009440:	4618      	mov	r0, r3
 8009442:	370c      	adds	r7, #12
 8009444:	46bd      	mov	sp, r7
 8009446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800944a:	4770      	bx	lr
 800944c:	004005ff 	.word	0x004005ff

08009450 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8009450:	b480      	push	{r7}
 8009452:	b083      	sub	sp, #12
 8009454:	af00      	add	r7, sp, #0
 8009456:	6078      	str	r0, [r7, #4]
 8009458:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800945e:	683b      	ldr	r3, [r7, #0]
 8009460:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009466:	683b      	ldr	r3, [r7, #0]
 8009468:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800946e:	683b      	ldr	r3, [r7, #0]
 8009470:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009476:	683b      	ldr	r3, [r7, #0]
 8009478:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800947e:	683b      	ldr	r3, [r7, #0]
 8009480:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009486:	683b      	ldr	r3, [r7, #0]
 8009488:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800948e:	683b      	ldr	r3, [r7, #0]
 8009490:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8009496:	683b      	ldr	r3, [r7, #0]
 8009498:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800949a:	2300      	movs	r3, #0
}
 800949c:	4618      	mov	r0, r3
 800949e:	370c      	adds	r7, #12
 80094a0:	46bd      	mov	sp, r7
 80094a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a6:	4770      	bx	lr

080094a8 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 80094a8:	b5b0      	push	{r4, r5, r7, lr}
 80094aa:	b08e      	sub	sp, #56	; 0x38
 80094ac:	af04      	add	r7, sp, #16
 80094ae:	6078      	str	r0, [r7, #4]
 80094b0:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 80094b2:	2300      	movs	r3, #0
 80094b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	2203      	movs	r2, #3
 80094bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80094c4:	2b03      	cmp	r3, #3
 80094c6:	d02e      	beq.n	8009526 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 80094c8:	683b      	ldr	r3, [r7, #0]
 80094ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80094ce:	d106      	bne.n	80094de <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094d4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	639a      	str	r2, [r3, #56]	; 0x38
 80094dc:	e029      	b.n	8009532 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 80094de:	683b      	ldr	r3, [r7, #0]
 80094e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80094e4:	d10a      	bne.n	80094fc <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 80094e6:	6878      	ldr	r0, [r7, #4]
 80094e8:	f000 fb2a 	bl	8009b40 <SD_WideBus_Enable>
 80094ec:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80094f2:	6a3b      	ldr	r3, [r7, #32]
 80094f4:	431a      	orrs	r2, r3
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	639a      	str	r2, [r3, #56]	; 0x38
 80094fa:	e01a      	b.n	8009532 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 80094fc:	683b      	ldr	r3, [r7, #0]
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d10a      	bne.n	8009518 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8009502:	6878      	ldr	r0, [r7, #4]
 8009504:	f000 fb67 	bl	8009bd6 <SD_WideBus_Disable>
 8009508:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800950e:	6a3b      	ldr	r3, [r7, #32]
 8009510:	431a      	orrs	r2, r3
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	639a      	str	r2, [r3, #56]	; 0x38
 8009516:	e00c      	b.n	8009532 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800951c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	639a      	str	r2, [r3, #56]	; 0x38
 8009524:	e005      	b.n	8009532 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800952a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009536:	2b00      	cmp	r3, #0
 8009538:	d00b      	beq.n	8009552 <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	4a26      	ldr	r2, [pc, #152]	; (80095d8 <HAL_SD_ConfigWideBusOperation+0x130>)
 8009540:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	2201      	movs	r2, #1
 8009546:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800954a:	2301      	movs	r3, #1
 800954c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009550:	e01f      	b.n	8009592 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	685b      	ldr	r3, [r3, #4]
 8009556:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	689b      	ldr	r3, [r3, #8]
 800955c:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	68db      	ldr	r3, [r3, #12]
 8009562:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8009564:	683b      	ldr	r3, [r7, #0]
 8009566:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	695b      	ldr	r3, [r3, #20]
 800956c:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	699b      	ldr	r3, [r3, #24]
 8009572:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	681d      	ldr	r5, [r3, #0]
 8009578:	466c      	mov	r4, sp
 800957a:	f107 0314 	add.w	r3, r7, #20
 800957e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009582:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8009586:	f107 0308 	add.w	r3, r7, #8
 800958a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800958c:	4628      	mov	r0, r5
 800958e:	f001 fa49 	bl	800aa24 <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	f44f 7100 	mov.w	r1, #512	; 0x200
 800959a:	4618      	mov	r0, r3
 800959c:	f001 fb1d 	bl	800abda <SDMMC_CmdBlockLength>
 80095a0:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80095a2:	6a3b      	ldr	r3, [r7, #32]
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d00c      	beq.n	80095c2 <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	4a0a      	ldr	r2, [pc, #40]	; (80095d8 <HAL_SD_ConfigWideBusOperation+0x130>)
 80095ae:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80095b4:	6a3b      	ldr	r3, [r7, #32]
 80095b6:	431a      	orrs	r2, r3
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 80095bc:	2301      	movs	r3, #1
 80095be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	2201      	movs	r2, #1
 80095c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 80095ca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80095ce:	4618      	mov	r0, r3
 80095d0:	3728      	adds	r7, #40	; 0x28
 80095d2:	46bd      	mov	sp, r7
 80095d4:	bdb0      	pop	{r4, r5, r7, pc}
 80095d6:	bf00      	nop
 80095d8:	004005ff 	.word	0x004005ff

080095dc <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80095dc:	b580      	push	{r7, lr}
 80095de:	b086      	sub	sp, #24
 80095e0:	af00      	add	r7, sp, #0
 80095e2:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 80095e4:	2300      	movs	r3, #0
 80095e6:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 80095e8:	f107 030c 	add.w	r3, r7, #12
 80095ec:	4619      	mov	r1, r3
 80095ee:	6878      	ldr	r0, [r7, #4]
 80095f0:	f000 fa7e 	bl	8009af0 <SD_SendStatus>
 80095f4:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80095f6:	697b      	ldr	r3, [r7, #20]
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d005      	beq.n	8009608 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009600:	697b      	ldr	r3, [r7, #20]
 8009602:	431a      	orrs	r2, r3
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	0a5b      	lsrs	r3, r3, #9
 800960c:	f003 030f 	and.w	r3, r3, #15
 8009610:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8009612:	693b      	ldr	r3, [r7, #16]
}
 8009614:	4618      	mov	r0, r3
 8009616:	3718      	adds	r7, #24
 8009618:	46bd      	mov	sp, r7
 800961a:	bd80      	pop	{r7, pc}

0800961c <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800961c:	b480      	push	{r7}
 800961e:	b085      	sub	sp, #20
 8009620:	af00      	add	r7, sp, #0
 8009622:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009628:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009638:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800963a:	bf00      	nop
 800963c:	3714      	adds	r7, #20
 800963e:	46bd      	mov	sp, r7
 8009640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009644:	4770      	bx	lr

08009646 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009646:	b580      	push	{r7, lr}
 8009648:	b084      	sub	sp, #16
 800964a:	af00      	add	r7, sp, #0
 800964c:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009652:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009658:	2b82      	cmp	r3, #130	; 0x82
 800965a:	d111      	bne.n	8009680 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	4618      	mov	r0, r3
 8009662:	f001 fb65 	bl	800ad30 <SDMMC_CmdStopTransfer>
 8009666:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009668:	68bb      	ldr	r3, [r7, #8]
 800966a:	2b00      	cmp	r3, #0
 800966c:	d008      	beq.n	8009680 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009672:	68bb      	ldr	r3, [r7, #8]
 8009674:	431a      	orrs	r2, r3
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800967a:	68f8      	ldr	r0, [r7, #12]
 800967c:	f7ff fd30 	bl	80090e0 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	f022 0208 	bic.w	r2, r2, #8
 800968e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	f240 523a 	movw	r2, #1338	; 0x53a
 8009698:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	2201      	movs	r2, #1
 800969e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	2200      	movs	r2, #0
 80096a6:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 80096a8:	68f8      	ldr	r0, [r7, #12]
 80096aa:	f7fb fc75 	bl	8004f98 <HAL_SD_RxCpltCallback>
#endif
}
 80096ae:	bf00      	nop
 80096b0:	3710      	adds	r7, #16
 80096b2:	46bd      	mov	sp, r7
 80096b4:	bd80      	pop	{r7, pc}
	...

080096b8 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 80096b8:	b580      	push	{r7, lr}
 80096ba:	b086      	sub	sp, #24
 80096bc:	af00      	add	r7, sp, #0
 80096be:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096c4:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 80096c6:	6878      	ldr	r0, [r7, #4]
 80096c8:	f7fc fce8 	bl	800609c <HAL_DMA_GetError>
 80096cc:	4603      	mov	r3, r0
 80096ce:	2b02      	cmp	r3, #2
 80096d0:	d03e      	beq.n	8009750 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 80096d2:	697b      	ldr	r3, [r7, #20]
 80096d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80096d8:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 80096da:	697b      	ldr	r3, [r7, #20]
 80096dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80096de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80096e0:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 80096e2:	693b      	ldr	r3, [r7, #16]
 80096e4:	2b01      	cmp	r3, #1
 80096e6:	d002      	beq.n	80096ee <SD_DMAError+0x36>
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	2b01      	cmp	r3, #1
 80096ec:	d12d      	bne.n	800974a <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80096ee:	697b      	ldr	r3, [r7, #20]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	4a19      	ldr	r2, [pc, #100]	; (8009758 <SD_DMAError+0xa0>)
 80096f4:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 80096f6:	697b      	ldr	r3, [r7, #20]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80096fc:	697b      	ldr	r3, [r7, #20]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8009704:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8009706:	697b      	ldr	r3, [r7, #20]
 8009708:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800970a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800970e:	697b      	ldr	r3, [r7, #20]
 8009710:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8009712:	6978      	ldr	r0, [r7, #20]
 8009714:	f7ff ff62 	bl	80095dc <HAL_SD_GetCardState>
 8009718:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800971a:	68bb      	ldr	r3, [r7, #8]
 800971c:	2b06      	cmp	r3, #6
 800971e:	d002      	beq.n	8009726 <SD_DMAError+0x6e>
 8009720:	68bb      	ldr	r3, [r7, #8]
 8009722:	2b05      	cmp	r3, #5
 8009724:	d10a      	bne.n	800973c <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8009726:	697b      	ldr	r3, [r7, #20]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	4618      	mov	r0, r3
 800972c:	f001 fb00 	bl	800ad30 <SDMMC_CmdStopTransfer>
 8009730:	4602      	mov	r2, r0
 8009732:	697b      	ldr	r3, [r7, #20]
 8009734:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009736:	431a      	orrs	r2, r3
 8009738:	697b      	ldr	r3, [r7, #20]
 800973a:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 800973c:	697b      	ldr	r3, [r7, #20]
 800973e:	2201      	movs	r2, #1
 8009740:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009744:	697b      	ldr	r3, [r7, #20]
 8009746:	2200      	movs	r2, #0
 8009748:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800974a:	6978      	ldr	r0, [r7, #20]
 800974c:	f7ff fcc8 	bl	80090e0 <HAL_SD_ErrorCallback>
#endif
  }
}
 8009750:	bf00      	nop
 8009752:	3718      	adds	r7, #24
 8009754:	46bd      	mov	sp, r7
 8009756:	bd80      	pop	{r7, pc}
 8009758:	004005ff 	.word	0x004005ff

0800975c <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 800975c:	b580      	push	{r7, lr}
 800975e:	b084      	sub	sp, #16
 8009760:	af00      	add	r7, sp, #0
 8009762:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009768:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	f240 523a 	movw	r2, #1338	; 0x53a
 8009772:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8009774:	68f8      	ldr	r0, [r7, #12]
 8009776:	f7ff ff31 	bl	80095dc <HAL_SD_GetCardState>
 800977a:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	2201      	movs	r2, #1
 8009780:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	2200      	movs	r2, #0
 8009788:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800978a:	68bb      	ldr	r3, [r7, #8]
 800978c:	2b06      	cmp	r3, #6
 800978e:	d002      	beq.n	8009796 <SD_DMATxAbort+0x3a>
 8009790:	68bb      	ldr	r3, [r7, #8]
 8009792:	2b05      	cmp	r3, #5
 8009794:	d10a      	bne.n	80097ac <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	4618      	mov	r0, r3
 800979c:	f001 fac8 	bl	800ad30 <SDMMC_CmdStopTransfer>
 80097a0:	4602      	mov	r2, r0
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097a6:	431a      	orrs	r2, r3
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d103      	bne.n	80097bc <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 80097b4:	68f8      	ldr	r0, [r7, #12]
 80097b6:	f7ff fc9d 	bl	80090f4 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 80097ba:	e002      	b.n	80097c2 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 80097bc:	68f8      	ldr	r0, [r7, #12]
 80097be:	f7ff fc8f 	bl	80090e0 <HAL_SD_ErrorCallback>
}
 80097c2:	bf00      	nop
 80097c4:	3710      	adds	r7, #16
 80097c6:	46bd      	mov	sp, r7
 80097c8:	bd80      	pop	{r7, pc}

080097ca <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 80097ca:	b580      	push	{r7, lr}
 80097cc:	b084      	sub	sp, #16
 80097ce:	af00      	add	r7, sp, #0
 80097d0:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097d6:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	f240 523a 	movw	r2, #1338	; 0x53a
 80097e0:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 80097e2:	68f8      	ldr	r0, [r7, #12]
 80097e4:	f7ff fefa 	bl	80095dc <HAL_SD_GetCardState>
 80097e8:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	2201      	movs	r2, #1
 80097ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	2200      	movs	r2, #0
 80097f6:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80097f8:	68bb      	ldr	r3, [r7, #8]
 80097fa:	2b06      	cmp	r3, #6
 80097fc:	d002      	beq.n	8009804 <SD_DMARxAbort+0x3a>
 80097fe:	68bb      	ldr	r3, [r7, #8]
 8009800:	2b05      	cmp	r3, #5
 8009802:	d10a      	bne.n	800981a <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	4618      	mov	r0, r3
 800980a:	f001 fa91 	bl	800ad30 <SDMMC_CmdStopTransfer>
 800980e:	4602      	mov	r2, r0
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009814:	431a      	orrs	r2, r3
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800981e:	2b00      	cmp	r3, #0
 8009820:	d103      	bne.n	800982a <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8009822:	68f8      	ldr	r0, [r7, #12]
 8009824:	f7ff fc66 	bl	80090f4 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8009828:	e002      	b.n	8009830 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800982a:	68f8      	ldr	r0, [r7, #12]
 800982c:	f7ff fc58 	bl	80090e0 <HAL_SD_ErrorCallback>
}
 8009830:	bf00      	nop
 8009832:	3710      	adds	r7, #16
 8009834:	46bd      	mov	sp, r7
 8009836:	bd80      	pop	{r7, pc}

08009838 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8009838:	b5b0      	push	{r4, r5, r7, lr}
 800983a:	b094      	sub	sp, #80	; 0x50
 800983c:	af04      	add	r7, sp, #16
 800983e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8009840:	2301      	movs	r3, #1
 8009842:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	4618      	mov	r0, r3
 800984a:	f001 f942 	bl	800aad2 <SDIO_GetPowerState>
 800984e:	4603      	mov	r3, r0
 8009850:	2b00      	cmp	r3, #0
 8009852:	d102      	bne.n	800985a <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009854:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8009858:	e0b8      	b.n	80099cc <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800985e:	2b03      	cmp	r3, #3
 8009860:	d02f      	beq.n	80098c2 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	4618      	mov	r0, r3
 8009868:	f001 fb6c 	bl	800af44 <SDMMC_CmdSendCID>
 800986c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800986e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009870:	2b00      	cmp	r3, #0
 8009872:	d001      	beq.n	8009878 <SD_InitCard+0x40>
    {
      return errorstate;
 8009874:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009876:	e0a9      	b.n	80099cc <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	2100      	movs	r1, #0
 800987e:	4618      	mov	r0, r3
 8009880:	f001 f96c 	bl	800ab5c <SDIO_GetResponse>
 8009884:	4602      	mov	r2, r0
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	2104      	movs	r1, #4
 8009890:	4618      	mov	r0, r3
 8009892:	f001 f963 	bl	800ab5c <SDIO_GetResponse>
 8009896:	4602      	mov	r2, r0
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	2108      	movs	r1, #8
 80098a2:	4618      	mov	r0, r3
 80098a4:	f001 f95a 	bl	800ab5c <SDIO_GetResponse>
 80098a8:	4602      	mov	r2, r0
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	210c      	movs	r1, #12
 80098b4:	4618      	mov	r0, r3
 80098b6:	f001 f951 	bl	800ab5c <SDIO_GetResponse>
 80098ba:	4602      	mov	r2, r0
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80098c6:	2b03      	cmp	r3, #3
 80098c8:	d00d      	beq.n	80098e6 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	f107 020e 	add.w	r2, r7, #14
 80098d2:	4611      	mov	r1, r2
 80098d4:	4618      	mov	r0, r3
 80098d6:	f001 fb72 	bl	800afbe <SDMMC_CmdSetRelAdd>
 80098da:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80098dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d001      	beq.n	80098e6 <SD_InitCard+0xae>
    {
      return errorstate;
 80098e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80098e4:	e072      	b.n	80099cc <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80098ea:	2b03      	cmp	r3, #3
 80098ec:	d036      	beq.n	800995c <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80098ee:	89fb      	ldrh	r3, [r7, #14]
 80098f0:	461a      	mov	r2, r3
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	681a      	ldr	r2, [r3, #0]
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80098fe:	041b      	lsls	r3, r3, #16
 8009900:	4619      	mov	r1, r3
 8009902:	4610      	mov	r0, r2
 8009904:	f001 fb3c 	bl	800af80 <SDMMC_CmdSendCSD>
 8009908:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800990a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800990c:	2b00      	cmp	r3, #0
 800990e:	d001      	beq.n	8009914 <SD_InitCard+0xdc>
    {
      return errorstate;
 8009910:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009912:	e05b      	b.n	80099cc <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	2100      	movs	r1, #0
 800991a:	4618      	mov	r0, r3
 800991c:	f001 f91e 	bl	800ab5c <SDIO_GetResponse>
 8009920:	4602      	mov	r2, r0
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	2104      	movs	r1, #4
 800992c:	4618      	mov	r0, r3
 800992e:	f001 f915 	bl	800ab5c <SDIO_GetResponse>
 8009932:	4602      	mov	r2, r0
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	2108      	movs	r1, #8
 800993e:	4618      	mov	r0, r3
 8009940:	f001 f90c 	bl	800ab5c <SDIO_GetResponse>
 8009944:	4602      	mov	r2, r0
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	210c      	movs	r1, #12
 8009950:	4618      	mov	r0, r3
 8009952:	f001 f903 	bl	800ab5c <SDIO_GetResponse>
 8009956:	4602      	mov	r2, r0
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	2104      	movs	r1, #4
 8009962:	4618      	mov	r0, r3
 8009964:	f001 f8fa 	bl	800ab5c <SDIO_GetResponse>
 8009968:	4603      	mov	r3, r0
 800996a:	0d1a      	lsrs	r2, r3, #20
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8009970:	f107 0310 	add.w	r3, r7, #16
 8009974:	4619      	mov	r1, r3
 8009976:	6878      	ldr	r0, [r7, #4]
 8009978:	f7ff fbc6 	bl	8009108 <HAL_SD_GetCardCSD>
 800997c:	4603      	mov	r3, r0
 800997e:	2b00      	cmp	r3, #0
 8009980:	d002      	beq.n	8009988 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009982:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009986:	e021      	b.n	80099cc <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	6819      	ldr	r1, [r3, #0]
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009990:	041b      	lsls	r3, r3, #16
 8009992:	2200      	movs	r2, #0
 8009994:	461c      	mov	r4, r3
 8009996:	4615      	mov	r5, r2
 8009998:	4622      	mov	r2, r4
 800999a:	462b      	mov	r3, r5
 800999c:	4608      	mov	r0, r1
 800999e:	f001 f9e9 	bl	800ad74 <SDMMC_CmdSelDesel>
 80099a2:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 80099a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d001      	beq.n	80099ae <SD_InitCard+0x176>
  {
    return errorstate;
 80099aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80099ac:	e00e      	b.n	80099cc <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	681d      	ldr	r5, [r3, #0]
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	466c      	mov	r4, sp
 80099b6:	f103 0210 	add.w	r2, r3, #16
 80099ba:	ca07      	ldmia	r2, {r0, r1, r2}
 80099bc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80099c0:	3304      	adds	r3, #4
 80099c2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80099c4:	4628      	mov	r0, r5
 80099c6:	f001 f82d 	bl	800aa24 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80099ca:	2300      	movs	r3, #0
}
 80099cc:	4618      	mov	r0, r3
 80099ce:	3740      	adds	r7, #64	; 0x40
 80099d0:	46bd      	mov	sp, r7
 80099d2:	bdb0      	pop	{r4, r5, r7, pc}

080099d4 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80099d4:	b580      	push	{r7, lr}
 80099d6:	b086      	sub	sp, #24
 80099d8:	af00      	add	r7, sp, #0
 80099da:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80099dc:	2300      	movs	r3, #0
 80099de:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 80099e0:	2300      	movs	r3, #0
 80099e2:	617b      	str	r3, [r7, #20]
 80099e4:	2300      	movs	r3, #0
 80099e6:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	4618      	mov	r0, r3
 80099ee:	f001 f9e4 	bl	800adba <SDMMC_CmdGoIdleState>
 80099f2:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d001      	beq.n	80099fe <SD_PowerON+0x2a>
  {
    return errorstate;
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	e072      	b.n	8009ae4 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	4618      	mov	r0, r3
 8009a04:	f001 f9f7 	bl	800adf6 <SDMMC_CmdOperCond>
 8009a08:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d00d      	beq.n	8009a2c <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	2200      	movs	r2, #0
 8009a14:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	4618      	mov	r0, r3
 8009a1c:	f001 f9cd 	bl	800adba <SDMMC_CmdGoIdleState>
 8009a20:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d004      	beq.n	8009a32 <SD_PowerON+0x5e>
    {
      return errorstate;
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	e05b      	b.n	8009ae4 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	2201      	movs	r2, #1
 8009a30:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009a36:	2b01      	cmp	r3, #1
 8009a38:	d137      	bne.n	8009aaa <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	2100      	movs	r1, #0
 8009a40:	4618      	mov	r0, r3
 8009a42:	f001 f9f7 	bl	800ae34 <SDMMC_CmdAppCommand>
 8009a46:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d02d      	beq.n	8009aaa <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009a4e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009a52:	e047      	b.n	8009ae4 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	2100      	movs	r1, #0
 8009a5a:	4618      	mov	r0, r3
 8009a5c:	f001 f9ea 	bl	800ae34 <SDMMC_CmdAppCommand>
 8009a60:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d001      	beq.n	8009a6c <SD_PowerON+0x98>
    {
      return errorstate;
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	e03b      	b.n	8009ae4 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	491e      	ldr	r1, [pc, #120]	; (8009aec <SD_PowerON+0x118>)
 8009a72:	4618      	mov	r0, r3
 8009a74:	f001 fa00 	bl	800ae78 <SDMMC_CmdAppOperCommand>
 8009a78:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d002      	beq.n	8009a86 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009a80:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009a84:	e02e      	b.n	8009ae4 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	2100      	movs	r1, #0
 8009a8c:	4618      	mov	r0, r3
 8009a8e:	f001 f865 	bl	800ab5c <SDIO_GetResponse>
 8009a92:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8009a94:	697b      	ldr	r3, [r7, #20]
 8009a96:	0fdb      	lsrs	r3, r3, #31
 8009a98:	2b01      	cmp	r3, #1
 8009a9a:	d101      	bne.n	8009aa0 <SD_PowerON+0xcc>
 8009a9c:	2301      	movs	r3, #1
 8009a9e:	e000      	b.n	8009aa2 <SD_PowerON+0xce>
 8009aa0:	2300      	movs	r3, #0
 8009aa2:	613b      	str	r3, [r7, #16]

    count++;
 8009aa4:	68bb      	ldr	r3, [r7, #8]
 8009aa6:	3301      	adds	r3, #1
 8009aa8:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8009aaa:	68bb      	ldr	r3, [r7, #8]
 8009aac:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009ab0:	4293      	cmp	r3, r2
 8009ab2:	d802      	bhi.n	8009aba <SD_PowerON+0xe6>
 8009ab4:	693b      	ldr	r3, [r7, #16]
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d0cc      	beq.n	8009a54 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8009aba:	68bb      	ldr	r3, [r7, #8]
 8009abc:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009ac0:	4293      	cmp	r3, r2
 8009ac2:	d902      	bls.n	8009aca <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8009ac4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009ac8:	e00c      	b.n	8009ae4 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8009aca:	697b      	ldr	r3, [r7, #20]
 8009acc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d003      	beq.n	8009adc <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	2201      	movs	r2, #1
 8009ad8:	645a      	str	r2, [r3, #68]	; 0x44
 8009ada:	e002      	b.n	8009ae2 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	2200      	movs	r2, #0
 8009ae0:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8009ae2:	2300      	movs	r3, #0
}
 8009ae4:	4618      	mov	r0, r3
 8009ae6:	3718      	adds	r7, #24
 8009ae8:	46bd      	mov	sp, r7
 8009aea:	bd80      	pop	{r7, pc}
 8009aec:	c1100000 	.word	0xc1100000

08009af0 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8009af0:	b580      	push	{r7, lr}
 8009af2:	b084      	sub	sp, #16
 8009af4:	af00      	add	r7, sp, #0
 8009af6:	6078      	str	r0, [r7, #4]
 8009af8:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8009afa:	683b      	ldr	r3, [r7, #0]
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d102      	bne.n	8009b06 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8009b00:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009b04:	e018      	b.n	8009b38 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	681a      	ldr	r2, [r3, #0]
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009b0e:	041b      	lsls	r3, r3, #16
 8009b10:	4619      	mov	r1, r3
 8009b12:	4610      	mov	r0, r2
 8009b14:	f001 fa74 	bl	800b000 <SDMMC_CmdSendStatus>
 8009b18:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d001      	beq.n	8009b24 <SD_SendStatus+0x34>
  {
    return errorstate;
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	e009      	b.n	8009b38 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	2100      	movs	r1, #0
 8009b2a:	4618      	mov	r0, r3
 8009b2c:	f001 f816 	bl	800ab5c <SDIO_GetResponse>
 8009b30:	4602      	mov	r2, r0
 8009b32:	683b      	ldr	r3, [r7, #0]
 8009b34:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8009b36:	2300      	movs	r3, #0
}
 8009b38:	4618      	mov	r0, r3
 8009b3a:	3710      	adds	r7, #16
 8009b3c:	46bd      	mov	sp, r7
 8009b3e:	bd80      	pop	{r7, pc}

08009b40 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8009b40:	b580      	push	{r7, lr}
 8009b42:	b086      	sub	sp, #24
 8009b44:	af00      	add	r7, sp, #0
 8009b46:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8009b48:	2300      	movs	r3, #0
 8009b4a:	60fb      	str	r3, [r7, #12]
 8009b4c:	2300      	movs	r3, #0
 8009b4e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	2100      	movs	r1, #0
 8009b56:	4618      	mov	r0, r3
 8009b58:	f001 f800 	bl	800ab5c <SDIO_GetResponse>
 8009b5c:	4603      	mov	r3, r0
 8009b5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009b62:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009b66:	d102      	bne.n	8009b6e <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009b68:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009b6c:	e02f      	b.n	8009bce <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8009b6e:	f107 030c 	add.w	r3, r7, #12
 8009b72:	4619      	mov	r1, r3
 8009b74:	6878      	ldr	r0, [r7, #4]
 8009b76:	f000 f879 	bl	8009c6c <SD_FindSCR>
 8009b7a:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009b7c:	697b      	ldr	r3, [r7, #20]
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d001      	beq.n	8009b86 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8009b82:	697b      	ldr	r3, [r7, #20]
 8009b84:	e023      	b.n	8009bce <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8009b86:	693b      	ldr	r3, [r7, #16]
 8009b88:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d01c      	beq.n	8009bca <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	681a      	ldr	r2, [r3, #0]
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009b98:	041b      	lsls	r3, r3, #16
 8009b9a:	4619      	mov	r1, r3
 8009b9c:	4610      	mov	r0, r2
 8009b9e:	f001 f949 	bl	800ae34 <SDMMC_CmdAppCommand>
 8009ba2:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009ba4:	697b      	ldr	r3, [r7, #20]
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d001      	beq.n	8009bae <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8009baa:	697b      	ldr	r3, [r7, #20]
 8009bac:	e00f      	b.n	8009bce <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	2102      	movs	r1, #2
 8009bb4:	4618      	mov	r0, r3
 8009bb6:	f001 f982 	bl	800aebe <SDMMC_CmdBusWidth>
 8009bba:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009bbc:	697b      	ldr	r3, [r7, #20]
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d001      	beq.n	8009bc6 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8009bc2:	697b      	ldr	r3, [r7, #20]
 8009bc4:	e003      	b.n	8009bce <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8009bc6:	2300      	movs	r3, #0
 8009bc8:	e001      	b.n	8009bce <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009bca:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8009bce:	4618      	mov	r0, r3
 8009bd0:	3718      	adds	r7, #24
 8009bd2:	46bd      	mov	sp, r7
 8009bd4:	bd80      	pop	{r7, pc}

08009bd6 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8009bd6:	b580      	push	{r7, lr}
 8009bd8:	b086      	sub	sp, #24
 8009bda:	af00      	add	r7, sp, #0
 8009bdc:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8009bde:	2300      	movs	r3, #0
 8009be0:	60fb      	str	r3, [r7, #12]
 8009be2:	2300      	movs	r3, #0
 8009be4:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	2100      	movs	r1, #0
 8009bec:	4618      	mov	r0, r3
 8009bee:	f000 ffb5 	bl	800ab5c <SDIO_GetResponse>
 8009bf2:	4603      	mov	r3, r0
 8009bf4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009bf8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009bfc:	d102      	bne.n	8009c04 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009bfe:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009c02:	e02f      	b.n	8009c64 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8009c04:	f107 030c 	add.w	r3, r7, #12
 8009c08:	4619      	mov	r1, r3
 8009c0a:	6878      	ldr	r0, [r7, #4]
 8009c0c:	f000 f82e 	bl	8009c6c <SD_FindSCR>
 8009c10:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009c12:	697b      	ldr	r3, [r7, #20]
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d001      	beq.n	8009c1c <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8009c18:	697b      	ldr	r3, [r7, #20]
 8009c1a:	e023      	b.n	8009c64 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8009c1c:	693b      	ldr	r3, [r7, #16]
 8009c1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d01c      	beq.n	8009c60 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	681a      	ldr	r2, [r3, #0]
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c2e:	041b      	lsls	r3, r3, #16
 8009c30:	4619      	mov	r1, r3
 8009c32:	4610      	mov	r0, r2
 8009c34:	f001 f8fe 	bl	800ae34 <SDMMC_CmdAppCommand>
 8009c38:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009c3a:	697b      	ldr	r3, [r7, #20]
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d001      	beq.n	8009c44 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8009c40:	697b      	ldr	r3, [r7, #20]
 8009c42:	e00f      	b.n	8009c64 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	2100      	movs	r1, #0
 8009c4a:	4618      	mov	r0, r3
 8009c4c:	f001 f937 	bl	800aebe <SDMMC_CmdBusWidth>
 8009c50:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009c52:	697b      	ldr	r3, [r7, #20]
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d001      	beq.n	8009c5c <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8009c58:	697b      	ldr	r3, [r7, #20]
 8009c5a:	e003      	b.n	8009c64 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8009c5c:	2300      	movs	r3, #0
 8009c5e:	e001      	b.n	8009c64 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009c60:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8009c64:	4618      	mov	r0, r3
 8009c66:	3718      	adds	r7, #24
 8009c68:	46bd      	mov	sp, r7
 8009c6a:	bd80      	pop	{r7, pc}

08009c6c <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8009c6c:	b590      	push	{r4, r7, lr}
 8009c6e:	b08f      	sub	sp, #60	; 0x3c
 8009c70:	af00      	add	r7, sp, #0
 8009c72:	6078      	str	r0, [r7, #4]
 8009c74:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8009c76:	f7fb fe1d 	bl	80058b4 <HAL_GetTick>
 8009c7a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8009c7c:	2300      	movs	r3, #0
 8009c7e:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8009c80:	2300      	movs	r3, #0
 8009c82:	60bb      	str	r3, [r7, #8]
 8009c84:	2300      	movs	r3, #0
 8009c86:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8009c88:	683b      	ldr	r3, [r7, #0]
 8009c8a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	2108      	movs	r1, #8
 8009c92:	4618      	mov	r0, r3
 8009c94:	f000 ffa1 	bl	800abda <SDMMC_CmdBlockLength>
 8009c98:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8009c9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d001      	beq.n	8009ca4 <SD_FindSCR+0x38>
  {
    return errorstate;
 8009ca0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ca2:	e0b9      	b.n	8009e18 <SD_FindSCR+0x1ac>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	681a      	ldr	r2, [r3, #0]
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009cac:	041b      	lsls	r3, r3, #16
 8009cae:	4619      	mov	r1, r3
 8009cb0:	4610      	mov	r0, r2
 8009cb2:	f001 f8bf 	bl	800ae34 <SDMMC_CmdAppCommand>
 8009cb6:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8009cb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d001      	beq.n	8009cc2 <SD_FindSCR+0x56>
  {
    return errorstate;
 8009cbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cc0:	e0aa      	b.n	8009e18 <SD_FindSCR+0x1ac>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009cc2:	f04f 33ff 	mov.w	r3, #4294967295
 8009cc6:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8009cc8:	2308      	movs	r3, #8
 8009cca:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8009ccc:	2330      	movs	r3, #48	; 0x30
 8009cce:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8009cd0:	2302      	movs	r3, #2
 8009cd2:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8009cd4:	2300      	movs	r3, #0
 8009cd6:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8009cd8:	2301      	movs	r3, #1
 8009cda:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	f107 0210 	add.w	r2, r7, #16
 8009ce4:	4611      	mov	r1, r2
 8009ce6:	4618      	mov	r0, r3
 8009ce8:	f000 ff4b 	bl	800ab82 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	4618      	mov	r0, r3
 8009cf2:	f001 f906 	bl	800af02 <SDMMC_CmdSendSCR>
 8009cf6:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8009cf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d02a      	beq.n	8009d54 <SD_FindSCR+0xe8>
  {
    return errorstate;
 8009cfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d00:	e08a      	b.n	8009e18 <SD_FindSCR+0x1ac>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d00f      	beq.n	8009d30 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	6819      	ldr	r1, [r3, #0]
 8009d14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d16:	009b      	lsls	r3, r3, #2
 8009d18:	f107 0208 	add.w	r2, r7, #8
 8009d1c:	18d4      	adds	r4, r2, r3
 8009d1e:	4608      	mov	r0, r1
 8009d20:	f000 feab 	bl	800aa7a <SDIO_ReadFIFO>
 8009d24:	4603      	mov	r3, r0
 8009d26:	6023      	str	r3, [r4, #0]
      index++;
 8009d28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d2a:	3301      	adds	r3, #1
 8009d2c:	637b      	str	r3, [r7, #52]	; 0x34
 8009d2e:	e006      	b.n	8009d3e <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d36:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d012      	beq.n	8009d64 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 8009d3e:	f7fb fdb9 	bl	80058b4 <HAL_GetTick>
 8009d42:	4602      	mov	r2, r0
 8009d44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d46:	1ad3      	subs	r3, r2, r3
 8009d48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d4c:	d102      	bne.n	8009d54 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8009d4e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009d52:	e061      	b.n	8009e18 <SD_FindSCR+0x1ac>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d5a:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d0cf      	beq.n	8009d02 <SD_FindSCR+0x96>
 8009d62:	e000      	b.n	8009d66 <SD_FindSCR+0xfa>
      break;
 8009d64:	bf00      	nop
    }
  }

#if defined(SDIO_STA_STBITERR)
  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d6c:	f003 0308 	and.w	r3, r3, #8
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d106      	bne.n	8009d82 <SD_FindSCR+0x116>
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d7a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d005      	beq.n	8009d8e <SD_FindSCR+0x122>
#else /* SDIO_STA_STBITERR not defined */
  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
#endif /* SDIO_STA_STBITERR */
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	2208      	movs	r2, #8
 8009d88:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8009d8a:	2308      	movs	r3, #8
 8009d8c:	e044      	b.n	8009e18 <SD_FindSCR+0x1ac>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d94:	f003 0302 	and.w	r3, r3, #2
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d005      	beq.n	8009da8 <SD_FindSCR+0x13c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	2202      	movs	r2, #2
 8009da2:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8009da4:	2302      	movs	r3, #2
 8009da6:	e037      	b.n	8009e18 <SD_FindSCR+0x1ac>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009dae:	f003 0320 	and.w	r3, r3, #32
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d005      	beq.n	8009dc2 <SD_FindSCR+0x156>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	2220      	movs	r2, #32
 8009dbc:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8009dbe:	2320      	movs	r3, #32
 8009dc0:	e02a      	b.n	8009e18 <SD_FindSCR+0x1ac>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	f240 523a 	movw	r2, #1338	; 0x53a
 8009dca:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	061a      	lsls	r2, r3, #24
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	021b      	lsls	r3, r3, #8
 8009dd4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009dd8:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	0a1b      	lsrs	r3, r3, #8
 8009dde:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8009de2:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	0e1b      	lsrs	r3, r3, #24
 8009de8:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8009dea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009dec:	601a      	str	r2, [r3, #0]
    scr++;
 8009dee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009df0:	3304      	adds	r3, #4
 8009df2:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8009df4:	68bb      	ldr	r3, [r7, #8]
 8009df6:	061a      	lsls	r2, r3, #24
 8009df8:	68bb      	ldr	r3, [r7, #8]
 8009dfa:	021b      	lsls	r3, r3, #8
 8009dfc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009e00:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8009e02:	68bb      	ldr	r3, [r7, #8]
 8009e04:	0a1b      	lsrs	r3, r3, #8
 8009e06:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8009e0a:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8009e0c:	68bb      	ldr	r3, [r7, #8]
 8009e0e:	0e1b      	lsrs	r3, r3, #24
 8009e10:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8009e12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e14:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8009e16:	2300      	movs	r3, #0
}
 8009e18:	4618      	mov	r0, r3
 8009e1a:	373c      	adds	r7, #60	; 0x3c
 8009e1c:	46bd      	mov	sp, r7
 8009e1e:	bd90      	pop	{r4, r7, pc}

08009e20 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8009e20:	b580      	push	{r7, lr}
 8009e22:	b086      	sub	sp, #24
 8009e24:	af00      	add	r7, sp, #0
 8009e26:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e2c:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e32:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8009e34:	693b      	ldr	r3, [r7, #16]
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d03f      	beq.n	8009eba <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8009e3a:	2300      	movs	r3, #0
 8009e3c:	617b      	str	r3, [r7, #20]
 8009e3e:	e033      	b.n	8009ea8 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	4618      	mov	r0, r3
 8009e46:	f000 fe18 	bl	800aa7a <SDIO_ReadFIFO>
 8009e4a:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8009e4c:	68bb      	ldr	r3, [r7, #8]
 8009e4e:	b2da      	uxtb	r2, r3
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	701a      	strb	r2, [r3, #0]
      tmp++;
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	3301      	adds	r3, #1
 8009e58:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009e5a:	693b      	ldr	r3, [r7, #16]
 8009e5c:	3b01      	subs	r3, #1
 8009e5e:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8009e60:	68bb      	ldr	r3, [r7, #8]
 8009e62:	0a1b      	lsrs	r3, r3, #8
 8009e64:	b2da      	uxtb	r2, r3
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	701a      	strb	r2, [r3, #0]
      tmp++;
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	3301      	adds	r3, #1
 8009e6e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009e70:	693b      	ldr	r3, [r7, #16]
 8009e72:	3b01      	subs	r3, #1
 8009e74:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8009e76:	68bb      	ldr	r3, [r7, #8]
 8009e78:	0c1b      	lsrs	r3, r3, #16
 8009e7a:	b2da      	uxtb	r2, r3
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	701a      	strb	r2, [r3, #0]
      tmp++;
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	3301      	adds	r3, #1
 8009e84:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009e86:	693b      	ldr	r3, [r7, #16]
 8009e88:	3b01      	subs	r3, #1
 8009e8a:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8009e8c:	68bb      	ldr	r3, [r7, #8]
 8009e8e:	0e1b      	lsrs	r3, r3, #24
 8009e90:	b2da      	uxtb	r2, r3
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	701a      	strb	r2, [r3, #0]
      tmp++;
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	3301      	adds	r3, #1
 8009e9a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009e9c:	693b      	ldr	r3, [r7, #16]
 8009e9e:	3b01      	subs	r3, #1
 8009ea0:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8009ea2:	697b      	ldr	r3, [r7, #20]
 8009ea4:	3301      	adds	r3, #1
 8009ea6:	617b      	str	r3, [r7, #20]
 8009ea8:	697b      	ldr	r3, [r7, #20]
 8009eaa:	2b07      	cmp	r3, #7
 8009eac:	d9c8      	bls.n	8009e40 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	68fa      	ldr	r2, [r7, #12]
 8009eb2:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	693a      	ldr	r2, [r7, #16]
 8009eb8:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8009eba:	bf00      	nop
 8009ebc:	3718      	adds	r7, #24
 8009ebe:	46bd      	mov	sp, r7
 8009ec0:	bd80      	pop	{r7, pc}

08009ec2 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8009ec2:	b580      	push	{r7, lr}
 8009ec4:	b086      	sub	sp, #24
 8009ec6:	af00      	add	r7, sp, #0
 8009ec8:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	6a1b      	ldr	r3, [r3, #32]
 8009ece:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ed4:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8009ed6:	693b      	ldr	r3, [r7, #16]
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d043      	beq.n	8009f64 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8009edc:	2300      	movs	r3, #0
 8009ede:	617b      	str	r3, [r7, #20]
 8009ee0:	e037      	b.n	8009f52 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	781b      	ldrb	r3, [r3, #0]
 8009ee6:	60bb      	str	r3, [r7, #8]
      tmp++;
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	3301      	adds	r3, #1
 8009eec:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009eee:	693b      	ldr	r3, [r7, #16]
 8009ef0:	3b01      	subs	r3, #1
 8009ef2:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	781b      	ldrb	r3, [r3, #0]
 8009ef8:	021a      	lsls	r2, r3, #8
 8009efa:	68bb      	ldr	r3, [r7, #8]
 8009efc:	4313      	orrs	r3, r2
 8009efe:	60bb      	str	r3, [r7, #8]
      tmp++;
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	3301      	adds	r3, #1
 8009f04:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009f06:	693b      	ldr	r3, [r7, #16]
 8009f08:	3b01      	subs	r3, #1
 8009f0a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	781b      	ldrb	r3, [r3, #0]
 8009f10:	041a      	lsls	r2, r3, #16
 8009f12:	68bb      	ldr	r3, [r7, #8]
 8009f14:	4313      	orrs	r3, r2
 8009f16:	60bb      	str	r3, [r7, #8]
      tmp++;
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	3301      	adds	r3, #1
 8009f1c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009f1e:	693b      	ldr	r3, [r7, #16]
 8009f20:	3b01      	subs	r3, #1
 8009f22:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	781b      	ldrb	r3, [r3, #0]
 8009f28:	061a      	lsls	r2, r3, #24
 8009f2a:	68bb      	ldr	r3, [r7, #8]
 8009f2c:	4313      	orrs	r3, r2
 8009f2e:	60bb      	str	r3, [r7, #8]
      tmp++;
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	3301      	adds	r3, #1
 8009f34:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009f36:	693b      	ldr	r3, [r7, #16]
 8009f38:	3b01      	subs	r3, #1
 8009f3a:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	f107 0208 	add.w	r2, r7, #8
 8009f44:	4611      	mov	r1, r2
 8009f46:	4618      	mov	r0, r3
 8009f48:	f000 fda4 	bl	800aa94 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8009f4c:	697b      	ldr	r3, [r7, #20]
 8009f4e:	3301      	adds	r3, #1
 8009f50:	617b      	str	r3, [r7, #20]
 8009f52:	697b      	ldr	r3, [r7, #20]
 8009f54:	2b07      	cmp	r3, #7
 8009f56:	d9c4      	bls.n	8009ee2 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	68fa      	ldr	r2, [r7, #12]
 8009f5c:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	693a      	ldr	r2, [r7, #16]
 8009f62:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8009f64:	bf00      	nop
 8009f66:	3718      	adds	r7, #24
 8009f68:	46bd      	mov	sp, r7
 8009f6a:	bd80      	pop	{r7, pc}

08009f6c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009f6c:	b580      	push	{r7, lr}
 8009f6e:	b082      	sub	sp, #8
 8009f70:	af00      	add	r7, sp, #0
 8009f72:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d101      	bne.n	8009f7e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009f7a:	2301      	movs	r3, #1
 8009f7c:	e07b      	b.n	800a076 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d108      	bne.n	8009f98 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	685b      	ldr	r3, [r3, #4]
 8009f8a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009f8e:	d009      	beq.n	8009fa4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	2200      	movs	r2, #0
 8009f94:	61da      	str	r2, [r3, #28]
 8009f96:	e005      	b.n	8009fa4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	2200      	movs	r2, #0
 8009f9c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	2200      	movs	r2, #0
 8009fa2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	2200      	movs	r2, #0
 8009fa8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009fb0:	b2db      	uxtb	r3, r3
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d106      	bne.n	8009fc4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	2200      	movs	r2, #0
 8009fba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009fbe:	6878      	ldr	r0, [r7, #4]
 8009fc0:	f7f7 fc68 	bl	8001894 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	2202      	movs	r2, #2
 8009fc8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	681a      	ldr	r2, [r3, #0]
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009fda:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	685b      	ldr	r3, [r3, #4]
 8009fe0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	689b      	ldr	r3, [r3, #8]
 8009fe8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8009fec:	431a      	orrs	r2, r3
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	68db      	ldr	r3, [r3, #12]
 8009ff2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009ff6:	431a      	orrs	r2, r3
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	691b      	ldr	r3, [r3, #16]
 8009ffc:	f003 0302 	and.w	r3, r3, #2
 800a000:	431a      	orrs	r2, r3
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	695b      	ldr	r3, [r3, #20]
 800a006:	f003 0301 	and.w	r3, r3, #1
 800a00a:	431a      	orrs	r2, r3
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	699b      	ldr	r3, [r3, #24]
 800a010:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a014:	431a      	orrs	r2, r3
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	69db      	ldr	r3, [r3, #28]
 800a01a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a01e:	431a      	orrs	r2, r3
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	6a1b      	ldr	r3, [r3, #32]
 800a024:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a028:	ea42 0103 	orr.w	r1, r2, r3
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a030:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	430a      	orrs	r2, r1
 800a03a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	699b      	ldr	r3, [r3, #24]
 800a040:	0c1b      	lsrs	r3, r3, #16
 800a042:	f003 0104 	and.w	r1, r3, #4
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a04a:	f003 0210 	and.w	r2, r3, #16
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	430a      	orrs	r2, r1
 800a054:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	69da      	ldr	r2, [r3, #28]
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a064:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	2200      	movs	r2, #0
 800a06a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	2201      	movs	r2, #1
 800a070:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800a074:	2300      	movs	r3, #0
}
 800a076:	4618      	mov	r0, r3
 800a078:	3708      	adds	r7, #8
 800a07a:	46bd      	mov	sp, r7
 800a07c:	bd80      	pop	{r7, pc}

0800a07e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800a07e:	b580      	push	{r7, lr}
 800a080:	b08c      	sub	sp, #48	; 0x30
 800a082:	af00      	add	r7, sp, #0
 800a084:	60f8      	str	r0, [r7, #12]
 800a086:	60b9      	str	r1, [r7, #8]
 800a088:	607a      	str	r2, [r7, #4]
 800a08a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800a08c:	2301      	movs	r3, #1
 800a08e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800a090:	2300      	movs	r3, #0
 800a092:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800a09c:	2b01      	cmp	r3, #1
 800a09e:	d101      	bne.n	800a0a4 <HAL_SPI_TransmitReceive+0x26>
 800a0a0:	2302      	movs	r3, #2
 800a0a2:	e198      	b.n	800a3d6 <HAL_SPI_TransmitReceive+0x358>
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	2201      	movs	r2, #1
 800a0a8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a0ac:	f7fb fc02 	bl	80058b4 <HAL_GetTick>
 800a0b0:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a0b8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	685b      	ldr	r3, [r3, #4]
 800a0c0:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800a0c2:	887b      	ldrh	r3, [r7, #2]
 800a0c4:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800a0c6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a0ca:	2b01      	cmp	r3, #1
 800a0cc:	d00f      	beq.n	800a0ee <HAL_SPI_TransmitReceive+0x70>
 800a0ce:	69fb      	ldr	r3, [r7, #28]
 800a0d0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a0d4:	d107      	bne.n	800a0e6 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	689b      	ldr	r3, [r3, #8]
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d103      	bne.n	800a0e6 <HAL_SPI_TransmitReceive+0x68>
 800a0de:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a0e2:	2b04      	cmp	r3, #4
 800a0e4:	d003      	beq.n	800a0ee <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800a0e6:	2302      	movs	r3, #2
 800a0e8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800a0ec:	e16d      	b.n	800a3ca <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800a0ee:	68bb      	ldr	r3, [r7, #8]
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d005      	beq.n	800a100 <HAL_SPI_TransmitReceive+0x82>
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d002      	beq.n	800a100 <HAL_SPI_TransmitReceive+0x82>
 800a0fa:	887b      	ldrh	r3, [r7, #2]
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d103      	bne.n	800a108 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800a100:	2301      	movs	r3, #1
 800a102:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800a106:	e160      	b.n	800a3ca <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a10e:	b2db      	uxtb	r3, r3
 800a110:	2b04      	cmp	r3, #4
 800a112:	d003      	beq.n	800a11c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	2205      	movs	r2, #5
 800a118:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	2200      	movs	r2, #0
 800a120:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	687a      	ldr	r2, [r7, #4]
 800a126:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	887a      	ldrh	r2, [r7, #2]
 800a12c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	887a      	ldrh	r2, [r7, #2]
 800a132:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	68ba      	ldr	r2, [r7, #8]
 800a138:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	887a      	ldrh	r2, [r7, #2]
 800a13e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	887a      	ldrh	r2, [r7, #2]
 800a144:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	2200      	movs	r2, #0
 800a14a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	2200      	movs	r2, #0
 800a150:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a15c:	2b40      	cmp	r3, #64	; 0x40
 800a15e:	d007      	beq.n	800a170 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	681a      	ldr	r2, [r3, #0]
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a16e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	68db      	ldr	r3, [r3, #12]
 800a174:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a178:	d17c      	bne.n	800a274 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	685b      	ldr	r3, [r3, #4]
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d002      	beq.n	800a188 <HAL_SPI_TransmitReceive+0x10a>
 800a182:	8b7b      	ldrh	r3, [r7, #26]
 800a184:	2b01      	cmp	r3, #1
 800a186:	d16a      	bne.n	800a25e <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a18c:	881a      	ldrh	r2, [r3, #0]
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a198:	1c9a      	adds	r2, r3, #2
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a1a2:	b29b      	uxth	r3, r3
 800a1a4:	3b01      	subs	r3, #1
 800a1a6:	b29a      	uxth	r2, r3
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	86da      	strh	r2, [r3, #54]	; 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a1ac:	e057      	b.n	800a25e <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	689b      	ldr	r3, [r3, #8]
 800a1b4:	f003 0302 	and.w	r3, r3, #2
 800a1b8:	2b02      	cmp	r3, #2
 800a1ba:	d11b      	bne.n	800a1f4 <HAL_SPI_TransmitReceive+0x176>
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a1c0:	b29b      	uxth	r3, r3
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d016      	beq.n	800a1f4 <HAL_SPI_TransmitReceive+0x176>
 800a1c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1c8:	2b01      	cmp	r3, #1
 800a1ca:	d113      	bne.n	800a1f4 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a1d0:	881a      	ldrh	r2, [r3, #0]
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a1dc:	1c9a      	adds	r2, r3, #2
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a1e6:	b29b      	uxth	r3, r3
 800a1e8:	3b01      	subs	r3, #1
 800a1ea:	b29a      	uxth	r2, r3
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a1f0:	2300      	movs	r3, #0
 800a1f2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	689b      	ldr	r3, [r3, #8]
 800a1fa:	f003 0301 	and.w	r3, r3, #1
 800a1fe:	2b01      	cmp	r3, #1
 800a200:	d119      	bne.n	800a236 <HAL_SPI_TransmitReceive+0x1b8>
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a206:	b29b      	uxth	r3, r3
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d014      	beq.n	800a236 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	68da      	ldr	r2, [r3, #12]
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a216:	b292      	uxth	r2, r2
 800a218:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a21e:	1c9a      	adds	r2, r3, #2
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a228:	b29b      	uxth	r3, r3
 800a22a:	3b01      	subs	r3, #1
 800a22c:	b29a      	uxth	r2, r3
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a232:	2301      	movs	r3, #1
 800a234:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800a236:	f7fb fb3d 	bl	80058b4 <HAL_GetTick>
 800a23a:	4602      	mov	r2, r0
 800a23c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a23e:	1ad3      	subs	r3, r2, r3
 800a240:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a242:	429a      	cmp	r2, r3
 800a244:	d80b      	bhi.n	800a25e <HAL_SPI_TransmitReceive+0x1e0>
 800a246:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a248:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a24c:	d007      	beq.n	800a25e <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 800a24e:	2303      	movs	r3, #3
 800a250:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	2201      	movs	r2, #1
 800a258:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 800a25c:	e0b5      	b.n	800a3ca <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a262:	b29b      	uxth	r3, r3
 800a264:	2b00      	cmp	r3, #0
 800a266:	d1a2      	bne.n	800a1ae <HAL_SPI_TransmitReceive+0x130>
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a26c:	b29b      	uxth	r3, r3
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d19d      	bne.n	800a1ae <HAL_SPI_TransmitReceive+0x130>
 800a272:	e080      	b.n	800a376 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	685b      	ldr	r3, [r3, #4]
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d002      	beq.n	800a282 <HAL_SPI_TransmitReceive+0x204>
 800a27c:	8b7b      	ldrh	r3, [r7, #26]
 800a27e:	2b01      	cmp	r3, #1
 800a280:	d16f      	bne.n	800a362 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	330c      	adds	r3, #12
 800a28c:	7812      	ldrb	r2, [r2, #0]
 800a28e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a294:	1c5a      	adds	r2, r3, #1
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a29e:	b29b      	uxth	r3, r3
 800a2a0:	3b01      	subs	r3, #1
 800a2a2:	b29a      	uxth	r2, r3
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	86da      	strh	r2, [r3, #54]	; 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a2a8:	e05b      	b.n	800a362 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	689b      	ldr	r3, [r3, #8]
 800a2b0:	f003 0302 	and.w	r3, r3, #2
 800a2b4:	2b02      	cmp	r3, #2
 800a2b6:	d11c      	bne.n	800a2f2 <HAL_SPI_TransmitReceive+0x274>
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a2bc:	b29b      	uxth	r3, r3
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d017      	beq.n	800a2f2 <HAL_SPI_TransmitReceive+0x274>
 800a2c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2c4:	2b01      	cmp	r3, #1
 800a2c6:	d114      	bne.n	800a2f2 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	330c      	adds	r3, #12
 800a2d2:	7812      	ldrb	r2, [r2, #0]
 800a2d4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a2da:	1c5a      	adds	r2, r3, #1
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a2e4:	b29b      	uxth	r3, r3
 800a2e6:	3b01      	subs	r3, #1
 800a2e8:	b29a      	uxth	r2, r3
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a2ee:	2300      	movs	r3, #0
 800a2f0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	689b      	ldr	r3, [r3, #8]
 800a2f8:	f003 0301 	and.w	r3, r3, #1
 800a2fc:	2b01      	cmp	r3, #1
 800a2fe:	d119      	bne.n	800a334 <HAL_SPI_TransmitReceive+0x2b6>
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a304:	b29b      	uxth	r3, r3
 800a306:	2b00      	cmp	r3, #0
 800a308:	d014      	beq.n	800a334 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	68da      	ldr	r2, [r3, #12]
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a314:	b2d2      	uxtb	r2, r2
 800a316:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a31c:	1c5a      	adds	r2, r3, #1
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a326:	b29b      	uxth	r3, r3
 800a328:	3b01      	subs	r3, #1
 800a32a:	b29a      	uxth	r2, r3
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a330:	2301      	movs	r3, #1
 800a332:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800a334:	f7fb fabe 	bl	80058b4 <HAL_GetTick>
 800a338:	4602      	mov	r2, r0
 800a33a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a33c:	1ad3      	subs	r3, r2, r3
 800a33e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a340:	429a      	cmp	r2, r3
 800a342:	d803      	bhi.n	800a34c <HAL_SPI_TransmitReceive+0x2ce>
 800a344:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a346:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a34a:	d102      	bne.n	800a352 <HAL_SPI_TransmitReceive+0x2d4>
 800a34c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d107      	bne.n	800a362 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 800a352:	2303      	movs	r3, #3
 800a354:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	2201      	movs	r2, #1
 800a35c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 800a360:	e033      	b.n	800a3ca <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a366:	b29b      	uxth	r3, r3
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d19e      	bne.n	800a2aa <HAL_SPI_TransmitReceive+0x22c>
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a370:	b29b      	uxth	r3, r3
 800a372:	2b00      	cmp	r3, #0
 800a374:	d199      	bne.n	800a2aa <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a376:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a378:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a37a:	68f8      	ldr	r0, [r7, #12]
 800a37c:	f000 fafe 	bl	800a97c <SPI_EndRxTxTransaction>
 800a380:	4603      	mov	r3, r0
 800a382:	2b00      	cmp	r3, #0
 800a384:	d006      	beq.n	800a394 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 800a386:	2301      	movs	r3, #1
 800a388:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	2220      	movs	r2, #32
 800a390:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800a392:	e01a      	b.n	800a3ca <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	689b      	ldr	r3, [r3, #8]
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d10a      	bne.n	800a3b2 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a39c:	2300      	movs	r3, #0
 800a39e:	617b      	str	r3, [r7, #20]
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	68db      	ldr	r3, [r3, #12]
 800a3a6:	617b      	str	r3, [r7, #20]
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	689b      	ldr	r3, [r3, #8]
 800a3ae:	617b      	str	r3, [r7, #20]
 800a3b0:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d003      	beq.n	800a3c2 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 800a3ba:	2301      	movs	r3, #1
 800a3bc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a3c0:	e003      	b.n	800a3ca <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	2201      	movs	r2, #1
 800a3c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	2200      	movs	r2, #0
 800a3ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800a3d2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800a3d6:	4618      	mov	r0, r3
 800a3d8:	3730      	adds	r7, #48	; 0x30
 800a3da:	46bd      	mov	sp, r7
 800a3dc:	bd80      	pop	{r7, pc}
	...

0800a3e0 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800a3e0:	b580      	push	{r7, lr}
 800a3e2:	b086      	sub	sp, #24
 800a3e4:	af00      	add	r7, sp, #0
 800a3e6:	60f8      	str	r0, [r7, #12]
 800a3e8:	60b9      	str	r1, [r7, #8]
 800a3ea:	4613      	mov	r3, r2
 800a3ec:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800a3ee:	2300      	movs	r3, #0
 800a3f0:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800a3f8:	2b01      	cmp	r3, #1
 800a3fa:	d101      	bne.n	800a400 <HAL_SPI_Transmit_DMA+0x20>
 800a3fc:	2302      	movs	r3, #2
 800a3fe:	e097      	b.n	800a530 <HAL_SPI_Transmit_DMA+0x150>
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	2201      	movs	r2, #1
 800a404:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a40e:	b2db      	uxtb	r3, r3
 800a410:	2b01      	cmp	r3, #1
 800a412:	d002      	beq.n	800a41a <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 800a414:	2302      	movs	r3, #2
 800a416:	75fb      	strb	r3, [r7, #23]
    goto error;
 800a418:	e085      	b.n	800a526 <HAL_SPI_Transmit_DMA+0x146>
  }

  if ((pData == NULL) || (Size == 0U))
 800a41a:	68bb      	ldr	r3, [r7, #8]
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d002      	beq.n	800a426 <HAL_SPI_Transmit_DMA+0x46>
 800a420:	88fb      	ldrh	r3, [r7, #6]
 800a422:	2b00      	cmp	r3, #0
 800a424:	d102      	bne.n	800a42c <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 800a426:	2301      	movs	r3, #1
 800a428:	75fb      	strb	r3, [r7, #23]
    goto error;
 800a42a:	e07c      	b.n	800a526 <HAL_SPI_Transmit_DMA+0x146>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	2203      	movs	r2, #3
 800a430:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	2200      	movs	r2, #0
 800a438:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	68ba      	ldr	r2, [r7, #8]
 800a43e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	88fa      	ldrh	r2, [r7, #6]
 800a444:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	88fa      	ldrh	r2, [r7, #6]
 800a44a:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	2200      	movs	r2, #0
 800a450:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 800a452:	68fb      	ldr	r3, [r7, #12]
 800a454:	2200      	movs	r2, #0
 800a456:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	2200      	movs	r2, #0
 800a45c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	2200      	movs	r2, #0
 800a462:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	2200      	movs	r2, #0
 800a468:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	689b      	ldr	r3, [r3, #8]
 800a46e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a472:	d10f      	bne.n	800a494 <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	681a      	ldr	r2, [r3, #0]
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a482:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	681a      	ldr	r2, [r3, #0]
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a492:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a498:	4a27      	ldr	r2, [pc, #156]	; (800a538 <HAL_SPI_Transmit_DMA+0x158>)
 800a49a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a4a0:	4a26      	ldr	r2, [pc, #152]	; (800a53c <HAL_SPI_Transmit_DMA+0x15c>)
 800a4a2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a4a8:	4a25      	ldr	r2, [pc, #148]	; (800a540 <HAL_SPI_Transmit_DMA+0x160>)
 800a4aa:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a4b0:	2200      	movs	r2, #0
 800a4b2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4bc:	4619      	mov	r1, r3
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	330c      	adds	r3, #12
 800a4c4:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a4ca:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800a4cc:	f7fb fbe2 	bl	8005c94 <HAL_DMA_Start_IT>
 800a4d0:	4603      	mov	r3, r0
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d008      	beq.n	800a4e8 <HAL_SPI_Transmit_DMA+0x108>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a4da:	f043 0210 	orr.w	r2, r3, #16
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 800a4e2:	2301      	movs	r3, #1
 800a4e4:	75fb      	strb	r3, [r7, #23]

    goto error;
 800a4e6:	e01e      	b.n	800a526 <HAL_SPI_Transmit_DMA+0x146>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a4f2:	2b40      	cmp	r3, #64	; 0x40
 800a4f4:	d007      	beq.n	800a506 <HAL_SPI_Transmit_DMA+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	681a      	ldr	r2, [r3, #0]
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a504:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	685a      	ldr	r2, [r3, #4]
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	f042 0220 	orr.w	r2, r2, #32
 800a514:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	685a      	ldr	r2, [r3, #4]
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	f042 0202 	orr.w	r2, r2, #2
 800a524:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	2200      	movs	r2, #0
 800a52a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800a52e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a530:	4618      	mov	r0, r3
 800a532:	3718      	adds	r7, #24
 800a534:	46bd      	mov	sp, r7
 800a536:	bd80      	pop	{r7, pc}
 800a538:	0800a7e9 	.word	0x0800a7e9
 800a53c:	0800a741 	.word	0x0800a741
 800a540:	0800a805 	.word	0x0800a805

0800a544 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800a544:	b580      	push	{r7, lr}
 800a546:	b088      	sub	sp, #32
 800a548:	af00      	add	r7, sp, #0
 800a54a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	685b      	ldr	r3, [r3, #4]
 800a552:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	689b      	ldr	r3, [r3, #8]
 800a55a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800a55c:	69bb      	ldr	r3, [r7, #24]
 800a55e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a562:	2b00      	cmp	r3, #0
 800a564:	d10e      	bne.n	800a584 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800a566:	69bb      	ldr	r3, [r7, #24]
 800a568:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d009      	beq.n	800a584 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800a570:	69fb      	ldr	r3, [r7, #28]
 800a572:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a576:	2b00      	cmp	r3, #0
 800a578:	d004      	beq.n	800a584 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a57e:	6878      	ldr	r0, [r7, #4]
 800a580:	4798      	blx	r3
    return;
 800a582:	e0ce      	b.n	800a722 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800a584:	69bb      	ldr	r3, [r7, #24]
 800a586:	f003 0302 	and.w	r3, r3, #2
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d009      	beq.n	800a5a2 <HAL_SPI_IRQHandler+0x5e>
 800a58e:	69fb      	ldr	r3, [r7, #28]
 800a590:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a594:	2b00      	cmp	r3, #0
 800a596:	d004      	beq.n	800a5a2 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a59c:	6878      	ldr	r0, [r7, #4]
 800a59e:	4798      	blx	r3
    return;
 800a5a0:	e0bf      	b.n	800a722 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800a5a2:	69bb      	ldr	r3, [r7, #24]
 800a5a4:	f003 0320 	and.w	r3, r3, #32
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d10a      	bne.n	800a5c2 <HAL_SPI_IRQHandler+0x7e>
 800a5ac:	69bb      	ldr	r3, [r7, #24]
 800a5ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d105      	bne.n	800a5c2 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800a5b6:	69bb      	ldr	r3, [r7, #24]
 800a5b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	f000 80b0 	beq.w	800a722 <HAL_SPI_IRQHandler+0x1de>
 800a5c2:	69fb      	ldr	r3, [r7, #28]
 800a5c4:	f003 0320 	and.w	r3, r3, #32
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	f000 80aa 	beq.w	800a722 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800a5ce:	69bb      	ldr	r3, [r7, #24]
 800a5d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d023      	beq.n	800a620 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a5de:	b2db      	uxtb	r3, r3
 800a5e0:	2b03      	cmp	r3, #3
 800a5e2:	d011      	beq.n	800a608 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a5e8:	f043 0204 	orr.w	r2, r3, #4
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a5f0:	2300      	movs	r3, #0
 800a5f2:	617b      	str	r3, [r7, #20]
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	68db      	ldr	r3, [r3, #12]
 800a5fa:	617b      	str	r3, [r7, #20]
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	689b      	ldr	r3, [r3, #8]
 800a602:	617b      	str	r3, [r7, #20]
 800a604:	697b      	ldr	r3, [r7, #20]
 800a606:	e00b      	b.n	800a620 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a608:	2300      	movs	r3, #0
 800a60a:	613b      	str	r3, [r7, #16]
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	68db      	ldr	r3, [r3, #12]
 800a612:	613b      	str	r3, [r7, #16]
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	689b      	ldr	r3, [r3, #8]
 800a61a:	613b      	str	r3, [r7, #16]
 800a61c:	693b      	ldr	r3, [r7, #16]
        return;
 800a61e:	e080      	b.n	800a722 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800a620:	69bb      	ldr	r3, [r7, #24]
 800a622:	f003 0320 	and.w	r3, r3, #32
 800a626:	2b00      	cmp	r3, #0
 800a628:	d014      	beq.n	800a654 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a62e:	f043 0201 	orr.w	r2, r3, #1
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800a636:	2300      	movs	r3, #0
 800a638:	60fb      	str	r3, [r7, #12]
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	689b      	ldr	r3, [r3, #8]
 800a640:	60fb      	str	r3, [r7, #12]
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	681a      	ldr	r2, [r3, #0]
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a650:	601a      	str	r2, [r3, #0]
 800a652:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800a654:	69bb      	ldr	r3, [r7, #24]
 800a656:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d00c      	beq.n	800a678 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a662:	f043 0208 	orr.w	r2, r3, #8
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800a66a:	2300      	movs	r3, #0
 800a66c:	60bb      	str	r3, [r7, #8]
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	689b      	ldr	r3, [r3, #8]
 800a674:	60bb      	str	r3, [r7, #8]
 800a676:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d04f      	beq.n	800a720 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	685a      	ldr	r2, [r3, #4]
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800a68e:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	2201      	movs	r2, #1
 800a694:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800a698:	69fb      	ldr	r3, [r7, #28]
 800a69a:	f003 0302 	and.w	r3, r3, #2
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d104      	bne.n	800a6ac <HAL_SPI_IRQHandler+0x168>
 800a6a2:	69fb      	ldr	r3, [r7, #28]
 800a6a4:	f003 0301 	and.w	r3, r3, #1
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d034      	beq.n	800a716 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	685a      	ldr	r2, [r3, #4]
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	f022 0203 	bic.w	r2, r2, #3
 800a6ba:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d011      	beq.n	800a6e8 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a6c8:	4a17      	ldr	r2, [pc, #92]	; (800a728 <HAL_SPI_IRQHandler+0x1e4>)
 800a6ca:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a6d0:	4618      	mov	r0, r3
 800a6d2:	f7fb fb37 	bl	8005d44 <HAL_DMA_Abort_IT>
 800a6d6:	4603      	mov	r3, r0
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	d005      	beq.n	800a6e8 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a6e0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d016      	beq.n	800a71e <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a6f4:	4a0c      	ldr	r2, [pc, #48]	; (800a728 <HAL_SPI_IRQHandler+0x1e4>)
 800a6f6:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a6fc:	4618      	mov	r0, r3
 800a6fe:	f7fb fb21 	bl	8005d44 <HAL_DMA_Abort_IT>
 800a702:	4603      	mov	r3, r0
 800a704:	2b00      	cmp	r3, #0
 800a706:	d00a      	beq.n	800a71e <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a70c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 800a714:	e003      	b.n	800a71e <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800a716:	6878      	ldr	r0, [r7, #4]
 800a718:	f7fa ff62 	bl	80055e0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800a71c:	e000      	b.n	800a720 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 800a71e:	bf00      	nop
    return;
 800a720:	bf00      	nop
  }
}
 800a722:	3720      	adds	r7, #32
 800a724:	46bd      	mov	sp, r7
 800a726:	bd80      	pop	{r7, pc}
 800a728:	0800a845 	.word	0x0800a845

0800a72c <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800a72c:	b480      	push	{r7}
 800a72e:	b083      	sub	sp, #12
 800a730:	af00      	add	r7, sp, #0
 800a732:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800a734:	bf00      	nop
 800a736:	370c      	adds	r7, #12
 800a738:	46bd      	mov	sp, r7
 800a73a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a73e:	4770      	bx	lr

0800a740 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800a740:	b580      	push	{r7, lr}
 800a742:	b086      	sub	sp, #24
 800a744:	af00      	add	r7, sp, #0
 800a746:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a74c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a74e:	f7fb f8b1 	bl	80058b4 <HAL_GetTick>
 800a752:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a75e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a762:	d03b      	beq.n	800a7dc <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800a764:	697b      	ldr	r3, [r7, #20]
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	685a      	ldr	r2, [r3, #4]
 800a76a:	697b      	ldr	r3, [r7, #20]
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	f022 0220 	bic.w	r2, r2, #32
 800a772:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800a774:	697b      	ldr	r3, [r7, #20]
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	685a      	ldr	r2, [r3, #4]
 800a77a:	697b      	ldr	r3, [r7, #20]
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	f022 0202 	bic.w	r2, r2, #2
 800a782:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800a784:	693a      	ldr	r2, [r7, #16]
 800a786:	2164      	movs	r1, #100	; 0x64
 800a788:	6978      	ldr	r0, [r7, #20]
 800a78a:	f000 f8f7 	bl	800a97c <SPI_EndRxTxTransaction>
 800a78e:	4603      	mov	r3, r0
 800a790:	2b00      	cmp	r3, #0
 800a792:	d005      	beq.n	800a7a0 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a794:	697b      	ldr	r3, [r7, #20]
 800a796:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a798:	f043 0220 	orr.w	r2, r3, #32
 800a79c:	697b      	ldr	r3, [r7, #20]
 800a79e:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800a7a0:	697b      	ldr	r3, [r7, #20]
 800a7a2:	689b      	ldr	r3, [r3, #8]
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	d10a      	bne.n	800a7be <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a7a8:	2300      	movs	r3, #0
 800a7aa:	60fb      	str	r3, [r7, #12]
 800a7ac:	697b      	ldr	r3, [r7, #20]
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	68db      	ldr	r3, [r3, #12]
 800a7b2:	60fb      	str	r3, [r7, #12]
 800a7b4:	697b      	ldr	r3, [r7, #20]
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	689b      	ldr	r3, [r3, #8]
 800a7ba:	60fb      	str	r3, [r7, #12]
 800a7bc:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 800a7be:	697b      	ldr	r3, [r7, #20]
 800a7c0:	2200      	movs	r2, #0
 800a7c2:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 800a7c4:	697b      	ldr	r3, [r7, #20]
 800a7c6:	2201      	movs	r2, #1
 800a7c8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a7cc:	697b      	ldr	r3, [r7, #20]
 800a7ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d003      	beq.n	800a7dc <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800a7d4:	6978      	ldr	r0, [r7, #20]
 800a7d6:	f7fa ff03 	bl	80055e0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800a7da:	e002      	b.n	800a7e2 <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 800a7dc:	6978      	ldr	r0, [r7, #20]
 800a7de:	f7fa ff15 	bl	800560c <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800a7e2:	3718      	adds	r7, #24
 800a7e4:	46bd      	mov	sp, r7
 800a7e6:	bd80      	pop	{r7, pc}

0800a7e8 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800a7e8:	b580      	push	{r7, lr}
 800a7ea:	b084      	sub	sp, #16
 800a7ec:	af00      	add	r7, sp, #0
 800a7ee:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7f4:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800a7f6:	68f8      	ldr	r0, [r7, #12]
 800a7f8:	f7ff ff98 	bl	800a72c <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800a7fc:	bf00      	nop
 800a7fe:	3710      	adds	r7, #16
 800a800:	46bd      	mov	sp, r7
 800a802:	bd80      	pop	{r7, pc}

0800a804 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800a804:	b580      	push	{r7, lr}
 800a806:	b084      	sub	sp, #16
 800a808:	af00      	add	r7, sp, #0
 800a80a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a810:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800a812:	68fb      	ldr	r3, [r7, #12]
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	685a      	ldr	r2, [r3, #4]
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	f022 0203 	bic.w	r2, r2, #3
 800a820:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a826:	f043 0210 	orr.w	r2, r3, #16
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	2201      	movs	r2, #1
 800a832:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800a836:	68f8      	ldr	r0, [r7, #12]
 800a838:	f7fa fed2 	bl	80055e0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800a83c:	bf00      	nop
 800a83e:	3710      	adds	r7, #16
 800a840:	46bd      	mov	sp, r7
 800a842:	bd80      	pop	{r7, pc}

0800a844 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a844:	b580      	push	{r7, lr}
 800a846:	b084      	sub	sp, #16
 800a848:	af00      	add	r7, sp, #0
 800a84a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a850:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	2200      	movs	r2, #0
 800a856:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	2200      	movs	r2, #0
 800a85c:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800a85e:	68f8      	ldr	r0, [r7, #12]
 800a860:	f7fa febe 	bl	80055e0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800a864:	bf00      	nop
 800a866:	3710      	adds	r7, #16
 800a868:	46bd      	mov	sp, r7
 800a86a:	bd80      	pop	{r7, pc}

0800a86c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a86c:	b580      	push	{r7, lr}
 800a86e:	b088      	sub	sp, #32
 800a870:	af00      	add	r7, sp, #0
 800a872:	60f8      	str	r0, [r7, #12]
 800a874:	60b9      	str	r1, [r7, #8]
 800a876:	603b      	str	r3, [r7, #0]
 800a878:	4613      	mov	r3, r2
 800a87a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800a87c:	f7fb f81a 	bl	80058b4 <HAL_GetTick>
 800a880:	4602      	mov	r2, r0
 800a882:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a884:	1a9b      	subs	r3, r3, r2
 800a886:	683a      	ldr	r2, [r7, #0]
 800a888:	4413      	add	r3, r2
 800a88a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800a88c:	f7fb f812 	bl	80058b4 <HAL_GetTick>
 800a890:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800a892:	4b39      	ldr	r3, [pc, #228]	; (800a978 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	015b      	lsls	r3, r3, #5
 800a898:	0d1b      	lsrs	r3, r3, #20
 800a89a:	69fa      	ldr	r2, [r7, #28]
 800a89c:	fb02 f303 	mul.w	r3, r2, r3
 800a8a0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a8a2:	e054      	b.n	800a94e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800a8a4:	683b      	ldr	r3, [r7, #0]
 800a8a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8aa:	d050      	beq.n	800a94e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800a8ac:	f7fb f802 	bl	80058b4 <HAL_GetTick>
 800a8b0:	4602      	mov	r2, r0
 800a8b2:	69bb      	ldr	r3, [r7, #24]
 800a8b4:	1ad3      	subs	r3, r2, r3
 800a8b6:	69fa      	ldr	r2, [r7, #28]
 800a8b8:	429a      	cmp	r2, r3
 800a8ba:	d902      	bls.n	800a8c2 <SPI_WaitFlagStateUntilTimeout+0x56>
 800a8bc:	69fb      	ldr	r3, [r7, #28]
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	d13d      	bne.n	800a93e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	685a      	ldr	r2, [r3, #4]
 800a8c8:	68fb      	ldr	r3, [r7, #12]
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800a8d0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	685b      	ldr	r3, [r3, #4]
 800a8d6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a8da:	d111      	bne.n	800a900 <SPI_WaitFlagStateUntilTimeout+0x94>
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	689b      	ldr	r3, [r3, #8]
 800a8e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a8e4:	d004      	beq.n	800a8f0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	689b      	ldr	r3, [r3, #8]
 800a8ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a8ee:	d107      	bne.n	800a900 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	681a      	ldr	r2, [r3, #0]
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a8fe:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a904:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a908:	d10f      	bne.n	800a92a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800a90a:	68fb      	ldr	r3, [r7, #12]
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	681a      	ldr	r2, [r3, #0]
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a918:	601a      	str	r2, [r3, #0]
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	681a      	ldr	r2, [r3, #0]
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a928:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a92a:	68fb      	ldr	r3, [r7, #12]
 800a92c:	2201      	movs	r2, #1
 800a92e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a932:	68fb      	ldr	r3, [r7, #12]
 800a934:	2200      	movs	r2, #0
 800a936:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800a93a:	2303      	movs	r3, #3
 800a93c:	e017      	b.n	800a96e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800a93e:	697b      	ldr	r3, [r7, #20]
 800a940:	2b00      	cmp	r3, #0
 800a942:	d101      	bne.n	800a948 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800a944:	2300      	movs	r3, #0
 800a946:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800a948:	697b      	ldr	r3, [r7, #20]
 800a94a:	3b01      	subs	r3, #1
 800a94c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	689a      	ldr	r2, [r3, #8]
 800a954:	68bb      	ldr	r3, [r7, #8]
 800a956:	4013      	ands	r3, r2
 800a958:	68ba      	ldr	r2, [r7, #8]
 800a95a:	429a      	cmp	r2, r3
 800a95c:	bf0c      	ite	eq
 800a95e:	2301      	moveq	r3, #1
 800a960:	2300      	movne	r3, #0
 800a962:	b2db      	uxtb	r3, r3
 800a964:	461a      	mov	r2, r3
 800a966:	79fb      	ldrb	r3, [r7, #7]
 800a968:	429a      	cmp	r2, r3
 800a96a:	d19b      	bne.n	800a8a4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800a96c:	2300      	movs	r3, #0
}
 800a96e:	4618      	mov	r0, r3
 800a970:	3720      	adds	r7, #32
 800a972:	46bd      	mov	sp, r7
 800a974:	bd80      	pop	{r7, pc}
 800a976:	bf00      	nop
 800a978:	20000040 	.word	0x20000040

0800a97c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800a97c:	b580      	push	{r7, lr}
 800a97e:	b088      	sub	sp, #32
 800a980:	af02      	add	r7, sp, #8
 800a982:	60f8      	str	r0, [r7, #12]
 800a984:	60b9      	str	r1, [r7, #8]
 800a986:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	9300      	str	r3, [sp, #0]
 800a98c:	68bb      	ldr	r3, [r7, #8]
 800a98e:	2201      	movs	r2, #1
 800a990:	2102      	movs	r1, #2
 800a992:	68f8      	ldr	r0, [r7, #12]
 800a994:	f7ff ff6a 	bl	800a86c <SPI_WaitFlagStateUntilTimeout>
 800a998:	4603      	mov	r3, r0
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d007      	beq.n	800a9ae <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a9a2:	f043 0220 	orr.w	r2, r3, #32
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800a9aa:	2303      	movs	r3, #3
 800a9ac:	e032      	b.n	800aa14 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800a9ae:	4b1b      	ldr	r3, [pc, #108]	; (800aa1c <SPI_EndRxTxTransaction+0xa0>)
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	4a1b      	ldr	r2, [pc, #108]	; (800aa20 <SPI_EndRxTxTransaction+0xa4>)
 800a9b4:	fba2 2303 	umull	r2, r3, r2, r3
 800a9b8:	0d5b      	lsrs	r3, r3, #21
 800a9ba:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a9be:	fb02 f303 	mul.w	r3, r2, r3
 800a9c2:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	685b      	ldr	r3, [r3, #4]
 800a9c8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a9cc:	d112      	bne.n	800a9f4 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	9300      	str	r3, [sp, #0]
 800a9d2:	68bb      	ldr	r3, [r7, #8]
 800a9d4:	2200      	movs	r2, #0
 800a9d6:	2180      	movs	r1, #128	; 0x80
 800a9d8:	68f8      	ldr	r0, [r7, #12]
 800a9da:	f7ff ff47 	bl	800a86c <SPI_WaitFlagStateUntilTimeout>
 800a9de:	4603      	mov	r3, r0
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d016      	beq.n	800aa12 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a9e8:	f043 0220 	orr.w	r2, r3, #32
 800a9ec:	68fb      	ldr	r3, [r7, #12]
 800a9ee:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800a9f0:	2303      	movs	r3, #3
 800a9f2:	e00f      	b.n	800aa14 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800a9f4:	697b      	ldr	r3, [r7, #20]
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d00a      	beq.n	800aa10 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800a9fa:	697b      	ldr	r3, [r7, #20]
 800a9fc:	3b01      	subs	r3, #1
 800a9fe:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	689b      	ldr	r3, [r3, #8]
 800aa06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aa0a:	2b80      	cmp	r3, #128	; 0x80
 800aa0c:	d0f2      	beq.n	800a9f4 <SPI_EndRxTxTransaction+0x78>
 800aa0e:	e000      	b.n	800aa12 <SPI_EndRxTxTransaction+0x96>
        break;
 800aa10:	bf00      	nop
  }

  return HAL_OK;
 800aa12:	2300      	movs	r3, #0
}
 800aa14:	4618      	mov	r0, r3
 800aa16:	3718      	adds	r7, #24
 800aa18:	46bd      	mov	sp, r7
 800aa1a:	bd80      	pop	{r7, pc}
 800aa1c:	20000040 	.word	0x20000040
 800aa20:	165e9f81 	.word	0x165e9f81

0800aa24 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800aa24:	b084      	sub	sp, #16
 800aa26:	b480      	push	{r7}
 800aa28:	b085      	sub	sp, #20
 800aa2a:	af00      	add	r7, sp, #0
 800aa2c:	6078      	str	r0, [r7, #4]
 800aa2e:	f107 001c 	add.w	r0, r7, #28
 800aa32:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800aa36:	2300      	movs	r3, #0
 800aa38:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800aa3a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800aa3c:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800aa3e:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800aa40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800aa42:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800aa44:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800aa46:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800aa48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800aa4a:	431a      	orrs	r2, r3
             Init.ClockDiv
 800aa4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800aa4e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800aa50:	68fa      	ldr	r2, [r7, #12]
 800aa52:	4313      	orrs	r3, r2
 800aa54:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	685b      	ldr	r3, [r3, #4]
 800aa5a:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800aa5e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800aa62:	68fa      	ldr	r2, [r7, #12]
 800aa64:	431a      	orrs	r2, r3
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800aa6a:	2300      	movs	r3, #0
}
 800aa6c:	4618      	mov	r0, r3
 800aa6e:	3714      	adds	r7, #20
 800aa70:	46bd      	mov	sp, r7
 800aa72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa76:	b004      	add	sp, #16
 800aa78:	4770      	bx	lr

0800aa7a <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800aa7a:	b480      	push	{r7}
 800aa7c:	b083      	sub	sp, #12
 800aa7e:	af00      	add	r7, sp, #0
 800aa80:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800aa88:	4618      	mov	r0, r3
 800aa8a:	370c      	adds	r7, #12
 800aa8c:	46bd      	mov	sp, r7
 800aa8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa92:	4770      	bx	lr

0800aa94 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800aa94:	b480      	push	{r7}
 800aa96:	b083      	sub	sp, #12
 800aa98:	af00      	add	r7, sp, #0
 800aa9a:	6078      	str	r0, [r7, #4]
 800aa9c:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800aa9e:	683b      	ldr	r3, [r7, #0]
 800aaa0:	681a      	ldr	r2, [r3, #0]
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800aaa8:	2300      	movs	r3, #0
}
 800aaaa:	4618      	mov	r0, r3
 800aaac:	370c      	adds	r7, #12
 800aaae:	46bd      	mov	sp, r7
 800aab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aab4:	4770      	bx	lr

0800aab6 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800aab6:	b480      	push	{r7}
 800aab8:	b083      	sub	sp, #12
 800aaba:	af00      	add	r7, sp, #0
 800aabc:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	2203      	movs	r2, #3
 800aac2:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800aac4:	2300      	movs	r3, #0
}
 800aac6:	4618      	mov	r0, r3
 800aac8:	370c      	adds	r7, #12
 800aaca:	46bd      	mov	sp, r7
 800aacc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aad0:	4770      	bx	lr

0800aad2 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800aad2:	b480      	push	{r7}
 800aad4:	b083      	sub	sp, #12
 800aad6:	af00      	add	r7, sp, #0
 800aad8:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	f003 0303 	and.w	r3, r3, #3
}
 800aae2:	4618      	mov	r0, r3
 800aae4:	370c      	adds	r7, #12
 800aae6:	46bd      	mov	sp, r7
 800aae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaec:	4770      	bx	lr

0800aaee <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800aaee:	b480      	push	{r7}
 800aaf0:	b085      	sub	sp, #20
 800aaf2:	af00      	add	r7, sp, #0
 800aaf4:	6078      	str	r0, [r7, #4]
 800aaf6:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800aaf8:	2300      	movs	r3, #0
 800aafa:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800aafc:	683b      	ldr	r3, [r7, #0]
 800aafe:	681a      	ldr	r2, [r3, #0]
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800ab04:	683b      	ldr	r3, [r7, #0]
 800ab06:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800ab08:	683b      	ldr	r3, [r7, #0]
 800ab0a:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800ab0c:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800ab0e:	683b      	ldr	r3, [r7, #0]
 800ab10:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800ab12:	431a      	orrs	r2, r3
                       Command->CPSM);
 800ab14:	683b      	ldr	r3, [r7, #0]
 800ab16:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800ab18:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800ab1a:	68fa      	ldr	r2, [r7, #12]
 800ab1c:	4313      	orrs	r3, r2
 800ab1e:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	68db      	ldr	r3, [r3, #12]
 800ab24:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800ab28:	f023 030f 	bic.w	r3, r3, #15
 800ab2c:	68fa      	ldr	r2, [r7, #12]
 800ab2e:	431a      	orrs	r2, r3
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800ab34:	2300      	movs	r3, #0
}
 800ab36:	4618      	mov	r0, r3
 800ab38:	3714      	adds	r7, #20
 800ab3a:	46bd      	mov	sp, r7
 800ab3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab40:	4770      	bx	lr

0800ab42 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800ab42:	b480      	push	{r7}
 800ab44:	b083      	sub	sp, #12
 800ab46:	af00      	add	r7, sp, #0
 800ab48:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	691b      	ldr	r3, [r3, #16]
 800ab4e:	b2db      	uxtb	r3, r3
}
 800ab50:	4618      	mov	r0, r3
 800ab52:	370c      	adds	r7, #12
 800ab54:	46bd      	mov	sp, r7
 800ab56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab5a:	4770      	bx	lr

0800ab5c <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800ab5c:	b480      	push	{r7}
 800ab5e:	b085      	sub	sp, #20
 800ab60:	af00      	add	r7, sp, #0
 800ab62:	6078      	str	r0, [r7, #4]
 800ab64:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	3314      	adds	r3, #20
 800ab6a:	461a      	mov	r2, r3
 800ab6c:	683b      	ldr	r3, [r7, #0]
 800ab6e:	4413      	add	r3, r2
 800ab70:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	681b      	ldr	r3, [r3, #0]
}  
 800ab76:	4618      	mov	r0, r3
 800ab78:	3714      	adds	r7, #20
 800ab7a:	46bd      	mov	sp, r7
 800ab7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab80:	4770      	bx	lr

0800ab82 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800ab82:	b480      	push	{r7}
 800ab84:	b085      	sub	sp, #20
 800ab86:	af00      	add	r7, sp, #0
 800ab88:	6078      	str	r0, [r7, #4]
 800ab8a:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800ab8c:	2300      	movs	r3, #0
 800ab8e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800ab90:	683b      	ldr	r3, [r7, #0]
 800ab92:	681a      	ldr	r2, [r3, #0]
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800ab98:	683b      	ldr	r3, [r7, #0]
 800ab9a:	685a      	ldr	r2, [r3, #4]
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800aba0:	683b      	ldr	r3, [r7, #0]
 800aba2:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800aba4:	683b      	ldr	r3, [r7, #0]
 800aba6:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800aba8:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800abaa:	683b      	ldr	r3, [r7, #0]
 800abac:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800abae:	431a      	orrs	r2, r3
                       Data->DPSM);
 800abb0:	683b      	ldr	r3, [r7, #0]
 800abb2:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800abb4:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800abb6:	68fa      	ldr	r2, [r7, #12]
 800abb8:	4313      	orrs	r3, r2
 800abba:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abc0:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800abc4:	68fb      	ldr	r3, [r7, #12]
 800abc6:	431a      	orrs	r2, r3
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800abcc:	2300      	movs	r3, #0

}
 800abce:	4618      	mov	r0, r3
 800abd0:	3714      	adds	r7, #20
 800abd2:	46bd      	mov	sp, r7
 800abd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abd8:	4770      	bx	lr

0800abda <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800abda:	b580      	push	{r7, lr}
 800abdc:	b088      	sub	sp, #32
 800abde:	af00      	add	r7, sp, #0
 800abe0:	6078      	str	r0, [r7, #4]
 800abe2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800abe4:	683b      	ldr	r3, [r7, #0]
 800abe6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800abe8:	2310      	movs	r3, #16
 800abea:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800abec:	2340      	movs	r3, #64	; 0x40
 800abee:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800abf0:	2300      	movs	r3, #0
 800abf2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800abf4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800abf8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800abfa:	f107 0308 	add.w	r3, r7, #8
 800abfe:	4619      	mov	r1, r3
 800ac00:	6878      	ldr	r0, [r7, #4]
 800ac02:	f7ff ff74 	bl	800aaee <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800ac06:	f241 3288 	movw	r2, #5000	; 0x1388
 800ac0a:	2110      	movs	r1, #16
 800ac0c:	6878      	ldr	r0, [r7, #4]
 800ac0e:	f000 fa19 	bl	800b044 <SDMMC_GetCmdResp1>
 800ac12:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ac14:	69fb      	ldr	r3, [r7, #28]
}
 800ac16:	4618      	mov	r0, r3
 800ac18:	3720      	adds	r7, #32
 800ac1a:	46bd      	mov	sp, r7
 800ac1c:	bd80      	pop	{r7, pc}

0800ac1e <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800ac1e:	b580      	push	{r7, lr}
 800ac20:	b088      	sub	sp, #32
 800ac22:	af00      	add	r7, sp, #0
 800ac24:	6078      	str	r0, [r7, #4]
 800ac26:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800ac28:	683b      	ldr	r3, [r7, #0]
 800ac2a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800ac2c:	2311      	movs	r3, #17
 800ac2e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ac30:	2340      	movs	r3, #64	; 0x40
 800ac32:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ac34:	2300      	movs	r3, #0
 800ac36:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ac38:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ac3c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ac3e:	f107 0308 	add.w	r3, r7, #8
 800ac42:	4619      	mov	r1, r3
 800ac44:	6878      	ldr	r0, [r7, #4]
 800ac46:	f7ff ff52 	bl	800aaee <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800ac4a:	f241 3288 	movw	r2, #5000	; 0x1388
 800ac4e:	2111      	movs	r1, #17
 800ac50:	6878      	ldr	r0, [r7, #4]
 800ac52:	f000 f9f7 	bl	800b044 <SDMMC_GetCmdResp1>
 800ac56:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ac58:	69fb      	ldr	r3, [r7, #28]
}
 800ac5a:	4618      	mov	r0, r3
 800ac5c:	3720      	adds	r7, #32
 800ac5e:	46bd      	mov	sp, r7
 800ac60:	bd80      	pop	{r7, pc}

0800ac62 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800ac62:	b580      	push	{r7, lr}
 800ac64:	b088      	sub	sp, #32
 800ac66:	af00      	add	r7, sp, #0
 800ac68:	6078      	str	r0, [r7, #4]
 800ac6a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800ac6c:	683b      	ldr	r3, [r7, #0]
 800ac6e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800ac70:	2312      	movs	r3, #18
 800ac72:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ac74:	2340      	movs	r3, #64	; 0x40
 800ac76:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ac78:	2300      	movs	r3, #0
 800ac7a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ac7c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ac80:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ac82:	f107 0308 	add.w	r3, r7, #8
 800ac86:	4619      	mov	r1, r3
 800ac88:	6878      	ldr	r0, [r7, #4]
 800ac8a:	f7ff ff30 	bl	800aaee <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800ac8e:	f241 3288 	movw	r2, #5000	; 0x1388
 800ac92:	2112      	movs	r1, #18
 800ac94:	6878      	ldr	r0, [r7, #4]
 800ac96:	f000 f9d5 	bl	800b044 <SDMMC_GetCmdResp1>
 800ac9a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ac9c:	69fb      	ldr	r3, [r7, #28]
}
 800ac9e:	4618      	mov	r0, r3
 800aca0:	3720      	adds	r7, #32
 800aca2:	46bd      	mov	sp, r7
 800aca4:	bd80      	pop	{r7, pc}

0800aca6 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800aca6:	b580      	push	{r7, lr}
 800aca8:	b088      	sub	sp, #32
 800acaa:	af00      	add	r7, sp, #0
 800acac:	6078      	str	r0, [r7, #4]
 800acae:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800acb0:	683b      	ldr	r3, [r7, #0]
 800acb2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800acb4:	2318      	movs	r3, #24
 800acb6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800acb8:	2340      	movs	r3, #64	; 0x40
 800acba:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800acbc:	2300      	movs	r3, #0
 800acbe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800acc0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800acc4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800acc6:	f107 0308 	add.w	r3, r7, #8
 800acca:	4619      	mov	r1, r3
 800accc:	6878      	ldr	r0, [r7, #4]
 800acce:	f7ff ff0e 	bl	800aaee <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800acd2:	f241 3288 	movw	r2, #5000	; 0x1388
 800acd6:	2118      	movs	r1, #24
 800acd8:	6878      	ldr	r0, [r7, #4]
 800acda:	f000 f9b3 	bl	800b044 <SDMMC_GetCmdResp1>
 800acde:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ace0:	69fb      	ldr	r3, [r7, #28]
}
 800ace2:	4618      	mov	r0, r3
 800ace4:	3720      	adds	r7, #32
 800ace6:	46bd      	mov	sp, r7
 800ace8:	bd80      	pop	{r7, pc}

0800acea <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800acea:	b580      	push	{r7, lr}
 800acec:	b088      	sub	sp, #32
 800acee:	af00      	add	r7, sp, #0
 800acf0:	6078      	str	r0, [r7, #4]
 800acf2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800acf4:	683b      	ldr	r3, [r7, #0]
 800acf6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800acf8:	2319      	movs	r3, #25
 800acfa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800acfc:	2340      	movs	r3, #64	; 0x40
 800acfe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ad00:	2300      	movs	r3, #0
 800ad02:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ad04:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ad08:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ad0a:	f107 0308 	add.w	r3, r7, #8
 800ad0e:	4619      	mov	r1, r3
 800ad10:	6878      	ldr	r0, [r7, #4]
 800ad12:	f7ff feec 	bl	800aaee <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800ad16:	f241 3288 	movw	r2, #5000	; 0x1388
 800ad1a:	2119      	movs	r1, #25
 800ad1c:	6878      	ldr	r0, [r7, #4]
 800ad1e:	f000 f991 	bl	800b044 <SDMMC_GetCmdResp1>
 800ad22:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ad24:	69fb      	ldr	r3, [r7, #28]
}
 800ad26:	4618      	mov	r0, r3
 800ad28:	3720      	adds	r7, #32
 800ad2a:	46bd      	mov	sp, r7
 800ad2c:	bd80      	pop	{r7, pc}
	...

0800ad30 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800ad30:	b580      	push	{r7, lr}
 800ad32:	b088      	sub	sp, #32
 800ad34:	af00      	add	r7, sp, #0
 800ad36:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800ad38:	2300      	movs	r3, #0
 800ad3a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800ad3c:	230c      	movs	r3, #12
 800ad3e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ad40:	2340      	movs	r3, #64	; 0x40
 800ad42:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ad44:	2300      	movs	r3, #0
 800ad46:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ad48:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ad4c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ad4e:	f107 0308 	add.w	r3, r7, #8
 800ad52:	4619      	mov	r1, r3
 800ad54:	6878      	ldr	r0, [r7, #4]
 800ad56:	f7ff feca 	bl	800aaee <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800ad5a:	4a05      	ldr	r2, [pc, #20]	; (800ad70 <SDMMC_CmdStopTransfer+0x40>)
 800ad5c:	210c      	movs	r1, #12
 800ad5e:	6878      	ldr	r0, [r7, #4]
 800ad60:	f000 f970 	bl	800b044 <SDMMC_GetCmdResp1>
 800ad64:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ad66:	69fb      	ldr	r3, [r7, #28]
}
 800ad68:	4618      	mov	r0, r3
 800ad6a:	3720      	adds	r7, #32
 800ad6c:	46bd      	mov	sp, r7
 800ad6e:	bd80      	pop	{r7, pc}
 800ad70:	05f5e100 	.word	0x05f5e100

0800ad74 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800ad74:	b580      	push	{r7, lr}
 800ad76:	b08a      	sub	sp, #40	; 0x28
 800ad78:	af00      	add	r7, sp, #0
 800ad7a:	60f8      	str	r0, [r7, #12]
 800ad7c:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800ad80:	683b      	ldr	r3, [r7, #0]
 800ad82:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800ad84:	2307      	movs	r3, #7
 800ad86:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ad88:	2340      	movs	r3, #64	; 0x40
 800ad8a:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ad8c:	2300      	movs	r3, #0
 800ad8e:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ad90:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ad94:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ad96:	f107 0310 	add.w	r3, r7, #16
 800ad9a:	4619      	mov	r1, r3
 800ad9c:	68f8      	ldr	r0, [r7, #12]
 800ad9e:	f7ff fea6 	bl	800aaee <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800ada2:	f241 3288 	movw	r2, #5000	; 0x1388
 800ada6:	2107      	movs	r1, #7
 800ada8:	68f8      	ldr	r0, [r7, #12]
 800adaa:	f000 f94b 	bl	800b044 <SDMMC_GetCmdResp1>
 800adae:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800adb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800adb2:	4618      	mov	r0, r3
 800adb4:	3728      	adds	r7, #40	; 0x28
 800adb6:	46bd      	mov	sp, r7
 800adb8:	bd80      	pop	{r7, pc}

0800adba <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800adba:	b580      	push	{r7, lr}
 800adbc:	b088      	sub	sp, #32
 800adbe:	af00      	add	r7, sp, #0
 800adc0:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800adc2:	2300      	movs	r3, #0
 800adc4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800adc6:	2300      	movs	r3, #0
 800adc8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800adca:	2300      	movs	r3, #0
 800adcc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800adce:	2300      	movs	r3, #0
 800add0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800add2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800add6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800add8:	f107 0308 	add.w	r3, r7, #8
 800addc:	4619      	mov	r1, r3
 800adde:	6878      	ldr	r0, [r7, #4]
 800ade0:	f7ff fe85 	bl	800aaee <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800ade4:	6878      	ldr	r0, [r7, #4]
 800ade6:	f000 fb65 	bl	800b4b4 <SDMMC_GetCmdError>
 800adea:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800adec:	69fb      	ldr	r3, [r7, #28]
}
 800adee:	4618      	mov	r0, r3
 800adf0:	3720      	adds	r7, #32
 800adf2:	46bd      	mov	sp, r7
 800adf4:	bd80      	pop	{r7, pc}

0800adf6 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800adf6:	b580      	push	{r7, lr}
 800adf8:	b088      	sub	sp, #32
 800adfa:	af00      	add	r7, sp, #0
 800adfc:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800adfe:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800ae02:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800ae04:	2308      	movs	r3, #8
 800ae06:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ae08:	2340      	movs	r3, #64	; 0x40
 800ae0a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ae0c:	2300      	movs	r3, #0
 800ae0e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ae10:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ae14:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ae16:	f107 0308 	add.w	r3, r7, #8
 800ae1a:	4619      	mov	r1, r3
 800ae1c:	6878      	ldr	r0, [r7, #4]
 800ae1e:	f7ff fe66 	bl	800aaee <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800ae22:	6878      	ldr	r0, [r7, #4]
 800ae24:	f000 faf8 	bl	800b418 <SDMMC_GetCmdResp7>
 800ae28:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ae2a:	69fb      	ldr	r3, [r7, #28]
}
 800ae2c:	4618      	mov	r0, r3
 800ae2e:	3720      	adds	r7, #32
 800ae30:	46bd      	mov	sp, r7
 800ae32:	bd80      	pop	{r7, pc}

0800ae34 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800ae34:	b580      	push	{r7, lr}
 800ae36:	b088      	sub	sp, #32
 800ae38:	af00      	add	r7, sp, #0
 800ae3a:	6078      	str	r0, [r7, #4]
 800ae3c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800ae3e:	683b      	ldr	r3, [r7, #0]
 800ae40:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800ae42:	2337      	movs	r3, #55	; 0x37
 800ae44:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ae46:	2340      	movs	r3, #64	; 0x40
 800ae48:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ae4a:	2300      	movs	r3, #0
 800ae4c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ae4e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ae52:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ae54:	f107 0308 	add.w	r3, r7, #8
 800ae58:	4619      	mov	r1, r3
 800ae5a:	6878      	ldr	r0, [r7, #4]
 800ae5c:	f7ff fe47 	bl	800aaee <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800ae60:	f241 3288 	movw	r2, #5000	; 0x1388
 800ae64:	2137      	movs	r1, #55	; 0x37
 800ae66:	6878      	ldr	r0, [r7, #4]
 800ae68:	f000 f8ec 	bl	800b044 <SDMMC_GetCmdResp1>
 800ae6c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ae6e:	69fb      	ldr	r3, [r7, #28]
}
 800ae70:	4618      	mov	r0, r3
 800ae72:	3720      	adds	r7, #32
 800ae74:	46bd      	mov	sp, r7
 800ae76:	bd80      	pop	{r7, pc}

0800ae78 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800ae78:	b580      	push	{r7, lr}
 800ae7a:	b088      	sub	sp, #32
 800ae7c:	af00      	add	r7, sp, #0
 800ae7e:	6078      	str	r0, [r7, #4]
 800ae80:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800ae82:	683b      	ldr	r3, [r7, #0]
 800ae84:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ae88:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ae8c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800ae8e:	2329      	movs	r3, #41	; 0x29
 800ae90:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ae92:	2340      	movs	r3, #64	; 0x40
 800ae94:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ae96:	2300      	movs	r3, #0
 800ae98:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ae9a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ae9e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800aea0:	f107 0308 	add.w	r3, r7, #8
 800aea4:	4619      	mov	r1, r3
 800aea6:	6878      	ldr	r0, [r7, #4]
 800aea8:	f7ff fe21 	bl	800aaee <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800aeac:	6878      	ldr	r0, [r7, #4]
 800aeae:	f000 f9ff 	bl	800b2b0 <SDMMC_GetCmdResp3>
 800aeb2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800aeb4:	69fb      	ldr	r3, [r7, #28]
}
 800aeb6:	4618      	mov	r0, r3
 800aeb8:	3720      	adds	r7, #32
 800aeba:	46bd      	mov	sp, r7
 800aebc:	bd80      	pop	{r7, pc}

0800aebe <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 800aebe:	b580      	push	{r7, lr}
 800aec0:	b088      	sub	sp, #32
 800aec2:	af00      	add	r7, sp, #0
 800aec4:	6078      	str	r0, [r7, #4]
 800aec6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800aec8:	683b      	ldr	r3, [r7, #0]
 800aeca:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800aecc:	2306      	movs	r3, #6
 800aece:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800aed0:	2340      	movs	r3, #64	; 0x40
 800aed2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800aed4:	2300      	movs	r3, #0
 800aed6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800aed8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aedc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800aede:	f107 0308 	add.w	r3, r7, #8
 800aee2:	4619      	mov	r1, r3
 800aee4:	6878      	ldr	r0, [r7, #4]
 800aee6:	f7ff fe02 	bl	800aaee <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 800aeea:	f241 3288 	movw	r2, #5000	; 0x1388
 800aeee:	2106      	movs	r1, #6
 800aef0:	6878      	ldr	r0, [r7, #4]
 800aef2:	f000 f8a7 	bl	800b044 <SDMMC_GetCmdResp1>
 800aef6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800aef8:	69fb      	ldr	r3, [r7, #28]
}
 800aefa:	4618      	mov	r0, r3
 800aefc:	3720      	adds	r7, #32
 800aefe:	46bd      	mov	sp, r7
 800af00:	bd80      	pop	{r7, pc}

0800af02 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 800af02:	b580      	push	{r7, lr}
 800af04:	b088      	sub	sp, #32
 800af06:	af00      	add	r7, sp, #0
 800af08:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800af0a:	2300      	movs	r3, #0
 800af0c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800af0e:	2333      	movs	r3, #51	; 0x33
 800af10:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800af12:	2340      	movs	r3, #64	; 0x40
 800af14:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800af16:	2300      	movs	r3, #0
 800af18:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800af1a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800af1e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800af20:	f107 0308 	add.w	r3, r7, #8
 800af24:	4619      	mov	r1, r3
 800af26:	6878      	ldr	r0, [r7, #4]
 800af28:	f7ff fde1 	bl	800aaee <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 800af2c:	f241 3288 	movw	r2, #5000	; 0x1388
 800af30:	2133      	movs	r1, #51	; 0x33
 800af32:	6878      	ldr	r0, [r7, #4]
 800af34:	f000 f886 	bl	800b044 <SDMMC_GetCmdResp1>
 800af38:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800af3a:	69fb      	ldr	r3, [r7, #28]
}
 800af3c:	4618      	mov	r0, r3
 800af3e:	3720      	adds	r7, #32
 800af40:	46bd      	mov	sp, r7
 800af42:	bd80      	pop	{r7, pc}

0800af44 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800af44:	b580      	push	{r7, lr}
 800af46:	b088      	sub	sp, #32
 800af48:	af00      	add	r7, sp, #0
 800af4a:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800af4c:	2300      	movs	r3, #0
 800af4e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800af50:	2302      	movs	r3, #2
 800af52:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800af54:	23c0      	movs	r3, #192	; 0xc0
 800af56:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800af58:	2300      	movs	r3, #0
 800af5a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800af5c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800af60:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800af62:	f107 0308 	add.w	r3, r7, #8
 800af66:	4619      	mov	r1, r3
 800af68:	6878      	ldr	r0, [r7, #4]
 800af6a:	f7ff fdc0 	bl	800aaee <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800af6e:	6878      	ldr	r0, [r7, #4]
 800af70:	f000 f956 	bl	800b220 <SDMMC_GetCmdResp2>
 800af74:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800af76:	69fb      	ldr	r3, [r7, #28]
}
 800af78:	4618      	mov	r0, r3
 800af7a:	3720      	adds	r7, #32
 800af7c:	46bd      	mov	sp, r7
 800af7e:	bd80      	pop	{r7, pc}

0800af80 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800af80:	b580      	push	{r7, lr}
 800af82:	b088      	sub	sp, #32
 800af84:	af00      	add	r7, sp, #0
 800af86:	6078      	str	r0, [r7, #4]
 800af88:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800af8a:	683b      	ldr	r3, [r7, #0]
 800af8c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800af8e:	2309      	movs	r3, #9
 800af90:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800af92:	23c0      	movs	r3, #192	; 0xc0
 800af94:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800af96:	2300      	movs	r3, #0
 800af98:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800af9a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800af9e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800afa0:	f107 0308 	add.w	r3, r7, #8
 800afa4:	4619      	mov	r1, r3
 800afa6:	6878      	ldr	r0, [r7, #4]
 800afa8:	f7ff fda1 	bl	800aaee <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800afac:	6878      	ldr	r0, [r7, #4]
 800afae:	f000 f937 	bl	800b220 <SDMMC_GetCmdResp2>
 800afb2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800afb4:	69fb      	ldr	r3, [r7, #28]
}
 800afb6:	4618      	mov	r0, r3
 800afb8:	3720      	adds	r7, #32
 800afba:	46bd      	mov	sp, r7
 800afbc:	bd80      	pop	{r7, pc}

0800afbe <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800afbe:	b580      	push	{r7, lr}
 800afc0:	b088      	sub	sp, #32
 800afc2:	af00      	add	r7, sp, #0
 800afc4:	6078      	str	r0, [r7, #4]
 800afc6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800afc8:	2300      	movs	r3, #0
 800afca:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800afcc:	2303      	movs	r3, #3
 800afce:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800afd0:	2340      	movs	r3, #64	; 0x40
 800afd2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800afd4:	2300      	movs	r3, #0
 800afd6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800afd8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800afdc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800afde:	f107 0308 	add.w	r3, r7, #8
 800afe2:	4619      	mov	r1, r3
 800afe4:	6878      	ldr	r0, [r7, #4]
 800afe6:	f7ff fd82 	bl	800aaee <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800afea:	683a      	ldr	r2, [r7, #0]
 800afec:	2103      	movs	r1, #3
 800afee:	6878      	ldr	r0, [r7, #4]
 800aff0:	f000 f99c 	bl	800b32c <SDMMC_GetCmdResp6>
 800aff4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800aff6:	69fb      	ldr	r3, [r7, #28]
}
 800aff8:	4618      	mov	r0, r3
 800affa:	3720      	adds	r7, #32
 800affc:	46bd      	mov	sp, r7
 800affe:	bd80      	pop	{r7, pc}

0800b000 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800b000:	b580      	push	{r7, lr}
 800b002:	b088      	sub	sp, #32
 800b004:	af00      	add	r7, sp, #0
 800b006:	6078      	str	r0, [r7, #4]
 800b008:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800b00a:	683b      	ldr	r3, [r7, #0]
 800b00c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800b00e:	230d      	movs	r3, #13
 800b010:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b012:	2340      	movs	r3, #64	; 0x40
 800b014:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b016:	2300      	movs	r3, #0
 800b018:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b01a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b01e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b020:	f107 0308 	add.w	r3, r7, #8
 800b024:	4619      	mov	r1, r3
 800b026:	6878      	ldr	r0, [r7, #4]
 800b028:	f7ff fd61 	bl	800aaee <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800b02c:	f241 3288 	movw	r2, #5000	; 0x1388
 800b030:	210d      	movs	r1, #13
 800b032:	6878      	ldr	r0, [r7, #4]
 800b034:	f000 f806 	bl	800b044 <SDMMC_GetCmdResp1>
 800b038:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b03a:	69fb      	ldr	r3, [r7, #28]
}
 800b03c:	4618      	mov	r0, r3
 800b03e:	3720      	adds	r7, #32
 800b040:	46bd      	mov	sp, r7
 800b042:	bd80      	pop	{r7, pc}

0800b044 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800b044:	b580      	push	{r7, lr}
 800b046:	b088      	sub	sp, #32
 800b048:	af00      	add	r7, sp, #0
 800b04a:	60f8      	str	r0, [r7, #12]
 800b04c:	460b      	mov	r3, r1
 800b04e:	607a      	str	r2, [r7, #4]
 800b050:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800b052:	4b70      	ldr	r3, [pc, #448]	; (800b214 <SDMMC_GetCmdResp1+0x1d0>)
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	4a70      	ldr	r2, [pc, #448]	; (800b218 <SDMMC_GetCmdResp1+0x1d4>)
 800b058:	fba2 2303 	umull	r2, r3, r2, r3
 800b05c:	0a5a      	lsrs	r2, r3, #9
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	fb02 f303 	mul.w	r3, r2, r3
 800b064:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800b066:	69fb      	ldr	r3, [r7, #28]
 800b068:	1e5a      	subs	r2, r3, #1
 800b06a:	61fa      	str	r2, [r7, #28]
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	d102      	bne.n	800b076 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b070:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b074:	e0c9      	b.n	800b20a <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 800b076:	68fb      	ldr	r3, [r7, #12]
 800b078:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b07a:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b07c:	69bb      	ldr	r3, [r7, #24]
 800b07e:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800b082:	2b00      	cmp	r3, #0
 800b084:	d0ef      	beq.n	800b066 <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800b086:	69bb      	ldr	r3, [r7, #24]
 800b088:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	d1ea      	bne.n	800b066 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800b090:	68fb      	ldr	r3, [r7, #12]
 800b092:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b094:	f003 0304 	and.w	r3, r3, #4
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d004      	beq.n	800b0a6 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800b09c:	68fb      	ldr	r3, [r7, #12]
 800b09e:	2204      	movs	r2, #4
 800b0a0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b0a2:	2304      	movs	r3, #4
 800b0a4:	e0b1      	b.n	800b20a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800b0a6:	68fb      	ldr	r3, [r7, #12]
 800b0a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b0aa:	f003 0301 	and.w	r3, r3, #1
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d004      	beq.n	800b0bc <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800b0b2:	68fb      	ldr	r3, [r7, #12]
 800b0b4:	2201      	movs	r2, #1
 800b0b6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b0b8:	2301      	movs	r3, #1
 800b0ba:	e0a6      	b.n	800b20a <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800b0bc:	68fb      	ldr	r3, [r7, #12]
 800b0be:	22c5      	movs	r2, #197	; 0xc5
 800b0c0:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800b0c2:	68f8      	ldr	r0, [r7, #12]
 800b0c4:	f7ff fd3d 	bl	800ab42 <SDIO_GetCommandResponse>
 800b0c8:	4603      	mov	r3, r0
 800b0ca:	461a      	mov	r2, r3
 800b0cc:	7afb      	ldrb	r3, [r7, #11]
 800b0ce:	4293      	cmp	r3, r2
 800b0d0:	d001      	beq.n	800b0d6 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b0d2:	2301      	movs	r3, #1
 800b0d4:	e099      	b.n	800b20a <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800b0d6:	2100      	movs	r1, #0
 800b0d8:	68f8      	ldr	r0, [r7, #12]
 800b0da:	f7ff fd3f 	bl	800ab5c <SDIO_GetResponse>
 800b0de:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800b0e0:	697a      	ldr	r2, [r7, #20]
 800b0e2:	4b4e      	ldr	r3, [pc, #312]	; (800b21c <SDMMC_GetCmdResp1+0x1d8>)
 800b0e4:	4013      	ands	r3, r2
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	d101      	bne.n	800b0ee <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800b0ea:	2300      	movs	r3, #0
 800b0ec:	e08d      	b.n	800b20a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800b0ee:	697b      	ldr	r3, [r7, #20]
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	da02      	bge.n	800b0fa <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800b0f4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b0f8:	e087      	b.n	800b20a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800b0fa:	697b      	ldr	r3, [r7, #20]
 800b0fc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b100:	2b00      	cmp	r3, #0
 800b102:	d001      	beq.n	800b108 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800b104:	2340      	movs	r3, #64	; 0x40
 800b106:	e080      	b.n	800b20a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800b108:	697b      	ldr	r3, [r7, #20]
 800b10a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b10e:	2b00      	cmp	r3, #0
 800b110:	d001      	beq.n	800b116 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800b112:	2380      	movs	r3, #128	; 0x80
 800b114:	e079      	b.n	800b20a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800b116:	697b      	ldr	r3, [r7, #20]
 800b118:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	d002      	beq.n	800b126 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800b120:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b124:	e071      	b.n	800b20a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800b126:	697b      	ldr	r3, [r7, #20]
 800b128:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d002      	beq.n	800b136 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800b130:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b134:	e069      	b.n	800b20a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800b136:	697b      	ldr	r3, [r7, #20]
 800b138:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d002      	beq.n	800b146 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800b140:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b144:	e061      	b.n	800b20a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800b146:	697b      	ldr	r3, [r7, #20]
 800b148:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d002      	beq.n	800b156 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800b150:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b154:	e059      	b.n	800b20a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800b156:	697b      	ldr	r3, [r7, #20]
 800b158:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	d002      	beq.n	800b166 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b160:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b164:	e051      	b.n	800b20a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800b166:	697b      	ldr	r3, [r7, #20]
 800b168:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	d002      	beq.n	800b176 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b170:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b174:	e049      	b.n	800b20a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800b176:	697b      	ldr	r3, [r7, #20]
 800b178:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	d002      	beq.n	800b186 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800b180:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800b184:	e041      	b.n	800b20a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800b186:	697b      	ldr	r3, [r7, #20]
 800b188:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	d002      	beq.n	800b196 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800b190:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b194:	e039      	b.n	800b20a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800b196:	697b      	ldr	r3, [r7, #20]
 800b198:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d002      	beq.n	800b1a6 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800b1a0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800b1a4:	e031      	b.n	800b20a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800b1a6:	697b      	ldr	r3, [r7, #20]
 800b1a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	d002      	beq.n	800b1b6 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800b1b0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800b1b4:	e029      	b.n	800b20a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800b1b6:	697b      	ldr	r3, [r7, #20]
 800b1b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d002      	beq.n	800b1c6 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800b1c0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800b1c4:	e021      	b.n	800b20a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800b1c6:	697b      	ldr	r3, [r7, #20]
 800b1c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	d002      	beq.n	800b1d6 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800b1d0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800b1d4:	e019      	b.n	800b20a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800b1d6:	697b      	ldr	r3, [r7, #20]
 800b1d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	d002      	beq.n	800b1e6 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800b1e0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800b1e4:	e011      	b.n	800b20a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800b1e6:	697b      	ldr	r3, [r7, #20]
 800b1e8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	d002      	beq.n	800b1f6 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800b1f0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800b1f4:	e009      	b.n	800b20a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800b1f6:	697b      	ldr	r3, [r7, #20]
 800b1f8:	f003 0308 	and.w	r3, r3, #8
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	d002      	beq.n	800b206 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800b200:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800b204:	e001      	b.n	800b20a <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b206:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800b20a:	4618      	mov	r0, r3
 800b20c:	3720      	adds	r7, #32
 800b20e:	46bd      	mov	sp, r7
 800b210:	bd80      	pop	{r7, pc}
 800b212:	bf00      	nop
 800b214:	20000040 	.word	0x20000040
 800b218:	10624dd3 	.word	0x10624dd3
 800b21c:	fdffe008 	.word	0xfdffe008

0800b220 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800b220:	b480      	push	{r7}
 800b222:	b085      	sub	sp, #20
 800b224:	af00      	add	r7, sp, #0
 800b226:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b228:	4b1f      	ldr	r3, [pc, #124]	; (800b2a8 <SDMMC_GetCmdResp2+0x88>)
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	4a1f      	ldr	r2, [pc, #124]	; (800b2ac <SDMMC_GetCmdResp2+0x8c>)
 800b22e:	fba2 2303 	umull	r2, r3, r2, r3
 800b232:	0a5b      	lsrs	r3, r3, #9
 800b234:	f241 3288 	movw	r2, #5000	; 0x1388
 800b238:	fb02 f303 	mul.w	r3, r2, r3
 800b23c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800b23e:	68fb      	ldr	r3, [r7, #12]
 800b240:	1e5a      	subs	r2, r3, #1
 800b242:	60fa      	str	r2, [r7, #12]
 800b244:	2b00      	cmp	r3, #0
 800b246:	d102      	bne.n	800b24e <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b248:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b24c:	e026      	b.n	800b29c <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b252:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b254:	68bb      	ldr	r3, [r7, #8]
 800b256:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d0ef      	beq.n	800b23e <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800b25e:	68bb      	ldr	r3, [r7, #8]
 800b260:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b264:	2b00      	cmp	r3, #0
 800b266:	d1ea      	bne.n	800b23e <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b26c:	f003 0304 	and.w	r3, r3, #4
 800b270:	2b00      	cmp	r3, #0
 800b272:	d004      	beq.n	800b27e <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	2204      	movs	r2, #4
 800b278:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b27a:	2304      	movs	r3, #4
 800b27c:	e00e      	b.n	800b29c <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b282:	f003 0301 	and.w	r3, r3, #1
 800b286:	2b00      	cmp	r3, #0
 800b288:	d004      	beq.n	800b294 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	2201      	movs	r2, #1
 800b28e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b290:	2301      	movs	r3, #1
 800b292:	e003      	b.n	800b29c <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	22c5      	movs	r2, #197	; 0xc5
 800b298:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800b29a:	2300      	movs	r3, #0
}
 800b29c:	4618      	mov	r0, r3
 800b29e:	3714      	adds	r7, #20
 800b2a0:	46bd      	mov	sp, r7
 800b2a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2a6:	4770      	bx	lr
 800b2a8:	20000040 	.word	0x20000040
 800b2ac:	10624dd3 	.word	0x10624dd3

0800b2b0 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800b2b0:	b480      	push	{r7}
 800b2b2:	b085      	sub	sp, #20
 800b2b4:	af00      	add	r7, sp, #0
 800b2b6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b2b8:	4b1a      	ldr	r3, [pc, #104]	; (800b324 <SDMMC_GetCmdResp3+0x74>)
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	4a1a      	ldr	r2, [pc, #104]	; (800b328 <SDMMC_GetCmdResp3+0x78>)
 800b2be:	fba2 2303 	umull	r2, r3, r2, r3
 800b2c2:	0a5b      	lsrs	r3, r3, #9
 800b2c4:	f241 3288 	movw	r2, #5000	; 0x1388
 800b2c8:	fb02 f303 	mul.w	r3, r2, r3
 800b2cc:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800b2ce:	68fb      	ldr	r3, [r7, #12]
 800b2d0:	1e5a      	subs	r2, r3, #1
 800b2d2:	60fa      	str	r2, [r7, #12]
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d102      	bne.n	800b2de <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b2d8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b2dc:	e01b      	b.n	800b316 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b2e2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b2e4:	68bb      	ldr	r3, [r7, #8]
 800b2e6:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	d0ef      	beq.n	800b2ce <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800b2ee:	68bb      	ldr	r3, [r7, #8]
 800b2f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	d1ea      	bne.n	800b2ce <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b2fc:	f003 0304 	and.w	r3, r3, #4
 800b300:	2b00      	cmp	r3, #0
 800b302:	d004      	beq.n	800b30e <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	2204      	movs	r2, #4
 800b308:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b30a:	2304      	movs	r3, #4
 800b30c:	e003      	b.n	800b316 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	22c5      	movs	r2, #197	; 0xc5
 800b312:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800b314:	2300      	movs	r3, #0
}
 800b316:	4618      	mov	r0, r3
 800b318:	3714      	adds	r7, #20
 800b31a:	46bd      	mov	sp, r7
 800b31c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b320:	4770      	bx	lr
 800b322:	bf00      	nop
 800b324:	20000040 	.word	0x20000040
 800b328:	10624dd3 	.word	0x10624dd3

0800b32c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800b32c:	b580      	push	{r7, lr}
 800b32e:	b088      	sub	sp, #32
 800b330:	af00      	add	r7, sp, #0
 800b332:	60f8      	str	r0, [r7, #12]
 800b334:	460b      	mov	r3, r1
 800b336:	607a      	str	r2, [r7, #4]
 800b338:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b33a:	4b35      	ldr	r3, [pc, #212]	; (800b410 <SDMMC_GetCmdResp6+0xe4>)
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	4a35      	ldr	r2, [pc, #212]	; (800b414 <SDMMC_GetCmdResp6+0xe8>)
 800b340:	fba2 2303 	umull	r2, r3, r2, r3
 800b344:	0a5b      	lsrs	r3, r3, #9
 800b346:	f241 3288 	movw	r2, #5000	; 0x1388
 800b34a:	fb02 f303 	mul.w	r3, r2, r3
 800b34e:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800b350:	69fb      	ldr	r3, [r7, #28]
 800b352:	1e5a      	subs	r2, r3, #1
 800b354:	61fa      	str	r2, [r7, #28]
 800b356:	2b00      	cmp	r3, #0
 800b358:	d102      	bne.n	800b360 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b35a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b35e:	e052      	b.n	800b406 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 800b360:	68fb      	ldr	r3, [r7, #12]
 800b362:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b364:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b366:	69bb      	ldr	r3, [r7, #24]
 800b368:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	d0ef      	beq.n	800b350 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800b370:	69bb      	ldr	r3, [r7, #24]
 800b372:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b376:	2b00      	cmp	r3, #0
 800b378:	d1ea      	bne.n	800b350 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800b37a:	68fb      	ldr	r3, [r7, #12]
 800b37c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b37e:	f003 0304 	and.w	r3, r3, #4
 800b382:	2b00      	cmp	r3, #0
 800b384:	d004      	beq.n	800b390 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800b386:	68fb      	ldr	r3, [r7, #12]
 800b388:	2204      	movs	r2, #4
 800b38a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b38c:	2304      	movs	r3, #4
 800b38e:	e03a      	b.n	800b406 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800b390:	68fb      	ldr	r3, [r7, #12]
 800b392:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b394:	f003 0301 	and.w	r3, r3, #1
 800b398:	2b00      	cmp	r3, #0
 800b39a:	d004      	beq.n	800b3a6 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800b39c:	68fb      	ldr	r3, [r7, #12]
 800b39e:	2201      	movs	r2, #1
 800b3a0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b3a2:	2301      	movs	r3, #1
 800b3a4:	e02f      	b.n	800b406 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800b3a6:	68f8      	ldr	r0, [r7, #12]
 800b3a8:	f7ff fbcb 	bl	800ab42 <SDIO_GetCommandResponse>
 800b3ac:	4603      	mov	r3, r0
 800b3ae:	461a      	mov	r2, r3
 800b3b0:	7afb      	ldrb	r3, [r7, #11]
 800b3b2:	4293      	cmp	r3, r2
 800b3b4:	d001      	beq.n	800b3ba <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b3b6:	2301      	movs	r3, #1
 800b3b8:	e025      	b.n	800b406 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800b3ba:	68fb      	ldr	r3, [r7, #12]
 800b3bc:	22c5      	movs	r2, #197	; 0xc5
 800b3be:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800b3c0:	2100      	movs	r1, #0
 800b3c2:	68f8      	ldr	r0, [r7, #12]
 800b3c4:	f7ff fbca 	bl	800ab5c <SDIO_GetResponse>
 800b3c8:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800b3ca:	697b      	ldr	r3, [r7, #20]
 800b3cc:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	d106      	bne.n	800b3e2 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800b3d4:	697b      	ldr	r3, [r7, #20]
 800b3d6:	0c1b      	lsrs	r3, r3, #16
 800b3d8:	b29a      	uxth	r2, r3
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800b3de:	2300      	movs	r3, #0
 800b3e0:	e011      	b.n	800b406 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800b3e2:	697b      	ldr	r3, [r7, #20]
 800b3e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b3e8:	2b00      	cmp	r3, #0
 800b3ea:	d002      	beq.n	800b3f2 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b3ec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b3f0:	e009      	b.n	800b406 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800b3f2:	697b      	ldr	r3, [r7, #20]
 800b3f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	d002      	beq.n	800b402 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b3fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b400:	e001      	b.n	800b406 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b402:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800b406:	4618      	mov	r0, r3
 800b408:	3720      	adds	r7, #32
 800b40a:	46bd      	mov	sp, r7
 800b40c:	bd80      	pop	{r7, pc}
 800b40e:	bf00      	nop
 800b410:	20000040 	.word	0x20000040
 800b414:	10624dd3 	.word	0x10624dd3

0800b418 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800b418:	b480      	push	{r7}
 800b41a:	b085      	sub	sp, #20
 800b41c:	af00      	add	r7, sp, #0
 800b41e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b420:	4b22      	ldr	r3, [pc, #136]	; (800b4ac <SDMMC_GetCmdResp7+0x94>)
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	4a22      	ldr	r2, [pc, #136]	; (800b4b0 <SDMMC_GetCmdResp7+0x98>)
 800b426:	fba2 2303 	umull	r2, r3, r2, r3
 800b42a:	0a5b      	lsrs	r3, r3, #9
 800b42c:	f241 3288 	movw	r2, #5000	; 0x1388
 800b430:	fb02 f303 	mul.w	r3, r2, r3
 800b434:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800b436:	68fb      	ldr	r3, [r7, #12]
 800b438:	1e5a      	subs	r2, r3, #1
 800b43a:	60fa      	str	r2, [r7, #12]
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	d102      	bne.n	800b446 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b440:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b444:	e02c      	b.n	800b4a0 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b44a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b44c:	68bb      	ldr	r3, [r7, #8]
 800b44e:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800b452:	2b00      	cmp	r3, #0
 800b454:	d0ef      	beq.n	800b436 <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800b456:	68bb      	ldr	r3, [r7, #8]
 800b458:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	d1ea      	bne.n	800b436 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b464:	f003 0304 	and.w	r3, r3, #4
 800b468:	2b00      	cmp	r3, #0
 800b46a:	d004      	beq.n	800b476 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	2204      	movs	r2, #4
 800b470:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b472:	2304      	movs	r3, #4
 800b474:	e014      	b.n	800b4a0 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b47a:	f003 0301 	and.w	r3, r3, #1
 800b47e:	2b00      	cmp	r3, #0
 800b480:	d004      	beq.n	800b48c <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	2201      	movs	r2, #1
 800b486:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b488:	2301      	movs	r3, #1
 800b48a:	e009      	b.n	800b4a0 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b490:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b494:	2b00      	cmp	r3, #0
 800b496:	d002      	beq.n	800b49e <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	2240      	movs	r2, #64	; 0x40
 800b49c:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800b49e:	2300      	movs	r3, #0
  
}
 800b4a0:	4618      	mov	r0, r3
 800b4a2:	3714      	adds	r7, #20
 800b4a4:	46bd      	mov	sp, r7
 800b4a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4aa:	4770      	bx	lr
 800b4ac:	20000040 	.word	0x20000040
 800b4b0:	10624dd3 	.word	0x10624dd3

0800b4b4 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800b4b4:	b480      	push	{r7}
 800b4b6:	b085      	sub	sp, #20
 800b4b8:	af00      	add	r7, sp, #0
 800b4ba:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b4bc:	4b11      	ldr	r3, [pc, #68]	; (800b504 <SDMMC_GetCmdError+0x50>)
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	4a11      	ldr	r2, [pc, #68]	; (800b508 <SDMMC_GetCmdError+0x54>)
 800b4c2:	fba2 2303 	umull	r2, r3, r2, r3
 800b4c6:	0a5b      	lsrs	r3, r3, #9
 800b4c8:	f241 3288 	movw	r2, #5000	; 0x1388
 800b4cc:	fb02 f303 	mul.w	r3, r2, r3
 800b4d0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800b4d2:	68fb      	ldr	r3, [r7, #12]
 800b4d4:	1e5a      	subs	r2, r3, #1
 800b4d6:	60fa      	str	r2, [r7, #12]
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	d102      	bne.n	800b4e2 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b4dc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b4e0:	e009      	b.n	800b4f6 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b4e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	d0f1      	beq.n	800b4d2 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	22c5      	movs	r2, #197	; 0xc5
 800b4f2:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800b4f4:	2300      	movs	r3, #0
}
 800b4f6:	4618      	mov	r0, r3
 800b4f8:	3714      	adds	r7, #20
 800b4fa:	46bd      	mov	sp, r7
 800b4fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b500:	4770      	bx	lr
 800b502:	bf00      	nop
 800b504:	20000040 	.word	0x20000040
 800b508:	10624dd3 	.word	0x10624dd3

0800b50c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b50c:	b084      	sub	sp, #16
 800b50e:	b580      	push	{r7, lr}
 800b510:	b084      	sub	sp, #16
 800b512:	af00      	add	r7, sp, #0
 800b514:	6078      	str	r0, [r7, #4]
 800b516:	f107 001c 	add.w	r0, r7, #28
 800b51a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b51e:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800b522:	2b01      	cmp	r3, #1
 800b524:	d123      	bne.n	800b56e <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b52a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	68db      	ldr	r3, [r3, #12]
 800b536:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800b53a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b53e:	687a      	ldr	r2, [r7, #4]
 800b540:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	68db      	ldr	r3, [r3, #12]
 800b546:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800b54e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b552:	2b01      	cmp	r3, #1
 800b554:	d105      	bne.n	800b562 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	68db      	ldr	r3, [r3, #12]
 800b55a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800b562:	6878      	ldr	r0, [r7, #4]
 800b564:	f001 fae2 	bl	800cb2c <USB_CoreReset>
 800b568:	4603      	mov	r3, r0
 800b56a:	73fb      	strb	r3, [r7, #15]
 800b56c:	e01b      	b.n	800b5a6 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	68db      	ldr	r3, [r3, #12]
 800b572:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800b57a:	6878      	ldr	r0, [r7, #4]
 800b57c:	f001 fad6 	bl	800cb2c <USB_CoreReset>
 800b580:	4603      	mov	r3, r0
 800b582:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800b584:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800b588:	2b00      	cmp	r3, #0
 800b58a:	d106      	bne.n	800b59a <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b590:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	639a      	str	r2, [r3, #56]	; 0x38
 800b598:	e005      	b.n	800b5a6 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b59e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800b5a6:	7fbb      	ldrb	r3, [r7, #30]
 800b5a8:	2b01      	cmp	r3, #1
 800b5aa:	d10b      	bne.n	800b5c4 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	689b      	ldr	r3, [r3, #8]
 800b5b0:	f043 0206 	orr.w	r2, r3, #6
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	689b      	ldr	r3, [r3, #8]
 800b5bc:	f043 0220 	orr.w	r2, r3, #32
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800b5c4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b5c6:	4618      	mov	r0, r3
 800b5c8:	3710      	adds	r7, #16
 800b5ca:	46bd      	mov	sp, r7
 800b5cc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b5d0:	b004      	add	sp, #16
 800b5d2:	4770      	bx	lr

0800b5d4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800b5d4:	b480      	push	{r7}
 800b5d6:	b087      	sub	sp, #28
 800b5d8:	af00      	add	r7, sp, #0
 800b5da:	60f8      	str	r0, [r7, #12]
 800b5dc:	60b9      	str	r1, [r7, #8]
 800b5de:	4613      	mov	r3, r2
 800b5e0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800b5e2:	79fb      	ldrb	r3, [r7, #7]
 800b5e4:	2b02      	cmp	r3, #2
 800b5e6:	d165      	bne.n	800b6b4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800b5e8:	68bb      	ldr	r3, [r7, #8]
 800b5ea:	4a41      	ldr	r2, [pc, #260]	; (800b6f0 <USB_SetTurnaroundTime+0x11c>)
 800b5ec:	4293      	cmp	r3, r2
 800b5ee:	d906      	bls.n	800b5fe <USB_SetTurnaroundTime+0x2a>
 800b5f0:	68bb      	ldr	r3, [r7, #8]
 800b5f2:	4a40      	ldr	r2, [pc, #256]	; (800b6f4 <USB_SetTurnaroundTime+0x120>)
 800b5f4:	4293      	cmp	r3, r2
 800b5f6:	d202      	bcs.n	800b5fe <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800b5f8:	230f      	movs	r3, #15
 800b5fa:	617b      	str	r3, [r7, #20]
 800b5fc:	e062      	b.n	800b6c4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800b5fe:	68bb      	ldr	r3, [r7, #8]
 800b600:	4a3c      	ldr	r2, [pc, #240]	; (800b6f4 <USB_SetTurnaroundTime+0x120>)
 800b602:	4293      	cmp	r3, r2
 800b604:	d306      	bcc.n	800b614 <USB_SetTurnaroundTime+0x40>
 800b606:	68bb      	ldr	r3, [r7, #8]
 800b608:	4a3b      	ldr	r2, [pc, #236]	; (800b6f8 <USB_SetTurnaroundTime+0x124>)
 800b60a:	4293      	cmp	r3, r2
 800b60c:	d202      	bcs.n	800b614 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800b60e:	230e      	movs	r3, #14
 800b610:	617b      	str	r3, [r7, #20]
 800b612:	e057      	b.n	800b6c4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800b614:	68bb      	ldr	r3, [r7, #8]
 800b616:	4a38      	ldr	r2, [pc, #224]	; (800b6f8 <USB_SetTurnaroundTime+0x124>)
 800b618:	4293      	cmp	r3, r2
 800b61a:	d306      	bcc.n	800b62a <USB_SetTurnaroundTime+0x56>
 800b61c:	68bb      	ldr	r3, [r7, #8]
 800b61e:	4a37      	ldr	r2, [pc, #220]	; (800b6fc <USB_SetTurnaroundTime+0x128>)
 800b620:	4293      	cmp	r3, r2
 800b622:	d202      	bcs.n	800b62a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800b624:	230d      	movs	r3, #13
 800b626:	617b      	str	r3, [r7, #20]
 800b628:	e04c      	b.n	800b6c4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800b62a:	68bb      	ldr	r3, [r7, #8]
 800b62c:	4a33      	ldr	r2, [pc, #204]	; (800b6fc <USB_SetTurnaroundTime+0x128>)
 800b62e:	4293      	cmp	r3, r2
 800b630:	d306      	bcc.n	800b640 <USB_SetTurnaroundTime+0x6c>
 800b632:	68bb      	ldr	r3, [r7, #8]
 800b634:	4a32      	ldr	r2, [pc, #200]	; (800b700 <USB_SetTurnaroundTime+0x12c>)
 800b636:	4293      	cmp	r3, r2
 800b638:	d802      	bhi.n	800b640 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800b63a:	230c      	movs	r3, #12
 800b63c:	617b      	str	r3, [r7, #20]
 800b63e:	e041      	b.n	800b6c4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800b640:	68bb      	ldr	r3, [r7, #8]
 800b642:	4a2f      	ldr	r2, [pc, #188]	; (800b700 <USB_SetTurnaroundTime+0x12c>)
 800b644:	4293      	cmp	r3, r2
 800b646:	d906      	bls.n	800b656 <USB_SetTurnaroundTime+0x82>
 800b648:	68bb      	ldr	r3, [r7, #8]
 800b64a:	4a2e      	ldr	r2, [pc, #184]	; (800b704 <USB_SetTurnaroundTime+0x130>)
 800b64c:	4293      	cmp	r3, r2
 800b64e:	d802      	bhi.n	800b656 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800b650:	230b      	movs	r3, #11
 800b652:	617b      	str	r3, [r7, #20]
 800b654:	e036      	b.n	800b6c4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800b656:	68bb      	ldr	r3, [r7, #8]
 800b658:	4a2a      	ldr	r2, [pc, #168]	; (800b704 <USB_SetTurnaroundTime+0x130>)
 800b65a:	4293      	cmp	r3, r2
 800b65c:	d906      	bls.n	800b66c <USB_SetTurnaroundTime+0x98>
 800b65e:	68bb      	ldr	r3, [r7, #8]
 800b660:	4a29      	ldr	r2, [pc, #164]	; (800b708 <USB_SetTurnaroundTime+0x134>)
 800b662:	4293      	cmp	r3, r2
 800b664:	d802      	bhi.n	800b66c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800b666:	230a      	movs	r3, #10
 800b668:	617b      	str	r3, [r7, #20]
 800b66a:	e02b      	b.n	800b6c4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800b66c:	68bb      	ldr	r3, [r7, #8]
 800b66e:	4a26      	ldr	r2, [pc, #152]	; (800b708 <USB_SetTurnaroundTime+0x134>)
 800b670:	4293      	cmp	r3, r2
 800b672:	d906      	bls.n	800b682 <USB_SetTurnaroundTime+0xae>
 800b674:	68bb      	ldr	r3, [r7, #8]
 800b676:	4a25      	ldr	r2, [pc, #148]	; (800b70c <USB_SetTurnaroundTime+0x138>)
 800b678:	4293      	cmp	r3, r2
 800b67a:	d202      	bcs.n	800b682 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800b67c:	2309      	movs	r3, #9
 800b67e:	617b      	str	r3, [r7, #20]
 800b680:	e020      	b.n	800b6c4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800b682:	68bb      	ldr	r3, [r7, #8]
 800b684:	4a21      	ldr	r2, [pc, #132]	; (800b70c <USB_SetTurnaroundTime+0x138>)
 800b686:	4293      	cmp	r3, r2
 800b688:	d306      	bcc.n	800b698 <USB_SetTurnaroundTime+0xc4>
 800b68a:	68bb      	ldr	r3, [r7, #8]
 800b68c:	4a20      	ldr	r2, [pc, #128]	; (800b710 <USB_SetTurnaroundTime+0x13c>)
 800b68e:	4293      	cmp	r3, r2
 800b690:	d802      	bhi.n	800b698 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800b692:	2308      	movs	r3, #8
 800b694:	617b      	str	r3, [r7, #20]
 800b696:	e015      	b.n	800b6c4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800b698:	68bb      	ldr	r3, [r7, #8]
 800b69a:	4a1d      	ldr	r2, [pc, #116]	; (800b710 <USB_SetTurnaroundTime+0x13c>)
 800b69c:	4293      	cmp	r3, r2
 800b69e:	d906      	bls.n	800b6ae <USB_SetTurnaroundTime+0xda>
 800b6a0:	68bb      	ldr	r3, [r7, #8]
 800b6a2:	4a1c      	ldr	r2, [pc, #112]	; (800b714 <USB_SetTurnaroundTime+0x140>)
 800b6a4:	4293      	cmp	r3, r2
 800b6a6:	d202      	bcs.n	800b6ae <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800b6a8:	2307      	movs	r3, #7
 800b6aa:	617b      	str	r3, [r7, #20]
 800b6ac:	e00a      	b.n	800b6c4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800b6ae:	2306      	movs	r3, #6
 800b6b0:	617b      	str	r3, [r7, #20]
 800b6b2:	e007      	b.n	800b6c4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800b6b4:	79fb      	ldrb	r3, [r7, #7]
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	d102      	bne.n	800b6c0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800b6ba:	2309      	movs	r3, #9
 800b6bc:	617b      	str	r3, [r7, #20]
 800b6be:	e001      	b.n	800b6c4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800b6c0:	2309      	movs	r3, #9
 800b6c2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800b6c4:	68fb      	ldr	r3, [r7, #12]
 800b6c6:	68db      	ldr	r3, [r3, #12]
 800b6c8:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800b6cc:	68fb      	ldr	r3, [r7, #12]
 800b6ce:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800b6d0:	68fb      	ldr	r3, [r7, #12]
 800b6d2:	68da      	ldr	r2, [r3, #12]
 800b6d4:	697b      	ldr	r3, [r7, #20]
 800b6d6:	029b      	lsls	r3, r3, #10
 800b6d8:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800b6dc:	431a      	orrs	r2, r3
 800b6de:	68fb      	ldr	r3, [r7, #12]
 800b6e0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800b6e2:	2300      	movs	r3, #0
}
 800b6e4:	4618      	mov	r0, r3
 800b6e6:	371c      	adds	r7, #28
 800b6e8:	46bd      	mov	sp, r7
 800b6ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ee:	4770      	bx	lr
 800b6f0:	00d8acbf 	.word	0x00d8acbf
 800b6f4:	00e4e1c0 	.word	0x00e4e1c0
 800b6f8:	00f42400 	.word	0x00f42400
 800b6fc:	01067380 	.word	0x01067380
 800b700:	011a499f 	.word	0x011a499f
 800b704:	01312cff 	.word	0x01312cff
 800b708:	014ca43f 	.word	0x014ca43f
 800b70c:	016e3600 	.word	0x016e3600
 800b710:	01a6ab1f 	.word	0x01a6ab1f
 800b714:	01e84800 	.word	0x01e84800

0800b718 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b718:	b480      	push	{r7}
 800b71a:	b083      	sub	sp, #12
 800b71c:	af00      	add	r7, sp, #0
 800b71e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	689b      	ldr	r3, [r3, #8]
 800b724:	f043 0201 	orr.w	r2, r3, #1
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b72c:	2300      	movs	r3, #0
}
 800b72e:	4618      	mov	r0, r3
 800b730:	370c      	adds	r7, #12
 800b732:	46bd      	mov	sp, r7
 800b734:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b738:	4770      	bx	lr

0800b73a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b73a:	b480      	push	{r7}
 800b73c:	b083      	sub	sp, #12
 800b73e:	af00      	add	r7, sp, #0
 800b740:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	689b      	ldr	r3, [r3, #8]
 800b746:	f023 0201 	bic.w	r2, r3, #1
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b74e:	2300      	movs	r3, #0
}
 800b750:	4618      	mov	r0, r3
 800b752:	370c      	adds	r7, #12
 800b754:	46bd      	mov	sp, r7
 800b756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b75a:	4770      	bx	lr

0800b75c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800b75c:	b580      	push	{r7, lr}
 800b75e:	b084      	sub	sp, #16
 800b760:	af00      	add	r7, sp, #0
 800b762:	6078      	str	r0, [r7, #4]
 800b764:	460b      	mov	r3, r1
 800b766:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800b768:	2300      	movs	r3, #0
 800b76a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	68db      	ldr	r3, [r3, #12]
 800b770:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800b778:	78fb      	ldrb	r3, [r7, #3]
 800b77a:	2b01      	cmp	r3, #1
 800b77c:	d115      	bne.n	800b7aa <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	68db      	ldr	r3, [r3, #12]
 800b782:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800b78a:	200a      	movs	r0, #10
 800b78c:	f7fa f89e 	bl	80058cc <HAL_Delay>
      ms += 10U;
 800b790:	68fb      	ldr	r3, [r7, #12]
 800b792:	330a      	adds	r3, #10
 800b794:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800b796:	6878      	ldr	r0, [r7, #4]
 800b798:	f001 f939 	bl	800ca0e <USB_GetMode>
 800b79c:	4603      	mov	r3, r0
 800b79e:	2b01      	cmp	r3, #1
 800b7a0:	d01e      	beq.n	800b7e0 <USB_SetCurrentMode+0x84>
 800b7a2:	68fb      	ldr	r3, [r7, #12]
 800b7a4:	2bc7      	cmp	r3, #199	; 0xc7
 800b7a6:	d9f0      	bls.n	800b78a <USB_SetCurrentMode+0x2e>
 800b7a8:	e01a      	b.n	800b7e0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800b7aa:	78fb      	ldrb	r3, [r7, #3]
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	d115      	bne.n	800b7dc <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	68db      	ldr	r3, [r3, #12]
 800b7b4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800b7bc:	200a      	movs	r0, #10
 800b7be:	f7fa f885 	bl	80058cc <HAL_Delay>
      ms += 10U;
 800b7c2:	68fb      	ldr	r3, [r7, #12]
 800b7c4:	330a      	adds	r3, #10
 800b7c6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800b7c8:	6878      	ldr	r0, [r7, #4]
 800b7ca:	f001 f920 	bl	800ca0e <USB_GetMode>
 800b7ce:	4603      	mov	r3, r0
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	d005      	beq.n	800b7e0 <USB_SetCurrentMode+0x84>
 800b7d4:	68fb      	ldr	r3, [r7, #12]
 800b7d6:	2bc7      	cmp	r3, #199	; 0xc7
 800b7d8:	d9f0      	bls.n	800b7bc <USB_SetCurrentMode+0x60>
 800b7da:	e001      	b.n	800b7e0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800b7dc:	2301      	movs	r3, #1
 800b7de:	e005      	b.n	800b7ec <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800b7e0:	68fb      	ldr	r3, [r7, #12]
 800b7e2:	2bc8      	cmp	r3, #200	; 0xc8
 800b7e4:	d101      	bne.n	800b7ea <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800b7e6:	2301      	movs	r3, #1
 800b7e8:	e000      	b.n	800b7ec <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800b7ea:	2300      	movs	r3, #0
}
 800b7ec:	4618      	mov	r0, r3
 800b7ee:	3710      	adds	r7, #16
 800b7f0:	46bd      	mov	sp, r7
 800b7f2:	bd80      	pop	{r7, pc}

0800b7f4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b7f4:	b084      	sub	sp, #16
 800b7f6:	b580      	push	{r7, lr}
 800b7f8:	b086      	sub	sp, #24
 800b7fa:	af00      	add	r7, sp, #0
 800b7fc:	6078      	str	r0, [r7, #4]
 800b7fe:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800b802:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800b806:	2300      	movs	r3, #0
 800b808:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800b80e:	2300      	movs	r3, #0
 800b810:	613b      	str	r3, [r7, #16]
 800b812:	e009      	b.n	800b828 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800b814:	687a      	ldr	r2, [r7, #4]
 800b816:	693b      	ldr	r3, [r7, #16]
 800b818:	3340      	adds	r3, #64	; 0x40
 800b81a:	009b      	lsls	r3, r3, #2
 800b81c:	4413      	add	r3, r2
 800b81e:	2200      	movs	r2, #0
 800b820:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800b822:	693b      	ldr	r3, [r7, #16]
 800b824:	3301      	adds	r3, #1
 800b826:	613b      	str	r3, [r7, #16]
 800b828:	693b      	ldr	r3, [r7, #16]
 800b82a:	2b0e      	cmp	r3, #14
 800b82c:	d9f2      	bls.n	800b814 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800b82e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800b832:	2b00      	cmp	r3, #0
 800b834:	d11c      	bne.n	800b870 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b836:	68fb      	ldr	r3, [r7, #12]
 800b838:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b83c:	685b      	ldr	r3, [r3, #4]
 800b83e:	68fa      	ldr	r2, [r7, #12]
 800b840:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b844:	f043 0302 	orr.w	r3, r3, #2
 800b848:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b84e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b85a:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b866:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	639a      	str	r2, [r3, #56]	; 0x38
 800b86e:	e00b      	b.n	800b888 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b874:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b880:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800b888:	68fb      	ldr	r3, [r7, #12]
 800b88a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b88e:	461a      	mov	r2, r3
 800b890:	2300      	movs	r3, #0
 800b892:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b894:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800b898:	2b01      	cmp	r3, #1
 800b89a:	d10d      	bne.n	800b8b8 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800b89c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	d104      	bne.n	800b8ae <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800b8a4:	2100      	movs	r1, #0
 800b8a6:	6878      	ldr	r0, [r7, #4]
 800b8a8:	f000 f968 	bl	800bb7c <USB_SetDevSpeed>
 800b8ac:	e008      	b.n	800b8c0 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800b8ae:	2101      	movs	r1, #1
 800b8b0:	6878      	ldr	r0, [r7, #4]
 800b8b2:	f000 f963 	bl	800bb7c <USB_SetDevSpeed>
 800b8b6:	e003      	b.n	800b8c0 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800b8b8:	2103      	movs	r1, #3
 800b8ba:	6878      	ldr	r0, [r7, #4]
 800b8bc:	f000 f95e 	bl	800bb7c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800b8c0:	2110      	movs	r1, #16
 800b8c2:	6878      	ldr	r0, [r7, #4]
 800b8c4:	f000 f8fa 	bl	800babc <USB_FlushTxFifo>
 800b8c8:	4603      	mov	r3, r0
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	d001      	beq.n	800b8d2 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 800b8ce:	2301      	movs	r3, #1
 800b8d0:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800b8d2:	6878      	ldr	r0, [r7, #4]
 800b8d4:	f000 f924 	bl	800bb20 <USB_FlushRxFifo>
 800b8d8:	4603      	mov	r3, r0
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d001      	beq.n	800b8e2 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 800b8de:	2301      	movs	r3, #1
 800b8e0:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800b8e2:	68fb      	ldr	r3, [r7, #12]
 800b8e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b8e8:	461a      	mov	r2, r3
 800b8ea:	2300      	movs	r3, #0
 800b8ec:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800b8ee:	68fb      	ldr	r3, [r7, #12]
 800b8f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b8f4:	461a      	mov	r2, r3
 800b8f6:	2300      	movs	r3, #0
 800b8f8:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800b8fa:	68fb      	ldr	r3, [r7, #12]
 800b8fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b900:	461a      	mov	r2, r3
 800b902:	2300      	movs	r3, #0
 800b904:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b906:	2300      	movs	r3, #0
 800b908:	613b      	str	r3, [r7, #16]
 800b90a:	e043      	b.n	800b994 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b90c:	693b      	ldr	r3, [r7, #16]
 800b90e:	015a      	lsls	r2, r3, #5
 800b910:	68fb      	ldr	r3, [r7, #12]
 800b912:	4413      	add	r3, r2
 800b914:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b91e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b922:	d118      	bne.n	800b956 <USB_DevInit+0x162>
    {
      if (i == 0U)
 800b924:	693b      	ldr	r3, [r7, #16]
 800b926:	2b00      	cmp	r3, #0
 800b928:	d10a      	bne.n	800b940 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800b92a:	693b      	ldr	r3, [r7, #16]
 800b92c:	015a      	lsls	r2, r3, #5
 800b92e:	68fb      	ldr	r3, [r7, #12]
 800b930:	4413      	add	r3, r2
 800b932:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b936:	461a      	mov	r2, r3
 800b938:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b93c:	6013      	str	r3, [r2, #0]
 800b93e:	e013      	b.n	800b968 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800b940:	693b      	ldr	r3, [r7, #16]
 800b942:	015a      	lsls	r2, r3, #5
 800b944:	68fb      	ldr	r3, [r7, #12]
 800b946:	4413      	add	r3, r2
 800b948:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b94c:	461a      	mov	r2, r3
 800b94e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800b952:	6013      	str	r3, [r2, #0]
 800b954:	e008      	b.n	800b968 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800b956:	693b      	ldr	r3, [r7, #16]
 800b958:	015a      	lsls	r2, r3, #5
 800b95a:	68fb      	ldr	r3, [r7, #12]
 800b95c:	4413      	add	r3, r2
 800b95e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b962:	461a      	mov	r2, r3
 800b964:	2300      	movs	r3, #0
 800b966:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800b968:	693b      	ldr	r3, [r7, #16]
 800b96a:	015a      	lsls	r2, r3, #5
 800b96c:	68fb      	ldr	r3, [r7, #12]
 800b96e:	4413      	add	r3, r2
 800b970:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b974:	461a      	mov	r2, r3
 800b976:	2300      	movs	r3, #0
 800b978:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800b97a:	693b      	ldr	r3, [r7, #16]
 800b97c:	015a      	lsls	r2, r3, #5
 800b97e:	68fb      	ldr	r3, [r7, #12]
 800b980:	4413      	add	r3, r2
 800b982:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b986:	461a      	mov	r2, r3
 800b988:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800b98c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b98e:	693b      	ldr	r3, [r7, #16]
 800b990:	3301      	adds	r3, #1
 800b992:	613b      	str	r3, [r7, #16]
 800b994:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800b998:	461a      	mov	r2, r3
 800b99a:	693b      	ldr	r3, [r7, #16]
 800b99c:	4293      	cmp	r3, r2
 800b99e:	d3b5      	bcc.n	800b90c <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b9a0:	2300      	movs	r3, #0
 800b9a2:	613b      	str	r3, [r7, #16]
 800b9a4:	e043      	b.n	800ba2e <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b9a6:	693b      	ldr	r3, [r7, #16]
 800b9a8:	015a      	lsls	r2, r3, #5
 800b9aa:	68fb      	ldr	r3, [r7, #12]
 800b9ac:	4413      	add	r3, r2
 800b9ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b9b2:	681b      	ldr	r3, [r3, #0]
 800b9b4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b9b8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b9bc:	d118      	bne.n	800b9f0 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 800b9be:	693b      	ldr	r3, [r7, #16]
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	d10a      	bne.n	800b9da <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800b9c4:	693b      	ldr	r3, [r7, #16]
 800b9c6:	015a      	lsls	r2, r3, #5
 800b9c8:	68fb      	ldr	r3, [r7, #12]
 800b9ca:	4413      	add	r3, r2
 800b9cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b9d0:	461a      	mov	r2, r3
 800b9d2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b9d6:	6013      	str	r3, [r2, #0]
 800b9d8:	e013      	b.n	800ba02 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800b9da:	693b      	ldr	r3, [r7, #16]
 800b9dc:	015a      	lsls	r2, r3, #5
 800b9de:	68fb      	ldr	r3, [r7, #12]
 800b9e0:	4413      	add	r3, r2
 800b9e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b9e6:	461a      	mov	r2, r3
 800b9e8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800b9ec:	6013      	str	r3, [r2, #0]
 800b9ee:	e008      	b.n	800ba02 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800b9f0:	693b      	ldr	r3, [r7, #16]
 800b9f2:	015a      	lsls	r2, r3, #5
 800b9f4:	68fb      	ldr	r3, [r7, #12]
 800b9f6:	4413      	add	r3, r2
 800b9f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b9fc:	461a      	mov	r2, r3
 800b9fe:	2300      	movs	r3, #0
 800ba00:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800ba02:	693b      	ldr	r3, [r7, #16]
 800ba04:	015a      	lsls	r2, r3, #5
 800ba06:	68fb      	ldr	r3, [r7, #12]
 800ba08:	4413      	add	r3, r2
 800ba0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ba0e:	461a      	mov	r2, r3
 800ba10:	2300      	movs	r3, #0
 800ba12:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800ba14:	693b      	ldr	r3, [r7, #16]
 800ba16:	015a      	lsls	r2, r3, #5
 800ba18:	68fb      	ldr	r3, [r7, #12]
 800ba1a:	4413      	add	r3, r2
 800ba1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ba20:	461a      	mov	r2, r3
 800ba22:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800ba26:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ba28:	693b      	ldr	r3, [r7, #16]
 800ba2a:	3301      	adds	r3, #1
 800ba2c:	613b      	str	r3, [r7, #16]
 800ba2e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800ba32:	461a      	mov	r2, r3
 800ba34:	693b      	ldr	r3, [r7, #16]
 800ba36:	4293      	cmp	r3, r2
 800ba38:	d3b5      	bcc.n	800b9a6 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800ba3a:	68fb      	ldr	r3, [r7, #12]
 800ba3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ba40:	691b      	ldr	r3, [r3, #16]
 800ba42:	68fa      	ldr	r2, [r7, #12]
 800ba44:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ba48:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ba4c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	2200      	movs	r2, #0
 800ba52:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800ba5a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800ba5c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	d105      	bne.n	800ba70 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	699b      	ldr	r3, [r3, #24]
 800ba68:	f043 0210 	orr.w	r2, r3, #16
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	699a      	ldr	r2, [r3, #24]
 800ba74:	4b10      	ldr	r3, [pc, #64]	; (800bab8 <USB_DevInit+0x2c4>)
 800ba76:	4313      	orrs	r3, r2
 800ba78:	687a      	ldr	r2, [r7, #4]
 800ba7a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800ba7c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	d005      	beq.n	800ba90 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	699b      	ldr	r3, [r3, #24]
 800ba88:	f043 0208 	orr.w	r2, r3, #8
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800ba90:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800ba94:	2b01      	cmp	r3, #1
 800ba96:	d107      	bne.n	800baa8 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	699b      	ldr	r3, [r3, #24]
 800ba9c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800baa0:	f043 0304 	orr.w	r3, r3, #4
 800baa4:	687a      	ldr	r2, [r7, #4]
 800baa6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800baa8:	7dfb      	ldrb	r3, [r7, #23]
}
 800baaa:	4618      	mov	r0, r3
 800baac:	3718      	adds	r7, #24
 800baae:	46bd      	mov	sp, r7
 800bab0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800bab4:	b004      	add	sp, #16
 800bab6:	4770      	bx	lr
 800bab8:	803c3800 	.word	0x803c3800

0800babc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800babc:	b480      	push	{r7}
 800babe:	b085      	sub	sp, #20
 800bac0:	af00      	add	r7, sp, #0
 800bac2:	6078      	str	r0, [r7, #4]
 800bac4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800bac6:	2300      	movs	r3, #0
 800bac8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800baca:	68fb      	ldr	r3, [r7, #12]
 800bacc:	3301      	adds	r3, #1
 800bace:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800bad0:	68fb      	ldr	r3, [r7, #12]
 800bad2:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800bad6:	d901      	bls.n	800badc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800bad8:	2303      	movs	r3, #3
 800bada:	e01b      	b.n	800bb14 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	691b      	ldr	r3, [r3, #16]
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	daf2      	bge.n	800baca <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800bae4:	2300      	movs	r3, #0
 800bae6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800bae8:	683b      	ldr	r3, [r7, #0]
 800baea:	019b      	lsls	r3, r3, #6
 800baec:	f043 0220 	orr.w	r2, r3, #32
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800baf4:	68fb      	ldr	r3, [r7, #12]
 800baf6:	3301      	adds	r3, #1
 800baf8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800bafa:	68fb      	ldr	r3, [r7, #12]
 800bafc:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800bb00:	d901      	bls.n	800bb06 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800bb02:	2303      	movs	r3, #3
 800bb04:	e006      	b.n	800bb14 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	691b      	ldr	r3, [r3, #16]
 800bb0a:	f003 0320 	and.w	r3, r3, #32
 800bb0e:	2b20      	cmp	r3, #32
 800bb10:	d0f0      	beq.n	800baf4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800bb12:	2300      	movs	r3, #0
}
 800bb14:	4618      	mov	r0, r3
 800bb16:	3714      	adds	r7, #20
 800bb18:	46bd      	mov	sp, r7
 800bb1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb1e:	4770      	bx	lr

0800bb20 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800bb20:	b480      	push	{r7}
 800bb22:	b085      	sub	sp, #20
 800bb24:	af00      	add	r7, sp, #0
 800bb26:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800bb28:	2300      	movs	r3, #0
 800bb2a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800bb2c:	68fb      	ldr	r3, [r7, #12]
 800bb2e:	3301      	adds	r3, #1
 800bb30:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800bb32:	68fb      	ldr	r3, [r7, #12]
 800bb34:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800bb38:	d901      	bls.n	800bb3e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800bb3a:	2303      	movs	r3, #3
 800bb3c:	e018      	b.n	800bb70 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	691b      	ldr	r3, [r3, #16]
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	daf2      	bge.n	800bb2c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800bb46:	2300      	movs	r3, #0
 800bb48:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	2210      	movs	r2, #16
 800bb4e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	3301      	adds	r3, #1
 800bb54:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800bb56:	68fb      	ldr	r3, [r7, #12]
 800bb58:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800bb5c:	d901      	bls.n	800bb62 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800bb5e:	2303      	movs	r3, #3
 800bb60:	e006      	b.n	800bb70 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	691b      	ldr	r3, [r3, #16]
 800bb66:	f003 0310 	and.w	r3, r3, #16
 800bb6a:	2b10      	cmp	r3, #16
 800bb6c:	d0f0      	beq.n	800bb50 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800bb6e:	2300      	movs	r3, #0
}
 800bb70:	4618      	mov	r0, r3
 800bb72:	3714      	adds	r7, #20
 800bb74:	46bd      	mov	sp, r7
 800bb76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb7a:	4770      	bx	lr

0800bb7c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800bb7c:	b480      	push	{r7}
 800bb7e:	b085      	sub	sp, #20
 800bb80:	af00      	add	r7, sp, #0
 800bb82:	6078      	str	r0, [r7, #4]
 800bb84:	460b      	mov	r3, r1
 800bb86:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800bb8c:	68fb      	ldr	r3, [r7, #12]
 800bb8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bb92:	681a      	ldr	r2, [r3, #0]
 800bb94:	78fb      	ldrb	r3, [r7, #3]
 800bb96:	68f9      	ldr	r1, [r7, #12]
 800bb98:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bb9c:	4313      	orrs	r3, r2
 800bb9e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800bba0:	2300      	movs	r3, #0
}
 800bba2:	4618      	mov	r0, r3
 800bba4:	3714      	adds	r7, #20
 800bba6:	46bd      	mov	sp, r7
 800bba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbac:	4770      	bx	lr

0800bbae <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800bbae:	b480      	push	{r7}
 800bbb0:	b087      	sub	sp, #28
 800bbb2:	af00      	add	r7, sp, #0
 800bbb4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800bbba:	693b      	ldr	r3, [r7, #16]
 800bbbc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bbc0:	689b      	ldr	r3, [r3, #8]
 800bbc2:	f003 0306 	and.w	r3, r3, #6
 800bbc6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800bbc8:	68fb      	ldr	r3, [r7, #12]
 800bbca:	2b00      	cmp	r3, #0
 800bbcc:	d102      	bne.n	800bbd4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800bbce:	2300      	movs	r3, #0
 800bbd0:	75fb      	strb	r3, [r7, #23]
 800bbd2:	e00a      	b.n	800bbea <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800bbd4:	68fb      	ldr	r3, [r7, #12]
 800bbd6:	2b02      	cmp	r3, #2
 800bbd8:	d002      	beq.n	800bbe0 <USB_GetDevSpeed+0x32>
 800bbda:	68fb      	ldr	r3, [r7, #12]
 800bbdc:	2b06      	cmp	r3, #6
 800bbde:	d102      	bne.n	800bbe6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800bbe0:	2302      	movs	r3, #2
 800bbe2:	75fb      	strb	r3, [r7, #23]
 800bbe4:	e001      	b.n	800bbea <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800bbe6:	230f      	movs	r3, #15
 800bbe8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800bbea:	7dfb      	ldrb	r3, [r7, #23]
}
 800bbec:	4618      	mov	r0, r3
 800bbee:	371c      	adds	r7, #28
 800bbf0:	46bd      	mov	sp, r7
 800bbf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbf6:	4770      	bx	lr

0800bbf8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800bbf8:	b480      	push	{r7}
 800bbfa:	b085      	sub	sp, #20
 800bbfc:	af00      	add	r7, sp, #0
 800bbfe:	6078      	str	r0, [r7, #4]
 800bc00:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800bc06:	683b      	ldr	r3, [r7, #0]
 800bc08:	781b      	ldrb	r3, [r3, #0]
 800bc0a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800bc0c:	683b      	ldr	r3, [r7, #0]
 800bc0e:	785b      	ldrb	r3, [r3, #1]
 800bc10:	2b01      	cmp	r3, #1
 800bc12:	d13a      	bne.n	800bc8a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800bc14:	68fb      	ldr	r3, [r7, #12]
 800bc16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bc1a:	69da      	ldr	r2, [r3, #28]
 800bc1c:	683b      	ldr	r3, [r7, #0]
 800bc1e:	781b      	ldrb	r3, [r3, #0]
 800bc20:	f003 030f 	and.w	r3, r3, #15
 800bc24:	2101      	movs	r1, #1
 800bc26:	fa01 f303 	lsl.w	r3, r1, r3
 800bc2a:	b29b      	uxth	r3, r3
 800bc2c:	68f9      	ldr	r1, [r7, #12]
 800bc2e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bc32:	4313      	orrs	r3, r2
 800bc34:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800bc36:	68bb      	ldr	r3, [r7, #8]
 800bc38:	015a      	lsls	r2, r3, #5
 800bc3a:	68fb      	ldr	r3, [r7, #12]
 800bc3c:	4413      	add	r3, r2
 800bc3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bc42:	681b      	ldr	r3, [r3, #0]
 800bc44:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	d155      	bne.n	800bcf8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800bc4c:	68bb      	ldr	r3, [r7, #8]
 800bc4e:	015a      	lsls	r2, r3, #5
 800bc50:	68fb      	ldr	r3, [r7, #12]
 800bc52:	4413      	add	r3, r2
 800bc54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bc58:	681a      	ldr	r2, [r3, #0]
 800bc5a:	683b      	ldr	r3, [r7, #0]
 800bc5c:	689b      	ldr	r3, [r3, #8]
 800bc5e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800bc62:	683b      	ldr	r3, [r7, #0]
 800bc64:	791b      	ldrb	r3, [r3, #4]
 800bc66:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800bc68:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800bc6a:	68bb      	ldr	r3, [r7, #8]
 800bc6c:	059b      	lsls	r3, r3, #22
 800bc6e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800bc70:	4313      	orrs	r3, r2
 800bc72:	68ba      	ldr	r2, [r7, #8]
 800bc74:	0151      	lsls	r1, r2, #5
 800bc76:	68fa      	ldr	r2, [r7, #12]
 800bc78:	440a      	add	r2, r1
 800bc7a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bc7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bc82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bc86:	6013      	str	r3, [r2, #0]
 800bc88:	e036      	b.n	800bcf8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800bc8a:	68fb      	ldr	r3, [r7, #12]
 800bc8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bc90:	69da      	ldr	r2, [r3, #28]
 800bc92:	683b      	ldr	r3, [r7, #0]
 800bc94:	781b      	ldrb	r3, [r3, #0]
 800bc96:	f003 030f 	and.w	r3, r3, #15
 800bc9a:	2101      	movs	r1, #1
 800bc9c:	fa01 f303 	lsl.w	r3, r1, r3
 800bca0:	041b      	lsls	r3, r3, #16
 800bca2:	68f9      	ldr	r1, [r7, #12]
 800bca4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bca8:	4313      	orrs	r3, r2
 800bcaa:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800bcac:	68bb      	ldr	r3, [r7, #8]
 800bcae:	015a      	lsls	r2, r3, #5
 800bcb0:	68fb      	ldr	r3, [r7, #12]
 800bcb2:	4413      	add	r3, r2
 800bcb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bcb8:	681b      	ldr	r3, [r3, #0]
 800bcba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	d11a      	bne.n	800bcf8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800bcc2:	68bb      	ldr	r3, [r7, #8]
 800bcc4:	015a      	lsls	r2, r3, #5
 800bcc6:	68fb      	ldr	r3, [r7, #12]
 800bcc8:	4413      	add	r3, r2
 800bcca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bcce:	681a      	ldr	r2, [r3, #0]
 800bcd0:	683b      	ldr	r3, [r7, #0]
 800bcd2:	689b      	ldr	r3, [r3, #8]
 800bcd4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800bcd8:	683b      	ldr	r3, [r7, #0]
 800bcda:	791b      	ldrb	r3, [r3, #4]
 800bcdc:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800bcde:	430b      	orrs	r3, r1
 800bce0:	4313      	orrs	r3, r2
 800bce2:	68ba      	ldr	r2, [r7, #8]
 800bce4:	0151      	lsls	r1, r2, #5
 800bce6:	68fa      	ldr	r2, [r7, #12]
 800bce8:	440a      	add	r2, r1
 800bcea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bcee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bcf2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bcf6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800bcf8:	2300      	movs	r3, #0
}
 800bcfa:	4618      	mov	r0, r3
 800bcfc:	3714      	adds	r7, #20
 800bcfe:	46bd      	mov	sp, r7
 800bd00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd04:	4770      	bx	lr
	...

0800bd08 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800bd08:	b480      	push	{r7}
 800bd0a:	b085      	sub	sp, #20
 800bd0c:	af00      	add	r7, sp, #0
 800bd0e:	6078      	str	r0, [r7, #4]
 800bd10:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800bd16:	683b      	ldr	r3, [r7, #0]
 800bd18:	781b      	ldrb	r3, [r3, #0]
 800bd1a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800bd1c:	683b      	ldr	r3, [r7, #0]
 800bd1e:	785b      	ldrb	r3, [r3, #1]
 800bd20:	2b01      	cmp	r3, #1
 800bd22:	d161      	bne.n	800bde8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800bd24:	68bb      	ldr	r3, [r7, #8]
 800bd26:	015a      	lsls	r2, r3, #5
 800bd28:	68fb      	ldr	r3, [r7, #12]
 800bd2a:	4413      	add	r3, r2
 800bd2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bd30:	681b      	ldr	r3, [r3, #0]
 800bd32:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bd36:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bd3a:	d11f      	bne.n	800bd7c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800bd3c:	68bb      	ldr	r3, [r7, #8]
 800bd3e:	015a      	lsls	r2, r3, #5
 800bd40:	68fb      	ldr	r3, [r7, #12]
 800bd42:	4413      	add	r3, r2
 800bd44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bd48:	681b      	ldr	r3, [r3, #0]
 800bd4a:	68ba      	ldr	r2, [r7, #8]
 800bd4c:	0151      	lsls	r1, r2, #5
 800bd4e:	68fa      	ldr	r2, [r7, #12]
 800bd50:	440a      	add	r2, r1
 800bd52:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bd56:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800bd5a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800bd5c:	68bb      	ldr	r3, [r7, #8]
 800bd5e:	015a      	lsls	r2, r3, #5
 800bd60:	68fb      	ldr	r3, [r7, #12]
 800bd62:	4413      	add	r3, r2
 800bd64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bd68:	681b      	ldr	r3, [r3, #0]
 800bd6a:	68ba      	ldr	r2, [r7, #8]
 800bd6c:	0151      	lsls	r1, r2, #5
 800bd6e:	68fa      	ldr	r2, [r7, #12]
 800bd70:	440a      	add	r2, r1
 800bd72:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bd76:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800bd7a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800bd7c:	68fb      	ldr	r3, [r7, #12]
 800bd7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bd82:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bd84:	683b      	ldr	r3, [r7, #0]
 800bd86:	781b      	ldrb	r3, [r3, #0]
 800bd88:	f003 030f 	and.w	r3, r3, #15
 800bd8c:	2101      	movs	r1, #1
 800bd8e:	fa01 f303 	lsl.w	r3, r1, r3
 800bd92:	b29b      	uxth	r3, r3
 800bd94:	43db      	mvns	r3, r3
 800bd96:	68f9      	ldr	r1, [r7, #12]
 800bd98:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bd9c:	4013      	ands	r3, r2
 800bd9e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800bda0:	68fb      	ldr	r3, [r7, #12]
 800bda2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bda6:	69da      	ldr	r2, [r3, #28]
 800bda8:	683b      	ldr	r3, [r7, #0]
 800bdaa:	781b      	ldrb	r3, [r3, #0]
 800bdac:	f003 030f 	and.w	r3, r3, #15
 800bdb0:	2101      	movs	r1, #1
 800bdb2:	fa01 f303 	lsl.w	r3, r1, r3
 800bdb6:	b29b      	uxth	r3, r3
 800bdb8:	43db      	mvns	r3, r3
 800bdba:	68f9      	ldr	r1, [r7, #12]
 800bdbc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bdc0:	4013      	ands	r3, r2
 800bdc2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800bdc4:	68bb      	ldr	r3, [r7, #8]
 800bdc6:	015a      	lsls	r2, r3, #5
 800bdc8:	68fb      	ldr	r3, [r7, #12]
 800bdca:	4413      	add	r3, r2
 800bdcc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bdd0:	681a      	ldr	r2, [r3, #0]
 800bdd2:	68bb      	ldr	r3, [r7, #8]
 800bdd4:	0159      	lsls	r1, r3, #5
 800bdd6:	68fb      	ldr	r3, [r7, #12]
 800bdd8:	440b      	add	r3, r1
 800bdda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bdde:	4619      	mov	r1, r3
 800bde0:	4b35      	ldr	r3, [pc, #212]	; (800beb8 <USB_DeactivateEndpoint+0x1b0>)
 800bde2:	4013      	ands	r3, r2
 800bde4:	600b      	str	r3, [r1, #0]
 800bde6:	e060      	b.n	800beaa <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800bde8:	68bb      	ldr	r3, [r7, #8]
 800bdea:	015a      	lsls	r2, r3, #5
 800bdec:	68fb      	ldr	r3, [r7, #12]
 800bdee:	4413      	add	r3, r2
 800bdf0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bdf4:	681b      	ldr	r3, [r3, #0]
 800bdf6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bdfa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bdfe:	d11f      	bne.n	800be40 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800be00:	68bb      	ldr	r3, [r7, #8]
 800be02:	015a      	lsls	r2, r3, #5
 800be04:	68fb      	ldr	r3, [r7, #12]
 800be06:	4413      	add	r3, r2
 800be08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800be0c:	681b      	ldr	r3, [r3, #0]
 800be0e:	68ba      	ldr	r2, [r7, #8]
 800be10:	0151      	lsls	r1, r2, #5
 800be12:	68fa      	ldr	r2, [r7, #12]
 800be14:	440a      	add	r2, r1
 800be16:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800be1a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800be1e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800be20:	68bb      	ldr	r3, [r7, #8]
 800be22:	015a      	lsls	r2, r3, #5
 800be24:	68fb      	ldr	r3, [r7, #12]
 800be26:	4413      	add	r3, r2
 800be28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800be2c:	681b      	ldr	r3, [r3, #0]
 800be2e:	68ba      	ldr	r2, [r7, #8]
 800be30:	0151      	lsls	r1, r2, #5
 800be32:	68fa      	ldr	r2, [r7, #12]
 800be34:	440a      	add	r2, r1
 800be36:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800be3a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800be3e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800be40:	68fb      	ldr	r3, [r7, #12]
 800be42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800be46:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800be48:	683b      	ldr	r3, [r7, #0]
 800be4a:	781b      	ldrb	r3, [r3, #0]
 800be4c:	f003 030f 	and.w	r3, r3, #15
 800be50:	2101      	movs	r1, #1
 800be52:	fa01 f303 	lsl.w	r3, r1, r3
 800be56:	041b      	lsls	r3, r3, #16
 800be58:	43db      	mvns	r3, r3
 800be5a:	68f9      	ldr	r1, [r7, #12]
 800be5c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800be60:	4013      	ands	r3, r2
 800be62:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800be64:	68fb      	ldr	r3, [r7, #12]
 800be66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800be6a:	69da      	ldr	r2, [r3, #28]
 800be6c:	683b      	ldr	r3, [r7, #0]
 800be6e:	781b      	ldrb	r3, [r3, #0]
 800be70:	f003 030f 	and.w	r3, r3, #15
 800be74:	2101      	movs	r1, #1
 800be76:	fa01 f303 	lsl.w	r3, r1, r3
 800be7a:	041b      	lsls	r3, r3, #16
 800be7c:	43db      	mvns	r3, r3
 800be7e:	68f9      	ldr	r1, [r7, #12]
 800be80:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800be84:	4013      	ands	r3, r2
 800be86:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800be88:	68bb      	ldr	r3, [r7, #8]
 800be8a:	015a      	lsls	r2, r3, #5
 800be8c:	68fb      	ldr	r3, [r7, #12]
 800be8e:	4413      	add	r3, r2
 800be90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800be94:	681a      	ldr	r2, [r3, #0]
 800be96:	68bb      	ldr	r3, [r7, #8]
 800be98:	0159      	lsls	r1, r3, #5
 800be9a:	68fb      	ldr	r3, [r7, #12]
 800be9c:	440b      	add	r3, r1
 800be9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bea2:	4619      	mov	r1, r3
 800bea4:	4b05      	ldr	r3, [pc, #20]	; (800bebc <USB_DeactivateEndpoint+0x1b4>)
 800bea6:	4013      	ands	r3, r2
 800bea8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800beaa:	2300      	movs	r3, #0
}
 800beac:	4618      	mov	r0, r3
 800beae:	3714      	adds	r7, #20
 800beb0:	46bd      	mov	sp, r7
 800beb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beb6:	4770      	bx	lr
 800beb8:	ec337800 	.word	0xec337800
 800bebc:	eff37800 	.word	0xeff37800

0800bec0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800bec0:	b580      	push	{r7, lr}
 800bec2:	b08a      	sub	sp, #40	; 0x28
 800bec4:	af02      	add	r7, sp, #8
 800bec6:	60f8      	str	r0, [r7, #12]
 800bec8:	60b9      	str	r1, [r7, #8]
 800beca:	4613      	mov	r3, r2
 800becc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bece:	68fb      	ldr	r3, [r7, #12]
 800bed0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800bed2:	68bb      	ldr	r3, [r7, #8]
 800bed4:	781b      	ldrb	r3, [r3, #0]
 800bed6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800bed8:	68bb      	ldr	r3, [r7, #8]
 800beda:	785b      	ldrb	r3, [r3, #1]
 800bedc:	2b01      	cmp	r3, #1
 800bede:	f040 817a 	bne.w	800c1d6 <USB_EPStartXfer+0x316>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800bee2:	68bb      	ldr	r3, [r7, #8]
 800bee4:	691b      	ldr	r3, [r3, #16]
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	d132      	bne.n	800bf50 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800beea:	69bb      	ldr	r3, [r7, #24]
 800beec:	015a      	lsls	r2, r3, #5
 800beee:	69fb      	ldr	r3, [r7, #28]
 800bef0:	4413      	add	r3, r2
 800bef2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bef6:	691b      	ldr	r3, [r3, #16]
 800bef8:	69ba      	ldr	r2, [r7, #24]
 800befa:	0151      	lsls	r1, r2, #5
 800befc:	69fa      	ldr	r2, [r7, #28]
 800befe:	440a      	add	r2, r1
 800bf00:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bf04:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800bf08:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800bf0c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800bf0e:	69bb      	ldr	r3, [r7, #24]
 800bf10:	015a      	lsls	r2, r3, #5
 800bf12:	69fb      	ldr	r3, [r7, #28]
 800bf14:	4413      	add	r3, r2
 800bf16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bf1a:	691b      	ldr	r3, [r3, #16]
 800bf1c:	69ba      	ldr	r2, [r7, #24]
 800bf1e:	0151      	lsls	r1, r2, #5
 800bf20:	69fa      	ldr	r2, [r7, #28]
 800bf22:	440a      	add	r2, r1
 800bf24:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bf28:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800bf2c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800bf2e:	69bb      	ldr	r3, [r7, #24]
 800bf30:	015a      	lsls	r2, r3, #5
 800bf32:	69fb      	ldr	r3, [r7, #28]
 800bf34:	4413      	add	r3, r2
 800bf36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bf3a:	691b      	ldr	r3, [r3, #16]
 800bf3c:	69ba      	ldr	r2, [r7, #24]
 800bf3e:	0151      	lsls	r1, r2, #5
 800bf40:	69fa      	ldr	r2, [r7, #28]
 800bf42:	440a      	add	r2, r1
 800bf44:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bf48:	0cdb      	lsrs	r3, r3, #19
 800bf4a:	04db      	lsls	r3, r3, #19
 800bf4c:	6113      	str	r3, [r2, #16]
 800bf4e:	e092      	b.n	800c076 <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800bf50:	69bb      	ldr	r3, [r7, #24]
 800bf52:	015a      	lsls	r2, r3, #5
 800bf54:	69fb      	ldr	r3, [r7, #28]
 800bf56:	4413      	add	r3, r2
 800bf58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bf5c:	691b      	ldr	r3, [r3, #16]
 800bf5e:	69ba      	ldr	r2, [r7, #24]
 800bf60:	0151      	lsls	r1, r2, #5
 800bf62:	69fa      	ldr	r2, [r7, #28]
 800bf64:	440a      	add	r2, r1
 800bf66:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bf6a:	0cdb      	lsrs	r3, r3, #19
 800bf6c:	04db      	lsls	r3, r3, #19
 800bf6e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800bf70:	69bb      	ldr	r3, [r7, #24]
 800bf72:	015a      	lsls	r2, r3, #5
 800bf74:	69fb      	ldr	r3, [r7, #28]
 800bf76:	4413      	add	r3, r2
 800bf78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bf7c:	691b      	ldr	r3, [r3, #16]
 800bf7e:	69ba      	ldr	r2, [r7, #24]
 800bf80:	0151      	lsls	r1, r2, #5
 800bf82:	69fa      	ldr	r2, [r7, #28]
 800bf84:	440a      	add	r2, r1
 800bf86:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bf8a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800bf8e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800bf92:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 800bf94:	69bb      	ldr	r3, [r7, #24]
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	d11a      	bne.n	800bfd0 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800bf9a:	68bb      	ldr	r3, [r7, #8]
 800bf9c:	691a      	ldr	r2, [r3, #16]
 800bf9e:	68bb      	ldr	r3, [r7, #8]
 800bfa0:	689b      	ldr	r3, [r3, #8]
 800bfa2:	429a      	cmp	r2, r3
 800bfa4:	d903      	bls.n	800bfae <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800bfa6:	68bb      	ldr	r3, [r7, #8]
 800bfa8:	689a      	ldr	r2, [r3, #8]
 800bfaa:	68bb      	ldr	r3, [r7, #8]
 800bfac:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800bfae:	69bb      	ldr	r3, [r7, #24]
 800bfb0:	015a      	lsls	r2, r3, #5
 800bfb2:	69fb      	ldr	r3, [r7, #28]
 800bfb4:	4413      	add	r3, r2
 800bfb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bfba:	691b      	ldr	r3, [r3, #16]
 800bfbc:	69ba      	ldr	r2, [r7, #24]
 800bfbe:	0151      	lsls	r1, r2, #5
 800bfc0:	69fa      	ldr	r2, [r7, #28]
 800bfc2:	440a      	add	r2, r1
 800bfc4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bfc8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800bfcc:	6113      	str	r3, [r2, #16]
 800bfce:	e01b      	b.n	800c008 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800bfd0:	69bb      	ldr	r3, [r7, #24]
 800bfd2:	015a      	lsls	r2, r3, #5
 800bfd4:	69fb      	ldr	r3, [r7, #28]
 800bfd6:	4413      	add	r3, r2
 800bfd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bfdc:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800bfde:	68bb      	ldr	r3, [r7, #8]
 800bfe0:	6919      	ldr	r1, [r3, #16]
 800bfe2:	68bb      	ldr	r3, [r7, #8]
 800bfe4:	689b      	ldr	r3, [r3, #8]
 800bfe6:	440b      	add	r3, r1
 800bfe8:	1e59      	subs	r1, r3, #1
 800bfea:	68bb      	ldr	r3, [r7, #8]
 800bfec:	689b      	ldr	r3, [r3, #8]
 800bfee:	fbb1 f3f3 	udiv	r3, r1, r3
 800bff2:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800bff4:	4ba2      	ldr	r3, [pc, #648]	; (800c280 <USB_EPStartXfer+0x3c0>)
 800bff6:	400b      	ands	r3, r1
 800bff8:	69b9      	ldr	r1, [r7, #24]
 800bffa:	0148      	lsls	r0, r1, #5
 800bffc:	69f9      	ldr	r1, [r7, #28]
 800bffe:	4401      	add	r1, r0
 800c000:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800c004:	4313      	orrs	r3, r2
 800c006:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800c008:	69bb      	ldr	r3, [r7, #24]
 800c00a:	015a      	lsls	r2, r3, #5
 800c00c:	69fb      	ldr	r3, [r7, #28]
 800c00e:	4413      	add	r3, r2
 800c010:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c014:	691a      	ldr	r2, [r3, #16]
 800c016:	68bb      	ldr	r3, [r7, #8]
 800c018:	691b      	ldr	r3, [r3, #16]
 800c01a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c01e:	69b9      	ldr	r1, [r7, #24]
 800c020:	0148      	lsls	r0, r1, #5
 800c022:	69f9      	ldr	r1, [r7, #28]
 800c024:	4401      	add	r1, r0
 800c026:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800c02a:	4313      	orrs	r3, r2
 800c02c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800c02e:	68bb      	ldr	r3, [r7, #8]
 800c030:	791b      	ldrb	r3, [r3, #4]
 800c032:	2b01      	cmp	r3, #1
 800c034:	d11f      	bne.n	800c076 <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800c036:	69bb      	ldr	r3, [r7, #24]
 800c038:	015a      	lsls	r2, r3, #5
 800c03a:	69fb      	ldr	r3, [r7, #28]
 800c03c:	4413      	add	r3, r2
 800c03e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c042:	691b      	ldr	r3, [r3, #16]
 800c044:	69ba      	ldr	r2, [r7, #24]
 800c046:	0151      	lsls	r1, r2, #5
 800c048:	69fa      	ldr	r2, [r7, #28]
 800c04a:	440a      	add	r2, r1
 800c04c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c050:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800c054:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800c056:	69bb      	ldr	r3, [r7, #24]
 800c058:	015a      	lsls	r2, r3, #5
 800c05a:	69fb      	ldr	r3, [r7, #28]
 800c05c:	4413      	add	r3, r2
 800c05e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c062:	691b      	ldr	r3, [r3, #16]
 800c064:	69ba      	ldr	r2, [r7, #24]
 800c066:	0151      	lsls	r1, r2, #5
 800c068:	69fa      	ldr	r2, [r7, #28]
 800c06a:	440a      	add	r2, r1
 800c06c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c070:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c074:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800c076:	79fb      	ldrb	r3, [r7, #7]
 800c078:	2b01      	cmp	r3, #1
 800c07a:	d14b      	bne.n	800c114 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800c07c:	68bb      	ldr	r3, [r7, #8]
 800c07e:	69db      	ldr	r3, [r3, #28]
 800c080:	2b00      	cmp	r3, #0
 800c082:	d009      	beq.n	800c098 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800c084:	69bb      	ldr	r3, [r7, #24]
 800c086:	015a      	lsls	r2, r3, #5
 800c088:	69fb      	ldr	r3, [r7, #28]
 800c08a:	4413      	add	r3, r2
 800c08c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c090:	461a      	mov	r2, r3
 800c092:	68bb      	ldr	r3, [r7, #8]
 800c094:	69db      	ldr	r3, [r3, #28]
 800c096:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800c098:	68bb      	ldr	r3, [r7, #8]
 800c09a:	791b      	ldrb	r3, [r3, #4]
 800c09c:	2b01      	cmp	r3, #1
 800c09e:	d128      	bne.n	800c0f2 <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800c0a0:	69fb      	ldr	r3, [r7, #28]
 800c0a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c0a6:	689b      	ldr	r3, [r3, #8]
 800c0a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	d110      	bne.n	800c0d2 <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800c0b0:	69bb      	ldr	r3, [r7, #24]
 800c0b2:	015a      	lsls	r2, r3, #5
 800c0b4:	69fb      	ldr	r3, [r7, #28]
 800c0b6:	4413      	add	r3, r2
 800c0b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c0bc:	681b      	ldr	r3, [r3, #0]
 800c0be:	69ba      	ldr	r2, [r7, #24]
 800c0c0:	0151      	lsls	r1, r2, #5
 800c0c2:	69fa      	ldr	r2, [r7, #28]
 800c0c4:	440a      	add	r2, r1
 800c0c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c0ca:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c0ce:	6013      	str	r3, [r2, #0]
 800c0d0:	e00f      	b.n	800c0f2 <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800c0d2:	69bb      	ldr	r3, [r7, #24]
 800c0d4:	015a      	lsls	r2, r3, #5
 800c0d6:	69fb      	ldr	r3, [r7, #28]
 800c0d8:	4413      	add	r3, r2
 800c0da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c0de:	681b      	ldr	r3, [r3, #0]
 800c0e0:	69ba      	ldr	r2, [r7, #24]
 800c0e2:	0151      	lsls	r1, r2, #5
 800c0e4:	69fa      	ldr	r2, [r7, #28]
 800c0e6:	440a      	add	r2, r1
 800c0e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c0ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c0f0:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c0f2:	69bb      	ldr	r3, [r7, #24]
 800c0f4:	015a      	lsls	r2, r3, #5
 800c0f6:	69fb      	ldr	r3, [r7, #28]
 800c0f8:	4413      	add	r3, r2
 800c0fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c0fe:	681b      	ldr	r3, [r3, #0]
 800c100:	69ba      	ldr	r2, [r7, #24]
 800c102:	0151      	lsls	r1, r2, #5
 800c104:	69fa      	ldr	r2, [r7, #28]
 800c106:	440a      	add	r2, r1
 800c108:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c10c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c110:	6013      	str	r3, [r2, #0]
 800c112:	e165      	b.n	800c3e0 <USB_EPStartXfer+0x520>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c114:	69bb      	ldr	r3, [r7, #24]
 800c116:	015a      	lsls	r2, r3, #5
 800c118:	69fb      	ldr	r3, [r7, #28]
 800c11a:	4413      	add	r3, r2
 800c11c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c120:	681b      	ldr	r3, [r3, #0]
 800c122:	69ba      	ldr	r2, [r7, #24]
 800c124:	0151      	lsls	r1, r2, #5
 800c126:	69fa      	ldr	r2, [r7, #28]
 800c128:	440a      	add	r2, r1
 800c12a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c12e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c132:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800c134:	68bb      	ldr	r3, [r7, #8]
 800c136:	791b      	ldrb	r3, [r3, #4]
 800c138:	2b01      	cmp	r3, #1
 800c13a:	d015      	beq.n	800c168 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800c13c:	68bb      	ldr	r3, [r7, #8]
 800c13e:	691b      	ldr	r3, [r3, #16]
 800c140:	2b00      	cmp	r3, #0
 800c142:	f000 814d 	beq.w	800c3e0 <USB_EPStartXfer+0x520>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800c146:	69fb      	ldr	r3, [r7, #28]
 800c148:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c14c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c14e:	68bb      	ldr	r3, [r7, #8]
 800c150:	781b      	ldrb	r3, [r3, #0]
 800c152:	f003 030f 	and.w	r3, r3, #15
 800c156:	2101      	movs	r1, #1
 800c158:	fa01 f303 	lsl.w	r3, r1, r3
 800c15c:	69f9      	ldr	r1, [r7, #28]
 800c15e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c162:	4313      	orrs	r3, r2
 800c164:	634b      	str	r3, [r1, #52]	; 0x34
 800c166:	e13b      	b.n	800c3e0 <USB_EPStartXfer+0x520>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800c168:	69fb      	ldr	r3, [r7, #28]
 800c16a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c16e:	689b      	ldr	r3, [r3, #8]
 800c170:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c174:	2b00      	cmp	r3, #0
 800c176:	d110      	bne.n	800c19a <USB_EPStartXfer+0x2da>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800c178:	69bb      	ldr	r3, [r7, #24]
 800c17a:	015a      	lsls	r2, r3, #5
 800c17c:	69fb      	ldr	r3, [r7, #28]
 800c17e:	4413      	add	r3, r2
 800c180:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c184:	681b      	ldr	r3, [r3, #0]
 800c186:	69ba      	ldr	r2, [r7, #24]
 800c188:	0151      	lsls	r1, r2, #5
 800c18a:	69fa      	ldr	r2, [r7, #28]
 800c18c:	440a      	add	r2, r1
 800c18e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c192:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c196:	6013      	str	r3, [r2, #0]
 800c198:	e00f      	b.n	800c1ba <USB_EPStartXfer+0x2fa>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800c19a:	69bb      	ldr	r3, [r7, #24]
 800c19c:	015a      	lsls	r2, r3, #5
 800c19e:	69fb      	ldr	r3, [r7, #28]
 800c1a0:	4413      	add	r3, r2
 800c1a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c1a6:	681b      	ldr	r3, [r3, #0]
 800c1a8:	69ba      	ldr	r2, [r7, #24]
 800c1aa:	0151      	lsls	r1, r2, #5
 800c1ac:	69fa      	ldr	r2, [r7, #28]
 800c1ae:	440a      	add	r2, r1
 800c1b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c1b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c1b8:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800c1ba:	68bb      	ldr	r3, [r7, #8]
 800c1bc:	68d9      	ldr	r1, [r3, #12]
 800c1be:	68bb      	ldr	r3, [r7, #8]
 800c1c0:	781a      	ldrb	r2, [r3, #0]
 800c1c2:	68bb      	ldr	r3, [r7, #8]
 800c1c4:	691b      	ldr	r3, [r3, #16]
 800c1c6:	b298      	uxth	r0, r3
 800c1c8:	79fb      	ldrb	r3, [r7, #7]
 800c1ca:	9300      	str	r3, [sp, #0]
 800c1cc:	4603      	mov	r3, r0
 800c1ce:	68f8      	ldr	r0, [r7, #12]
 800c1d0:	f000 f9b8 	bl	800c544 <USB_WritePacket>
 800c1d4:	e104      	b.n	800c3e0 <USB_EPStartXfer+0x520>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800c1d6:	69bb      	ldr	r3, [r7, #24]
 800c1d8:	015a      	lsls	r2, r3, #5
 800c1da:	69fb      	ldr	r3, [r7, #28]
 800c1dc:	4413      	add	r3, r2
 800c1de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c1e2:	691b      	ldr	r3, [r3, #16]
 800c1e4:	69ba      	ldr	r2, [r7, #24]
 800c1e6:	0151      	lsls	r1, r2, #5
 800c1e8:	69fa      	ldr	r2, [r7, #28]
 800c1ea:	440a      	add	r2, r1
 800c1ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c1f0:	0cdb      	lsrs	r3, r3, #19
 800c1f2:	04db      	lsls	r3, r3, #19
 800c1f4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800c1f6:	69bb      	ldr	r3, [r7, #24]
 800c1f8:	015a      	lsls	r2, r3, #5
 800c1fa:	69fb      	ldr	r3, [r7, #28]
 800c1fc:	4413      	add	r3, r2
 800c1fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c202:	691b      	ldr	r3, [r3, #16]
 800c204:	69ba      	ldr	r2, [r7, #24]
 800c206:	0151      	lsls	r1, r2, #5
 800c208:	69fa      	ldr	r2, [r7, #28]
 800c20a:	440a      	add	r2, r1
 800c20c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c210:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800c214:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800c218:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 800c21a:	69bb      	ldr	r3, [r7, #24]
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	d131      	bne.n	800c284 <USB_EPStartXfer+0x3c4>
    {
      if (ep->xfer_len > 0U)
 800c220:	68bb      	ldr	r3, [r7, #8]
 800c222:	691b      	ldr	r3, [r3, #16]
 800c224:	2b00      	cmp	r3, #0
 800c226:	d003      	beq.n	800c230 <USB_EPStartXfer+0x370>
      {
        ep->xfer_len = ep->maxpacket;
 800c228:	68bb      	ldr	r3, [r7, #8]
 800c22a:	689a      	ldr	r2, [r3, #8]
 800c22c:	68bb      	ldr	r3, [r7, #8]
 800c22e:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800c230:	68bb      	ldr	r3, [r7, #8]
 800c232:	689a      	ldr	r2, [r3, #8]
 800c234:	68bb      	ldr	r3, [r7, #8]
 800c236:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800c238:	69bb      	ldr	r3, [r7, #24]
 800c23a:	015a      	lsls	r2, r3, #5
 800c23c:	69fb      	ldr	r3, [r7, #28]
 800c23e:	4413      	add	r3, r2
 800c240:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c244:	691a      	ldr	r2, [r3, #16]
 800c246:	68bb      	ldr	r3, [r7, #8]
 800c248:	6a1b      	ldr	r3, [r3, #32]
 800c24a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c24e:	69b9      	ldr	r1, [r7, #24]
 800c250:	0148      	lsls	r0, r1, #5
 800c252:	69f9      	ldr	r1, [r7, #28]
 800c254:	4401      	add	r1, r0
 800c256:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c25a:	4313      	orrs	r3, r2
 800c25c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c25e:	69bb      	ldr	r3, [r7, #24]
 800c260:	015a      	lsls	r2, r3, #5
 800c262:	69fb      	ldr	r3, [r7, #28]
 800c264:	4413      	add	r3, r2
 800c266:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c26a:	691b      	ldr	r3, [r3, #16]
 800c26c:	69ba      	ldr	r2, [r7, #24]
 800c26e:	0151      	lsls	r1, r2, #5
 800c270:	69fa      	ldr	r2, [r7, #28]
 800c272:	440a      	add	r2, r1
 800c274:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c278:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c27c:	6113      	str	r3, [r2, #16]
 800c27e:	e061      	b.n	800c344 <USB_EPStartXfer+0x484>
 800c280:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 800c284:	68bb      	ldr	r3, [r7, #8]
 800c286:	691b      	ldr	r3, [r3, #16]
 800c288:	2b00      	cmp	r3, #0
 800c28a:	d123      	bne.n	800c2d4 <USB_EPStartXfer+0x414>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800c28c:	69bb      	ldr	r3, [r7, #24]
 800c28e:	015a      	lsls	r2, r3, #5
 800c290:	69fb      	ldr	r3, [r7, #28]
 800c292:	4413      	add	r3, r2
 800c294:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c298:	691a      	ldr	r2, [r3, #16]
 800c29a:	68bb      	ldr	r3, [r7, #8]
 800c29c:	689b      	ldr	r3, [r3, #8]
 800c29e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c2a2:	69b9      	ldr	r1, [r7, #24]
 800c2a4:	0148      	lsls	r0, r1, #5
 800c2a6:	69f9      	ldr	r1, [r7, #28]
 800c2a8:	4401      	add	r1, r0
 800c2aa:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c2ae:	4313      	orrs	r3, r2
 800c2b0:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c2b2:	69bb      	ldr	r3, [r7, #24]
 800c2b4:	015a      	lsls	r2, r3, #5
 800c2b6:	69fb      	ldr	r3, [r7, #28]
 800c2b8:	4413      	add	r3, r2
 800c2ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c2be:	691b      	ldr	r3, [r3, #16]
 800c2c0:	69ba      	ldr	r2, [r7, #24]
 800c2c2:	0151      	lsls	r1, r2, #5
 800c2c4:	69fa      	ldr	r2, [r7, #28]
 800c2c6:	440a      	add	r2, r1
 800c2c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c2cc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c2d0:	6113      	str	r3, [r2, #16]
 800c2d2:	e037      	b.n	800c344 <USB_EPStartXfer+0x484>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800c2d4:	68bb      	ldr	r3, [r7, #8]
 800c2d6:	691a      	ldr	r2, [r3, #16]
 800c2d8:	68bb      	ldr	r3, [r7, #8]
 800c2da:	689b      	ldr	r3, [r3, #8]
 800c2dc:	4413      	add	r3, r2
 800c2de:	1e5a      	subs	r2, r3, #1
 800c2e0:	68bb      	ldr	r3, [r7, #8]
 800c2e2:	689b      	ldr	r3, [r3, #8]
 800c2e4:	fbb2 f3f3 	udiv	r3, r2, r3
 800c2e8:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800c2ea:	68bb      	ldr	r3, [r7, #8]
 800c2ec:	689b      	ldr	r3, [r3, #8]
 800c2ee:	8afa      	ldrh	r2, [r7, #22]
 800c2f0:	fb03 f202 	mul.w	r2, r3, r2
 800c2f4:	68bb      	ldr	r3, [r7, #8]
 800c2f6:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800c2f8:	69bb      	ldr	r3, [r7, #24]
 800c2fa:	015a      	lsls	r2, r3, #5
 800c2fc:	69fb      	ldr	r3, [r7, #28]
 800c2fe:	4413      	add	r3, r2
 800c300:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c304:	691a      	ldr	r2, [r3, #16]
 800c306:	8afb      	ldrh	r3, [r7, #22]
 800c308:	04d9      	lsls	r1, r3, #19
 800c30a:	4b38      	ldr	r3, [pc, #224]	; (800c3ec <USB_EPStartXfer+0x52c>)
 800c30c:	400b      	ands	r3, r1
 800c30e:	69b9      	ldr	r1, [r7, #24]
 800c310:	0148      	lsls	r0, r1, #5
 800c312:	69f9      	ldr	r1, [r7, #28]
 800c314:	4401      	add	r1, r0
 800c316:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c31a:	4313      	orrs	r3, r2
 800c31c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800c31e:	69bb      	ldr	r3, [r7, #24]
 800c320:	015a      	lsls	r2, r3, #5
 800c322:	69fb      	ldr	r3, [r7, #28]
 800c324:	4413      	add	r3, r2
 800c326:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c32a:	691a      	ldr	r2, [r3, #16]
 800c32c:	68bb      	ldr	r3, [r7, #8]
 800c32e:	6a1b      	ldr	r3, [r3, #32]
 800c330:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c334:	69b9      	ldr	r1, [r7, #24]
 800c336:	0148      	lsls	r0, r1, #5
 800c338:	69f9      	ldr	r1, [r7, #28]
 800c33a:	4401      	add	r1, r0
 800c33c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c340:	4313      	orrs	r3, r2
 800c342:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800c344:	79fb      	ldrb	r3, [r7, #7]
 800c346:	2b01      	cmp	r3, #1
 800c348:	d10d      	bne.n	800c366 <USB_EPStartXfer+0x4a6>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800c34a:	68bb      	ldr	r3, [r7, #8]
 800c34c:	68db      	ldr	r3, [r3, #12]
 800c34e:	2b00      	cmp	r3, #0
 800c350:	d009      	beq.n	800c366 <USB_EPStartXfer+0x4a6>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800c352:	68bb      	ldr	r3, [r7, #8]
 800c354:	68d9      	ldr	r1, [r3, #12]
 800c356:	69bb      	ldr	r3, [r7, #24]
 800c358:	015a      	lsls	r2, r3, #5
 800c35a:	69fb      	ldr	r3, [r7, #28]
 800c35c:	4413      	add	r3, r2
 800c35e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c362:	460a      	mov	r2, r1
 800c364:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800c366:	68bb      	ldr	r3, [r7, #8]
 800c368:	791b      	ldrb	r3, [r3, #4]
 800c36a:	2b01      	cmp	r3, #1
 800c36c:	d128      	bne.n	800c3c0 <USB_EPStartXfer+0x500>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800c36e:	69fb      	ldr	r3, [r7, #28]
 800c370:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c374:	689b      	ldr	r3, [r3, #8]
 800c376:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c37a:	2b00      	cmp	r3, #0
 800c37c:	d110      	bne.n	800c3a0 <USB_EPStartXfer+0x4e0>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800c37e:	69bb      	ldr	r3, [r7, #24]
 800c380:	015a      	lsls	r2, r3, #5
 800c382:	69fb      	ldr	r3, [r7, #28]
 800c384:	4413      	add	r3, r2
 800c386:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c38a:	681b      	ldr	r3, [r3, #0]
 800c38c:	69ba      	ldr	r2, [r7, #24]
 800c38e:	0151      	lsls	r1, r2, #5
 800c390:	69fa      	ldr	r2, [r7, #28]
 800c392:	440a      	add	r2, r1
 800c394:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c398:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c39c:	6013      	str	r3, [r2, #0]
 800c39e:	e00f      	b.n	800c3c0 <USB_EPStartXfer+0x500>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800c3a0:	69bb      	ldr	r3, [r7, #24]
 800c3a2:	015a      	lsls	r2, r3, #5
 800c3a4:	69fb      	ldr	r3, [r7, #28]
 800c3a6:	4413      	add	r3, r2
 800c3a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c3ac:	681b      	ldr	r3, [r3, #0]
 800c3ae:	69ba      	ldr	r2, [r7, #24]
 800c3b0:	0151      	lsls	r1, r2, #5
 800c3b2:	69fa      	ldr	r2, [r7, #28]
 800c3b4:	440a      	add	r2, r1
 800c3b6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c3ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c3be:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800c3c0:	69bb      	ldr	r3, [r7, #24]
 800c3c2:	015a      	lsls	r2, r3, #5
 800c3c4:	69fb      	ldr	r3, [r7, #28]
 800c3c6:	4413      	add	r3, r2
 800c3c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c3cc:	681b      	ldr	r3, [r3, #0]
 800c3ce:	69ba      	ldr	r2, [r7, #24]
 800c3d0:	0151      	lsls	r1, r2, #5
 800c3d2:	69fa      	ldr	r2, [r7, #28]
 800c3d4:	440a      	add	r2, r1
 800c3d6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c3da:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c3de:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c3e0:	2300      	movs	r3, #0
}
 800c3e2:	4618      	mov	r0, r3
 800c3e4:	3720      	adds	r7, #32
 800c3e6:	46bd      	mov	sp, r7
 800c3e8:	bd80      	pop	{r7, pc}
 800c3ea:	bf00      	nop
 800c3ec:	1ff80000 	.word	0x1ff80000

0800c3f0 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c3f0:	b480      	push	{r7}
 800c3f2:	b087      	sub	sp, #28
 800c3f4:	af00      	add	r7, sp, #0
 800c3f6:	6078      	str	r0, [r7, #4]
 800c3f8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800c3fa:	2300      	movs	r3, #0
 800c3fc:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800c3fe:	2300      	movs	r3, #0
 800c400:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800c406:	683b      	ldr	r3, [r7, #0]
 800c408:	785b      	ldrb	r3, [r3, #1]
 800c40a:	2b01      	cmp	r3, #1
 800c40c:	d14a      	bne.n	800c4a4 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800c40e:	683b      	ldr	r3, [r7, #0]
 800c410:	781b      	ldrb	r3, [r3, #0]
 800c412:	015a      	lsls	r2, r3, #5
 800c414:	693b      	ldr	r3, [r7, #16]
 800c416:	4413      	add	r3, r2
 800c418:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c41c:	681b      	ldr	r3, [r3, #0]
 800c41e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c422:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c426:	f040 8086 	bne.w	800c536 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800c42a:	683b      	ldr	r3, [r7, #0]
 800c42c:	781b      	ldrb	r3, [r3, #0]
 800c42e:	015a      	lsls	r2, r3, #5
 800c430:	693b      	ldr	r3, [r7, #16]
 800c432:	4413      	add	r3, r2
 800c434:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c438:	681b      	ldr	r3, [r3, #0]
 800c43a:	683a      	ldr	r2, [r7, #0]
 800c43c:	7812      	ldrb	r2, [r2, #0]
 800c43e:	0151      	lsls	r1, r2, #5
 800c440:	693a      	ldr	r2, [r7, #16]
 800c442:	440a      	add	r2, r1
 800c444:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c448:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800c44c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800c44e:	683b      	ldr	r3, [r7, #0]
 800c450:	781b      	ldrb	r3, [r3, #0]
 800c452:	015a      	lsls	r2, r3, #5
 800c454:	693b      	ldr	r3, [r7, #16]
 800c456:	4413      	add	r3, r2
 800c458:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c45c:	681b      	ldr	r3, [r3, #0]
 800c45e:	683a      	ldr	r2, [r7, #0]
 800c460:	7812      	ldrb	r2, [r2, #0]
 800c462:	0151      	lsls	r1, r2, #5
 800c464:	693a      	ldr	r2, [r7, #16]
 800c466:	440a      	add	r2, r1
 800c468:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c46c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c470:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800c472:	68fb      	ldr	r3, [r7, #12]
 800c474:	3301      	adds	r3, #1
 800c476:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800c478:	68fb      	ldr	r3, [r7, #12]
 800c47a:	f242 7210 	movw	r2, #10000	; 0x2710
 800c47e:	4293      	cmp	r3, r2
 800c480:	d902      	bls.n	800c488 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800c482:	2301      	movs	r3, #1
 800c484:	75fb      	strb	r3, [r7, #23]
          break;
 800c486:	e056      	b.n	800c536 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800c488:	683b      	ldr	r3, [r7, #0]
 800c48a:	781b      	ldrb	r3, [r3, #0]
 800c48c:	015a      	lsls	r2, r3, #5
 800c48e:	693b      	ldr	r3, [r7, #16]
 800c490:	4413      	add	r3, r2
 800c492:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c496:	681b      	ldr	r3, [r3, #0]
 800c498:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c49c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c4a0:	d0e7      	beq.n	800c472 <USB_EPStopXfer+0x82>
 800c4a2:	e048      	b.n	800c536 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c4a4:	683b      	ldr	r3, [r7, #0]
 800c4a6:	781b      	ldrb	r3, [r3, #0]
 800c4a8:	015a      	lsls	r2, r3, #5
 800c4aa:	693b      	ldr	r3, [r7, #16]
 800c4ac:	4413      	add	r3, r2
 800c4ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c4b2:	681b      	ldr	r3, [r3, #0]
 800c4b4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c4b8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c4bc:	d13b      	bne.n	800c536 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800c4be:	683b      	ldr	r3, [r7, #0]
 800c4c0:	781b      	ldrb	r3, [r3, #0]
 800c4c2:	015a      	lsls	r2, r3, #5
 800c4c4:	693b      	ldr	r3, [r7, #16]
 800c4c6:	4413      	add	r3, r2
 800c4c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c4cc:	681b      	ldr	r3, [r3, #0]
 800c4ce:	683a      	ldr	r2, [r7, #0]
 800c4d0:	7812      	ldrb	r2, [r2, #0]
 800c4d2:	0151      	lsls	r1, r2, #5
 800c4d4:	693a      	ldr	r2, [r7, #16]
 800c4d6:	440a      	add	r2, r1
 800c4d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c4dc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800c4e0:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800c4e2:	683b      	ldr	r3, [r7, #0]
 800c4e4:	781b      	ldrb	r3, [r3, #0]
 800c4e6:	015a      	lsls	r2, r3, #5
 800c4e8:	693b      	ldr	r3, [r7, #16]
 800c4ea:	4413      	add	r3, r2
 800c4ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c4f0:	681b      	ldr	r3, [r3, #0]
 800c4f2:	683a      	ldr	r2, [r7, #0]
 800c4f4:	7812      	ldrb	r2, [r2, #0]
 800c4f6:	0151      	lsls	r1, r2, #5
 800c4f8:	693a      	ldr	r2, [r7, #16]
 800c4fa:	440a      	add	r2, r1
 800c4fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c500:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c504:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800c506:	68fb      	ldr	r3, [r7, #12]
 800c508:	3301      	adds	r3, #1
 800c50a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800c50c:	68fb      	ldr	r3, [r7, #12]
 800c50e:	f242 7210 	movw	r2, #10000	; 0x2710
 800c512:	4293      	cmp	r3, r2
 800c514:	d902      	bls.n	800c51c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800c516:	2301      	movs	r3, #1
 800c518:	75fb      	strb	r3, [r7, #23]
          break;
 800c51a:	e00c      	b.n	800c536 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800c51c:	683b      	ldr	r3, [r7, #0]
 800c51e:	781b      	ldrb	r3, [r3, #0]
 800c520:	015a      	lsls	r2, r3, #5
 800c522:	693b      	ldr	r3, [r7, #16]
 800c524:	4413      	add	r3, r2
 800c526:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c52a:	681b      	ldr	r3, [r3, #0]
 800c52c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c530:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c534:	d0e7      	beq.n	800c506 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800c536:	7dfb      	ldrb	r3, [r7, #23]
}
 800c538:	4618      	mov	r0, r3
 800c53a:	371c      	adds	r7, #28
 800c53c:	46bd      	mov	sp, r7
 800c53e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c542:	4770      	bx	lr

0800c544 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800c544:	b480      	push	{r7}
 800c546:	b089      	sub	sp, #36	; 0x24
 800c548:	af00      	add	r7, sp, #0
 800c54a:	60f8      	str	r0, [r7, #12]
 800c54c:	60b9      	str	r1, [r7, #8]
 800c54e:	4611      	mov	r1, r2
 800c550:	461a      	mov	r2, r3
 800c552:	460b      	mov	r3, r1
 800c554:	71fb      	strb	r3, [r7, #7]
 800c556:	4613      	mov	r3, r2
 800c558:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c55a:	68fb      	ldr	r3, [r7, #12]
 800c55c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800c55e:	68bb      	ldr	r3, [r7, #8]
 800c560:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800c562:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800c566:	2b00      	cmp	r3, #0
 800c568:	d123      	bne.n	800c5b2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800c56a:	88bb      	ldrh	r3, [r7, #4]
 800c56c:	3303      	adds	r3, #3
 800c56e:	089b      	lsrs	r3, r3, #2
 800c570:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800c572:	2300      	movs	r3, #0
 800c574:	61bb      	str	r3, [r7, #24]
 800c576:	e018      	b.n	800c5aa <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800c578:	79fb      	ldrb	r3, [r7, #7]
 800c57a:	031a      	lsls	r2, r3, #12
 800c57c:	697b      	ldr	r3, [r7, #20]
 800c57e:	4413      	add	r3, r2
 800c580:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c584:	461a      	mov	r2, r3
 800c586:	69fb      	ldr	r3, [r7, #28]
 800c588:	681b      	ldr	r3, [r3, #0]
 800c58a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800c58c:	69fb      	ldr	r3, [r7, #28]
 800c58e:	3301      	adds	r3, #1
 800c590:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800c592:	69fb      	ldr	r3, [r7, #28]
 800c594:	3301      	adds	r3, #1
 800c596:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800c598:	69fb      	ldr	r3, [r7, #28]
 800c59a:	3301      	adds	r3, #1
 800c59c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800c59e:	69fb      	ldr	r3, [r7, #28]
 800c5a0:	3301      	adds	r3, #1
 800c5a2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800c5a4:	69bb      	ldr	r3, [r7, #24]
 800c5a6:	3301      	adds	r3, #1
 800c5a8:	61bb      	str	r3, [r7, #24]
 800c5aa:	69ba      	ldr	r2, [r7, #24]
 800c5ac:	693b      	ldr	r3, [r7, #16]
 800c5ae:	429a      	cmp	r2, r3
 800c5b0:	d3e2      	bcc.n	800c578 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800c5b2:	2300      	movs	r3, #0
}
 800c5b4:	4618      	mov	r0, r3
 800c5b6:	3724      	adds	r7, #36	; 0x24
 800c5b8:	46bd      	mov	sp, r7
 800c5ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5be:	4770      	bx	lr

0800c5c0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800c5c0:	b480      	push	{r7}
 800c5c2:	b08b      	sub	sp, #44	; 0x2c
 800c5c4:	af00      	add	r7, sp, #0
 800c5c6:	60f8      	str	r0, [r7, #12]
 800c5c8:	60b9      	str	r1, [r7, #8]
 800c5ca:	4613      	mov	r3, r2
 800c5cc:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c5ce:	68fb      	ldr	r3, [r7, #12]
 800c5d0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800c5d2:	68bb      	ldr	r3, [r7, #8]
 800c5d4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800c5d6:	88fb      	ldrh	r3, [r7, #6]
 800c5d8:	089b      	lsrs	r3, r3, #2
 800c5da:	b29b      	uxth	r3, r3
 800c5dc:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800c5de:	88fb      	ldrh	r3, [r7, #6]
 800c5e0:	f003 0303 	and.w	r3, r3, #3
 800c5e4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800c5e6:	2300      	movs	r3, #0
 800c5e8:	623b      	str	r3, [r7, #32]
 800c5ea:	e014      	b.n	800c616 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800c5ec:	69bb      	ldr	r3, [r7, #24]
 800c5ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c5f2:	681a      	ldr	r2, [r3, #0]
 800c5f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5f6:	601a      	str	r2, [r3, #0]
    pDest++;
 800c5f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5fa:	3301      	adds	r3, #1
 800c5fc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800c5fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c600:	3301      	adds	r3, #1
 800c602:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800c604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c606:	3301      	adds	r3, #1
 800c608:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800c60a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c60c:	3301      	adds	r3, #1
 800c60e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800c610:	6a3b      	ldr	r3, [r7, #32]
 800c612:	3301      	adds	r3, #1
 800c614:	623b      	str	r3, [r7, #32]
 800c616:	6a3a      	ldr	r2, [r7, #32]
 800c618:	697b      	ldr	r3, [r7, #20]
 800c61a:	429a      	cmp	r2, r3
 800c61c:	d3e6      	bcc.n	800c5ec <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800c61e:	8bfb      	ldrh	r3, [r7, #30]
 800c620:	2b00      	cmp	r3, #0
 800c622:	d01e      	beq.n	800c662 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800c624:	2300      	movs	r3, #0
 800c626:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800c628:	69bb      	ldr	r3, [r7, #24]
 800c62a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c62e:	461a      	mov	r2, r3
 800c630:	f107 0310 	add.w	r3, r7, #16
 800c634:	6812      	ldr	r2, [r2, #0]
 800c636:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800c638:	693a      	ldr	r2, [r7, #16]
 800c63a:	6a3b      	ldr	r3, [r7, #32]
 800c63c:	b2db      	uxtb	r3, r3
 800c63e:	00db      	lsls	r3, r3, #3
 800c640:	fa22 f303 	lsr.w	r3, r2, r3
 800c644:	b2da      	uxtb	r2, r3
 800c646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c648:	701a      	strb	r2, [r3, #0]
      i++;
 800c64a:	6a3b      	ldr	r3, [r7, #32]
 800c64c:	3301      	adds	r3, #1
 800c64e:	623b      	str	r3, [r7, #32]
      pDest++;
 800c650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c652:	3301      	adds	r3, #1
 800c654:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800c656:	8bfb      	ldrh	r3, [r7, #30]
 800c658:	3b01      	subs	r3, #1
 800c65a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800c65c:	8bfb      	ldrh	r3, [r7, #30]
 800c65e:	2b00      	cmp	r3, #0
 800c660:	d1ea      	bne.n	800c638 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800c662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c664:	4618      	mov	r0, r3
 800c666:	372c      	adds	r7, #44	; 0x2c
 800c668:	46bd      	mov	sp, r7
 800c66a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c66e:	4770      	bx	lr

0800c670 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800c670:	b480      	push	{r7}
 800c672:	b085      	sub	sp, #20
 800c674:	af00      	add	r7, sp, #0
 800c676:	6078      	str	r0, [r7, #4]
 800c678:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c67e:	683b      	ldr	r3, [r7, #0]
 800c680:	781b      	ldrb	r3, [r3, #0]
 800c682:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800c684:	683b      	ldr	r3, [r7, #0]
 800c686:	785b      	ldrb	r3, [r3, #1]
 800c688:	2b01      	cmp	r3, #1
 800c68a:	d12c      	bne.n	800c6e6 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800c68c:	68bb      	ldr	r3, [r7, #8]
 800c68e:	015a      	lsls	r2, r3, #5
 800c690:	68fb      	ldr	r3, [r7, #12]
 800c692:	4413      	add	r3, r2
 800c694:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c698:	681b      	ldr	r3, [r3, #0]
 800c69a:	2b00      	cmp	r3, #0
 800c69c:	db12      	blt.n	800c6c4 <USB_EPSetStall+0x54>
 800c69e:	68bb      	ldr	r3, [r7, #8]
 800c6a0:	2b00      	cmp	r3, #0
 800c6a2:	d00f      	beq.n	800c6c4 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800c6a4:	68bb      	ldr	r3, [r7, #8]
 800c6a6:	015a      	lsls	r2, r3, #5
 800c6a8:	68fb      	ldr	r3, [r7, #12]
 800c6aa:	4413      	add	r3, r2
 800c6ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c6b0:	681b      	ldr	r3, [r3, #0]
 800c6b2:	68ba      	ldr	r2, [r7, #8]
 800c6b4:	0151      	lsls	r1, r2, #5
 800c6b6:	68fa      	ldr	r2, [r7, #12]
 800c6b8:	440a      	add	r2, r1
 800c6ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c6be:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800c6c2:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800c6c4:	68bb      	ldr	r3, [r7, #8]
 800c6c6:	015a      	lsls	r2, r3, #5
 800c6c8:	68fb      	ldr	r3, [r7, #12]
 800c6ca:	4413      	add	r3, r2
 800c6cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c6d0:	681b      	ldr	r3, [r3, #0]
 800c6d2:	68ba      	ldr	r2, [r7, #8]
 800c6d4:	0151      	lsls	r1, r2, #5
 800c6d6:	68fa      	ldr	r2, [r7, #12]
 800c6d8:	440a      	add	r2, r1
 800c6da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c6de:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800c6e2:	6013      	str	r3, [r2, #0]
 800c6e4:	e02b      	b.n	800c73e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800c6e6:	68bb      	ldr	r3, [r7, #8]
 800c6e8:	015a      	lsls	r2, r3, #5
 800c6ea:	68fb      	ldr	r3, [r7, #12]
 800c6ec:	4413      	add	r3, r2
 800c6ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c6f2:	681b      	ldr	r3, [r3, #0]
 800c6f4:	2b00      	cmp	r3, #0
 800c6f6:	db12      	blt.n	800c71e <USB_EPSetStall+0xae>
 800c6f8:	68bb      	ldr	r3, [r7, #8]
 800c6fa:	2b00      	cmp	r3, #0
 800c6fc:	d00f      	beq.n	800c71e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800c6fe:	68bb      	ldr	r3, [r7, #8]
 800c700:	015a      	lsls	r2, r3, #5
 800c702:	68fb      	ldr	r3, [r7, #12]
 800c704:	4413      	add	r3, r2
 800c706:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c70a:	681b      	ldr	r3, [r3, #0]
 800c70c:	68ba      	ldr	r2, [r7, #8]
 800c70e:	0151      	lsls	r1, r2, #5
 800c710:	68fa      	ldr	r2, [r7, #12]
 800c712:	440a      	add	r2, r1
 800c714:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c718:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800c71c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800c71e:	68bb      	ldr	r3, [r7, #8]
 800c720:	015a      	lsls	r2, r3, #5
 800c722:	68fb      	ldr	r3, [r7, #12]
 800c724:	4413      	add	r3, r2
 800c726:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c72a:	681b      	ldr	r3, [r3, #0]
 800c72c:	68ba      	ldr	r2, [r7, #8]
 800c72e:	0151      	lsls	r1, r2, #5
 800c730:	68fa      	ldr	r2, [r7, #12]
 800c732:	440a      	add	r2, r1
 800c734:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c738:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800c73c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c73e:	2300      	movs	r3, #0
}
 800c740:	4618      	mov	r0, r3
 800c742:	3714      	adds	r7, #20
 800c744:	46bd      	mov	sp, r7
 800c746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c74a:	4770      	bx	lr

0800c74c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800c74c:	b480      	push	{r7}
 800c74e:	b085      	sub	sp, #20
 800c750:	af00      	add	r7, sp, #0
 800c752:	6078      	str	r0, [r7, #4]
 800c754:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c75a:	683b      	ldr	r3, [r7, #0]
 800c75c:	781b      	ldrb	r3, [r3, #0]
 800c75e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800c760:	683b      	ldr	r3, [r7, #0]
 800c762:	785b      	ldrb	r3, [r3, #1]
 800c764:	2b01      	cmp	r3, #1
 800c766:	d128      	bne.n	800c7ba <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800c768:	68bb      	ldr	r3, [r7, #8]
 800c76a:	015a      	lsls	r2, r3, #5
 800c76c:	68fb      	ldr	r3, [r7, #12]
 800c76e:	4413      	add	r3, r2
 800c770:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c774:	681b      	ldr	r3, [r3, #0]
 800c776:	68ba      	ldr	r2, [r7, #8]
 800c778:	0151      	lsls	r1, r2, #5
 800c77a:	68fa      	ldr	r2, [r7, #12]
 800c77c:	440a      	add	r2, r1
 800c77e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c782:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c786:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800c788:	683b      	ldr	r3, [r7, #0]
 800c78a:	791b      	ldrb	r3, [r3, #4]
 800c78c:	2b03      	cmp	r3, #3
 800c78e:	d003      	beq.n	800c798 <USB_EPClearStall+0x4c>
 800c790:	683b      	ldr	r3, [r7, #0]
 800c792:	791b      	ldrb	r3, [r3, #4]
 800c794:	2b02      	cmp	r3, #2
 800c796:	d138      	bne.n	800c80a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800c798:	68bb      	ldr	r3, [r7, #8]
 800c79a:	015a      	lsls	r2, r3, #5
 800c79c:	68fb      	ldr	r3, [r7, #12]
 800c79e:	4413      	add	r3, r2
 800c7a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c7a4:	681b      	ldr	r3, [r3, #0]
 800c7a6:	68ba      	ldr	r2, [r7, #8]
 800c7a8:	0151      	lsls	r1, r2, #5
 800c7aa:	68fa      	ldr	r2, [r7, #12]
 800c7ac:	440a      	add	r2, r1
 800c7ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c7b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c7b6:	6013      	str	r3, [r2, #0]
 800c7b8:	e027      	b.n	800c80a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800c7ba:	68bb      	ldr	r3, [r7, #8]
 800c7bc:	015a      	lsls	r2, r3, #5
 800c7be:	68fb      	ldr	r3, [r7, #12]
 800c7c0:	4413      	add	r3, r2
 800c7c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c7c6:	681b      	ldr	r3, [r3, #0]
 800c7c8:	68ba      	ldr	r2, [r7, #8]
 800c7ca:	0151      	lsls	r1, r2, #5
 800c7cc:	68fa      	ldr	r2, [r7, #12]
 800c7ce:	440a      	add	r2, r1
 800c7d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c7d4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c7d8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800c7da:	683b      	ldr	r3, [r7, #0]
 800c7dc:	791b      	ldrb	r3, [r3, #4]
 800c7de:	2b03      	cmp	r3, #3
 800c7e0:	d003      	beq.n	800c7ea <USB_EPClearStall+0x9e>
 800c7e2:	683b      	ldr	r3, [r7, #0]
 800c7e4:	791b      	ldrb	r3, [r3, #4]
 800c7e6:	2b02      	cmp	r3, #2
 800c7e8:	d10f      	bne.n	800c80a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800c7ea:	68bb      	ldr	r3, [r7, #8]
 800c7ec:	015a      	lsls	r2, r3, #5
 800c7ee:	68fb      	ldr	r3, [r7, #12]
 800c7f0:	4413      	add	r3, r2
 800c7f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c7f6:	681b      	ldr	r3, [r3, #0]
 800c7f8:	68ba      	ldr	r2, [r7, #8]
 800c7fa:	0151      	lsls	r1, r2, #5
 800c7fc:	68fa      	ldr	r2, [r7, #12]
 800c7fe:	440a      	add	r2, r1
 800c800:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c804:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c808:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800c80a:	2300      	movs	r3, #0
}
 800c80c:	4618      	mov	r0, r3
 800c80e:	3714      	adds	r7, #20
 800c810:	46bd      	mov	sp, r7
 800c812:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c816:	4770      	bx	lr

0800c818 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800c818:	b480      	push	{r7}
 800c81a:	b085      	sub	sp, #20
 800c81c:	af00      	add	r7, sp, #0
 800c81e:	6078      	str	r0, [r7, #4]
 800c820:	460b      	mov	r3, r1
 800c822:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800c828:	68fb      	ldr	r3, [r7, #12]
 800c82a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c82e:	681b      	ldr	r3, [r3, #0]
 800c830:	68fa      	ldr	r2, [r7, #12]
 800c832:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c836:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800c83a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800c83c:	68fb      	ldr	r3, [r7, #12]
 800c83e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c842:	681a      	ldr	r2, [r3, #0]
 800c844:	78fb      	ldrb	r3, [r7, #3]
 800c846:	011b      	lsls	r3, r3, #4
 800c848:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800c84c:	68f9      	ldr	r1, [r7, #12]
 800c84e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c852:	4313      	orrs	r3, r2
 800c854:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800c856:	2300      	movs	r3, #0
}
 800c858:	4618      	mov	r0, r3
 800c85a:	3714      	adds	r7, #20
 800c85c:	46bd      	mov	sp, r7
 800c85e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c862:	4770      	bx	lr

0800c864 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800c864:	b480      	push	{r7}
 800c866:	b085      	sub	sp, #20
 800c868:	af00      	add	r7, sp, #0
 800c86a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800c870:	68fb      	ldr	r3, [r7, #12]
 800c872:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c876:	681b      	ldr	r3, [r3, #0]
 800c878:	68fa      	ldr	r2, [r7, #12]
 800c87a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800c87e:	f023 0303 	bic.w	r3, r3, #3
 800c882:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800c884:	68fb      	ldr	r3, [r7, #12]
 800c886:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c88a:	685b      	ldr	r3, [r3, #4]
 800c88c:	68fa      	ldr	r2, [r7, #12]
 800c88e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c892:	f023 0302 	bic.w	r3, r3, #2
 800c896:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800c898:	2300      	movs	r3, #0
}
 800c89a:	4618      	mov	r0, r3
 800c89c:	3714      	adds	r7, #20
 800c89e:	46bd      	mov	sp, r7
 800c8a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8a4:	4770      	bx	lr

0800c8a6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800c8a6:	b480      	push	{r7}
 800c8a8:	b085      	sub	sp, #20
 800c8aa:	af00      	add	r7, sp, #0
 800c8ac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800c8b2:	68fb      	ldr	r3, [r7, #12]
 800c8b4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c8b8:	681b      	ldr	r3, [r3, #0]
 800c8ba:	68fa      	ldr	r2, [r7, #12]
 800c8bc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800c8c0:	f023 0303 	bic.w	r3, r3, #3
 800c8c4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800c8c6:	68fb      	ldr	r3, [r7, #12]
 800c8c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c8cc:	685b      	ldr	r3, [r3, #4]
 800c8ce:	68fa      	ldr	r2, [r7, #12]
 800c8d0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c8d4:	f043 0302 	orr.w	r3, r3, #2
 800c8d8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800c8da:	2300      	movs	r3, #0
}
 800c8dc:	4618      	mov	r0, r3
 800c8de:	3714      	adds	r7, #20
 800c8e0:	46bd      	mov	sp, r7
 800c8e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8e6:	4770      	bx	lr

0800c8e8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800c8e8:	b480      	push	{r7}
 800c8ea:	b085      	sub	sp, #20
 800c8ec:	af00      	add	r7, sp, #0
 800c8ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	695b      	ldr	r3, [r3, #20]
 800c8f4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	699b      	ldr	r3, [r3, #24]
 800c8fa:	68fa      	ldr	r2, [r7, #12]
 800c8fc:	4013      	ands	r3, r2
 800c8fe:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800c900:	68fb      	ldr	r3, [r7, #12]
}
 800c902:	4618      	mov	r0, r3
 800c904:	3714      	adds	r7, #20
 800c906:	46bd      	mov	sp, r7
 800c908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c90c:	4770      	bx	lr

0800c90e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800c90e:	b480      	push	{r7}
 800c910:	b085      	sub	sp, #20
 800c912:	af00      	add	r7, sp, #0
 800c914:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800c91a:	68fb      	ldr	r3, [r7, #12]
 800c91c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c920:	699b      	ldr	r3, [r3, #24]
 800c922:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800c924:	68fb      	ldr	r3, [r7, #12]
 800c926:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c92a:	69db      	ldr	r3, [r3, #28]
 800c92c:	68ba      	ldr	r2, [r7, #8]
 800c92e:	4013      	ands	r3, r2
 800c930:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800c932:	68bb      	ldr	r3, [r7, #8]
 800c934:	0c1b      	lsrs	r3, r3, #16
}
 800c936:	4618      	mov	r0, r3
 800c938:	3714      	adds	r7, #20
 800c93a:	46bd      	mov	sp, r7
 800c93c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c940:	4770      	bx	lr

0800c942 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800c942:	b480      	push	{r7}
 800c944:	b085      	sub	sp, #20
 800c946:	af00      	add	r7, sp, #0
 800c948:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800c94e:	68fb      	ldr	r3, [r7, #12]
 800c950:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c954:	699b      	ldr	r3, [r3, #24]
 800c956:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800c958:	68fb      	ldr	r3, [r7, #12]
 800c95a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c95e:	69db      	ldr	r3, [r3, #28]
 800c960:	68ba      	ldr	r2, [r7, #8]
 800c962:	4013      	ands	r3, r2
 800c964:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800c966:	68bb      	ldr	r3, [r7, #8]
 800c968:	b29b      	uxth	r3, r3
}
 800c96a:	4618      	mov	r0, r3
 800c96c:	3714      	adds	r7, #20
 800c96e:	46bd      	mov	sp, r7
 800c970:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c974:	4770      	bx	lr

0800c976 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800c976:	b480      	push	{r7}
 800c978:	b085      	sub	sp, #20
 800c97a:	af00      	add	r7, sp, #0
 800c97c:	6078      	str	r0, [r7, #4]
 800c97e:	460b      	mov	r3, r1
 800c980:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800c986:	78fb      	ldrb	r3, [r7, #3]
 800c988:	015a      	lsls	r2, r3, #5
 800c98a:	68fb      	ldr	r3, [r7, #12]
 800c98c:	4413      	add	r3, r2
 800c98e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c992:	689b      	ldr	r3, [r3, #8]
 800c994:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800c996:	68fb      	ldr	r3, [r7, #12]
 800c998:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c99c:	695b      	ldr	r3, [r3, #20]
 800c99e:	68ba      	ldr	r2, [r7, #8]
 800c9a0:	4013      	ands	r3, r2
 800c9a2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800c9a4:	68bb      	ldr	r3, [r7, #8]
}
 800c9a6:	4618      	mov	r0, r3
 800c9a8:	3714      	adds	r7, #20
 800c9aa:	46bd      	mov	sp, r7
 800c9ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9b0:	4770      	bx	lr

0800c9b2 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800c9b2:	b480      	push	{r7}
 800c9b4:	b087      	sub	sp, #28
 800c9b6:	af00      	add	r7, sp, #0
 800c9b8:	6078      	str	r0, [r7, #4]
 800c9ba:	460b      	mov	r3, r1
 800c9bc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800c9c2:	697b      	ldr	r3, [r7, #20]
 800c9c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c9c8:	691b      	ldr	r3, [r3, #16]
 800c9ca:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800c9cc:	697b      	ldr	r3, [r7, #20]
 800c9ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c9d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c9d4:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800c9d6:	78fb      	ldrb	r3, [r7, #3]
 800c9d8:	f003 030f 	and.w	r3, r3, #15
 800c9dc:	68fa      	ldr	r2, [r7, #12]
 800c9de:	fa22 f303 	lsr.w	r3, r2, r3
 800c9e2:	01db      	lsls	r3, r3, #7
 800c9e4:	b2db      	uxtb	r3, r3
 800c9e6:	693a      	ldr	r2, [r7, #16]
 800c9e8:	4313      	orrs	r3, r2
 800c9ea:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800c9ec:	78fb      	ldrb	r3, [r7, #3]
 800c9ee:	015a      	lsls	r2, r3, #5
 800c9f0:	697b      	ldr	r3, [r7, #20]
 800c9f2:	4413      	add	r3, r2
 800c9f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c9f8:	689b      	ldr	r3, [r3, #8]
 800c9fa:	693a      	ldr	r2, [r7, #16]
 800c9fc:	4013      	ands	r3, r2
 800c9fe:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800ca00:	68bb      	ldr	r3, [r7, #8]
}
 800ca02:	4618      	mov	r0, r3
 800ca04:	371c      	adds	r7, #28
 800ca06:	46bd      	mov	sp, r7
 800ca08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca0c:	4770      	bx	lr

0800ca0e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800ca0e:	b480      	push	{r7}
 800ca10:	b083      	sub	sp, #12
 800ca12:	af00      	add	r7, sp, #0
 800ca14:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	695b      	ldr	r3, [r3, #20]
 800ca1a:	f003 0301 	and.w	r3, r3, #1
}
 800ca1e:	4618      	mov	r0, r3
 800ca20:	370c      	adds	r7, #12
 800ca22:	46bd      	mov	sp, r7
 800ca24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca28:	4770      	bx	lr

0800ca2a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800ca2a:	b480      	push	{r7}
 800ca2c:	b085      	sub	sp, #20
 800ca2e:	af00      	add	r7, sp, #0
 800ca30:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800ca36:	68fb      	ldr	r3, [r7, #12]
 800ca38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ca3c:	681b      	ldr	r3, [r3, #0]
 800ca3e:	68fa      	ldr	r2, [r7, #12]
 800ca40:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ca44:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800ca48:	f023 0307 	bic.w	r3, r3, #7
 800ca4c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800ca4e:	68fb      	ldr	r3, [r7, #12]
 800ca50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ca54:	685b      	ldr	r3, [r3, #4]
 800ca56:	68fa      	ldr	r2, [r7, #12]
 800ca58:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ca5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ca60:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ca62:	2300      	movs	r3, #0
}
 800ca64:	4618      	mov	r0, r3
 800ca66:	3714      	adds	r7, #20
 800ca68:	46bd      	mov	sp, r7
 800ca6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca6e:	4770      	bx	lr

0800ca70 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800ca70:	b480      	push	{r7}
 800ca72:	b087      	sub	sp, #28
 800ca74:	af00      	add	r7, sp, #0
 800ca76:	60f8      	str	r0, [r7, #12]
 800ca78:	460b      	mov	r3, r1
 800ca7a:	607a      	str	r2, [r7, #4]
 800ca7c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ca7e:	68fb      	ldr	r3, [r7, #12]
 800ca80:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800ca82:	68fb      	ldr	r3, [r7, #12]
 800ca84:	333c      	adds	r3, #60	; 0x3c
 800ca86:	3304      	adds	r3, #4
 800ca88:	681b      	ldr	r3, [r3, #0]
 800ca8a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800ca8c:	693b      	ldr	r3, [r7, #16]
 800ca8e:	4a26      	ldr	r2, [pc, #152]	; (800cb28 <USB_EP0_OutStart+0xb8>)
 800ca90:	4293      	cmp	r3, r2
 800ca92:	d90a      	bls.n	800caaa <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ca94:	697b      	ldr	r3, [r7, #20]
 800ca96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ca9a:	681b      	ldr	r3, [r3, #0]
 800ca9c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800caa0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800caa4:	d101      	bne.n	800caaa <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800caa6:	2300      	movs	r3, #0
 800caa8:	e037      	b.n	800cb1a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800caaa:	697b      	ldr	r3, [r7, #20]
 800caac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cab0:	461a      	mov	r2, r3
 800cab2:	2300      	movs	r3, #0
 800cab4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800cab6:	697b      	ldr	r3, [r7, #20]
 800cab8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cabc:	691b      	ldr	r3, [r3, #16]
 800cabe:	697a      	ldr	r2, [r7, #20]
 800cac0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cac4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800cac8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800caca:	697b      	ldr	r3, [r7, #20]
 800cacc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cad0:	691b      	ldr	r3, [r3, #16]
 800cad2:	697a      	ldr	r2, [r7, #20]
 800cad4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cad8:	f043 0318 	orr.w	r3, r3, #24
 800cadc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800cade:	697b      	ldr	r3, [r7, #20]
 800cae0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cae4:	691b      	ldr	r3, [r3, #16]
 800cae6:	697a      	ldr	r2, [r7, #20]
 800cae8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800caec:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800caf0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800caf2:	7afb      	ldrb	r3, [r7, #11]
 800caf4:	2b01      	cmp	r3, #1
 800caf6:	d10f      	bne.n	800cb18 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800caf8:	697b      	ldr	r3, [r7, #20]
 800cafa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cafe:	461a      	mov	r2, r3
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800cb04:	697b      	ldr	r3, [r7, #20]
 800cb06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cb0a:	681b      	ldr	r3, [r3, #0]
 800cb0c:	697a      	ldr	r2, [r7, #20]
 800cb0e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cb12:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800cb16:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800cb18:	2300      	movs	r3, #0
}
 800cb1a:	4618      	mov	r0, r3
 800cb1c:	371c      	adds	r7, #28
 800cb1e:	46bd      	mov	sp, r7
 800cb20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb24:	4770      	bx	lr
 800cb26:	bf00      	nop
 800cb28:	4f54300a 	.word	0x4f54300a

0800cb2c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800cb2c:	b480      	push	{r7}
 800cb2e:	b085      	sub	sp, #20
 800cb30:	af00      	add	r7, sp, #0
 800cb32:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800cb34:	2300      	movs	r3, #0
 800cb36:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800cb38:	68fb      	ldr	r3, [r7, #12]
 800cb3a:	3301      	adds	r3, #1
 800cb3c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800cb3e:	68fb      	ldr	r3, [r7, #12]
 800cb40:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800cb44:	d901      	bls.n	800cb4a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800cb46:	2303      	movs	r3, #3
 800cb48:	e01b      	b.n	800cb82 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	691b      	ldr	r3, [r3, #16]
 800cb4e:	2b00      	cmp	r3, #0
 800cb50:	daf2      	bge.n	800cb38 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800cb52:	2300      	movs	r3, #0
 800cb54:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	691b      	ldr	r3, [r3, #16]
 800cb5a:	f043 0201 	orr.w	r2, r3, #1
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800cb62:	68fb      	ldr	r3, [r7, #12]
 800cb64:	3301      	adds	r3, #1
 800cb66:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800cb68:	68fb      	ldr	r3, [r7, #12]
 800cb6a:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800cb6e:	d901      	bls.n	800cb74 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800cb70:	2303      	movs	r3, #3
 800cb72:	e006      	b.n	800cb82 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	691b      	ldr	r3, [r3, #16]
 800cb78:	f003 0301 	and.w	r3, r3, #1
 800cb7c:	2b01      	cmp	r3, #1
 800cb7e:	d0f0      	beq.n	800cb62 <USB_CoreReset+0x36>

  return HAL_OK;
 800cb80:	2300      	movs	r3, #0
}
 800cb82:	4618      	mov	r0, r3
 800cb84:	3714      	adds	r7, #20
 800cb86:	46bd      	mov	sp, r7
 800cb88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb8c:	4770      	bx	lr
	...

0800cb90 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800cb90:	b580      	push	{r7, lr}
 800cb92:	b084      	sub	sp, #16
 800cb94:	af00      	add	r7, sp, #0
 800cb96:	4603      	mov	r3, r0
 800cb98:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800cb9a:	79fb      	ldrb	r3, [r7, #7]
 800cb9c:	4a08      	ldr	r2, [pc, #32]	; (800cbc0 <disk_status+0x30>)
 800cb9e:	009b      	lsls	r3, r3, #2
 800cba0:	4413      	add	r3, r2
 800cba2:	685b      	ldr	r3, [r3, #4]
 800cba4:	685b      	ldr	r3, [r3, #4]
 800cba6:	79fa      	ldrb	r2, [r7, #7]
 800cba8:	4905      	ldr	r1, [pc, #20]	; (800cbc0 <disk_status+0x30>)
 800cbaa:	440a      	add	r2, r1
 800cbac:	7b12      	ldrb	r2, [r2, #12]
 800cbae:	4610      	mov	r0, r2
 800cbb0:	4798      	blx	r3
 800cbb2:	4603      	mov	r3, r0
 800cbb4:	73fb      	strb	r3, [r7, #15]
  return stat;
 800cbb6:	7bfb      	ldrb	r3, [r7, #15]
}
 800cbb8:	4618      	mov	r0, r3
 800cbba:	3710      	adds	r7, #16
 800cbbc:	46bd      	mov	sp, r7
 800cbbe:	bd80      	pop	{r7, pc}
 800cbc0:	2000732c 	.word	0x2000732c

0800cbc4 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800cbc4:	b580      	push	{r7, lr}
 800cbc6:	b084      	sub	sp, #16
 800cbc8:	af00      	add	r7, sp, #0
 800cbca:	4603      	mov	r3, r0
 800cbcc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800cbce:	2300      	movs	r3, #0
 800cbd0:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800cbd2:	79fb      	ldrb	r3, [r7, #7]
 800cbd4:	4a0d      	ldr	r2, [pc, #52]	; (800cc0c <disk_initialize+0x48>)
 800cbd6:	5cd3      	ldrb	r3, [r2, r3]
 800cbd8:	2b00      	cmp	r3, #0
 800cbda:	d111      	bne.n	800cc00 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800cbdc:	79fb      	ldrb	r3, [r7, #7]
 800cbde:	4a0b      	ldr	r2, [pc, #44]	; (800cc0c <disk_initialize+0x48>)
 800cbe0:	2101      	movs	r1, #1
 800cbe2:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800cbe4:	79fb      	ldrb	r3, [r7, #7]
 800cbe6:	4a09      	ldr	r2, [pc, #36]	; (800cc0c <disk_initialize+0x48>)
 800cbe8:	009b      	lsls	r3, r3, #2
 800cbea:	4413      	add	r3, r2
 800cbec:	685b      	ldr	r3, [r3, #4]
 800cbee:	681b      	ldr	r3, [r3, #0]
 800cbf0:	79fa      	ldrb	r2, [r7, #7]
 800cbf2:	4906      	ldr	r1, [pc, #24]	; (800cc0c <disk_initialize+0x48>)
 800cbf4:	440a      	add	r2, r1
 800cbf6:	7b12      	ldrb	r2, [r2, #12]
 800cbf8:	4610      	mov	r0, r2
 800cbfa:	4798      	blx	r3
 800cbfc:	4603      	mov	r3, r0
 800cbfe:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800cc00:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc02:	4618      	mov	r0, r3
 800cc04:	3710      	adds	r7, #16
 800cc06:	46bd      	mov	sp, r7
 800cc08:	bd80      	pop	{r7, pc}
 800cc0a:	bf00      	nop
 800cc0c:	2000732c 	.word	0x2000732c

0800cc10 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800cc10:	b590      	push	{r4, r7, lr}
 800cc12:	b087      	sub	sp, #28
 800cc14:	af00      	add	r7, sp, #0
 800cc16:	60b9      	str	r1, [r7, #8]
 800cc18:	607a      	str	r2, [r7, #4]
 800cc1a:	603b      	str	r3, [r7, #0]
 800cc1c:	4603      	mov	r3, r0
 800cc1e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800cc20:	7bfb      	ldrb	r3, [r7, #15]
 800cc22:	4a0a      	ldr	r2, [pc, #40]	; (800cc4c <disk_read+0x3c>)
 800cc24:	009b      	lsls	r3, r3, #2
 800cc26:	4413      	add	r3, r2
 800cc28:	685b      	ldr	r3, [r3, #4]
 800cc2a:	689c      	ldr	r4, [r3, #8]
 800cc2c:	7bfb      	ldrb	r3, [r7, #15]
 800cc2e:	4a07      	ldr	r2, [pc, #28]	; (800cc4c <disk_read+0x3c>)
 800cc30:	4413      	add	r3, r2
 800cc32:	7b18      	ldrb	r0, [r3, #12]
 800cc34:	683b      	ldr	r3, [r7, #0]
 800cc36:	687a      	ldr	r2, [r7, #4]
 800cc38:	68b9      	ldr	r1, [r7, #8]
 800cc3a:	47a0      	blx	r4
 800cc3c:	4603      	mov	r3, r0
 800cc3e:	75fb      	strb	r3, [r7, #23]
  return res;
 800cc40:	7dfb      	ldrb	r3, [r7, #23]
}
 800cc42:	4618      	mov	r0, r3
 800cc44:	371c      	adds	r7, #28
 800cc46:	46bd      	mov	sp, r7
 800cc48:	bd90      	pop	{r4, r7, pc}
 800cc4a:	bf00      	nop
 800cc4c:	2000732c 	.word	0x2000732c

0800cc50 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800cc50:	b590      	push	{r4, r7, lr}
 800cc52:	b087      	sub	sp, #28
 800cc54:	af00      	add	r7, sp, #0
 800cc56:	60b9      	str	r1, [r7, #8]
 800cc58:	607a      	str	r2, [r7, #4]
 800cc5a:	603b      	str	r3, [r7, #0]
 800cc5c:	4603      	mov	r3, r0
 800cc5e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800cc60:	7bfb      	ldrb	r3, [r7, #15]
 800cc62:	4a0a      	ldr	r2, [pc, #40]	; (800cc8c <disk_write+0x3c>)
 800cc64:	009b      	lsls	r3, r3, #2
 800cc66:	4413      	add	r3, r2
 800cc68:	685b      	ldr	r3, [r3, #4]
 800cc6a:	68dc      	ldr	r4, [r3, #12]
 800cc6c:	7bfb      	ldrb	r3, [r7, #15]
 800cc6e:	4a07      	ldr	r2, [pc, #28]	; (800cc8c <disk_write+0x3c>)
 800cc70:	4413      	add	r3, r2
 800cc72:	7b18      	ldrb	r0, [r3, #12]
 800cc74:	683b      	ldr	r3, [r7, #0]
 800cc76:	687a      	ldr	r2, [r7, #4]
 800cc78:	68b9      	ldr	r1, [r7, #8]
 800cc7a:	47a0      	blx	r4
 800cc7c:	4603      	mov	r3, r0
 800cc7e:	75fb      	strb	r3, [r7, #23]
  return res;
 800cc80:	7dfb      	ldrb	r3, [r7, #23]
}
 800cc82:	4618      	mov	r0, r3
 800cc84:	371c      	adds	r7, #28
 800cc86:	46bd      	mov	sp, r7
 800cc88:	bd90      	pop	{r4, r7, pc}
 800cc8a:	bf00      	nop
 800cc8c:	2000732c 	.word	0x2000732c

0800cc90 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800cc90:	b580      	push	{r7, lr}
 800cc92:	b084      	sub	sp, #16
 800cc94:	af00      	add	r7, sp, #0
 800cc96:	4603      	mov	r3, r0
 800cc98:	603a      	str	r2, [r7, #0]
 800cc9a:	71fb      	strb	r3, [r7, #7]
 800cc9c:	460b      	mov	r3, r1
 800cc9e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800cca0:	79fb      	ldrb	r3, [r7, #7]
 800cca2:	4a09      	ldr	r2, [pc, #36]	; (800ccc8 <disk_ioctl+0x38>)
 800cca4:	009b      	lsls	r3, r3, #2
 800cca6:	4413      	add	r3, r2
 800cca8:	685b      	ldr	r3, [r3, #4]
 800ccaa:	691b      	ldr	r3, [r3, #16]
 800ccac:	79fa      	ldrb	r2, [r7, #7]
 800ccae:	4906      	ldr	r1, [pc, #24]	; (800ccc8 <disk_ioctl+0x38>)
 800ccb0:	440a      	add	r2, r1
 800ccb2:	7b10      	ldrb	r0, [r2, #12]
 800ccb4:	79b9      	ldrb	r1, [r7, #6]
 800ccb6:	683a      	ldr	r2, [r7, #0]
 800ccb8:	4798      	blx	r3
 800ccba:	4603      	mov	r3, r0
 800ccbc:	73fb      	strb	r3, [r7, #15]
  return res;
 800ccbe:	7bfb      	ldrb	r3, [r7, #15]
}
 800ccc0:	4618      	mov	r0, r3
 800ccc2:	3710      	adds	r7, #16
 800ccc4:	46bd      	mov	sp, r7
 800ccc6:	bd80      	pop	{r7, pc}
 800ccc8:	2000732c 	.word	0x2000732c

0800cccc <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
__weak DWORD get_fattime (void)
{
 800cccc:	b480      	push	{r7}
 800ccce:	af00      	add	r7, sp, #0
  return 0;
 800ccd0:	2300      	movs	r3, #0
}
 800ccd2:	4618      	mov	r0, r3
 800ccd4:	46bd      	mov	sp, r7
 800ccd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccda:	4770      	bx	lr

0800ccdc <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800ccdc:	b480      	push	{r7}
 800ccde:	b085      	sub	sp, #20
 800cce0:	af00      	add	r7, sp, #0
 800cce2:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	3301      	adds	r3, #1
 800cce8:	781b      	ldrb	r3, [r3, #0]
 800ccea:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800ccec:	89fb      	ldrh	r3, [r7, #14]
 800ccee:	021b      	lsls	r3, r3, #8
 800ccf0:	b21a      	sxth	r2, r3
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	781b      	ldrb	r3, [r3, #0]
 800ccf6:	b21b      	sxth	r3, r3
 800ccf8:	4313      	orrs	r3, r2
 800ccfa:	b21b      	sxth	r3, r3
 800ccfc:	81fb      	strh	r3, [r7, #14]
	return rv;
 800ccfe:	89fb      	ldrh	r3, [r7, #14]
}
 800cd00:	4618      	mov	r0, r3
 800cd02:	3714      	adds	r7, #20
 800cd04:	46bd      	mov	sp, r7
 800cd06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd0a:	4770      	bx	lr

0800cd0c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800cd0c:	b480      	push	{r7}
 800cd0e:	b085      	sub	sp, #20
 800cd10:	af00      	add	r7, sp, #0
 800cd12:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	3303      	adds	r3, #3
 800cd18:	781b      	ldrb	r3, [r3, #0]
 800cd1a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800cd1c:	68fb      	ldr	r3, [r7, #12]
 800cd1e:	021b      	lsls	r3, r3, #8
 800cd20:	687a      	ldr	r2, [r7, #4]
 800cd22:	3202      	adds	r2, #2
 800cd24:	7812      	ldrb	r2, [r2, #0]
 800cd26:	4313      	orrs	r3, r2
 800cd28:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800cd2a:	68fb      	ldr	r3, [r7, #12]
 800cd2c:	021b      	lsls	r3, r3, #8
 800cd2e:	687a      	ldr	r2, [r7, #4]
 800cd30:	3201      	adds	r2, #1
 800cd32:	7812      	ldrb	r2, [r2, #0]
 800cd34:	4313      	orrs	r3, r2
 800cd36:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800cd38:	68fb      	ldr	r3, [r7, #12]
 800cd3a:	021b      	lsls	r3, r3, #8
 800cd3c:	687a      	ldr	r2, [r7, #4]
 800cd3e:	7812      	ldrb	r2, [r2, #0]
 800cd40:	4313      	orrs	r3, r2
 800cd42:	60fb      	str	r3, [r7, #12]
	return rv;
 800cd44:	68fb      	ldr	r3, [r7, #12]
}
 800cd46:	4618      	mov	r0, r3
 800cd48:	3714      	adds	r7, #20
 800cd4a:	46bd      	mov	sp, r7
 800cd4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd50:	4770      	bx	lr

0800cd52 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800cd52:	b480      	push	{r7}
 800cd54:	b083      	sub	sp, #12
 800cd56:	af00      	add	r7, sp, #0
 800cd58:	6078      	str	r0, [r7, #4]
 800cd5a:	460b      	mov	r3, r1
 800cd5c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	1c5a      	adds	r2, r3, #1
 800cd62:	607a      	str	r2, [r7, #4]
 800cd64:	887a      	ldrh	r2, [r7, #2]
 800cd66:	b2d2      	uxtb	r2, r2
 800cd68:	701a      	strb	r2, [r3, #0]
 800cd6a:	887b      	ldrh	r3, [r7, #2]
 800cd6c:	0a1b      	lsrs	r3, r3, #8
 800cd6e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	1c5a      	adds	r2, r3, #1
 800cd74:	607a      	str	r2, [r7, #4]
 800cd76:	887a      	ldrh	r2, [r7, #2]
 800cd78:	b2d2      	uxtb	r2, r2
 800cd7a:	701a      	strb	r2, [r3, #0]
}
 800cd7c:	bf00      	nop
 800cd7e:	370c      	adds	r7, #12
 800cd80:	46bd      	mov	sp, r7
 800cd82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd86:	4770      	bx	lr

0800cd88 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800cd88:	b480      	push	{r7}
 800cd8a:	b083      	sub	sp, #12
 800cd8c:	af00      	add	r7, sp, #0
 800cd8e:	6078      	str	r0, [r7, #4]
 800cd90:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	1c5a      	adds	r2, r3, #1
 800cd96:	607a      	str	r2, [r7, #4]
 800cd98:	683a      	ldr	r2, [r7, #0]
 800cd9a:	b2d2      	uxtb	r2, r2
 800cd9c:	701a      	strb	r2, [r3, #0]
 800cd9e:	683b      	ldr	r3, [r7, #0]
 800cda0:	0a1b      	lsrs	r3, r3, #8
 800cda2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	1c5a      	adds	r2, r3, #1
 800cda8:	607a      	str	r2, [r7, #4]
 800cdaa:	683a      	ldr	r2, [r7, #0]
 800cdac:	b2d2      	uxtb	r2, r2
 800cdae:	701a      	strb	r2, [r3, #0]
 800cdb0:	683b      	ldr	r3, [r7, #0]
 800cdb2:	0a1b      	lsrs	r3, r3, #8
 800cdb4:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	1c5a      	adds	r2, r3, #1
 800cdba:	607a      	str	r2, [r7, #4]
 800cdbc:	683a      	ldr	r2, [r7, #0]
 800cdbe:	b2d2      	uxtb	r2, r2
 800cdc0:	701a      	strb	r2, [r3, #0]
 800cdc2:	683b      	ldr	r3, [r7, #0]
 800cdc4:	0a1b      	lsrs	r3, r3, #8
 800cdc6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	1c5a      	adds	r2, r3, #1
 800cdcc:	607a      	str	r2, [r7, #4]
 800cdce:	683a      	ldr	r2, [r7, #0]
 800cdd0:	b2d2      	uxtb	r2, r2
 800cdd2:	701a      	strb	r2, [r3, #0]
}
 800cdd4:	bf00      	nop
 800cdd6:	370c      	adds	r7, #12
 800cdd8:	46bd      	mov	sp, r7
 800cdda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdde:	4770      	bx	lr

0800cde0 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800cde0:	b480      	push	{r7}
 800cde2:	b087      	sub	sp, #28
 800cde4:	af00      	add	r7, sp, #0
 800cde6:	60f8      	str	r0, [r7, #12]
 800cde8:	60b9      	str	r1, [r7, #8]
 800cdea:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800cdec:	68fb      	ldr	r3, [r7, #12]
 800cdee:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800cdf0:	68bb      	ldr	r3, [r7, #8]
 800cdf2:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	2b00      	cmp	r3, #0
 800cdf8:	d00d      	beq.n	800ce16 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800cdfa:	693a      	ldr	r2, [r7, #16]
 800cdfc:	1c53      	adds	r3, r2, #1
 800cdfe:	613b      	str	r3, [r7, #16]
 800ce00:	697b      	ldr	r3, [r7, #20]
 800ce02:	1c59      	adds	r1, r3, #1
 800ce04:	6179      	str	r1, [r7, #20]
 800ce06:	7812      	ldrb	r2, [r2, #0]
 800ce08:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	3b01      	subs	r3, #1
 800ce0e:	607b      	str	r3, [r7, #4]
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	2b00      	cmp	r3, #0
 800ce14:	d1f1      	bne.n	800cdfa <mem_cpy+0x1a>
	}
}
 800ce16:	bf00      	nop
 800ce18:	371c      	adds	r7, #28
 800ce1a:	46bd      	mov	sp, r7
 800ce1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce20:	4770      	bx	lr

0800ce22 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800ce22:	b480      	push	{r7}
 800ce24:	b087      	sub	sp, #28
 800ce26:	af00      	add	r7, sp, #0
 800ce28:	60f8      	str	r0, [r7, #12]
 800ce2a:	60b9      	str	r1, [r7, #8]
 800ce2c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800ce2e:	68fb      	ldr	r3, [r7, #12]
 800ce30:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800ce32:	697b      	ldr	r3, [r7, #20]
 800ce34:	1c5a      	adds	r2, r3, #1
 800ce36:	617a      	str	r2, [r7, #20]
 800ce38:	68ba      	ldr	r2, [r7, #8]
 800ce3a:	b2d2      	uxtb	r2, r2
 800ce3c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	3b01      	subs	r3, #1
 800ce42:	607b      	str	r3, [r7, #4]
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	2b00      	cmp	r3, #0
 800ce48:	d1f3      	bne.n	800ce32 <mem_set+0x10>
}
 800ce4a:	bf00      	nop
 800ce4c:	bf00      	nop
 800ce4e:	371c      	adds	r7, #28
 800ce50:	46bd      	mov	sp, r7
 800ce52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce56:	4770      	bx	lr

0800ce58 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800ce58:	b480      	push	{r7}
 800ce5a:	b089      	sub	sp, #36	; 0x24
 800ce5c:	af00      	add	r7, sp, #0
 800ce5e:	60f8      	str	r0, [r7, #12]
 800ce60:	60b9      	str	r1, [r7, #8]
 800ce62:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800ce64:	68fb      	ldr	r3, [r7, #12]
 800ce66:	61fb      	str	r3, [r7, #28]
 800ce68:	68bb      	ldr	r3, [r7, #8]
 800ce6a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800ce6c:	2300      	movs	r3, #0
 800ce6e:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800ce70:	69fb      	ldr	r3, [r7, #28]
 800ce72:	1c5a      	adds	r2, r3, #1
 800ce74:	61fa      	str	r2, [r7, #28]
 800ce76:	781b      	ldrb	r3, [r3, #0]
 800ce78:	4619      	mov	r1, r3
 800ce7a:	69bb      	ldr	r3, [r7, #24]
 800ce7c:	1c5a      	adds	r2, r3, #1
 800ce7e:	61ba      	str	r2, [r7, #24]
 800ce80:	781b      	ldrb	r3, [r3, #0]
 800ce82:	1acb      	subs	r3, r1, r3
 800ce84:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	3b01      	subs	r3, #1
 800ce8a:	607b      	str	r3, [r7, #4]
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	2b00      	cmp	r3, #0
 800ce90:	d002      	beq.n	800ce98 <mem_cmp+0x40>
 800ce92:	697b      	ldr	r3, [r7, #20]
 800ce94:	2b00      	cmp	r3, #0
 800ce96:	d0eb      	beq.n	800ce70 <mem_cmp+0x18>

	return r;
 800ce98:	697b      	ldr	r3, [r7, #20]
}
 800ce9a:	4618      	mov	r0, r3
 800ce9c:	3724      	adds	r7, #36	; 0x24
 800ce9e:	46bd      	mov	sp, r7
 800cea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cea4:	4770      	bx	lr

0800cea6 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800cea6:	b480      	push	{r7}
 800cea8:	b083      	sub	sp, #12
 800ceaa:	af00      	add	r7, sp, #0
 800ceac:	6078      	str	r0, [r7, #4]
 800ceae:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800ceb0:	e002      	b.n	800ceb8 <chk_chr+0x12>
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	3301      	adds	r3, #1
 800ceb6:	607b      	str	r3, [r7, #4]
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	781b      	ldrb	r3, [r3, #0]
 800cebc:	2b00      	cmp	r3, #0
 800cebe:	d005      	beq.n	800cecc <chk_chr+0x26>
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	781b      	ldrb	r3, [r3, #0]
 800cec4:	461a      	mov	r2, r3
 800cec6:	683b      	ldr	r3, [r7, #0]
 800cec8:	4293      	cmp	r3, r2
 800ceca:	d1f2      	bne.n	800ceb2 <chk_chr+0xc>
	return *str;
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	781b      	ldrb	r3, [r3, #0]
}
 800ced0:	4618      	mov	r0, r3
 800ced2:	370c      	adds	r7, #12
 800ced4:	46bd      	mov	sp, r7
 800ced6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceda:	4770      	bx	lr

0800cedc <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800cedc:	b480      	push	{r7}
 800cede:	b085      	sub	sp, #20
 800cee0:	af00      	add	r7, sp, #0
 800cee2:	6078      	str	r0, [r7, #4]
 800cee4:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800cee6:	2300      	movs	r3, #0
 800cee8:	60bb      	str	r3, [r7, #8]
 800ceea:	68bb      	ldr	r3, [r7, #8]
 800ceec:	60fb      	str	r3, [r7, #12]
 800ceee:	e029      	b.n	800cf44 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800cef0:	4a27      	ldr	r2, [pc, #156]	; (800cf90 <chk_lock+0xb4>)
 800cef2:	68fb      	ldr	r3, [r7, #12]
 800cef4:	011b      	lsls	r3, r3, #4
 800cef6:	4413      	add	r3, r2
 800cef8:	681b      	ldr	r3, [r3, #0]
 800cefa:	2b00      	cmp	r3, #0
 800cefc:	d01d      	beq.n	800cf3a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800cefe:	4a24      	ldr	r2, [pc, #144]	; (800cf90 <chk_lock+0xb4>)
 800cf00:	68fb      	ldr	r3, [r7, #12]
 800cf02:	011b      	lsls	r3, r3, #4
 800cf04:	4413      	add	r3, r2
 800cf06:	681a      	ldr	r2, [r3, #0]
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	681b      	ldr	r3, [r3, #0]
 800cf0c:	429a      	cmp	r2, r3
 800cf0e:	d116      	bne.n	800cf3e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800cf10:	4a1f      	ldr	r2, [pc, #124]	; (800cf90 <chk_lock+0xb4>)
 800cf12:	68fb      	ldr	r3, [r7, #12]
 800cf14:	011b      	lsls	r3, r3, #4
 800cf16:	4413      	add	r3, r2
 800cf18:	3304      	adds	r3, #4
 800cf1a:	681a      	ldr	r2, [r3, #0]
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800cf20:	429a      	cmp	r2, r3
 800cf22:	d10c      	bne.n	800cf3e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800cf24:	4a1a      	ldr	r2, [pc, #104]	; (800cf90 <chk_lock+0xb4>)
 800cf26:	68fb      	ldr	r3, [r7, #12]
 800cf28:	011b      	lsls	r3, r3, #4
 800cf2a:	4413      	add	r3, r2
 800cf2c:	3308      	adds	r3, #8
 800cf2e:	681a      	ldr	r2, [r3, #0]
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800cf34:	429a      	cmp	r2, r3
 800cf36:	d102      	bne.n	800cf3e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800cf38:	e007      	b.n	800cf4a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800cf3a:	2301      	movs	r3, #1
 800cf3c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800cf3e:	68fb      	ldr	r3, [r7, #12]
 800cf40:	3301      	adds	r3, #1
 800cf42:	60fb      	str	r3, [r7, #12]
 800cf44:	68fb      	ldr	r3, [r7, #12]
 800cf46:	2b01      	cmp	r3, #1
 800cf48:	d9d2      	bls.n	800cef0 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800cf4a:	68fb      	ldr	r3, [r7, #12]
 800cf4c:	2b02      	cmp	r3, #2
 800cf4e:	d109      	bne.n	800cf64 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800cf50:	68bb      	ldr	r3, [r7, #8]
 800cf52:	2b00      	cmp	r3, #0
 800cf54:	d102      	bne.n	800cf5c <chk_lock+0x80>
 800cf56:	683b      	ldr	r3, [r7, #0]
 800cf58:	2b02      	cmp	r3, #2
 800cf5a:	d101      	bne.n	800cf60 <chk_lock+0x84>
 800cf5c:	2300      	movs	r3, #0
 800cf5e:	e010      	b.n	800cf82 <chk_lock+0xa6>
 800cf60:	2312      	movs	r3, #18
 800cf62:	e00e      	b.n	800cf82 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800cf64:	683b      	ldr	r3, [r7, #0]
 800cf66:	2b00      	cmp	r3, #0
 800cf68:	d108      	bne.n	800cf7c <chk_lock+0xa0>
 800cf6a:	4a09      	ldr	r2, [pc, #36]	; (800cf90 <chk_lock+0xb4>)
 800cf6c:	68fb      	ldr	r3, [r7, #12]
 800cf6e:	011b      	lsls	r3, r3, #4
 800cf70:	4413      	add	r3, r2
 800cf72:	330c      	adds	r3, #12
 800cf74:	881b      	ldrh	r3, [r3, #0]
 800cf76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cf7a:	d101      	bne.n	800cf80 <chk_lock+0xa4>
 800cf7c:	2310      	movs	r3, #16
 800cf7e:	e000      	b.n	800cf82 <chk_lock+0xa6>
 800cf80:	2300      	movs	r3, #0
}
 800cf82:	4618      	mov	r0, r3
 800cf84:	3714      	adds	r7, #20
 800cf86:	46bd      	mov	sp, r7
 800cf88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf8c:	4770      	bx	lr
 800cf8e:	bf00      	nop
 800cf90:	2000730c 	.word	0x2000730c

0800cf94 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800cf94:	b480      	push	{r7}
 800cf96:	b083      	sub	sp, #12
 800cf98:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800cf9a:	2300      	movs	r3, #0
 800cf9c:	607b      	str	r3, [r7, #4]
 800cf9e:	e002      	b.n	800cfa6 <enq_lock+0x12>
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	3301      	adds	r3, #1
 800cfa4:	607b      	str	r3, [r7, #4]
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	2b01      	cmp	r3, #1
 800cfaa:	d806      	bhi.n	800cfba <enq_lock+0x26>
 800cfac:	4a09      	ldr	r2, [pc, #36]	; (800cfd4 <enq_lock+0x40>)
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	011b      	lsls	r3, r3, #4
 800cfb2:	4413      	add	r3, r2
 800cfb4:	681b      	ldr	r3, [r3, #0]
 800cfb6:	2b00      	cmp	r3, #0
 800cfb8:	d1f2      	bne.n	800cfa0 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	2b02      	cmp	r3, #2
 800cfbe:	bf14      	ite	ne
 800cfc0:	2301      	movne	r3, #1
 800cfc2:	2300      	moveq	r3, #0
 800cfc4:	b2db      	uxtb	r3, r3
}
 800cfc6:	4618      	mov	r0, r3
 800cfc8:	370c      	adds	r7, #12
 800cfca:	46bd      	mov	sp, r7
 800cfcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfd0:	4770      	bx	lr
 800cfd2:	bf00      	nop
 800cfd4:	2000730c 	.word	0x2000730c

0800cfd8 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800cfd8:	b480      	push	{r7}
 800cfda:	b085      	sub	sp, #20
 800cfdc:	af00      	add	r7, sp, #0
 800cfde:	6078      	str	r0, [r7, #4]
 800cfe0:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800cfe2:	2300      	movs	r3, #0
 800cfe4:	60fb      	str	r3, [r7, #12]
 800cfe6:	e01f      	b.n	800d028 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800cfe8:	4a41      	ldr	r2, [pc, #260]	; (800d0f0 <inc_lock+0x118>)
 800cfea:	68fb      	ldr	r3, [r7, #12]
 800cfec:	011b      	lsls	r3, r3, #4
 800cfee:	4413      	add	r3, r2
 800cff0:	681a      	ldr	r2, [r3, #0]
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	681b      	ldr	r3, [r3, #0]
 800cff6:	429a      	cmp	r2, r3
 800cff8:	d113      	bne.n	800d022 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800cffa:	4a3d      	ldr	r2, [pc, #244]	; (800d0f0 <inc_lock+0x118>)
 800cffc:	68fb      	ldr	r3, [r7, #12]
 800cffe:	011b      	lsls	r3, r3, #4
 800d000:	4413      	add	r3, r2
 800d002:	3304      	adds	r3, #4
 800d004:	681a      	ldr	r2, [r3, #0]
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800d00a:	429a      	cmp	r2, r3
 800d00c:	d109      	bne.n	800d022 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800d00e:	4a38      	ldr	r2, [pc, #224]	; (800d0f0 <inc_lock+0x118>)
 800d010:	68fb      	ldr	r3, [r7, #12]
 800d012:	011b      	lsls	r3, r3, #4
 800d014:	4413      	add	r3, r2
 800d016:	3308      	adds	r3, #8
 800d018:	681a      	ldr	r2, [r3, #0]
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800d01e:	429a      	cmp	r2, r3
 800d020:	d006      	beq.n	800d030 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800d022:	68fb      	ldr	r3, [r7, #12]
 800d024:	3301      	adds	r3, #1
 800d026:	60fb      	str	r3, [r7, #12]
 800d028:	68fb      	ldr	r3, [r7, #12]
 800d02a:	2b01      	cmp	r3, #1
 800d02c:	d9dc      	bls.n	800cfe8 <inc_lock+0x10>
 800d02e:	e000      	b.n	800d032 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800d030:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800d032:	68fb      	ldr	r3, [r7, #12]
 800d034:	2b02      	cmp	r3, #2
 800d036:	d132      	bne.n	800d09e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800d038:	2300      	movs	r3, #0
 800d03a:	60fb      	str	r3, [r7, #12]
 800d03c:	e002      	b.n	800d044 <inc_lock+0x6c>
 800d03e:	68fb      	ldr	r3, [r7, #12]
 800d040:	3301      	adds	r3, #1
 800d042:	60fb      	str	r3, [r7, #12]
 800d044:	68fb      	ldr	r3, [r7, #12]
 800d046:	2b01      	cmp	r3, #1
 800d048:	d806      	bhi.n	800d058 <inc_lock+0x80>
 800d04a:	4a29      	ldr	r2, [pc, #164]	; (800d0f0 <inc_lock+0x118>)
 800d04c:	68fb      	ldr	r3, [r7, #12]
 800d04e:	011b      	lsls	r3, r3, #4
 800d050:	4413      	add	r3, r2
 800d052:	681b      	ldr	r3, [r3, #0]
 800d054:	2b00      	cmp	r3, #0
 800d056:	d1f2      	bne.n	800d03e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800d058:	68fb      	ldr	r3, [r7, #12]
 800d05a:	2b02      	cmp	r3, #2
 800d05c:	d101      	bne.n	800d062 <inc_lock+0x8a>
 800d05e:	2300      	movs	r3, #0
 800d060:	e040      	b.n	800d0e4 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	681a      	ldr	r2, [r3, #0]
 800d066:	4922      	ldr	r1, [pc, #136]	; (800d0f0 <inc_lock+0x118>)
 800d068:	68fb      	ldr	r3, [r7, #12]
 800d06a:	011b      	lsls	r3, r3, #4
 800d06c:	440b      	add	r3, r1
 800d06e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	689a      	ldr	r2, [r3, #8]
 800d074:	491e      	ldr	r1, [pc, #120]	; (800d0f0 <inc_lock+0x118>)
 800d076:	68fb      	ldr	r3, [r7, #12]
 800d078:	011b      	lsls	r3, r3, #4
 800d07a:	440b      	add	r3, r1
 800d07c:	3304      	adds	r3, #4
 800d07e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	695a      	ldr	r2, [r3, #20]
 800d084:	491a      	ldr	r1, [pc, #104]	; (800d0f0 <inc_lock+0x118>)
 800d086:	68fb      	ldr	r3, [r7, #12]
 800d088:	011b      	lsls	r3, r3, #4
 800d08a:	440b      	add	r3, r1
 800d08c:	3308      	adds	r3, #8
 800d08e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800d090:	4a17      	ldr	r2, [pc, #92]	; (800d0f0 <inc_lock+0x118>)
 800d092:	68fb      	ldr	r3, [r7, #12]
 800d094:	011b      	lsls	r3, r3, #4
 800d096:	4413      	add	r3, r2
 800d098:	330c      	adds	r3, #12
 800d09a:	2200      	movs	r2, #0
 800d09c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800d09e:	683b      	ldr	r3, [r7, #0]
 800d0a0:	2b00      	cmp	r3, #0
 800d0a2:	d009      	beq.n	800d0b8 <inc_lock+0xe0>
 800d0a4:	4a12      	ldr	r2, [pc, #72]	; (800d0f0 <inc_lock+0x118>)
 800d0a6:	68fb      	ldr	r3, [r7, #12]
 800d0a8:	011b      	lsls	r3, r3, #4
 800d0aa:	4413      	add	r3, r2
 800d0ac:	330c      	adds	r3, #12
 800d0ae:	881b      	ldrh	r3, [r3, #0]
 800d0b0:	2b00      	cmp	r3, #0
 800d0b2:	d001      	beq.n	800d0b8 <inc_lock+0xe0>
 800d0b4:	2300      	movs	r3, #0
 800d0b6:	e015      	b.n	800d0e4 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800d0b8:	683b      	ldr	r3, [r7, #0]
 800d0ba:	2b00      	cmp	r3, #0
 800d0bc:	d108      	bne.n	800d0d0 <inc_lock+0xf8>
 800d0be:	4a0c      	ldr	r2, [pc, #48]	; (800d0f0 <inc_lock+0x118>)
 800d0c0:	68fb      	ldr	r3, [r7, #12]
 800d0c2:	011b      	lsls	r3, r3, #4
 800d0c4:	4413      	add	r3, r2
 800d0c6:	330c      	adds	r3, #12
 800d0c8:	881b      	ldrh	r3, [r3, #0]
 800d0ca:	3301      	adds	r3, #1
 800d0cc:	b29a      	uxth	r2, r3
 800d0ce:	e001      	b.n	800d0d4 <inc_lock+0xfc>
 800d0d0:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d0d4:	4906      	ldr	r1, [pc, #24]	; (800d0f0 <inc_lock+0x118>)
 800d0d6:	68fb      	ldr	r3, [r7, #12]
 800d0d8:	011b      	lsls	r3, r3, #4
 800d0da:	440b      	add	r3, r1
 800d0dc:	330c      	adds	r3, #12
 800d0de:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800d0e0:	68fb      	ldr	r3, [r7, #12]
 800d0e2:	3301      	adds	r3, #1
}
 800d0e4:	4618      	mov	r0, r3
 800d0e6:	3714      	adds	r7, #20
 800d0e8:	46bd      	mov	sp, r7
 800d0ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0ee:	4770      	bx	lr
 800d0f0:	2000730c 	.word	0x2000730c

0800d0f4 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800d0f4:	b480      	push	{r7}
 800d0f6:	b085      	sub	sp, #20
 800d0f8:	af00      	add	r7, sp, #0
 800d0fa:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	3b01      	subs	r3, #1
 800d100:	607b      	str	r3, [r7, #4]
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	2b01      	cmp	r3, #1
 800d106:	d825      	bhi.n	800d154 <dec_lock+0x60>
		n = Files[i].ctr;
 800d108:	4a17      	ldr	r2, [pc, #92]	; (800d168 <dec_lock+0x74>)
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	011b      	lsls	r3, r3, #4
 800d10e:	4413      	add	r3, r2
 800d110:	330c      	adds	r3, #12
 800d112:	881b      	ldrh	r3, [r3, #0]
 800d114:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800d116:	89fb      	ldrh	r3, [r7, #14]
 800d118:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d11c:	d101      	bne.n	800d122 <dec_lock+0x2e>
 800d11e:	2300      	movs	r3, #0
 800d120:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800d122:	89fb      	ldrh	r3, [r7, #14]
 800d124:	2b00      	cmp	r3, #0
 800d126:	d002      	beq.n	800d12e <dec_lock+0x3a>
 800d128:	89fb      	ldrh	r3, [r7, #14]
 800d12a:	3b01      	subs	r3, #1
 800d12c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800d12e:	4a0e      	ldr	r2, [pc, #56]	; (800d168 <dec_lock+0x74>)
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	011b      	lsls	r3, r3, #4
 800d134:	4413      	add	r3, r2
 800d136:	330c      	adds	r3, #12
 800d138:	89fa      	ldrh	r2, [r7, #14]
 800d13a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800d13c:	89fb      	ldrh	r3, [r7, #14]
 800d13e:	2b00      	cmp	r3, #0
 800d140:	d105      	bne.n	800d14e <dec_lock+0x5a>
 800d142:	4a09      	ldr	r2, [pc, #36]	; (800d168 <dec_lock+0x74>)
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	011b      	lsls	r3, r3, #4
 800d148:	4413      	add	r3, r2
 800d14a:	2200      	movs	r2, #0
 800d14c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800d14e:	2300      	movs	r3, #0
 800d150:	737b      	strb	r3, [r7, #13]
 800d152:	e001      	b.n	800d158 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800d154:	2302      	movs	r3, #2
 800d156:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800d158:	7b7b      	ldrb	r3, [r7, #13]
}
 800d15a:	4618      	mov	r0, r3
 800d15c:	3714      	adds	r7, #20
 800d15e:	46bd      	mov	sp, r7
 800d160:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d164:	4770      	bx	lr
 800d166:	bf00      	nop
 800d168:	2000730c 	.word	0x2000730c

0800d16c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800d16c:	b480      	push	{r7}
 800d16e:	b085      	sub	sp, #20
 800d170:	af00      	add	r7, sp, #0
 800d172:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800d174:	2300      	movs	r3, #0
 800d176:	60fb      	str	r3, [r7, #12]
 800d178:	e010      	b.n	800d19c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800d17a:	4a0d      	ldr	r2, [pc, #52]	; (800d1b0 <clear_lock+0x44>)
 800d17c:	68fb      	ldr	r3, [r7, #12]
 800d17e:	011b      	lsls	r3, r3, #4
 800d180:	4413      	add	r3, r2
 800d182:	681b      	ldr	r3, [r3, #0]
 800d184:	687a      	ldr	r2, [r7, #4]
 800d186:	429a      	cmp	r2, r3
 800d188:	d105      	bne.n	800d196 <clear_lock+0x2a>
 800d18a:	4a09      	ldr	r2, [pc, #36]	; (800d1b0 <clear_lock+0x44>)
 800d18c:	68fb      	ldr	r3, [r7, #12]
 800d18e:	011b      	lsls	r3, r3, #4
 800d190:	4413      	add	r3, r2
 800d192:	2200      	movs	r2, #0
 800d194:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800d196:	68fb      	ldr	r3, [r7, #12]
 800d198:	3301      	adds	r3, #1
 800d19a:	60fb      	str	r3, [r7, #12]
 800d19c:	68fb      	ldr	r3, [r7, #12]
 800d19e:	2b01      	cmp	r3, #1
 800d1a0:	d9eb      	bls.n	800d17a <clear_lock+0xe>
	}
}
 800d1a2:	bf00      	nop
 800d1a4:	bf00      	nop
 800d1a6:	3714      	adds	r7, #20
 800d1a8:	46bd      	mov	sp, r7
 800d1aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1ae:	4770      	bx	lr
 800d1b0:	2000730c 	.word	0x2000730c

0800d1b4 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800d1b4:	b580      	push	{r7, lr}
 800d1b6:	b086      	sub	sp, #24
 800d1b8:	af00      	add	r7, sp, #0
 800d1ba:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800d1bc:	2300      	movs	r3, #0
 800d1be:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	78db      	ldrb	r3, [r3, #3]
 800d1c4:	2b00      	cmp	r3, #0
 800d1c6:	d034      	beq.n	800d232 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d1cc:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	7858      	ldrb	r0, [r3, #1]
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800d1d8:	2301      	movs	r3, #1
 800d1da:	697a      	ldr	r2, [r7, #20]
 800d1dc:	f7ff fd38 	bl	800cc50 <disk_write>
 800d1e0:	4603      	mov	r3, r0
 800d1e2:	2b00      	cmp	r3, #0
 800d1e4:	d002      	beq.n	800d1ec <sync_window+0x38>
			res = FR_DISK_ERR;
 800d1e6:	2301      	movs	r3, #1
 800d1e8:	73fb      	strb	r3, [r7, #15]
 800d1ea:	e022      	b.n	800d232 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	2200      	movs	r2, #0
 800d1f0:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d1f6:	697a      	ldr	r2, [r7, #20]
 800d1f8:	1ad2      	subs	r2, r2, r3
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	69db      	ldr	r3, [r3, #28]
 800d1fe:	429a      	cmp	r2, r3
 800d200:	d217      	bcs.n	800d232 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	789b      	ldrb	r3, [r3, #2]
 800d206:	613b      	str	r3, [r7, #16]
 800d208:	e010      	b.n	800d22c <sync_window+0x78>
					wsect += fs->fsize;
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	69db      	ldr	r3, [r3, #28]
 800d20e:	697a      	ldr	r2, [r7, #20]
 800d210:	4413      	add	r3, r2
 800d212:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	7858      	ldrb	r0, [r3, #1]
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800d21e:	2301      	movs	r3, #1
 800d220:	697a      	ldr	r2, [r7, #20]
 800d222:	f7ff fd15 	bl	800cc50 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800d226:	693b      	ldr	r3, [r7, #16]
 800d228:	3b01      	subs	r3, #1
 800d22a:	613b      	str	r3, [r7, #16]
 800d22c:	693b      	ldr	r3, [r7, #16]
 800d22e:	2b01      	cmp	r3, #1
 800d230:	d8eb      	bhi.n	800d20a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800d232:	7bfb      	ldrb	r3, [r7, #15]
}
 800d234:	4618      	mov	r0, r3
 800d236:	3718      	adds	r7, #24
 800d238:	46bd      	mov	sp, r7
 800d23a:	bd80      	pop	{r7, pc}

0800d23c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800d23c:	b580      	push	{r7, lr}
 800d23e:	b084      	sub	sp, #16
 800d240:	af00      	add	r7, sp, #0
 800d242:	6078      	str	r0, [r7, #4]
 800d244:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800d246:	2300      	movs	r3, #0
 800d248:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d24e:	683a      	ldr	r2, [r7, #0]
 800d250:	429a      	cmp	r2, r3
 800d252:	d01b      	beq.n	800d28c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800d254:	6878      	ldr	r0, [r7, #4]
 800d256:	f7ff ffad 	bl	800d1b4 <sync_window>
 800d25a:	4603      	mov	r3, r0
 800d25c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800d25e:	7bfb      	ldrb	r3, [r7, #15]
 800d260:	2b00      	cmp	r3, #0
 800d262:	d113      	bne.n	800d28c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	7858      	ldrb	r0, [r3, #1]
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800d26e:	2301      	movs	r3, #1
 800d270:	683a      	ldr	r2, [r7, #0]
 800d272:	f7ff fccd 	bl	800cc10 <disk_read>
 800d276:	4603      	mov	r3, r0
 800d278:	2b00      	cmp	r3, #0
 800d27a:	d004      	beq.n	800d286 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800d27c:	f04f 33ff 	mov.w	r3, #4294967295
 800d280:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800d282:	2301      	movs	r3, #1
 800d284:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	683a      	ldr	r2, [r7, #0]
 800d28a:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 800d28c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d28e:	4618      	mov	r0, r3
 800d290:	3710      	adds	r7, #16
 800d292:	46bd      	mov	sp, r7
 800d294:	bd80      	pop	{r7, pc}
	...

0800d298 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800d298:	b580      	push	{r7, lr}
 800d29a:	b084      	sub	sp, #16
 800d29c:	af00      	add	r7, sp, #0
 800d29e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800d2a0:	6878      	ldr	r0, [r7, #4]
 800d2a2:	f7ff ff87 	bl	800d1b4 <sync_window>
 800d2a6:	4603      	mov	r3, r0
 800d2a8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800d2aa:	7bfb      	ldrb	r3, [r7, #15]
 800d2ac:	2b00      	cmp	r3, #0
 800d2ae:	d158      	bne.n	800d362 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	781b      	ldrb	r3, [r3, #0]
 800d2b4:	2b03      	cmp	r3, #3
 800d2b6:	d148      	bne.n	800d34a <sync_fs+0xb2>
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	791b      	ldrb	r3, [r3, #4]
 800d2bc:	2b01      	cmp	r3, #1
 800d2be:	d144      	bne.n	800d34a <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	3334      	adds	r3, #52	; 0x34
 800d2c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d2c8:	2100      	movs	r1, #0
 800d2ca:	4618      	mov	r0, r3
 800d2cc:	f7ff fda9 	bl	800ce22 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	3334      	adds	r3, #52	; 0x34
 800d2d4:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800d2d8:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800d2dc:	4618      	mov	r0, r3
 800d2de:	f7ff fd38 	bl	800cd52 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	3334      	adds	r3, #52	; 0x34
 800d2e6:	4921      	ldr	r1, [pc, #132]	; (800d36c <sync_fs+0xd4>)
 800d2e8:	4618      	mov	r0, r3
 800d2ea:	f7ff fd4d 	bl	800cd88 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	3334      	adds	r3, #52	; 0x34
 800d2f2:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800d2f6:	491e      	ldr	r1, [pc, #120]	; (800d370 <sync_fs+0xd8>)
 800d2f8:	4618      	mov	r0, r3
 800d2fa:	f7ff fd45 	bl	800cd88 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	3334      	adds	r3, #52	; 0x34
 800d302:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	695b      	ldr	r3, [r3, #20]
 800d30a:	4619      	mov	r1, r3
 800d30c:	4610      	mov	r0, r2
 800d30e:	f7ff fd3b 	bl	800cd88 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	3334      	adds	r3, #52	; 0x34
 800d316:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	691b      	ldr	r3, [r3, #16]
 800d31e:	4619      	mov	r1, r3
 800d320:	4610      	mov	r0, r2
 800d322:	f7ff fd31 	bl	800cd88 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	6a1b      	ldr	r3, [r3, #32]
 800d32a:	1c5a      	adds	r2, r3, #1
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	7858      	ldrb	r0, [r3, #1]
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d33e:	2301      	movs	r3, #1
 800d340:	f7ff fc86 	bl	800cc50 <disk_write>
			fs->fsi_flag = 0;
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	2200      	movs	r2, #0
 800d348:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	785b      	ldrb	r3, [r3, #1]
 800d34e:	2200      	movs	r2, #0
 800d350:	2100      	movs	r1, #0
 800d352:	4618      	mov	r0, r3
 800d354:	f7ff fc9c 	bl	800cc90 <disk_ioctl>
 800d358:	4603      	mov	r3, r0
 800d35a:	2b00      	cmp	r3, #0
 800d35c:	d001      	beq.n	800d362 <sync_fs+0xca>
 800d35e:	2301      	movs	r3, #1
 800d360:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800d362:	7bfb      	ldrb	r3, [r7, #15]
}
 800d364:	4618      	mov	r0, r3
 800d366:	3710      	adds	r7, #16
 800d368:	46bd      	mov	sp, r7
 800d36a:	bd80      	pop	{r7, pc}
 800d36c:	41615252 	.word	0x41615252
 800d370:	61417272 	.word	0x61417272

0800d374 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800d374:	b480      	push	{r7}
 800d376:	b083      	sub	sp, #12
 800d378:	af00      	add	r7, sp, #0
 800d37a:	6078      	str	r0, [r7, #4]
 800d37c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800d37e:	683b      	ldr	r3, [r7, #0]
 800d380:	3b02      	subs	r3, #2
 800d382:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	699b      	ldr	r3, [r3, #24]
 800d388:	3b02      	subs	r3, #2
 800d38a:	683a      	ldr	r2, [r7, #0]
 800d38c:	429a      	cmp	r2, r3
 800d38e:	d301      	bcc.n	800d394 <clust2sect+0x20>
 800d390:	2300      	movs	r3, #0
 800d392:	e008      	b.n	800d3a6 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	895b      	ldrh	r3, [r3, #10]
 800d398:	461a      	mov	r2, r3
 800d39a:	683b      	ldr	r3, [r7, #0]
 800d39c:	fb03 f202 	mul.w	r2, r3, r2
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3a4:	4413      	add	r3, r2
}
 800d3a6:	4618      	mov	r0, r3
 800d3a8:	370c      	adds	r7, #12
 800d3aa:	46bd      	mov	sp, r7
 800d3ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3b0:	4770      	bx	lr

0800d3b2 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800d3b2:	b580      	push	{r7, lr}
 800d3b4:	b086      	sub	sp, #24
 800d3b6:	af00      	add	r7, sp, #0
 800d3b8:	6078      	str	r0, [r7, #4]
 800d3ba:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	681b      	ldr	r3, [r3, #0]
 800d3c0:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800d3c2:	683b      	ldr	r3, [r7, #0]
 800d3c4:	2b01      	cmp	r3, #1
 800d3c6:	d904      	bls.n	800d3d2 <get_fat+0x20>
 800d3c8:	693b      	ldr	r3, [r7, #16]
 800d3ca:	699b      	ldr	r3, [r3, #24]
 800d3cc:	683a      	ldr	r2, [r7, #0]
 800d3ce:	429a      	cmp	r2, r3
 800d3d0:	d302      	bcc.n	800d3d8 <get_fat+0x26>
		val = 1;	/* Internal error */
 800d3d2:	2301      	movs	r3, #1
 800d3d4:	617b      	str	r3, [r7, #20]
 800d3d6:	e08f      	b.n	800d4f8 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800d3d8:	f04f 33ff 	mov.w	r3, #4294967295
 800d3dc:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800d3de:	693b      	ldr	r3, [r7, #16]
 800d3e0:	781b      	ldrb	r3, [r3, #0]
 800d3e2:	2b03      	cmp	r3, #3
 800d3e4:	d062      	beq.n	800d4ac <get_fat+0xfa>
 800d3e6:	2b03      	cmp	r3, #3
 800d3e8:	dc7c      	bgt.n	800d4e4 <get_fat+0x132>
 800d3ea:	2b01      	cmp	r3, #1
 800d3ec:	d002      	beq.n	800d3f4 <get_fat+0x42>
 800d3ee:	2b02      	cmp	r3, #2
 800d3f0:	d042      	beq.n	800d478 <get_fat+0xc6>
 800d3f2:	e077      	b.n	800d4e4 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800d3f4:	683b      	ldr	r3, [r7, #0]
 800d3f6:	60fb      	str	r3, [r7, #12]
 800d3f8:	68fb      	ldr	r3, [r7, #12]
 800d3fa:	085b      	lsrs	r3, r3, #1
 800d3fc:	68fa      	ldr	r2, [r7, #12]
 800d3fe:	4413      	add	r3, r2
 800d400:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d402:	693b      	ldr	r3, [r7, #16]
 800d404:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d406:	68fb      	ldr	r3, [r7, #12]
 800d408:	0a5b      	lsrs	r3, r3, #9
 800d40a:	4413      	add	r3, r2
 800d40c:	4619      	mov	r1, r3
 800d40e:	6938      	ldr	r0, [r7, #16]
 800d410:	f7ff ff14 	bl	800d23c <move_window>
 800d414:	4603      	mov	r3, r0
 800d416:	2b00      	cmp	r3, #0
 800d418:	d167      	bne.n	800d4ea <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800d41a:	68fb      	ldr	r3, [r7, #12]
 800d41c:	1c5a      	adds	r2, r3, #1
 800d41e:	60fa      	str	r2, [r7, #12]
 800d420:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d424:	693a      	ldr	r2, [r7, #16]
 800d426:	4413      	add	r3, r2
 800d428:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d42c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d42e:	693b      	ldr	r3, [r7, #16]
 800d430:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d432:	68fb      	ldr	r3, [r7, #12]
 800d434:	0a5b      	lsrs	r3, r3, #9
 800d436:	4413      	add	r3, r2
 800d438:	4619      	mov	r1, r3
 800d43a:	6938      	ldr	r0, [r7, #16]
 800d43c:	f7ff fefe 	bl	800d23c <move_window>
 800d440:	4603      	mov	r3, r0
 800d442:	2b00      	cmp	r3, #0
 800d444:	d153      	bne.n	800d4ee <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800d446:	68fb      	ldr	r3, [r7, #12]
 800d448:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d44c:	693a      	ldr	r2, [r7, #16]
 800d44e:	4413      	add	r3, r2
 800d450:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d454:	021b      	lsls	r3, r3, #8
 800d456:	461a      	mov	r2, r3
 800d458:	68bb      	ldr	r3, [r7, #8]
 800d45a:	4313      	orrs	r3, r2
 800d45c:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800d45e:	683b      	ldr	r3, [r7, #0]
 800d460:	f003 0301 	and.w	r3, r3, #1
 800d464:	2b00      	cmp	r3, #0
 800d466:	d002      	beq.n	800d46e <get_fat+0xbc>
 800d468:	68bb      	ldr	r3, [r7, #8]
 800d46a:	091b      	lsrs	r3, r3, #4
 800d46c:	e002      	b.n	800d474 <get_fat+0xc2>
 800d46e:	68bb      	ldr	r3, [r7, #8]
 800d470:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d474:	617b      	str	r3, [r7, #20]
			break;
 800d476:	e03f      	b.n	800d4f8 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800d478:	693b      	ldr	r3, [r7, #16]
 800d47a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d47c:	683b      	ldr	r3, [r7, #0]
 800d47e:	0a1b      	lsrs	r3, r3, #8
 800d480:	4413      	add	r3, r2
 800d482:	4619      	mov	r1, r3
 800d484:	6938      	ldr	r0, [r7, #16]
 800d486:	f7ff fed9 	bl	800d23c <move_window>
 800d48a:	4603      	mov	r3, r0
 800d48c:	2b00      	cmp	r3, #0
 800d48e:	d130      	bne.n	800d4f2 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800d490:	693b      	ldr	r3, [r7, #16]
 800d492:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800d496:	683b      	ldr	r3, [r7, #0]
 800d498:	005b      	lsls	r3, r3, #1
 800d49a:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800d49e:	4413      	add	r3, r2
 800d4a0:	4618      	mov	r0, r3
 800d4a2:	f7ff fc1b 	bl	800ccdc <ld_word>
 800d4a6:	4603      	mov	r3, r0
 800d4a8:	617b      	str	r3, [r7, #20]
			break;
 800d4aa:	e025      	b.n	800d4f8 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800d4ac:	693b      	ldr	r3, [r7, #16]
 800d4ae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d4b0:	683b      	ldr	r3, [r7, #0]
 800d4b2:	09db      	lsrs	r3, r3, #7
 800d4b4:	4413      	add	r3, r2
 800d4b6:	4619      	mov	r1, r3
 800d4b8:	6938      	ldr	r0, [r7, #16]
 800d4ba:	f7ff febf 	bl	800d23c <move_window>
 800d4be:	4603      	mov	r3, r0
 800d4c0:	2b00      	cmp	r3, #0
 800d4c2:	d118      	bne.n	800d4f6 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800d4c4:	693b      	ldr	r3, [r7, #16]
 800d4c6:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800d4ca:	683b      	ldr	r3, [r7, #0]
 800d4cc:	009b      	lsls	r3, r3, #2
 800d4ce:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800d4d2:	4413      	add	r3, r2
 800d4d4:	4618      	mov	r0, r3
 800d4d6:	f7ff fc19 	bl	800cd0c <ld_dword>
 800d4da:	4603      	mov	r3, r0
 800d4dc:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800d4e0:	617b      	str	r3, [r7, #20]
			break;
 800d4e2:	e009      	b.n	800d4f8 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800d4e4:	2301      	movs	r3, #1
 800d4e6:	617b      	str	r3, [r7, #20]
 800d4e8:	e006      	b.n	800d4f8 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d4ea:	bf00      	nop
 800d4ec:	e004      	b.n	800d4f8 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d4ee:	bf00      	nop
 800d4f0:	e002      	b.n	800d4f8 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800d4f2:	bf00      	nop
 800d4f4:	e000      	b.n	800d4f8 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800d4f6:	bf00      	nop
		}
	}

	return val;
 800d4f8:	697b      	ldr	r3, [r7, #20]
}
 800d4fa:	4618      	mov	r0, r3
 800d4fc:	3718      	adds	r7, #24
 800d4fe:	46bd      	mov	sp, r7
 800d500:	bd80      	pop	{r7, pc}

0800d502 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800d502:	b590      	push	{r4, r7, lr}
 800d504:	b089      	sub	sp, #36	; 0x24
 800d506:	af00      	add	r7, sp, #0
 800d508:	60f8      	str	r0, [r7, #12]
 800d50a:	60b9      	str	r1, [r7, #8]
 800d50c:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800d50e:	2302      	movs	r3, #2
 800d510:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800d512:	68bb      	ldr	r3, [r7, #8]
 800d514:	2b01      	cmp	r3, #1
 800d516:	f240 80d9 	bls.w	800d6cc <put_fat+0x1ca>
 800d51a:	68fb      	ldr	r3, [r7, #12]
 800d51c:	699b      	ldr	r3, [r3, #24]
 800d51e:	68ba      	ldr	r2, [r7, #8]
 800d520:	429a      	cmp	r2, r3
 800d522:	f080 80d3 	bcs.w	800d6cc <put_fat+0x1ca>
		switch (fs->fs_type) {
 800d526:	68fb      	ldr	r3, [r7, #12]
 800d528:	781b      	ldrb	r3, [r3, #0]
 800d52a:	2b03      	cmp	r3, #3
 800d52c:	f000 8096 	beq.w	800d65c <put_fat+0x15a>
 800d530:	2b03      	cmp	r3, #3
 800d532:	f300 80cb 	bgt.w	800d6cc <put_fat+0x1ca>
 800d536:	2b01      	cmp	r3, #1
 800d538:	d002      	beq.n	800d540 <put_fat+0x3e>
 800d53a:	2b02      	cmp	r3, #2
 800d53c:	d06e      	beq.n	800d61c <put_fat+0x11a>
 800d53e:	e0c5      	b.n	800d6cc <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800d540:	68bb      	ldr	r3, [r7, #8]
 800d542:	61bb      	str	r3, [r7, #24]
 800d544:	69bb      	ldr	r3, [r7, #24]
 800d546:	085b      	lsrs	r3, r3, #1
 800d548:	69ba      	ldr	r2, [r7, #24]
 800d54a:	4413      	add	r3, r2
 800d54c:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800d54e:	68fb      	ldr	r3, [r7, #12]
 800d550:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d552:	69bb      	ldr	r3, [r7, #24]
 800d554:	0a5b      	lsrs	r3, r3, #9
 800d556:	4413      	add	r3, r2
 800d558:	4619      	mov	r1, r3
 800d55a:	68f8      	ldr	r0, [r7, #12]
 800d55c:	f7ff fe6e 	bl	800d23c <move_window>
 800d560:	4603      	mov	r3, r0
 800d562:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d564:	7ffb      	ldrb	r3, [r7, #31]
 800d566:	2b00      	cmp	r3, #0
 800d568:	f040 80a9 	bne.w	800d6be <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800d56c:	68fb      	ldr	r3, [r7, #12]
 800d56e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800d572:	69bb      	ldr	r3, [r7, #24]
 800d574:	1c59      	adds	r1, r3, #1
 800d576:	61b9      	str	r1, [r7, #24]
 800d578:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d57c:	4413      	add	r3, r2
 800d57e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800d580:	68bb      	ldr	r3, [r7, #8]
 800d582:	f003 0301 	and.w	r3, r3, #1
 800d586:	2b00      	cmp	r3, #0
 800d588:	d00d      	beq.n	800d5a6 <put_fat+0xa4>
 800d58a:	697b      	ldr	r3, [r7, #20]
 800d58c:	781b      	ldrb	r3, [r3, #0]
 800d58e:	b25b      	sxtb	r3, r3
 800d590:	f003 030f 	and.w	r3, r3, #15
 800d594:	b25a      	sxtb	r2, r3
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	b2db      	uxtb	r3, r3
 800d59a:	011b      	lsls	r3, r3, #4
 800d59c:	b25b      	sxtb	r3, r3
 800d59e:	4313      	orrs	r3, r2
 800d5a0:	b25b      	sxtb	r3, r3
 800d5a2:	b2db      	uxtb	r3, r3
 800d5a4:	e001      	b.n	800d5aa <put_fat+0xa8>
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	b2db      	uxtb	r3, r3
 800d5aa:	697a      	ldr	r2, [r7, #20]
 800d5ac:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800d5ae:	68fb      	ldr	r3, [r7, #12]
 800d5b0:	2201      	movs	r2, #1
 800d5b2:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800d5b4:	68fb      	ldr	r3, [r7, #12]
 800d5b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d5b8:	69bb      	ldr	r3, [r7, #24]
 800d5ba:	0a5b      	lsrs	r3, r3, #9
 800d5bc:	4413      	add	r3, r2
 800d5be:	4619      	mov	r1, r3
 800d5c0:	68f8      	ldr	r0, [r7, #12]
 800d5c2:	f7ff fe3b 	bl	800d23c <move_window>
 800d5c6:	4603      	mov	r3, r0
 800d5c8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d5ca:	7ffb      	ldrb	r3, [r7, #31]
 800d5cc:	2b00      	cmp	r3, #0
 800d5ce:	d178      	bne.n	800d6c2 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800d5d0:	68fb      	ldr	r3, [r7, #12]
 800d5d2:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800d5d6:	69bb      	ldr	r3, [r7, #24]
 800d5d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d5dc:	4413      	add	r3, r2
 800d5de:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800d5e0:	68bb      	ldr	r3, [r7, #8]
 800d5e2:	f003 0301 	and.w	r3, r3, #1
 800d5e6:	2b00      	cmp	r3, #0
 800d5e8:	d003      	beq.n	800d5f2 <put_fat+0xf0>
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	091b      	lsrs	r3, r3, #4
 800d5ee:	b2db      	uxtb	r3, r3
 800d5f0:	e00e      	b.n	800d610 <put_fat+0x10e>
 800d5f2:	697b      	ldr	r3, [r7, #20]
 800d5f4:	781b      	ldrb	r3, [r3, #0]
 800d5f6:	b25b      	sxtb	r3, r3
 800d5f8:	f023 030f 	bic.w	r3, r3, #15
 800d5fc:	b25a      	sxtb	r2, r3
 800d5fe:	687b      	ldr	r3, [r7, #4]
 800d600:	0a1b      	lsrs	r3, r3, #8
 800d602:	b25b      	sxtb	r3, r3
 800d604:	f003 030f 	and.w	r3, r3, #15
 800d608:	b25b      	sxtb	r3, r3
 800d60a:	4313      	orrs	r3, r2
 800d60c:	b25b      	sxtb	r3, r3
 800d60e:	b2db      	uxtb	r3, r3
 800d610:	697a      	ldr	r2, [r7, #20]
 800d612:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800d614:	68fb      	ldr	r3, [r7, #12]
 800d616:	2201      	movs	r2, #1
 800d618:	70da      	strb	r2, [r3, #3]
			break;
 800d61a:	e057      	b.n	800d6cc <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800d61c:	68fb      	ldr	r3, [r7, #12]
 800d61e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d620:	68bb      	ldr	r3, [r7, #8]
 800d622:	0a1b      	lsrs	r3, r3, #8
 800d624:	4413      	add	r3, r2
 800d626:	4619      	mov	r1, r3
 800d628:	68f8      	ldr	r0, [r7, #12]
 800d62a:	f7ff fe07 	bl	800d23c <move_window>
 800d62e:	4603      	mov	r3, r0
 800d630:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d632:	7ffb      	ldrb	r3, [r7, #31]
 800d634:	2b00      	cmp	r3, #0
 800d636:	d146      	bne.n	800d6c6 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800d638:	68fb      	ldr	r3, [r7, #12]
 800d63a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800d63e:	68bb      	ldr	r3, [r7, #8]
 800d640:	005b      	lsls	r3, r3, #1
 800d642:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800d646:	4413      	add	r3, r2
 800d648:	687a      	ldr	r2, [r7, #4]
 800d64a:	b292      	uxth	r2, r2
 800d64c:	4611      	mov	r1, r2
 800d64e:	4618      	mov	r0, r3
 800d650:	f7ff fb7f 	bl	800cd52 <st_word>
			fs->wflag = 1;
 800d654:	68fb      	ldr	r3, [r7, #12]
 800d656:	2201      	movs	r2, #1
 800d658:	70da      	strb	r2, [r3, #3]
			break;
 800d65a:	e037      	b.n	800d6cc <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800d65c:	68fb      	ldr	r3, [r7, #12]
 800d65e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d660:	68bb      	ldr	r3, [r7, #8]
 800d662:	09db      	lsrs	r3, r3, #7
 800d664:	4413      	add	r3, r2
 800d666:	4619      	mov	r1, r3
 800d668:	68f8      	ldr	r0, [r7, #12]
 800d66a:	f7ff fde7 	bl	800d23c <move_window>
 800d66e:	4603      	mov	r3, r0
 800d670:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d672:	7ffb      	ldrb	r3, [r7, #31]
 800d674:	2b00      	cmp	r3, #0
 800d676:	d128      	bne.n	800d6ca <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800d67e:	68fb      	ldr	r3, [r7, #12]
 800d680:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800d684:	68bb      	ldr	r3, [r7, #8]
 800d686:	009b      	lsls	r3, r3, #2
 800d688:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800d68c:	4413      	add	r3, r2
 800d68e:	4618      	mov	r0, r3
 800d690:	f7ff fb3c 	bl	800cd0c <ld_dword>
 800d694:	4603      	mov	r3, r0
 800d696:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800d69a:	4323      	orrs	r3, r4
 800d69c:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800d69e:	68fb      	ldr	r3, [r7, #12]
 800d6a0:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800d6a4:	68bb      	ldr	r3, [r7, #8]
 800d6a6:	009b      	lsls	r3, r3, #2
 800d6a8:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800d6ac:	4413      	add	r3, r2
 800d6ae:	6879      	ldr	r1, [r7, #4]
 800d6b0:	4618      	mov	r0, r3
 800d6b2:	f7ff fb69 	bl	800cd88 <st_dword>
			fs->wflag = 1;
 800d6b6:	68fb      	ldr	r3, [r7, #12]
 800d6b8:	2201      	movs	r2, #1
 800d6ba:	70da      	strb	r2, [r3, #3]
			break;
 800d6bc:	e006      	b.n	800d6cc <put_fat+0x1ca>
			if (res != FR_OK) break;
 800d6be:	bf00      	nop
 800d6c0:	e004      	b.n	800d6cc <put_fat+0x1ca>
			if (res != FR_OK) break;
 800d6c2:	bf00      	nop
 800d6c4:	e002      	b.n	800d6cc <put_fat+0x1ca>
			if (res != FR_OK) break;
 800d6c6:	bf00      	nop
 800d6c8:	e000      	b.n	800d6cc <put_fat+0x1ca>
			if (res != FR_OK) break;
 800d6ca:	bf00      	nop
		}
	}
	return res;
 800d6cc:	7ffb      	ldrb	r3, [r7, #31]
}
 800d6ce:	4618      	mov	r0, r3
 800d6d0:	3724      	adds	r7, #36	; 0x24
 800d6d2:	46bd      	mov	sp, r7
 800d6d4:	bd90      	pop	{r4, r7, pc}

0800d6d6 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800d6d6:	b580      	push	{r7, lr}
 800d6d8:	b088      	sub	sp, #32
 800d6da:	af00      	add	r7, sp, #0
 800d6dc:	60f8      	str	r0, [r7, #12]
 800d6de:	60b9      	str	r1, [r7, #8]
 800d6e0:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800d6e2:	2300      	movs	r3, #0
 800d6e4:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800d6e6:	68fb      	ldr	r3, [r7, #12]
 800d6e8:	681b      	ldr	r3, [r3, #0]
 800d6ea:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800d6ec:	68bb      	ldr	r3, [r7, #8]
 800d6ee:	2b01      	cmp	r3, #1
 800d6f0:	d904      	bls.n	800d6fc <remove_chain+0x26>
 800d6f2:	69bb      	ldr	r3, [r7, #24]
 800d6f4:	699b      	ldr	r3, [r3, #24]
 800d6f6:	68ba      	ldr	r2, [r7, #8]
 800d6f8:	429a      	cmp	r2, r3
 800d6fa:	d301      	bcc.n	800d700 <remove_chain+0x2a>
 800d6fc:	2302      	movs	r3, #2
 800d6fe:	e04b      	b.n	800d798 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	2b00      	cmp	r3, #0
 800d704:	d00c      	beq.n	800d720 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800d706:	f04f 32ff 	mov.w	r2, #4294967295
 800d70a:	6879      	ldr	r1, [r7, #4]
 800d70c:	69b8      	ldr	r0, [r7, #24]
 800d70e:	f7ff fef8 	bl	800d502 <put_fat>
 800d712:	4603      	mov	r3, r0
 800d714:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800d716:	7ffb      	ldrb	r3, [r7, #31]
 800d718:	2b00      	cmp	r3, #0
 800d71a:	d001      	beq.n	800d720 <remove_chain+0x4a>
 800d71c:	7ffb      	ldrb	r3, [r7, #31]
 800d71e:	e03b      	b.n	800d798 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800d720:	68b9      	ldr	r1, [r7, #8]
 800d722:	68f8      	ldr	r0, [r7, #12]
 800d724:	f7ff fe45 	bl	800d3b2 <get_fat>
 800d728:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800d72a:	697b      	ldr	r3, [r7, #20]
 800d72c:	2b00      	cmp	r3, #0
 800d72e:	d031      	beq.n	800d794 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800d730:	697b      	ldr	r3, [r7, #20]
 800d732:	2b01      	cmp	r3, #1
 800d734:	d101      	bne.n	800d73a <remove_chain+0x64>
 800d736:	2302      	movs	r3, #2
 800d738:	e02e      	b.n	800d798 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800d73a:	697b      	ldr	r3, [r7, #20]
 800d73c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d740:	d101      	bne.n	800d746 <remove_chain+0x70>
 800d742:	2301      	movs	r3, #1
 800d744:	e028      	b.n	800d798 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800d746:	2200      	movs	r2, #0
 800d748:	68b9      	ldr	r1, [r7, #8]
 800d74a:	69b8      	ldr	r0, [r7, #24]
 800d74c:	f7ff fed9 	bl	800d502 <put_fat>
 800d750:	4603      	mov	r3, r0
 800d752:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800d754:	7ffb      	ldrb	r3, [r7, #31]
 800d756:	2b00      	cmp	r3, #0
 800d758:	d001      	beq.n	800d75e <remove_chain+0x88>
 800d75a:	7ffb      	ldrb	r3, [r7, #31]
 800d75c:	e01c      	b.n	800d798 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800d75e:	69bb      	ldr	r3, [r7, #24]
 800d760:	695a      	ldr	r2, [r3, #20]
 800d762:	69bb      	ldr	r3, [r7, #24]
 800d764:	699b      	ldr	r3, [r3, #24]
 800d766:	3b02      	subs	r3, #2
 800d768:	429a      	cmp	r2, r3
 800d76a:	d20b      	bcs.n	800d784 <remove_chain+0xae>
			fs->free_clst++;
 800d76c:	69bb      	ldr	r3, [r7, #24]
 800d76e:	695b      	ldr	r3, [r3, #20]
 800d770:	1c5a      	adds	r2, r3, #1
 800d772:	69bb      	ldr	r3, [r7, #24]
 800d774:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800d776:	69bb      	ldr	r3, [r7, #24]
 800d778:	791b      	ldrb	r3, [r3, #4]
 800d77a:	f043 0301 	orr.w	r3, r3, #1
 800d77e:	b2da      	uxtb	r2, r3
 800d780:	69bb      	ldr	r3, [r7, #24]
 800d782:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800d784:	697b      	ldr	r3, [r7, #20]
 800d786:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800d788:	69bb      	ldr	r3, [r7, #24]
 800d78a:	699b      	ldr	r3, [r3, #24]
 800d78c:	68ba      	ldr	r2, [r7, #8]
 800d78e:	429a      	cmp	r2, r3
 800d790:	d3c6      	bcc.n	800d720 <remove_chain+0x4a>
 800d792:	e000      	b.n	800d796 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800d794:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800d796:	2300      	movs	r3, #0
}
 800d798:	4618      	mov	r0, r3
 800d79a:	3720      	adds	r7, #32
 800d79c:	46bd      	mov	sp, r7
 800d79e:	bd80      	pop	{r7, pc}

0800d7a0 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800d7a0:	b580      	push	{r7, lr}
 800d7a2:	b088      	sub	sp, #32
 800d7a4:	af00      	add	r7, sp, #0
 800d7a6:	6078      	str	r0, [r7, #4]
 800d7a8:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	681b      	ldr	r3, [r3, #0]
 800d7ae:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800d7b0:	683b      	ldr	r3, [r7, #0]
 800d7b2:	2b00      	cmp	r3, #0
 800d7b4:	d10d      	bne.n	800d7d2 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800d7b6:	693b      	ldr	r3, [r7, #16]
 800d7b8:	691b      	ldr	r3, [r3, #16]
 800d7ba:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800d7bc:	69bb      	ldr	r3, [r7, #24]
 800d7be:	2b00      	cmp	r3, #0
 800d7c0:	d004      	beq.n	800d7cc <create_chain+0x2c>
 800d7c2:	693b      	ldr	r3, [r7, #16]
 800d7c4:	699b      	ldr	r3, [r3, #24]
 800d7c6:	69ba      	ldr	r2, [r7, #24]
 800d7c8:	429a      	cmp	r2, r3
 800d7ca:	d31b      	bcc.n	800d804 <create_chain+0x64>
 800d7cc:	2301      	movs	r3, #1
 800d7ce:	61bb      	str	r3, [r7, #24]
 800d7d0:	e018      	b.n	800d804 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800d7d2:	6839      	ldr	r1, [r7, #0]
 800d7d4:	6878      	ldr	r0, [r7, #4]
 800d7d6:	f7ff fdec 	bl	800d3b2 <get_fat>
 800d7da:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800d7dc:	68fb      	ldr	r3, [r7, #12]
 800d7de:	2b01      	cmp	r3, #1
 800d7e0:	d801      	bhi.n	800d7e6 <create_chain+0x46>
 800d7e2:	2301      	movs	r3, #1
 800d7e4:	e070      	b.n	800d8c8 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800d7e6:	68fb      	ldr	r3, [r7, #12]
 800d7e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d7ec:	d101      	bne.n	800d7f2 <create_chain+0x52>
 800d7ee:	68fb      	ldr	r3, [r7, #12]
 800d7f0:	e06a      	b.n	800d8c8 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800d7f2:	693b      	ldr	r3, [r7, #16]
 800d7f4:	699b      	ldr	r3, [r3, #24]
 800d7f6:	68fa      	ldr	r2, [r7, #12]
 800d7f8:	429a      	cmp	r2, r3
 800d7fa:	d201      	bcs.n	800d800 <create_chain+0x60>
 800d7fc:	68fb      	ldr	r3, [r7, #12]
 800d7fe:	e063      	b.n	800d8c8 <create_chain+0x128>
		scl = clst;
 800d800:	683b      	ldr	r3, [r7, #0]
 800d802:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800d804:	69bb      	ldr	r3, [r7, #24]
 800d806:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800d808:	69fb      	ldr	r3, [r7, #28]
 800d80a:	3301      	adds	r3, #1
 800d80c:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800d80e:	693b      	ldr	r3, [r7, #16]
 800d810:	699b      	ldr	r3, [r3, #24]
 800d812:	69fa      	ldr	r2, [r7, #28]
 800d814:	429a      	cmp	r2, r3
 800d816:	d307      	bcc.n	800d828 <create_chain+0x88>
				ncl = 2;
 800d818:	2302      	movs	r3, #2
 800d81a:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800d81c:	69fa      	ldr	r2, [r7, #28]
 800d81e:	69bb      	ldr	r3, [r7, #24]
 800d820:	429a      	cmp	r2, r3
 800d822:	d901      	bls.n	800d828 <create_chain+0x88>
 800d824:	2300      	movs	r3, #0
 800d826:	e04f      	b.n	800d8c8 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800d828:	69f9      	ldr	r1, [r7, #28]
 800d82a:	6878      	ldr	r0, [r7, #4]
 800d82c:	f7ff fdc1 	bl	800d3b2 <get_fat>
 800d830:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800d832:	68fb      	ldr	r3, [r7, #12]
 800d834:	2b00      	cmp	r3, #0
 800d836:	d00e      	beq.n	800d856 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800d838:	68fb      	ldr	r3, [r7, #12]
 800d83a:	2b01      	cmp	r3, #1
 800d83c:	d003      	beq.n	800d846 <create_chain+0xa6>
 800d83e:	68fb      	ldr	r3, [r7, #12]
 800d840:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d844:	d101      	bne.n	800d84a <create_chain+0xaa>
 800d846:	68fb      	ldr	r3, [r7, #12]
 800d848:	e03e      	b.n	800d8c8 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800d84a:	69fa      	ldr	r2, [r7, #28]
 800d84c:	69bb      	ldr	r3, [r7, #24]
 800d84e:	429a      	cmp	r2, r3
 800d850:	d1da      	bne.n	800d808 <create_chain+0x68>
 800d852:	2300      	movs	r3, #0
 800d854:	e038      	b.n	800d8c8 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800d856:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800d858:	f04f 32ff 	mov.w	r2, #4294967295
 800d85c:	69f9      	ldr	r1, [r7, #28]
 800d85e:	6938      	ldr	r0, [r7, #16]
 800d860:	f7ff fe4f 	bl	800d502 <put_fat>
 800d864:	4603      	mov	r3, r0
 800d866:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800d868:	7dfb      	ldrb	r3, [r7, #23]
 800d86a:	2b00      	cmp	r3, #0
 800d86c:	d109      	bne.n	800d882 <create_chain+0xe2>
 800d86e:	683b      	ldr	r3, [r7, #0]
 800d870:	2b00      	cmp	r3, #0
 800d872:	d006      	beq.n	800d882 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800d874:	69fa      	ldr	r2, [r7, #28]
 800d876:	6839      	ldr	r1, [r7, #0]
 800d878:	6938      	ldr	r0, [r7, #16]
 800d87a:	f7ff fe42 	bl	800d502 <put_fat>
 800d87e:	4603      	mov	r3, r0
 800d880:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800d882:	7dfb      	ldrb	r3, [r7, #23]
 800d884:	2b00      	cmp	r3, #0
 800d886:	d116      	bne.n	800d8b6 <create_chain+0x116>
		fs->last_clst = ncl;
 800d888:	693b      	ldr	r3, [r7, #16]
 800d88a:	69fa      	ldr	r2, [r7, #28]
 800d88c:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800d88e:	693b      	ldr	r3, [r7, #16]
 800d890:	695a      	ldr	r2, [r3, #20]
 800d892:	693b      	ldr	r3, [r7, #16]
 800d894:	699b      	ldr	r3, [r3, #24]
 800d896:	3b02      	subs	r3, #2
 800d898:	429a      	cmp	r2, r3
 800d89a:	d804      	bhi.n	800d8a6 <create_chain+0x106>
 800d89c:	693b      	ldr	r3, [r7, #16]
 800d89e:	695b      	ldr	r3, [r3, #20]
 800d8a0:	1e5a      	subs	r2, r3, #1
 800d8a2:	693b      	ldr	r3, [r7, #16]
 800d8a4:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800d8a6:	693b      	ldr	r3, [r7, #16]
 800d8a8:	791b      	ldrb	r3, [r3, #4]
 800d8aa:	f043 0301 	orr.w	r3, r3, #1
 800d8ae:	b2da      	uxtb	r2, r3
 800d8b0:	693b      	ldr	r3, [r7, #16]
 800d8b2:	711a      	strb	r2, [r3, #4]
 800d8b4:	e007      	b.n	800d8c6 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800d8b6:	7dfb      	ldrb	r3, [r7, #23]
 800d8b8:	2b01      	cmp	r3, #1
 800d8ba:	d102      	bne.n	800d8c2 <create_chain+0x122>
 800d8bc:	f04f 33ff 	mov.w	r3, #4294967295
 800d8c0:	e000      	b.n	800d8c4 <create_chain+0x124>
 800d8c2:	2301      	movs	r3, #1
 800d8c4:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800d8c6:	69fb      	ldr	r3, [r7, #28]
}
 800d8c8:	4618      	mov	r0, r3
 800d8ca:	3720      	adds	r7, #32
 800d8cc:	46bd      	mov	sp, r7
 800d8ce:	bd80      	pop	{r7, pc}

0800d8d0 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800d8d0:	b480      	push	{r7}
 800d8d2:	b087      	sub	sp, #28
 800d8d4:	af00      	add	r7, sp, #0
 800d8d6:	6078      	str	r0, [r7, #4]
 800d8d8:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	681b      	ldr	r3, [r3, #0]
 800d8de:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d8e4:	3304      	adds	r3, #4
 800d8e6:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800d8e8:	683b      	ldr	r3, [r7, #0]
 800d8ea:	0a5b      	lsrs	r3, r3, #9
 800d8ec:	68fa      	ldr	r2, [r7, #12]
 800d8ee:	8952      	ldrh	r2, [r2, #10]
 800d8f0:	fbb3 f3f2 	udiv	r3, r3, r2
 800d8f4:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800d8f6:	693b      	ldr	r3, [r7, #16]
 800d8f8:	1d1a      	adds	r2, r3, #4
 800d8fa:	613a      	str	r2, [r7, #16]
 800d8fc:	681b      	ldr	r3, [r3, #0]
 800d8fe:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800d900:	68bb      	ldr	r3, [r7, #8]
 800d902:	2b00      	cmp	r3, #0
 800d904:	d101      	bne.n	800d90a <clmt_clust+0x3a>
 800d906:	2300      	movs	r3, #0
 800d908:	e010      	b.n	800d92c <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800d90a:	697a      	ldr	r2, [r7, #20]
 800d90c:	68bb      	ldr	r3, [r7, #8]
 800d90e:	429a      	cmp	r2, r3
 800d910:	d307      	bcc.n	800d922 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800d912:	697a      	ldr	r2, [r7, #20]
 800d914:	68bb      	ldr	r3, [r7, #8]
 800d916:	1ad3      	subs	r3, r2, r3
 800d918:	617b      	str	r3, [r7, #20]
 800d91a:	693b      	ldr	r3, [r7, #16]
 800d91c:	3304      	adds	r3, #4
 800d91e:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800d920:	e7e9      	b.n	800d8f6 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800d922:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800d924:	693b      	ldr	r3, [r7, #16]
 800d926:	681a      	ldr	r2, [r3, #0]
 800d928:	697b      	ldr	r3, [r7, #20]
 800d92a:	4413      	add	r3, r2
}
 800d92c:	4618      	mov	r0, r3
 800d92e:	371c      	adds	r7, #28
 800d930:	46bd      	mov	sp, r7
 800d932:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d936:	4770      	bx	lr

0800d938 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800d938:	b580      	push	{r7, lr}
 800d93a:	b086      	sub	sp, #24
 800d93c:	af00      	add	r7, sp, #0
 800d93e:	6078      	str	r0, [r7, #4]
 800d940:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	681b      	ldr	r3, [r3, #0]
 800d946:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800d948:	683b      	ldr	r3, [r7, #0]
 800d94a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800d94e:	d204      	bcs.n	800d95a <dir_sdi+0x22>
 800d950:	683b      	ldr	r3, [r7, #0]
 800d952:	f003 031f 	and.w	r3, r3, #31
 800d956:	2b00      	cmp	r3, #0
 800d958:	d001      	beq.n	800d95e <dir_sdi+0x26>
		return FR_INT_ERR;
 800d95a:	2302      	movs	r3, #2
 800d95c:	e063      	b.n	800da26 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	683a      	ldr	r2, [r7, #0]
 800d962:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	689b      	ldr	r3, [r3, #8]
 800d968:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800d96a:	697b      	ldr	r3, [r7, #20]
 800d96c:	2b00      	cmp	r3, #0
 800d96e:	d106      	bne.n	800d97e <dir_sdi+0x46>
 800d970:	693b      	ldr	r3, [r7, #16]
 800d972:	781b      	ldrb	r3, [r3, #0]
 800d974:	2b02      	cmp	r3, #2
 800d976:	d902      	bls.n	800d97e <dir_sdi+0x46>
		clst = fs->dirbase;
 800d978:	693b      	ldr	r3, [r7, #16]
 800d97a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d97c:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800d97e:	697b      	ldr	r3, [r7, #20]
 800d980:	2b00      	cmp	r3, #0
 800d982:	d10c      	bne.n	800d99e <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800d984:	683b      	ldr	r3, [r7, #0]
 800d986:	095b      	lsrs	r3, r3, #5
 800d988:	693a      	ldr	r2, [r7, #16]
 800d98a:	8912      	ldrh	r2, [r2, #8]
 800d98c:	4293      	cmp	r3, r2
 800d98e:	d301      	bcc.n	800d994 <dir_sdi+0x5c>
 800d990:	2302      	movs	r3, #2
 800d992:	e048      	b.n	800da26 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800d994:	693b      	ldr	r3, [r7, #16]
 800d996:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	61da      	str	r2, [r3, #28]
 800d99c:	e029      	b.n	800d9f2 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800d99e:	693b      	ldr	r3, [r7, #16]
 800d9a0:	895b      	ldrh	r3, [r3, #10]
 800d9a2:	025b      	lsls	r3, r3, #9
 800d9a4:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800d9a6:	e019      	b.n	800d9dc <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	6979      	ldr	r1, [r7, #20]
 800d9ac:	4618      	mov	r0, r3
 800d9ae:	f7ff fd00 	bl	800d3b2 <get_fat>
 800d9b2:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800d9b4:	697b      	ldr	r3, [r7, #20]
 800d9b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d9ba:	d101      	bne.n	800d9c0 <dir_sdi+0x88>
 800d9bc:	2301      	movs	r3, #1
 800d9be:	e032      	b.n	800da26 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800d9c0:	697b      	ldr	r3, [r7, #20]
 800d9c2:	2b01      	cmp	r3, #1
 800d9c4:	d904      	bls.n	800d9d0 <dir_sdi+0x98>
 800d9c6:	693b      	ldr	r3, [r7, #16]
 800d9c8:	699b      	ldr	r3, [r3, #24]
 800d9ca:	697a      	ldr	r2, [r7, #20]
 800d9cc:	429a      	cmp	r2, r3
 800d9ce:	d301      	bcc.n	800d9d4 <dir_sdi+0x9c>
 800d9d0:	2302      	movs	r3, #2
 800d9d2:	e028      	b.n	800da26 <dir_sdi+0xee>
			ofs -= csz;
 800d9d4:	683a      	ldr	r2, [r7, #0]
 800d9d6:	68fb      	ldr	r3, [r7, #12]
 800d9d8:	1ad3      	subs	r3, r2, r3
 800d9da:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800d9dc:	683a      	ldr	r2, [r7, #0]
 800d9de:	68fb      	ldr	r3, [r7, #12]
 800d9e0:	429a      	cmp	r2, r3
 800d9e2:	d2e1      	bcs.n	800d9a8 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800d9e4:	6979      	ldr	r1, [r7, #20]
 800d9e6:	6938      	ldr	r0, [r7, #16]
 800d9e8:	f7ff fcc4 	bl	800d374 <clust2sect>
 800d9ec:	4602      	mov	r2, r0
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	697a      	ldr	r2, [r7, #20]
 800d9f6:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	69db      	ldr	r3, [r3, #28]
 800d9fc:	2b00      	cmp	r3, #0
 800d9fe:	d101      	bne.n	800da04 <dir_sdi+0xcc>
 800da00:	2302      	movs	r3, #2
 800da02:	e010      	b.n	800da26 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	69da      	ldr	r2, [r3, #28]
 800da08:	683b      	ldr	r3, [r7, #0]
 800da0a:	0a5b      	lsrs	r3, r3, #9
 800da0c:	441a      	add	r2, r3
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800da12:	693b      	ldr	r3, [r7, #16]
 800da14:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800da18:	683b      	ldr	r3, [r7, #0]
 800da1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800da1e:	441a      	add	r2, r3
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800da24:	2300      	movs	r3, #0
}
 800da26:	4618      	mov	r0, r3
 800da28:	3718      	adds	r7, #24
 800da2a:	46bd      	mov	sp, r7
 800da2c:	bd80      	pop	{r7, pc}

0800da2e <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800da2e:	b580      	push	{r7, lr}
 800da30:	b086      	sub	sp, #24
 800da32:	af00      	add	r7, sp, #0
 800da34:	6078      	str	r0, [r7, #4]
 800da36:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	681b      	ldr	r3, [r3, #0]
 800da3c:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	695b      	ldr	r3, [r3, #20]
 800da42:	3320      	adds	r3, #32
 800da44:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	69db      	ldr	r3, [r3, #28]
 800da4a:	2b00      	cmp	r3, #0
 800da4c:	d003      	beq.n	800da56 <dir_next+0x28>
 800da4e:	68bb      	ldr	r3, [r7, #8]
 800da50:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800da54:	d301      	bcc.n	800da5a <dir_next+0x2c>
 800da56:	2304      	movs	r3, #4
 800da58:	e0aa      	b.n	800dbb0 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800da5a:	68bb      	ldr	r3, [r7, #8]
 800da5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800da60:	2b00      	cmp	r3, #0
 800da62:	f040 8098 	bne.w	800db96 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	69db      	ldr	r3, [r3, #28]
 800da6a:	1c5a      	adds	r2, r3, #1
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	699b      	ldr	r3, [r3, #24]
 800da74:	2b00      	cmp	r3, #0
 800da76:	d10b      	bne.n	800da90 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800da78:	68bb      	ldr	r3, [r7, #8]
 800da7a:	095b      	lsrs	r3, r3, #5
 800da7c:	68fa      	ldr	r2, [r7, #12]
 800da7e:	8912      	ldrh	r2, [r2, #8]
 800da80:	4293      	cmp	r3, r2
 800da82:	f0c0 8088 	bcc.w	800db96 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	2200      	movs	r2, #0
 800da8a:	61da      	str	r2, [r3, #28]
 800da8c:	2304      	movs	r3, #4
 800da8e:	e08f      	b.n	800dbb0 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800da90:	68bb      	ldr	r3, [r7, #8]
 800da92:	0a5b      	lsrs	r3, r3, #9
 800da94:	68fa      	ldr	r2, [r7, #12]
 800da96:	8952      	ldrh	r2, [r2, #10]
 800da98:	3a01      	subs	r2, #1
 800da9a:	4013      	ands	r3, r2
 800da9c:	2b00      	cmp	r3, #0
 800da9e:	d17a      	bne.n	800db96 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800daa0:	687a      	ldr	r2, [r7, #4]
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	699b      	ldr	r3, [r3, #24]
 800daa6:	4619      	mov	r1, r3
 800daa8:	4610      	mov	r0, r2
 800daaa:	f7ff fc82 	bl	800d3b2 <get_fat>
 800daae:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800dab0:	697b      	ldr	r3, [r7, #20]
 800dab2:	2b01      	cmp	r3, #1
 800dab4:	d801      	bhi.n	800daba <dir_next+0x8c>
 800dab6:	2302      	movs	r3, #2
 800dab8:	e07a      	b.n	800dbb0 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800daba:	697b      	ldr	r3, [r7, #20]
 800dabc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dac0:	d101      	bne.n	800dac6 <dir_next+0x98>
 800dac2:	2301      	movs	r3, #1
 800dac4:	e074      	b.n	800dbb0 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800dac6:	68fb      	ldr	r3, [r7, #12]
 800dac8:	699b      	ldr	r3, [r3, #24]
 800daca:	697a      	ldr	r2, [r7, #20]
 800dacc:	429a      	cmp	r2, r3
 800dace:	d358      	bcc.n	800db82 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800dad0:	683b      	ldr	r3, [r7, #0]
 800dad2:	2b00      	cmp	r3, #0
 800dad4:	d104      	bne.n	800dae0 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	2200      	movs	r2, #0
 800dada:	61da      	str	r2, [r3, #28]
 800dadc:	2304      	movs	r3, #4
 800dade:	e067      	b.n	800dbb0 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800dae0:	687a      	ldr	r2, [r7, #4]
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	699b      	ldr	r3, [r3, #24]
 800dae6:	4619      	mov	r1, r3
 800dae8:	4610      	mov	r0, r2
 800daea:	f7ff fe59 	bl	800d7a0 <create_chain>
 800daee:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800daf0:	697b      	ldr	r3, [r7, #20]
 800daf2:	2b00      	cmp	r3, #0
 800daf4:	d101      	bne.n	800dafa <dir_next+0xcc>
 800daf6:	2307      	movs	r3, #7
 800daf8:	e05a      	b.n	800dbb0 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800dafa:	697b      	ldr	r3, [r7, #20]
 800dafc:	2b01      	cmp	r3, #1
 800dafe:	d101      	bne.n	800db04 <dir_next+0xd6>
 800db00:	2302      	movs	r3, #2
 800db02:	e055      	b.n	800dbb0 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800db04:	697b      	ldr	r3, [r7, #20]
 800db06:	f1b3 3fff 	cmp.w	r3, #4294967295
 800db0a:	d101      	bne.n	800db10 <dir_next+0xe2>
 800db0c:	2301      	movs	r3, #1
 800db0e:	e04f      	b.n	800dbb0 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800db10:	68f8      	ldr	r0, [r7, #12]
 800db12:	f7ff fb4f 	bl	800d1b4 <sync_window>
 800db16:	4603      	mov	r3, r0
 800db18:	2b00      	cmp	r3, #0
 800db1a:	d001      	beq.n	800db20 <dir_next+0xf2>
 800db1c:	2301      	movs	r3, #1
 800db1e:	e047      	b.n	800dbb0 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800db20:	68fb      	ldr	r3, [r7, #12]
 800db22:	3334      	adds	r3, #52	; 0x34
 800db24:	f44f 7200 	mov.w	r2, #512	; 0x200
 800db28:	2100      	movs	r1, #0
 800db2a:	4618      	mov	r0, r3
 800db2c:	f7ff f979 	bl	800ce22 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800db30:	2300      	movs	r3, #0
 800db32:	613b      	str	r3, [r7, #16]
 800db34:	6979      	ldr	r1, [r7, #20]
 800db36:	68f8      	ldr	r0, [r7, #12]
 800db38:	f7ff fc1c 	bl	800d374 <clust2sect>
 800db3c:	4602      	mov	r2, r0
 800db3e:	68fb      	ldr	r3, [r7, #12]
 800db40:	631a      	str	r2, [r3, #48]	; 0x30
 800db42:	e012      	b.n	800db6a <dir_next+0x13c>
						fs->wflag = 1;
 800db44:	68fb      	ldr	r3, [r7, #12]
 800db46:	2201      	movs	r2, #1
 800db48:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800db4a:	68f8      	ldr	r0, [r7, #12]
 800db4c:	f7ff fb32 	bl	800d1b4 <sync_window>
 800db50:	4603      	mov	r3, r0
 800db52:	2b00      	cmp	r3, #0
 800db54:	d001      	beq.n	800db5a <dir_next+0x12c>
 800db56:	2301      	movs	r3, #1
 800db58:	e02a      	b.n	800dbb0 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800db5a:	693b      	ldr	r3, [r7, #16]
 800db5c:	3301      	adds	r3, #1
 800db5e:	613b      	str	r3, [r7, #16]
 800db60:	68fb      	ldr	r3, [r7, #12]
 800db62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800db64:	1c5a      	adds	r2, r3, #1
 800db66:	68fb      	ldr	r3, [r7, #12]
 800db68:	631a      	str	r2, [r3, #48]	; 0x30
 800db6a:	68fb      	ldr	r3, [r7, #12]
 800db6c:	895b      	ldrh	r3, [r3, #10]
 800db6e:	461a      	mov	r2, r3
 800db70:	693b      	ldr	r3, [r7, #16]
 800db72:	4293      	cmp	r3, r2
 800db74:	d3e6      	bcc.n	800db44 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800db76:	68fb      	ldr	r3, [r7, #12]
 800db78:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800db7a:	693b      	ldr	r3, [r7, #16]
 800db7c:	1ad2      	subs	r2, r2, r3
 800db7e:	68fb      	ldr	r3, [r7, #12]
 800db80:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	697a      	ldr	r2, [r7, #20]
 800db86:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800db88:	6979      	ldr	r1, [r7, #20]
 800db8a:	68f8      	ldr	r0, [r7, #12]
 800db8c:	f7ff fbf2 	bl	800d374 <clust2sect>
 800db90:	4602      	mov	r2, r0
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	68ba      	ldr	r2, [r7, #8]
 800db9a:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800db9c:	68fb      	ldr	r3, [r7, #12]
 800db9e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800dba2:	68bb      	ldr	r3, [r7, #8]
 800dba4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dba8:	441a      	add	r2, r3
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800dbae:	2300      	movs	r3, #0
}
 800dbb0:	4618      	mov	r0, r3
 800dbb2:	3718      	adds	r7, #24
 800dbb4:	46bd      	mov	sp, r7
 800dbb6:	bd80      	pop	{r7, pc}

0800dbb8 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800dbb8:	b580      	push	{r7, lr}
 800dbba:	b086      	sub	sp, #24
 800dbbc:	af00      	add	r7, sp, #0
 800dbbe:	6078      	str	r0, [r7, #4]
 800dbc0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800dbc2:	687b      	ldr	r3, [r7, #4]
 800dbc4:	681b      	ldr	r3, [r3, #0]
 800dbc6:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800dbc8:	2100      	movs	r1, #0
 800dbca:	6878      	ldr	r0, [r7, #4]
 800dbcc:	f7ff feb4 	bl	800d938 <dir_sdi>
 800dbd0:	4603      	mov	r3, r0
 800dbd2:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800dbd4:	7dfb      	ldrb	r3, [r7, #23]
 800dbd6:	2b00      	cmp	r3, #0
 800dbd8:	d12b      	bne.n	800dc32 <dir_alloc+0x7a>
		n = 0;
 800dbda:	2300      	movs	r3, #0
 800dbdc:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	69db      	ldr	r3, [r3, #28]
 800dbe2:	4619      	mov	r1, r3
 800dbe4:	68f8      	ldr	r0, [r7, #12]
 800dbe6:	f7ff fb29 	bl	800d23c <move_window>
 800dbea:	4603      	mov	r3, r0
 800dbec:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800dbee:	7dfb      	ldrb	r3, [r7, #23]
 800dbf0:	2b00      	cmp	r3, #0
 800dbf2:	d11d      	bne.n	800dc30 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	6a1b      	ldr	r3, [r3, #32]
 800dbf8:	781b      	ldrb	r3, [r3, #0]
 800dbfa:	2be5      	cmp	r3, #229	; 0xe5
 800dbfc:	d004      	beq.n	800dc08 <dir_alloc+0x50>
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	6a1b      	ldr	r3, [r3, #32]
 800dc02:	781b      	ldrb	r3, [r3, #0]
 800dc04:	2b00      	cmp	r3, #0
 800dc06:	d107      	bne.n	800dc18 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800dc08:	693b      	ldr	r3, [r7, #16]
 800dc0a:	3301      	adds	r3, #1
 800dc0c:	613b      	str	r3, [r7, #16]
 800dc0e:	693a      	ldr	r2, [r7, #16]
 800dc10:	683b      	ldr	r3, [r7, #0]
 800dc12:	429a      	cmp	r2, r3
 800dc14:	d102      	bne.n	800dc1c <dir_alloc+0x64>
 800dc16:	e00c      	b.n	800dc32 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800dc18:	2300      	movs	r3, #0
 800dc1a:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800dc1c:	2101      	movs	r1, #1
 800dc1e:	6878      	ldr	r0, [r7, #4]
 800dc20:	f7ff ff05 	bl	800da2e <dir_next>
 800dc24:	4603      	mov	r3, r0
 800dc26:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800dc28:	7dfb      	ldrb	r3, [r7, #23]
 800dc2a:	2b00      	cmp	r3, #0
 800dc2c:	d0d7      	beq.n	800dbde <dir_alloc+0x26>
 800dc2e:	e000      	b.n	800dc32 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800dc30:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800dc32:	7dfb      	ldrb	r3, [r7, #23]
 800dc34:	2b04      	cmp	r3, #4
 800dc36:	d101      	bne.n	800dc3c <dir_alloc+0x84>
 800dc38:	2307      	movs	r3, #7
 800dc3a:	75fb      	strb	r3, [r7, #23]
	return res;
 800dc3c:	7dfb      	ldrb	r3, [r7, #23]
}
 800dc3e:	4618      	mov	r0, r3
 800dc40:	3718      	adds	r7, #24
 800dc42:	46bd      	mov	sp, r7
 800dc44:	bd80      	pop	{r7, pc}

0800dc46 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800dc46:	b580      	push	{r7, lr}
 800dc48:	b084      	sub	sp, #16
 800dc4a:	af00      	add	r7, sp, #0
 800dc4c:	6078      	str	r0, [r7, #4]
 800dc4e:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800dc50:	683b      	ldr	r3, [r7, #0]
 800dc52:	331a      	adds	r3, #26
 800dc54:	4618      	mov	r0, r3
 800dc56:	f7ff f841 	bl	800ccdc <ld_word>
 800dc5a:	4603      	mov	r3, r0
 800dc5c:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	781b      	ldrb	r3, [r3, #0]
 800dc62:	2b03      	cmp	r3, #3
 800dc64:	d109      	bne.n	800dc7a <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800dc66:	683b      	ldr	r3, [r7, #0]
 800dc68:	3314      	adds	r3, #20
 800dc6a:	4618      	mov	r0, r3
 800dc6c:	f7ff f836 	bl	800ccdc <ld_word>
 800dc70:	4603      	mov	r3, r0
 800dc72:	041b      	lsls	r3, r3, #16
 800dc74:	68fa      	ldr	r2, [r7, #12]
 800dc76:	4313      	orrs	r3, r2
 800dc78:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800dc7a:	68fb      	ldr	r3, [r7, #12]
}
 800dc7c:	4618      	mov	r0, r3
 800dc7e:	3710      	adds	r7, #16
 800dc80:	46bd      	mov	sp, r7
 800dc82:	bd80      	pop	{r7, pc}

0800dc84 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800dc84:	b580      	push	{r7, lr}
 800dc86:	b084      	sub	sp, #16
 800dc88:	af00      	add	r7, sp, #0
 800dc8a:	60f8      	str	r0, [r7, #12]
 800dc8c:	60b9      	str	r1, [r7, #8]
 800dc8e:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800dc90:	68bb      	ldr	r3, [r7, #8]
 800dc92:	331a      	adds	r3, #26
 800dc94:	687a      	ldr	r2, [r7, #4]
 800dc96:	b292      	uxth	r2, r2
 800dc98:	4611      	mov	r1, r2
 800dc9a:	4618      	mov	r0, r3
 800dc9c:	f7ff f859 	bl	800cd52 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800dca0:	68fb      	ldr	r3, [r7, #12]
 800dca2:	781b      	ldrb	r3, [r3, #0]
 800dca4:	2b03      	cmp	r3, #3
 800dca6:	d109      	bne.n	800dcbc <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800dca8:	68bb      	ldr	r3, [r7, #8]
 800dcaa:	f103 0214 	add.w	r2, r3, #20
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	0c1b      	lsrs	r3, r3, #16
 800dcb2:	b29b      	uxth	r3, r3
 800dcb4:	4619      	mov	r1, r3
 800dcb6:	4610      	mov	r0, r2
 800dcb8:	f7ff f84b 	bl	800cd52 <st_word>
	}
}
 800dcbc:	bf00      	nop
 800dcbe:	3710      	adds	r7, #16
 800dcc0:	46bd      	mov	sp, r7
 800dcc2:	bd80      	pop	{r7, pc}

0800dcc4 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800dcc4:	b590      	push	{r4, r7, lr}
 800dcc6:	b087      	sub	sp, #28
 800dcc8:	af00      	add	r7, sp, #0
 800dcca:	6078      	str	r0, [r7, #4]
 800dccc:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800dcce:	683b      	ldr	r3, [r7, #0]
 800dcd0:	331a      	adds	r3, #26
 800dcd2:	4618      	mov	r0, r3
 800dcd4:	f7ff f802 	bl	800ccdc <ld_word>
 800dcd8:	4603      	mov	r3, r0
 800dcda:	2b00      	cmp	r3, #0
 800dcdc:	d001      	beq.n	800dce2 <cmp_lfn+0x1e>
 800dcde:	2300      	movs	r3, #0
 800dce0:	e059      	b.n	800dd96 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800dce2:	683b      	ldr	r3, [r7, #0]
 800dce4:	781b      	ldrb	r3, [r3, #0]
 800dce6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800dcea:	1e5a      	subs	r2, r3, #1
 800dcec:	4613      	mov	r3, r2
 800dcee:	005b      	lsls	r3, r3, #1
 800dcf0:	4413      	add	r3, r2
 800dcf2:	009b      	lsls	r3, r3, #2
 800dcf4:	4413      	add	r3, r2
 800dcf6:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800dcf8:	2301      	movs	r3, #1
 800dcfa:	81fb      	strh	r3, [r7, #14]
 800dcfc:	2300      	movs	r3, #0
 800dcfe:	613b      	str	r3, [r7, #16]
 800dd00:	e033      	b.n	800dd6a <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800dd02:	4a27      	ldr	r2, [pc, #156]	; (800dda0 <cmp_lfn+0xdc>)
 800dd04:	693b      	ldr	r3, [r7, #16]
 800dd06:	4413      	add	r3, r2
 800dd08:	781b      	ldrb	r3, [r3, #0]
 800dd0a:	461a      	mov	r2, r3
 800dd0c:	683b      	ldr	r3, [r7, #0]
 800dd0e:	4413      	add	r3, r2
 800dd10:	4618      	mov	r0, r3
 800dd12:	f7fe ffe3 	bl	800ccdc <ld_word>
 800dd16:	4603      	mov	r3, r0
 800dd18:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800dd1a:	89fb      	ldrh	r3, [r7, #14]
 800dd1c:	2b00      	cmp	r3, #0
 800dd1e:	d01a      	beq.n	800dd56 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800dd20:	697b      	ldr	r3, [r7, #20]
 800dd22:	2bfe      	cmp	r3, #254	; 0xfe
 800dd24:	d812      	bhi.n	800dd4c <cmp_lfn+0x88>
 800dd26:	89bb      	ldrh	r3, [r7, #12]
 800dd28:	4618      	mov	r0, r3
 800dd2a:	f002 fea1 	bl	8010a70 <ff_wtoupper>
 800dd2e:	4603      	mov	r3, r0
 800dd30:	461c      	mov	r4, r3
 800dd32:	697b      	ldr	r3, [r7, #20]
 800dd34:	1c5a      	adds	r2, r3, #1
 800dd36:	617a      	str	r2, [r7, #20]
 800dd38:	005b      	lsls	r3, r3, #1
 800dd3a:	687a      	ldr	r2, [r7, #4]
 800dd3c:	4413      	add	r3, r2
 800dd3e:	881b      	ldrh	r3, [r3, #0]
 800dd40:	4618      	mov	r0, r3
 800dd42:	f002 fe95 	bl	8010a70 <ff_wtoupper>
 800dd46:	4603      	mov	r3, r0
 800dd48:	429c      	cmp	r4, r3
 800dd4a:	d001      	beq.n	800dd50 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800dd4c:	2300      	movs	r3, #0
 800dd4e:	e022      	b.n	800dd96 <cmp_lfn+0xd2>
			}
			wc = uc;
 800dd50:	89bb      	ldrh	r3, [r7, #12]
 800dd52:	81fb      	strh	r3, [r7, #14]
 800dd54:	e006      	b.n	800dd64 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800dd56:	89bb      	ldrh	r3, [r7, #12]
 800dd58:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800dd5c:	4293      	cmp	r3, r2
 800dd5e:	d001      	beq.n	800dd64 <cmp_lfn+0xa0>
 800dd60:	2300      	movs	r3, #0
 800dd62:	e018      	b.n	800dd96 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800dd64:	693b      	ldr	r3, [r7, #16]
 800dd66:	3301      	adds	r3, #1
 800dd68:	613b      	str	r3, [r7, #16]
 800dd6a:	693b      	ldr	r3, [r7, #16]
 800dd6c:	2b0c      	cmp	r3, #12
 800dd6e:	d9c8      	bls.n	800dd02 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800dd70:	683b      	ldr	r3, [r7, #0]
 800dd72:	781b      	ldrb	r3, [r3, #0]
 800dd74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dd78:	2b00      	cmp	r3, #0
 800dd7a:	d00b      	beq.n	800dd94 <cmp_lfn+0xd0>
 800dd7c:	89fb      	ldrh	r3, [r7, #14]
 800dd7e:	2b00      	cmp	r3, #0
 800dd80:	d008      	beq.n	800dd94 <cmp_lfn+0xd0>
 800dd82:	697b      	ldr	r3, [r7, #20]
 800dd84:	005b      	lsls	r3, r3, #1
 800dd86:	687a      	ldr	r2, [r7, #4]
 800dd88:	4413      	add	r3, r2
 800dd8a:	881b      	ldrh	r3, [r3, #0]
 800dd8c:	2b00      	cmp	r3, #0
 800dd8e:	d001      	beq.n	800dd94 <cmp_lfn+0xd0>
 800dd90:	2300      	movs	r3, #0
 800dd92:	e000      	b.n	800dd96 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800dd94:	2301      	movs	r3, #1
}
 800dd96:	4618      	mov	r0, r3
 800dd98:	371c      	adds	r7, #28
 800dd9a:	46bd      	mov	sp, r7
 800dd9c:	bd90      	pop	{r4, r7, pc}
 800dd9e:	bf00      	nop
 800dda0:	0802302c 	.word	0x0802302c

0800dda4 <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 800dda4:	b580      	push	{r7, lr}
 800dda6:	b086      	sub	sp, #24
 800dda8:	af00      	add	r7, sp, #0
 800ddaa:	6078      	str	r0, [r7, #4]
 800ddac:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 800ddae:	683b      	ldr	r3, [r7, #0]
 800ddb0:	331a      	adds	r3, #26
 800ddb2:	4618      	mov	r0, r3
 800ddb4:	f7fe ff92 	bl	800ccdc <ld_word>
 800ddb8:	4603      	mov	r3, r0
 800ddba:	2b00      	cmp	r3, #0
 800ddbc:	d001      	beq.n	800ddc2 <pick_lfn+0x1e>
 800ddbe:	2300      	movs	r3, #0
 800ddc0:	e04d      	b.n	800de5e <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 800ddc2:	683b      	ldr	r3, [r7, #0]
 800ddc4:	781b      	ldrb	r3, [r3, #0]
 800ddc6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ddca:	1e5a      	subs	r2, r3, #1
 800ddcc:	4613      	mov	r3, r2
 800ddce:	005b      	lsls	r3, r3, #1
 800ddd0:	4413      	add	r3, r2
 800ddd2:	009b      	lsls	r3, r3, #2
 800ddd4:	4413      	add	r3, r2
 800ddd6:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800ddd8:	2301      	movs	r3, #1
 800ddda:	81fb      	strh	r3, [r7, #14]
 800dddc:	2300      	movs	r3, #0
 800ddde:	613b      	str	r3, [r7, #16]
 800dde0:	e028      	b.n	800de34 <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800dde2:	4a21      	ldr	r2, [pc, #132]	; (800de68 <pick_lfn+0xc4>)
 800dde4:	693b      	ldr	r3, [r7, #16]
 800dde6:	4413      	add	r3, r2
 800dde8:	781b      	ldrb	r3, [r3, #0]
 800ddea:	461a      	mov	r2, r3
 800ddec:	683b      	ldr	r3, [r7, #0]
 800ddee:	4413      	add	r3, r2
 800ddf0:	4618      	mov	r0, r3
 800ddf2:	f7fe ff73 	bl	800ccdc <ld_word>
 800ddf6:	4603      	mov	r3, r0
 800ddf8:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800ddfa:	89fb      	ldrh	r3, [r7, #14]
 800ddfc:	2b00      	cmp	r3, #0
 800ddfe:	d00f      	beq.n	800de20 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800de00:	697b      	ldr	r3, [r7, #20]
 800de02:	2bfe      	cmp	r3, #254	; 0xfe
 800de04:	d901      	bls.n	800de0a <pick_lfn+0x66>
 800de06:	2300      	movs	r3, #0
 800de08:	e029      	b.n	800de5e <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800de0a:	89bb      	ldrh	r3, [r7, #12]
 800de0c:	81fb      	strh	r3, [r7, #14]
 800de0e:	697b      	ldr	r3, [r7, #20]
 800de10:	1c5a      	adds	r2, r3, #1
 800de12:	617a      	str	r2, [r7, #20]
 800de14:	005b      	lsls	r3, r3, #1
 800de16:	687a      	ldr	r2, [r7, #4]
 800de18:	4413      	add	r3, r2
 800de1a:	89fa      	ldrh	r2, [r7, #14]
 800de1c:	801a      	strh	r2, [r3, #0]
 800de1e:	e006      	b.n	800de2e <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800de20:	89bb      	ldrh	r3, [r7, #12]
 800de22:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800de26:	4293      	cmp	r3, r2
 800de28:	d001      	beq.n	800de2e <pick_lfn+0x8a>
 800de2a:	2300      	movs	r3, #0
 800de2c:	e017      	b.n	800de5e <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800de2e:	693b      	ldr	r3, [r7, #16]
 800de30:	3301      	adds	r3, #1
 800de32:	613b      	str	r3, [r7, #16]
 800de34:	693b      	ldr	r3, [r7, #16]
 800de36:	2b0c      	cmp	r3, #12
 800de38:	d9d3      	bls.n	800dde2 <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 800de3a:	683b      	ldr	r3, [r7, #0]
 800de3c:	781b      	ldrb	r3, [r3, #0]
 800de3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800de42:	2b00      	cmp	r3, #0
 800de44:	d00a      	beq.n	800de5c <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 800de46:	697b      	ldr	r3, [r7, #20]
 800de48:	2bfe      	cmp	r3, #254	; 0xfe
 800de4a:	d901      	bls.n	800de50 <pick_lfn+0xac>
 800de4c:	2300      	movs	r3, #0
 800de4e:	e006      	b.n	800de5e <pick_lfn+0xba>
		lfnbuf[i] = 0;
 800de50:	697b      	ldr	r3, [r7, #20]
 800de52:	005b      	lsls	r3, r3, #1
 800de54:	687a      	ldr	r2, [r7, #4]
 800de56:	4413      	add	r3, r2
 800de58:	2200      	movs	r2, #0
 800de5a:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 800de5c:	2301      	movs	r3, #1
}
 800de5e:	4618      	mov	r0, r3
 800de60:	3718      	adds	r7, #24
 800de62:	46bd      	mov	sp, r7
 800de64:	bd80      	pop	{r7, pc}
 800de66:	bf00      	nop
 800de68:	0802302c 	.word	0x0802302c

0800de6c <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800de6c:	b580      	push	{r7, lr}
 800de6e:	b088      	sub	sp, #32
 800de70:	af00      	add	r7, sp, #0
 800de72:	60f8      	str	r0, [r7, #12]
 800de74:	60b9      	str	r1, [r7, #8]
 800de76:	4611      	mov	r1, r2
 800de78:	461a      	mov	r2, r3
 800de7a:	460b      	mov	r3, r1
 800de7c:	71fb      	strb	r3, [r7, #7]
 800de7e:	4613      	mov	r3, r2
 800de80:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800de82:	68bb      	ldr	r3, [r7, #8]
 800de84:	330d      	adds	r3, #13
 800de86:	79ba      	ldrb	r2, [r7, #6]
 800de88:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800de8a:	68bb      	ldr	r3, [r7, #8]
 800de8c:	330b      	adds	r3, #11
 800de8e:	220f      	movs	r2, #15
 800de90:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800de92:	68bb      	ldr	r3, [r7, #8]
 800de94:	330c      	adds	r3, #12
 800de96:	2200      	movs	r2, #0
 800de98:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800de9a:	68bb      	ldr	r3, [r7, #8]
 800de9c:	331a      	adds	r3, #26
 800de9e:	2100      	movs	r1, #0
 800dea0:	4618      	mov	r0, r3
 800dea2:	f7fe ff56 	bl	800cd52 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800dea6:	79fb      	ldrb	r3, [r7, #7]
 800dea8:	1e5a      	subs	r2, r3, #1
 800deaa:	4613      	mov	r3, r2
 800deac:	005b      	lsls	r3, r3, #1
 800deae:	4413      	add	r3, r2
 800deb0:	009b      	lsls	r3, r3, #2
 800deb2:	4413      	add	r3, r2
 800deb4:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800deb6:	2300      	movs	r3, #0
 800deb8:	82fb      	strh	r3, [r7, #22]
 800deba:	2300      	movs	r3, #0
 800debc:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800debe:	8afb      	ldrh	r3, [r7, #22]
 800dec0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800dec4:	4293      	cmp	r3, r2
 800dec6:	d007      	beq.n	800ded8 <put_lfn+0x6c>
 800dec8:	69fb      	ldr	r3, [r7, #28]
 800deca:	1c5a      	adds	r2, r3, #1
 800decc:	61fa      	str	r2, [r7, #28]
 800dece:	005b      	lsls	r3, r3, #1
 800ded0:	68fa      	ldr	r2, [r7, #12]
 800ded2:	4413      	add	r3, r2
 800ded4:	881b      	ldrh	r3, [r3, #0]
 800ded6:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800ded8:	4a17      	ldr	r2, [pc, #92]	; (800df38 <put_lfn+0xcc>)
 800deda:	69bb      	ldr	r3, [r7, #24]
 800dedc:	4413      	add	r3, r2
 800dede:	781b      	ldrb	r3, [r3, #0]
 800dee0:	461a      	mov	r2, r3
 800dee2:	68bb      	ldr	r3, [r7, #8]
 800dee4:	4413      	add	r3, r2
 800dee6:	8afa      	ldrh	r2, [r7, #22]
 800dee8:	4611      	mov	r1, r2
 800deea:	4618      	mov	r0, r3
 800deec:	f7fe ff31 	bl	800cd52 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800def0:	8afb      	ldrh	r3, [r7, #22]
 800def2:	2b00      	cmp	r3, #0
 800def4:	d102      	bne.n	800defc <put_lfn+0x90>
 800def6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800defa:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800defc:	69bb      	ldr	r3, [r7, #24]
 800defe:	3301      	adds	r3, #1
 800df00:	61bb      	str	r3, [r7, #24]
 800df02:	69bb      	ldr	r3, [r7, #24]
 800df04:	2b0c      	cmp	r3, #12
 800df06:	d9da      	bls.n	800debe <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800df08:	8afb      	ldrh	r3, [r7, #22]
 800df0a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800df0e:	4293      	cmp	r3, r2
 800df10:	d006      	beq.n	800df20 <put_lfn+0xb4>
 800df12:	69fb      	ldr	r3, [r7, #28]
 800df14:	005b      	lsls	r3, r3, #1
 800df16:	68fa      	ldr	r2, [r7, #12]
 800df18:	4413      	add	r3, r2
 800df1a:	881b      	ldrh	r3, [r3, #0]
 800df1c:	2b00      	cmp	r3, #0
 800df1e:	d103      	bne.n	800df28 <put_lfn+0xbc>
 800df20:	79fb      	ldrb	r3, [r7, #7]
 800df22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800df26:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800df28:	68bb      	ldr	r3, [r7, #8]
 800df2a:	79fa      	ldrb	r2, [r7, #7]
 800df2c:	701a      	strb	r2, [r3, #0]
}
 800df2e:	bf00      	nop
 800df30:	3720      	adds	r7, #32
 800df32:	46bd      	mov	sp, r7
 800df34:	bd80      	pop	{r7, pc}
 800df36:	bf00      	nop
 800df38:	0802302c 	.word	0x0802302c

0800df3c <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800df3c:	b580      	push	{r7, lr}
 800df3e:	b08c      	sub	sp, #48	; 0x30
 800df40:	af00      	add	r7, sp, #0
 800df42:	60f8      	str	r0, [r7, #12]
 800df44:	60b9      	str	r1, [r7, #8]
 800df46:	607a      	str	r2, [r7, #4]
 800df48:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800df4a:	220b      	movs	r2, #11
 800df4c:	68b9      	ldr	r1, [r7, #8]
 800df4e:	68f8      	ldr	r0, [r7, #12]
 800df50:	f7fe ff46 	bl	800cde0 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800df54:	683b      	ldr	r3, [r7, #0]
 800df56:	2b05      	cmp	r3, #5
 800df58:	d92b      	bls.n	800dfb2 <gen_numname+0x76>
		sr = seq;
 800df5a:	683b      	ldr	r3, [r7, #0]
 800df5c:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800df5e:	e022      	b.n	800dfa6 <gen_numname+0x6a>
			wc = *lfn++;
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	1c9a      	adds	r2, r3, #2
 800df64:	607a      	str	r2, [r7, #4]
 800df66:	881b      	ldrh	r3, [r3, #0]
 800df68:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800df6a:	2300      	movs	r3, #0
 800df6c:	62bb      	str	r3, [r7, #40]	; 0x28
 800df6e:	e017      	b.n	800dfa0 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800df70:	69fb      	ldr	r3, [r7, #28]
 800df72:	005a      	lsls	r2, r3, #1
 800df74:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800df76:	f003 0301 	and.w	r3, r3, #1
 800df7a:	4413      	add	r3, r2
 800df7c:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800df7e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800df80:	085b      	lsrs	r3, r3, #1
 800df82:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800df84:	69fb      	ldr	r3, [r7, #28]
 800df86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800df8a:	2b00      	cmp	r3, #0
 800df8c:	d005      	beq.n	800df9a <gen_numname+0x5e>
 800df8e:	69fb      	ldr	r3, [r7, #28]
 800df90:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 800df94:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 800df98:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800df9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df9c:	3301      	adds	r3, #1
 800df9e:	62bb      	str	r3, [r7, #40]	; 0x28
 800dfa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfa2:	2b0f      	cmp	r3, #15
 800dfa4:	d9e4      	bls.n	800df70 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	881b      	ldrh	r3, [r3, #0]
 800dfaa:	2b00      	cmp	r3, #0
 800dfac:	d1d8      	bne.n	800df60 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800dfae:	69fb      	ldr	r3, [r7, #28]
 800dfb0:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800dfb2:	2307      	movs	r3, #7
 800dfb4:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800dfb6:	683b      	ldr	r3, [r7, #0]
 800dfb8:	b2db      	uxtb	r3, r3
 800dfba:	f003 030f 	and.w	r3, r3, #15
 800dfbe:	b2db      	uxtb	r3, r3
 800dfc0:	3330      	adds	r3, #48	; 0x30
 800dfc2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800dfc6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800dfca:	2b39      	cmp	r3, #57	; 0x39
 800dfcc:	d904      	bls.n	800dfd8 <gen_numname+0x9c>
 800dfce:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800dfd2:	3307      	adds	r3, #7
 800dfd4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800dfd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfda:	1e5a      	subs	r2, r3, #1
 800dfdc:	62ba      	str	r2, [r7, #40]	; 0x28
 800dfde:	3330      	adds	r3, #48	; 0x30
 800dfe0:	443b      	add	r3, r7
 800dfe2:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800dfe6:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800dfea:	683b      	ldr	r3, [r7, #0]
 800dfec:	091b      	lsrs	r3, r3, #4
 800dfee:	603b      	str	r3, [r7, #0]
	} while (seq);
 800dff0:	683b      	ldr	r3, [r7, #0]
 800dff2:	2b00      	cmp	r3, #0
 800dff4:	d1df      	bne.n	800dfb6 <gen_numname+0x7a>
	ns[i] = '~';
 800dff6:	f107 0214 	add.w	r2, r7, #20
 800dffa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dffc:	4413      	add	r3, r2
 800dffe:	227e      	movs	r2, #126	; 0x7e
 800e000:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800e002:	2300      	movs	r3, #0
 800e004:	627b      	str	r3, [r7, #36]	; 0x24
 800e006:	e002      	b.n	800e00e <gen_numname+0xd2>
 800e008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e00a:	3301      	adds	r3, #1
 800e00c:	627b      	str	r3, [r7, #36]	; 0x24
 800e00e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e010:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e012:	429a      	cmp	r2, r3
 800e014:	d205      	bcs.n	800e022 <gen_numname+0xe6>
 800e016:	68fa      	ldr	r2, [r7, #12]
 800e018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e01a:	4413      	add	r3, r2
 800e01c:	781b      	ldrb	r3, [r3, #0]
 800e01e:	2b20      	cmp	r3, #32
 800e020:	d1f2      	bne.n	800e008 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800e022:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e024:	2b07      	cmp	r3, #7
 800e026:	d807      	bhi.n	800e038 <gen_numname+0xfc>
 800e028:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e02a:	1c5a      	adds	r2, r3, #1
 800e02c:	62ba      	str	r2, [r7, #40]	; 0x28
 800e02e:	3330      	adds	r3, #48	; 0x30
 800e030:	443b      	add	r3, r7
 800e032:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800e036:	e000      	b.n	800e03a <gen_numname+0xfe>
 800e038:	2120      	movs	r1, #32
 800e03a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e03c:	1c5a      	adds	r2, r3, #1
 800e03e:	627a      	str	r2, [r7, #36]	; 0x24
 800e040:	68fa      	ldr	r2, [r7, #12]
 800e042:	4413      	add	r3, r2
 800e044:	460a      	mov	r2, r1
 800e046:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800e048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e04a:	2b07      	cmp	r3, #7
 800e04c:	d9e9      	bls.n	800e022 <gen_numname+0xe6>
}
 800e04e:	bf00      	nop
 800e050:	bf00      	nop
 800e052:	3730      	adds	r7, #48	; 0x30
 800e054:	46bd      	mov	sp, r7
 800e056:	bd80      	pop	{r7, pc}

0800e058 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800e058:	b480      	push	{r7}
 800e05a:	b085      	sub	sp, #20
 800e05c:	af00      	add	r7, sp, #0
 800e05e:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800e060:	2300      	movs	r3, #0
 800e062:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800e064:	230b      	movs	r3, #11
 800e066:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800e068:	7bfb      	ldrb	r3, [r7, #15]
 800e06a:	b2da      	uxtb	r2, r3
 800e06c:	0852      	lsrs	r2, r2, #1
 800e06e:	01db      	lsls	r3, r3, #7
 800e070:	4313      	orrs	r3, r2
 800e072:	b2da      	uxtb	r2, r3
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	1c59      	adds	r1, r3, #1
 800e078:	6079      	str	r1, [r7, #4]
 800e07a:	781b      	ldrb	r3, [r3, #0]
 800e07c:	4413      	add	r3, r2
 800e07e:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800e080:	68bb      	ldr	r3, [r7, #8]
 800e082:	3b01      	subs	r3, #1
 800e084:	60bb      	str	r3, [r7, #8]
 800e086:	68bb      	ldr	r3, [r7, #8]
 800e088:	2b00      	cmp	r3, #0
 800e08a:	d1ed      	bne.n	800e068 <sum_sfn+0x10>
	return sum;
 800e08c:	7bfb      	ldrb	r3, [r7, #15]
}
 800e08e:	4618      	mov	r0, r3
 800e090:	3714      	adds	r7, #20
 800e092:	46bd      	mov	sp, r7
 800e094:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e098:	4770      	bx	lr

0800e09a <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800e09a:	b580      	push	{r7, lr}
 800e09c:	b086      	sub	sp, #24
 800e09e:	af00      	add	r7, sp, #0
 800e0a0:	6078      	str	r0, [r7, #4]
 800e0a2:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800e0a4:	2304      	movs	r3, #4
 800e0a6:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	681b      	ldr	r3, [r3, #0]
 800e0ac:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 800e0ae:	23ff      	movs	r3, #255	; 0xff
 800e0b0:	757b      	strb	r3, [r7, #21]
 800e0b2:	23ff      	movs	r3, #255	; 0xff
 800e0b4:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 800e0b6:	e081      	b.n	800e1bc <dir_read+0x122>
		res = move_window(fs, dp->sect);
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	69db      	ldr	r3, [r3, #28]
 800e0bc:	4619      	mov	r1, r3
 800e0be:	6938      	ldr	r0, [r7, #16]
 800e0c0:	f7ff f8bc 	bl	800d23c <move_window>
 800e0c4:	4603      	mov	r3, r0
 800e0c6:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800e0c8:	7dfb      	ldrb	r3, [r7, #23]
 800e0ca:	2b00      	cmp	r3, #0
 800e0cc:	d17c      	bne.n	800e1c8 <dir_read+0x12e>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	6a1b      	ldr	r3, [r3, #32]
 800e0d2:	781b      	ldrb	r3, [r3, #0]
 800e0d4:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 800e0d6:	7dbb      	ldrb	r3, [r7, #22]
 800e0d8:	2b00      	cmp	r3, #0
 800e0da:	d102      	bne.n	800e0e2 <dir_read+0x48>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800e0dc:	2304      	movs	r3, #4
 800e0de:	75fb      	strb	r3, [r7, #23]
 800e0e0:	e077      	b.n	800e1d2 <dir_read+0x138>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800e0e2:	687b      	ldr	r3, [r7, #4]
 800e0e4:	6a1b      	ldr	r3, [r3, #32]
 800e0e6:	330b      	adds	r3, #11
 800e0e8:	781b      	ldrb	r3, [r3, #0]
 800e0ea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e0ee:	73fb      	strb	r3, [r7, #15]
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	7bfa      	ldrb	r2, [r7, #15]
 800e0f4:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 800e0f6:	7dbb      	ldrb	r3, [r7, #22]
 800e0f8:	2be5      	cmp	r3, #229	; 0xe5
 800e0fa:	d00e      	beq.n	800e11a <dir_read+0x80>
 800e0fc:	7dbb      	ldrb	r3, [r7, #22]
 800e0fe:	2b2e      	cmp	r3, #46	; 0x2e
 800e100:	d00b      	beq.n	800e11a <dir_read+0x80>
 800e102:	7bfb      	ldrb	r3, [r7, #15]
 800e104:	f023 0320 	bic.w	r3, r3, #32
 800e108:	2b08      	cmp	r3, #8
 800e10a:	bf0c      	ite	eq
 800e10c:	2301      	moveq	r3, #1
 800e10e:	2300      	movne	r3, #0
 800e110:	b2db      	uxtb	r3, r3
 800e112:	461a      	mov	r2, r3
 800e114:	683b      	ldr	r3, [r7, #0]
 800e116:	4293      	cmp	r3, r2
 800e118:	d002      	beq.n	800e120 <dir_read+0x86>
				ord = 0xFF;
 800e11a:	23ff      	movs	r3, #255	; 0xff
 800e11c:	757b      	strb	r3, [r7, #21]
 800e11e:	e044      	b.n	800e1aa <dir_read+0x110>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 800e120:	7bfb      	ldrb	r3, [r7, #15]
 800e122:	2b0f      	cmp	r3, #15
 800e124:	d12f      	bne.n	800e186 <dir_read+0xec>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 800e126:	7dbb      	ldrb	r3, [r7, #22]
 800e128:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e12c:	2b00      	cmp	r3, #0
 800e12e:	d00d      	beq.n	800e14c <dir_read+0xb2>
						sum = dp->dir[LDIR_Chksum];
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	6a1b      	ldr	r3, [r3, #32]
 800e134:	7b5b      	ldrb	r3, [r3, #13]
 800e136:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 800e138:	7dbb      	ldrb	r3, [r7, #22]
 800e13a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e13e:	75bb      	strb	r3, [r7, #22]
 800e140:	7dbb      	ldrb	r3, [r7, #22]
 800e142:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 800e144:	687b      	ldr	r3, [r7, #4]
 800e146:	695a      	ldr	r2, [r3, #20]
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800e14c:	7dba      	ldrb	r2, [r7, #22]
 800e14e:	7d7b      	ldrb	r3, [r7, #21]
 800e150:	429a      	cmp	r2, r3
 800e152:	d115      	bne.n	800e180 <dir_read+0xe6>
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	6a1b      	ldr	r3, [r3, #32]
 800e158:	330d      	adds	r3, #13
 800e15a:	781b      	ldrb	r3, [r3, #0]
 800e15c:	7d3a      	ldrb	r2, [r7, #20]
 800e15e:	429a      	cmp	r2, r3
 800e160:	d10e      	bne.n	800e180 <dir_read+0xe6>
 800e162:	693b      	ldr	r3, [r7, #16]
 800e164:	68da      	ldr	r2, [r3, #12]
 800e166:	687b      	ldr	r3, [r7, #4]
 800e168:	6a1b      	ldr	r3, [r3, #32]
 800e16a:	4619      	mov	r1, r3
 800e16c:	4610      	mov	r0, r2
 800e16e:	f7ff fe19 	bl	800dda4 <pick_lfn>
 800e172:	4603      	mov	r3, r0
 800e174:	2b00      	cmp	r3, #0
 800e176:	d003      	beq.n	800e180 <dir_read+0xe6>
 800e178:	7d7b      	ldrb	r3, [r7, #21]
 800e17a:	3b01      	subs	r3, #1
 800e17c:	b2db      	uxtb	r3, r3
 800e17e:	e000      	b.n	800e182 <dir_read+0xe8>
 800e180:	23ff      	movs	r3, #255	; 0xff
 800e182:	757b      	strb	r3, [r7, #21]
 800e184:	e011      	b.n	800e1aa <dir_read+0x110>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 800e186:	7d7b      	ldrb	r3, [r7, #21]
 800e188:	2b00      	cmp	r3, #0
 800e18a:	d109      	bne.n	800e1a0 <dir_read+0x106>
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	6a1b      	ldr	r3, [r3, #32]
 800e190:	4618      	mov	r0, r3
 800e192:	f7ff ff61 	bl	800e058 <sum_sfn>
 800e196:	4603      	mov	r3, r0
 800e198:	461a      	mov	r2, r3
 800e19a:	7d3b      	ldrb	r3, [r7, #20]
 800e19c:	4293      	cmp	r3, r2
 800e19e:	d015      	beq.n	800e1cc <dir_read+0x132>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	f04f 32ff 	mov.w	r2, #4294967295
 800e1a6:	631a      	str	r2, [r3, #48]	; 0x30
					}
					break;
 800e1a8:	e010      	b.n	800e1cc <dir_read+0x132>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800e1aa:	2100      	movs	r1, #0
 800e1ac:	6878      	ldr	r0, [r7, #4]
 800e1ae:	f7ff fc3e 	bl	800da2e <dir_next>
 800e1b2:	4603      	mov	r3, r0
 800e1b4:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800e1b6:	7dfb      	ldrb	r3, [r7, #23]
 800e1b8:	2b00      	cmp	r3, #0
 800e1ba:	d109      	bne.n	800e1d0 <dir_read+0x136>
	while (dp->sect) {
 800e1bc:	687b      	ldr	r3, [r7, #4]
 800e1be:	69db      	ldr	r3, [r3, #28]
 800e1c0:	2b00      	cmp	r3, #0
 800e1c2:	f47f af79 	bne.w	800e0b8 <dir_read+0x1e>
 800e1c6:	e004      	b.n	800e1d2 <dir_read+0x138>
		if (res != FR_OK) break;
 800e1c8:	bf00      	nop
 800e1ca:	e002      	b.n	800e1d2 <dir_read+0x138>
					break;
 800e1cc:	bf00      	nop
 800e1ce:	e000      	b.n	800e1d2 <dir_read+0x138>
		if (res != FR_OK) break;
 800e1d0:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800e1d2:	7dfb      	ldrb	r3, [r7, #23]
 800e1d4:	2b00      	cmp	r3, #0
 800e1d6:	d002      	beq.n	800e1de <dir_read+0x144>
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	2200      	movs	r2, #0
 800e1dc:	61da      	str	r2, [r3, #28]
	return res;
 800e1de:	7dfb      	ldrb	r3, [r7, #23]
}
 800e1e0:	4618      	mov	r0, r3
 800e1e2:	3718      	adds	r7, #24
 800e1e4:	46bd      	mov	sp, r7
 800e1e6:	bd80      	pop	{r7, pc}

0800e1e8 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800e1e8:	b580      	push	{r7, lr}
 800e1ea:	b086      	sub	sp, #24
 800e1ec:	af00      	add	r7, sp, #0
 800e1ee:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800e1f0:	687b      	ldr	r3, [r7, #4]
 800e1f2:	681b      	ldr	r3, [r3, #0]
 800e1f4:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800e1f6:	2100      	movs	r1, #0
 800e1f8:	6878      	ldr	r0, [r7, #4]
 800e1fa:	f7ff fb9d 	bl	800d938 <dir_sdi>
 800e1fe:	4603      	mov	r3, r0
 800e200:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800e202:	7dfb      	ldrb	r3, [r7, #23]
 800e204:	2b00      	cmp	r3, #0
 800e206:	d001      	beq.n	800e20c <dir_find+0x24>
 800e208:	7dfb      	ldrb	r3, [r7, #23]
 800e20a:	e0a9      	b.n	800e360 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800e20c:	23ff      	movs	r3, #255	; 0xff
 800e20e:	753b      	strb	r3, [r7, #20]
 800e210:	7d3b      	ldrb	r3, [r7, #20]
 800e212:	757b      	strb	r3, [r7, #21]
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	f04f 32ff 	mov.w	r2, #4294967295
 800e21a:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	69db      	ldr	r3, [r3, #28]
 800e220:	4619      	mov	r1, r3
 800e222:	6938      	ldr	r0, [r7, #16]
 800e224:	f7ff f80a 	bl	800d23c <move_window>
 800e228:	4603      	mov	r3, r0
 800e22a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800e22c:	7dfb      	ldrb	r3, [r7, #23]
 800e22e:	2b00      	cmp	r3, #0
 800e230:	f040 8090 	bne.w	800e354 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	6a1b      	ldr	r3, [r3, #32]
 800e238:	781b      	ldrb	r3, [r3, #0]
 800e23a:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800e23c:	7dbb      	ldrb	r3, [r7, #22]
 800e23e:	2b00      	cmp	r3, #0
 800e240:	d102      	bne.n	800e248 <dir_find+0x60>
 800e242:	2304      	movs	r3, #4
 800e244:	75fb      	strb	r3, [r7, #23]
 800e246:	e08a      	b.n	800e35e <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	6a1b      	ldr	r3, [r3, #32]
 800e24c:	330b      	adds	r3, #11
 800e24e:	781b      	ldrb	r3, [r3, #0]
 800e250:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e254:	73fb      	strb	r3, [r7, #15]
 800e256:	687b      	ldr	r3, [r7, #4]
 800e258:	7bfa      	ldrb	r2, [r7, #15]
 800e25a:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800e25c:	7dbb      	ldrb	r3, [r7, #22]
 800e25e:	2be5      	cmp	r3, #229	; 0xe5
 800e260:	d007      	beq.n	800e272 <dir_find+0x8a>
 800e262:	7bfb      	ldrb	r3, [r7, #15]
 800e264:	f003 0308 	and.w	r3, r3, #8
 800e268:	2b00      	cmp	r3, #0
 800e26a:	d009      	beq.n	800e280 <dir_find+0x98>
 800e26c:	7bfb      	ldrb	r3, [r7, #15]
 800e26e:	2b0f      	cmp	r3, #15
 800e270:	d006      	beq.n	800e280 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800e272:	23ff      	movs	r3, #255	; 0xff
 800e274:	757b      	strb	r3, [r7, #21]
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	f04f 32ff 	mov.w	r2, #4294967295
 800e27c:	631a      	str	r2, [r3, #48]	; 0x30
 800e27e:	e05e      	b.n	800e33e <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800e280:	7bfb      	ldrb	r3, [r7, #15]
 800e282:	2b0f      	cmp	r3, #15
 800e284:	d136      	bne.n	800e2f4 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800e286:	687b      	ldr	r3, [r7, #4]
 800e288:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800e28c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e290:	2b00      	cmp	r3, #0
 800e292:	d154      	bne.n	800e33e <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800e294:	7dbb      	ldrb	r3, [r7, #22]
 800e296:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e29a:	2b00      	cmp	r3, #0
 800e29c:	d00d      	beq.n	800e2ba <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800e29e:	687b      	ldr	r3, [r7, #4]
 800e2a0:	6a1b      	ldr	r3, [r3, #32]
 800e2a2:	7b5b      	ldrb	r3, [r3, #13]
 800e2a4:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800e2a6:	7dbb      	ldrb	r3, [r7, #22]
 800e2a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e2ac:	75bb      	strb	r3, [r7, #22]
 800e2ae:	7dbb      	ldrb	r3, [r7, #22]
 800e2b0:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800e2b2:	687b      	ldr	r3, [r7, #4]
 800e2b4:	695a      	ldr	r2, [r3, #20]
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800e2ba:	7dba      	ldrb	r2, [r7, #22]
 800e2bc:	7d7b      	ldrb	r3, [r7, #21]
 800e2be:	429a      	cmp	r2, r3
 800e2c0:	d115      	bne.n	800e2ee <dir_find+0x106>
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	6a1b      	ldr	r3, [r3, #32]
 800e2c6:	330d      	adds	r3, #13
 800e2c8:	781b      	ldrb	r3, [r3, #0]
 800e2ca:	7d3a      	ldrb	r2, [r7, #20]
 800e2cc:	429a      	cmp	r2, r3
 800e2ce:	d10e      	bne.n	800e2ee <dir_find+0x106>
 800e2d0:	693b      	ldr	r3, [r7, #16]
 800e2d2:	68da      	ldr	r2, [r3, #12]
 800e2d4:	687b      	ldr	r3, [r7, #4]
 800e2d6:	6a1b      	ldr	r3, [r3, #32]
 800e2d8:	4619      	mov	r1, r3
 800e2da:	4610      	mov	r0, r2
 800e2dc:	f7ff fcf2 	bl	800dcc4 <cmp_lfn>
 800e2e0:	4603      	mov	r3, r0
 800e2e2:	2b00      	cmp	r3, #0
 800e2e4:	d003      	beq.n	800e2ee <dir_find+0x106>
 800e2e6:	7d7b      	ldrb	r3, [r7, #21]
 800e2e8:	3b01      	subs	r3, #1
 800e2ea:	b2db      	uxtb	r3, r3
 800e2ec:	e000      	b.n	800e2f0 <dir_find+0x108>
 800e2ee:	23ff      	movs	r3, #255	; 0xff
 800e2f0:	757b      	strb	r3, [r7, #21]
 800e2f2:	e024      	b.n	800e33e <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800e2f4:	7d7b      	ldrb	r3, [r7, #21]
 800e2f6:	2b00      	cmp	r3, #0
 800e2f8:	d109      	bne.n	800e30e <dir_find+0x126>
 800e2fa:	687b      	ldr	r3, [r7, #4]
 800e2fc:	6a1b      	ldr	r3, [r3, #32]
 800e2fe:	4618      	mov	r0, r3
 800e300:	f7ff feaa 	bl	800e058 <sum_sfn>
 800e304:	4603      	mov	r3, r0
 800e306:	461a      	mov	r2, r3
 800e308:	7d3b      	ldrb	r3, [r7, #20]
 800e30a:	4293      	cmp	r3, r2
 800e30c:	d024      	beq.n	800e358 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800e30e:	687b      	ldr	r3, [r7, #4]
 800e310:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800e314:	f003 0301 	and.w	r3, r3, #1
 800e318:	2b00      	cmp	r3, #0
 800e31a:	d10a      	bne.n	800e332 <dir_find+0x14a>
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	6a18      	ldr	r0, [r3, #32]
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	3324      	adds	r3, #36	; 0x24
 800e324:	220b      	movs	r2, #11
 800e326:	4619      	mov	r1, r3
 800e328:	f7fe fd96 	bl	800ce58 <mem_cmp>
 800e32c:	4603      	mov	r3, r0
 800e32e:	2b00      	cmp	r3, #0
 800e330:	d014      	beq.n	800e35c <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800e332:	23ff      	movs	r3, #255	; 0xff
 800e334:	757b      	strb	r3, [r7, #21]
 800e336:	687b      	ldr	r3, [r7, #4]
 800e338:	f04f 32ff 	mov.w	r2, #4294967295
 800e33c:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800e33e:	2100      	movs	r1, #0
 800e340:	6878      	ldr	r0, [r7, #4]
 800e342:	f7ff fb74 	bl	800da2e <dir_next>
 800e346:	4603      	mov	r3, r0
 800e348:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800e34a:	7dfb      	ldrb	r3, [r7, #23]
 800e34c:	2b00      	cmp	r3, #0
 800e34e:	f43f af65 	beq.w	800e21c <dir_find+0x34>
 800e352:	e004      	b.n	800e35e <dir_find+0x176>
		if (res != FR_OK) break;
 800e354:	bf00      	nop
 800e356:	e002      	b.n	800e35e <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800e358:	bf00      	nop
 800e35a:	e000      	b.n	800e35e <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800e35c:	bf00      	nop

	return res;
 800e35e:	7dfb      	ldrb	r3, [r7, #23]
}
 800e360:	4618      	mov	r0, r3
 800e362:	3718      	adds	r7, #24
 800e364:	46bd      	mov	sp, r7
 800e366:	bd80      	pop	{r7, pc}

0800e368 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800e368:	b580      	push	{r7, lr}
 800e36a:	b08c      	sub	sp, #48	; 0x30
 800e36c:	af00      	add	r7, sp, #0
 800e36e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800e370:	687b      	ldr	r3, [r7, #4]
 800e372:	681b      	ldr	r3, [r3, #0]
 800e374:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800e37c:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800e380:	2b00      	cmp	r3, #0
 800e382:	d001      	beq.n	800e388 <dir_register+0x20>
 800e384:	2306      	movs	r3, #6
 800e386:	e0e0      	b.n	800e54a <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800e388:	2300      	movs	r3, #0
 800e38a:	627b      	str	r3, [r7, #36]	; 0x24
 800e38c:	e002      	b.n	800e394 <dir_register+0x2c>
 800e38e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e390:	3301      	adds	r3, #1
 800e392:	627b      	str	r3, [r7, #36]	; 0x24
 800e394:	69fb      	ldr	r3, [r7, #28]
 800e396:	68da      	ldr	r2, [r3, #12]
 800e398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e39a:	005b      	lsls	r3, r3, #1
 800e39c:	4413      	add	r3, r2
 800e39e:	881b      	ldrh	r3, [r3, #0]
 800e3a0:	2b00      	cmp	r3, #0
 800e3a2:	d1f4      	bne.n	800e38e <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800e3aa:	f107 030c 	add.w	r3, r7, #12
 800e3ae:	220c      	movs	r2, #12
 800e3b0:	4618      	mov	r0, r3
 800e3b2:	f7fe fd15 	bl	800cde0 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800e3b6:	7dfb      	ldrb	r3, [r7, #23]
 800e3b8:	f003 0301 	and.w	r3, r3, #1
 800e3bc:	2b00      	cmp	r3, #0
 800e3be:	d032      	beq.n	800e426 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	2240      	movs	r2, #64	; 0x40
 800e3c4:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 800e3c8:	2301      	movs	r3, #1
 800e3ca:	62bb      	str	r3, [r7, #40]	; 0x28
 800e3cc:	e016      	b.n	800e3fc <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	f103 0024 	add.w	r0, r3, #36	; 0x24
 800e3d4:	69fb      	ldr	r3, [r7, #28]
 800e3d6:	68da      	ldr	r2, [r3, #12]
 800e3d8:	f107 010c 	add.w	r1, r7, #12
 800e3dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3de:	f7ff fdad 	bl	800df3c <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800e3e2:	6878      	ldr	r0, [r7, #4]
 800e3e4:	f7ff ff00 	bl	800e1e8 <dir_find>
 800e3e8:	4603      	mov	r3, r0
 800e3ea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800e3ee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e3f2:	2b00      	cmp	r3, #0
 800e3f4:	d106      	bne.n	800e404 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800e3f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3f8:	3301      	adds	r3, #1
 800e3fa:	62bb      	str	r3, [r7, #40]	; 0x28
 800e3fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3fe:	2b63      	cmp	r3, #99	; 0x63
 800e400:	d9e5      	bls.n	800e3ce <dir_register+0x66>
 800e402:	e000      	b.n	800e406 <dir_register+0x9e>
			if (res != FR_OK) break;
 800e404:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800e406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e408:	2b64      	cmp	r3, #100	; 0x64
 800e40a:	d101      	bne.n	800e410 <dir_register+0xa8>
 800e40c:	2307      	movs	r3, #7
 800e40e:	e09c      	b.n	800e54a <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800e410:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e414:	2b04      	cmp	r3, #4
 800e416:	d002      	beq.n	800e41e <dir_register+0xb6>
 800e418:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e41c:	e095      	b.n	800e54a <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800e41e:	7dfa      	ldrb	r2, [r7, #23]
 800e420:	687b      	ldr	r3, [r7, #4]
 800e422:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800e426:	7dfb      	ldrb	r3, [r7, #23]
 800e428:	f003 0302 	and.w	r3, r3, #2
 800e42c:	2b00      	cmp	r3, #0
 800e42e:	d007      	beq.n	800e440 <dir_register+0xd8>
 800e430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e432:	330c      	adds	r3, #12
 800e434:	4a47      	ldr	r2, [pc, #284]	; (800e554 <dir_register+0x1ec>)
 800e436:	fba2 2303 	umull	r2, r3, r2, r3
 800e43a:	089b      	lsrs	r3, r3, #2
 800e43c:	3301      	adds	r3, #1
 800e43e:	e000      	b.n	800e442 <dir_register+0xda>
 800e440:	2301      	movs	r3, #1
 800e442:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800e444:	6a39      	ldr	r1, [r7, #32]
 800e446:	6878      	ldr	r0, [r7, #4]
 800e448:	f7ff fbb6 	bl	800dbb8 <dir_alloc>
 800e44c:	4603      	mov	r3, r0
 800e44e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800e452:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e456:	2b00      	cmp	r3, #0
 800e458:	d148      	bne.n	800e4ec <dir_register+0x184>
 800e45a:	6a3b      	ldr	r3, [r7, #32]
 800e45c:	3b01      	subs	r3, #1
 800e45e:	623b      	str	r3, [r7, #32]
 800e460:	6a3b      	ldr	r3, [r7, #32]
 800e462:	2b00      	cmp	r3, #0
 800e464:	d042      	beq.n	800e4ec <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800e466:	687b      	ldr	r3, [r7, #4]
 800e468:	695a      	ldr	r2, [r3, #20]
 800e46a:	6a3b      	ldr	r3, [r7, #32]
 800e46c:	015b      	lsls	r3, r3, #5
 800e46e:	1ad3      	subs	r3, r2, r3
 800e470:	4619      	mov	r1, r3
 800e472:	6878      	ldr	r0, [r7, #4]
 800e474:	f7ff fa60 	bl	800d938 <dir_sdi>
 800e478:	4603      	mov	r3, r0
 800e47a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800e47e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e482:	2b00      	cmp	r3, #0
 800e484:	d132      	bne.n	800e4ec <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800e486:	687b      	ldr	r3, [r7, #4]
 800e488:	3324      	adds	r3, #36	; 0x24
 800e48a:	4618      	mov	r0, r3
 800e48c:	f7ff fde4 	bl	800e058 <sum_sfn>
 800e490:	4603      	mov	r3, r0
 800e492:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	69db      	ldr	r3, [r3, #28]
 800e498:	4619      	mov	r1, r3
 800e49a:	69f8      	ldr	r0, [r7, #28]
 800e49c:	f7fe fece 	bl	800d23c <move_window>
 800e4a0:	4603      	mov	r3, r0
 800e4a2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800e4a6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e4aa:	2b00      	cmp	r3, #0
 800e4ac:	d11d      	bne.n	800e4ea <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800e4ae:	69fb      	ldr	r3, [r7, #28]
 800e4b0:	68d8      	ldr	r0, [r3, #12]
 800e4b2:	687b      	ldr	r3, [r7, #4]
 800e4b4:	6a19      	ldr	r1, [r3, #32]
 800e4b6:	6a3b      	ldr	r3, [r7, #32]
 800e4b8:	b2da      	uxtb	r2, r3
 800e4ba:	7efb      	ldrb	r3, [r7, #27]
 800e4bc:	f7ff fcd6 	bl	800de6c <put_lfn>
				fs->wflag = 1;
 800e4c0:	69fb      	ldr	r3, [r7, #28]
 800e4c2:	2201      	movs	r2, #1
 800e4c4:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800e4c6:	2100      	movs	r1, #0
 800e4c8:	6878      	ldr	r0, [r7, #4]
 800e4ca:	f7ff fab0 	bl	800da2e <dir_next>
 800e4ce:	4603      	mov	r3, r0
 800e4d0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800e4d4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e4d8:	2b00      	cmp	r3, #0
 800e4da:	d107      	bne.n	800e4ec <dir_register+0x184>
 800e4dc:	6a3b      	ldr	r3, [r7, #32]
 800e4de:	3b01      	subs	r3, #1
 800e4e0:	623b      	str	r3, [r7, #32]
 800e4e2:	6a3b      	ldr	r3, [r7, #32]
 800e4e4:	2b00      	cmp	r3, #0
 800e4e6:	d1d5      	bne.n	800e494 <dir_register+0x12c>
 800e4e8:	e000      	b.n	800e4ec <dir_register+0x184>
				if (res != FR_OK) break;
 800e4ea:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800e4ec:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e4f0:	2b00      	cmp	r3, #0
 800e4f2:	d128      	bne.n	800e546 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	69db      	ldr	r3, [r3, #28]
 800e4f8:	4619      	mov	r1, r3
 800e4fa:	69f8      	ldr	r0, [r7, #28]
 800e4fc:	f7fe fe9e 	bl	800d23c <move_window>
 800e500:	4603      	mov	r3, r0
 800e502:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800e506:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e50a:	2b00      	cmp	r3, #0
 800e50c:	d11b      	bne.n	800e546 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800e50e:	687b      	ldr	r3, [r7, #4]
 800e510:	6a1b      	ldr	r3, [r3, #32]
 800e512:	2220      	movs	r2, #32
 800e514:	2100      	movs	r1, #0
 800e516:	4618      	mov	r0, r3
 800e518:	f7fe fc83 	bl	800ce22 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800e51c:	687b      	ldr	r3, [r7, #4]
 800e51e:	6a18      	ldr	r0, [r3, #32]
 800e520:	687b      	ldr	r3, [r7, #4]
 800e522:	3324      	adds	r3, #36	; 0x24
 800e524:	220b      	movs	r2, #11
 800e526:	4619      	mov	r1, r3
 800e528:	f7fe fc5a 	bl	800cde0 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800e52c:	687b      	ldr	r3, [r7, #4]
 800e52e:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800e532:	687b      	ldr	r3, [r7, #4]
 800e534:	6a1b      	ldr	r3, [r3, #32]
 800e536:	330c      	adds	r3, #12
 800e538:	f002 0218 	and.w	r2, r2, #24
 800e53c:	b2d2      	uxtb	r2, r2
 800e53e:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800e540:	69fb      	ldr	r3, [r7, #28]
 800e542:	2201      	movs	r2, #1
 800e544:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800e546:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800e54a:	4618      	mov	r0, r3
 800e54c:	3730      	adds	r7, #48	; 0x30
 800e54e:	46bd      	mov	sp, r7
 800e550:	bd80      	pop	{r7, pc}
 800e552:	bf00      	nop
 800e554:	4ec4ec4f 	.word	0x4ec4ec4f

0800e558 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800e558:	b580      	push	{r7, lr}
 800e55a:	b088      	sub	sp, #32
 800e55c:	af00      	add	r7, sp, #0
 800e55e:	6078      	str	r0, [r7, #4]
 800e560:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 800e562:	687b      	ldr	r3, [r7, #4]
 800e564:	681b      	ldr	r3, [r3, #0]
 800e566:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 800e568:	683b      	ldr	r3, [r7, #0]
 800e56a:	2200      	movs	r2, #0
 800e56c:	759a      	strb	r2, [r3, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	69db      	ldr	r3, [r3, #28]
 800e572:	2b00      	cmp	r3, #0
 800e574:	f000 80c9 	beq.w	800e70a <get_fileinfo+0x1b2>
		get_xdir_info(fs->dirbuf, fno);
		return;
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e57c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e580:	d032      	beq.n	800e5e8 <get_fileinfo+0x90>
			i = j = 0;
 800e582:	2300      	movs	r3, #0
 800e584:	61bb      	str	r3, [r7, #24]
 800e586:	69bb      	ldr	r3, [r7, #24]
 800e588:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800e58a:	e01b      	b.n	800e5c4 <get_fileinfo+0x6c>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 800e58c:	89fb      	ldrh	r3, [r7, #14]
 800e58e:	2100      	movs	r1, #0
 800e590:	4618      	mov	r0, r3
 800e592:	f002 fa31 	bl	80109f8 <ff_convert>
 800e596:	4603      	mov	r3, r0
 800e598:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 800e59a:	89fb      	ldrh	r3, [r7, #14]
 800e59c:	2b00      	cmp	r3, #0
 800e59e:	d102      	bne.n	800e5a6 <get_fileinfo+0x4e>
 800e5a0:	2300      	movs	r3, #0
 800e5a2:	61fb      	str	r3, [r7, #28]
 800e5a4:	e01a      	b.n	800e5dc <get_fileinfo+0x84>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 800e5a6:	69fb      	ldr	r3, [r7, #28]
 800e5a8:	2bfe      	cmp	r3, #254	; 0xfe
 800e5aa:	d902      	bls.n	800e5b2 <get_fileinfo+0x5a>
 800e5ac:	2300      	movs	r3, #0
 800e5ae:	61fb      	str	r3, [r7, #28]
 800e5b0:	e014      	b.n	800e5dc <get_fileinfo+0x84>
				fno->fname[i++] = (TCHAR)w;
 800e5b2:	69fb      	ldr	r3, [r7, #28]
 800e5b4:	1c5a      	adds	r2, r3, #1
 800e5b6:	61fa      	str	r2, [r7, #28]
 800e5b8:	89fa      	ldrh	r2, [r7, #14]
 800e5ba:	b2d1      	uxtb	r1, r2
 800e5bc:	683a      	ldr	r2, [r7, #0]
 800e5be:	4413      	add	r3, r2
 800e5c0:	460a      	mov	r2, r1
 800e5c2:	759a      	strb	r2, [r3, #22]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800e5c4:	693b      	ldr	r3, [r7, #16]
 800e5c6:	68da      	ldr	r2, [r3, #12]
 800e5c8:	69bb      	ldr	r3, [r7, #24]
 800e5ca:	1c59      	adds	r1, r3, #1
 800e5cc:	61b9      	str	r1, [r7, #24]
 800e5ce:	005b      	lsls	r3, r3, #1
 800e5d0:	4413      	add	r3, r2
 800e5d2:	881b      	ldrh	r3, [r3, #0]
 800e5d4:	81fb      	strh	r3, [r7, #14]
 800e5d6:	89fb      	ldrh	r3, [r7, #14]
 800e5d8:	2b00      	cmp	r3, #0
 800e5da:	d1d7      	bne.n	800e58c <get_fileinfo+0x34>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 800e5dc:	683a      	ldr	r2, [r7, #0]
 800e5de:	69fb      	ldr	r3, [r7, #28]
 800e5e0:	4413      	add	r3, r2
 800e5e2:	3316      	adds	r3, #22
 800e5e4:	2200      	movs	r2, #0
 800e5e6:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 800e5e8:	2300      	movs	r3, #0
 800e5ea:	61bb      	str	r3, [r7, #24]
 800e5ec:	69bb      	ldr	r3, [r7, #24]
 800e5ee:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 800e5f0:	683a      	ldr	r2, [r7, #0]
 800e5f2:	69fb      	ldr	r3, [r7, #28]
 800e5f4:	4413      	add	r3, r2
 800e5f6:	3316      	adds	r3, #22
 800e5f8:	781b      	ldrb	r3, [r3, #0]
 800e5fa:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 800e5fc:	e04c      	b.n	800e698 <get_fileinfo+0x140>
		c = (TCHAR)dp->dir[i++];
 800e5fe:	687b      	ldr	r3, [r7, #4]
 800e600:	6a1a      	ldr	r2, [r3, #32]
 800e602:	69fb      	ldr	r3, [r7, #28]
 800e604:	1c59      	adds	r1, r3, #1
 800e606:	61f9      	str	r1, [r7, #28]
 800e608:	4413      	add	r3, r2
 800e60a:	781b      	ldrb	r3, [r3, #0]
 800e60c:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 800e60e:	7dfb      	ldrb	r3, [r7, #23]
 800e610:	2b20      	cmp	r3, #32
 800e612:	d100      	bne.n	800e616 <get_fileinfo+0xbe>
 800e614:	e040      	b.n	800e698 <get_fileinfo+0x140>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800e616:	7dfb      	ldrb	r3, [r7, #23]
 800e618:	2b05      	cmp	r3, #5
 800e61a:	d101      	bne.n	800e620 <get_fileinfo+0xc8>
 800e61c:	23e5      	movs	r3, #229	; 0xe5
 800e61e:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 800e620:	69fb      	ldr	r3, [r7, #28]
 800e622:	2b09      	cmp	r3, #9
 800e624:	d10f      	bne.n	800e646 <get_fileinfo+0xee>
			if (!lfv) fno->fname[j] = '.';
 800e626:	89bb      	ldrh	r3, [r7, #12]
 800e628:	2b00      	cmp	r3, #0
 800e62a:	d105      	bne.n	800e638 <get_fileinfo+0xe0>
 800e62c:	683a      	ldr	r2, [r7, #0]
 800e62e:	69bb      	ldr	r3, [r7, #24]
 800e630:	4413      	add	r3, r2
 800e632:	3316      	adds	r3, #22
 800e634:	222e      	movs	r2, #46	; 0x2e
 800e636:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 800e638:	69bb      	ldr	r3, [r7, #24]
 800e63a:	1c5a      	adds	r2, r3, #1
 800e63c:	61ba      	str	r2, [r7, #24]
 800e63e:	683a      	ldr	r2, [r7, #0]
 800e640:	4413      	add	r3, r2
 800e642:	222e      	movs	r2, #46	; 0x2e
 800e644:	725a      	strb	r2, [r3, #9]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 800e646:	683a      	ldr	r2, [r7, #0]
 800e648:	69bb      	ldr	r3, [r7, #24]
 800e64a:	4413      	add	r3, r2
 800e64c:	3309      	adds	r3, #9
 800e64e:	7dfa      	ldrb	r2, [r7, #23]
 800e650:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 800e652:	89bb      	ldrh	r3, [r7, #12]
 800e654:	2b00      	cmp	r3, #0
 800e656:	d11c      	bne.n	800e692 <get_fileinfo+0x13a>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 800e658:	7dfb      	ldrb	r3, [r7, #23]
 800e65a:	2b40      	cmp	r3, #64	; 0x40
 800e65c:	d913      	bls.n	800e686 <get_fileinfo+0x12e>
 800e65e:	7dfb      	ldrb	r3, [r7, #23]
 800e660:	2b5a      	cmp	r3, #90	; 0x5a
 800e662:	d810      	bhi.n	800e686 <get_fileinfo+0x12e>
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	6a1b      	ldr	r3, [r3, #32]
 800e668:	330c      	adds	r3, #12
 800e66a:	781b      	ldrb	r3, [r3, #0]
 800e66c:	461a      	mov	r2, r3
 800e66e:	69fb      	ldr	r3, [r7, #28]
 800e670:	2b08      	cmp	r3, #8
 800e672:	d901      	bls.n	800e678 <get_fileinfo+0x120>
 800e674:	2310      	movs	r3, #16
 800e676:	e000      	b.n	800e67a <get_fileinfo+0x122>
 800e678:	2308      	movs	r3, #8
 800e67a:	4013      	ands	r3, r2
 800e67c:	2b00      	cmp	r3, #0
 800e67e:	d002      	beq.n	800e686 <get_fileinfo+0x12e>
				c += 0x20;			/* To lower */
 800e680:	7dfb      	ldrb	r3, [r7, #23]
 800e682:	3320      	adds	r3, #32
 800e684:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 800e686:	683a      	ldr	r2, [r7, #0]
 800e688:	69bb      	ldr	r3, [r7, #24]
 800e68a:	4413      	add	r3, r2
 800e68c:	3316      	adds	r3, #22
 800e68e:	7dfa      	ldrb	r2, [r7, #23]
 800e690:	701a      	strb	r2, [r3, #0]
		}
		j++;
 800e692:	69bb      	ldr	r3, [r7, #24]
 800e694:	3301      	adds	r3, #1
 800e696:	61bb      	str	r3, [r7, #24]
	while (i < 11) {		/* Copy name body and extension */
 800e698:	69fb      	ldr	r3, [r7, #28]
 800e69a:	2b0a      	cmp	r3, #10
 800e69c:	d9af      	bls.n	800e5fe <get_fileinfo+0xa6>
	}
	if (!lfv) {
 800e69e:	89bb      	ldrh	r3, [r7, #12]
 800e6a0:	2b00      	cmp	r3, #0
 800e6a2:	d10d      	bne.n	800e6c0 <get_fileinfo+0x168>
		fno->fname[j] = 0;
 800e6a4:	683a      	ldr	r2, [r7, #0]
 800e6a6:	69bb      	ldr	r3, [r7, #24]
 800e6a8:	4413      	add	r3, r2
 800e6aa:	3316      	adds	r3, #22
 800e6ac:	2200      	movs	r2, #0
 800e6ae:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 800e6b0:	687b      	ldr	r3, [r7, #4]
 800e6b2:	6a1b      	ldr	r3, [r3, #32]
 800e6b4:	330c      	adds	r3, #12
 800e6b6:	781b      	ldrb	r3, [r3, #0]
 800e6b8:	2b00      	cmp	r3, #0
 800e6ba:	d101      	bne.n	800e6c0 <get_fileinfo+0x168>
 800e6bc:	2300      	movs	r3, #0
 800e6be:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 800e6c0:	683a      	ldr	r2, [r7, #0]
 800e6c2:	69bb      	ldr	r3, [r7, #24]
 800e6c4:	4413      	add	r3, r2
 800e6c6:	3309      	adds	r3, #9
 800e6c8:	2200      	movs	r2, #0
 800e6ca:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800e6cc:	687b      	ldr	r3, [r7, #4]
 800e6ce:	6a1b      	ldr	r3, [r3, #32]
 800e6d0:	7ada      	ldrb	r2, [r3, #11]
 800e6d2:	683b      	ldr	r3, [r7, #0]
 800e6d4:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800e6d6:	687b      	ldr	r3, [r7, #4]
 800e6d8:	6a1b      	ldr	r3, [r3, #32]
 800e6da:	331c      	adds	r3, #28
 800e6dc:	4618      	mov	r0, r3
 800e6de:	f7fe fb15 	bl	800cd0c <ld_dword>
 800e6e2:	4602      	mov	r2, r0
 800e6e4:	683b      	ldr	r3, [r7, #0]
 800e6e6:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800e6e8:	687b      	ldr	r3, [r7, #4]
 800e6ea:	6a1b      	ldr	r3, [r3, #32]
 800e6ec:	3316      	adds	r3, #22
 800e6ee:	4618      	mov	r0, r3
 800e6f0:	f7fe fb0c 	bl	800cd0c <ld_dword>
 800e6f4:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800e6f6:	68bb      	ldr	r3, [r7, #8]
 800e6f8:	b29a      	uxth	r2, r3
 800e6fa:	683b      	ldr	r3, [r7, #0]
 800e6fc:	80da      	strh	r2, [r3, #6]
 800e6fe:	68bb      	ldr	r3, [r7, #8]
 800e700:	0c1b      	lsrs	r3, r3, #16
 800e702:	b29a      	uxth	r2, r3
 800e704:	683b      	ldr	r3, [r7, #0]
 800e706:	809a      	strh	r2, [r3, #4]
 800e708:	e000      	b.n	800e70c <get_fileinfo+0x1b4>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800e70a:	bf00      	nop
}
 800e70c:	3720      	adds	r7, #32
 800e70e:	46bd      	mov	sp, r7
 800e710:	bd80      	pop	{r7, pc}
	...

0800e714 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800e714:	b580      	push	{r7, lr}
 800e716:	b08a      	sub	sp, #40	; 0x28
 800e718:	af00      	add	r7, sp, #0
 800e71a:	6078      	str	r0, [r7, #4]
 800e71c:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800e71e:	683b      	ldr	r3, [r7, #0]
 800e720:	681b      	ldr	r3, [r3, #0]
 800e722:	613b      	str	r3, [r7, #16]
 800e724:	687b      	ldr	r3, [r7, #4]
 800e726:	681b      	ldr	r3, [r3, #0]
 800e728:	68db      	ldr	r3, [r3, #12]
 800e72a:	60fb      	str	r3, [r7, #12]
 800e72c:	2300      	movs	r3, #0
 800e72e:	617b      	str	r3, [r7, #20]
 800e730:	697b      	ldr	r3, [r7, #20]
 800e732:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800e734:	69bb      	ldr	r3, [r7, #24]
 800e736:	1c5a      	adds	r2, r3, #1
 800e738:	61ba      	str	r2, [r7, #24]
 800e73a:	693a      	ldr	r2, [r7, #16]
 800e73c:	4413      	add	r3, r2
 800e73e:	781b      	ldrb	r3, [r3, #0]
 800e740:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800e742:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e744:	2b1f      	cmp	r3, #31
 800e746:	d940      	bls.n	800e7ca <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800e748:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e74a:	2b2f      	cmp	r3, #47	; 0x2f
 800e74c:	d006      	beq.n	800e75c <create_name+0x48>
 800e74e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e750:	2b5c      	cmp	r3, #92	; 0x5c
 800e752:	d110      	bne.n	800e776 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800e754:	e002      	b.n	800e75c <create_name+0x48>
 800e756:	69bb      	ldr	r3, [r7, #24]
 800e758:	3301      	adds	r3, #1
 800e75a:	61bb      	str	r3, [r7, #24]
 800e75c:	693a      	ldr	r2, [r7, #16]
 800e75e:	69bb      	ldr	r3, [r7, #24]
 800e760:	4413      	add	r3, r2
 800e762:	781b      	ldrb	r3, [r3, #0]
 800e764:	2b2f      	cmp	r3, #47	; 0x2f
 800e766:	d0f6      	beq.n	800e756 <create_name+0x42>
 800e768:	693a      	ldr	r2, [r7, #16]
 800e76a:	69bb      	ldr	r3, [r7, #24]
 800e76c:	4413      	add	r3, r2
 800e76e:	781b      	ldrb	r3, [r3, #0]
 800e770:	2b5c      	cmp	r3, #92	; 0x5c
 800e772:	d0f0      	beq.n	800e756 <create_name+0x42>
			break;
 800e774:	e02a      	b.n	800e7cc <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800e776:	697b      	ldr	r3, [r7, #20]
 800e778:	2bfe      	cmp	r3, #254	; 0xfe
 800e77a:	d901      	bls.n	800e780 <create_name+0x6c>
 800e77c:	2306      	movs	r3, #6
 800e77e:	e17d      	b.n	800ea7c <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 800e780:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e782:	b2db      	uxtb	r3, r3
 800e784:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800e786:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e788:	2101      	movs	r1, #1
 800e78a:	4618      	mov	r0, r3
 800e78c:	f002 f934 	bl	80109f8 <ff_convert>
 800e790:	4603      	mov	r3, r0
 800e792:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800e794:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e796:	2b00      	cmp	r3, #0
 800e798:	d101      	bne.n	800e79e <create_name+0x8a>
 800e79a:	2306      	movs	r3, #6
 800e79c:	e16e      	b.n	800ea7c <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800e79e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e7a0:	2b7f      	cmp	r3, #127	; 0x7f
 800e7a2:	d809      	bhi.n	800e7b8 <create_name+0xa4>
 800e7a4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e7a6:	4619      	mov	r1, r3
 800e7a8:	488d      	ldr	r0, [pc, #564]	; (800e9e0 <create_name+0x2cc>)
 800e7aa:	f7fe fb7c 	bl	800cea6 <chk_chr>
 800e7ae:	4603      	mov	r3, r0
 800e7b0:	2b00      	cmp	r3, #0
 800e7b2:	d001      	beq.n	800e7b8 <create_name+0xa4>
 800e7b4:	2306      	movs	r3, #6
 800e7b6:	e161      	b.n	800ea7c <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 800e7b8:	697b      	ldr	r3, [r7, #20]
 800e7ba:	1c5a      	adds	r2, r3, #1
 800e7bc:	617a      	str	r2, [r7, #20]
 800e7be:	005b      	lsls	r3, r3, #1
 800e7c0:	68fa      	ldr	r2, [r7, #12]
 800e7c2:	4413      	add	r3, r2
 800e7c4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e7c6:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800e7c8:	e7b4      	b.n	800e734 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800e7ca:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800e7cc:	693a      	ldr	r2, [r7, #16]
 800e7ce:	69bb      	ldr	r3, [r7, #24]
 800e7d0:	441a      	add	r2, r3
 800e7d2:	683b      	ldr	r3, [r7, #0]
 800e7d4:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800e7d6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e7d8:	2b1f      	cmp	r3, #31
 800e7da:	d801      	bhi.n	800e7e0 <create_name+0xcc>
 800e7dc:	2304      	movs	r3, #4
 800e7de:	e000      	b.n	800e7e2 <create_name+0xce>
 800e7e0:	2300      	movs	r3, #0
 800e7e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800e7e6:	e011      	b.n	800e80c <create_name+0xf8>
		w = lfn[di - 1];
 800e7e8:	697b      	ldr	r3, [r7, #20]
 800e7ea:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800e7ee:	3b01      	subs	r3, #1
 800e7f0:	005b      	lsls	r3, r3, #1
 800e7f2:	68fa      	ldr	r2, [r7, #12]
 800e7f4:	4413      	add	r3, r2
 800e7f6:	881b      	ldrh	r3, [r3, #0]
 800e7f8:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800e7fa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e7fc:	2b20      	cmp	r3, #32
 800e7fe:	d002      	beq.n	800e806 <create_name+0xf2>
 800e800:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e802:	2b2e      	cmp	r3, #46	; 0x2e
 800e804:	d106      	bne.n	800e814 <create_name+0x100>
		di--;
 800e806:	697b      	ldr	r3, [r7, #20]
 800e808:	3b01      	subs	r3, #1
 800e80a:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800e80c:	697b      	ldr	r3, [r7, #20]
 800e80e:	2b00      	cmp	r3, #0
 800e810:	d1ea      	bne.n	800e7e8 <create_name+0xd4>
 800e812:	e000      	b.n	800e816 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800e814:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800e816:	697b      	ldr	r3, [r7, #20]
 800e818:	005b      	lsls	r3, r3, #1
 800e81a:	68fa      	ldr	r2, [r7, #12]
 800e81c:	4413      	add	r3, r2
 800e81e:	2200      	movs	r2, #0
 800e820:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800e822:	697b      	ldr	r3, [r7, #20]
 800e824:	2b00      	cmp	r3, #0
 800e826:	d101      	bne.n	800e82c <create_name+0x118>
 800e828:	2306      	movs	r3, #6
 800e82a:	e127      	b.n	800ea7c <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800e82c:	687b      	ldr	r3, [r7, #4]
 800e82e:	3324      	adds	r3, #36	; 0x24
 800e830:	220b      	movs	r2, #11
 800e832:	2120      	movs	r1, #32
 800e834:	4618      	mov	r0, r3
 800e836:	f7fe faf4 	bl	800ce22 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800e83a:	2300      	movs	r3, #0
 800e83c:	61bb      	str	r3, [r7, #24]
 800e83e:	e002      	b.n	800e846 <create_name+0x132>
 800e840:	69bb      	ldr	r3, [r7, #24]
 800e842:	3301      	adds	r3, #1
 800e844:	61bb      	str	r3, [r7, #24]
 800e846:	69bb      	ldr	r3, [r7, #24]
 800e848:	005b      	lsls	r3, r3, #1
 800e84a:	68fa      	ldr	r2, [r7, #12]
 800e84c:	4413      	add	r3, r2
 800e84e:	881b      	ldrh	r3, [r3, #0]
 800e850:	2b20      	cmp	r3, #32
 800e852:	d0f5      	beq.n	800e840 <create_name+0x12c>
 800e854:	69bb      	ldr	r3, [r7, #24]
 800e856:	005b      	lsls	r3, r3, #1
 800e858:	68fa      	ldr	r2, [r7, #12]
 800e85a:	4413      	add	r3, r2
 800e85c:	881b      	ldrh	r3, [r3, #0]
 800e85e:	2b2e      	cmp	r3, #46	; 0x2e
 800e860:	d0ee      	beq.n	800e840 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800e862:	69bb      	ldr	r3, [r7, #24]
 800e864:	2b00      	cmp	r3, #0
 800e866:	d009      	beq.n	800e87c <create_name+0x168>
 800e868:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e86c:	f043 0303 	orr.w	r3, r3, #3
 800e870:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800e874:	e002      	b.n	800e87c <create_name+0x168>
 800e876:	697b      	ldr	r3, [r7, #20]
 800e878:	3b01      	subs	r3, #1
 800e87a:	617b      	str	r3, [r7, #20]
 800e87c:	697b      	ldr	r3, [r7, #20]
 800e87e:	2b00      	cmp	r3, #0
 800e880:	d009      	beq.n	800e896 <create_name+0x182>
 800e882:	697b      	ldr	r3, [r7, #20]
 800e884:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800e888:	3b01      	subs	r3, #1
 800e88a:	005b      	lsls	r3, r3, #1
 800e88c:	68fa      	ldr	r2, [r7, #12]
 800e88e:	4413      	add	r3, r2
 800e890:	881b      	ldrh	r3, [r3, #0]
 800e892:	2b2e      	cmp	r3, #46	; 0x2e
 800e894:	d1ef      	bne.n	800e876 <create_name+0x162>

	i = b = 0; ni = 8;
 800e896:	2300      	movs	r3, #0
 800e898:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800e89c:	2300      	movs	r3, #0
 800e89e:	623b      	str	r3, [r7, #32]
 800e8a0:	2308      	movs	r3, #8
 800e8a2:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800e8a4:	69bb      	ldr	r3, [r7, #24]
 800e8a6:	1c5a      	adds	r2, r3, #1
 800e8a8:	61ba      	str	r2, [r7, #24]
 800e8aa:	005b      	lsls	r3, r3, #1
 800e8ac:	68fa      	ldr	r2, [r7, #12]
 800e8ae:	4413      	add	r3, r2
 800e8b0:	881b      	ldrh	r3, [r3, #0]
 800e8b2:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800e8b4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e8b6:	2b00      	cmp	r3, #0
 800e8b8:	f000 8090 	beq.w	800e9dc <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800e8bc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e8be:	2b20      	cmp	r3, #32
 800e8c0:	d006      	beq.n	800e8d0 <create_name+0x1bc>
 800e8c2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e8c4:	2b2e      	cmp	r3, #46	; 0x2e
 800e8c6:	d10a      	bne.n	800e8de <create_name+0x1ca>
 800e8c8:	69ba      	ldr	r2, [r7, #24]
 800e8ca:	697b      	ldr	r3, [r7, #20]
 800e8cc:	429a      	cmp	r2, r3
 800e8ce:	d006      	beq.n	800e8de <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800e8d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e8d4:	f043 0303 	orr.w	r3, r3, #3
 800e8d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e8dc:	e07d      	b.n	800e9da <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800e8de:	6a3a      	ldr	r2, [r7, #32]
 800e8e0:	69fb      	ldr	r3, [r7, #28]
 800e8e2:	429a      	cmp	r2, r3
 800e8e4:	d203      	bcs.n	800e8ee <create_name+0x1da>
 800e8e6:	69ba      	ldr	r2, [r7, #24]
 800e8e8:	697b      	ldr	r3, [r7, #20]
 800e8ea:	429a      	cmp	r2, r3
 800e8ec:	d123      	bne.n	800e936 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800e8ee:	69fb      	ldr	r3, [r7, #28]
 800e8f0:	2b0b      	cmp	r3, #11
 800e8f2:	d106      	bne.n	800e902 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800e8f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e8f8:	f043 0303 	orr.w	r3, r3, #3
 800e8fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e900:	e075      	b.n	800e9ee <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800e902:	69ba      	ldr	r2, [r7, #24]
 800e904:	697b      	ldr	r3, [r7, #20]
 800e906:	429a      	cmp	r2, r3
 800e908:	d005      	beq.n	800e916 <create_name+0x202>
 800e90a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e90e:	f043 0303 	orr.w	r3, r3, #3
 800e912:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800e916:	69ba      	ldr	r2, [r7, #24]
 800e918:	697b      	ldr	r3, [r7, #20]
 800e91a:	429a      	cmp	r2, r3
 800e91c:	d866      	bhi.n	800e9ec <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800e91e:	697b      	ldr	r3, [r7, #20]
 800e920:	61bb      	str	r3, [r7, #24]
 800e922:	2308      	movs	r3, #8
 800e924:	623b      	str	r3, [r7, #32]
 800e926:	230b      	movs	r3, #11
 800e928:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800e92a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e92e:	009b      	lsls	r3, r3, #2
 800e930:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800e934:	e051      	b.n	800e9da <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800e936:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e938:	2b7f      	cmp	r3, #127	; 0x7f
 800e93a:	d914      	bls.n	800e966 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800e93c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e93e:	2100      	movs	r1, #0
 800e940:	4618      	mov	r0, r3
 800e942:	f002 f859 	bl	80109f8 <ff_convert>
 800e946:	4603      	mov	r3, r0
 800e948:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800e94a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e94c:	2b00      	cmp	r3, #0
 800e94e:	d004      	beq.n	800e95a <create_name+0x246>
 800e950:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e952:	3b80      	subs	r3, #128	; 0x80
 800e954:	4a23      	ldr	r2, [pc, #140]	; (800e9e4 <create_name+0x2d0>)
 800e956:	5cd3      	ldrb	r3, [r2, r3]
 800e958:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800e95a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e95e:	f043 0302 	orr.w	r3, r3, #2
 800e962:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800e966:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e968:	2b00      	cmp	r3, #0
 800e96a:	d007      	beq.n	800e97c <create_name+0x268>
 800e96c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e96e:	4619      	mov	r1, r3
 800e970:	481d      	ldr	r0, [pc, #116]	; (800e9e8 <create_name+0x2d4>)
 800e972:	f7fe fa98 	bl	800cea6 <chk_chr>
 800e976:	4603      	mov	r3, r0
 800e978:	2b00      	cmp	r3, #0
 800e97a:	d008      	beq.n	800e98e <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800e97c:	235f      	movs	r3, #95	; 0x5f
 800e97e:	84bb      	strh	r3, [r7, #36]	; 0x24
 800e980:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e984:	f043 0303 	orr.w	r3, r3, #3
 800e988:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e98c:	e01b      	b.n	800e9c6 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800e98e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e990:	2b40      	cmp	r3, #64	; 0x40
 800e992:	d909      	bls.n	800e9a8 <create_name+0x294>
 800e994:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e996:	2b5a      	cmp	r3, #90	; 0x5a
 800e998:	d806      	bhi.n	800e9a8 <create_name+0x294>
					b |= 2;
 800e99a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e99e:	f043 0302 	orr.w	r3, r3, #2
 800e9a2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800e9a6:	e00e      	b.n	800e9c6 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800e9a8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e9aa:	2b60      	cmp	r3, #96	; 0x60
 800e9ac:	d90b      	bls.n	800e9c6 <create_name+0x2b2>
 800e9ae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e9b0:	2b7a      	cmp	r3, #122	; 0x7a
 800e9b2:	d808      	bhi.n	800e9c6 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800e9b4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e9b8:	f043 0301 	orr.w	r3, r3, #1
 800e9bc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800e9c0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e9c2:	3b20      	subs	r3, #32
 800e9c4:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800e9c6:	6a3b      	ldr	r3, [r7, #32]
 800e9c8:	1c5a      	adds	r2, r3, #1
 800e9ca:	623a      	str	r2, [r7, #32]
 800e9cc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e9ce:	b2d1      	uxtb	r1, r2
 800e9d0:	687a      	ldr	r2, [r7, #4]
 800e9d2:	4413      	add	r3, r2
 800e9d4:	460a      	mov	r2, r1
 800e9d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 800e9da:	e763      	b.n	800e8a4 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800e9dc:	bf00      	nop
 800e9de:	e006      	b.n	800e9ee <create_name+0x2da>
 800e9e0:	08016e4c 	.word	0x08016e4c
 800e9e4:	08022fac 	.word	0x08022fac
 800e9e8:	08016e58 	.word	0x08016e58
			if (si > di) break;			/* No extension */
 800e9ec:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800e9ee:	687b      	ldr	r3, [r7, #4]
 800e9f0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800e9f4:	2be5      	cmp	r3, #229	; 0xe5
 800e9f6:	d103      	bne.n	800ea00 <create_name+0x2ec>
 800e9f8:	687b      	ldr	r3, [r7, #4]
 800e9fa:	2205      	movs	r2, #5
 800e9fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 800ea00:	69fb      	ldr	r3, [r7, #28]
 800ea02:	2b08      	cmp	r3, #8
 800ea04:	d104      	bne.n	800ea10 <create_name+0x2fc>
 800ea06:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ea0a:	009b      	lsls	r3, r3, #2
 800ea0c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800ea10:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ea14:	f003 030c 	and.w	r3, r3, #12
 800ea18:	2b0c      	cmp	r3, #12
 800ea1a:	d005      	beq.n	800ea28 <create_name+0x314>
 800ea1c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ea20:	f003 0303 	and.w	r3, r3, #3
 800ea24:	2b03      	cmp	r3, #3
 800ea26:	d105      	bne.n	800ea34 <create_name+0x320>
 800ea28:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ea2c:	f043 0302 	orr.w	r3, r3, #2
 800ea30:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800ea34:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ea38:	f003 0302 	and.w	r3, r3, #2
 800ea3c:	2b00      	cmp	r3, #0
 800ea3e:	d117      	bne.n	800ea70 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800ea40:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ea44:	f003 0303 	and.w	r3, r3, #3
 800ea48:	2b01      	cmp	r3, #1
 800ea4a:	d105      	bne.n	800ea58 <create_name+0x344>
 800ea4c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ea50:	f043 0310 	orr.w	r3, r3, #16
 800ea54:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800ea58:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ea5c:	f003 030c 	and.w	r3, r3, #12
 800ea60:	2b04      	cmp	r3, #4
 800ea62:	d105      	bne.n	800ea70 <create_name+0x35c>
 800ea64:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ea68:	f043 0308 	orr.w	r3, r3, #8
 800ea6c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800ea70:	687b      	ldr	r3, [r7, #4]
 800ea72:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800ea76:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 800ea7a:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800ea7c:	4618      	mov	r0, r3
 800ea7e:	3728      	adds	r7, #40	; 0x28
 800ea80:	46bd      	mov	sp, r7
 800ea82:	bd80      	pop	{r7, pc}

0800ea84 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800ea84:	b580      	push	{r7, lr}
 800ea86:	b086      	sub	sp, #24
 800ea88:	af00      	add	r7, sp, #0
 800ea8a:	6078      	str	r0, [r7, #4]
 800ea8c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800ea8e:	687b      	ldr	r3, [r7, #4]
 800ea90:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800ea92:	693b      	ldr	r3, [r7, #16]
 800ea94:	681b      	ldr	r3, [r3, #0]
 800ea96:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800ea98:	e002      	b.n	800eaa0 <follow_path+0x1c>
 800ea9a:	683b      	ldr	r3, [r7, #0]
 800ea9c:	3301      	adds	r3, #1
 800ea9e:	603b      	str	r3, [r7, #0]
 800eaa0:	683b      	ldr	r3, [r7, #0]
 800eaa2:	781b      	ldrb	r3, [r3, #0]
 800eaa4:	2b2f      	cmp	r3, #47	; 0x2f
 800eaa6:	d0f8      	beq.n	800ea9a <follow_path+0x16>
 800eaa8:	683b      	ldr	r3, [r7, #0]
 800eaaa:	781b      	ldrb	r3, [r3, #0]
 800eaac:	2b5c      	cmp	r3, #92	; 0x5c
 800eaae:	d0f4      	beq.n	800ea9a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800eab0:	693b      	ldr	r3, [r7, #16]
 800eab2:	2200      	movs	r2, #0
 800eab4:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800eab6:	683b      	ldr	r3, [r7, #0]
 800eab8:	781b      	ldrb	r3, [r3, #0]
 800eaba:	2b1f      	cmp	r3, #31
 800eabc:	d80a      	bhi.n	800ead4 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800eabe:	687b      	ldr	r3, [r7, #4]
 800eac0:	2280      	movs	r2, #128	; 0x80
 800eac2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800eac6:	2100      	movs	r1, #0
 800eac8:	6878      	ldr	r0, [r7, #4]
 800eaca:	f7fe ff35 	bl	800d938 <dir_sdi>
 800eace:	4603      	mov	r3, r0
 800ead0:	75fb      	strb	r3, [r7, #23]
 800ead2:	e043      	b.n	800eb5c <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800ead4:	463b      	mov	r3, r7
 800ead6:	4619      	mov	r1, r3
 800ead8:	6878      	ldr	r0, [r7, #4]
 800eada:	f7ff fe1b 	bl	800e714 <create_name>
 800eade:	4603      	mov	r3, r0
 800eae0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800eae2:	7dfb      	ldrb	r3, [r7, #23]
 800eae4:	2b00      	cmp	r3, #0
 800eae6:	d134      	bne.n	800eb52 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800eae8:	6878      	ldr	r0, [r7, #4]
 800eaea:	f7ff fb7d 	bl	800e1e8 <dir_find>
 800eaee:	4603      	mov	r3, r0
 800eaf0:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800eaf2:	687b      	ldr	r3, [r7, #4]
 800eaf4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800eaf8:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800eafa:	7dfb      	ldrb	r3, [r7, #23]
 800eafc:	2b00      	cmp	r3, #0
 800eafe:	d00a      	beq.n	800eb16 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800eb00:	7dfb      	ldrb	r3, [r7, #23]
 800eb02:	2b04      	cmp	r3, #4
 800eb04:	d127      	bne.n	800eb56 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800eb06:	7afb      	ldrb	r3, [r7, #11]
 800eb08:	f003 0304 	and.w	r3, r3, #4
 800eb0c:	2b00      	cmp	r3, #0
 800eb0e:	d122      	bne.n	800eb56 <follow_path+0xd2>
 800eb10:	2305      	movs	r3, #5
 800eb12:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800eb14:	e01f      	b.n	800eb56 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800eb16:	7afb      	ldrb	r3, [r7, #11]
 800eb18:	f003 0304 	and.w	r3, r3, #4
 800eb1c:	2b00      	cmp	r3, #0
 800eb1e:	d11c      	bne.n	800eb5a <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800eb20:	693b      	ldr	r3, [r7, #16]
 800eb22:	799b      	ldrb	r3, [r3, #6]
 800eb24:	f003 0310 	and.w	r3, r3, #16
 800eb28:	2b00      	cmp	r3, #0
 800eb2a:	d102      	bne.n	800eb32 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800eb2c:	2305      	movs	r3, #5
 800eb2e:	75fb      	strb	r3, [r7, #23]
 800eb30:	e014      	b.n	800eb5c <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800eb32:	68fb      	ldr	r3, [r7, #12]
 800eb34:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800eb38:	687b      	ldr	r3, [r7, #4]
 800eb3a:	695b      	ldr	r3, [r3, #20]
 800eb3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800eb40:	4413      	add	r3, r2
 800eb42:	4619      	mov	r1, r3
 800eb44:	68f8      	ldr	r0, [r7, #12]
 800eb46:	f7ff f87e 	bl	800dc46 <ld_clust>
 800eb4a:	4602      	mov	r2, r0
 800eb4c:	693b      	ldr	r3, [r7, #16]
 800eb4e:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800eb50:	e7c0      	b.n	800ead4 <follow_path+0x50>
			if (res != FR_OK) break;
 800eb52:	bf00      	nop
 800eb54:	e002      	b.n	800eb5c <follow_path+0xd8>
				break;
 800eb56:	bf00      	nop
 800eb58:	e000      	b.n	800eb5c <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800eb5a:	bf00      	nop
			}
		}
	}

	return res;
 800eb5c:	7dfb      	ldrb	r3, [r7, #23]
}
 800eb5e:	4618      	mov	r0, r3
 800eb60:	3718      	adds	r7, #24
 800eb62:	46bd      	mov	sp, r7
 800eb64:	bd80      	pop	{r7, pc}

0800eb66 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800eb66:	b480      	push	{r7}
 800eb68:	b087      	sub	sp, #28
 800eb6a:	af00      	add	r7, sp, #0
 800eb6c:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800eb6e:	f04f 33ff 	mov.w	r3, #4294967295
 800eb72:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800eb74:	687b      	ldr	r3, [r7, #4]
 800eb76:	681b      	ldr	r3, [r3, #0]
 800eb78:	2b00      	cmp	r3, #0
 800eb7a:	d031      	beq.n	800ebe0 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800eb7c:	687b      	ldr	r3, [r7, #4]
 800eb7e:	681b      	ldr	r3, [r3, #0]
 800eb80:	617b      	str	r3, [r7, #20]
 800eb82:	e002      	b.n	800eb8a <get_ldnumber+0x24>
 800eb84:	697b      	ldr	r3, [r7, #20]
 800eb86:	3301      	adds	r3, #1
 800eb88:	617b      	str	r3, [r7, #20]
 800eb8a:	697b      	ldr	r3, [r7, #20]
 800eb8c:	781b      	ldrb	r3, [r3, #0]
 800eb8e:	2b1f      	cmp	r3, #31
 800eb90:	d903      	bls.n	800eb9a <get_ldnumber+0x34>
 800eb92:	697b      	ldr	r3, [r7, #20]
 800eb94:	781b      	ldrb	r3, [r3, #0]
 800eb96:	2b3a      	cmp	r3, #58	; 0x3a
 800eb98:	d1f4      	bne.n	800eb84 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800eb9a:	697b      	ldr	r3, [r7, #20]
 800eb9c:	781b      	ldrb	r3, [r3, #0]
 800eb9e:	2b3a      	cmp	r3, #58	; 0x3a
 800eba0:	d11c      	bne.n	800ebdc <get_ldnumber+0x76>
			tp = *path;
 800eba2:	687b      	ldr	r3, [r7, #4]
 800eba4:	681b      	ldr	r3, [r3, #0]
 800eba6:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800eba8:	68fb      	ldr	r3, [r7, #12]
 800ebaa:	1c5a      	adds	r2, r3, #1
 800ebac:	60fa      	str	r2, [r7, #12]
 800ebae:	781b      	ldrb	r3, [r3, #0]
 800ebb0:	3b30      	subs	r3, #48	; 0x30
 800ebb2:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800ebb4:	68bb      	ldr	r3, [r7, #8]
 800ebb6:	2b09      	cmp	r3, #9
 800ebb8:	d80e      	bhi.n	800ebd8 <get_ldnumber+0x72>
 800ebba:	68fa      	ldr	r2, [r7, #12]
 800ebbc:	697b      	ldr	r3, [r7, #20]
 800ebbe:	429a      	cmp	r2, r3
 800ebc0:	d10a      	bne.n	800ebd8 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800ebc2:	68bb      	ldr	r3, [r7, #8]
 800ebc4:	2b01      	cmp	r3, #1
 800ebc6:	d807      	bhi.n	800ebd8 <get_ldnumber+0x72>
					vol = (int)i;
 800ebc8:	68bb      	ldr	r3, [r7, #8]
 800ebca:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800ebcc:	697b      	ldr	r3, [r7, #20]
 800ebce:	3301      	adds	r3, #1
 800ebd0:	617b      	str	r3, [r7, #20]
 800ebd2:	687b      	ldr	r3, [r7, #4]
 800ebd4:	697a      	ldr	r2, [r7, #20]
 800ebd6:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800ebd8:	693b      	ldr	r3, [r7, #16]
 800ebda:	e002      	b.n	800ebe2 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800ebdc:	2300      	movs	r3, #0
 800ebde:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800ebe0:	693b      	ldr	r3, [r7, #16]
}
 800ebe2:	4618      	mov	r0, r3
 800ebe4:	371c      	adds	r7, #28
 800ebe6:	46bd      	mov	sp, r7
 800ebe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebec:	4770      	bx	lr
	...

0800ebf0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800ebf0:	b580      	push	{r7, lr}
 800ebf2:	b082      	sub	sp, #8
 800ebf4:	af00      	add	r7, sp, #0
 800ebf6:	6078      	str	r0, [r7, #4]
 800ebf8:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800ebfa:	687b      	ldr	r3, [r7, #4]
 800ebfc:	2200      	movs	r2, #0
 800ebfe:	70da      	strb	r2, [r3, #3]
 800ec00:	687b      	ldr	r3, [r7, #4]
 800ec02:	f04f 32ff 	mov.w	r2, #4294967295
 800ec06:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800ec08:	6839      	ldr	r1, [r7, #0]
 800ec0a:	6878      	ldr	r0, [r7, #4]
 800ec0c:	f7fe fb16 	bl	800d23c <move_window>
 800ec10:	4603      	mov	r3, r0
 800ec12:	2b00      	cmp	r3, #0
 800ec14:	d001      	beq.n	800ec1a <check_fs+0x2a>
 800ec16:	2304      	movs	r3, #4
 800ec18:	e038      	b.n	800ec8c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800ec1a:	687b      	ldr	r3, [r7, #4]
 800ec1c:	3334      	adds	r3, #52	; 0x34
 800ec1e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800ec22:	4618      	mov	r0, r3
 800ec24:	f7fe f85a 	bl	800ccdc <ld_word>
 800ec28:	4603      	mov	r3, r0
 800ec2a:	461a      	mov	r2, r3
 800ec2c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800ec30:	429a      	cmp	r2, r3
 800ec32:	d001      	beq.n	800ec38 <check_fs+0x48>
 800ec34:	2303      	movs	r3, #3
 800ec36:	e029      	b.n	800ec8c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800ec38:	687b      	ldr	r3, [r7, #4]
 800ec3a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ec3e:	2be9      	cmp	r3, #233	; 0xe9
 800ec40:	d009      	beq.n	800ec56 <check_fs+0x66>
 800ec42:	687b      	ldr	r3, [r7, #4]
 800ec44:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ec48:	2beb      	cmp	r3, #235	; 0xeb
 800ec4a:	d11e      	bne.n	800ec8a <check_fs+0x9a>
 800ec4c:	687b      	ldr	r3, [r7, #4]
 800ec4e:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800ec52:	2b90      	cmp	r3, #144	; 0x90
 800ec54:	d119      	bne.n	800ec8a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800ec56:	687b      	ldr	r3, [r7, #4]
 800ec58:	3334      	adds	r3, #52	; 0x34
 800ec5a:	3336      	adds	r3, #54	; 0x36
 800ec5c:	4618      	mov	r0, r3
 800ec5e:	f7fe f855 	bl	800cd0c <ld_dword>
 800ec62:	4603      	mov	r3, r0
 800ec64:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800ec68:	4a0a      	ldr	r2, [pc, #40]	; (800ec94 <check_fs+0xa4>)
 800ec6a:	4293      	cmp	r3, r2
 800ec6c:	d101      	bne.n	800ec72 <check_fs+0x82>
 800ec6e:	2300      	movs	r3, #0
 800ec70:	e00c      	b.n	800ec8c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800ec72:	687b      	ldr	r3, [r7, #4]
 800ec74:	3334      	adds	r3, #52	; 0x34
 800ec76:	3352      	adds	r3, #82	; 0x52
 800ec78:	4618      	mov	r0, r3
 800ec7a:	f7fe f847 	bl	800cd0c <ld_dword>
 800ec7e:	4603      	mov	r3, r0
 800ec80:	4a05      	ldr	r2, [pc, #20]	; (800ec98 <check_fs+0xa8>)
 800ec82:	4293      	cmp	r3, r2
 800ec84:	d101      	bne.n	800ec8a <check_fs+0x9a>
 800ec86:	2300      	movs	r3, #0
 800ec88:	e000      	b.n	800ec8c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800ec8a:	2302      	movs	r3, #2
}
 800ec8c:	4618      	mov	r0, r3
 800ec8e:	3708      	adds	r7, #8
 800ec90:	46bd      	mov	sp, r7
 800ec92:	bd80      	pop	{r7, pc}
 800ec94:	00544146 	.word	0x00544146
 800ec98:	33544146 	.word	0x33544146

0800ec9c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800ec9c:	b580      	push	{r7, lr}
 800ec9e:	b096      	sub	sp, #88	; 0x58
 800eca0:	af00      	add	r7, sp, #0
 800eca2:	60f8      	str	r0, [r7, #12]
 800eca4:	60b9      	str	r1, [r7, #8]
 800eca6:	4613      	mov	r3, r2
 800eca8:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800ecaa:	68bb      	ldr	r3, [r7, #8]
 800ecac:	2200      	movs	r2, #0
 800ecae:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800ecb0:	68f8      	ldr	r0, [r7, #12]
 800ecb2:	f7ff ff58 	bl	800eb66 <get_ldnumber>
 800ecb6:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800ecb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ecba:	2b00      	cmp	r3, #0
 800ecbc:	da01      	bge.n	800ecc2 <find_volume+0x26>
 800ecbe:	230b      	movs	r3, #11
 800ecc0:	e22d      	b.n	800f11e <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800ecc2:	4aa1      	ldr	r2, [pc, #644]	; (800ef48 <find_volume+0x2ac>)
 800ecc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ecc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ecca:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800eccc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ecce:	2b00      	cmp	r3, #0
 800ecd0:	d101      	bne.n	800ecd6 <find_volume+0x3a>
 800ecd2:	230c      	movs	r3, #12
 800ecd4:	e223      	b.n	800f11e <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800ecd6:	68bb      	ldr	r3, [r7, #8]
 800ecd8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ecda:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800ecdc:	79fb      	ldrb	r3, [r7, #7]
 800ecde:	f023 0301 	bic.w	r3, r3, #1
 800ece2:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800ece4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ece6:	781b      	ldrb	r3, [r3, #0]
 800ece8:	2b00      	cmp	r3, #0
 800ecea:	d01a      	beq.n	800ed22 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800ecec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ecee:	785b      	ldrb	r3, [r3, #1]
 800ecf0:	4618      	mov	r0, r3
 800ecf2:	f7fd ff4d 	bl	800cb90 <disk_status>
 800ecf6:	4603      	mov	r3, r0
 800ecf8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800ecfc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ed00:	f003 0301 	and.w	r3, r3, #1
 800ed04:	2b00      	cmp	r3, #0
 800ed06:	d10c      	bne.n	800ed22 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800ed08:	79fb      	ldrb	r3, [r7, #7]
 800ed0a:	2b00      	cmp	r3, #0
 800ed0c:	d007      	beq.n	800ed1e <find_volume+0x82>
 800ed0e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ed12:	f003 0304 	and.w	r3, r3, #4
 800ed16:	2b00      	cmp	r3, #0
 800ed18:	d001      	beq.n	800ed1e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800ed1a:	230a      	movs	r3, #10
 800ed1c:	e1ff      	b.n	800f11e <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 800ed1e:	2300      	movs	r3, #0
 800ed20:	e1fd      	b.n	800f11e <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800ed22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed24:	2200      	movs	r2, #0
 800ed26:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800ed28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ed2a:	b2da      	uxtb	r2, r3
 800ed2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed2e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800ed30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed32:	785b      	ldrb	r3, [r3, #1]
 800ed34:	4618      	mov	r0, r3
 800ed36:	f7fd ff45 	bl	800cbc4 <disk_initialize>
 800ed3a:	4603      	mov	r3, r0
 800ed3c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800ed40:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ed44:	f003 0301 	and.w	r3, r3, #1
 800ed48:	2b00      	cmp	r3, #0
 800ed4a:	d001      	beq.n	800ed50 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800ed4c:	2303      	movs	r3, #3
 800ed4e:	e1e6      	b.n	800f11e <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800ed50:	79fb      	ldrb	r3, [r7, #7]
 800ed52:	2b00      	cmp	r3, #0
 800ed54:	d007      	beq.n	800ed66 <find_volume+0xca>
 800ed56:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ed5a:	f003 0304 	and.w	r3, r3, #4
 800ed5e:	2b00      	cmp	r3, #0
 800ed60:	d001      	beq.n	800ed66 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800ed62:	230a      	movs	r3, #10
 800ed64:	e1db      	b.n	800f11e <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800ed66:	2300      	movs	r3, #0
 800ed68:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800ed6a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ed6c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ed6e:	f7ff ff3f 	bl	800ebf0 <check_fs>
 800ed72:	4603      	mov	r3, r0
 800ed74:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800ed78:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ed7c:	2b02      	cmp	r3, #2
 800ed7e:	d149      	bne.n	800ee14 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800ed80:	2300      	movs	r3, #0
 800ed82:	643b      	str	r3, [r7, #64]	; 0x40
 800ed84:	e01e      	b.n	800edc4 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800ed86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed88:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800ed8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ed8e:	011b      	lsls	r3, r3, #4
 800ed90:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800ed94:	4413      	add	r3, r2
 800ed96:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800ed98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed9a:	3304      	adds	r3, #4
 800ed9c:	781b      	ldrb	r3, [r3, #0]
 800ed9e:	2b00      	cmp	r3, #0
 800eda0:	d006      	beq.n	800edb0 <find_volume+0x114>
 800eda2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eda4:	3308      	adds	r3, #8
 800eda6:	4618      	mov	r0, r3
 800eda8:	f7fd ffb0 	bl	800cd0c <ld_dword>
 800edac:	4602      	mov	r2, r0
 800edae:	e000      	b.n	800edb2 <find_volume+0x116>
 800edb0:	2200      	movs	r2, #0
 800edb2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800edb4:	009b      	lsls	r3, r3, #2
 800edb6:	3358      	adds	r3, #88	; 0x58
 800edb8:	443b      	add	r3, r7
 800edba:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800edbe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800edc0:	3301      	adds	r3, #1
 800edc2:	643b      	str	r3, [r7, #64]	; 0x40
 800edc4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800edc6:	2b03      	cmp	r3, #3
 800edc8:	d9dd      	bls.n	800ed86 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800edca:	2300      	movs	r3, #0
 800edcc:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800edce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800edd0:	2b00      	cmp	r3, #0
 800edd2:	d002      	beq.n	800edda <find_volume+0x13e>
 800edd4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800edd6:	3b01      	subs	r3, #1
 800edd8:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800edda:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800eddc:	009b      	lsls	r3, r3, #2
 800edde:	3358      	adds	r3, #88	; 0x58
 800ede0:	443b      	add	r3, r7
 800ede2:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800ede6:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800ede8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800edea:	2b00      	cmp	r3, #0
 800edec:	d005      	beq.n	800edfa <find_volume+0x15e>
 800edee:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800edf0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800edf2:	f7ff fefd 	bl	800ebf0 <check_fs>
 800edf6:	4603      	mov	r3, r0
 800edf8:	e000      	b.n	800edfc <find_volume+0x160>
 800edfa:	2303      	movs	r3, #3
 800edfc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800ee00:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ee04:	2b01      	cmp	r3, #1
 800ee06:	d905      	bls.n	800ee14 <find_volume+0x178>
 800ee08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ee0a:	3301      	adds	r3, #1
 800ee0c:	643b      	str	r3, [r7, #64]	; 0x40
 800ee0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ee10:	2b03      	cmp	r3, #3
 800ee12:	d9e2      	bls.n	800edda <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800ee14:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ee18:	2b04      	cmp	r3, #4
 800ee1a:	d101      	bne.n	800ee20 <find_volume+0x184>
 800ee1c:	2301      	movs	r3, #1
 800ee1e:	e17e      	b.n	800f11e <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800ee20:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ee24:	2b01      	cmp	r3, #1
 800ee26:	d901      	bls.n	800ee2c <find_volume+0x190>
 800ee28:	230d      	movs	r3, #13
 800ee2a:	e178      	b.n	800f11e <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800ee2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee2e:	3334      	adds	r3, #52	; 0x34
 800ee30:	330b      	adds	r3, #11
 800ee32:	4618      	mov	r0, r3
 800ee34:	f7fd ff52 	bl	800ccdc <ld_word>
 800ee38:	4603      	mov	r3, r0
 800ee3a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ee3e:	d001      	beq.n	800ee44 <find_volume+0x1a8>
 800ee40:	230d      	movs	r3, #13
 800ee42:	e16c      	b.n	800f11e <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800ee44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee46:	3334      	adds	r3, #52	; 0x34
 800ee48:	3316      	adds	r3, #22
 800ee4a:	4618      	mov	r0, r3
 800ee4c:	f7fd ff46 	bl	800ccdc <ld_word>
 800ee50:	4603      	mov	r3, r0
 800ee52:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800ee54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ee56:	2b00      	cmp	r3, #0
 800ee58:	d106      	bne.n	800ee68 <find_volume+0x1cc>
 800ee5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee5c:	3334      	adds	r3, #52	; 0x34
 800ee5e:	3324      	adds	r3, #36	; 0x24
 800ee60:	4618      	mov	r0, r3
 800ee62:	f7fd ff53 	bl	800cd0c <ld_dword>
 800ee66:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800ee68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee6a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ee6c:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800ee6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee70:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800ee74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee76:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800ee78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee7a:	789b      	ldrb	r3, [r3, #2]
 800ee7c:	2b01      	cmp	r3, #1
 800ee7e:	d005      	beq.n	800ee8c <find_volume+0x1f0>
 800ee80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee82:	789b      	ldrb	r3, [r3, #2]
 800ee84:	2b02      	cmp	r3, #2
 800ee86:	d001      	beq.n	800ee8c <find_volume+0x1f0>
 800ee88:	230d      	movs	r3, #13
 800ee8a:	e148      	b.n	800f11e <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800ee8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee8e:	789b      	ldrb	r3, [r3, #2]
 800ee90:	461a      	mov	r2, r3
 800ee92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ee94:	fb02 f303 	mul.w	r3, r2, r3
 800ee98:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800ee9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee9c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800eea0:	b29a      	uxth	r2, r3
 800eea2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eea4:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800eea6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eea8:	895b      	ldrh	r3, [r3, #10]
 800eeaa:	2b00      	cmp	r3, #0
 800eeac:	d008      	beq.n	800eec0 <find_volume+0x224>
 800eeae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eeb0:	895b      	ldrh	r3, [r3, #10]
 800eeb2:	461a      	mov	r2, r3
 800eeb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eeb6:	895b      	ldrh	r3, [r3, #10]
 800eeb8:	3b01      	subs	r3, #1
 800eeba:	4013      	ands	r3, r2
 800eebc:	2b00      	cmp	r3, #0
 800eebe:	d001      	beq.n	800eec4 <find_volume+0x228>
 800eec0:	230d      	movs	r3, #13
 800eec2:	e12c      	b.n	800f11e <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800eec4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eec6:	3334      	adds	r3, #52	; 0x34
 800eec8:	3311      	adds	r3, #17
 800eeca:	4618      	mov	r0, r3
 800eecc:	f7fd ff06 	bl	800ccdc <ld_word>
 800eed0:	4603      	mov	r3, r0
 800eed2:	461a      	mov	r2, r3
 800eed4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eed6:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800eed8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eeda:	891b      	ldrh	r3, [r3, #8]
 800eedc:	f003 030f 	and.w	r3, r3, #15
 800eee0:	b29b      	uxth	r3, r3
 800eee2:	2b00      	cmp	r3, #0
 800eee4:	d001      	beq.n	800eeea <find_volume+0x24e>
 800eee6:	230d      	movs	r3, #13
 800eee8:	e119      	b.n	800f11e <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800eeea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eeec:	3334      	adds	r3, #52	; 0x34
 800eeee:	3313      	adds	r3, #19
 800eef0:	4618      	mov	r0, r3
 800eef2:	f7fd fef3 	bl	800ccdc <ld_word>
 800eef6:	4603      	mov	r3, r0
 800eef8:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800eefa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800eefc:	2b00      	cmp	r3, #0
 800eefe:	d106      	bne.n	800ef0e <find_volume+0x272>
 800ef00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef02:	3334      	adds	r3, #52	; 0x34
 800ef04:	3320      	adds	r3, #32
 800ef06:	4618      	mov	r0, r3
 800ef08:	f7fd ff00 	bl	800cd0c <ld_dword>
 800ef0c:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800ef0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef10:	3334      	adds	r3, #52	; 0x34
 800ef12:	330e      	adds	r3, #14
 800ef14:	4618      	mov	r0, r3
 800ef16:	f7fd fee1 	bl	800ccdc <ld_word>
 800ef1a:	4603      	mov	r3, r0
 800ef1c:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800ef1e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ef20:	2b00      	cmp	r3, #0
 800ef22:	d101      	bne.n	800ef28 <find_volume+0x28c>
 800ef24:	230d      	movs	r3, #13
 800ef26:	e0fa      	b.n	800f11e <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800ef28:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800ef2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ef2c:	4413      	add	r3, r2
 800ef2e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ef30:	8912      	ldrh	r2, [r2, #8]
 800ef32:	0912      	lsrs	r2, r2, #4
 800ef34:	b292      	uxth	r2, r2
 800ef36:	4413      	add	r3, r2
 800ef38:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800ef3a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ef3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef3e:	429a      	cmp	r2, r3
 800ef40:	d204      	bcs.n	800ef4c <find_volume+0x2b0>
 800ef42:	230d      	movs	r3, #13
 800ef44:	e0eb      	b.n	800f11e <find_volume+0x482>
 800ef46:	bf00      	nop
 800ef48:	20007300 	.word	0x20007300
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800ef4c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ef4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef50:	1ad3      	subs	r3, r2, r3
 800ef52:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ef54:	8952      	ldrh	r2, [r2, #10]
 800ef56:	fbb3 f3f2 	udiv	r3, r3, r2
 800ef5a:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800ef5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef5e:	2b00      	cmp	r3, #0
 800ef60:	d101      	bne.n	800ef66 <find_volume+0x2ca>
 800ef62:	230d      	movs	r3, #13
 800ef64:	e0db      	b.n	800f11e <find_volume+0x482>
		fmt = FS_FAT32;
 800ef66:	2303      	movs	r3, #3
 800ef68:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800ef6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef6e:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800ef72:	4293      	cmp	r3, r2
 800ef74:	d802      	bhi.n	800ef7c <find_volume+0x2e0>
 800ef76:	2302      	movs	r3, #2
 800ef78:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800ef7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef7e:	f640 72f5 	movw	r2, #4085	; 0xff5
 800ef82:	4293      	cmp	r3, r2
 800ef84:	d802      	bhi.n	800ef8c <find_volume+0x2f0>
 800ef86:	2301      	movs	r3, #1
 800ef88:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800ef8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef8e:	1c9a      	adds	r2, r3, #2
 800ef90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef92:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800ef94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef96:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ef98:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800ef9a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800ef9c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ef9e:	441a      	add	r2, r3
 800efa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800efa2:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800efa4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800efa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800efa8:	441a      	add	r2, r3
 800efaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800efac:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 800efae:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800efb2:	2b03      	cmp	r3, #3
 800efb4:	d11e      	bne.n	800eff4 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800efb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800efb8:	3334      	adds	r3, #52	; 0x34
 800efba:	332a      	adds	r3, #42	; 0x2a
 800efbc:	4618      	mov	r0, r3
 800efbe:	f7fd fe8d 	bl	800ccdc <ld_word>
 800efc2:	4603      	mov	r3, r0
 800efc4:	2b00      	cmp	r3, #0
 800efc6:	d001      	beq.n	800efcc <find_volume+0x330>
 800efc8:	230d      	movs	r3, #13
 800efca:	e0a8      	b.n	800f11e <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800efcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800efce:	891b      	ldrh	r3, [r3, #8]
 800efd0:	2b00      	cmp	r3, #0
 800efd2:	d001      	beq.n	800efd8 <find_volume+0x33c>
 800efd4:	230d      	movs	r3, #13
 800efd6:	e0a2      	b.n	800f11e <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800efd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800efda:	3334      	adds	r3, #52	; 0x34
 800efdc:	332c      	adds	r3, #44	; 0x2c
 800efde:	4618      	mov	r0, r3
 800efe0:	f7fd fe94 	bl	800cd0c <ld_dword>
 800efe4:	4602      	mov	r2, r0
 800efe6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800efe8:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800efea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800efec:	699b      	ldr	r3, [r3, #24]
 800efee:	009b      	lsls	r3, r3, #2
 800eff0:	647b      	str	r3, [r7, #68]	; 0x44
 800eff2:	e01f      	b.n	800f034 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800eff4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eff6:	891b      	ldrh	r3, [r3, #8]
 800eff8:	2b00      	cmp	r3, #0
 800effa:	d101      	bne.n	800f000 <find_volume+0x364>
 800effc:	230d      	movs	r3, #13
 800effe:	e08e      	b.n	800f11e <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800f000:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f002:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f004:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f006:	441a      	add	r2, r3
 800f008:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f00a:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800f00c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f010:	2b02      	cmp	r3, #2
 800f012:	d103      	bne.n	800f01c <find_volume+0x380>
 800f014:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f016:	699b      	ldr	r3, [r3, #24]
 800f018:	005b      	lsls	r3, r3, #1
 800f01a:	e00a      	b.n	800f032 <find_volume+0x396>
 800f01c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f01e:	699a      	ldr	r2, [r3, #24]
 800f020:	4613      	mov	r3, r2
 800f022:	005b      	lsls	r3, r3, #1
 800f024:	4413      	add	r3, r2
 800f026:	085a      	lsrs	r2, r3, #1
 800f028:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f02a:	699b      	ldr	r3, [r3, #24]
 800f02c:	f003 0301 	and.w	r3, r3, #1
 800f030:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800f032:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800f034:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f036:	69da      	ldr	r2, [r3, #28]
 800f038:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f03a:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800f03e:	0a5b      	lsrs	r3, r3, #9
 800f040:	429a      	cmp	r2, r3
 800f042:	d201      	bcs.n	800f048 <find_volume+0x3ac>
 800f044:	230d      	movs	r3, #13
 800f046:	e06a      	b.n	800f11e <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800f048:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f04a:	f04f 32ff 	mov.w	r2, #4294967295
 800f04e:	615a      	str	r2, [r3, #20]
 800f050:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f052:	695a      	ldr	r2, [r3, #20]
 800f054:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f056:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800f058:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f05a:	2280      	movs	r2, #128	; 0x80
 800f05c:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800f05e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f062:	2b03      	cmp	r3, #3
 800f064:	d149      	bne.n	800f0fa <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800f066:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f068:	3334      	adds	r3, #52	; 0x34
 800f06a:	3330      	adds	r3, #48	; 0x30
 800f06c:	4618      	mov	r0, r3
 800f06e:	f7fd fe35 	bl	800ccdc <ld_word>
 800f072:	4603      	mov	r3, r0
 800f074:	2b01      	cmp	r3, #1
 800f076:	d140      	bne.n	800f0fa <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800f078:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f07a:	3301      	adds	r3, #1
 800f07c:	4619      	mov	r1, r3
 800f07e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f080:	f7fe f8dc 	bl	800d23c <move_window>
 800f084:	4603      	mov	r3, r0
 800f086:	2b00      	cmp	r3, #0
 800f088:	d137      	bne.n	800f0fa <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800f08a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f08c:	2200      	movs	r2, #0
 800f08e:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800f090:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f092:	3334      	adds	r3, #52	; 0x34
 800f094:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800f098:	4618      	mov	r0, r3
 800f09a:	f7fd fe1f 	bl	800ccdc <ld_word>
 800f09e:	4603      	mov	r3, r0
 800f0a0:	461a      	mov	r2, r3
 800f0a2:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800f0a6:	429a      	cmp	r2, r3
 800f0a8:	d127      	bne.n	800f0fa <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800f0aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0ac:	3334      	adds	r3, #52	; 0x34
 800f0ae:	4618      	mov	r0, r3
 800f0b0:	f7fd fe2c 	bl	800cd0c <ld_dword>
 800f0b4:	4603      	mov	r3, r0
 800f0b6:	4a1c      	ldr	r2, [pc, #112]	; (800f128 <find_volume+0x48c>)
 800f0b8:	4293      	cmp	r3, r2
 800f0ba:	d11e      	bne.n	800f0fa <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800f0bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0be:	3334      	adds	r3, #52	; 0x34
 800f0c0:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800f0c4:	4618      	mov	r0, r3
 800f0c6:	f7fd fe21 	bl	800cd0c <ld_dword>
 800f0ca:	4603      	mov	r3, r0
 800f0cc:	4a17      	ldr	r2, [pc, #92]	; (800f12c <find_volume+0x490>)
 800f0ce:	4293      	cmp	r3, r2
 800f0d0:	d113      	bne.n	800f0fa <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800f0d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0d4:	3334      	adds	r3, #52	; 0x34
 800f0d6:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800f0da:	4618      	mov	r0, r3
 800f0dc:	f7fd fe16 	bl	800cd0c <ld_dword>
 800f0e0:	4602      	mov	r2, r0
 800f0e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0e4:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800f0e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0e8:	3334      	adds	r3, #52	; 0x34
 800f0ea:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800f0ee:	4618      	mov	r0, r3
 800f0f0:	f7fd fe0c 	bl	800cd0c <ld_dword>
 800f0f4:	4602      	mov	r2, r0
 800f0f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0f8:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800f0fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0fc:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800f100:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800f102:	4b0b      	ldr	r3, [pc, #44]	; (800f130 <find_volume+0x494>)
 800f104:	881b      	ldrh	r3, [r3, #0]
 800f106:	3301      	adds	r3, #1
 800f108:	b29a      	uxth	r2, r3
 800f10a:	4b09      	ldr	r3, [pc, #36]	; (800f130 <find_volume+0x494>)
 800f10c:	801a      	strh	r2, [r3, #0]
 800f10e:	4b08      	ldr	r3, [pc, #32]	; (800f130 <find_volume+0x494>)
 800f110:	881a      	ldrh	r2, [r3, #0]
 800f112:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f114:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800f116:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f118:	f7fe f828 	bl	800d16c <clear_lock>
#endif
	return FR_OK;
 800f11c:	2300      	movs	r3, #0
}
 800f11e:	4618      	mov	r0, r3
 800f120:	3758      	adds	r7, #88	; 0x58
 800f122:	46bd      	mov	sp, r7
 800f124:	bd80      	pop	{r7, pc}
 800f126:	bf00      	nop
 800f128:	41615252 	.word	0x41615252
 800f12c:	61417272 	.word	0x61417272
 800f130:	20007308 	.word	0x20007308

0800f134 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800f134:	b580      	push	{r7, lr}
 800f136:	b084      	sub	sp, #16
 800f138:	af00      	add	r7, sp, #0
 800f13a:	6078      	str	r0, [r7, #4]
 800f13c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800f13e:	2309      	movs	r3, #9
 800f140:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800f142:	687b      	ldr	r3, [r7, #4]
 800f144:	2b00      	cmp	r3, #0
 800f146:	d01c      	beq.n	800f182 <validate+0x4e>
 800f148:	687b      	ldr	r3, [r7, #4]
 800f14a:	681b      	ldr	r3, [r3, #0]
 800f14c:	2b00      	cmp	r3, #0
 800f14e:	d018      	beq.n	800f182 <validate+0x4e>
 800f150:	687b      	ldr	r3, [r7, #4]
 800f152:	681b      	ldr	r3, [r3, #0]
 800f154:	781b      	ldrb	r3, [r3, #0]
 800f156:	2b00      	cmp	r3, #0
 800f158:	d013      	beq.n	800f182 <validate+0x4e>
 800f15a:	687b      	ldr	r3, [r7, #4]
 800f15c:	889a      	ldrh	r2, [r3, #4]
 800f15e:	687b      	ldr	r3, [r7, #4]
 800f160:	681b      	ldr	r3, [r3, #0]
 800f162:	88db      	ldrh	r3, [r3, #6]
 800f164:	429a      	cmp	r2, r3
 800f166:	d10c      	bne.n	800f182 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800f168:	687b      	ldr	r3, [r7, #4]
 800f16a:	681b      	ldr	r3, [r3, #0]
 800f16c:	785b      	ldrb	r3, [r3, #1]
 800f16e:	4618      	mov	r0, r3
 800f170:	f7fd fd0e 	bl	800cb90 <disk_status>
 800f174:	4603      	mov	r3, r0
 800f176:	f003 0301 	and.w	r3, r3, #1
 800f17a:	2b00      	cmp	r3, #0
 800f17c:	d101      	bne.n	800f182 <validate+0x4e>
			res = FR_OK;
 800f17e:	2300      	movs	r3, #0
 800f180:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800f182:	7bfb      	ldrb	r3, [r7, #15]
 800f184:	2b00      	cmp	r3, #0
 800f186:	d102      	bne.n	800f18e <validate+0x5a>
 800f188:	687b      	ldr	r3, [r7, #4]
 800f18a:	681b      	ldr	r3, [r3, #0]
 800f18c:	e000      	b.n	800f190 <validate+0x5c>
 800f18e:	2300      	movs	r3, #0
 800f190:	683a      	ldr	r2, [r7, #0]
 800f192:	6013      	str	r3, [r2, #0]
	return res;
 800f194:	7bfb      	ldrb	r3, [r7, #15]
}
 800f196:	4618      	mov	r0, r3
 800f198:	3710      	adds	r7, #16
 800f19a:	46bd      	mov	sp, r7
 800f19c:	bd80      	pop	{r7, pc}
	...

0800f1a0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800f1a0:	b580      	push	{r7, lr}
 800f1a2:	b088      	sub	sp, #32
 800f1a4:	af00      	add	r7, sp, #0
 800f1a6:	60f8      	str	r0, [r7, #12]
 800f1a8:	60b9      	str	r1, [r7, #8]
 800f1aa:	4613      	mov	r3, r2
 800f1ac:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800f1ae:	68bb      	ldr	r3, [r7, #8]
 800f1b0:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800f1b2:	f107 0310 	add.w	r3, r7, #16
 800f1b6:	4618      	mov	r0, r3
 800f1b8:	f7ff fcd5 	bl	800eb66 <get_ldnumber>
 800f1bc:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800f1be:	69fb      	ldr	r3, [r7, #28]
 800f1c0:	2b00      	cmp	r3, #0
 800f1c2:	da01      	bge.n	800f1c8 <f_mount+0x28>
 800f1c4:	230b      	movs	r3, #11
 800f1c6:	e02b      	b.n	800f220 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800f1c8:	4a17      	ldr	r2, [pc, #92]	; (800f228 <f_mount+0x88>)
 800f1ca:	69fb      	ldr	r3, [r7, #28]
 800f1cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f1d0:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800f1d2:	69bb      	ldr	r3, [r7, #24]
 800f1d4:	2b00      	cmp	r3, #0
 800f1d6:	d005      	beq.n	800f1e4 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800f1d8:	69b8      	ldr	r0, [r7, #24]
 800f1da:	f7fd ffc7 	bl	800d16c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800f1de:	69bb      	ldr	r3, [r7, #24]
 800f1e0:	2200      	movs	r2, #0
 800f1e2:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800f1e4:	68fb      	ldr	r3, [r7, #12]
 800f1e6:	2b00      	cmp	r3, #0
 800f1e8:	d002      	beq.n	800f1f0 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800f1ea:	68fb      	ldr	r3, [r7, #12]
 800f1ec:	2200      	movs	r2, #0
 800f1ee:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800f1f0:	68fa      	ldr	r2, [r7, #12]
 800f1f2:	490d      	ldr	r1, [pc, #52]	; (800f228 <f_mount+0x88>)
 800f1f4:	69fb      	ldr	r3, [r7, #28]
 800f1f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800f1fa:	68fb      	ldr	r3, [r7, #12]
 800f1fc:	2b00      	cmp	r3, #0
 800f1fe:	d002      	beq.n	800f206 <f_mount+0x66>
 800f200:	79fb      	ldrb	r3, [r7, #7]
 800f202:	2b01      	cmp	r3, #1
 800f204:	d001      	beq.n	800f20a <f_mount+0x6a>
 800f206:	2300      	movs	r3, #0
 800f208:	e00a      	b.n	800f220 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800f20a:	f107 010c 	add.w	r1, r7, #12
 800f20e:	f107 0308 	add.w	r3, r7, #8
 800f212:	2200      	movs	r2, #0
 800f214:	4618      	mov	r0, r3
 800f216:	f7ff fd41 	bl	800ec9c <find_volume>
 800f21a:	4603      	mov	r3, r0
 800f21c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800f21e:	7dfb      	ldrb	r3, [r7, #23]
}
 800f220:	4618      	mov	r0, r3
 800f222:	3720      	adds	r7, #32
 800f224:	46bd      	mov	sp, r7
 800f226:	bd80      	pop	{r7, pc}
 800f228:	20007300 	.word	0x20007300

0800f22c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800f22c:	b580      	push	{r7, lr}
 800f22e:	b09a      	sub	sp, #104	; 0x68
 800f230:	af00      	add	r7, sp, #0
 800f232:	60f8      	str	r0, [r7, #12]
 800f234:	60b9      	str	r1, [r7, #8]
 800f236:	4613      	mov	r3, r2
 800f238:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800f23a:	68fb      	ldr	r3, [r7, #12]
 800f23c:	2b00      	cmp	r3, #0
 800f23e:	d101      	bne.n	800f244 <f_open+0x18>
 800f240:	2309      	movs	r3, #9
 800f242:	e1bd      	b.n	800f5c0 <f_open+0x394>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800f244:	79fb      	ldrb	r3, [r7, #7]
 800f246:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f24a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800f24c:	79fa      	ldrb	r2, [r7, #7]
 800f24e:	f107 0110 	add.w	r1, r7, #16
 800f252:	f107 0308 	add.w	r3, r7, #8
 800f256:	4618      	mov	r0, r3
 800f258:	f7ff fd20 	bl	800ec9c <find_volume>
 800f25c:	4603      	mov	r3, r0
 800f25e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800f262:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f266:	2b00      	cmp	r3, #0
 800f268:	f040 81a1 	bne.w	800f5ae <f_open+0x382>
		dj.obj.fs = fs;
 800f26c:	693b      	ldr	r3, [r7, #16]
 800f26e:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
 800f270:	f44f 7000 	mov.w	r0, #512	; 0x200
 800f274:	f001 fba9 	bl	80109ca <ff_memalloc>
 800f278:	65b8      	str	r0, [r7, #88]	; 0x58
 800f27a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f27c:	2b00      	cmp	r3, #0
 800f27e:	d101      	bne.n	800f284 <f_open+0x58>
 800f280:	2311      	movs	r3, #17
 800f282:	e19d      	b.n	800f5c0 <f_open+0x394>
 800f284:	693b      	ldr	r3, [r7, #16]
 800f286:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f288:	60da      	str	r2, [r3, #12]
		res = follow_path(&dj, path);	/* Follow the file path */
 800f28a:	68ba      	ldr	r2, [r7, #8]
 800f28c:	f107 0314 	add.w	r3, r7, #20
 800f290:	4611      	mov	r1, r2
 800f292:	4618      	mov	r0, r3
 800f294:	f7ff fbf6 	bl	800ea84 <follow_path>
 800f298:	4603      	mov	r3, r0
 800f29a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800f29e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f2a2:	2b00      	cmp	r3, #0
 800f2a4:	d11a      	bne.n	800f2dc <f_open+0xb0>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800f2a6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800f2aa:	b25b      	sxtb	r3, r3
 800f2ac:	2b00      	cmp	r3, #0
 800f2ae:	da03      	bge.n	800f2b8 <f_open+0x8c>
				res = FR_INVALID_NAME;
 800f2b0:	2306      	movs	r3, #6
 800f2b2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800f2b6:	e011      	b.n	800f2dc <f_open+0xb0>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800f2b8:	79fb      	ldrb	r3, [r7, #7]
 800f2ba:	f023 0301 	bic.w	r3, r3, #1
 800f2be:	2b00      	cmp	r3, #0
 800f2c0:	bf14      	ite	ne
 800f2c2:	2301      	movne	r3, #1
 800f2c4:	2300      	moveq	r3, #0
 800f2c6:	b2db      	uxtb	r3, r3
 800f2c8:	461a      	mov	r2, r3
 800f2ca:	f107 0314 	add.w	r3, r7, #20
 800f2ce:	4611      	mov	r1, r2
 800f2d0:	4618      	mov	r0, r3
 800f2d2:	f7fd fe03 	bl	800cedc <chk_lock>
 800f2d6:	4603      	mov	r3, r0
 800f2d8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800f2dc:	79fb      	ldrb	r3, [r7, #7]
 800f2de:	f003 031c 	and.w	r3, r3, #28
 800f2e2:	2b00      	cmp	r3, #0
 800f2e4:	d07f      	beq.n	800f3e6 <f_open+0x1ba>
			if (res != FR_OK) {					/* No file, create new */
 800f2e6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f2ea:	2b00      	cmp	r3, #0
 800f2ec:	d017      	beq.n	800f31e <f_open+0xf2>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800f2ee:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f2f2:	2b04      	cmp	r3, #4
 800f2f4:	d10e      	bne.n	800f314 <f_open+0xe8>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800f2f6:	f7fd fe4d 	bl	800cf94 <enq_lock>
 800f2fa:	4603      	mov	r3, r0
 800f2fc:	2b00      	cmp	r3, #0
 800f2fe:	d006      	beq.n	800f30e <f_open+0xe2>
 800f300:	f107 0314 	add.w	r3, r7, #20
 800f304:	4618      	mov	r0, r3
 800f306:	f7ff f82f 	bl	800e368 <dir_register>
 800f30a:	4603      	mov	r3, r0
 800f30c:	e000      	b.n	800f310 <f_open+0xe4>
 800f30e:	2312      	movs	r3, #18
 800f310:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800f314:	79fb      	ldrb	r3, [r7, #7]
 800f316:	f043 0308 	orr.w	r3, r3, #8
 800f31a:	71fb      	strb	r3, [r7, #7]
 800f31c:	e010      	b.n	800f340 <f_open+0x114>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800f31e:	7ebb      	ldrb	r3, [r7, #26]
 800f320:	f003 0311 	and.w	r3, r3, #17
 800f324:	2b00      	cmp	r3, #0
 800f326:	d003      	beq.n	800f330 <f_open+0x104>
					res = FR_DENIED;
 800f328:	2307      	movs	r3, #7
 800f32a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800f32e:	e007      	b.n	800f340 <f_open+0x114>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800f330:	79fb      	ldrb	r3, [r7, #7]
 800f332:	f003 0304 	and.w	r3, r3, #4
 800f336:	2b00      	cmp	r3, #0
 800f338:	d002      	beq.n	800f340 <f_open+0x114>
 800f33a:	2308      	movs	r3, #8
 800f33c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800f340:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f344:	2b00      	cmp	r3, #0
 800f346:	d168      	bne.n	800f41a <f_open+0x1ee>
 800f348:	79fb      	ldrb	r3, [r7, #7]
 800f34a:	f003 0308 	and.w	r3, r3, #8
 800f34e:	2b00      	cmp	r3, #0
 800f350:	d063      	beq.n	800f41a <f_open+0x1ee>
				dw = GET_FATTIME();
 800f352:	f7fd fcbb 	bl	800cccc <get_fattime>
 800f356:	6578      	str	r0, [r7, #84]	; 0x54
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800f358:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f35a:	330e      	adds	r3, #14
 800f35c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800f35e:	4618      	mov	r0, r3
 800f360:	f7fd fd12 	bl	800cd88 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800f364:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f366:	3316      	adds	r3, #22
 800f368:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800f36a:	4618      	mov	r0, r3
 800f36c:	f7fd fd0c 	bl	800cd88 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800f370:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f372:	330b      	adds	r3, #11
 800f374:	2220      	movs	r2, #32
 800f376:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800f378:	693b      	ldr	r3, [r7, #16]
 800f37a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f37c:	4611      	mov	r1, r2
 800f37e:	4618      	mov	r0, r3
 800f380:	f7fe fc61 	bl	800dc46 <ld_clust>
 800f384:	6538      	str	r0, [r7, #80]	; 0x50
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800f386:	693b      	ldr	r3, [r7, #16]
 800f388:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800f38a:	2200      	movs	r2, #0
 800f38c:	4618      	mov	r0, r3
 800f38e:	f7fe fc79 	bl	800dc84 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800f392:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f394:	331c      	adds	r3, #28
 800f396:	2100      	movs	r1, #0
 800f398:	4618      	mov	r0, r3
 800f39a:	f7fd fcf5 	bl	800cd88 <st_dword>
					fs->wflag = 1;
 800f39e:	693b      	ldr	r3, [r7, #16]
 800f3a0:	2201      	movs	r2, #1
 800f3a2:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800f3a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f3a6:	2b00      	cmp	r3, #0
 800f3a8:	d037      	beq.n	800f41a <f_open+0x1ee>
						dw = fs->winsect;
 800f3aa:	693b      	ldr	r3, [r7, #16]
 800f3ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f3ae:	657b      	str	r3, [r7, #84]	; 0x54
						res = remove_chain(&dj.obj, cl, 0);
 800f3b0:	f107 0314 	add.w	r3, r7, #20
 800f3b4:	2200      	movs	r2, #0
 800f3b6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800f3b8:	4618      	mov	r0, r3
 800f3ba:	f7fe f98c 	bl	800d6d6 <remove_chain>
 800f3be:	4603      	mov	r3, r0
 800f3c0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 800f3c4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f3c8:	2b00      	cmp	r3, #0
 800f3ca:	d126      	bne.n	800f41a <f_open+0x1ee>
							res = move_window(fs, dw);
 800f3cc:	693b      	ldr	r3, [r7, #16]
 800f3ce:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800f3d0:	4618      	mov	r0, r3
 800f3d2:	f7fd ff33 	bl	800d23c <move_window>
 800f3d6:	4603      	mov	r3, r0
 800f3d8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800f3dc:	693b      	ldr	r3, [r7, #16]
 800f3de:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f3e0:	3a01      	subs	r2, #1
 800f3e2:	611a      	str	r2, [r3, #16]
 800f3e4:	e019      	b.n	800f41a <f_open+0x1ee>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800f3e6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f3ea:	2b00      	cmp	r3, #0
 800f3ec:	d115      	bne.n	800f41a <f_open+0x1ee>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800f3ee:	7ebb      	ldrb	r3, [r7, #26]
 800f3f0:	f003 0310 	and.w	r3, r3, #16
 800f3f4:	2b00      	cmp	r3, #0
 800f3f6:	d003      	beq.n	800f400 <f_open+0x1d4>
					res = FR_NO_FILE;
 800f3f8:	2304      	movs	r3, #4
 800f3fa:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800f3fe:	e00c      	b.n	800f41a <f_open+0x1ee>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800f400:	79fb      	ldrb	r3, [r7, #7]
 800f402:	f003 0302 	and.w	r3, r3, #2
 800f406:	2b00      	cmp	r3, #0
 800f408:	d007      	beq.n	800f41a <f_open+0x1ee>
 800f40a:	7ebb      	ldrb	r3, [r7, #26]
 800f40c:	f003 0301 	and.w	r3, r3, #1
 800f410:	2b00      	cmp	r3, #0
 800f412:	d002      	beq.n	800f41a <f_open+0x1ee>
						res = FR_DENIED;
 800f414:	2307      	movs	r3, #7
 800f416:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800f41a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f41e:	2b00      	cmp	r3, #0
 800f420:	d128      	bne.n	800f474 <f_open+0x248>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800f422:	79fb      	ldrb	r3, [r7, #7]
 800f424:	f003 0308 	and.w	r3, r3, #8
 800f428:	2b00      	cmp	r3, #0
 800f42a:	d003      	beq.n	800f434 <f_open+0x208>
				mode |= FA_MODIFIED;
 800f42c:	79fb      	ldrb	r3, [r7, #7]
 800f42e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f432:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800f434:	693b      	ldr	r3, [r7, #16]
 800f436:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f438:	68fb      	ldr	r3, [r7, #12]
 800f43a:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800f43c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f43e:	68fb      	ldr	r3, [r7, #12]
 800f440:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800f442:	79fb      	ldrb	r3, [r7, #7]
 800f444:	f023 0301 	bic.w	r3, r3, #1
 800f448:	2b00      	cmp	r3, #0
 800f44a:	bf14      	ite	ne
 800f44c:	2301      	movne	r3, #1
 800f44e:	2300      	moveq	r3, #0
 800f450:	b2db      	uxtb	r3, r3
 800f452:	461a      	mov	r2, r3
 800f454:	f107 0314 	add.w	r3, r7, #20
 800f458:	4611      	mov	r1, r2
 800f45a:	4618      	mov	r0, r3
 800f45c:	f7fd fdbc 	bl	800cfd8 <inc_lock>
 800f460:	4602      	mov	r2, r0
 800f462:	68fb      	ldr	r3, [r7, #12]
 800f464:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800f466:	68fb      	ldr	r3, [r7, #12]
 800f468:	691b      	ldr	r3, [r3, #16]
 800f46a:	2b00      	cmp	r3, #0
 800f46c:	d102      	bne.n	800f474 <f_open+0x248>
 800f46e:	2302      	movs	r3, #2
 800f470:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800f474:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f478:	2b00      	cmp	r3, #0
 800f47a:	f040 8095 	bne.w	800f5a8 <f_open+0x37c>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800f47e:	693b      	ldr	r3, [r7, #16]
 800f480:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f482:	4611      	mov	r1, r2
 800f484:	4618      	mov	r0, r3
 800f486:	f7fe fbde 	bl	800dc46 <ld_clust>
 800f48a:	4602      	mov	r2, r0
 800f48c:	68fb      	ldr	r3, [r7, #12]
 800f48e:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800f490:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f492:	331c      	adds	r3, #28
 800f494:	4618      	mov	r0, r3
 800f496:	f7fd fc39 	bl	800cd0c <ld_dword>
 800f49a:	4602      	mov	r2, r0
 800f49c:	68fb      	ldr	r3, [r7, #12]
 800f49e:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800f4a0:	68fb      	ldr	r3, [r7, #12]
 800f4a2:	2200      	movs	r2, #0
 800f4a4:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800f4a6:	693a      	ldr	r2, [r7, #16]
 800f4a8:	68fb      	ldr	r3, [r7, #12]
 800f4aa:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800f4ac:	693b      	ldr	r3, [r7, #16]
 800f4ae:	88da      	ldrh	r2, [r3, #6]
 800f4b0:	68fb      	ldr	r3, [r7, #12]
 800f4b2:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800f4b4:	68fb      	ldr	r3, [r7, #12]
 800f4b6:	79fa      	ldrb	r2, [r7, #7]
 800f4b8:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800f4ba:	68fb      	ldr	r3, [r7, #12]
 800f4bc:	2200      	movs	r2, #0
 800f4be:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800f4c0:	68fb      	ldr	r3, [r7, #12]
 800f4c2:	2200      	movs	r2, #0
 800f4c4:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800f4c6:	68fb      	ldr	r3, [r7, #12]
 800f4c8:	2200      	movs	r2, #0
 800f4ca:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800f4cc:	68fb      	ldr	r3, [r7, #12]
 800f4ce:	3330      	adds	r3, #48	; 0x30
 800f4d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f4d4:	2100      	movs	r1, #0
 800f4d6:	4618      	mov	r0, r3
 800f4d8:	f7fd fca3 	bl	800ce22 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800f4dc:	79fb      	ldrb	r3, [r7, #7]
 800f4de:	f003 0320 	and.w	r3, r3, #32
 800f4e2:	2b00      	cmp	r3, #0
 800f4e4:	d060      	beq.n	800f5a8 <f_open+0x37c>
 800f4e6:	68fb      	ldr	r3, [r7, #12]
 800f4e8:	68db      	ldr	r3, [r3, #12]
 800f4ea:	2b00      	cmp	r3, #0
 800f4ec:	d05c      	beq.n	800f5a8 <f_open+0x37c>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800f4ee:	68fb      	ldr	r3, [r7, #12]
 800f4f0:	68da      	ldr	r2, [r3, #12]
 800f4f2:	68fb      	ldr	r3, [r7, #12]
 800f4f4:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800f4f6:	693b      	ldr	r3, [r7, #16]
 800f4f8:	895b      	ldrh	r3, [r3, #10]
 800f4fa:	025b      	lsls	r3, r3, #9
 800f4fc:	64fb      	str	r3, [r7, #76]	; 0x4c
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800f4fe:	68fb      	ldr	r3, [r7, #12]
 800f500:	689b      	ldr	r3, [r3, #8]
 800f502:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800f504:	68fb      	ldr	r3, [r7, #12]
 800f506:	68db      	ldr	r3, [r3, #12]
 800f508:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f50a:	e016      	b.n	800f53a <f_open+0x30e>
					clst = get_fat(&fp->obj, clst);
 800f50c:	68fb      	ldr	r3, [r7, #12]
 800f50e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800f510:	4618      	mov	r0, r3
 800f512:	f7fd ff4e 	bl	800d3b2 <get_fat>
 800f516:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800f518:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f51a:	2b01      	cmp	r3, #1
 800f51c:	d802      	bhi.n	800f524 <f_open+0x2f8>
 800f51e:	2302      	movs	r3, #2
 800f520:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800f524:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f526:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f52a:	d102      	bne.n	800f532 <f_open+0x306>
 800f52c:	2301      	movs	r3, #1
 800f52e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800f532:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800f534:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f536:	1ad3      	subs	r3, r2, r3
 800f538:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f53a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f53e:	2b00      	cmp	r3, #0
 800f540:	d103      	bne.n	800f54a <f_open+0x31e>
 800f542:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800f544:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f546:	429a      	cmp	r2, r3
 800f548:	d8e0      	bhi.n	800f50c <f_open+0x2e0>
				}
				fp->clust = clst;
 800f54a:	68fb      	ldr	r3, [r7, #12]
 800f54c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800f54e:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800f550:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f554:	2b00      	cmp	r3, #0
 800f556:	d127      	bne.n	800f5a8 <f_open+0x37c>
 800f558:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f55a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f55e:	2b00      	cmp	r3, #0
 800f560:	d022      	beq.n	800f5a8 <f_open+0x37c>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800f562:	693b      	ldr	r3, [r7, #16]
 800f564:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800f566:	4618      	mov	r0, r3
 800f568:	f7fd ff04 	bl	800d374 <clust2sect>
 800f56c:	64b8      	str	r0, [r7, #72]	; 0x48
 800f56e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f570:	2b00      	cmp	r3, #0
 800f572:	d103      	bne.n	800f57c <f_open+0x350>
						res = FR_INT_ERR;
 800f574:	2302      	movs	r3, #2
 800f576:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800f57a:	e015      	b.n	800f5a8 <f_open+0x37c>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800f57c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f57e:	0a5a      	lsrs	r2, r3, #9
 800f580:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f582:	441a      	add	r2, r3
 800f584:	68fb      	ldr	r3, [r7, #12]
 800f586:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800f588:	693b      	ldr	r3, [r7, #16]
 800f58a:	7858      	ldrb	r0, [r3, #1]
 800f58c:	68fb      	ldr	r3, [r7, #12]
 800f58e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f592:	68fb      	ldr	r3, [r7, #12]
 800f594:	6a1a      	ldr	r2, [r3, #32]
 800f596:	2301      	movs	r3, #1
 800f598:	f7fd fb3a 	bl	800cc10 <disk_read>
 800f59c:	4603      	mov	r3, r0
 800f59e:	2b00      	cmp	r3, #0
 800f5a0:	d002      	beq.n	800f5a8 <f_open+0x37c>
 800f5a2:	2301      	movs	r3, #1
 800f5a4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
#endif
		}

		FREE_NAMBUF();
 800f5a8:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800f5aa:	f001 fa1a 	bl	80109e2 <ff_memfree>
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800f5ae:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f5b2:	2b00      	cmp	r3, #0
 800f5b4:	d002      	beq.n	800f5bc <f_open+0x390>
 800f5b6:	68fb      	ldr	r3, [r7, #12]
 800f5b8:	2200      	movs	r2, #0
 800f5ba:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800f5bc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800f5c0:	4618      	mov	r0, r3
 800f5c2:	3768      	adds	r7, #104	; 0x68
 800f5c4:	46bd      	mov	sp, r7
 800f5c6:	bd80      	pop	{r7, pc}

0800f5c8 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800f5c8:	b580      	push	{r7, lr}
 800f5ca:	b08e      	sub	sp, #56	; 0x38
 800f5cc:	af00      	add	r7, sp, #0
 800f5ce:	60f8      	str	r0, [r7, #12]
 800f5d0:	60b9      	str	r1, [r7, #8]
 800f5d2:	607a      	str	r2, [r7, #4]
 800f5d4:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800f5d6:	68bb      	ldr	r3, [r7, #8]
 800f5d8:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800f5da:	683b      	ldr	r3, [r7, #0]
 800f5dc:	2200      	movs	r2, #0
 800f5de:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800f5e0:	68fb      	ldr	r3, [r7, #12]
 800f5e2:	f107 0214 	add.w	r2, r7, #20
 800f5e6:	4611      	mov	r1, r2
 800f5e8:	4618      	mov	r0, r3
 800f5ea:	f7ff fda3 	bl	800f134 <validate>
 800f5ee:	4603      	mov	r3, r0
 800f5f0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800f5f4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f5f8:	2b00      	cmp	r3, #0
 800f5fa:	d107      	bne.n	800f60c <f_read+0x44>
 800f5fc:	68fb      	ldr	r3, [r7, #12]
 800f5fe:	7d5b      	ldrb	r3, [r3, #21]
 800f600:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800f604:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f608:	2b00      	cmp	r3, #0
 800f60a:	d002      	beq.n	800f612 <f_read+0x4a>
 800f60c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f610:	e115      	b.n	800f83e <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800f612:	68fb      	ldr	r3, [r7, #12]
 800f614:	7d1b      	ldrb	r3, [r3, #20]
 800f616:	f003 0301 	and.w	r3, r3, #1
 800f61a:	2b00      	cmp	r3, #0
 800f61c:	d101      	bne.n	800f622 <f_read+0x5a>
 800f61e:	2307      	movs	r3, #7
 800f620:	e10d      	b.n	800f83e <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 800f622:	68fb      	ldr	r3, [r7, #12]
 800f624:	68da      	ldr	r2, [r3, #12]
 800f626:	68fb      	ldr	r3, [r7, #12]
 800f628:	699b      	ldr	r3, [r3, #24]
 800f62a:	1ad3      	subs	r3, r2, r3
 800f62c:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800f62e:	687a      	ldr	r2, [r7, #4]
 800f630:	6a3b      	ldr	r3, [r7, #32]
 800f632:	429a      	cmp	r2, r3
 800f634:	f240 80fe 	bls.w	800f834 <f_read+0x26c>
 800f638:	6a3b      	ldr	r3, [r7, #32]
 800f63a:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800f63c:	e0fa      	b.n	800f834 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800f63e:	68fb      	ldr	r3, [r7, #12]
 800f640:	699b      	ldr	r3, [r3, #24]
 800f642:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f646:	2b00      	cmp	r3, #0
 800f648:	f040 80c6 	bne.w	800f7d8 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800f64c:	68fb      	ldr	r3, [r7, #12]
 800f64e:	699b      	ldr	r3, [r3, #24]
 800f650:	0a5b      	lsrs	r3, r3, #9
 800f652:	697a      	ldr	r2, [r7, #20]
 800f654:	8952      	ldrh	r2, [r2, #10]
 800f656:	3a01      	subs	r2, #1
 800f658:	4013      	ands	r3, r2
 800f65a:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800f65c:	69fb      	ldr	r3, [r7, #28]
 800f65e:	2b00      	cmp	r3, #0
 800f660:	d12f      	bne.n	800f6c2 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800f662:	68fb      	ldr	r3, [r7, #12]
 800f664:	699b      	ldr	r3, [r3, #24]
 800f666:	2b00      	cmp	r3, #0
 800f668:	d103      	bne.n	800f672 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800f66a:	68fb      	ldr	r3, [r7, #12]
 800f66c:	689b      	ldr	r3, [r3, #8]
 800f66e:	633b      	str	r3, [r7, #48]	; 0x30
 800f670:	e013      	b.n	800f69a <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800f672:	68fb      	ldr	r3, [r7, #12]
 800f674:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f676:	2b00      	cmp	r3, #0
 800f678:	d007      	beq.n	800f68a <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800f67a:	68fb      	ldr	r3, [r7, #12]
 800f67c:	699b      	ldr	r3, [r3, #24]
 800f67e:	4619      	mov	r1, r3
 800f680:	68f8      	ldr	r0, [r7, #12]
 800f682:	f7fe f925 	bl	800d8d0 <clmt_clust>
 800f686:	6338      	str	r0, [r7, #48]	; 0x30
 800f688:	e007      	b.n	800f69a <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800f68a:	68fa      	ldr	r2, [r7, #12]
 800f68c:	68fb      	ldr	r3, [r7, #12]
 800f68e:	69db      	ldr	r3, [r3, #28]
 800f690:	4619      	mov	r1, r3
 800f692:	4610      	mov	r0, r2
 800f694:	f7fd fe8d 	bl	800d3b2 <get_fat>
 800f698:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800f69a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f69c:	2b01      	cmp	r3, #1
 800f69e:	d804      	bhi.n	800f6aa <f_read+0xe2>
 800f6a0:	68fb      	ldr	r3, [r7, #12]
 800f6a2:	2202      	movs	r2, #2
 800f6a4:	755a      	strb	r2, [r3, #21]
 800f6a6:	2302      	movs	r3, #2
 800f6a8:	e0c9      	b.n	800f83e <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800f6aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f6ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f6b0:	d104      	bne.n	800f6bc <f_read+0xf4>
 800f6b2:	68fb      	ldr	r3, [r7, #12]
 800f6b4:	2201      	movs	r2, #1
 800f6b6:	755a      	strb	r2, [r3, #21]
 800f6b8:	2301      	movs	r3, #1
 800f6ba:	e0c0      	b.n	800f83e <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 800f6bc:	68fb      	ldr	r3, [r7, #12]
 800f6be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f6c0:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800f6c2:	697a      	ldr	r2, [r7, #20]
 800f6c4:	68fb      	ldr	r3, [r7, #12]
 800f6c6:	69db      	ldr	r3, [r3, #28]
 800f6c8:	4619      	mov	r1, r3
 800f6ca:	4610      	mov	r0, r2
 800f6cc:	f7fd fe52 	bl	800d374 <clust2sect>
 800f6d0:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800f6d2:	69bb      	ldr	r3, [r7, #24]
 800f6d4:	2b00      	cmp	r3, #0
 800f6d6:	d104      	bne.n	800f6e2 <f_read+0x11a>
 800f6d8:	68fb      	ldr	r3, [r7, #12]
 800f6da:	2202      	movs	r2, #2
 800f6dc:	755a      	strb	r2, [r3, #21]
 800f6de:	2302      	movs	r3, #2
 800f6e0:	e0ad      	b.n	800f83e <f_read+0x276>
			sect += csect;
 800f6e2:	69ba      	ldr	r2, [r7, #24]
 800f6e4:	69fb      	ldr	r3, [r7, #28]
 800f6e6:	4413      	add	r3, r2
 800f6e8:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800f6ea:	687b      	ldr	r3, [r7, #4]
 800f6ec:	0a5b      	lsrs	r3, r3, #9
 800f6ee:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800f6f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f6f2:	2b00      	cmp	r3, #0
 800f6f4:	d039      	beq.n	800f76a <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800f6f6:	69fa      	ldr	r2, [r7, #28]
 800f6f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f6fa:	4413      	add	r3, r2
 800f6fc:	697a      	ldr	r2, [r7, #20]
 800f6fe:	8952      	ldrh	r2, [r2, #10]
 800f700:	4293      	cmp	r3, r2
 800f702:	d905      	bls.n	800f710 <f_read+0x148>
					cc = fs->csize - csect;
 800f704:	697b      	ldr	r3, [r7, #20]
 800f706:	895b      	ldrh	r3, [r3, #10]
 800f708:	461a      	mov	r2, r3
 800f70a:	69fb      	ldr	r3, [r7, #28]
 800f70c:	1ad3      	subs	r3, r2, r3
 800f70e:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f710:	697b      	ldr	r3, [r7, #20]
 800f712:	7858      	ldrb	r0, [r3, #1]
 800f714:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f716:	69ba      	ldr	r2, [r7, #24]
 800f718:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f71a:	f7fd fa79 	bl	800cc10 <disk_read>
 800f71e:	4603      	mov	r3, r0
 800f720:	2b00      	cmp	r3, #0
 800f722:	d004      	beq.n	800f72e <f_read+0x166>
 800f724:	68fb      	ldr	r3, [r7, #12]
 800f726:	2201      	movs	r2, #1
 800f728:	755a      	strb	r2, [r3, #21]
 800f72a:	2301      	movs	r3, #1
 800f72c:	e087      	b.n	800f83e <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800f72e:	68fb      	ldr	r3, [r7, #12]
 800f730:	7d1b      	ldrb	r3, [r3, #20]
 800f732:	b25b      	sxtb	r3, r3
 800f734:	2b00      	cmp	r3, #0
 800f736:	da14      	bge.n	800f762 <f_read+0x19a>
 800f738:	68fb      	ldr	r3, [r7, #12]
 800f73a:	6a1a      	ldr	r2, [r3, #32]
 800f73c:	69bb      	ldr	r3, [r7, #24]
 800f73e:	1ad3      	subs	r3, r2, r3
 800f740:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f742:	429a      	cmp	r2, r3
 800f744:	d90d      	bls.n	800f762 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800f746:	68fb      	ldr	r3, [r7, #12]
 800f748:	6a1a      	ldr	r2, [r3, #32]
 800f74a:	69bb      	ldr	r3, [r7, #24]
 800f74c:	1ad3      	subs	r3, r2, r3
 800f74e:	025b      	lsls	r3, r3, #9
 800f750:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f752:	18d0      	adds	r0, r2, r3
 800f754:	68fb      	ldr	r3, [r7, #12]
 800f756:	3330      	adds	r3, #48	; 0x30
 800f758:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f75c:	4619      	mov	r1, r3
 800f75e:	f7fd fb3f 	bl	800cde0 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800f762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f764:	025b      	lsls	r3, r3, #9
 800f766:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800f768:	e050      	b.n	800f80c <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800f76a:	68fb      	ldr	r3, [r7, #12]
 800f76c:	6a1b      	ldr	r3, [r3, #32]
 800f76e:	69ba      	ldr	r2, [r7, #24]
 800f770:	429a      	cmp	r2, r3
 800f772:	d02e      	beq.n	800f7d2 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800f774:	68fb      	ldr	r3, [r7, #12]
 800f776:	7d1b      	ldrb	r3, [r3, #20]
 800f778:	b25b      	sxtb	r3, r3
 800f77a:	2b00      	cmp	r3, #0
 800f77c:	da18      	bge.n	800f7b0 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f77e:	697b      	ldr	r3, [r7, #20]
 800f780:	7858      	ldrb	r0, [r3, #1]
 800f782:	68fb      	ldr	r3, [r7, #12]
 800f784:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f788:	68fb      	ldr	r3, [r7, #12]
 800f78a:	6a1a      	ldr	r2, [r3, #32]
 800f78c:	2301      	movs	r3, #1
 800f78e:	f7fd fa5f 	bl	800cc50 <disk_write>
 800f792:	4603      	mov	r3, r0
 800f794:	2b00      	cmp	r3, #0
 800f796:	d004      	beq.n	800f7a2 <f_read+0x1da>
 800f798:	68fb      	ldr	r3, [r7, #12]
 800f79a:	2201      	movs	r2, #1
 800f79c:	755a      	strb	r2, [r3, #21]
 800f79e:	2301      	movs	r3, #1
 800f7a0:	e04d      	b.n	800f83e <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800f7a2:	68fb      	ldr	r3, [r7, #12]
 800f7a4:	7d1b      	ldrb	r3, [r3, #20]
 800f7a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f7aa:	b2da      	uxtb	r2, r3
 800f7ac:	68fb      	ldr	r3, [r7, #12]
 800f7ae:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800f7b0:	697b      	ldr	r3, [r7, #20]
 800f7b2:	7858      	ldrb	r0, [r3, #1]
 800f7b4:	68fb      	ldr	r3, [r7, #12]
 800f7b6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f7ba:	2301      	movs	r3, #1
 800f7bc:	69ba      	ldr	r2, [r7, #24]
 800f7be:	f7fd fa27 	bl	800cc10 <disk_read>
 800f7c2:	4603      	mov	r3, r0
 800f7c4:	2b00      	cmp	r3, #0
 800f7c6:	d004      	beq.n	800f7d2 <f_read+0x20a>
 800f7c8:	68fb      	ldr	r3, [r7, #12]
 800f7ca:	2201      	movs	r2, #1
 800f7cc:	755a      	strb	r2, [r3, #21]
 800f7ce:	2301      	movs	r3, #1
 800f7d0:	e035      	b.n	800f83e <f_read+0x276>
			}
#endif
			fp->sect = sect;
 800f7d2:	68fb      	ldr	r3, [r7, #12]
 800f7d4:	69ba      	ldr	r2, [r7, #24]
 800f7d6:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800f7d8:	68fb      	ldr	r3, [r7, #12]
 800f7da:	699b      	ldr	r3, [r3, #24]
 800f7dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f7e0:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800f7e4:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800f7e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f7e8:	687b      	ldr	r3, [r7, #4]
 800f7ea:	429a      	cmp	r2, r3
 800f7ec:	d901      	bls.n	800f7f2 <f_read+0x22a>
 800f7ee:	687b      	ldr	r3, [r7, #4]
 800f7f0:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800f7f2:	68fb      	ldr	r3, [r7, #12]
 800f7f4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800f7f8:	68fb      	ldr	r3, [r7, #12]
 800f7fa:	699b      	ldr	r3, [r3, #24]
 800f7fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f800:	4413      	add	r3, r2
 800f802:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f804:	4619      	mov	r1, r3
 800f806:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f808:	f7fd faea 	bl	800cde0 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800f80c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f80e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f810:	4413      	add	r3, r2
 800f812:	627b      	str	r3, [r7, #36]	; 0x24
 800f814:	68fb      	ldr	r3, [r7, #12]
 800f816:	699a      	ldr	r2, [r3, #24]
 800f818:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f81a:	441a      	add	r2, r3
 800f81c:	68fb      	ldr	r3, [r7, #12]
 800f81e:	619a      	str	r2, [r3, #24]
 800f820:	683b      	ldr	r3, [r7, #0]
 800f822:	681a      	ldr	r2, [r3, #0]
 800f824:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f826:	441a      	add	r2, r3
 800f828:	683b      	ldr	r3, [r7, #0]
 800f82a:	601a      	str	r2, [r3, #0]
 800f82c:	687a      	ldr	r2, [r7, #4]
 800f82e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f830:	1ad3      	subs	r3, r2, r3
 800f832:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800f834:	687b      	ldr	r3, [r7, #4]
 800f836:	2b00      	cmp	r3, #0
 800f838:	f47f af01 	bne.w	800f63e <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800f83c:	2300      	movs	r3, #0
}
 800f83e:	4618      	mov	r0, r3
 800f840:	3738      	adds	r7, #56	; 0x38
 800f842:	46bd      	mov	sp, r7
 800f844:	bd80      	pop	{r7, pc}

0800f846 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800f846:	b580      	push	{r7, lr}
 800f848:	b08c      	sub	sp, #48	; 0x30
 800f84a:	af00      	add	r7, sp, #0
 800f84c:	60f8      	str	r0, [r7, #12]
 800f84e:	60b9      	str	r1, [r7, #8]
 800f850:	607a      	str	r2, [r7, #4]
 800f852:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800f854:	68bb      	ldr	r3, [r7, #8]
 800f856:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800f858:	683b      	ldr	r3, [r7, #0]
 800f85a:	2200      	movs	r2, #0
 800f85c:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800f85e:	68fb      	ldr	r3, [r7, #12]
 800f860:	f107 0210 	add.w	r2, r7, #16
 800f864:	4611      	mov	r1, r2
 800f866:	4618      	mov	r0, r3
 800f868:	f7ff fc64 	bl	800f134 <validate>
 800f86c:	4603      	mov	r3, r0
 800f86e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800f872:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f876:	2b00      	cmp	r3, #0
 800f878:	d107      	bne.n	800f88a <f_write+0x44>
 800f87a:	68fb      	ldr	r3, [r7, #12]
 800f87c:	7d5b      	ldrb	r3, [r3, #21]
 800f87e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800f882:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f886:	2b00      	cmp	r3, #0
 800f888:	d002      	beq.n	800f890 <f_write+0x4a>
 800f88a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f88e:	e14b      	b.n	800fb28 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800f890:	68fb      	ldr	r3, [r7, #12]
 800f892:	7d1b      	ldrb	r3, [r3, #20]
 800f894:	f003 0302 	and.w	r3, r3, #2
 800f898:	2b00      	cmp	r3, #0
 800f89a:	d101      	bne.n	800f8a0 <f_write+0x5a>
 800f89c:	2307      	movs	r3, #7
 800f89e:	e143      	b.n	800fb28 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800f8a0:	68fb      	ldr	r3, [r7, #12]
 800f8a2:	699a      	ldr	r2, [r3, #24]
 800f8a4:	687b      	ldr	r3, [r7, #4]
 800f8a6:	441a      	add	r2, r3
 800f8a8:	68fb      	ldr	r3, [r7, #12]
 800f8aa:	699b      	ldr	r3, [r3, #24]
 800f8ac:	429a      	cmp	r2, r3
 800f8ae:	f080 812d 	bcs.w	800fb0c <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800f8b2:	68fb      	ldr	r3, [r7, #12]
 800f8b4:	699b      	ldr	r3, [r3, #24]
 800f8b6:	43db      	mvns	r3, r3
 800f8b8:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800f8ba:	e127      	b.n	800fb0c <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800f8bc:	68fb      	ldr	r3, [r7, #12]
 800f8be:	699b      	ldr	r3, [r3, #24]
 800f8c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f8c4:	2b00      	cmp	r3, #0
 800f8c6:	f040 80e3 	bne.w	800fa90 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800f8ca:	68fb      	ldr	r3, [r7, #12]
 800f8cc:	699b      	ldr	r3, [r3, #24]
 800f8ce:	0a5b      	lsrs	r3, r3, #9
 800f8d0:	693a      	ldr	r2, [r7, #16]
 800f8d2:	8952      	ldrh	r2, [r2, #10]
 800f8d4:	3a01      	subs	r2, #1
 800f8d6:	4013      	ands	r3, r2
 800f8d8:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800f8da:	69bb      	ldr	r3, [r7, #24]
 800f8dc:	2b00      	cmp	r3, #0
 800f8de:	d143      	bne.n	800f968 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800f8e0:	68fb      	ldr	r3, [r7, #12]
 800f8e2:	699b      	ldr	r3, [r3, #24]
 800f8e4:	2b00      	cmp	r3, #0
 800f8e6:	d10c      	bne.n	800f902 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800f8e8:	68fb      	ldr	r3, [r7, #12]
 800f8ea:	689b      	ldr	r3, [r3, #8]
 800f8ec:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800f8ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8f0:	2b00      	cmp	r3, #0
 800f8f2:	d11a      	bne.n	800f92a <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800f8f4:	68fb      	ldr	r3, [r7, #12]
 800f8f6:	2100      	movs	r1, #0
 800f8f8:	4618      	mov	r0, r3
 800f8fa:	f7fd ff51 	bl	800d7a0 <create_chain>
 800f8fe:	62b8      	str	r0, [r7, #40]	; 0x28
 800f900:	e013      	b.n	800f92a <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800f902:	68fb      	ldr	r3, [r7, #12]
 800f904:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f906:	2b00      	cmp	r3, #0
 800f908:	d007      	beq.n	800f91a <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800f90a:	68fb      	ldr	r3, [r7, #12]
 800f90c:	699b      	ldr	r3, [r3, #24]
 800f90e:	4619      	mov	r1, r3
 800f910:	68f8      	ldr	r0, [r7, #12]
 800f912:	f7fd ffdd 	bl	800d8d0 <clmt_clust>
 800f916:	62b8      	str	r0, [r7, #40]	; 0x28
 800f918:	e007      	b.n	800f92a <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800f91a:	68fa      	ldr	r2, [r7, #12]
 800f91c:	68fb      	ldr	r3, [r7, #12]
 800f91e:	69db      	ldr	r3, [r3, #28]
 800f920:	4619      	mov	r1, r3
 800f922:	4610      	mov	r0, r2
 800f924:	f7fd ff3c 	bl	800d7a0 <create_chain>
 800f928:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800f92a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f92c:	2b00      	cmp	r3, #0
 800f92e:	f000 80f2 	beq.w	800fb16 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800f932:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f934:	2b01      	cmp	r3, #1
 800f936:	d104      	bne.n	800f942 <f_write+0xfc>
 800f938:	68fb      	ldr	r3, [r7, #12]
 800f93a:	2202      	movs	r2, #2
 800f93c:	755a      	strb	r2, [r3, #21]
 800f93e:	2302      	movs	r3, #2
 800f940:	e0f2      	b.n	800fb28 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800f942:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f944:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f948:	d104      	bne.n	800f954 <f_write+0x10e>
 800f94a:	68fb      	ldr	r3, [r7, #12]
 800f94c:	2201      	movs	r2, #1
 800f94e:	755a      	strb	r2, [r3, #21]
 800f950:	2301      	movs	r3, #1
 800f952:	e0e9      	b.n	800fb28 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800f954:	68fb      	ldr	r3, [r7, #12]
 800f956:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f958:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800f95a:	68fb      	ldr	r3, [r7, #12]
 800f95c:	689b      	ldr	r3, [r3, #8]
 800f95e:	2b00      	cmp	r3, #0
 800f960:	d102      	bne.n	800f968 <f_write+0x122>
 800f962:	68fb      	ldr	r3, [r7, #12]
 800f964:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f966:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800f968:	68fb      	ldr	r3, [r7, #12]
 800f96a:	7d1b      	ldrb	r3, [r3, #20]
 800f96c:	b25b      	sxtb	r3, r3
 800f96e:	2b00      	cmp	r3, #0
 800f970:	da18      	bge.n	800f9a4 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f972:	693b      	ldr	r3, [r7, #16]
 800f974:	7858      	ldrb	r0, [r3, #1]
 800f976:	68fb      	ldr	r3, [r7, #12]
 800f978:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f97c:	68fb      	ldr	r3, [r7, #12]
 800f97e:	6a1a      	ldr	r2, [r3, #32]
 800f980:	2301      	movs	r3, #1
 800f982:	f7fd f965 	bl	800cc50 <disk_write>
 800f986:	4603      	mov	r3, r0
 800f988:	2b00      	cmp	r3, #0
 800f98a:	d004      	beq.n	800f996 <f_write+0x150>
 800f98c:	68fb      	ldr	r3, [r7, #12]
 800f98e:	2201      	movs	r2, #1
 800f990:	755a      	strb	r2, [r3, #21]
 800f992:	2301      	movs	r3, #1
 800f994:	e0c8      	b.n	800fb28 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800f996:	68fb      	ldr	r3, [r7, #12]
 800f998:	7d1b      	ldrb	r3, [r3, #20]
 800f99a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f99e:	b2da      	uxtb	r2, r3
 800f9a0:	68fb      	ldr	r3, [r7, #12]
 800f9a2:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800f9a4:	693a      	ldr	r2, [r7, #16]
 800f9a6:	68fb      	ldr	r3, [r7, #12]
 800f9a8:	69db      	ldr	r3, [r3, #28]
 800f9aa:	4619      	mov	r1, r3
 800f9ac:	4610      	mov	r0, r2
 800f9ae:	f7fd fce1 	bl	800d374 <clust2sect>
 800f9b2:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800f9b4:	697b      	ldr	r3, [r7, #20]
 800f9b6:	2b00      	cmp	r3, #0
 800f9b8:	d104      	bne.n	800f9c4 <f_write+0x17e>
 800f9ba:	68fb      	ldr	r3, [r7, #12]
 800f9bc:	2202      	movs	r2, #2
 800f9be:	755a      	strb	r2, [r3, #21]
 800f9c0:	2302      	movs	r3, #2
 800f9c2:	e0b1      	b.n	800fb28 <f_write+0x2e2>
			sect += csect;
 800f9c4:	697a      	ldr	r2, [r7, #20]
 800f9c6:	69bb      	ldr	r3, [r7, #24]
 800f9c8:	4413      	add	r3, r2
 800f9ca:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800f9cc:	687b      	ldr	r3, [r7, #4]
 800f9ce:	0a5b      	lsrs	r3, r3, #9
 800f9d0:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800f9d2:	6a3b      	ldr	r3, [r7, #32]
 800f9d4:	2b00      	cmp	r3, #0
 800f9d6:	d03c      	beq.n	800fa52 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800f9d8:	69ba      	ldr	r2, [r7, #24]
 800f9da:	6a3b      	ldr	r3, [r7, #32]
 800f9dc:	4413      	add	r3, r2
 800f9de:	693a      	ldr	r2, [r7, #16]
 800f9e0:	8952      	ldrh	r2, [r2, #10]
 800f9e2:	4293      	cmp	r3, r2
 800f9e4:	d905      	bls.n	800f9f2 <f_write+0x1ac>
					cc = fs->csize - csect;
 800f9e6:	693b      	ldr	r3, [r7, #16]
 800f9e8:	895b      	ldrh	r3, [r3, #10]
 800f9ea:	461a      	mov	r2, r3
 800f9ec:	69bb      	ldr	r3, [r7, #24]
 800f9ee:	1ad3      	subs	r3, r2, r3
 800f9f0:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f9f2:	693b      	ldr	r3, [r7, #16]
 800f9f4:	7858      	ldrb	r0, [r3, #1]
 800f9f6:	6a3b      	ldr	r3, [r7, #32]
 800f9f8:	697a      	ldr	r2, [r7, #20]
 800f9fa:	69f9      	ldr	r1, [r7, #28]
 800f9fc:	f7fd f928 	bl	800cc50 <disk_write>
 800fa00:	4603      	mov	r3, r0
 800fa02:	2b00      	cmp	r3, #0
 800fa04:	d004      	beq.n	800fa10 <f_write+0x1ca>
 800fa06:	68fb      	ldr	r3, [r7, #12]
 800fa08:	2201      	movs	r2, #1
 800fa0a:	755a      	strb	r2, [r3, #21]
 800fa0c:	2301      	movs	r3, #1
 800fa0e:	e08b      	b.n	800fb28 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800fa10:	68fb      	ldr	r3, [r7, #12]
 800fa12:	6a1a      	ldr	r2, [r3, #32]
 800fa14:	697b      	ldr	r3, [r7, #20]
 800fa16:	1ad3      	subs	r3, r2, r3
 800fa18:	6a3a      	ldr	r2, [r7, #32]
 800fa1a:	429a      	cmp	r2, r3
 800fa1c:	d915      	bls.n	800fa4a <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800fa1e:	68fb      	ldr	r3, [r7, #12]
 800fa20:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800fa24:	68fb      	ldr	r3, [r7, #12]
 800fa26:	6a1a      	ldr	r2, [r3, #32]
 800fa28:	697b      	ldr	r3, [r7, #20]
 800fa2a:	1ad3      	subs	r3, r2, r3
 800fa2c:	025b      	lsls	r3, r3, #9
 800fa2e:	69fa      	ldr	r2, [r7, #28]
 800fa30:	4413      	add	r3, r2
 800fa32:	f44f 7200 	mov.w	r2, #512	; 0x200
 800fa36:	4619      	mov	r1, r3
 800fa38:	f7fd f9d2 	bl	800cde0 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800fa3c:	68fb      	ldr	r3, [r7, #12]
 800fa3e:	7d1b      	ldrb	r3, [r3, #20]
 800fa40:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fa44:	b2da      	uxtb	r2, r3
 800fa46:	68fb      	ldr	r3, [r7, #12]
 800fa48:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800fa4a:	6a3b      	ldr	r3, [r7, #32]
 800fa4c:	025b      	lsls	r3, r3, #9
 800fa4e:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800fa50:	e03f      	b.n	800fad2 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800fa52:	68fb      	ldr	r3, [r7, #12]
 800fa54:	6a1b      	ldr	r3, [r3, #32]
 800fa56:	697a      	ldr	r2, [r7, #20]
 800fa58:	429a      	cmp	r2, r3
 800fa5a:	d016      	beq.n	800fa8a <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 800fa5c:	68fb      	ldr	r3, [r7, #12]
 800fa5e:	699a      	ldr	r2, [r3, #24]
 800fa60:	68fb      	ldr	r3, [r7, #12]
 800fa62:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800fa64:	429a      	cmp	r2, r3
 800fa66:	d210      	bcs.n	800fa8a <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800fa68:	693b      	ldr	r3, [r7, #16]
 800fa6a:	7858      	ldrb	r0, [r3, #1]
 800fa6c:	68fb      	ldr	r3, [r7, #12]
 800fa6e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800fa72:	2301      	movs	r3, #1
 800fa74:	697a      	ldr	r2, [r7, #20]
 800fa76:	f7fd f8cb 	bl	800cc10 <disk_read>
 800fa7a:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800fa7c:	2b00      	cmp	r3, #0
 800fa7e:	d004      	beq.n	800fa8a <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 800fa80:	68fb      	ldr	r3, [r7, #12]
 800fa82:	2201      	movs	r2, #1
 800fa84:	755a      	strb	r2, [r3, #21]
 800fa86:	2301      	movs	r3, #1
 800fa88:	e04e      	b.n	800fb28 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 800fa8a:	68fb      	ldr	r3, [r7, #12]
 800fa8c:	697a      	ldr	r2, [r7, #20]
 800fa8e:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800fa90:	68fb      	ldr	r3, [r7, #12]
 800fa92:	699b      	ldr	r3, [r3, #24]
 800fa94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fa98:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800fa9c:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800fa9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800faa0:	687b      	ldr	r3, [r7, #4]
 800faa2:	429a      	cmp	r2, r3
 800faa4:	d901      	bls.n	800faaa <f_write+0x264>
 800faa6:	687b      	ldr	r3, [r7, #4]
 800faa8:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800faaa:	68fb      	ldr	r3, [r7, #12]
 800faac:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800fab0:	68fb      	ldr	r3, [r7, #12]
 800fab2:	699b      	ldr	r3, [r3, #24]
 800fab4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fab8:	4413      	add	r3, r2
 800faba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fabc:	69f9      	ldr	r1, [r7, #28]
 800fabe:	4618      	mov	r0, r3
 800fac0:	f7fd f98e 	bl	800cde0 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800fac4:	68fb      	ldr	r3, [r7, #12]
 800fac6:	7d1b      	ldrb	r3, [r3, #20]
 800fac8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800facc:	b2da      	uxtb	r2, r3
 800face:	68fb      	ldr	r3, [r7, #12]
 800fad0:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800fad2:	69fa      	ldr	r2, [r7, #28]
 800fad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fad6:	4413      	add	r3, r2
 800fad8:	61fb      	str	r3, [r7, #28]
 800fada:	68fb      	ldr	r3, [r7, #12]
 800fadc:	699a      	ldr	r2, [r3, #24]
 800fade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fae0:	441a      	add	r2, r3
 800fae2:	68fb      	ldr	r3, [r7, #12]
 800fae4:	619a      	str	r2, [r3, #24]
 800fae6:	68fb      	ldr	r3, [r7, #12]
 800fae8:	68da      	ldr	r2, [r3, #12]
 800faea:	68fb      	ldr	r3, [r7, #12]
 800faec:	699b      	ldr	r3, [r3, #24]
 800faee:	429a      	cmp	r2, r3
 800faf0:	bf38      	it	cc
 800faf2:	461a      	movcc	r2, r3
 800faf4:	68fb      	ldr	r3, [r7, #12]
 800faf6:	60da      	str	r2, [r3, #12]
 800faf8:	683b      	ldr	r3, [r7, #0]
 800fafa:	681a      	ldr	r2, [r3, #0]
 800fafc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fafe:	441a      	add	r2, r3
 800fb00:	683b      	ldr	r3, [r7, #0]
 800fb02:	601a      	str	r2, [r3, #0]
 800fb04:	687a      	ldr	r2, [r7, #4]
 800fb06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb08:	1ad3      	subs	r3, r2, r3
 800fb0a:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800fb0c:	687b      	ldr	r3, [r7, #4]
 800fb0e:	2b00      	cmp	r3, #0
 800fb10:	f47f aed4 	bne.w	800f8bc <f_write+0x76>
 800fb14:	e000      	b.n	800fb18 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800fb16:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800fb18:	68fb      	ldr	r3, [r7, #12]
 800fb1a:	7d1b      	ldrb	r3, [r3, #20]
 800fb1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fb20:	b2da      	uxtb	r2, r3
 800fb22:	68fb      	ldr	r3, [r7, #12]
 800fb24:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800fb26:	2300      	movs	r3, #0
}
 800fb28:	4618      	mov	r0, r3
 800fb2a:	3730      	adds	r7, #48	; 0x30
 800fb2c:	46bd      	mov	sp, r7
 800fb2e:	bd80      	pop	{r7, pc}

0800fb30 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800fb30:	b580      	push	{r7, lr}
 800fb32:	b086      	sub	sp, #24
 800fb34:	af00      	add	r7, sp, #0
 800fb36:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800fb38:	687b      	ldr	r3, [r7, #4]
 800fb3a:	f107 0208 	add.w	r2, r7, #8
 800fb3e:	4611      	mov	r1, r2
 800fb40:	4618      	mov	r0, r3
 800fb42:	f7ff faf7 	bl	800f134 <validate>
 800fb46:	4603      	mov	r3, r0
 800fb48:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800fb4a:	7dfb      	ldrb	r3, [r7, #23]
 800fb4c:	2b00      	cmp	r3, #0
 800fb4e:	d168      	bne.n	800fc22 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800fb50:	687b      	ldr	r3, [r7, #4]
 800fb52:	7d1b      	ldrb	r3, [r3, #20]
 800fb54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fb58:	2b00      	cmp	r3, #0
 800fb5a:	d062      	beq.n	800fc22 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800fb5c:	687b      	ldr	r3, [r7, #4]
 800fb5e:	7d1b      	ldrb	r3, [r3, #20]
 800fb60:	b25b      	sxtb	r3, r3
 800fb62:	2b00      	cmp	r3, #0
 800fb64:	da15      	bge.n	800fb92 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800fb66:	68bb      	ldr	r3, [r7, #8]
 800fb68:	7858      	ldrb	r0, [r3, #1]
 800fb6a:	687b      	ldr	r3, [r7, #4]
 800fb6c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800fb70:	687b      	ldr	r3, [r7, #4]
 800fb72:	6a1a      	ldr	r2, [r3, #32]
 800fb74:	2301      	movs	r3, #1
 800fb76:	f7fd f86b 	bl	800cc50 <disk_write>
 800fb7a:	4603      	mov	r3, r0
 800fb7c:	2b00      	cmp	r3, #0
 800fb7e:	d001      	beq.n	800fb84 <f_sync+0x54>
 800fb80:	2301      	movs	r3, #1
 800fb82:	e04f      	b.n	800fc24 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800fb84:	687b      	ldr	r3, [r7, #4]
 800fb86:	7d1b      	ldrb	r3, [r3, #20]
 800fb88:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fb8c:	b2da      	uxtb	r2, r3
 800fb8e:	687b      	ldr	r3, [r7, #4]
 800fb90:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800fb92:	f7fd f89b 	bl	800cccc <get_fattime>
 800fb96:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800fb98:	68ba      	ldr	r2, [r7, #8]
 800fb9a:	687b      	ldr	r3, [r7, #4]
 800fb9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fb9e:	4619      	mov	r1, r3
 800fba0:	4610      	mov	r0, r2
 800fba2:	f7fd fb4b 	bl	800d23c <move_window>
 800fba6:	4603      	mov	r3, r0
 800fba8:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800fbaa:	7dfb      	ldrb	r3, [r7, #23]
 800fbac:	2b00      	cmp	r3, #0
 800fbae:	d138      	bne.n	800fc22 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800fbb0:	687b      	ldr	r3, [r7, #4]
 800fbb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fbb4:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800fbb6:	68fb      	ldr	r3, [r7, #12]
 800fbb8:	330b      	adds	r3, #11
 800fbba:	781a      	ldrb	r2, [r3, #0]
 800fbbc:	68fb      	ldr	r3, [r7, #12]
 800fbbe:	330b      	adds	r3, #11
 800fbc0:	f042 0220 	orr.w	r2, r2, #32
 800fbc4:	b2d2      	uxtb	r2, r2
 800fbc6:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800fbc8:	687b      	ldr	r3, [r7, #4]
 800fbca:	6818      	ldr	r0, [r3, #0]
 800fbcc:	687b      	ldr	r3, [r7, #4]
 800fbce:	689b      	ldr	r3, [r3, #8]
 800fbd0:	461a      	mov	r2, r3
 800fbd2:	68f9      	ldr	r1, [r7, #12]
 800fbd4:	f7fe f856 	bl	800dc84 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800fbd8:	68fb      	ldr	r3, [r7, #12]
 800fbda:	f103 021c 	add.w	r2, r3, #28
 800fbde:	687b      	ldr	r3, [r7, #4]
 800fbe0:	68db      	ldr	r3, [r3, #12]
 800fbe2:	4619      	mov	r1, r3
 800fbe4:	4610      	mov	r0, r2
 800fbe6:	f7fd f8cf 	bl	800cd88 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800fbea:	68fb      	ldr	r3, [r7, #12]
 800fbec:	3316      	adds	r3, #22
 800fbee:	6939      	ldr	r1, [r7, #16]
 800fbf0:	4618      	mov	r0, r3
 800fbf2:	f7fd f8c9 	bl	800cd88 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800fbf6:	68fb      	ldr	r3, [r7, #12]
 800fbf8:	3312      	adds	r3, #18
 800fbfa:	2100      	movs	r1, #0
 800fbfc:	4618      	mov	r0, r3
 800fbfe:	f7fd f8a8 	bl	800cd52 <st_word>
					fs->wflag = 1;
 800fc02:	68bb      	ldr	r3, [r7, #8]
 800fc04:	2201      	movs	r2, #1
 800fc06:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800fc08:	68bb      	ldr	r3, [r7, #8]
 800fc0a:	4618      	mov	r0, r3
 800fc0c:	f7fd fb44 	bl	800d298 <sync_fs>
 800fc10:	4603      	mov	r3, r0
 800fc12:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800fc14:	687b      	ldr	r3, [r7, #4]
 800fc16:	7d1b      	ldrb	r3, [r3, #20]
 800fc18:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fc1c:	b2da      	uxtb	r2, r3
 800fc1e:	687b      	ldr	r3, [r7, #4]
 800fc20:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800fc22:	7dfb      	ldrb	r3, [r7, #23]
}
 800fc24:	4618      	mov	r0, r3
 800fc26:	3718      	adds	r7, #24
 800fc28:	46bd      	mov	sp, r7
 800fc2a:	bd80      	pop	{r7, pc}

0800fc2c <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800fc2c:	b580      	push	{r7, lr}
 800fc2e:	b084      	sub	sp, #16
 800fc30:	af00      	add	r7, sp, #0
 800fc32:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800fc34:	6878      	ldr	r0, [r7, #4]
 800fc36:	f7ff ff7b 	bl	800fb30 <f_sync>
 800fc3a:	4603      	mov	r3, r0
 800fc3c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800fc3e:	7bfb      	ldrb	r3, [r7, #15]
 800fc40:	2b00      	cmp	r3, #0
 800fc42:	d118      	bne.n	800fc76 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800fc44:	687b      	ldr	r3, [r7, #4]
 800fc46:	f107 0208 	add.w	r2, r7, #8
 800fc4a:	4611      	mov	r1, r2
 800fc4c:	4618      	mov	r0, r3
 800fc4e:	f7ff fa71 	bl	800f134 <validate>
 800fc52:	4603      	mov	r3, r0
 800fc54:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800fc56:	7bfb      	ldrb	r3, [r7, #15]
 800fc58:	2b00      	cmp	r3, #0
 800fc5a:	d10c      	bne.n	800fc76 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800fc5c:	687b      	ldr	r3, [r7, #4]
 800fc5e:	691b      	ldr	r3, [r3, #16]
 800fc60:	4618      	mov	r0, r3
 800fc62:	f7fd fa47 	bl	800d0f4 <dec_lock>
 800fc66:	4603      	mov	r3, r0
 800fc68:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800fc6a:	7bfb      	ldrb	r3, [r7, #15]
 800fc6c:	2b00      	cmp	r3, #0
 800fc6e:	d102      	bne.n	800fc76 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800fc70:	687b      	ldr	r3, [r7, #4]
 800fc72:	2200      	movs	r2, #0
 800fc74:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800fc76:	7bfb      	ldrb	r3, [r7, #15]
}
 800fc78:	4618      	mov	r0, r3
 800fc7a:	3710      	adds	r7, #16
 800fc7c:	46bd      	mov	sp, r7
 800fc7e:	bd80      	pop	{r7, pc}

0800fc80 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800fc80:	b580      	push	{r7, lr}
 800fc82:	b090      	sub	sp, #64	; 0x40
 800fc84:	af00      	add	r7, sp, #0
 800fc86:	6078      	str	r0, [r7, #4]
 800fc88:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800fc8a:	687b      	ldr	r3, [r7, #4]
 800fc8c:	f107 0208 	add.w	r2, r7, #8
 800fc90:	4611      	mov	r1, r2
 800fc92:	4618      	mov	r0, r3
 800fc94:	f7ff fa4e 	bl	800f134 <validate>
 800fc98:	4603      	mov	r3, r0
 800fc9a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800fc9e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800fca2:	2b00      	cmp	r3, #0
 800fca4:	d103      	bne.n	800fcae <f_lseek+0x2e>
 800fca6:	687b      	ldr	r3, [r7, #4]
 800fca8:	7d5b      	ldrb	r3, [r3, #21]
 800fcaa:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800fcae:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800fcb2:	2b00      	cmp	r3, #0
 800fcb4:	d002      	beq.n	800fcbc <f_lseek+0x3c>
 800fcb6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800fcba:	e1e6      	b.n	801008a <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800fcbc:	687b      	ldr	r3, [r7, #4]
 800fcbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fcc0:	2b00      	cmp	r3, #0
 800fcc2:	f000 80d1 	beq.w	800fe68 <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800fcc6:	683b      	ldr	r3, [r7, #0]
 800fcc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fccc:	d15a      	bne.n	800fd84 <f_lseek+0x104>
			tbl = fp->cltbl;
 800fcce:	687b      	ldr	r3, [r7, #4]
 800fcd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fcd2:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800fcd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fcd6:	1d1a      	adds	r2, r3, #4
 800fcd8:	627a      	str	r2, [r7, #36]	; 0x24
 800fcda:	681b      	ldr	r3, [r3, #0]
 800fcdc:	617b      	str	r3, [r7, #20]
 800fcde:	2302      	movs	r3, #2
 800fce0:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800fce2:	687b      	ldr	r3, [r7, #4]
 800fce4:	689b      	ldr	r3, [r3, #8]
 800fce6:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 800fce8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fcea:	2b00      	cmp	r3, #0
 800fcec:	d03a      	beq.n	800fd64 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800fcee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fcf0:	613b      	str	r3, [r7, #16]
 800fcf2:	2300      	movs	r3, #0
 800fcf4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fcf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fcf8:	3302      	adds	r3, #2
 800fcfa:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 800fcfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fcfe:	60fb      	str	r3, [r7, #12]
 800fd00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd02:	3301      	adds	r3, #1
 800fd04:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 800fd06:	687b      	ldr	r3, [r7, #4]
 800fd08:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800fd0a:	4618      	mov	r0, r3
 800fd0c:	f7fd fb51 	bl	800d3b2 <get_fat>
 800fd10:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800fd12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd14:	2b01      	cmp	r3, #1
 800fd16:	d804      	bhi.n	800fd22 <f_lseek+0xa2>
 800fd18:	687b      	ldr	r3, [r7, #4]
 800fd1a:	2202      	movs	r2, #2
 800fd1c:	755a      	strb	r2, [r3, #21]
 800fd1e:	2302      	movs	r3, #2
 800fd20:	e1b3      	b.n	801008a <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800fd22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd24:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fd28:	d104      	bne.n	800fd34 <f_lseek+0xb4>
 800fd2a:	687b      	ldr	r3, [r7, #4]
 800fd2c:	2201      	movs	r2, #1
 800fd2e:	755a      	strb	r2, [r3, #21]
 800fd30:	2301      	movs	r3, #1
 800fd32:	e1aa      	b.n	801008a <f_lseek+0x40a>
					} while (cl == pcl + 1);
 800fd34:	68fb      	ldr	r3, [r7, #12]
 800fd36:	3301      	adds	r3, #1
 800fd38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fd3a:	429a      	cmp	r2, r3
 800fd3c:	d0de      	beq.n	800fcfc <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800fd3e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fd40:	697b      	ldr	r3, [r7, #20]
 800fd42:	429a      	cmp	r2, r3
 800fd44:	d809      	bhi.n	800fd5a <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800fd46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd48:	1d1a      	adds	r2, r3, #4
 800fd4a:	627a      	str	r2, [r7, #36]	; 0x24
 800fd4c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fd4e:	601a      	str	r2, [r3, #0]
 800fd50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd52:	1d1a      	adds	r2, r3, #4
 800fd54:	627a      	str	r2, [r7, #36]	; 0x24
 800fd56:	693a      	ldr	r2, [r7, #16]
 800fd58:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800fd5a:	68bb      	ldr	r3, [r7, #8]
 800fd5c:	699b      	ldr	r3, [r3, #24]
 800fd5e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fd60:	429a      	cmp	r2, r3
 800fd62:	d3c4      	bcc.n	800fcee <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800fd64:	687b      	ldr	r3, [r7, #4]
 800fd66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fd68:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fd6a:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800fd6c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fd6e:	697b      	ldr	r3, [r7, #20]
 800fd70:	429a      	cmp	r2, r3
 800fd72:	d803      	bhi.n	800fd7c <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800fd74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd76:	2200      	movs	r2, #0
 800fd78:	601a      	str	r2, [r3, #0]
 800fd7a:	e184      	b.n	8010086 <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800fd7c:	2311      	movs	r3, #17
 800fd7e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800fd82:	e180      	b.n	8010086 <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800fd84:	687b      	ldr	r3, [r7, #4]
 800fd86:	68db      	ldr	r3, [r3, #12]
 800fd88:	683a      	ldr	r2, [r7, #0]
 800fd8a:	429a      	cmp	r2, r3
 800fd8c:	d902      	bls.n	800fd94 <f_lseek+0x114>
 800fd8e:	687b      	ldr	r3, [r7, #4]
 800fd90:	68db      	ldr	r3, [r3, #12]
 800fd92:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800fd94:	687b      	ldr	r3, [r7, #4]
 800fd96:	683a      	ldr	r2, [r7, #0]
 800fd98:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800fd9a:	683b      	ldr	r3, [r7, #0]
 800fd9c:	2b00      	cmp	r3, #0
 800fd9e:	f000 8172 	beq.w	8010086 <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 800fda2:	683b      	ldr	r3, [r7, #0]
 800fda4:	3b01      	subs	r3, #1
 800fda6:	4619      	mov	r1, r3
 800fda8:	6878      	ldr	r0, [r7, #4]
 800fdaa:	f7fd fd91 	bl	800d8d0 <clmt_clust>
 800fdae:	4602      	mov	r2, r0
 800fdb0:	687b      	ldr	r3, [r7, #4]
 800fdb2:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800fdb4:	68ba      	ldr	r2, [r7, #8]
 800fdb6:	687b      	ldr	r3, [r7, #4]
 800fdb8:	69db      	ldr	r3, [r3, #28]
 800fdba:	4619      	mov	r1, r3
 800fdbc:	4610      	mov	r0, r2
 800fdbe:	f7fd fad9 	bl	800d374 <clust2sect>
 800fdc2:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800fdc4:	69bb      	ldr	r3, [r7, #24]
 800fdc6:	2b00      	cmp	r3, #0
 800fdc8:	d104      	bne.n	800fdd4 <f_lseek+0x154>
 800fdca:	687b      	ldr	r3, [r7, #4]
 800fdcc:	2202      	movs	r2, #2
 800fdce:	755a      	strb	r2, [r3, #21]
 800fdd0:	2302      	movs	r3, #2
 800fdd2:	e15a      	b.n	801008a <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800fdd4:	683b      	ldr	r3, [r7, #0]
 800fdd6:	3b01      	subs	r3, #1
 800fdd8:	0a5b      	lsrs	r3, r3, #9
 800fdda:	68ba      	ldr	r2, [r7, #8]
 800fddc:	8952      	ldrh	r2, [r2, #10]
 800fdde:	3a01      	subs	r2, #1
 800fde0:	4013      	ands	r3, r2
 800fde2:	69ba      	ldr	r2, [r7, #24]
 800fde4:	4413      	add	r3, r2
 800fde6:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800fde8:	687b      	ldr	r3, [r7, #4]
 800fdea:	699b      	ldr	r3, [r3, #24]
 800fdec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fdf0:	2b00      	cmp	r3, #0
 800fdf2:	f000 8148 	beq.w	8010086 <f_lseek+0x406>
 800fdf6:	687b      	ldr	r3, [r7, #4]
 800fdf8:	6a1b      	ldr	r3, [r3, #32]
 800fdfa:	69ba      	ldr	r2, [r7, #24]
 800fdfc:	429a      	cmp	r2, r3
 800fdfe:	f000 8142 	beq.w	8010086 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800fe02:	687b      	ldr	r3, [r7, #4]
 800fe04:	7d1b      	ldrb	r3, [r3, #20]
 800fe06:	b25b      	sxtb	r3, r3
 800fe08:	2b00      	cmp	r3, #0
 800fe0a:	da18      	bge.n	800fe3e <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800fe0c:	68bb      	ldr	r3, [r7, #8]
 800fe0e:	7858      	ldrb	r0, [r3, #1]
 800fe10:	687b      	ldr	r3, [r7, #4]
 800fe12:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800fe16:	687b      	ldr	r3, [r7, #4]
 800fe18:	6a1a      	ldr	r2, [r3, #32]
 800fe1a:	2301      	movs	r3, #1
 800fe1c:	f7fc ff18 	bl	800cc50 <disk_write>
 800fe20:	4603      	mov	r3, r0
 800fe22:	2b00      	cmp	r3, #0
 800fe24:	d004      	beq.n	800fe30 <f_lseek+0x1b0>
 800fe26:	687b      	ldr	r3, [r7, #4]
 800fe28:	2201      	movs	r2, #1
 800fe2a:	755a      	strb	r2, [r3, #21]
 800fe2c:	2301      	movs	r3, #1
 800fe2e:	e12c      	b.n	801008a <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 800fe30:	687b      	ldr	r3, [r7, #4]
 800fe32:	7d1b      	ldrb	r3, [r3, #20]
 800fe34:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fe38:	b2da      	uxtb	r2, r3
 800fe3a:	687b      	ldr	r3, [r7, #4]
 800fe3c:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800fe3e:	68bb      	ldr	r3, [r7, #8]
 800fe40:	7858      	ldrb	r0, [r3, #1]
 800fe42:	687b      	ldr	r3, [r7, #4]
 800fe44:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800fe48:	2301      	movs	r3, #1
 800fe4a:	69ba      	ldr	r2, [r7, #24]
 800fe4c:	f7fc fee0 	bl	800cc10 <disk_read>
 800fe50:	4603      	mov	r3, r0
 800fe52:	2b00      	cmp	r3, #0
 800fe54:	d004      	beq.n	800fe60 <f_lseek+0x1e0>
 800fe56:	687b      	ldr	r3, [r7, #4]
 800fe58:	2201      	movs	r2, #1
 800fe5a:	755a      	strb	r2, [r3, #21]
 800fe5c:	2301      	movs	r3, #1
 800fe5e:	e114      	b.n	801008a <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 800fe60:	687b      	ldr	r3, [r7, #4]
 800fe62:	69ba      	ldr	r2, [r7, #24]
 800fe64:	621a      	str	r2, [r3, #32]
 800fe66:	e10e      	b.n	8010086 <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800fe68:	687b      	ldr	r3, [r7, #4]
 800fe6a:	68db      	ldr	r3, [r3, #12]
 800fe6c:	683a      	ldr	r2, [r7, #0]
 800fe6e:	429a      	cmp	r2, r3
 800fe70:	d908      	bls.n	800fe84 <f_lseek+0x204>
 800fe72:	687b      	ldr	r3, [r7, #4]
 800fe74:	7d1b      	ldrb	r3, [r3, #20]
 800fe76:	f003 0302 	and.w	r3, r3, #2
 800fe7a:	2b00      	cmp	r3, #0
 800fe7c:	d102      	bne.n	800fe84 <f_lseek+0x204>
			ofs = fp->obj.objsize;
 800fe7e:	687b      	ldr	r3, [r7, #4]
 800fe80:	68db      	ldr	r3, [r3, #12]
 800fe82:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800fe84:	687b      	ldr	r3, [r7, #4]
 800fe86:	699b      	ldr	r3, [r3, #24]
 800fe88:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800fe8a:	2300      	movs	r3, #0
 800fe8c:	637b      	str	r3, [r7, #52]	; 0x34
 800fe8e:	687b      	ldr	r3, [r7, #4]
 800fe90:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fe92:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800fe94:	683b      	ldr	r3, [r7, #0]
 800fe96:	2b00      	cmp	r3, #0
 800fe98:	f000 80a7 	beq.w	800ffea <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800fe9c:	68bb      	ldr	r3, [r7, #8]
 800fe9e:	895b      	ldrh	r3, [r3, #10]
 800fea0:	025b      	lsls	r3, r3, #9
 800fea2:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800fea4:	6a3b      	ldr	r3, [r7, #32]
 800fea6:	2b00      	cmp	r3, #0
 800fea8:	d01b      	beq.n	800fee2 <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800feaa:	683b      	ldr	r3, [r7, #0]
 800feac:	1e5a      	subs	r2, r3, #1
 800feae:	69fb      	ldr	r3, [r7, #28]
 800feb0:	fbb2 f2f3 	udiv	r2, r2, r3
 800feb4:	6a3b      	ldr	r3, [r7, #32]
 800feb6:	1e59      	subs	r1, r3, #1
 800feb8:	69fb      	ldr	r3, [r7, #28]
 800feba:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800febe:	429a      	cmp	r2, r3
 800fec0:	d30f      	bcc.n	800fee2 <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800fec2:	6a3b      	ldr	r3, [r7, #32]
 800fec4:	1e5a      	subs	r2, r3, #1
 800fec6:	69fb      	ldr	r3, [r7, #28]
 800fec8:	425b      	negs	r3, r3
 800feca:	401a      	ands	r2, r3
 800fecc:	687b      	ldr	r3, [r7, #4]
 800fece:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800fed0:	687b      	ldr	r3, [r7, #4]
 800fed2:	699b      	ldr	r3, [r3, #24]
 800fed4:	683a      	ldr	r2, [r7, #0]
 800fed6:	1ad3      	subs	r3, r2, r3
 800fed8:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800feda:	687b      	ldr	r3, [r7, #4]
 800fedc:	69db      	ldr	r3, [r3, #28]
 800fede:	63bb      	str	r3, [r7, #56]	; 0x38
 800fee0:	e022      	b.n	800ff28 <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800fee2:	687b      	ldr	r3, [r7, #4]
 800fee4:	689b      	ldr	r3, [r3, #8]
 800fee6:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800fee8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800feea:	2b00      	cmp	r3, #0
 800feec:	d119      	bne.n	800ff22 <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 800feee:	687b      	ldr	r3, [r7, #4]
 800fef0:	2100      	movs	r1, #0
 800fef2:	4618      	mov	r0, r3
 800fef4:	f7fd fc54 	bl	800d7a0 <create_chain>
 800fef8:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800fefa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fefc:	2b01      	cmp	r3, #1
 800fefe:	d104      	bne.n	800ff0a <f_lseek+0x28a>
 800ff00:	687b      	ldr	r3, [r7, #4]
 800ff02:	2202      	movs	r2, #2
 800ff04:	755a      	strb	r2, [r3, #21]
 800ff06:	2302      	movs	r3, #2
 800ff08:	e0bf      	b.n	801008a <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800ff0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ff10:	d104      	bne.n	800ff1c <f_lseek+0x29c>
 800ff12:	687b      	ldr	r3, [r7, #4]
 800ff14:	2201      	movs	r2, #1
 800ff16:	755a      	strb	r2, [r3, #21]
 800ff18:	2301      	movs	r3, #1
 800ff1a:	e0b6      	b.n	801008a <f_lseek+0x40a>
					fp->obj.sclust = clst;
 800ff1c:	687b      	ldr	r3, [r7, #4]
 800ff1e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ff20:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800ff22:	687b      	ldr	r3, [r7, #4]
 800ff24:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ff26:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800ff28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff2a:	2b00      	cmp	r3, #0
 800ff2c:	d05d      	beq.n	800ffea <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 800ff2e:	e03a      	b.n	800ffa6 <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 800ff30:	683a      	ldr	r2, [r7, #0]
 800ff32:	69fb      	ldr	r3, [r7, #28]
 800ff34:	1ad3      	subs	r3, r2, r3
 800ff36:	603b      	str	r3, [r7, #0]
 800ff38:	687b      	ldr	r3, [r7, #4]
 800ff3a:	699a      	ldr	r2, [r3, #24]
 800ff3c:	69fb      	ldr	r3, [r7, #28]
 800ff3e:	441a      	add	r2, r3
 800ff40:	687b      	ldr	r3, [r7, #4]
 800ff42:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800ff44:	687b      	ldr	r3, [r7, #4]
 800ff46:	7d1b      	ldrb	r3, [r3, #20]
 800ff48:	f003 0302 	and.w	r3, r3, #2
 800ff4c:	2b00      	cmp	r3, #0
 800ff4e:	d00b      	beq.n	800ff68 <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800ff50:	687b      	ldr	r3, [r7, #4]
 800ff52:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ff54:	4618      	mov	r0, r3
 800ff56:	f7fd fc23 	bl	800d7a0 <create_chain>
 800ff5a:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800ff5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff5e:	2b00      	cmp	r3, #0
 800ff60:	d108      	bne.n	800ff74 <f_lseek+0x2f4>
							ofs = 0; break;
 800ff62:	2300      	movs	r3, #0
 800ff64:	603b      	str	r3, [r7, #0]
 800ff66:	e022      	b.n	800ffae <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800ff68:	687b      	ldr	r3, [r7, #4]
 800ff6a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ff6c:	4618      	mov	r0, r3
 800ff6e:	f7fd fa20 	bl	800d3b2 <get_fat>
 800ff72:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800ff74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff76:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ff7a:	d104      	bne.n	800ff86 <f_lseek+0x306>
 800ff7c:	687b      	ldr	r3, [r7, #4]
 800ff7e:	2201      	movs	r2, #1
 800ff80:	755a      	strb	r2, [r3, #21]
 800ff82:	2301      	movs	r3, #1
 800ff84:	e081      	b.n	801008a <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800ff86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff88:	2b01      	cmp	r3, #1
 800ff8a:	d904      	bls.n	800ff96 <f_lseek+0x316>
 800ff8c:	68bb      	ldr	r3, [r7, #8]
 800ff8e:	699b      	ldr	r3, [r3, #24]
 800ff90:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ff92:	429a      	cmp	r2, r3
 800ff94:	d304      	bcc.n	800ffa0 <f_lseek+0x320>
 800ff96:	687b      	ldr	r3, [r7, #4]
 800ff98:	2202      	movs	r2, #2
 800ff9a:	755a      	strb	r2, [r3, #21]
 800ff9c:	2302      	movs	r3, #2
 800ff9e:	e074      	b.n	801008a <f_lseek+0x40a>
					fp->clust = clst;
 800ffa0:	687b      	ldr	r3, [r7, #4]
 800ffa2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ffa4:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800ffa6:	683a      	ldr	r2, [r7, #0]
 800ffa8:	69fb      	ldr	r3, [r7, #28]
 800ffaa:	429a      	cmp	r2, r3
 800ffac:	d8c0      	bhi.n	800ff30 <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 800ffae:	687b      	ldr	r3, [r7, #4]
 800ffb0:	699a      	ldr	r2, [r3, #24]
 800ffb2:	683b      	ldr	r3, [r7, #0]
 800ffb4:	441a      	add	r2, r3
 800ffb6:	687b      	ldr	r3, [r7, #4]
 800ffb8:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800ffba:	683b      	ldr	r3, [r7, #0]
 800ffbc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ffc0:	2b00      	cmp	r3, #0
 800ffc2:	d012      	beq.n	800ffea <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800ffc4:	68bb      	ldr	r3, [r7, #8]
 800ffc6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ffc8:	4618      	mov	r0, r3
 800ffca:	f7fd f9d3 	bl	800d374 <clust2sect>
 800ffce:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800ffd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ffd2:	2b00      	cmp	r3, #0
 800ffd4:	d104      	bne.n	800ffe0 <f_lseek+0x360>
 800ffd6:	687b      	ldr	r3, [r7, #4]
 800ffd8:	2202      	movs	r2, #2
 800ffda:	755a      	strb	r2, [r3, #21]
 800ffdc:	2302      	movs	r3, #2
 800ffde:	e054      	b.n	801008a <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 800ffe0:	683b      	ldr	r3, [r7, #0]
 800ffe2:	0a5b      	lsrs	r3, r3, #9
 800ffe4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ffe6:	4413      	add	r3, r2
 800ffe8:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800ffea:	687b      	ldr	r3, [r7, #4]
 800ffec:	699a      	ldr	r2, [r3, #24]
 800ffee:	687b      	ldr	r3, [r7, #4]
 800fff0:	68db      	ldr	r3, [r3, #12]
 800fff2:	429a      	cmp	r2, r3
 800fff4:	d90a      	bls.n	801000c <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 800fff6:	687b      	ldr	r3, [r7, #4]
 800fff8:	699a      	ldr	r2, [r3, #24]
 800fffa:	687b      	ldr	r3, [r7, #4]
 800fffc:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800fffe:	687b      	ldr	r3, [r7, #4]
 8010000:	7d1b      	ldrb	r3, [r3, #20]
 8010002:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010006:	b2da      	uxtb	r2, r3
 8010008:	687b      	ldr	r3, [r7, #4]
 801000a:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 801000c:	687b      	ldr	r3, [r7, #4]
 801000e:	699b      	ldr	r3, [r3, #24]
 8010010:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010014:	2b00      	cmp	r3, #0
 8010016:	d036      	beq.n	8010086 <f_lseek+0x406>
 8010018:	687b      	ldr	r3, [r7, #4]
 801001a:	6a1b      	ldr	r3, [r3, #32]
 801001c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801001e:	429a      	cmp	r2, r3
 8010020:	d031      	beq.n	8010086 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8010022:	687b      	ldr	r3, [r7, #4]
 8010024:	7d1b      	ldrb	r3, [r3, #20]
 8010026:	b25b      	sxtb	r3, r3
 8010028:	2b00      	cmp	r3, #0
 801002a:	da18      	bge.n	801005e <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801002c:	68bb      	ldr	r3, [r7, #8]
 801002e:	7858      	ldrb	r0, [r3, #1]
 8010030:	687b      	ldr	r3, [r7, #4]
 8010032:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010036:	687b      	ldr	r3, [r7, #4]
 8010038:	6a1a      	ldr	r2, [r3, #32]
 801003a:	2301      	movs	r3, #1
 801003c:	f7fc fe08 	bl	800cc50 <disk_write>
 8010040:	4603      	mov	r3, r0
 8010042:	2b00      	cmp	r3, #0
 8010044:	d004      	beq.n	8010050 <f_lseek+0x3d0>
 8010046:	687b      	ldr	r3, [r7, #4]
 8010048:	2201      	movs	r2, #1
 801004a:	755a      	strb	r2, [r3, #21]
 801004c:	2301      	movs	r3, #1
 801004e:	e01c      	b.n	801008a <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 8010050:	687b      	ldr	r3, [r7, #4]
 8010052:	7d1b      	ldrb	r3, [r3, #20]
 8010054:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010058:	b2da      	uxtb	r2, r3
 801005a:	687b      	ldr	r3, [r7, #4]
 801005c:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 801005e:	68bb      	ldr	r3, [r7, #8]
 8010060:	7858      	ldrb	r0, [r3, #1]
 8010062:	687b      	ldr	r3, [r7, #4]
 8010064:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010068:	2301      	movs	r3, #1
 801006a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801006c:	f7fc fdd0 	bl	800cc10 <disk_read>
 8010070:	4603      	mov	r3, r0
 8010072:	2b00      	cmp	r3, #0
 8010074:	d004      	beq.n	8010080 <f_lseek+0x400>
 8010076:	687b      	ldr	r3, [r7, #4]
 8010078:	2201      	movs	r2, #1
 801007a:	755a      	strb	r2, [r3, #21]
 801007c:	2301      	movs	r3, #1
 801007e:	e004      	b.n	801008a <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 8010080:	687b      	ldr	r3, [r7, #4]
 8010082:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010084:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 8010086:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 801008a:	4618      	mov	r0, r3
 801008c:	3740      	adds	r7, #64	; 0x40
 801008e:	46bd      	mov	sp, r7
 8010090:	bd80      	pop	{r7, pc}

08010092 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8010092:	b580      	push	{r7, lr}
 8010094:	b086      	sub	sp, #24
 8010096:	af00      	add	r7, sp, #0
 8010098:	6078      	str	r0, [r7, #4]
 801009a:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 801009c:	687b      	ldr	r3, [r7, #4]
 801009e:	2b00      	cmp	r3, #0
 80100a0:	d101      	bne.n	80100a6 <f_opendir+0x14>
 80100a2:	2309      	movs	r3, #9
 80100a4:	e074      	b.n	8010190 <f_opendir+0xfe>

	/* Get logical drive */
	obj = &dp->obj;
 80100a6:	687b      	ldr	r3, [r7, #4]
 80100a8:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 80100aa:	f107 0108 	add.w	r1, r7, #8
 80100ae:	463b      	mov	r3, r7
 80100b0:	2200      	movs	r2, #0
 80100b2:	4618      	mov	r0, r3
 80100b4:	f7fe fdf2 	bl	800ec9c <find_volume>
 80100b8:	4603      	mov	r3, r0
 80100ba:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80100bc:	7dfb      	ldrb	r3, [r7, #23]
 80100be:	2b00      	cmp	r3, #0
 80100c0:	d15f      	bne.n	8010182 <f_opendir+0xf0>
		obj->fs = fs;
 80100c2:	68ba      	ldr	r2, [r7, #8]
 80100c4:	693b      	ldr	r3, [r7, #16]
 80100c6:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
 80100c8:	f44f 7000 	mov.w	r0, #512	; 0x200
 80100cc:	f000 fc7d 	bl	80109ca <ff_memalloc>
 80100d0:	60f8      	str	r0, [r7, #12]
 80100d2:	68fb      	ldr	r3, [r7, #12]
 80100d4:	2b00      	cmp	r3, #0
 80100d6:	d101      	bne.n	80100dc <f_opendir+0x4a>
 80100d8:	2311      	movs	r3, #17
 80100da:	e059      	b.n	8010190 <f_opendir+0xfe>
 80100dc:	68bb      	ldr	r3, [r7, #8]
 80100de:	68fa      	ldr	r2, [r7, #12]
 80100e0:	60da      	str	r2, [r3, #12]
		res = follow_path(dp, path);			/* Follow the path to the directory */
 80100e2:	683b      	ldr	r3, [r7, #0]
 80100e4:	4619      	mov	r1, r3
 80100e6:	6878      	ldr	r0, [r7, #4]
 80100e8:	f7fe fccc 	bl	800ea84 <follow_path>
 80100ec:	4603      	mov	r3, r0
 80100ee:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 80100f0:	7dfb      	ldrb	r3, [r7, #23]
 80100f2:	2b00      	cmp	r3, #0
 80100f4:	d13d      	bne.n	8010172 <f_opendir+0xe0>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 80100f6:	687b      	ldr	r3, [r7, #4]
 80100f8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80100fc:	b25b      	sxtb	r3, r3
 80100fe:	2b00      	cmp	r3, #0
 8010100:	db12      	blt.n	8010128 <f_opendir+0x96>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 8010102:	693b      	ldr	r3, [r7, #16]
 8010104:	799b      	ldrb	r3, [r3, #6]
 8010106:	f003 0310 	and.w	r3, r3, #16
 801010a:	2b00      	cmp	r3, #0
 801010c:	d00a      	beq.n	8010124 <f_opendir+0x92>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 801010e:	68ba      	ldr	r2, [r7, #8]
 8010110:	687b      	ldr	r3, [r7, #4]
 8010112:	6a1b      	ldr	r3, [r3, #32]
 8010114:	4619      	mov	r1, r3
 8010116:	4610      	mov	r0, r2
 8010118:	f7fd fd95 	bl	800dc46 <ld_clust>
 801011c:	4602      	mov	r2, r0
 801011e:	693b      	ldr	r3, [r7, #16]
 8010120:	609a      	str	r2, [r3, #8]
 8010122:	e001      	b.n	8010128 <f_opendir+0x96>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 8010124:	2305      	movs	r3, #5
 8010126:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 8010128:	7dfb      	ldrb	r3, [r7, #23]
 801012a:	2b00      	cmp	r3, #0
 801012c:	d121      	bne.n	8010172 <f_opendir+0xe0>
				obj->id = fs->id;
 801012e:	68bb      	ldr	r3, [r7, #8]
 8010130:	88da      	ldrh	r2, [r3, #6]
 8010132:	693b      	ldr	r3, [r7, #16]
 8010134:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 8010136:	2100      	movs	r1, #0
 8010138:	6878      	ldr	r0, [r7, #4]
 801013a:	f7fd fbfd 	bl	800d938 <dir_sdi>
 801013e:	4603      	mov	r3, r0
 8010140:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 8010142:	7dfb      	ldrb	r3, [r7, #23]
 8010144:	2b00      	cmp	r3, #0
 8010146:	d114      	bne.n	8010172 <f_opendir+0xe0>
					if (obj->sclust) {
 8010148:	693b      	ldr	r3, [r7, #16]
 801014a:	689b      	ldr	r3, [r3, #8]
 801014c:	2b00      	cmp	r3, #0
 801014e:	d00d      	beq.n	801016c <f_opendir+0xda>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 8010150:	2100      	movs	r1, #0
 8010152:	6878      	ldr	r0, [r7, #4]
 8010154:	f7fc ff40 	bl	800cfd8 <inc_lock>
 8010158:	4602      	mov	r2, r0
 801015a:	693b      	ldr	r3, [r7, #16]
 801015c:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 801015e:	693b      	ldr	r3, [r7, #16]
 8010160:	691b      	ldr	r3, [r3, #16]
 8010162:	2b00      	cmp	r3, #0
 8010164:	d105      	bne.n	8010172 <f_opendir+0xe0>
 8010166:	2312      	movs	r3, #18
 8010168:	75fb      	strb	r3, [r7, #23]
 801016a:	e002      	b.n	8010172 <f_opendir+0xe0>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 801016c:	693b      	ldr	r3, [r7, #16]
 801016e:	2200      	movs	r2, #0
 8010170:	611a      	str	r2, [r3, #16]
					}
				}
#endif
			}
		}
		FREE_NAMBUF();
 8010172:	68f8      	ldr	r0, [r7, #12]
 8010174:	f000 fc35 	bl	80109e2 <ff_memfree>
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8010178:	7dfb      	ldrb	r3, [r7, #23]
 801017a:	2b04      	cmp	r3, #4
 801017c:	d101      	bne.n	8010182 <f_opendir+0xf0>
 801017e:	2305      	movs	r3, #5
 8010180:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 8010182:	7dfb      	ldrb	r3, [r7, #23]
 8010184:	2b00      	cmp	r3, #0
 8010186:	d002      	beq.n	801018e <f_opendir+0xfc>
 8010188:	693b      	ldr	r3, [r7, #16]
 801018a:	2200      	movs	r2, #0
 801018c:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 801018e:	7dfb      	ldrb	r3, [r7, #23]
}
 8010190:	4618      	mov	r0, r3
 8010192:	3718      	adds	r7, #24
 8010194:	46bd      	mov	sp, r7
 8010196:	bd80      	pop	{r7, pc}

08010198 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 8010198:	b580      	push	{r7, lr}
 801019a:	b084      	sub	sp, #16
 801019c:	af00      	add	r7, sp, #0
 801019e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 80101a0:	687b      	ldr	r3, [r7, #4]
 80101a2:	f107 0208 	add.w	r2, r7, #8
 80101a6:	4611      	mov	r1, r2
 80101a8:	4618      	mov	r0, r3
 80101aa:	f7fe ffc3 	bl	800f134 <validate>
 80101ae:	4603      	mov	r3, r0
 80101b0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80101b2:	7bfb      	ldrb	r3, [r7, #15]
 80101b4:	2b00      	cmp	r3, #0
 80101b6:	d110      	bne.n	80101da <f_closedir+0x42>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 80101b8:	687b      	ldr	r3, [r7, #4]
 80101ba:	691b      	ldr	r3, [r3, #16]
 80101bc:	2b00      	cmp	r3, #0
 80101be:	d006      	beq.n	80101ce <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 80101c0:	687b      	ldr	r3, [r7, #4]
 80101c2:	691b      	ldr	r3, [r3, #16]
 80101c4:	4618      	mov	r0, r3
 80101c6:	f7fc ff95 	bl	800d0f4 <dec_lock>
 80101ca:	4603      	mov	r3, r0
 80101cc:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 80101ce:	7bfb      	ldrb	r3, [r7, #15]
 80101d0:	2b00      	cmp	r3, #0
 80101d2:	d102      	bne.n	80101da <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 80101d4:	687b      	ldr	r3, [r7, #4]
 80101d6:	2200      	movs	r2, #0
 80101d8:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 80101da:	7bfb      	ldrb	r3, [r7, #15]
}
 80101dc:	4618      	mov	r0, r3
 80101de:	3710      	adds	r7, #16
 80101e0:	46bd      	mov	sp, r7
 80101e2:	bd80      	pop	{r7, pc}

080101e4 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 80101e4:	b580      	push	{r7, lr}
 80101e6:	b086      	sub	sp, #24
 80101e8:	af00      	add	r7, sp, #0
 80101ea:	6078      	str	r0, [r7, #4]
 80101ec:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 80101ee:	687b      	ldr	r3, [r7, #4]
 80101f0:	f107 020c 	add.w	r2, r7, #12
 80101f4:	4611      	mov	r1, r2
 80101f6:	4618      	mov	r0, r3
 80101f8:	f7fe ff9c 	bl	800f134 <validate>
 80101fc:	4603      	mov	r3, r0
 80101fe:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8010200:	7dfb      	ldrb	r3, [r7, #23]
 8010202:	2b00      	cmp	r3, #0
 8010204:	d136      	bne.n	8010274 <f_readdir+0x90>
		if (!fno) {
 8010206:	683b      	ldr	r3, [r7, #0]
 8010208:	2b00      	cmp	r3, #0
 801020a:	d106      	bne.n	801021a <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 801020c:	2100      	movs	r1, #0
 801020e:	6878      	ldr	r0, [r7, #4]
 8010210:	f7fd fb92 	bl	800d938 <dir_sdi>
 8010214:	4603      	mov	r3, r0
 8010216:	75fb      	strb	r3, [r7, #23]
 8010218:	e02c      	b.n	8010274 <f_readdir+0x90>
		} else {
			INIT_NAMBUF(fs);
 801021a:	f44f 7000 	mov.w	r0, #512	; 0x200
 801021e:	f000 fbd4 	bl	80109ca <ff_memalloc>
 8010222:	6138      	str	r0, [r7, #16]
 8010224:	693b      	ldr	r3, [r7, #16]
 8010226:	2b00      	cmp	r3, #0
 8010228:	d101      	bne.n	801022e <f_readdir+0x4a>
 801022a:	2311      	movs	r3, #17
 801022c:	e023      	b.n	8010276 <f_readdir+0x92>
 801022e:	68fb      	ldr	r3, [r7, #12]
 8010230:	693a      	ldr	r2, [r7, #16]
 8010232:	60da      	str	r2, [r3, #12]
			res = dir_read(dp, 0);			/* Read an item */
 8010234:	2100      	movs	r1, #0
 8010236:	6878      	ldr	r0, [r7, #4]
 8010238:	f7fd ff2f 	bl	800e09a <dir_read>
 801023c:	4603      	mov	r3, r0
 801023e:	75fb      	strb	r3, [r7, #23]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 8010240:	7dfb      	ldrb	r3, [r7, #23]
 8010242:	2b04      	cmp	r3, #4
 8010244:	d101      	bne.n	801024a <f_readdir+0x66>
 8010246:	2300      	movs	r3, #0
 8010248:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {				/* A valid entry is found */
 801024a:	7dfb      	ldrb	r3, [r7, #23]
 801024c:	2b00      	cmp	r3, #0
 801024e:	d10e      	bne.n	801026e <f_readdir+0x8a>
				get_fileinfo(dp, fno);		/* Get the object information */
 8010250:	6839      	ldr	r1, [r7, #0]
 8010252:	6878      	ldr	r0, [r7, #4]
 8010254:	f7fe f980 	bl	800e558 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 8010258:	2100      	movs	r1, #0
 801025a:	6878      	ldr	r0, [r7, #4]
 801025c:	f7fd fbe7 	bl	800da2e <dir_next>
 8010260:	4603      	mov	r3, r0
 8010262:	75fb      	strb	r3, [r7, #23]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 8010264:	7dfb      	ldrb	r3, [r7, #23]
 8010266:	2b04      	cmp	r3, #4
 8010268:	d101      	bne.n	801026e <f_readdir+0x8a>
 801026a:	2300      	movs	r3, #0
 801026c:	75fb      	strb	r3, [r7, #23]
			}
			FREE_NAMBUF();
 801026e:	6938      	ldr	r0, [r7, #16]
 8010270:	f000 fbb7 	bl	80109e2 <ff_memfree>
		}
	}
	LEAVE_FF(fs, res);
 8010274:	7dfb      	ldrb	r3, [r7, #23]
}
 8010276:	4618      	mov	r0, r3
 8010278:	3718      	adds	r7, #24
 801027a:	46bd      	mov	sp, r7
 801027c:	bd80      	pop	{r7, pc}

0801027e <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 801027e:	b580      	push	{r7, lr}
 8010280:	b092      	sub	sp, #72	; 0x48
 8010282:	af00      	add	r7, sp, #0
 8010284:	60f8      	str	r0, [r7, #12]
 8010286:	60b9      	str	r1, [r7, #8]
 8010288:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 801028a:	f107 0128 	add.w	r1, r7, #40	; 0x28
 801028e:	f107 030c 	add.w	r3, r7, #12
 8010292:	2200      	movs	r2, #0
 8010294:	4618      	mov	r0, r3
 8010296:	f7fe fd01 	bl	800ec9c <find_volume>
 801029a:	4603      	mov	r3, r0
 801029c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 80102a0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80102a4:	2b00      	cmp	r3, #0
 80102a6:	f040 8099 	bne.w	80103dc <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 80102aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80102ac:	687b      	ldr	r3, [r7, #4]
 80102ae:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 80102b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80102b2:	695a      	ldr	r2, [r3, #20]
 80102b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80102b6:	699b      	ldr	r3, [r3, #24]
 80102b8:	3b02      	subs	r3, #2
 80102ba:	429a      	cmp	r2, r3
 80102bc:	d804      	bhi.n	80102c8 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 80102be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80102c0:	695a      	ldr	r2, [r3, #20]
 80102c2:	68bb      	ldr	r3, [r7, #8]
 80102c4:	601a      	str	r2, [r3, #0]
 80102c6:	e089      	b.n	80103dc <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 80102c8:	2300      	movs	r3, #0
 80102ca:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 80102cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80102ce:	781b      	ldrb	r3, [r3, #0]
 80102d0:	2b01      	cmp	r3, #1
 80102d2:	d128      	bne.n	8010326 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 80102d4:	2302      	movs	r3, #2
 80102d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80102d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80102da:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 80102dc:	f107 0314 	add.w	r3, r7, #20
 80102e0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80102e2:	4618      	mov	r0, r3
 80102e4:	f7fd f865 	bl	800d3b2 <get_fat>
 80102e8:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 80102ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80102ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80102f0:	d103      	bne.n	80102fa <f_getfree+0x7c>
 80102f2:	2301      	movs	r3, #1
 80102f4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80102f8:	e063      	b.n	80103c2 <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 80102fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80102fc:	2b01      	cmp	r3, #1
 80102fe:	d103      	bne.n	8010308 <f_getfree+0x8a>
 8010300:	2302      	movs	r3, #2
 8010302:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8010306:	e05c      	b.n	80103c2 <f_getfree+0x144>
					if (stat == 0) nfree++;
 8010308:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801030a:	2b00      	cmp	r3, #0
 801030c:	d102      	bne.n	8010314 <f_getfree+0x96>
 801030e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010310:	3301      	adds	r3, #1
 8010312:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 8010314:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010316:	3301      	adds	r3, #1
 8010318:	63fb      	str	r3, [r7, #60]	; 0x3c
 801031a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801031c:	699b      	ldr	r3, [r3, #24]
 801031e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010320:	429a      	cmp	r2, r3
 8010322:	d3db      	bcc.n	80102dc <f_getfree+0x5e>
 8010324:	e04d      	b.n	80103c2 <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 8010326:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010328:	699b      	ldr	r3, [r3, #24]
 801032a:	63fb      	str	r3, [r7, #60]	; 0x3c
 801032c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801032e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010330:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 8010332:	2300      	movs	r3, #0
 8010334:	637b      	str	r3, [r7, #52]	; 0x34
 8010336:	2300      	movs	r3, #0
 8010338:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 801033a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801033c:	2b00      	cmp	r3, #0
 801033e:	d113      	bne.n	8010368 <f_getfree+0xea>
							res = move_window(fs, sect++);
 8010340:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010342:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010344:	1c5a      	adds	r2, r3, #1
 8010346:	63ba      	str	r2, [r7, #56]	; 0x38
 8010348:	4619      	mov	r1, r3
 801034a:	f7fc ff77 	bl	800d23c <move_window>
 801034e:	4603      	mov	r3, r0
 8010350:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 8010354:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8010358:	2b00      	cmp	r3, #0
 801035a:	d131      	bne.n	80103c0 <f_getfree+0x142>
							p = fs->win;
 801035c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801035e:	3334      	adds	r3, #52	; 0x34
 8010360:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 8010362:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010366:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 8010368:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801036a:	781b      	ldrb	r3, [r3, #0]
 801036c:	2b02      	cmp	r3, #2
 801036e:	d10f      	bne.n	8010390 <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 8010370:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010372:	f7fc fcb3 	bl	800ccdc <ld_word>
 8010376:	4603      	mov	r3, r0
 8010378:	2b00      	cmp	r3, #0
 801037a:	d102      	bne.n	8010382 <f_getfree+0x104>
 801037c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801037e:	3301      	adds	r3, #1
 8010380:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 8010382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010384:	3302      	adds	r3, #2
 8010386:	633b      	str	r3, [r7, #48]	; 0x30
 8010388:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801038a:	3b02      	subs	r3, #2
 801038c:	637b      	str	r3, [r7, #52]	; 0x34
 801038e:	e010      	b.n	80103b2 <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 8010390:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010392:	f7fc fcbb 	bl	800cd0c <ld_dword>
 8010396:	4603      	mov	r3, r0
 8010398:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 801039c:	2b00      	cmp	r3, #0
 801039e:	d102      	bne.n	80103a6 <f_getfree+0x128>
 80103a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80103a2:	3301      	adds	r3, #1
 80103a4:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 80103a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80103a8:	3304      	adds	r3, #4
 80103aa:	633b      	str	r3, [r7, #48]	; 0x30
 80103ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80103ae:	3b04      	subs	r3, #4
 80103b0:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 80103b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80103b4:	3b01      	subs	r3, #1
 80103b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80103b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80103ba:	2b00      	cmp	r3, #0
 80103bc:	d1bd      	bne.n	801033a <f_getfree+0xbc>
 80103be:	e000      	b.n	80103c2 <f_getfree+0x144>
							if (res != FR_OK) break;
 80103c0:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 80103c2:	68bb      	ldr	r3, [r7, #8]
 80103c4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80103c6:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 80103c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80103ca:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80103cc:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 80103ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80103d0:	791a      	ldrb	r2, [r3, #4]
 80103d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80103d4:	f042 0201 	orr.w	r2, r2, #1
 80103d8:	b2d2      	uxtb	r2, r2
 80103da:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 80103dc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 80103e0:	4618      	mov	r0, r3
 80103e2:	3748      	adds	r7, #72	; 0x48
 80103e4:	46bd      	mov	sp, r7
 80103e6:	bd80      	pop	{r7, pc}

080103e8 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 80103e8:	b580      	push	{r7, lr}
 80103ea:	b084      	sub	sp, #16
 80103ec:	af00      	add	r7, sp, #0
 80103ee:	6078      	str	r0, [r7, #4]
 80103f0:	460b      	mov	r3, r1
 80103f2:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 80103f4:	78fb      	ldrb	r3, [r7, #3]
 80103f6:	2b0a      	cmp	r3, #10
 80103f8:	d103      	bne.n	8010402 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 80103fa:	210d      	movs	r1, #13
 80103fc:	6878      	ldr	r0, [r7, #4]
 80103fe:	f7ff fff3 	bl	80103e8 <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 8010402:	687b      	ldr	r3, [r7, #4]
 8010404:	685b      	ldr	r3, [r3, #4]
 8010406:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 8010408:	68fb      	ldr	r3, [r7, #12]
 801040a:	2b00      	cmp	r3, #0
 801040c:	db25      	blt.n	801045a <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 801040e:	68fb      	ldr	r3, [r7, #12]
 8010410:	1c5a      	adds	r2, r3, #1
 8010412:	60fa      	str	r2, [r7, #12]
 8010414:	687a      	ldr	r2, [r7, #4]
 8010416:	4413      	add	r3, r2
 8010418:	78fa      	ldrb	r2, [r7, #3]
 801041a:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 801041c:	68fb      	ldr	r3, [r7, #12]
 801041e:	2b3c      	cmp	r3, #60	; 0x3c
 8010420:	dd12      	ble.n	8010448 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8010422:	687b      	ldr	r3, [r7, #4]
 8010424:	6818      	ldr	r0, [r3, #0]
 8010426:	687b      	ldr	r3, [r7, #4]
 8010428:	f103 010c 	add.w	r1, r3, #12
 801042c:	68fa      	ldr	r2, [r7, #12]
 801042e:	f107 0308 	add.w	r3, r7, #8
 8010432:	f7ff fa08 	bl	800f846 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 8010436:	68ba      	ldr	r2, [r7, #8]
 8010438:	68fb      	ldr	r3, [r7, #12]
 801043a:	429a      	cmp	r2, r3
 801043c:	d101      	bne.n	8010442 <putc_bfd+0x5a>
 801043e:	2300      	movs	r3, #0
 8010440:	e001      	b.n	8010446 <putc_bfd+0x5e>
 8010442:	f04f 33ff 	mov.w	r3, #4294967295
 8010446:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 8010448:	687b      	ldr	r3, [r7, #4]
 801044a:	68fa      	ldr	r2, [r7, #12]
 801044c:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 801044e:	687b      	ldr	r3, [r7, #4]
 8010450:	689b      	ldr	r3, [r3, #8]
 8010452:	1c5a      	adds	r2, r3, #1
 8010454:	687b      	ldr	r3, [r7, #4]
 8010456:	609a      	str	r2, [r3, #8]
 8010458:	e000      	b.n	801045c <putc_bfd+0x74>
	if (i < 0) return;
 801045a:	bf00      	nop
}
 801045c:	3710      	adds	r7, #16
 801045e:	46bd      	mov	sp, r7
 8010460:	bd80      	pop	{r7, pc}

08010462 <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 8010462:	b580      	push	{r7, lr}
 8010464:	b084      	sub	sp, #16
 8010466:	af00      	add	r7, sp, #0
 8010468:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 801046a:	687b      	ldr	r3, [r7, #4]
 801046c:	685b      	ldr	r3, [r3, #4]
 801046e:	2b00      	cmp	r3, #0
 8010470:	db16      	blt.n	80104a0 <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 8010472:	687b      	ldr	r3, [r7, #4]
 8010474:	6818      	ldr	r0, [r3, #0]
 8010476:	687b      	ldr	r3, [r7, #4]
 8010478:	f103 010c 	add.w	r1, r3, #12
 801047c:	687b      	ldr	r3, [r7, #4]
 801047e:	685b      	ldr	r3, [r3, #4]
 8010480:	461a      	mov	r2, r3
 8010482:	f107 030c 	add.w	r3, r7, #12
 8010486:	f7ff f9de 	bl	800f846 <f_write>
 801048a:	4603      	mov	r3, r0
 801048c:	2b00      	cmp	r3, #0
 801048e:	d107      	bne.n	80104a0 <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 8010490:	687b      	ldr	r3, [r7, #4]
 8010492:	685b      	ldr	r3, [r3, #4]
 8010494:	68fa      	ldr	r2, [r7, #12]
 8010496:	4293      	cmp	r3, r2
 8010498:	d102      	bne.n	80104a0 <putc_flush+0x3e>
 801049a:	687b      	ldr	r3, [r7, #4]
 801049c:	689b      	ldr	r3, [r3, #8]
 801049e:	e001      	b.n	80104a4 <putc_flush+0x42>
	return EOF;
 80104a0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80104a4:	4618      	mov	r0, r3
 80104a6:	3710      	adds	r7, #16
 80104a8:	46bd      	mov	sp, r7
 80104aa:	bd80      	pop	{r7, pc}

080104ac <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 80104ac:	b480      	push	{r7}
 80104ae:	b083      	sub	sp, #12
 80104b0:	af00      	add	r7, sp, #0
 80104b2:	6078      	str	r0, [r7, #4]
 80104b4:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 80104b6:	687b      	ldr	r3, [r7, #4]
 80104b8:	683a      	ldr	r2, [r7, #0]
 80104ba:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 80104bc:	687b      	ldr	r3, [r7, #4]
 80104be:	2200      	movs	r2, #0
 80104c0:	605a      	str	r2, [r3, #4]
 80104c2:	687b      	ldr	r3, [r7, #4]
 80104c4:	685a      	ldr	r2, [r3, #4]
 80104c6:	687b      	ldr	r3, [r7, #4]
 80104c8:	609a      	str	r2, [r3, #8]
}
 80104ca:	bf00      	nop
 80104cc:	370c      	adds	r7, #12
 80104ce:	46bd      	mov	sp, r7
 80104d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104d4:	4770      	bx	lr
	...

080104d8 <f_printf>:
int f_printf (
	FIL* fp,			/* Pointer to the file object */
	const TCHAR* fmt,	/* Pointer to the format string */
	...					/* Optional arguments... */
)
{
 80104d8:	b40e      	push	{r1, r2, r3}
 80104da:	b580      	push	{r7, lr}
 80104dc:	b0a7      	sub	sp, #156	; 0x9c
 80104de:	af00      	add	r7, sp, #0
 80104e0:	6078      	str	r0, [r7, #4]
	UINT i, j, w;
	DWORD v;
	TCHAR c, d, str[32], *p;


	putc_init(&pb, fp);
 80104e2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80104e6:	6879      	ldr	r1, [r7, #4]
 80104e8:	4618      	mov	r0, r3
 80104ea:	f7ff ffdf 	bl	80104ac <putc_init>

	va_start(arp, fmt);
 80104ee:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80104f2:	67bb      	str	r3, [r7, #120]	; 0x78

	for (;;) {
		c = *fmt++;
 80104f4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80104f8:	1c5a      	adds	r2, r3, #1
 80104fa:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80104fe:	781b      	ldrb	r3, [r3, #0]
 8010500:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		if (c == 0) break;			/* End of string */
 8010504:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8010508:	2b00      	cmp	r3, #0
 801050a:	f000 81f2 	beq.w	80108f2 <f_printf+0x41a>
		if (c != '%') {				/* Non escape character */
 801050e:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8010512:	2b25      	cmp	r3, #37	; 0x25
 8010514:	d008      	beq.n	8010528 <f_printf+0x50>
			putc_bfd(&pb, c);
 8010516:	f897 2083 	ldrb.w	r2, [r7, #131]	; 0x83
 801051a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801051e:	4611      	mov	r1, r2
 8010520:	4618      	mov	r0, r3
 8010522:	f7ff ff61 	bl	80103e8 <putc_bfd>
			continue;
 8010526:	e1e3      	b.n	80108f0 <f_printf+0x418>
		}
		w = f = 0;
 8010528:	2300      	movs	r3, #0
 801052a:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 801052e:	2300      	movs	r3, #0
 8010530:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
		c = *fmt++;
 8010534:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8010538:	1c5a      	adds	r2, r3, #1
 801053a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 801053e:	781b      	ldrb	r3, [r3, #0]
 8010540:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		if (c == '0') {				/* Flag: '0' padding */
 8010544:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8010548:	2b30      	cmp	r3, #48	; 0x30
 801054a:	d10b      	bne.n	8010564 <f_printf+0x8c>
			f = 1; c = *fmt++;
 801054c:	2301      	movs	r3, #1
 801054e:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8010552:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8010556:	1c5a      	adds	r2, r3, #1
 8010558:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 801055c:	781b      	ldrb	r3, [r3, #0]
 801055e:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
 8010562:	e024      	b.n	80105ae <f_printf+0xd6>
		} else {
			if (c == '-') {			/* Flag: left justified */
 8010564:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8010568:	2b2d      	cmp	r3, #45	; 0x2d
 801056a:	d120      	bne.n	80105ae <f_printf+0xd6>
				f = 2; c = *fmt++;
 801056c:	2302      	movs	r3, #2
 801056e:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8010572:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8010576:	1c5a      	adds	r2, r3, #1
 8010578:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 801057c:	781b      	ldrb	r3, [r3, #0]
 801057e:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
			}
		}
		while (IsDigit(c)) {		/* Precision */
 8010582:	e014      	b.n	80105ae <f_printf+0xd6>
			w = w * 10 + c - '0';
 8010584:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8010588:	4613      	mov	r3, r2
 801058a:	009b      	lsls	r3, r3, #2
 801058c:	4413      	add	r3, r2
 801058e:	005b      	lsls	r3, r3, #1
 8010590:	461a      	mov	r2, r3
 8010592:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8010596:	4413      	add	r3, r2
 8010598:	3b30      	subs	r3, #48	; 0x30
 801059a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
			c = *fmt++;
 801059e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80105a2:	1c5a      	adds	r2, r3, #1
 80105a4:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80105a8:	781b      	ldrb	r3, [r3, #0]
 80105aa:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		while (IsDigit(c)) {		/* Precision */
 80105ae:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 80105b2:	2b2f      	cmp	r3, #47	; 0x2f
 80105b4:	d903      	bls.n	80105be <f_printf+0xe6>
 80105b6:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 80105ba:	2b39      	cmp	r3, #57	; 0x39
 80105bc:	d9e2      	bls.n	8010584 <f_printf+0xac>
		}
		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
 80105be:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 80105c2:	2b6c      	cmp	r3, #108	; 0x6c
 80105c4:	d003      	beq.n	80105ce <f_printf+0xf6>
 80105c6:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 80105ca:	2b4c      	cmp	r3, #76	; 0x4c
 80105cc:	d10d      	bne.n	80105ea <f_printf+0x112>
			f |= 4; c = *fmt++;
 80105ce:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80105d2:	f043 0304 	orr.w	r3, r3, #4
 80105d6:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 80105da:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80105de:	1c5a      	adds	r2, r3, #1
 80105e0:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80105e4:	781b      	ldrb	r3, [r3, #0]
 80105e6:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		}
		if (!c) break;
 80105ea:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 80105ee:	2b00      	cmp	r3, #0
 80105f0:	f000 8181 	beq.w	80108f6 <f_printf+0x41e>
		d = c;
 80105f4:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 80105f8:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		if (IsLower(d)) d -= 0x20;
 80105fc:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8010600:	2b60      	cmp	r3, #96	; 0x60
 8010602:	d908      	bls.n	8010616 <f_printf+0x13e>
 8010604:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8010608:	2b7a      	cmp	r3, #122	; 0x7a
 801060a:	d804      	bhi.n	8010616 <f_printf+0x13e>
 801060c:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8010610:	3b20      	subs	r3, #32
 8010612:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		switch (d) {				/* Type is... */
 8010616:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 801061a:	3b42      	subs	r3, #66	; 0x42
 801061c:	2b16      	cmp	r3, #22
 801061e:	f200 8098 	bhi.w	8010752 <f_printf+0x27a>
 8010622:	a201      	add	r2, pc, #4	; (adr r2, 8010628 <f_printf+0x150>)
 8010624:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010628:	08010733 	.word	0x08010733
 801062c:	0801071b 	.word	0x0801071b
 8010630:	08010743 	.word	0x08010743
 8010634:	08010753 	.word	0x08010753
 8010638:	08010753 	.word	0x08010753
 801063c:	08010753 	.word	0x08010753
 8010640:	08010753 	.word	0x08010753
 8010644:	08010753 	.word	0x08010753
 8010648:	08010753 	.word	0x08010753
 801064c:	08010753 	.word	0x08010753
 8010650:	08010753 	.word	0x08010753
 8010654:	08010753 	.word	0x08010753
 8010658:	08010753 	.word	0x08010753
 801065c:	0801073b 	.word	0x0801073b
 8010660:	08010753 	.word	0x08010753
 8010664:	08010753 	.word	0x08010753
 8010668:	08010753 	.word	0x08010753
 801066c:	08010685 	.word	0x08010685
 8010670:	08010753 	.word	0x08010753
 8010674:	08010743 	.word	0x08010743
 8010678:	08010753 	.word	0x08010753
 801067c:	08010753 	.word	0x08010753
 8010680:	0801074b 	.word	0x0801074b
		case 'S' :					/* String */
			p = va_arg(arp, TCHAR*);
 8010684:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010686:	1d1a      	adds	r2, r3, #4
 8010688:	67ba      	str	r2, [r7, #120]	; 0x78
 801068a:	681b      	ldr	r3, [r3, #0]
 801068c:	67fb      	str	r3, [r7, #124]	; 0x7c
			for (j = 0; p[j]; j++) ;
 801068e:	2300      	movs	r3, #0
 8010690:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8010694:	e004      	b.n	80106a0 <f_printf+0x1c8>
 8010696:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801069a:	3301      	adds	r3, #1
 801069c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80106a0:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80106a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80106a6:	4413      	add	r3, r2
 80106a8:	781b      	ldrb	r3, [r3, #0]
 80106aa:	2b00      	cmp	r3, #0
 80106ac:	d1f3      	bne.n	8010696 <f_printf+0x1be>
			if (!(f & 2)) {
 80106ae:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80106b2:	f003 0302 	and.w	r3, r3, #2
 80106b6:	2b00      	cmp	r3, #0
 80106b8:	d11a      	bne.n	80106f0 <f_printf+0x218>
				while (j++ < w) putc_bfd(&pb, ' ');
 80106ba:	e005      	b.n	80106c8 <f_printf+0x1f0>
 80106bc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80106c0:	2120      	movs	r1, #32
 80106c2:	4618      	mov	r0, r3
 80106c4:	f7ff fe90 	bl	80103e8 <putc_bfd>
 80106c8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80106cc:	1c5a      	adds	r2, r3, #1
 80106ce:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80106d2:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80106d6:	429a      	cmp	r2, r3
 80106d8:	d8f0      	bhi.n	80106bc <f_printf+0x1e4>
			}
			while (*p) putc_bfd(&pb, *p++);
 80106da:	e009      	b.n	80106f0 <f_printf+0x218>
 80106dc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80106de:	1c5a      	adds	r2, r3, #1
 80106e0:	67fa      	str	r2, [r7, #124]	; 0x7c
 80106e2:	781a      	ldrb	r2, [r3, #0]
 80106e4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80106e8:	4611      	mov	r1, r2
 80106ea:	4618      	mov	r0, r3
 80106ec:	f7ff fe7c 	bl	80103e8 <putc_bfd>
 80106f0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80106f2:	781b      	ldrb	r3, [r3, #0]
 80106f4:	2b00      	cmp	r3, #0
 80106f6:	d1f1      	bne.n	80106dc <f_printf+0x204>
			while (j++ < w) putc_bfd(&pb, ' ');
 80106f8:	e005      	b.n	8010706 <f_printf+0x22e>
 80106fa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80106fe:	2120      	movs	r1, #32
 8010700:	4618      	mov	r0, r3
 8010702:	f7ff fe71 	bl	80103e8 <putc_bfd>
 8010706:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801070a:	1c5a      	adds	r2, r3, #1
 801070c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8010710:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8010714:	429a      	cmp	r2, r3
 8010716:	d8f0      	bhi.n	80106fa <f_printf+0x222>
			continue;
 8010718:	e0ea      	b.n	80108f0 <f_printf+0x418>

		case 'C' :					/* Character */
			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
 801071a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801071c:	1d1a      	adds	r2, r3, #4
 801071e:	67ba      	str	r2, [r7, #120]	; 0x78
 8010720:	681b      	ldr	r3, [r3, #0]
 8010722:	b2da      	uxtb	r2, r3
 8010724:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8010728:	4611      	mov	r1, r2
 801072a:	4618      	mov	r0, r3
 801072c:	f7ff fe5c 	bl	80103e8 <putc_bfd>
 8010730:	e0de      	b.n	80108f0 <f_printf+0x418>

		case 'B' :					/* Binary */
			r = 2; break;
 8010732:	2302      	movs	r3, #2
 8010734:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 8010738:	e014      	b.n	8010764 <f_printf+0x28c>

		case 'O' :					/* Octal */
			r = 8; break;
 801073a:	2308      	movs	r3, #8
 801073c:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 8010740:	e010      	b.n	8010764 <f_printf+0x28c>

		case 'D' :					/* Signed decimal */
		case 'U' :					/* Unsigned decimal */
			r = 10; break;
 8010742:	230a      	movs	r3, #10
 8010744:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 8010748:	e00c      	b.n	8010764 <f_printf+0x28c>

		case 'X' :					/* Hexdecimal */
			r = 16; break;
 801074a:	2310      	movs	r3, #16
 801074c:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 8010750:	e008      	b.n	8010764 <f_printf+0x28c>

		default:					/* Unknown type (pass-through) */
			putc_bfd(&pb, c); continue;
 8010752:	f897 2083 	ldrb.w	r2, [r7, #131]	; 0x83
 8010756:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801075a:	4611      	mov	r1, r2
 801075c:	4618      	mov	r0, r3
 801075e:	f7ff fe43 	bl	80103e8 <putc_bfd>
 8010762:	e0c5      	b.n	80108f0 <f_printf+0x418>
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
 8010764:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8010768:	f003 0304 	and.w	r3, r3, #4
 801076c:	2b00      	cmp	r3, #0
 801076e:	d004      	beq.n	801077a <f_printf+0x2a2>
 8010770:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010772:	1d1a      	adds	r2, r3, #4
 8010774:	67ba      	str	r2, [r7, #120]	; 0x78
 8010776:	681b      	ldr	r3, [r3, #0]
 8010778:	e00c      	b.n	8010794 <f_printf+0x2bc>
 801077a:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 801077e:	2b44      	cmp	r3, #68	; 0x44
 8010780:	d104      	bne.n	801078c <f_printf+0x2b4>
 8010782:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010784:	1d1a      	adds	r2, r3, #4
 8010786:	67ba      	str	r2, [r7, #120]	; 0x78
 8010788:	681b      	ldr	r3, [r3, #0]
 801078a:	e003      	b.n	8010794 <f_printf+0x2bc>
 801078c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801078e:	1d1a      	adds	r2, r3, #4
 8010790:	67ba      	str	r2, [r7, #120]	; 0x78
 8010792:	681b      	ldr	r3, [r3, #0]
 8010794:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		if (d == 'D' && (v & 0x80000000)) {
 8010798:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 801079c:	2b44      	cmp	r3, #68	; 0x44
 801079e:	d10e      	bne.n	80107be <f_printf+0x2e6>
 80107a0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80107a4:	2b00      	cmp	r3, #0
 80107a6:	da0a      	bge.n	80107be <f_printf+0x2e6>
			v = 0 - v;
 80107a8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80107ac:	425b      	negs	r3, r3
 80107ae:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			f |= 8;
 80107b2:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80107b6:	f043 0308 	orr.w	r3, r3, #8
 80107ba:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
		}
		i = 0;
 80107be:	2300      	movs	r3, #0
 80107c0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
		do {
			d = (TCHAR)(v % r); v /= r;
 80107c4:	f897 2096 	ldrb.w	r2, [r7, #150]	; 0x96
 80107c8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80107cc:	fbb3 f1f2 	udiv	r1, r3, r2
 80107d0:	fb01 f202 	mul.w	r2, r1, r2
 80107d4:	1a9b      	subs	r3, r3, r2
 80107d6:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
 80107da:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 80107de:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80107e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80107e6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 80107ea:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 80107ee:	2b09      	cmp	r3, #9
 80107f0:	d90b      	bls.n	801080a <f_printf+0x332>
 80107f2:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 80107f6:	2b78      	cmp	r3, #120	; 0x78
 80107f8:	d101      	bne.n	80107fe <f_printf+0x326>
 80107fa:	2227      	movs	r2, #39	; 0x27
 80107fc:	e000      	b.n	8010800 <f_printf+0x328>
 80107fe:	2207      	movs	r2, #7
 8010800:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8010804:	4413      	add	r3, r2
 8010806:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
			str[i++] = d + '0';
 801080a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801080e:	1c5a      	adds	r2, r3, #1
 8010810:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8010814:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 8010818:	3230      	adds	r2, #48	; 0x30
 801081a:	b2d2      	uxtb	r2, r2
 801081c:	3398      	adds	r3, #152	; 0x98
 801081e:	443b      	add	r3, r7
 8010820:	f803 2c8c 	strb.w	r2, [r3, #-140]
		} while (v && i < sizeof str / sizeof str[0]);
 8010824:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8010828:	2b00      	cmp	r3, #0
 801082a:	d003      	beq.n	8010834 <f_printf+0x35c>
 801082c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010830:	2b1f      	cmp	r3, #31
 8010832:	d9c7      	bls.n	80107c4 <f_printf+0x2ec>
		if (f & 8) str[i++] = '-';
 8010834:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8010838:	f003 0308 	and.w	r3, r3, #8
 801083c:	2b00      	cmp	r3, #0
 801083e:	d009      	beq.n	8010854 <f_printf+0x37c>
 8010840:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010844:	1c5a      	adds	r2, r3, #1
 8010846:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 801084a:	3398      	adds	r3, #152	; 0x98
 801084c:	443b      	add	r3, r7
 801084e:	222d      	movs	r2, #45	; 0x2d
 8010850:	f803 2c8c 	strb.w	r2, [r3, #-140]
		j = i; d = (f & 1) ? '0' : ' ';
 8010854:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010858:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 801085c:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8010860:	f003 0301 	and.w	r3, r3, #1
 8010864:	2b00      	cmp	r3, #0
 8010866:	d001      	beq.n	801086c <f_printf+0x394>
 8010868:	2330      	movs	r3, #48	; 0x30
 801086a:	e000      	b.n	801086e <f_printf+0x396>
 801086c:	2320      	movs	r3, #32
 801086e:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
 8010872:	e007      	b.n	8010884 <f_printf+0x3ac>
 8010874:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 8010878:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801087c:	4611      	mov	r1, r2
 801087e:	4618      	mov	r0, r3
 8010880:	f7ff fdb2 	bl	80103e8 <putc_bfd>
 8010884:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8010888:	f003 0302 	and.w	r3, r3, #2
 801088c:	2b00      	cmp	r3, #0
 801088e:	d108      	bne.n	80108a2 <f_printf+0x3ca>
 8010890:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010894:	1c5a      	adds	r2, r3, #1
 8010896:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 801089a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 801089e:	429a      	cmp	r2, r3
 80108a0:	d8e8      	bhi.n	8010874 <f_printf+0x39c>
		do {
			putc_bfd(&pb, str[--i]);
 80108a2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80108a6:	3b01      	subs	r3, #1
 80108a8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80108ac:	f107 020c 	add.w	r2, r7, #12
 80108b0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80108b4:	4413      	add	r3, r2
 80108b6:	781a      	ldrb	r2, [r3, #0]
 80108b8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80108bc:	4611      	mov	r1, r2
 80108be:	4618      	mov	r0, r3
 80108c0:	f7ff fd92 	bl	80103e8 <putc_bfd>
		} while (i);
 80108c4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80108c8:	2b00      	cmp	r3, #0
 80108ca:	d1ea      	bne.n	80108a2 <f_printf+0x3ca>
		while (j++ < w) putc_bfd(&pb, d);
 80108cc:	e007      	b.n	80108de <f_printf+0x406>
 80108ce:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 80108d2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80108d6:	4611      	mov	r1, r2
 80108d8:	4618      	mov	r0, r3
 80108da:	f7ff fd85 	bl	80103e8 <putc_bfd>
 80108de:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80108e2:	1c5a      	adds	r2, r3, #1
 80108e4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80108e8:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80108ec:	429a      	cmp	r2, r3
 80108ee:	d8ee      	bhi.n	80108ce <f_printf+0x3f6>
		c = *fmt++;
 80108f0:	e600      	b.n	80104f4 <f_printf+0x1c>
		if (c == 0) break;			/* End of string */
 80108f2:	bf00      	nop
 80108f4:	e000      	b.n	80108f8 <f_printf+0x420>
		if (!c) break;
 80108f6:	bf00      	nop
	}

	va_end(arp);

	return putc_flush(&pb);
 80108f8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80108fc:	4618      	mov	r0, r3
 80108fe:	f7ff fdb0 	bl	8010462 <putc_flush>
 8010902:	4603      	mov	r3, r0
}
 8010904:	4618      	mov	r0, r3
 8010906:	379c      	adds	r7, #156	; 0x9c
 8010908:	46bd      	mov	sp, r7
 801090a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801090e:	b003      	add	sp, #12
 8010910:	4770      	bx	lr
 8010912:	bf00      	nop

08010914 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8010914:	b480      	push	{r7}
 8010916:	b087      	sub	sp, #28
 8010918:	af00      	add	r7, sp, #0
 801091a:	60f8      	str	r0, [r7, #12]
 801091c:	60b9      	str	r1, [r7, #8]
 801091e:	4613      	mov	r3, r2
 8010920:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8010922:	2301      	movs	r3, #1
 8010924:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8010926:	2300      	movs	r3, #0
 8010928:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 801092a:	4b1f      	ldr	r3, [pc, #124]	; (80109a8 <FATFS_LinkDriverEx+0x94>)
 801092c:	7b9b      	ldrb	r3, [r3, #14]
 801092e:	b2db      	uxtb	r3, r3
 8010930:	2b01      	cmp	r3, #1
 8010932:	d831      	bhi.n	8010998 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8010934:	4b1c      	ldr	r3, [pc, #112]	; (80109a8 <FATFS_LinkDriverEx+0x94>)
 8010936:	7b9b      	ldrb	r3, [r3, #14]
 8010938:	b2db      	uxtb	r3, r3
 801093a:	461a      	mov	r2, r3
 801093c:	4b1a      	ldr	r3, [pc, #104]	; (80109a8 <FATFS_LinkDriverEx+0x94>)
 801093e:	2100      	movs	r1, #0
 8010940:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8010942:	4b19      	ldr	r3, [pc, #100]	; (80109a8 <FATFS_LinkDriverEx+0x94>)
 8010944:	7b9b      	ldrb	r3, [r3, #14]
 8010946:	b2db      	uxtb	r3, r3
 8010948:	4a17      	ldr	r2, [pc, #92]	; (80109a8 <FATFS_LinkDriverEx+0x94>)
 801094a:	009b      	lsls	r3, r3, #2
 801094c:	4413      	add	r3, r2
 801094e:	68fa      	ldr	r2, [r7, #12]
 8010950:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8010952:	4b15      	ldr	r3, [pc, #84]	; (80109a8 <FATFS_LinkDriverEx+0x94>)
 8010954:	7b9b      	ldrb	r3, [r3, #14]
 8010956:	b2db      	uxtb	r3, r3
 8010958:	461a      	mov	r2, r3
 801095a:	4b13      	ldr	r3, [pc, #76]	; (80109a8 <FATFS_LinkDriverEx+0x94>)
 801095c:	4413      	add	r3, r2
 801095e:	79fa      	ldrb	r2, [r7, #7]
 8010960:	731a      	strb	r2, [r3, #12]
    DiskNum = disk.nbr++;
 8010962:	4b11      	ldr	r3, [pc, #68]	; (80109a8 <FATFS_LinkDriverEx+0x94>)
 8010964:	7b9b      	ldrb	r3, [r3, #14]
 8010966:	b2db      	uxtb	r3, r3
 8010968:	1c5a      	adds	r2, r3, #1
 801096a:	b2d1      	uxtb	r1, r2
 801096c:	4a0e      	ldr	r2, [pc, #56]	; (80109a8 <FATFS_LinkDriverEx+0x94>)
 801096e:	7391      	strb	r1, [r2, #14]
 8010970:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8010972:	7dbb      	ldrb	r3, [r7, #22]
 8010974:	3330      	adds	r3, #48	; 0x30
 8010976:	b2da      	uxtb	r2, r3
 8010978:	68bb      	ldr	r3, [r7, #8]
 801097a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 801097c:	68bb      	ldr	r3, [r7, #8]
 801097e:	3301      	adds	r3, #1
 8010980:	223a      	movs	r2, #58	; 0x3a
 8010982:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8010984:	68bb      	ldr	r3, [r7, #8]
 8010986:	3302      	adds	r3, #2
 8010988:	222f      	movs	r2, #47	; 0x2f
 801098a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 801098c:	68bb      	ldr	r3, [r7, #8]
 801098e:	3303      	adds	r3, #3
 8010990:	2200      	movs	r2, #0
 8010992:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8010994:	2300      	movs	r3, #0
 8010996:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8010998:	7dfb      	ldrb	r3, [r7, #23]
}
 801099a:	4618      	mov	r0, r3
 801099c:	371c      	adds	r7, #28
 801099e:	46bd      	mov	sp, r7
 80109a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109a4:	4770      	bx	lr
 80109a6:	bf00      	nop
 80109a8:	2000732c 	.word	0x2000732c

080109ac <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80109ac:	b580      	push	{r7, lr}
 80109ae:	b082      	sub	sp, #8
 80109b0:	af00      	add	r7, sp, #0
 80109b2:	6078      	str	r0, [r7, #4]
 80109b4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80109b6:	2200      	movs	r2, #0
 80109b8:	6839      	ldr	r1, [r7, #0]
 80109ba:	6878      	ldr	r0, [r7, #4]
 80109bc:	f7ff ffaa 	bl	8010914 <FATFS_LinkDriverEx>
 80109c0:	4603      	mov	r3, r0
}
 80109c2:	4618      	mov	r0, r3
 80109c4:	3708      	adds	r7, #8
 80109c6:	46bd      	mov	sp, r7
 80109c8:	bd80      	pop	{r7, pc}

080109ca <ff_memalloc>:
*/

void* ff_memalloc (	/* Returns pointer to the allocated memory block */
	UINT msize		/* Number of bytes to allocate */
)
{
 80109ca:	b580      	push	{r7, lr}
 80109cc:	b082      	sub	sp, #8
 80109ce:	af00      	add	r7, sp, #0
 80109d0:	6078      	str	r0, [r7, #4]
	return ff_malloc(msize);	/* Allocate a new memory block with POSIX API */
 80109d2:	6878      	ldr	r0, [r7, #4]
 80109d4:	f002 fe1c 	bl	8013610 <malloc>
 80109d8:	4603      	mov	r3, r0
}
 80109da:	4618      	mov	r0, r3
 80109dc:	3708      	adds	r7, #8
 80109de:	46bd      	mov	sp, r7
 80109e0:	bd80      	pop	{r7, pc}

080109e2 <ff_memfree>:
/*------------------------------------------------------------------------*/

void ff_memfree (
	void* mblock	/* Pointer to the memory block to free */
)
{
 80109e2:	b580      	push	{r7, lr}
 80109e4:	b082      	sub	sp, #8
 80109e6:	af00      	add	r7, sp, #0
 80109e8:	6078      	str	r0, [r7, #4]
	ff_free(mblock);	/* Discard the memory block with POSIX API */
 80109ea:	6878      	ldr	r0, [r7, #4]
 80109ec:	f002 fe18 	bl	8013620 <free>
}
 80109f0:	bf00      	nop
 80109f2:	3708      	adds	r7, #8
 80109f4:	46bd      	mov	sp, r7
 80109f6:	bd80      	pop	{r7, pc}

080109f8 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 80109f8:	b480      	push	{r7}
 80109fa:	b085      	sub	sp, #20
 80109fc:	af00      	add	r7, sp, #0
 80109fe:	4603      	mov	r3, r0
 8010a00:	6039      	str	r1, [r7, #0]
 8010a02:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8010a04:	88fb      	ldrh	r3, [r7, #6]
 8010a06:	2b7f      	cmp	r3, #127	; 0x7f
 8010a08:	d802      	bhi.n	8010a10 <ff_convert+0x18>
		c = chr;
 8010a0a:	88fb      	ldrh	r3, [r7, #6]
 8010a0c:	81fb      	strh	r3, [r7, #14]
 8010a0e:	e025      	b.n	8010a5c <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8010a10:	683b      	ldr	r3, [r7, #0]
 8010a12:	2b00      	cmp	r3, #0
 8010a14:	d00b      	beq.n	8010a2e <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8010a16:	88fb      	ldrh	r3, [r7, #6]
 8010a18:	2bff      	cmp	r3, #255	; 0xff
 8010a1a:	d805      	bhi.n	8010a28 <ff_convert+0x30>
 8010a1c:	88fb      	ldrh	r3, [r7, #6]
 8010a1e:	3b80      	subs	r3, #128	; 0x80
 8010a20:	4a12      	ldr	r2, [pc, #72]	; (8010a6c <ff_convert+0x74>)
 8010a22:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010a26:	e000      	b.n	8010a2a <ff_convert+0x32>
 8010a28:	2300      	movs	r3, #0
 8010a2a:	81fb      	strh	r3, [r7, #14]
 8010a2c:	e016      	b.n	8010a5c <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8010a2e:	2300      	movs	r3, #0
 8010a30:	81fb      	strh	r3, [r7, #14]
 8010a32:	e009      	b.n	8010a48 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8010a34:	89fb      	ldrh	r3, [r7, #14]
 8010a36:	4a0d      	ldr	r2, [pc, #52]	; (8010a6c <ff_convert+0x74>)
 8010a38:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010a3c:	88fa      	ldrh	r2, [r7, #6]
 8010a3e:	429a      	cmp	r2, r3
 8010a40:	d006      	beq.n	8010a50 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8010a42:	89fb      	ldrh	r3, [r7, #14]
 8010a44:	3301      	adds	r3, #1
 8010a46:	81fb      	strh	r3, [r7, #14]
 8010a48:	89fb      	ldrh	r3, [r7, #14]
 8010a4a:	2b7f      	cmp	r3, #127	; 0x7f
 8010a4c:	d9f2      	bls.n	8010a34 <ff_convert+0x3c>
 8010a4e:	e000      	b.n	8010a52 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8010a50:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8010a52:	89fb      	ldrh	r3, [r7, #14]
 8010a54:	3380      	adds	r3, #128	; 0x80
 8010a56:	b29b      	uxth	r3, r3
 8010a58:	b2db      	uxtb	r3, r3
 8010a5a:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8010a5c:	89fb      	ldrh	r3, [r7, #14]
}
 8010a5e:	4618      	mov	r0, r3
 8010a60:	3714      	adds	r7, #20
 8010a62:	46bd      	mov	sp, r7
 8010a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a68:	4770      	bx	lr
 8010a6a:	bf00      	nop
 8010a6c:	0802303c 	.word	0x0802303c

08010a70 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8010a70:	b480      	push	{r7}
 8010a72:	b087      	sub	sp, #28
 8010a74:	af00      	add	r7, sp, #0
 8010a76:	4603      	mov	r3, r0
 8010a78:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8010a7a:	88fb      	ldrh	r3, [r7, #6]
 8010a7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010a80:	d201      	bcs.n	8010a86 <ff_wtoupper+0x16>
 8010a82:	4b3e      	ldr	r3, [pc, #248]	; (8010b7c <ff_wtoupper+0x10c>)
 8010a84:	e000      	b.n	8010a88 <ff_wtoupper+0x18>
 8010a86:	4b3e      	ldr	r3, [pc, #248]	; (8010b80 <ff_wtoupper+0x110>)
 8010a88:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8010a8a:	697b      	ldr	r3, [r7, #20]
 8010a8c:	1c9a      	adds	r2, r3, #2
 8010a8e:	617a      	str	r2, [r7, #20]
 8010a90:	881b      	ldrh	r3, [r3, #0]
 8010a92:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8010a94:	8a7b      	ldrh	r3, [r7, #18]
 8010a96:	2b00      	cmp	r3, #0
 8010a98:	d068      	beq.n	8010b6c <ff_wtoupper+0xfc>
 8010a9a:	88fa      	ldrh	r2, [r7, #6]
 8010a9c:	8a7b      	ldrh	r3, [r7, #18]
 8010a9e:	429a      	cmp	r2, r3
 8010aa0:	d364      	bcc.n	8010b6c <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8010aa2:	697b      	ldr	r3, [r7, #20]
 8010aa4:	1c9a      	adds	r2, r3, #2
 8010aa6:	617a      	str	r2, [r7, #20]
 8010aa8:	881b      	ldrh	r3, [r3, #0]
 8010aaa:	823b      	strh	r3, [r7, #16]
 8010aac:	8a3b      	ldrh	r3, [r7, #16]
 8010aae:	0a1b      	lsrs	r3, r3, #8
 8010ab0:	81fb      	strh	r3, [r7, #14]
 8010ab2:	8a3b      	ldrh	r3, [r7, #16]
 8010ab4:	b2db      	uxtb	r3, r3
 8010ab6:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8010ab8:	88fa      	ldrh	r2, [r7, #6]
 8010aba:	8a79      	ldrh	r1, [r7, #18]
 8010abc:	8a3b      	ldrh	r3, [r7, #16]
 8010abe:	440b      	add	r3, r1
 8010ac0:	429a      	cmp	r2, r3
 8010ac2:	da49      	bge.n	8010b58 <ff_wtoupper+0xe8>
			switch (cmd) {
 8010ac4:	89fb      	ldrh	r3, [r7, #14]
 8010ac6:	2b08      	cmp	r3, #8
 8010ac8:	d84f      	bhi.n	8010b6a <ff_wtoupper+0xfa>
 8010aca:	a201      	add	r2, pc, #4	; (adr r2, 8010ad0 <ff_wtoupper+0x60>)
 8010acc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010ad0:	08010af5 	.word	0x08010af5
 8010ad4:	08010b07 	.word	0x08010b07
 8010ad8:	08010b1d 	.word	0x08010b1d
 8010adc:	08010b25 	.word	0x08010b25
 8010ae0:	08010b2d 	.word	0x08010b2d
 8010ae4:	08010b35 	.word	0x08010b35
 8010ae8:	08010b3d 	.word	0x08010b3d
 8010aec:	08010b45 	.word	0x08010b45
 8010af0:	08010b4d 	.word	0x08010b4d
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8010af4:	88fa      	ldrh	r2, [r7, #6]
 8010af6:	8a7b      	ldrh	r3, [r7, #18]
 8010af8:	1ad3      	subs	r3, r2, r3
 8010afa:	005b      	lsls	r3, r3, #1
 8010afc:	697a      	ldr	r2, [r7, #20]
 8010afe:	4413      	add	r3, r2
 8010b00:	881b      	ldrh	r3, [r3, #0]
 8010b02:	80fb      	strh	r3, [r7, #6]
 8010b04:	e027      	b.n	8010b56 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8010b06:	88fa      	ldrh	r2, [r7, #6]
 8010b08:	8a7b      	ldrh	r3, [r7, #18]
 8010b0a:	1ad3      	subs	r3, r2, r3
 8010b0c:	b29b      	uxth	r3, r3
 8010b0e:	f003 0301 	and.w	r3, r3, #1
 8010b12:	b29b      	uxth	r3, r3
 8010b14:	88fa      	ldrh	r2, [r7, #6]
 8010b16:	1ad3      	subs	r3, r2, r3
 8010b18:	80fb      	strh	r3, [r7, #6]
 8010b1a:	e01c      	b.n	8010b56 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8010b1c:	88fb      	ldrh	r3, [r7, #6]
 8010b1e:	3b10      	subs	r3, #16
 8010b20:	80fb      	strh	r3, [r7, #6]
 8010b22:	e018      	b.n	8010b56 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8010b24:	88fb      	ldrh	r3, [r7, #6]
 8010b26:	3b20      	subs	r3, #32
 8010b28:	80fb      	strh	r3, [r7, #6]
 8010b2a:	e014      	b.n	8010b56 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8010b2c:	88fb      	ldrh	r3, [r7, #6]
 8010b2e:	3b30      	subs	r3, #48	; 0x30
 8010b30:	80fb      	strh	r3, [r7, #6]
 8010b32:	e010      	b.n	8010b56 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8010b34:	88fb      	ldrh	r3, [r7, #6]
 8010b36:	3b1a      	subs	r3, #26
 8010b38:	80fb      	strh	r3, [r7, #6]
 8010b3a:	e00c      	b.n	8010b56 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8010b3c:	88fb      	ldrh	r3, [r7, #6]
 8010b3e:	3308      	adds	r3, #8
 8010b40:	80fb      	strh	r3, [r7, #6]
 8010b42:	e008      	b.n	8010b56 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8010b44:	88fb      	ldrh	r3, [r7, #6]
 8010b46:	3b50      	subs	r3, #80	; 0x50
 8010b48:	80fb      	strh	r3, [r7, #6]
 8010b4a:	e004      	b.n	8010b56 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8010b4c:	88fb      	ldrh	r3, [r7, #6]
 8010b4e:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 8010b52:	80fb      	strh	r3, [r7, #6]
 8010b54:	bf00      	nop
			}
			break;
 8010b56:	e008      	b.n	8010b6a <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8010b58:	89fb      	ldrh	r3, [r7, #14]
 8010b5a:	2b00      	cmp	r3, #0
 8010b5c:	d195      	bne.n	8010a8a <ff_wtoupper+0x1a>
 8010b5e:	8a3b      	ldrh	r3, [r7, #16]
 8010b60:	005b      	lsls	r3, r3, #1
 8010b62:	697a      	ldr	r2, [r7, #20]
 8010b64:	4413      	add	r3, r2
 8010b66:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8010b68:	e78f      	b.n	8010a8a <ff_wtoupper+0x1a>
			break;
 8010b6a:	bf00      	nop
	}

	return chr;
 8010b6c:	88fb      	ldrh	r3, [r7, #6]
}
 8010b6e:	4618      	mov	r0, r3
 8010b70:	371c      	adds	r7, #28
 8010b72:	46bd      	mov	sp, r7
 8010b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b78:	4770      	bx	lr
 8010b7a:	bf00      	nop
 8010b7c:	0802313c 	.word	0x0802313c
 8010b80:	08023330 	.word	0x08023330

08010b84 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8010b84:	b580      	push	{r7, lr}
 8010b86:	b084      	sub	sp, #16
 8010b88:	af00      	add	r7, sp, #0
 8010b8a:	6078      	str	r0, [r7, #4]
 8010b8c:	460b      	mov	r3, r1
 8010b8e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8010b90:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8010b94:	f002 fcf8 	bl	8013588 <USBD_static_malloc>
 8010b98:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8010b9a:	68fb      	ldr	r3, [r7, #12]
 8010b9c:	2b00      	cmp	r3, #0
 8010b9e:	d109      	bne.n	8010bb4 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8010ba0:	687b      	ldr	r3, [r7, #4]
 8010ba2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8010ba6:	687b      	ldr	r3, [r7, #4]
 8010ba8:	32b0      	adds	r2, #176	; 0xb0
 8010baa:	2100      	movs	r1, #0
 8010bac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8010bb0:	2302      	movs	r3, #2
 8010bb2:	e0d4      	b.n	8010d5e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8010bb4:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8010bb8:	2100      	movs	r1, #0
 8010bba:	68f8      	ldr	r0, [r7, #12]
 8010bbc:	f003 fe10 	bl	80147e0 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8010bc0:	687b      	ldr	r3, [r7, #4]
 8010bc2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8010bc6:	687b      	ldr	r3, [r7, #4]
 8010bc8:	32b0      	adds	r2, #176	; 0xb0
 8010bca:	68f9      	ldr	r1, [r7, #12]
 8010bcc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8010bd0:	687b      	ldr	r3, [r7, #4]
 8010bd2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8010bd6:	687b      	ldr	r3, [r7, #4]
 8010bd8:	32b0      	adds	r2, #176	; 0xb0
 8010bda:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8010bde:	687b      	ldr	r3, [r7, #4]
 8010be0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010be4:	687b      	ldr	r3, [r7, #4]
 8010be6:	7c1b      	ldrb	r3, [r3, #16]
 8010be8:	2b00      	cmp	r3, #0
 8010bea:	d138      	bne.n	8010c5e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8010bec:	4b5e      	ldr	r3, [pc, #376]	; (8010d68 <USBD_CDC_Init+0x1e4>)
 8010bee:	7819      	ldrb	r1, [r3, #0]
 8010bf0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010bf4:	2202      	movs	r2, #2
 8010bf6:	6878      	ldr	r0, [r7, #4]
 8010bf8:	f002 fba3 	bl	8013342 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8010bfc:	4b5a      	ldr	r3, [pc, #360]	; (8010d68 <USBD_CDC_Init+0x1e4>)
 8010bfe:	781b      	ldrb	r3, [r3, #0]
 8010c00:	f003 020f 	and.w	r2, r3, #15
 8010c04:	6879      	ldr	r1, [r7, #4]
 8010c06:	4613      	mov	r3, r2
 8010c08:	009b      	lsls	r3, r3, #2
 8010c0a:	4413      	add	r3, r2
 8010c0c:	009b      	lsls	r3, r3, #2
 8010c0e:	440b      	add	r3, r1
 8010c10:	3324      	adds	r3, #36	; 0x24
 8010c12:	2201      	movs	r2, #1
 8010c14:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8010c16:	4b55      	ldr	r3, [pc, #340]	; (8010d6c <USBD_CDC_Init+0x1e8>)
 8010c18:	7819      	ldrb	r1, [r3, #0]
 8010c1a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010c1e:	2202      	movs	r2, #2
 8010c20:	6878      	ldr	r0, [r7, #4]
 8010c22:	f002 fb8e 	bl	8013342 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8010c26:	4b51      	ldr	r3, [pc, #324]	; (8010d6c <USBD_CDC_Init+0x1e8>)
 8010c28:	781b      	ldrb	r3, [r3, #0]
 8010c2a:	f003 020f 	and.w	r2, r3, #15
 8010c2e:	6879      	ldr	r1, [r7, #4]
 8010c30:	4613      	mov	r3, r2
 8010c32:	009b      	lsls	r3, r3, #2
 8010c34:	4413      	add	r3, r2
 8010c36:	009b      	lsls	r3, r3, #2
 8010c38:	440b      	add	r3, r1
 8010c3a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8010c3e:	2201      	movs	r2, #1
 8010c40:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8010c42:	4b4b      	ldr	r3, [pc, #300]	; (8010d70 <USBD_CDC_Init+0x1ec>)
 8010c44:	781b      	ldrb	r3, [r3, #0]
 8010c46:	f003 020f 	and.w	r2, r3, #15
 8010c4a:	6879      	ldr	r1, [r7, #4]
 8010c4c:	4613      	mov	r3, r2
 8010c4e:	009b      	lsls	r3, r3, #2
 8010c50:	4413      	add	r3, r2
 8010c52:	009b      	lsls	r3, r3, #2
 8010c54:	440b      	add	r3, r1
 8010c56:	3326      	adds	r3, #38	; 0x26
 8010c58:	2210      	movs	r2, #16
 8010c5a:	801a      	strh	r2, [r3, #0]
 8010c5c:	e035      	b.n	8010cca <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8010c5e:	4b42      	ldr	r3, [pc, #264]	; (8010d68 <USBD_CDC_Init+0x1e4>)
 8010c60:	7819      	ldrb	r1, [r3, #0]
 8010c62:	2340      	movs	r3, #64	; 0x40
 8010c64:	2202      	movs	r2, #2
 8010c66:	6878      	ldr	r0, [r7, #4]
 8010c68:	f002 fb6b 	bl	8013342 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8010c6c:	4b3e      	ldr	r3, [pc, #248]	; (8010d68 <USBD_CDC_Init+0x1e4>)
 8010c6e:	781b      	ldrb	r3, [r3, #0]
 8010c70:	f003 020f 	and.w	r2, r3, #15
 8010c74:	6879      	ldr	r1, [r7, #4]
 8010c76:	4613      	mov	r3, r2
 8010c78:	009b      	lsls	r3, r3, #2
 8010c7a:	4413      	add	r3, r2
 8010c7c:	009b      	lsls	r3, r3, #2
 8010c7e:	440b      	add	r3, r1
 8010c80:	3324      	adds	r3, #36	; 0x24
 8010c82:	2201      	movs	r2, #1
 8010c84:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8010c86:	4b39      	ldr	r3, [pc, #228]	; (8010d6c <USBD_CDC_Init+0x1e8>)
 8010c88:	7819      	ldrb	r1, [r3, #0]
 8010c8a:	2340      	movs	r3, #64	; 0x40
 8010c8c:	2202      	movs	r2, #2
 8010c8e:	6878      	ldr	r0, [r7, #4]
 8010c90:	f002 fb57 	bl	8013342 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8010c94:	4b35      	ldr	r3, [pc, #212]	; (8010d6c <USBD_CDC_Init+0x1e8>)
 8010c96:	781b      	ldrb	r3, [r3, #0]
 8010c98:	f003 020f 	and.w	r2, r3, #15
 8010c9c:	6879      	ldr	r1, [r7, #4]
 8010c9e:	4613      	mov	r3, r2
 8010ca0:	009b      	lsls	r3, r3, #2
 8010ca2:	4413      	add	r3, r2
 8010ca4:	009b      	lsls	r3, r3, #2
 8010ca6:	440b      	add	r3, r1
 8010ca8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8010cac:	2201      	movs	r2, #1
 8010cae:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8010cb0:	4b2f      	ldr	r3, [pc, #188]	; (8010d70 <USBD_CDC_Init+0x1ec>)
 8010cb2:	781b      	ldrb	r3, [r3, #0]
 8010cb4:	f003 020f 	and.w	r2, r3, #15
 8010cb8:	6879      	ldr	r1, [r7, #4]
 8010cba:	4613      	mov	r3, r2
 8010cbc:	009b      	lsls	r3, r3, #2
 8010cbe:	4413      	add	r3, r2
 8010cc0:	009b      	lsls	r3, r3, #2
 8010cc2:	440b      	add	r3, r1
 8010cc4:	3326      	adds	r3, #38	; 0x26
 8010cc6:	2210      	movs	r2, #16
 8010cc8:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8010cca:	4b29      	ldr	r3, [pc, #164]	; (8010d70 <USBD_CDC_Init+0x1ec>)
 8010ccc:	7819      	ldrb	r1, [r3, #0]
 8010cce:	2308      	movs	r3, #8
 8010cd0:	2203      	movs	r2, #3
 8010cd2:	6878      	ldr	r0, [r7, #4]
 8010cd4:	f002 fb35 	bl	8013342 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8010cd8:	4b25      	ldr	r3, [pc, #148]	; (8010d70 <USBD_CDC_Init+0x1ec>)
 8010cda:	781b      	ldrb	r3, [r3, #0]
 8010cdc:	f003 020f 	and.w	r2, r3, #15
 8010ce0:	6879      	ldr	r1, [r7, #4]
 8010ce2:	4613      	mov	r3, r2
 8010ce4:	009b      	lsls	r3, r3, #2
 8010ce6:	4413      	add	r3, r2
 8010ce8:	009b      	lsls	r3, r3, #2
 8010cea:	440b      	add	r3, r1
 8010cec:	3324      	adds	r3, #36	; 0x24
 8010cee:	2201      	movs	r2, #1
 8010cf0:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8010cf2:	68fb      	ldr	r3, [r7, #12]
 8010cf4:	2200      	movs	r2, #0
 8010cf6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8010cfa:	687b      	ldr	r3, [r7, #4]
 8010cfc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8010d00:	687a      	ldr	r2, [r7, #4]
 8010d02:	33b0      	adds	r3, #176	; 0xb0
 8010d04:	009b      	lsls	r3, r3, #2
 8010d06:	4413      	add	r3, r2
 8010d08:	685b      	ldr	r3, [r3, #4]
 8010d0a:	681b      	ldr	r3, [r3, #0]
 8010d0c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8010d0e:	68fb      	ldr	r3, [r7, #12]
 8010d10:	2200      	movs	r2, #0
 8010d12:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8010d16:	68fb      	ldr	r3, [r7, #12]
 8010d18:	2200      	movs	r2, #0
 8010d1a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8010d1e:	68fb      	ldr	r3, [r7, #12]
 8010d20:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8010d24:	2b00      	cmp	r3, #0
 8010d26:	d101      	bne.n	8010d2c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8010d28:	2302      	movs	r3, #2
 8010d2a:	e018      	b.n	8010d5e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010d2c:	687b      	ldr	r3, [r7, #4]
 8010d2e:	7c1b      	ldrb	r3, [r3, #16]
 8010d30:	2b00      	cmp	r3, #0
 8010d32:	d10a      	bne.n	8010d4a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8010d34:	4b0d      	ldr	r3, [pc, #52]	; (8010d6c <USBD_CDC_Init+0x1e8>)
 8010d36:	7819      	ldrb	r1, [r3, #0]
 8010d38:	68fb      	ldr	r3, [r7, #12]
 8010d3a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8010d3e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010d42:	6878      	ldr	r0, [r7, #4]
 8010d44:	f002 fbec 	bl	8013520 <USBD_LL_PrepareReceive>
 8010d48:	e008      	b.n	8010d5c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8010d4a:	4b08      	ldr	r3, [pc, #32]	; (8010d6c <USBD_CDC_Init+0x1e8>)
 8010d4c:	7819      	ldrb	r1, [r3, #0]
 8010d4e:	68fb      	ldr	r3, [r7, #12]
 8010d50:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8010d54:	2340      	movs	r3, #64	; 0x40
 8010d56:	6878      	ldr	r0, [r7, #4]
 8010d58:	f002 fbe2 	bl	8013520 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8010d5c:	2300      	movs	r3, #0
}
 8010d5e:	4618      	mov	r0, r3
 8010d60:	3710      	adds	r7, #16
 8010d62:	46bd      	mov	sp, r7
 8010d64:	bd80      	pop	{r7, pc}
 8010d66:	bf00      	nop
 8010d68:	20000117 	.word	0x20000117
 8010d6c:	20000118 	.word	0x20000118
 8010d70:	20000119 	.word	0x20000119

08010d74 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8010d74:	b580      	push	{r7, lr}
 8010d76:	b082      	sub	sp, #8
 8010d78:	af00      	add	r7, sp, #0
 8010d7a:	6078      	str	r0, [r7, #4]
 8010d7c:	460b      	mov	r3, r1
 8010d7e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8010d80:	4b3a      	ldr	r3, [pc, #232]	; (8010e6c <USBD_CDC_DeInit+0xf8>)
 8010d82:	781b      	ldrb	r3, [r3, #0]
 8010d84:	4619      	mov	r1, r3
 8010d86:	6878      	ldr	r0, [r7, #4]
 8010d88:	f002 fb01 	bl	801338e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8010d8c:	4b37      	ldr	r3, [pc, #220]	; (8010e6c <USBD_CDC_DeInit+0xf8>)
 8010d8e:	781b      	ldrb	r3, [r3, #0]
 8010d90:	f003 020f 	and.w	r2, r3, #15
 8010d94:	6879      	ldr	r1, [r7, #4]
 8010d96:	4613      	mov	r3, r2
 8010d98:	009b      	lsls	r3, r3, #2
 8010d9a:	4413      	add	r3, r2
 8010d9c:	009b      	lsls	r3, r3, #2
 8010d9e:	440b      	add	r3, r1
 8010da0:	3324      	adds	r3, #36	; 0x24
 8010da2:	2200      	movs	r2, #0
 8010da4:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8010da6:	4b32      	ldr	r3, [pc, #200]	; (8010e70 <USBD_CDC_DeInit+0xfc>)
 8010da8:	781b      	ldrb	r3, [r3, #0]
 8010daa:	4619      	mov	r1, r3
 8010dac:	6878      	ldr	r0, [r7, #4]
 8010dae:	f002 faee 	bl	801338e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8010db2:	4b2f      	ldr	r3, [pc, #188]	; (8010e70 <USBD_CDC_DeInit+0xfc>)
 8010db4:	781b      	ldrb	r3, [r3, #0]
 8010db6:	f003 020f 	and.w	r2, r3, #15
 8010dba:	6879      	ldr	r1, [r7, #4]
 8010dbc:	4613      	mov	r3, r2
 8010dbe:	009b      	lsls	r3, r3, #2
 8010dc0:	4413      	add	r3, r2
 8010dc2:	009b      	lsls	r3, r3, #2
 8010dc4:	440b      	add	r3, r1
 8010dc6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8010dca:	2200      	movs	r2, #0
 8010dcc:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8010dce:	4b29      	ldr	r3, [pc, #164]	; (8010e74 <USBD_CDC_DeInit+0x100>)
 8010dd0:	781b      	ldrb	r3, [r3, #0]
 8010dd2:	4619      	mov	r1, r3
 8010dd4:	6878      	ldr	r0, [r7, #4]
 8010dd6:	f002 fada 	bl	801338e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8010dda:	4b26      	ldr	r3, [pc, #152]	; (8010e74 <USBD_CDC_DeInit+0x100>)
 8010ddc:	781b      	ldrb	r3, [r3, #0]
 8010dde:	f003 020f 	and.w	r2, r3, #15
 8010de2:	6879      	ldr	r1, [r7, #4]
 8010de4:	4613      	mov	r3, r2
 8010de6:	009b      	lsls	r3, r3, #2
 8010de8:	4413      	add	r3, r2
 8010dea:	009b      	lsls	r3, r3, #2
 8010dec:	440b      	add	r3, r1
 8010dee:	3324      	adds	r3, #36	; 0x24
 8010df0:	2200      	movs	r2, #0
 8010df2:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8010df4:	4b1f      	ldr	r3, [pc, #124]	; (8010e74 <USBD_CDC_DeInit+0x100>)
 8010df6:	781b      	ldrb	r3, [r3, #0]
 8010df8:	f003 020f 	and.w	r2, r3, #15
 8010dfc:	6879      	ldr	r1, [r7, #4]
 8010dfe:	4613      	mov	r3, r2
 8010e00:	009b      	lsls	r3, r3, #2
 8010e02:	4413      	add	r3, r2
 8010e04:	009b      	lsls	r3, r3, #2
 8010e06:	440b      	add	r3, r1
 8010e08:	3326      	adds	r3, #38	; 0x26
 8010e0a:	2200      	movs	r2, #0
 8010e0c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8010e0e:	687b      	ldr	r3, [r7, #4]
 8010e10:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8010e14:	687b      	ldr	r3, [r7, #4]
 8010e16:	32b0      	adds	r2, #176	; 0xb0
 8010e18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010e1c:	2b00      	cmp	r3, #0
 8010e1e:	d01f      	beq.n	8010e60 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8010e20:	687b      	ldr	r3, [r7, #4]
 8010e22:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8010e26:	687a      	ldr	r2, [r7, #4]
 8010e28:	33b0      	adds	r3, #176	; 0xb0
 8010e2a:	009b      	lsls	r3, r3, #2
 8010e2c:	4413      	add	r3, r2
 8010e2e:	685b      	ldr	r3, [r3, #4]
 8010e30:	685b      	ldr	r3, [r3, #4]
 8010e32:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8010e34:	687b      	ldr	r3, [r7, #4]
 8010e36:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8010e3a:	687b      	ldr	r3, [r7, #4]
 8010e3c:	32b0      	adds	r2, #176	; 0xb0
 8010e3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010e42:	4618      	mov	r0, r3
 8010e44:	f002 fbae 	bl	80135a4 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8010e48:	687b      	ldr	r3, [r7, #4]
 8010e4a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8010e4e:	687b      	ldr	r3, [r7, #4]
 8010e50:	32b0      	adds	r2, #176	; 0xb0
 8010e52:	2100      	movs	r1, #0
 8010e54:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8010e58:	687b      	ldr	r3, [r7, #4]
 8010e5a:	2200      	movs	r2, #0
 8010e5c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8010e60:	2300      	movs	r3, #0
}
 8010e62:	4618      	mov	r0, r3
 8010e64:	3708      	adds	r7, #8
 8010e66:	46bd      	mov	sp, r7
 8010e68:	bd80      	pop	{r7, pc}
 8010e6a:	bf00      	nop
 8010e6c:	20000117 	.word	0x20000117
 8010e70:	20000118 	.word	0x20000118
 8010e74:	20000119 	.word	0x20000119

08010e78 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8010e78:	b580      	push	{r7, lr}
 8010e7a:	b086      	sub	sp, #24
 8010e7c:	af00      	add	r7, sp, #0
 8010e7e:	6078      	str	r0, [r7, #4]
 8010e80:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8010e82:	687b      	ldr	r3, [r7, #4]
 8010e84:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8010e88:	687b      	ldr	r3, [r7, #4]
 8010e8a:	32b0      	adds	r2, #176	; 0xb0
 8010e8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010e90:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8010e92:	2300      	movs	r3, #0
 8010e94:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8010e96:	2300      	movs	r3, #0
 8010e98:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8010e9a:	2300      	movs	r3, #0
 8010e9c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8010e9e:	693b      	ldr	r3, [r7, #16]
 8010ea0:	2b00      	cmp	r3, #0
 8010ea2:	d101      	bne.n	8010ea8 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8010ea4:	2303      	movs	r3, #3
 8010ea6:	e0bf      	b.n	8011028 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8010ea8:	683b      	ldr	r3, [r7, #0]
 8010eaa:	781b      	ldrb	r3, [r3, #0]
 8010eac:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8010eb0:	2b00      	cmp	r3, #0
 8010eb2:	d050      	beq.n	8010f56 <USBD_CDC_Setup+0xde>
 8010eb4:	2b20      	cmp	r3, #32
 8010eb6:	f040 80af 	bne.w	8011018 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8010eba:	683b      	ldr	r3, [r7, #0]
 8010ebc:	88db      	ldrh	r3, [r3, #6]
 8010ebe:	2b00      	cmp	r3, #0
 8010ec0:	d03a      	beq.n	8010f38 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8010ec2:	683b      	ldr	r3, [r7, #0]
 8010ec4:	781b      	ldrb	r3, [r3, #0]
 8010ec6:	b25b      	sxtb	r3, r3
 8010ec8:	2b00      	cmp	r3, #0
 8010eca:	da1b      	bge.n	8010f04 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8010ecc:	687b      	ldr	r3, [r7, #4]
 8010ece:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8010ed2:	687a      	ldr	r2, [r7, #4]
 8010ed4:	33b0      	adds	r3, #176	; 0xb0
 8010ed6:	009b      	lsls	r3, r3, #2
 8010ed8:	4413      	add	r3, r2
 8010eda:	685b      	ldr	r3, [r3, #4]
 8010edc:	689b      	ldr	r3, [r3, #8]
 8010ede:	683a      	ldr	r2, [r7, #0]
 8010ee0:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8010ee2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8010ee4:	683a      	ldr	r2, [r7, #0]
 8010ee6:	88d2      	ldrh	r2, [r2, #6]
 8010ee8:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8010eea:	683b      	ldr	r3, [r7, #0]
 8010eec:	88db      	ldrh	r3, [r3, #6]
 8010eee:	2b07      	cmp	r3, #7
 8010ef0:	bf28      	it	cs
 8010ef2:	2307      	movcs	r3, #7
 8010ef4:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8010ef6:	693b      	ldr	r3, [r7, #16]
 8010ef8:	89fa      	ldrh	r2, [r7, #14]
 8010efa:	4619      	mov	r1, r3
 8010efc:	6878      	ldr	r0, [r7, #4]
 8010efe:	f001 fd89 	bl	8012a14 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8010f02:	e090      	b.n	8011026 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8010f04:	683b      	ldr	r3, [r7, #0]
 8010f06:	785a      	ldrb	r2, [r3, #1]
 8010f08:	693b      	ldr	r3, [r7, #16]
 8010f0a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8010f0e:	683b      	ldr	r3, [r7, #0]
 8010f10:	88db      	ldrh	r3, [r3, #6]
 8010f12:	2b3f      	cmp	r3, #63	; 0x3f
 8010f14:	d803      	bhi.n	8010f1e <USBD_CDC_Setup+0xa6>
 8010f16:	683b      	ldr	r3, [r7, #0]
 8010f18:	88db      	ldrh	r3, [r3, #6]
 8010f1a:	b2da      	uxtb	r2, r3
 8010f1c:	e000      	b.n	8010f20 <USBD_CDC_Setup+0xa8>
 8010f1e:	2240      	movs	r2, #64	; 0x40
 8010f20:	693b      	ldr	r3, [r7, #16]
 8010f22:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8010f26:	6939      	ldr	r1, [r7, #16]
 8010f28:	693b      	ldr	r3, [r7, #16]
 8010f2a:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8010f2e:	461a      	mov	r2, r3
 8010f30:	6878      	ldr	r0, [r7, #4]
 8010f32:	f001 fd9b 	bl	8012a6c <USBD_CtlPrepareRx>
      break;
 8010f36:	e076      	b.n	8011026 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8010f38:	687b      	ldr	r3, [r7, #4]
 8010f3a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8010f3e:	687a      	ldr	r2, [r7, #4]
 8010f40:	33b0      	adds	r3, #176	; 0xb0
 8010f42:	009b      	lsls	r3, r3, #2
 8010f44:	4413      	add	r3, r2
 8010f46:	685b      	ldr	r3, [r3, #4]
 8010f48:	689b      	ldr	r3, [r3, #8]
 8010f4a:	683a      	ldr	r2, [r7, #0]
 8010f4c:	7850      	ldrb	r0, [r2, #1]
 8010f4e:	2200      	movs	r2, #0
 8010f50:	6839      	ldr	r1, [r7, #0]
 8010f52:	4798      	blx	r3
      break;
 8010f54:	e067      	b.n	8011026 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8010f56:	683b      	ldr	r3, [r7, #0]
 8010f58:	785b      	ldrb	r3, [r3, #1]
 8010f5a:	2b0b      	cmp	r3, #11
 8010f5c:	d851      	bhi.n	8011002 <USBD_CDC_Setup+0x18a>
 8010f5e:	a201      	add	r2, pc, #4	; (adr r2, 8010f64 <USBD_CDC_Setup+0xec>)
 8010f60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010f64:	08010f95 	.word	0x08010f95
 8010f68:	08011011 	.word	0x08011011
 8010f6c:	08011003 	.word	0x08011003
 8010f70:	08011003 	.word	0x08011003
 8010f74:	08011003 	.word	0x08011003
 8010f78:	08011003 	.word	0x08011003
 8010f7c:	08011003 	.word	0x08011003
 8010f80:	08011003 	.word	0x08011003
 8010f84:	08011003 	.word	0x08011003
 8010f88:	08011003 	.word	0x08011003
 8010f8c:	08010fbf 	.word	0x08010fbf
 8010f90:	08010fe9 	.word	0x08010fe9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010f94:	687b      	ldr	r3, [r7, #4]
 8010f96:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010f9a:	b2db      	uxtb	r3, r3
 8010f9c:	2b03      	cmp	r3, #3
 8010f9e:	d107      	bne.n	8010fb0 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8010fa0:	f107 030a 	add.w	r3, r7, #10
 8010fa4:	2202      	movs	r2, #2
 8010fa6:	4619      	mov	r1, r3
 8010fa8:	6878      	ldr	r0, [r7, #4]
 8010faa:	f001 fd33 	bl	8012a14 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8010fae:	e032      	b.n	8011016 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8010fb0:	6839      	ldr	r1, [r7, #0]
 8010fb2:	6878      	ldr	r0, [r7, #4]
 8010fb4:	f001 fcbd 	bl	8012932 <USBD_CtlError>
            ret = USBD_FAIL;
 8010fb8:	2303      	movs	r3, #3
 8010fba:	75fb      	strb	r3, [r7, #23]
          break;
 8010fbc:	e02b      	b.n	8011016 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010fbe:	687b      	ldr	r3, [r7, #4]
 8010fc0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010fc4:	b2db      	uxtb	r3, r3
 8010fc6:	2b03      	cmp	r3, #3
 8010fc8:	d107      	bne.n	8010fda <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8010fca:	f107 030d 	add.w	r3, r7, #13
 8010fce:	2201      	movs	r2, #1
 8010fd0:	4619      	mov	r1, r3
 8010fd2:	6878      	ldr	r0, [r7, #4]
 8010fd4:	f001 fd1e 	bl	8012a14 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8010fd8:	e01d      	b.n	8011016 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8010fda:	6839      	ldr	r1, [r7, #0]
 8010fdc:	6878      	ldr	r0, [r7, #4]
 8010fde:	f001 fca8 	bl	8012932 <USBD_CtlError>
            ret = USBD_FAIL;
 8010fe2:	2303      	movs	r3, #3
 8010fe4:	75fb      	strb	r3, [r7, #23]
          break;
 8010fe6:	e016      	b.n	8011016 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8010fe8:	687b      	ldr	r3, [r7, #4]
 8010fea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010fee:	b2db      	uxtb	r3, r3
 8010ff0:	2b03      	cmp	r3, #3
 8010ff2:	d00f      	beq.n	8011014 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8010ff4:	6839      	ldr	r1, [r7, #0]
 8010ff6:	6878      	ldr	r0, [r7, #4]
 8010ff8:	f001 fc9b 	bl	8012932 <USBD_CtlError>
            ret = USBD_FAIL;
 8010ffc:	2303      	movs	r3, #3
 8010ffe:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8011000:	e008      	b.n	8011014 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8011002:	6839      	ldr	r1, [r7, #0]
 8011004:	6878      	ldr	r0, [r7, #4]
 8011006:	f001 fc94 	bl	8012932 <USBD_CtlError>
          ret = USBD_FAIL;
 801100a:	2303      	movs	r3, #3
 801100c:	75fb      	strb	r3, [r7, #23]
          break;
 801100e:	e002      	b.n	8011016 <USBD_CDC_Setup+0x19e>
          break;
 8011010:	bf00      	nop
 8011012:	e008      	b.n	8011026 <USBD_CDC_Setup+0x1ae>
          break;
 8011014:	bf00      	nop
      }
      break;
 8011016:	e006      	b.n	8011026 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8011018:	6839      	ldr	r1, [r7, #0]
 801101a:	6878      	ldr	r0, [r7, #4]
 801101c:	f001 fc89 	bl	8012932 <USBD_CtlError>
      ret = USBD_FAIL;
 8011020:	2303      	movs	r3, #3
 8011022:	75fb      	strb	r3, [r7, #23]
      break;
 8011024:	bf00      	nop
  }

  return (uint8_t)ret;
 8011026:	7dfb      	ldrb	r3, [r7, #23]
}
 8011028:	4618      	mov	r0, r3
 801102a:	3718      	adds	r7, #24
 801102c:	46bd      	mov	sp, r7
 801102e:	bd80      	pop	{r7, pc}

08011030 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8011030:	b580      	push	{r7, lr}
 8011032:	b084      	sub	sp, #16
 8011034:	af00      	add	r7, sp, #0
 8011036:	6078      	str	r0, [r7, #4]
 8011038:	460b      	mov	r3, r1
 801103a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 801103c:	687b      	ldr	r3, [r7, #4]
 801103e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8011042:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8011044:	687b      	ldr	r3, [r7, #4]
 8011046:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801104a:	687b      	ldr	r3, [r7, #4]
 801104c:	32b0      	adds	r2, #176	; 0xb0
 801104e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011052:	2b00      	cmp	r3, #0
 8011054:	d101      	bne.n	801105a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8011056:	2303      	movs	r3, #3
 8011058:	e065      	b.n	8011126 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801105a:	687b      	ldr	r3, [r7, #4]
 801105c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8011060:	687b      	ldr	r3, [r7, #4]
 8011062:	32b0      	adds	r2, #176	; 0xb0
 8011064:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011068:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 801106a:	78fb      	ldrb	r3, [r7, #3]
 801106c:	f003 020f 	and.w	r2, r3, #15
 8011070:	6879      	ldr	r1, [r7, #4]
 8011072:	4613      	mov	r3, r2
 8011074:	009b      	lsls	r3, r3, #2
 8011076:	4413      	add	r3, r2
 8011078:	009b      	lsls	r3, r3, #2
 801107a:	440b      	add	r3, r1
 801107c:	3318      	adds	r3, #24
 801107e:	681b      	ldr	r3, [r3, #0]
 8011080:	2b00      	cmp	r3, #0
 8011082:	d02f      	beq.n	80110e4 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8011084:	78fb      	ldrb	r3, [r7, #3]
 8011086:	f003 020f 	and.w	r2, r3, #15
 801108a:	6879      	ldr	r1, [r7, #4]
 801108c:	4613      	mov	r3, r2
 801108e:	009b      	lsls	r3, r3, #2
 8011090:	4413      	add	r3, r2
 8011092:	009b      	lsls	r3, r3, #2
 8011094:	440b      	add	r3, r1
 8011096:	3318      	adds	r3, #24
 8011098:	681a      	ldr	r2, [r3, #0]
 801109a:	78fb      	ldrb	r3, [r7, #3]
 801109c:	f003 010f 	and.w	r1, r3, #15
 80110a0:	68f8      	ldr	r0, [r7, #12]
 80110a2:	460b      	mov	r3, r1
 80110a4:	00db      	lsls	r3, r3, #3
 80110a6:	440b      	add	r3, r1
 80110a8:	009b      	lsls	r3, r3, #2
 80110aa:	4403      	add	r3, r0
 80110ac:	331c      	adds	r3, #28
 80110ae:	681b      	ldr	r3, [r3, #0]
 80110b0:	fbb2 f1f3 	udiv	r1, r2, r3
 80110b4:	fb01 f303 	mul.w	r3, r1, r3
 80110b8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80110ba:	2b00      	cmp	r3, #0
 80110bc:	d112      	bne.n	80110e4 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80110be:	78fb      	ldrb	r3, [r7, #3]
 80110c0:	f003 020f 	and.w	r2, r3, #15
 80110c4:	6879      	ldr	r1, [r7, #4]
 80110c6:	4613      	mov	r3, r2
 80110c8:	009b      	lsls	r3, r3, #2
 80110ca:	4413      	add	r3, r2
 80110cc:	009b      	lsls	r3, r3, #2
 80110ce:	440b      	add	r3, r1
 80110d0:	3318      	adds	r3, #24
 80110d2:	2200      	movs	r2, #0
 80110d4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80110d6:	78f9      	ldrb	r1, [r7, #3]
 80110d8:	2300      	movs	r3, #0
 80110da:	2200      	movs	r2, #0
 80110dc:	6878      	ldr	r0, [r7, #4]
 80110de:	f002 f9fe 	bl	80134de <USBD_LL_Transmit>
 80110e2:	e01f      	b.n	8011124 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80110e4:	68bb      	ldr	r3, [r7, #8]
 80110e6:	2200      	movs	r2, #0
 80110e8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80110ec:	687b      	ldr	r3, [r7, #4]
 80110ee:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80110f2:	687a      	ldr	r2, [r7, #4]
 80110f4:	33b0      	adds	r3, #176	; 0xb0
 80110f6:	009b      	lsls	r3, r3, #2
 80110f8:	4413      	add	r3, r2
 80110fa:	685b      	ldr	r3, [r3, #4]
 80110fc:	691b      	ldr	r3, [r3, #16]
 80110fe:	2b00      	cmp	r3, #0
 8011100:	d010      	beq.n	8011124 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8011102:	687b      	ldr	r3, [r7, #4]
 8011104:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8011108:	687a      	ldr	r2, [r7, #4]
 801110a:	33b0      	adds	r3, #176	; 0xb0
 801110c:	009b      	lsls	r3, r3, #2
 801110e:	4413      	add	r3, r2
 8011110:	685b      	ldr	r3, [r3, #4]
 8011112:	691b      	ldr	r3, [r3, #16]
 8011114:	68ba      	ldr	r2, [r7, #8]
 8011116:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 801111a:	68ba      	ldr	r2, [r7, #8]
 801111c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8011120:	78fa      	ldrb	r2, [r7, #3]
 8011122:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8011124:	2300      	movs	r3, #0
}
 8011126:	4618      	mov	r0, r3
 8011128:	3710      	adds	r7, #16
 801112a:	46bd      	mov	sp, r7
 801112c:	bd80      	pop	{r7, pc}

0801112e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801112e:	b580      	push	{r7, lr}
 8011130:	b084      	sub	sp, #16
 8011132:	af00      	add	r7, sp, #0
 8011134:	6078      	str	r0, [r7, #4]
 8011136:	460b      	mov	r3, r1
 8011138:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801113a:	687b      	ldr	r3, [r7, #4]
 801113c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8011140:	687b      	ldr	r3, [r7, #4]
 8011142:	32b0      	adds	r2, #176	; 0xb0
 8011144:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011148:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 801114a:	687b      	ldr	r3, [r7, #4]
 801114c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8011150:	687b      	ldr	r3, [r7, #4]
 8011152:	32b0      	adds	r2, #176	; 0xb0
 8011154:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011158:	2b00      	cmp	r3, #0
 801115a:	d101      	bne.n	8011160 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 801115c:	2303      	movs	r3, #3
 801115e:	e01a      	b.n	8011196 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8011160:	78fb      	ldrb	r3, [r7, #3]
 8011162:	4619      	mov	r1, r3
 8011164:	6878      	ldr	r0, [r7, #4]
 8011166:	f002 f9fc 	bl	8013562 <USBD_LL_GetRxDataSize>
 801116a:	4602      	mov	r2, r0
 801116c:	68fb      	ldr	r3, [r7, #12]
 801116e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8011172:	687b      	ldr	r3, [r7, #4]
 8011174:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8011178:	687a      	ldr	r2, [r7, #4]
 801117a:	33b0      	adds	r3, #176	; 0xb0
 801117c:	009b      	lsls	r3, r3, #2
 801117e:	4413      	add	r3, r2
 8011180:	685b      	ldr	r3, [r3, #4]
 8011182:	68db      	ldr	r3, [r3, #12]
 8011184:	68fa      	ldr	r2, [r7, #12]
 8011186:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 801118a:	68fa      	ldr	r2, [r7, #12]
 801118c:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8011190:	4611      	mov	r1, r2
 8011192:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8011194:	2300      	movs	r3, #0
}
 8011196:	4618      	mov	r0, r3
 8011198:	3710      	adds	r7, #16
 801119a:	46bd      	mov	sp, r7
 801119c:	bd80      	pop	{r7, pc}

0801119e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 801119e:	b580      	push	{r7, lr}
 80111a0:	b084      	sub	sp, #16
 80111a2:	af00      	add	r7, sp, #0
 80111a4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80111a6:	687b      	ldr	r3, [r7, #4]
 80111a8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80111ac:	687b      	ldr	r3, [r7, #4]
 80111ae:	32b0      	adds	r2, #176	; 0xb0
 80111b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80111b4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80111b6:	68fb      	ldr	r3, [r7, #12]
 80111b8:	2b00      	cmp	r3, #0
 80111ba:	d101      	bne.n	80111c0 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80111bc:	2303      	movs	r3, #3
 80111be:	e025      	b.n	801120c <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80111c0:	687b      	ldr	r3, [r7, #4]
 80111c2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80111c6:	687a      	ldr	r2, [r7, #4]
 80111c8:	33b0      	adds	r3, #176	; 0xb0
 80111ca:	009b      	lsls	r3, r3, #2
 80111cc:	4413      	add	r3, r2
 80111ce:	685b      	ldr	r3, [r3, #4]
 80111d0:	2b00      	cmp	r3, #0
 80111d2:	d01a      	beq.n	801120a <USBD_CDC_EP0_RxReady+0x6c>
 80111d4:	68fb      	ldr	r3, [r7, #12]
 80111d6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80111da:	2bff      	cmp	r3, #255	; 0xff
 80111dc:	d015      	beq.n	801120a <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80111de:	687b      	ldr	r3, [r7, #4]
 80111e0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80111e4:	687a      	ldr	r2, [r7, #4]
 80111e6:	33b0      	adds	r3, #176	; 0xb0
 80111e8:	009b      	lsls	r3, r3, #2
 80111ea:	4413      	add	r3, r2
 80111ec:	685b      	ldr	r3, [r3, #4]
 80111ee:	689b      	ldr	r3, [r3, #8]
 80111f0:	68fa      	ldr	r2, [r7, #12]
 80111f2:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 80111f6:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80111f8:	68fa      	ldr	r2, [r7, #12]
 80111fa:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80111fe:	b292      	uxth	r2, r2
 8011200:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8011202:	68fb      	ldr	r3, [r7, #12]
 8011204:	22ff      	movs	r2, #255	; 0xff
 8011206:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 801120a:	2300      	movs	r3, #0
}
 801120c:	4618      	mov	r0, r3
 801120e:	3710      	adds	r7, #16
 8011210:	46bd      	mov	sp, r7
 8011212:	bd80      	pop	{r7, pc}

08011214 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8011214:	b580      	push	{r7, lr}
 8011216:	b086      	sub	sp, #24
 8011218:	af00      	add	r7, sp, #0
 801121a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 801121c:	2182      	movs	r1, #130	; 0x82
 801121e:	4818      	ldr	r0, [pc, #96]	; (8011280 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8011220:	f000 fd4f 	bl	8011cc2 <USBD_GetEpDesc>
 8011224:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8011226:	2101      	movs	r1, #1
 8011228:	4815      	ldr	r0, [pc, #84]	; (8011280 <USBD_CDC_GetFSCfgDesc+0x6c>)
 801122a:	f000 fd4a 	bl	8011cc2 <USBD_GetEpDesc>
 801122e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8011230:	2181      	movs	r1, #129	; 0x81
 8011232:	4813      	ldr	r0, [pc, #76]	; (8011280 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8011234:	f000 fd45 	bl	8011cc2 <USBD_GetEpDesc>
 8011238:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 801123a:	697b      	ldr	r3, [r7, #20]
 801123c:	2b00      	cmp	r3, #0
 801123e:	d002      	beq.n	8011246 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8011240:	697b      	ldr	r3, [r7, #20]
 8011242:	2210      	movs	r2, #16
 8011244:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8011246:	693b      	ldr	r3, [r7, #16]
 8011248:	2b00      	cmp	r3, #0
 801124a:	d006      	beq.n	801125a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 801124c:	693b      	ldr	r3, [r7, #16]
 801124e:	2200      	movs	r2, #0
 8011250:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8011254:	711a      	strb	r2, [r3, #4]
 8011256:	2200      	movs	r2, #0
 8011258:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 801125a:	68fb      	ldr	r3, [r7, #12]
 801125c:	2b00      	cmp	r3, #0
 801125e:	d006      	beq.n	801126e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8011260:	68fb      	ldr	r3, [r7, #12]
 8011262:	2200      	movs	r2, #0
 8011264:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8011268:	711a      	strb	r2, [r3, #4]
 801126a:	2200      	movs	r2, #0
 801126c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 801126e:	687b      	ldr	r3, [r7, #4]
 8011270:	2243      	movs	r2, #67	; 0x43
 8011272:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8011274:	4b02      	ldr	r3, [pc, #8]	; (8011280 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8011276:	4618      	mov	r0, r3
 8011278:	3718      	adds	r7, #24
 801127a:	46bd      	mov	sp, r7
 801127c:	bd80      	pop	{r7, pc}
 801127e:	bf00      	nop
 8011280:	200000d4 	.word	0x200000d4

08011284 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8011284:	b580      	push	{r7, lr}
 8011286:	b086      	sub	sp, #24
 8011288:	af00      	add	r7, sp, #0
 801128a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 801128c:	2182      	movs	r1, #130	; 0x82
 801128e:	4818      	ldr	r0, [pc, #96]	; (80112f0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8011290:	f000 fd17 	bl	8011cc2 <USBD_GetEpDesc>
 8011294:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8011296:	2101      	movs	r1, #1
 8011298:	4815      	ldr	r0, [pc, #84]	; (80112f0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 801129a:	f000 fd12 	bl	8011cc2 <USBD_GetEpDesc>
 801129e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80112a0:	2181      	movs	r1, #129	; 0x81
 80112a2:	4813      	ldr	r0, [pc, #76]	; (80112f0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80112a4:	f000 fd0d 	bl	8011cc2 <USBD_GetEpDesc>
 80112a8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80112aa:	697b      	ldr	r3, [r7, #20]
 80112ac:	2b00      	cmp	r3, #0
 80112ae:	d002      	beq.n	80112b6 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80112b0:	697b      	ldr	r3, [r7, #20]
 80112b2:	2210      	movs	r2, #16
 80112b4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80112b6:	693b      	ldr	r3, [r7, #16]
 80112b8:	2b00      	cmp	r3, #0
 80112ba:	d006      	beq.n	80112ca <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80112bc:	693b      	ldr	r3, [r7, #16]
 80112be:	2200      	movs	r2, #0
 80112c0:	711a      	strb	r2, [r3, #4]
 80112c2:	2200      	movs	r2, #0
 80112c4:	f042 0202 	orr.w	r2, r2, #2
 80112c8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80112ca:	68fb      	ldr	r3, [r7, #12]
 80112cc:	2b00      	cmp	r3, #0
 80112ce:	d006      	beq.n	80112de <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80112d0:	68fb      	ldr	r3, [r7, #12]
 80112d2:	2200      	movs	r2, #0
 80112d4:	711a      	strb	r2, [r3, #4]
 80112d6:	2200      	movs	r2, #0
 80112d8:	f042 0202 	orr.w	r2, r2, #2
 80112dc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80112de:	687b      	ldr	r3, [r7, #4]
 80112e0:	2243      	movs	r2, #67	; 0x43
 80112e2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80112e4:	4b02      	ldr	r3, [pc, #8]	; (80112f0 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80112e6:	4618      	mov	r0, r3
 80112e8:	3718      	adds	r7, #24
 80112ea:	46bd      	mov	sp, r7
 80112ec:	bd80      	pop	{r7, pc}
 80112ee:	bf00      	nop
 80112f0:	200000d4 	.word	0x200000d4

080112f4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80112f4:	b580      	push	{r7, lr}
 80112f6:	b086      	sub	sp, #24
 80112f8:	af00      	add	r7, sp, #0
 80112fa:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80112fc:	2182      	movs	r1, #130	; 0x82
 80112fe:	4818      	ldr	r0, [pc, #96]	; (8011360 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8011300:	f000 fcdf 	bl	8011cc2 <USBD_GetEpDesc>
 8011304:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8011306:	2101      	movs	r1, #1
 8011308:	4815      	ldr	r0, [pc, #84]	; (8011360 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 801130a:	f000 fcda 	bl	8011cc2 <USBD_GetEpDesc>
 801130e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8011310:	2181      	movs	r1, #129	; 0x81
 8011312:	4813      	ldr	r0, [pc, #76]	; (8011360 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8011314:	f000 fcd5 	bl	8011cc2 <USBD_GetEpDesc>
 8011318:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 801131a:	697b      	ldr	r3, [r7, #20]
 801131c:	2b00      	cmp	r3, #0
 801131e:	d002      	beq.n	8011326 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8011320:	697b      	ldr	r3, [r7, #20]
 8011322:	2210      	movs	r2, #16
 8011324:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8011326:	693b      	ldr	r3, [r7, #16]
 8011328:	2b00      	cmp	r3, #0
 801132a:	d006      	beq.n	801133a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 801132c:	693b      	ldr	r3, [r7, #16]
 801132e:	2200      	movs	r2, #0
 8011330:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8011334:	711a      	strb	r2, [r3, #4]
 8011336:	2200      	movs	r2, #0
 8011338:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 801133a:	68fb      	ldr	r3, [r7, #12]
 801133c:	2b00      	cmp	r3, #0
 801133e:	d006      	beq.n	801134e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8011340:	68fb      	ldr	r3, [r7, #12]
 8011342:	2200      	movs	r2, #0
 8011344:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8011348:	711a      	strb	r2, [r3, #4]
 801134a:	2200      	movs	r2, #0
 801134c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 801134e:	687b      	ldr	r3, [r7, #4]
 8011350:	2243      	movs	r2, #67	; 0x43
 8011352:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8011354:	4b02      	ldr	r3, [pc, #8]	; (8011360 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8011356:	4618      	mov	r0, r3
 8011358:	3718      	adds	r7, #24
 801135a:	46bd      	mov	sp, r7
 801135c:	bd80      	pop	{r7, pc}
 801135e:	bf00      	nop
 8011360:	200000d4 	.word	0x200000d4

08011364 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8011364:	b480      	push	{r7}
 8011366:	b083      	sub	sp, #12
 8011368:	af00      	add	r7, sp, #0
 801136a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 801136c:	687b      	ldr	r3, [r7, #4]
 801136e:	220a      	movs	r2, #10
 8011370:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8011372:	4b03      	ldr	r3, [pc, #12]	; (8011380 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8011374:	4618      	mov	r0, r3
 8011376:	370c      	adds	r7, #12
 8011378:	46bd      	mov	sp, r7
 801137a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801137e:	4770      	bx	lr
 8011380:	20000090 	.word	0x20000090

08011384 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8011384:	b480      	push	{r7}
 8011386:	b083      	sub	sp, #12
 8011388:	af00      	add	r7, sp, #0
 801138a:	6078      	str	r0, [r7, #4]
 801138c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 801138e:	683b      	ldr	r3, [r7, #0]
 8011390:	2b00      	cmp	r3, #0
 8011392:	d101      	bne.n	8011398 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8011394:	2303      	movs	r3, #3
 8011396:	e009      	b.n	80113ac <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8011398:	687b      	ldr	r3, [r7, #4]
 801139a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801139e:	687a      	ldr	r2, [r7, #4]
 80113a0:	33b0      	adds	r3, #176	; 0xb0
 80113a2:	009b      	lsls	r3, r3, #2
 80113a4:	4413      	add	r3, r2
 80113a6:	683a      	ldr	r2, [r7, #0]
 80113a8:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80113aa:	2300      	movs	r3, #0
}
 80113ac:	4618      	mov	r0, r3
 80113ae:	370c      	adds	r7, #12
 80113b0:	46bd      	mov	sp, r7
 80113b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113b6:	4770      	bx	lr

080113b8 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80113b8:	b480      	push	{r7}
 80113ba:	b087      	sub	sp, #28
 80113bc:	af00      	add	r7, sp, #0
 80113be:	60f8      	str	r0, [r7, #12]
 80113c0:	60b9      	str	r1, [r7, #8]
 80113c2:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80113c4:	68fb      	ldr	r3, [r7, #12]
 80113c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80113ca:	68fb      	ldr	r3, [r7, #12]
 80113cc:	32b0      	adds	r2, #176	; 0xb0
 80113ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80113d2:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80113d4:	697b      	ldr	r3, [r7, #20]
 80113d6:	2b00      	cmp	r3, #0
 80113d8:	d101      	bne.n	80113de <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80113da:	2303      	movs	r3, #3
 80113dc:	e008      	b.n	80113f0 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80113de:	697b      	ldr	r3, [r7, #20]
 80113e0:	68ba      	ldr	r2, [r7, #8]
 80113e2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80113e6:	697b      	ldr	r3, [r7, #20]
 80113e8:	687a      	ldr	r2, [r7, #4]
 80113ea:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80113ee:	2300      	movs	r3, #0
}
 80113f0:	4618      	mov	r0, r3
 80113f2:	371c      	adds	r7, #28
 80113f4:	46bd      	mov	sp, r7
 80113f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113fa:	4770      	bx	lr

080113fc <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80113fc:	b480      	push	{r7}
 80113fe:	b085      	sub	sp, #20
 8011400:	af00      	add	r7, sp, #0
 8011402:	6078      	str	r0, [r7, #4]
 8011404:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8011406:	687b      	ldr	r3, [r7, #4]
 8011408:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801140c:	687b      	ldr	r3, [r7, #4]
 801140e:	32b0      	adds	r2, #176	; 0xb0
 8011410:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011414:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8011416:	68fb      	ldr	r3, [r7, #12]
 8011418:	2b00      	cmp	r3, #0
 801141a:	d101      	bne.n	8011420 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 801141c:	2303      	movs	r3, #3
 801141e:	e004      	b.n	801142a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8011420:	68fb      	ldr	r3, [r7, #12]
 8011422:	683a      	ldr	r2, [r7, #0]
 8011424:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8011428:	2300      	movs	r3, #0
}
 801142a:	4618      	mov	r0, r3
 801142c:	3714      	adds	r7, #20
 801142e:	46bd      	mov	sp, r7
 8011430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011434:	4770      	bx	lr
	...

08011438 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8011438:	b580      	push	{r7, lr}
 801143a:	b084      	sub	sp, #16
 801143c:	af00      	add	r7, sp, #0
 801143e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8011440:	687b      	ldr	r3, [r7, #4]
 8011442:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8011446:	687b      	ldr	r3, [r7, #4]
 8011448:	32b0      	adds	r2, #176	; 0xb0
 801144a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801144e:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8011450:	2301      	movs	r3, #1
 8011452:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8011454:	68bb      	ldr	r3, [r7, #8]
 8011456:	2b00      	cmp	r3, #0
 8011458:	d101      	bne.n	801145e <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 801145a:	2303      	movs	r3, #3
 801145c:	e025      	b.n	80114aa <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 801145e:	68bb      	ldr	r3, [r7, #8]
 8011460:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8011464:	2b00      	cmp	r3, #0
 8011466:	d11f      	bne.n	80114a8 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8011468:	68bb      	ldr	r3, [r7, #8]
 801146a:	2201      	movs	r2, #1
 801146c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8011470:	4b10      	ldr	r3, [pc, #64]	; (80114b4 <USBD_CDC_TransmitPacket+0x7c>)
 8011472:	781b      	ldrb	r3, [r3, #0]
 8011474:	f003 020f 	and.w	r2, r3, #15
 8011478:	68bb      	ldr	r3, [r7, #8]
 801147a:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 801147e:	6878      	ldr	r0, [r7, #4]
 8011480:	4613      	mov	r3, r2
 8011482:	009b      	lsls	r3, r3, #2
 8011484:	4413      	add	r3, r2
 8011486:	009b      	lsls	r3, r3, #2
 8011488:	4403      	add	r3, r0
 801148a:	3318      	adds	r3, #24
 801148c:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 801148e:	4b09      	ldr	r3, [pc, #36]	; (80114b4 <USBD_CDC_TransmitPacket+0x7c>)
 8011490:	7819      	ldrb	r1, [r3, #0]
 8011492:	68bb      	ldr	r3, [r7, #8]
 8011494:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8011498:	68bb      	ldr	r3, [r7, #8]
 801149a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 801149e:	6878      	ldr	r0, [r7, #4]
 80114a0:	f002 f81d 	bl	80134de <USBD_LL_Transmit>

    ret = USBD_OK;
 80114a4:	2300      	movs	r3, #0
 80114a6:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80114a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80114aa:	4618      	mov	r0, r3
 80114ac:	3710      	adds	r7, #16
 80114ae:	46bd      	mov	sp, r7
 80114b0:	bd80      	pop	{r7, pc}
 80114b2:	bf00      	nop
 80114b4:	20000117 	.word	0x20000117

080114b8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80114b8:	b580      	push	{r7, lr}
 80114ba:	b084      	sub	sp, #16
 80114bc:	af00      	add	r7, sp, #0
 80114be:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80114c0:	687b      	ldr	r3, [r7, #4]
 80114c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80114c6:	687b      	ldr	r3, [r7, #4]
 80114c8:	32b0      	adds	r2, #176	; 0xb0
 80114ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80114ce:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80114d0:	687b      	ldr	r3, [r7, #4]
 80114d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80114d6:	687b      	ldr	r3, [r7, #4]
 80114d8:	32b0      	adds	r2, #176	; 0xb0
 80114da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80114de:	2b00      	cmp	r3, #0
 80114e0:	d101      	bne.n	80114e6 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80114e2:	2303      	movs	r3, #3
 80114e4:	e018      	b.n	8011518 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80114e6:	687b      	ldr	r3, [r7, #4]
 80114e8:	7c1b      	ldrb	r3, [r3, #16]
 80114ea:	2b00      	cmp	r3, #0
 80114ec:	d10a      	bne.n	8011504 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80114ee:	4b0c      	ldr	r3, [pc, #48]	; (8011520 <USBD_CDC_ReceivePacket+0x68>)
 80114f0:	7819      	ldrb	r1, [r3, #0]
 80114f2:	68fb      	ldr	r3, [r7, #12]
 80114f4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80114f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80114fc:	6878      	ldr	r0, [r7, #4]
 80114fe:	f002 f80f 	bl	8013520 <USBD_LL_PrepareReceive>
 8011502:	e008      	b.n	8011516 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8011504:	4b06      	ldr	r3, [pc, #24]	; (8011520 <USBD_CDC_ReceivePacket+0x68>)
 8011506:	7819      	ldrb	r1, [r3, #0]
 8011508:	68fb      	ldr	r3, [r7, #12]
 801150a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 801150e:	2340      	movs	r3, #64	; 0x40
 8011510:	6878      	ldr	r0, [r7, #4]
 8011512:	f002 f805 	bl	8013520 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8011516:	2300      	movs	r3, #0
}
 8011518:	4618      	mov	r0, r3
 801151a:	3710      	adds	r7, #16
 801151c:	46bd      	mov	sp, r7
 801151e:	bd80      	pop	{r7, pc}
 8011520:	20000118 	.word	0x20000118

08011524 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8011524:	b580      	push	{r7, lr}
 8011526:	b086      	sub	sp, #24
 8011528:	af00      	add	r7, sp, #0
 801152a:	60f8      	str	r0, [r7, #12]
 801152c:	60b9      	str	r1, [r7, #8]
 801152e:	4613      	mov	r3, r2
 8011530:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8011532:	68fb      	ldr	r3, [r7, #12]
 8011534:	2b00      	cmp	r3, #0
 8011536:	d101      	bne.n	801153c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8011538:	2303      	movs	r3, #3
 801153a:	e01f      	b.n	801157c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 801153c:	68fb      	ldr	r3, [r7, #12]
 801153e:	2200      	movs	r2, #0
 8011540:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8011544:	68fb      	ldr	r3, [r7, #12]
 8011546:	2200      	movs	r2, #0
 8011548:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 801154c:	68fb      	ldr	r3, [r7, #12]
 801154e:	2200      	movs	r2, #0
 8011550:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8011554:	68bb      	ldr	r3, [r7, #8]
 8011556:	2b00      	cmp	r3, #0
 8011558:	d003      	beq.n	8011562 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 801155a:	68fb      	ldr	r3, [r7, #12]
 801155c:	68ba      	ldr	r2, [r7, #8]
 801155e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8011562:	68fb      	ldr	r3, [r7, #12]
 8011564:	2201      	movs	r2, #1
 8011566:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 801156a:	68fb      	ldr	r3, [r7, #12]
 801156c:	79fa      	ldrb	r2, [r7, #7]
 801156e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8011570:	68f8      	ldr	r0, [r7, #12]
 8011572:	f001 fe7f 	bl	8013274 <USBD_LL_Init>
 8011576:	4603      	mov	r3, r0
 8011578:	75fb      	strb	r3, [r7, #23]

  return ret;
 801157a:	7dfb      	ldrb	r3, [r7, #23]
}
 801157c:	4618      	mov	r0, r3
 801157e:	3718      	adds	r7, #24
 8011580:	46bd      	mov	sp, r7
 8011582:	bd80      	pop	{r7, pc}

08011584 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8011584:	b580      	push	{r7, lr}
 8011586:	b084      	sub	sp, #16
 8011588:	af00      	add	r7, sp, #0
 801158a:	6078      	str	r0, [r7, #4]
 801158c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801158e:	2300      	movs	r3, #0
 8011590:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8011592:	683b      	ldr	r3, [r7, #0]
 8011594:	2b00      	cmp	r3, #0
 8011596:	d101      	bne.n	801159c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8011598:	2303      	movs	r3, #3
 801159a:	e025      	b.n	80115e8 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 801159c:	687b      	ldr	r3, [r7, #4]
 801159e:	683a      	ldr	r2, [r7, #0]
 80115a0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80115a4:	687b      	ldr	r3, [r7, #4]
 80115a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80115aa:	687b      	ldr	r3, [r7, #4]
 80115ac:	32ae      	adds	r2, #174	; 0xae
 80115ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80115b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80115b4:	2b00      	cmp	r3, #0
 80115b6:	d00f      	beq.n	80115d8 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80115b8:	687b      	ldr	r3, [r7, #4]
 80115ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80115be:	687b      	ldr	r3, [r7, #4]
 80115c0:	32ae      	adds	r2, #174	; 0xae
 80115c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80115c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80115c8:	f107 020e 	add.w	r2, r7, #14
 80115cc:	4610      	mov	r0, r2
 80115ce:	4798      	blx	r3
 80115d0:	4602      	mov	r2, r0
 80115d2:	687b      	ldr	r3, [r7, #4]
 80115d4:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 80115d8:	687b      	ldr	r3, [r7, #4]
 80115da:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80115de:	1c5a      	adds	r2, r3, #1
 80115e0:	687b      	ldr	r3, [r7, #4]
 80115e2:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 80115e6:	2300      	movs	r3, #0
}
 80115e8:	4618      	mov	r0, r3
 80115ea:	3710      	adds	r7, #16
 80115ec:	46bd      	mov	sp, r7
 80115ee:	bd80      	pop	{r7, pc}

080115f0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80115f0:	b580      	push	{r7, lr}
 80115f2:	b082      	sub	sp, #8
 80115f4:	af00      	add	r7, sp, #0
 80115f6:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80115f8:	6878      	ldr	r0, [r7, #4]
 80115fa:	f001 fe87 	bl	801330c <USBD_LL_Start>
 80115fe:	4603      	mov	r3, r0
}
 8011600:	4618      	mov	r0, r3
 8011602:	3708      	adds	r7, #8
 8011604:	46bd      	mov	sp, r7
 8011606:	bd80      	pop	{r7, pc}

08011608 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8011608:	b480      	push	{r7}
 801160a:	b083      	sub	sp, #12
 801160c:	af00      	add	r7, sp, #0
 801160e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8011610:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8011612:	4618      	mov	r0, r3
 8011614:	370c      	adds	r7, #12
 8011616:	46bd      	mov	sp, r7
 8011618:	f85d 7b04 	ldr.w	r7, [sp], #4
 801161c:	4770      	bx	lr

0801161e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801161e:	b580      	push	{r7, lr}
 8011620:	b084      	sub	sp, #16
 8011622:	af00      	add	r7, sp, #0
 8011624:	6078      	str	r0, [r7, #4]
 8011626:	460b      	mov	r3, r1
 8011628:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 801162a:	2300      	movs	r3, #0
 801162c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 801162e:	687b      	ldr	r3, [r7, #4]
 8011630:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011634:	2b00      	cmp	r3, #0
 8011636:	d009      	beq.n	801164c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8011638:	687b      	ldr	r3, [r7, #4]
 801163a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801163e:	681b      	ldr	r3, [r3, #0]
 8011640:	78fa      	ldrb	r2, [r7, #3]
 8011642:	4611      	mov	r1, r2
 8011644:	6878      	ldr	r0, [r7, #4]
 8011646:	4798      	blx	r3
 8011648:	4603      	mov	r3, r0
 801164a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 801164c:	7bfb      	ldrb	r3, [r7, #15]
}
 801164e:	4618      	mov	r0, r3
 8011650:	3710      	adds	r7, #16
 8011652:	46bd      	mov	sp, r7
 8011654:	bd80      	pop	{r7, pc}

08011656 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8011656:	b580      	push	{r7, lr}
 8011658:	b084      	sub	sp, #16
 801165a:	af00      	add	r7, sp, #0
 801165c:	6078      	str	r0, [r7, #4]
 801165e:	460b      	mov	r3, r1
 8011660:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8011662:	2300      	movs	r3, #0
 8011664:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8011666:	687b      	ldr	r3, [r7, #4]
 8011668:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801166c:	685b      	ldr	r3, [r3, #4]
 801166e:	78fa      	ldrb	r2, [r7, #3]
 8011670:	4611      	mov	r1, r2
 8011672:	6878      	ldr	r0, [r7, #4]
 8011674:	4798      	blx	r3
 8011676:	4603      	mov	r3, r0
 8011678:	2b00      	cmp	r3, #0
 801167a:	d001      	beq.n	8011680 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 801167c:	2303      	movs	r3, #3
 801167e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8011680:	7bfb      	ldrb	r3, [r7, #15]
}
 8011682:	4618      	mov	r0, r3
 8011684:	3710      	adds	r7, #16
 8011686:	46bd      	mov	sp, r7
 8011688:	bd80      	pop	{r7, pc}

0801168a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 801168a:	b580      	push	{r7, lr}
 801168c:	b084      	sub	sp, #16
 801168e:	af00      	add	r7, sp, #0
 8011690:	6078      	str	r0, [r7, #4]
 8011692:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8011694:	687b      	ldr	r3, [r7, #4]
 8011696:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801169a:	6839      	ldr	r1, [r7, #0]
 801169c:	4618      	mov	r0, r3
 801169e:	f001 f90e 	bl	80128be <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80116a2:	687b      	ldr	r3, [r7, #4]
 80116a4:	2201      	movs	r2, #1
 80116a6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80116aa:	687b      	ldr	r3, [r7, #4]
 80116ac:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80116b0:	461a      	mov	r2, r3
 80116b2:	687b      	ldr	r3, [r7, #4]
 80116b4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80116b8:	687b      	ldr	r3, [r7, #4]
 80116ba:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80116be:	f003 031f 	and.w	r3, r3, #31
 80116c2:	2b02      	cmp	r3, #2
 80116c4:	d01a      	beq.n	80116fc <USBD_LL_SetupStage+0x72>
 80116c6:	2b02      	cmp	r3, #2
 80116c8:	d822      	bhi.n	8011710 <USBD_LL_SetupStage+0x86>
 80116ca:	2b00      	cmp	r3, #0
 80116cc:	d002      	beq.n	80116d4 <USBD_LL_SetupStage+0x4a>
 80116ce:	2b01      	cmp	r3, #1
 80116d0:	d00a      	beq.n	80116e8 <USBD_LL_SetupStage+0x5e>
 80116d2:	e01d      	b.n	8011710 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80116d4:	687b      	ldr	r3, [r7, #4]
 80116d6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80116da:	4619      	mov	r1, r3
 80116dc:	6878      	ldr	r0, [r7, #4]
 80116de:	f000 fb65 	bl	8011dac <USBD_StdDevReq>
 80116e2:	4603      	mov	r3, r0
 80116e4:	73fb      	strb	r3, [r7, #15]
      break;
 80116e6:	e020      	b.n	801172a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80116e8:	687b      	ldr	r3, [r7, #4]
 80116ea:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80116ee:	4619      	mov	r1, r3
 80116f0:	6878      	ldr	r0, [r7, #4]
 80116f2:	f000 fbcd 	bl	8011e90 <USBD_StdItfReq>
 80116f6:	4603      	mov	r3, r0
 80116f8:	73fb      	strb	r3, [r7, #15]
      break;
 80116fa:	e016      	b.n	801172a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80116fc:	687b      	ldr	r3, [r7, #4]
 80116fe:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8011702:	4619      	mov	r1, r3
 8011704:	6878      	ldr	r0, [r7, #4]
 8011706:	f000 fc2f 	bl	8011f68 <USBD_StdEPReq>
 801170a:	4603      	mov	r3, r0
 801170c:	73fb      	strb	r3, [r7, #15]
      break;
 801170e:	e00c      	b.n	801172a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8011710:	687b      	ldr	r3, [r7, #4]
 8011712:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8011716:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 801171a:	b2db      	uxtb	r3, r3
 801171c:	4619      	mov	r1, r3
 801171e:	6878      	ldr	r0, [r7, #4]
 8011720:	f001 fe54 	bl	80133cc <USBD_LL_StallEP>
 8011724:	4603      	mov	r3, r0
 8011726:	73fb      	strb	r3, [r7, #15]
      break;
 8011728:	bf00      	nop
  }

  return ret;
 801172a:	7bfb      	ldrb	r3, [r7, #15]
}
 801172c:	4618      	mov	r0, r3
 801172e:	3710      	adds	r7, #16
 8011730:	46bd      	mov	sp, r7
 8011732:	bd80      	pop	{r7, pc}

08011734 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8011734:	b580      	push	{r7, lr}
 8011736:	b086      	sub	sp, #24
 8011738:	af00      	add	r7, sp, #0
 801173a:	60f8      	str	r0, [r7, #12]
 801173c:	460b      	mov	r3, r1
 801173e:	607a      	str	r2, [r7, #4]
 8011740:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8011742:	2300      	movs	r3, #0
 8011744:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8011746:	7afb      	ldrb	r3, [r7, #11]
 8011748:	2b00      	cmp	r3, #0
 801174a:	d16e      	bne.n	801182a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 801174c:	68fb      	ldr	r3, [r7, #12]
 801174e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8011752:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8011754:	68fb      	ldr	r3, [r7, #12]
 8011756:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 801175a:	2b03      	cmp	r3, #3
 801175c:	f040 8098 	bne.w	8011890 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8011760:	693b      	ldr	r3, [r7, #16]
 8011762:	689a      	ldr	r2, [r3, #8]
 8011764:	693b      	ldr	r3, [r7, #16]
 8011766:	68db      	ldr	r3, [r3, #12]
 8011768:	429a      	cmp	r2, r3
 801176a:	d913      	bls.n	8011794 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 801176c:	693b      	ldr	r3, [r7, #16]
 801176e:	689a      	ldr	r2, [r3, #8]
 8011770:	693b      	ldr	r3, [r7, #16]
 8011772:	68db      	ldr	r3, [r3, #12]
 8011774:	1ad2      	subs	r2, r2, r3
 8011776:	693b      	ldr	r3, [r7, #16]
 8011778:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 801177a:	693b      	ldr	r3, [r7, #16]
 801177c:	68da      	ldr	r2, [r3, #12]
 801177e:	693b      	ldr	r3, [r7, #16]
 8011780:	689b      	ldr	r3, [r3, #8]
 8011782:	4293      	cmp	r3, r2
 8011784:	bf28      	it	cs
 8011786:	4613      	movcs	r3, r2
 8011788:	461a      	mov	r2, r3
 801178a:	6879      	ldr	r1, [r7, #4]
 801178c:	68f8      	ldr	r0, [r7, #12]
 801178e:	f001 f98a 	bl	8012aa6 <USBD_CtlContinueRx>
 8011792:	e07d      	b.n	8011890 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8011794:	68fb      	ldr	r3, [r7, #12]
 8011796:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 801179a:	f003 031f 	and.w	r3, r3, #31
 801179e:	2b02      	cmp	r3, #2
 80117a0:	d014      	beq.n	80117cc <USBD_LL_DataOutStage+0x98>
 80117a2:	2b02      	cmp	r3, #2
 80117a4:	d81d      	bhi.n	80117e2 <USBD_LL_DataOutStage+0xae>
 80117a6:	2b00      	cmp	r3, #0
 80117a8:	d002      	beq.n	80117b0 <USBD_LL_DataOutStage+0x7c>
 80117aa:	2b01      	cmp	r3, #1
 80117ac:	d003      	beq.n	80117b6 <USBD_LL_DataOutStage+0x82>
 80117ae:	e018      	b.n	80117e2 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80117b0:	2300      	movs	r3, #0
 80117b2:	75bb      	strb	r3, [r7, #22]
            break;
 80117b4:	e018      	b.n	80117e8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80117b6:	68fb      	ldr	r3, [r7, #12]
 80117b8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80117bc:	b2db      	uxtb	r3, r3
 80117be:	4619      	mov	r1, r3
 80117c0:	68f8      	ldr	r0, [r7, #12]
 80117c2:	f000 fa64 	bl	8011c8e <USBD_CoreFindIF>
 80117c6:	4603      	mov	r3, r0
 80117c8:	75bb      	strb	r3, [r7, #22]
            break;
 80117ca:	e00d      	b.n	80117e8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80117cc:	68fb      	ldr	r3, [r7, #12]
 80117ce:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80117d2:	b2db      	uxtb	r3, r3
 80117d4:	4619      	mov	r1, r3
 80117d6:	68f8      	ldr	r0, [r7, #12]
 80117d8:	f000 fa66 	bl	8011ca8 <USBD_CoreFindEP>
 80117dc:	4603      	mov	r3, r0
 80117de:	75bb      	strb	r3, [r7, #22]
            break;
 80117e0:	e002      	b.n	80117e8 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80117e2:	2300      	movs	r3, #0
 80117e4:	75bb      	strb	r3, [r7, #22]
            break;
 80117e6:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80117e8:	7dbb      	ldrb	r3, [r7, #22]
 80117ea:	2b00      	cmp	r3, #0
 80117ec:	d119      	bne.n	8011822 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80117ee:	68fb      	ldr	r3, [r7, #12]
 80117f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80117f4:	b2db      	uxtb	r3, r3
 80117f6:	2b03      	cmp	r3, #3
 80117f8:	d113      	bne.n	8011822 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80117fa:	7dba      	ldrb	r2, [r7, #22]
 80117fc:	68fb      	ldr	r3, [r7, #12]
 80117fe:	32ae      	adds	r2, #174	; 0xae
 8011800:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011804:	691b      	ldr	r3, [r3, #16]
 8011806:	2b00      	cmp	r3, #0
 8011808:	d00b      	beq.n	8011822 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 801180a:	7dba      	ldrb	r2, [r7, #22]
 801180c:	68fb      	ldr	r3, [r7, #12]
 801180e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8011812:	7dba      	ldrb	r2, [r7, #22]
 8011814:	68fb      	ldr	r3, [r7, #12]
 8011816:	32ae      	adds	r2, #174	; 0xae
 8011818:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801181c:	691b      	ldr	r3, [r3, #16]
 801181e:	68f8      	ldr	r0, [r7, #12]
 8011820:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8011822:	68f8      	ldr	r0, [r7, #12]
 8011824:	f001 f950 	bl	8012ac8 <USBD_CtlSendStatus>
 8011828:	e032      	b.n	8011890 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 801182a:	7afb      	ldrb	r3, [r7, #11]
 801182c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011830:	b2db      	uxtb	r3, r3
 8011832:	4619      	mov	r1, r3
 8011834:	68f8      	ldr	r0, [r7, #12]
 8011836:	f000 fa37 	bl	8011ca8 <USBD_CoreFindEP>
 801183a:	4603      	mov	r3, r0
 801183c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801183e:	7dbb      	ldrb	r3, [r7, #22]
 8011840:	2bff      	cmp	r3, #255	; 0xff
 8011842:	d025      	beq.n	8011890 <USBD_LL_DataOutStage+0x15c>
 8011844:	7dbb      	ldrb	r3, [r7, #22]
 8011846:	2b00      	cmp	r3, #0
 8011848:	d122      	bne.n	8011890 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801184a:	68fb      	ldr	r3, [r7, #12]
 801184c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011850:	b2db      	uxtb	r3, r3
 8011852:	2b03      	cmp	r3, #3
 8011854:	d117      	bne.n	8011886 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8011856:	7dba      	ldrb	r2, [r7, #22]
 8011858:	68fb      	ldr	r3, [r7, #12]
 801185a:	32ae      	adds	r2, #174	; 0xae
 801185c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011860:	699b      	ldr	r3, [r3, #24]
 8011862:	2b00      	cmp	r3, #0
 8011864:	d00f      	beq.n	8011886 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8011866:	7dba      	ldrb	r2, [r7, #22]
 8011868:	68fb      	ldr	r3, [r7, #12]
 801186a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 801186e:	7dba      	ldrb	r2, [r7, #22]
 8011870:	68fb      	ldr	r3, [r7, #12]
 8011872:	32ae      	adds	r2, #174	; 0xae
 8011874:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011878:	699b      	ldr	r3, [r3, #24]
 801187a:	7afa      	ldrb	r2, [r7, #11]
 801187c:	4611      	mov	r1, r2
 801187e:	68f8      	ldr	r0, [r7, #12]
 8011880:	4798      	blx	r3
 8011882:	4603      	mov	r3, r0
 8011884:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8011886:	7dfb      	ldrb	r3, [r7, #23]
 8011888:	2b00      	cmp	r3, #0
 801188a:	d001      	beq.n	8011890 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 801188c:	7dfb      	ldrb	r3, [r7, #23]
 801188e:	e000      	b.n	8011892 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8011890:	2300      	movs	r3, #0
}
 8011892:	4618      	mov	r0, r3
 8011894:	3718      	adds	r7, #24
 8011896:	46bd      	mov	sp, r7
 8011898:	bd80      	pop	{r7, pc}

0801189a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 801189a:	b580      	push	{r7, lr}
 801189c:	b086      	sub	sp, #24
 801189e:	af00      	add	r7, sp, #0
 80118a0:	60f8      	str	r0, [r7, #12]
 80118a2:	460b      	mov	r3, r1
 80118a4:	607a      	str	r2, [r7, #4]
 80118a6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80118a8:	7afb      	ldrb	r3, [r7, #11]
 80118aa:	2b00      	cmp	r3, #0
 80118ac:	d16f      	bne.n	801198e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80118ae:	68fb      	ldr	r3, [r7, #12]
 80118b0:	3314      	adds	r3, #20
 80118b2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80118b4:	68fb      	ldr	r3, [r7, #12]
 80118b6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80118ba:	2b02      	cmp	r3, #2
 80118bc:	d15a      	bne.n	8011974 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80118be:	693b      	ldr	r3, [r7, #16]
 80118c0:	689a      	ldr	r2, [r3, #8]
 80118c2:	693b      	ldr	r3, [r7, #16]
 80118c4:	68db      	ldr	r3, [r3, #12]
 80118c6:	429a      	cmp	r2, r3
 80118c8:	d914      	bls.n	80118f4 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80118ca:	693b      	ldr	r3, [r7, #16]
 80118cc:	689a      	ldr	r2, [r3, #8]
 80118ce:	693b      	ldr	r3, [r7, #16]
 80118d0:	68db      	ldr	r3, [r3, #12]
 80118d2:	1ad2      	subs	r2, r2, r3
 80118d4:	693b      	ldr	r3, [r7, #16]
 80118d6:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80118d8:	693b      	ldr	r3, [r7, #16]
 80118da:	689b      	ldr	r3, [r3, #8]
 80118dc:	461a      	mov	r2, r3
 80118de:	6879      	ldr	r1, [r7, #4]
 80118e0:	68f8      	ldr	r0, [r7, #12]
 80118e2:	f001 f8b2 	bl	8012a4a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80118e6:	2300      	movs	r3, #0
 80118e8:	2200      	movs	r2, #0
 80118ea:	2100      	movs	r1, #0
 80118ec:	68f8      	ldr	r0, [r7, #12]
 80118ee:	f001 fe17 	bl	8013520 <USBD_LL_PrepareReceive>
 80118f2:	e03f      	b.n	8011974 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80118f4:	693b      	ldr	r3, [r7, #16]
 80118f6:	68da      	ldr	r2, [r3, #12]
 80118f8:	693b      	ldr	r3, [r7, #16]
 80118fa:	689b      	ldr	r3, [r3, #8]
 80118fc:	429a      	cmp	r2, r3
 80118fe:	d11c      	bne.n	801193a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8011900:	693b      	ldr	r3, [r7, #16]
 8011902:	685a      	ldr	r2, [r3, #4]
 8011904:	693b      	ldr	r3, [r7, #16]
 8011906:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8011908:	429a      	cmp	r2, r3
 801190a:	d316      	bcc.n	801193a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 801190c:	693b      	ldr	r3, [r7, #16]
 801190e:	685a      	ldr	r2, [r3, #4]
 8011910:	68fb      	ldr	r3, [r7, #12]
 8011912:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8011916:	429a      	cmp	r2, r3
 8011918:	d20f      	bcs.n	801193a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 801191a:	2200      	movs	r2, #0
 801191c:	2100      	movs	r1, #0
 801191e:	68f8      	ldr	r0, [r7, #12]
 8011920:	f001 f893 	bl	8012a4a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8011924:	68fb      	ldr	r3, [r7, #12]
 8011926:	2200      	movs	r2, #0
 8011928:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801192c:	2300      	movs	r3, #0
 801192e:	2200      	movs	r2, #0
 8011930:	2100      	movs	r1, #0
 8011932:	68f8      	ldr	r0, [r7, #12]
 8011934:	f001 fdf4 	bl	8013520 <USBD_LL_PrepareReceive>
 8011938:	e01c      	b.n	8011974 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801193a:	68fb      	ldr	r3, [r7, #12]
 801193c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011940:	b2db      	uxtb	r3, r3
 8011942:	2b03      	cmp	r3, #3
 8011944:	d10f      	bne.n	8011966 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8011946:	68fb      	ldr	r3, [r7, #12]
 8011948:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801194c:	68db      	ldr	r3, [r3, #12]
 801194e:	2b00      	cmp	r3, #0
 8011950:	d009      	beq.n	8011966 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8011952:	68fb      	ldr	r3, [r7, #12]
 8011954:	2200      	movs	r2, #0
 8011956:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 801195a:	68fb      	ldr	r3, [r7, #12]
 801195c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011960:	68db      	ldr	r3, [r3, #12]
 8011962:	68f8      	ldr	r0, [r7, #12]
 8011964:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8011966:	2180      	movs	r1, #128	; 0x80
 8011968:	68f8      	ldr	r0, [r7, #12]
 801196a:	f001 fd2f 	bl	80133cc <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 801196e:	68f8      	ldr	r0, [r7, #12]
 8011970:	f001 f8bd 	bl	8012aee <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8011974:	68fb      	ldr	r3, [r7, #12]
 8011976:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 801197a:	2b00      	cmp	r3, #0
 801197c:	d03a      	beq.n	80119f4 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 801197e:	68f8      	ldr	r0, [r7, #12]
 8011980:	f7ff fe42 	bl	8011608 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8011984:	68fb      	ldr	r3, [r7, #12]
 8011986:	2200      	movs	r2, #0
 8011988:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 801198c:	e032      	b.n	80119f4 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 801198e:	7afb      	ldrb	r3, [r7, #11]
 8011990:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8011994:	b2db      	uxtb	r3, r3
 8011996:	4619      	mov	r1, r3
 8011998:	68f8      	ldr	r0, [r7, #12]
 801199a:	f000 f985 	bl	8011ca8 <USBD_CoreFindEP>
 801199e:	4603      	mov	r3, r0
 80119a0:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80119a2:	7dfb      	ldrb	r3, [r7, #23]
 80119a4:	2bff      	cmp	r3, #255	; 0xff
 80119a6:	d025      	beq.n	80119f4 <USBD_LL_DataInStage+0x15a>
 80119a8:	7dfb      	ldrb	r3, [r7, #23]
 80119aa:	2b00      	cmp	r3, #0
 80119ac:	d122      	bne.n	80119f4 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80119ae:	68fb      	ldr	r3, [r7, #12]
 80119b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80119b4:	b2db      	uxtb	r3, r3
 80119b6:	2b03      	cmp	r3, #3
 80119b8:	d11c      	bne.n	80119f4 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80119ba:	7dfa      	ldrb	r2, [r7, #23]
 80119bc:	68fb      	ldr	r3, [r7, #12]
 80119be:	32ae      	adds	r2, #174	; 0xae
 80119c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80119c4:	695b      	ldr	r3, [r3, #20]
 80119c6:	2b00      	cmp	r3, #0
 80119c8:	d014      	beq.n	80119f4 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80119ca:	7dfa      	ldrb	r2, [r7, #23]
 80119cc:	68fb      	ldr	r3, [r7, #12]
 80119ce:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80119d2:	7dfa      	ldrb	r2, [r7, #23]
 80119d4:	68fb      	ldr	r3, [r7, #12]
 80119d6:	32ae      	adds	r2, #174	; 0xae
 80119d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80119dc:	695b      	ldr	r3, [r3, #20]
 80119de:	7afa      	ldrb	r2, [r7, #11]
 80119e0:	4611      	mov	r1, r2
 80119e2:	68f8      	ldr	r0, [r7, #12]
 80119e4:	4798      	blx	r3
 80119e6:	4603      	mov	r3, r0
 80119e8:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80119ea:	7dbb      	ldrb	r3, [r7, #22]
 80119ec:	2b00      	cmp	r3, #0
 80119ee:	d001      	beq.n	80119f4 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80119f0:	7dbb      	ldrb	r3, [r7, #22]
 80119f2:	e000      	b.n	80119f6 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80119f4:	2300      	movs	r3, #0
}
 80119f6:	4618      	mov	r0, r3
 80119f8:	3718      	adds	r7, #24
 80119fa:	46bd      	mov	sp, r7
 80119fc:	bd80      	pop	{r7, pc}

080119fe <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80119fe:	b580      	push	{r7, lr}
 8011a00:	b084      	sub	sp, #16
 8011a02:	af00      	add	r7, sp, #0
 8011a04:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8011a06:	2300      	movs	r3, #0
 8011a08:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8011a0a:	687b      	ldr	r3, [r7, #4]
 8011a0c:	2201      	movs	r2, #1
 8011a0e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8011a12:	687b      	ldr	r3, [r7, #4]
 8011a14:	2200      	movs	r2, #0
 8011a16:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8011a1a:	687b      	ldr	r3, [r7, #4]
 8011a1c:	2200      	movs	r2, #0
 8011a1e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8011a20:	687b      	ldr	r3, [r7, #4]
 8011a22:	2200      	movs	r2, #0
 8011a24:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8011a28:	687b      	ldr	r3, [r7, #4]
 8011a2a:	2200      	movs	r2, #0
 8011a2c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8011a30:	687b      	ldr	r3, [r7, #4]
 8011a32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011a36:	2b00      	cmp	r3, #0
 8011a38:	d014      	beq.n	8011a64 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8011a3a:	687b      	ldr	r3, [r7, #4]
 8011a3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011a40:	685b      	ldr	r3, [r3, #4]
 8011a42:	2b00      	cmp	r3, #0
 8011a44:	d00e      	beq.n	8011a64 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8011a46:	687b      	ldr	r3, [r7, #4]
 8011a48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011a4c:	685b      	ldr	r3, [r3, #4]
 8011a4e:	687a      	ldr	r2, [r7, #4]
 8011a50:	6852      	ldr	r2, [r2, #4]
 8011a52:	b2d2      	uxtb	r2, r2
 8011a54:	4611      	mov	r1, r2
 8011a56:	6878      	ldr	r0, [r7, #4]
 8011a58:	4798      	blx	r3
 8011a5a:	4603      	mov	r3, r0
 8011a5c:	2b00      	cmp	r3, #0
 8011a5e:	d001      	beq.n	8011a64 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8011a60:	2303      	movs	r3, #3
 8011a62:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8011a64:	2340      	movs	r3, #64	; 0x40
 8011a66:	2200      	movs	r2, #0
 8011a68:	2100      	movs	r1, #0
 8011a6a:	6878      	ldr	r0, [r7, #4]
 8011a6c:	f001 fc69 	bl	8013342 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8011a70:	687b      	ldr	r3, [r7, #4]
 8011a72:	2201      	movs	r2, #1
 8011a74:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8011a78:	687b      	ldr	r3, [r7, #4]
 8011a7a:	2240      	movs	r2, #64	; 0x40
 8011a7c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8011a80:	2340      	movs	r3, #64	; 0x40
 8011a82:	2200      	movs	r2, #0
 8011a84:	2180      	movs	r1, #128	; 0x80
 8011a86:	6878      	ldr	r0, [r7, #4]
 8011a88:	f001 fc5b 	bl	8013342 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8011a8c:	687b      	ldr	r3, [r7, #4]
 8011a8e:	2201      	movs	r2, #1
 8011a90:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8011a92:	687b      	ldr	r3, [r7, #4]
 8011a94:	2240      	movs	r2, #64	; 0x40
 8011a96:	621a      	str	r2, [r3, #32]

  return ret;
 8011a98:	7bfb      	ldrb	r3, [r7, #15]
}
 8011a9a:	4618      	mov	r0, r3
 8011a9c:	3710      	adds	r7, #16
 8011a9e:	46bd      	mov	sp, r7
 8011aa0:	bd80      	pop	{r7, pc}

08011aa2 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8011aa2:	b480      	push	{r7}
 8011aa4:	b083      	sub	sp, #12
 8011aa6:	af00      	add	r7, sp, #0
 8011aa8:	6078      	str	r0, [r7, #4]
 8011aaa:	460b      	mov	r3, r1
 8011aac:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8011aae:	687b      	ldr	r3, [r7, #4]
 8011ab0:	78fa      	ldrb	r2, [r7, #3]
 8011ab2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8011ab4:	2300      	movs	r3, #0
}
 8011ab6:	4618      	mov	r0, r3
 8011ab8:	370c      	adds	r7, #12
 8011aba:	46bd      	mov	sp, r7
 8011abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ac0:	4770      	bx	lr

08011ac2 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8011ac2:	b480      	push	{r7}
 8011ac4:	b083      	sub	sp, #12
 8011ac6:	af00      	add	r7, sp, #0
 8011ac8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8011aca:	687b      	ldr	r3, [r7, #4]
 8011acc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011ad0:	b2db      	uxtb	r3, r3
 8011ad2:	2b04      	cmp	r3, #4
 8011ad4:	d006      	beq.n	8011ae4 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8011ad6:	687b      	ldr	r3, [r7, #4]
 8011ad8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011adc:	b2da      	uxtb	r2, r3
 8011ade:	687b      	ldr	r3, [r7, #4]
 8011ae0:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8011ae4:	687b      	ldr	r3, [r7, #4]
 8011ae6:	2204      	movs	r2, #4
 8011ae8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8011aec:	2300      	movs	r3, #0
}
 8011aee:	4618      	mov	r0, r3
 8011af0:	370c      	adds	r7, #12
 8011af2:	46bd      	mov	sp, r7
 8011af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011af8:	4770      	bx	lr

08011afa <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8011afa:	b480      	push	{r7}
 8011afc:	b083      	sub	sp, #12
 8011afe:	af00      	add	r7, sp, #0
 8011b00:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8011b02:	687b      	ldr	r3, [r7, #4]
 8011b04:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011b08:	b2db      	uxtb	r3, r3
 8011b0a:	2b04      	cmp	r3, #4
 8011b0c:	d106      	bne.n	8011b1c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8011b0e:	687b      	ldr	r3, [r7, #4]
 8011b10:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8011b14:	b2da      	uxtb	r2, r3
 8011b16:	687b      	ldr	r3, [r7, #4]
 8011b18:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8011b1c:	2300      	movs	r3, #0
}
 8011b1e:	4618      	mov	r0, r3
 8011b20:	370c      	adds	r7, #12
 8011b22:	46bd      	mov	sp, r7
 8011b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b28:	4770      	bx	lr

08011b2a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8011b2a:	b580      	push	{r7, lr}
 8011b2c:	b082      	sub	sp, #8
 8011b2e:	af00      	add	r7, sp, #0
 8011b30:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011b32:	687b      	ldr	r3, [r7, #4]
 8011b34:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011b38:	b2db      	uxtb	r3, r3
 8011b3a:	2b03      	cmp	r3, #3
 8011b3c:	d110      	bne.n	8011b60 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8011b3e:	687b      	ldr	r3, [r7, #4]
 8011b40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011b44:	2b00      	cmp	r3, #0
 8011b46:	d00b      	beq.n	8011b60 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8011b48:	687b      	ldr	r3, [r7, #4]
 8011b4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011b4e:	69db      	ldr	r3, [r3, #28]
 8011b50:	2b00      	cmp	r3, #0
 8011b52:	d005      	beq.n	8011b60 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8011b54:	687b      	ldr	r3, [r7, #4]
 8011b56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011b5a:	69db      	ldr	r3, [r3, #28]
 8011b5c:	6878      	ldr	r0, [r7, #4]
 8011b5e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8011b60:	2300      	movs	r3, #0
}
 8011b62:	4618      	mov	r0, r3
 8011b64:	3708      	adds	r7, #8
 8011b66:	46bd      	mov	sp, r7
 8011b68:	bd80      	pop	{r7, pc}

08011b6a <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8011b6a:	b580      	push	{r7, lr}
 8011b6c:	b082      	sub	sp, #8
 8011b6e:	af00      	add	r7, sp, #0
 8011b70:	6078      	str	r0, [r7, #4]
 8011b72:	460b      	mov	r3, r1
 8011b74:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8011b76:	687b      	ldr	r3, [r7, #4]
 8011b78:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8011b7c:	687b      	ldr	r3, [r7, #4]
 8011b7e:	32ae      	adds	r2, #174	; 0xae
 8011b80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011b84:	2b00      	cmp	r3, #0
 8011b86:	d101      	bne.n	8011b8c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8011b88:	2303      	movs	r3, #3
 8011b8a:	e01c      	b.n	8011bc6 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011b8c:	687b      	ldr	r3, [r7, #4]
 8011b8e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011b92:	b2db      	uxtb	r3, r3
 8011b94:	2b03      	cmp	r3, #3
 8011b96:	d115      	bne.n	8011bc4 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8011b98:	687b      	ldr	r3, [r7, #4]
 8011b9a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8011b9e:	687b      	ldr	r3, [r7, #4]
 8011ba0:	32ae      	adds	r2, #174	; 0xae
 8011ba2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011ba6:	6a1b      	ldr	r3, [r3, #32]
 8011ba8:	2b00      	cmp	r3, #0
 8011baa:	d00b      	beq.n	8011bc4 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8011bac:	687b      	ldr	r3, [r7, #4]
 8011bae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8011bb2:	687b      	ldr	r3, [r7, #4]
 8011bb4:	32ae      	adds	r2, #174	; 0xae
 8011bb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011bba:	6a1b      	ldr	r3, [r3, #32]
 8011bbc:	78fa      	ldrb	r2, [r7, #3]
 8011bbe:	4611      	mov	r1, r2
 8011bc0:	6878      	ldr	r0, [r7, #4]
 8011bc2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8011bc4:	2300      	movs	r3, #0
}
 8011bc6:	4618      	mov	r0, r3
 8011bc8:	3708      	adds	r7, #8
 8011bca:	46bd      	mov	sp, r7
 8011bcc:	bd80      	pop	{r7, pc}

08011bce <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8011bce:	b580      	push	{r7, lr}
 8011bd0:	b082      	sub	sp, #8
 8011bd2:	af00      	add	r7, sp, #0
 8011bd4:	6078      	str	r0, [r7, #4]
 8011bd6:	460b      	mov	r3, r1
 8011bd8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8011bda:	687b      	ldr	r3, [r7, #4]
 8011bdc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8011be0:	687b      	ldr	r3, [r7, #4]
 8011be2:	32ae      	adds	r2, #174	; 0xae
 8011be4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011be8:	2b00      	cmp	r3, #0
 8011bea:	d101      	bne.n	8011bf0 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8011bec:	2303      	movs	r3, #3
 8011bee:	e01c      	b.n	8011c2a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011bf0:	687b      	ldr	r3, [r7, #4]
 8011bf2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011bf6:	b2db      	uxtb	r3, r3
 8011bf8:	2b03      	cmp	r3, #3
 8011bfa:	d115      	bne.n	8011c28 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8011bfc:	687b      	ldr	r3, [r7, #4]
 8011bfe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8011c02:	687b      	ldr	r3, [r7, #4]
 8011c04:	32ae      	adds	r2, #174	; 0xae
 8011c06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011c0c:	2b00      	cmp	r3, #0
 8011c0e:	d00b      	beq.n	8011c28 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8011c10:	687b      	ldr	r3, [r7, #4]
 8011c12:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8011c16:	687b      	ldr	r3, [r7, #4]
 8011c18:	32ae      	adds	r2, #174	; 0xae
 8011c1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011c20:	78fa      	ldrb	r2, [r7, #3]
 8011c22:	4611      	mov	r1, r2
 8011c24:	6878      	ldr	r0, [r7, #4]
 8011c26:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8011c28:	2300      	movs	r3, #0
}
 8011c2a:	4618      	mov	r0, r3
 8011c2c:	3708      	adds	r7, #8
 8011c2e:	46bd      	mov	sp, r7
 8011c30:	bd80      	pop	{r7, pc}

08011c32 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8011c32:	b480      	push	{r7}
 8011c34:	b083      	sub	sp, #12
 8011c36:	af00      	add	r7, sp, #0
 8011c38:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8011c3a:	2300      	movs	r3, #0
}
 8011c3c:	4618      	mov	r0, r3
 8011c3e:	370c      	adds	r7, #12
 8011c40:	46bd      	mov	sp, r7
 8011c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c46:	4770      	bx	lr

08011c48 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8011c48:	b580      	push	{r7, lr}
 8011c4a:	b084      	sub	sp, #16
 8011c4c:	af00      	add	r7, sp, #0
 8011c4e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8011c50:	2300      	movs	r3, #0
 8011c52:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8011c54:	687b      	ldr	r3, [r7, #4]
 8011c56:	2201      	movs	r2, #1
 8011c58:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8011c5c:	687b      	ldr	r3, [r7, #4]
 8011c5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011c62:	2b00      	cmp	r3, #0
 8011c64:	d00e      	beq.n	8011c84 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8011c66:	687b      	ldr	r3, [r7, #4]
 8011c68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011c6c:	685b      	ldr	r3, [r3, #4]
 8011c6e:	687a      	ldr	r2, [r7, #4]
 8011c70:	6852      	ldr	r2, [r2, #4]
 8011c72:	b2d2      	uxtb	r2, r2
 8011c74:	4611      	mov	r1, r2
 8011c76:	6878      	ldr	r0, [r7, #4]
 8011c78:	4798      	blx	r3
 8011c7a:	4603      	mov	r3, r0
 8011c7c:	2b00      	cmp	r3, #0
 8011c7e:	d001      	beq.n	8011c84 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8011c80:	2303      	movs	r3, #3
 8011c82:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8011c84:	7bfb      	ldrb	r3, [r7, #15]
}
 8011c86:	4618      	mov	r0, r3
 8011c88:	3710      	adds	r7, #16
 8011c8a:	46bd      	mov	sp, r7
 8011c8c:	bd80      	pop	{r7, pc}

08011c8e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8011c8e:	b480      	push	{r7}
 8011c90:	b083      	sub	sp, #12
 8011c92:	af00      	add	r7, sp, #0
 8011c94:	6078      	str	r0, [r7, #4]
 8011c96:	460b      	mov	r3, r1
 8011c98:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8011c9a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8011c9c:	4618      	mov	r0, r3
 8011c9e:	370c      	adds	r7, #12
 8011ca0:	46bd      	mov	sp, r7
 8011ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ca6:	4770      	bx	lr

08011ca8 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8011ca8:	b480      	push	{r7}
 8011caa:	b083      	sub	sp, #12
 8011cac:	af00      	add	r7, sp, #0
 8011cae:	6078      	str	r0, [r7, #4]
 8011cb0:	460b      	mov	r3, r1
 8011cb2:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8011cb4:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8011cb6:	4618      	mov	r0, r3
 8011cb8:	370c      	adds	r7, #12
 8011cba:	46bd      	mov	sp, r7
 8011cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cc0:	4770      	bx	lr

08011cc2 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8011cc2:	b580      	push	{r7, lr}
 8011cc4:	b086      	sub	sp, #24
 8011cc6:	af00      	add	r7, sp, #0
 8011cc8:	6078      	str	r0, [r7, #4]
 8011cca:	460b      	mov	r3, r1
 8011ccc:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8011cce:	687b      	ldr	r3, [r7, #4]
 8011cd0:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8011cd2:	687b      	ldr	r3, [r7, #4]
 8011cd4:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8011cd6:	2300      	movs	r3, #0
 8011cd8:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8011cda:	68fb      	ldr	r3, [r7, #12]
 8011cdc:	885b      	ldrh	r3, [r3, #2]
 8011cde:	b29a      	uxth	r2, r3
 8011ce0:	68fb      	ldr	r3, [r7, #12]
 8011ce2:	781b      	ldrb	r3, [r3, #0]
 8011ce4:	b29b      	uxth	r3, r3
 8011ce6:	429a      	cmp	r2, r3
 8011ce8:	d920      	bls.n	8011d2c <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8011cea:	68fb      	ldr	r3, [r7, #12]
 8011cec:	781b      	ldrb	r3, [r3, #0]
 8011cee:	b29b      	uxth	r3, r3
 8011cf0:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8011cf2:	e013      	b.n	8011d1c <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8011cf4:	f107 030a 	add.w	r3, r7, #10
 8011cf8:	4619      	mov	r1, r3
 8011cfa:	6978      	ldr	r0, [r7, #20]
 8011cfc:	f000 f81b 	bl	8011d36 <USBD_GetNextDesc>
 8011d00:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8011d02:	697b      	ldr	r3, [r7, #20]
 8011d04:	785b      	ldrb	r3, [r3, #1]
 8011d06:	2b05      	cmp	r3, #5
 8011d08:	d108      	bne.n	8011d1c <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8011d0a:	697b      	ldr	r3, [r7, #20]
 8011d0c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8011d0e:	693b      	ldr	r3, [r7, #16]
 8011d10:	789b      	ldrb	r3, [r3, #2]
 8011d12:	78fa      	ldrb	r2, [r7, #3]
 8011d14:	429a      	cmp	r2, r3
 8011d16:	d008      	beq.n	8011d2a <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8011d18:	2300      	movs	r3, #0
 8011d1a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8011d1c:	68fb      	ldr	r3, [r7, #12]
 8011d1e:	885b      	ldrh	r3, [r3, #2]
 8011d20:	b29a      	uxth	r2, r3
 8011d22:	897b      	ldrh	r3, [r7, #10]
 8011d24:	429a      	cmp	r2, r3
 8011d26:	d8e5      	bhi.n	8011cf4 <USBD_GetEpDesc+0x32>
 8011d28:	e000      	b.n	8011d2c <USBD_GetEpDesc+0x6a>
          break;
 8011d2a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8011d2c:	693b      	ldr	r3, [r7, #16]
}
 8011d2e:	4618      	mov	r0, r3
 8011d30:	3718      	adds	r7, #24
 8011d32:	46bd      	mov	sp, r7
 8011d34:	bd80      	pop	{r7, pc}

08011d36 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8011d36:	b480      	push	{r7}
 8011d38:	b085      	sub	sp, #20
 8011d3a:	af00      	add	r7, sp, #0
 8011d3c:	6078      	str	r0, [r7, #4]
 8011d3e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8011d40:	687b      	ldr	r3, [r7, #4]
 8011d42:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8011d44:	683b      	ldr	r3, [r7, #0]
 8011d46:	881a      	ldrh	r2, [r3, #0]
 8011d48:	68fb      	ldr	r3, [r7, #12]
 8011d4a:	781b      	ldrb	r3, [r3, #0]
 8011d4c:	b29b      	uxth	r3, r3
 8011d4e:	4413      	add	r3, r2
 8011d50:	b29a      	uxth	r2, r3
 8011d52:	683b      	ldr	r3, [r7, #0]
 8011d54:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8011d56:	68fb      	ldr	r3, [r7, #12]
 8011d58:	781b      	ldrb	r3, [r3, #0]
 8011d5a:	461a      	mov	r2, r3
 8011d5c:	687b      	ldr	r3, [r7, #4]
 8011d5e:	4413      	add	r3, r2
 8011d60:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8011d62:	68fb      	ldr	r3, [r7, #12]
}
 8011d64:	4618      	mov	r0, r3
 8011d66:	3714      	adds	r7, #20
 8011d68:	46bd      	mov	sp, r7
 8011d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d6e:	4770      	bx	lr

08011d70 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8011d70:	b480      	push	{r7}
 8011d72:	b087      	sub	sp, #28
 8011d74:	af00      	add	r7, sp, #0
 8011d76:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8011d78:	687b      	ldr	r3, [r7, #4]
 8011d7a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8011d7c:	697b      	ldr	r3, [r7, #20]
 8011d7e:	781b      	ldrb	r3, [r3, #0]
 8011d80:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8011d82:	697b      	ldr	r3, [r7, #20]
 8011d84:	3301      	adds	r3, #1
 8011d86:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8011d88:	697b      	ldr	r3, [r7, #20]
 8011d8a:	781b      	ldrb	r3, [r3, #0]
 8011d8c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8011d8e:	8a3b      	ldrh	r3, [r7, #16]
 8011d90:	021b      	lsls	r3, r3, #8
 8011d92:	b21a      	sxth	r2, r3
 8011d94:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8011d98:	4313      	orrs	r3, r2
 8011d9a:	b21b      	sxth	r3, r3
 8011d9c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8011d9e:	89fb      	ldrh	r3, [r7, #14]
}
 8011da0:	4618      	mov	r0, r3
 8011da2:	371c      	adds	r7, #28
 8011da4:	46bd      	mov	sp, r7
 8011da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011daa:	4770      	bx	lr

08011dac <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011dac:	b580      	push	{r7, lr}
 8011dae:	b084      	sub	sp, #16
 8011db0:	af00      	add	r7, sp, #0
 8011db2:	6078      	str	r0, [r7, #4]
 8011db4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8011db6:	2300      	movs	r3, #0
 8011db8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011dba:	683b      	ldr	r3, [r7, #0]
 8011dbc:	781b      	ldrb	r3, [r3, #0]
 8011dbe:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8011dc2:	2b40      	cmp	r3, #64	; 0x40
 8011dc4:	d005      	beq.n	8011dd2 <USBD_StdDevReq+0x26>
 8011dc6:	2b40      	cmp	r3, #64	; 0x40
 8011dc8:	d857      	bhi.n	8011e7a <USBD_StdDevReq+0xce>
 8011dca:	2b00      	cmp	r3, #0
 8011dcc:	d00f      	beq.n	8011dee <USBD_StdDevReq+0x42>
 8011dce:	2b20      	cmp	r3, #32
 8011dd0:	d153      	bne.n	8011e7a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8011dd2:	687b      	ldr	r3, [r7, #4]
 8011dd4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8011dd8:	687b      	ldr	r3, [r7, #4]
 8011dda:	32ae      	adds	r2, #174	; 0xae
 8011ddc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011de0:	689b      	ldr	r3, [r3, #8]
 8011de2:	6839      	ldr	r1, [r7, #0]
 8011de4:	6878      	ldr	r0, [r7, #4]
 8011de6:	4798      	blx	r3
 8011de8:	4603      	mov	r3, r0
 8011dea:	73fb      	strb	r3, [r7, #15]
      break;
 8011dec:	e04a      	b.n	8011e84 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8011dee:	683b      	ldr	r3, [r7, #0]
 8011df0:	785b      	ldrb	r3, [r3, #1]
 8011df2:	2b09      	cmp	r3, #9
 8011df4:	d83b      	bhi.n	8011e6e <USBD_StdDevReq+0xc2>
 8011df6:	a201      	add	r2, pc, #4	; (adr r2, 8011dfc <USBD_StdDevReq+0x50>)
 8011df8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011dfc:	08011e51 	.word	0x08011e51
 8011e00:	08011e65 	.word	0x08011e65
 8011e04:	08011e6f 	.word	0x08011e6f
 8011e08:	08011e5b 	.word	0x08011e5b
 8011e0c:	08011e6f 	.word	0x08011e6f
 8011e10:	08011e2f 	.word	0x08011e2f
 8011e14:	08011e25 	.word	0x08011e25
 8011e18:	08011e6f 	.word	0x08011e6f
 8011e1c:	08011e47 	.word	0x08011e47
 8011e20:	08011e39 	.word	0x08011e39
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8011e24:	6839      	ldr	r1, [r7, #0]
 8011e26:	6878      	ldr	r0, [r7, #4]
 8011e28:	f000 fa3c 	bl	80122a4 <USBD_GetDescriptor>
          break;
 8011e2c:	e024      	b.n	8011e78 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8011e2e:	6839      	ldr	r1, [r7, #0]
 8011e30:	6878      	ldr	r0, [r7, #4]
 8011e32:	f000 fba1 	bl	8012578 <USBD_SetAddress>
          break;
 8011e36:	e01f      	b.n	8011e78 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8011e38:	6839      	ldr	r1, [r7, #0]
 8011e3a:	6878      	ldr	r0, [r7, #4]
 8011e3c:	f000 fbe0 	bl	8012600 <USBD_SetConfig>
 8011e40:	4603      	mov	r3, r0
 8011e42:	73fb      	strb	r3, [r7, #15]
          break;
 8011e44:	e018      	b.n	8011e78 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8011e46:	6839      	ldr	r1, [r7, #0]
 8011e48:	6878      	ldr	r0, [r7, #4]
 8011e4a:	f000 fc83 	bl	8012754 <USBD_GetConfig>
          break;
 8011e4e:	e013      	b.n	8011e78 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8011e50:	6839      	ldr	r1, [r7, #0]
 8011e52:	6878      	ldr	r0, [r7, #4]
 8011e54:	f000 fcb4 	bl	80127c0 <USBD_GetStatus>
          break;
 8011e58:	e00e      	b.n	8011e78 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8011e5a:	6839      	ldr	r1, [r7, #0]
 8011e5c:	6878      	ldr	r0, [r7, #4]
 8011e5e:	f000 fce3 	bl	8012828 <USBD_SetFeature>
          break;
 8011e62:	e009      	b.n	8011e78 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8011e64:	6839      	ldr	r1, [r7, #0]
 8011e66:	6878      	ldr	r0, [r7, #4]
 8011e68:	f000 fd07 	bl	801287a <USBD_ClrFeature>
          break;
 8011e6c:	e004      	b.n	8011e78 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8011e6e:	6839      	ldr	r1, [r7, #0]
 8011e70:	6878      	ldr	r0, [r7, #4]
 8011e72:	f000 fd5e 	bl	8012932 <USBD_CtlError>
          break;
 8011e76:	bf00      	nop
      }
      break;
 8011e78:	e004      	b.n	8011e84 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8011e7a:	6839      	ldr	r1, [r7, #0]
 8011e7c:	6878      	ldr	r0, [r7, #4]
 8011e7e:	f000 fd58 	bl	8012932 <USBD_CtlError>
      break;
 8011e82:	bf00      	nop
  }

  return ret;
 8011e84:	7bfb      	ldrb	r3, [r7, #15]
}
 8011e86:	4618      	mov	r0, r3
 8011e88:	3710      	adds	r7, #16
 8011e8a:	46bd      	mov	sp, r7
 8011e8c:	bd80      	pop	{r7, pc}
 8011e8e:	bf00      	nop

08011e90 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011e90:	b580      	push	{r7, lr}
 8011e92:	b084      	sub	sp, #16
 8011e94:	af00      	add	r7, sp, #0
 8011e96:	6078      	str	r0, [r7, #4]
 8011e98:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8011e9a:	2300      	movs	r3, #0
 8011e9c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011e9e:	683b      	ldr	r3, [r7, #0]
 8011ea0:	781b      	ldrb	r3, [r3, #0]
 8011ea2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8011ea6:	2b40      	cmp	r3, #64	; 0x40
 8011ea8:	d005      	beq.n	8011eb6 <USBD_StdItfReq+0x26>
 8011eaa:	2b40      	cmp	r3, #64	; 0x40
 8011eac:	d852      	bhi.n	8011f54 <USBD_StdItfReq+0xc4>
 8011eae:	2b00      	cmp	r3, #0
 8011eb0:	d001      	beq.n	8011eb6 <USBD_StdItfReq+0x26>
 8011eb2:	2b20      	cmp	r3, #32
 8011eb4:	d14e      	bne.n	8011f54 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8011eb6:	687b      	ldr	r3, [r7, #4]
 8011eb8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011ebc:	b2db      	uxtb	r3, r3
 8011ebe:	3b01      	subs	r3, #1
 8011ec0:	2b02      	cmp	r3, #2
 8011ec2:	d840      	bhi.n	8011f46 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8011ec4:	683b      	ldr	r3, [r7, #0]
 8011ec6:	889b      	ldrh	r3, [r3, #4]
 8011ec8:	b2db      	uxtb	r3, r3
 8011eca:	2b01      	cmp	r3, #1
 8011ecc:	d836      	bhi.n	8011f3c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8011ece:	683b      	ldr	r3, [r7, #0]
 8011ed0:	889b      	ldrh	r3, [r3, #4]
 8011ed2:	b2db      	uxtb	r3, r3
 8011ed4:	4619      	mov	r1, r3
 8011ed6:	6878      	ldr	r0, [r7, #4]
 8011ed8:	f7ff fed9 	bl	8011c8e <USBD_CoreFindIF>
 8011edc:	4603      	mov	r3, r0
 8011ede:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8011ee0:	7bbb      	ldrb	r3, [r7, #14]
 8011ee2:	2bff      	cmp	r3, #255	; 0xff
 8011ee4:	d01d      	beq.n	8011f22 <USBD_StdItfReq+0x92>
 8011ee6:	7bbb      	ldrb	r3, [r7, #14]
 8011ee8:	2b00      	cmp	r3, #0
 8011eea:	d11a      	bne.n	8011f22 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8011eec:	7bba      	ldrb	r2, [r7, #14]
 8011eee:	687b      	ldr	r3, [r7, #4]
 8011ef0:	32ae      	adds	r2, #174	; 0xae
 8011ef2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011ef6:	689b      	ldr	r3, [r3, #8]
 8011ef8:	2b00      	cmp	r3, #0
 8011efa:	d00f      	beq.n	8011f1c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8011efc:	7bba      	ldrb	r2, [r7, #14]
 8011efe:	687b      	ldr	r3, [r7, #4]
 8011f00:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8011f04:	7bba      	ldrb	r2, [r7, #14]
 8011f06:	687b      	ldr	r3, [r7, #4]
 8011f08:	32ae      	adds	r2, #174	; 0xae
 8011f0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011f0e:	689b      	ldr	r3, [r3, #8]
 8011f10:	6839      	ldr	r1, [r7, #0]
 8011f12:	6878      	ldr	r0, [r7, #4]
 8011f14:	4798      	blx	r3
 8011f16:	4603      	mov	r3, r0
 8011f18:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8011f1a:	e004      	b.n	8011f26 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8011f1c:	2303      	movs	r3, #3
 8011f1e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8011f20:	e001      	b.n	8011f26 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8011f22:	2303      	movs	r3, #3
 8011f24:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8011f26:	683b      	ldr	r3, [r7, #0]
 8011f28:	88db      	ldrh	r3, [r3, #6]
 8011f2a:	2b00      	cmp	r3, #0
 8011f2c:	d110      	bne.n	8011f50 <USBD_StdItfReq+0xc0>
 8011f2e:	7bfb      	ldrb	r3, [r7, #15]
 8011f30:	2b00      	cmp	r3, #0
 8011f32:	d10d      	bne.n	8011f50 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8011f34:	6878      	ldr	r0, [r7, #4]
 8011f36:	f000 fdc7 	bl	8012ac8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8011f3a:	e009      	b.n	8011f50 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8011f3c:	6839      	ldr	r1, [r7, #0]
 8011f3e:	6878      	ldr	r0, [r7, #4]
 8011f40:	f000 fcf7 	bl	8012932 <USBD_CtlError>
          break;
 8011f44:	e004      	b.n	8011f50 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8011f46:	6839      	ldr	r1, [r7, #0]
 8011f48:	6878      	ldr	r0, [r7, #4]
 8011f4a:	f000 fcf2 	bl	8012932 <USBD_CtlError>
          break;
 8011f4e:	e000      	b.n	8011f52 <USBD_StdItfReq+0xc2>
          break;
 8011f50:	bf00      	nop
      }
      break;
 8011f52:	e004      	b.n	8011f5e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8011f54:	6839      	ldr	r1, [r7, #0]
 8011f56:	6878      	ldr	r0, [r7, #4]
 8011f58:	f000 fceb 	bl	8012932 <USBD_CtlError>
      break;
 8011f5c:	bf00      	nop
  }

  return ret;
 8011f5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8011f60:	4618      	mov	r0, r3
 8011f62:	3710      	adds	r7, #16
 8011f64:	46bd      	mov	sp, r7
 8011f66:	bd80      	pop	{r7, pc}

08011f68 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011f68:	b580      	push	{r7, lr}
 8011f6a:	b084      	sub	sp, #16
 8011f6c:	af00      	add	r7, sp, #0
 8011f6e:	6078      	str	r0, [r7, #4]
 8011f70:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8011f72:	2300      	movs	r3, #0
 8011f74:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8011f76:	683b      	ldr	r3, [r7, #0]
 8011f78:	889b      	ldrh	r3, [r3, #4]
 8011f7a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011f7c:	683b      	ldr	r3, [r7, #0]
 8011f7e:	781b      	ldrb	r3, [r3, #0]
 8011f80:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8011f84:	2b40      	cmp	r3, #64	; 0x40
 8011f86:	d007      	beq.n	8011f98 <USBD_StdEPReq+0x30>
 8011f88:	2b40      	cmp	r3, #64	; 0x40
 8011f8a:	f200 817f 	bhi.w	801228c <USBD_StdEPReq+0x324>
 8011f8e:	2b00      	cmp	r3, #0
 8011f90:	d02a      	beq.n	8011fe8 <USBD_StdEPReq+0x80>
 8011f92:	2b20      	cmp	r3, #32
 8011f94:	f040 817a 	bne.w	801228c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8011f98:	7bbb      	ldrb	r3, [r7, #14]
 8011f9a:	4619      	mov	r1, r3
 8011f9c:	6878      	ldr	r0, [r7, #4]
 8011f9e:	f7ff fe83 	bl	8011ca8 <USBD_CoreFindEP>
 8011fa2:	4603      	mov	r3, r0
 8011fa4:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8011fa6:	7b7b      	ldrb	r3, [r7, #13]
 8011fa8:	2bff      	cmp	r3, #255	; 0xff
 8011faa:	f000 8174 	beq.w	8012296 <USBD_StdEPReq+0x32e>
 8011fae:	7b7b      	ldrb	r3, [r7, #13]
 8011fb0:	2b00      	cmp	r3, #0
 8011fb2:	f040 8170 	bne.w	8012296 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8011fb6:	7b7a      	ldrb	r2, [r7, #13]
 8011fb8:	687b      	ldr	r3, [r7, #4]
 8011fba:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8011fbe:	7b7a      	ldrb	r2, [r7, #13]
 8011fc0:	687b      	ldr	r3, [r7, #4]
 8011fc2:	32ae      	adds	r2, #174	; 0xae
 8011fc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011fc8:	689b      	ldr	r3, [r3, #8]
 8011fca:	2b00      	cmp	r3, #0
 8011fcc:	f000 8163 	beq.w	8012296 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8011fd0:	7b7a      	ldrb	r2, [r7, #13]
 8011fd2:	687b      	ldr	r3, [r7, #4]
 8011fd4:	32ae      	adds	r2, #174	; 0xae
 8011fd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011fda:	689b      	ldr	r3, [r3, #8]
 8011fdc:	6839      	ldr	r1, [r7, #0]
 8011fde:	6878      	ldr	r0, [r7, #4]
 8011fe0:	4798      	blx	r3
 8011fe2:	4603      	mov	r3, r0
 8011fe4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8011fe6:	e156      	b.n	8012296 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8011fe8:	683b      	ldr	r3, [r7, #0]
 8011fea:	785b      	ldrb	r3, [r3, #1]
 8011fec:	2b03      	cmp	r3, #3
 8011fee:	d008      	beq.n	8012002 <USBD_StdEPReq+0x9a>
 8011ff0:	2b03      	cmp	r3, #3
 8011ff2:	f300 8145 	bgt.w	8012280 <USBD_StdEPReq+0x318>
 8011ff6:	2b00      	cmp	r3, #0
 8011ff8:	f000 809b 	beq.w	8012132 <USBD_StdEPReq+0x1ca>
 8011ffc:	2b01      	cmp	r3, #1
 8011ffe:	d03c      	beq.n	801207a <USBD_StdEPReq+0x112>
 8012000:	e13e      	b.n	8012280 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8012002:	687b      	ldr	r3, [r7, #4]
 8012004:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012008:	b2db      	uxtb	r3, r3
 801200a:	2b02      	cmp	r3, #2
 801200c:	d002      	beq.n	8012014 <USBD_StdEPReq+0xac>
 801200e:	2b03      	cmp	r3, #3
 8012010:	d016      	beq.n	8012040 <USBD_StdEPReq+0xd8>
 8012012:	e02c      	b.n	801206e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8012014:	7bbb      	ldrb	r3, [r7, #14]
 8012016:	2b00      	cmp	r3, #0
 8012018:	d00d      	beq.n	8012036 <USBD_StdEPReq+0xce>
 801201a:	7bbb      	ldrb	r3, [r7, #14]
 801201c:	2b80      	cmp	r3, #128	; 0x80
 801201e:	d00a      	beq.n	8012036 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8012020:	7bbb      	ldrb	r3, [r7, #14]
 8012022:	4619      	mov	r1, r3
 8012024:	6878      	ldr	r0, [r7, #4]
 8012026:	f001 f9d1 	bl	80133cc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 801202a:	2180      	movs	r1, #128	; 0x80
 801202c:	6878      	ldr	r0, [r7, #4]
 801202e:	f001 f9cd 	bl	80133cc <USBD_LL_StallEP>
 8012032:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8012034:	e020      	b.n	8012078 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8012036:	6839      	ldr	r1, [r7, #0]
 8012038:	6878      	ldr	r0, [r7, #4]
 801203a:	f000 fc7a 	bl	8012932 <USBD_CtlError>
              break;
 801203e:	e01b      	b.n	8012078 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8012040:	683b      	ldr	r3, [r7, #0]
 8012042:	885b      	ldrh	r3, [r3, #2]
 8012044:	2b00      	cmp	r3, #0
 8012046:	d10e      	bne.n	8012066 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8012048:	7bbb      	ldrb	r3, [r7, #14]
 801204a:	2b00      	cmp	r3, #0
 801204c:	d00b      	beq.n	8012066 <USBD_StdEPReq+0xfe>
 801204e:	7bbb      	ldrb	r3, [r7, #14]
 8012050:	2b80      	cmp	r3, #128	; 0x80
 8012052:	d008      	beq.n	8012066 <USBD_StdEPReq+0xfe>
 8012054:	683b      	ldr	r3, [r7, #0]
 8012056:	88db      	ldrh	r3, [r3, #6]
 8012058:	2b00      	cmp	r3, #0
 801205a:	d104      	bne.n	8012066 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 801205c:	7bbb      	ldrb	r3, [r7, #14]
 801205e:	4619      	mov	r1, r3
 8012060:	6878      	ldr	r0, [r7, #4]
 8012062:	f001 f9b3 	bl	80133cc <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8012066:	6878      	ldr	r0, [r7, #4]
 8012068:	f000 fd2e 	bl	8012ac8 <USBD_CtlSendStatus>

              break;
 801206c:	e004      	b.n	8012078 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 801206e:	6839      	ldr	r1, [r7, #0]
 8012070:	6878      	ldr	r0, [r7, #4]
 8012072:	f000 fc5e 	bl	8012932 <USBD_CtlError>
              break;
 8012076:	bf00      	nop
          }
          break;
 8012078:	e107      	b.n	801228a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 801207a:	687b      	ldr	r3, [r7, #4]
 801207c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012080:	b2db      	uxtb	r3, r3
 8012082:	2b02      	cmp	r3, #2
 8012084:	d002      	beq.n	801208c <USBD_StdEPReq+0x124>
 8012086:	2b03      	cmp	r3, #3
 8012088:	d016      	beq.n	80120b8 <USBD_StdEPReq+0x150>
 801208a:	e04b      	b.n	8012124 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801208c:	7bbb      	ldrb	r3, [r7, #14]
 801208e:	2b00      	cmp	r3, #0
 8012090:	d00d      	beq.n	80120ae <USBD_StdEPReq+0x146>
 8012092:	7bbb      	ldrb	r3, [r7, #14]
 8012094:	2b80      	cmp	r3, #128	; 0x80
 8012096:	d00a      	beq.n	80120ae <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8012098:	7bbb      	ldrb	r3, [r7, #14]
 801209a:	4619      	mov	r1, r3
 801209c:	6878      	ldr	r0, [r7, #4]
 801209e:	f001 f995 	bl	80133cc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80120a2:	2180      	movs	r1, #128	; 0x80
 80120a4:	6878      	ldr	r0, [r7, #4]
 80120a6:	f001 f991 	bl	80133cc <USBD_LL_StallEP>
 80120aa:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80120ac:	e040      	b.n	8012130 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80120ae:	6839      	ldr	r1, [r7, #0]
 80120b0:	6878      	ldr	r0, [r7, #4]
 80120b2:	f000 fc3e 	bl	8012932 <USBD_CtlError>
              break;
 80120b6:	e03b      	b.n	8012130 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80120b8:	683b      	ldr	r3, [r7, #0]
 80120ba:	885b      	ldrh	r3, [r3, #2]
 80120bc:	2b00      	cmp	r3, #0
 80120be:	d136      	bne.n	801212e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80120c0:	7bbb      	ldrb	r3, [r7, #14]
 80120c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80120c6:	2b00      	cmp	r3, #0
 80120c8:	d004      	beq.n	80120d4 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80120ca:	7bbb      	ldrb	r3, [r7, #14]
 80120cc:	4619      	mov	r1, r3
 80120ce:	6878      	ldr	r0, [r7, #4]
 80120d0:	f001 f99b 	bl	801340a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80120d4:	6878      	ldr	r0, [r7, #4]
 80120d6:	f000 fcf7 	bl	8012ac8 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80120da:	7bbb      	ldrb	r3, [r7, #14]
 80120dc:	4619      	mov	r1, r3
 80120de:	6878      	ldr	r0, [r7, #4]
 80120e0:	f7ff fde2 	bl	8011ca8 <USBD_CoreFindEP>
 80120e4:	4603      	mov	r3, r0
 80120e6:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80120e8:	7b7b      	ldrb	r3, [r7, #13]
 80120ea:	2bff      	cmp	r3, #255	; 0xff
 80120ec:	d01f      	beq.n	801212e <USBD_StdEPReq+0x1c6>
 80120ee:	7b7b      	ldrb	r3, [r7, #13]
 80120f0:	2b00      	cmp	r3, #0
 80120f2:	d11c      	bne.n	801212e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80120f4:	7b7a      	ldrb	r2, [r7, #13]
 80120f6:	687b      	ldr	r3, [r7, #4]
 80120f8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80120fc:	7b7a      	ldrb	r2, [r7, #13]
 80120fe:	687b      	ldr	r3, [r7, #4]
 8012100:	32ae      	adds	r2, #174	; 0xae
 8012102:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012106:	689b      	ldr	r3, [r3, #8]
 8012108:	2b00      	cmp	r3, #0
 801210a:	d010      	beq.n	801212e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 801210c:	7b7a      	ldrb	r2, [r7, #13]
 801210e:	687b      	ldr	r3, [r7, #4]
 8012110:	32ae      	adds	r2, #174	; 0xae
 8012112:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012116:	689b      	ldr	r3, [r3, #8]
 8012118:	6839      	ldr	r1, [r7, #0]
 801211a:	6878      	ldr	r0, [r7, #4]
 801211c:	4798      	blx	r3
 801211e:	4603      	mov	r3, r0
 8012120:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8012122:	e004      	b.n	801212e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8012124:	6839      	ldr	r1, [r7, #0]
 8012126:	6878      	ldr	r0, [r7, #4]
 8012128:	f000 fc03 	bl	8012932 <USBD_CtlError>
              break;
 801212c:	e000      	b.n	8012130 <USBD_StdEPReq+0x1c8>
              break;
 801212e:	bf00      	nop
          }
          break;
 8012130:	e0ab      	b.n	801228a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8012132:	687b      	ldr	r3, [r7, #4]
 8012134:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012138:	b2db      	uxtb	r3, r3
 801213a:	2b02      	cmp	r3, #2
 801213c:	d002      	beq.n	8012144 <USBD_StdEPReq+0x1dc>
 801213e:	2b03      	cmp	r3, #3
 8012140:	d032      	beq.n	80121a8 <USBD_StdEPReq+0x240>
 8012142:	e097      	b.n	8012274 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8012144:	7bbb      	ldrb	r3, [r7, #14]
 8012146:	2b00      	cmp	r3, #0
 8012148:	d007      	beq.n	801215a <USBD_StdEPReq+0x1f2>
 801214a:	7bbb      	ldrb	r3, [r7, #14]
 801214c:	2b80      	cmp	r3, #128	; 0x80
 801214e:	d004      	beq.n	801215a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8012150:	6839      	ldr	r1, [r7, #0]
 8012152:	6878      	ldr	r0, [r7, #4]
 8012154:	f000 fbed 	bl	8012932 <USBD_CtlError>
                break;
 8012158:	e091      	b.n	801227e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801215a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801215e:	2b00      	cmp	r3, #0
 8012160:	da0b      	bge.n	801217a <USBD_StdEPReq+0x212>
 8012162:	7bbb      	ldrb	r3, [r7, #14]
 8012164:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8012168:	4613      	mov	r3, r2
 801216a:	009b      	lsls	r3, r3, #2
 801216c:	4413      	add	r3, r2
 801216e:	009b      	lsls	r3, r3, #2
 8012170:	3310      	adds	r3, #16
 8012172:	687a      	ldr	r2, [r7, #4]
 8012174:	4413      	add	r3, r2
 8012176:	3304      	adds	r3, #4
 8012178:	e00b      	b.n	8012192 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801217a:	7bbb      	ldrb	r3, [r7, #14]
 801217c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8012180:	4613      	mov	r3, r2
 8012182:	009b      	lsls	r3, r3, #2
 8012184:	4413      	add	r3, r2
 8012186:	009b      	lsls	r3, r3, #2
 8012188:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 801218c:	687a      	ldr	r2, [r7, #4]
 801218e:	4413      	add	r3, r2
 8012190:	3304      	adds	r3, #4
 8012192:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8012194:	68bb      	ldr	r3, [r7, #8]
 8012196:	2200      	movs	r2, #0
 8012198:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 801219a:	68bb      	ldr	r3, [r7, #8]
 801219c:	2202      	movs	r2, #2
 801219e:	4619      	mov	r1, r3
 80121a0:	6878      	ldr	r0, [r7, #4]
 80121a2:	f000 fc37 	bl	8012a14 <USBD_CtlSendData>
              break;
 80121a6:	e06a      	b.n	801227e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80121a8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80121ac:	2b00      	cmp	r3, #0
 80121ae:	da11      	bge.n	80121d4 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80121b0:	7bbb      	ldrb	r3, [r7, #14]
 80121b2:	f003 020f 	and.w	r2, r3, #15
 80121b6:	6879      	ldr	r1, [r7, #4]
 80121b8:	4613      	mov	r3, r2
 80121ba:	009b      	lsls	r3, r3, #2
 80121bc:	4413      	add	r3, r2
 80121be:	009b      	lsls	r3, r3, #2
 80121c0:	440b      	add	r3, r1
 80121c2:	3324      	adds	r3, #36	; 0x24
 80121c4:	881b      	ldrh	r3, [r3, #0]
 80121c6:	2b00      	cmp	r3, #0
 80121c8:	d117      	bne.n	80121fa <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80121ca:	6839      	ldr	r1, [r7, #0]
 80121cc:	6878      	ldr	r0, [r7, #4]
 80121ce:	f000 fbb0 	bl	8012932 <USBD_CtlError>
                  break;
 80121d2:	e054      	b.n	801227e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80121d4:	7bbb      	ldrb	r3, [r7, #14]
 80121d6:	f003 020f 	and.w	r2, r3, #15
 80121da:	6879      	ldr	r1, [r7, #4]
 80121dc:	4613      	mov	r3, r2
 80121de:	009b      	lsls	r3, r3, #2
 80121e0:	4413      	add	r3, r2
 80121e2:	009b      	lsls	r3, r3, #2
 80121e4:	440b      	add	r3, r1
 80121e6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80121ea:	881b      	ldrh	r3, [r3, #0]
 80121ec:	2b00      	cmp	r3, #0
 80121ee:	d104      	bne.n	80121fa <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80121f0:	6839      	ldr	r1, [r7, #0]
 80121f2:	6878      	ldr	r0, [r7, #4]
 80121f4:	f000 fb9d 	bl	8012932 <USBD_CtlError>
                  break;
 80121f8:	e041      	b.n	801227e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80121fa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80121fe:	2b00      	cmp	r3, #0
 8012200:	da0b      	bge.n	801221a <USBD_StdEPReq+0x2b2>
 8012202:	7bbb      	ldrb	r3, [r7, #14]
 8012204:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8012208:	4613      	mov	r3, r2
 801220a:	009b      	lsls	r3, r3, #2
 801220c:	4413      	add	r3, r2
 801220e:	009b      	lsls	r3, r3, #2
 8012210:	3310      	adds	r3, #16
 8012212:	687a      	ldr	r2, [r7, #4]
 8012214:	4413      	add	r3, r2
 8012216:	3304      	adds	r3, #4
 8012218:	e00b      	b.n	8012232 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801221a:	7bbb      	ldrb	r3, [r7, #14]
 801221c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8012220:	4613      	mov	r3, r2
 8012222:	009b      	lsls	r3, r3, #2
 8012224:	4413      	add	r3, r2
 8012226:	009b      	lsls	r3, r3, #2
 8012228:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 801222c:	687a      	ldr	r2, [r7, #4]
 801222e:	4413      	add	r3, r2
 8012230:	3304      	adds	r3, #4
 8012232:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8012234:	7bbb      	ldrb	r3, [r7, #14]
 8012236:	2b00      	cmp	r3, #0
 8012238:	d002      	beq.n	8012240 <USBD_StdEPReq+0x2d8>
 801223a:	7bbb      	ldrb	r3, [r7, #14]
 801223c:	2b80      	cmp	r3, #128	; 0x80
 801223e:	d103      	bne.n	8012248 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8012240:	68bb      	ldr	r3, [r7, #8]
 8012242:	2200      	movs	r2, #0
 8012244:	601a      	str	r2, [r3, #0]
 8012246:	e00e      	b.n	8012266 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8012248:	7bbb      	ldrb	r3, [r7, #14]
 801224a:	4619      	mov	r1, r3
 801224c:	6878      	ldr	r0, [r7, #4]
 801224e:	f001 f8fb 	bl	8013448 <USBD_LL_IsStallEP>
 8012252:	4603      	mov	r3, r0
 8012254:	2b00      	cmp	r3, #0
 8012256:	d003      	beq.n	8012260 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8012258:	68bb      	ldr	r3, [r7, #8]
 801225a:	2201      	movs	r2, #1
 801225c:	601a      	str	r2, [r3, #0]
 801225e:	e002      	b.n	8012266 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8012260:	68bb      	ldr	r3, [r7, #8]
 8012262:	2200      	movs	r2, #0
 8012264:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8012266:	68bb      	ldr	r3, [r7, #8]
 8012268:	2202      	movs	r2, #2
 801226a:	4619      	mov	r1, r3
 801226c:	6878      	ldr	r0, [r7, #4]
 801226e:	f000 fbd1 	bl	8012a14 <USBD_CtlSendData>
              break;
 8012272:	e004      	b.n	801227e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8012274:	6839      	ldr	r1, [r7, #0]
 8012276:	6878      	ldr	r0, [r7, #4]
 8012278:	f000 fb5b 	bl	8012932 <USBD_CtlError>
              break;
 801227c:	bf00      	nop
          }
          break;
 801227e:	e004      	b.n	801228a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8012280:	6839      	ldr	r1, [r7, #0]
 8012282:	6878      	ldr	r0, [r7, #4]
 8012284:	f000 fb55 	bl	8012932 <USBD_CtlError>
          break;
 8012288:	bf00      	nop
      }
      break;
 801228a:	e005      	b.n	8012298 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 801228c:	6839      	ldr	r1, [r7, #0]
 801228e:	6878      	ldr	r0, [r7, #4]
 8012290:	f000 fb4f 	bl	8012932 <USBD_CtlError>
      break;
 8012294:	e000      	b.n	8012298 <USBD_StdEPReq+0x330>
      break;
 8012296:	bf00      	nop
  }

  return ret;
 8012298:	7bfb      	ldrb	r3, [r7, #15]
}
 801229a:	4618      	mov	r0, r3
 801229c:	3710      	adds	r7, #16
 801229e:	46bd      	mov	sp, r7
 80122a0:	bd80      	pop	{r7, pc}
	...

080122a4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80122a4:	b580      	push	{r7, lr}
 80122a6:	b084      	sub	sp, #16
 80122a8:	af00      	add	r7, sp, #0
 80122aa:	6078      	str	r0, [r7, #4]
 80122ac:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80122ae:	2300      	movs	r3, #0
 80122b0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80122b2:	2300      	movs	r3, #0
 80122b4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80122b6:	2300      	movs	r3, #0
 80122b8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80122ba:	683b      	ldr	r3, [r7, #0]
 80122bc:	885b      	ldrh	r3, [r3, #2]
 80122be:	0a1b      	lsrs	r3, r3, #8
 80122c0:	b29b      	uxth	r3, r3
 80122c2:	3b01      	subs	r3, #1
 80122c4:	2b06      	cmp	r3, #6
 80122c6:	f200 8128 	bhi.w	801251a <USBD_GetDescriptor+0x276>
 80122ca:	a201      	add	r2, pc, #4	; (adr r2, 80122d0 <USBD_GetDescriptor+0x2c>)
 80122cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80122d0:	080122ed 	.word	0x080122ed
 80122d4:	08012305 	.word	0x08012305
 80122d8:	08012345 	.word	0x08012345
 80122dc:	0801251b 	.word	0x0801251b
 80122e0:	0801251b 	.word	0x0801251b
 80122e4:	080124bb 	.word	0x080124bb
 80122e8:	080124e7 	.word	0x080124e7
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80122ec:	687b      	ldr	r3, [r7, #4]
 80122ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80122f2:	681b      	ldr	r3, [r3, #0]
 80122f4:	687a      	ldr	r2, [r7, #4]
 80122f6:	7c12      	ldrb	r2, [r2, #16]
 80122f8:	f107 0108 	add.w	r1, r7, #8
 80122fc:	4610      	mov	r0, r2
 80122fe:	4798      	blx	r3
 8012300:	60f8      	str	r0, [r7, #12]
      break;
 8012302:	e112      	b.n	801252a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8012304:	687b      	ldr	r3, [r7, #4]
 8012306:	7c1b      	ldrb	r3, [r3, #16]
 8012308:	2b00      	cmp	r3, #0
 801230a:	d10d      	bne.n	8012328 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 801230c:	687b      	ldr	r3, [r7, #4]
 801230e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012312:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012314:	f107 0208 	add.w	r2, r7, #8
 8012318:	4610      	mov	r0, r2
 801231a:	4798      	blx	r3
 801231c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801231e:	68fb      	ldr	r3, [r7, #12]
 8012320:	3301      	adds	r3, #1
 8012322:	2202      	movs	r2, #2
 8012324:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8012326:	e100      	b.n	801252a <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8012328:	687b      	ldr	r3, [r7, #4]
 801232a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801232e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012330:	f107 0208 	add.w	r2, r7, #8
 8012334:	4610      	mov	r0, r2
 8012336:	4798      	blx	r3
 8012338:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801233a:	68fb      	ldr	r3, [r7, #12]
 801233c:	3301      	adds	r3, #1
 801233e:	2202      	movs	r2, #2
 8012340:	701a      	strb	r2, [r3, #0]
      break;
 8012342:	e0f2      	b.n	801252a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8012344:	683b      	ldr	r3, [r7, #0]
 8012346:	885b      	ldrh	r3, [r3, #2]
 8012348:	b2db      	uxtb	r3, r3
 801234a:	2b05      	cmp	r3, #5
 801234c:	f200 80ac 	bhi.w	80124a8 <USBD_GetDescriptor+0x204>
 8012350:	a201      	add	r2, pc, #4	; (adr r2, 8012358 <USBD_GetDescriptor+0xb4>)
 8012352:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012356:	bf00      	nop
 8012358:	08012371 	.word	0x08012371
 801235c:	080123a5 	.word	0x080123a5
 8012360:	080123d9 	.word	0x080123d9
 8012364:	0801240d 	.word	0x0801240d
 8012368:	08012441 	.word	0x08012441
 801236c:	08012475 	.word	0x08012475
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8012370:	687b      	ldr	r3, [r7, #4]
 8012372:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012376:	685b      	ldr	r3, [r3, #4]
 8012378:	2b00      	cmp	r3, #0
 801237a:	d00b      	beq.n	8012394 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 801237c:	687b      	ldr	r3, [r7, #4]
 801237e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012382:	685b      	ldr	r3, [r3, #4]
 8012384:	687a      	ldr	r2, [r7, #4]
 8012386:	7c12      	ldrb	r2, [r2, #16]
 8012388:	f107 0108 	add.w	r1, r7, #8
 801238c:	4610      	mov	r0, r2
 801238e:	4798      	blx	r3
 8012390:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8012392:	e091      	b.n	80124b8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8012394:	6839      	ldr	r1, [r7, #0]
 8012396:	6878      	ldr	r0, [r7, #4]
 8012398:	f000 facb 	bl	8012932 <USBD_CtlError>
            err++;
 801239c:	7afb      	ldrb	r3, [r7, #11]
 801239e:	3301      	adds	r3, #1
 80123a0:	72fb      	strb	r3, [r7, #11]
          break;
 80123a2:	e089      	b.n	80124b8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80123a4:	687b      	ldr	r3, [r7, #4]
 80123a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80123aa:	689b      	ldr	r3, [r3, #8]
 80123ac:	2b00      	cmp	r3, #0
 80123ae:	d00b      	beq.n	80123c8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80123b0:	687b      	ldr	r3, [r7, #4]
 80123b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80123b6:	689b      	ldr	r3, [r3, #8]
 80123b8:	687a      	ldr	r2, [r7, #4]
 80123ba:	7c12      	ldrb	r2, [r2, #16]
 80123bc:	f107 0108 	add.w	r1, r7, #8
 80123c0:	4610      	mov	r0, r2
 80123c2:	4798      	blx	r3
 80123c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80123c6:	e077      	b.n	80124b8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80123c8:	6839      	ldr	r1, [r7, #0]
 80123ca:	6878      	ldr	r0, [r7, #4]
 80123cc:	f000 fab1 	bl	8012932 <USBD_CtlError>
            err++;
 80123d0:	7afb      	ldrb	r3, [r7, #11]
 80123d2:	3301      	adds	r3, #1
 80123d4:	72fb      	strb	r3, [r7, #11]
          break;
 80123d6:	e06f      	b.n	80124b8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80123d8:	687b      	ldr	r3, [r7, #4]
 80123da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80123de:	68db      	ldr	r3, [r3, #12]
 80123e0:	2b00      	cmp	r3, #0
 80123e2:	d00b      	beq.n	80123fc <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80123e4:	687b      	ldr	r3, [r7, #4]
 80123e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80123ea:	68db      	ldr	r3, [r3, #12]
 80123ec:	687a      	ldr	r2, [r7, #4]
 80123ee:	7c12      	ldrb	r2, [r2, #16]
 80123f0:	f107 0108 	add.w	r1, r7, #8
 80123f4:	4610      	mov	r0, r2
 80123f6:	4798      	blx	r3
 80123f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80123fa:	e05d      	b.n	80124b8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80123fc:	6839      	ldr	r1, [r7, #0]
 80123fe:	6878      	ldr	r0, [r7, #4]
 8012400:	f000 fa97 	bl	8012932 <USBD_CtlError>
            err++;
 8012404:	7afb      	ldrb	r3, [r7, #11]
 8012406:	3301      	adds	r3, #1
 8012408:	72fb      	strb	r3, [r7, #11]
          break;
 801240a:	e055      	b.n	80124b8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 801240c:	687b      	ldr	r3, [r7, #4]
 801240e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012412:	691b      	ldr	r3, [r3, #16]
 8012414:	2b00      	cmp	r3, #0
 8012416:	d00b      	beq.n	8012430 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8012418:	687b      	ldr	r3, [r7, #4]
 801241a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801241e:	691b      	ldr	r3, [r3, #16]
 8012420:	687a      	ldr	r2, [r7, #4]
 8012422:	7c12      	ldrb	r2, [r2, #16]
 8012424:	f107 0108 	add.w	r1, r7, #8
 8012428:	4610      	mov	r0, r2
 801242a:	4798      	blx	r3
 801242c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801242e:	e043      	b.n	80124b8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8012430:	6839      	ldr	r1, [r7, #0]
 8012432:	6878      	ldr	r0, [r7, #4]
 8012434:	f000 fa7d 	bl	8012932 <USBD_CtlError>
            err++;
 8012438:	7afb      	ldrb	r3, [r7, #11]
 801243a:	3301      	adds	r3, #1
 801243c:	72fb      	strb	r3, [r7, #11]
          break;
 801243e:	e03b      	b.n	80124b8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8012440:	687b      	ldr	r3, [r7, #4]
 8012442:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012446:	695b      	ldr	r3, [r3, #20]
 8012448:	2b00      	cmp	r3, #0
 801244a:	d00b      	beq.n	8012464 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 801244c:	687b      	ldr	r3, [r7, #4]
 801244e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012452:	695b      	ldr	r3, [r3, #20]
 8012454:	687a      	ldr	r2, [r7, #4]
 8012456:	7c12      	ldrb	r2, [r2, #16]
 8012458:	f107 0108 	add.w	r1, r7, #8
 801245c:	4610      	mov	r0, r2
 801245e:	4798      	blx	r3
 8012460:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8012462:	e029      	b.n	80124b8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8012464:	6839      	ldr	r1, [r7, #0]
 8012466:	6878      	ldr	r0, [r7, #4]
 8012468:	f000 fa63 	bl	8012932 <USBD_CtlError>
            err++;
 801246c:	7afb      	ldrb	r3, [r7, #11]
 801246e:	3301      	adds	r3, #1
 8012470:	72fb      	strb	r3, [r7, #11]
          break;
 8012472:	e021      	b.n	80124b8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8012474:	687b      	ldr	r3, [r7, #4]
 8012476:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801247a:	699b      	ldr	r3, [r3, #24]
 801247c:	2b00      	cmp	r3, #0
 801247e:	d00b      	beq.n	8012498 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8012480:	687b      	ldr	r3, [r7, #4]
 8012482:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012486:	699b      	ldr	r3, [r3, #24]
 8012488:	687a      	ldr	r2, [r7, #4]
 801248a:	7c12      	ldrb	r2, [r2, #16]
 801248c:	f107 0108 	add.w	r1, r7, #8
 8012490:	4610      	mov	r0, r2
 8012492:	4798      	blx	r3
 8012494:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8012496:	e00f      	b.n	80124b8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8012498:	6839      	ldr	r1, [r7, #0]
 801249a:	6878      	ldr	r0, [r7, #4]
 801249c:	f000 fa49 	bl	8012932 <USBD_CtlError>
            err++;
 80124a0:	7afb      	ldrb	r3, [r7, #11]
 80124a2:	3301      	adds	r3, #1
 80124a4:	72fb      	strb	r3, [r7, #11]
          break;
 80124a6:	e007      	b.n	80124b8 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80124a8:	6839      	ldr	r1, [r7, #0]
 80124aa:	6878      	ldr	r0, [r7, #4]
 80124ac:	f000 fa41 	bl	8012932 <USBD_CtlError>
          err++;
 80124b0:	7afb      	ldrb	r3, [r7, #11]
 80124b2:	3301      	adds	r3, #1
 80124b4:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80124b6:	bf00      	nop
      }
      break;
 80124b8:	e037      	b.n	801252a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80124ba:	687b      	ldr	r3, [r7, #4]
 80124bc:	7c1b      	ldrb	r3, [r3, #16]
 80124be:	2b00      	cmp	r3, #0
 80124c0:	d109      	bne.n	80124d6 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80124c2:	687b      	ldr	r3, [r7, #4]
 80124c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80124c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80124ca:	f107 0208 	add.w	r2, r7, #8
 80124ce:	4610      	mov	r0, r2
 80124d0:	4798      	blx	r3
 80124d2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80124d4:	e029      	b.n	801252a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80124d6:	6839      	ldr	r1, [r7, #0]
 80124d8:	6878      	ldr	r0, [r7, #4]
 80124da:	f000 fa2a 	bl	8012932 <USBD_CtlError>
        err++;
 80124de:	7afb      	ldrb	r3, [r7, #11]
 80124e0:	3301      	adds	r3, #1
 80124e2:	72fb      	strb	r3, [r7, #11]
      break;
 80124e4:	e021      	b.n	801252a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80124e6:	687b      	ldr	r3, [r7, #4]
 80124e8:	7c1b      	ldrb	r3, [r3, #16]
 80124ea:	2b00      	cmp	r3, #0
 80124ec:	d10d      	bne.n	801250a <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80124ee:	687b      	ldr	r3, [r7, #4]
 80124f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80124f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80124f6:	f107 0208 	add.w	r2, r7, #8
 80124fa:	4610      	mov	r0, r2
 80124fc:	4798      	blx	r3
 80124fe:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8012500:	68fb      	ldr	r3, [r7, #12]
 8012502:	3301      	adds	r3, #1
 8012504:	2207      	movs	r2, #7
 8012506:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8012508:	e00f      	b.n	801252a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 801250a:	6839      	ldr	r1, [r7, #0]
 801250c:	6878      	ldr	r0, [r7, #4]
 801250e:	f000 fa10 	bl	8012932 <USBD_CtlError>
        err++;
 8012512:	7afb      	ldrb	r3, [r7, #11]
 8012514:	3301      	adds	r3, #1
 8012516:	72fb      	strb	r3, [r7, #11]
      break;
 8012518:	e007      	b.n	801252a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 801251a:	6839      	ldr	r1, [r7, #0]
 801251c:	6878      	ldr	r0, [r7, #4]
 801251e:	f000 fa08 	bl	8012932 <USBD_CtlError>
      err++;
 8012522:	7afb      	ldrb	r3, [r7, #11]
 8012524:	3301      	adds	r3, #1
 8012526:	72fb      	strb	r3, [r7, #11]
      break;
 8012528:	bf00      	nop
  }

  if (err != 0U)
 801252a:	7afb      	ldrb	r3, [r7, #11]
 801252c:	2b00      	cmp	r3, #0
 801252e:	d11e      	bne.n	801256e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8012530:	683b      	ldr	r3, [r7, #0]
 8012532:	88db      	ldrh	r3, [r3, #6]
 8012534:	2b00      	cmp	r3, #0
 8012536:	d016      	beq.n	8012566 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8012538:	893b      	ldrh	r3, [r7, #8]
 801253a:	2b00      	cmp	r3, #0
 801253c:	d00e      	beq.n	801255c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 801253e:	683b      	ldr	r3, [r7, #0]
 8012540:	88da      	ldrh	r2, [r3, #6]
 8012542:	893b      	ldrh	r3, [r7, #8]
 8012544:	4293      	cmp	r3, r2
 8012546:	bf28      	it	cs
 8012548:	4613      	movcs	r3, r2
 801254a:	b29b      	uxth	r3, r3
 801254c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 801254e:	893b      	ldrh	r3, [r7, #8]
 8012550:	461a      	mov	r2, r3
 8012552:	68f9      	ldr	r1, [r7, #12]
 8012554:	6878      	ldr	r0, [r7, #4]
 8012556:	f000 fa5d 	bl	8012a14 <USBD_CtlSendData>
 801255a:	e009      	b.n	8012570 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 801255c:	6839      	ldr	r1, [r7, #0]
 801255e:	6878      	ldr	r0, [r7, #4]
 8012560:	f000 f9e7 	bl	8012932 <USBD_CtlError>
 8012564:	e004      	b.n	8012570 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8012566:	6878      	ldr	r0, [r7, #4]
 8012568:	f000 faae 	bl	8012ac8 <USBD_CtlSendStatus>
 801256c:	e000      	b.n	8012570 <USBD_GetDescriptor+0x2cc>
    return;
 801256e:	bf00      	nop
  }
}
 8012570:	3710      	adds	r7, #16
 8012572:	46bd      	mov	sp, r7
 8012574:	bd80      	pop	{r7, pc}
 8012576:	bf00      	nop

08012578 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012578:	b580      	push	{r7, lr}
 801257a:	b084      	sub	sp, #16
 801257c:	af00      	add	r7, sp, #0
 801257e:	6078      	str	r0, [r7, #4]
 8012580:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8012582:	683b      	ldr	r3, [r7, #0]
 8012584:	889b      	ldrh	r3, [r3, #4]
 8012586:	2b00      	cmp	r3, #0
 8012588:	d131      	bne.n	80125ee <USBD_SetAddress+0x76>
 801258a:	683b      	ldr	r3, [r7, #0]
 801258c:	88db      	ldrh	r3, [r3, #6]
 801258e:	2b00      	cmp	r3, #0
 8012590:	d12d      	bne.n	80125ee <USBD_SetAddress+0x76>
 8012592:	683b      	ldr	r3, [r7, #0]
 8012594:	885b      	ldrh	r3, [r3, #2]
 8012596:	2b7f      	cmp	r3, #127	; 0x7f
 8012598:	d829      	bhi.n	80125ee <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 801259a:	683b      	ldr	r3, [r7, #0]
 801259c:	885b      	ldrh	r3, [r3, #2]
 801259e:	b2db      	uxtb	r3, r3
 80125a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80125a4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80125a6:	687b      	ldr	r3, [r7, #4]
 80125a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80125ac:	b2db      	uxtb	r3, r3
 80125ae:	2b03      	cmp	r3, #3
 80125b0:	d104      	bne.n	80125bc <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80125b2:	6839      	ldr	r1, [r7, #0]
 80125b4:	6878      	ldr	r0, [r7, #4]
 80125b6:	f000 f9bc 	bl	8012932 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80125ba:	e01d      	b.n	80125f8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80125bc:	687b      	ldr	r3, [r7, #4]
 80125be:	7bfa      	ldrb	r2, [r7, #15]
 80125c0:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80125c4:	7bfb      	ldrb	r3, [r7, #15]
 80125c6:	4619      	mov	r1, r3
 80125c8:	6878      	ldr	r0, [r7, #4]
 80125ca:	f000 ff69 	bl	80134a0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80125ce:	6878      	ldr	r0, [r7, #4]
 80125d0:	f000 fa7a 	bl	8012ac8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80125d4:	7bfb      	ldrb	r3, [r7, #15]
 80125d6:	2b00      	cmp	r3, #0
 80125d8:	d004      	beq.n	80125e4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80125da:	687b      	ldr	r3, [r7, #4]
 80125dc:	2202      	movs	r2, #2
 80125de:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80125e2:	e009      	b.n	80125f8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80125e4:	687b      	ldr	r3, [r7, #4]
 80125e6:	2201      	movs	r2, #1
 80125e8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80125ec:	e004      	b.n	80125f8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80125ee:	6839      	ldr	r1, [r7, #0]
 80125f0:	6878      	ldr	r0, [r7, #4]
 80125f2:	f000 f99e 	bl	8012932 <USBD_CtlError>
  }
}
 80125f6:	bf00      	nop
 80125f8:	bf00      	nop
 80125fa:	3710      	adds	r7, #16
 80125fc:	46bd      	mov	sp, r7
 80125fe:	bd80      	pop	{r7, pc}

08012600 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012600:	b580      	push	{r7, lr}
 8012602:	b084      	sub	sp, #16
 8012604:	af00      	add	r7, sp, #0
 8012606:	6078      	str	r0, [r7, #4]
 8012608:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801260a:	2300      	movs	r3, #0
 801260c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 801260e:	683b      	ldr	r3, [r7, #0]
 8012610:	885b      	ldrh	r3, [r3, #2]
 8012612:	b2da      	uxtb	r2, r3
 8012614:	4b4e      	ldr	r3, [pc, #312]	; (8012750 <USBD_SetConfig+0x150>)
 8012616:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8012618:	4b4d      	ldr	r3, [pc, #308]	; (8012750 <USBD_SetConfig+0x150>)
 801261a:	781b      	ldrb	r3, [r3, #0]
 801261c:	2b01      	cmp	r3, #1
 801261e:	d905      	bls.n	801262c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8012620:	6839      	ldr	r1, [r7, #0]
 8012622:	6878      	ldr	r0, [r7, #4]
 8012624:	f000 f985 	bl	8012932 <USBD_CtlError>
    return USBD_FAIL;
 8012628:	2303      	movs	r3, #3
 801262a:	e08c      	b.n	8012746 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 801262c:	687b      	ldr	r3, [r7, #4]
 801262e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012632:	b2db      	uxtb	r3, r3
 8012634:	2b02      	cmp	r3, #2
 8012636:	d002      	beq.n	801263e <USBD_SetConfig+0x3e>
 8012638:	2b03      	cmp	r3, #3
 801263a:	d029      	beq.n	8012690 <USBD_SetConfig+0x90>
 801263c:	e075      	b.n	801272a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 801263e:	4b44      	ldr	r3, [pc, #272]	; (8012750 <USBD_SetConfig+0x150>)
 8012640:	781b      	ldrb	r3, [r3, #0]
 8012642:	2b00      	cmp	r3, #0
 8012644:	d020      	beq.n	8012688 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8012646:	4b42      	ldr	r3, [pc, #264]	; (8012750 <USBD_SetConfig+0x150>)
 8012648:	781b      	ldrb	r3, [r3, #0]
 801264a:	461a      	mov	r2, r3
 801264c:	687b      	ldr	r3, [r7, #4]
 801264e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8012650:	4b3f      	ldr	r3, [pc, #252]	; (8012750 <USBD_SetConfig+0x150>)
 8012652:	781b      	ldrb	r3, [r3, #0]
 8012654:	4619      	mov	r1, r3
 8012656:	6878      	ldr	r0, [r7, #4]
 8012658:	f7fe ffe1 	bl	801161e <USBD_SetClassConfig>
 801265c:	4603      	mov	r3, r0
 801265e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8012660:	7bfb      	ldrb	r3, [r7, #15]
 8012662:	2b00      	cmp	r3, #0
 8012664:	d008      	beq.n	8012678 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8012666:	6839      	ldr	r1, [r7, #0]
 8012668:	6878      	ldr	r0, [r7, #4]
 801266a:	f000 f962 	bl	8012932 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 801266e:	687b      	ldr	r3, [r7, #4]
 8012670:	2202      	movs	r2, #2
 8012672:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8012676:	e065      	b.n	8012744 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8012678:	6878      	ldr	r0, [r7, #4]
 801267a:	f000 fa25 	bl	8012ac8 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 801267e:	687b      	ldr	r3, [r7, #4]
 8012680:	2203      	movs	r2, #3
 8012682:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8012686:	e05d      	b.n	8012744 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8012688:	6878      	ldr	r0, [r7, #4]
 801268a:	f000 fa1d 	bl	8012ac8 <USBD_CtlSendStatus>
      break;
 801268e:	e059      	b.n	8012744 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8012690:	4b2f      	ldr	r3, [pc, #188]	; (8012750 <USBD_SetConfig+0x150>)
 8012692:	781b      	ldrb	r3, [r3, #0]
 8012694:	2b00      	cmp	r3, #0
 8012696:	d112      	bne.n	80126be <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8012698:	687b      	ldr	r3, [r7, #4]
 801269a:	2202      	movs	r2, #2
 801269c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80126a0:	4b2b      	ldr	r3, [pc, #172]	; (8012750 <USBD_SetConfig+0x150>)
 80126a2:	781b      	ldrb	r3, [r3, #0]
 80126a4:	461a      	mov	r2, r3
 80126a6:	687b      	ldr	r3, [r7, #4]
 80126a8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80126aa:	4b29      	ldr	r3, [pc, #164]	; (8012750 <USBD_SetConfig+0x150>)
 80126ac:	781b      	ldrb	r3, [r3, #0]
 80126ae:	4619      	mov	r1, r3
 80126b0:	6878      	ldr	r0, [r7, #4]
 80126b2:	f7fe ffd0 	bl	8011656 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80126b6:	6878      	ldr	r0, [r7, #4]
 80126b8:	f000 fa06 	bl	8012ac8 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80126bc:	e042      	b.n	8012744 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80126be:	4b24      	ldr	r3, [pc, #144]	; (8012750 <USBD_SetConfig+0x150>)
 80126c0:	781b      	ldrb	r3, [r3, #0]
 80126c2:	461a      	mov	r2, r3
 80126c4:	687b      	ldr	r3, [r7, #4]
 80126c6:	685b      	ldr	r3, [r3, #4]
 80126c8:	429a      	cmp	r2, r3
 80126ca:	d02a      	beq.n	8012722 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80126cc:	687b      	ldr	r3, [r7, #4]
 80126ce:	685b      	ldr	r3, [r3, #4]
 80126d0:	b2db      	uxtb	r3, r3
 80126d2:	4619      	mov	r1, r3
 80126d4:	6878      	ldr	r0, [r7, #4]
 80126d6:	f7fe ffbe 	bl	8011656 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80126da:	4b1d      	ldr	r3, [pc, #116]	; (8012750 <USBD_SetConfig+0x150>)
 80126dc:	781b      	ldrb	r3, [r3, #0]
 80126de:	461a      	mov	r2, r3
 80126e0:	687b      	ldr	r3, [r7, #4]
 80126e2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80126e4:	4b1a      	ldr	r3, [pc, #104]	; (8012750 <USBD_SetConfig+0x150>)
 80126e6:	781b      	ldrb	r3, [r3, #0]
 80126e8:	4619      	mov	r1, r3
 80126ea:	6878      	ldr	r0, [r7, #4]
 80126ec:	f7fe ff97 	bl	801161e <USBD_SetClassConfig>
 80126f0:	4603      	mov	r3, r0
 80126f2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80126f4:	7bfb      	ldrb	r3, [r7, #15]
 80126f6:	2b00      	cmp	r3, #0
 80126f8:	d00f      	beq.n	801271a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80126fa:	6839      	ldr	r1, [r7, #0]
 80126fc:	6878      	ldr	r0, [r7, #4]
 80126fe:	f000 f918 	bl	8012932 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8012702:	687b      	ldr	r3, [r7, #4]
 8012704:	685b      	ldr	r3, [r3, #4]
 8012706:	b2db      	uxtb	r3, r3
 8012708:	4619      	mov	r1, r3
 801270a:	6878      	ldr	r0, [r7, #4]
 801270c:	f7fe ffa3 	bl	8011656 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8012710:	687b      	ldr	r3, [r7, #4]
 8012712:	2202      	movs	r2, #2
 8012714:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8012718:	e014      	b.n	8012744 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 801271a:	6878      	ldr	r0, [r7, #4]
 801271c:	f000 f9d4 	bl	8012ac8 <USBD_CtlSendStatus>
      break;
 8012720:	e010      	b.n	8012744 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8012722:	6878      	ldr	r0, [r7, #4]
 8012724:	f000 f9d0 	bl	8012ac8 <USBD_CtlSendStatus>
      break;
 8012728:	e00c      	b.n	8012744 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 801272a:	6839      	ldr	r1, [r7, #0]
 801272c:	6878      	ldr	r0, [r7, #4]
 801272e:	f000 f900 	bl	8012932 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8012732:	4b07      	ldr	r3, [pc, #28]	; (8012750 <USBD_SetConfig+0x150>)
 8012734:	781b      	ldrb	r3, [r3, #0]
 8012736:	4619      	mov	r1, r3
 8012738:	6878      	ldr	r0, [r7, #4]
 801273a:	f7fe ff8c 	bl	8011656 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 801273e:	2303      	movs	r3, #3
 8012740:	73fb      	strb	r3, [r7, #15]
      break;
 8012742:	bf00      	nop
  }

  return ret;
 8012744:	7bfb      	ldrb	r3, [r7, #15]
}
 8012746:	4618      	mov	r0, r3
 8012748:	3710      	adds	r7, #16
 801274a:	46bd      	mov	sp, r7
 801274c:	bd80      	pop	{r7, pc}
 801274e:	bf00      	nop
 8012750:	2000733c 	.word	0x2000733c

08012754 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012754:	b580      	push	{r7, lr}
 8012756:	b082      	sub	sp, #8
 8012758:	af00      	add	r7, sp, #0
 801275a:	6078      	str	r0, [r7, #4]
 801275c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 801275e:	683b      	ldr	r3, [r7, #0]
 8012760:	88db      	ldrh	r3, [r3, #6]
 8012762:	2b01      	cmp	r3, #1
 8012764:	d004      	beq.n	8012770 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8012766:	6839      	ldr	r1, [r7, #0]
 8012768:	6878      	ldr	r0, [r7, #4]
 801276a:	f000 f8e2 	bl	8012932 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 801276e:	e023      	b.n	80127b8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8012770:	687b      	ldr	r3, [r7, #4]
 8012772:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012776:	b2db      	uxtb	r3, r3
 8012778:	2b02      	cmp	r3, #2
 801277a:	dc02      	bgt.n	8012782 <USBD_GetConfig+0x2e>
 801277c:	2b00      	cmp	r3, #0
 801277e:	dc03      	bgt.n	8012788 <USBD_GetConfig+0x34>
 8012780:	e015      	b.n	80127ae <USBD_GetConfig+0x5a>
 8012782:	2b03      	cmp	r3, #3
 8012784:	d00b      	beq.n	801279e <USBD_GetConfig+0x4a>
 8012786:	e012      	b.n	80127ae <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8012788:	687b      	ldr	r3, [r7, #4]
 801278a:	2200      	movs	r2, #0
 801278c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 801278e:	687b      	ldr	r3, [r7, #4]
 8012790:	3308      	adds	r3, #8
 8012792:	2201      	movs	r2, #1
 8012794:	4619      	mov	r1, r3
 8012796:	6878      	ldr	r0, [r7, #4]
 8012798:	f000 f93c 	bl	8012a14 <USBD_CtlSendData>
        break;
 801279c:	e00c      	b.n	80127b8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 801279e:	687b      	ldr	r3, [r7, #4]
 80127a0:	3304      	adds	r3, #4
 80127a2:	2201      	movs	r2, #1
 80127a4:	4619      	mov	r1, r3
 80127a6:	6878      	ldr	r0, [r7, #4]
 80127a8:	f000 f934 	bl	8012a14 <USBD_CtlSendData>
        break;
 80127ac:	e004      	b.n	80127b8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80127ae:	6839      	ldr	r1, [r7, #0]
 80127b0:	6878      	ldr	r0, [r7, #4]
 80127b2:	f000 f8be 	bl	8012932 <USBD_CtlError>
        break;
 80127b6:	bf00      	nop
}
 80127b8:	bf00      	nop
 80127ba:	3708      	adds	r7, #8
 80127bc:	46bd      	mov	sp, r7
 80127be:	bd80      	pop	{r7, pc}

080127c0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80127c0:	b580      	push	{r7, lr}
 80127c2:	b082      	sub	sp, #8
 80127c4:	af00      	add	r7, sp, #0
 80127c6:	6078      	str	r0, [r7, #4]
 80127c8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80127ca:	687b      	ldr	r3, [r7, #4]
 80127cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80127d0:	b2db      	uxtb	r3, r3
 80127d2:	3b01      	subs	r3, #1
 80127d4:	2b02      	cmp	r3, #2
 80127d6:	d81e      	bhi.n	8012816 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80127d8:	683b      	ldr	r3, [r7, #0]
 80127da:	88db      	ldrh	r3, [r3, #6]
 80127dc:	2b02      	cmp	r3, #2
 80127de:	d004      	beq.n	80127ea <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80127e0:	6839      	ldr	r1, [r7, #0]
 80127e2:	6878      	ldr	r0, [r7, #4]
 80127e4:	f000 f8a5 	bl	8012932 <USBD_CtlError>
        break;
 80127e8:	e01a      	b.n	8012820 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80127ea:	687b      	ldr	r3, [r7, #4]
 80127ec:	2201      	movs	r2, #1
 80127ee:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80127f0:	687b      	ldr	r3, [r7, #4]
 80127f2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80127f6:	2b00      	cmp	r3, #0
 80127f8:	d005      	beq.n	8012806 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80127fa:	687b      	ldr	r3, [r7, #4]
 80127fc:	68db      	ldr	r3, [r3, #12]
 80127fe:	f043 0202 	orr.w	r2, r3, #2
 8012802:	687b      	ldr	r3, [r7, #4]
 8012804:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8012806:	687b      	ldr	r3, [r7, #4]
 8012808:	330c      	adds	r3, #12
 801280a:	2202      	movs	r2, #2
 801280c:	4619      	mov	r1, r3
 801280e:	6878      	ldr	r0, [r7, #4]
 8012810:	f000 f900 	bl	8012a14 <USBD_CtlSendData>
      break;
 8012814:	e004      	b.n	8012820 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8012816:	6839      	ldr	r1, [r7, #0]
 8012818:	6878      	ldr	r0, [r7, #4]
 801281a:	f000 f88a 	bl	8012932 <USBD_CtlError>
      break;
 801281e:	bf00      	nop
  }
}
 8012820:	bf00      	nop
 8012822:	3708      	adds	r7, #8
 8012824:	46bd      	mov	sp, r7
 8012826:	bd80      	pop	{r7, pc}

08012828 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012828:	b580      	push	{r7, lr}
 801282a:	b082      	sub	sp, #8
 801282c:	af00      	add	r7, sp, #0
 801282e:	6078      	str	r0, [r7, #4]
 8012830:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8012832:	683b      	ldr	r3, [r7, #0]
 8012834:	885b      	ldrh	r3, [r3, #2]
 8012836:	2b01      	cmp	r3, #1
 8012838:	d107      	bne.n	801284a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 801283a:	687b      	ldr	r3, [r7, #4]
 801283c:	2201      	movs	r2, #1
 801283e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8012842:	6878      	ldr	r0, [r7, #4]
 8012844:	f000 f940 	bl	8012ac8 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8012848:	e013      	b.n	8012872 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 801284a:	683b      	ldr	r3, [r7, #0]
 801284c:	885b      	ldrh	r3, [r3, #2]
 801284e:	2b02      	cmp	r3, #2
 8012850:	d10b      	bne.n	801286a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8012852:	683b      	ldr	r3, [r7, #0]
 8012854:	889b      	ldrh	r3, [r3, #4]
 8012856:	0a1b      	lsrs	r3, r3, #8
 8012858:	b29b      	uxth	r3, r3
 801285a:	b2da      	uxtb	r2, r3
 801285c:	687b      	ldr	r3, [r7, #4]
 801285e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8012862:	6878      	ldr	r0, [r7, #4]
 8012864:	f000 f930 	bl	8012ac8 <USBD_CtlSendStatus>
}
 8012868:	e003      	b.n	8012872 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 801286a:	6839      	ldr	r1, [r7, #0]
 801286c:	6878      	ldr	r0, [r7, #4]
 801286e:	f000 f860 	bl	8012932 <USBD_CtlError>
}
 8012872:	bf00      	nop
 8012874:	3708      	adds	r7, #8
 8012876:	46bd      	mov	sp, r7
 8012878:	bd80      	pop	{r7, pc}

0801287a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801287a:	b580      	push	{r7, lr}
 801287c:	b082      	sub	sp, #8
 801287e:	af00      	add	r7, sp, #0
 8012880:	6078      	str	r0, [r7, #4]
 8012882:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8012884:	687b      	ldr	r3, [r7, #4]
 8012886:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801288a:	b2db      	uxtb	r3, r3
 801288c:	3b01      	subs	r3, #1
 801288e:	2b02      	cmp	r3, #2
 8012890:	d80b      	bhi.n	80128aa <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8012892:	683b      	ldr	r3, [r7, #0]
 8012894:	885b      	ldrh	r3, [r3, #2]
 8012896:	2b01      	cmp	r3, #1
 8012898:	d10c      	bne.n	80128b4 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 801289a:	687b      	ldr	r3, [r7, #4]
 801289c:	2200      	movs	r2, #0
 801289e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80128a2:	6878      	ldr	r0, [r7, #4]
 80128a4:	f000 f910 	bl	8012ac8 <USBD_CtlSendStatus>
      }
      break;
 80128a8:	e004      	b.n	80128b4 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80128aa:	6839      	ldr	r1, [r7, #0]
 80128ac:	6878      	ldr	r0, [r7, #4]
 80128ae:	f000 f840 	bl	8012932 <USBD_CtlError>
      break;
 80128b2:	e000      	b.n	80128b6 <USBD_ClrFeature+0x3c>
      break;
 80128b4:	bf00      	nop
  }
}
 80128b6:	bf00      	nop
 80128b8:	3708      	adds	r7, #8
 80128ba:	46bd      	mov	sp, r7
 80128bc:	bd80      	pop	{r7, pc}

080128be <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80128be:	b580      	push	{r7, lr}
 80128c0:	b084      	sub	sp, #16
 80128c2:	af00      	add	r7, sp, #0
 80128c4:	6078      	str	r0, [r7, #4]
 80128c6:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80128c8:	683b      	ldr	r3, [r7, #0]
 80128ca:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80128cc:	68fb      	ldr	r3, [r7, #12]
 80128ce:	781a      	ldrb	r2, [r3, #0]
 80128d0:	687b      	ldr	r3, [r7, #4]
 80128d2:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80128d4:	68fb      	ldr	r3, [r7, #12]
 80128d6:	3301      	adds	r3, #1
 80128d8:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80128da:	68fb      	ldr	r3, [r7, #12]
 80128dc:	781a      	ldrb	r2, [r3, #0]
 80128de:	687b      	ldr	r3, [r7, #4]
 80128e0:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80128e2:	68fb      	ldr	r3, [r7, #12]
 80128e4:	3301      	adds	r3, #1
 80128e6:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80128e8:	68f8      	ldr	r0, [r7, #12]
 80128ea:	f7ff fa41 	bl	8011d70 <SWAPBYTE>
 80128ee:	4603      	mov	r3, r0
 80128f0:	461a      	mov	r2, r3
 80128f2:	687b      	ldr	r3, [r7, #4]
 80128f4:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80128f6:	68fb      	ldr	r3, [r7, #12]
 80128f8:	3301      	adds	r3, #1
 80128fa:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80128fc:	68fb      	ldr	r3, [r7, #12]
 80128fe:	3301      	adds	r3, #1
 8012900:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8012902:	68f8      	ldr	r0, [r7, #12]
 8012904:	f7ff fa34 	bl	8011d70 <SWAPBYTE>
 8012908:	4603      	mov	r3, r0
 801290a:	461a      	mov	r2, r3
 801290c:	687b      	ldr	r3, [r7, #4]
 801290e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8012910:	68fb      	ldr	r3, [r7, #12]
 8012912:	3301      	adds	r3, #1
 8012914:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8012916:	68fb      	ldr	r3, [r7, #12]
 8012918:	3301      	adds	r3, #1
 801291a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 801291c:	68f8      	ldr	r0, [r7, #12]
 801291e:	f7ff fa27 	bl	8011d70 <SWAPBYTE>
 8012922:	4603      	mov	r3, r0
 8012924:	461a      	mov	r2, r3
 8012926:	687b      	ldr	r3, [r7, #4]
 8012928:	80da      	strh	r2, [r3, #6]
}
 801292a:	bf00      	nop
 801292c:	3710      	adds	r7, #16
 801292e:	46bd      	mov	sp, r7
 8012930:	bd80      	pop	{r7, pc}

08012932 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012932:	b580      	push	{r7, lr}
 8012934:	b082      	sub	sp, #8
 8012936:	af00      	add	r7, sp, #0
 8012938:	6078      	str	r0, [r7, #4]
 801293a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 801293c:	2180      	movs	r1, #128	; 0x80
 801293e:	6878      	ldr	r0, [r7, #4]
 8012940:	f000 fd44 	bl	80133cc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8012944:	2100      	movs	r1, #0
 8012946:	6878      	ldr	r0, [r7, #4]
 8012948:	f000 fd40 	bl	80133cc <USBD_LL_StallEP>
}
 801294c:	bf00      	nop
 801294e:	3708      	adds	r7, #8
 8012950:	46bd      	mov	sp, r7
 8012952:	bd80      	pop	{r7, pc}

08012954 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8012954:	b580      	push	{r7, lr}
 8012956:	b086      	sub	sp, #24
 8012958:	af00      	add	r7, sp, #0
 801295a:	60f8      	str	r0, [r7, #12]
 801295c:	60b9      	str	r1, [r7, #8]
 801295e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8012960:	2300      	movs	r3, #0
 8012962:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8012964:	68fb      	ldr	r3, [r7, #12]
 8012966:	2b00      	cmp	r3, #0
 8012968:	d036      	beq.n	80129d8 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 801296a:	68fb      	ldr	r3, [r7, #12]
 801296c:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 801296e:	6938      	ldr	r0, [r7, #16]
 8012970:	f000 f836 	bl	80129e0 <USBD_GetLen>
 8012974:	4603      	mov	r3, r0
 8012976:	3301      	adds	r3, #1
 8012978:	b29b      	uxth	r3, r3
 801297a:	005b      	lsls	r3, r3, #1
 801297c:	b29a      	uxth	r2, r3
 801297e:	687b      	ldr	r3, [r7, #4]
 8012980:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8012982:	7dfb      	ldrb	r3, [r7, #23]
 8012984:	68ba      	ldr	r2, [r7, #8]
 8012986:	4413      	add	r3, r2
 8012988:	687a      	ldr	r2, [r7, #4]
 801298a:	7812      	ldrb	r2, [r2, #0]
 801298c:	701a      	strb	r2, [r3, #0]
  idx++;
 801298e:	7dfb      	ldrb	r3, [r7, #23]
 8012990:	3301      	adds	r3, #1
 8012992:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8012994:	7dfb      	ldrb	r3, [r7, #23]
 8012996:	68ba      	ldr	r2, [r7, #8]
 8012998:	4413      	add	r3, r2
 801299a:	2203      	movs	r2, #3
 801299c:	701a      	strb	r2, [r3, #0]
  idx++;
 801299e:	7dfb      	ldrb	r3, [r7, #23]
 80129a0:	3301      	adds	r3, #1
 80129a2:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80129a4:	e013      	b.n	80129ce <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80129a6:	7dfb      	ldrb	r3, [r7, #23]
 80129a8:	68ba      	ldr	r2, [r7, #8]
 80129aa:	4413      	add	r3, r2
 80129ac:	693a      	ldr	r2, [r7, #16]
 80129ae:	7812      	ldrb	r2, [r2, #0]
 80129b0:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80129b2:	693b      	ldr	r3, [r7, #16]
 80129b4:	3301      	adds	r3, #1
 80129b6:	613b      	str	r3, [r7, #16]
    idx++;
 80129b8:	7dfb      	ldrb	r3, [r7, #23]
 80129ba:	3301      	adds	r3, #1
 80129bc:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80129be:	7dfb      	ldrb	r3, [r7, #23]
 80129c0:	68ba      	ldr	r2, [r7, #8]
 80129c2:	4413      	add	r3, r2
 80129c4:	2200      	movs	r2, #0
 80129c6:	701a      	strb	r2, [r3, #0]
    idx++;
 80129c8:	7dfb      	ldrb	r3, [r7, #23]
 80129ca:	3301      	adds	r3, #1
 80129cc:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80129ce:	693b      	ldr	r3, [r7, #16]
 80129d0:	781b      	ldrb	r3, [r3, #0]
 80129d2:	2b00      	cmp	r3, #0
 80129d4:	d1e7      	bne.n	80129a6 <USBD_GetString+0x52>
 80129d6:	e000      	b.n	80129da <USBD_GetString+0x86>
    return;
 80129d8:	bf00      	nop
  }
}
 80129da:	3718      	adds	r7, #24
 80129dc:	46bd      	mov	sp, r7
 80129de:	bd80      	pop	{r7, pc}

080129e0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80129e0:	b480      	push	{r7}
 80129e2:	b085      	sub	sp, #20
 80129e4:	af00      	add	r7, sp, #0
 80129e6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80129e8:	2300      	movs	r3, #0
 80129ea:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80129ec:	687b      	ldr	r3, [r7, #4]
 80129ee:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80129f0:	e005      	b.n	80129fe <USBD_GetLen+0x1e>
  {
    len++;
 80129f2:	7bfb      	ldrb	r3, [r7, #15]
 80129f4:	3301      	adds	r3, #1
 80129f6:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80129f8:	68bb      	ldr	r3, [r7, #8]
 80129fa:	3301      	adds	r3, #1
 80129fc:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80129fe:	68bb      	ldr	r3, [r7, #8]
 8012a00:	781b      	ldrb	r3, [r3, #0]
 8012a02:	2b00      	cmp	r3, #0
 8012a04:	d1f5      	bne.n	80129f2 <USBD_GetLen+0x12>
  }

  return len;
 8012a06:	7bfb      	ldrb	r3, [r7, #15]
}
 8012a08:	4618      	mov	r0, r3
 8012a0a:	3714      	adds	r7, #20
 8012a0c:	46bd      	mov	sp, r7
 8012a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a12:	4770      	bx	lr

08012a14 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8012a14:	b580      	push	{r7, lr}
 8012a16:	b084      	sub	sp, #16
 8012a18:	af00      	add	r7, sp, #0
 8012a1a:	60f8      	str	r0, [r7, #12]
 8012a1c:	60b9      	str	r1, [r7, #8]
 8012a1e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8012a20:	68fb      	ldr	r3, [r7, #12]
 8012a22:	2202      	movs	r2, #2
 8012a24:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8012a28:	68fb      	ldr	r3, [r7, #12]
 8012a2a:	687a      	ldr	r2, [r7, #4]
 8012a2c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8012a2e:	68fb      	ldr	r3, [r7, #12]
 8012a30:	687a      	ldr	r2, [r7, #4]
 8012a32:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8012a34:	687b      	ldr	r3, [r7, #4]
 8012a36:	68ba      	ldr	r2, [r7, #8]
 8012a38:	2100      	movs	r1, #0
 8012a3a:	68f8      	ldr	r0, [r7, #12]
 8012a3c:	f000 fd4f 	bl	80134de <USBD_LL_Transmit>

  return USBD_OK;
 8012a40:	2300      	movs	r3, #0
}
 8012a42:	4618      	mov	r0, r3
 8012a44:	3710      	adds	r7, #16
 8012a46:	46bd      	mov	sp, r7
 8012a48:	bd80      	pop	{r7, pc}

08012a4a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8012a4a:	b580      	push	{r7, lr}
 8012a4c:	b084      	sub	sp, #16
 8012a4e:	af00      	add	r7, sp, #0
 8012a50:	60f8      	str	r0, [r7, #12]
 8012a52:	60b9      	str	r1, [r7, #8]
 8012a54:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8012a56:	687b      	ldr	r3, [r7, #4]
 8012a58:	68ba      	ldr	r2, [r7, #8]
 8012a5a:	2100      	movs	r1, #0
 8012a5c:	68f8      	ldr	r0, [r7, #12]
 8012a5e:	f000 fd3e 	bl	80134de <USBD_LL_Transmit>

  return USBD_OK;
 8012a62:	2300      	movs	r3, #0
}
 8012a64:	4618      	mov	r0, r3
 8012a66:	3710      	adds	r7, #16
 8012a68:	46bd      	mov	sp, r7
 8012a6a:	bd80      	pop	{r7, pc}

08012a6c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8012a6c:	b580      	push	{r7, lr}
 8012a6e:	b084      	sub	sp, #16
 8012a70:	af00      	add	r7, sp, #0
 8012a72:	60f8      	str	r0, [r7, #12]
 8012a74:	60b9      	str	r1, [r7, #8]
 8012a76:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8012a78:	68fb      	ldr	r3, [r7, #12]
 8012a7a:	2203      	movs	r2, #3
 8012a7c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8012a80:	68fb      	ldr	r3, [r7, #12]
 8012a82:	687a      	ldr	r2, [r7, #4]
 8012a84:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8012a88:	68fb      	ldr	r3, [r7, #12]
 8012a8a:	687a      	ldr	r2, [r7, #4]
 8012a8c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8012a90:	687b      	ldr	r3, [r7, #4]
 8012a92:	68ba      	ldr	r2, [r7, #8]
 8012a94:	2100      	movs	r1, #0
 8012a96:	68f8      	ldr	r0, [r7, #12]
 8012a98:	f000 fd42 	bl	8013520 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8012a9c:	2300      	movs	r3, #0
}
 8012a9e:	4618      	mov	r0, r3
 8012aa0:	3710      	adds	r7, #16
 8012aa2:	46bd      	mov	sp, r7
 8012aa4:	bd80      	pop	{r7, pc}

08012aa6 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8012aa6:	b580      	push	{r7, lr}
 8012aa8:	b084      	sub	sp, #16
 8012aaa:	af00      	add	r7, sp, #0
 8012aac:	60f8      	str	r0, [r7, #12]
 8012aae:	60b9      	str	r1, [r7, #8]
 8012ab0:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8012ab2:	687b      	ldr	r3, [r7, #4]
 8012ab4:	68ba      	ldr	r2, [r7, #8]
 8012ab6:	2100      	movs	r1, #0
 8012ab8:	68f8      	ldr	r0, [r7, #12]
 8012aba:	f000 fd31 	bl	8013520 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8012abe:	2300      	movs	r3, #0
}
 8012ac0:	4618      	mov	r0, r3
 8012ac2:	3710      	adds	r7, #16
 8012ac4:	46bd      	mov	sp, r7
 8012ac6:	bd80      	pop	{r7, pc}

08012ac8 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8012ac8:	b580      	push	{r7, lr}
 8012aca:	b082      	sub	sp, #8
 8012acc:	af00      	add	r7, sp, #0
 8012ace:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8012ad0:	687b      	ldr	r3, [r7, #4]
 8012ad2:	2204      	movs	r2, #4
 8012ad4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8012ad8:	2300      	movs	r3, #0
 8012ada:	2200      	movs	r2, #0
 8012adc:	2100      	movs	r1, #0
 8012ade:	6878      	ldr	r0, [r7, #4]
 8012ae0:	f000 fcfd 	bl	80134de <USBD_LL_Transmit>

  return USBD_OK;
 8012ae4:	2300      	movs	r3, #0
}
 8012ae6:	4618      	mov	r0, r3
 8012ae8:	3708      	adds	r7, #8
 8012aea:	46bd      	mov	sp, r7
 8012aec:	bd80      	pop	{r7, pc}

08012aee <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8012aee:	b580      	push	{r7, lr}
 8012af0:	b082      	sub	sp, #8
 8012af2:	af00      	add	r7, sp, #0
 8012af4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8012af6:	687b      	ldr	r3, [r7, #4]
 8012af8:	2205      	movs	r2, #5
 8012afa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8012afe:	2300      	movs	r3, #0
 8012b00:	2200      	movs	r2, #0
 8012b02:	2100      	movs	r1, #0
 8012b04:	6878      	ldr	r0, [r7, #4]
 8012b06:	f000 fd0b 	bl	8013520 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8012b0a:	2300      	movs	r3, #0
}
 8012b0c:	4618      	mov	r0, r3
 8012b0e:	3708      	adds	r7, #8
 8012b10:	46bd      	mov	sp, r7
 8012b12:	bd80      	pop	{r7, pc}

08012b14 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8012b14:	b580      	push	{r7, lr}
 8012b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8012b18:	2200      	movs	r2, #0
 8012b1a:	4912      	ldr	r1, [pc, #72]	; (8012b64 <MX_USB_DEVICE_Init+0x50>)
 8012b1c:	4812      	ldr	r0, [pc, #72]	; (8012b68 <MX_USB_DEVICE_Init+0x54>)
 8012b1e:	f7fe fd01 	bl	8011524 <USBD_Init>
 8012b22:	4603      	mov	r3, r0
 8012b24:	2b00      	cmp	r3, #0
 8012b26:	d001      	beq.n	8012b2c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8012b28:	f7ee fd58 	bl	80015dc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8012b2c:	490f      	ldr	r1, [pc, #60]	; (8012b6c <MX_USB_DEVICE_Init+0x58>)
 8012b2e:	480e      	ldr	r0, [pc, #56]	; (8012b68 <MX_USB_DEVICE_Init+0x54>)
 8012b30:	f7fe fd28 	bl	8011584 <USBD_RegisterClass>
 8012b34:	4603      	mov	r3, r0
 8012b36:	2b00      	cmp	r3, #0
 8012b38:	d001      	beq.n	8012b3e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8012b3a:	f7ee fd4f 	bl	80015dc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8012b3e:	490c      	ldr	r1, [pc, #48]	; (8012b70 <MX_USB_DEVICE_Init+0x5c>)
 8012b40:	4809      	ldr	r0, [pc, #36]	; (8012b68 <MX_USB_DEVICE_Init+0x54>)
 8012b42:	f7fe fc1f 	bl	8011384 <USBD_CDC_RegisterInterface>
 8012b46:	4603      	mov	r3, r0
 8012b48:	2b00      	cmp	r3, #0
 8012b4a:	d001      	beq.n	8012b50 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8012b4c:	f7ee fd46 	bl	80015dc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8012b50:	4805      	ldr	r0, [pc, #20]	; (8012b68 <MX_USB_DEVICE_Init+0x54>)
 8012b52:	f7fe fd4d 	bl	80115f0 <USBD_Start>
 8012b56:	4603      	mov	r3, r0
 8012b58:	2b00      	cmp	r3, #0
 8012b5a:	d001      	beq.n	8012b60 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8012b5c:	f7ee fd3e 	bl	80015dc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8012b60:	bf00      	nop
 8012b62:	bd80      	pop	{r7, pc}
 8012b64:	20000138 	.word	0x20000138
 8012b68:	20007340 	.word	0x20007340
 8012b6c:	2000009c 	.word	0x2000009c
 8012b70:	20000124 	.word	0x20000124

08012b74 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8012b74:	b580      	push	{r7, lr}
 8012b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8012b78:	2200      	movs	r2, #0
 8012b7a:	4905      	ldr	r1, [pc, #20]	; (8012b90 <CDC_Init_FS+0x1c>)
 8012b7c:	4805      	ldr	r0, [pc, #20]	; (8012b94 <CDC_Init_FS+0x20>)
 8012b7e:	f7fe fc1b 	bl	80113b8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8012b82:	4905      	ldr	r1, [pc, #20]	; (8012b98 <CDC_Init_FS+0x24>)
 8012b84:	4803      	ldr	r0, [pc, #12]	; (8012b94 <CDC_Init_FS+0x20>)
 8012b86:	f7fe fc39 	bl	80113fc <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8012b8a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8012b8c:	4618      	mov	r0, r3
 8012b8e:	bd80      	pop	{r7, pc}
 8012b90:	20007e1c 	.word	0x20007e1c
 8012b94:	20007340 	.word	0x20007340
 8012b98:	2000761c 	.word	0x2000761c

08012b9c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8012b9c:	b480      	push	{r7}
 8012b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8012ba0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8012ba2:	4618      	mov	r0, r3
 8012ba4:	46bd      	mov	sp, r7
 8012ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012baa:	4770      	bx	lr

08012bac <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8012bac:	b480      	push	{r7}
 8012bae:	b083      	sub	sp, #12
 8012bb0:	af00      	add	r7, sp, #0
 8012bb2:	4603      	mov	r3, r0
 8012bb4:	6039      	str	r1, [r7, #0]
 8012bb6:	71fb      	strb	r3, [r7, #7]
 8012bb8:	4613      	mov	r3, r2
 8012bba:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8012bbc:	79fb      	ldrb	r3, [r7, #7]
 8012bbe:	2b23      	cmp	r3, #35	; 0x23
 8012bc0:	f200 80a3 	bhi.w	8012d0a <CDC_Control_FS+0x15e>
 8012bc4:	a201      	add	r2, pc, #4	; (adr r2, 8012bcc <CDC_Control_FS+0x20>)
 8012bc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012bca:	bf00      	nop
 8012bcc:	08012d0b 	.word	0x08012d0b
 8012bd0:	08012d0b 	.word	0x08012d0b
 8012bd4:	08012d0b 	.word	0x08012d0b
 8012bd8:	08012d0b 	.word	0x08012d0b
 8012bdc:	08012d0b 	.word	0x08012d0b
 8012be0:	08012d0b 	.word	0x08012d0b
 8012be4:	08012d0b 	.word	0x08012d0b
 8012be8:	08012d0b 	.word	0x08012d0b
 8012bec:	08012d0b 	.word	0x08012d0b
 8012bf0:	08012d0b 	.word	0x08012d0b
 8012bf4:	08012d0b 	.word	0x08012d0b
 8012bf8:	08012d0b 	.word	0x08012d0b
 8012bfc:	08012d0b 	.word	0x08012d0b
 8012c00:	08012d0b 	.word	0x08012d0b
 8012c04:	08012d0b 	.word	0x08012d0b
 8012c08:	08012d0b 	.word	0x08012d0b
 8012c0c:	08012d0b 	.word	0x08012d0b
 8012c10:	08012d0b 	.word	0x08012d0b
 8012c14:	08012d0b 	.word	0x08012d0b
 8012c18:	08012d0b 	.word	0x08012d0b
 8012c1c:	08012d0b 	.word	0x08012d0b
 8012c20:	08012d0b 	.word	0x08012d0b
 8012c24:	08012d0b 	.word	0x08012d0b
 8012c28:	08012d0b 	.word	0x08012d0b
 8012c2c:	08012d0b 	.word	0x08012d0b
 8012c30:	08012d0b 	.word	0x08012d0b
 8012c34:	08012d0b 	.word	0x08012d0b
 8012c38:	08012d0b 	.word	0x08012d0b
 8012c3c:	08012d0b 	.word	0x08012d0b
 8012c40:	08012d0b 	.word	0x08012d0b
 8012c44:	08012d0b 	.word	0x08012d0b
 8012c48:	08012d0b 	.word	0x08012d0b
 8012c4c:	08012c5d 	.word	0x08012c5d
 8012c50:	08012cb7 	.word	0x08012cb7
 8012c54:	08012d0b 	.word	0x08012d0b
 8012c58:	08012d0b 	.word	0x08012d0b
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	Linecoding.bitrate = (uint32_t)(pbuf[0]);
 8012c5c:	683b      	ldr	r3, [r7, #0]
 8012c5e:	781b      	ldrb	r3, [r3, #0]
 8012c60:	461a      	mov	r2, r3
 8012c62:	4b2e      	ldr	r3, [pc, #184]	; (8012d1c <CDC_Control_FS+0x170>)
 8012c64:	601a      	str	r2, [r3, #0]
    	Linecoding.bitrate |= (uint32_t)(pbuf[1]<<8);
 8012c66:	4b2d      	ldr	r3, [pc, #180]	; (8012d1c <CDC_Control_FS+0x170>)
 8012c68:	681b      	ldr	r3, [r3, #0]
 8012c6a:	683a      	ldr	r2, [r7, #0]
 8012c6c:	3201      	adds	r2, #1
 8012c6e:	7812      	ldrb	r2, [r2, #0]
 8012c70:	0212      	lsls	r2, r2, #8
 8012c72:	4313      	orrs	r3, r2
 8012c74:	4a29      	ldr	r2, [pc, #164]	; (8012d1c <CDC_Control_FS+0x170>)
 8012c76:	6013      	str	r3, [r2, #0]
    	Linecoding.bitrate |= (uint32_t)(pbuf[2]<<16);
 8012c78:	4b28      	ldr	r3, [pc, #160]	; (8012d1c <CDC_Control_FS+0x170>)
 8012c7a:	681b      	ldr	r3, [r3, #0]
 8012c7c:	683a      	ldr	r2, [r7, #0]
 8012c7e:	3202      	adds	r2, #2
 8012c80:	7812      	ldrb	r2, [r2, #0]
 8012c82:	0412      	lsls	r2, r2, #16
 8012c84:	4313      	orrs	r3, r2
 8012c86:	4a25      	ldr	r2, [pc, #148]	; (8012d1c <CDC_Control_FS+0x170>)
 8012c88:	6013      	str	r3, [r2, #0]
    	Linecoding.bitrate |= (uint32_t)(pbuf[3]<<24);
 8012c8a:	4b24      	ldr	r3, [pc, #144]	; (8012d1c <CDC_Control_FS+0x170>)
 8012c8c:	681b      	ldr	r3, [r3, #0]
 8012c8e:	683a      	ldr	r2, [r7, #0]
 8012c90:	3203      	adds	r2, #3
 8012c92:	7812      	ldrb	r2, [r2, #0]
 8012c94:	0612      	lsls	r2, r2, #24
 8012c96:	4313      	orrs	r3, r2
 8012c98:	4a20      	ldr	r2, [pc, #128]	; (8012d1c <CDC_Control_FS+0x170>)
 8012c9a:	6013      	str	r3, [r2, #0]
    	Linecoding.format = pbuf[4];
 8012c9c:	683b      	ldr	r3, [r7, #0]
 8012c9e:	791a      	ldrb	r2, [r3, #4]
 8012ca0:	4b1e      	ldr	r3, [pc, #120]	; (8012d1c <CDC_Control_FS+0x170>)
 8012ca2:	711a      	strb	r2, [r3, #4]
    	Linecoding.paritytype = pbuf[5];
 8012ca4:	683b      	ldr	r3, [r7, #0]
 8012ca6:	795a      	ldrb	r2, [r3, #5]
 8012ca8:	4b1c      	ldr	r3, [pc, #112]	; (8012d1c <CDC_Control_FS+0x170>)
 8012caa:	715a      	strb	r2, [r3, #5]
    	Linecoding.datatype = pbuf[6];
 8012cac:	683b      	ldr	r3, [r7, #0]
 8012cae:	799a      	ldrb	r2, [r3, #6]
 8012cb0:	4b1a      	ldr	r3, [pc, #104]	; (8012d1c <CDC_Control_FS+0x170>)
 8012cb2:	719a      	strb	r2, [r3, #6]
    break;
 8012cb4:	e02a      	b.n	8012d0c <CDC_Control_FS+0x160>

    case CDC_GET_LINE_CODING:
      pbuf[0] = (uint8_t)(Linecoding.bitrate);
 8012cb6:	4b19      	ldr	r3, [pc, #100]	; (8012d1c <CDC_Control_FS+0x170>)
 8012cb8:	681b      	ldr	r3, [r3, #0]
 8012cba:	b2da      	uxtb	r2, r3
 8012cbc:	683b      	ldr	r3, [r7, #0]
 8012cbe:	701a      	strb	r2, [r3, #0]
      pbuf[1] = (uint8_t)(Linecoding.bitrate>>8);
 8012cc0:	4b16      	ldr	r3, [pc, #88]	; (8012d1c <CDC_Control_FS+0x170>)
 8012cc2:	681b      	ldr	r3, [r3, #0]
 8012cc4:	0a1a      	lsrs	r2, r3, #8
 8012cc6:	683b      	ldr	r3, [r7, #0]
 8012cc8:	3301      	adds	r3, #1
 8012cca:	b2d2      	uxtb	r2, r2
 8012ccc:	701a      	strb	r2, [r3, #0]
      pbuf[2] = (uint8_t)(Linecoding.bitrate>>16);
 8012cce:	4b13      	ldr	r3, [pc, #76]	; (8012d1c <CDC_Control_FS+0x170>)
 8012cd0:	681b      	ldr	r3, [r3, #0]
 8012cd2:	0c1a      	lsrs	r2, r3, #16
 8012cd4:	683b      	ldr	r3, [r7, #0]
 8012cd6:	3302      	adds	r3, #2
 8012cd8:	b2d2      	uxtb	r2, r2
 8012cda:	701a      	strb	r2, [r3, #0]
      pbuf[3] = (uint8_t)(Linecoding.bitrate>>24);
 8012cdc:	4b0f      	ldr	r3, [pc, #60]	; (8012d1c <CDC_Control_FS+0x170>)
 8012cde:	681b      	ldr	r3, [r3, #0]
 8012ce0:	0e1a      	lsrs	r2, r3, #24
 8012ce2:	683b      	ldr	r3, [r7, #0]
 8012ce4:	3303      	adds	r3, #3
 8012ce6:	b2d2      	uxtb	r2, r2
 8012ce8:	701a      	strb	r2, [r3, #0]
      pbuf[4] = Linecoding.format;
 8012cea:	683b      	ldr	r3, [r7, #0]
 8012cec:	3304      	adds	r3, #4
 8012cee:	4a0b      	ldr	r2, [pc, #44]	; (8012d1c <CDC_Control_FS+0x170>)
 8012cf0:	7912      	ldrb	r2, [r2, #4]
 8012cf2:	701a      	strb	r2, [r3, #0]
      pbuf[5] = Linecoding.paritytype;
 8012cf4:	683b      	ldr	r3, [r7, #0]
 8012cf6:	3305      	adds	r3, #5
 8012cf8:	4a08      	ldr	r2, [pc, #32]	; (8012d1c <CDC_Control_FS+0x170>)
 8012cfa:	7952      	ldrb	r2, [r2, #5]
 8012cfc:	701a      	strb	r2, [r3, #0]
      pbuf[6] = Linecoding.datatype;
 8012cfe:	683b      	ldr	r3, [r7, #0]
 8012d00:	3306      	adds	r3, #6
 8012d02:	4a06      	ldr	r2, [pc, #24]	; (8012d1c <CDC_Control_FS+0x170>)
 8012d04:	7992      	ldrb	r2, [r2, #6]
 8012d06:	701a      	strb	r2, [r3, #0]
    break;
 8012d08:	e000      	b.n	8012d0c <CDC_Control_FS+0x160>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8012d0a:	bf00      	nop
  }

  return (USBD_OK);
 8012d0c:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8012d0e:	4618      	mov	r0, r3
 8012d10:	370c      	adds	r7, #12
 8012d12:	46bd      	mov	sp, r7
 8012d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d18:	4770      	bx	lr
 8012d1a:	bf00      	nop
 8012d1c:	2000011c 	.word	0x2000011c

08012d20 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8012d20:	b580      	push	{r7, lr}
 8012d22:	b084      	sub	sp, #16
 8012d24:	af00      	add	r7, sp, #0
 8012d26:	6078      	str	r0, [r7, #4]
 8012d28:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8012d2a:	6879      	ldr	r1, [r7, #4]
 8012d2c:	480e      	ldr	r0, [pc, #56]	; (8012d68 <CDC_Receive_FS+0x48>)
 8012d2e:	f7fe fb65 	bl	80113fc <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8012d32:	480d      	ldr	r0, [pc, #52]	; (8012d68 <CDC_Receive_FS+0x48>)
 8012d34:	f7fe fbc0 	bl	80114b8 <USBD_CDC_ReceivePacket>

  for(int i=0; i<*Len; i++)
 8012d38:	2300      	movs	r3, #0
 8012d3a:	60fb      	str	r3, [r7, #12]
 8012d3c:	e009      	b.n	8012d52 <CDC_Receive_FS+0x32>
  {
  	cdcDataIn(Buf[i]);
 8012d3e:	68fb      	ldr	r3, [r7, #12]
 8012d40:	687a      	ldr	r2, [r7, #4]
 8012d42:	4413      	add	r3, r2
 8012d44:	781b      	ldrb	r3, [r3, #0]
 8012d46:	4618      	mov	r0, r3
 8012d48:	f7ef feee 	bl	8002b28 <cdcDataIn>
  for(int i=0; i<*Len; i++)
 8012d4c:	68fb      	ldr	r3, [r7, #12]
 8012d4e:	3301      	adds	r3, #1
 8012d50:	60fb      	str	r3, [r7, #12]
 8012d52:	683b      	ldr	r3, [r7, #0]
 8012d54:	681a      	ldr	r2, [r3, #0]
 8012d56:	68fb      	ldr	r3, [r7, #12]
 8012d58:	429a      	cmp	r2, r3
 8012d5a:	d8f0      	bhi.n	8012d3e <CDC_Receive_FS+0x1e>
  }

  return (USBD_OK);
 8012d5c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8012d5e:	4618      	mov	r0, r3
 8012d60:	3710      	adds	r7, #16
 8012d62:	46bd      	mov	sp, r7
 8012d64:	bd80      	pop	{r7, pc}
 8012d66:	bf00      	nop
 8012d68:	20007340 	.word	0x20007340

08012d6c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8012d6c:	b580      	push	{r7, lr}
 8012d6e:	b084      	sub	sp, #16
 8012d70:	af00      	add	r7, sp, #0
 8012d72:	6078      	str	r0, [r7, #4]
 8012d74:	460b      	mov	r3, r1
 8012d76:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8012d78:	2300      	movs	r3, #0
 8012d7a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8012d7c:	4b0d      	ldr	r3, [pc, #52]	; (8012db4 <CDC_Transmit_FS+0x48>)
 8012d7e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012d82:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8012d84:	68bb      	ldr	r3, [r7, #8]
 8012d86:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8012d8a:	2b00      	cmp	r3, #0
 8012d8c:	d001      	beq.n	8012d92 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8012d8e:	2301      	movs	r3, #1
 8012d90:	e00b      	b.n	8012daa <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8012d92:	887b      	ldrh	r3, [r7, #2]
 8012d94:	461a      	mov	r2, r3
 8012d96:	6879      	ldr	r1, [r7, #4]
 8012d98:	4806      	ldr	r0, [pc, #24]	; (8012db4 <CDC_Transmit_FS+0x48>)
 8012d9a:	f7fe fb0d 	bl	80113b8 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8012d9e:	4805      	ldr	r0, [pc, #20]	; (8012db4 <CDC_Transmit_FS+0x48>)
 8012da0:	f7fe fb4a 	bl	8011438 <USBD_CDC_TransmitPacket>
 8012da4:	4603      	mov	r3, r0
 8012da6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8012da8:	7bfb      	ldrb	r3, [r7, #15]
}
 8012daa:	4618      	mov	r0, r3
 8012dac:	3710      	adds	r7, #16
 8012dae:	46bd      	mov	sp, r7
 8012db0:	bd80      	pop	{r7, pc}
 8012db2:	bf00      	nop
 8012db4:	20007340 	.word	0x20007340

08012db8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8012db8:	b480      	push	{r7}
 8012dba:	b087      	sub	sp, #28
 8012dbc:	af00      	add	r7, sp, #0
 8012dbe:	60f8      	str	r0, [r7, #12]
 8012dc0:	60b9      	str	r1, [r7, #8]
 8012dc2:	4613      	mov	r3, r2
 8012dc4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8012dc6:	2300      	movs	r3, #0
 8012dc8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8012dca:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012dce:	4618      	mov	r0, r3
 8012dd0:	371c      	adds	r7, #28
 8012dd2:	46bd      	mov	sp, r7
 8012dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012dd8:	4770      	bx	lr
	...

08012ddc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012ddc:	b480      	push	{r7}
 8012dde:	b083      	sub	sp, #12
 8012de0:	af00      	add	r7, sp, #0
 8012de2:	4603      	mov	r3, r0
 8012de4:	6039      	str	r1, [r7, #0]
 8012de6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8012de8:	683b      	ldr	r3, [r7, #0]
 8012dea:	2212      	movs	r2, #18
 8012dec:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8012dee:	4b03      	ldr	r3, [pc, #12]	; (8012dfc <USBD_FS_DeviceDescriptor+0x20>)
}
 8012df0:	4618      	mov	r0, r3
 8012df2:	370c      	adds	r7, #12
 8012df4:	46bd      	mov	sp, r7
 8012df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012dfa:	4770      	bx	lr
 8012dfc:	20000154 	.word	0x20000154

08012e00 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012e00:	b480      	push	{r7}
 8012e02:	b083      	sub	sp, #12
 8012e04:	af00      	add	r7, sp, #0
 8012e06:	4603      	mov	r3, r0
 8012e08:	6039      	str	r1, [r7, #0]
 8012e0a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8012e0c:	683b      	ldr	r3, [r7, #0]
 8012e0e:	2204      	movs	r2, #4
 8012e10:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8012e12:	4b03      	ldr	r3, [pc, #12]	; (8012e20 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8012e14:	4618      	mov	r0, r3
 8012e16:	370c      	adds	r7, #12
 8012e18:	46bd      	mov	sp, r7
 8012e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e1e:	4770      	bx	lr
 8012e20:	20000168 	.word	0x20000168

08012e24 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012e24:	b580      	push	{r7, lr}
 8012e26:	b082      	sub	sp, #8
 8012e28:	af00      	add	r7, sp, #0
 8012e2a:	4603      	mov	r3, r0
 8012e2c:	6039      	str	r1, [r7, #0]
 8012e2e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8012e30:	79fb      	ldrb	r3, [r7, #7]
 8012e32:	2b00      	cmp	r3, #0
 8012e34:	d105      	bne.n	8012e42 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8012e36:	683a      	ldr	r2, [r7, #0]
 8012e38:	4907      	ldr	r1, [pc, #28]	; (8012e58 <USBD_FS_ProductStrDescriptor+0x34>)
 8012e3a:	4808      	ldr	r0, [pc, #32]	; (8012e5c <USBD_FS_ProductStrDescriptor+0x38>)
 8012e3c:	f7ff fd8a 	bl	8012954 <USBD_GetString>
 8012e40:	e004      	b.n	8012e4c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8012e42:	683a      	ldr	r2, [r7, #0]
 8012e44:	4904      	ldr	r1, [pc, #16]	; (8012e58 <USBD_FS_ProductStrDescriptor+0x34>)
 8012e46:	4805      	ldr	r0, [pc, #20]	; (8012e5c <USBD_FS_ProductStrDescriptor+0x38>)
 8012e48:	f7ff fd84 	bl	8012954 <USBD_GetString>
  }
  return USBD_StrDesc;
 8012e4c:	4b02      	ldr	r3, [pc, #8]	; (8012e58 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8012e4e:	4618      	mov	r0, r3
 8012e50:	3708      	adds	r7, #8
 8012e52:	46bd      	mov	sp, r7
 8012e54:	bd80      	pop	{r7, pc}
 8012e56:	bf00      	nop
 8012e58:	2000861c 	.word	0x2000861c
 8012e5c:	08016e94 	.word	0x08016e94

08012e60 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012e60:	b580      	push	{r7, lr}
 8012e62:	b082      	sub	sp, #8
 8012e64:	af00      	add	r7, sp, #0
 8012e66:	4603      	mov	r3, r0
 8012e68:	6039      	str	r1, [r7, #0]
 8012e6a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8012e6c:	683a      	ldr	r2, [r7, #0]
 8012e6e:	4904      	ldr	r1, [pc, #16]	; (8012e80 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8012e70:	4804      	ldr	r0, [pc, #16]	; (8012e84 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8012e72:	f7ff fd6f 	bl	8012954 <USBD_GetString>
  return USBD_StrDesc;
 8012e76:	4b02      	ldr	r3, [pc, #8]	; (8012e80 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8012e78:	4618      	mov	r0, r3
 8012e7a:	3708      	adds	r7, #8
 8012e7c:	46bd      	mov	sp, r7
 8012e7e:	bd80      	pop	{r7, pc}
 8012e80:	2000861c 	.word	0x2000861c
 8012e84:	08016eac 	.word	0x08016eac

08012e88 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012e88:	b580      	push	{r7, lr}
 8012e8a:	b082      	sub	sp, #8
 8012e8c:	af00      	add	r7, sp, #0
 8012e8e:	4603      	mov	r3, r0
 8012e90:	6039      	str	r1, [r7, #0]
 8012e92:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8012e94:	683b      	ldr	r3, [r7, #0]
 8012e96:	221a      	movs	r2, #26
 8012e98:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8012e9a:	f000 f843 	bl	8012f24 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8012e9e:	4b02      	ldr	r3, [pc, #8]	; (8012ea8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8012ea0:	4618      	mov	r0, r3
 8012ea2:	3708      	adds	r7, #8
 8012ea4:	46bd      	mov	sp, r7
 8012ea6:	bd80      	pop	{r7, pc}
 8012ea8:	2000016c 	.word	0x2000016c

08012eac <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012eac:	b580      	push	{r7, lr}
 8012eae:	b082      	sub	sp, #8
 8012eb0:	af00      	add	r7, sp, #0
 8012eb2:	4603      	mov	r3, r0
 8012eb4:	6039      	str	r1, [r7, #0]
 8012eb6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8012eb8:	79fb      	ldrb	r3, [r7, #7]
 8012eba:	2b00      	cmp	r3, #0
 8012ebc:	d105      	bne.n	8012eca <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8012ebe:	683a      	ldr	r2, [r7, #0]
 8012ec0:	4907      	ldr	r1, [pc, #28]	; (8012ee0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8012ec2:	4808      	ldr	r0, [pc, #32]	; (8012ee4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8012ec4:	f7ff fd46 	bl	8012954 <USBD_GetString>
 8012ec8:	e004      	b.n	8012ed4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8012eca:	683a      	ldr	r2, [r7, #0]
 8012ecc:	4904      	ldr	r1, [pc, #16]	; (8012ee0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8012ece:	4805      	ldr	r0, [pc, #20]	; (8012ee4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8012ed0:	f7ff fd40 	bl	8012954 <USBD_GetString>
  }
  return USBD_StrDesc;
 8012ed4:	4b02      	ldr	r3, [pc, #8]	; (8012ee0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8012ed6:	4618      	mov	r0, r3
 8012ed8:	3708      	adds	r7, #8
 8012eda:	46bd      	mov	sp, r7
 8012edc:	bd80      	pop	{r7, pc}
 8012ede:	bf00      	nop
 8012ee0:	2000861c 	.word	0x2000861c
 8012ee4:	08016ec0 	.word	0x08016ec0

08012ee8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012ee8:	b580      	push	{r7, lr}
 8012eea:	b082      	sub	sp, #8
 8012eec:	af00      	add	r7, sp, #0
 8012eee:	4603      	mov	r3, r0
 8012ef0:	6039      	str	r1, [r7, #0]
 8012ef2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8012ef4:	79fb      	ldrb	r3, [r7, #7]
 8012ef6:	2b00      	cmp	r3, #0
 8012ef8:	d105      	bne.n	8012f06 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8012efa:	683a      	ldr	r2, [r7, #0]
 8012efc:	4907      	ldr	r1, [pc, #28]	; (8012f1c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8012efe:	4808      	ldr	r0, [pc, #32]	; (8012f20 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8012f00:	f7ff fd28 	bl	8012954 <USBD_GetString>
 8012f04:	e004      	b.n	8012f10 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8012f06:	683a      	ldr	r2, [r7, #0]
 8012f08:	4904      	ldr	r1, [pc, #16]	; (8012f1c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8012f0a:	4805      	ldr	r0, [pc, #20]	; (8012f20 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8012f0c:	f7ff fd22 	bl	8012954 <USBD_GetString>
  }
  return USBD_StrDesc;
 8012f10:	4b02      	ldr	r3, [pc, #8]	; (8012f1c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8012f12:	4618      	mov	r0, r3
 8012f14:	3708      	adds	r7, #8
 8012f16:	46bd      	mov	sp, r7
 8012f18:	bd80      	pop	{r7, pc}
 8012f1a:	bf00      	nop
 8012f1c:	2000861c 	.word	0x2000861c
 8012f20:	08016ecc 	.word	0x08016ecc

08012f24 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8012f24:	b580      	push	{r7, lr}
 8012f26:	b084      	sub	sp, #16
 8012f28:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8012f2a:	4b0f      	ldr	r3, [pc, #60]	; (8012f68 <Get_SerialNum+0x44>)
 8012f2c:	681b      	ldr	r3, [r3, #0]
 8012f2e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8012f30:	4b0e      	ldr	r3, [pc, #56]	; (8012f6c <Get_SerialNum+0x48>)
 8012f32:	681b      	ldr	r3, [r3, #0]
 8012f34:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8012f36:	4b0e      	ldr	r3, [pc, #56]	; (8012f70 <Get_SerialNum+0x4c>)
 8012f38:	681b      	ldr	r3, [r3, #0]
 8012f3a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8012f3c:	68fa      	ldr	r2, [r7, #12]
 8012f3e:	687b      	ldr	r3, [r7, #4]
 8012f40:	4413      	add	r3, r2
 8012f42:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8012f44:	68fb      	ldr	r3, [r7, #12]
 8012f46:	2b00      	cmp	r3, #0
 8012f48:	d009      	beq.n	8012f5e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8012f4a:	2208      	movs	r2, #8
 8012f4c:	4909      	ldr	r1, [pc, #36]	; (8012f74 <Get_SerialNum+0x50>)
 8012f4e:	68f8      	ldr	r0, [r7, #12]
 8012f50:	f000 f814 	bl	8012f7c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8012f54:	2204      	movs	r2, #4
 8012f56:	4908      	ldr	r1, [pc, #32]	; (8012f78 <Get_SerialNum+0x54>)
 8012f58:	68b8      	ldr	r0, [r7, #8]
 8012f5a:	f000 f80f 	bl	8012f7c <IntToUnicode>
  }
}
 8012f5e:	bf00      	nop
 8012f60:	3710      	adds	r7, #16
 8012f62:	46bd      	mov	sp, r7
 8012f64:	bd80      	pop	{r7, pc}
 8012f66:	bf00      	nop
 8012f68:	1fff7a10 	.word	0x1fff7a10
 8012f6c:	1fff7a14 	.word	0x1fff7a14
 8012f70:	1fff7a18 	.word	0x1fff7a18
 8012f74:	2000016e 	.word	0x2000016e
 8012f78:	2000017e 	.word	0x2000017e

08012f7c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8012f7c:	b480      	push	{r7}
 8012f7e:	b087      	sub	sp, #28
 8012f80:	af00      	add	r7, sp, #0
 8012f82:	60f8      	str	r0, [r7, #12]
 8012f84:	60b9      	str	r1, [r7, #8]
 8012f86:	4613      	mov	r3, r2
 8012f88:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8012f8a:	2300      	movs	r3, #0
 8012f8c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8012f8e:	2300      	movs	r3, #0
 8012f90:	75fb      	strb	r3, [r7, #23]
 8012f92:	e027      	b.n	8012fe4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8012f94:	68fb      	ldr	r3, [r7, #12]
 8012f96:	0f1b      	lsrs	r3, r3, #28
 8012f98:	2b09      	cmp	r3, #9
 8012f9a:	d80b      	bhi.n	8012fb4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8012f9c:	68fb      	ldr	r3, [r7, #12]
 8012f9e:	0f1b      	lsrs	r3, r3, #28
 8012fa0:	b2da      	uxtb	r2, r3
 8012fa2:	7dfb      	ldrb	r3, [r7, #23]
 8012fa4:	005b      	lsls	r3, r3, #1
 8012fa6:	4619      	mov	r1, r3
 8012fa8:	68bb      	ldr	r3, [r7, #8]
 8012faa:	440b      	add	r3, r1
 8012fac:	3230      	adds	r2, #48	; 0x30
 8012fae:	b2d2      	uxtb	r2, r2
 8012fb0:	701a      	strb	r2, [r3, #0]
 8012fb2:	e00a      	b.n	8012fca <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8012fb4:	68fb      	ldr	r3, [r7, #12]
 8012fb6:	0f1b      	lsrs	r3, r3, #28
 8012fb8:	b2da      	uxtb	r2, r3
 8012fba:	7dfb      	ldrb	r3, [r7, #23]
 8012fbc:	005b      	lsls	r3, r3, #1
 8012fbe:	4619      	mov	r1, r3
 8012fc0:	68bb      	ldr	r3, [r7, #8]
 8012fc2:	440b      	add	r3, r1
 8012fc4:	3237      	adds	r2, #55	; 0x37
 8012fc6:	b2d2      	uxtb	r2, r2
 8012fc8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8012fca:	68fb      	ldr	r3, [r7, #12]
 8012fcc:	011b      	lsls	r3, r3, #4
 8012fce:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8012fd0:	7dfb      	ldrb	r3, [r7, #23]
 8012fd2:	005b      	lsls	r3, r3, #1
 8012fd4:	3301      	adds	r3, #1
 8012fd6:	68ba      	ldr	r2, [r7, #8]
 8012fd8:	4413      	add	r3, r2
 8012fda:	2200      	movs	r2, #0
 8012fdc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8012fde:	7dfb      	ldrb	r3, [r7, #23]
 8012fe0:	3301      	adds	r3, #1
 8012fe2:	75fb      	strb	r3, [r7, #23]
 8012fe4:	7dfa      	ldrb	r2, [r7, #23]
 8012fe6:	79fb      	ldrb	r3, [r7, #7]
 8012fe8:	429a      	cmp	r2, r3
 8012fea:	d3d3      	bcc.n	8012f94 <IntToUnicode+0x18>
  }
}
 8012fec:	bf00      	nop
 8012fee:	bf00      	nop
 8012ff0:	371c      	adds	r7, #28
 8012ff2:	46bd      	mov	sp, r7
 8012ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ff8:	4770      	bx	lr
	...

08012ffc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8012ffc:	b580      	push	{r7, lr}
 8012ffe:	b08a      	sub	sp, #40	; 0x28
 8013000:	af00      	add	r7, sp, #0
 8013002:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8013004:	f107 0314 	add.w	r3, r7, #20
 8013008:	2200      	movs	r2, #0
 801300a:	601a      	str	r2, [r3, #0]
 801300c:	605a      	str	r2, [r3, #4]
 801300e:	609a      	str	r2, [r3, #8]
 8013010:	60da      	str	r2, [r3, #12]
 8013012:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8013014:	687b      	ldr	r3, [r7, #4]
 8013016:	681b      	ldr	r3, [r3, #0]
 8013018:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801301c:	d13a      	bne.n	8013094 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801301e:	2300      	movs	r3, #0
 8013020:	613b      	str	r3, [r7, #16]
 8013022:	4b1e      	ldr	r3, [pc, #120]	; (801309c <HAL_PCD_MspInit+0xa0>)
 8013024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013026:	4a1d      	ldr	r2, [pc, #116]	; (801309c <HAL_PCD_MspInit+0xa0>)
 8013028:	f043 0301 	orr.w	r3, r3, #1
 801302c:	6313      	str	r3, [r2, #48]	; 0x30
 801302e:	4b1b      	ldr	r3, [pc, #108]	; (801309c <HAL_PCD_MspInit+0xa0>)
 8013030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013032:	f003 0301 	and.w	r3, r3, #1
 8013036:	613b      	str	r3, [r7, #16]
 8013038:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 801303a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 801303e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013040:	2302      	movs	r3, #2
 8013042:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013044:	2300      	movs	r3, #0
 8013046:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8013048:	2303      	movs	r3, #3
 801304a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 801304c:	230a      	movs	r3, #10
 801304e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8013050:	f107 0314 	add.w	r3, r7, #20
 8013054:	4619      	mov	r1, r3
 8013056:	4812      	ldr	r0, [pc, #72]	; (80130a0 <HAL_PCD_MspInit+0xa4>)
 8013058:	f7f3 fbf4 	bl	8006844 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801305c:	4b0f      	ldr	r3, [pc, #60]	; (801309c <HAL_PCD_MspInit+0xa0>)
 801305e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013060:	4a0e      	ldr	r2, [pc, #56]	; (801309c <HAL_PCD_MspInit+0xa0>)
 8013062:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013066:	6353      	str	r3, [r2, #52]	; 0x34
 8013068:	2300      	movs	r3, #0
 801306a:	60fb      	str	r3, [r7, #12]
 801306c:	4b0b      	ldr	r3, [pc, #44]	; (801309c <HAL_PCD_MspInit+0xa0>)
 801306e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013070:	4a0a      	ldr	r2, [pc, #40]	; (801309c <HAL_PCD_MspInit+0xa0>)
 8013072:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8013076:	6453      	str	r3, [r2, #68]	; 0x44
 8013078:	4b08      	ldr	r3, [pc, #32]	; (801309c <HAL_PCD_MspInit+0xa0>)
 801307a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801307c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8013080:	60fb      	str	r3, [r7, #12]
 8013082:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 6, 0);
 8013084:	2200      	movs	r2, #0
 8013086:	2106      	movs	r1, #6
 8013088:	2043      	movs	r0, #67	; 0x43
 801308a:	f7f2 fd1e 	bl	8005aca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 801308e:	2043      	movs	r0, #67	; 0x43
 8013090:	f7f2 fd37 	bl	8005b02 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8013094:	bf00      	nop
 8013096:	3728      	adds	r7, #40	; 0x28
 8013098:	46bd      	mov	sp, r7
 801309a:	bd80      	pop	{r7, pc}
 801309c:	40023800 	.word	0x40023800
 80130a0:	40020000 	.word	0x40020000

080130a4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80130a4:	b580      	push	{r7, lr}
 80130a6:	b082      	sub	sp, #8
 80130a8:	af00      	add	r7, sp, #0
 80130aa:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80130ac:	687b      	ldr	r3, [r7, #4]
 80130ae:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	; 0x4e0
 80130b2:	687b      	ldr	r3, [r7, #4]
 80130b4:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 80130b8:	4619      	mov	r1, r3
 80130ba:	4610      	mov	r0, r2
 80130bc:	f7fe fae5 	bl	801168a <USBD_LL_SetupStage>
}
 80130c0:	bf00      	nop
 80130c2:	3708      	adds	r7, #8
 80130c4:	46bd      	mov	sp, r7
 80130c6:	bd80      	pop	{r7, pc}

080130c8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80130c8:	b580      	push	{r7, lr}
 80130ca:	b082      	sub	sp, #8
 80130cc:	af00      	add	r7, sp, #0
 80130ce:	6078      	str	r0, [r7, #4]
 80130d0:	460b      	mov	r3, r1
 80130d2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80130d4:	687b      	ldr	r3, [r7, #4]
 80130d6:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 80130da:	78fa      	ldrb	r2, [r7, #3]
 80130dc:	6879      	ldr	r1, [r7, #4]
 80130de:	4613      	mov	r3, r2
 80130e0:	00db      	lsls	r3, r3, #3
 80130e2:	4413      	add	r3, r2
 80130e4:	009b      	lsls	r3, r3, #2
 80130e6:	440b      	add	r3, r1
 80130e8:	f503 7318 	add.w	r3, r3, #608	; 0x260
 80130ec:	681a      	ldr	r2, [r3, #0]
 80130ee:	78fb      	ldrb	r3, [r7, #3]
 80130f0:	4619      	mov	r1, r3
 80130f2:	f7fe fb1f 	bl	8011734 <USBD_LL_DataOutStage>
}
 80130f6:	bf00      	nop
 80130f8:	3708      	adds	r7, #8
 80130fa:	46bd      	mov	sp, r7
 80130fc:	bd80      	pop	{r7, pc}

080130fe <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80130fe:	b580      	push	{r7, lr}
 8013100:	b082      	sub	sp, #8
 8013102:	af00      	add	r7, sp, #0
 8013104:	6078      	str	r0, [r7, #4]
 8013106:	460b      	mov	r3, r1
 8013108:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801310a:	687b      	ldr	r3, [r7, #4]
 801310c:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 8013110:	78fa      	ldrb	r2, [r7, #3]
 8013112:	6879      	ldr	r1, [r7, #4]
 8013114:	4613      	mov	r3, r2
 8013116:	00db      	lsls	r3, r3, #3
 8013118:	4413      	add	r3, r2
 801311a:	009b      	lsls	r3, r3, #2
 801311c:	440b      	add	r3, r1
 801311e:	3320      	adds	r3, #32
 8013120:	681a      	ldr	r2, [r3, #0]
 8013122:	78fb      	ldrb	r3, [r7, #3]
 8013124:	4619      	mov	r1, r3
 8013126:	f7fe fbb8 	bl	801189a <USBD_LL_DataInStage>
}
 801312a:	bf00      	nop
 801312c:	3708      	adds	r7, #8
 801312e:	46bd      	mov	sp, r7
 8013130:	bd80      	pop	{r7, pc}

08013132 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013132:	b580      	push	{r7, lr}
 8013134:	b082      	sub	sp, #8
 8013136:	af00      	add	r7, sp, #0
 8013138:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801313a:	687b      	ldr	r3, [r7, #4]
 801313c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8013140:	4618      	mov	r0, r3
 8013142:	f7fe fcf2 	bl	8011b2a <USBD_LL_SOF>
}
 8013146:	bf00      	nop
 8013148:	3708      	adds	r7, #8
 801314a:	46bd      	mov	sp, r7
 801314c:	bd80      	pop	{r7, pc}

0801314e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801314e:	b580      	push	{r7, lr}
 8013150:	b084      	sub	sp, #16
 8013152:	af00      	add	r7, sp, #0
 8013154:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8013156:	2301      	movs	r3, #1
 8013158:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 801315a:	687b      	ldr	r3, [r7, #4]
 801315c:	79db      	ldrb	r3, [r3, #7]
 801315e:	2b02      	cmp	r3, #2
 8013160:	d001      	beq.n	8013166 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8013162:	f7ee fa3b 	bl	80015dc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8013166:	687b      	ldr	r3, [r7, #4]
 8013168:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 801316c:	7bfa      	ldrb	r2, [r7, #15]
 801316e:	4611      	mov	r1, r2
 8013170:	4618      	mov	r0, r3
 8013172:	f7fe fc96 	bl	8011aa2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8013176:	687b      	ldr	r3, [r7, #4]
 8013178:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 801317c:	4618      	mov	r0, r3
 801317e:	f7fe fc3e 	bl	80119fe <USBD_LL_Reset>
}
 8013182:	bf00      	nop
 8013184:	3710      	adds	r7, #16
 8013186:	46bd      	mov	sp, r7
 8013188:	bd80      	pop	{r7, pc}
	...

0801318c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801318c:	b580      	push	{r7, lr}
 801318e:	b082      	sub	sp, #8
 8013190:	af00      	add	r7, sp, #0
 8013192:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8013194:	687b      	ldr	r3, [r7, #4]
 8013196:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 801319a:	4618      	mov	r0, r3
 801319c:	f7fe fc91 	bl	8011ac2 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80131a0:	687b      	ldr	r3, [r7, #4]
 80131a2:	681b      	ldr	r3, [r3, #0]
 80131a4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80131a8:	681b      	ldr	r3, [r3, #0]
 80131aa:	687a      	ldr	r2, [r7, #4]
 80131ac:	6812      	ldr	r2, [r2, #0]
 80131ae:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80131b2:	f043 0301 	orr.w	r3, r3, #1
 80131b6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80131b8:	687b      	ldr	r3, [r7, #4]
 80131ba:	7adb      	ldrb	r3, [r3, #11]
 80131bc:	2b00      	cmp	r3, #0
 80131be:	d005      	beq.n	80131cc <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80131c0:	4b04      	ldr	r3, [pc, #16]	; (80131d4 <HAL_PCD_SuspendCallback+0x48>)
 80131c2:	691b      	ldr	r3, [r3, #16]
 80131c4:	4a03      	ldr	r2, [pc, #12]	; (80131d4 <HAL_PCD_SuspendCallback+0x48>)
 80131c6:	f043 0306 	orr.w	r3, r3, #6
 80131ca:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80131cc:	bf00      	nop
 80131ce:	3708      	adds	r7, #8
 80131d0:	46bd      	mov	sp, r7
 80131d2:	bd80      	pop	{r7, pc}
 80131d4:	e000ed00 	.word	0xe000ed00

080131d8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80131d8:	b580      	push	{r7, lr}
 80131da:	b082      	sub	sp, #8
 80131dc:	af00      	add	r7, sp, #0
 80131de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80131e0:	687b      	ldr	r3, [r7, #4]
 80131e2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 80131e6:	4618      	mov	r0, r3
 80131e8:	f7fe fc87 	bl	8011afa <USBD_LL_Resume>
}
 80131ec:	bf00      	nop
 80131ee:	3708      	adds	r7, #8
 80131f0:	46bd      	mov	sp, r7
 80131f2:	bd80      	pop	{r7, pc}

080131f4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80131f4:	b580      	push	{r7, lr}
 80131f6:	b082      	sub	sp, #8
 80131f8:	af00      	add	r7, sp, #0
 80131fa:	6078      	str	r0, [r7, #4]
 80131fc:	460b      	mov	r3, r1
 80131fe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8013200:	687b      	ldr	r3, [r7, #4]
 8013202:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8013206:	78fa      	ldrb	r2, [r7, #3]
 8013208:	4611      	mov	r1, r2
 801320a:	4618      	mov	r0, r3
 801320c:	f7fe fcdf 	bl	8011bce <USBD_LL_IsoOUTIncomplete>
}
 8013210:	bf00      	nop
 8013212:	3708      	adds	r7, #8
 8013214:	46bd      	mov	sp, r7
 8013216:	bd80      	pop	{r7, pc}

08013218 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013218:	b580      	push	{r7, lr}
 801321a:	b082      	sub	sp, #8
 801321c:	af00      	add	r7, sp, #0
 801321e:	6078      	str	r0, [r7, #4]
 8013220:	460b      	mov	r3, r1
 8013222:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8013224:	687b      	ldr	r3, [r7, #4]
 8013226:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 801322a:	78fa      	ldrb	r2, [r7, #3]
 801322c:	4611      	mov	r1, r2
 801322e:	4618      	mov	r0, r3
 8013230:	f7fe fc9b 	bl	8011b6a <USBD_LL_IsoINIncomplete>
}
 8013234:	bf00      	nop
 8013236:	3708      	adds	r7, #8
 8013238:	46bd      	mov	sp, r7
 801323a:	bd80      	pop	{r7, pc}

0801323c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801323c:	b580      	push	{r7, lr}
 801323e:	b082      	sub	sp, #8
 8013240:	af00      	add	r7, sp, #0
 8013242:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8013244:	687b      	ldr	r3, [r7, #4]
 8013246:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 801324a:	4618      	mov	r0, r3
 801324c:	f7fe fcf1 	bl	8011c32 <USBD_LL_DevConnected>
}
 8013250:	bf00      	nop
 8013252:	3708      	adds	r7, #8
 8013254:	46bd      	mov	sp, r7
 8013256:	bd80      	pop	{r7, pc}

08013258 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013258:	b580      	push	{r7, lr}
 801325a:	b082      	sub	sp, #8
 801325c:	af00      	add	r7, sp, #0
 801325e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8013260:	687b      	ldr	r3, [r7, #4]
 8013262:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8013266:	4618      	mov	r0, r3
 8013268:	f7fe fcee 	bl	8011c48 <USBD_LL_DevDisconnected>
}
 801326c:	bf00      	nop
 801326e:	3708      	adds	r7, #8
 8013270:	46bd      	mov	sp, r7
 8013272:	bd80      	pop	{r7, pc}

08013274 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8013274:	b580      	push	{r7, lr}
 8013276:	b082      	sub	sp, #8
 8013278:	af00      	add	r7, sp, #0
 801327a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 801327c:	687b      	ldr	r3, [r7, #4]
 801327e:	781b      	ldrb	r3, [r3, #0]
 8013280:	2b00      	cmp	r3, #0
 8013282:	d13c      	bne.n	80132fe <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8013284:	4a20      	ldr	r2, [pc, #128]	; (8013308 <USBD_LL_Init+0x94>)
 8013286:	687b      	ldr	r3, [r7, #4]
 8013288:	f8c2 34e0 	str.w	r3, [r2, #1248]	; 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 801328c:	687b      	ldr	r3, [r7, #4]
 801328e:	4a1e      	ldr	r2, [pc, #120]	; (8013308 <USBD_LL_Init+0x94>)
 8013290:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8013294:	4b1c      	ldr	r3, [pc, #112]	; (8013308 <USBD_LL_Init+0x94>)
 8013296:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 801329a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 801329c:	4b1a      	ldr	r3, [pc, #104]	; (8013308 <USBD_LL_Init+0x94>)
 801329e:	2204      	movs	r2, #4
 80132a0:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80132a2:	4b19      	ldr	r3, [pc, #100]	; (8013308 <USBD_LL_Init+0x94>)
 80132a4:	2202      	movs	r2, #2
 80132a6:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80132a8:	4b17      	ldr	r3, [pc, #92]	; (8013308 <USBD_LL_Init+0x94>)
 80132aa:	2200      	movs	r2, #0
 80132ac:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80132ae:	4b16      	ldr	r3, [pc, #88]	; (8013308 <USBD_LL_Init+0x94>)
 80132b0:	2202      	movs	r2, #2
 80132b2:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80132b4:	4b14      	ldr	r3, [pc, #80]	; (8013308 <USBD_LL_Init+0x94>)
 80132b6:	2200      	movs	r2, #0
 80132b8:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80132ba:	4b13      	ldr	r3, [pc, #76]	; (8013308 <USBD_LL_Init+0x94>)
 80132bc:	2200      	movs	r2, #0
 80132be:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80132c0:	4b11      	ldr	r3, [pc, #68]	; (8013308 <USBD_LL_Init+0x94>)
 80132c2:	2200      	movs	r2, #0
 80132c4:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80132c6:	4b10      	ldr	r3, [pc, #64]	; (8013308 <USBD_LL_Init+0x94>)
 80132c8:	2200      	movs	r2, #0
 80132ca:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80132cc:	4b0e      	ldr	r3, [pc, #56]	; (8013308 <USBD_LL_Init+0x94>)
 80132ce:	2200      	movs	r2, #0
 80132d0:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80132d2:	480d      	ldr	r0, [pc, #52]	; (8013308 <USBD_LL_Init+0x94>)
 80132d4:	f7f3 fc85 	bl	8006be2 <HAL_PCD_Init>
 80132d8:	4603      	mov	r3, r0
 80132da:	2b00      	cmp	r3, #0
 80132dc:	d001      	beq.n	80132e2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80132de:	f7ee f97d 	bl	80015dc <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80132e2:	2180      	movs	r1, #128	; 0x80
 80132e4:	4808      	ldr	r0, [pc, #32]	; (8013308 <USBD_LL_Init+0x94>)
 80132e6:	f7f4 feb0 	bl	800804a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80132ea:	2240      	movs	r2, #64	; 0x40
 80132ec:	2100      	movs	r1, #0
 80132ee:	4806      	ldr	r0, [pc, #24]	; (8013308 <USBD_LL_Init+0x94>)
 80132f0:	f7f4 fe64 	bl	8007fbc <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80132f4:	2280      	movs	r2, #128	; 0x80
 80132f6:	2101      	movs	r1, #1
 80132f8:	4803      	ldr	r0, [pc, #12]	; (8013308 <USBD_LL_Init+0x94>)
 80132fa:	f7f4 fe5f 	bl	8007fbc <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80132fe:	2300      	movs	r3, #0
}
 8013300:	4618      	mov	r0, r3
 8013302:	3708      	adds	r7, #8
 8013304:	46bd      	mov	sp, r7
 8013306:	bd80      	pop	{r7, pc}
 8013308:	2000881c 	.word	0x2000881c

0801330c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 801330c:	b580      	push	{r7, lr}
 801330e:	b084      	sub	sp, #16
 8013310:	af00      	add	r7, sp, #0
 8013312:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013314:	2300      	movs	r3, #0
 8013316:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013318:	2300      	movs	r3, #0
 801331a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 801331c:	687b      	ldr	r3, [r7, #4]
 801331e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8013322:	4618      	mov	r0, r3
 8013324:	f7f3 fd6c 	bl	8006e00 <HAL_PCD_Start>
 8013328:	4603      	mov	r3, r0
 801332a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801332c:	7bfb      	ldrb	r3, [r7, #15]
 801332e:	4618      	mov	r0, r3
 8013330:	f000 f942 	bl	80135b8 <USBD_Get_USB_Status>
 8013334:	4603      	mov	r3, r0
 8013336:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013338:	7bbb      	ldrb	r3, [r7, #14]
}
 801333a:	4618      	mov	r0, r3
 801333c:	3710      	adds	r7, #16
 801333e:	46bd      	mov	sp, r7
 8013340:	bd80      	pop	{r7, pc}

08013342 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8013342:	b580      	push	{r7, lr}
 8013344:	b084      	sub	sp, #16
 8013346:	af00      	add	r7, sp, #0
 8013348:	6078      	str	r0, [r7, #4]
 801334a:	4608      	mov	r0, r1
 801334c:	4611      	mov	r1, r2
 801334e:	461a      	mov	r2, r3
 8013350:	4603      	mov	r3, r0
 8013352:	70fb      	strb	r3, [r7, #3]
 8013354:	460b      	mov	r3, r1
 8013356:	70bb      	strb	r3, [r7, #2]
 8013358:	4613      	mov	r3, r2
 801335a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801335c:	2300      	movs	r3, #0
 801335e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013360:	2300      	movs	r3, #0
 8013362:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8013364:	687b      	ldr	r3, [r7, #4]
 8013366:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 801336a:	78bb      	ldrb	r3, [r7, #2]
 801336c:	883a      	ldrh	r2, [r7, #0]
 801336e:	78f9      	ldrb	r1, [r7, #3]
 8013370:	f7f4 fa40 	bl	80077f4 <HAL_PCD_EP_Open>
 8013374:	4603      	mov	r3, r0
 8013376:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013378:	7bfb      	ldrb	r3, [r7, #15]
 801337a:	4618      	mov	r0, r3
 801337c:	f000 f91c 	bl	80135b8 <USBD_Get_USB_Status>
 8013380:	4603      	mov	r3, r0
 8013382:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013384:	7bbb      	ldrb	r3, [r7, #14]
}
 8013386:	4618      	mov	r0, r3
 8013388:	3710      	adds	r7, #16
 801338a:	46bd      	mov	sp, r7
 801338c:	bd80      	pop	{r7, pc}

0801338e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801338e:	b580      	push	{r7, lr}
 8013390:	b084      	sub	sp, #16
 8013392:	af00      	add	r7, sp, #0
 8013394:	6078      	str	r0, [r7, #4]
 8013396:	460b      	mov	r3, r1
 8013398:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801339a:	2300      	movs	r3, #0
 801339c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801339e:	2300      	movs	r3, #0
 80133a0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80133a2:	687b      	ldr	r3, [r7, #4]
 80133a4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80133a8:	78fa      	ldrb	r2, [r7, #3]
 80133aa:	4611      	mov	r1, r2
 80133ac:	4618      	mov	r0, r3
 80133ae:	f7f4 fa89 	bl	80078c4 <HAL_PCD_EP_Close>
 80133b2:	4603      	mov	r3, r0
 80133b4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80133b6:	7bfb      	ldrb	r3, [r7, #15]
 80133b8:	4618      	mov	r0, r3
 80133ba:	f000 f8fd 	bl	80135b8 <USBD_Get_USB_Status>
 80133be:	4603      	mov	r3, r0
 80133c0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80133c2:	7bbb      	ldrb	r3, [r7, #14]
}
 80133c4:	4618      	mov	r0, r3
 80133c6:	3710      	adds	r7, #16
 80133c8:	46bd      	mov	sp, r7
 80133ca:	bd80      	pop	{r7, pc}

080133cc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80133cc:	b580      	push	{r7, lr}
 80133ce:	b084      	sub	sp, #16
 80133d0:	af00      	add	r7, sp, #0
 80133d2:	6078      	str	r0, [r7, #4]
 80133d4:	460b      	mov	r3, r1
 80133d6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80133d8:	2300      	movs	r3, #0
 80133da:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80133dc:	2300      	movs	r3, #0
 80133de:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80133e0:	687b      	ldr	r3, [r7, #4]
 80133e2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80133e6:	78fa      	ldrb	r2, [r7, #3]
 80133e8:	4611      	mov	r1, r2
 80133ea:	4618      	mov	r0, r3
 80133ec:	f7f4 fb41 	bl	8007a72 <HAL_PCD_EP_SetStall>
 80133f0:	4603      	mov	r3, r0
 80133f2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80133f4:	7bfb      	ldrb	r3, [r7, #15]
 80133f6:	4618      	mov	r0, r3
 80133f8:	f000 f8de 	bl	80135b8 <USBD_Get_USB_Status>
 80133fc:	4603      	mov	r3, r0
 80133fe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013400:	7bbb      	ldrb	r3, [r7, #14]
}
 8013402:	4618      	mov	r0, r3
 8013404:	3710      	adds	r7, #16
 8013406:	46bd      	mov	sp, r7
 8013408:	bd80      	pop	{r7, pc}

0801340a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801340a:	b580      	push	{r7, lr}
 801340c:	b084      	sub	sp, #16
 801340e:	af00      	add	r7, sp, #0
 8013410:	6078      	str	r0, [r7, #4]
 8013412:	460b      	mov	r3, r1
 8013414:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013416:	2300      	movs	r3, #0
 8013418:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801341a:	2300      	movs	r3, #0
 801341c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801341e:	687b      	ldr	r3, [r7, #4]
 8013420:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8013424:	78fa      	ldrb	r2, [r7, #3]
 8013426:	4611      	mov	r1, r2
 8013428:	4618      	mov	r0, r3
 801342a:	f7f4 fb85 	bl	8007b38 <HAL_PCD_EP_ClrStall>
 801342e:	4603      	mov	r3, r0
 8013430:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013432:	7bfb      	ldrb	r3, [r7, #15]
 8013434:	4618      	mov	r0, r3
 8013436:	f000 f8bf 	bl	80135b8 <USBD_Get_USB_Status>
 801343a:	4603      	mov	r3, r0
 801343c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801343e:	7bbb      	ldrb	r3, [r7, #14]
}
 8013440:	4618      	mov	r0, r3
 8013442:	3710      	adds	r7, #16
 8013444:	46bd      	mov	sp, r7
 8013446:	bd80      	pop	{r7, pc}

08013448 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013448:	b480      	push	{r7}
 801344a:	b085      	sub	sp, #20
 801344c:	af00      	add	r7, sp, #0
 801344e:	6078      	str	r0, [r7, #4]
 8013450:	460b      	mov	r3, r1
 8013452:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8013454:	687b      	ldr	r3, [r7, #4]
 8013456:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801345a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 801345c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8013460:	2b00      	cmp	r3, #0
 8013462:	da0b      	bge.n	801347c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8013464:	78fb      	ldrb	r3, [r7, #3]
 8013466:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801346a:	68f9      	ldr	r1, [r7, #12]
 801346c:	4613      	mov	r3, r2
 801346e:	00db      	lsls	r3, r3, #3
 8013470:	4413      	add	r3, r2
 8013472:	009b      	lsls	r3, r3, #2
 8013474:	440b      	add	r3, r1
 8013476:	3316      	adds	r3, #22
 8013478:	781b      	ldrb	r3, [r3, #0]
 801347a:	e00b      	b.n	8013494 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801347c:	78fb      	ldrb	r3, [r7, #3]
 801347e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8013482:	68f9      	ldr	r1, [r7, #12]
 8013484:	4613      	mov	r3, r2
 8013486:	00db      	lsls	r3, r3, #3
 8013488:	4413      	add	r3, r2
 801348a:	009b      	lsls	r3, r3, #2
 801348c:	440b      	add	r3, r1
 801348e:	f203 2356 	addw	r3, r3, #598	; 0x256
 8013492:	781b      	ldrb	r3, [r3, #0]
  }
}
 8013494:	4618      	mov	r0, r3
 8013496:	3714      	adds	r7, #20
 8013498:	46bd      	mov	sp, r7
 801349a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801349e:	4770      	bx	lr

080134a0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80134a0:	b580      	push	{r7, lr}
 80134a2:	b084      	sub	sp, #16
 80134a4:	af00      	add	r7, sp, #0
 80134a6:	6078      	str	r0, [r7, #4]
 80134a8:	460b      	mov	r3, r1
 80134aa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80134ac:	2300      	movs	r3, #0
 80134ae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80134b0:	2300      	movs	r3, #0
 80134b2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80134b4:	687b      	ldr	r3, [r7, #4]
 80134b6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80134ba:	78fa      	ldrb	r2, [r7, #3]
 80134bc:	4611      	mov	r1, r2
 80134be:	4618      	mov	r0, r3
 80134c0:	f7f4 f974 	bl	80077ac <HAL_PCD_SetAddress>
 80134c4:	4603      	mov	r3, r0
 80134c6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80134c8:	7bfb      	ldrb	r3, [r7, #15]
 80134ca:	4618      	mov	r0, r3
 80134cc:	f000 f874 	bl	80135b8 <USBD_Get_USB_Status>
 80134d0:	4603      	mov	r3, r0
 80134d2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80134d4:	7bbb      	ldrb	r3, [r7, #14]
}
 80134d6:	4618      	mov	r0, r3
 80134d8:	3710      	adds	r7, #16
 80134da:	46bd      	mov	sp, r7
 80134dc:	bd80      	pop	{r7, pc}

080134de <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80134de:	b580      	push	{r7, lr}
 80134e0:	b086      	sub	sp, #24
 80134e2:	af00      	add	r7, sp, #0
 80134e4:	60f8      	str	r0, [r7, #12]
 80134e6:	607a      	str	r2, [r7, #4]
 80134e8:	603b      	str	r3, [r7, #0]
 80134ea:	460b      	mov	r3, r1
 80134ec:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80134ee:	2300      	movs	r3, #0
 80134f0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80134f2:	2300      	movs	r3, #0
 80134f4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80134f6:	68fb      	ldr	r3, [r7, #12]
 80134f8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80134fc:	7af9      	ldrb	r1, [r7, #11]
 80134fe:	683b      	ldr	r3, [r7, #0]
 8013500:	687a      	ldr	r2, [r7, #4]
 8013502:	f7f4 fa7c 	bl	80079fe <HAL_PCD_EP_Transmit>
 8013506:	4603      	mov	r3, r0
 8013508:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801350a:	7dfb      	ldrb	r3, [r7, #23]
 801350c:	4618      	mov	r0, r3
 801350e:	f000 f853 	bl	80135b8 <USBD_Get_USB_Status>
 8013512:	4603      	mov	r3, r0
 8013514:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8013516:	7dbb      	ldrb	r3, [r7, #22]
}
 8013518:	4618      	mov	r0, r3
 801351a:	3718      	adds	r7, #24
 801351c:	46bd      	mov	sp, r7
 801351e:	bd80      	pop	{r7, pc}

08013520 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8013520:	b580      	push	{r7, lr}
 8013522:	b086      	sub	sp, #24
 8013524:	af00      	add	r7, sp, #0
 8013526:	60f8      	str	r0, [r7, #12]
 8013528:	607a      	str	r2, [r7, #4]
 801352a:	603b      	str	r3, [r7, #0]
 801352c:	460b      	mov	r3, r1
 801352e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013530:	2300      	movs	r3, #0
 8013532:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013534:	2300      	movs	r3, #0
 8013536:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8013538:	68fb      	ldr	r3, [r7, #12]
 801353a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 801353e:	7af9      	ldrb	r1, [r7, #11]
 8013540:	683b      	ldr	r3, [r7, #0]
 8013542:	687a      	ldr	r2, [r7, #4]
 8013544:	f7f4 fa08 	bl	8007958 <HAL_PCD_EP_Receive>
 8013548:	4603      	mov	r3, r0
 801354a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801354c:	7dfb      	ldrb	r3, [r7, #23]
 801354e:	4618      	mov	r0, r3
 8013550:	f000 f832 	bl	80135b8 <USBD_Get_USB_Status>
 8013554:	4603      	mov	r3, r0
 8013556:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8013558:	7dbb      	ldrb	r3, [r7, #22]
}
 801355a:	4618      	mov	r0, r3
 801355c:	3718      	adds	r7, #24
 801355e:	46bd      	mov	sp, r7
 8013560:	bd80      	pop	{r7, pc}

08013562 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013562:	b580      	push	{r7, lr}
 8013564:	b082      	sub	sp, #8
 8013566:	af00      	add	r7, sp, #0
 8013568:	6078      	str	r0, [r7, #4]
 801356a:	460b      	mov	r3, r1
 801356c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801356e:	687b      	ldr	r3, [r7, #4]
 8013570:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8013574:	78fa      	ldrb	r2, [r7, #3]
 8013576:	4611      	mov	r1, r2
 8013578:	4618      	mov	r0, r3
 801357a:	f7f4 fa28 	bl	80079ce <HAL_PCD_EP_GetRxCount>
 801357e:	4603      	mov	r3, r0
}
 8013580:	4618      	mov	r0, r3
 8013582:	3708      	adds	r7, #8
 8013584:	46bd      	mov	sp, r7
 8013586:	bd80      	pop	{r7, pc}

08013588 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8013588:	b480      	push	{r7}
 801358a:	b083      	sub	sp, #12
 801358c:	af00      	add	r7, sp, #0
 801358e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8013590:	4b03      	ldr	r3, [pc, #12]	; (80135a0 <USBD_static_malloc+0x18>)
}
 8013592:	4618      	mov	r0, r3
 8013594:	370c      	adds	r7, #12
 8013596:	46bd      	mov	sp, r7
 8013598:	f85d 7b04 	ldr.w	r7, [sp], #4
 801359c:	4770      	bx	lr
 801359e:	bf00      	nop
 80135a0:	20008d00 	.word	0x20008d00

080135a4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80135a4:	b480      	push	{r7}
 80135a6:	b083      	sub	sp, #12
 80135a8:	af00      	add	r7, sp, #0
 80135aa:	6078      	str	r0, [r7, #4]

}
 80135ac:	bf00      	nop
 80135ae:	370c      	adds	r7, #12
 80135b0:	46bd      	mov	sp, r7
 80135b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135b6:	4770      	bx	lr

080135b8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80135b8:	b480      	push	{r7}
 80135ba:	b085      	sub	sp, #20
 80135bc:	af00      	add	r7, sp, #0
 80135be:	4603      	mov	r3, r0
 80135c0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80135c2:	2300      	movs	r3, #0
 80135c4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80135c6:	79fb      	ldrb	r3, [r7, #7]
 80135c8:	2b03      	cmp	r3, #3
 80135ca:	d817      	bhi.n	80135fc <USBD_Get_USB_Status+0x44>
 80135cc:	a201      	add	r2, pc, #4	; (adr r2, 80135d4 <USBD_Get_USB_Status+0x1c>)
 80135ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80135d2:	bf00      	nop
 80135d4:	080135e5 	.word	0x080135e5
 80135d8:	080135eb 	.word	0x080135eb
 80135dc:	080135f1 	.word	0x080135f1
 80135e0:	080135f7 	.word	0x080135f7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80135e4:	2300      	movs	r3, #0
 80135e6:	73fb      	strb	r3, [r7, #15]
    break;
 80135e8:	e00b      	b.n	8013602 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80135ea:	2303      	movs	r3, #3
 80135ec:	73fb      	strb	r3, [r7, #15]
    break;
 80135ee:	e008      	b.n	8013602 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80135f0:	2301      	movs	r3, #1
 80135f2:	73fb      	strb	r3, [r7, #15]
    break;
 80135f4:	e005      	b.n	8013602 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80135f6:	2303      	movs	r3, #3
 80135f8:	73fb      	strb	r3, [r7, #15]
    break;
 80135fa:	e002      	b.n	8013602 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80135fc:	2303      	movs	r3, #3
 80135fe:	73fb      	strb	r3, [r7, #15]
    break;
 8013600:	bf00      	nop
  }
  return usb_status;
 8013602:	7bfb      	ldrb	r3, [r7, #15]
}
 8013604:	4618      	mov	r0, r3
 8013606:	3714      	adds	r7, #20
 8013608:	46bd      	mov	sp, r7
 801360a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801360e:	4770      	bx	lr

08013610 <malloc>:
 8013610:	4b02      	ldr	r3, [pc, #8]	; (801361c <malloc+0xc>)
 8013612:	4601      	mov	r1, r0
 8013614:	6818      	ldr	r0, [r3, #0]
 8013616:	f000 b82b 	b.w	8013670 <_malloc_r>
 801361a:	bf00      	nop
 801361c:	2000034c 	.word	0x2000034c

08013620 <free>:
 8013620:	4b02      	ldr	r3, [pc, #8]	; (801362c <free+0xc>)
 8013622:	4601      	mov	r1, r0
 8013624:	6818      	ldr	r0, [r3, #0]
 8013626:	f001 b9c9 	b.w	80149bc <_free_r>
 801362a:	bf00      	nop
 801362c:	2000034c 	.word	0x2000034c

08013630 <sbrk_aligned>:
 8013630:	b570      	push	{r4, r5, r6, lr}
 8013632:	4e0e      	ldr	r6, [pc, #56]	; (801366c <sbrk_aligned+0x3c>)
 8013634:	460c      	mov	r4, r1
 8013636:	6831      	ldr	r1, [r6, #0]
 8013638:	4605      	mov	r5, r0
 801363a:	b911      	cbnz	r1, 8013642 <sbrk_aligned+0x12>
 801363c:	f001 f94a 	bl	80148d4 <_sbrk_r>
 8013640:	6030      	str	r0, [r6, #0]
 8013642:	4621      	mov	r1, r4
 8013644:	4628      	mov	r0, r5
 8013646:	f001 f945 	bl	80148d4 <_sbrk_r>
 801364a:	1c43      	adds	r3, r0, #1
 801364c:	d00a      	beq.n	8013664 <sbrk_aligned+0x34>
 801364e:	1cc4      	adds	r4, r0, #3
 8013650:	f024 0403 	bic.w	r4, r4, #3
 8013654:	42a0      	cmp	r0, r4
 8013656:	d007      	beq.n	8013668 <sbrk_aligned+0x38>
 8013658:	1a21      	subs	r1, r4, r0
 801365a:	4628      	mov	r0, r5
 801365c:	f001 f93a 	bl	80148d4 <_sbrk_r>
 8013660:	3001      	adds	r0, #1
 8013662:	d101      	bne.n	8013668 <sbrk_aligned+0x38>
 8013664:	f04f 34ff 	mov.w	r4, #4294967295
 8013668:	4620      	mov	r0, r4
 801366a:	bd70      	pop	{r4, r5, r6, pc}
 801366c:	20008f24 	.word	0x20008f24

08013670 <_malloc_r>:
 8013670:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013674:	1ccd      	adds	r5, r1, #3
 8013676:	f025 0503 	bic.w	r5, r5, #3
 801367a:	3508      	adds	r5, #8
 801367c:	2d0c      	cmp	r5, #12
 801367e:	bf38      	it	cc
 8013680:	250c      	movcc	r5, #12
 8013682:	2d00      	cmp	r5, #0
 8013684:	4607      	mov	r7, r0
 8013686:	db01      	blt.n	801368c <_malloc_r+0x1c>
 8013688:	42a9      	cmp	r1, r5
 801368a:	d905      	bls.n	8013698 <_malloc_r+0x28>
 801368c:	230c      	movs	r3, #12
 801368e:	603b      	str	r3, [r7, #0]
 8013690:	2600      	movs	r6, #0
 8013692:	4630      	mov	r0, r6
 8013694:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013698:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 801376c <_malloc_r+0xfc>
 801369c:	f000 f868 	bl	8013770 <__malloc_lock>
 80136a0:	f8d8 3000 	ldr.w	r3, [r8]
 80136a4:	461c      	mov	r4, r3
 80136a6:	bb5c      	cbnz	r4, 8013700 <_malloc_r+0x90>
 80136a8:	4629      	mov	r1, r5
 80136aa:	4638      	mov	r0, r7
 80136ac:	f7ff ffc0 	bl	8013630 <sbrk_aligned>
 80136b0:	1c43      	adds	r3, r0, #1
 80136b2:	4604      	mov	r4, r0
 80136b4:	d155      	bne.n	8013762 <_malloc_r+0xf2>
 80136b6:	f8d8 4000 	ldr.w	r4, [r8]
 80136ba:	4626      	mov	r6, r4
 80136bc:	2e00      	cmp	r6, #0
 80136be:	d145      	bne.n	801374c <_malloc_r+0xdc>
 80136c0:	2c00      	cmp	r4, #0
 80136c2:	d048      	beq.n	8013756 <_malloc_r+0xe6>
 80136c4:	6823      	ldr	r3, [r4, #0]
 80136c6:	4631      	mov	r1, r6
 80136c8:	4638      	mov	r0, r7
 80136ca:	eb04 0903 	add.w	r9, r4, r3
 80136ce:	f001 f901 	bl	80148d4 <_sbrk_r>
 80136d2:	4581      	cmp	r9, r0
 80136d4:	d13f      	bne.n	8013756 <_malloc_r+0xe6>
 80136d6:	6821      	ldr	r1, [r4, #0]
 80136d8:	1a6d      	subs	r5, r5, r1
 80136da:	4629      	mov	r1, r5
 80136dc:	4638      	mov	r0, r7
 80136de:	f7ff ffa7 	bl	8013630 <sbrk_aligned>
 80136e2:	3001      	adds	r0, #1
 80136e4:	d037      	beq.n	8013756 <_malloc_r+0xe6>
 80136e6:	6823      	ldr	r3, [r4, #0]
 80136e8:	442b      	add	r3, r5
 80136ea:	6023      	str	r3, [r4, #0]
 80136ec:	f8d8 3000 	ldr.w	r3, [r8]
 80136f0:	2b00      	cmp	r3, #0
 80136f2:	d038      	beq.n	8013766 <_malloc_r+0xf6>
 80136f4:	685a      	ldr	r2, [r3, #4]
 80136f6:	42a2      	cmp	r2, r4
 80136f8:	d12b      	bne.n	8013752 <_malloc_r+0xe2>
 80136fa:	2200      	movs	r2, #0
 80136fc:	605a      	str	r2, [r3, #4]
 80136fe:	e00f      	b.n	8013720 <_malloc_r+0xb0>
 8013700:	6822      	ldr	r2, [r4, #0]
 8013702:	1b52      	subs	r2, r2, r5
 8013704:	d41f      	bmi.n	8013746 <_malloc_r+0xd6>
 8013706:	2a0b      	cmp	r2, #11
 8013708:	d917      	bls.n	801373a <_malloc_r+0xca>
 801370a:	1961      	adds	r1, r4, r5
 801370c:	42a3      	cmp	r3, r4
 801370e:	6025      	str	r5, [r4, #0]
 8013710:	bf18      	it	ne
 8013712:	6059      	strne	r1, [r3, #4]
 8013714:	6863      	ldr	r3, [r4, #4]
 8013716:	bf08      	it	eq
 8013718:	f8c8 1000 	streq.w	r1, [r8]
 801371c:	5162      	str	r2, [r4, r5]
 801371e:	604b      	str	r3, [r1, #4]
 8013720:	4638      	mov	r0, r7
 8013722:	f104 060b 	add.w	r6, r4, #11
 8013726:	f000 f829 	bl	801377c <__malloc_unlock>
 801372a:	f026 0607 	bic.w	r6, r6, #7
 801372e:	1d23      	adds	r3, r4, #4
 8013730:	1af2      	subs	r2, r6, r3
 8013732:	d0ae      	beq.n	8013692 <_malloc_r+0x22>
 8013734:	1b9b      	subs	r3, r3, r6
 8013736:	50a3      	str	r3, [r4, r2]
 8013738:	e7ab      	b.n	8013692 <_malloc_r+0x22>
 801373a:	42a3      	cmp	r3, r4
 801373c:	6862      	ldr	r2, [r4, #4]
 801373e:	d1dd      	bne.n	80136fc <_malloc_r+0x8c>
 8013740:	f8c8 2000 	str.w	r2, [r8]
 8013744:	e7ec      	b.n	8013720 <_malloc_r+0xb0>
 8013746:	4623      	mov	r3, r4
 8013748:	6864      	ldr	r4, [r4, #4]
 801374a:	e7ac      	b.n	80136a6 <_malloc_r+0x36>
 801374c:	4634      	mov	r4, r6
 801374e:	6876      	ldr	r6, [r6, #4]
 8013750:	e7b4      	b.n	80136bc <_malloc_r+0x4c>
 8013752:	4613      	mov	r3, r2
 8013754:	e7cc      	b.n	80136f0 <_malloc_r+0x80>
 8013756:	230c      	movs	r3, #12
 8013758:	603b      	str	r3, [r7, #0]
 801375a:	4638      	mov	r0, r7
 801375c:	f000 f80e 	bl	801377c <__malloc_unlock>
 8013760:	e797      	b.n	8013692 <_malloc_r+0x22>
 8013762:	6025      	str	r5, [r4, #0]
 8013764:	e7dc      	b.n	8013720 <_malloc_r+0xb0>
 8013766:	605b      	str	r3, [r3, #4]
 8013768:	deff      	udf	#255	; 0xff
 801376a:	bf00      	nop
 801376c:	20008f20 	.word	0x20008f20

08013770 <__malloc_lock>:
 8013770:	4801      	ldr	r0, [pc, #4]	; (8013778 <__malloc_lock+0x8>)
 8013772:	f001 b8fc 	b.w	801496e <__retarget_lock_acquire_recursive>
 8013776:	bf00      	nop
 8013778:	20009068 	.word	0x20009068

0801377c <__malloc_unlock>:
 801377c:	4801      	ldr	r0, [pc, #4]	; (8013784 <__malloc_unlock+0x8>)
 801377e:	f001 b8f7 	b.w	8014970 <__retarget_lock_release_recursive>
 8013782:	bf00      	nop
 8013784:	20009068 	.word	0x20009068

08013788 <sulp>:
 8013788:	b570      	push	{r4, r5, r6, lr}
 801378a:	4604      	mov	r4, r0
 801378c:	460d      	mov	r5, r1
 801378e:	ec45 4b10 	vmov	d0, r4, r5
 8013792:	4616      	mov	r6, r2
 8013794:	f002 f834 	bl	8015800 <__ulp>
 8013798:	ec51 0b10 	vmov	r0, r1, d0
 801379c:	b17e      	cbz	r6, 80137be <sulp+0x36>
 801379e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80137a2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80137a6:	2b00      	cmp	r3, #0
 80137a8:	dd09      	ble.n	80137be <sulp+0x36>
 80137aa:	051b      	lsls	r3, r3, #20
 80137ac:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80137b0:	2400      	movs	r4, #0
 80137b2:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80137b6:	4622      	mov	r2, r4
 80137b8:	462b      	mov	r3, r5
 80137ba:	f7ec ff2d 	bl	8000618 <__aeabi_dmul>
 80137be:	bd70      	pop	{r4, r5, r6, pc}

080137c0 <_strtod_l>:
 80137c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80137c4:	ed2d 8b02 	vpush	{d8}
 80137c8:	b09b      	sub	sp, #108	; 0x6c
 80137ca:	4604      	mov	r4, r0
 80137cc:	9213      	str	r2, [sp, #76]	; 0x4c
 80137ce:	2200      	movs	r2, #0
 80137d0:	9216      	str	r2, [sp, #88]	; 0x58
 80137d2:	460d      	mov	r5, r1
 80137d4:	f04f 0800 	mov.w	r8, #0
 80137d8:	f04f 0900 	mov.w	r9, #0
 80137dc:	460a      	mov	r2, r1
 80137de:	9215      	str	r2, [sp, #84]	; 0x54
 80137e0:	7811      	ldrb	r1, [r2, #0]
 80137e2:	292b      	cmp	r1, #43	; 0x2b
 80137e4:	d04c      	beq.n	8013880 <_strtod_l+0xc0>
 80137e6:	d83a      	bhi.n	801385e <_strtod_l+0x9e>
 80137e8:	290d      	cmp	r1, #13
 80137ea:	d834      	bhi.n	8013856 <_strtod_l+0x96>
 80137ec:	2908      	cmp	r1, #8
 80137ee:	d834      	bhi.n	801385a <_strtod_l+0x9a>
 80137f0:	2900      	cmp	r1, #0
 80137f2:	d03d      	beq.n	8013870 <_strtod_l+0xb0>
 80137f4:	2200      	movs	r2, #0
 80137f6:	920a      	str	r2, [sp, #40]	; 0x28
 80137f8:	9e15      	ldr	r6, [sp, #84]	; 0x54
 80137fa:	7832      	ldrb	r2, [r6, #0]
 80137fc:	2a30      	cmp	r2, #48	; 0x30
 80137fe:	f040 80b4 	bne.w	801396a <_strtod_l+0x1aa>
 8013802:	7872      	ldrb	r2, [r6, #1]
 8013804:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8013808:	2a58      	cmp	r2, #88	; 0x58
 801380a:	d170      	bne.n	80138ee <_strtod_l+0x12e>
 801380c:	9302      	str	r3, [sp, #8]
 801380e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013810:	9301      	str	r3, [sp, #4]
 8013812:	ab16      	add	r3, sp, #88	; 0x58
 8013814:	9300      	str	r3, [sp, #0]
 8013816:	4a8e      	ldr	r2, [pc, #568]	; (8013a50 <_strtod_l+0x290>)
 8013818:	ab17      	add	r3, sp, #92	; 0x5c
 801381a:	a915      	add	r1, sp, #84	; 0x54
 801381c:	4620      	mov	r0, r4
 801381e:	f001 f981 	bl	8014b24 <__gethex>
 8013822:	f010 070f 	ands.w	r7, r0, #15
 8013826:	4605      	mov	r5, r0
 8013828:	d005      	beq.n	8013836 <_strtod_l+0x76>
 801382a:	2f06      	cmp	r7, #6
 801382c:	d12a      	bne.n	8013884 <_strtod_l+0xc4>
 801382e:	3601      	adds	r6, #1
 8013830:	2300      	movs	r3, #0
 8013832:	9615      	str	r6, [sp, #84]	; 0x54
 8013834:	930a      	str	r3, [sp, #40]	; 0x28
 8013836:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8013838:	2b00      	cmp	r3, #0
 801383a:	f040 857f 	bne.w	801433c <_strtod_l+0xb7c>
 801383e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013840:	b1db      	cbz	r3, 801387a <_strtod_l+0xba>
 8013842:	4642      	mov	r2, r8
 8013844:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8013848:	ec43 2b10 	vmov	d0, r2, r3
 801384c:	b01b      	add	sp, #108	; 0x6c
 801384e:	ecbd 8b02 	vpop	{d8}
 8013852:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013856:	2920      	cmp	r1, #32
 8013858:	d1cc      	bne.n	80137f4 <_strtod_l+0x34>
 801385a:	3201      	adds	r2, #1
 801385c:	e7bf      	b.n	80137de <_strtod_l+0x1e>
 801385e:	292d      	cmp	r1, #45	; 0x2d
 8013860:	d1c8      	bne.n	80137f4 <_strtod_l+0x34>
 8013862:	2101      	movs	r1, #1
 8013864:	910a      	str	r1, [sp, #40]	; 0x28
 8013866:	1c51      	adds	r1, r2, #1
 8013868:	9115      	str	r1, [sp, #84]	; 0x54
 801386a:	7852      	ldrb	r2, [r2, #1]
 801386c:	2a00      	cmp	r2, #0
 801386e:	d1c3      	bne.n	80137f8 <_strtod_l+0x38>
 8013870:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8013872:	9515      	str	r5, [sp, #84]	; 0x54
 8013874:	2b00      	cmp	r3, #0
 8013876:	f040 855f 	bne.w	8014338 <_strtod_l+0xb78>
 801387a:	4642      	mov	r2, r8
 801387c:	464b      	mov	r3, r9
 801387e:	e7e3      	b.n	8013848 <_strtod_l+0x88>
 8013880:	2100      	movs	r1, #0
 8013882:	e7ef      	b.n	8013864 <_strtod_l+0xa4>
 8013884:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8013886:	b13a      	cbz	r2, 8013898 <_strtod_l+0xd8>
 8013888:	2135      	movs	r1, #53	; 0x35
 801388a:	a818      	add	r0, sp, #96	; 0x60
 801388c:	f002 f8b5 	bl	80159fa <__copybits>
 8013890:	9916      	ldr	r1, [sp, #88]	; 0x58
 8013892:	4620      	mov	r0, r4
 8013894:	f001 fc88 	bl	80151a8 <_Bfree>
 8013898:	3f01      	subs	r7, #1
 801389a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801389c:	2f04      	cmp	r7, #4
 801389e:	d806      	bhi.n	80138ae <_strtod_l+0xee>
 80138a0:	e8df f007 	tbb	[pc, r7]
 80138a4:	201d0314 	.word	0x201d0314
 80138a8:	14          	.byte	0x14
 80138a9:	00          	.byte	0x00
 80138aa:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 80138ae:	05e9      	lsls	r1, r5, #23
 80138b0:	bf48      	it	mi
 80138b2:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 80138b6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80138ba:	0d1b      	lsrs	r3, r3, #20
 80138bc:	051b      	lsls	r3, r3, #20
 80138be:	2b00      	cmp	r3, #0
 80138c0:	d1b9      	bne.n	8013836 <_strtod_l+0x76>
 80138c2:	f001 f829 	bl	8014918 <__errno>
 80138c6:	2322      	movs	r3, #34	; 0x22
 80138c8:	6003      	str	r3, [r0, #0]
 80138ca:	e7b4      	b.n	8013836 <_strtod_l+0x76>
 80138cc:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 80138d0:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80138d4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80138d8:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 80138dc:	e7e7      	b.n	80138ae <_strtod_l+0xee>
 80138de:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8013a58 <_strtod_l+0x298>
 80138e2:	e7e4      	b.n	80138ae <_strtod_l+0xee>
 80138e4:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 80138e8:	f04f 38ff 	mov.w	r8, #4294967295
 80138ec:	e7df      	b.n	80138ae <_strtod_l+0xee>
 80138ee:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80138f0:	1c5a      	adds	r2, r3, #1
 80138f2:	9215      	str	r2, [sp, #84]	; 0x54
 80138f4:	785b      	ldrb	r3, [r3, #1]
 80138f6:	2b30      	cmp	r3, #48	; 0x30
 80138f8:	d0f9      	beq.n	80138ee <_strtod_l+0x12e>
 80138fa:	2b00      	cmp	r3, #0
 80138fc:	d09b      	beq.n	8013836 <_strtod_l+0x76>
 80138fe:	2301      	movs	r3, #1
 8013900:	f04f 0a00 	mov.w	sl, #0
 8013904:	9304      	str	r3, [sp, #16]
 8013906:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013908:	930b      	str	r3, [sp, #44]	; 0x2c
 801390a:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 801390e:	46d3      	mov	fp, sl
 8013910:	220a      	movs	r2, #10
 8013912:	9815      	ldr	r0, [sp, #84]	; 0x54
 8013914:	7806      	ldrb	r6, [r0, #0]
 8013916:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 801391a:	b2d9      	uxtb	r1, r3
 801391c:	2909      	cmp	r1, #9
 801391e:	d926      	bls.n	801396e <_strtod_l+0x1ae>
 8013920:	494c      	ldr	r1, [pc, #304]	; (8013a54 <_strtod_l+0x294>)
 8013922:	2201      	movs	r2, #1
 8013924:	f000 ff64 	bl	80147f0 <strncmp>
 8013928:	2800      	cmp	r0, #0
 801392a:	d030      	beq.n	801398e <_strtod_l+0x1ce>
 801392c:	2000      	movs	r0, #0
 801392e:	4632      	mov	r2, r6
 8013930:	9005      	str	r0, [sp, #20]
 8013932:	465e      	mov	r6, fp
 8013934:	4603      	mov	r3, r0
 8013936:	2a65      	cmp	r2, #101	; 0x65
 8013938:	d001      	beq.n	801393e <_strtod_l+0x17e>
 801393a:	2a45      	cmp	r2, #69	; 0x45
 801393c:	d113      	bne.n	8013966 <_strtod_l+0x1a6>
 801393e:	b91e      	cbnz	r6, 8013948 <_strtod_l+0x188>
 8013940:	9a04      	ldr	r2, [sp, #16]
 8013942:	4302      	orrs	r2, r0
 8013944:	d094      	beq.n	8013870 <_strtod_l+0xb0>
 8013946:	2600      	movs	r6, #0
 8013948:	9d15      	ldr	r5, [sp, #84]	; 0x54
 801394a:	1c6a      	adds	r2, r5, #1
 801394c:	9215      	str	r2, [sp, #84]	; 0x54
 801394e:	786a      	ldrb	r2, [r5, #1]
 8013950:	2a2b      	cmp	r2, #43	; 0x2b
 8013952:	d074      	beq.n	8013a3e <_strtod_l+0x27e>
 8013954:	2a2d      	cmp	r2, #45	; 0x2d
 8013956:	d078      	beq.n	8013a4a <_strtod_l+0x28a>
 8013958:	f04f 0c00 	mov.w	ip, #0
 801395c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8013960:	2909      	cmp	r1, #9
 8013962:	d97f      	bls.n	8013a64 <_strtod_l+0x2a4>
 8013964:	9515      	str	r5, [sp, #84]	; 0x54
 8013966:	2700      	movs	r7, #0
 8013968:	e09e      	b.n	8013aa8 <_strtod_l+0x2e8>
 801396a:	2300      	movs	r3, #0
 801396c:	e7c8      	b.n	8013900 <_strtod_l+0x140>
 801396e:	f1bb 0f08 	cmp.w	fp, #8
 8013972:	bfd8      	it	le
 8013974:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8013976:	f100 0001 	add.w	r0, r0, #1
 801397a:	bfda      	itte	le
 801397c:	fb02 3301 	mlale	r3, r2, r1, r3
 8013980:	9309      	strle	r3, [sp, #36]	; 0x24
 8013982:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8013986:	f10b 0b01 	add.w	fp, fp, #1
 801398a:	9015      	str	r0, [sp, #84]	; 0x54
 801398c:	e7c1      	b.n	8013912 <_strtod_l+0x152>
 801398e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013990:	1c5a      	adds	r2, r3, #1
 8013992:	9215      	str	r2, [sp, #84]	; 0x54
 8013994:	785a      	ldrb	r2, [r3, #1]
 8013996:	f1bb 0f00 	cmp.w	fp, #0
 801399a:	d037      	beq.n	8013a0c <_strtod_l+0x24c>
 801399c:	9005      	str	r0, [sp, #20]
 801399e:	465e      	mov	r6, fp
 80139a0:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80139a4:	2b09      	cmp	r3, #9
 80139a6:	d912      	bls.n	80139ce <_strtod_l+0x20e>
 80139a8:	2301      	movs	r3, #1
 80139aa:	e7c4      	b.n	8013936 <_strtod_l+0x176>
 80139ac:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80139ae:	1c5a      	adds	r2, r3, #1
 80139b0:	9215      	str	r2, [sp, #84]	; 0x54
 80139b2:	785a      	ldrb	r2, [r3, #1]
 80139b4:	3001      	adds	r0, #1
 80139b6:	2a30      	cmp	r2, #48	; 0x30
 80139b8:	d0f8      	beq.n	80139ac <_strtod_l+0x1ec>
 80139ba:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80139be:	2b08      	cmp	r3, #8
 80139c0:	f200 84c1 	bhi.w	8014346 <_strtod_l+0xb86>
 80139c4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80139c6:	9005      	str	r0, [sp, #20]
 80139c8:	2000      	movs	r0, #0
 80139ca:	930b      	str	r3, [sp, #44]	; 0x2c
 80139cc:	4606      	mov	r6, r0
 80139ce:	3a30      	subs	r2, #48	; 0x30
 80139d0:	f100 0301 	add.w	r3, r0, #1
 80139d4:	d014      	beq.n	8013a00 <_strtod_l+0x240>
 80139d6:	9905      	ldr	r1, [sp, #20]
 80139d8:	4419      	add	r1, r3
 80139da:	9105      	str	r1, [sp, #20]
 80139dc:	4633      	mov	r3, r6
 80139de:	eb00 0c06 	add.w	ip, r0, r6
 80139e2:	210a      	movs	r1, #10
 80139e4:	4563      	cmp	r3, ip
 80139e6:	d113      	bne.n	8013a10 <_strtod_l+0x250>
 80139e8:	1833      	adds	r3, r6, r0
 80139ea:	2b08      	cmp	r3, #8
 80139ec:	f106 0601 	add.w	r6, r6, #1
 80139f0:	4406      	add	r6, r0
 80139f2:	dc1a      	bgt.n	8013a2a <_strtod_l+0x26a>
 80139f4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80139f6:	230a      	movs	r3, #10
 80139f8:	fb03 2301 	mla	r3, r3, r1, r2
 80139fc:	9309      	str	r3, [sp, #36]	; 0x24
 80139fe:	2300      	movs	r3, #0
 8013a00:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8013a02:	1c51      	adds	r1, r2, #1
 8013a04:	9115      	str	r1, [sp, #84]	; 0x54
 8013a06:	7852      	ldrb	r2, [r2, #1]
 8013a08:	4618      	mov	r0, r3
 8013a0a:	e7c9      	b.n	80139a0 <_strtod_l+0x1e0>
 8013a0c:	4658      	mov	r0, fp
 8013a0e:	e7d2      	b.n	80139b6 <_strtod_l+0x1f6>
 8013a10:	2b08      	cmp	r3, #8
 8013a12:	f103 0301 	add.w	r3, r3, #1
 8013a16:	dc03      	bgt.n	8013a20 <_strtod_l+0x260>
 8013a18:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8013a1a:	434f      	muls	r7, r1
 8013a1c:	9709      	str	r7, [sp, #36]	; 0x24
 8013a1e:	e7e1      	b.n	80139e4 <_strtod_l+0x224>
 8013a20:	2b10      	cmp	r3, #16
 8013a22:	bfd8      	it	le
 8013a24:	fb01 fa0a 	mulle.w	sl, r1, sl
 8013a28:	e7dc      	b.n	80139e4 <_strtod_l+0x224>
 8013a2a:	2e10      	cmp	r6, #16
 8013a2c:	bfdc      	itt	le
 8013a2e:	230a      	movle	r3, #10
 8013a30:	fb03 2a0a 	mlale	sl, r3, sl, r2
 8013a34:	e7e3      	b.n	80139fe <_strtod_l+0x23e>
 8013a36:	2300      	movs	r3, #0
 8013a38:	9305      	str	r3, [sp, #20]
 8013a3a:	2301      	movs	r3, #1
 8013a3c:	e780      	b.n	8013940 <_strtod_l+0x180>
 8013a3e:	f04f 0c00 	mov.w	ip, #0
 8013a42:	1caa      	adds	r2, r5, #2
 8013a44:	9215      	str	r2, [sp, #84]	; 0x54
 8013a46:	78aa      	ldrb	r2, [r5, #2]
 8013a48:	e788      	b.n	801395c <_strtod_l+0x19c>
 8013a4a:	f04f 0c01 	mov.w	ip, #1
 8013a4e:	e7f8      	b.n	8013a42 <_strtod_l+0x282>
 8013a50:	080233fc 	.word	0x080233fc
 8013a54:	080233ec 	.word	0x080233ec
 8013a58:	7ff00000 	.word	0x7ff00000
 8013a5c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8013a5e:	1c51      	adds	r1, r2, #1
 8013a60:	9115      	str	r1, [sp, #84]	; 0x54
 8013a62:	7852      	ldrb	r2, [r2, #1]
 8013a64:	2a30      	cmp	r2, #48	; 0x30
 8013a66:	d0f9      	beq.n	8013a5c <_strtod_l+0x29c>
 8013a68:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8013a6c:	2908      	cmp	r1, #8
 8013a6e:	f63f af7a 	bhi.w	8013966 <_strtod_l+0x1a6>
 8013a72:	3a30      	subs	r2, #48	; 0x30
 8013a74:	9208      	str	r2, [sp, #32]
 8013a76:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8013a78:	920c      	str	r2, [sp, #48]	; 0x30
 8013a7a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8013a7c:	1c57      	adds	r7, r2, #1
 8013a7e:	9715      	str	r7, [sp, #84]	; 0x54
 8013a80:	7852      	ldrb	r2, [r2, #1]
 8013a82:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8013a86:	f1be 0f09 	cmp.w	lr, #9
 8013a8a:	d938      	bls.n	8013afe <_strtod_l+0x33e>
 8013a8c:	990c      	ldr	r1, [sp, #48]	; 0x30
 8013a8e:	1a7f      	subs	r7, r7, r1
 8013a90:	2f08      	cmp	r7, #8
 8013a92:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8013a96:	dc03      	bgt.n	8013aa0 <_strtod_l+0x2e0>
 8013a98:	9908      	ldr	r1, [sp, #32]
 8013a9a:	428f      	cmp	r7, r1
 8013a9c:	bfa8      	it	ge
 8013a9e:	460f      	movge	r7, r1
 8013aa0:	f1bc 0f00 	cmp.w	ip, #0
 8013aa4:	d000      	beq.n	8013aa8 <_strtod_l+0x2e8>
 8013aa6:	427f      	negs	r7, r7
 8013aa8:	2e00      	cmp	r6, #0
 8013aaa:	d14f      	bne.n	8013b4c <_strtod_l+0x38c>
 8013aac:	9904      	ldr	r1, [sp, #16]
 8013aae:	4301      	orrs	r1, r0
 8013ab0:	f47f aec1 	bne.w	8013836 <_strtod_l+0x76>
 8013ab4:	2b00      	cmp	r3, #0
 8013ab6:	f47f aedb 	bne.w	8013870 <_strtod_l+0xb0>
 8013aba:	2a69      	cmp	r2, #105	; 0x69
 8013abc:	d029      	beq.n	8013b12 <_strtod_l+0x352>
 8013abe:	dc26      	bgt.n	8013b0e <_strtod_l+0x34e>
 8013ac0:	2a49      	cmp	r2, #73	; 0x49
 8013ac2:	d026      	beq.n	8013b12 <_strtod_l+0x352>
 8013ac4:	2a4e      	cmp	r2, #78	; 0x4e
 8013ac6:	f47f aed3 	bne.w	8013870 <_strtod_l+0xb0>
 8013aca:	499b      	ldr	r1, [pc, #620]	; (8013d38 <_strtod_l+0x578>)
 8013acc:	a815      	add	r0, sp, #84	; 0x54
 8013ace:	f001 fa69 	bl	8014fa4 <__match>
 8013ad2:	2800      	cmp	r0, #0
 8013ad4:	f43f aecc 	beq.w	8013870 <_strtod_l+0xb0>
 8013ad8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013ada:	781b      	ldrb	r3, [r3, #0]
 8013adc:	2b28      	cmp	r3, #40	; 0x28
 8013ade:	d12f      	bne.n	8013b40 <_strtod_l+0x380>
 8013ae0:	4996      	ldr	r1, [pc, #600]	; (8013d3c <_strtod_l+0x57c>)
 8013ae2:	aa18      	add	r2, sp, #96	; 0x60
 8013ae4:	a815      	add	r0, sp, #84	; 0x54
 8013ae6:	f001 fa71 	bl	8014fcc <__hexnan>
 8013aea:	2805      	cmp	r0, #5
 8013aec:	d128      	bne.n	8013b40 <_strtod_l+0x380>
 8013aee:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8013af0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8013af4:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8013af8:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8013afc:	e69b      	b.n	8013836 <_strtod_l+0x76>
 8013afe:	9f08      	ldr	r7, [sp, #32]
 8013b00:	210a      	movs	r1, #10
 8013b02:	fb01 2107 	mla	r1, r1, r7, r2
 8013b06:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8013b0a:	9208      	str	r2, [sp, #32]
 8013b0c:	e7b5      	b.n	8013a7a <_strtod_l+0x2ba>
 8013b0e:	2a6e      	cmp	r2, #110	; 0x6e
 8013b10:	e7d9      	b.n	8013ac6 <_strtod_l+0x306>
 8013b12:	498b      	ldr	r1, [pc, #556]	; (8013d40 <_strtod_l+0x580>)
 8013b14:	a815      	add	r0, sp, #84	; 0x54
 8013b16:	f001 fa45 	bl	8014fa4 <__match>
 8013b1a:	2800      	cmp	r0, #0
 8013b1c:	f43f aea8 	beq.w	8013870 <_strtod_l+0xb0>
 8013b20:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013b22:	4988      	ldr	r1, [pc, #544]	; (8013d44 <_strtod_l+0x584>)
 8013b24:	3b01      	subs	r3, #1
 8013b26:	a815      	add	r0, sp, #84	; 0x54
 8013b28:	9315      	str	r3, [sp, #84]	; 0x54
 8013b2a:	f001 fa3b 	bl	8014fa4 <__match>
 8013b2e:	b910      	cbnz	r0, 8013b36 <_strtod_l+0x376>
 8013b30:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013b32:	3301      	adds	r3, #1
 8013b34:	9315      	str	r3, [sp, #84]	; 0x54
 8013b36:	f8df 921c 	ldr.w	r9, [pc, #540]	; 8013d54 <_strtod_l+0x594>
 8013b3a:	f04f 0800 	mov.w	r8, #0
 8013b3e:	e67a      	b.n	8013836 <_strtod_l+0x76>
 8013b40:	4881      	ldr	r0, [pc, #516]	; (8013d48 <_strtod_l+0x588>)
 8013b42:	f000 ff2d 	bl	80149a0 <nan>
 8013b46:	ec59 8b10 	vmov	r8, r9, d0
 8013b4a:	e674      	b.n	8013836 <_strtod_l+0x76>
 8013b4c:	9b05      	ldr	r3, [sp, #20]
 8013b4e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013b50:	1afb      	subs	r3, r7, r3
 8013b52:	f1bb 0f00 	cmp.w	fp, #0
 8013b56:	bf08      	it	eq
 8013b58:	46b3      	moveq	fp, r6
 8013b5a:	2e10      	cmp	r6, #16
 8013b5c:	9308      	str	r3, [sp, #32]
 8013b5e:	4635      	mov	r5, r6
 8013b60:	bfa8      	it	ge
 8013b62:	2510      	movge	r5, #16
 8013b64:	f7ec fcde 	bl	8000524 <__aeabi_ui2d>
 8013b68:	2e09      	cmp	r6, #9
 8013b6a:	4680      	mov	r8, r0
 8013b6c:	4689      	mov	r9, r1
 8013b6e:	dd13      	ble.n	8013b98 <_strtod_l+0x3d8>
 8013b70:	4b76      	ldr	r3, [pc, #472]	; (8013d4c <_strtod_l+0x58c>)
 8013b72:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8013b76:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8013b7a:	f7ec fd4d 	bl	8000618 <__aeabi_dmul>
 8013b7e:	4680      	mov	r8, r0
 8013b80:	4650      	mov	r0, sl
 8013b82:	4689      	mov	r9, r1
 8013b84:	f7ec fcce 	bl	8000524 <__aeabi_ui2d>
 8013b88:	4602      	mov	r2, r0
 8013b8a:	460b      	mov	r3, r1
 8013b8c:	4640      	mov	r0, r8
 8013b8e:	4649      	mov	r1, r9
 8013b90:	f7ec fb8c 	bl	80002ac <__adddf3>
 8013b94:	4680      	mov	r8, r0
 8013b96:	4689      	mov	r9, r1
 8013b98:	2e0f      	cmp	r6, #15
 8013b9a:	dc38      	bgt.n	8013c0e <_strtod_l+0x44e>
 8013b9c:	9b08      	ldr	r3, [sp, #32]
 8013b9e:	2b00      	cmp	r3, #0
 8013ba0:	f43f ae49 	beq.w	8013836 <_strtod_l+0x76>
 8013ba4:	dd24      	ble.n	8013bf0 <_strtod_l+0x430>
 8013ba6:	2b16      	cmp	r3, #22
 8013ba8:	dc0b      	bgt.n	8013bc2 <_strtod_l+0x402>
 8013baa:	4968      	ldr	r1, [pc, #416]	; (8013d4c <_strtod_l+0x58c>)
 8013bac:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8013bb0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013bb4:	4642      	mov	r2, r8
 8013bb6:	464b      	mov	r3, r9
 8013bb8:	f7ec fd2e 	bl	8000618 <__aeabi_dmul>
 8013bbc:	4680      	mov	r8, r0
 8013bbe:	4689      	mov	r9, r1
 8013bc0:	e639      	b.n	8013836 <_strtod_l+0x76>
 8013bc2:	9a08      	ldr	r2, [sp, #32]
 8013bc4:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8013bc8:	4293      	cmp	r3, r2
 8013bca:	db20      	blt.n	8013c0e <_strtod_l+0x44e>
 8013bcc:	4c5f      	ldr	r4, [pc, #380]	; (8013d4c <_strtod_l+0x58c>)
 8013bce:	f1c6 060f 	rsb	r6, r6, #15
 8013bd2:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 8013bd6:	4642      	mov	r2, r8
 8013bd8:	464b      	mov	r3, r9
 8013bda:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013bde:	f7ec fd1b 	bl	8000618 <__aeabi_dmul>
 8013be2:	9b08      	ldr	r3, [sp, #32]
 8013be4:	1b9e      	subs	r6, r3, r6
 8013be6:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8013bea:	e9d4 2300 	ldrd	r2, r3, [r4]
 8013bee:	e7e3      	b.n	8013bb8 <_strtod_l+0x3f8>
 8013bf0:	9b08      	ldr	r3, [sp, #32]
 8013bf2:	3316      	adds	r3, #22
 8013bf4:	db0b      	blt.n	8013c0e <_strtod_l+0x44e>
 8013bf6:	9b05      	ldr	r3, [sp, #20]
 8013bf8:	1bdf      	subs	r7, r3, r7
 8013bfa:	4b54      	ldr	r3, [pc, #336]	; (8013d4c <_strtod_l+0x58c>)
 8013bfc:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8013c00:	e9d7 2300 	ldrd	r2, r3, [r7]
 8013c04:	4640      	mov	r0, r8
 8013c06:	4649      	mov	r1, r9
 8013c08:	f7ec fe30 	bl	800086c <__aeabi_ddiv>
 8013c0c:	e7d6      	b.n	8013bbc <_strtod_l+0x3fc>
 8013c0e:	9b08      	ldr	r3, [sp, #32]
 8013c10:	1b75      	subs	r5, r6, r5
 8013c12:	441d      	add	r5, r3
 8013c14:	2d00      	cmp	r5, #0
 8013c16:	dd70      	ble.n	8013cfa <_strtod_l+0x53a>
 8013c18:	f015 030f 	ands.w	r3, r5, #15
 8013c1c:	d00a      	beq.n	8013c34 <_strtod_l+0x474>
 8013c1e:	494b      	ldr	r1, [pc, #300]	; (8013d4c <_strtod_l+0x58c>)
 8013c20:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8013c24:	4642      	mov	r2, r8
 8013c26:	464b      	mov	r3, r9
 8013c28:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013c2c:	f7ec fcf4 	bl	8000618 <__aeabi_dmul>
 8013c30:	4680      	mov	r8, r0
 8013c32:	4689      	mov	r9, r1
 8013c34:	f035 050f 	bics.w	r5, r5, #15
 8013c38:	d04d      	beq.n	8013cd6 <_strtod_l+0x516>
 8013c3a:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 8013c3e:	dd22      	ble.n	8013c86 <_strtod_l+0x4c6>
 8013c40:	2500      	movs	r5, #0
 8013c42:	46ab      	mov	fp, r5
 8013c44:	9509      	str	r5, [sp, #36]	; 0x24
 8013c46:	9505      	str	r5, [sp, #20]
 8013c48:	2322      	movs	r3, #34	; 0x22
 8013c4a:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8013d54 <_strtod_l+0x594>
 8013c4e:	6023      	str	r3, [r4, #0]
 8013c50:	f04f 0800 	mov.w	r8, #0
 8013c54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013c56:	2b00      	cmp	r3, #0
 8013c58:	f43f aded 	beq.w	8013836 <_strtod_l+0x76>
 8013c5c:	9916      	ldr	r1, [sp, #88]	; 0x58
 8013c5e:	4620      	mov	r0, r4
 8013c60:	f001 faa2 	bl	80151a8 <_Bfree>
 8013c64:	9905      	ldr	r1, [sp, #20]
 8013c66:	4620      	mov	r0, r4
 8013c68:	f001 fa9e 	bl	80151a8 <_Bfree>
 8013c6c:	4659      	mov	r1, fp
 8013c6e:	4620      	mov	r0, r4
 8013c70:	f001 fa9a 	bl	80151a8 <_Bfree>
 8013c74:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013c76:	4620      	mov	r0, r4
 8013c78:	f001 fa96 	bl	80151a8 <_Bfree>
 8013c7c:	4629      	mov	r1, r5
 8013c7e:	4620      	mov	r0, r4
 8013c80:	f001 fa92 	bl	80151a8 <_Bfree>
 8013c84:	e5d7      	b.n	8013836 <_strtod_l+0x76>
 8013c86:	4b32      	ldr	r3, [pc, #200]	; (8013d50 <_strtod_l+0x590>)
 8013c88:	9304      	str	r3, [sp, #16]
 8013c8a:	2300      	movs	r3, #0
 8013c8c:	112d      	asrs	r5, r5, #4
 8013c8e:	4640      	mov	r0, r8
 8013c90:	4649      	mov	r1, r9
 8013c92:	469a      	mov	sl, r3
 8013c94:	2d01      	cmp	r5, #1
 8013c96:	dc21      	bgt.n	8013cdc <_strtod_l+0x51c>
 8013c98:	b10b      	cbz	r3, 8013c9e <_strtod_l+0x4de>
 8013c9a:	4680      	mov	r8, r0
 8013c9c:	4689      	mov	r9, r1
 8013c9e:	492c      	ldr	r1, [pc, #176]	; (8013d50 <_strtod_l+0x590>)
 8013ca0:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8013ca4:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8013ca8:	4642      	mov	r2, r8
 8013caa:	464b      	mov	r3, r9
 8013cac:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013cb0:	f7ec fcb2 	bl	8000618 <__aeabi_dmul>
 8013cb4:	4b27      	ldr	r3, [pc, #156]	; (8013d54 <_strtod_l+0x594>)
 8013cb6:	460a      	mov	r2, r1
 8013cb8:	400b      	ands	r3, r1
 8013cba:	4927      	ldr	r1, [pc, #156]	; (8013d58 <_strtod_l+0x598>)
 8013cbc:	428b      	cmp	r3, r1
 8013cbe:	4680      	mov	r8, r0
 8013cc0:	d8be      	bhi.n	8013c40 <_strtod_l+0x480>
 8013cc2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8013cc6:	428b      	cmp	r3, r1
 8013cc8:	bf86      	itte	hi
 8013cca:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 8013d5c <_strtod_l+0x59c>
 8013cce:	f04f 38ff 	movhi.w	r8, #4294967295
 8013cd2:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8013cd6:	2300      	movs	r3, #0
 8013cd8:	9304      	str	r3, [sp, #16]
 8013cda:	e07b      	b.n	8013dd4 <_strtod_l+0x614>
 8013cdc:	07ea      	lsls	r2, r5, #31
 8013cde:	d505      	bpl.n	8013cec <_strtod_l+0x52c>
 8013ce0:	9b04      	ldr	r3, [sp, #16]
 8013ce2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013ce6:	f7ec fc97 	bl	8000618 <__aeabi_dmul>
 8013cea:	2301      	movs	r3, #1
 8013cec:	9a04      	ldr	r2, [sp, #16]
 8013cee:	3208      	adds	r2, #8
 8013cf0:	f10a 0a01 	add.w	sl, sl, #1
 8013cf4:	106d      	asrs	r5, r5, #1
 8013cf6:	9204      	str	r2, [sp, #16]
 8013cf8:	e7cc      	b.n	8013c94 <_strtod_l+0x4d4>
 8013cfa:	d0ec      	beq.n	8013cd6 <_strtod_l+0x516>
 8013cfc:	426d      	negs	r5, r5
 8013cfe:	f015 020f 	ands.w	r2, r5, #15
 8013d02:	d00a      	beq.n	8013d1a <_strtod_l+0x55a>
 8013d04:	4b11      	ldr	r3, [pc, #68]	; (8013d4c <_strtod_l+0x58c>)
 8013d06:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8013d0a:	4640      	mov	r0, r8
 8013d0c:	4649      	mov	r1, r9
 8013d0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013d12:	f7ec fdab 	bl	800086c <__aeabi_ddiv>
 8013d16:	4680      	mov	r8, r0
 8013d18:	4689      	mov	r9, r1
 8013d1a:	112d      	asrs	r5, r5, #4
 8013d1c:	d0db      	beq.n	8013cd6 <_strtod_l+0x516>
 8013d1e:	2d1f      	cmp	r5, #31
 8013d20:	dd1e      	ble.n	8013d60 <_strtod_l+0x5a0>
 8013d22:	2500      	movs	r5, #0
 8013d24:	46ab      	mov	fp, r5
 8013d26:	9509      	str	r5, [sp, #36]	; 0x24
 8013d28:	9505      	str	r5, [sp, #20]
 8013d2a:	2322      	movs	r3, #34	; 0x22
 8013d2c:	f04f 0800 	mov.w	r8, #0
 8013d30:	f04f 0900 	mov.w	r9, #0
 8013d34:	6023      	str	r3, [r4, #0]
 8013d36:	e78d      	b.n	8013c54 <_strtod_l+0x494>
 8013d38:	080233f7 	.word	0x080233f7
 8013d3c:	08023410 	.word	0x08023410
 8013d40:	080233ee 	.word	0x080233ee
 8013d44:	080233f1 	.word	0x080233f1
 8013d48:	080237aa 	.word	0x080237aa
 8013d4c:	08023668 	.word	0x08023668
 8013d50:	08023640 	.word	0x08023640
 8013d54:	7ff00000 	.word	0x7ff00000
 8013d58:	7ca00000 	.word	0x7ca00000
 8013d5c:	7fefffff 	.word	0x7fefffff
 8013d60:	f015 0310 	ands.w	r3, r5, #16
 8013d64:	bf18      	it	ne
 8013d66:	236a      	movne	r3, #106	; 0x6a
 8013d68:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 801410c <_strtod_l+0x94c>
 8013d6c:	9304      	str	r3, [sp, #16]
 8013d6e:	4640      	mov	r0, r8
 8013d70:	4649      	mov	r1, r9
 8013d72:	2300      	movs	r3, #0
 8013d74:	07ea      	lsls	r2, r5, #31
 8013d76:	d504      	bpl.n	8013d82 <_strtod_l+0x5c2>
 8013d78:	e9da 2300 	ldrd	r2, r3, [sl]
 8013d7c:	f7ec fc4c 	bl	8000618 <__aeabi_dmul>
 8013d80:	2301      	movs	r3, #1
 8013d82:	106d      	asrs	r5, r5, #1
 8013d84:	f10a 0a08 	add.w	sl, sl, #8
 8013d88:	d1f4      	bne.n	8013d74 <_strtod_l+0x5b4>
 8013d8a:	b10b      	cbz	r3, 8013d90 <_strtod_l+0x5d0>
 8013d8c:	4680      	mov	r8, r0
 8013d8e:	4689      	mov	r9, r1
 8013d90:	9b04      	ldr	r3, [sp, #16]
 8013d92:	b1bb      	cbz	r3, 8013dc4 <_strtod_l+0x604>
 8013d94:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8013d98:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8013d9c:	2b00      	cmp	r3, #0
 8013d9e:	4649      	mov	r1, r9
 8013da0:	dd10      	ble.n	8013dc4 <_strtod_l+0x604>
 8013da2:	2b1f      	cmp	r3, #31
 8013da4:	f340 811e 	ble.w	8013fe4 <_strtod_l+0x824>
 8013da8:	2b34      	cmp	r3, #52	; 0x34
 8013daa:	bfde      	ittt	le
 8013dac:	f04f 33ff 	movle.w	r3, #4294967295
 8013db0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8013db4:	4093      	lslle	r3, r2
 8013db6:	f04f 0800 	mov.w	r8, #0
 8013dba:	bfcc      	ite	gt
 8013dbc:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8013dc0:	ea03 0901 	andle.w	r9, r3, r1
 8013dc4:	2200      	movs	r2, #0
 8013dc6:	2300      	movs	r3, #0
 8013dc8:	4640      	mov	r0, r8
 8013dca:	4649      	mov	r1, r9
 8013dcc:	f7ec fe8c 	bl	8000ae8 <__aeabi_dcmpeq>
 8013dd0:	2800      	cmp	r0, #0
 8013dd2:	d1a6      	bne.n	8013d22 <_strtod_l+0x562>
 8013dd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013dd6:	9300      	str	r3, [sp, #0]
 8013dd8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8013dda:	4633      	mov	r3, r6
 8013ddc:	465a      	mov	r2, fp
 8013dde:	4620      	mov	r0, r4
 8013de0:	f001 fa4a 	bl	8015278 <__s2b>
 8013de4:	9009      	str	r0, [sp, #36]	; 0x24
 8013de6:	2800      	cmp	r0, #0
 8013de8:	f43f af2a 	beq.w	8013c40 <_strtod_l+0x480>
 8013dec:	9a08      	ldr	r2, [sp, #32]
 8013dee:	9b05      	ldr	r3, [sp, #20]
 8013df0:	2a00      	cmp	r2, #0
 8013df2:	eba3 0307 	sub.w	r3, r3, r7
 8013df6:	bfa8      	it	ge
 8013df8:	2300      	movge	r3, #0
 8013dfa:	930c      	str	r3, [sp, #48]	; 0x30
 8013dfc:	2500      	movs	r5, #0
 8013dfe:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8013e02:	9312      	str	r3, [sp, #72]	; 0x48
 8013e04:	46ab      	mov	fp, r5
 8013e06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013e08:	4620      	mov	r0, r4
 8013e0a:	6859      	ldr	r1, [r3, #4]
 8013e0c:	f001 f98c 	bl	8015128 <_Balloc>
 8013e10:	9005      	str	r0, [sp, #20]
 8013e12:	2800      	cmp	r0, #0
 8013e14:	f43f af18 	beq.w	8013c48 <_strtod_l+0x488>
 8013e18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013e1a:	691a      	ldr	r2, [r3, #16]
 8013e1c:	3202      	adds	r2, #2
 8013e1e:	f103 010c 	add.w	r1, r3, #12
 8013e22:	0092      	lsls	r2, r2, #2
 8013e24:	300c      	adds	r0, #12
 8013e26:	f000 fdac 	bl	8014982 <memcpy>
 8013e2a:	ec49 8b10 	vmov	d0, r8, r9
 8013e2e:	aa18      	add	r2, sp, #96	; 0x60
 8013e30:	a917      	add	r1, sp, #92	; 0x5c
 8013e32:	4620      	mov	r0, r4
 8013e34:	f001 fd54 	bl	80158e0 <__d2b>
 8013e38:	ec49 8b18 	vmov	d8, r8, r9
 8013e3c:	9016      	str	r0, [sp, #88]	; 0x58
 8013e3e:	2800      	cmp	r0, #0
 8013e40:	f43f af02 	beq.w	8013c48 <_strtod_l+0x488>
 8013e44:	2101      	movs	r1, #1
 8013e46:	4620      	mov	r0, r4
 8013e48:	f001 faae 	bl	80153a8 <__i2b>
 8013e4c:	4683      	mov	fp, r0
 8013e4e:	2800      	cmp	r0, #0
 8013e50:	f43f aefa 	beq.w	8013c48 <_strtod_l+0x488>
 8013e54:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8013e56:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8013e58:	2e00      	cmp	r6, #0
 8013e5a:	bfab      	itete	ge
 8013e5c:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 8013e5e:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 8013e60:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8013e62:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 8013e66:	bfac      	ite	ge
 8013e68:	eb06 0a03 	addge.w	sl, r6, r3
 8013e6c:	1b9f      	sublt	r7, r3, r6
 8013e6e:	9b04      	ldr	r3, [sp, #16]
 8013e70:	1af6      	subs	r6, r6, r3
 8013e72:	4416      	add	r6, r2
 8013e74:	4ba0      	ldr	r3, [pc, #640]	; (80140f8 <_strtod_l+0x938>)
 8013e76:	3e01      	subs	r6, #1
 8013e78:	429e      	cmp	r6, r3
 8013e7a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8013e7e:	f280 80c4 	bge.w	801400a <_strtod_l+0x84a>
 8013e82:	1b9b      	subs	r3, r3, r6
 8013e84:	2b1f      	cmp	r3, #31
 8013e86:	eba2 0203 	sub.w	r2, r2, r3
 8013e8a:	f04f 0101 	mov.w	r1, #1
 8013e8e:	f300 80b0 	bgt.w	8013ff2 <_strtod_l+0x832>
 8013e92:	fa01 f303 	lsl.w	r3, r1, r3
 8013e96:	930e      	str	r3, [sp, #56]	; 0x38
 8013e98:	2300      	movs	r3, #0
 8013e9a:	930d      	str	r3, [sp, #52]	; 0x34
 8013e9c:	eb0a 0602 	add.w	r6, sl, r2
 8013ea0:	9b04      	ldr	r3, [sp, #16]
 8013ea2:	45b2      	cmp	sl, r6
 8013ea4:	4417      	add	r7, r2
 8013ea6:	441f      	add	r7, r3
 8013ea8:	4653      	mov	r3, sl
 8013eaa:	bfa8      	it	ge
 8013eac:	4633      	movge	r3, r6
 8013eae:	42bb      	cmp	r3, r7
 8013eb0:	bfa8      	it	ge
 8013eb2:	463b      	movge	r3, r7
 8013eb4:	2b00      	cmp	r3, #0
 8013eb6:	bfc2      	ittt	gt
 8013eb8:	1af6      	subgt	r6, r6, r3
 8013eba:	1aff      	subgt	r7, r7, r3
 8013ebc:	ebaa 0a03 	subgt.w	sl, sl, r3
 8013ec0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013ec2:	2b00      	cmp	r3, #0
 8013ec4:	dd17      	ble.n	8013ef6 <_strtod_l+0x736>
 8013ec6:	4659      	mov	r1, fp
 8013ec8:	461a      	mov	r2, r3
 8013eca:	4620      	mov	r0, r4
 8013ecc:	f001 fb2c 	bl	8015528 <__pow5mult>
 8013ed0:	4683      	mov	fp, r0
 8013ed2:	2800      	cmp	r0, #0
 8013ed4:	f43f aeb8 	beq.w	8013c48 <_strtod_l+0x488>
 8013ed8:	4601      	mov	r1, r0
 8013eda:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8013edc:	4620      	mov	r0, r4
 8013ede:	f001 fa79 	bl	80153d4 <__multiply>
 8013ee2:	900b      	str	r0, [sp, #44]	; 0x2c
 8013ee4:	2800      	cmp	r0, #0
 8013ee6:	f43f aeaf 	beq.w	8013c48 <_strtod_l+0x488>
 8013eea:	9916      	ldr	r1, [sp, #88]	; 0x58
 8013eec:	4620      	mov	r0, r4
 8013eee:	f001 f95b 	bl	80151a8 <_Bfree>
 8013ef2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013ef4:	9316      	str	r3, [sp, #88]	; 0x58
 8013ef6:	2e00      	cmp	r6, #0
 8013ef8:	f300 808c 	bgt.w	8014014 <_strtod_l+0x854>
 8013efc:	9b08      	ldr	r3, [sp, #32]
 8013efe:	2b00      	cmp	r3, #0
 8013f00:	dd08      	ble.n	8013f14 <_strtod_l+0x754>
 8013f02:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8013f04:	9905      	ldr	r1, [sp, #20]
 8013f06:	4620      	mov	r0, r4
 8013f08:	f001 fb0e 	bl	8015528 <__pow5mult>
 8013f0c:	9005      	str	r0, [sp, #20]
 8013f0e:	2800      	cmp	r0, #0
 8013f10:	f43f ae9a 	beq.w	8013c48 <_strtod_l+0x488>
 8013f14:	2f00      	cmp	r7, #0
 8013f16:	dd08      	ble.n	8013f2a <_strtod_l+0x76a>
 8013f18:	9905      	ldr	r1, [sp, #20]
 8013f1a:	463a      	mov	r2, r7
 8013f1c:	4620      	mov	r0, r4
 8013f1e:	f001 fb5d 	bl	80155dc <__lshift>
 8013f22:	9005      	str	r0, [sp, #20]
 8013f24:	2800      	cmp	r0, #0
 8013f26:	f43f ae8f 	beq.w	8013c48 <_strtod_l+0x488>
 8013f2a:	f1ba 0f00 	cmp.w	sl, #0
 8013f2e:	dd08      	ble.n	8013f42 <_strtod_l+0x782>
 8013f30:	4659      	mov	r1, fp
 8013f32:	4652      	mov	r2, sl
 8013f34:	4620      	mov	r0, r4
 8013f36:	f001 fb51 	bl	80155dc <__lshift>
 8013f3a:	4683      	mov	fp, r0
 8013f3c:	2800      	cmp	r0, #0
 8013f3e:	f43f ae83 	beq.w	8013c48 <_strtod_l+0x488>
 8013f42:	9a05      	ldr	r2, [sp, #20]
 8013f44:	9916      	ldr	r1, [sp, #88]	; 0x58
 8013f46:	4620      	mov	r0, r4
 8013f48:	f001 fbd0 	bl	80156ec <__mdiff>
 8013f4c:	4605      	mov	r5, r0
 8013f4e:	2800      	cmp	r0, #0
 8013f50:	f43f ae7a 	beq.w	8013c48 <_strtod_l+0x488>
 8013f54:	68c3      	ldr	r3, [r0, #12]
 8013f56:	930b      	str	r3, [sp, #44]	; 0x2c
 8013f58:	2300      	movs	r3, #0
 8013f5a:	60c3      	str	r3, [r0, #12]
 8013f5c:	4659      	mov	r1, fp
 8013f5e:	f001 fba9 	bl	80156b4 <__mcmp>
 8013f62:	2800      	cmp	r0, #0
 8013f64:	da60      	bge.n	8014028 <_strtod_l+0x868>
 8013f66:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013f68:	ea53 0308 	orrs.w	r3, r3, r8
 8013f6c:	f040 8084 	bne.w	8014078 <_strtod_l+0x8b8>
 8013f70:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8013f74:	2b00      	cmp	r3, #0
 8013f76:	d17f      	bne.n	8014078 <_strtod_l+0x8b8>
 8013f78:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8013f7c:	0d1b      	lsrs	r3, r3, #20
 8013f7e:	051b      	lsls	r3, r3, #20
 8013f80:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8013f84:	d978      	bls.n	8014078 <_strtod_l+0x8b8>
 8013f86:	696b      	ldr	r3, [r5, #20]
 8013f88:	b913      	cbnz	r3, 8013f90 <_strtod_l+0x7d0>
 8013f8a:	692b      	ldr	r3, [r5, #16]
 8013f8c:	2b01      	cmp	r3, #1
 8013f8e:	dd73      	ble.n	8014078 <_strtod_l+0x8b8>
 8013f90:	4629      	mov	r1, r5
 8013f92:	2201      	movs	r2, #1
 8013f94:	4620      	mov	r0, r4
 8013f96:	f001 fb21 	bl	80155dc <__lshift>
 8013f9a:	4659      	mov	r1, fp
 8013f9c:	4605      	mov	r5, r0
 8013f9e:	f001 fb89 	bl	80156b4 <__mcmp>
 8013fa2:	2800      	cmp	r0, #0
 8013fa4:	dd68      	ble.n	8014078 <_strtod_l+0x8b8>
 8013fa6:	9904      	ldr	r1, [sp, #16]
 8013fa8:	4a54      	ldr	r2, [pc, #336]	; (80140fc <_strtod_l+0x93c>)
 8013faa:	464b      	mov	r3, r9
 8013fac:	2900      	cmp	r1, #0
 8013fae:	f000 8084 	beq.w	80140ba <_strtod_l+0x8fa>
 8013fb2:	ea02 0109 	and.w	r1, r2, r9
 8013fb6:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8013fba:	dc7e      	bgt.n	80140ba <_strtod_l+0x8fa>
 8013fbc:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8013fc0:	f77f aeb3 	ble.w	8013d2a <_strtod_l+0x56a>
 8013fc4:	4b4e      	ldr	r3, [pc, #312]	; (8014100 <_strtod_l+0x940>)
 8013fc6:	4640      	mov	r0, r8
 8013fc8:	4649      	mov	r1, r9
 8013fca:	2200      	movs	r2, #0
 8013fcc:	f7ec fb24 	bl	8000618 <__aeabi_dmul>
 8013fd0:	4b4a      	ldr	r3, [pc, #296]	; (80140fc <_strtod_l+0x93c>)
 8013fd2:	400b      	ands	r3, r1
 8013fd4:	4680      	mov	r8, r0
 8013fd6:	4689      	mov	r9, r1
 8013fd8:	2b00      	cmp	r3, #0
 8013fda:	f47f ae3f 	bne.w	8013c5c <_strtod_l+0x49c>
 8013fde:	2322      	movs	r3, #34	; 0x22
 8013fe0:	6023      	str	r3, [r4, #0]
 8013fe2:	e63b      	b.n	8013c5c <_strtod_l+0x49c>
 8013fe4:	f04f 32ff 	mov.w	r2, #4294967295
 8013fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8013fec:	ea03 0808 	and.w	r8, r3, r8
 8013ff0:	e6e8      	b.n	8013dc4 <_strtod_l+0x604>
 8013ff2:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8013ff6:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8013ffa:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8013ffe:	36e2      	adds	r6, #226	; 0xe2
 8014000:	fa01 f306 	lsl.w	r3, r1, r6
 8014004:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 8014008:	e748      	b.n	8013e9c <_strtod_l+0x6dc>
 801400a:	2100      	movs	r1, #0
 801400c:	2301      	movs	r3, #1
 801400e:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 8014012:	e743      	b.n	8013e9c <_strtod_l+0x6dc>
 8014014:	9916      	ldr	r1, [sp, #88]	; 0x58
 8014016:	4632      	mov	r2, r6
 8014018:	4620      	mov	r0, r4
 801401a:	f001 fadf 	bl	80155dc <__lshift>
 801401e:	9016      	str	r0, [sp, #88]	; 0x58
 8014020:	2800      	cmp	r0, #0
 8014022:	f47f af6b 	bne.w	8013efc <_strtod_l+0x73c>
 8014026:	e60f      	b.n	8013c48 <_strtod_l+0x488>
 8014028:	46ca      	mov	sl, r9
 801402a:	d171      	bne.n	8014110 <_strtod_l+0x950>
 801402c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801402e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8014032:	b352      	cbz	r2, 801408a <_strtod_l+0x8ca>
 8014034:	4a33      	ldr	r2, [pc, #204]	; (8014104 <_strtod_l+0x944>)
 8014036:	4293      	cmp	r3, r2
 8014038:	d12a      	bne.n	8014090 <_strtod_l+0x8d0>
 801403a:	9b04      	ldr	r3, [sp, #16]
 801403c:	4641      	mov	r1, r8
 801403e:	b1fb      	cbz	r3, 8014080 <_strtod_l+0x8c0>
 8014040:	4b2e      	ldr	r3, [pc, #184]	; (80140fc <_strtod_l+0x93c>)
 8014042:	ea09 0303 	and.w	r3, r9, r3
 8014046:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801404a:	f04f 32ff 	mov.w	r2, #4294967295
 801404e:	d81a      	bhi.n	8014086 <_strtod_l+0x8c6>
 8014050:	0d1b      	lsrs	r3, r3, #20
 8014052:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8014056:	fa02 f303 	lsl.w	r3, r2, r3
 801405a:	4299      	cmp	r1, r3
 801405c:	d118      	bne.n	8014090 <_strtod_l+0x8d0>
 801405e:	4b2a      	ldr	r3, [pc, #168]	; (8014108 <_strtod_l+0x948>)
 8014060:	459a      	cmp	sl, r3
 8014062:	d102      	bne.n	801406a <_strtod_l+0x8aa>
 8014064:	3101      	adds	r1, #1
 8014066:	f43f adef 	beq.w	8013c48 <_strtod_l+0x488>
 801406a:	4b24      	ldr	r3, [pc, #144]	; (80140fc <_strtod_l+0x93c>)
 801406c:	ea0a 0303 	and.w	r3, sl, r3
 8014070:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8014074:	f04f 0800 	mov.w	r8, #0
 8014078:	9b04      	ldr	r3, [sp, #16]
 801407a:	2b00      	cmp	r3, #0
 801407c:	d1a2      	bne.n	8013fc4 <_strtod_l+0x804>
 801407e:	e5ed      	b.n	8013c5c <_strtod_l+0x49c>
 8014080:	f04f 33ff 	mov.w	r3, #4294967295
 8014084:	e7e9      	b.n	801405a <_strtod_l+0x89a>
 8014086:	4613      	mov	r3, r2
 8014088:	e7e7      	b.n	801405a <_strtod_l+0x89a>
 801408a:	ea53 0308 	orrs.w	r3, r3, r8
 801408e:	d08a      	beq.n	8013fa6 <_strtod_l+0x7e6>
 8014090:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014092:	b1e3      	cbz	r3, 80140ce <_strtod_l+0x90e>
 8014094:	ea13 0f0a 	tst.w	r3, sl
 8014098:	d0ee      	beq.n	8014078 <_strtod_l+0x8b8>
 801409a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801409c:	9a04      	ldr	r2, [sp, #16]
 801409e:	4640      	mov	r0, r8
 80140a0:	4649      	mov	r1, r9
 80140a2:	b1c3      	cbz	r3, 80140d6 <_strtod_l+0x916>
 80140a4:	f7ff fb70 	bl	8013788 <sulp>
 80140a8:	4602      	mov	r2, r0
 80140aa:	460b      	mov	r3, r1
 80140ac:	ec51 0b18 	vmov	r0, r1, d8
 80140b0:	f7ec f8fc 	bl	80002ac <__adddf3>
 80140b4:	4680      	mov	r8, r0
 80140b6:	4689      	mov	r9, r1
 80140b8:	e7de      	b.n	8014078 <_strtod_l+0x8b8>
 80140ba:	4013      	ands	r3, r2
 80140bc:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80140c0:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 80140c4:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 80140c8:	f04f 38ff 	mov.w	r8, #4294967295
 80140cc:	e7d4      	b.n	8014078 <_strtod_l+0x8b8>
 80140ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80140d0:	ea13 0f08 	tst.w	r3, r8
 80140d4:	e7e0      	b.n	8014098 <_strtod_l+0x8d8>
 80140d6:	f7ff fb57 	bl	8013788 <sulp>
 80140da:	4602      	mov	r2, r0
 80140dc:	460b      	mov	r3, r1
 80140de:	ec51 0b18 	vmov	r0, r1, d8
 80140e2:	f7ec f8e1 	bl	80002a8 <__aeabi_dsub>
 80140e6:	2200      	movs	r2, #0
 80140e8:	2300      	movs	r3, #0
 80140ea:	4680      	mov	r8, r0
 80140ec:	4689      	mov	r9, r1
 80140ee:	f7ec fcfb 	bl	8000ae8 <__aeabi_dcmpeq>
 80140f2:	2800      	cmp	r0, #0
 80140f4:	d0c0      	beq.n	8014078 <_strtod_l+0x8b8>
 80140f6:	e618      	b.n	8013d2a <_strtod_l+0x56a>
 80140f8:	fffffc02 	.word	0xfffffc02
 80140fc:	7ff00000 	.word	0x7ff00000
 8014100:	39500000 	.word	0x39500000
 8014104:	000fffff 	.word	0x000fffff
 8014108:	7fefffff 	.word	0x7fefffff
 801410c:	08023428 	.word	0x08023428
 8014110:	4659      	mov	r1, fp
 8014112:	4628      	mov	r0, r5
 8014114:	f001 fc3e 	bl	8015994 <__ratio>
 8014118:	ec57 6b10 	vmov	r6, r7, d0
 801411c:	ee10 0a10 	vmov	r0, s0
 8014120:	2200      	movs	r2, #0
 8014122:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8014126:	4639      	mov	r1, r7
 8014128:	f7ec fcf2 	bl	8000b10 <__aeabi_dcmple>
 801412c:	2800      	cmp	r0, #0
 801412e:	d071      	beq.n	8014214 <_strtod_l+0xa54>
 8014130:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014132:	2b00      	cmp	r3, #0
 8014134:	d17c      	bne.n	8014230 <_strtod_l+0xa70>
 8014136:	f1b8 0f00 	cmp.w	r8, #0
 801413a:	d15a      	bne.n	80141f2 <_strtod_l+0xa32>
 801413c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8014140:	2b00      	cmp	r3, #0
 8014142:	d15d      	bne.n	8014200 <_strtod_l+0xa40>
 8014144:	4b90      	ldr	r3, [pc, #576]	; (8014388 <_strtod_l+0xbc8>)
 8014146:	2200      	movs	r2, #0
 8014148:	4630      	mov	r0, r6
 801414a:	4639      	mov	r1, r7
 801414c:	f7ec fcd6 	bl	8000afc <__aeabi_dcmplt>
 8014150:	2800      	cmp	r0, #0
 8014152:	d15c      	bne.n	801420e <_strtod_l+0xa4e>
 8014154:	4630      	mov	r0, r6
 8014156:	4639      	mov	r1, r7
 8014158:	4b8c      	ldr	r3, [pc, #560]	; (801438c <_strtod_l+0xbcc>)
 801415a:	2200      	movs	r2, #0
 801415c:	f7ec fa5c 	bl	8000618 <__aeabi_dmul>
 8014160:	4606      	mov	r6, r0
 8014162:	460f      	mov	r7, r1
 8014164:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8014168:	9606      	str	r6, [sp, #24]
 801416a:	9307      	str	r3, [sp, #28]
 801416c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8014170:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8014174:	4b86      	ldr	r3, [pc, #536]	; (8014390 <_strtod_l+0xbd0>)
 8014176:	ea0a 0303 	and.w	r3, sl, r3
 801417a:	930d      	str	r3, [sp, #52]	; 0x34
 801417c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801417e:	4b85      	ldr	r3, [pc, #532]	; (8014394 <_strtod_l+0xbd4>)
 8014180:	429a      	cmp	r2, r3
 8014182:	f040 8090 	bne.w	80142a6 <_strtod_l+0xae6>
 8014186:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 801418a:	ec49 8b10 	vmov	d0, r8, r9
 801418e:	f001 fb37 	bl	8015800 <__ulp>
 8014192:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8014196:	ec51 0b10 	vmov	r0, r1, d0
 801419a:	f7ec fa3d 	bl	8000618 <__aeabi_dmul>
 801419e:	4642      	mov	r2, r8
 80141a0:	464b      	mov	r3, r9
 80141a2:	f7ec f883 	bl	80002ac <__adddf3>
 80141a6:	460b      	mov	r3, r1
 80141a8:	4979      	ldr	r1, [pc, #484]	; (8014390 <_strtod_l+0xbd0>)
 80141aa:	4a7b      	ldr	r2, [pc, #492]	; (8014398 <_strtod_l+0xbd8>)
 80141ac:	4019      	ands	r1, r3
 80141ae:	4291      	cmp	r1, r2
 80141b0:	4680      	mov	r8, r0
 80141b2:	d944      	bls.n	801423e <_strtod_l+0xa7e>
 80141b4:	ee18 2a90 	vmov	r2, s17
 80141b8:	4b78      	ldr	r3, [pc, #480]	; (801439c <_strtod_l+0xbdc>)
 80141ba:	429a      	cmp	r2, r3
 80141bc:	d104      	bne.n	80141c8 <_strtod_l+0xa08>
 80141be:	ee18 3a10 	vmov	r3, s16
 80141c2:	3301      	adds	r3, #1
 80141c4:	f43f ad40 	beq.w	8013c48 <_strtod_l+0x488>
 80141c8:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 801439c <_strtod_l+0xbdc>
 80141cc:	f04f 38ff 	mov.w	r8, #4294967295
 80141d0:	9916      	ldr	r1, [sp, #88]	; 0x58
 80141d2:	4620      	mov	r0, r4
 80141d4:	f000 ffe8 	bl	80151a8 <_Bfree>
 80141d8:	9905      	ldr	r1, [sp, #20]
 80141da:	4620      	mov	r0, r4
 80141dc:	f000 ffe4 	bl	80151a8 <_Bfree>
 80141e0:	4659      	mov	r1, fp
 80141e2:	4620      	mov	r0, r4
 80141e4:	f000 ffe0 	bl	80151a8 <_Bfree>
 80141e8:	4629      	mov	r1, r5
 80141ea:	4620      	mov	r0, r4
 80141ec:	f000 ffdc 	bl	80151a8 <_Bfree>
 80141f0:	e609      	b.n	8013e06 <_strtod_l+0x646>
 80141f2:	f1b8 0f01 	cmp.w	r8, #1
 80141f6:	d103      	bne.n	8014200 <_strtod_l+0xa40>
 80141f8:	f1b9 0f00 	cmp.w	r9, #0
 80141fc:	f43f ad95 	beq.w	8013d2a <_strtod_l+0x56a>
 8014200:	ed9f 7b55 	vldr	d7, [pc, #340]	; 8014358 <_strtod_l+0xb98>
 8014204:	4f60      	ldr	r7, [pc, #384]	; (8014388 <_strtod_l+0xbc8>)
 8014206:	ed8d 7b06 	vstr	d7, [sp, #24]
 801420a:	2600      	movs	r6, #0
 801420c:	e7ae      	b.n	801416c <_strtod_l+0x9ac>
 801420e:	4f5f      	ldr	r7, [pc, #380]	; (801438c <_strtod_l+0xbcc>)
 8014210:	2600      	movs	r6, #0
 8014212:	e7a7      	b.n	8014164 <_strtod_l+0x9a4>
 8014214:	4b5d      	ldr	r3, [pc, #372]	; (801438c <_strtod_l+0xbcc>)
 8014216:	4630      	mov	r0, r6
 8014218:	4639      	mov	r1, r7
 801421a:	2200      	movs	r2, #0
 801421c:	f7ec f9fc 	bl	8000618 <__aeabi_dmul>
 8014220:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014222:	4606      	mov	r6, r0
 8014224:	460f      	mov	r7, r1
 8014226:	2b00      	cmp	r3, #0
 8014228:	d09c      	beq.n	8014164 <_strtod_l+0x9a4>
 801422a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 801422e:	e79d      	b.n	801416c <_strtod_l+0x9ac>
 8014230:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 8014360 <_strtod_l+0xba0>
 8014234:	ed8d 7b06 	vstr	d7, [sp, #24]
 8014238:	ec57 6b17 	vmov	r6, r7, d7
 801423c:	e796      	b.n	801416c <_strtod_l+0x9ac>
 801423e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8014242:	9b04      	ldr	r3, [sp, #16]
 8014244:	46ca      	mov	sl, r9
 8014246:	2b00      	cmp	r3, #0
 8014248:	d1c2      	bne.n	80141d0 <_strtod_l+0xa10>
 801424a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801424e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8014250:	0d1b      	lsrs	r3, r3, #20
 8014252:	051b      	lsls	r3, r3, #20
 8014254:	429a      	cmp	r2, r3
 8014256:	d1bb      	bne.n	80141d0 <_strtod_l+0xa10>
 8014258:	4630      	mov	r0, r6
 801425a:	4639      	mov	r1, r7
 801425c:	f7ec fd14 	bl	8000c88 <__aeabi_d2lz>
 8014260:	f7ec f9ac 	bl	80005bc <__aeabi_l2d>
 8014264:	4602      	mov	r2, r0
 8014266:	460b      	mov	r3, r1
 8014268:	4630      	mov	r0, r6
 801426a:	4639      	mov	r1, r7
 801426c:	f7ec f81c 	bl	80002a8 <__aeabi_dsub>
 8014270:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8014272:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8014276:	ea43 0308 	orr.w	r3, r3, r8
 801427a:	4313      	orrs	r3, r2
 801427c:	4606      	mov	r6, r0
 801427e:	460f      	mov	r7, r1
 8014280:	d054      	beq.n	801432c <_strtod_l+0xb6c>
 8014282:	a339      	add	r3, pc, #228	; (adr r3, 8014368 <_strtod_l+0xba8>)
 8014284:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014288:	f7ec fc38 	bl	8000afc <__aeabi_dcmplt>
 801428c:	2800      	cmp	r0, #0
 801428e:	f47f ace5 	bne.w	8013c5c <_strtod_l+0x49c>
 8014292:	a337      	add	r3, pc, #220	; (adr r3, 8014370 <_strtod_l+0xbb0>)
 8014294:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014298:	4630      	mov	r0, r6
 801429a:	4639      	mov	r1, r7
 801429c:	f7ec fc4c 	bl	8000b38 <__aeabi_dcmpgt>
 80142a0:	2800      	cmp	r0, #0
 80142a2:	d095      	beq.n	80141d0 <_strtod_l+0xa10>
 80142a4:	e4da      	b.n	8013c5c <_strtod_l+0x49c>
 80142a6:	9b04      	ldr	r3, [sp, #16]
 80142a8:	b333      	cbz	r3, 80142f8 <_strtod_l+0xb38>
 80142aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80142ac:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80142b0:	d822      	bhi.n	80142f8 <_strtod_l+0xb38>
 80142b2:	a331      	add	r3, pc, #196	; (adr r3, 8014378 <_strtod_l+0xbb8>)
 80142b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80142b8:	4630      	mov	r0, r6
 80142ba:	4639      	mov	r1, r7
 80142bc:	f7ec fc28 	bl	8000b10 <__aeabi_dcmple>
 80142c0:	b1a0      	cbz	r0, 80142ec <_strtod_l+0xb2c>
 80142c2:	4639      	mov	r1, r7
 80142c4:	4630      	mov	r0, r6
 80142c6:	f7ec fc57 	bl	8000b78 <__aeabi_d2uiz>
 80142ca:	2801      	cmp	r0, #1
 80142cc:	bf38      	it	cc
 80142ce:	2001      	movcc	r0, #1
 80142d0:	f7ec f928 	bl	8000524 <__aeabi_ui2d>
 80142d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80142d6:	4606      	mov	r6, r0
 80142d8:	460f      	mov	r7, r1
 80142da:	bb23      	cbnz	r3, 8014326 <_strtod_l+0xb66>
 80142dc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80142e0:	9010      	str	r0, [sp, #64]	; 0x40
 80142e2:	9311      	str	r3, [sp, #68]	; 0x44
 80142e4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80142e8:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 80142ec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80142ee:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80142f0:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80142f4:	1a9b      	subs	r3, r3, r2
 80142f6:	930f      	str	r3, [sp, #60]	; 0x3c
 80142f8:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80142fc:	eeb0 0a48 	vmov.f32	s0, s16
 8014300:	eef0 0a68 	vmov.f32	s1, s17
 8014304:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8014308:	f001 fa7a 	bl	8015800 <__ulp>
 801430c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8014310:	ec53 2b10 	vmov	r2, r3, d0
 8014314:	f7ec f980 	bl	8000618 <__aeabi_dmul>
 8014318:	ec53 2b18 	vmov	r2, r3, d8
 801431c:	f7eb ffc6 	bl	80002ac <__adddf3>
 8014320:	4680      	mov	r8, r0
 8014322:	4689      	mov	r9, r1
 8014324:	e78d      	b.n	8014242 <_strtod_l+0xa82>
 8014326:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 801432a:	e7db      	b.n	80142e4 <_strtod_l+0xb24>
 801432c:	a314      	add	r3, pc, #80	; (adr r3, 8014380 <_strtod_l+0xbc0>)
 801432e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014332:	f7ec fbe3 	bl	8000afc <__aeabi_dcmplt>
 8014336:	e7b3      	b.n	80142a0 <_strtod_l+0xae0>
 8014338:	2300      	movs	r3, #0
 801433a:	930a      	str	r3, [sp, #40]	; 0x28
 801433c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801433e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014340:	6013      	str	r3, [r2, #0]
 8014342:	f7ff ba7c 	b.w	801383e <_strtod_l+0x7e>
 8014346:	2a65      	cmp	r2, #101	; 0x65
 8014348:	f43f ab75 	beq.w	8013a36 <_strtod_l+0x276>
 801434c:	2a45      	cmp	r2, #69	; 0x45
 801434e:	f43f ab72 	beq.w	8013a36 <_strtod_l+0x276>
 8014352:	2301      	movs	r3, #1
 8014354:	f7ff bbaa 	b.w	8013aac <_strtod_l+0x2ec>
 8014358:	00000000 	.word	0x00000000
 801435c:	bff00000 	.word	0xbff00000
 8014360:	00000000 	.word	0x00000000
 8014364:	3ff00000 	.word	0x3ff00000
 8014368:	94a03595 	.word	0x94a03595
 801436c:	3fdfffff 	.word	0x3fdfffff
 8014370:	35afe535 	.word	0x35afe535
 8014374:	3fe00000 	.word	0x3fe00000
 8014378:	ffc00000 	.word	0xffc00000
 801437c:	41dfffff 	.word	0x41dfffff
 8014380:	94a03595 	.word	0x94a03595
 8014384:	3fcfffff 	.word	0x3fcfffff
 8014388:	3ff00000 	.word	0x3ff00000
 801438c:	3fe00000 	.word	0x3fe00000
 8014390:	7ff00000 	.word	0x7ff00000
 8014394:	7fe00000 	.word	0x7fe00000
 8014398:	7c9fffff 	.word	0x7c9fffff
 801439c:	7fefffff 	.word	0x7fefffff

080143a0 <strtof>:
 80143a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80143a4:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 8014468 <strtof+0xc8>
 80143a8:	4b2a      	ldr	r3, [pc, #168]	; (8014454 <strtof+0xb4>)
 80143aa:	460a      	mov	r2, r1
 80143ac:	ed2d 8b02 	vpush	{d8}
 80143b0:	4601      	mov	r1, r0
 80143b2:	f8d8 0000 	ldr.w	r0, [r8]
 80143b6:	f7ff fa03 	bl	80137c0 <_strtod_l>
 80143ba:	ec55 4b10 	vmov	r4, r5, d0
 80143be:	ee10 2a10 	vmov	r2, s0
 80143c2:	ee10 0a10 	vmov	r0, s0
 80143c6:	462b      	mov	r3, r5
 80143c8:	4629      	mov	r1, r5
 80143ca:	f7ec fbbf 	bl	8000b4c <__aeabi_dcmpun>
 80143ce:	b190      	cbz	r0, 80143f6 <strtof+0x56>
 80143d0:	2d00      	cmp	r5, #0
 80143d2:	4821      	ldr	r0, [pc, #132]	; (8014458 <strtof+0xb8>)
 80143d4:	da09      	bge.n	80143ea <strtof+0x4a>
 80143d6:	f000 faeb 	bl	80149b0 <nanf>
 80143da:	eeb1 8a40 	vneg.f32	s16, s0
 80143de:	eeb0 0a48 	vmov.f32	s0, s16
 80143e2:	ecbd 8b02 	vpop	{d8}
 80143e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80143ea:	ecbd 8b02 	vpop	{d8}
 80143ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80143f2:	f000 badd 	b.w	80149b0 <nanf>
 80143f6:	4620      	mov	r0, r4
 80143f8:	4629      	mov	r1, r5
 80143fa:	f7ec fbdd 	bl	8000bb8 <__aeabi_d2f>
 80143fe:	ee08 0a10 	vmov	s16, r0
 8014402:	eddf 7a16 	vldr	s15, [pc, #88]	; 801445c <strtof+0xbc>
 8014406:	eeb0 7ac8 	vabs.f32	s14, s16
 801440a:	eeb4 7a67 	vcmp.f32	s14, s15
 801440e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014412:	dd11      	ble.n	8014438 <strtof+0x98>
 8014414:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
 8014418:	4b11      	ldr	r3, [pc, #68]	; (8014460 <strtof+0xc0>)
 801441a:	f04f 32ff 	mov.w	r2, #4294967295
 801441e:	4620      	mov	r0, r4
 8014420:	4639      	mov	r1, r7
 8014422:	f7ec fb93 	bl	8000b4c <__aeabi_dcmpun>
 8014426:	b980      	cbnz	r0, 801444a <strtof+0xaa>
 8014428:	4b0d      	ldr	r3, [pc, #52]	; (8014460 <strtof+0xc0>)
 801442a:	f04f 32ff 	mov.w	r2, #4294967295
 801442e:	4620      	mov	r0, r4
 8014430:	4639      	mov	r1, r7
 8014432:	f7ec fb6d 	bl	8000b10 <__aeabi_dcmple>
 8014436:	b940      	cbnz	r0, 801444a <strtof+0xaa>
 8014438:	ee18 3a10 	vmov	r3, s16
 801443c:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8014440:	d1cd      	bne.n	80143de <strtof+0x3e>
 8014442:	4b08      	ldr	r3, [pc, #32]	; (8014464 <strtof+0xc4>)
 8014444:	402b      	ands	r3, r5
 8014446:	2b00      	cmp	r3, #0
 8014448:	d0c9      	beq.n	80143de <strtof+0x3e>
 801444a:	f8d8 3000 	ldr.w	r3, [r8]
 801444e:	2222      	movs	r2, #34	; 0x22
 8014450:	601a      	str	r2, [r3, #0]
 8014452:	e7c4      	b.n	80143de <strtof+0x3e>
 8014454:	20000194 	.word	0x20000194
 8014458:	080237aa 	.word	0x080237aa
 801445c:	7f7fffff 	.word	0x7f7fffff
 8014460:	7fefffff 	.word	0x7fefffff
 8014464:	7ff00000 	.word	0x7ff00000
 8014468:	2000034c 	.word	0x2000034c

0801446c <_strtoul_l.constprop.0>:
 801446c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014470:	4f36      	ldr	r7, [pc, #216]	; (801454c <_strtoul_l.constprop.0+0xe0>)
 8014472:	4686      	mov	lr, r0
 8014474:	460d      	mov	r5, r1
 8014476:	4628      	mov	r0, r5
 8014478:	f815 4b01 	ldrb.w	r4, [r5], #1
 801447c:	5d3e      	ldrb	r6, [r7, r4]
 801447e:	f016 0608 	ands.w	r6, r6, #8
 8014482:	d1f8      	bne.n	8014476 <_strtoul_l.constprop.0+0xa>
 8014484:	2c2d      	cmp	r4, #45	; 0x2d
 8014486:	d130      	bne.n	80144ea <_strtoul_l.constprop.0+0x7e>
 8014488:	782c      	ldrb	r4, [r5, #0]
 801448a:	2601      	movs	r6, #1
 801448c:	1c85      	adds	r5, r0, #2
 801448e:	2b00      	cmp	r3, #0
 8014490:	d057      	beq.n	8014542 <_strtoul_l.constprop.0+0xd6>
 8014492:	2b10      	cmp	r3, #16
 8014494:	d109      	bne.n	80144aa <_strtoul_l.constprop.0+0x3e>
 8014496:	2c30      	cmp	r4, #48	; 0x30
 8014498:	d107      	bne.n	80144aa <_strtoul_l.constprop.0+0x3e>
 801449a:	7828      	ldrb	r0, [r5, #0]
 801449c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80144a0:	2858      	cmp	r0, #88	; 0x58
 80144a2:	d149      	bne.n	8014538 <_strtoul_l.constprop.0+0xcc>
 80144a4:	786c      	ldrb	r4, [r5, #1]
 80144a6:	2310      	movs	r3, #16
 80144a8:	3502      	adds	r5, #2
 80144aa:	f04f 38ff 	mov.w	r8, #4294967295
 80144ae:	2700      	movs	r7, #0
 80144b0:	fbb8 f8f3 	udiv	r8, r8, r3
 80144b4:	fb03 f908 	mul.w	r9, r3, r8
 80144b8:	ea6f 0909 	mvn.w	r9, r9
 80144bc:	4638      	mov	r0, r7
 80144be:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80144c2:	f1bc 0f09 	cmp.w	ip, #9
 80144c6:	d815      	bhi.n	80144f4 <_strtoul_l.constprop.0+0x88>
 80144c8:	4664      	mov	r4, ip
 80144ca:	42a3      	cmp	r3, r4
 80144cc:	dd23      	ble.n	8014516 <_strtoul_l.constprop.0+0xaa>
 80144ce:	f1b7 3fff 	cmp.w	r7, #4294967295
 80144d2:	d007      	beq.n	80144e4 <_strtoul_l.constprop.0+0x78>
 80144d4:	4580      	cmp	r8, r0
 80144d6:	d31b      	bcc.n	8014510 <_strtoul_l.constprop.0+0xa4>
 80144d8:	d101      	bne.n	80144de <_strtoul_l.constprop.0+0x72>
 80144da:	45a1      	cmp	r9, r4
 80144dc:	db18      	blt.n	8014510 <_strtoul_l.constprop.0+0xa4>
 80144de:	fb00 4003 	mla	r0, r0, r3, r4
 80144e2:	2701      	movs	r7, #1
 80144e4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80144e8:	e7e9      	b.n	80144be <_strtoul_l.constprop.0+0x52>
 80144ea:	2c2b      	cmp	r4, #43	; 0x2b
 80144ec:	bf04      	itt	eq
 80144ee:	782c      	ldrbeq	r4, [r5, #0]
 80144f0:	1c85      	addeq	r5, r0, #2
 80144f2:	e7cc      	b.n	801448e <_strtoul_l.constprop.0+0x22>
 80144f4:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80144f8:	f1bc 0f19 	cmp.w	ip, #25
 80144fc:	d801      	bhi.n	8014502 <_strtoul_l.constprop.0+0x96>
 80144fe:	3c37      	subs	r4, #55	; 0x37
 8014500:	e7e3      	b.n	80144ca <_strtoul_l.constprop.0+0x5e>
 8014502:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8014506:	f1bc 0f19 	cmp.w	ip, #25
 801450a:	d804      	bhi.n	8014516 <_strtoul_l.constprop.0+0xaa>
 801450c:	3c57      	subs	r4, #87	; 0x57
 801450e:	e7dc      	b.n	80144ca <_strtoul_l.constprop.0+0x5e>
 8014510:	f04f 37ff 	mov.w	r7, #4294967295
 8014514:	e7e6      	b.n	80144e4 <_strtoul_l.constprop.0+0x78>
 8014516:	1c7b      	adds	r3, r7, #1
 8014518:	d106      	bne.n	8014528 <_strtoul_l.constprop.0+0xbc>
 801451a:	2322      	movs	r3, #34	; 0x22
 801451c:	f8ce 3000 	str.w	r3, [lr]
 8014520:	4638      	mov	r0, r7
 8014522:	b932      	cbnz	r2, 8014532 <_strtoul_l.constprop.0+0xc6>
 8014524:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014528:	b106      	cbz	r6, 801452c <_strtoul_l.constprop.0+0xc0>
 801452a:	4240      	negs	r0, r0
 801452c:	2a00      	cmp	r2, #0
 801452e:	d0f9      	beq.n	8014524 <_strtoul_l.constprop.0+0xb8>
 8014530:	b107      	cbz	r7, 8014534 <_strtoul_l.constprop.0+0xc8>
 8014532:	1e69      	subs	r1, r5, #1
 8014534:	6011      	str	r1, [r2, #0]
 8014536:	e7f5      	b.n	8014524 <_strtoul_l.constprop.0+0xb8>
 8014538:	2430      	movs	r4, #48	; 0x30
 801453a:	2b00      	cmp	r3, #0
 801453c:	d1b5      	bne.n	80144aa <_strtoul_l.constprop.0+0x3e>
 801453e:	2308      	movs	r3, #8
 8014540:	e7b3      	b.n	80144aa <_strtoul_l.constprop.0+0x3e>
 8014542:	2c30      	cmp	r4, #48	; 0x30
 8014544:	d0a9      	beq.n	801449a <_strtoul_l.constprop.0+0x2e>
 8014546:	230a      	movs	r3, #10
 8014548:	e7af      	b.n	80144aa <_strtoul_l.constprop.0+0x3e>
 801454a:	bf00      	nop
 801454c:	08023451 	.word	0x08023451

08014550 <strtoul>:
 8014550:	4613      	mov	r3, r2
 8014552:	460a      	mov	r2, r1
 8014554:	4601      	mov	r1, r0
 8014556:	4802      	ldr	r0, [pc, #8]	; (8014560 <strtoul+0x10>)
 8014558:	6800      	ldr	r0, [r0, #0]
 801455a:	f7ff bf87 	b.w	801446c <_strtoul_l.constprop.0>
 801455e:	bf00      	nop
 8014560:	2000034c 	.word	0x2000034c

08014564 <std>:
 8014564:	2300      	movs	r3, #0
 8014566:	b510      	push	{r4, lr}
 8014568:	4604      	mov	r4, r0
 801456a:	e9c0 3300 	strd	r3, r3, [r0]
 801456e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8014572:	6083      	str	r3, [r0, #8]
 8014574:	8181      	strh	r1, [r0, #12]
 8014576:	6643      	str	r3, [r0, #100]	; 0x64
 8014578:	81c2      	strh	r2, [r0, #14]
 801457a:	6183      	str	r3, [r0, #24]
 801457c:	4619      	mov	r1, r3
 801457e:	2208      	movs	r2, #8
 8014580:	305c      	adds	r0, #92	; 0x5c
 8014582:	f000 f92d 	bl	80147e0 <memset>
 8014586:	4b0d      	ldr	r3, [pc, #52]	; (80145bc <std+0x58>)
 8014588:	6263      	str	r3, [r4, #36]	; 0x24
 801458a:	4b0d      	ldr	r3, [pc, #52]	; (80145c0 <std+0x5c>)
 801458c:	62a3      	str	r3, [r4, #40]	; 0x28
 801458e:	4b0d      	ldr	r3, [pc, #52]	; (80145c4 <std+0x60>)
 8014590:	62e3      	str	r3, [r4, #44]	; 0x2c
 8014592:	4b0d      	ldr	r3, [pc, #52]	; (80145c8 <std+0x64>)
 8014594:	6323      	str	r3, [r4, #48]	; 0x30
 8014596:	4b0d      	ldr	r3, [pc, #52]	; (80145cc <std+0x68>)
 8014598:	6224      	str	r4, [r4, #32]
 801459a:	429c      	cmp	r4, r3
 801459c:	d006      	beq.n	80145ac <std+0x48>
 801459e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80145a2:	4294      	cmp	r4, r2
 80145a4:	d002      	beq.n	80145ac <std+0x48>
 80145a6:	33d0      	adds	r3, #208	; 0xd0
 80145a8:	429c      	cmp	r4, r3
 80145aa:	d105      	bne.n	80145b8 <std+0x54>
 80145ac:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80145b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80145b4:	f000 b9da 	b.w	801496c <__retarget_lock_init_recursive>
 80145b8:	bd10      	pop	{r4, pc}
 80145ba:	bf00      	nop
 80145bc:	080146e9 	.word	0x080146e9
 80145c0:	0801470b 	.word	0x0801470b
 80145c4:	08014743 	.word	0x08014743
 80145c8:	08014767 	.word	0x08014767
 80145cc:	20008f28 	.word	0x20008f28

080145d0 <stdio_exit_handler>:
 80145d0:	4a02      	ldr	r2, [pc, #8]	; (80145dc <stdio_exit_handler+0xc>)
 80145d2:	4903      	ldr	r1, [pc, #12]	; (80145e0 <stdio_exit_handler+0x10>)
 80145d4:	4803      	ldr	r0, [pc, #12]	; (80145e4 <stdio_exit_handler+0x14>)
 80145d6:	f000 b869 	b.w	80146ac <_fwalk_sglue>
 80145da:	bf00      	nop
 80145dc:	20000188 	.word	0x20000188
 80145e0:	08016179 	.word	0x08016179
 80145e4:	20000300 	.word	0x20000300

080145e8 <cleanup_stdio>:
 80145e8:	6841      	ldr	r1, [r0, #4]
 80145ea:	4b0c      	ldr	r3, [pc, #48]	; (801461c <cleanup_stdio+0x34>)
 80145ec:	4299      	cmp	r1, r3
 80145ee:	b510      	push	{r4, lr}
 80145f0:	4604      	mov	r4, r0
 80145f2:	d001      	beq.n	80145f8 <cleanup_stdio+0x10>
 80145f4:	f001 fdc0 	bl	8016178 <_fflush_r>
 80145f8:	68a1      	ldr	r1, [r4, #8]
 80145fa:	4b09      	ldr	r3, [pc, #36]	; (8014620 <cleanup_stdio+0x38>)
 80145fc:	4299      	cmp	r1, r3
 80145fe:	d002      	beq.n	8014606 <cleanup_stdio+0x1e>
 8014600:	4620      	mov	r0, r4
 8014602:	f001 fdb9 	bl	8016178 <_fflush_r>
 8014606:	68e1      	ldr	r1, [r4, #12]
 8014608:	4b06      	ldr	r3, [pc, #24]	; (8014624 <cleanup_stdio+0x3c>)
 801460a:	4299      	cmp	r1, r3
 801460c:	d004      	beq.n	8014618 <cleanup_stdio+0x30>
 801460e:	4620      	mov	r0, r4
 8014610:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014614:	f001 bdb0 	b.w	8016178 <_fflush_r>
 8014618:	bd10      	pop	{r4, pc}
 801461a:	bf00      	nop
 801461c:	20008f28 	.word	0x20008f28
 8014620:	20008f90 	.word	0x20008f90
 8014624:	20008ff8 	.word	0x20008ff8

08014628 <global_stdio_init.part.0>:
 8014628:	b510      	push	{r4, lr}
 801462a:	4b0b      	ldr	r3, [pc, #44]	; (8014658 <global_stdio_init.part.0+0x30>)
 801462c:	4c0b      	ldr	r4, [pc, #44]	; (801465c <global_stdio_init.part.0+0x34>)
 801462e:	4a0c      	ldr	r2, [pc, #48]	; (8014660 <global_stdio_init.part.0+0x38>)
 8014630:	601a      	str	r2, [r3, #0]
 8014632:	4620      	mov	r0, r4
 8014634:	2200      	movs	r2, #0
 8014636:	2104      	movs	r1, #4
 8014638:	f7ff ff94 	bl	8014564 <std>
 801463c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8014640:	2201      	movs	r2, #1
 8014642:	2109      	movs	r1, #9
 8014644:	f7ff ff8e 	bl	8014564 <std>
 8014648:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 801464c:	2202      	movs	r2, #2
 801464e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014652:	2112      	movs	r1, #18
 8014654:	f7ff bf86 	b.w	8014564 <std>
 8014658:	20009060 	.word	0x20009060
 801465c:	20008f28 	.word	0x20008f28
 8014660:	080145d1 	.word	0x080145d1

08014664 <__sfp_lock_acquire>:
 8014664:	4801      	ldr	r0, [pc, #4]	; (801466c <__sfp_lock_acquire+0x8>)
 8014666:	f000 b982 	b.w	801496e <__retarget_lock_acquire_recursive>
 801466a:	bf00      	nop
 801466c:	20009069 	.word	0x20009069

08014670 <__sfp_lock_release>:
 8014670:	4801      	ldr	r0, [pc, #4]	; (8014678 <__sfp_lock_release+0x8>)
 8014672:	f000 b97d 	b.w	8014970 <__retarget_lock_release_recursive>
 8014676:	bf00      	nop
 8014678:	20009069 	.word	0x20009069

0801467c <__sinit>:
 801467c:	b510      	push	{r4, lr}
 801467e:	4604      	mov	r4, r0
 8014680:	f7ff fff0 	bl	8014664 <__sfp_lock_acquire>
 8014684:	6a23      	ldr	r3, [r4, #32]
 8014686:	b11b      	cbz	r3, 8014690 <__sinit+0x14>
 8014688:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801468c:	f7ff bff0 	b.w	8014670 <__sfp_lock_release>
 8014690:	4b04      	ldr	r3, [pc, #16]	; (80146a4 <__sinit+0x28>)
 8014692:	6223      	str	r3, [r4, #32]
 8014694:	4b04      	ldr	r3, [pc, #16]	; (80146a8 <__sinit+0x2c>)
 8014696:	681b      	ldr	r3, [r3, #0]
 8014698:	2b00      	cmp	r3, #0
 801469a:	d1f5      	bne.n	8014688 <__sinit+0xc>
 801469c:	f7ff ffc4 	bl	8014628 <global_stdio_init.part.0>
 80146a0:	e7f2      	b.n	8014688 <__sinit+0xc>
 80146a2:	bf00      	nop
 80146a4:	080145e9 	.word	0x080145e9
 80146a8:	20009060 	.word	0x20009060

080146ac <_fwalk_sglue>:
 80146ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80146b0:	4607      	mov	r7, r0
 80146b2:	4688      	mov	r8, r1
 80146b4:	4614      	mov	r4, r2
 80146b6:	2600      	movs	r6, #0
 80146b8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80146bc:	f1b9 0901 	subs.w	r9, r9, #1
 80146c0:	d505      	bpl.n	80146ce <_fwalk_sglue+0x22>
 80146c2:	6824      	ldr	r4, [r4, #0]
 80146c4:	2c00      	cmp	r4, #0
 80146c6:	d1f7      	bne.n	80146b8 <_fwalk_sglue+0xc>
 80146c8:	4630      	mov	r0, r6
 80146ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80146ce:	89ab      	ldrh	r3, [r5, #12]
 80146d0:	2b01      	cmp	r3, #1
 80146d2:	d907      	bls.n	80146e4 <_fwalk_sglue+0x38>
 80146d4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80146d8:	3301      	adds	r3, #1
 80146da:	d003      	beq.n	80146e4 <_fwalk_sglue+0x38>
 80146dc:	4629      	mov	r1, r5
 80146de:	4638      	mov	r0, r7
 80146e0:	47c0      	blx	r8
 80146e2:	4306      	orrs	r6, r0
 80146e4:	3568      	adds	r5, #104	; 0x68
 80146e6:	e7e9      	b.n	80146bc <_fwalk_sglue+0x10>

080146e8 <__sread>:
 80146e8:	b510      	push	{r4, lr}
 80146ea:	460c      	mov	r4, r1
 80146ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80146f0:	f000 f8de 	bl	80148b0 <_read_r>
 80146f4:	2800      	cmp	r0, #0
 80146f6:	bfab      	itete	ge
 80146f8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80146fa:	89a3      	ldrhlt	r3, [r4, #12]
 80146fc:	181b      	addge	r3, r3, r0
 80146fe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8014702:	bfac      	ite	ge
 8014704:	6563      	strge	r3, [r4, #84]	; 0x54
 8014706:	81a3      	strhlt	r3, [r4, #12]
 8014708:	bd10      	pop	{r4, pc}

0801470a <__swrite>:
 801470a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801470e:	461f      	mov	r7, r3
 8014710:	898b      	ldrh	r3, [r1, #12]
 8014712:	05db      	lsls	r3, r3, #23
 8014714:	4605      	mov	r5, r0
 8014716:	460c      	mov	r4, r1
 8014718:	4616      	mov	r6, r2
 801471a:	d505      	bpl.n	8014728 <__swrite+0x1e>
 801471c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014720:	2302      	movs	r3, #2
 8014722:	2200      	movs	r2, #0
 8014724:	f000 f8b2 	bl	801488c <_lseek_r>
 8014728:	89a3      	ldrh	r3, [r4, #12]
 801472a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801472e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8014732:	81a3      	strh	r3, [r4, #12]
 8014734:	4632      	mov	r2, r6
 8014736:	463b      	mov	r3, r7
 8014738:	4628      	mov	r0, r5
 801473a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801473e:	f000 b8d9 	b.w	80148f4 <_write_r>

08014742 <__sseek>:
 8014742:	b510      	push	{r4, lr}
 8014744:	460c      	mov	r4, r1
 8014746:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801474a:	f000 f89f 	bl	801488c <_lseek_r>
 801474e:	1c43      	adds	r3, r0, #1
 8014750:	89a3      	ldrh	r3, [r4, #12]
 8014752:	bf15      	itete	ne
 8014754:	6560      	strne	r0, [r4, #84]	; 0x54
 8014756:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801475a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801475e:	81a3      	strheq	r3, [r4, #12]
 8014760:	bf18      	it	ne
 8014762:	81a3      	strhne	r3, [r4, #12]
 8014764:	bd10      	pop	{r4, pc}

08014766 <__sclose>:
 8014766:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801476a:	f000 b87f 	b.w	801486c <_close_r>

0801476e <_vsniprintf_r>:
 801476e:	b530      	push	{r4, r5, lr}
 8014770:	4614      	mov	r4, r2
 8014772:	2c00      	cmp	r4, #0
 8014774:	b09b      	sub	sp, #108	; 0x6c
 8014776:	4605      	mov	r5, r0
 8014778:	461a      	mov	r2, r3
 801477a:	da05      	bge.n	8014788 <_vsniprintf_r+0x1a>
 801477c:	238b      	movs	r3, #139	; 0x8b
 801477e:	6003      	str	r3, [r0, #0]
 8014780:	f04f 30ff 	mov.w	r0, #4294967295
 8014784:	b01b      	add	sp, #108	; 0x6c
 8014786:	bd30      	pop	{r4, r5, pc}
 8014788:	f44f 7302 	mov.w	r3, #520	; 0x208
 801478c:	f8ad 300c 	strh.w	r3, [sp, #12]
 8014790:	bf14      	ite	ne
 8014792:	f104 33ff 	addne.w	r3, r4, #4294967295
 8014796:	4623      	moveq	r3, r4
 8014798:	9302      	str	r3, [sp, #8]
 801479a:	9305      	str	r3, [sp, #20]
 801479c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80147a0:	9100      	str	r1, [sp, #0]
 80147a2:	9104      	str	r1, [sp, #16]
 80147a4:	f8ad 300e 	strh.w	r3, [sp, #14]
 80147a8:	4669      	mov	r1, sp
 80147aa:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80147ac:	f001 f9d0 	bl	8015b50 <_svfiprintf_r>
 80147b0:	1c43      	adds	r3, r0, #1
 80147b2:	bfbc      	itt	lt
 80147b4:	238b      	movlt	r3, #139	; 0x8b
 80147b6:	602b      	strlt	r3, [r5, #0]
 80147b8:	2c00      	cmp	r4, #0
 80147ba:	d0e3      	beq.n	8014784 <_vsniprintf_r+0x16>
 80147bc:	9b00      	ldr	r3, [sp, #0]
 80147be:	2200      	movs	r2, #0
 80147c0:	701a      	strb	r2, [r3, #0]
 80147c2:	e7df      	b.n	8014784 <_vsniprintf_r+0x16>

080147c4 <vsniprintf>:
 80147c4:	b507      	push	{r0, r1, r2, lr}
 80147c6:	9300      	str	r3, [sp, #0]
 80147c8:	4613      	mov	r3, r2
 80147ca:	460a      	mov	r2, r1
 80147cc:	4601      	mov	r1, r0
 80147ce:	4803      	ldr	r0, [pc, #12]	; (80147dc <vsniprintf+0x18>)
 80147d0:	6800      	ldr	r0, [r0, #0]
 80147d2:	f7ff ffcc 	bl	801476e <_vsniprintf_r>
 80147d6:	b003      	add	sp, #12
 80147d8:	f85d fb04 	ldr.w	pc, [sp], #4
 80147dc:	2000034c 	.word	0x2000034c

080147e0 <memset>:
 80147e0:	4402      	add	r2, r0
 80147e2:	4603      	mov	r3, r0
 80147e4:	4293      	cmp	r3, r2
 80147e6:	d100      	bne.n	80147ea <memset+0xa>
 80147e8:	4770      	bx	lr
 80147ea:	f803 1b01 	strb.w	r1, [r3], #1
 80147ee:	e7f9      	b.n	80147e4 <memset+0x4>

080147f0 <strncmp>:
 80147f0:	b510      	push	{r4, lr}
 80147f2:	b16a      	cbz	r2, 8014810 <strncmp+0x20>
 80147f4:	3901      	subs	r1, #1
 80147f6:	1884      	adds	r4, r0, r2
 80147f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80147fc:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8014800:	429a      	cmp	r2, r3
 8014802:	d103      	bne.n	801480c <strncmp+0x1c>
 8014804:	42a0      	cmp	r0, r4
 8014806:	d001      	beq.n	801480c <strncmp+0x1c>
 8014808:	2a00      	cmp	r2, #0
 801480a:	d1f5      	bne.n	80147f8 <strncmp+0x8>
 801480c:	1ad0      	subs	r0, r2, r3
 801480e:	bd10      	pop	{r4, pc}
 8014810:	4610      	mov	r0, r2
 8014812:	e7fc      	b.n	801480e <strncmp+0x1e>

08014814 <__strtok_r>:
 8014814:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014816:	b908      	cbnz	r0, 801481c <__strtok_r+0x8>
 8014818:	6810      	ldr	r0, [r2, #0]
 801481a:	b188      	cbz	r0, 8014840 <__strtok_r+0x2c>
 801481c:	4604      	mov	r4, r0
 801481e:	4620      	mov	r0, r4
 8014820:	f814 5b01 	ldrb.w	r5, [r4], #1
 8014824:	460f      	mov	r7, r1
 8014826:	f817 6b01 	ldrb.w	r6, [r7], #1
 801482a:	b91e      	cbnz	r6, 8014834 <__strtok_r+0x20>
 801482c:	b965      	cbnz	r5, 8014848 <__strtok_r+0x34>
 801482e:	6015      	str	r5, [r2, #0]
 8014830:	4628      	mov	r0, r5
 8014832:	e005      	b.n	8014840 <__strtok_r+0x2c>
 8014834:	42b5      	cmp	r5, r6
 8014836:	d1f6      	bne.n	8014826 <__strtok_r+0x12>
 8014838:	2b00      	cmp	r3, #0
 801483a:	d1f0      	bne.n	801481e <__strtok_r+0xa>
 801483c:	6014      	str	r4, [r2, #0]
 801483e:	7003      	strb	r3, [r0, #0]
 8014840:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014842:	461c      	mov	r4, r3
 8014844:	e00c      	b.n	8014860 <__strtok_r+0x4c>
 8014846:	b915      	cbnz	r5, 801484e <__strtok_r+0x3a>
 8014848:	f814 3b01 	ldrb.w	r3, [r4], #1
 801484c:	460e      	mov	r6, r1
 801484e:	f816 5b01 	ldrb.w	r5, [r6], #1
 8014852:	42ab      	cmp	r3, r5
 8014854:	d1f7      	bne.n	8014846 <__strtok_r+0x32>
 8014856:	2b00      	cmp	r3, #0
 8014858:	d0f3      	beq.n	8014842 <__strtok_r+0x2e>
 801485a:	2300      	movs	r3, #0
 801485c:	f804 3c01 	strb.w	r3, [r4, #-1]
 8014860:	6014      	str	r4, [r2, #0]
 8014862:	e7ed      	b.n	8014840 <__strtok_r+0x2c>

08014864 <strtok_r>:
 8014864:	2301      	movs	r3, #1
 8014866:	f7ff bfd5 	b.w	8014814 <__strtok_r>
	...

0801486c <_close_r>:
 801486c:	b538      	push	{r3, r4, r5, lr}
 801486e:	4d06      	ldr	r5, [pc, #24]	; (8014888 <_close_r+0x1c>)
 8014870:	2300      	movs	r3, #0
 8014872:	4604      	mov	r4, r0
 8014874:	4608      	mov	r0, r1
 8014876:	602b      	str	r3, [r5, #0]
 8014878:	f7ed f99b 	bl	8001bb2 <_close>
 801487c:	1c43      	adds	r3, r0, #1
 801487e:	d102      	bne.n	8014886 <_close_r+0x1a>
 8014880:	682b      	ldr	r3, [r5, #0]
 8014882:	b103      	cbz	r3, 8014886 <_close_r+0x1a>
 8014884:	6023      	str	r3, [r4, #0]
 8014886:	bd38      	pop	{r3, r4, r5, pc}
 8014888:	20009064 	.word	0x20009064

0801488c <_lseek_r>:
 801488c:	b538      	push	{r3, r4, r5, lr}
 801488e:	4d07      	ldr	r5, [pc, #28]	; (80148ac <_lseek_r+0x20>)
 8014890:	4604      	mov	r4, r0
 8014892:	4608      	mov	r0, r1
 8014894:	4611      	mov	r1, r2
 8014896:	2200      	movs	r2, #0
 8014898:	602a      	str	r2, [r5, #0]
 801489a:	461a      	mov	r2, r3
 801489c:	f7ed f9b0 	bl	8001c00 <_lseek>
 80148a0:	1c43      	adds	r3, r0, #1
 80148a2:	d102      	bne.n	80148aa <_lseek_r+0x1e>
 80148a4:	682b      	ldr	r3, [r5, #0]
 80148a6:	b103      	cbz	r3, 80148aa <_lseek_r+0x1e>
 80148a8:	6023      	str	r3, [r4, #0]
 80148aa:	bd38      	pop	{r3, r4, r5, pc}
 80148ac:	20009064 	.word	0x20009064

080148b0 <_read_r>:
 80148b0:	b538      	push	{r3, r4, r5, lr}
 80148b2:	4d07      	ldr	r5, [pc, #28]	; (80148d0 <_read_r+0x20>)
 80148b4:	4604      	mov	r4, r0
 80148b6:	4608      	mov	r0, r1
 80148b8:	4611      	mov	r1, r2
 80148ba:	2200      	movs	r2, #0
 80148bc:	602a      	str	r2, [r5, #0]
 80148be:	461a      	mov	r2, r3
 80148c0:	f7ed f93e 	bl	8001b40 <_read>
 80148c4:	1c43      	adds	r3, r0, #1
 80148c6:	d102      	bne.n	80148ce <_read_r+0x1e>
 80148c8:	682b      	ldr	r3, [r5, #0]
 80148ca:	b103      	cbz	r3, 80148ce <_read_r+0x1e>
 80148cc:	6023      	str	r3, [r4, #0]
 80148ce:	bd38      	pop	{r3, r4, r5, pc}
 80148d0:	20009064 	.word	0x20009064

080148d4 <_sbrk_r>:
 80148d4:	b538      	push	{r3, r4, r5, lr}
 80148d6:	4d06      	ldr	r5, [pc, #24]	; (80148f0 <_sbrk_r+0x1c>)
 80148d8:	2300      	movs	r3, #0
 80148da:	4604      	mov	r4, r0
 80148dc:	4608      	mov	r0, r1
 80148de:	602b      	str	r3, [r5, #0]
 80148e0:	f7ed f99c 	bl	8001c1c <_sbrk>
 80148e4:	1c43      	adds	r3, r0, #1
 80148e6:	d102      	bne.n	80148ee <_sbrk_r+0x1a>
 80148e8:	682b      	ldr	r3, [r5, #0]
 80148ea:	b103      	cbz	r3, 80148ee <_sbrk_r+0x1a>
 80148ec:	6023      	str	r3, [r4, #0]
 80148ee:	bd38      	pop	{r3, r4, r5, pc}
 80148f0:	20009064 	.word	0x20009064

080148f4 <_write_r>:
 80148f4:	b538      	push	{r3, r4, r5, lr}
 80148f6:	4d07      	ldr	r5, [pc, #28]	; (8014914 <_write_r+0x20>)
 80148f8:	4604      	mov	r4, r0
 80148fa:	4608      	mov	r0, r1
 80148fc:	4611      	mov	r1, r2
 80148fe:	2200      	movs	r2, #0
 8014900:	602a      	str	r2, [r5, #0]
 8014902:	461a      	mov	r2, r3
 8014904:	f7ed f939 	bl	8001b7a <_write>
 8014908:	1c43      	adds	r3, r0, #1
 801490a:	d102      	bne.n	8014912 <_write_r+0x1e>
 801490c:	682b      	ldr	r3, [r5, #0]
 801490e:	b103      	cbz	r3, 8014912 <_write_r+0x1e>
 8014910:	6023      	str	r3, [r4, #0]
 8014912:	bd38      	pop	{r3, r4, r5, pc}
 8014914:	20009064 	.word	0x20009064

08014918 <__errno>:
 8014918:	4b01      	ldr	r3, [pc, #4]	; (8014920 <__errno+0x8>)
 801491a:	6818      	ldr	r0, [r3, #0]
 801491c:	4770      	bx	lr
 801491e:	bf00      	nop
 8014920:	2000034c 	.word	0x2000034c

08014924 <__libc_init_array>:
 8014924:	b570      	push	{r4, r5, r6, lr}
 8014926:	4d0d      	ldr	r5, [pc, #52]	; (801495c <__libc_init_array+0x38>)
 8014928:	4c0d      	ldr	r4, [pc, #52]	; (8014960 <__libc_init_array+0x3c>)
 801492a:	1b64      	subs	r4, r4, r5
 801492c:	10a4      	asrs	r4, r4, #2
 801492e:	2600      	movs	r6, #0
 8014930:	42a6      	cmp	r6, r4
 8014932:	d109      	bne.n	8014948 <__libc_init_array+0x24>
 8014934:	4d0b      	ldr	r5, [pc, #44]	; (8014964 <__libc_init_array+0x40>)
 8014936:	4c0c      	ldr	r4, [pc, #48]	; (8014968 <__libc_init_array+0x44>)
 8014938:	f001 ff86 	bl	8016848 <_init>
 801493c:	1b64      	subs	r4, r4, r5
 801493e:	10a4      	asrs	r4, r4, #2
 8014940:	2600      	movs	r6, #0
 8014942:	42a6      	cmp	r6, r4
 8014944:	d105      	bne.n	8014952 <__libc_init_array+0x2e>
 8014946:	bd70      	pop	{r4, r5, r6, pc}
 8014948:	f855 3b04 	ldr.w	r3, [r5], #4
 801494c:	4798      	blx	r3
 801494e:	3601      	adds	r6, #1
 8014950:	e7ee      	b.n	8014930 <__libc_init_array+0xc>
 8014952:	f855 3b04 	ldr.w	r3, [r5], #4
 8014956:	4798      	blx	r3
 8014958:	3601      	adds	r6, #1
 801495a:	e7f2      	b.n	8014942 <__libc_init_array+0x1e>
 801495c:	080237b4 	.word	0x080237b4
 8014960:	080237b4 	.word	0x080237b4
 8014964:	080237b4 	.word	0x080237b4
 8014968:	080237b8 	.word	0x080237b8

0801496c <__retarget_lock_init_recursive>:
 801496c:	4770      	bx	lr

0801496e <__retarget_lock_acquire_recursive>:
 801496e:	4770      	bx	lr

08014970 <__retarget_lock_release_recursive>:
 8014970:	4770      	bx	lr

08014972 <strcpy>:
 8014972:	4603      	mov	r3, r0
 8014974:	f811 2b01 	ldrb.w	r2, [r1], #1
 8014978:	f803 2b01 	strb.w	r2, [r3], #1
 801497c:	2a00      	cmp	r2, #0
 801497e:	d1f9      	bne.n	8014974 <strcpy+0x2>
 8014980:	4770      	bx	lr

08014982 <memcpy>:
 8014982:	440a      	add	r2, r1
 8014984:	4291      	cmp	r1, r2
 8014986:	f100 33ff 	add.w	r3, r0, #4294967295
 801498a:	d100      	bne.n	801498e <memcpy+0xc>
 801498c:	4770      	bx	lr
 801498e:	b510      	push	{r4, lr}
 8014990:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014994:	f803 4f01 	strb.w	r4, [r3, #1]!
 8014998:	4291      	cmp	r1, r2
 801499a:	d1f9      	bne.n	8014990 <memcpy+0xe>
 801499c:	bd10      	pop	{r4, pc}
	...

080149a0 <nan>:
 80149a0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80149a8 <nan+0x8>
 80149a4:	4770      	bx	lr
 80149a6:	bf00      	nop
 80149a8:	00000000 	.word	0x00000000
 80149ac:	7ff80000 	.word	0x7ff80000

080149b0 <nanf>:
 80149b0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80149b8 <nanf+0x8>
 80149b4:	4770      	bx	lr
 80149b6:	bf00      	nop
 80149b8:	7fc00000 	.word	0x7fc00000

080149bc <_free_r>:
 80149bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80149be:	2900      	cmp	r1, #0
 80149c0:	d044      	beq.n	8014a4c <_free_r+0x90>
 80149c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80149c6:	9001      	str	r0, [sp, #4]
 80149c8:	2b00      	cmp	r3, #0
 80149ca:	f1a1 0404 	sub.w	r4, r1, #4
 80149ce:	bfb8      	it	lt
 80149d0:	18e4      	addlt	r4, r4, r3
 80149d2:	f7fe fecd 	bl	8013770 <__malloc_lock>
 80149d6:	4a1e      	ldr	r2, [pc, #120]	; (8014a50 <_free_r+0x94>)
 80149d8:	9801      	ldr	r0, [sp, #4]
 80149da:	6813      	ldr	r3, [r2, #0]
 80149dc:	b933      	cbnz	r3, 80149ec <_free_r+0x30>
 80149de:	6063      	str	r3, [r4, #4]
 80149e0:	6014      	str	r4, [r2, #0]
 80149e2:	b003      	add	sp, #12
 80149e4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80149e8:	f7fe bec8 	b.w	801377c <__malloc_unlock>
 80149ec:	42a3      	cmp	r3, r4
 80149ee:	d908      	bls.n	8014a02 <_free_r+0x46>
 80149f0:	6825      	ldr	r5, [r4, #0]
 80149f2:	1961      	adds	r1, r4, r5
 80149f4:	428b      	cmp	r3, r1
 80149f6:	bf01      	itttt	eq
 80149f8:	6819      	ldreq	r1, [r3, #0]
 80149fa:	685b      	ldreq	r3, [r3, #4]
 80149fc:	1949      	addeq	r1, r1, r5
 80149fe:	6021      	streq	r1, [r4, #0]
 8014a00:	e7ed      	b.n	80149de <_free_r+0x22>
 8014a02:	461a      	mov	r2, r3
 8014a04:	685b      	ldr	r3, [r3, #4]
 8014a06:	b10b      	cbz	r3, 8014a0c <_free_r+0x50>
 8014a08:	42a3      	cmp	r3, r4
 8014a0a:	d9fa      	bls.n	8014a02 <_free_r+0x46>
 8014a0c:	6811      	ldr	r1, [r2, #0]
 8014a0e:	1855      	adds	r5, r2, r1
 8014a10:	42a5      	cmp	r5, r4
 8014a12:	d10b      	bne.n	8014a2c <_free_r+0x70>
 8014a14:	6824      	ldr	r4, [r4, #0]
 8014a16:	4421      	add	r1, r4
 8014a18:	1854      	adds	r4, r2, r1
 8014a1a:	42a3      	cmp	r3, r4
 8014a1c:	6011      	str	r1, [r2, #0]
 8014a1e:	d1e0      	bne.n	80149e2 <_free_r+0x26>
 8014a20:	681c      	ldr	r4, [r3, #0]
 8014a22:	685b      	ldr	r3, [r3, #4]
 8014a24:	6053      	str	r3, [r2, #4]
 8014a26:	440c      	add	r4, r1
 8014a28:	6014      	str	r4, [r2, #0]
 8014a2a:	e7da      	b.n	80149e2 <_free_r+0x26>
 8014a2c:	d902      	bls.n	8014a34 <_free_r+0x78>
 8014a2e:	230c      	movs	r3, #12
 8014a30:	6003      	str	r3, [r0, #0]
 8014a32:	e7d6      	b.n	80149e2 <_free_r+0x26>
 8014a34:	6825      	ldr	r5, [r4, #0]
 8014a36:	1961      	adds	r1, r4, r5
 8014a38:	428b      	cmp	r3, r1
 8014a3a:	bf04      	itt	eq
 8014a3c:	6819      	ldreq	r1, [r3, #0]
 8014a3e:	685b      	ldreq	r3, [r3, #4]
 8014a40:	6063      	str	r3, [r4, #4]
 8014a42:	bf04      	itt	eq
 8014a44:	1949      	addeq	r1, r1, r5
 8014a46:	6021      	streq	r1, [r4, #0]
 8014a48:	6054      	str	r4, [r2, #4]
 8014a4a:	e7ca      	b.n	80149e2 <_free_r+0x26>
 8014a4c:	b003      	add	sp, #12
 8014a4e:	bd30      	pop	{r4, r5, pc}
 8014a50:	20008f20 	.word	0x20008f20

08014a54 <rshift>:
 8014a54:	6903      	ldr	r3, [r0, #16]
 8014a56:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8014a5a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014a5e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8014a62:	f100 0414 	add.w	r4, r0, #20
 8014a66:	dd45      	ble.n	8014af4 <rshift+0xa0>
 8014a68:	f011 011f 	ands.w	r1, r1, #31
 8014a6c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8014a70:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8014a74:	d10c      	bne.n	8014a90 <rshift+0x3c>
 8014a76:	f100 0710 	add.w	r7, r0, #16
 8014a7a:	4629      	mov	r1, r5
 8014a7c:	42b1      	cmp	r1, r6
 8014a7e:	d334      	bcc.n	8014aea <rshift+0x96>
 8014a80:	1a9b      	subs	r3, r3, r2
 8014a82:	009b      	lsls	r3, r3, #2
 8014a84:	1eea      	subs	r2, r5, #3
 8014a86:	4296      	cmp	r6, r2
 8014a88:	bf38      	it	cc
 8014a8a:	2300      	movcc	r3, #0
 8014a8c:	4423      	add	r3, r4
 8014a8e:	e015      	b.n	8014abc <rshift+0x68>
 8014a90:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8014a94:	f1c1 0820 	rsb	r8, r1, #32
 8014a98:	40cf      	lsrs	r7, r1
 8014a9a:	f105 0e04 	add.w	lr, r5, #4
 8014a9e:	46a1      	mov	r9, r4
 8014aa0:	4576      	cmp	r6, lr
 8014aa2:	46f4      	mov	ip, lr
 8014aa4:	d815      	bhi.n	8014ad2 <rshift+0x7e>
 8014aa6:	1a9a      	subs	r2, r3, r2
 8014aa8:	0092      	lsls	r2, r2, #2
 8014aaa:	3a04      	subs	r2, #4
 8014aac:	3501      	adds	r5, #1
 8014aae:	42ae      	cmp	r6, r5
 8014ab0:	bf38      	it	cc
 8014ab2:	2200      	movcc	r2, #0
 8014ab4:	18a3      	adds	r3, r4, r2
 8014ab6:	50a7      	str	r7, [r4, r2]
 8014ab8:	b107      	cbz	r7, 8014abc <rshift+0x68>
 8014aba:	3304      	adds	r3, #4
 8014abc:	1b1a      	subs	r2, r3, r4
 8014abe:	42a3      	cmp	r3, r4
 8014ac0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8014ac4:	bf08      	it	eq
 8014ac6:	2300      	moveq	r3, #0
 8014ac8:	6102      	str	r2, [r0, #16]
 8014aca:	bf08      	it	eq
 8014acc:	6143      	streq	r3, [r0, #20]
 8014ace:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014ad2:	f8dc c000 	ldr.w	ip, [ip]
 8014ad6:	fa0c fc08 	lsl.w	ip, ip, r8
 8014ada:	ea4c 0707 	orr.w	r7, ip, r7
 8014ade:	f849 7b04 	str.w	r7, [r9], #4
 8014ae2:	f85e 7b04 	ldr.w	r7, [lr], #4
 8014ae6:	40cf      	lsrs	r7, r1
 8014ae8:	e7da      	b.n	8014aa0 <rshift+0x4c>
 8014aea:	f851 cb04 	ldr.w	ip, [r1], #4
 8014aee:	f847 cf04 	str.w	ip, [r7, #4]!
 8014af2:	e7c3      	b.n	8014a7c <rshift+0x28>
 8014af4:	4623      	mov	r3, r4
 8014af6:	e7e1      	b.n	8014abc <rshift+0x68>

08014af8 <__hexdig_fun>:
 8014af8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8014afc:	2b09      	cmp	r3, #9
 8014afe:	d802      	bhi.n	8014b06 <__hexdig_fun+0xe>
 8014b00:	3820      	subs	r0, #32
 8014b02:	b2c0      	uxtb	r0, r0
 8014b04:	4770      	bx	lr
 8014b06:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8014b0a:	2b05      	cmp	r3, #5
 8014b0c:	d801      	bhi.n	8014b12 <__hexdig_fun+0x1a>
 8014b0e:	3847      	subs	r0, #71	; 0x47
 8014b10:	e7f7      	b.n	8014b02 <__hexdig_fun+0xa>
 8014b12:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8014b16:	2b05      	cmp	r3, #5
 8014b18:	d801      	bhi.n	8014b1e <__hexdig_fun+0x26>
 8014b1a:	3827      	subs	r0, #39	; 0x27
 8014b1c:	e7f1      	b.n	8014b02 <__hexdig_fun+0xa>
 8014b1e:	2000      	movs	r0, #0
 8014b20:	4770      	bx	lr
	...

08014b24 <__gethex>:
 8014b24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014b28:	4617      	mov	r7, r2
 8014b2a:	680a      	ldr	r2, [r1, #0]
 8014b2c:	b085      	sub	sp, #20
 8014b2e:	f102 0b02 	add.w	fp, r2, #2
 8014b32:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8014b36:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8014b3a:	4681      	mov	r9, r0
 8014b3c:	468a      	mov	sl, r1
 8014b3e:	9302      	str	r3, [sp, #8]
 8014b40:	32fe      	adds	r2, #254	; 0xfe
 8014b42:	eb02 030b 	add.w	r3, r2, fp
 8014b46:	46d8      	mov	r8, fp
 8014b48:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8014b4c:	9301      	str	r3, [sp, #4]
 8014b4e:	2830      	cmp	r0, #48	; 0x30
 8014b50:	d0f7      	beq.n	8014b42 <__gethex+0x1e>
 8014b52:	f7ff ffd1 	bl	8014af8 <__hexdig_fun>
 8014b56:	4604      	mov	r4, r0
 8014b58:	2800      	cmp	r0, #0
 8014b5a:	d138      	bne.n	8014bce <__gethex+0xaa>
 8014b5c:	49a7      	ldr	r1, [pc, #668]	; (8014dfc <__gethex+0x2d8>)
 8014b5e:	2201      	movs	r2, #1
 8014b60:	4640      	mov	r0, r8
 8014b62:	f7ff fe45 	bl	80147f0 <strncmp>
 8014b66:	4606      	mov	r6, r0
 8014b68:	2800      	cmp	r0, #0
 8014b6a:	d169      	bne.n	8014c40 <__gethex+0x11c>
 8014b6c:	f898 0001 	ldrb.w	r0, [r8, #1]
 8014b70:	465d      	mov	r5, fp
 8014b72:	f7ff ffc1 	bl	8014af8 <__hexdig_fun>
 8014b76:	2800      	cmp	r0, #0
 8014b78:	d064      	beq.n	8014c44 <__gethex+0x120>
 8014b7a:	465a      	mov	r2, fp
 8014b7c:	7810      	ldrb	r0, [r2, #0]
 8014b7e:	2830      	cmp	r0, #48	; 0x30
 8014b80:	4690      	mov	r8, r2
 8014b82:	f102 0201 	add.w	r2, r2, #1
 8014b86:	d0f9      	beq.n	8014b7c <__gethex+0x58>
 8014b88:	f7ff ffb6 	bl	8014af8 <__hexdig_fun>
 8014b8c:	2301      	movs	r3, #1
 8014b8e:	fab0 f480 	clz	r4, r0
 8014b92:	0964      	lsrs	r4, r4, #5
 8014b94:	465e      	mov	r6, fp
 8014b96:	9301      	str	r3, [sp, #4]
 8014b98:	4642      	mov	r2, r8
 8014b9a:	4615      	mov	r5, r2
 8014b9c:	3201      	adds	r2, #1
 8014b9e:	7828      	ldrb	r0, [r5, #0]
 8014ba0:	f7ff ffaa 	bl	8014af8 <__hexdig_fun>
 8014ba4:	2800      	cmp	r0, #0
 8014ba6:	d1f8      	bne.n	8014b9a <__gethex+0x76>
 8014ba8:	4994      	ldr	r1, [pc, #592]	; (8014dfc <__gethex+0x2d8>)
 8014baa:	2201      	movs	r2, #1
 8014bac:	4628      	mov	r0, r5
 8014bae:	f7ff fe1f 	bl	80147f0 <strncmp>
 8014bb2:	b978      	cbnz	r0, 8014bd4 <__gethex+0xb0>
 8014bb4:	b946      	cbnz	r6, 8014bc8 <__gethex+0xa4>
 8014bb6:	1c6e      	adds	r6, r5, #1
 8014bb8:	4632      	mov	r2, r6
 8014bba:	4615      	mov	r5, r2
 8014bbc:	3201      	adds	r2, #1
 8014bbe:	7828      	ldrb	r0, [r5, #0]
 8014bc0:	f7ff ff9a 	bl	8014af8 <__hexdig_fun>
 8014bc4:	2800      	cmp	r0, #0
 8014bc6:	d1f8      	bne.n	8014bba <__gethex+0x96>
 8014bc8:	1b73      	subs	r3, r6, r5
 8014bca:	009e      	lsls	r6, r3, #2
 8014bcc:	e004      	b.n	8014bd8 <__gethex+0xb4>
 8014bce:	2400      	movs	r4, #0
 8014bd0:	4626      	mov	r6, r4
 8014bd2:	e7e1      	b.n	8014b98 <__gethex+0x74>
 8014bd4:	2e00      	cmp	r6, #0
 8014bd6:	d1f7      	bne.n	8014bc8 <__gethex+0xa4>
 8014bd8:	782b      	ldrb	r3, [r5, #0]
 8014bda:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8014bde:	2b50      	cmp	r3, #80	; 0x50
 8014be0:	d13d      	bne.n	8014c5e <__gethex+0x13a>
 8014be2:	786b      	ldrb	r3, [r5, #1]
 8014be4:	2b2b      	cmp	r3, #43	; 0x2b
 8014be6:	d02f      	beq.n	8014c48 <__gethex+0x124>
 8014be8:	2b2d      	cmp	r3, #45	; 0x2d
 8014bea:	d031      	beq.n	8014c50 <__gethex+0x12c>
 8014bec:	1c69      	adds	r1, r5, #1
 8014bee:	f04f 0b00 	mov.w	fp, #0
 8014bf2:	7808      	ldrb	r0, [r1, #0]
 8014bf4:	f7ff ff80 	bl	8014af8 <__hexdig_fun>
 8014bf8:	1e42      	subs	r2, r0, #1
 8014bfa:	b2d2      	uxtb	r2, r2
 8014bfc:	2a18      	cmp	r2, #24
 8014bfe:	d82e      	bhi.n	8014c5e <__gethex+0x13a>
 8014c00:	f1a0 0210 	sub.w	r2, r0, #16
 8014c04:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8014c08:	f7ff ff76 	bl	8014af8 <__hexdig_fun>
 8014c0c:	f100 3cff 	add.w	ip, r0, #4294967295
 8014c10:	fa5f fc8c 	uxtb.w	ip, ip
 8014c14:	f1bc 0f18 	cmp.w	ip, #24
 8014c18:	d91d      	bls.n	8014c56 <__gethex+0x132>
 8014c1a:	f1bb 0f00 	cmp.w	fp, #0
 8014c1e:	d000      	beq.n	8014c22 <__gethex+0xfe>
 8014c20:	4252      	negs	r2, r2
 8014c22:	4416      	add	r6, r2
 8014c24:	f8ca 1000 	str.w	r1, [sl]
 8014c28:	b1dc      	cbz	r4, 8014c62 <__gethex+0x13e>
 8014c2a:	9b01      	ldr	r3, [sp, #4]
 8014c2c:	2b00      	cmp	r3, #0
 8014c2e:	bf14      	ite	ne
 8014c30:	f04f 0800 	movne.w	r8, #0
 8014c34:	f04f 0806 	moveq.w	r8, #6
 8014c38:	4640      	mov	r0, r8
 8014c3a:	b005      	add	sp, #20
 8014c3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014c40:	4645      	mov	r5, r8
 8014c42:	4626      	mov	r6, r4
 8014c44:	2401      	movs	r4, #1
 8014c46:	e7c7      	b.n	8014bd8 <__gethex+0xb4>
 8014c48:	f04f 0b00 	mov.w	fp, #0
 8014c4c:	1ca9      	adds	r1, r5, #2
 8014c4e:	e7d0      	b.n	8014bf2 <__gethex+0xce>
 8014c50:	f04f 0b01 	mov.w	fp, #1
 8014c54:	e7fa      	b.n	8014c4c <__gethex+0x128>
 8014c56:	230a      	movs	r3, #10
 8014c58:	fb03 0002 	mla	r0, r3, r2, r0
 8014c5c:	e7d0      	b.n	8014c00 <__gethex+0xdc>
 8014c5e:	4629      	mov	r1, r5
 8014c60:	e7e0      	b.n	8014c24 <__gethex+0x100>
 8014c62:	eba5 0308 	sub.w	r3, r5, r8
 8014c66:	3b01      	subs	r3, #1
 8014c68:	4621      	mov	r1, r4
 8014c6a:	2b07      	cmp	r3, #7
 8014c6c:	dc0a      	bgt.n	8014c84 <__gethex+0x160>
 8014c6e:	4648      	mov	r0, r9
 8014c70:	f000 fa5a 	bl	8015128 <_Balloc>
 8014c74:	4604      	mov	r4, r0
 8014c76:	b940      	cbnz	r0, 8014c8a <__gethex+0x166>
 8014c78:	4b61      	ldr	r3, [pc, #388]	; (8014e00 <__gethex+0x2dc>)
 8014c7a:	4602      	mov	r2, r0
 8014c7c:	21e4      	movs	r1, #228	; 0xe4
 8014c7e:	4861      	ldr	r0, [pc, #388]	; (8014e04 <__gethex+0x2e0>)
 8014c80:	f001 fabc 	bl	80161fc <__assert_func>
 8014c84:	3101      	adds	r1, #1
 8014c86:	105b      	asrs	r3, r3, #1
 8014c88:	e7ef      	b.n	8014c6a <__gethex+0x146>
 8014c8a:	f100 0a14 	add.w	sl, r0, #20
 8014c8e:	2300      	movs	r3, #0
 8014c90:	495a      	ldr	r1, [pc, #360]	; (8014dfc <__gethex+0x2d8>)
 8014c92:	f8cd a004 	str.w	sl, [sp, #4]
 8014c96:	469b      	mov	fp, r3
 8014c98:	45a8      	cmp	r8, r5
 8014c9a:	d342      	bcc.n	8014d22 <__gethex+0x1fe>
 8014c9c:	9801      	ldr	r0, [sp, #4]
 8014c9e:	f840 bb04 	str.w	fp, [r0], #4
 8014ca2:	eba0 000a 	sub.w	r0, r0, sl
 8014ca6:	1080      	asrs	r0, r0, #2
 8014ca8:	6120      	str	r0, [r4, #16]
 8014caa:	ea4f 1840 	mov.w	r8, r0, lsl #5
 8014cae:	4658      	mov	r0, fp
 8014cb0:	f000 fb2c 	bl	801530c <__hi0bits>
 8014cb4:	683d      	ldr	r5, [r7, #0]
 8014cb6:	eba8 0000 	sub.w	r0, r8, r0
 8014cba:	42a8      	cmp	r0, r5
 8014cbc:	dd59      	ble.n	8014d72 <__gethex+0x24e>
 8014cbe:	eba0 0805 	sub.w	r8, r0, r5
 8014cc2:	4641      	mov	r1, r8
 8014cc4:	4620      	mov	r0, r4
 8014cc6:	f000 febb 	bl	8015a40 <__any_on>
 8014cca:	4683      	mov	fp, r0
 8014ccc:	b1b8      	cbz	r0, 8014cfe <__gethex+0x1da>
 8014cce:	f108 33ff 	add.w	r3, r8, #4294967295
 8014cd2:	1159      	asrs	r1, r3, #5
 8014cd4:	f003 021f 	and.w	r2, r3, #31
 8014cd8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8014cdc:	f04f 0b01 	mov.w	fp, #1
 8014ce0:	fa0b f202 	lsl.w	r2, fp, r2
 8014ce4:	420a      	tst	r2, r1
 8014ce6:	d00a      	beq.n	8014cfe <__gethex+0x1da>
 8014ce8:	455b      	cmp	r3, fp
 8014cea:	dd06      	ble.n	8014cfa <__gethex+0x1d6>
 8014cec:	f1a8 0102 	sub.w	r1, r8, #2
 8014cf0:	4620      	mov	r0, r4
 8014cf2:	f000 fea5 	bl	8015a40 <__any_on>
 8014cf6:	2800      	cmp	r0, #0
 8014cf8:	d138      	bne.n	8014d6c <__gethex+0x248>
 8014cfa:	f04f 0b02 	mov.w	fp, #2
 8014cfe:	4641      	mov	r1, r8
 8014d00:	4620      	mov	r0, r4
 8014d02:	f7ff fea7 	bl	8014a54 <rshift>
 8014d06:	4446      	add	r6, r8
 8014d08:	68bb      	ldr	r3, [r7, #8]
 8014d0a:	42b3      	cmp	r3, r6
 8014d0c:	da41      	bge.n	8014d92 <__gethex+0x26e>
 8014d0e:	4621      	mov	r1, r4
 8014d10:	4648      	mov	r0, r9
 8014d12:	f000 fa49 	bl	80151a8 <_Bfree>
 8014d16:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014d18:	2300      	movs	r3, #0
 8014d1a:	6013      	str	r3, [r2, #0]
 8014d1c:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8014d20:	e78a      	b.n	8014c38 <__gethex+0x114>
 8014d22:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 8014d26:	2a2e      	cmp	r2, #46	; 0x2e
 8014d28:	d014      	beq.n	8014d54 <__gethex+0x230>
 8014d2a:	2b20      	cmp	r3, #32
 8014d2c:	d106      	bne.n	8014d3c <__gethex+0x218>
 8014d2e:	9b01      	ldr	r3, [sp, #4]
 8014d30:	f843 bb04 	str.w	fp, [r3], #4
 8014d34:	f04f 0b00 	mov.w	fp, #0
 8014d38:	9301      	str	r3, [sp, #4]
 8014d3a:	465b      	mov	r3, fp
 8014d3c:	7828      	ldrb	r0, [r5, #0]
 8014d3e:	9303      	str	r3, [sp, #12]
 8014d40:	f7ff feda 	bl	8014af8 <__hexdig_fun>
 8014d44:	9b03      	ldr	r3, [sp, #12]
 8014d46:	f000 000f 	and.w	r0, r0, #15
 8014d4a:	4098      	lsls	r0, r3
 8014d4c:	ea4b 0b00 	orr.w	fp, fp, r0
 8014d50:	3304      	adds	r3, #4
 8014d52:	e7a1      	b.n	8014c98 <__gethex+0x174>
 8014d54:	45a8      	cmp	r8, r5
 8014d56:	d8e8      	bhi.n	8014d2a <__gethex+0x206>
 8014d58:	2201      	movs	r2, #1
 8014d5a:	4628      	mov	r0, r5
 8014d5c:	9303      	str	r3, [sp, #12]
 8014d5e:	f7ff fd47 	bl	80147f0 <strncmp>
 8014d62:	4926      	ldr	r1, [pc, #152]	; (8014dfc <__gethex+0x2d8>)
 8014d64:	9b03      	ldr	r3, [sp, #12]
 8014d66:	2800      	cmp	r0, #0
 8014d68:	d1df      	bne.n	8014d2a <__gethex+0x206>
 8014d6a:	e795      	b.n	8014c98 <__gethex+0x174>
 8014d6c:	f04f 0b03 	mov.w	fp, #3
 8014d70:	e7c5      	b.n	8014cfe <__gethex+0x1da>
 8014d72:	da0b      	bge.n	8014d8c <__gethex+0x268>
 8014d74:	eba5 0800 	sub.w	r8, r5, r0
 8014d78:	4621      	mov	r1, r4
 8014d7a:	4642      	mov	r2, r8
 8014d7c:	4648      	mov	r0, r9
 8014d7e:	f000 fc2d 	bl	80155dc <__lshift>
 8014d82:	eba6 0608 	sub.w	r6, r6, r8
 8014d86:	4604      	mov	r4, r0
 8014d88:	f100 0a14 	add.w	sl, r0, #20
 8014d8c:	f04f 0b00 	mov.w	fp, #0
 8014d90:	e7ba      	b.n	8014d08 <__gethex+0x1e4>
 8014d92:	687b      	ldr	r3, [r7, #4]
 8014d94:	42b3      	cmp	r3, r6
 8014d96:	dd73      	ble.n	8014e80 <__gethex+0x35c>
 8014d98:	1b9e      	subs	r6, r3, r6
 8014d9a:	42b5      	cmp	r5, r6
 8014d9c:	dc34      	bgt.n	8014e08 <__gethex+0x2e4>
 8014d9e:	68fb      	ldr	r3, [r7, #12]
 8014da0:	2b02      	cmp	r3, #2
 8014da2:	d023      	beq.n	8014dec <__gethex+0x2c8>
 8014da4:	2b03      	cmp	r3, #3
 8014da6:	d025      	beq.n	8014df4 <__gethex+0x2d0>
 8014da8:	2b01      	cmp	r3, #1
 8014daa:	d115      	bne.n	8014dd8 <__gethex+0x2b4>
 8014dac:	42b5      	cmp	r5, r6
 8014dae:	d113      	bne.n	8014dd8 <__gethex+0x2b4>
 8014db0:	2d01      	cmp	r5, #1
 8014db2:	d10b      	bne.n	8014dcc <__gethex+0x2a8>
 8014db4:	9a02      	ldr	r2, [sp, #8]
 8014db6:	687b      	ldr	r3, [r7, #4]
 8014db8:	6013      	str	r3, [r2, #0]
 8014dba:	2301      	movs	r3, #1
 8014dbc:	6123      	str	r3, [r4, #16]
 8014dbe:	f8ca 3000 	str.w	r3, [sl]
 8014dc2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014dc4:	f04f 0862 	mov.w	r8, #98	; 0x62
 8014dc8:	601c      	str	r4, [r3, #0]
 8014dca:	e735      	b.n	8014c38 <__gethex+0x114>
 8014dcc:	1e69      	subs	r1, r5, #1
 8014dce:	4620      	mov	r0, r4
 8014dd0:	f000 fe36 	bl	8015a40 <__any_on>
 8014dd4:	2800      	cmp	r0, #0
 8014dd6:	d1ed      	bne.n	8014db4 <__gethex+0x290>
 8014dd8:	4621      	mov	r1, r4
 8014dda:	4648      	mov	r0, r9
 8014ddc:	f000 f9e4 	bl	80151a8 <_Bfree>
 8014de0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014de2:	2300      	movs	r3, #0
 8014de4:	6013      	str	r3, [r2, #0]
 8014de6:	f04f 0850 	mov.w	r8, #80	; 0x50
 8014dea:	e725      	b.n	8014c38 <__gethex+0x114>
 8014dec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014dee:	2b00      	cmp	r3, #0
 8014df0:	d1f2      	bne.n	8014dd8 <__gethex+0x2b4>
 8014df2:	e7df      	b.n	8014db4 <__gethex+0x290>
 8014df4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014df6:	2b00      	cmp	r3, #0
 8014df8:	d1dc      	bne.n	8014db4 <__gethex+0x290>
 8014dfa:	e7ed      	b.n	8014dd8 <__gethex+0x2b4>
 8014dfc:	080233ec 	.word	0x080233ec
 8014e00:	08023559 	.word	0x08023559
 8014e04:	0802356a 	.word	0x0802356a
 8014e08:	f106 38ff 	add.w	r8, r6, #4294967295
 8014e0c:	f1bb 0f00 	cmp.w	fp, #0
 8014e10:	d133      	bne.n	8014e7a <__gethex+0x356>
 8014e12:	f1b8 0f00 	cmp.w	r8, #0
 8014e16:	d004      	beq.n	8014e22 <__gethex+0x2fe>
 8014e18:	4641      	mov	r1, r8
 8014e1a:	4620      	mov	r0, r4
 8014e1c:	f000 fe10 	bl	8015a40 <__any_on>
 8014e20:	4683      	mov	fp, r0
 8014e22:	ea4f 1268 	mov.w	r2, r8, asr #5
 8014e26:	2301      	movs	r3, #1
 8014e28:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8014e2c:	f008 081f 	and.w	r8, r8, #31
 8014e30:	fa03 f308 	lsl.w	r3, r3, r8
 8014e34:	4213      	tst	r3, r2
 8014e36:	4631      	mov	r1, r6
 8014e38:	4620      	mov	r0, r4
 8014e3a:	bf18      	it	ne
 8014e3c:	f04b 0b02 	orrne.w	fp, fp, #2
 8014e40:	1bad      	subs	r5, r5, r6
 8014e42:	f7ff fe07 	bl	8014a54 <rshift>
 8014e46:	687e      	ldr	r6, [r7, #4]
 8014e48:	f04f 0802 	mov.w	r8, #2
 8014e4c:	f1bb 0f00 	cmp.w	fp, #0
 8014e50:	d04a      	beq.n	8014ee8 <__gethex+0x3c4>
 8014e52:	68fb      	ldr	r3, [r7, #12]
 8014e54:	2b02      	cmp	r3, #2
 8014e56:	d016      	beq.n	8014e86 <__gethex+0x362>
 8014e58:	2b03      	cmp	r3, #3
 8014e5a:	d018      	beq.n	8014e8e <__gethex+0x36a>
 8014e5c:	2b01      	cmp	r3, #1
 8014e5e:	d109      	bne.n	8014e74 <__gethex+0x350>
 8014e60:	f01b 0f02 	tst.w	fp, #2
 8014e64:	d006      	beq.n	8014e74 <__gethex+0x350>
 8014e66:	f8da 3000 	ldr.w	r3, [sl]
 8014e6a:	ea4b 0b03 	orr.w	fp, fp, r3
 8014e6e:	f01b 0f01 	tst.w	fp, #1
 8014e72:	d10f      	bne.n	8014e94 <__gethex+0x370>
 8014e74:	f048 0810 	orr.w	r8, r8, #16
 8014e78:	e036      	b.n	8014ee8 <__gethex+0x3c4>
 8014e7a:	f04f 0b01 	mov.w	fp, #1
 8014e7e:	e7d0      	b.n	8014e22 <__gethex+0x2fe>
 8014e80:	f04f 0801 	mov.w	r8, #1
 8014e84:	e7e2      	b.n	8014e4c <__gethex+0x328>
 8014e86:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014e88:	f1c3 0301 	rsb	r3, r3, #1
 8014e8c:	930f      	str	r3, [sp, #60]	; 0x3c
 8014e8e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014e90:	2b00      	cmp	r3, #0
 8014e92:	d0ef      	beq.n	8014e74 <__gethex+0x350>
 8014e94:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8014e98:	f104 0214 	add.w	r2, r4, #20
 8014e9c:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8014ea0:	9301      	str	r3, [sp, #4]
 8014ea2:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 8014ea6:	2300      	movs	r3, #0
 8014ea8:	4694      	mov	ip, r2
 8014eaa:	f852 1b04 	ldr.w	r1, [r2], #4
 8014eae:	f1b1 3fff 	cmp.w	r1, #4294967295
 8014eb2:	d01e      	beq.n	8014ef2 <__gethex+0x3ce>
 8014eb4:	3101      	adds	r1, #1
 8014eb6:	f8cc 1000 	str.w	r1, [ip]
 8014eba:	f1b8 0f02 	cmp.w	r8, #2
 8014ebe:	f104 0214 	add.w	r2, r4, #20
 8014ec2:	d13d      	bne.n	8014f40 <__gethex+0x41c>
 8014ec4:	683b      	ldr	r3, [r7, #0]
 8014ec6:	3b01      	subs	r3, #1
 8014ec8:	42ab      	cmp	r3, r5
 8014eca:	d10b      	bne.n	8014ee4 <__gethex+0x3c0>
 8014ecc:	1169      	asrs	r1, r5, #5
 8014ece:	2301      	movs	r3, #1
 8014ed0:	f005 051f 	and.w	r5, r5, #31
 8014ed4:	fa03 f505 	lsl.w	r5, r3, r5
 8014ed8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8014edc:	421d      	tst	r5, r3
 8014ede:	bf18      	it	ne
 8014ee0:	f04f 0801 	movne.w	r8, #1
 8014ee4:	f048 0820 	orr.w	r8, r8, #32
 8014ee8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014eea:	601c      	str	r4, [r3, #0]
 8014eec:	9b02      	ldr	r3, [sp, #8]
 8014eee:	601e      	str	r6, [r3, #0]
 8014ef0:	e6a2      	b.n	8014c38 <__gethex+0x114>
 8014ef2:	4290      	cmp	r0, r2
 8014ef4:	f842 3c04 	str.w	r3, [r2, #-4]
 8014ef8:	d8d6      	bhi.n	8014ea8 <__gethex+0x384>
 8014efa:	68a2      	ldr	r2, [r4, #8]
 8014efc:	4593      	cmp	fp, r2
 8014efe:	db17      	blt.n	8014f30 <__gethex+0x40c>
 8014f00:	6861      	ldr	r1, [r4, #4]
 8014f02:	4648      	mov	r0, r9
 8014f04:	3101      	adds	r1, #1
 8014f06:	f000 f90f 	bl	8015128 <_Balloc>
 8014f0a:	4682      	mov	sl, r0
 8014f0c:	b918      	cbnz	r0, 8014f16 <__gethex+0x3f2>
 8014f0e:	4b1b      	ldr	r3, [pc, #108]	; (8014f7c <__gethex+0x458>)
 8014f10:	4602      	mov	r2, r0
 8014f12:	2184      	movs	r1, #132	; 0x84
 8014f14:	e6b3      	b.n	8014c7e <__gethex+0x15a>
 8014f16:	6922      	ldr	r2, [r4, #16]
 8014f18:	3202      	adds	r2, #2
 8014f1a:	f104 010c 	add.w	r1, r4, #12
 8014f1e:	0092      	lsls	r2, r2, #2
 8014f20:	300c      	adds	r0, #12
 8014f22:	f7ff fd2e 	bl	8014982 <memcpy>
 8014f26:	4621      	mov	r1, r4
 8014f28:	4648      	mov	r0, r9
 8014f2a:	f000 f93d 	bl	80151a8 <_Bfree>
 8014f2e:	4654      	mov	r4, sl
 8014f30:	6922      	ldr	r2, [r4, #16]
 8014f32:	1c51      	adds	r1, r2, #1
 8014f34:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8014f38:	6121      	str	r1, [r4, #16]
 8014f3a:	2101      	movs	r1, #1
 8014f3c:	6151      	str	r1, [r2, #20]
 8014f3e:	e7bc      	b.n	8014eba <__gethex+0x396>
 8014f40:	6921      	ldr	r1, [r4, #16]
 8014f42:	4559      	cmp	r1, fp
 8014f44:	dd0b      	ble.n	8014f5e <__gethex+0x43a>
 8014f46:	2101      	movs	r1, #1
 8014f48:	4620      	mov	r0, r4
 8014f4a:	f7ff fd83 	bl	8014a54 <rshift>
 8014f4e:	68bb      	ldr	r3, [r7, #8]
 8014f50:	3601      	adds	r6, #1
 8014f52:	42b3      	cmp	r3, r6
 8014f54:	f6ff aedb 	blt.w	8014d0e <__gethex+0x1ea>
 8014f58:	f04f 0801 	mov.w	r8, #1
 8014f5c:	e7c2      	b.n	8014ee4 <__gethex+0x3c0>
 8014f5e:	f015 051f 	ands.w	r5, r5, #31
 8014f62:	d0f9      	beq.n	8014f58 <__gethex+0x434>
 8014f64:	9b01      	ldr	r3, [sp, #4]
 8014f66:	441a      	add	r2, r3
 8014f68:	f1c5 0520 	rsb	r5, r5, #32
 8014f6c:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8014f70:	f000 f9cc 	bl	801530c <__hi0bits>
 8014f74:	42a8      	cmp	r0, r5
 8014f76:	dbe6      	blt.n	8014f46 <__gethex+0x422>
 8014f78:	e7ee      	b.n	8014f58 <__gethex+0x434>
 8014f7a:	bf00      	nop
 8014f7c:	08023559 	.word	0x08023559

08014f80 <L_shift>:
 8014f80:	f1c2 0208 	rsb	r2, r2, #8
 8014f84:	0092      	lsls	r2, r2, #2
 8014f86:	b570      	push	{r4, r5, r6, lr}
 8014f88:	f1c2 0620 	rsb	r6, r2, #32
 8014f8c:	6843      	ldr	r3, [r0, #4]
 8014f8e:	6804      	ldr	r4, [r0, #0]
 8014f90:	fa03 f506 	lsl.w	r5, r3, r6
 8014f94:	432c      	orrs	r4, r5
 8014f96:	40d3      	lsrs	r3, r2
 8014f98:	6004      	str	r4, [r0, #0]
 8014f9a:	f840 3f04 	str.w	r3, [r0, #4]!
 8014f9e:	4288      	cmp	r0, r1
 8014fa0:	d3f4      	bcc.n	8014f8c <L_shift+0xc>
 8014fa2:	bd70      	pop	{r4, r5, r6, pc}

08014fa4 <__match>:
 8014fa4:	b530      	push	{r4, r5, lr}
 8014fa6:	6803      	ldr	r3, [r0, #0]
 8014fa8:	3301      	adds	r3, #1
 8014faa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014fae:	b914      	cbnz	r4, 8014fb6 <__match+0x12>
 8014fb0:	6003      	str	r3, [r0, #0]
 8014fb2:	2001      	movs	r0, #1
 8014fb4:	bd30      	pop	{r4, r5, pc}
 8014fb6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014fba:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8014fbe:	2d19      	cmp	r5, #25
 8014fc0:	bf98      	it	ls
 8014fc2:	3220      	addls	r2, #32
 8014fc4:	42a2      	cmp	r2, r4
 8014fc6:	d0f0      	beq.n	8014faa <__match+0x6>
 8014fc8:	2000      	movs	r0, #0
 8014fca:	e7f3      	b.n	8014fb4 <__match+0x10>

08014fcc <__hexnan>:
 8014fcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014fd0:	680b      	ldr	r3, [r1, #0]
 8014fd2:	6801      	ldr	r1, [r0, #0]
 8014fd4:	115e      	asrs	r6, r3, #5
 8014fd6:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8014fda:	f013 031f 	ands.w	r3, r3, #31
 8014fde:	b087      	sub	sp, #28
 8014fe0:	bf18      	it	ne
 8014fe2:	3604      	addne	r6, #4
 8014fe4:	2500      	movs	r5, #0
 8014fe6:	1f37      	subs	r7, r6, #4
 8014fe8:	4682      	mov	sl, r0
 8014fea:	4690      	mov	r8, r2
 8014fec:	9301      	str	r3, [sp, #4]
 8014fee:	f846 5c04 	str.w	r5, [r6, #-4]
 8014ff2:	46b9      	mov	r9, r7
 8014ff4:	463c      	mov	r4, r7
 8014ff6:	9502      	str	r5, [sp, #8]
 8014ff8:	46ab      	mov	fp, r5
 8014ffa:	784a      	ldrb	r2, [r1, #1]
 8014ffc:	1c4b      	adds	r3, r1, #1
 8014ffe:	9303      	str	r3, [sp, #12]
 8015000:	b342      	cbz	r2, 8015054 <__hexnan+0x88>
 8015002:	4610      	mov	r0, r2
 8015004:	9105      	str	r1, [sp, #20]
 8015006:	9204      	str	r2, [sp, #16]
 8015008:	f7ff fd76 	bl	8014af8 <__hexdig_fun>
 801500c:	2800      	cmp	r0, #0
 801500e:	d14f      	bne.n	80150b0 <__hexnan+0xe4>
 8015010:	9a04      	ldr	r2, [sp, #16]
 8015012:	9905      	ldr	r1, [sp, #20]
 8015014:	2a20      	cmp	r2, #32
 8015016:	d818      	bhi.n	801504a <__hexnan+0x7e>
 8015018:	9b02      	ldr	r3, [sp, #8]
 801501a:	459b      	cmp	fp, r3
 801501c:	dd13      	ble.n	8015046 <__hexnan+0x7a>
 801501e:	454c      	cmp	r4, r9
 8015020:	d206      	bcs.n	8015030 <__hexnan+0x64>
 8015022:	2d07      	cmp	r5, #7
 8015024:	dc04      	bgt.n	8015030 <__hexnan+0x64>
 8015026:	462a      	mov	r2, r5
 8015028:	4649      	mov	r1, r9
 801502a:	4620      	mov	r0, r4
 801502c:	f7ff ffa8 	bl	8014f80 <L_shift>
 8015030:	4544      	cmp	r4, r8
 8015032:	d950      	bls.n	80150d6 <__hexnan+0x10a>
 8015034:	2300      	movs	r3, #0
 8015036:	f1a4 0904 	sub.w	r9, r4, #4
 801503a:	f844 3c04 	str.w	r3, [r4, #-4]
 801503e:	f8cd b008 	str.w	fp, [sp, #8]
 8015042:	464c      	mov	r4, r9
 8015044:	461d      	mov	r5, r3
 8015046:	9903      	ldr	r1, [sp, #12]
 8015048:	e7d7      	b.n	8014ffa <__hexnan+0x2e>
 801504a:	2a29      	cmp	r2, #41	; 0x29
 801504c:	d155      	bne.n	80150fa <__hexnan+0x12e>
 801504e:	3102      	adds	r1, #2
 8015050:	f8ca 1000 	str.w	r1, [sl]
 8015054:	f1bb 0f00 	cmp.w	fp, #0
 8015058:	d04f      	beq.n	80150fa <__hexnan+0x12e>
 801505a:	454c      	cmp	r4, r9
 801505c:	d206      	bcs.n	801506c <__hexnan+0xa0>
 801505e:	2d07      	cmp	r5, #7
 8015060:	dc04      	bgt.n	801506c <__hexnan+0xa0>
 8015062:	462a      	mov	r2, r5
 8015064:	4649      	mov	r1, r9
 8015066:	4620      	mov	r0, r4
 8015068:	f7ff ff8a 	bl	8014f80 <L_shift>
 801506c:	4544      	cmp	r4, r8
 801506e:	d934      	bls.n	80150da <__hexnan+0x10e>
 8015070:	f1a8 0204 	sub.w	r2, r8, #4
 8015074:	4623      	mov	r3, r4
 8015076:	f853 1b04 	ldr.w	r1, [r3], #4
 801507a:	f842 1f04 	str.w	r1, [r2, #4]!
 801507e:	429f      	cmp	r7, r3
 8015080:	d2f9      	bcs.n	8015076 <__hexnan+0xaa>
 8015082:	1b3b      	subs	r3, r7, r4
 8015084:	f023 0303 	bic.w	r3, r3, #3
 8015088:	3304      	adds	r3, #4
 801508a:	3e03      	subs	r6, #3
 801508c:	3401      	adds	r4, #1
 801508e:	42a6      	cmp	r6, r4
 8015090:	bf38      	it	cc
 8015092:	2304      	movcc	r3, #4
 8015094:	4443      	add	r3, r8
 8015096:	2200      	movs	r2, #0
 8015098:	f843 2b04 	str.w	r2, [r3], #4
 801509c:	429f      	cmp	r7, r3
 801509e:	d2fb      	bcs.n	8015098 <__hexnan+0xcc>
 80150a0:	683b      	ldr	r3, [r7, #0]
 80150a2:	b91b      	cbnz	r3, 80150ac <__hexnan+0xe0>
 80150a4:	4547      	cmp	r7, r8
 80150a6:	d126      	bne.n	80150f6 <__hexnan+0x12a>
 80150a8:	2301      	movs	r3, #1
 80150aa:	603b      	str	r3, [r7, #0]
 80150ac:	2005      	movs	r0, #5
 80150ae:	e025      	b.n	80150fc <__hexnan+0x130>
 80150b0:	3501      	adds	r5, #1
 80150b2:	2d08      	cmp	r5, #8
 80150b4:	f10b 0b01 	add.w	fp, fp, #1
 80150b8:	dd06      	ble.n	80150c8 <__hexnan+0xfc>
 80150ba:	4544      	cmp	r4, r8
 80150bc:	d9c3      	bls.n	8015046 <__hexnan+0x7a>
 80150be:	2300      	movs	r3, #0
 80150c0:	f844 3c04 	str.w	r3, [r4, #-4]
 80150c4:	2501      	movs	r5, #1
 80150c6:	3c04      	subs	r4, #4
 80150c8:	6822      	ldr	r2, [r4, #0]
 80150ca:	f000 000f 	and.w	r0, r0, #15
 80150ce:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80150d2:	6020      	str	r0, [r4, #0]
 80150d4:	e7b7      	b.n	8015046 <__hexnan+0x7a>
 80150d6:	2508      	movs	r5, #8
 80150d8:	e7b5      	b.n	8015046 <__hexnan+0x7a>
 80150da:	9b01      	ldr	r3, [sp, #4]
 80150dc:	2b00      	cmp	r3, #0
 80150de:	d0df      	beq.n	80150a0 <__hexnan+0xd4>
 80150e0:	f1c3 0320 	rsb	r3, r3, #32
 80150e4:	f04f 32ff 	mov.w	r2, #4294967295
 80150e8:	40da      	lsrs	r2, r3
 80150ea:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80150ee:	4013      	ands	r3, r2
 80150f0:	f846 3c04 	str.w	r3, [r6, #-4]
 80150f4:	e7d4      	b.n	80150a0 <__hexnan+0xd4>
 80150f6:	3f04      	subs	r7, #4
 80150f8:	e7d2      	b.n	80150a0 <__hexnan+0xd4>
 80150fa:	2004      	movs	r0, #4
 80150fc:	b007      	add	sp, #28
 80150fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08015102 <__ascii_mbtowc>:
 8015102:	b082      	sub	sp, #8
 8015104:	b901      	cbnz	r1, 8015108 <__ascii_mbtowc+0x6>
 8015106:	a901      	add	r1, sp, #4
 8015108:	b142      	cbz	r2, 801511c <__ascii_mbtowc+0x1a>
 801510a:	b14b      	cbz	r3, 8015120 <__ascii_mbtowc+0x1e>
 801510c:	7813      	ldrb	r3, [r2, #0]
 801510e:	600b      	str	r3, [r1, #0]
 8015110:	7812      	ldrb	r2, [r2, #0]
 8015112:	1e10      	subs	r0, r2, #0
 8015114:	bf18      	it	ne
 8015116:	2001      	movne	r0, #1
 8015118:	b002      	add	sp, #8
 801511a:	4770      	bx	lr
 801511c:	4610      	mov	r0, r2
 801511e:	e7fb      	b.n	8015118 <__ascii_mbtowc+0x16>
 8015120:	f06f 0001 	mvn.w	r0, #1
 8015124:	e7f8      	b.n	8015118 <__ascii_mbtowc+0x16>
	...

08015128 <_Balloc>:
 8015128:	b570      	push	{r4, r5, r6, lr}
 801512a:	69c6      	ldr	r6, [r0, #28]
 801512c:	4604      	mov	r4, r0
 801512e:	460d      	mov	r5, r1
 8015130:	b976      	cbnz	r6, 8015150 <_Balloc+0x28>
 8015132:	2010      	movs	r0, #16
 8015134:	f7fe fa6c 	bl	8013610 <malloc>
 8015138:	4602      	mov	r2, r0
 801513a:	61e0      	str	r0, [r4, #28]
 801513c:	b920      	cbnz	r0, 8015148 <_Balloc+0x20>
 801513e:	4b18      	ldr	r3, [pc, #96]	; (80151a0 <_Balloc+0x78>)
 8015140:	4818      	ldr	r0, [pc, #96]	; (80151a4 <_Balloc+0x7c>)
 8015142:	216b      	movs	r1, #107	; 0x6b
 8015144:	f001 f85a 	bl	80161fc <__assert_func>
 8015148:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801514c:	6006      	str	r6, [r0, #0]
 801514e:	60c6      	str	r6, [r0, #12]
 8015150:	69e6      	ldr	r6, [r4, #28]
 8015152:	68f3      	ldr	r3, [r6, #12]
 8015154:	b183      	cbz	r3, 8015178 <_Balloc+0x50>
 8015156:	69e3      	ldr	r3, [r4, #28]
 8015158:	68db      	ldr	r3, [r3, #12]
 801515a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801515e:	b9b8      	cbnz	r0, 8015190 <_Balloc+0x68>
 8015160:	2101      	movs	r1, #1
 8015162:	fa01 f605 	lsl.w	r6, r1, r5
 8015166:	1d72      	adds	r2, r6, #5
 8015168:	0092      	lsls	r2, r2, #2
 801516a:	4620      	mov	r0, r4
 801516c:	f001 f864 	bl	8016238 <_calloc_r>
 8015170:	b160      	cbz	r0, 801518c <_Balloc+0x64>
 8015172:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8015176:	e00e      	b.n	8015196 <_Balloc+0x6e>
 8015178:	2221      	movs	r2, #33	; 0x21
 801517a:	2104      	movs	r1, #4
 801517c:	4620      	mov	r0, r4
 801517e:	f001 f85b 	bl	8016238 <_calloc_r>
 8015182:	69e3      	ldr	r3, [r4, #28]
 8015184:	60f0      	str	r0, [r6, #12]
 8015186:	68db      	ldr	r3, [r3, #12]
 8015188:	2b00      	cmp	r3, #0
 801518a:	d1e4      	bne.n	8015156 <_Balloc+0x2e>
 801518c:	2000      	movs	r0, #0
 801518e:	bd70      	pop	{r4, r5, r6, pc}
 8015190:	6802      	ldr	r2, [r0, #0]
 8015192:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8015196:	2300      	movs	r3, #0
 8015198:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801519c:	e7f7      	b.n	801518e <_Balloc+0x66>
 801519e:	bf00      	nop
 80151a0:	080235ca 	.word	0x080235ca
 80151a4:	080235e1 	.word	0x080235e1

080151a8 <_Bfree>:
 80151a8:	b570      	push	{r4, r5, r6, lr}
 80151aa:	69c6      	ldr	r6, [r0, #28]
 80151ac:	4605      	mov	r5, r0
 80151ae:	460c      	mov	r4, r1
 80151b0:	b976      	cbnz	r6, 80151d0 <_Bfree+0x28>
 80151b2:	2010      	movs	r0, #16
 80151b4:	f7fe fa2c 	bl	8013610 <malloc>
 80151b8:	4602      	mov	r2, r0
 80151ba:	61e8      	str	r0, [r5, #28]
 80151bc:	b920      	cbnz	r0, 80151c8 <_Bfree+0x20>
 80151be:	4b09      	ldr	r3, [pc, #36]	; (80151e4 <_Bfree+0x3c>)
 80151c0:	4809      	ldr	r0, [pc, #36]	; (80151e8 <_Bfree+0x40>)
 80151c2:	218f      	movs	r1, #143	; 0x8f
 80151c4:	f001 f81a 	bl	80161fc <__assert_func>
 80151c8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80151cc:	6006      	str	r6, [r0, #0]
 80151ce:	60c6      	str	r6, [r0, #12]
 80151d0:	b13c      	cbz	r4, 80151e2 <_Bfree+0x3a>
 80151d2:	69eb      	ldr	r3, [r5, #28]
 80151d4:	6862      	ldr	r2, [r4, #4]
 80151d6:	68db      	ldr	r3, [r3, #12]
 80151d8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80151dc:	6021      	str	r1, [r4, #0]
 80151de:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80151e2:	bd70      	pop	{r4, r5, r6, pc}
 80151e4:	080235ca 	.word	0x080235ca
 80151e8:	080235e1 	.word	0x080235e1

080151ec <__multadd>:
 80151ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80151f0:	690d      	ldr	r5, [r1, #16]
 80151f2:	4607      	mov	r7, r0
 80151f4:	460c      	mov	r4, r1
 80151f6:	461e      	mov	r6, r3
 80151f8:	f101 0c14 	add.w	ip, r1, #20
 80151fc:	2000      	movs	r0, #0
 80151fe:	f8dc 3000 	ldr.w	r3, [ip]
 8015202:	b299      	uxth	r1, r3
 8015204:	fb02 6101 	mla	r1, r2, r1, r6
 8015208:	0c1e      	lsrs	r6, r3, #16
 801520a:	0c0b      	lsrs	r3, r1, #16
 801520c:	fb02 3306 	mla	r3, r2, r6, r3
 8015210:	b289      	uxth	r1, r1
 8015212:	3001      	adds	r0, #1
 8015214:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8015218:	4285      	cmp	r5, r0
 801521a:	f84c 1b04 	str.w	r1, [ip], #4
 801521e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8015222:	dcec      	bgt.n	80151fe <__multadd+0x12>
 8015224:	b30e      	cbz	r6, 801526a <__multadd+0x7e>
 8015226:	68a3      	ldr	r3, [r4, #8]
 8015228:	42ab      	cmp	r3, r5
 801522a:	dc19      	bgt.n	8015260 <__multadd+0x74>
 801522c:	6861      	ldr	r1, [r4, #4]
 801522e:	4638      	mov	r0, r7
 8015230:	3101      	adds	r1, #1
 8015232:	f7ff ff79 	bl	8015128 <_Balloc>
 8015236:	4680      	mov	r8, r0
 8015238:	b928      	cbnz	r0, 8015246 <__multadd+0x5a>
 801523a:	4602      	mov	r2, r0
 801523c:	4b0c      	ldr	r3, [pc, #48]	; (8015270 <__multadd+0x84>)
 801523e:	480d      	ldr	r0, [pc, #52]	; (8015274 <__multadd+0x88>)
 8015240:	21ba      	movs	r1, #186	; 0xba
 8015242:	f000 ffdb 	bl	80161fc <__assert_func>
 8015246:	6922      	ldr	r2, [r4, #16]
 8015248:	3202      	adds	r2, #2
 801524a:	f104 010c 	add.w	r1, r4, #12
 801524e:	0092      	lsls	r2, r2, #2
 8015250:	300c      	adds	r0, #12
 8015252:	f7ff fb96 	bl	8014982 <memcpy>
 8015256:	4621      	mov	r1, r4
 8015258:	4638      	mov	r0, r7
 801525a:	f7ff ffa5 	bl	80151a8 <_Bfree>
 801525e:	4644      	mov	r4, r8
 8015260:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8015264:	3501      	adds	r5, #1
 8015266:	615e      	str	r6, [r3, #20]
 8015268:	6125      	str	r5, [r4, #16]
 801526a:	4620      	mov	r0, r4
 801526c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015270:	08023559 	.word	0x08023559
 8015274:	080235e1 	.word	0x080235e1

08015278 <__s2b>:
 8015278:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801527c:	460c      	mov	r4, r1
 801527e:	4615      	mov	r5, r2
 8015280:	461f      	mov	r7, r3
 8015282:	2209      	movs	r2, #9
 8015284:	3308      	adds	r3, #8
 8015286:	4606      	mov	r6, r0
 8015288:	fb93 f3f2 	sdiv	r3, r3, r2
 801528c:	2100      	movs	r1, #0
 801528e:	2201      	movs	r2, #1
 8015290:	429a      	cmp	r2, r3
 8015292:	db09      	blt.n	80152a8 <__s2b+0x30>
 8015294:	4630      	mov	r0, r6
 8015296:	f7ff ff47 	bl	8015128 <_Balloc>
 801529a:	b940      	cbnz	r0, 80152ae <__s2b+0x36>
 801529c:	4602      	mov	r2, r0
 801529e:	4b19      	ldr	r3, [pc, #100]	; (8015304 <__s2b+0x8c>)
 80152a0:	4819      	ldr	r0, [pc, #100]	; (8015308 <__s2b+0x90>)
 80152a2:	21d3      	movs	r1, #211	; 0xd3
 80152a4:	f000 ffaa 	bl	80161fc <__assert_func>
 80152a8:	0052      	lsls	r2, r2, #1
 80152aa:	3101      	adds	r1, #1
 80152ac:	e7f0      	b.n	8015290 <__s2b+0x18>
 80152ae:	9b08      	ldr	r3, [sp, #32]
 80152b0:	6143      	str	r3, [r0, #20]
 80152b2:	2d09      	cmp	r5, #9
 80152b4:	f04f 0301 	mov.w	r3, #1
 80152b8:	6103      	str	r3, [r0, #16]
 80152ba:	dd16      	ble.n	80152ea <__s2b+0x72>
 80152bc:	f104 0909 	add.w	r9, r4, #9
 80152c0:	46c8      	mov	r8, r9
 80152c2:	442c      	add	r4, r5
 80152c4:	f818 3b01 	ldrb.w	r3, [r8], #1
 80152c8:	4601      	mov	r1, r0
 80152ca:	3b30      	subs	r3, #48	; 0x30
 80152cc:	220a      	movs	r2, #10
 80152ce:	4630      	mov	r0, r6
 80152d0:	f7ff ff8c 	bl	80151ec <__multadd>
 80152d4:	45a0      	cmp	r8, r4
 80152d6:	d1f5      	bne.n	80152c4 <__s2b+0x4c>
 80152d8:	f1a5 0408 	sub.w	r4, r5, #8
 80152dc:	444c      	add	r4, r9
 80152de:	1b2d      	subs	r5, r5, r4
 80152e0:	1963      	adds	r3, r4, r5
 80152e2:	42bb      	cmp	r3, r7
 80152e4:	db04      	blt.n	80152f0 <__s2b+0x78>
 80152e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80152ea:	340a      	adds	r4, #10
 80152ec:	2509      	movs	r5, #9
 80152ee:	e7f6      	b.n	80152de <__s2b+0x66>
 80152f0:	f814 3b01 	ldrb.w	r3, [r4], #1
 80152f4:	4601      	mov	r1, r0
 80152f6:	3b30      	subs	r3, #48	; 0x30
 80152f8:	220a      	movs	r2, #10
 80152fa:	4630      	mov	r0, r6
 80152fc:	f7ff ff76 	bl	80151ec <__multadd>
 8015300:	e7ee      	b.n	80152e0 <__s2b+0x68>
 8015302:	bf00      	nop
 8015304:	08023559 	.word	0x08023559
 8015308:	080235e1 	.word	0x080235e1

0801530c <__hi0bits>:
 801530c:	0c03      	lsrs	r3, r0, #16
 801530e:	041b      	lsls	r3, r3, #16
 8015310:	b9d3      	cbnz	r3, 8015348 <__hi0bits+0x3c>
 8015312:	0400      	lsls	r0, r0, #16
 8015314:	2310      	movs	r3, #16
 8015316:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801531a:	bf04      	itt	eq
 801531c:	0200      	lsleq	r0, r0, #8
 801531e:	3308      	addeq	r3, #8
 8015320:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8015324:	bf04      	itt	eq
 8015326:	0100      	lsleq	r0, r0, #4
 8015328:	3304      	addeq	r3, #4
 801532a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801532e:	bf04      	itt	eq
 8015330:	0080      	lsleq	r0, r0, #2
 8015332:	3302      	addeq	r3, #2
 8015334:	2800      	cmp	r0, #0
 8015336:	db05      	blt.n	8015344 <__hi0bits+0x38>
 8015338:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801533c:	f103 0301 	add.w	r3, r3, #1
 8015340:	bf08      	it	eq
 8015342:	2320      	moveq	r3, #32
 8015344:	4618      	mov	r0, r3
 8015346:	4770      	bx	lr
 8015348:	2300      	movs	r3, #0
 801534a:	e7e4      	b.n	8015316 <__hi0bits+0xa>

0801534c <__lo0bits>:
 801534c:	6803      	ldr	r3, [r0, #0]
 801534e:	f013 0207 	ands.w	r2, r3, #7
 8015352:	d00c      	beq.n	801536e <__lo0bits+0x22>
 8015354:	07d9      	lsls	r1, r3, #31
 8015356:	d422      	bmi.n	801539e <__lo0bits+0x52>
 8015358:	079a      	lsls	r2, r3, #30
 801535a:	bf49      	itett	mi
 801535c:	085b      	lsrmi	r3, r3, #1
 801535e:	089b      	lsrpl	r3, r3, #2
 8015360:	6003      	strmi	r3, [r0, #0]
 8015362:	2201      	movmi	r2, #1
 8015364:	bf5c      	itt	pl
 8015366:	6003      	strpl	r3, [r0, #0]
 8015368:	2202      	movpl	r2, #2
 801536a:	4610      	mov	r0, r2
 801536c:	4770      	bx	lr
 801536e:	b299      	uxth	r1, r3
 8015370:	b909      	cbnz	r1, 8015376 <__lo0bits+0x2a>
 8015372:	0c1b      	lsrs	r3, r3, #16
 8015374:	2210      	movs	r2, #16
 8015376:	b2d9      	uxtb	r1, r3
 8015378:	b909      	cbnz	r1, 801537e <__lo0bits+0x32>
 801537a:	3208      	adds	r2, #8
 801537c:	0a1b      	lsrs	r3, r3, #8
 801537e:	0719      	lsls	r1, r3, #28
 8015380:	bf04      	itt	eq
 8015382:	091b      	lsreq	r3, r3, #4
 8015384:	3204      	addeq	r2, #4
 8015386:	0799      	lsls	r1, r3, #30
 8015388:	bf04      	itt	eq
 801538a:	089b      	lsreq	r3, r3, #2
 801538c:	3202      	addeq	r2, #2
 801538e:	07d9      	lsls	r1, r3, #31
 8015390:	d403      	bmi.n	801539a <__lo0bits+0x4e>
 8015392:	085b      	lsrs	r3, r3, #1
 8015394:	f102 0201 	add.w	r2, r2, #1
 8015398:	d003      	beq.n	80153a2 <__lo0bits+0x56>
 801539a:	6003      	str	r3, [r0, #0]
 801539c:	e7e5      	b.n	801536a <__lo0bits+0x1e>
 801539e:	2200      	movs	r2, #0
 80153a0:	e7e3      	b.n	801536a <__lo0bits+0x1e>
 80153a2:	2220      	movs	r2, #32
 80153a4:	e7e1      	b.n	801536a <__lo0bits+0x1e>
	...

080153a8 <__i2b>:
 80153a8:	b510      	push	{r4, lr}
 80153aa:	460c      	mov	r4, r1
 80153ac:	2101      	movs	r1, #1
 80153ae:	f7ff febb 	bl	8015128 <_Balloc>
 80153b2:	4602      	mov	r2, r0
 80153b4:	b928      	cbnz	r0, 80153c2 <__i2b+0x1a>
 80153b6:	4b05      	ldr	r3, [pc, #20]	; (80153cc <__i2b+0x24>)
 80153b8:	4805      	ldr	r0, [pc, #20]	; (80153d0 <__i2b+0x28>)
 80153ba:	f240 1145 	movw	r1, #325	; 0x145
 80153be:	f000 ff1d 	bl	80161fc <__assert_func>
 80153c2:	2301      	movs	r3, #1
 80153c4:	6144      	str	r4, [r0, #20]
 80153c6:	6103      	str	r3, [r0, #16]
 80153c8:	bd10      	pop	{r4, pc}
 80153ca:	bf00      	nop
 80153cc:	08023559 	.word	0x08023559
 80153d0:	080235e1 	.word	0x080235e1

080153d4 <__multiply>:
 80153d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80153d8:	4691      	mov	r9, r2
 80153da:	690a      	ldr	r2, [r1, #16]
 80153dc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80153e0:	429a      	cmp	r2, r3
 80153e2:	bfb8      	it	lt
 80153e4:	460b      	movlt	r3, r1
 80153e6:	460c      	mov	r4, r1
 80153e8:	bfbc      	itt	lt
 80153ea:	464c      	movlt	r4, r9
 80153ec:	4699      	movlt	r9, r3
 80153ee:	6927      	ldr	r7, [r4, #16]
 80153f0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80153f4:	68a3      	ldr	r3, [r4, #8]
 80153f6:	6861      	ldr	r1, [r4, #4]
 80153f8:	eb07 060a 	add.w	r6, r7, sl
 80153fc:	42b3      	cmp	r3, r6
 80153fe:	b085      	sub	sp, #20
 8015400:	bfb8      	it	lt
 8015402:	3101      	addlt	r1, #1
 8015404:	f7ff fe90 	bl	8015128 <_Balloc>
 8015408:	b930      	cbnz	r0, 8015418 <__multiply+0x44>
 801540a:	4602      	mov	r2, r0
 801540c:	4b44      	ldr	r3, [pc, #272]	; (8015520 <__multiply+0x14c>)
 801540e:	4845      	ldr	r0, [pc, #276]	; (8015524 <__multiply+0x150>)
 8015410:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8015414:	f000 fef2 	bl	80161fc <__assert_func>
 8015418:	f100 0514 	add.w	r5, r0, #20
 801541c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8015420:	462b      	mov	r3, r5
 8015422:	2200      	movs	r2, #0
 8015424:	4543      	cmp	r3, r8
 8015426:	d321      	bcc.n	801546c <__multiply+0x98>
 8015428:	f104 0314 	add.w	r3, r4, #20
 801542c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8015430:	f109 0314 	add.w	r3, r9, #20
 8015434:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8015438:	9202      	str	r2, [sp, #8]
 801543a:	1b3a      	subs	r2, r7, r4
 801543c:	3a15      	subs	r2, #21
 801543e:	f022 0203 	bic.w	r2, r2, #3
 8015442:	3204      	adds	r2, #4
 8015444:	f104 0115 	add.w	r1, r4, #21
 8015448:	428f      	cmp	r7, r1
 801544a:	bf38      	it	cc
 801544c:	2204      	movcc	r2, #4
 801544e:	9201      	str	r2, [sp, #4]
 8015450:	9a02      	ldr	r2, [sp, #8]
 8015452:	9303      	str	r3, [sp, #12]
 8015454:	429a      	cmp	r2, r3
 8015456:	d80c      	bhi.n	8015472 <__multiply+0x9e>
 8015458:	2e00      	cmp	r6, #0
 801545a:	dd03      	ble.n	8015464 <__multiply+0x90>
 801545c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8015460:	2b00      	cmp	r3, #0
 8015462:	d05b      	beq.n	801551c <__multiply+0x148>
 8015464:	6106      	str	r6, [r0, #16]
 8015466:	b005      	add	sp, #20
 8015468:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801546c:	f843 2b04 	str.w	r2, [r3], #4
 8015470:	e7d8      	b.n	8015424 <__multiply+0x50>
 8015472:	f8b3 a000 	ldrh.w	sl, [r3]
 8015476:	f1ba 0f00 	cmp.w	sl, #0
 801547a:	d024      	beq.n	80154c6 <__multiply+0xf2>
 801547c:	f104 0e14 	add.w	lr, r4, #20
 8015480:	46a9      	mov	r9, r5
 8015482:	f04f 0c00 	mov.w	ip, #0
 8015486:	f85e 2b04 	ldr.w	r2, [lr], #4
 801548a:	f8d9 1000 	ldr.w	r1, [r9]
 801548e:	fa1f fb82 	uxth.w	fp, r2
 8015492:	b289      	uxth	r1, r1
 8015494:	fb0a 110b 	mla	r1, sl, fp, r1
 8015498:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 801549c:	f8d9 2000 	ldr.w	r2, [r9]
 80154a0:	4461      	add	r1, ip
 80154a2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80154a6:	fb0a c20b 	mla	r2, sl, fp, ip
 80154aa:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80154ae:	b289      	uxth	r1, r1
 80154b0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80154b4:	4577      	cmp	r7, lr
 80154b6:	f849 1b04 	str.w	r1, [r9], #4
 80154ba:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80154be:	d8e2      	bhi.n	8015486 <__multiply+0xb2>
 80154c0:	9a01      	ldr	r2, [sp, #4]
 80154c2:	f845 c002 	str.w	ip, [r5, r2]
 80154c6:	9a03      	ldr	r2, [sp, #12]
 80154c8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80154cc:	3304      	adds	r3, #4
 80154ce:	f1b9 0f00 	cmp.w	r9, #0
 80154d2:	d021      	beq.n	8015518 <__multiply+0x144>
 80154d4:	6829      	ldr	r1, [r5, #0]
 80154d6:	f104 0c14 	add.w	ip, r4, #20
 80154da:	46ae      	mov	lr, r5
 80154dc:	f04f 0a00 	mov.w	sl, #0
 80154e0:	f8bc b000 	ldrh.w	fp, [ip]
 80154e4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80154e8:	fb09 220b 	mla	r2, r9, fp, r2
 80154ec:	4452      	add	r2, sl
 80154ee:	b289      	uxth	r1, r1
 80154f0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80154f4:	f84e 1b04 	str.w	r1, [lr], #4
 80154f8:	f85c 1b04 	ldr.w	r1, [ip], #4
 80154fc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8015500:	f8be 1000 	ldrh.w	r1, [lr]
 8015504:	fb09 110a 	mla	r1, r9, sl, r1
 8015508:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 801550c:	4567      	cmp	r7, ip
 801550e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8015512:	d8e5      	bhi.n	80154e0 <__multiply+0x10c>
 8015514:	9a01      	ldr	r2, [sp, #4]
 8015516:	50a9      	str	r1, [r5, r2]
 8015518:	3504      	adds	r5, #4
 801551a:	e799      	b.n	8015450 <__multiply+0x7c>
 801551c:	3e01      	subs	r6, #1
 801551e:	e79b      	b.n	8015458 <__multiply+0x84>
 8015520:	08023559 	.word	0x08023559
 8015524:	080235e1 	.word	0x080235e1

08015528 <__pow5mult>:
 8015528:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801552c:	4615      	mov	r5, r2
 801552e:	f012 0203 	ands.w	r2, r2, #3
 8015532:	4606      	mov	r6, r0
 8015534:	460f      	mov	r7, r1
 8015536:	d007      	beq.n	8015548 <__pow5mult+0x20>
 8015538:	4c25      	ldr	r4, [pc, #148]	; (80155d0 <__pow5mult+0xa8>)
 801553a:	3a01      	subs	r2, #1
 801553c:	2300      	movs	r3, #0
 801553e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8015542:	f7ff fe53 	bl	80151ec <__multadd>
 8015546:	4607      	mov	r7, r0
 8015548:	10ad      	asrs	r5, r5, #2
 801554a:	d03d      	beq.n	80155c8 <__pow5mult+0xa0>
 801554c:	69f4      	ldr	r4, [r6, #28]
 801554e:	b97c      	cbnz	r4, 8015570 <__pow5mult+0x48>
 8015550:	2010      	movs	r0, #16
 8015552:	f7fe f85d 	bl	8013610 <malloc>
 8015556:	4602      	mov	r2, r0
 8015558:	61f0      	str	r0, [r6, #28]
 801555a:	b928      	cbnz	r0, 8015568 <__pow5mult+0x40>
 801555c:	4b1d      	ldr	r3, [pc, #116]	; (80155d4 <__pow5mult+0xac>)
 801555e:	481e      	ldr	r0, [pc, #120]	; (80155d8 <__pow5mult+0xb0>)
 8015560:	f240 11b3 	movw	r1, #435	; 0x1b3
 8015564:	f000 fe4a 	bl	80161fc <__assert_func>
 8015568:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801556c:	6004      	str	r4, [r0, #0]
 801556e:	60c4      	str	r4, [r0, #12]
 8015570:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8015574:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8015578:	b94c      	cbnz	r4, 801558e <__pow5mult+0x66>
 801557a:	f240 2171 	movw	r1, #625	; 0x271
 801557e:	4630      	mov	r0, r6
 8015580:	f7ff ff12 	bl	80153a8 <__i2b>
 8015584:	2300      	movs	r3, #0
 8015586:	f8c8 0008 	str.w	r0, [r8, #8]
 801558a:	4604      	mov	r4, r0
 801558c:	6003      	str	r3, [r0, #0]
 801558e:	f04f 0900 	mov.w	r9, #0
 8015592:	07eb      	lsls	r3, r5, #31
 8015594:	d50a      	bpl.n	80155ac <__pow5mult+0x84>
 8015596:	4639      	mov	r1, r7
 8015598:	4622      	mov	r2, r4
 801559a:	4630      	mov	r0, r6
 801559c:	f7ff ff1a 	bl	80153d4 <__multiply>
 80155a0:	4639      	mov	r1, r7
 80155a2:	4680      	mov	r8, r0
 80155a4:	4630      	mov	r0, r6
 80155a6:	f7ff fdff 	bl	80151a8 <_Bfree>
 80155aa:	4647      	mov	r7, r8
 80155ac:	106d      	asrs	r5, r5, #1
 80155ae:	d00b      	beq.n	80155c8 <__pow5mult+0xa0>
 80155b0:	6820      	ldr	r0, [r4, #0]
 80155b2:	b938      	cbnz	r0, 80155c4 <__pow5mult+0x9c>
 80155b4:	4622      	mov	r2, r4
 80155b6:	4621      	mov	r1, r4
 80155b8:	4630      	mov	r0, r6
 80155ba:	f7ff ff0b 	bl	80153d4 <__multiply>
 80155be:	6020      	str	r0, [r4, #0]
 80155c0:	f8c0 9000 	str.w	r9, [r0]
 80155c4:	4604      	mov	r4, r0
 80155c6:	e7e4      	b.n	8015592 <__pow5mult+0x6a>
 80155c8:	4638      	mov	r0, r7
 80155ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80155ce:	bf00      	nop
 80155d0:	08023730 	.word	0x08023730
 80155d4:	080235ca 	.word	0x080235ca
 80155d8:	080235e1 	.word	0x080235e1

080155dc <__lshift>:
 80155dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80155e0:	460c      	mov	r4, r1
 80155e2:	6849      	ldr	r1, [r1, #4]
 80155e4:	6923      	ldr	r3, [r4, #16]
 80155e6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80155ea:	68a3      	ldr	r3, [r4, #8]
 80155ec:	4607      	mov	r7, r0
 80155ee:	4691      	mov	r9, r2
 80155f0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80155f4:	f108 0601 	add.w	r6, r8, #1
 80155f8:	42b3      	cmp	r3, r6
 80155fa:	db0b      	blt.n	8015614 <__lshift+0x38>
 80155fc:	4638      	mov	r0, r7
 80155fe:	f7ff fd93 	bl	8015128 <_Balloc>
 8015602:	4605      	mov	r5, r0
 8015604:	b948      	cbnz	r0, 801561a <__lshift+0x3e>
 8015606:	4602      	mov	r2, r0
 8015608:	4b28      	ldr	r3, [pc, #160]	; (80156ac <__lshift+0xd0>)
 801560a:	4829      	ldr	r0, [pc, #164]	; (80156b0 <__lshift+0xd4>)
 801560c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8015610:	f000 fdf4 	bl	80161fc <__assert_func>
 8015614:	3101      	adds	r1, #1
 8015616:	005b      	lsls	r3, r3, #1
 8015618:	e7ee      	b.n	80155f8 <__lshift+0x1c>
 801561a:	2300      	movs	r3, #0
 801561c:	f100 0114 	add.w	r1, r0, #20
 8015620:	f100 0210 	add.w	r2, r0, #16
 8015624:	4618      	mov	r0, r3
 8015626:	4553      	cmp	r3, sl
 8015628:	db33      	blt.n	8015692 <__lshift+0xb6>
 801562a:	6920      	ldr	r0, [r4, #16]
 801562c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8015630:	f104 0314 	add.w	r3, r4, #20
 8015634:	f019 091f 	ands.w	r9, r9, #31
 8015638:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801563c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8015640:	d02b      	beq.n	801569a <__lshift+0xbe>
 8015642:	f1c9 0e20 	rsb	lr, r9, #32
 8015646:	468a      	mov	sl, r1
 8015648:	2200      	movs	r2, #0
 801564a:	6818      	ldr	r0, [r3, #0]
 801564c:	fa00 f009 	lsl.w	r0, r0, r9
 8015650:	4310      	orrs	r0, r2
 8015652:	f84a 0b04 	str.w	r0, [sl], #4
 8015656:	f853 2b04 	ldr.w	r2, [r3], #4
 801565a:	459c      	cmp	ip, r3
 801565c:	fa22 f20e 	lsr.w	r2, r2, lr
 8015660:	d8f3      	bhi.n	801564a <__lshift+0x6e>
 8015662:	ebac 0304 	sub.w	r3, ip, r4
 8015666:	3b15      	subs	r3, #21
 8015668:	f023 0303 	bic.w	r3, r3, #3
 801566c:	3304      	adds	r3, #4
 801566e:	f104 0015 	add.w	r0, r4, #21
 8015672:	4584      	cmp	ip, r0
 8015674:	bf38      	it	cc
 8015676:	2304      	movcc	r3, #4
 8015678:	50ca      	str	r2, [r1, r3]
 801567a:	b10a      	cbz	r2, 8015680 <__lshift+0xa4>
 801567c:	f108 0602 	add.w	r6, r8, #2
 8015680:	3e01      	subs	r6, #1
 8015682:	4638      	mov	r0, r7
 8015684:	612e      	str	r6, [r5, #16]
 8015686:	4621      	mov	r1, r4
 8015688:	f7ff fd8e 	bl	80151a8 <_Bfree>
 801568c:	4628      	mov	r0, r5
 801568e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015692:	f842 0f04 	str.w	r0, [r2, #4]!
 8015696:	3301      	adds	r3, #1
 8015698:	e7c5      	b.n	8015626 <__lshift+0x4a>
 801569a:	3904      	subs	r1, #4
 801569c:	f853 2b04 	ldr.w	r2, [r3], #4
 80156a0:	f841 2f04 	str.w	r2, [r1, #4]!
 80156a4:	459c      	cmp	ip, r3
 80156a6:	d8f9      	bhi.n	801569c <__lshift+0xc0>
 80156a8:	e7ea      	b.n	8015680 <__lshift+0xa4>
 80156aa:	bf00      	nop
 80156ac:	08023559 	.word	0x08023559
 80156b0:	080235e1 	.word	0x080235e1

080156b4 <__mcmp>:
 80156b4:	b530      	push	{r4, r5, lr}
 80156b6:	6902      	ldr	r2, [r0, #16]
 80156b8:	690c      	ldr	r4, [r1, #16]
 80156ba:	1b12      	subs	r2, r2, r4
 80156bc:	d10e      	bne.n	80156dc <__mcmp+0x28>
 80156be:	f100 0314 	add.w	r3, r0, #20
 80156c2:	3114      	adds	r1, #20
 80156c4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80156c8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80156cc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80156d0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80156d4:	42a5      	cmp	r5, r4
 80156d6:	d003      	beq.n	80156e0 <__mcmp+0x2c>
 80156d8:	d305      	bcc.n	80156e6 <__mcmp+0x32>
 80156da:	2201      	movs	r2, #1
 80156dc:	4610      	mov	r0, r2
 80156de:	bd30      	pop	{r4, r5, pc}
 80156e0:	4283      	cmp	r3, r0
 80156e2:	d3f3      	bcc.n	80156cc <__mcmp+0x18>
 80156e4:	e7fa      	b.n	80156dc <__mcmp+0x28>
 80156e6:	f04f 32ff 	mov.w	r2, #4294967295
 80156ea:	e7f7      	b.n	80156dc <__mcmp+0x28>

080156ec <__mdiff>:
 80156ec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80156f0:	460c      	mov	r4, r1
 80156f2:	4606      	mov	r6, r0
 80156f4:	4611      	mov	r1, r2
 80156f6:	4620      	mov	r0, r4
 80156f8:	4690      	mov	r8, r2
 80156fa:	f7ff ffdb 	bl	80156b4 <__mcmp>
 80156fe:	1e05      	subs	r5, r0, #0
 8015700:	d110      	bne.n	8015724 <__mdiff+0x38>
 8015702:	4629      	mov	r1, r5
 8015704:	4630      	mov	r0, r6
 8015706:	f7ff fd0f 	bl	8015128 <_Balloc>
 801570a:	b930      	cbnz	r0, 801571a <__mdiff+0x2e>
 801570c:	4b3a      	ldr	r3, [pc, #232]	; (80157f8 <__mdiff+0x10c>)
 801570e:	4602      	mov	r2, r0
 8015710:	f240 2137 	movw	r1, #567	; 0x237
 8015714:	4839      	ldr	r0, [pc, #228]	; (80157fc <__mdiff+0x110>)
 8015716:	f000 fd71 	bl	80161fc <__assert_func>
 801571a:	2301      	movs	r3, #1
 801571c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8015720:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015724:	bfa4      	itt	ge
 8015726:	4643      	movge	r3, r8
 8015728:	46a0      	movge	r8, r4
 801572a:	4630      	mov	r0, r6
 801572c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8015730:	bfa6      	itte	ge
 8015732:	461c      	movge	r4, r3
 8015734:	2500      	movge	r5, #0
 8015736:	2501      	movlt	r5, #1
 8015738:	f7ff fcf6 	bl	8015128 <_Balloc>
 801573c:	b920      	cbnz	r0, 8015748 <__mdiff+0x5c>
 801573e:	4b2e      	ldr	r3, [pc, #184]	; (80157f8 <__mdiff+0x10c>)
 8015740:	4602      	mov	r2, r0
 8015742:	f240 2145 	movw	r1, #581	; 0x245
 8015746:	e7e5      	b.n	8015714 <__mdiff+0x28>
 8015748:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801574c:	6926      	ldr	r6, [r4, #16]
 801574e:	60c5      	str	r5, [r0, #12]
 8015750:	f104 0914 	add.w	r9, r4, #20
 8015754:	f108 0514 	add.w	r5, r8, #20
 8015758:	f100 0e14 	add.w	lr, r0, #20
 801575c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8015760:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8015764:	f108 0210 	add.w	r2, r8, #16
 8015768:	46f2      	mov	sl, lr
 801576a:	2100      	movs	r1, #0
 801576c:	f859 3b04 	ldr.w	r3, [r9], #4
 8015770:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8015774:	fa11 f88b 	uxtah	r8, r1, fp
 8015778:	b299      	uxth	r1, r3
 801577a:	0c1b      	lsrs	r3, r3, #16
 801577c:	eba8 0801 	sub.w	r8, r8, r1
 8015780:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8015784:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8015788:	fa1f f888 	uxth.w	r8, r8
 801578c:	1419      	asrs	r1, r3, #16
 801578e:	454e      	cmp	r6, r9
 8015790:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8015794:	f84a 3b04 	str.w	r3, [sl], #4
 8015798:	d8e8      	bhi.n	801576c <__mdiff+0x80>
 801579a:	1b33      	subs	r3, r6, r4
 801579c:	3b15      	subs	r3, #21
 801579e:	f023 0303 	bic.w	r3, r3, #3
 80157a2:	3304      	adds	r3, #4
 80157a4:	3415      	adds	r4, #21
 80157a6:	42a6      	cmp	r6, r4
 80157a8:	bf38      	it	cc
 80157aa:	2304      	movcc	r3, #4
 80157ac:	441d      	add	r5, r3
 80157ae:	4473      	add	r3, lr
 80157b0:	469e      	mov	lr, r3
 80157b2:	462e      	mov	r6, r5
 80157b4:	4566      	cmp	r6, ip
 80157b6:	d30e      	bcc.n	80157d6 <__mdiff+0xea>
 80157b8:	f10c 0203 	add.w	r2, ip, #3
 80157bc:	1b52      	subs	r2, r2, r5
 80157be:	f022 0203 	bic.w	r2, r2, #3
 80157c2:	3d03      	subs	r5, #3
 80157c4:	45ac      	cmp	ip, r5
 80157c6:	bf38      	it	cc
 80157c8:	2200      	movcc	r2, #0
 80157ca:	4413      	add	r3, r2
 80157cc:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80157d0:	b17a      	cbz	r2, 80157f2 <__mdiff+0x106>
 80157d2:	6107      	str	r7, [r0, #16]
 80157d4:	e7a4      	b.n	8015720 <__mdiff+0x34>
 80157d6:	f856 8b04 	ldr.w	r8, [r6], #4
 80157da:	fa11 f288 	uxtah	r2, r1, r8
 80157de:	1414      	asrs	r4, r2, #16
 80157e0:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80157e4:	b292      	uxth	r2, r2
 80157e6:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80157ea:	f84e 2b04 	str.w	r2, [lr], #4
 80157ee:	1421      	asrs	r1, r4, #16
 80157f0:	e7e0      	b.n	80157b4 <__mdiff+0xc8>
 80157f2:	3f01      	subs	r7, #1
 80157f4:	e7ea      	b.n	80157cc <__mdiff+0xe0>
 80157f6:	bf00      	nop
 80157f8:	08023559 	.word	0x08023559
 80157fc:	080235e1 	.word	0x080235e1

08015800 <__ulp>:
 8015800:	b082      	sub	sp, #8
 8015802:	ed8d 0b00 	vstr	d0, [sp]
 8015806:	9a01      	ldr	r2, [sp, #4]
 8015808:	4b0f      	ldr	r3, [pc, #60]	; (8015848 <__ulp+0x48>)
 801580a:	4013      	ands	r3, r2
 801580c:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8015810:	2b00      	cmp	r3, #0
 8015812:	dc08      	bgt.n	8015826 <__ulp+0x26>
 8015814:	425b      	negs	r3, r3
 8015816:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 801581a:	ea4f 5223 	mov.w	r2, r3, asr #20
 801581e:	da04      	bge.n	801582a <__ulp+0x2a>
 8015820:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8015824:	4113      	asrs	r3, r2
 8015826:	2200      	movs	r2, #0
 8015828:	e008      	b.n	801583c <__ulp+0x3c>
 801582a:	f1a2 0314 	sub.w	r3, r2, #20
 801582e:	2b1e      	cmp	r3, #30
 8015830:	bfda      	itte	le
 8015832:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8015836:	40da      	lsrle	r2, r3
 8015838:	2201      	movgt	r2, #1
 801583a:	2300      	movs	r3, #0
 801583c:	4619      	mov	r1, r3
 801583e:	4610      	mov	r0, r2
 8015840:	ec41 0b10 	vmov	d0, r0, r1
 8015844:	b002      	add	sp, #8
 8015846:	4770      	bx	lr
 8015848:	7ff00000 	.word	0x7ff00000

0801584c <__b2d>:
 801584c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015850:	6906      	ldr	r6, [r0, #16]
 8015852:	f100 0814 	add.w	r8, r0, #20
 8015856:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 801585a:	1f37      	subs	r7, r6, #4
 801585c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8015860:	4610      	mov	r0, r2
 8015862:	f7ff fd53 	bl	801530c <__hi0bits>
 8015866:	f1c0 0320 	rsb	r3, r0, #32
 801586a:	280a      	cmp	r0, #10
 801586c:	600b      	str	r3, [r1, #0]
 801586e:	491b      	ldr	r1, [pc, #108]	; (80158dc <__b2d+0x90>)
 8015870:	dc15      	bgt.n	801589e <__b2d+0x52>
 8015872:	f1c0 0c0b 	rsb	ip, r0, #11
 8015876:	fa22 f30c 	lsr.w	r3, r2, ip
 801587a:	45b8      	cmp	r8, r7
 801587c:	ea43 0501 	orr.w	r5, r3, r1
 8015880:	bf34      	ite	cc
 8015882:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8015886:	2300      	movcs	r3, #0
 8015888:	3015      	adds	r0, #21
 801588a:	fa02 f000 	lsl.w	r0, r2, r0
 801588e:	fa23 f30c 	lsr.w	r3, r3, ip
 8015892:	4303      	orrs	r3, r0
 8015894:	461c      	mov	r4, r3
 8015896:	ec45 4b10 	vmov	d0, r4, r5
 801589a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801589e:	45b8      	cmp	r8, r7
 80158a0:	bf3a      	itte	cc
 80158a2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80158a6:	f1a6 0708 	subcc.w	r7, r6, #8
 80158aa:	2300      	movcs	r3, #0
 80158ac:	380b      	subs	r0, #11
 80158ae:	d012      	beq.n	80158d6 <__b2d+0x8a>
 80158b0:	f1c0 0120 	rsb	r1, r0, #32
 80158b4:	fa23 f401 	lsr.w	r4, r3, r1
 80158b8:	4082      	lsls	r2, r0
 80158ba:	4322      	orrs	r2, r4
 80158bc:	4547      	cmp	r7, r8
 80158be:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 80158c2:	bf8c      	ite	hi
 80158c4:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 80158c8:	2200      	movls	r2, #0
 80158ca:	4083      	lsls	r3, r0
 80158cc:	40ca      	lsrs	r2, r1
 80158ce:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80158d2:	4313      	orrs	r3, r2
 80158d4:	e7de      	b.n	8015894 <__b2d+0x48>
 80158d6:	ea42 0501 	orr.w	r5, r2, r1
 80158da:	e7db      	b.n	8015894 <__b2d+0x48>
 80158dc:	3ff00000 	.word	0x3ff00000

080158e0 <__d2b>:
 80158e0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80158e4:	460f      	mov	r7, r1
 80158e6:	2101      	movs	r1, #1
 80158e8:	ec59 8b10 	vmov	r8, r9, d0
 80158ec:	4616      	mov	r6, r2
 80158ee:	f7ff fc1b 	bl	8015128 <_Balloc>
 80158f2:	4604      	mov	r4, r0
 80158f4:	b930      	cbnz	r0, 8015904 <__d2b+0x24>
 80158f6:	4602      	mov	r2, r0
 80158f8:	4b24      	ldr	r3, [pc, #144]	; (801598c <__d2b+0xac>)
 80158fa:	4825      	ldr	r0, [pc, #148]	; (8015990 <__d2b+0xb0>)
 80158fc:	f240 310f 	movw	r1, #783	; 0x30f
 8015900:	f000 fc7c 	bl	80161fc <__assert_func>
 8015904:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8015908:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801590c:	bb2d      	cbnz	r5, 801595a <__d2b+0x7a>
 801590e:	9301      	str	r3, [sp, #4]
 8015910:	f1b8 0300 	subs.w	r3, r8, #0
 8015914:	d026      	beq.n	8015964 <__d2b+0x84>
 8015916:	4668      	mov	r0, sp
 8015918:	9300      	str	r3, [sp, #0]
 801591a:	f7ff fd17 	bl	801534c <__lo0bits>
 801591e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8015922:	b1e8      	cbz	r0, 8015960 <__d2b+0x80>
 8015924:	f1c0 0320 	rsb	r3, r0, #32
 8015928:	fa02 f303 	lsl.w	r3, r2, r3
 801592c:	430b      	orrs	r3, r1
 801592e:	40c2      	lsrs	r2, r0
 8015930:	6163      	str	r3, [r4, #20]
 8015932:	9201      	str	r2, [sp, #4]
 8015934:	9b01      	ldr	r3, [sp, #4]
 8015936:	61a3      	str	r3, [r4, #24]
 8015938:	2b00      	cmp	r3, #0
 801593a:	bf14      	ite	ne
 801593c:	2202      	movne	r2, #2
 801593e:	2201      	moveq	r2, #1
 8015940:	6122      	str	r2, [r4, #16]
 8015942:	b1bd      	cbz	r5, 8015974 <__d2b+0x94>
 8015944:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8015948:	4405      	add	r5, r0
 801594a:	603d      	str	r5, [r7, #0]
 801594c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8015950:	6030      	str	r0, [r6, #0]
 8015952:	4620      	mov	r0, r4
 8015954:	b003      	add	sp, #12
 8015956:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801595a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801595e:	e7d6      	b.n	801590e <__d2b+0x2e>
 8015960:	6161      	str	r1, [r4, #20]
 8015962:	e7e7      	b.n	8015934 <__d2b+0x54>
 8015964:	a801      	add	r0, sp, #4
 8015966:	f7ff fcf1 	bl	801534c <__lo0bits>
 801596a:	9b01      	ldr	r3, [sp, #4]
 801596c:	6163      	str	r3, [r4, #20]
 801596e:	3020      	adds	r0, #32
 8015970:	2201      	movs	r2, #1
 8015972:	e7e5      	b.n	8015940 <__d2b+0x60>
 8015974:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8015978:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801597c:	6038      	str	r0, [r7, #0]
 801597e:	6918      	ldr	r0, [r3, #16]
 8015980:	f7ff fcc4 	bl	801530c <__hi0bits>
 8015984:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8015988:	e7e2      	b.n	8015950 <__d2b+0x70>
 801598a:	bf00      	nop
 801598c:	08023559 	.word	0x08023559
 8015990:	080235e1 	.word	0x080235e1

08015994 <__ratio>:
 8015994:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015998:	4688      	mov	r8, r1
 801599a:	4669      	mov	r1, sp
 801599c:	4681      	mov	r9, r0
 801599e:	f7ff ff55 	bl	801584c <__b2d>
 80159a2:	a901      	add	r1, sp, #4
 80159a4:	4640      	mov	r0, r8
 80159a6:	ec55 4b10 	vmov	r4, r5, d0
 80159aa:	f7ff ff4f 	bl	801584c <__b2d>
 80159ae:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80159b2:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80159b6:	eba3 0c02 	sub.w	ip, r3, r2
 80159ba:	e9dd 3200 	ldrd	r3, r2, [sp]
 80159be:	1a9b      	subs	r3, r3, r2
 80159c0:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80159c4:	ec51 0b10 	vmov	r0, r1, d0
 80159c8:	2b00      	cmp	r3, #0
 80159ca:	bfd6      	itet	le
 80159cc:	460a      	movle	r2, r1
 80159ce:	462a      	movgt	r2, r5
 80159d0:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80159d4:	468b      	mov	fp, r1
 80159d6:	462f      	mov	r7, r5
 80159d8:	bfd4      	ite	le
 80159da:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80159de:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80159e2:	4620      	mov	r0, r4
 80159e4:	ee10 2a10 	vmov	r2, s0
 80159e8:	465b      	mov	r3, fp
 80159ea:	4639      	mov	r1, r7
 80159ec:	f7ea ff3e 	bl	800086c <__aeabi_ddiv>
 80159f0:	ec41 0b10 	vmov	d0, r0, r1
 80159f4:	b003      	add	sp, #12
 80159f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080159fa <__copybits>:
 80159fa:	3901      	subs	r1, #1
 80159fc:	b570      	push	{r4, r5, r6, lr}
 80159fe:	1149      	asrs	r1, r1, #5
 8015a00:	6914      	ldr	r4, [r2, #16]
 8015a02:	3101      	adds	r1, #1
 8015a04:	f102 0314 	add.w	r3, r2, #20
 8015a08:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8015a0c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8015a10:	1f05      	subs	r5, r0, #4
 8015a12:	42a3      	cmp	r3, r4
 8015a14:	d30c      	bcc.n	8015a30 <__copybits+0x36>
 8015a16:	1aa3      	subs	r3, r4, r2
 8015a18:	3b11      	subs	r3, #17
 8015a1a:	f023 0303 	bic.w	r3, r3, #3
 8015a1e:	3211      	adds	r2, #17
 8015a20:	42a2      	cmp	r2, r4
 8015a22:	bf88      	it	hi
 8015a24:	2300      	movhi	r3, #0
 8015a26:	4418      	add	r0, r3
 8015a28:	2300      	movs	r3, #0
 8015a2a:	4288      	cmp	r0, r1
 8015a2c:	d305      	bcc.n	8015a3a <__copybits+0x40>
 8015a2e:	bd70      	pop	{r4, r5, r6, pc}
 8015a30:	f853 6b04 	ldr.w	r6, [r3], #4
 8015a34:	f845 6f04 	str.w	r6, [r5, #4]!
 8015a38:	e7eb      	b.n	8015a12 <__copybits+0x18>
 8015a3a:	f840 3b04 	str.w	r3, [r0], #4
 8015a3e:	e7f4      	b.n	8015a2a <__copybits+0x30>

08015a40 <__any_on>:
 8015a40:	f100 0214 	add.w	r2, r0, #20
 8015a44:	6900      	ldr	r0, [r0, #16]
 8015a46:	114b      	asrs	r3, r1, #5
 8015a48:	4298      	cmp	r0, r3
 8015a4a:	b510      	push	{r4, lr}
 8015a4c:	db11      	blt.n	8015a72 <__any_on+0x32>
 8015a4e:	dd0a      	ble.n	8015a66 <__any_on+0x26>
 8015a50:	f011 011f 	ands.w	r1, r1, #31
 8015a54:	d007      	beq.n	8015a66 <__any_on+0x26>
 8015a56:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8015a5a:	fa24 f001 	lsr.w	r0, r4, r1
 8015a5e:	fa00 f101 	lsl.w	r1, r0, r1
 8015a62:	428c      	cmp	r4, r1
 8015a64:	d10b      	bne.n	8015a7e <__any_on+0x3e>
 8015a66:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8015a6a:	4293      	cmp	r3, r2
 8015a6c:	d803      	bhi.n	8015a76 <__any_on+0x36>
 8015a6e:	2000      	movs	r0, #0
 8015a70:	bd10      	pop	{r4, pc}
 8015a72:	4603      	mov	r3, r0
 8015a74:	e7f7      	b.n	8015a66 <__any_on+0x26>
 8015a76:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8015a7a:	2900      	cmp	r1, #0
 8015a7c:	d0f5      	beq.n	8015a6a <__any_on+0x2a>
 8015a7e:	2001      	movs	r0, #1
 8015a80:	e7f6      	b.n	8015a70 <__any_on+0x30>

08015a82 <__ascii_wctomb>:
 8015a82:	b149      	cbz	r1, 8015a98 <__ascii_wctomb+0x16>
 8015a84:	2aff      	cmp	r2, #255	; 0xff
 8015a86:	bf85      	ittet	hi
 8015a88:	238a      	movhi	r3, #138	; 0x8a
 8015a8a:	6003      	strhi	r3, [r0, #0]
 8015a8c:	700a      	strbls	r2, [r1, #0]
 8015a8e:	f04f 30ff 	movhi.w	r0, #4294967295
 8015a92:	bf98      	it	ls
 8015a94:	2001      	movls	r0, #1
 8015a96:	4770      	bx	lr
 8015a98:	4608      	mov	r0, r1
 8015a9a:	4770      	bx	lr

08015a9c <__ssputs_r>:
 8015a9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015aa0:	688e      	ldr	r6, [r1, #8]
 8015aa2:	461f      	mov	r7, r3
 8015aa4:	42be      	cmp	r6, r7
 8015aa6:	680b      	ldr	r3, [r1, #0]
 8015aa8:	4682      	mov	sl, r0
 8015aaa:	460c      	mov	r4, r1
 8015aac:	4690      	mov	r8, r2
 8015aae:	d82c      	bhi.n	8015b0a <__ssputs_r+0x6e>
 8015ab0:	898a      	ldrh	r2, [r1, #12]
 8015ab2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8015ab6:	d026      	beq.n	8015b06 <__ssputs_r+0x6a>
 8015ab8:	6965      	ldr	r5, [r4, #20]
 8015aba:	6909      	ldr	r1, [r1, #16]
 8015abc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8015ac0:	eba3 0901 	sub.w	r9, r3, r1
 8015ac4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8015ac8:	1c7b      	adds	r3, r7, #1
 8015aca:	444b      	add	r3, r9
 8015acc:	106d      	asrs	r5, r5, #1
 8015ace:	429d      	cmp	r5, r3
 8015ad0:	bf38      	it	cc
 8015ad2:	461d      	movcc	r5, r3
 8015ad4:	0553      	lsls	r3, r2, #21
 8015ad6:	d527      	bpl.n	8015b28 <__ssputs_r+0x8c>
 8015ad8:	4629      	mov	r1, r5
 8015ada:	f7fd fdc9 	bl	8013670 <_malloc_r>
 8015ade:	4606      	mov	r6, r0
 8015ae0:	b360      	cbz	r0, 8015b3c <__ssputs_r+0xa0>
 8015ae2:	6921      	ldr	r1, [r4, #16]
 8015ae4:	464a      	mov	r2, r9
 8015ae6:	f7fe ff4c 	bl	8014982 <memcpy>
 8015aea:	89a3      	ldrh	r3, [r4, #12]
 8015aec:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8015af0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015af4:	81a3      	strh	r3, [r4, #12]
 8015af6:	6126      	str	r6, [r4, #16]
 8015af8:	6165      	str	r5, [r4, #20]
 8015afa:	444e      	add	r6, r9
 8015afc:	eba5 0509 	sub.w	r5, r5, r9
 8015b00:	6026      	str	r6, [r4, #0]
 8015b02:	60a5      	str	r5, [r4, #8]
 8015b04:	463e      	mov	r6, r7
 8015b06:	42be      	cmp	r6, r7
 8015b08:	d900      	bls.n	8015b0c <__ssputs_r+0x70>
 8015b0a:	463e      	mov	r6, r7
 8015b0c:	6820      	ldr	r0, [r4, #0]
 8015b0e:	4632      	mov	r2, r6
 8015b10:	4641      	mov	r1, r8
 8015b12:	f000 fb59 	bl	80161c8 <memmove>
 8015b16:	68a3      	ldr	r3, [r4, #8]
 8015b18:	1b9b      	subs	r3, r3, r6
 8015b1a:	60a3      	str	r3, [r4, #8]
 8015b1c:	6823      	ldr	r3, [r4, #0]
 8015b1e:	4433      	add	r3, r6
 8015b20:	6023      	str	r3, [r4, #0]
 8015b22:	2000      	movs	r0, #0
 8015b24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015b28:	462a      	mov	r2, r5
 8015b2a:	f000 fb9b 	bl	8016264 <_realloc_r>
 8015b2e:	4606      	mov	r6, r0
 8015b30:	2800      	cmp	r0, #0
 8015b32:	d1e0      	bne.n	8015af6 <__ssputs_r+0x5a>
 8015b34:	6921      	ldr	r1, [r4, #16]
 8015b36:	4650      	mov	r0, sl
 8015b38:	f7fe ff40 	bl	80149bc <_free_r>
 8015b3c:	230c      	movs	r3, #12
 8015b3e:	f8ca 3000 	str.w	r3, [sl]
 8015b42:	89a3      	ldrh	r3, [r4, #12]
 8015b44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015b48:	81a3      	strh	r3, [r4, #12]
 8015b4a:	f04f 30ff 	mov.w	r0, #4294967295
 8015b4e:	e7e9      	b.n	8015b24 <__ssputs_r+0x88>

08015b50 <_svfiprintf_r>:
 8015b50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015b54:	4698      	mov	r8, r3
 8015b56:	898b      	ldrh	r3, [r1, #12]
 8015b58:	061b      	lsls	r3, r3, #24
 8015b5a:	b09d      	sub	sp, #116	; 0x74
 8015b5c:	4607      	mov	r7, r0
 8015b5e:	460d      	mov	r5, r1
 8015b60:	4614      	mov	r4, r2
 8015b62:	d50e      	bpl.n	8015b82 <_svfiprintf_r+0x32>
 8015b64:	690b      	ldr	r3, [r1, #16]
 8015b66:	b963      	cbnz	r3, 8015b82 <_svfiprintf_r+0x32>
 8015b68:	2140      	movs	r1, #64	; 0x40
 8015b6a:	f7fd fd81 	bl	8013670 <_malloc_r>
 8015b6e:	6028      	str	r0, [r5, #0]
 8015b70:	6128      	str	r0, [r5, #16]
 8015b72:	b920      	cbnz	r0, 8015b7e <_svfiprintf_r+0x2e>
 8015b74:	230c      	movs	r3, #12
 8015b76:	603b      	str	r3, [r7, #0]
 8015b78:	f04f 30ff 	mov.w	r0, #4294967295
 8015b7c:	e0d0      	b.n	8015d20 <_svfiprintf_r+0x1d0>
 8015b7e:	2340      	movs	r3, #64	; 0x40
 8015b80:	616b      	str	r3, [r5, #20]
 8015b82:	2300      	movs	r3, #0
 8015b84:	9309      	str	r3, [sp, #36]	; 0x24
 8015b86:	2320      	movs	r3, #32
 8015b88:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8015b8c:	f8cd 800c 	str.w	r8, [sp, #12]
 8015b90:	2330      	movs	r3, #48	; 0x30
 8015b92:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8015d38 <_svfiprintf_r+0x1e8>
 8015b96:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8015b9a:	f04f 0901 	mov.w	r9, #1
 8015b9e:	4623      	mov	r3, r4
 8015ba0:	469a      	mov	sl, r3
 8015ba2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015ba6:	b10a      	cbz	r2, 8015bac <_svfiprintf_r+0x5c>
 8015ba8:	2a25      	cmp	r2, #37	; 0x25
 8015baa:	d1f9      	bne.n	8015ba0 <_svfiprintf_r+0x50>
 8015bac:	ebba 0b04 	subs.w	fp, sl, r4
 8015bb0:	d00b      	beq.n	8015bca <_svfiprintf_r+0x7a>
 8015bb2:	465b      	mov	r3, fp
 8015bb4:	4622      	mov	r2, r4
 8015bb6:	4629      	mov	r1, r5
 8015bb8:	4638      	mov	r0, r7
 8015bba:	f7ff ff6f 	bl	8015a9c <__ssputs_r>
 8015bbe:	3001      	adds	r0, #1
 8015bc0:	f000 80a9 	beq.w	8015d16 <_svfiprintf_r+0x1c6>
 8015bc4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015bc6:	445a      	add	r2, fp
 8015bc8:	9209      	str	r2, [sp, #36]	; 0x24
 8015bca:	f89a 3000 	ldrb.w	r3, [sl]
 8015bce:	2b00      	cmp	r3, #0
 8015bd0:	f000 80a1 	beq.w	8015d16 <_svfiprintf_r+0x1c6>
 8015bd4:	2300      	movs	r3, #0
 8015bd6:	f04f 32ff 	mov.w	r2, #4294967295
 8015bda:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015bde:	f10a 0a01 	add.w	sl, sl, #1
 8015be2:	9304      	str	r3, [sp, #16]
 8015be4:	9307      	str	r3, [sp, #28]
 8015be6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8015bea:	931a      	str	r3, [sp, #104]	; 0x68
 8015bec:	4654      	mov	r4, sl
 8015bee:	2205      	movs	r2, #5
 8015bf0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015bf4:	4850      	ldr	r0, [pc, #320]	; (8015d38 <_svfiprintf_r+0x1e8>)
 8015bf6:	f7ea fb03 	bl	8000200 <memchr>
 8015bfa:	9a04      	ldr	r2, [sp, #16]
 8015bfc:	b9d8      	cbnz	r0, 8015c36 <_svfiprintf_r+0xe6>
 8015bfe:	06d0      	lsls	r0, r2, #27
 8015c00:	bf44      	itt	mi
 8015c02:	2320      	movmi	r3, #32
 8015c04:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015c08:	0711      	lsls	r1, r2, #28
 8015c0a:	bf44      	itt	mi
 8015c0c:	232b      	movmi	r3, #43	; 0x2b
 8015c0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015c12:	f89a 3000 	ldrb.w	r3, [sl]
 8015c16:	2b2a      	cmp	r3, #42	; 0x2a
 8015c18:	d015      	beq.n	8015c46 <_svfiprintf_r+0xf6>
 8015c1a:	9a07      	ldr	r2, [sp, #28]
 8015c1c:	4654      	mov	r4, sl
 8015c1e:	2000      	movs	r0, #0
 8015c20:	f04f 0c0a 	mov.w	ip, #10
 8015c24:	4621      	mov	r1, r4
 8015c26:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015c2a:	3b30      	subs	r3, #48	; 0x30
 8015c2c:	2b09      	cmp	r3, #9
 8015c2e:	d94d      	bls.n	8015ccc <_svfiprintf_r+0x17c>
 8015c30:	b1b0      	cbz	r0, 8015c60 <_svfiprintf_r+0x110>
 8015c32:	9207      	str	r2, [sp, #28]
 8015c34:	e014      	b.n	8015c60 <_svfiprintf_r+0x110>
 8015c36:	eba0 0308 	sub.w	r3, r0, r8
 8015c3a:	fa09 f303 	lsl.w	r3, r9, r3
 8015c3e:	4313      	orrs	r3, r2
 8015c40:	9304      	str	r3, [sp, #16]
 8015c42:	46a2      	mov	sl, r4
 8015c44:	e7d2      	b.n	8015bec <_svfiprintf_r+0x9c>
 8015c46:	9b03      	ldr	r3, [sp, #12]
 8015c48:	1d19      	adds	r1, r3, #4
 8015c4a:	681b      	ldr	r3, [r3, #0]
 8015c4c:	9103      	str	r1, [sp, #12]
 8015c4e:	2b00      	cmp	r3, #0
 8015c50:	bfbb      	ittet	lt
 8015c52:	425b      	neglt	r3, r3
 8015c54:	f042 0202 	orrlt.w	r2, r2, #2
 8015c58:	9307      	strge	r3, [sp, #28]
 8015c5a:	9307      	strlt	r3, [sp, #28]
 8015c5c:	bfb8      	it	lt
 8015c5e:	9204      	strlt	r2, [sp, #16]
 8015c60:	7823      	ldrb	r3, [r4, #0]
 8015c62:	2b2e      	cmp	r3, #46	; 0x2e
 8015c64:	d10c      	bne.n	8015c80 <_svfiprintf_r+0x130>
 8015c66:	7863      	ldrb	r3, [r4, #1]
 8015c68:	2b2a      	cmp	r3, #42	; 0x2a
 8015c6a:	d134      	bne.n	8015cd6 <_svfiprintf_r+0x186>
 8015c6c:	9b03      	ldr	r3, [sp, #12]
 8015c6e:	1d1a      	adds	r2, r3, #4
 8015c70:	681b      	ldr	r3, [r3, #0]
 8015c72:	9203      	str	r2, [sp, #12]
 8015c74:	2b00      	cmp	r3, #0
 8015c76:	bfb8      	it	lt
 8015c78:	f04f 33ff 	movlt.w	r3, #4294967295
 8015c7c:	3402      	adds	r4, #2
 8015c7e:	9305      	str	r3, [sp, #20]
 8015c80:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8015d48 <_svfiprintf_r+0x1f8>
 8015c84:	7821      	ldrb	r1, [r4, #0]
 8015c86:	2203      	movs	r2, #3
 8015c88:	4650      	mov	r0, sl
 8015c8a:	f7ea fab9 	bl	8000200 <memchr>
 8015c8e:	b138      	cbz	r0, 8015ca0 <_svfiprintf_r+0x150>
 8015c90:	9b04      	ldr	r3, [sp, #16]
 8015c92:	eba0 000a 	sub.w	r0, r0, sl
 8015c96:	2240      	movs	r2, #64	; 0x40
 8015c98:	4082      	lsls	r2, r0
 8015c9a:	4313      	orrs	r3, r2
 8015c9c:	3401      	adds	r4, #1
 8015c9e:	9304      	str	r3, [sp, #16]
 8015ca0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015ca4:	4825      	ldr	r0, [pc, #148]	; (8015d3c <_svfiprintf_r+0x1ec>)
 8015ca6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8015caa:	2206      	movs	r2, #6
 8015cac:	f7ea faa8 	bl	8000200 <memchr>
 8015cb0:	2800      	cmp	r0, #0
 8015cb2:	d038      	beq.n	8015d26 <_svfiprintf_r+0x1d6>
 8015cb4:	4b22      	ldr	r3, [pc, #136]	; (8015d40 <_svfiprintf_r+0x1f0>)
 8015cb6:	bb1b      	cbnz	r3, 8015d00 <_svfiprintf_r+0x1b0>
 8015cb8:	9b03      	ldr	r3, [sp, #12]
 8015cba:	3307      	adds	r3, #7
 8015cbc:	f023 0307 	bic.w	r3, r3, #7
 8015cc0:	3308      	adds	r3, #8
 8015cc2:	9303      	str	r3, [sp, #12]
 8015cc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015cc6:	4433      	add	r3, r6
 8015cc8:	9309      	str	r3, [sp, #36]	; 0x24
 8015cca:	e768      	b.n	8015b9e <_svfiprintf_r+0x4e>
 8015ccc:	fb0c 3202 	mla	r2, ip, r2, r3
 8015cd0:	460c      	mov	r4, r1
 8015cd2:	2001      	movs	r0, #1
 8015cd4:	e7a6      	b.n	8015c24 <_svfiprintf_r+0xd4>
 8015cd6:	2300      	movs	r3, #0
 8015cd8:	3401      	adds	r4, #1
 8015cda:	9305      	str	r3, [sp, #20]
 8015cdc:	4619      	mov	r1, r3
 8015cde:	f04f 0c0a 	mov.w	ip, #10
 8015ce2:	4620      	mov	r0, r4
 8015ce4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015ce8:	3a30      	subs	r2, #48	; 0x30
 8015cea:	2a09      	cmp	r2, #9
 8015cec:	d903      	bls.n	8015cf6 <_svfiprintf_r+0x1a6>
 8015cee:	2b00      	cmp	r3, #0
 8015cf0:	d0c6      	beq.n	8015c80 <_svfiprintf_r+0x130>
 8015cf2:	9105      	str	r1, [sp, #20]
 8015cf4:	e7c4      	b.n	8015c80 <_svfiprintf_r+0x130>
 8015cf6:	fb0c 2101 	mla	r1, ip, r1, r2
 8015cfa:	4604      	mov	r4, r0
 8015cfc:	2301      	movs	r3, #1
 8015cfe:	e7f0      	b.n	8015ce2 <_svfiprintf_r+0x192>
 8015d00:	ab03      	add	r3, sp, #12
 8015d02:	9300      	str	r3, [sp, #0]
 8015d04:	462a      	mov	r2, r5
 8015d06:	4b0f      	ldr	r3, [pc, #60]	; (8015d44 <_svfiprintf_r+0x1f4>)
 8015d08:	a904      	add	r1, sp, #16
 8015d0a:	4638      	mov	r0, r7
 8015d0c:	f3af 8000 	nop.w
 8015d10:	1c42      	adds	r2, r0, #1
 8015d12:	4606      	mov	r6, r0
 8015d14:	d1d6      	bne.n	8015cc4 <_svfiprintf_r+0x174>
 8015d16:	89ab      	ldrh	r3, [r5, #12]
 8015d18:	065b      	lsls	r3, r3, #25
 8015d1a:	f53f af2d 	bmi.w	8015b78 <_svfiprintf_r+0x28>
 8015d1e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015d20:	b01d      	add	sp, #116	; 0x74
 8015d22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015d26:	ab03      	add	r3, sp, #12
 8015d28:	9300      	str	r3, [sp, #0]
 8015d2a:	462a      	mov	r2, r5
 8015d2c:	4b05      	ldr	r3, [pc, #20]	; (8015d44 <_svfiprintf_r+0x1f4>)
 8015d2e:	a904      	add	r1, sp, #16
 8015d30:	4638      	mov	r0, r7
 8015d32:	f000 f879 	bl	8015e28 <_printf_i>
 8015d36:	e7eb      	b.n	8015d10 <_svfiprintf_r+0x1c0>
 8015d38:	0802373c 	.word	0x0802373c
 8015d3c:	08023746 	.word	0x08023746
 8015d40:	00000000 	.word	0x00000000
 8015d44:	08015a9d 	.word	0x08015a9d
 8015d48:	08023742 	.word	0x08023742

08015d4c <_printf_common>:
 8015d4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015d50:	4616      	mov	r6, r2
 8015d52:	4699      	mov	r9, r3
 8015d54:	688a      	ldr	r2, [r1, #8]
 8015d56:	690b      	ldr	r3, [r1, #16]
 8015d58:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8015d5c:	4293      	cmp	r3, r2
 8015d5e:	bfb8      	it	lt
 8015d60:	4613      	movlt	r3, r2
 8015d62:	6033      	str	r3, [r6, #0]
 8015d64:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8015d68:	4607      	mov	r7, r0
 8015d6a:	460c      	mov	r4, r1
 8015d6c:	b10a      	cbz	r2, 8015d72 <_printf_common+0x26>
 8015d6e:	3301      	adds	r3, #1
 8015d70:	6033      	str	r3, [r6, #0]
 8015d72:	6823      	ldr	r3, [r4, #0]
 8015d74:	0699      	lsls	r1, r3, #26
 8015d76:	bf42      	ittt	mi
 8015d78:	6833      	ldrmi	r3, [r6, #0]
 8015d7a:	3302      	addmi	r3, #2
 8015d7c:	6033      	strmi	r3, [r6, #0]
 8015d7e:	6825      	ldr	r5, [r4, #0]
 8015d80:	f015 0506 	ands.w	r5, r5, #6
 8015d84:	d106      	bne.n	8015d94 <_printf_common+0x48>
 8015d86:	f104 0a19 	add.w	sl, r4, #25
 8015d8a:	68e3      	ldr	r3, [r4, #12]
 8015d8c:	6832      	ldr	r2, [r6, #0]
 8015d8e:	1a9b      	subs	r3, r3, r2
 8015d90:	42ab      	cmp	r3, r5
 8015d92:	dc26      	bgt.n	8015de2 <_printf_common+0x96>
 8015d94:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8015d98:	1e13      	subs	r3, r2, #0
 8015d9a:	6822      	ldr	r2, [r4, #0]
 8015d9c:	bf18      	it	ne
 8015d9e:	2301      	movne	r3, #1
 8015da0:	0692      	lsls	r2, r2, #26
 8015da2:	d42b      	bmi.n	8015dfc <_printf_common+0xb0>
 8015da4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8015da8:	4649      	mov	r1, r9
 8015daa:	4638      	mov	r0, r7
 8015dac:	47c0      	blx	r8
 8015dae:	3001      	adds	r0, #1
 8015db0:	d01e      	beq.n	8015df0 <_printf_common+0xa4>
 8015db2:	6823      	ldr	r3, [r4, #0]
 8015db4:	6922      	ldr	r2, [r4, #16]
 8015db6:	f003 0306 	and.w	r3, r3, #6
 8015dba:	2b04      	cmp	r3, #4
 8015dbc:	bf02      	ittt	eq
 8015dbe:	68e5      	ldreq	r5, [r4, #12]
 8015dc0:	6833      	ldreq	r3, [r6, #0]
 8015dc2:	1aed      	subeq	r5, r5, r3
 8015dc4:	68a3      	ldr	r3, [r4, #8]
 8015dc6:	bf0c      	ite	eq
 8015dc8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8015dcc:	2500      	movne	r5, #0
 8015dce:	4293      	cmp	r3, r2
 8015dd0:	bfc4      	itt	gt
 8015dd2:	1a9b      	subgt	r3, r3, r2
 8015dd4:	18ed      	addgt	r5, r5, r3
 8015dd6:	2600      	movs	r6, #0
 8015dd8:	341a      	adds	r4, #26
 8015dda:	42b5      	cmp	r5, r6
 8015ddc:	d11a      	bne.n	8015e14 <_printf_common+0xc8>
 8015dde:	2000      	movs	r0, #0
 8015de0:	e008      	b.n	8015df4 <_printf_common+0xa8>
 8015de2:	2301      	movs	r3, #1
 8015de4:	4652      	mov	r2, sl
 8015de6:	4649      	mov	r1, r9
 8015de8:	4638      	mov	r0, r7
 8015dea:	47c0      	blx	r8
 8015dec:	3001      	adds	r0, #1
 8015dee:	d103      	bne.n	8015df8 <_printf_common+0xac>
 8015df0:	f04f 30ff 	mov.w	r0, #4294967295
 8015df4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015df8:	3501      	adds	r5, #1
 8015dfa:	e7c6      	b.n	8015d8a <_printf_common+0x3e>
 8015dfc:	18e1      	adds	r1, r4, r3
 8015dfe:	1c5a      	adds	r2, r3, #1
 8015e00:	2030      	movs	r0, #48	; 0x30
 8015e02:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8015e06:	4422      	add	r2, r4
 8015e08:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8015e0c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8015e10:	3302      	adds	r3, #2
 8015e12:	e7c7      	b.n	8015da4 <_printf_common+0x58>
 8015e14:	2301      	movs	r3, #1
 8015e16:	4622      	mov	r2, r4
 8015e18:	4649      	mov	r1, r9
 8015e1a:	4638      	mov	r0, r7
 8015e1c:	47c0      	blx	r8
 8015e1e:	3001      	adds	r0, #1
 8015e20:	d0e6      	beq.n	8015df0 <_printf_common+0xa4>
 8015e22:	3601      	adds	r6, #1
 8015e24:	e7d9      	b.n	8015dda <_printf_common+0x8e>
	...

08015e28 <_printf_i>:
 8015e28:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8015e2c:	7e0f      	ldrb	r7, [r1, #24]
 8015e2e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8015e30:	2f78      	cmp	r7, #120	; 0x78
 8015e32:	4691      	mov	r9, r2
 8015e34:	4680      	mov	r8, r0
 8015e36:	460c      	mov	r4, r1
 8015e38:	469a      	mov	sl, r3
 8015e3a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8015e3e:	d807      	bhi.n	8015e50 <_printf_i+0x28>
 8015e40:	2f62      	cmp	r7, #98	; 0x62
 8015e42:	d80a      	bhi.n	8015e5a <_printf_i+0x32>
 8015e44:	2f00      	cmp	r7, #0
 8015e46:	f000 80d4 	beq.w	8015ff2 <_printf_i+0x1ca>
 8015e4a:	2f58      	cmp	r7, #88	; 0x58
 8015e4c:	f000 80c0 	beq.w	8015fd0 <_printf_i+0x1a8>
 8015e50:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015e54:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8015e58:	e03a      	b.n	8015ed0 <_printf_i+0xa8>
 8015e5a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8015e5e:	2b15      	cmp	r3, #21
 8015e60:	d8f6      	bhi.n	8015e50 <_printf_i+0x28>
 8015e62:	a101      	add	r1, pc, #4	; (adr r1, 8015e68 <_printf_i+0x40>)
 8015e64:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8015e68:	08015ec1 	.word	0x08015ec1
 8015e6c:	08015ed5 	.word	0x08015ed5
 8015e70:	08015e51 	.word	0x08015e51
 8015e74:	08015e51 	.word	0x08015e51
 8015e78:	08015e51 	.word	0x08015e51
 8015e7c:	08015e51 	.word	0x08015e51
 8015e80:	08015ed5 	.word	0x08015ed5
 8015e84:	08015e51 	.word	0x08015e51
 8015e88:	08015e51 	.word	0x08015e51
 8015e8c:	08015e51 	.word	0x08015e51
 8015e90:	08015e51 	.word	0x08015e51
 8015e94:	08015fd9 	.word	0x08015fd9
 8015e98:	08015f01 	.word	0x08015f01
 8015e9c:	08015f93 	.word	0x08015f93
 8015ea0:	08015e51 	.word	0x08015e51
 8015ea4:	08015e51 	.word	0x08015e51
 8015ea8:	08015ffb 	.word	0x08015ffb
 8015eac:	08015e51 	.word	0x08015e51
 8015eb0:	08015f01 	.word	0x08015f01
 8015eb4:	08015e51 	.word	0x08015e51
 8015eb8:	08015e51 	.word	0x08015e51
 8015ebc:	08015f9b 	.word	0x08015f9b
 8015ec0:	682b      	ldr	r3, [r5, #0]
 8015ec2:	1d1a      	adds	r2, r3, #4
 8015ec4:	681b      	ldr	r3, [r3, #0]
 8015ec6:	602a      	str	r2, [r5, #0]
 8015ec8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015ecc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8015ed0:	2301      	movs	r3, #1
 8015ed2:	e09f      	b.n	8016014 <_printf_i+0x1ec>
 8015ed4:	6820      	ldr	r0, [r4, #0]
 8015ed6:	682b      	ldr	r3, [r5, #0]
 8015ed8:	0607      	lsls	r7, r0, #24
 8015eda:	f103 0104 	add.w	r1, r3, #4
 8015ede:	6029      	str	r1, [r5, #0]
 8015ee0:	d501      	bpl.n	8015ee6 <_printf_i+0xbe>
 8015ee2:	681e      	ldr	r6, [r3, #0]
 8015ee4:	e003      	b.n	8015eee <_printf_i+0xc6>
 8015ee6:	0646      	lsls	r6, r0, #25
 8015ee8:	d5fb      	bpl.n	8015ee2 <_printf_i+0xba>
 8015eea:	f9b3 6000 	ldrsh.w	r6, [r3]
 8015eee:	2e00      	cmp	r6, #0
 8015ef0:	da03      	bge.n	8015efa <_printf_i+0xd2>
 8015ef2:	232d      	movs	r3, #45	; 0x2d
 8015ef4:	4276      	negs	r6, r6
 8015ef6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015efa:	485a      	ldr	r0, [pc, #360]	; (8016064 <_printf_i+0x23c>)
 8015efc:	230a      	movs	r3, #10
 8015efe:	e012      	b.n	8015f26 <_printf_i+0xfe>
 8015f00:	682b      	ldr	r3, [r5, #0]
 8015f02:	6820      	ldr	r0, [r4, #0]
 8015f04:	1d19      	adds	r1, r3, #4
 8015f06:	6029      	str	r1, [r5, #0]
 8015f08:	0605      	lsls	r5, r0, #24
 8015f0a:	d501      	bpl.n	8015f10 <_printf_i+0xe8>
 8015f0c:	681e      	ldr	r6, [r3, #0]
 8015f0e:	e002      	b.n	8015f16 <_printf_i+0xee>
 8015f10:	0641      	lsls	r1, r0, #25
 8015f12:	d5fb      	bpl.n	8015f0c <_printf_i+0xe4>
 8015f14:	881e      	ldrh	r6, [r3, #0]
 8015f16:	4853      	ldr	r0, [pc, #332]	; (8016064 <_printf_i+0x23c>)
 8015f18:	2f6f      	cmp	r7, #111	; 0x6f
 8015f1a:	bf0c      	ite	eq
 8015f1c:	2308      	moveq	r3, #8
 8015f1e:	230a      	movne	r3, #10
 8015f20:	2100      	movs	r1, #0
 8015f22:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8015f26:	6865      	ldr	r5, [r4, #4]
 8015f28:	60a5      	str	r5, [r4, #8]
 8015f2a:	2d00      	cmp	r5, #0
 8015f2c:	bfa2      	ittt	ge
 8015f2e:	6821      	ldrge	r1, [r4, #0]
 8015f30:	f021 0104 	bicge.w	r1, r1, #4
 8015f34:	6021      	strge	r1, [r4, #0]
 8015f36:	b90e      	cbnz	r6, 8015f3c <_printf_i+0x114>
 8015f38:	2d00      	cmp	r5, #0
 8015f3a:	d04b      	beq.n	8015fd4 <_printf_i+0x1ac>
 8015f3c:	4615      	mov	r5, r2
 8015f3e:	fbb6 f1f3 	udiv	r1, r6, r3
 8015f42:	fb03 6711 	mls	r7, r3, r1, r6
 8015f46:	5dc7      	ldrb	r7, [r0, r7]
 8015f48:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8015f4c:	4637      	mov	r7, r6
 8015f4e:	42bb      	cmp	r3, r7
 8015f50:	460e      	mov	r6, r1
 8015f52:	d9f4      	bls.n	8015f3e <_printf_i+0x116>
 8015f54:	2b08      	cmp	r3, #8
 8015f56:	d10b      	bne.n	8015f70 <_printf_i+0x148>
 8015f58:	6823      	ldr	r3, [r4, #0]
 8015f5a:	07de      	lsls	r6, r3, #31
 8015f5c:	d508      	bpl.n	8015f70 <_printf_i+0x148>
 8015f5e:	6923      	ldr	r3, [r4, #16]
 8015f60:	6861      	ldr	r1, [r4, #4]
 8015f62:	4299      	cmp	r1, r3
 8015f64:	bfde      	ittt	le
 8015f66:	2330      	movle	r3, #48	; 0x30
 8015f68:	f805 3c01 	strble.w	r3, [r5, #-1]
 8015f6c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8015f70:	1b52      	subs	r2, r2, r5
 8015f72:	6122      	str	r2, [r4, #16]
 8015f74:	f8cd a000 	str.w	sl, [sp]
 8015f78:	464b      	mov	r3, r9
 8015f7a:	aa03      	add	r2, sp, #12
 8015f7c:	4621      	mov	r1, r4
 8015f7e:	4640      	mov	r0, r8
 8015f80:	f7ff fee4 	bl	8015d4c <_printf_common>
 8015f84:	3001      	adds	r0, #1
 8015f86:	d14a      	bne.n	801601e <_printf_i+0x1f6>
 8015f88:	f04f 30ff 	mov.w	r0, #4294967295
 8015f8c:	b004      	add	sp, #16
 8015f8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015f92:	6823      	ldr	r3, [r4, #0]
 8015f94:	f043 0320 	orr.w	r3, r3, #32
 8015f98:	6023      	str	r3, [r4, #0]
 8015f9a:	4833      	ldr	r0, [pc, #204]	; (8016068 <_printf_i+0x240>)
 8015f9c:	2778      	movs	r7, #120	; 0x78
 8015f9e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8015fa2:	6823      	ldr	r3, [r4, #0]
 8015fa4:	6829      	ldr	r1, [r5, #0]
 8015fa6:	061f      	lsls	r7, r3, #24
 8015fa8:	f851 6b04 	ldr.w	r6, [r1], #4
 8015fac:	d402      	bmi.n	8015fb4 <_printf_i+0x18c>
 8015fae:	065f      	lsls	r7, r3, #25
 8015fb0:	bf48      	it	mi
 8015fb2:	b2b6      	uxthmi	r6, r6
 8015fb4:	07df      	lsls	r7, r3, #31
 8015fb6:	bf48      	it	mi
 8015fb8:	f043 0320 	orrmi.w	r3, r3, #32
 8015fbc:	6029      	str	r1, [r5, #0]
 8015fbe:	bf48      	it	mi
 8015fc0:	6023      	strmi	r3, [r4, #0]
 8015fc2:	b91e      	cbnz	r6, 8015fcc <_printf_i+0x1a4>
 8015fc4:	6823      	ldr	r3, [r4, #0]
 8015fc6:	f023 0320 	bic.w	r3, r3, #32
 8015fca:	6023      	str	r3, [r4, #0]
 8015fcc:	2310      	movs	r3, #16
 8015fce:	e7a7      	b.n	8015f20 <_printf_i+0xf8>
 8015fd0:	4824      	ldr	r0, [pc, #144]	; (8016064 <_printf_i+0x23c>)
 8015fd2:	e7e4      	b.n	8015f9e <_printf_i+0x176>
 8015fd4:	4615      	mov	r5, r2
 8015fd6:	e7bd      	b.n	8015f54 <_printf_i+0x12c>
 8015fd8:	682b      	ldr	r3, [r5, #0]
 8015fda:	6826      	ldr	r6, [r4, #0]
 8015fdc:	6961      	ldr	r1, [r4, #20]
 8015fde:	1d18      	adds	r0, r3, #4
 8015fe0:	6028      	str	r0, [r5, #0]
 8015fe2:	0635      	lsls	r5, r6, #24
 8015fe4:	681b      	ldr	r3, [r3, #0]
 8015fe6:	d501      	bpl.n	8015fec <_printf_i+0x1c4>
 8015fe8:	6019      	str	r1, [r3, #0]
 8015fea:	e002      	b.n	8015ff2 <_printf_i+0x1ca>
 8015fec:	0670      	lsls	r0, r6, #25
 8015fee:	d5fb      	bpl.n	8015fe8 <_printf_i+0x1c0>
 8015ff0:	8019      	strh	r1, [r3, #0]
 8015ff2:	2300      	movs	r3, #0
 8015ff4:	6123      	str	r3, [r4, #16]
 8015ff6:	4615      	mov	r5, r2
 8015ff8:	e7bc      	b.n	8015f74 <_printf_i+0x14c>
 8015ffa:	682b      	ldr	r3, [r5, #0]
 8015ffc:	1d1a      	adds	r2, r3, #4
 8015ffe:	602a      	str	r2, [r5, #0]
 8016000:	681d      	ldr	r5, [r3, #0]
 8016002:	6862      	ldr	r2, [r4, #4]
 8016004:	2100      	movs	r1, #0
 8016006:	4628      	mov	r0, r5
 8016008:	f7ea f8fa 	bl	8000200 <memchr>
 801600c:	b108      	cbz	r0, 8016012 <_printf_i+0x1ea>
 801600e:	1b40      	subs	r0, r0, r5
 8016010:	6060      	str	r0, [r4, #4]
 8016012:	6863      	ldr	r3, [r4, #4]
 8016014:	6123      	str	r3, [r4, #16]
 8016016:	2300      	movs	r3, #0
 8016018:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801601c:	e7aa      	b.n	8015f74 <_printf_i+0x14c>
 801601e:	6923      	ldr	r3, [r4, #16]
 8016020:	462a      	mov	r2, r5
 8016022:	4649      	mov	r1, r9
 8016024:	4640      	mov	r0, r8
 8016026:	47d0      	blx	sl
 8016028:	3001      	adds	r0, #1
 801602a:	d0ad      	beq.n	8015f88 <_printf_i+0x160>
 801602c:	6823      	ldr	r3, [r4, #0]
 801602e:	079b      	lsls	r3, r3, #30
 8016030:	d413      	bmi.n	801605a <_printf_i+0x232>
 8016032:	68e0      	ldr	r0, [r4, #12]
 8016034:	9b03      	ldr	r3, [sp, #12]
 8016036:	4298      	cmp	r0, r3
 8016038:	bfb8      	it	lt
 801603a:	4618      	movlt	r0, r3
 801603c:	e7a6      	b.n	8015f8c <_printf_i+0x164>
 801603e:	2301      	movs	r3, #1
 8016040:	4632      	mov	r2, r6
 8016042:	4649      	mov	r1, r9
 8016044:	4640      	mov	r0, r8
 8016046:	47d0      	blx	sl
 8016048:	3001      	adds	r0, #1
 801604a:	d09d      	beq.n	8015f88 <_printf_i+0x160>
 801604c:	3501      	adds	r5, #1
 801604e:	68e3      	ldr	r3, [r4, #12]
 8016050:	9903      	ldr	r1, [sp, #12]
 8016052:	1a5b      	subs	r3, r3, r1
 8016054:	42ab      	cmp	r3, r5
 8016056:	dcf2      	bgt.n	801603e <_printf_i+0x216>
 8016058:	e7eb      	b.n	8016032 <_printf_i+0x20a>
 801605a:	2500      	movs	r5, #0
 801605c:	f104 0619 	add.w	r6, r4, #25
 8016060:	e7f5      	b.n	801604e <_printf_i+0x226>
 8016062:	bf00      	nop
 8016064:	0802374d 	.word	0x0802374d
 8016068:	0802375e 	.word	0x0802375e

0801606c <__sflush_r>:
 801606c:	898a      	ldrh	r2, [r1, #12]
 801606e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016072:	4605      	mov	r5, r0
 8016074:	0710      	lsls	r0, r2, #28
 8016076:	460c      	mov	r4, r1
 8016078:	d458      	bmi.n	801612c <__sflush_r+0xc0>
 801607a:	684b      	ldr	r3, [r1, #4]
 801607c:	2b00      	cmp	r3, #0
 801607e:	dc05      	bgt.n	801608c <__sflush_r+0x20>
 8016080:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8016082:	2b00      	cmp	r3, #0
 8016084:	dc02      	bgt.n	801608c <__sflush_r+0x20>
 8016086:	2000      	movs	r0, #0
 8016088:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801608c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801608e:	2e00      	cmp	r6, #0
 8016090:	d0f9      	beq.n	8016086 <__sflush_r+0x1a>
 8016092:	2300      	movs	r3, #0
 8016094:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8016098:	682f      	ldr	r7, [r5, #0]
 801609a:	6a21      	ldr	r1, [r4, #32]
 801609c:	602b      	str	r3, [r5, #0]
 801609e:	d032      	beq.n	8016106 <__sflush_r+0x9a>
 80160a0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80160a2:	89a3      	ldrh	r3, [r4, #12]
 80160a4:	075a      	lsls	r2, r3, #29
 80160a6:	d505      	bpl.n	80160b4 <__sflush_r+0x48>
 80160a8:	6863      	ldr	r3, [r4, #4]
 80160aa:	1ac0      	subs	r0, r0, r3
 80160ac:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80160ae:	b10b      	cbz	r3, 80160b4 <__sflush_r+0x48>
 80160b0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80160b2:	1ac0      	subs	r0, r0, r3
 80160b4:	2300      	movs	r3, #0
 80160b6:	4602      	mov	r2, r0
 80160b8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80160ba:	6a21      	ldr	r1, [r4, #32]
 80160bc:	4628      	mov	r0, r5
 80160be:	47b0      	blx	r6
 80160c0:	1c43      	adds	r3, r0, #1
 80160c2:	89a3      	ldrh	r3, [r4, #12]
 80160c4:	d106      	bne.n	80160d4 <__sflush_r+0x68>
 80160c6:	6829      	ldr	r1, [r5, #0]
 80160c8:	291d      	cmp	r1, #29
 80160ca:	d82b      	bhi.n	8016124 <__sflush_r+0xb8>
 80160cc:	4a29      	ldr	r2, [pc, #164]	; (8016174 <__sflush_r+0x108>)
 80160ce:	410a      	asrs	r2, r1
 80160d0:	07d6      	lsls	r6, r2, #31
 80160d2:	d427      	bmi.n	8016124 <__sflush_r+0xb8>
 80160d4:	2200      	movs	r2, #0
 80160d6:	6062      	str	r2, [r4, #4]
 80160d8:	04d9      	lsls	r1, r3, #19
 80160da:	6922      	ldr	r2, [r4, #16]
 80160dc:	6022      	str	r2, [r4, #0]
 80160de:	d504      	bpl.n	80160ea <__sflush_r+0x7e>
 80160e0:	1c42      	adds	r2, r0, #1
 80160e2:	d101      	bne.n	80160e8 <__sflush_r+0x7c>
 80160e4:	682b      	ldr	r3, [r5, #0]
 80160e6:	b903      	cbnz	r3, 80160ea <__sflush_r+0x7e>
 80160e8:	6560      	str	r0, [r4, #84]	; 0x54
 80160ea:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80160ec:	602f      	str	r7, [r5, #0]
 80160ee:	2900      	cmp	r1, #0
 80160f0:	d0c9      	beq.n	8016086 <__sflush_r+0x1a>
 80160f2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80160f6:	4299      	cmp	r1, r3
 80160f8:	d002      	beq.n	8016100 <__sflush_r+0x94>
 80160fa:	4628      	mov	r0, r5
 80160fc:	f7fe fc5e 	bl	80149bc <_free_r>
 8016100:	2000      	movs	r0, #0
 8016102:	6360      	str	r0, [r4, #52]	; 0x34
 8016104:	e7c0      	b.n	8016088 <__sflush_r+0x1c>
 8016106:	2301      	movs	r3, #1
 8016108:	4628      	mov	r0, r5
 801610a:	47b0      	blx	r6
 801610c:	1c41      	adds	r1, r0, #1
 801610e:	d1c8      	bne.n	80160a2 <__sflush_r+0x36>
 8016110:	682b      	ldr	r3, [r5, #0]
 8016112:	2b00      	cmp	r3, #0
 8016114:	d0c5      	beq.n	80160a2 <__sflush_r+0x36>
 8016116:	2b1d      	cmp	r3, #29
 8016118:	d001      	beq.n	801611e <__sflush_r+0xb2>
 801611a:	2b16      	cmp	r3, #22
 801611c:	d101      	bne.n	8016122 <__sflush_r+0xb6>
 801611e:	602f      	str	r7, [r5, #0]
 8016120:	e7b1      	b.n	8016086 <__sflush_r+0x1a>
 8016122:	89a3      	ldrh	r3, [r4, #12]
 8016124:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016128:	81a3      	strh	r3, [r4, #12]
 801612a:	e7ad      	b.n	8016088 <__sflush_r+0x1c>
 801612c:	690f      	ldr	r7, [r1, #16]
 801612e:	2f00      	cmp	r7, #0
 8016130:	d0a9      	beq.n	8016086 <__sflush_r+0x1a>
 8016132:	0793      	lsls	r3, r2, #30
 8016134:	680e      	ldr	r6, [r1, #0]
 8016136:	bf08      	it	eq
 8016138:	694b      	ldreq	r3, [r1, #20]
 801613a:	600f      	str	r7, [r1, #0]
 801613c:	bf18      	it	ne
 801613e:	2300      	movne	r3, #0
 8016140:	eba6 0807 	sub.w	r8, r6, r7
 8016144:	608b      	str	r3, [r1, #8]
 8016146:	f1b8 0f00 	cmp.w	r8, #0
 801614a:	dd9c      	ble.n	8016086 <__sflush_r+0x1a>
 801614c:	6a21      	ldr	r1, [r4, #32]
 801614e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8016150:	4643      	mov	r3, r8
 8016152:	463a      	mov	r2, r7
 8016154:	4628      	mov	r0, r5
 8016156:	47b0      	blx	r6
 8016158:	2800      	cmp	r0, #0
 801615a:	dc06      	bgt.n	801616a <__sflush_r+0xfe>
 801615c:	89a3      	ldrh	r3, [r4, #12]
 801615e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016162:	81a3      	strh	r3, [r4, #12]
 8016164:	f04f 30ff 	mov.w	r0, #4294967295
 8016168:	e78e      	b.n	8016088 <__sflush_r+0x1c>
 801616a:	4407      	add	r7, r0
 801616c:	eba8 0800 	sub.w	r8, r8, r0
 8016170:	e7e9      	b.n	8016146 <__sflush_r+0xda>
 8016172:	bf00      	nop
 8016174:	dfbffffe 	.word	0xdfbffffe

08016178 <_fflush_r>:
 8016178:	b538      	push	{r3, r4, r5, lr}
 801617a:	690b      	ldr	r3, [r1, #16]
 801617c:	4605      	mov	r5, r0
 801617e:	460c      	mov	r4, r1
 8016180:	b913      	cbnz	r3, 8016188 <_fflush_r+0x10>
 8016182:	2500      	movs	r5, #0
 8016184:	4628      	mov	r0, r5
 8016186:	bd38      	pop	{r3, r4, r5, pc}
 8016188:	b118      	cbz	r0, 8016192 <_fflush_r+0x1a>
 801618a:	6a03      	ldr	r3, [r0, #32]
 801618c:	b90b      	cbnz	r3, 8016192 <_fflush_r+0x1a>
 801618e:	f7fe fa75 	bl	801467c <__sinit>
 8016192:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016196:	2b00      	cmp	r3, #0
 8016198:	d0f3      	beq.n	8016182 <_fflush_r+0xa>
 801619a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801619c:	07d0      	lsls	r0, r2, #31
 801619e:	d404      	bmi.n	80161aa <_fflush_r+0x32>
 80161a0:	0599      	lsls	r1, r3, #22
 80161a2:	d402      	bmi.n	80161aa <_fflush_r+0x32>
 80161a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80161a6:	f7fe fbe2 	bl	801496e <__retarget_lock_acquire_recursive>
 80161aa:	4628      	mov	r0, r5
 80161ac:	4621      	mov	r1, r4
 80161ae:	f7ff ff5d 	bl	801606c <__sflush_r>
 80161b2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80161b4:	07da      	lsls	r2, r3, #31
 80161b6:	4605      	mov	r5, r0
 80161b8:	d4e4      	bmi.n	8016184 <_fflush_r+0xc>
 80161ba:	89a3      	ldrh	r3, [r4, #12]
 80161bc:	059b      	lsls	r3, r3, #22
 80161be:	d4e1      	bmi.n	8016184 <_fflush_r+0xc>
 80161c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80161c2:	f7fe fbd5 	bl	8014970 <__retarget_lock_release_recursive>
 80161c6:	e7dd      	b.n	8016184 <_fflush_r+0xc>

080161c8 <memmove>:
 80161c8:	4288      	cmp	r0, r1
 80161ca:	b510      	push	{r4, lr}
 80161cc:	eb01 0402 	add.w	r4, r1, r2
 80161d0:	d902      	bls.n	80161d8 <memmove+0x10>
 80161d2:	4284      	cmp	r4, r0
 80161d4:	4623      	mov	r3, r4
 80161d6:	d807      	bhi.n	80161e8 <memmove+0x20>
 80161d8:	1e43      	subs	r3, r0, #1
 80161da:	42a1      	cmp	r1, r4
 80161dc:	d008      	beq.n	80161f0 <memmove+0x28>
 80161de:	f811 2b01 	ldrb.w	r2, [r1], #1
 80161e2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80161e6:	e7f8      	b.n	80161da <memmove+0x12>
 80161e8:	4402      	add	r2, r0
 80161ea:	4601      	mov	r1, r0
 80161ec:	428a      	cmp	r2, r1
 80161ee:	d100      	bne.n	80161f2 <memmove+0x2a>
 80161f0:	bd10      	pop	{r4, pc}
 80161f2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80161f6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80161fa:	e7f7      	b.n	80161ec <memmove+0x24>

080161fc <__assert_func>:
 80161fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80161fe:	4614      	mov	r4, r2
 8016200:	461a      	mov	r2, r3
 8016202:	4b09      	ldr	r3, [pc, #36]	; (8016228 <__assert_func+0x2c>)
 8016204:	681b      	ldr	r3, [r3, #0]
 8016206:	4605      	mov	r5, r0
 8016208:	68d8      	ldr	r0, [r3, #12]
 801620a:	b14c      	cbz	r4, 8016220 <__assert_func+0x24>
 801620c:	4b07      	ldr	r3, [pc, #28]	; (801622c <__assert_func+0x30>)
 801620e:	9100      	str	r1, [sp, #0]
 8016210:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8016214:	4906      	ldr	r1, [pc, #24]	; (8016230 <__assert_func+0x34>)
 8016216:	462b      	mov	r3, r5
 8016218:	f000 f854 	bl	80162c4 <fiprintf>
 801621c:	f000 f864 	bl	80162e8 <abort>
 8016220:	4b04      	ldr	r3, [pc, #16]	; (8016234 <__assert_func+0x38>)
 8016222:	461c      	mov	r4, r3
 8016224:	e7f3      	b.n	801620e <__assert_func+0x12>
 8016226:	bf00      	nop
 8016228:	2000034c 	.word	0x2000034c
 801622c:	0802376f 	.word	0x0802376f
 8016230:	0802377c 	.word	0x0802377c
 8016234:	080237aa 	.word	0x080237aa

08016238 <_calloc_r>:
 8016238:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801623a:	fba1 2402 	umull	r2, r4, r1, r2
 801623e:	b94c      	cbnz	r4, 8016254 <_calloc_r+0x1c>
 8016240:	4611      	mov	r1, r2
 8016242:	9201      	str	r2, [sp, #4]
 8016244:	f7fd fa14 	bl	8013670 <_malloc_r>
 8016248:	9a01      	ldr	r2, [sp, #4]
 801624a:	4605      	mov	r5, r0
 801624c:	b930      	cbnz	r0, 801625c <_calloc_r+0x24>
 801624e:	4628      	mov	r0, r5
 8016250:	b003      	add	sp, #12
 8016252:	bd30      	pop	{r4, r5, pc}
 8016254:	220c      	movs	r2, #12
 8016256:	6002      	str	r2, [r0, #0]
 8016258:	2500      	movs	r5, #0
 801625a:	e7f8      	b.n	801624e <_calloc_r+0x16>
 801625c:	4621      	mov	r1, r4
 801625e:	f7fe fabf 	bl	80147e0 <memset>
 8016262:	e7f4      	b.n	801624e <_calloc_r+0x16>

08016264 <_realloc_r>:
 8016264:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016268:	4680      	mov	r8, r0
 801626a:	4614      	mov	r4, r2
 801626c:	460e      	mov	r6, r1
 801626e:	b921      	cbnz	r1, 801627a <_realloc_r+0x16>
 8016270:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016274:	4611      	mov	r1, r2
 8016276:	f7fd b9fb 	b.w	8013670 <_malloc_r>
 801627a:	b92a      	cbnz	r2, 8016288 <_realloc_r+0x24>
 801627c:	f7fe fb9e 	bl	80149bc <_free_r>
 8016280:	4625      	mov	r5, r4
 8016282:	4628      	mov	r0, r5
 8016284:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016288:	f000 f835 	bl	80162f6 <_malloc_usable_size_r>
 801628c:	4284      	cmp	r4, r0
 801628e:	4607      	mov	r7, r0
 8016290:	d802      	bhi.n	8016298 <_realloc_r+0x34>
 8016292:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8016296:	d812      	bhi.n	80162be <_realloc_r+0x5a>
 8016298:	4621      	mov	r1, r4
 801629a:	4640      	mov	r0, r8
 801629c:	f7fd f9e8 	bl	8013670 <_malloc_r>
 80162a0:	4605      	mov	r5, r0
 80162a2:	2800      	cmp	r0, #0
 80162a4:	d0ed      	beq.n	8016282 <_realloc_r+0x1e>
 80162a6:	42bc      	cmp	r4, r7
 80162a8:	4622      	mov	r2, r4
 80162aa:	4631      	mov	r1, r6
 80162ac:	bf28      	it	cs
 80162ae:	463a      	movcs	r2, r7
 80162b0:	f7fe fb67 	bl	8014982 <memcpy>
 80162b4:	4631      	mov	r1, r6
 80162b6:	4640      	mov	r0, r8
 80162b8:	f7fe fb80 	bl	80149bc <_free_r>
 80162bc:	e7e1      	b.n	8016282 <_realloc_r+0x1e>
 80162be:	4635      	mov	r5, r6
 80162c0:	e7df      	b.n	8016282 <_realloc_r+0x1e>
	...

080162c4 <fiprintf>:
 80162c4:	b40e      	push	{r1, r2, r3}
 80162c6:	b503      	push	{r0, r1, lr}
 80162c8:	4601      	mov	r1, r0
 80162ca:	ab03      	add	r3, sp, #12
 80162cc:	4805      	ldr	r0, [pc, #20]	; (80162e4 <fiprintf+0x20>)
 80162ce:	f853 2b04 	ldr.w	r2, [r3], #4
 80162d2:	6800      	ldr	r0, [r0, #0]
 80162d4:	9301      	str	r3, [sp, #4]
 80162d6:	f000 f83f 	bl	8016358 <_vfiprintf_r>
 80162da:	b002      	add	sp, #8
 80162dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80162e0:	b003      	add	sp, #12
 80162e2:	4770      	bx	lr
 80162e4:	2000034c 	.word	0x2000034c

080162e8 <abort>:
 80162e8:	b508      	push	{r3, lr}
 80162ea:	2006      	movs	r0, #6
 80162ec:	f000 fa0c 	bl	8016708 <raise>
 80162f0:	2001      	movs	r0, #1
 80162f2:	f7eb fc1b 	bl	8001b2c <_exit>

080162f6 <_malloc_usable_size_r>:
 80162f6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80162fa:	1f18      	subs	r0, r3, #4
 80162fc:	2b00      	cmp	r3, #0
 80162fe:	bfbc      	itt	lt
 8016300:	580b      	ldrlt	r3, [r1, r0]
 8016302:	18c0      	addlt	r0, r0, r3
 8016304:	4770      	bx	lr

08016306 <__sfputc_r>:
 8016306:	6893      	ldr	r3, [r2, #8]
 8016308:	3b01      	subs	r3, #1
 801630a:	2b00      	cmp	r3, #0
 801630c:	b410      	push	{r4}
 801630e:	6093      	str	r3, [r2, #8]
 8016310:	da08      	bge.n	8016324 <__sfputc_r+0x1e>
 8016312:	6994      	ldr	r4, [r2, #24]
 8016314:	42a3      	cmp	r3, r4
 8016316:	db01      	blt.n	801631c <__sfputc_r+0x16>
 8016318:	290a      	cmp	r1, #10
 801631a:	d103      	bne.n	8016324 <__sfputc_r+0x1e>
 801631c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016320:	f000 b934 	b.w	801658c <__swbuf_r>
 8016324:	6813      	ldr	r3, [r2, #0]
 8016326:	1c58      	adds	r0, r3, #1
 8016328:	6010      	str	r0, [r2, #0]
 801632a:	7019      	strb	r1, [r3, #0]
 801632c:	4608      	mov	r0, r1
 801632e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016332:	4770      	bx	lr

08016334 <__sfputs_r>:
 8016334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016336:	4606      	mov	r6, r0
 8016338:	460f      	mov	r7, r1
 801633a:	4614      	mov	r4, r2
 801633c:	18d5      	adds	r5, r2, r3
 801633e:	42ac      	cmp	r4, r5
 8016340:	d101      	bne.n	8016346 <__sfputs_r+0x12>
 8016342:	2000      	movs	r0, #0
 8016344:	e007      	b.n	8016356 <__sfputs_r+0x22>
 8016346:	f814 1b01 	ldrb.w	r1, [r4], #1
 801634a:	463a      	mov	r2, r7
 801634c:	4630      	mov	r0, r6
 801634e:	f7ff ffda 	bl	8016306 <__sfputc_r>
 8016352:	1c43      	adds	r3, r0, #1
 8016354:	d1f3      	bne.n	801633e <__sfputs_r+0xa>
 8016356:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08016358 <_vfiprintf_r>:
 8016358:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801635c:	460d      	mov	r5, r1
 801635e:	b09d      	sub	sp, #116	; 0x74
 8016360:	4614      	mov	r4, r2
 8016362:	4698      	mov	r8, r3
 8016364:	4606      	mov	r6, r0
 8016366:	b118      	cbz	r0, 8016370 <_vfiprintf_r+0x18>
 8016368:	6a03      	ldr	r3, [r0, #32]
 801636a:	b90b      	cbnz	r3, 8016370 <_vfiprintf_r+0x18>
 801636c:	f7fe f986 	bl	801467c <__sinit>
 8016370:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8016372:	07d9      	lsls	r1, r3, #31
 8016374:	d405      	bmi.n	8016382 <_vfiprintf_r+0x2a>
 8016376:	89ab      	ldrh	r3, [r5, #12]
 8016378:	059a      	lsls	r2, r3, #22
 801637a:	d402      	bmi.n	8016382 <_vfiprintf_r+0x2a>
 801637c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801637e:	f7fe faf6 	bl	801496e <__retarget_lock_acquire_recursive>
 8016382:	89ab      	ldrh	r3, [r5, #12]
 8016384:	071b      	lsls	r3, r3, #28
 8016386:	d501      	bpl.n	801638c <_vfiprintf_r+0x34>
 8016388:	692b      	ldr	r3, [r5, #16]
 801638a:	b99b      	cbnz	r3, 80163b4 <_vfiprintf_r+0x5c>
 801638c:	4629      	mov	r1, r5
 801638e:	4630      	mov	r0, r6
 8016390:	f000 f93a 	bl	8016608 <__swsetup_r>
 8016394:	b170      	cbz	r0, 80163b4 <_vfiprintf_r+0x5c>
 8016396:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8016398:	07dc      	lsls	r4, r3, #31
 801639a:	d504      	bpl.n	80163a6 <_vfiprintf_r+0x4e>
 801639c:	f04f 30ff 	mov.w	r0, #4294967295
 80163a0:	b01d      	add	sp, #116	; 0x74
 80163a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80163a6:	89ab      	ldrh	r3, [r5, #12]
 80163a8:	0598      	lsls	r0, r3, #22
 80163aa:	d4f7      	bmi.n	801639c <_vfiprintf_r+0x44>
 80163ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80163ae:	f7fe fadf 	bl	8014970 <__retarget_lock_release_recursive>
 80163b2:	e7f3      	b.n	801639c <_vfiprintf_r+0x44>
 80163b4:	2300      	movs	r3, #0
 80163b6:	9309      	str	r3, [sp, #36]	; 0x24
 80163b8:	2320      	movs	r3, #32
 80163ba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80163be:	f8cd 800c 	str.w	r8, [sp, #12]
 80163c2:	2330      	movs	r3, #48	; 0x30
 80163c4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8016578 <_vfiprintf_r+0x220>
 80163c8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80163cc:	f04f 0901 	mov.w	r9, #1
 80163d0:	4623      	mov	r3, r4
 80163d2:	469a      	mov	sl, r3
 80163d4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80163d8:	b10a      	cbz	r2, 80163de <_vfiprintf_r+0x86>
 80163da:	2a25      	cmp	r2, #37	; 0x25
 80163dc:	d1f9      	bne.n	80163d2 <_vfiprintf_r+0x7a>
 80163de:	ebba 0b04 	subs.w	fp, sl, r4
 80163e2:	d00b      	beq.n	80163fc <_vfiprintf_r+0xa4>
 80163e4:	465b      	mov	r3, fp
 80163e6:	4622      	mov	r2, r4
 80163e8:	4629      	mov	r1, r5
 80163ea:	4630      	mov	r0, r6
 80163ec:	f7ff ffa2 	bl	8016334 <__sfputs_r>
 80163f0:	3001      	adds	r0, #1
 80163f2:	f000 80a9 	beq.w	8016548 <_vfiprintf_r+0x1f0>
 80163f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80163f8:	445a      	add	r2, fp
 80163fa:	9209      	str	r2, [sp, #36]	; 0x24
 80163fc:	f89a 3000 	ldrb.w	r3, [sl]
 8016400:	2b00      	cmp	r3, #0
 8016402:	f000 80a1 	beq.w	8016548 <_vfiprintf_r+0x1f0>
 8016406:	2300      	movs	r3, #0
 8016408:	f04f 32ff 	mov.w	r2, #4294967295
 801640c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016410:	f10a 0a01 	add.w	sl, sl, #1
 8016414:	9304      	str	r3, [sp, #16]
 8016416:	9307      	str	r3, [sp, #28]
 8016418:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801641c:	931a      	str	r3, [sp, #104]	; 0x68
 801641e:	4654      	mov	r4, sl
 8016420:	2205      	movs	r2, #5
 8016422:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016426:	4854      	ldr	r0, [pc, #336]	; (8016578 <_vfiprintf_r+0x220>)
 8016428:	f7e9 feea 	bl	8000200 <memchr>
 801642c:	9a04      	ldr	r2, [sp, #16]
 801642e:	b9d8      	cbnz	r0, 8016468 <_vfiprintf_r+0x110>
 8016430:	06d1      	lsls	r1, r2, #27
 8016432:	bf44      	itt	mi
 8016434:	2320      	movmi	r3, #32
 8016436:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801643a:	0713      	lsls	r3, r2, #28
 801643c:	bf44      	itt	mi
 801643e:	232b      	movmi	r3, #43	; 0x2b
 8016440:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016444:	f89a 3000 	ldrb.w	r3, [sl]
 8016448:	2b2a      	cmp	r3, #42	; 0x2a
 801644a:	d015      	beq.n	8016478 <_vfiprintf_r+0x120>
 801644c:	9a07      	ldr	r2, [sp, #28]
 801644e:	4654      	mov	r4, sl
 8016450:	2000      	movs	r0, #0
 8016452:	f04f 0c0a 	mov.w	ip, #10
 8016456:	4621      	mov	r1, r4
 8016458:	f811 3b01 	ldrb.w	r3, [r1], #1
 801645c:	3b30      	subs	r3, #48	; 0x30
 801645e:	2b09      	cmp	r3, #9
 8016460:	d94d      	bls.n	80164fe <_vfiprintf_r+0x1a6>
 8016462:	b1b0      	cbz	r0, 8016492 <_vfiprintf_r+0x13a>
 8016464:	9207      	str	r2, [sp, #28]
 8016466:	e014      	b.n	8016492 <_vfiprintf_r+0x13a>
 8016468:	eba0 0308 	sub.w	r3, r0, r8
 801646c:	fa09 f303 	lsl.w	r3, r9, r3
 8016470:	4313      	orrs	r3, r2
 8016472:	9304      	str	r3, [sp, #16]
 8016474:	46a2      	mov	sl, r4
 8016476:	e7d2      	b.n	801641e <_vfiprintf_r+0xc6>
 8016478:	9b03      	ldr	r3, [sp, #12]
 801647a:	1d19      	adds	r1, r3, #4
 801647c:	681b      	ldr	r3, [r3, #0]
 801647e:	9103      	str	r1, [sp, #12]
 8016480:	2b00      	cmp	r3, #0
 8016482:	bfbb      	ittet	lt
 8016484:	425b      	neglt	r3, r3
 8016486:	f042 0202 	orrlt.w	r2, r2, #2
 801648a:	9307      	strge	r3, [sp, #28]
 801648c:	9307      	strlt	r3, [sp, #28]
 801648e:	bfb8      	it	lt
 8016490:	9204      	strlt	r2, [sp, #16]
 8016492:	7823      	ldrb	r3, [r4, #0]
 8016494:	2b2e      	cmp	r3, #46	; 0x2e
 8016496:	d10c      	bne.n	80164b2 <_vfiprintf_r+0x15a>
 8016498:	7863      	ldrb	r3, [r4, #1]
 801649a:	2b2a      	cmp	r3, #42	; 0x2a
 801649c:	d134      	bne.n	8016508 <_vfiprintf_r+0x1b0>
 801649e:	9b03      	ldr	r3, [sp, #12]
 80164a0:	1d1a      	adds	r2, r3, #4
 80164a2:	681b      	ldr	r3, [r3, #0]
 80164a4:	9203      	str	r2, [sp, #12]
 80164a6:	2b00      	cmp	r3, #0
 80164a8:	bfb8      	it	lt
 80164aa:	f04f 33ff 	movlt.w	r3, #4294967295
 80164ae:	3402      	adds	r4, #2
 80164b0:	9305      	str	r3, [sp, #20]
 80164b2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8016588 <_vfiprintf_r+0x230>
 80164b6:	7821      	ldrb	r1, [r4, #0]
 80164b8:	2203      	movs	r2, #3
 80164ba:	4650      	mov	r0, sl
 80164bc:	f7e9 fea0 	bl	8000200 <memchr>
 80164c0:	b138      	cbz	r0, 80164d2 <_vfiprintf_r+0x17a>
 80164c2:	9b04      	ldr	r3, [sp, #16]
 80164c4:	eba0 000a 	sub.w	r0, r0, sl
 80164c8:	2240      	movs	r2, #64	; 0x40
 80164ca:	4082      	lsls	r2, r0
 80164cc:	4313      	orrs	r3, r2
 80164ce:	3401      	adds	r4, #1
 80164d0:	9304      	str	r3, [sp, #16]
 80164d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80164d6:	4829      	ldr	r0, [pc, #164]	; (801657c <_vfiprintf_r+0x224>)
 80164d8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80164dc:	2206      	movs	r2, #6
 80164de:	f7e9 fe8f 	bl	8000200 <memchr>
 80164e2:	2800      	cmp	r0, #0
 80164e4:	d03f      	beq.n	8016566 <_vfiprintf_r+0x20e>
 80164e6:	4b26      	ldr	r3, [pc, #152]	; (8016580 <_vfiprintf_r+0x228>)
 80164e8:	bb1b      	cbnz	r3, 8016532 <_vfiprintf_r+0x1da>
 80164ea:	9b03      	ldr	r3, [sp, #12]
 80164ec:	3307      	adds	r3, #7
 80164ee:	f023 0307 	bic.w	r3, r3, #7
 80164f2:	3308      	adds	r3, #8
 80164f4:	9303      	str	r3, [sp, #12]
 80164f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80164f8:	443b      	add	r3, r7
 80164fa:	9309      	str	r3, [sp, #36]	; 0x24
 80164fc:	e768      	b.n	80163d0 <_vfiprintf_r+0x78>
 80164fe:	fb0c 3202 	mla	r2, ip, r2, r3
 8016502:	460c      	mov	r4, r1
 8016504:	2001      	movs	r0, #1
 8016506:	e7a6      	b.n	8016456 <_vfiprintf_r+0xfe>
 8016508:	2300      	movs	r3, #0
 801650a:	3401      	adds	r4, #1
 801650c:	9305      	str	r3, [sp, #20]
 801650e:	4619      	mov	r1, r3
 8016510:	f04f 0c0a 	mov.w	ip, #10
 8016514:	4620      	mov	r0, r4
 8016516:	f810 2b01 	ldrb.w	r2, [r0], #1
 801651a:	3a30      	subs	r2, #48	; 0x30
 801651c:	2a09      	cmp	r2, #9
 801651e:	d903      	bls.n	8016528 <_vfiprintf_r+0x1d0>
 8016520:	2b00      	cmp	r3, #0
 8016522:	d0c6      	beq.n	80164b2 <_vfiprintf_r+0x15a>
 8016524:	9105      	str	r1, [sp, #20]
 8016526:	e7c4      	b.n	80164b2 <_vfiprintf_r+0x15a>
 8016528:	fb0c 2101 	mla	r1, ip, r1, r2
 801652c:	4604      	mov	r4, r0
 801652e:	2301      	movs	r3, #1
 8016530:	e7f0      	b.n	8016514 <_vfiprintf_r+0x1bc>
 8016532:	ab03      	add	r3, sp, #12
 8016534:	9300      	str	r3, [sp, #0]
 8016536:	462a      	mov	r2, r5
 8016538:	4b12      	ldr	r3, [pc, #72]	; (8016584 <_vfiprintf_r+0x22c>)
 801653a:	a904      	add	r1, sp, #16
 801653c:	4630      	mov	r0, r6
 801653e:	f3af 8000 	nop.w
 8016542:	4607      	mov	r7, r0
 8016544:	1c78      	adds	r0, r7, #1
 8016546:	d1d6      	bne.n	80164f6 <_vfiprintf_r+0x19e>
 8016548:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801654a:	07d9      	lsls	r1, r3, #31
 801654c:	d405      	bmi.n	801655a <_vfiprintf_r+0x202>
 801654e:	89ab      	ldrh	r3, [r5, #12]
 8016550:	059a      	lsls	r2, r3, #22
 8016552:	d402      	bmi.n	801655a <_vfiprintf_r+0x202>
 8016554:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8016556:	f7fe fa0b 	bl	8014970 <__retarget_lock_release_recursive>
 801655a:	89ab      	ldrh	r3, [r5, #12]
 801655c:	065b      	lsls	r3, r3, #25
 801655e:	f53f af1d 	bmi.w	801639c <_vfiprintf_r+0x44>
 8016562:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016564:	e71c      	b.n	80163a0 <_vfiprintf_r+0x48>
 8016566:	ab03      	add	r3, sp, #12
 8016568:	9300      	str	r3, [sp, #0]
 801656a:	462a      	mov	r2, r5
 801656c:	4b05      	ldr	r3, [pc, #20]	; (8016584 <_vfiprintf_r+0x22c>)
 801656e:	a904      	add	r1, sp, #16
 8016570:	4630      	mov	r0, r6
 8016572:	f7ff fc59 	bl	8015e28 <_printf_i>
 8016576:	e7e4      	b.n	8016542 <_vfiprintf_r+0x1ea>
 8016578:	0802373c 	.word	0x0802373c
 801657c:	08023746 	.word	0x08023746
 8016580:	00000000 	.word	0x00000000
 8016584:	08016335 	.word	0x08016335
 8016588:	08023742 	.word	0x08023742

0801658c <__swbuf_r>:
 801658c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801658e:	460e      	mov	r6, r1
 8016590:	4614      	mov	r4, r2
 8016592:	4605      	mov	r5, r0
 8016594:	b118      	cbz	r0, 801659e <__swbuf_r+0x12>
 8016596:	6a03      	ldr	r3, [r0, #32]
 8016598:	b90b      	cbnz	r3, 801659e <__swbuf_r+0x12>
 801659a:	f7fe f86f 	bl	801467c <__sinit>
 801659e:	69a3      	ldr	r3, [r4, #24]
 80165a0:	60a3      	str	r3, [r4, #8]
 80165a2:	89a3      	ldrh	r3, [r4, #12]
 80165a4:	071a      	lsls	r2, r3, #28
 80165a6:	d525      	bpl.n	80165f4 <__swbuf_r+0x68>
 80165a8:	6923      	ldr	r3, [r4, #16]
 80165aa:	b31b      	cbz	r3, 80165f4 <__swbuf_r+0x68>
 80165ac:	6823      	ldr	r3, [r4, #0]
 80165ae:	6922      	ldr	r2, [r4, #16]
 80165b0:	1a98      	subs	r0, r3, r2
 80165b2:	6963      	ldr	r3, [r4, #20]
 80165b4:	b2f6      	uxtb	r6, r6
 80165b6:	4283      	cmp	r3, r0
 80165b8:	4637      	mov	r7, r6
 80165ba:	dc04      	bgt.n	80165c6 <__swbuf_r+0x3a>
 80165bc:	4621      	mov	r1, r4
 80165be:	4628      	mov	r0, r5
 80165c0:	f7ff fdda 	bl	8016178 <_fflush_r>
 80165c4:	b9e0      	cbnz	r0, 8016600 <__swbuf_r+0x74>
 80165c6:	68a3      	ldr	r3, [r4, #8]
 80165c8:	3b01      	subs	r3, #1
 80165ca:	60a3      	str	r3, [r4, #8]
 80165cc:	6823      	ldr	r3, [r4, #0]
 80165ce:	1c5a      	adds	r2, r3, #1
 80165d0:	6022      	str	r2, [r4, #0]
 80165d2:	701e      	strb	r6, [r3, #0]
 80165d4:	6962      	ldr	r2, [r4, #20]
 80165d6:	1c43      	adds	r3, r0, #1
 80165d8:	429a      	cmp	r2, r3
 80165da:	d004      	beq.n	80165e6 <__swbuf_r+0x5a>
 80165dc:	89a3      	ldrh	r3, [r4, #12]
 80165de:	07db      	lsls	r3, r3, #31
 80165e0:	d506      	bpl.n	80165f0 <__swbuf_r+0x64>
 80165e2:	2e0a      	cmp	r6, #10
 80165e4:	d104      	bne.n	80165f0 <__swbuf_r+0x64>
 80165e6:	4621      	mov	r1, r4
 80165e8:	4628      	mov	r0, r5
 80165ea:	f7ff fdc5 	bl	8016178 <_fflush_r>
 80165ee:	b938      	cbnz	r0, 8016600 <__swbuf_r+0x74>
 80165f0:	4638      	mov	r0, r7
 80165f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80165f4:	4621      	mov	r1, r4
 80165f6:	4628      	mov	r0, r5
 80165f8:	f000 f806 	bl	8016608 <__swsetup_r>
 80165fc:	2800      	cmp	r0, #0
 80165fe:	d0d5      	beq.n	80165ac <__swbuf_r+0x20>
 8016600:	f04f 37ff 	mov.w	r7, #4294967295
 8016604:	e7f4      	b.n	80165f0 <__swbuf_r+0x64>
	...

08016608 <__swsetup_r>:
 8016608:	b538      	push	{r3, r4, r5, lr}
 801660a:	4b2a      	ldr	r3, [pc, #168]	; (80166b4 <__swsetup_r+0xac>)
 801660c:	4605      	mov	r5, r0
 801660e:	6818      	ldr	r0, [r3, #0]
 8016610:	460c      	mov	r4, r1
 8016612:	b118      	cbz	r0, 801661c <__swsetup_r+0x14>
 8016614:	6a03      	ldr	r3, [r0, #32]
 8016616:	b90b      	cbnz	r3, 801661c <__swsetup_r+0x14>
 8016618:	f7fe f830 	bl	801467c <__sinit>
 801661c:	89a3      	ldrh	r3, [r4, #12]
 801661e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8016622:	0718      	lsls	r0, r3, #28
 8016624:	d422      	bmi.n	801666c <__swsetup_r+0x64>
 8016626:	06d9      	lsls	r1, r3, #27
 8016628:	d407      	bmi.n	801663a <__swsetup_r+0x32>
 801662a:	2309      	movs	r3, #9
 801662c:	602b      	str	r3, [r5, #0]
 801662e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8016632:	81a3      	strh	r3, [r4, #12]
 8016634:	f04f 30ff 	mov.w	r0, #4294967295
 8016638:	e034      	b.n	80166a4 <__swsetup_r+0x9c>
 801663a:	0758      	lsls	r0, r3, #29
 801663c:	d512      	bpl.n	8016664 <__swsetup_r+0x5c>
 801663e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016640:	b141      	cbz	r1, 8016654 <__swsetup_r+0x4c>
 8016642:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016646:	4299      	cmp	r1, r3
 8016648:	d002      	beq.n	8016650 <__swsetup_r+0x48>
 801664a:	4628      	mov	r0, r5
 801664c:	f7fe f9b6 	bl	80149bc <_free_r>
 8016650:	2300      	movs	r3, #0
 8016652:	6363      	str	r3, [r4, #52]	; 0x34
 8016654:	89a3      	ldrh	r3, [r4, #12]
 8016656:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801665a:	81a3      	strh	r3, [r4, #12]
 801665c:	2300      	movs	r3, #0
 801665e:	6063      	str	r3, [r4, #4]
 8016660:	6923      	ldr	r3, [r4, #16]
 8016662:	6023      	str	r3, [r4, #0]
 8016664:	89a3      	ldrh	r3, [r4, #12]
 8016666:	f043 0308 	orr.w	r3, r3, #8
 801666a:	81a3      	strh	r3, [r4, #12]
 801666c:	6923      	ldr	r3, [r4, #16]
 801666e:	b94b      	cbnz	r3, 8016684 <__swsetup_r+0x7c>
 8016670:	89a3      	ldrh	r3, [r4, #12]
 8016672:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8016676:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801667a:	d003      	beq.n	8016684 <__swsetup_r+0x7c>
 801667c:	4621      	mov	r1, r4
 801667e:	4628      	mov	r0, r5
 8016680:	f000 f884 	bl	801678c <__smakebuf_r>
 8016684:	89a0      	ldrh	r0, [r4, #12]
 8016686:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801668a:	f010 0301 	ands.w	r3, r0, #1
 801668e:	d00a      	beq.n	80166a6 <__swsetup_r+0x9e>
 8016690:	2300      	movs	r3, #0
 8016692:	60a3      	str	r3, [r4, #8]
 8016694:	6963      	ldr	r3, [r4, #20]
 8016696:	425b      	negs	r3, r3
 8016698:	61a3      	str	r3, [r4, #24]
 801669a:	6923      	ldr	r3, [r4, #16]
 801669c:	b943      	cbnz	r3, 80166b0 <__swsetup_r+0xa8>
 801669e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80166a2:	d1c4      	bne.n	801662e <__swsetup_r+0x26>
 80166a4:	bd38      	pop	{r3, r4, r5, pc}
 80166a6:	0781      	lsls	r1, r0, #30
 80166a8:	bf58      	it	pl
 80166aa:	6963      	ldrpl	r3, [r4, #20]
 80166ac:	60a3      	str	r3, [r4, #8]
 80166ae:	e7f4      	b.n	801669a <__swsetup_r+0x92>
 80166b0:	2000      	movs	r0, #0
 80166b2:	e7f7      	b.n	80166a4 <__swsetup_r+0x9c>
 80166b4:	2000034c 	.word	0x2000034c

080166b8 <_raise_r>:
 80166b8:	291f      	cmp	r1, #31
 80166ba:	b538      	push	{r3, r4, r5, lr}
 80166bc:	4604      	mov	r4, r0
 80166be:	460d      	mov	r5, r1
 80166c0:	d904      	bls.n	80166cc <_raise_r+0x14>
 80166c2:	2316      	movs	r3, #22
 80166c4:	6003      	str	r3, [r0, #0]
 80166c6:	f04f 30ff 	mov.w	r0, #4294967295
 80166ca:	bd38      	pop	{r3, r4, r5, pc}
 80166cc:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80166ce:	b112      	cbz	r2, 80166d6 <_raise_r+0x1e>
 80166d0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80166d4:	b94b      	cbnz	r3, 80166ea <_raise_r+0x32>
 80166d6:	4620      	mov	r0, r4
 80166d8:	f000 f830 	bl	801673c <_getpid_r>
 80166dc:	462a      	mov	r2, r5
 80166de:	4601      	mov	r1, r0
 80166e0:	4620      	mov	r0, r4
 80166e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80166e6:	f000 b817 	b.w	8016718 <_kill_r>
 80166ea:	2b01      	cmp	r3, #1
 80166ec:	d00a      	beq.n	8016704 <_raise_r+0x4c>
 80166ee:	1c59      	adds	r1, r3, #1
 80166f0:	d103      	bne.n	80166fa <_raise_r+0x42>
 80166f2:	2316      	movs	r3, #22
 80166f4:	6003      	str	r3, [r0, #0]
 80166f6:	2001      	movs	r0, #1
 80166f8:	e7e7      	b.n	80166ca <_raise_r+0x12>
 80166fa:	2400      	movs	r4, #0
 80166fc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8016700:	4628      	mov	r0, r5
 8016702:	4798      	blx	r3
 8016704:	2000      	movs	r0, #0
 8016706:	e7e0      	b.n	80166ca <_raise_r+0x12>

08016708 <raise>:
 8016708:	4b02      	ldr	r3, [pc, #8]	; (8016714 <raise+0xc>)
 801670a:	4601      	mov	r1, r0
 801670c:	6818      	ldr	r0, [r3, #0]
 801670e:	f7ff bfd3 	b.w	80166b8 <_raise_r>
 8016712:	bf00      	nop
 8016714:	2000034c 	.word	0x2000034c

08016718 <_kill_r>:
 8016718:	b538      	push	{r3, r4, r5, lr}
 801671a:	4d07      	ldr	r5, [pc, #28]	; (8016738 <_kill_r+0x20>)
 801671c:	2300      	movs	r3, #0
 801671e:	4604      	mov	r4, r0
 8016720:	4608      	mov	r0, r1
 8016722:	4611      	mov	r1, r2
 8016724:	602b      	str	r3, [r5, #0]
 8016726:	f7eb f9f1 	bl	8001b0c <_kill>
 801672a:	1c43      	adds	r3, r0, #1
 801672c:	d102      	bne.n	8016734 <_kill_r+0x1c>
 801672e:	682b      	ldr	r3, [r5, #0]
 8016730:	b103      	cbz	r3, 8016734 <_kill_r+0x1c>
 8016732:	6023      	str	r3, [r4, #0]
 8016734:	bd38      	pop	{r3, r4, r5, pc}
 8016736:	bf00      	nop
 8016738:	20009064 	.word	0x20009064

0801673c <_getpid_r>:
 801673c:	f7eb b9de 	b.w	8001afc <_getpid>

08016740 <__swhatbuf_r>:
 8016740:	b570      	push	{r4, r5, r6, lr}
 8016742:	460c      	mov	r4, r1
 8016744:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016748:	2900      	cmp	r1, #0
 801674a:	b096      	sub	sp, #88	; 0x58
 801674c:	4615      	mov	r5, r2
 801674e:	461e      	mov	r6, r3
 8016750:	da0d      	bge.n	801676e <__swhatbuf_r+0x2e>
 8016752:	89a3      	ldrh	r3, [r4, #12]
 8016754:	f013 0f80 	tst.w	r3, #128	; 0x80
 8016758:	f04f 0100 	mov.w	r1, #0
 801675c:	bf0c      	ite	eq
 801675e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8016762:	2340      	movne	r3, #64	; 0x40
 8016764:	2000      	movs	r0, #0
 8016766:	6031      	str	r1, [r6, #0]
 8016768:	602b      	str	r3, [r5, #0]
 801676a:	b016      	add	sp, #88	; 0x58
 801676c:	bd70      	pop	{r4, r5, r6, pc}
 801676e:	466a      	mov	r2, sp
 8016770:	f000 f848 	bl	8016804 <_fstat_r>
 8016774:	2800      	cmp	r0, #0
 8016776:	dbec      	blt.n	8016752 <__swhatbuf_r+0x12>
 8016778:	9901      	ldr	r1, [sp, #4]
 801677a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 801677e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8016782:	4259      	negs	r1, r3
 8016784:	4159      	adcs	r1, r3
 8016786:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801678a:	e7eb      	b.n	8016764 <__swhatbuf_r+0x24>

0801678c <__smakebuf_r>:
 801678c:	898b      	ldrh	r3, [r1, #12]
 801678e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8016790:	079d      	lsls	r5, r3, #30
 8016792:	4606      	mov	r6, r0
 8016794:	460c      	mov	r4, r1
 8016796:	d507      	bpl.n	80167a8 <__smakebuf_r+0x1c>
 8016798:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801679c:	6023      	str	r3, [r4, #0]
 801679e:	6123      	str	r3, [r4, #16]
 80167a0:	2301      	movs	r3, #1
 80167a2:	6163      	str	r3, [r4, #20]
 80167a4:	b002      	add	sp, #8
 80167a6:	bd70      	pop	{r4, r5, r6, pc}
 80167a8:	ab01      	add	r3, sp, #4
 80167aa:	466a      	mov	r2, sp
 80167ac:	f7ff ffc8 	bl	8016740 <__swhatbuf_r>
 80167b0:	9900      	ldr	r1, [sp, #0]
 80167b2:	4605      	mov	r5, r0
 80167b4:	4630      	mov	r0, r6
 80167b6:	f7fc ff5b 	bl	8013670 <_malloc_r>
 80167ba:	b948      	cbnz	r0, 80167d0 <__smakebuf_r+0x44>
 80167bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80167c0:	059a      	lsls	r2, r3, #22
 80167c2:	d4ef      	bmi.n	80167a4 <__smakebuf_r+0x18>
 80167c4:	f023 0303 	bic.w	r3, r3, #3
 80167c8:	f043 0302 	orr.w	r3, r3, #2
 80167cc:	81a3      	strh	r3, [r4, #12]
 80167ce:	e7e3      	b.n	8016798 <__smakebuf_r+0xc>
 80167d0:	89a3      	ldrh	r3, [r4, #12]
 80167d2:	6020      	str	r0, [r4, #0]
 80167d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80167d8:	81a3      	strh	r3, [r4, #12]
 80167da:	9b00      	ldr	r3, [sp, #0]
 80167dc:	6163      	str	r3, [r4, #20]
 80167de:	9b01      	ldr	r3, [sp, #4]
 80167e0:	6120      	str	r0, [r4, #16]
 80167e2:	b15b      	cbz	r3, 80167fc <__smakebuf_r+0x70>
 80167e4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80167e8:	4630      	mov	r0, r6
 80167ea:	f000 f81d 	bl	8016828 <_isatty_r>
 80167ee:	b128      	cbz	r0, 80167fc <__smakebuf_r+0x70>
 80167f0:	89a3      	ldrh	r3, [r4, #12]
 80167f2:	f023 0303 	bic.w	r3, r3, #3
 80167f6:	f043 0301 	orr.w	r3, r3, #1
 80167fa:	81a3      	strh	r3, [r4, #12]
 80167fc:	89a3      	ldrh	r3, [r4, #12]
 80167fe:	431d      	orrs	r5, r3
 8016800:	81a5      	strh	r5, [r4, #12]
 8016802:	e7cf      	b.n	80167a4 <__smakebuf_r+0x18>

08016804 <_fstat_r>:
 8016804:	b538      	push	{r3, r4, r5, lr}
 8016806:	4d07      	ldr	r5, [pc, #28]	; (8016824 <_fstat_r+0x20>)
 8016808:	2300      	movs	r3, #0
 801680a:	4604      	mov	r4, r0
 801680c:	4608      	mov	r0, r1
 801680e:	4611      	mov	r1, r2
 8016810:	602b      	str	r3, [r5, #0]
 8016812:	f7eb f9da 	bl	8001bca <_fstat>
 8016816:	1c43      	adds	r3, r0, #1
 8016818:	d102      	bne.n	8016820 <_fstat_r+0x1c>
 801681a:	682b      	ldr	r3, [r5, #0]
 801681c:	b103      	cbz	r3, 8016820 <_fstat_r+0x1c>
 801681e:	6023      	str	r3, [r4, #0]
 8016820:	bd38      	pop	{r3, r4, r5, pc}
 8016822:	bf00      	nop
 8016824:	20009064 	.word	0x20009064

08016828 <_isatty_r>:
 8016828:	b538      	push	{r3, r4, r5, lr}
 801682a:	4d06      	ldr	r5, [pc, #24]	; (8016844 <_isatty_r+0x1c>)
 801682c:	2300      	movs	r3, #0
 801682e:	4604      	mov	r4, r0
 8016830:	4608      	mov	r0, r1
 8016832:	602b      	str	r3, [r5, #0]
 8016834:	f7eb f9d9 	bl	8001bea <_isatty>
 8016838:	1c43      	adds	r3, r0, #1
 801683a:	d102      	bne.n	8016842 <_isatty_r+0x1a>
 801683c:	682b      	ldr	r3, [r5, #0]
 801683e:	b103      	cbz	r3, 8016842 <_isatty_r+0x1a>
 8016840:	6023      	str	r3, [r4, #0]
 8016842:	bd38      	pop	{r3, r4, r5, pc}
 8016844:	20009064 	.word	0x20009064

08016848 <_init>:
 8016848:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801684a:	bf00      	nop
 801684c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801684e:	bc08      	pop	{r3}
 8016850:	469e      	mov	lr, r3
 8016852:	4770      	bx	lr

08016854 <_fini>:
 8016854:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016856:	bf00      	nop
 8016858:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801685a:	bc08      	pop	{r3}
 801685c:	469e      	mov	lr, r3
 801685e:	4770      	bx	lr
