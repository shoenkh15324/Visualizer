
visualizer_fw.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012e90  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009cc  08013030  08013030  00023030  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080139fc  080139fc  000302d8  2**0
                  CONTENTS
  4 .ARM          00000008  080139fc  080139fc  000239fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013a04  08013a04  000302d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013a04  08013a04  00023a04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08013a08  08013a08  00023a08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002d8  20000000  08013a0c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000279c  200002d8  08013ce4  000302d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002a74  08013ce4  00032a74  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000302d8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030308  2**0
                  CONTENTS, READONLY
 13 .debug_info   00019f05  00000000  00000000  0003034b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000530b  00000000  00000000  0004a250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001678  00000000  00000000  0004f560  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000010a0  00000000  00000000  00050bd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001de33  00000000  00000000  00051c78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000227eb  00000000  00000000  0006faab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000912b6  00000000  00000000  00092296  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006c68  00000000  00000000  0012354c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000081  00000000  00000000  0012a1b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200002d8 	.word	0x200002d8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08013018 	.word	0x08013018

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200002dc 	.word	0x200002dc
 80001dc:	08013018 	.word	0x08013018

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2uiz>:
 8000b78:	004a      	lsls	r2, r1, #1
 8000b7a:	d211      	bcs.n	8000ba0 <__aeabi_d2uiz+0x28>
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d211      	bcs.n	8000ba6 <__aeabi_d2uiz+0x2e>
 8000b82:	d50d      	bpl.n	8000ba0 <__aeabi_d2uiz+0x28>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d40e      	bmi.n	8000bac <__aeabi_d2uiz+0x34>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_d2uiz+0x3a>
 8000bac:	f04f 30ff 	mov.w	r0, #4294967295
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0000 	mov.w	r0, #0
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b9a6 	b.w	8000fbc <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f83c 	bl	8000cf4 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__aeabi_d2lz>:
 8000c88:	b538      	push	{r3, r4, r5, lr}
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	4604      	mov	r4, r0
 8000c90:	460d      	mov	r5, r1
 8000c92:	f7ff ff33 	bl	8000afc <__aeabi_dcmplt>
 8000c96:	b928      	cbnz	r0, 8000ca4 <__aeabi_d2lz+0x1c>
 8000c98:	4620      	mov	r0, r4
 8000c9a:	4629      	mov	r1, r5
 8000c9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ca0:	f000 b80a 	b.w	8000cb8 <__aeabi_d2ulz>
 8000ca4:	4620      	mov	r0, r4
 8000ca6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000caa:	f000 f805 	bl	8000cb8 <__aeabi_d2ulz>
 8000cae:	4240      	negs	r0, r0
 8000cb0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cb4:	bd38      	pop	{r3, r4, r5, pc}
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_d2ulz>:
 8000cb8:	b5d0      	push	{r4, r6, r7, lr}
 8000cba:	4b0c      	ldr	r3, [pc, #48]	; (8000cec <__aeabi_d2ulz+0x34>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	4606      	mov	r6, r0
 8000cc0:	460f      	mov	r7, r1
 8000cc2:	f7ff fca9 	bl	8000618 <__aeabi_dmul>
 8000cc6:	f7ff ff57 	bl	8000b78 <__aeabi_d2uiz>
 8000cca:	4604      	mov	r4, r0
 8000ccc:	f7ff fc2a 	bl	8000524 <__aeabi_ui2d>
 8000cd0:	4b07      	ldr	r3, [pc, #28]	; (8000cf0 <__aeabi_d2ulz+0x38>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	f7ff fca0 	bl	8000618 <__aeabi_dmul>
 8000cd8:	4602      	mov	r2, r0
 8000cda:	460b      	mov	r3, r1
 8000cdc:	4630      	mov	r0, r6
 8000cde:	4639      	mov	r1, r7
 8000ce0:	f7ff fae2 	bl	80002a8 <__aeabi_dsub>
 8000ce4:	f7ff ff48 	bl	8000b78 <__aeabi_d2uiz>
 8000ce8:	4621      	mov	r1, r4
 8000cea:	bdd0      	pop	{r4, r6, r7, pc}
 8000cec:	3df00000 	.word	0x3df00000
 8000cf0:	41f00000 	.word	0x41f00000

08000cf4 <__udivmoddi4>:
 8000cf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cf8:	9e08      	ldr	r6, [sp, #32]
 8000cfa:	460d      	mov	r5, r1
 8000cfc:	4604      	mov	r4, r0
 8000cfe:	460f      	mov	r7, r1
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d14a      	bne.n	8000d9a <__udivmoddi4+0xa6>
 8000d04:	428a      	cmp	r2, r1
 8000d06:	4694      	mov	ip, r2
 8000d08:	d965      	bls.n	8000dd6 <__udivmoddi4+0xe2>
 8000d0a:	fab2 f382 	clz	r3, r2
 8000d0e:	b143      	cbz	r3, 8000d22 <__udivmoddi4+0x2e>
 8000d10:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d14:	f1c3 0220 	rsb	r2, r3, #32
 8000d18:	409f      	lsls	r7, r3
 8000d1a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d1e:	4317      	orrs	r7, r2
 8000d20:	409c      	lsls	r4, r3
 8000d22:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d26:	fa1f f58c 	uxth.w	r5, ip
 8000d2a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d2e:	0c22      	lsrs	r2, r4, #16
 8000d30:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d34:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d38:	fb01 f005 	mul.w	r0, r1, r5
 8000d3c:	4290      	cmp	r0, r2
 8000d3e:	d90a      	bls.n	8000d56 <__udivmoddi4+0x62>
 8000d40:	eb1c 0202 	adds.w	r2, ip, r2
 8000d44:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d48:	f080 811c 	bcs.w	8000f84 <__udivmoddi4+0x290>
 8000d4c:	4290      	cmp	r0, r2
 8000d4e:	f240 8119 	bls.w	8000f84 <__udivmoddi4+0x290>
 8000d52:	3902      	subs	r1, #2
 8000d54:	4462      	add	r2, ip
 8000d56:	1a12      	subs	r2, r2, r0
 8000d58:	b2a4      	uxth	r4, r4
 8000d5a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d5e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d62:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d66:	fb00 f505 	mul.w	r5, r0, r5
 8000d6a:	42a5      	cmp	r5, r4
 8000d6c:	d90a      	bls.n	8000d84 <__udivmoddi4+0x90>
 8000d6e:	eb1c 0404 	adds.w	r4, ip, r4
 8000d72:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d76:	f080 8107 	bcs.w	8000f88 <__udivmoddi4+0x294>
 8000d7a:	42a5      	cmp	r5, r4
 8000d7c:	f240 8104 	bls.w	8000f88 <__udivmoddi4+0x294>
 8000d80:	4464      	add	r4, ip
 8000d82:	3802      	subs	r0, #2
 8000d84:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d88:	1b64      	subs	r4, r4, r5
 8000d8a:	2100      	movs	r1, #0
 8000d8c:	b11e      	cbz	r6, 8000d96 <__udivmoddi4+0xa2>
 8000d8e:	40dc      	lsrs	r4, r3
 8000d90:	2300      	movs	r3, #0
 8000d92:	e9c6 4300 	strd	r4, r3, [r6]
 8000d96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d9a:	428b      	cmp	r3, r1
 8000d9c:	d908      	bls.n	8000db0 <__udivmoddi4+0xbc>
 8000d9e:	2e00      	cmp	r6, #0
 8000da0:	f000 80ed 	beq.w	8000f7e <__udivmoddi4+0x28a>
 8000da4:	2100      	movs	r1, #0
 8000da6:	e9c6 0500 	strd	r0, r5, [r6]
 8000daa:	4608      	mov	r0, r1
 8000dac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000db0:	fab3 f183 	clz	r1, r3
 8000db4:	2900      	cmp	r1, #0
 8000db6:	d149      	bne.n	8000e4c <__udivmoddi4+0x158>
 8000db8:	42ab      	cmp	r3, r5
 8000dba:	d302      	bcc.n	8000dc2 <__udivmoddi4+0xce>
 8000dbc:	4282      	cmp	r2, r0
 8000dbe:	f200 80f8 	bhi.w	8000fb2 <__udivmoddi4+0x2be>
 8000dc2:	1a84      	subs	r4, r0, r2
 8000dc4:	eb65 0203 	sbc.w	r2, r5, r3
 8000dc8:	2001      	movs	r0, #1
 8000dca:	4617      	mov	r7, r2
 8000dcc:	2e00      	cmp	r6, #0
 8000dce:	d0e2      	beq.n	8000d96 <__udivmoddi4+0xa2>
 8000dd0:	e9c6 4700 	strd	r4, r7, [r6]
 8000dd4:	e7df      	b.n	8000d96 <__udivmoddi4+0xa2>
 8000dd6:	b902      	cbnz	r2, 8000dda <__udivmoddi4+0xe6>
 8000dd8:	deff      	udf	#255	; 0xff
 8000dda:	fab2 f382 	clz	r3, r2
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	f040 8090 	bne.w	8000f04 <__udivmoddi4+0x210>
 8000de4:	1a8a      	subs	r2, r1, r2
 8000de6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dea:	fa1f fe8c 	uxth.w	lr, ip
 8000dee:	2101      	movs	r1, #1
 8000df0:	fbb2 f5f7 	udiv	r5, r2, r7
 8000df4:	fb07 2015 	mls	r0, r7, r5, r2
 8000df8:	0c22      	lsrs	r2, r4, #16
 8000dfa:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000dfe:	fb0e f005 	mul.w	r0, lr, r5
 8000e02:	4290      	cmp	r0, r2
 8000e04:	d908      	bls.n	8000e18 <__udivmoddi4+0x124>
 8000e06:	eb1c 0202 	adds.w	r2, ip, r2
 8000e0a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e0e:	d202      	bcs.n	8000e16 <__udivmoddi4+0x122>
 8000e10:	4290      	cmp	r0, r2
 8000e12:	f200 80cb 	bhi.w	8000fac <__udivmoddi4+0x2b8>
 8000e16:	4645      	mov	r5, r8
 8000e18:	1a12      	subs	r2, r2, r0
 8000e1a:	b2a4      	uxth	r4, r4
 8000e1c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e20:	fb07 2210 	mls	r2, r7, r0, r2
 8000e24:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e28:	fb0e fe00 	mul.w	lr, lr, r0
 8000e2c:	45a6      	cmp	lr, r4
 8000e2e:	d908      	bls.n	8000e42 <__udivmoddi4+0x14e>
 8000e30:	eb1c 0404 	adds.w	r4, ip, r4
 8000e34:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e38:	d202      	bcs.n	8000e40 <__udivmoddi4+0x14c>
 8000e3a:	45a6      	cmp	lr, r4
 8000e3c:	f200 80bb 	bhi.w	8000fb6 <__udivmoddi4+0x2c2>
 8000e40:	4610      	mov	r0, r2
 8000e42:	eba4 040e 	sub.w	r4, r4, lr
 8000e46:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e4a:	e79f      	b.n	8000d8c <__udivmoddi4+0x98>
 8000e4c:	f1c1 0720 	rsb	r7, r1, #32
 8000e50:	408b      	lsls	r3, r1
 8000e52:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e56:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e5a:	fa05 f401 	lsl.w	r4, r5, r1
 8000e5e:	fa20 f307 	lsr.w	r3, r0, r7
 8000e62:	40fd      	lsrs	r5, r7
 8000e64:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e68:	4323      	orrs	r3, r4
 8000e6a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e6e:	fa1f fe8c 	uxth.w	lr, ip
 8000e72:	fb09 5518 	mls	r5, r9, r8, r5
 8000e76:	0c1c      	lsrs	r4, r3, #16
 8000e78:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e7c:	fb08 f50e 	mul.w	r5, r8, lr
 8000e80:	42a5      	cmp	r5, r4
 8000e82:	fa02 f201 	lsl.w	r2, r2, r1
 8000e86:	fa00 f001 	lsl.w	r0, r0, r1
 8000e8a:	d90b      	bls.n	8000ea4 <__udivmoddi4+0x1b0>
 8000e8c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e90:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e94:	f080 8088 	bcs.w	8000fa8 <__udivmoddi4+0x2b4>
 8000e98:	42a5      	cmp	r5, r4
 8000e9a:	f240 8085 	bls.w	8000fa8 <__udivmoddi4+0x2b4>
 8000e9e:	f1a8 0802 	sub.w	r8, r8, #2
 8000ea2:	4464      	add	r4, ip
 8000ea4:	1b64      	subs	r4, r4, r5
 8000ea6:	b29d      	uxth	r5, r3
 8000ea8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000eac:	fb09 4413 	mls	r4, r9, r3, r4
 8000eb0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000eb4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000eb8:	45a6      	cmp	lr, r4
 8000eba:	d908      	bls.n	8000ece <__udivmoddi4+0x1da>
 8000ebc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ec0:	f103 35ff 	add.w	r5, r3, #4294967295
 8000ec4:	d26c      	bcs.n	8000fa0 <__udivmoddi4+0x2ac>
 8000ec6:	45a6      	cmp	lr, r4
 8000ec8:	d96a      	bls.n	8000fa0 <__udivmoddi4+0x2ac>
 8000eca:	3b02      	subs	r3, #2
 8000ecc:	4464      	add	r4, ip
 8000ece:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ed2:	fba3 9502 	umull	r9, r5, r3, r2
 8000ed6:	eba4 040e 	sub.w	r4, r4, lr
 8000eda:	42ac      	cmp	r4, r5
 8000edc:	46c8      	mov	r8, r9
 8000ede:	46ae      	mov	lr, r5
 8000ee0:	d356      	bcc.n	8000f90 <__udivmoddi4+0x29c>
 8000ee2:	d053      	beq.n	8000f8c <__udivmoddi4+0x298>
 8000ee4:	b156      	cbz	r6, 8000efc <__udivmoddi4+0x208>
 8000ee6:	ebb0 0208 	subs.w	r2, r0, r8
 8000eea:	eb64 040e 	sbc.w	r4, r4, lr
 8000eee:	fa04 f707 	lsl.w	r7, r4, r7
 8000ef2:	40ca      	lsrs	r2, r1
 8000ef4:	40cc      	lsrs	r4, r1
 8000ef6:	4317      	orrs	r7, r2
 8000ef8:	e9c6 7400 	strd	r7, r4, [r6]
 8000efc:	4618      	mov	r0, r3
 8000efe:	2100      	movs	r1, #0
 8000f00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f04:	f1c3 0120 	rsb	r1, r3, #32
 8000f08:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f0c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f10:	fa25 f101 	lsr.w	r1, r5, r1
 8000f14:	409d      	lsls	r5, r3
 8000f16:	432a      	orrs	r2, r5
 8000f18:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f1c:	fa1f fe8c 	uxth.w	lr, ip
 8000f20:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f24:	fb07 1510 	mls	r5, r7, r0, r1
 8000f28:	0c11      	lsrs	r1, r2, #16
 8000f2a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f2e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f32:	428d      	cmp	r5, r1
 8000f34:	fa04 f403 	lsl.w	r4, r4, r3
 8000f38:	d908      	bls.n	8000f4c <__udivmoddi4+0x258>
 8000f3a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f3e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f42:	d22f      	bcs.n	8000fa4 <__udivmoddi4+0x2b0>
 8000f44:	428d      	cmp	r5, r1
 8000f46:	d92d      	bls.n	8000fa4 <__udivmoddi4+0x2b0>
 8000f48:	3802      	subs	r0, #2
 8000f4a:	4461      	add	r1, ip
 8000f4c:	1b49      	subs	r1, r1, r5
 8000f4e:	b292      	uxth	r2, r2
 8000f50:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f54:	fb07 1115 	mls	r1, r7, r5, r1
 8000f58:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f5c:	fb05 f10e 	mul.w	r1, r5, lr
 8000f60:	4291      	cmp	r1, r2
 8000f62:	d908      	bls.n	8000f76 <__udivmoddi4+0x282>
 8000f64:	eb1c 0202 	adds.w	r2, ip, r2
 8000f68:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f6c:	d216      	bcs.n	8000f9c <__udivmoddi4+0x2a8>
 8000f6e:	4291      	cmp	r1, r2
 8000f70:	d914      	bls.n	8000f9c <__udivmoddi4+0x2a8>
 8000f72:	3d02      	subs	r5, #2
 8000f74:	4462      	add	r2, ip
 8000f76:	1a52      	subs	r2, r2, r1
 8000f78:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f7c:	e738      	b.n	8000df0 <__udivmoddi4+0xfc>
 8000f7e:	4631      	mov	r1, r6
 8000f80:	4630      	mov	r0, r6
 8000f82:	e708      	b.n	8000d96 <__udivmoddi4+0xa2>
 8000f84:	4639      	mov	r1, r7
 8000f86:	e6e6      	b.n	8000d56 <__udivmoddi4+0x62>
 8000f88:	4610      	mov	r0, r2
 8000f8a:	e6fb      	b.n	8000d84 <__udivmoddi4+0x90>
 8000f8c:	4548      	cmp	r0, r9
 8000f8e:	d2a9      	bcs.n	8000ee4 <__udivmoddi4+0x1f0>
 8000f90:	ebb9 0802 	subs.w	r8, r9, r2
 8000f94:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f98:	3b01      	subs	r3, #1
 8000f9a:	e7a3      	b.n	8000ee4 <__udivmoddi4+0x1f0>
 8000f9c:	4645      	mov	r5, r8
 8000f9e:	e7ea      	b.n	8000f76 <__udivmoddi4+0x282>
 8000fa0:	462b      	mov	r3, r5
 8000fa2:	e794      	b.n	8000ece <__udivmoddi4+0x1da>
 8000fa4:	4640      	mov	r0, r8
 8000fa6:	e7d1      	b.n	8000f4c <__udivmoddi4+0x258>
 8000fa8:	46d0      	mov	r8, sl
 8000faa:	e77b      	b.n	8000ea4 <__udivmoddi4+0x1b0>
 8000fac:	3d02      	subs	r5, #2
 8000fae:	4462      	add	r2, ip
 8000fb0:	e732      	b.n	8000e18 <__udivmoddi4+0x124>
 8000fb2:	4608      	mov	r0, r1
 8000fb4:	e70a      	b.n	8000dcc <__udivmoddi4+0xd8>
 8000fb6:	4464      	add	r4, ip
 8000fb8:	3802      	subs	r0, #2
 8000fba:	e742      	b.n	8000e42 <__udivmoddi4+0x14e>

08000fbc <__aeabi_idiv0>:
 8000fbc:	4770      	bx	lr
 8000fbe:	bf00      	nop

08000fc0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b082      	sub	sp, #8
 8000fc4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	607b      	str	r3, [r7, #4]
 8000fca:	4b10      	ldr	r3, [pc, #64]	; (800100c <MX_DMA_Init+0x4c>)
 8000fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fce:	4a0f      	ldr	r2, [pc, #60]	; (800100c <MX_DMA_Init+0x4c>)
 8000fd0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000fd4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fd6:	4b0d      	ldr	r3, [pc, #52]	; (800100c <MX_DMA_Init+0x4c>)
 8000fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000fde:	607b      	str	r3, [r7, #4]
 8000fe0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	2105      	movs	r1, #5
 8000fe6:	203b      	movs	r0, #59	; 0x3b
 8000fe8:	f002 fb8f 	bl	800370a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000fec:	203b      	movs	r0, #59	; 0x3b
 8000fee:	f002 fba8 	bl	8003742 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	2105      	movs	r1, #5
 8000ff6:	2045      	movs	r0, #69	; 0x45
 8000ff8:	f002 fb87 	bl	800370a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8000ffc:	2045      	movs	r0, #69	; 0x45
 8000ffe:	f002 fba0 	bl	8003742 <HAL_NVIC_EnableIRQ>

}
 8001002:	bf00      	nop
 8001004:	3708      	adds	r7, #8
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	40023800 	.word	0x40023800

08001010 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b08a      	sub	sp, #40	; 0x28
 8001014:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001016:	f107 0314 	add.w	r3, r7, #20
 800101a:	2200      	movs	r2, #0
 800101c:	601a      	str	r2, [r3, #0]
 800101e:	605a      	str	r2, [r3, #4]
 8001020:	609a      	str	r2, [r3, #8]
 8001022:	60da      	str	r2, [r3, #12]
 8001024:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001026:	2300      	movs	r3, #0
 8001028:	613b      	str	r3, [r7, #16]
 800102a:	4b2e      	ldr	r3, [pc, #184]	; (80010e4 <MX_GPIO_Init+0xd4>)
 800102c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102e:	4a2d      	ldr	r2, [pc, #180]	; (80010e4 <MX_GPIO_Init+0xd4>)
 8001030:	f043 0304 	orr.w	r3, r3, #4
 8001034:	6313      	str	r3, [r2, #48]	; 0x30
 8001036:	4b2b      	ldr	r3, [pc, #172]	; (80010e4 <MX_GPIO_Init+0xd4>)
 8001038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103a:	f003 0304 	and.w	r3, r3, #4
 800103e:	613b      	str	r3, [r7, #16]
 8001040:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001042:	2300      	movs	r3, #0
 8001044:	60fb      	str	r3, [r7, #12]
 8001046:	4b27      	ldr	r3, [pc, #156]	; (80010e4 <MX_GPIO_Init+0xd4>)
 8001048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104a:	4a26      	ldr	r2, [pc, #152]	; (80010e4 <MX_GPIO_Init+0xd4>)
 800104c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001050:	6313      	str	r3, [r2, #48]	; 0x30
 8001052:	4b24      	ldr	r3, [pc, #144]	; (80010e4 <MX_GPIO_Init+0xd4>)
 8001054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001056:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800105a:	60fb      	str	r3, [r7, #12]
 800105c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800105e:	2300      	movs	r3, #0
 8001060:	60bb      	str	r3, [r7, #8]
 8001062:	4b20      	ldr	r3, [pc, #128]	; (80010e4 <MX_GPIO_Init+0xd4>)
 8001064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001066:	4a1f      	ldr	r2, [pc, #124]	; (80010e4 <MX_GPIO_Init+0xd4>)
 8001068:	f043 0301 	orr.w	r3, r3, #1
 800106c:	6313      	str	r3, [r2, #48]	; 0x30
 800106e:	4b1d      	ldr	r3, [pc, #116]	; (80010e4 <MX_GPIO_Init+0xd4>)
 8001070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001072:	f003 0301 	and.w	r3, r3, #1
 8001076:	60bb      	str	r3, [r7, #8]
 8001078:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800107a:	2300      	movs	r3, #0
 800107c:	607b      	str	r3, [r7, #4]
 800107e:	4b19      	ldr	r3, [pc, #100]	; (80010e4 <MX_GPIO_Init+0xd4>)
 8001080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001082:	4a18      	ldr	r2, [pc, #96]	; (80010e4 <MX_GPIO_Init+0xd4>)
 8001084:	f043 0302 	orr.w	r3, r3, #2
 8001088:	6313      	str	r3, [r2, #48]	; 0x30
 800108a:	4b16      	ldr	r3, [pc, #88]	; (80010e4 <MX_GPIO_Init+0xd4>)
 800108c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800108e:	f003 0302 	and.w	r3, r3, #2
 8001092:	607b      	str	r3, [r7, #4]
 8001094:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001096:	2200      	movs	r2, #0
 8001098:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800109c:	4812      	ldr	r0, [pc, #72]	; (80010e8 <MX_GPIO_Init+0xd8>)
 800109e:	f003 f8a5 	bl	80041ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80010a2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010a8:	2301      	movs	r3, #1
 80010aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ac:	2300      	movs	r3, #0
 80010ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010b0:	2300      	movs	r3, #0
 80010b2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010b4:	f107 0314 	add.w	r3, r7, #20
 80010b8:	4619      	mov	r1, r3
 80010ba:	480b      	ldr	r0, [pc, #44]	; (80010e8 <MX_GPIO_Init+0xd8>)
 80010bc:	f002 fefa 	bl	8003eb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80010c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80010c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010c6:	2300      	movs	r3, #0
 80010c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ca:	2300      	movs	r3, #0
 80010cc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010ce:	f107 0314 	add.w	r3, r7, #20
 80010d2:	4619      	mov	r1, r3
 80010d4:	4805      	ldr	r0, [pc, #20]	; (80010ec <MX_GPIO_Init+0xdc>)
 80010d6:	f002 feed 	bl	8003eb4 <HAL_GPIO_Init>

}
 80010da:	bf00      	nop
 80010dc:	3728      	adds	r7, #40	; 0x28
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	40023800 	.word	0x40023800
 80010e8:	40020800 	.word	0x40020800
 80010ec:	40020400 	.word	0x40020400

080010f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010f4:	f002 f998 	bl	8003428 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010f8:	f000 f81c 	bl	8001134 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010fc:	f7ff ff88 	bl	8001010 <MX_GPIO_Init>
  MX_DMA_Init();
 8001100:	f7ff ff5e 	bl	8000fc0 <MX_DMA_Init>
  MX_USB_DEVICE_Init();
 8001104:	f00e f8f4 	bl	800f2f0 <MX_USB_DEVICE_Init>
  MX_SDIO_SD_Init();
 8001108:	f000 f882 	bl	8001210 <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 800110c:	f008 fd8a 	bl	8009c24 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  cliInit();
 8001110:	f000 fba6 	bl	8001860 <cliInit>
  ledInit();
 8001114:	f001 fe20 	bl	8002d58 <ledInit>
  gpioInit();
 8001118:	f001 fcd0 	bl	8002abc <gpioInit>
  sdInit();
 800111c:	f001 fec6 	bl	8002eac <sdInit>
  fatfsInit();
 8001120:	f001 faec 	bl	80026fc <fatfsInit>

  cliOpen(_DEF_UART1, 115200);
 8001124:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8001128:	2000      	movs	r0, #0
 800112a:	f000 fbe5 	bl	80018f8 <cliOpen>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  	cliMain();
 800112e:	f000 fc9b 	bl	8001a68 <cliMain>
 8001132:	e7fc      	b.n	800112e <main+0x3e>

08001134 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b094      	sub	sp, #80	; 0x50
 8001138:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800113a:	f107 0320 	add.w	r3, r7, #32
 800113e:	2230      	movs	r2, #48	; 0x30
 8001140:	2100      	movs	r1, #0
 8001142:	4618      	mov	r0, r3
 8001144:	f00f fe80 	bl	8010e48 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001148:	f107 030c 	add.w	r3, r7, #12
 800114c:	2200      	movs	r2, #0
 800114e:	601a      	str	r2, [r3, #0]
 8001150:	605a      	str	r2, [r3, #4]
 8001152:	609a      	str	r2, [r3, #8]
 8001154:	60da      	str	r2, [r3, #12]
 8001156:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001158:	2300      	movs	r3, #0
 800115a:	60bb      	str	r3, [r7, #8]
 800115c:	4b27      	ldr	r3, [pc, #156]	; (80011fc <SystemClock_Config+0xc8>)
 800115e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001160:	4a26      	ldr	r2, [pc, #152]	; (80011fc <SystemClock_Config+0xc8>)
 8001162:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001166:	6413      	str	r3, [r2, #64]	; 0x40
 8001168:	4b24      	ldr	r3, [pc, #144]	; (80011fc <SystemClock_Config+0xc8>)
 800116a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800116c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001170:	60bb      	str	r3, [r7, #8]
 8001172:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001174:	2300      	movs	r3, #0
 8001176:	607b      	str	r3, [r7, #4]
 8001178:	4b21      	ldr	r3, [pc, #132]	; (8001200 <SystemClock_Config+0xcc>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	4a20      	ldr	r2, [pc, #128]	; (8001200 <SystemClock_Config+0xcc>)
 800117e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001182:	6013      	str	r3, [r2, #0]
 8001184:	4b1e      	ldr	r3, [pc, #120]	; (8001200 <SystemClock_Config+0xcc>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800118c:	607b      	str	r3, [r7, #4]
 800118e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001190:	2301      	movs	r3, #1
 8001192:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001194:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001198:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800119a:	2302      	movs	r3, #2
 800119c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800119e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80011a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80011a4:	2319      	movs	r3, #25
 80011a6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 80011a8:	23c0      	movs	r3, #192	; 0xc0
 80011aa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80011ac:	2302      	movs	r3, #2
 80011ae:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80011b0:	2304      	movs	r3, #4
 80011b2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011b4:	f107 0320 	add.w	r3, r7, #32
 80011b8:	4618      	mov	r0, r3
 80011ba:	f004 fa9b 	bl	80056f4 <HAL_RCC_OscConfig>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d001      	beq.n	80011c8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80011c4:	f000 f81e 	bl	8001204 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011c8:	230f      	movs	r3, #15
 80011ca:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011cc:	2302      	movs	r3, #2
 80011ce:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011d0:	2300      	movs	r3, #0
 80011d2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80011d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011d8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011da:	2300      	movs	r3, #0
 80011dc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80011de:	f107 030c 	add.w	r3, r7, #12
 80011e2:	2103      	movs	r1, #3
 80011e4:	4618      	mov	r0, r3
 80011e6:	f004 fcfd 	bl	8005be4 <HAL_RCC_ClockConfig>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d001      	beq.n	80011f4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80011f0:	f000 f808 	bl	8001204 <Error_Handler>
  }
}
 80011f4:	bf00      	nop
 80011f6:	3750      	adds	r7, #80	; 0x50
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	40023800 	.word	0x40023800
 8001200:	40007000 	.word	0x40007000

08001204 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001204:	b480      	push	{r7}
 8001206:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001208:	b672      	cpsid	i
}
 800120a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800120c:	e7fe      	b.n	800120c <Error_Handler+0x8>
	...

08001210 <MX_SDIO_SD_Init>:
DMA_HandleTypeDef hdma_sdio_tx;

/* SDIO init function */

void MX_SDIO_SD_Init(void)
{
 8001210:	b480      	push	{r7}
 8001212:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8001214:	4b0d      	ldr	r3, [pc, #52]	; (800124c <MX_SDIO_SD_Init+0x3c>)
 8001216:	4a0e      	ldr	r2, [pc, #56]	; (8001250 <MX_SDIO_SD_Init+0x40>)
 8001218:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 800121a:	4b0c      	ldr	r3, [pc, #48]	; (800124c <MX_SDIO_SD_Init+0x3c>)
 800121c:	2200      	movs	r2, #0
 800121e:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8001220:	4b0a      	ldr	r3, [pc, #40]	; (800124c <MX_SDIO_SD_Init+0x3c>)
 8001222:	2200      	movs	r2, #0
 8001224:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8001226:	4b09      	ldr	r3, [pc, #36]	; (800124c <MX_SDIO_SD_Init+0x3c>)
 8001228:	2200      	movs	r2, #0
 800122a:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_4B;
 800122c:	4b07      	ldr	r3, [pc, #28]	; (800124c <MX_SDIO_SD_Init+0x3c>)
 800122e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001232:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8001234:	4b05      	ldr	r3, [pc, #20]	; (800124c <MX_SDIO_SD_Init+0x3c>)
 8001236:	2200      	movs	r2, #0
 8001238:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 800123a:	4b04      	ldr	r3, [pc, #16]	; (800124c <MX_SDIO_SD_Init+0x3c>)
 800123c:	2200      	movs	r2, #0
 800123e:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8001240:	bf00      	nop
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr
 800124a:	bf00      	nop
 800124c:	200002f4 	.word	0x200002f4
 8001250:	40012c00 	.word	0x40012c00

08001254 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b08a      	sub	sp, #40	; 0x28
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800125c:	f107 0314 	add.w	r3, r7, #20
 8001260:	2200      	movs	r2, #0
 8001262:	601a      	str	r2, [r3, #0]
 8001264:	605a      	str	r2, [r3, #4]
 8001266:	609a      	str	r2, [r3, #8]
 8001268:	60da      	str	r2, [r3, #12]
 800126a:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDIO)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	4a68      	ldr	r2, [pc, #416]	; (8001414 <HAL_SD_MspInit+0x1c0>)
 8001272:	4293      	cmp	r3, r2
 8001274:	f040 80ca 	bne.w	800140c <HAL_SD_MspInit+0x1b8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* SDIO clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8001278:	2300      	movs	r3, #0
 800127a:	613b      	str	r3, [r7, #16]
 800127c:	4b66      	ldr	r3, [pc, #408]	; (8001418 <HAL_SD_MspInit+0x1c4>)
 800127e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001280:	4a65      	ldr	r2, [pc, #404]	; (8001418 <HAL_SD_MspInit+0x1c4>)
 8001282:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001286:	6453      	str	r3, [r2, #68]	; 0x44
 8001288:	4b63      	ldr	r3, [pc, #396]	; (8001418 <HAL_SD_MspInit+0x1c4>)
 800128a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800128c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001290:	613b      	str	r3, [r7, #16]
 8001292:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001294:	2300      	movs	r3, #0
 8001296:	60fb      	str	r3, [r7, #12]
 8001298:	4b5f      	ldr	r3, [pc, #380]	; (8001418 <HAL_SD_MspInit+0x1c4>)
 800129a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129c:	4a5e      	ldr	r2, [pc, #376]	; (8001418 <HAL_SD_MspInit+0x1c4>)
 800129e:	f043 0301 	orr.w	r3, r3, #1
 80012a2:	6313      	str	r3, [r2, #48]	; 0x30
 80012a4:	4b5c      	ldr	r3, [pc, #368]	; (8001418 <HAL_SD_MspInit+0x1c4>)
 80012a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a8:	f003 0301 	and.w	r3, r3, #1
 80012ac:	60fb      	str	r3, [r7, #12]
 80012ae:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012b0:	2300      	movs	r3, #0
 80012b2:	60bb      	str	r3, [r7, #8]
 80012b4:	4b58      	ldr	r3, [pc, #352]	; (8001418 <HAL_SD_MspInit+0x1c4>)
 80012b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b8:	4a57      	ldr	r2, [pc, #348]	; (8001418 <HAL_SD_MspInit+0x1c4>)
 80012ba:	f043 0302 	orr.w	r3, r3, #2
 80012be:	6313      	str	r3, [r2, #48]	; 0x30
 80012c0:	4b55      	ldr	r3, [pc, #340]	; (8001418 <HAL_SD_MspInit+0x1c4>)
 80012c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c4:	f003 0302 	and.w	r3, r3, #2
 80012c8:	60bb      	str	r3, [r7, #8]
 80012ca:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> SDIO_D1
    PA9     ------> SDIO_D2
    PB5     ------> SDIO_D3
    PB7     ------> SDIO_D0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9;
 80012cc:	f44f 7350 	mov.w	r3, #832	; 0x340
 80012d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012d2:	2302      	movs	r3, #2
 80012d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012d6:	2301      	movs	r3, #1
 80012d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012da:	2303      	movs	r3, #3
 80012dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80012de:	230c      	movs	r3, #12
 80012e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012e2:	f107 0314 	add.w	r3, r7, #20
 80012e6:	4619      	mov	r1, r3
 80012e8:	484c      	ldr	r0, [pc, #304]	; (800141c <HAL_SD_MspInit+0x1c8>)
 80012ea:	f002 fde3 	bl	8003eb4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_5|GPIO_PIN_7;
 80012ee:	f248 03a0 	movw	r3, #32928	; 0x80a0
 80012f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012f4:	2302      	movs	r3, #2
 80012f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012f8:	2301      	movs	r3, #1
 80012fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012fc:	2303      	movs	r3, #3
 80012fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001300:	230c      	movs	r3, #12
 8001302:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001304:	f107 0314 	add.w	r3, r7, #20
 8001308:	4619      	mov	r1, r3
 800130a:	4845      	ldr	r0, [pc, #276]	; (8001420 <HAL_SD_MspInit+0x1cc>)
 800130c:	f002 fdd2 	bl	8003eb4 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 8001310:	4b44      	ldr	r3, [pc, #272]	; (8001424 <HAL_SD_MspInit+0x1d0>)
 8001312:	4a45      	ldr	r2, [pc, #276]	; (8001428 <HAL_SD_MspInit+0x1d4>)
 8001314:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8001316:	4b43      	ldr	r3, [pc, #268]	; (8001424 <HAL_SD_MspInit+0x1d0>)
 8001318:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800131c:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800131e:	4b41      	ldr	r3, [pc, #260]	; (8001424 <HAL_SD_MspInit+0x1d0>)
 8001320:	2200      	movs	r2, #0
 8001322:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001324:	4b3f      	ldr	r3, [pc, #252]	; (8001424 <HAL_SD_MspInit+0x1d0>)
 8001326:	2200      	movs	r2, #0
 8001328:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 800132a:	4b3e      	ldr	r3, [pc, #248]	; (8001424 <HAL_SD_MspInit+0x1d0>)
 800132c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001330:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001332:	4b3c      	ldr	r3, [pc, #240]	; (8001424 <HAL_SD_MspInit+0x1d0>)
 8001334:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001338:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800133a:	4b3a      	ldr	r3, [pc, #232]	; (8001424 <HAL_SD_MspInit+0x1d0>)
 800133c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001340:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8001342:	4b38      	ldr	r3, [pc, #224]	; (8001424 <HAL_SD_MspInit+0x1d0>)
 8001344:	2220      	movs	r2, #32
 8001346:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001348:	4b36      	ldr	r3, [pc, #216]	; (8001424 <HAL_SD_MspInit+0x1d0>)
 800134a:	2200      	movs	r2, #0
 800134c:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800134e:	4b35      	ldr	r3, [pc, #212]	; (8001424 <HAL_SD_MspInit+0x1d0>)
 8001350:	2204      	movs	r2, #4
 8001352:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001354:	4b33      	ldr	r3, [pc, #204]	; (8001424 <HAL_SD_MspInit+0x1d0>)
 8001356:	2203      	movs	r2, #3
 8001358:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 800135a:	4b32      	ldr	r3, [pc, #200]	; (8001424 <HAL_SD_MspInit+0x1d0>)
 800135c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001360:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8001362:	4b30      	ldr	r3, [pc, #192]	; (8001424 <HAL_SD_MspInit+0x1d0>)
 8001364:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001368:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 800136a:	482e      	ldr	r0, [pc, #184]	; (8001424 <HAL_SD_MspInit+0x1d0>)
 800136c:	f002 fa04 	bl	8003778 <HAL_DMA_Init>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d001      	beq.n	800137a <HAL_SD_MspInit+0x126>
    {
      Error_Handler();
 8001376:	f7ff ff45 	bl	8001204 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmarx,hdma_sdio_rx);
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	4a29      	ldr	r2, [pc, #164]	; (8001424 <HAL_SD_MspInit+0x1d0>)
 800137e:	641a      	str	r2, [r3, #64]	; 0x40
 8001380:	4a28      	ldr	r2, [pc, #160]	; (8001424 <HAL_SD_MspInit+0x1d0>)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 8001386:	4b29      	ldr	r3, [pc, #164]	; (800142c <HAL_SD_MspInit+0x1d8>)
 8001388:	4a29      	ldr	r2, [pc, #164]	; (8001430 <HAL_SD_MspInit+0x1dc>)
 800138a:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 800138c:	4b27      	ldr	r3, [pc, #156]	; (800142c <HAL_SD_MspInit+0x1d8>)
 800138e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001392:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001394:	4b25      	ldr	r3, [pc, #148]	; (800142c <HAL_SD_MspInit+0x1d8>)
 8001396:	2240      	movs	r2, #64	; 0x40
 8001398:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800139a:	4b24      	ldr	r3, [pc, #144]	; (800142c <HAL_SD_MspInit+0x1d8>)
 800139c:	2200      	movs	r2, #0
 800139e:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 80013a0:	4b22      	ldr	r3, [pc, #136]	; (800142c <HAL_SD_MspInit+0x1d8>)
 80013a2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80013a6:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80013a8:	4b20      	ldr	r3, [pc, #128]	; (800142c <HAL_SD_MspInit+0x1d8>)
 80013aa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80013ae:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80013b0:	4b1e      	ldr	r3, [pc, #120]	; (800142c <HAL_SD_MspInit+0x1d8>)
 80013b2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80013b6:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 80013b8:	4b1c      	ldr	r3, [pc, #112]	; (800142c <HAL_SD_MspInit+0x1d8>)
 80013ba:	2220      	movs	r2, #32
 80013bc:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 80013be:	4b1b      	ldr	r3, [pc, #108]	; (800142c <HAL_SD_MspInit+0x1d8>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80013c4:	4b19      	ldr	r3, [pc, #100]	; (800142c <HAL_SD_MspInit+0x1d8>)
 80013c6:	2204      	movs	r2, #4
 80013c8:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80013ca:	4b18      	ldr	r3, [pc, #96]	; (800142c <HAL_SD_MspInit+0x1d8>)
 80013cc:	2203      	movs	r2, #3
 80013ce:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 80013d0:	4b16      	ldr	r3, [pc, #88]	; (800142c <HAL_SD_MspInit+0x1d8>)
 80013d2:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80013d6:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 80013d8:	4b14      	ldr	r3, [pc, #80]	; (800142c <HAL_SD_MspInit+0x1d8>)
 80013da:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80013de:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 80013e0:	4812      	ldr	r0, [pc, #72]	; (800142c <HAL_SD_MspInit+0x1d8>)
 80013e2:	f002 f9c9 	bl	8003778 <HAL_DMA_Init>
 80013e6:	4603      	mov	r3, r0
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d001      	beq.n	80013f0 <HAL_SD_MspInit+0x19c>
    {
      Error_Handler();
 80013ec:	f7ff ff0a 	bl	8001204 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmatx,hdma_sdio_tx);
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	4a0e      	ldr	r2, [pc, #56]	; (800142c <HAL_SD_MspInit+0x1d8>)
 80013f4:	63da      	str	r2, [r3, #60]	; 0x3c
 80013f6:	4a0d      	ldr	r2, [pc, #52]	; (800142c <HAL_SD_MspInit+0x1d8>)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 5, 0);
 80013fc:	2200      	movs	r2, #0
 80013fe:	2105      	movs	r1, #5
 8001400:	2031      	movs	r0, #49	; 0x31
 8001402:	f002 f982 	bl	800370a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8001406:	2031      	movs	r0, #49	; 0x31
 8001408:	f002 f99b 	bl	8003742 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }
}
 800140c:	bf00      	nop
 800140e:	3728      	adds	r7, #40	; 0x28
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}
 8001414:	40012c00 	.word	0x40012c00
 8001418:	40023800 	.word	0x40023800
 800141c:	40020000 	.word	0x40020000
 8001420:	40020400 	.word	0x40020400
 8001424:	20000378 	.word	0x20000378
 8001428:	40026458 	.word	0x40026458
 800142c:	200003d8 	.word	0x200003d8
 8001430:	400264a0 	.word	0x400264a0

08001434 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001434:	b480      	push	{r7}
 8001436:	b083      	sub	sp, #12
 8001438:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800143a:	2300      	movs	r3, #0
 800143c:	607b      	str	r3, [r7, #4]
 800143e:	4b10      	ldr	r3, [pc, #64]	; (8001480 <HAL_MspInit+0x4c>)
 8001440:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001442:	4a0f      	ldr	r2, [pc, #60]	; (8001480 <HAL_MspInit+0x4c>)
 8001444:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001448:	6453      	str	r3, [r2, #68]	; 0x44
 800144a:	4b0d      	ldr	r3, [pc, #52]	; (8001480 <HAL_MspInit+0x4c>)
 800144c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800144e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001452:	607b      	str	r3, [r7, #4]
 8001454:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001456:	2300      	movs	r3, #0
 8001458:	603b      	str	r3, [r7, #0]
 800145a:	4b09      	ldr	r3, [pc, #36]	; (8001480 <HAL_MspInit+0x4c>)
 800145c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800145e:	4a08      	ldr	r2, [pc, #32]	; (8001480 <HAL_MspInit+0x4c>)
 8001460:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001464:	6413      	str	r3, [r2, #64]	; 0x40
 8001466:	4b06      	ldr	r3, [pc, #24]	; (8001480 <HAL_MspInit+0x4c>)
 8001468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800146a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800146e:	603b      	str	r3, [r7, #0]
 8001470:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001472:	bf00      	nop
 8001474:	370c      	adds	r7, #12
 8001476:	46bd      	mov	sp, r7
 8001478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147c:	4770      	bx	lr
 800147e:	bf00      	nop
 8001480:	40023800 	.word	0x40023800

08001484 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001484:	b480      	push	{r7}
 8001486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001488:	e7fe      	b.n	8001488 <NMI_Handler+0x4>

0800148a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800148a:	b480      	push	{r7}
 800148c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800148e:	e7fe      	b.n	800148e <HardFault_Handler+0x4>

08001490 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001490:	b480      	push	{r7}
 8001492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001494:	e7fe      	b.n	8001494 <MemManage_Handler+0x4>

08001496 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001496:	b480      	push	{r7}
 8001498:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800149a:	e7fe      	b.n	800149a <BusFault_Handler+0x4>

0800149c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800149c:	b480      	push	{r7}
 800149e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014a0:	e7fe      	b.n	80014a0 <UsageFault_Handler+0x4>

080014a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014a2:	b480      	push	{r7}
 80014a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014a6:	bf00      	nop
 80014a8:	46bd      	mov	sp, r7
 80014aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ae:	4770      	bx	lr

080014b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014b0:	b480      	push	{r7}
 80014b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014b4:	bf00      	nop
 80014b6:	46bd      	mov	sp, r7
 80014b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014bc:	4770      	bx	lr

080014be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014be:	b480      	push	{r7}
 80014c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014c2:	bf00      	nop
 80014c4:	46bd      	mov	sp, r7
 80014c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ca:	4770      	bx	lr

080014cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014d0:	f001 fffc 	bl	80034cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014d4:	bf00      	nop
 80014d6:	bd80      	pop	{r7, pc}

080014d8 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 80014dc:	4802      	ldr	r0, [pc, #8]	; (80014e8 <SDIO_IRQHandler+0x10>)
 80014de:	f005 fa3f 	bl	8006960 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 80014e2:	bf00      	nop
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	200002f4 	.word	0x200002f4

080014ec <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 80014f0:	4802      	ldr	r0, [pc, #8]	; (80014fc <DMA2_Stream3_IRQHandler+0x10>)
 80014f2:	f002 fa69 	bl	80039c8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 80014f6:	bf00      	nop
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	20000378 	.word	0x20000378

08001500 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001504:	4802      	ldr	r0, [pc, #8]	; (8001510 <OTG_FS_IRQHandler+0x10>)
 8001506:	f002 ffe8 	bl	80044da <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800150a:	bf00      	nop
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	20002224 	.word	0x20002224

08001514 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8001518:	4802      	ldr	r0, [pc, #8]	; (8001524 <DMA2_Stream6_IRQHandler+0x10>)
 800151a:	f002 fa55 	bl	80039c8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 800151e:	bf00      	nop
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	200003d8 	.word	0x200003d8

08001528 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001528:	b480      	push	{r7}
 800152a:	af00      	add	r7, sp, #0
  return 1;
 800152c:	2301      	movs	r3, #1
}
 800152e:	4618      	mov	r0, r3
 8001530:	46bd      	mov	sp, r7
 8001532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001536:	4770      	bx	lr

08001538 <_kill>:

int _kill(int pid, int sig)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b082      	sub	sp, #8
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
 8001540:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001542:	f00f fd0d 	bl	8010f60 <__errno>
 8001546:	4603      	mov	r3, r0
 8001548:	2216      	movs	r2, #22
 800154a:	601a      	str	r2, [r3, #0]
  return -1;
 800154c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001550:	4618      	mov	r0, r3
 8001552:	3708      	adds	r7, #8
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}

08001558 <_exit>:

void _exit (int status)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b082      	sub	sp, #8
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001560:	f04f 31ff 	mov.w	r1, #4294967295
 8001564:	6878      	ldr	r0, [r7, #4]
 8001566:	f7ff ffe7 	bl	8001538 <_kill>
  while (1) {}    /* Make sure we hang here */
 800156a:	e7fe      	b.n	800156a <_exit+0x12>

0800156c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b086      	sub	sp, #24
 8001570:	af00      	add	r7, sp, #0
 8001572:	60f8      	str	r0, [r7, #12]
 8001574:	60b9      	str	r1, [r7, #8]
 8001576:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001578:	2300      	movs	r3, #0
 800157a:	617b      	str	r3, [r7, #20]
 800157c:	e00a      	b.n	8001594 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800157e:	f3af 8000 	nop.w
 8001582:	4601      	mov	r1, r0
 8001584:	68bb      	ldr	r3, [r7, #8]
 8001586:	1c5a      	adds	r2, r3, #1
 8001588:	60ba      	str	r2, [r7, #8]
 800158a:	b2ca      	uxtb	r2, r1
 800158c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800158e:	697b      	ldr	r3, [r7, #20]
 8001590:	3301      	adds	r3, #1
 8001592:	617b      	str	r3, [r7, #20]
 8001594:	697a      	ldr	r2, [r7, #20]
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	429a      	cmp	r2, r3
 800159a:	dbf0      	blt.n	800157e <_read+0x12>
  }

  return len;
 800159c:	687b      	ldr	r3, [r7, #4]
}
 800159e:	4618      	mov	r0, r3
 80015a0:	3718      	adds	r7, #24
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}

080015a6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80015a6:	b580      	push	{r7, lr}
 80015a8:	b086      	sub	sp, #24
 80015aa:	af00      	add	r7, sp, #0
 80015ac:	60f8      	str	r0, [r7, #12]
 80015ae:	60b9      	str	r1, [r7, #8]
 80015b0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015b2:	2300      	movs	r3, #0
 80015b4:	617b      	str	r3, [r7, #20]
 80015b6:	e009      	b.n	80015cc <_write+0x26>
  {
    __io_putchar(*ptr++);
 80015b8:	68bb      	ldr	r3, [r7, #8]
 80015ba:	1c5a      	adds	r2, r3, #1
 80015bc:	60ba      	str	r2, [r7, #8]
 80015be:	781b      	ldrb	r3, [r3, #0]
 80015c0:	4618      	mov	r0, r3
 80015c2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015c6:	697b      	ldr	r3, [r7, #20]
 80015c8:	3301      	adds	r3, #1
 80015ca:	617b      	str	r3, [r7, #20]
 80015cc:	697a      	ldr	r2, [r7, #20]
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	429a      	cmp	r2, r3
 80015d2:	dbf1      	blt.n	80015b8 <_write+0x12>
  }
  return len;
 80015d4:	687b      	ldr	r3, [r7, #4]
}
 80015d6:	4618      	mov	r0, r3
 80015d8:	3718      	adds	r7, #24
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}

080015de <_close>:

int _close(int file)
{
 80015de:	b480      	push	{r7}
 80015e0:	b083      	sub	sp, #12
 80015e2:	af00      	add	r7, sp, #0
 80015e4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80015e6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015ea:	4618      	mov	r0, r3
 80015ec:	370c      	adds	r7, #12
 80015ee:	46bd      	mov	sp, r7
 80015f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f4:	4770      	bx	lr

080015f6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80015f6:	b480      	push	{r7}
 80015f8:	b083      	sub	sp, #12
 80015fa:	af00      	add	r7, sp, #0
 80015fc:	6078      	str	r0, [r7, #4]
 80015fe:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001606:	605a      	str	r2, [r3, #4]
  return 0;
 8001608:	2300      	movs	r3, #0
}
 800160a:	4618      	mov	r0, r3
 800160c:	370c      	adds	r7, #12
 800160e:	46bd      	mov	sp, r7
 8001610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001614:	4770      	bx	lr

08001616 <_isatty>:

int _isatty(int file)
{
 8001616:	b480      	push	{r7}
 8001618:	b083      	sub	sp, #12
 800161a:	af00      	add	r7, sp, #0
 800161c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800161e:	2301      	movs	r3, #1
}
 8001620:	4618      	mov	r0, r3
 8001622:	370c      	adds	r7, #12
 8001624:	46bd      	mov	sp, r7
 8001626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162a:	4770      	bx	lr

0800162c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800162c:	b480      	push	{r7}
 800162e:	b085      	sub	sp, #20
 8001630:	af00      	add	r7, sp, #0
 8001632:	60f8      	str	r0, [r7, #12]
 8001634:	60b9      	str	r1, [r7, #8]
 8001636:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001638:	2300      	movs	r3, #0
}
 800163a:	4618      	mov	r0, r3
 800163c:	3714      	adds	r7, #20
 800163e:	46bd      	mov	sp, r7
 8001640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001644:	4770      	bx	lr
	...

08001648 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b086      	sub	sp, #24
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001650:	4a14      	ldr	r2, [pc, #80]	; (80016a4 <_sbrk+0x5c>)
 8001652:	4b15      	ldr	r3, [pc, #84]	; (80016a8 <_sbrk+0x60>)
 8001654:	1ad3      	subs	r3, r2, r3
 8001656:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001658:	697b      	ldr	r3, [r7, #20]
 800165a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800165c:	4b13      	ldr	r3, [pc, #76]	; (80016ac <_sbrk+0x64>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	2b00      	cmp	r3, #0
 8001662:	d102      	bne.n	800166a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001664:	4b11      	ldr	r3, [pc, #68]	; (80016ac <_sbrk+0x64>)
 8001666:	4a12      	ldr	r2, [pc, #72]	; (80016b0 <_sbrk+0x68>)
 8001668:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800166a:	4b10      	ldr	r3, [pc, #64]	; (80016ac <_sbrk+0x64>)
 800166c:	681a      	ldr	r2, [r3, #0]
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	4413      	add	r3, r2
 8001672:	693a      	ldr	r2, [r7, #16]
 8001674:	429a      	cmp	r2, r3
 8001676:	d207      	bcs.n	8001688 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001678:	f00f fc72 	bl	8010f60 <__errno>
 800167c:	4603      	mov	r3, r0
 800167e:	220c      	movs	r2, #12
 8001680:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001682:	f04f 33ff 	mov.w	r3, #4294967295
 8001686:	e009      	b.n	800169c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001688:	4b08      	ldr	r3, [pc, #32]	; (80016ac <_sbrk+0x64>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800168e:	4b07      	ldr	r3, [pc, #28]	; (80016ac <_sbrk+0x64>)
 8001690:	681a      	ldr	r2, [r3, #0]
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	4413      	add	r3, r2
 8001696:	4a05      	ldr	r2, [pc, #20]	; (80016ac <_sbrk+0x64>)
 8001698:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800169a:	68fb      	ldr	r3, [r7, #12]
}
 800169c:	4618      	mov	r0, r3
 800169e:	3718      	adds	r7, #24
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}
 80016a4:	20020000 	.word	0x20020000
 80016a8:	00000400 	.word	0x00000400
 80016ac:	20000438 	.word	0x20000438
 80016b0:	20002a78 	.word	0x20002a78

080016b4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016b4:	b480      	push	{r7}
 80016b6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80016b8:	4b06      	ldr	r3, [pc, #24]	; (80016d4 <SystemInit+0x20>)
 80016ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016be:	4a05      	ldr	r2, [pc, #20]	; (80016d4 <SystemInit+0x20>)
 80016c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80016c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016c8:	bf00      	nop
 80016ca:	46bd      	mov	sp, r7
 80016cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d0:	4770      	bx	lr
 80016d2:	bf00      	nop
 80016d4:	e000ed00 	.word	0xe000ed00

080016d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80016d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001710 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80016dc:	f7ff ffea 	bl	80016b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80016e0:	480c      	ldr	r0, [pc, #48]	; (8001714 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80016e2:	490d      	ldr	r1, [pc, #52]	; (8001718 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80016e4:	4a0d      	ldr	r2, [pc, #52]	; (800171c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80016e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016e8:	e002      	b.n	80016f0 <LoopCopyDataInit>

080016ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016ee:	3304      	adds	r3, #4

080016f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016f4:	d3f9      	bcc.n	80016ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016f6:	4a0a      	ldr	r2, [pc, #40]	; (8001720 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80016f8:	4c0a      	ldr	r4, [pc, #40]	; (8001724 <LoopFillZerobss+0x22>)
  movs r3, #0
 80016fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016fc:	e001      	b.n	8001702 <LoopFillZerobss>

080016fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001700:	3204      	adds	r2, #4

08001702 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001702:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001704:	d3fb      	bcc.n	80016fe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001706:	f00f fc31 	bl	8010f6c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800170a:	f7ff fcf1 	bl	80010f0 <main>
  bx  lr    
 800170e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001710:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001714:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001718:	200002d8 	.word	0x200002d8
  ldr r2, =_sidata
 800171c:	08013a0c 	.word	0x08013a0c
  ldr r2, =_sbss
 8001720:	200002d8 	.word	0x200002d8
  ldr r4, =_ebss
 8001724:	20002a74 	.word	0x20002a74

08001728 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001728:	e7fe      	b.n	8001728 <ADC_IRQHandler>

0800172a <delay>:
#include "common.h"



void delay(uint32_t ms)
{
 800172a:	b580      	push	{r7, lr}
 800172c:	b082      	sub	sp, #8
 800172e:	af00      	add	r7, sp, #0
 8001730:	6078      	str	r0, [r7, #4]
	HAL_Delay(ms);
 8001732:	6878      	ldr	r0, [r7, #4]
 8001734:	f001 feea 	bl	800350c <HAL_Delay>
}
 8001738:	bf00      	nop
 800173a:	3708      	adds	r7, #8
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}

08001740 <millis>:


uint32_t millis(void)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	af00      	add	r7, sp, #0
	return HAL_GetTick();
 8001744:	f001 fed6 	bl	80034f4 <HAL_GetTick>
 8001748:	4603      	mov	r3, r0
}
 800174a:	4618      	mov	r0, r3
 800174c:	bd80      	pop	{r7, pc}
	...

08001750 <cdcAvailable>:
bool rx_full=false;



uint32_t cdcAvailable(void)
{
 8001750:	b480      	push	{r7}
 8001752:	b083      	sub	sp, #12
 8001754:	af00      	add	r7, sp, #0
	uint32_t ret;

	ret = (rx_in - rx_out) % BUF_SIZE;
 8001756:	4b07      	ldr	r3, [pc, #28]	; (8001774 <cdcAvailable+0x24>)
 8001758:	681a      	ldr	r2, [r3, #0]
 800175a:	4b07      	ldr	r3, [pc, #28]	; (8001778 <cdcAvailable+0x28>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	1ad3      	subs	r3, r2, r3
 8001760:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001764:	607b      	str	r3, [r7, #4]

	return ret;
 8001766:	687b      	ldr	r3, [r7, #4]
}
 8001768:	4618      	mov	r0, r3
 800176a:	370c      	adds	r7, #12
 800176c:	46bd      	mov	sp, r7
 800176e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001772:	4770      	bx	lr
 8001774:	2000063c 	.word	0x2000063c
 8001778:	20000640 	.word	0x20000640

0800177c <cdcRead>:

uint8_t cdcRead(void)
{
 800177c:	b480      	push	{r7}
 800177e:	b083      	sub	sp, #12
 8001780:	af00      	add	r7, sp, #0
	uint8_t ret = 0;
 8001782:	2300      	movs	r3, #0
 8001784:	71fb      	strb	r3, [r7, #7]

	ret = rx_buf[rx_out];
 8001786:	4b0c      	ldr	r3, [pc, #48]	; (80017b8 <cdcRead+0x3c>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4a0c      	ldr	r2, [pc, #48]	; (80017bc <cdcRead+0x40>)
 800178c:	5cd3      	ldrb	r3, [r2, r3]
 800178e:	71fb      	strb	r3, [r7, #7]

	if(rx_out != rx_in)
 8001790:	4b09      	ldr	r3, [pc, #36]	; (80017b8 <cdcRead+0x3c>)
 8001792:	681a      	ldr	r2, [r3, #0]
 8001794:	4b0a      	ldr	r3, [pc, #40]	; (80017c0 <cdcRead+0x44>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	429a      	cmp	r2, r3
 800179a:	d006      	beq.n	80017aa <cdcRead+0x2e>
	{
		rx_out = (rx_out + 1) % BUF_SIZE;
 800179c:	4b06      	ldr	r3, [pc, #24]	; (80017b8 <cdcRead+0x3c>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	3301      	adds	r3, #1
 80017a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80017a6:	4a04      	ldr	r2, [pc, #16]	; (80017b8 <cdcRead+0x3c>)
 80017a8:	6013      	str	r3, [r2, #0]
	}

	return ret;
 80017aa:	79fb      	ldrb	r3, [r7, #7]
}
 80017ac:	4618      	mov	r0, r3
 80017ae:	370c      	adds	r7, #12
 80017b0:	46bd      	mov	sp, r7
 80017b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b6:	4770      	bx	lr
 80017b8:	20000640 	.word	0x20000640
 80017bc:	2000043c 	.word	0x2000043c
 80017c0:	2000063c 	.word	0x2000063c

080017c4 <cdcDataIn>:

void cdcDataIn(uint8_t rx_data)
{
 80017c4:	b480      	push	{r7}
 80017c6:	b085      	sub	sp, #20
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	4603      	mov	r3, r0
 80017cc:	71fb      	strb	r3, [r7, #7]
	rx_buf[rx_in] = rx_data;
 80017ce:	4b0c      	ldr	r3, [pc, #48]	; (8001800 <cdcDataIn+0x3c>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	490c      	ldr	r1, [pc, #48]	; (8001804 <cdcDataIn+0x40>)
 80017d4:	79fa      	ldrb	r2, [r7, #7]
 80017d6:	54ca      	strb	r2, [r1, r3]

	uint8_t next_rx_in = (rx_in + 1) % BUF_SIZE;
 80017d8:	4b09      	ldr	r3, [pc, #36]	; (8001800 <cdcDataIn+0x3c>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	b2db      	uxtb	r3, r3
 80017de:	3301      	adds	r3, #1
 80017e0:	73fb      	strb	r3, [r7, #15]

	if(next_rx_in != rx_out)
 80017e2:	7bfa      	ldrb	r2, [r7, #15]
 80017e4:	4b08      	ldr	r3, [pc, #32]	; (8001808 <cdcDataIn+0x44>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	429a      	cmp	r2, r3
 80017ea:	d002      	beq.n	80017f2 <cdcDataIn+0x2e>
	{
		rx_in = next_rx_in;
 80017ec:	7bfb      	ldrb	r3, [r7, #15]
 80017ee:	4a04      	ldr	r2, [pc, #16]	; (8001800 <cdcDataIn+0x3c>)
 80017f0:	6013      	str	r3, [r2, #0]
	}
}
 80017f2:	bf00      	nop
 80017f4:	3714      	adds	r7, #20
 80017f6:	46bd      	mov	sp, r7
 80017f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fc:	4770      	bx	lr
 80017fe:	bf00      	nop
 8001800:	2000063c 	.word	0x2000063c
 8001804:	2000043c 	.word	0x2000043c
 8001808:	20000640 	.word	0x20000640

0800180c <cdcWrite>:

uint32_t cdcWrite(uint8_t *p_data, uint32_t len)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b084      	sub	sp, #16
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
 8001814:	6039      	str	r1, [r7, #0]
	uint32_t pre_time = 0;
 8001816:	2300      	movs	r3, #0
 8001818:	60fb      	str	r3, [r7, #12]
	uint8_t ret;

	pre_time = millis();
 800181a:	f7ff ff91 	bl	8001740 <millis>
 800181e:	60f8      	str	r0, [r7, #12]
	while(1)
	{
		ret = CDC_Transmit_FS(p_data, len);
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	b29b      	uxth	r3, r3
 8001824:	4619      	mov	r1, r3
 8001826:	6878      	ldr	r0, [r7, #4]
 8001828:	f00d fe8e 	bl	800f548 <CDC_Transmit_FS>
 800182c:	4603      	mov	r3, r0
 800182e:	72fb      	strb	r3, [r7, #11]

		if(ret == USBD_OK)
 8001830:	7afb      	ldrb	r3, [r7, #11]
 8001832:	2b00      	cmp	r3, #0
 8001834:	d101      	bne.n	800183a <cdcWrite+0x2e>
			{
				return len;
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	e00e      	b.n	8001858 <cdcWrite+0x4c>
			}
			else if(ret == USBD_FAIL)
 800183a:	7afb      	ldrb	r3, [r7, #11]
 800183c:	2b03      	cmp	r3, #3
 800183e:	d101      	bne.n	8001844 <cdcWrite+0x38>
			{
				return 0;
 8001840:	2300      	movs	r3, #0
 8001842:	e009      	b.n	8001858 <cdcWrite+0x4c>
			}

			if(millis() - pre_time >= 100)
 8001844:	f7ff ff7c 	bl	8001740 <millis>
 8001848:	4602      	mov	r2, r0
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	1ad3      	subs	r3, r2, r3
 800184e:	2b63      	cmp	r3, #99	; 0x63
 8001850:	d800      	bhi.n	8001854 <cdcWrite+0x48>
		ret = CDC_Transmit_FS(p_data, len);
 8001852:	e7e5      	b.n	8001820 <cdcWrite+0x14>
			{
				break;
 8001854:	bf00      	nop
			}
	}

	return 0;
 8001856:	2300      	movs	r3, #0
}
 8001858:	4618      	mov	r0, r3
 800185a:	3710      	adds	r7, #16
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}

08001860 <cliInit>:
void cliShowList(cli_args_t *args);
void cliMemoryDump(cli_args_t *args);


bool cliInit(void)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	af00      	add	r7, sp, #0
  cli_node.is_open = false;
 8001864:	4b1b      	ldr	r3, [pc, #108]	; (80018d4 <cliInit+0x74>)
 8001866:	2200      	movs	r2, #0
 8001868:	721a      	strb	r2, [r3, #8]
  cli_node.is_log  = false;
 800186a:	4b1a      	ldr	r3, [pc, #104]	; (80018d4 <cliInit+0x74>)
 800186c:	2200      	movs	r2, #0
 800186e:	725a      	strb	r2, [r3, #9]
  cli_node.state   = CLI_RX_IDLE;
 8001870:	4b18      	ldr	r3, [pc, #96]	; (80018d4 <cliInit+0x74>)
 8001872:	2200      	movs	r2, #0
 8001874:	741a      	strb	r2, [r3, #16]

  cli_node.hist_line_i     = 0;
 8001876:	4b17      	ldr	r3, [pc, #92]	; (80018d4 <cliInit+0x74>)
 8001878:	2200      	movs	r2, #0
 800187a:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
  cli_node.hist_line_last  = 0;
 800187e:	4b15      	ldr	r3, [pc, #84]	; (80018d4 <cliInit+0x74>)
 8001880:	2200      	movs	r2, #0
 8001882:	f883 2196 	strb.w	r2, [r3, #406]	; 0x196
  cli_node.hist_line_count = 0;
 8001886:	4b13      	ldr	r3, [pc, #76]	; (80018d4 <cliInit+0x74>)
 8001888:	2200      	movs	r2, #0
 800188a:	f883 2197 	strb.w	r2, [r3, #407]	; 0x197
  cli_node.hist_line_new   = false;
 800188e:	4b11      	ldr	r3, [pc, #68]	; (80018d4 <cliInit+0x74>)
 8001890:	2200      	movs	r2, #0
 8001892:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194

  cli_node.cmd_args.getData  = cliArgsGetData;
 8001896:	4b0f      	ldr	r3, [pc, #60]	; (80018d4 <cliInit+0x74>)
 8001898:	4a0f      	ldr	r2, [pc, #60]	; (80018d8 <cliInit+0x78>)
 800189a:	f8c3 2474 	str.w	r2, [r3, #1140]	; 0x474
  cli_node.cmd_args.getFloat = cliArgsGetFloat;
 800189e:	4b0d      	ldr	r3, [pc, #52]	; (80018d4 <cliInit+0x74>)
 80018a0:	4a0e      	ldr	r2, [pc, #56]	; (80018dc <cliInit+0x7c>)
 80018a2:	f8c3 2478 	str.w	r2, [r3, #1144]	; 0x478
  cli_node.cmd_args.getStr   = cliArgsGetStr;
 80018a6:	4b0b      	ldr	r3, [pc, #44]	; (80018d4 <cliInit+0x74>)
 80018a8:	4a0d      	ldr	r2, [pc, #52]	; (80018e0 <cliInit+0x80>)
 80018aa:	f8c3 247c 	str.w	r2, [r3, #1148]	; 0x47c
  cli_node.cmd_args.isStr    = cliArgsIsStr;
 80018ae:	4b09      	ldr	r3, [pc, #36]	; (80018d4 <cliInit+0x74>)
 80018b0:	4a0c      	ldr	r2, [pc, #48]	; (80018e4 <cliInit+0x84>)
 80018b2:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480

  cliLineClean(&cli_node);
 80018b6:	4807      	ldr	r0, [pc, #28]	; (80018d4 <cliInit+0x74>)
 80018b8:	f000 fb5c 	bl	8001f74 <cliLineClean>


  cliAdd("help", cliShowList);
 80018bc:	490a      	ldr	r1, [pc, #40]	; (80018e8 <cliInit+0x88>)
 80018be:	480b      	ldr	r0, [pc, #44]	; (80018ec <cliInit+0x8c>)
 80018c0:	f000 fdf8 	bl	80024b4 <cliAdd>
  cliAdd("md"  , cliMemoryDump);
 80018c4:	490a      	ldr	r1, [pc, #40]	; (80018f0 <cliInit+0x90>)
 80018c6:	480b      	ldr	r0, [pc, #44]	; (80018f4 <cliInit+0x94>)
 80018c8:	f000 fdf4 	bl	80024b4 <cliAdd>

  return true;
 80018cc:	2301      	movs	r3, #1
}
 80018ce:	4618      	mov	r0, r3
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	20000644 	.word	0x20000644
 80018d8:	08002345 	.word	0x08002345
 80018dc:	08002395 	.word	0x08002395
 80018e0:	080023ed 	.word	0x080023ed
 80018e4:	08002435 	.word	0x08002435
 80018e8:	08002549 	.word	0x08002549
 80018ec:	08013030 	.word	0x08013030
 80018f0:	080025b9 	.word	0x080025b9
 80018f4:	08013038 	.word	0x08013038

080018f8 <cliOpen>:

bool cliOpen(uint8_t ch, uint32_t baud)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b082      	sub	sp, #8
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	4603      	mov	r3, r0
 8001900:	6039      	str	r1, [r7, #0]
 8001902:	71fb      	strb	r3, [r7, #7]
  cli_node.ch = ch;
 8001904:	4a0a      	ldr	r2, [pc, #40]	; (8001930 <cliOpen+0x38>)
 8001906:	79fb      	ldrb	r3, [r7, #7]
 8001908:	7013      	strb	r3, [r2, #0]
  cli_node.baud = baud;
 800190a:	4a09      	ldr	r2, [pc, #36]	; (8001930 <cliOpen+0x38>)
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	6053      	str	r3, [r2, #4]

  cli_node.is_open = uartOpen(ch, baud);
 8001910:	79fb      	ldrb	r3, [r7, #7]
 8001912:	6839      	ldr	r1, [r7, #0]
 8001914:	4618      	mov	r0, r3
 8001916:	f001 fcf5 	bl	8003304 <uartOpen>
 800191a:	4603      	mov	r3, r0
 800191c:	461a      	mov	r2, r3
 800191e:	4b04      	ldr	r3, [pc, #16]	; (8001930 <cliOpen+0x38>)
 8001920:	721a      	strb	r2, [r3, #8]

  return cli_node.is_open;
 8001922:	4b03      	ldr	r3, [pc, #12]	; (8001930 <cliOpen+0x38>)
 8001924:	7a1b      	ldrb	r3, [r3, #8]
}
 8001926:	4618      	mov	r0, r3
 8001928:	3708      	adds	r7, #8
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	20000644 	.word	0x20000644

08001934 <cliShowLog>:
  cli_node.is_log = false;
  return true;
}

void cliShowLog(cli_t *p_cli)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b084      	sub	sp, #16
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  if (cli_node.is_log == true)
 800193c:	4b34      	ldr	r3, [pc, #208]	; (8001a10 <cliShowLog+0xdc>)
 800193e:	7a5b      	ldrb	r3, [r3, #9]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d061      	beq.n	8001a08 <cliShowLog+0xd4>
  {
    uartPrintf(p_cli->log_ch, "Cursor  : %d\n", p_cli->line.cursor);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	7a98      	ldrb	r0, [r3, #10]
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	f893 3328 	ldrb.w	r3, [r3, #808]	; 0x328
 800194e:	461a      	mov	r2, r3
 8001950:	4930      	ldr	r1, [pc, #192]	; (8001a14 <cliShowLog+0xe0>)
 8001952:	f001 fd31 	bl	80033b8 <uartPrintf>
    uartPrintf(p_cli->log_ch, "Count   : %d\n", p_cli->line.count);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	7a98      	ldrb	r0, [r3, #10]
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	f893 3329 	ldrb.w	r3, [r3, #809]	; 0x329
 8001960:	461a      	mov	r2, r3
 8001962:	492d      	ldr	r1, [pc, #180]	; (8001a18 <cliShowLog+0xe4>)
 8001964:	f001 fd28 	bl	80033b8 <uartPrintf>
    uartPrintf(p_cli->log_ch, "buf_len : %d\n", p_cli->line.buf_len);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	7a98      	ldrb	r0, [r3, #10]
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	f893 3327 	ldrb.w	r3, [r3, #807]	; 0x327
 8001972:	461a      	mov	r2, r3
 8001974:	4929      	ldr	r1, [pc, #164]	; (8001a1c <cliShowLog+0xe8>)
 8001976:	f001 fd1f 	bl	80033b8 <uartPrintf>
    uartPrintf(p_cli->log_ch, "buf     : %s\n", p_cli->line.buf);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	7a98      	ldrb	r0, [r3, #10]
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	f203 23e7 	addw	r3, r3, #743	; 0x2e7
 8001984:	461a      	mov	r2, r3
 8001986:	4926      	ldr	r1, [pc, #152]	; (8001a20 <cliShowLog+0xec>)
 8001988:	f001 fd16 	bl	80033b8 <uartPrintf>
    uartPrintf(p_cli->log_ch, "line_i  : %d\n", p_cli->hist_line_i);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	7a98      	ldrb	r0, [r3, #10]
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	f993 3195 	ldrsb.w	r3, [r3, #405]	; 0x195
 8001996:	461a      	mov	r2, r3
 8001998:	4922      	ldr	r1, [pc, #136]	; (8001a24 <cliShowLog+0xf0>)
 800199a:	f001 fd0d 	bl	80033b8 <uartPrintf>
    uartPrintf(p_cli->log_ch, "line_lt : %d\n", p_cli->hist_line_last);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	7a98      	ldrb	r0, [r3, #10]
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	f893 3196 	ldrb.w	r3, [r3, #406]	; 0x196
 80019a8:	461a      	mov	r2, r3
 80019aa:	491f      	ldr	r1, [pc, #124]	; (8001a28 <cliShowLog+0xf4>)
 80019ac:	f001 fd04 	bl	80033b8 <uartPrintf>
    uartPrintf(p_cli->log_ch, "line_c  : %d\n", p_cli->hist_line_count);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	7a98      	ldrb	r0, [r3, #10]
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	f893 3197 	ldrb.w	r3, [r3, #407]	; 0x197
 80019ba:	461a      	mov	r2, r3
 80019bc:	491b      	ldr	r1, [pc, #108]	; (8001a2c <cliShowLog+0xf8>)
 80019be:	f001 fcfb 	bl	80033b8 <uartPrintf>

    for (int i=0; i<p_cli->hist_line_count; i++)
 80019c2:	2300      	movs	r3, #0
 80019c4:	60fb      	str	r3, [r7, #12]
 80019c6:	e012      	b.n	80019ee <cliShowLog+0xba>
    {
      uartPrintf(p_cli->log_ch, "buf %d   : %s\n", i, p_cli->line_buf[i].buf);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	7a98      	ldrb	r0, [r3, #10]
 80019cc:	68fa      	ldr	r2, [r7, #12]
 80019ce:	4613      	mov	r3, r2
 80019d0:	015b      	lsls	r3, r3, #5
 80019d2:	4413      	add	r3, r2
 80019d4:	005b      	lsls	r3, r3, #1
 80019d6:	4413      	add	r3, r2
 80019d8:	f503 73cc 	add.w	r3, r3, #408	; 0x198
 80019dc:	687a      	ldr	r2, [r7, #4]
 80019de:	4413      	add	r3, r2
 80019e0:	68fa      	ldr	r2, [r7, #12]
 80019e2:	4913      	ldr	r1, [pc, #76]	; (8001a30 <cliShowLog+0xfc>)
 80019e4:	f001 fce8 	bl	80033b8 <uartPrintf>
    for (int i=0; i<p_cli->hist_line_count; i++)
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	3301      	adds	r3, #1
 80019ec:	60fb      	str	r3, [r7, #12]
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	f893 3197 	ldrb.w	r3, [r3, #407]	; 0x197
 80019f4:	461a      	mov	r2, r3
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	4293      	cmp	r3, r2
 80019fa:	dbe5      	blt.n	80019c8 <cliShowLog+0x94>
    }
    uartPrintf(p_cli->log_ch, "\n");
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	7a9b      	ldrb	r3, [r3, #10]
 8001a00:	490c      	ldr	r1, [pc, #48]	; (8001a34 <cliShowLog+0x100>)
 8001a02:	4618      	mov	r0, r3
 8001a04:	f001 fcd8 	bl	80033b8 <uartPrintf>
  }
}
 8001a08:	bf00      	nop
 8001a0a:	3710      	adds	r7, #16
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd80      	pop	{r7, pc}
 8001a10:	20000644 	.word	0x20000644
 8001a14:	0801303c 	.word	0x0801303c
 8001a18:	0801304c 	.word	0x0801304c
 8001a1c:	0801305c 	.word	0x0801305c
 8001a20:	0801306c 	.word	0x0801306c
 8001a24:	0801307c 	.word	0x0801307c
 8001a28:	0801308c 	.word	0x0801308c
 8001a2c:	0801309c 	.word	0x0801309c
 8001a30:	080130ac 	.word	0x080130ac
 8001a34:	080130bc 	.word	0x080130bc

08001a38 <cliShowPrompt>:

void cliShowPrompt(cli_t *p_cli)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b082      	sub	sp, #8
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  uartPrintf(p_cli->ch, "\n\r");
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	781b      	ldrb	r3, [r3, #0]
 8001a44:	4906      	ldr	r1, [pc, #24]	; (8001a60 <cliShowPrompt+0x28>)
 8001a46:	4618      	mov	r0, r3
 8001a48:	f001 fcb6 	bl	80033b8 <uartPrintf>
  uartPrintf(p_cli->ch, CLI_PROMPT_STR);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	781b      	ldrb	r3, [r3, #0]
 8001a50:	4904      	ldr	r1, [pc, #16]	; (8001a64 <cliShowPrompt+0x2c>)
 8001a52:	4618      	mov	r0, r3
 8001a54:	f001 fcb0 	bl	80033b8 <uartPrintf>
}
 8001a58:	bf00      	nop
 8001a5a:	3708      	adds	r7, #8
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd80      	pop	{r7, pc}
 8001a60:	080130c0 	.word	0x080130c0
 8001a64:	080130c4 	.word	0x080130c4

08001a68 <cliMain>:

bool cliMain(void)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	af00      	add	r7, sp, #0
  if (cli_node.is_open != true)
 8001a6c:	4b0e      	ldr	r3, [pc, #56]	; (8001aa8 <cliMain+0x40>)
 8001a6e:	7a1b      	ldrb	r3, [r3, #8]
 8001a70:	f083 0301 	eor.w	r3, r3, #1
 8001a74:	b2db      	uxtb	r3, r3
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d001      	beq.n	8001a7e <cliMain+0x16>
  {
    return false;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	e012      	b.n	8001aa4 <cliMain+0x3c>
  }

  if (uartAvailable(cli_node.ch) > 0)
 8001a7e:	4b0a      	ldr	r3, [pc, #40]	; (8001aa8 <cliMain+0x40>)
 8001a80:	781b      	ldrb	r3, [r3, #0]
 8001a82:	4618      	mov	r0, r3
 8001a84:	f001 fc5a 	bl	800333c <uartAvailable>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d009      	beq.n	8001aa2 <cliMain+0x3a>
  {
    cliUpdate(&cli_node, uartRead(cli_node.ch));
 8001a8e:	4b06      	ldr	r3, [pc, #24]	; (8001aa8 <cliMain+0x40>)
 8001a90:	781b      	ldrb	r3, [r3, #0]
 8001a92:	4618      	mov	r0, r3
 8001a94:	f001 fc65 	bl	8003362 <uartRead>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	4619      	mov	r1, r3
 8001a9c:	4802      	ldr	r0, [pc, #8]	; (8001aa8 <cliMain+0x40>)
 8001a9e:	f000 f805 	bl	8001aac <cliUpdate>
  }

  return true;
 8001aa2:	2301      	movs	r3, #1
}
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	bd80      	pop	{r7, pc}
 8001aa8:	20000644 	.word	0x20000644

08001aac <cliUpdate>:
{
  return uartWrite(cli_node.ch, p_data, length);
}

bool cliUpdate(cli_t *p_cli, uint8_t rx_data)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b08c      	sub	sp, #48	; 0x30
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
 8001ab4:	460b      	mov	r3, r1
 8001ab6:	70fb      	strb	r3, [r7, #3]
  bool ret = false;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t tx_buf[8];
  cli_line_t *line;

  line = &p_cli->line;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	f203 23e7 	addw	r3, r3, #743	; 0x2e7
 8001ac4:	61fb      	str	r3, [r7, #28]

  if (p_cli->state == CLI_RX_IDLE)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	7c1b      	ldrb	r3, [r3, #16]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	f040 816d 	bne.w	8001daa <cliUpdate+0x2fe>
  {
    switch(rx_data)
 8001ad0:	78fb      	ldrb	r3, [r7, #3]
 8001ad2:	2b7f      	cmp	r3, #127	; 0x7f
 8001ad4:	d02a      	beq.n	8001b2c <cliUpdate+0x80>
 8001ad6:	2b7f      	cmp	r3, #127	; 0x7f
 8001ad8:	f300 80da 	bgt.w	8001c90 <cliUpdate+0x1e4>
 8001adc:	2b1b      	cmp	r3, #27
 8001ade:	d021      	beq.n	8001b24 <cliUpdate+0x78>
 8001ae0:	2b1b      	cmp	r3, #27
 8001ae2:	f300 80d5 	bgt.w	8001c90 <cliUpdate+0x1e4>
 8001ae6:	2b08      	cmp	r3, #8
 8001ae8:	d062      	beq.n	8001bb0 <cliUpdate+0x104>
 8001aea:	2b0d      	cmp	r3, #13
 8001aec:	f040 80d0 	bne.w	8001c90 <cliUpdate+0x1e4>
    {
      // 엔터
      case CLI_KEY_ENTER:
        if (line->count > 0)
 8001af0:	69fb      	ldr	r3, [r7, #28]
 8001af2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d005      	beq.n	8001b06 <cliUpdate+0x5a>
        {
          cliLineAdd(p_cli);
 8001afa:	6878      	ldr	r0, [r7, #4]
 8001afc:	f000 fa54 	bl	8001fa8 <cliLineAdd>
          cliRunCmd(p_cli);
 8001b00:	6878      	ldr	r0, [r7, #4]
 8001b02:	f000 fb25 	bl	8002150 <cliRunCmd>
        }

        line->count = 0;
 8001b06:	69fb      	ldr	r3, [r7, #28]
 8001b08:	2200      	movs	r2, #0
 8001b0a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        line->cursor = 0;
 8001b0e:	69fb      	ldr	r3, [r7, #28]
 8001b10:	2200      	movs	r2, #0
 8001b12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        line->buf[0] = 0;
 8001b16:	69fb      	ldr	r3, [r7, #28]
 8001b18:	2200      	movs	r2, #0
 8001b1a:	701a      	strb	r2, [r3, #0]
        cliShowPrompt(p_cli);
 8001b1c:	6878      	ldr	r0, [r7, #4]
 8001b1e:	f7ff ff8b 	bl	8001a38 <cliShowPrompt>
        break;
 8001b22:	e142      	b.n	8001daa <cliUpdate+0x2fe>


      case CLI_KEY_ESC:
        p_cli->state = CLI_RX_SP1;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2201      	movs	r2, #1
 8001b28:	741a      	strb	r2, [r3, #16]
        break;
 8001b2a:	e13e      	b.n	8001daa <cliUpdate+0x2fe>

      // DEL
      case CLI_KEY_DEL:
        if (line->cursor < line->count)
 8001b2c:	69fb      	ldr	r3, [r7, #28]
 8001b2e:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 8001b32:	69fb      	ldr	r3, [r7, #28]
 8001b34:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001b38:	429a      	cmp	r2, r3
 8001b3a:	f080 8131 	bcs.w	8001da0 <cliUpdate+0x2f4>
        {
          uint8_t mov_len;

          mov_len = line->count - line->cursor;
 8001b3e:	69fb      	ldr	r3, [r7, #28]
 8001b40:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
 8001b44:	69fb      	ldr	r3, [r7, #28]
 8001b46:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b4a:	1ad3      	subs	r3, r2, r3
 8001b4c:	76fb      	strb	r3, [r7, #27]
          for (int i=1; i<mov_len; i++)
 8001b4e:	2301      	movs	r3, #1
 8001b50:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001b52:	e013      	b.n	8001b7c <cliUpdate+0xd0>
          {
            line->buf[line->cursor + i - 1] = line->buf[line->cursor + i];
 8001b54:	69fb      	ldr	r3, [r7, #28]
 8001b56:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b5a:	461a      	mov	r2, r3
 8001b5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b5e:	441a      	add	r2, r3
 8001b60:	69fb      	ldr	r3, [r7, #28]
 8001b62:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b66:	4619      	mov	r1, r3
 8001b68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b6a:	440b      	add	r3, r1
 8001b6c:	3b01      	subs	r3, #1
 8001b6e:	69f9      	ldr	r1, [r7, #28]
 8001b70:	5c89      	ldrb	r1, [r1, r2]
 8001b72:	69fa      	ldr	r2, [r7, #28]
 8001b74:	54d1      	strb	r1, [r2, r3]
          for (int i=1; i<mov_len; i++)
 8001b76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b78:	3301      	adds	r3, #1
 8001b7a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001b7c:	7efb      	ldrb	r3, [r7, #27]
 8001b7e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001b80:	429a      	cmp	r2, r3
 8001b82:	dbe7      	blt.n	8001b54 <cliUpdate+0xa8>
          }

          line->count--;
 8001b84:	69fb      	ldr	r3, [r7, #28]
 8001b86:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001b8a:	3b01      	subs	r3, #1
 8001b8c:	b2da      	uxtb	r2, r3
 8001b8e:	69fb      	ldr	r3, [r7, #28]
 8001b90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          line->buf[line->count] = 0;
 8001b94:	69fb      	ldr	r3, [r7, #28]
 8001b96:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001b9a:	461a      	mov	r2, r3
 8001b9c:	69fb      	ldr	r3, [r7, #28]
 8001b9e:	2100      	movs	r1, #0
 8001ba0:	5499      	strb	r1, [r3, r2]

          uartPrintf(p_cli->ch, "\x1B[1P");
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	781b      	ldrb	r3, [r3, #0]
 8001ba6:	498d      	ldr	r1, [pc, #564]	; (8001ddc <cliUpdate+0x330>)
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f001 fc05 	bl	80033b8 <uartPrintf>
        }
        break;
 8001bae:	e0f7      	b.n	8001da0 <cliUpdate+0x2f4>

      // 백스페이스
      case CLI_KEY_BACK:
        if (line->count > 0 && line->cursor > 0)
 8001bb0:	69fb      	ldr	r3, [r7, #28]
 8001bb2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d055      	beq.n	8001c66 <cliUpdate+0x1ba>
 8001bba:	69fb      	ldr	r3, [r7, #28]
 8001bbc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d050      	beq.n	8001c66 <cliUpdate+0x1ba>
        {
          if (line->cursor == line->count)
 8001bc4:	69fb      	ldr	r3, [r7, #28]
 8001bc6:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 8001bca:	69fb      	ldr	r3, [r7, #28]
 8001bcc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001bd0:	429a      	cmp	r2, r3
 8001bd2:	d10e      	bne.n	8001bf2 <cliUpdate+0x146>
          {
            line->count--;
 8001bd4:	69fb      	ldr	r3, [r7, #28]
 8001bd6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001bda:	3b01      	subs	r3, #1
 8001bdc:	b2da      	uxtb	r2, r3
 8001bde:	69fb      	ldr	r3, [r7, #28]
 8001be0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
            line->buf[line->count] = 0;
 8001be4:	69fb      	ldr	r3, [r7, #28]
 8001be6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001bea:	461a      	mov	r2, r3
 8001bec:	69fb      	ldr	r3, [r7, #28]
 8001bee:	2100      	movs	r1, #0
 8001bf0:	5499      	strb	r1, [r3, r2]
          }

          if (line->cursor < line->count)
 8001bf2:	69fb      	ldr	r3, [r7, #28]
 8001bf4:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 8001bf8:	69fb      	ldr	r3, [r7, #28]
 8001bfa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001bfe:	429a      	cmp	r2, r3
 8001c00:	d231      	bcs.n	8001c66 <cliUpdate+0x1ba>
          {
            uint8_t mov_len;

            mov_len = line->count - line->cursor;
 8001c02:	69fb      	ldr	r3, [r7, #28]
 8001c04:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
 8001c08:	69fb      	ldr	r3, [r7, #28]
 8001c0a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c0e:	1ad3      	subs	r3, r2, r3
 8001c10:	76bb      	strb	r3, [r7, #26]

            for (int i=0; i<mov_len; i++)
 8001c12:	2300      	movs	r3, #0
 8001c14:	62bb      	str	r3, [r7, #40]	; 0x28
 8001c16:	e013      	b.n	8001c40 <cliUpdate+0x194>
            {
              line->buf[line->cursor + i - 1] = line->buf[line->cursor + i];
 8001c18:	69fb      	ldr	r3, [r7, #28]
 8001c1a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c1e:	461a      	mov	r2, r3
 8001c20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c22:	441a      	add	r2, r3
 8001c24:	69fb      	ldr	r3, [r7, #28]
 8001c26:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c2a:	4619      	mov	r1, r3
 8001c2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c2e:	440b      	add	r3, r1
 8001c30:	3b01      	subs	r3, #1
 8001c32:	69f9      	ldr	r1, [r7, #28]
 8001c34:	5c89      	ldrb	r1, [r1, r2]
 8001c36:	69fa      	ldr	r2, [r7, #28]
 8001c38:	54d1      	strb	r1, [r2, r3]
            for (int i=0; i<mov_len; i++)
 8001c3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c3c:	3301      	adds	r3, #1
 8001c3e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001c40:	7ebb      	ldrb	r3, [r7, #26]
 8001c42:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001c44:	429a      	cmp	r2, r3
 8001c46:	dbe7      	blt.n	8001c18 <cliUpdate+0x16c>
            }

            line->count--;
 8001c48:	69fb      	ldr	r3, [r7, #28]
 8001c4a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001c4e:	3b01      	subs	r3, #1
 8001c50:	b2da      	uxtb	r2, r3
 8001c52:	69fb      	ldr	r3, [r7, #28]
 8001c54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
            line->buf[line->count] = 0;
 8001c58:	69fb      	ldr	r3, [r7, #28]
 8001c5a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001c5e:	461a      	mov	r2, r3
 8001c60:	69fb      	ldr	r3, [r7, #28]
 8001c62:	2100      	movs	r1, #0
 8001c64:	5499      	strb	r1, [r3, r2]
          }
        }

        if (line->cursor > 0)
 8001c66:	69fb      	ldr	r3, [r7, #28]
 8001c68:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	f000 8099 	beq.w	8001da4 <cliUpdate+0x2f8>
        {
          line->cursor--;
 8001c72:	69fb      	ldr	r3, [r7, #28]
 8001c74:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c78:	3b01      	subs	r3, #1
 8001c7a:	b2da      	uxtb	r2, r3
 8001c7c:	69fb      	ldr	r3, [r7, #28]
 8001c7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          uartPrintf(p_cli->ch, "\b \b\x1B[1P");
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	781b      	ldrb	r3, [r3, #0]
 8001c86:	4956      	ldr	r1, [pc, #344]	; (8001de0 <cliUpdate+0x334>)
 8001c88:	4618      	mov	r0, r3
 8001c8a:	f001 fb95 	bl	80033b8 <uartPrintf>
        }
        break;
 8001c8e:	e089      	b.n	8001da4 <cliUpdate+0x2f8>

      default:
        if ((line->count + 1) < line->buf_len)
 8001c90:	69fb      	ldr	r3, [r7, #28]
 8001c92:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001c96:	3301      	adds	r3, #1
 8001c98:	69fa      	ldr	r2, [r7, #28]
 8001c9a:	f892 2040 	ldrb.w	r2, [r2, #64]	; 0x40
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	f280 8082 	bge.w	8001da8 <cliUpdate+0x2fc>
        {
          if (line->cursor == line->count)
 8001ca4:	69fb      	ldr	r3, [r7, #28]
 8001ca6:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 8001caa:	69fb      	ldr	r3, [r7, #28]
 8001cac:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001cb0:	429a      	cmp	r2, r3
 8001cb2:	d124      	bne.n	8001cfe <cliUpdate+0x252>
          {
            uartWrite(p_cli->ch, &rx_data, 1);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	781b      	ldrb	r3, [r3, #0]
 8001cb8:	1cf9      	adds	r1, r7, #3
 8001cba:	2201      	movs	r2, #1
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f001 fb64 	bl	800338a <uartWrite>

            line->buf[line->cursor] = rx_data;
 8001cc2:	69fb      	ldr	r3, [r7, #28]
 8001cc4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001cc8:	461a      	mov	r2, r3
 8001cca:	78f9      	ldrb	r1, [r7, #3]
 8001ccc:	69fb      	ldr	r3, [r7, #28]
 8001cce:	5499      	strb	r1, [r3, r2]
            line->count++;
 8001cd0:	69fb      	ldr	r3, [r7, #28]
 8001cd2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001cd6:	3301      	adds	r3, #1
 8001cd8:	b2da      	uxtb	r2, r3
 8001cda:	69fb      	ldr	r3, [r7, #28]
 8001cdc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
            line->cursor++;
 8001ce0:	69fb      	ldr	r3, [r7, #28]
 8001ce2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ce6:	3301      	adds	r3, #1
 8001ce8:	b2da      	uxtb	r2, r3
 8001cea:	69fb      	ldr	r3, [r7, #28]
 8001cec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
            line->buf[line->count] = 0;
 8001cf0:	69fb      	ldr	r3, [r7, #28]
 8001cf2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001cf6:	461a      	mov	r2, r3
 8001cf8:	69fb      	ldr	r3, [r7, #28]
 8001cfa:	2100      	movs	r1, #0
 8001cfc:	5499      	strb	r1, [r3, r2]
          }
          if (line->cursor < line->count)
 8001cfe:	69fb      	ldr	r3, [r7, #28]
 8001d00:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 8001d04:	69fb      	ldr	r3, [r7, #28]
 8001d06:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001d0a:	429a      	cmp	r2, r3
 8001d0c:	d24c      	bcs.n	8001da8 <cliUpdate+0x2fc>
          {
            uint8_t mov_len;

            mov_len = line->count - line->cursor;
 8001d0e:	69fb      	ldr	r3, [r7, #28]
 8001d10:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
 8001d14:	69fb      	ldr	r3, [r7, #28]
 8001d16:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d1a:	1ad3      	subs	r3, r2, r3
 8001d1c:	767b      	strb	r3, [r7, #25]
            for (int i=0; i<mov_len; i++)
 8001d1e:	2300      	movs	r3, #0
 8001d20:	627b      	str	r3, [r7, #36]	; 0x24
 8001d22:	e013      	b.n	8001d4c <cliUpdate+0x2a0>
            {
              line->buf[line->count - i] = line->buf[line->count - i - 1];
 8001d24:	69fb      	ldr	r3, [r7, #28]
 8001d26:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001d2a:	461a      	mov	r2, r3
 8001d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d2e:	1ad3      	subs	r3, r2, r3
 8001d30:	1e5a      	subs	r2, r3, #1
 8001d32:	69fb      	ldr	r3, [r7, #28]
 8001d34:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001d38:	4619      	mov	r1, r3
 8001d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d3c:	1acb      	subs	r3, r1, r3
 8001d3e:	69f9      	ldr	r1, [r7, #28]
 8001d40:	5c89      	ldrb	r1, [r1, r2]
 8001d42:	69fa      	ldr	r2, [r7, #28]
 8001d44:	54d1      	strb	r1, [r2, r3]
            for (int i=0; i<mov_len; i++)
 8001d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d48:	3301      	adds	r3, #1
 8001d4a:	627b      	str	r3, [r7, #36]	; 0x24
 8001d4c:	7e7b      	ldrb	r3, [r7, #25]
 8001d4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d50:	429a      	cmp	r2, r3
 8001d52:	dbe7      	blt.n	8001d24 <cliUpdate+0x278>
            }
            line->buf[line->cursor] = rx_data;
 8001d54:	69fb      	ldr	r3, [r7, #28]
 8001d56:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d5a:	461a      	mov	r2, r3
 8001d5c:	78f9      	ldrb	r1, [r7, #3]
 8001d5e:	69fb      	ldr	r3, [r7, #28]
 8001d60:	5499      	strb	r1, [r3, r2]
            line->count++;
 8001d62:	69fb      	ldr	r3, [r7, #28]
 8001d64:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001d68:	3301      	adds	r3, #1
 8001d6a:	b2da      	uxtb	r2, r3
 8001d6c:	69fb      	ldr	r3, [r7, #28]
 8001d6e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
            line->cursor++;
 8001d72:	69fb      	ldr	r3, [r7, #28]
 8001d74:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d78:	3301      	adds	r3, #1
 8001d7a:	b2da      	uxtb	r2, r3
 8001d7c:	69fb      	ldr	r3, [r7, #28]
 8001d7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
            line->buf[line->count] = 0;
 8001d82:	69fb      	ldr	r3, [r7, #28]
 8001d84:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001d88:	461a      	mov	r2, r3
 8001d8a:	69fb      	ldr	r3, [r7, #28]
 8001d8c:	2100      	movs	r1, #0
 8001d8e:	5499      	strb	r1, [r3, r2]

            uartPrintf(p_cli->ch, "\x1B[4h%c\x1B[4l", rx_data);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	781b      	ldrb	r3, [r3, #0]
 8001d94:	78fa      	ldrb	r2, [r7, #3]
 8001d96:	4913      	ldr	r1, [pc, #76]	; (8001de4 <cliUpdate+0x338>)
 8001d98:	4618      	mov	r0, r3
 8001d9a:	f001 fb0d 	bl	80033b8 <uartPrintf>
          }
        }
        break;
 8001d9e:	e003      	b.n	8001da8 <cliUpdate+0x2fc>
        break;
 8001da0:	bf00      	nop
 8001da2:	e002      	b.n	8001daa <cliUpdate+0x2fe>
        break;
 8001da4:	bf00      	nop
 8001da6:	e000      	b.n	8001daa <cliUpdate+0x2fe>
        break;
 8001da8:	bf00      	nop
    }
  }

  switch(p_cli->state)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	7c1b      	ldrb	r3, [r3, #16]
 8001dae:	3b01      	subs	r3, #1
 8001db0:	2b03      	cmp	r3, #3
 8001db2:	f200 80d2 	bhi.w	8001f5a <cliUpdate+0x4ae>
 8001db6:	a201      	add	r2, pc, #4	; (adr r2, 8001dbc <cliUpdate+0x310>)
 8001db8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dbc:	08001dcd 	.word	0x08001dcd
 8001dc0:	08001dd5 	.word	0x08001dd5
 8001dc4:	08001de9 	.word	0x08001de9
 8001dc8:	08001f51 	.word	0x08001f51
  {
    case CLI_RX_SP1:
      p_cli->state = CLI_RX_SP2;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2202      	movs	r2, #2
 8001dd0:	741a      	strb	r2, [r3, #16]
      break;
 8001dd2:	e0c2      	b.n	8001f5a <cliUpdate+0x4ae>

    case CLI_RX_SP2:
      p_cli->state = CLI_RX_SP3;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2203      	movs	r2, #3
 8001dd8:	741a      	strb	r2, [r3, #16]
      break;
 8001dda:	e0be      	b.n	8001f5a <cliUpdate+0x4ae>
 8001ddc:	080130cc 	.word	0x080130cc
 8001de0:	080130d4 	.word	0x080130d4
 8001de4:	080130dc 	.word	0x080130dc

    case CLI_RX_SP3:
      p_cli->state = CLI_RX_IDLE;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2200      	movs	r2, #0
 8001dec:	741a      	strb	r2, [r3, #16]

      if (rx_data == CLI_KEY_LEFT)
 8001dee:	78fb      	ldrb	r3, [r7, #3]
 8001df0:	2b44      	cmp	r3, #68	; 0x44
 8001df2:	d11a      	bne.n	8001e2a <cliUpdate+0x37e>
      {
        if (line->cursor > 0)
 8001df4:	69fb      	ldr	r3, [r7, #28]
 8001df6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d015      	beq.n	8001e2a <cliUpdate+0x37e>
        {
          line->cursor--;
 8001dfe:	69fb      	ldr	r3, [r7, #28]
 8001e00:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e04:	3b01      	subs	r3, #1
 8001e06:	b2da      	uxtb	r2, r3
 8001e08:	69fb      	ldr	r3, [r7, #28]
 8001e0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          tx_buf[0] = 0x1B;
 8001e0e:	231b      	movs	r3, #27
 8001e10:	733b      	strb	r3, [r7, #12]
          tx_buf[1] = 0x5B;
 8001e12:	235b      	movs	r3, #91	; 0x5b
 8001e14:	737b      	strb	r3, [r7, #13]
          tx_buf[2] = rx_data;
 8001e16:	78fb      	ldrb	r3, [r7, #3]
 8001e18:	73bb      	strb	r3, [r7, #14]
          uartWrite(p_cli->ch, tx_buf, 3);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	781b      	ldrb	r3, [r3, #0]
 8001e1e:	f107 010c 	add.w	r1, r7, #12
 8001e22:	2203      	movs	r2, #3
 8001e24:	4618      	mov	r0, r3
 8001e26:	f001 fab0 	bl	800338a <uartWrite>
        }
      }

      if (rx_data == CLI_KEY_RIGHT)
 8001e2a:	78fb      	ldrb	r3, [r7, #3]
 8001e2c:	2b43      	cmp	r3, #67	; 0x43
 8001e2e:	d11d      	bne.n	8001e6c <cliUpdate+0x3c0>
      {
        if (line->cursor < line->count)
 8001e30:	69fb      	ldr	r3, [r7, #28]
 8001e32:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 8001e36:	69fb      	ldr	r3, [r7, #28]
 8001e38:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001e3c:	429a      	cmp	r2, r3
 8001e3e:	d215      	bcs.n	8001e6c <cliUpdate+0x3c0>
        {
          line->cursor++;
 8001e40:	69fb      	ldr	r3, [r7, #28]
 8001e42:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e46:	3301      	adds	r3, #1
 8001e48:	b2da      	uxtb	r2, r3
 8001e4a:	69fb      	ldr	r3, [r7, #28]
 8001e4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

          tx_buf[0] = 0x1B;
 8001e50:	231b      	movs	r3, #27
 8001e52:	733b      	strb	r3, [r7, #12]
          tx_buf[1] = 0x5B;
 8001e54:	235b      	movs	r3, #91	; 0x5b
 8001e56:	737b      	strb	r3, [r7, #13]
          tx_buf[2] = rx_data;
 8001e58:	78fb      	ldrb	r3, [r7, #3]
 8001e5a:	73bb      	strb	r3, [r7, #14]
          uartWrite(p_cli->ch, tx_buf, 3);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	781b      	ldrb	r3, [r3, #0]
 8001e60:	f107 010c 	add.w	r1, r7, #12
 8001e64:	2203      	movs	r2, #3
 8001e66:	4618      	mov	r0, r3
 8001e68:	f001 fa8f 	bl	800338a <uartWrite>
        }
      }

      if (rx_data == CLI_KEY_UP)
 8001e6c:	78fb      	ldrb	r3, [r7, #3]
 8001e6e:	2b41      	cmp	r3, #65	; 0x41
 8001e70:	d10c      	bne.n	8001e8c <cliUpdate+0x3e0>
      {
        cliLineChange(p_cli, true);
 8001e72:	2101      	movs	r1, #1
 8001e74:	6878      	ldr	r0, [r7, #4]
 8001e76:	f000 f8e1 	bl	800203c <cliLineChange>
        uartPrintf(p_cli->ch, (char *)p_cli->line.buf);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	781a      	ldrb	r2, [r3, #0]
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	f203 23e7 	addw	r3, r3, #743	; 0x2e7
 8001e84:	4619      	mov	r1, r3
 8001e86:	4610      	mov	r0, r2
 8001e88:	f001 fa96 	bl	80033b8 <uartPrintf>
      }

      if (rx_data == CLI_KEY_DOWN)
 8001e8c:	78fb      	ldrb	r3, [r7, #3]
 8001e8e:	2b42      	cmp	r3, #66	; 0x42
 8001e90:	d10c      	bne.n	8001eac <cliUpdate+0x400>
      {
        cliLineChange(p_cli, false);
 8001e92:	2100      	movs	r1, #0
 8001e94:	6878      	ldr	r0, [r7, #4]
 8001e96:	f000 f8d1 	bl	800203c <cliLineChange>
        uartPrintf(p_cli->ch, (char *)p_cli->line.buf);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	781a      	ldrb	r2, [r3, #0]
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	f203 23e7 	addw	r3, r3, #743	; 0x2e7
 8001ea4:	4619      	mov	r1, r3
 8001ea6:	4610      	mov	r0, r2
 8001ea8:	f001 fa86 	bl	80033b8 <uartPrintf>
      }

      if (rx_data == CLI_KEY_HOME)
 8001eac:	78fb      	ldrb	r3, [r7, #3]
 8001eae:	2b31      	cmp	r3, #49	; 0x31
 8001eb0:	d10f      	bne.n	8001ed2 <cliUpdate+0x426>
      {
        uartPrintf(p_cli->ch, "\x1B[%dD", line->cursor);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	7818      	ldrb	r0, [r3, #0]
 8001eb6:	69fb      	ldr	r3, [r7, #28]
 8001eb8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ebc:	461a      	mov	r2, r3
 8001ebe:	492b      	ldr	r1, [pc, #172]	; (8001f6c <cliUpdate+0x4c0>)
 8001ec0:	f001 fa7a 	bl	80033b8 <uartPrintf>
        line->cursor = 0;
 8001ec4:	69fb      	ldr	r3, [r7, #28]
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        p_cli->state = CLI_RX_SP4;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2204      	movs	r2, #4
 8001ed0:	741a      	strb	r2, [r3, #16]
      }

      if (rx_data == CLI_KEY_END)
 8001ed2:	78fb      	ldrb	r3, [r7, #3]
 8001ed4:	2b34      	cmp	r3, #52	; 0x34
 8001ed6:	d13f      	bne.n	8001f58 <cliUpdate+0x4ac>
      {
        uint16_t mov_len;

        if (line->cursor < line->count)
 8001ed8:	69fb      	ldr	r3, [r7, #28]
 8001eda:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 8001ede:	69fb      	ldr	r3, [r7, #28]
 8001ee0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001ee4:	429a      	cmp	r2, r3
 8001ee6:	d210      	bcs.n	8001f0a <cliUpdate+0x45e>
        {
          mov_len = line->count - line->cursor;
 8001ee8:	69fb      	ldr	r3, [r7, #28]
 8001eea:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001eee:	b29a      	uxth	r2, r3
 8001ef0:	69fb      	ldr	r3, [r7, #28]
 8001ef2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ef6:	b29b      	uxth	r3, r3
 8001ef8:	1ad3      	subs	r3, r2, r3
 8001efa:	82fb      	strh	r3, [r7, #22]
          uartPrintf(p_cli->ch, "\x1B[%dC", mov_len);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	781b      	ldrb	r3, [r3, #0]
 8001f00:	8afa      	ldrh	r2, [r7, #22]
 8001f02:	491b      	ldr	r1, [pc, #108]	; (8001f70 <cliUpdate+0x4c4>)
 8001f04:	4618      	mov	r0, r3
 8001f06:	f001 fa57 	bl	80033b8 <uartPrintf>
        }
        if (line->cursor > line->count)
 8001f0a:	69fb      	ldr	r3, [r7, #28]
 8001f0c:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 8001f10:	69fb      	ldr	r3, [r7, #28]
 8001f12:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001f16:	429a      	cmp	r2, r3
 8001f18:	d910      	bls.n	8001f3c <cliUpdate+0x490>
        {
          mov_len = line->cursor - line->count;
 8001f1a:	69fb      	ldr	r3, [r7, #28]
 8001f1c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f20:	b29a      	uxth	r2, r3
 8001f22:	69fb      	ldr	r3, [r7, #28]
 8001f24:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001f28:	b29b      	uxth	r3, r3
 8001f2a:	1ad3      	subs	r3, r2, r3
 8001f2c:	82fb      	strh	r3, [r7, #22]
          uartPrintf(p_cli->ch, "\x1B[%dD", mov_len);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	781b      	ldrb	r3, [r3, #0]
 8001f32:	8afa      	ldrh	r2, [r7, #22]
 8001f34:	490d      	ldr	r1, [pc, #52]	; (8001f6c <cliUpdate+0x4c0>)
 8001f36:	4618      	mov	r0, r3
 8001f38:	f001 fa3e 	bl	80033b8 <uartPrintf>
        }
        line->cursor = line->count;
 8001f3c:	69fb      	ldr	r3, [r7, #28]
 8001f3e:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
 8001f42:	69fb      	ldr	r3, [r7, #28]
 8001f44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        p_cli->state = CLI_RX_SP4;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2204      	movs	r2, #4
 8001f4c:	741a      	strb	r2, [r3, #16]
      }
      break;
 8001f4e:	e003      	b.n	8001f58 <cliUpdate+0x4ac>

    case CLI_RX_SP4:
      p_cli->state = CLI_RX_IDLE;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2200      	movs	r2, #0
 8001f54:	741a      	strb	r2, [r3, #16]
      break;
 8001f56:	e000      	b.n	8001f5a <cliUpdate+0x4ae>
      break;
 8001f58:	bf00      	nop
  }

  cliShowLog(p_cli);
 8001f5a:	6878      	ldr	r0, [r7, #4]
 8001f5c:	f7ff fcea 	bl	8001934 <cliShowLog>

  return ret;
 8001f60:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8001f64:	4618      	mov	r0, r3
 8001f66:	3730      	adds	r7, #48	; 0x30
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bd80      	pop	{r7, pc}
 8001f6c:	080130e8 	.word	0x080130e8
 8001f70:	080130f0 	.word	0x080130f0

08001f74 <cliLineClean>:

void cliLineClean(cli_t *p_cli)
{
 8001f74:	b480      	push	{r7}
 8001f76:	b083      	sub	sp, #12
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  p_cli->line.count   = 0;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2200      	movs	r2, #0
 8001f80:	f883 2329 	strb.w	r2, [r3, #809]	; 0x329
  p_cli->line.cursor  = 0;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2200      	movs	r2, #0
 8001f88:	f883 2328 	strb.w	r2, [r3, #808]	; 0x328
  p_cli->line.buf_len = CLI_LINE_BUF_MAX - 1;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	223f      	movs	r2, #63	; 0x3f
 8001f90:	f883 2327 	strb.w	r2, [r3, #807]	; 0x327
  p_cli->line.buf[0]  = 0;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2200      	movs	r2, #0
 8001f98:	f883 22e7 	strb.w	r2, [r3, #743]	; 0x2e7
}
 8001f9c:	bf00      	nop
 8001f9e:	370c      	adds	r7, #12
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa6:	4770      	bx	lr

08001fa8 <cliLineAdd>:

void cliLineAdd(cli_t *p_cli)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b082      	sub	sp, #8
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]

  p_cli->line_buf[p_cli->hist_line_last] = p_cli->line;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	f893 3196 	ldrb.w	r3, [r3, #406]	; 0x196
 8001fb6:	461a      	mov	r2, r3
 8001fb8:	6879      	ldr	r1, [r7, #4]
 8001fba:	4613      	mov	r3, r2
 8001fbc:	015b      	lsls	r3, r3, #5
 8001fbe:	4413      	add	r3, r2
 8001fc0:	005b      	lsls	r3, r3, #1
 8001fc2:	4413      	add	r3, r2
 8001fc4:	440b      	add	r3, r1
 8001fc6:	f503 72cc 	add.w	r2, r3, #408	; 0x198
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	4610      	mov	r0, r2
 8001fce:	f203 23e7 	addw	r3, r3, #743	; 0x2e7
 8001fd2:	2243      	movs	r2, #67	; 0x43
 8001fd4:	4619      	mov	r1, r3
 8001fd6:	f00e fff8 	bl	8010fca <memcpy>

  if (p_cli->hist_line_count < CLI_LINE_HIS_MAX)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	f893 3197 	ldrb.w	r3, [r3, #407]	; 0x197
 8001fe0:	2b04      	cmp	r3, #4
 8001fe2:	d807      	bhi.n	8001ff4 <cliLineAdd+0x4c>
  {
    p_cli->hist_line_count++;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	f893 3197 	ldrb.w	r3, [r3, #407]	; 0x197
 8001fea:	3301      	adds	r3, #1
 8001fec:	b2da      	uxtb	r2, r3
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	f883 2197 	strb.w	r2, [r3, #407]	; 0x197
  }

  p_cli->hist_line_i    = p_cli->hist_line_last;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	f893 3196 	ldrb.w	r3, [r3, #406]	; 0x196
 8001ffa:	b25a      	sxtb	r2, r3
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
  p_cli->hist_line_last = (p_cli->hist_line_last + 1) % CLI_LINE_HIS_MAX;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	f893 3196 	ldrb.w	r3, [r3, #406]	; 0x196
 8002008:	1c5a      	adds	r2, r3, #1
 800200a:	4b0b      	ldr	r3, [pc, #44]	; (8002038 <cliLineAdd+0x90>)
 800200c:	fb83 1302 	smull	r1, r3, r3, r2
 8002010:	1059      	asrs	r1, r3, #1
 8002012:	17d3      	asrs	r3, r2, #31
 8002014:	1ac9      	subs	r1, r1, r3
 8002016:	460b      	mov	r3, r1
 8002018:	009b      	lsls	r3, r3, #2
 800201a:	440b      	add	r3, r1
 800201c:	1ad1      	subs	r1, r2, r3
 800201e:	b2ca      	uxtb	r2, r1
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	f883 2196 	strb.w	r2, [r3, #406]	; 0x196
  p_cli->hist_line_new  = true;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2201      	movs	r2, #1
 800202a:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194
}
 800202e:	bf00      	nop
 8002030:	3708      	adds	r7, #8
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}
 8002036:	bf00      	nop
 8002038:	66666667 	.word	0x66666667

0800203c <cliLineChange>:

void cliLineChange(cli_t *p_cli, int8_t key_up)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b084      	sub	sp, #16
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
 8002044:	460b      	mov	r3, r1
 8002046:	70fb      	strb	r3, [r7, #3]
  uint8_t change_i;


  if (p_cli->hist_line_count == 0)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	f893 3197 	ldrb.w	r3, [r3, #407]	; 0x197
 800204e:	2b00      	cmp	r3, #0
 8002050:	d076      	beq.n	8002140 <cliLineChange+0x104>
  {
    return;
  }


  if (p_cli->line.cursor > 0)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	f893 3328 	ldrb.w	r3, [r3, #808]	; 0x328
 8002058:	2b00      	cmp	r3, #0
 800205a:	d008      	beq.n	800206e <cliLineChange+0x32>
  {
    uartPrintf(p_cli->ch, "\x1B[%dD", p_cli->line.cursor);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	7818      	ldrb	r0, [r3, #0]
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	f893 3328 	ldrb.w	r3, [r3, #808]	; 0x328
 8002066:	461a      	mov	r2, r3
 8002068:	4937      	ldr	r1, [pc, #220]	; (8002148 <cliLineChange+0x10c>)
 800206a:	f001 f9a5 	bl	80033b8 <uartPrintf>
  }
  if (p_cli->line.count > 0)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	f893 3329 	ldrb.w	r3, [r3, #809]	; 0x329
 8002074:	2b00      	cmp	r3, #0
 8002076:	d008      	beq.n	800208a <cliLineChange+0x4e>
  {
    uartPrintf(p_cli->ch, "\x1B[%dP", p_cli->line.count);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	7818      	ldrb	r0, [r3, #0]
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	f893 3329 	ldrb.w	r3, [r3, #809]	; 0x329
 8002082:	461a      	mov	r2, r3
 8002084:	4931      	ldr	r1, [pc, #196]	; (800214c <cliLineChange+0x110>)
 8002086:	f001 f997 	bl	80033b8 <uartPrintf>
  }


  if (key_up == true)
 800208a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800208e:	2b01      	cmp	r3, #1
 8002090:	d125      	bne.n	80020de <cliLineChange+0xa2>
  {
    if (p_cli->hist_line_new == true)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	f893 3194 	ldrb.w	r3, [r3, #404]	; 0x194
 8002098:	2b00      	cmp	r3, #0
 800209a:	d006      	beq.n	80020aa <cliLineChange+0x6e>
    {
      p_cli->hist_line_i = p_cli->hist_line_last;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	f893 3196 	ldrb.w	r3, [r3, #406]	; 0x196
 80020a2:	b25a      	sxtb	r2, r3
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
    }
    p_cli->hist_line_i = (p_cli->hist_line_i + p_cli->hist_line_count - 1) % p_cli->hist_line_count;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	f993 3195 	ldrsb.w	r3, [r3, #405]	; 0x195
 80020b0:	461a      	mov	r2, r3
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	f893 3197 	ldrb.w	r3, [r3, #407]	; 0x197
 80020b8:	4413      	add	r3, r2
 80020ba:	3b01      	subs	r3, #1
 80020bc:	687a      	ldr	r2, [r7, #4]
 80020be:	f892 2197 	ldrb.w	r2, [r2, #407]	; 0x197
 80020c2:	fb93 f1f2 	sdiv	r1, r3, r2
 80020c6:	fb01 f202 	mul.w	r2, r1, r2
 80020ca:	1a9b      	subs	r3, r3, r2
 80020cc:	b25a      	sxtb	r2, r3
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
    change_i = p_cli->hist_line_i;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	f993 3195 	ldrsb.w	r3, [r3, #405]	; 0x195
 80020da:	73fb      	strb	r3, [r7, #15]
 80020dc:	e013      	b.n	8002106 <cliLineChange+0xca>
  }
  else
  {
    p_cli->hist_line_i = (p_cli->hist_line_i + 1) % p_cli->hist_line_count;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	f993 3195 	ldrsb.w	r3, [r3, #405]	; 0x195
 80020e4:	3301      	adds	r3, #1
 80020e6:	687a      	ldr	r2, [r7, #4]
 80020e8:	f892 2197 	ldrb.w	r2, [r2, #407]	; 0x197
 80020ec:	fb93 f1f2 	sdiv	r1, r3, r2
 80020f0:	fb01 f202 	mul.w	r2, r1, r2
 80020f4:	1a9b      	subs	r3, r3, r2
 80020f6:	b25a      	sxtb	r2, r3
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
    change_i = p_cli->hist_line_i;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	f993 3195 	ldrsb.w	r3, [r3, #405]	; 0x195
 8002104:	73fb      	strb	r3, [r7, #15]
  }

  p_cli->line = p_cli->line_buf[change_i];
 8002106:	7bfa      	ldrb	r2, [r7, #15]
 8002108:	6879      	ldr	r1, [r7, #4]
 800210a:	6878      	ldr	r0, [r7, #4]
 800210c:	4613      	mov	r3, r2
 800210e:	015b      	lsls	r3, r3, #5
 8002110:	4413      	add	r3, r2
 8002112:	005b      	lsls	r3, r3, #1
 8002114:	4413      	add	r3, r2
 8002116:	4403      	add	r3, r0
 8002118:	f503 72cc 	add.w	r2, r3, #408	; 0x198
 800211c:	f201 23e7 	addw	r3, r1, #743	; 0x2e7
 8002120:	4611      	mov	r1, r2
 8002122:	2243      	movs	r2, #67	; 0x43
 8002124:	4618      	mov	r0, r3
 8002126:	f00e ff50 	bl	8010fca <memcpy>
  p_cli->line.cursor = p_cli->line.count;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	f893 2329 	ldrb.w	r2, [r3, #809]	; 0x329
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	f883 2328 	strb.w	r2, [r3, #808]	; 0x328

  p_cli->hist_line_new = false;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2200      	movs	r2, #0
 800213a:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194
 800213e:	e000      	b.n	8002142 <cliLineChange+0x106>
    return;
 8002140:	bf00      	nop
}
 8002142:	3710      	adds	r7, #16
 8002144:	46bd      	mov	sp, r7
 8002146:	bd80      	pop	{r7, pc}
 8002148:	080130e8 	.word	0x080130e8
 800214c:	080130f8 	.word	0x080130f8

08002150 <cliRunCmd>:

bool cliRunCmd(cli_t *p_cli)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b084      	sub	sp, #16
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  bool ret = false;
 8002158:	2300      	movs	r3, #0
 800215a:	72fb      	strb	r3, [r7, #11]


  if (cliParseArgs(p_cli) == true)
 800215c:	6878      	ldr	r0, [r7, #4]
 800215e:	f000 f851 	bl	8002204 <cliParseArgs>
 8002162:	4603      	mov	r3, r0
 8002164:	2b00      	cmp	r3, #0
 8002166:	d046      	beq.n	80021f6 <cliRunCmd+0xa6>
  {
    cliPrintf("\r\n");
 8002168:	4825      	ldr	r0, [pc, #148]	; (8002200 <cliRunCmd+0xb0>)
 800216a:	f000 f893 	bl	8002294 <cliPrintf>

    cliToUpper(p_cli->argv[0]);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8002174:	4618      	mov	r0, r3
 8002176:	f000 f8b1 	bl	80022dc <cliToUpper>

    for (int i=0; i<p_cli->cmd_count; i++)
 800217a:	2300      	movs	r3, #0
 800217c:	60fb      	str	r3, [r7, #12]
 800217e:	e033      	b.n	80021e8 <cliRunCmd+0x98>
    {
      if (strcmp(p_cli->argv[0], p_cli->cmd_list[i].cmd_str) == 0)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
 8002186:	68fa      	ldr	r2, [r7, #12]
 8002188:	4613      	mov	r3, r2
 800218a:	009b      	lsls	r3, r3, #2
 800218c:	4413      	add	r3, r2
 800218e:	009b      	lsls	r3, r3, #2
 8002190:	f503 734a 	add.w	r3, r3, #808	; 0x328
 8002194:	687a      	ldr	r2, [r7, #4]
 8002196:	4413      	add	r3, r2
 8002198:	3304      	adds	r3, #4
 800219a:	4619      	mov	r1, r3
 800219c:	f7fe f820 	bl	80001e0 <strcmp>
 80021a0:	4603      	mov	r3, r0
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d11d      	bne.n	80021e2 <cliRunCmd+0x92>
      {
        p_cli->cmd_args.argc =  p_cli->argc - 1;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	f8b3 3112 	ldrh.w	r3, [r3, #274]	; 0x112
 80021ac:	3b01      	subs	r3, #1
 80021ae:	b29a      	uxth	r2, r3
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	f8a3 246c 	strh.w	r2, [r3, #1132]	; 0x46c
        p_cli->cmd_args.argv = &p_cli->argv[1];
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	f503 728c 	add.w	r2, r3, #280	; 0x118
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	f8c3 2470 	str.w	r2, [r3, #1136]	; 0x470
        p_cli->cmd_list[i].cmd_func(&p_cli->cmd_args);
 80021c2:	6879      	ldr	r1, [r7, #4]
 80021c4:	68fa      	ldr	r2, [r7, #12]
 80021c6:	4613      	mov	r3, r2
 80021c8:	009b      	lsls	r3, r3, #2
 80021ca:	4413      	add	r3, r2
 80021cc:	009b      	lsls	r3, r3, #2
 80021ce:	440b      	add	r3, r1
 80021d0:	f503 734f 	add.w	r3, r3, #828	; 0x33c
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	687a      	ldr	r2, [r7, #4]
 80021d8:	f202 426c 	addw	r2, r2, #1132	; 0x46c
 80021dc:	4610      	mov	r0, r2
 80021de:	4798      	blx	r3
        break;
 80021e0:	e009      	b.n	80021f6 <cliRunCmd+0xa6>
    for (int i=0; i<p_cli->cmd_count; i++)
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	3301      	adds	r3, #1
 80021e6:	60fb      	str	r3, [r7, #12]
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	f8b3 332a 	ldrh.w	r3, [r3, #810]	; 0x32a
 80021ee:	461a      	mov	r2, r3
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	4293      	cmp	r3, r2
 80021f4:	dbc4      	blt.n	8002180 <cliRunCmd+0x30>
      }
    }
  }

  return ret;
 80021f6:	7afb      	ldrb	r3, [r7, #11]
}
 80021f8:	4618      	mov	r0, r3
 80021fa:	3710      	adds	r7, #16
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bd80      	pop	{r7, pc}
 8002200:	08013100 	.word	0x08013100

08002204 <cliParseArgs>:

bool cliParseArgs(cli_t *p_cli)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b088      	sub	sp, #32
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  bool ret = false;
 800220c:	2300      	movs	r3, #0
 800220e:	77fb      	strb	r3, [r7, #31]
  char *tok;
  char *next_ptr;
  uint16_t argc = 0;
 8002210:	2300      	movs	r3, #0
 8002212:	82fb      	strh	r3, [r7, #22]
  static const char *delim = " \f\n\r\t\v";
  char *cmdline;
  char **argv;

  p_cli->argc = 0;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2200      	movs	r2, #0
 8002218:	f8a3 2112 	strh.w	r2, [r3, #274]	; 0x112

  cmdline = (char *)p_cli->line.buf;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	f203 23e7 	addw	r3, r3, #743	; 0x2e7
 8002222:	613b      	str	r3, [r7, #16]
  argv    = p_cli->argv;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	f503 738a 	add.w	r3, r3, #276	; 0x114
 800222a:	60fb      	str	r3, [r7, #12]

  argv[argc] = NULL;
 800222c:	8afb      	ldrh	r3, [r7, #22]
 800222e:	009b      	lsls	r3, r3, #2
 8002230:	68fa      	ldr	r2, [r7, #12]
 8002232:	4413      	add	r3, r2
 8002234:	2200      	movs	r2, #0
 8002236:	601a      	str	r2, [r3, #0]

  for (tok = strtok_r(cmdline, delim, &next_ptr); tok; tok = strtok_r(NULL, delim, &next_ptr))
 8002238:	4b15      	ldr	r3, [pc, #84]	; (8002290 <cliParseArgs+0x8c>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f107 0208 	add.w	r2, r7, #8
 8002240:	4619      	mov	r1, r3
 8002242:	6938      	ldr	r0, [r7, #16]
 8002244:	f00e fe42 	bl	8010ecc <strtok_r>
 8002248:	61b8      	str	r0, [r7, #24]
 800224a:	e010      	b.n	800226e <cliParseArgs+0x6a>
  {
    argv[argc++] = tok;
 800224c:	8afb      	ldrh	r3, [r7, #22]
 800224e:	1c5a      	adds	r2, r3, #1
 8002250:	82fa      	strh	r2, [r7, #22]
 8002252:	009b      	lsls	r3, r3, #2
 8002254:	68fa      	ldr	r2, [r7, #12]
 8002256:	4413      	add	r3, r2
 8002258:	69ba      	ldr	r2, [r7, #24]
 800225a:	601a      	str	r2, [r3, #0]
  for (tok = strtok_r(cmdline, delim, &next_ptr); tok; tok = strtok_r(NULL, delim, &next_ptr))
 800225c:	4b0c      	ldr	r3, [pc, #48]	; (8002290 <cliParseArgs+0x8c>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f107 0208 	add.w	r2, r7, #8
 8002264:	4619      	mov	r1, r3
 8002266:	2000      	movs	r0, #0
 8002268:	f00e fe30 	bl	8010ecc <strtok_r>
 800226c:	61b8      	str	r0, [r7, #24]
 800226e:	69bb      	ldr	r3, [r7, #24]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d1eb      	bne.n	800224c <cliParseArgs+0x48>
  }

  p_cli->argc = argc;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	8afa      	ldrh	r2, [r7, #22]
 8002278:	f8a3 2112 	strh.w	r2, [r3, #274]	; 0x112

  if (argc > 0)
 800227c:	8afb      	ldrh	r3, [r7, #22]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d001      	beq.n	8002286 <cliParseArgs+0x82>
  {
    ret = true;
 8002282:	2301      	movs	r3, #1
 8002284:	77fb      	strb	r3, [r7, #31]
  }

  return ret;
 8002286:	7ffb      	ldrb	r3, [r7, #31]
}
 8002288:	4618      	mov	r0, r3
 800228a:	3720      	adds	r7, #32
 800228c:	46bd      	mov	sp, r7
 800228e:	bd80      	pop	{r7, pc}
 8002290:	20000004 	.word	0x20000004

08002294 <cliPrintf>:

void cliPrintf(const char *fmt, ...)
{
 8002294:	b40f      	push	{r0, r1, r2, r3}
 8002296:	b580      	push	{r7, lr}
 8002298:	b084      	sub	sp, #16
 800229a:	af00      	add	r7, sp, #0
  va_list arg;
  va_start (arg, fmt);
 800229c:	f107 031c 	add.w	r3, r7, #28
 80022a0:	607b      	str	r3, [r7, #4]
  int32_t len;
  cli_t *p_cli = &cli_node;
 80022a2:	4b0d      	ldr	r3, [pc, #52]	; (80022d8 <cliPrintf+0x44>)
 80022a4:	60fb      	str	r3, [r7, #12]


  len = vsnprintf(p_cli->print_buffer, 256, fmt, arg);
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	f103 0011 	add.w	r0, r3, #17
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	69ba      	ldr	r2, [r7, #24]
 80022b0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80022b4:	f00e fdba 	bl	8010e2c <vsniprintf>
 80022b8:	60b8      	str	r0, [r7, #8]
  va_end (arg);

  uartWrite(p_cli->ch, (uint8_t *)p_cli->print_buffer, len);
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	7818      	ldrb	r0, [r3, #0]
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	3311      	adds	r3, #17
 80022c2:	68ba      	ldr	r2, [r7, #8]
 80022c4:	4619      	mov	r1, r3
 80022c6:	f001 f860 	bl	800338a <uartWrite>
}
 80022ca:	bf00      	nop
 80022cc:	3710      	adds	r7, #16
 80022ce:	46bd      	mov	sp, r7
 80022d0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80022d4:	b004      	add	sp, #16
 80022d6:	4770      	bx	lr
 80022d8:	20000644 	.word	0x20000644

080022dc <cliToUpper>:

void cliToUpper(char *str)
{
 80022dc:	b480      	push	{r7}
 80022de:	b085      	sub	sp, #20
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  uint16_t i;
  uint8_t  str_ch;

  for (i=0; i<CLI_CMD_NAME_MAX; i++)
 80022e4:	2300      	movs	r3, #0
 80022e6:	81fb      	strh	r3, [r7, #14]
 80022e8:	e018      	b.n	800231c <cliToUpper+0x40>
  {
    str_ch = str[i];
 80022ea:	89fb      	ldrh	r3, [r7, #14]
 80022ec:	687a      	ldr	r2, [r7, #4]
 80022ee:	4413      	add	r3, r2
 80022f0:	781b      	ldrb	r3, [r3, #0]
 80022f2:	737b      	strb	r3, [r7, #13]

    if (str_ch == 0)
 80022f4:	7b7b      	ldrb	r3, [r7, #13]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d014      	beq.n	8002324 <cliToUpper+0x48>
    {
      break;
    }

    if ((str_ch >= 'a') && (str_ch <= 'z'))
 80022fa:	7b7b      	ldrb	r3, [r7, #13]
 80022fc:	2b60      	cmp	r3, #96	; 0x60
 80022fe:	d905      	bls.n	800230c <cliToUpper+0x30>
 8002300:	7b7b      	ldrb	r3, [r7, #13]
 8002302:	2b7a      	cmp	r3, #122	; 0x7a
 8002304:	d802      	bhi.n	800230c <cliToUpper+0x30>
    {
      str_ch = str_ch - 'a' + 'A';
 8002306:	7b7b      	ldrb	r3, [r7, #13]
 8002308:	3b20      	subs	r3, #32
 800230a:	737b      	strb	r3, [r7, #13]
    }
    str[i] = str_ch;
 800230c:	89fb      	ldrh	r3, [r7, #14]
 800230e:	687a      	ldr	r2, [r7, #4]
 8002310:	4413      	add	r3, r2
 8002312:	7b7a      	ldrb	r2, [r7, #13]
 8002314:	701a      	strb	r2, [r3, #0]
  for (i=0; i<CLI_CMD_NAME_MAX; i++)
 8002316:	89fb      	ldrh	r3, [r7, #14]
 8002318:	3301      	adds	r3, #1
 800231a:	81fb      	strh	r3, [r7, #14]
 800231c:	89fb      	ldrh	r3, [r7, #14]
 800231e:	2b0f      	cmp	r3, #15
 8002320:	d9e3      	bls.n	80022ea <cliToUpper+0xe>
 8002322:	e000      	b.n	8002326 <cliToUpper+0x4a>
      break;
 8002324:	bf00      	nop
  }

  if (i == CLI_CMD_NAME_MAX)
 8002326:	89fb      	ldrh	r3, [r7, #14]
 8002328:	2b10      	cmp	r3, #16
 800232a:	d105      	bne.n	8002338 <cliToUpper+0x5c>
  {
    str[i-1] = 0;
 800232c:	89fb      	ldrh	r3, [r7, #14]
 800232e:	3b01      	subs	r3, #1
 8002330:	687a      	ldr	r2, [r7, #4]
 8002332:	4413      	add	r3, r2
 8002334:	2200      	movs	r2, #0
 8002336:	701a      	strb	r2, [r3, #0]
  }
}
 8002338:	bf00      	nop
 800233a:	3714      	adds	r7, #20
 800233c:	46bd      	mov	sp, r7
 800233e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002342:	4770      	bx	lr

08002344 <cliArgsGetData>:

int32_t cliArgsGetData(uint8_t index)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b084      	sub	sp, #16
 8002348:	af00      	add	r7, sp, #0
 800234a:	4603      	mov	r3, r0
 800234c:	71fb      	strb	r3, [r7, #7]
  int32_t ret = 0;
 800234e:	2300      	movs	r3, #0
 8002350:	60fb      	str	r3, [r7, #12]
  cli_t *p_cli = &cli_node;
 8002352:	4b0f      	ldr	r3, [pc, #60]	; (8002390 <cliArgsGetData+0x4c>)
 8002354:	60bb      	str	r3, [r7, #8]


  if (index >= p_cli->cmd_args.argc)
 8002356:	79fb      	ldrb	r3, [r7, #7]
 8002358:	b29a      	uxth	r2, r3
 800235a:	68bb      	ldr	r3, [r7, #8]
 800235c:	f8b3 346c 	ldrh.w	r3, [r3, #1132]	; 0x46c
 8002360:	429a      	cmp	r2, r3
 8002362:	d301      	bcc.n	8002368 <cliArgsGetData+0x24>
  {
    return 0;
 8002364:	2300      	movs	r3, #0
 8002366:	e00e      	b.n	8002386 <cliArgsGetData+0x42>
  }

  ret = (int32_t)strtoul((const char * ) p_cli->cmd_args.argv[index], (char **)NULL, (int) 0);
 8002368:	68bb      	ldr	r3, [r7, #8]
 800236a:	f8d3 2470 	ldr.w	r2, [r3, #1136]	; 0x470
 800236e:	79fb      	ldrb	r3, [r7, #7]
 8002370:	009b      	lsls	r3, r3, #2
 8002372:	4413      	add	r3, r2
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	2200      	movs	r2, #0
 8002378:	2100      	movs	r1, #0
 800237a:	4618      	mov	r0, r3
 800237c:	f00e fc1c 	bl	8010bb8 <strtoul>
 8002380:	4603      	mov	r3, r0
 8002382:	60fb      	str	r3, [r7, #12]

  return ret;
 8002384:	68fb      	ldr	r3, [r7, #12]
}
 8002386:	4618      	mov	r0, r3
 8002388:	3710      	adds	r7, #16
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}
 800238e:	bf00      	nop
 8002390:	20000644 	.word	0x20000644

08002394 <cliArgsGetFloat>:

float cliArgsGetFloat(uint8_t index)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b084      	sub	sp, #16
 8002398:	af00      	add	r7, sp, #0
 800239a:	4603      	mov	r3, r0
 800239c:	71fb      	strb	r3, [r7, #7]
  float ret = 0.0;
 800239e:	f04f 0300 	mov.w	r3, #0
 80023a2:	60fb      	str	r3, [r7, #12]
  cli_t *p_cli = &cli_node;
 80023a4:	4b10      	ldr	r3, [pc, #64]	; (80023e8 <cliArgsGetFloat+0x54>)
 80023a6:	60bb      	str	r3, [r7, #8]


  if (index >= p_cli->cmd_args.argc)
 80023a8:	79fb      	ldrb	r3, [r7, #7]
 80023aa:	b29a      	uxth	r2, r3
 80023ac:	68bb      	ldr	r3, [r7, #8]
 80023ae:	f8b3 346c 	ldrh.w	r3, [r3, #1132]	; 0x46c
 80023b2:	429a      	cmp	r2, r3
 80023b4:	d302      	bcc.n	80023bc <cliArgsGetFloat+0x28>
  {
    return 0;
 80023b6:	f04f 0300 	mov.w	r3, #0
 80023ba:	e00d      	b.n	80023d8 <cliArgsGetFloat+0x44>
  }

  ret = (float)strtof((const char * ) p_cli->cmd_args.argv[index], (char **)NULL);
 80023bc:	68bb      	ldr	r3, [r7, #8]
 80023be:	f8d3 2470 	ldr.w	r2, [r3, #1136]	; 0x470
 80023c2:	79fb      	ldrb	r3, [r7, #7]
 80023c4:	009b      	lsls	r3, r3, #2
 80023c6:	4413      	add	r3, r2
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	2100      	movs	r1, #0
 80023cc:	4618      	mov	r0, r3
 80023ce:	f00e fb1b 	bl	8010a08 <strtof>
 80023d2:	ed87 0a03 	vstr	s0, [r7, #12]

  return ret;
 80023d6:	68fb      	ldr	r3, [r7, #12]
}
 80023d8:	ee07 3a90 	vmov	s15, r3
 80023dc:	eeb0 0a67 	vmov.f32	s0, s15
 80023e0:	3710      	adds	r7, #16
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}
 80023e6:	bf00      	nop
 80023e8:	20000644 	.word	0x20000644

080023ec <cliArgsGetStr>:

char *cliArgsGetStr(uint8_t index)
{
 80023ec:	b480      	push	{r7}
 80023ee:	b085      	sub	sp, #20
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	4603      	mov	r3, r0
 80023f4:	71fb      	strb	r3, [r7, #7]
  char *ret = NULL;
 80023f6:	2300      	movs	r3, #0
 80023f8:	60fb      	str	r3, [r7, #12]
  cli_t *p_cli = &cli_node;
 80023fa:	4b0d      	ldr	r3, [pc, #52]	; (8002430 <cliArgsGetStr+0x44>)
 80023fc:	60bb      	str	r3, [r7, #8]


  if (index >= p_cli->cmd_args.argc)
 80023fe:	79fb      	ldrb	r3, [r7, #7]
 8002400:	b29a      	uxth	r2, r3
 8002402:	68bb      	ldr	r3, [r7, #8]
 8002404:	f8b3 346c 	ldrh.w	r3, [r3, #1132]	; 0x46c
 8002408:	429a      	cmp	r2, r3
 800240a:	d301      	bcc.n	8002410 <cliArgsGetStr+0x24>
  {
    return 0;
 800240c:	2300      	movs	r3, #0
 800240e:	e008      	b.n	8002422 <cliArgsGetStr+0x36>
  }

  ret = p_cli->cmd_args.argv[index];
 8002410:	68bb      	ldr	r3, [r7, #8]
 8002412:	f8d3 2470 	ldr.w	r2, [r3, #1136]	; 0x470
 8002416:	79fb      	ldrb	r3, [r7, #7]
 8002418:	009b      	lsls	r3, r3, #2
 800241a:	4413      	add	r3, r2
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	60fb      	str	r3, [r7, #12]

  return ret;
 8002420:	68fb      	ldr	r3, [r7, #12]
}
 8002422:	4618      	mov	r0, r3
 8002424:	3714      	adds	r7, #20
 8002426:	46bd      	mov	sp, r7
 8002428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242c:	4770      	bx	lr
 800242e:	bf00      	nop
 8002430:	20000644 	.word	0x20000644

08002434 <cliArgsIsStr>:

bool cliArgsIsStr(uint8_t index, char *p_str)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b084      	sub	sp, #16
 8002438:	af00      	add	r7, sp, #0
 800243a:	4603      	mov	r3, r0
 800243c:	6039      	str	r1, [r7, #0]
 800243e:	71fb      	strb	r3, [r7, #7]
  bool ret = false;
 8002440:	2300      	movs	r3, #0
 8002442:	73fb      	strb	r3, [r7, #15]
  cli_t *p_cli = &cli_node;
 8002444:	4b0f      	ldr	r3, [pc, #60]	; (8002484 <cliArgsIsStr+0x50>)
 8002446:	60bb      	str	r3, [r7, #8]


  if (index >= p_cli->cmd_args.argc)
 8002448:	79fb      	ldrb	r3, [r7, #7]
 800244a:	b29a      	uxth	r2, r3
 800244c:	68bb      	ldr	r3, [r7, #8]
 800244e:	f8b3 346c 	ldrh.w	r3, [r3, #1132]	; 0x46c
 8002452:	429a      	cmp	r2, r3
 8002454:	d301      	bcc.n	800245a <cliArgsIsStr+0x26>
  {
    return 0;
 8002456:	2300      	movs	r3, #0
 8002458:	e010      	b.n	800247c <cliArgsIsStr+0x48>
  }

  if(strcmp(p_str, p_cli->cmd_args.argv[index]) == 0)
 800245a:	68bb      	ldr	r3, [r7, #8]
 800245c:	f8d3 2470 	ldr.w	r2, [r3, #1136]	; 0x470
 8002460:	79fb      	ldrb	r3, [r7, #7]
 8002462:	009b      	lsls	r3, r3, #2
 8002464:	4413      	add	r3, r2
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4619      	mov	r1, r3
 800246a:	6838      	ldr	r0, [r7, #0]
 800246c:	f7fd feb8 	bl	80001e0 <strcmp>
 8002470:	4603      	mov	r3, r0
 8002472:	2b00      	cmp	r3, #0
 8002474:	d101      	bne.n	800247a <cliArgsIsStr+0x46>
  {
    ret = true;
 8002476:	2301      	movs	r3, #1
 8002478:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800247a:	7bfb      	ldrb	r3, [r7, #15]
}
 800247c:	4618      	mov	r0, r3
 800247e:	3710      	adds	r7, #16
 8002480:	46bd      	mov	sp, r7
 8002482:	bd80      	pop	{r7, pc}
 8002484:	20000644 	.word	0x20000644

08002488 <cliKeepLoop>:

bool cliKeepLoop(void)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b082      	sub	sp, #8
 800248c:	af00      	add	r7, sp, #0
  cli_t *p_cli = &cli_node;
 800248e:	4b08      	ldr	r3, [pc, #32]	; (80024b0 <cliKeepLoop+0x28>)
 8002490:	607b      	str	r3, [r7, #4]


  if (uartAvailable(p_cli->ch) == 0)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	781b      	ldrb	r3, [r3, #0]
 8002496:	4618      	mov	r0, r3
 8002498:	f000 ff50 	bl	800333c <uartAvailable>
 800249c:	4603      	mov	r3, r0
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d101      	bne.n	80024a6 <cliKeepLoop+0x1e>
  {
    return true;
 80024a2:	2301      	movs	r3, #1
 80024a4:	e000      	b.n	80024a8 <cliKeepLoop+0x20>
  }
  else
  {
    return false;
 80024a6:	2300      	movs	r3, #0
  }
}
 80024a8:	4618      	mov	r0, r3
 80024aa:	3708      	adds	r7, #8
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bd80      	pop	{r7, pc}
 80024b0:	20000644 	.word	0x20000644

080024b4 <cliAdd>:

bool cliAdd(const char *cmd_str, void (*p_func)(cli_args_t *))
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b086      	sub	sp, #24
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
 80024bc:	6039      	str	r1, [r7, #0]
  bool ret = true;
 80024be:	2301      	movs	r3, #1
 80024c0:	75fb      	strb	r3, [r7, #23]
  cli_t *p_cli = &cli_node;
 80024c2:	4b20      	ldr	r3, [pc, #128]	; (8002544 <cliAdd+0x90>)
 80024c4:	613b      	str	r3, [r7, #16]
  uint16_t index;

  if (p_cli->cmd_count >= CLI_CMD_LIST_MAX)
 80024c6:	693b      	ldr	r3, [r7, #16]
 80024c8:	f8b3 332a 	ldrh.w	r3, [r3, #810]	; 0x32a
 80024cc:	2b0f      	cmp	r3, #15
 80024ce:	d901      	bls.n	80024d4 <cliAdd+0x20>
  {
    return false;
 80024d0:	2300      	movs	r3, #0
 80024d2:	e032      	b.n	800253a <cliAdd+0x86>
  }

  index = p_cli->cmd_count;
 80024d4:	693b      	ldr	r3, [r7, #16]
 80024d6:	f8b3 332a 	ldrh.w	r3, [r3, #810]	; 0x32a
 80024da:	81fb      	strh	r3, [r7, #14]

  strcpy(p_cli->cmd_list[index].cmd_str, cmd_str);
 80024dc:	89fa      	ldrh	r2, [r7, #14]
 80024de:	4613      	mov	r3, r2
 80024e0:	009b      	lsls	r3, r3, #2
 80024e2:	4413      	add	r3, r2
 80024e4:	009b      	lsls	r3, r3, #2
 80024e6:	f503 734a 	add.w	r3, r3, #808	; 0x328
 80024ea:	693a      	ldr	r2, [r7, #16]
 80024ec:	4413      	add	r3, r2
 80024ee:	3304      	adds	r3, #4
 80024f0:	6879      	ldr	r1, [r7, #4]
 80024f2:	4618      	mov	r0, r3
 80024f4:	f00e fd61 	bl	8010fba <strcpy>
  p_cli->cmd_list[index].cmd_func = p_func;
 80024f8:	89fa      	ldrh	r2, [r7, #14]
 80024fa:	6939      	ldr	r1, [r7, #16]
 80024fc:	4613      	mov	r3, r2
 80024fe:	009b      	lsls	r3, r3, #2
 8002500:	4413      	add	r3, r2
 8002502:	009b      	lsls	r3, r3, #2
 8002504:	440b      	add	r3, r1
 8002506:	f503 734f 	add.w	r3, r3, #828	; 0x33c
 800250a:	683a      	ldr	r2, [r7, #0]
 800250c:	601a      	str	r2, [r3, #0]

  cliToUpper(p_cli->cmd_list[index].cmd_str);
 800250e:	89fa      	ldrh	r2, [r7, #14]
 8002510:	4613      	mov	r3, r2
 8002512:	009b      	lsls	r3, r3, #2
 8002514:	4413      	add	r3, r2
 8002516:	009b      	lsls	r3, r3, #2
 8002518:	f503 734a 	add.w	r3, r3, #808	; 0x328
 800251c:	693a      	ldr	r2, [r7, #16]
 800251e:	4413      	add	r3, r2
 8002520:	3304      	adds	r3, #4
 8002522:	4618      	mov	r0, r3
 8002524:	f7ff feda 	bl	80022dc <cliToUpper>

  p_cli->cmd_count++;
 8002528:	693b      	ldr	r3, [r7, #16]
 800252a:	f8b3 332a 	ldrh.w	r3, [r3, #810]	; 0x32a
 800252e:	3301      	adds	r3, #1
 8002530:	b29a      	uxth	r2, r3
 8002532:	693b      	ldr	r3, [r7, #16]
 8002534:	f8a3 232a 	strh.w	r2, [r3, #810]	; 0x32a

  return ret;
 8002538:	7dfb      	ldrb	r3, [r7, #23]
}
 800253a:	4618      	mov	r0, r3
 800253c:	3718      	adds	r7, #24
 800253e:	46bd      	mov	sp, r7
 8002540:	bd80      	pop	{r7, pc}
 8002542:	bf00      	nop
 8002544:	20000644 	.word	0x20000644

08002548 <cliShowList>:

void cliShowList(cli_args_t *args)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b084      	sub	sp, #16
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
  cli_t *p_cli = &cli_node;
 8002550:	4b15      	ldr	r3, [pc, #84]	; (80025a8 <cliShowList+0x60>)
 8002552:	60bb      	str	r3, [r7, #8]


  cliPrintf("\r\n");
 8002554:	4815      	ldr	r0, [pc, #84]	; (80025ac <cliShowList+0x64>)
 8002556:	f7ff fe9d 	bl	8002294 <cliPrintf>
  cliPrintf("---------- cmd list ---------\r\n");
 800255a:	4815      	ldr	r0, [pc, #84]	; (80025b0 <cliShowList+0x68>)
 800255c:	f7ff fe9a 	bl	8002294 <cliPrintf>

  for (int i=0; i<p_cli->cmd_count; i++)
 8002560:	2300      	movs	r3, #0
 8002562:	60fb      	str	r3, [r7, #12]
 8002564:	e012      	b.n	800258c <cliShowList+0x44>
  {
    cliPrintf(p_cli->cmd_list[i].cmd_str);
 8002566:	68fa      	ldr	r2, [r7, #12]
 8002568:	4613      	mov	r3, r2
 800256a:	009b      	lsls	r3, r3, #2
 800256c:	4413      	add	r3, r2
 800256e:	009b      	lsls	r3, r3, #2
 8002570:	f503 734a 	add.w	r3, r3, #808	; 0x328
 8002574:	68ba      	ldr	r2, [r7, #8]
 8002576:	4413      	add	r3, r2
 8002578:	3304      	adds	r3, #4
 800257a:	4618      	mov	r0, r3
 800257c:	f7ff fe8a 	bl	8002294 <cliPrintf>
    cliPrintf("\r\n");
 8002580:	480a      	ldr	r0, [pc, #40]	; (80025ac <cliShowList+0x64>)
 8002582:	f7ff fe87 	bl	8002294 <cliPrintf>
  for (int i=0; i<p_cli->cmd_count; i++)
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	3301      	adds	r3, #1
 800258a:	60fb      	str	r3, [r7, #12]
 800258c:	68bb      	ldr	r3, [r7, #8]
 800258e:	f8b3 332a 	ldrh.w	r3, [r3, #810]	; 0x32a
 8002592:	461a      	mov	r2, r3
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	4293      	cmp	r3, r2
 8002598:	dbe5      	blt.n	8002566 <cliShowList+0x1e>
  }

  cliPrintf("-----------------------------\r\n");
 800259a:	4806      	ldr	r0, [pc, #24]	; (80025b4 <cliShowList+0x6c>)
 800259c:	f7ff fe7a 	bl	8002294 <cliPrintf>
}
 80025a0:	bf00      	nop
 80025a2:	3710      	adds	r7, #16
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bd80      	pop	{r7, pc}
 80025a8:	20000644 	.word	0x20000644
 80025ac:	08013100 	.word	0x08013100
 80025b0:	08013104 	.word	0x08013104
 80025b4:	08013124 	.word	0x08013124

080025b8 <cliMemoryDump>:

void cliMemoryDump(cli_args_t *args)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b08c      	sub	sp, #48	; 0x30
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  int idx, size = 16;
 80025c0:	2310      	movs	r3, #16
 80025c2:	62bb      	str	r3, [r7, #40]	; 0x28
  unsigned int *addr;
  int idx1, i;
  unsigned int *ascptr;
  unsigned char asc[4];

  int    argc = args->argc;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	881b      	ldrh	r3, [r3, #0]
 80025c8:	617b      	str	r3, [r7, #20]
  char **argv = args->argv;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	613b      	str	r3, [r7, #16]


  if(args->argc < 1)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	881b      	ldrh	r3, [r3, #0]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d103      	bne.n	80025e0 <cliMemoryDump+0x28>
  {
    cliPrintf(">> md addr [size] \n");
 80025d8:	4840      	ldr	r0, [pc, #256]	; (80026dc <cliMemoryDump+0x124>)
 80025da:	f7ff fe5b 	bl	8002294 <cliPrintf>
 80025de:	e07a      	b.n	80026d6 <cliMemoryDump+0x11e>
    return;
  }

  if(argc > 1)
 80025e0:	697b      	ldr	r3, [r7, #20]
 80025e2:	2b01      	cmp	r3, #1
 80025e4:	dd09      	ble.n	80025fa <cliMemoryDump+0x42>
  {
    size = (int)strtoul((const char * ) argv[1], (char **)NULL, (int) 0);
 80025e6:	693b      	ldr	r3, [r7, #16]
 80025e8:	3304      	adds	r3, #4
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	2200      	movs	r2, #0
 80025ee:	2100      	movs	r1, #0
 80025f0:	4618      	mov	r0, r3
 80025f2:	f00e fae1 	bl	8010bb8 <strtoul>
 80025f6:	4603      	mov	r3, r0
 80025f8:	62bb      	str	r3, [r7, #40]	; 0x28
  }
  addr   = (unsigned int *)strtoul((const char * ) argv[0], (char **)NULL, (int) 0);
 80025fa:	693b      	ldr	r3, [r7, #16]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	2200      	movs	r2, #0
 8002600:	2100      	movs	r1, #0
 8002602:	4618      	mov	r0, r3
 8002604:	f00e fad8 	bl	8010bb8 <strtoul>
 8002608:	4603      	mov	r3, r0
 800260a:	627b      	str	r3, [r7, #36]	; 0x24
  ascptr = (unsigned int *)addr;
 800260c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800260e:	61bb      	str	r3, [r7, #24]

  cliPrintf("\n   ");
 8002610:	4833      	ldr	r0, [pc, #204]	; (80026e0 <cliMemoryDump+0x128>)
 8002612:	f7ff fe3f 	bl	8002294 <cliPrintf>
  for (idx = 0; idx<size; idx++)
 8002616:	2300      	movs	r3, #0
 8002618:	62fb      	str	r3, [r7, #44]	; 0x2c
 800261a:	e058      	b.n	80026ce <cliMemoryDump+0x116>
  {
    if((idx%4) == 0)
 800261c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800261e:	f003 0303 	and.w	r3, r3, #3
 8002622:	2b00      	cmp	r3, #0
 8002624:	d104      	bne.n	8002630 <cliMemoryDump+0x78>
    {
      cliPrintf(" 0x%08X: ", (unsigned int)addr);
 8002626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002628:	4619      	mov	r1, r3
 800262a:	482e      	ldr	r0, [pc, #184]	; (80026e4 <cliMemoryDump+0x12c>)
 800262c:	f7ff fe32 	bl	8002294 <cliPrintf>
    }
    cliPrintf(" 0x%08X", *(addr));
 8002630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4619      	mov	r1, r3
 8002636:	482c      	ldr	r0, [pc, #176]	; (80026e8 <cliMemoryDump+0x130>)
 8002638:	f7ff fe2c 	bl	8002294 <cliPrintf>

    if ((idx%4) == 3)
 800263c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800263e:	425a      	negs	r2, r3
 8002640:	f003 0303 	and.w	r3, r3, #3
 8002644:	f002 0203 	and.w	r2, r2, #3
 8002648:	bf58      	it	pl
 800264a:	4253      	negpl	r3, r2
 800264c:	2b03      	cmp	r3, #3
 800264e:	d138      	bne.n	80026c2 <cliMemoryDump+0x10a>
    {
      cliPrintf ("  |");
 8002650:	4826      	ldr	r0, [pc, #152]	; (80026ec <cliMemoryDump+0x134>)
 8002652:	f7ff fe1f 	bl	8002294 <cliPrintf>
      for (idx1= 0; idx1< 4; idx1++)
 8002656:	2300      	movs	r3, #0
 8002658:	623b      	str	r3, [r7, #32]
 800265a:	e02c      	b.n	80026b6 <cliMemoryDump+0xfe>
 800265c:	69bb      	ldr	r3, [r7, #24]
 800265e:	681b      	ldr	r3, [r3, #0]
      {
        memcpy((char *)asc, (char *)ascptr, 4);
 8002660:	60fb      	str	r3, [r7, #12]
        for (i=0;i<4;i++)
 8002662:	2300      	movs	r3, #0
 8002664:	61fb      	str	r3, [r7, #28]
 8002666:	e01d      	b.n	80026a4 <cliMemoryDump+0xec>
        {
          if (asc[i] > 0x1f && asc[i] < 0x7f)
 8002668:	f107 020c 	add.w	r2, r7, #12
 800266c:	69fb      	ldr	r3, [r7, #28]
 800266e:	4413      	add	r3, r2
 8002670:	781b      	ldrb	r3, [r3, #0]
 8002672:	2b1f      	cmp	r3, #31
 8002674:	d910      	bls.n	8002698 <cliMemoryDump+0xe0>
 8002676:	f107 020c 	add.w	r2, r7, #12
 800267a:	69fb      	ldr	r3, [r7, #28]
 800267c:	4413      	add	r3, r2
 800267e:	781b      	ldrb	r3, [r3, #0]
 8002680:	2b7e      	cmp	r3, #126	; 0x7e
 8002682:	d809      	bhi.n	8002698 <cliMemoryDump+0xe0>
          {
            cliPrintf("%c", asc[i]);
 8002684:	f107 020c 	add.w	r2, r7, #12
 8002688:	69fb      	ldr	r3, [r7, #28]
 800268a:	4413      	add	r3, r2
 800268c:	781b      	ldrb	r3, [r3, #0]
 800268e:	4619      	mov	r1, r3
 8002690:	4817      	ldr	r0, [pc, #92]	; (80026f0 <cliMemoryDump+0x138>)
 8002692:	f7ff fdff 	bl	8002294 <cliPrintf>
 8002696:	e002      	b.n	800269e <cliMemoryDump+0xe6>
          }
          else
          {
            cliPrintf(".");
 8002698:	4816      	ldr	r0, [pc, #88]	; (80026f4 <cliMemoryDump+0x13c>)
 800269a:	f7ff fdfb 	bl	8002294 <cliPrintf>
        for (i=0;i<4;i++)
 800269e:	69fb      	ldr	r3, [r7, #28]
 80026a0:	3301      	adds	r3, #1
 80026a2:	61fb      	str	r3, [r7, #28]
 80026a4:	69fb      	ldr	r3, [r7, #28]
 80026a6:	2b03      	cmp	r3, #3
 80026a8:	ddde      	ble.n	8002668 <cliMemoryDump+0xb0>
          }
        }
        ascptr+=1;
 80026aa:	69bb      	ldr	r3, [r7, #24]
 80026ac:	3304      	adds	r3, #4
 80026ae:	61bb      	str	r3, [r7, #24]
      for (idx1= 0; idx1< 4; idx1++)
 80026b0:	6a3b      	ldr	r3, [r7, #32]
 80026b2:	3301      	adds	r3, #1
 80026b4:	623b      	str	r3, [r7, #32]
 80026b6:	6a3b      	ldr	r3, [r7, #32]
 80026b8:	2b03      	cmp	r3, #3
 80026ba:	ddcf      	ble.n	800265c <cliMemoryDump+0xa4>
      }
      cliPrintf("|\n   ");
 80026bc:	480e      	ldr	r0, [pc, #56]	; (80026f8 <cliMemoryDump+0x140>)
 80026be:	f7ff fde9 	bl	8002294 <cliPrintf>
    }
    addr++;
 80026c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c4:	3304      	adds	r3, #4
 80026c6:	627b      	str	r3, [r7, #36]	; 0x24
  for (idx = 0; idx<size; idx++)
 80026c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026ca:	3301      	adds	r3, #1
 80026cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80026ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80026d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026d2:	429a      	cmp	r2, r3
 80026d4:	dba2      	blt.n	800261c <cliMemoryDump+0x64>
  }
}
 80026d6:	3730      	adds	r7, #48	; 0x30
 80026d8:	46bd      	mov	sp, r7
 80026da:	bd80      	pop	{r7, pc}
 80026dc:	08013144 	.word	0x08013144
 80026e0:	08013158 	.word	0x08013158
 80026e4:	08013160 	.word	0x08013160
 80026e8:	0801316c 	.word	0x0801316c
 80026ec:	08013174 	.word	0x08013174
 80026f0:	08013178 	.word	0x08013178
 80026f4:	0801317c 	.word	0x0801317c
 80026f8:	08013180 	.word	0x08013180

080026fc <fatfsInit>:
#ifdef _USE_HW_CLI
static void cliFatfs(cli_args_t *args);
#endif

bool fatfsInit(void)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b082      	sub	sp, #8
 8002700:	af00      	add	r7, sp, #0
	bool ret = false;
 8002702:	2300      	movs	r3, #0
 8002704:	71fb      	strb	r3, [r7, #7]

	if(FATFS_LinkDriver(&SD_Driver, SDPath) == 0)
 8002706:	490d      	ldr	r1, [pc, #52]	; (800273c <fatfsInit+0x40>)
 8002708:	480d      	ldr	r0, [pc, #52]	; (8002740 <fatfsInit+0x44>)
 800270a:	f00c fde1 	bl	800f2d0 <FATFS_LinkDriver>
 800270e:	4603      	mov	r3, r0
 8002710:	2b00      	cmp	r3, #0
 8002712:	d10a      	bne.n	800272a <fatfsInit+0x2e>
	{
		if(f_mount(&SDFatFs, (TCHAR const*)SDPath, 0) == FR_OK)
 8002714:	2200      	movs	r2, #0
 8002716:	4909      	ldr	r1, [pc, #36]	; (800273c <fatfsInit+0x40>)
 8002718:	480a      	ldr	r0, [pc, #40]	; (8002744 <fatfsInit+0x48>)
 800271a:	f00b fa03 	bl	800db24 <f_mount>
 800271e:	4603      	mov	r3, r0
 8002720:	2b00      	cmp	r3, #0
 8002722:	d102      	bne.n	800272a <fatfsInit+0x2e>
		{
			is_init = true;
 8002724:	4b08      	ldr	r3, [pc, #32]	; (8002748 <fatfsInit+0x4c>)
 8002726:	2201      	movs	r2, #1
 8002728:	701a      	strb	r2, [r3, #0]
		}
	}

	#ifdef _USE_HW_CLI
		cliAdd("fatfs", cliFatfs);
 800272a:	4908      	ldr	r1, [pc, #32]	; (800274c <fatfsInit+0x50>)
 800272c:	4808      	ldr	r0, [pc, #32]	; (8002750 <fatfsInit+0x54>)
 800272e:	f7ff fec1 	bl	80024b4 <cliAdd>
	#endif

	return ret;
 8002732:	79fb      	ldrb	r3, [r7, #7]
}
 8002734:	4618      	mov	r0, r3
 8002736:	3708      	adds	r7, #8
 8002738:	46bd      	mov	sp, r7
 800273a:	bd80      	pop	{r7, pc}
 800273c:	20000d0c 	.word	0x20000d0c
 8002740:	080135a8 	.word	0x080135a8
 8002744:	20000acc 	.word	0x20000acc
 8002748:	20000ac8 	.word	0x20000ac8
 800274c:	080027ed 	.word	0x080027ed
 8002750:	08013190 	.word	0x08013190

08002754 <fatfsDir>:


#ifdef _USE_HW_CLI

FRESULT fatfsDir(char *path)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b096      	sub	sp, #88	; 0x58
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dir;
	FILINFO fno;

	res = f_opendir(&dir, path);
 800275c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002760:	6879      	ldr	r1, [r7, #4]
 8002762:	4618      	mov	r0, r3
 8002764:	f00c f947 	bl	800e9f6 <f_opendir>
 8002768:	4603      	mov	r3, r0
 800276a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if(res == FR_OK)
 800276e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002772:	2b00      	cmp	r3, #0
 8002774:	d130      	bne.n	80027d8 <fatfsDir+0x84>
	{
		for(;;)
		{
			res = f_readdir(&dir, &fno);
 8002776:	f107 020c 	add.w	r2, r7, #12
 800277a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800277e:	4611      	mov	r1, r2
 8002780:	4618      	mov	r0, r3
 8002782:	f00c f9d1 	bl	800eb28 <f_readdir>
 8002786:	4603      	mov	r3, r0
 8002788:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if(res != FR_OK || fno.fname[0] == 0)
 800278c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002790:	2b00      	cmp	r3, #0
 8002792:	d11c      	bne.n	80027ce <fatfsDir+0x7a>
 8002794:	7d7b      	ldrb	r3, [r7, #21]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d019      	beq.n	80027ce <fatfsDir+0x7a>
				break;

			if(fno.fattrib & AM_DIR)
 800279a:	7d3b      	ldrb	r3, [r7, #20]
 800279c:	f003 0310 	and.w	r3, r3, #16
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d008      	beq.n	80027b6 <fatfsDir+0x62>
			{
				cliPrintf(" %s/%s \n", path, fno.fname);
 80027a4:	f107 030c 	add.w	r3, r7, #12
 80027a8:	3309      	adds	r3, #9
 80027aa:	461a      	mov	r2, r3
 80027ac:	6879      	ldr	r1, [r7, #4]
 80027ae:	480d      	ldr	r0, [pc, #52]	; (80027e4 <fatfsDir+0x90>)
 80027b0:	f7ff fd70 	bl	8002294 <cliPrintf>
 80027b4:	e7df      	b.n	8002776 <fatfsDir+0x22>
			}
			else
			{
				cliPrintf(" %s/%32s \t%d bytes\n", path, fno.fname, (int)fno.fsize);
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	4619      	mov	r1, r3
 80027ba:	f107 030c 	add.w	r3, r7, #12
 80027be:	f103 0209 	add.w	r2, r3, #9
 80027c2:	460b      	mov	r3, r1
 80027c4:	6879      	ldr	r1, [r7, #4]
 80027c6:	4808      	ldr	r0, [pc, #32]	; (80027e8 <fatfsDir+0x94>)
 80027c8:	f7ff fd64 	bl	8002294 <cliPrintf>
			res = f_readdir(&dir, &fno);
 80027cc:	e7d3      	b.n	8002776 <fatfsDir+0x22>
			}
		}

		f_closedir(&dir);
 80027ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80027d2:	4618      	mov	r0, r3
 80027d4:	f00c f982 	bl	800eadc <f_closedir>
	}

	return res;
 80027d8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 80027dc:	4618      	mov	r0, r3
 80027de:	3758      	adds	r7, #88	; 0x58
 80027e0:	46bd      	mov	sp, r7
 80027e2:	bd80      	pop	{r7, pc}
 80027e4:	08013198 	.word	0x08013198
 80027e8:	080131a4 	.word	0x080131a4

080027ec <cliFatfs>:

void cliFatfs(cli_args_t *args)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	f5ad 7d1a 	sub.w	sp, sp, #616	; 0x268
 80027f2:	af00      	add	r7, sp, #0
 80027f4:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80027f8:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80027fc:	6018      	str	r0, [r3, #0]
	bool ret = false;
 80027fe:	2300      	movs	r3, #0
 8002800:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267

	if(args->argc == 1 && args->isStr(0, "info") == true)
 8002804:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8002808:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	881b      	ldrh	r3, [r3, #0]
 8002810:	2b01      	cmp	r3, #1
 8002812:	d14d      	bne.n	80028b0 <cliFatfs+0xc4>
 8002814:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8002818:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	695b      	ldr	r3, [r3, #20]
 8002820:	4990      	ldr	r1, [pc, #576]	; (8002a64 <cliFatfs+0x278>)
 8002822:	2000      	movs	r0, #0
 8002824:	4798      	blx	r3
 8002826:	4603      	mov	r3, r0
 8002828:	2b00      	cmp	r3, #0
 800282a:	d041      	beq.n	80028b0 <cliFatfs+0xc4>
	{
		cliPrintf("fatfs init \t: %d\n", is_init);
 800282c:	4b8e      	ldr	r3, [pc, #568]	; (8002a68 <cliFatfs+0x27c>)
 800282e:	781b      	ldrb	r3, [r3, #0]
 8002830:	4619      	mov	r1, r3
 8002832:	488e      	ldr	r0, [pc, #568]	; (8002a6c <cliFatfs+0x280>)
 8002834:	f7ff fd2e 	bl	8002294 <cliPrintf>

		if(is_init == true)
 8002838:	4b8b      	ldr	r3, [pc, #556]	; (8002a68 <cliFatfs+0x27c>)
 800283a:	781b      	ldrb	r3, [r3, #0]
 800283c:	2b00      	cmp	r3, #0
 800283e:	d034      	beq.n	80028aa <cliFatfs+0xbe>
			FATFS *fs;
			DWORD fre_clust, fre_sect, tot_sect;
			FRESULT res;

			/* Get volume information and free clusters of drive 1 */
			res = f_getfree("", &fre_clust, &fs);
 8002840:	f507 7211 	add.w	r2, r7, #580	; 0x244
 8002844:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8002848:	4619      	mov	r1, r3
 800284a:	4889      	ldr	r0, [pc, #548]	; (8002a70 <cliFatfs+0x284>)
 800284c:	f00c f9a9 	bl	800eba2 <f_getfree>
 8002850:	4603      	mov	r3, r0
 8002852:	f887 325f 	strb.w	r3, [r7, #607]	; 0x25f
			if(res == FR_OK)
 8002856:	f897 325f 	ldrb.w	r3, [r7, #607]	; 0x25f
 800285a:	2b00      	cmp	r3, #0
 800285c:	d11f      	bne.n	800289e <cliFatfs+0xb2>
			{
				/* Get total sectors and free sectors */
				tot_sect = (fs->n_fatent - 2) * fs->csize;
 800285e:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8002862:	695b      	ldr	r3, [r3, #20]
 8002864:	3b02      	subs	r3, #2
 8002866:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 800286a:	8952      	ldrh	r2, [r2, #10]
 800286c:	fb02 f303 	mul.w	r3, r2, r3
 8002870:	f8c7 3258 	str.w	r3, [r7, #600]	; 0x258
				fre_sect = fre_clust * fs->csize;
 8002874:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8002878:	895b      	ldrh	r3, [r3, #10]
 800287a:	461a      	mov	r2, r3
 800287c:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 8002880:	fb02 f303 	mul.w	r3, r2, r3
 8002884:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254

				/* Print the free space (assuming 512 bytes/sector) */
				cliPrintf("%10lu KiB total drive space.\n%10lu KiB available.\n", tot_sect/2, fre_sect/2);
 8002888:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 800288c:	0859      	lsrs	r1, r3, #1
 800288e:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8002892:	085b      	lsrs	r3, r3, #1
 8002894:	461a      	mov	r2, r3
 8002896:	4877      	ldr	r0, [pc, #476]	; (8002a74 <cliFatfs+0x288>)
 8002898:	f7ff fcfc 	bl	8002294 <cliPrintf>
 800289c:	e005      	b.n	80028aa <cliFatfs+0xbe>
			}
			else
			{
				cliPrintf(" err : %d\n", res);
 800289e:	f897 325f 	ldrb.w	r3, [r7, #607]	; 0x25f
 80028a2:	4619      	mov	r1, r3
 80028a4:	4874      	ldr	r0, [pc, #464]	; (8002a78 <cliFatfs+0x28c>)
 80028a6:	f7ff fcf5 	bl	8002294 <cliPrintf>
			}
		}

		ret = true;
 80028aa:	2301      	movs	r3, #1
 80028ac:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
	}

	if(args->argc == 1 && args->isStr(0, "dir") == true)
 80028b0:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80028b4:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	881b      	ldrh	r3, [r3, #0]
 80028bc:	2b01      	cmp	r3, #1
 80028be:	d11e      	bne.n	80028fe <cliFatfs+0x112>
 80028c0:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80028c4:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	695b      	ldr	r3, [r3, #20]
 80028cc:	496b      	ldr	r1, [pc, #428]	; (8002a7c <cliFatfs+0x290>)
 80028ce:	2000      	movs	r0, #0
 80028d0:	4798      	blx	r3
 80028d2:	4603      	mov	r3, r0
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d012      	beq.n	80028fe <cliFatfs+0x112>
	{
		FRESULT res;

		res = fatfsDir("/");
 80028d8:	4869      	ldr	r0, [pc, #420]	; (8002a80 <cliFatfs+0x294>)
 80028da:	f7ff ff3b 	bl	8002754 <fatfsDir>
 80028de:	4603      	mov	r3, r0
 80028e0:	f887 3253 	strb.w	r3, [r7, #595]	; 0x253
		if(res != FR_OK)
 80028e4:	f897 3253 	ldrb.w	r3, [r7, #595]	; 0x253
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d005      	beq.n	80028f8 <cliFatfs+0x10c>
		{
			cliPrintf(" err : %d\n", res);
 80028ec:	f897 3253 	ldrb.w	r3, [r7, #595]	; 0x253
 80028f0:	4619      	mov	r1, r3
 80028f2:	4861      	ldr	r0, [pc, #388]	; (8002a78 <cliFatfs+0x28c>)
 80028f4:	f7ff fcce 	bl	8002294 <cliPrintf>
		}

		ret = true;
 80028f8:	2301      	movs	r3, #1
 80028fa:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
	}

	if(args->argc == 1 && args->isStr(0, "test") == true)
 80028fe:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8002902:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	881b      	ldrh	r3, [r3, #0]
 800290a:	2b01      	cmp	r3, #1
 800290c:	f040 8095 	bne.w	8002a3a <cliFatfs+0x24e>
 8002910:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8002914:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	695b      	ldr	r3, [r3, #20]
 800291c:	4959      	ldr	r1, [pc, #356]	; (8002a84 <cliFatfs+0x298>)
 800291e:	2000      	movs	r0, #0
 8002920:	4798      	blx	r3
 8002922:	4603      	mov	r3, r0
 8002924:	2b00      	cmp	r3, #0
 8002926:	f000 8088 	beq.w	8002a3a <cliFatfs+0x24e>
	{
		FRESULT fp_ret;
		FIL log_file;
		uint32_t pre_time;

		pre_time = millis();
 800292a:	f7fe ff09 	bl	8001740 <millis>
 800292e:	f8c7 024c 	str.w	r0, [r7, #588]	; 0x24c
		fp_ret = f_open(&log_file, "1.csv", FA_CREATE_ALWAYS | FA_WRITE | FA_READ);
 8002932:	f107 0308 	add.w	r3, r7, #8
 8002936:	220b      	movs	r2, #11
 8002938:	4953      	ldr	r1, [pc, #332]	; (8002a88 <cliFatfs+0x29c>)
 800293a:	4618      	mov	r0, r3
 800293c:	f00b f938 	bl	800dbb0 <f_open>
 8002940:	4603      	mov	r3, r0
 8002942:	f887 324b 	strb.w	r3, [r7, #587]	; 0x24b
		if(fp_ret == FR_OK)
 8002946:	f897 324b 	ldrb.w	r3, [r7, #587]	; 0x24b
 800294a:	2b00      	cmp	r3, #0
 800294c:	d165      	bne.n	8002a1a <cliFatfs+0x22e>
		{
			f_printf(&log_file, "test1, ");
 800294e:	f107 0308 	add.w	r3, r7, #8
 8002952:	494e      	ldr	r1, [pc, #312]	; (8002a8c <cliFatfs+0x2a0>)
 8002954:	4618      	mov	r0, r3
 8002956:	f00c fa51 	bl	800edfc <f_printf>
			f_printf(&log_file, "test2, ");
 800295a:	f107 0308 	add.w	r3, r7, #8
 800295e:	494c      	ldr	r1, [pc, #304]	; (8002a90 <cliFatfs+0x2a4>)
 8002960:	4618      	mov	r0, r3
 8002962:	f00c fa4b 	bl	800edfc <f_printf>
			f_printf(&log_file, "test3, ");
 8002966:	f107 0308 	add.w	r3, r7, #8
 800296a:	494a      	ldr	r1, [pc, #296]	; (8002a94 <cliFatfs+0x2a8>)
 800296c:	4618      	mov	r0, r3
 800296e:	f00c fa45 	bl	800edfc <f_printf>
			f_printf(&log_file, ", ");
 8002972:	f107 0308 	add.w	r3, r7, #8
 8002976:	4948      	ldr	r1, [pc, #288]	; (8002a98 <cliFatfs+0x2ac>)
 8002978:	4618      	mov	r0, r3
 800297a:	f00c fa3f 	bl	800edfc <f_printf>
			f_printf(&log_file, "\n");
 800297e:	f107 0308 	add.w	r3, r7, #8
 8002982:	4946      	ldr	r1, [pc, #280]	; (8002a9c <cliFatfs+0x2b0>)
 8002984:	4618      	mov	r0, r3
 8002986:	f00c fa39 	bl	800edfc <f_printf>

			for(int i=0; i<8; i++)
 800298a:	2300      	movs	r3, #0
 800298c:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
 8002990:	e00c      	b.n	80029ac <cliFatfs+0x1c0>
			{
				f_printf(&log_file, "%d \n", i);
 8002992:	f107 0308 	add.w	r3, r7, #8
 8002996:	f8d7 2260 	ldr.w	r2, [r7, #608]	; 0x260
 800299a:	4941      	ldr	r1, [pc, #260]	; (8002aa0 <cliFatfs+0x2b4>)
 800299c:	4618      	mov	r0, r3
 800299e:	f00c fa2d 	bl	800edfc <f_printf>
			for(int i=0; i<8; i++)
 80029a2:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 80029a6:	3301      	adds	r3, #1
 80029a8:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
 80029ac:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 80029b0:	2b07      	cmp	r3, #7
 80029b2:	ddee      	ble.n	8002992 <cliFatfs+0x1a6>
			}

			f_rewind(&log_file);
 80029b4:	f107 0308 	add.w	r3, r7, #8
 80029b8:	2100      	movs	r1, #0
 80029ba:	4618      	mov	r0, r3
 80029bc:	f00b fe12 	bl	800e5e4 <f_lseek>


			UINT len;
			uint8_t data;

			while(cliKeepLoop())
 80029c0:	e01c      	b.n	80029fc <cliFatfs+0x210>
			{
				len = 0;
 80029c2:	2300      	movs	r3, #0
 80029c4:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
				fp_ret = f_read(&log_file, &data, 1, &len);
 80029c8:	f507 730f 	add.w	r3, r7, #572	; 0x23c
 80029cc:	f207 213b 	addw	r1, r7, #571	; 0x23b
 80029d0:	f107 0008 	add.w	r0, r7, #8
 80029d4:	2201      	movs	r2, #1
 80029d6:	f00b faa9 	bl	800df2c <f_read>
 80029da:	4603      	mov	r3, r0
 80029dc:	f887 324b 	strb.w	r3, [r7, #587]	; 0x24b

				if(fp_ret != FR_OK)
 80029e0:	f897 324b 	ldrb.w	r3, [r7, #587]	; 0x24b
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d10f      	bne.n	8002a08 <cliFatfs+0x21c>
				{
					break;
				}

				if(len == 0)
 80029e8:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d00d      	beq.n	8002a0c <cliFatfs+0x220>
				{
					break;
				}

				cliPrintf("%c", data);
 80029f0:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
 80029f4:	4619      	mov	r1, r3
 80029f6:	482b      	ldr	r0, [pc, #172]	; (8002aa4 <cliFatfs+0x2b8>)
 80029f8:	f7ff fc4c 	bl	8002294 <cliPrintf>
			while(cliKeepLoop())
 80029fc:	f7ff fd44 	bl	8002488 <cliKeepLoop>
 8002a00:	4603      	mov	r3, r0
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d1dd      	bne.n	80029c2 <cliFatfs+0x1d6>
 8002a06:	e002      	b.n	8002a0e <cliFatfs+0x222>
					break;
 8002a08:	bf00      	nop
 8002a0a:	e000      	b.n	8002a0e <cliFatfs+0x222>
					break;
 8002a0c:	bf00      	nop
			}

			f_close(&log_file);
 8002a0e:	f107 0308 	add.w	r3, r7, #8
 8002a12:	4618      	mov	r0, r3
 8002a14:	f00b fdbc 	bl	800e590 <f_close>
 8002a18:	e002      	b.n	8002a20 <cliFatfs+0x234>
		}
		else
		{
			cliPrintf("f_open fail\r\n");
 8002a1a:	4823      	ldr	r0, [pc, #140]	; (8002aa8 <cliFatfs+0x2bc>)
 8002a1c:	f7ff fc3a 	bl	8002294 <cliPrintf>
		}

		cliPrintf("%d ms\r\n", millis() - pre_time);
 8002a20:	f7fe fe8e 	bl	8001740 <millis>
 8002a24:	4602      	mov	r2, r0
 8002a26:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8002a2a:	1ad3      	subs	r3, r2, r3
 8002a2c:	4619      	mov	r1, r3
 8002a2e:	481f      	ldr	r0, [pc, #124]	; (8002aac <cliFatfs+0x2c0>)
 8002a30:	f7ff fc30 	bl	8002294 <cliPrintf>

		ret = true;
 8002a34:	2301      	movs	r3, #1
 8002a36:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
	}

	if(ret != true)
 8002a3a:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8002a3e:	f083 0301 	eor.w	r3, r3, #1
 8002a42:	b2db      	uxtb	r3, r3
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d008      	beq.n	8002a5a <cliFatfs+0x26e>
	{
		cliPrintf("fatfs info\n");
 8002a48:	4819      	ldr	r0, [pc, #100]	; (8002ab0 <cliFatfs+0x2c4>)
 8002a4a:	f7ff fc23 	bl	8002294 <cliPrintf>
		cliPrintf("fatfs dir\n");
 8002a4e:	4819      	ldr	r0, [pc, #100]	; (8002ab4 <cliFatfs+0x2c8>)
 8002a50:	f7ff fc20 	bl	8002294 <cliPrintf>
		cliPrintf("fatfs test\n");
 8002a54:	4818      	ldr	r0, [pc, #96]	; (8002ab8 <cliFatfs+0x2cc>)
 8002a56:	f7ff fc1d 	bl	8002294 <cliPrintf>
	}
}
 8002a5a:	bf00      	nop
 8002a5c:	f507 771a 	add.w	r7, r7, #616	; 0x268
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bd80      	pop	{r7, pc}
 8002a64:	080131b8 	.word	0x080131b8
 8002a68:	20000ac8 	.word	0x20000ac8
 8002a6c:	080131c0 	.word	0x080131c0
 8002a70:	080131d4 	.word	0x080131d4
 8002a74:	080131d8 	.word	0x080131d8
 8002a78:	0801320c 	.word	0x0801320c
 8002a7c:	08013218 	.word	0x08013218
 8002a80:	0801321c 	.word	0x0801321c
 8002a84:	08013220 	.word	0x08013220
 8002a88:	08013228 	.word	0x08013228
 8002a8c:	08013230 	.word	0x08013230
 8002a90:	08013238 	.word	0x08013238
 8002a94:	08013240 	.word	0x08013240
 8002a98:	08013248 	.word	0x08013248
 8002a9c:	0801324c 	.word	0x0801324c
 8002aa0:	08013250 	.word	0x08013250
 8002aa4:	08013258 	.word	0x08013258
 8002aa8:	0801325c 	.word	0x0801325c
 8002aac:	0801326c 	.word	0x0801326c
 8002ab0:	08013274 	.word	0x08013274
 8002ab4:	08013280 	.word	0x08013280
 8002ab8:	0801328c 	.word	0x0801328c

08002abc <gpioInit>:
static void cliGpio(cli_args_t *args);
#endif


bool gpioInit(void)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b082      	sub	sp, #8
 8002ac0:	af00      	add	r7, sp, #0
	bool ret = true;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	71fb      	strb	r3, [r7, #7]

#ifdef _USE_HW_CLI
	cliAdd("gpio", cliGpio);
 8002ac6:	4904      	ldr	r1, [pc, #16]	; (8002ad8 <gpioInit+0x1c>)
 8002ac8:	4804      	ldr	r0, [pc, #16]	; (8002adc <gpioInit+0x20>)
 8002aca:	f7ff fcf3 	bl	80024b4 <cliAdd>
#endif

	return ret;
 8002ace:	79fb      	ldrb	r3, [r7, #7]
}
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	3708      	adds	r7, #8
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bd80      	pop	{r7, pc}
 8002ad8:	08002bf5 	.word	0x08002bf5
 8002adc:	08013298 	.word	0x08013298

08002ae0 <gpioPinWrite>:

	return ret;
}

void gpioPinWrite(uint8_t ch, bool value)
{
 8002ae0:	b590      	push	{r4, r7, lr}
 8002ae2:	b083      	sub	sp, #12
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	460a      	mov	r2, r1
 8002aea:	71fb      	strb	r3, [r7, #7]
 8002aec:	4613      	mov	r3, r2
 8002aee:	71bb      	strb	r3, [r7, #6]
	if(ch >= GPIO_MAX_CH)
 8002af0:	79fb      	ldrb	r3, [r7, #7]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d140      	bne.n	8002b78 <gpioPinWrite+0x98>
	{
		return;
	}

	if(value)
 8002af6:	79bb      	ldrb	r3, [r7, #6]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d01e      	beq.n	8002b3a <gpioPinWrite+0x5a>
	{
		HAL_GPIO_WritePin(gpio_tbl[ch].port, gpio_tbl[ch].pin, gpio_tbl[ch].on_state);
 8002afc:	79fa      	ldrb	r2, [r7, #7]
 8002afe:	4920      	ldr	r1, [pc, #128]	; (8002b80 <gpioPinWrite+0xa0>)
 8002b00:	4613      	mov	r3, r2
 8002b02:	005b      	lsls	r3, r3, #1
 8002b04:	4413      	add	r3, r2
 8002b06:	009b      	lsls	r3, r3, #2
 8002b08:	440b      	add	r3, r1
 8002b0a:	6818      	ldr	r0, [r3, #0]
 8002b0c:	79fa      	ldrb	r2, [r7, #7]
 8002b0e:	491c      	ldr	r1, [pc, #112]	; (8002b80 <gpioPinWrite+0xa0>)
 8002b10:	4613      	mov	r3, r2
 8002b12:	005b      	lsls	r3, r3, #1
 8002b14:	4413      	add	r3, r2
 8002b16:	009b      	lsls	r3, r3, #2
 8002b18:	440b      	add	r3, r1
 8002b1a:	3304      	adds	r3, #4
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	b299      	uxth	r1, r3
 8002b20:	79fa      	ldrb	r2, [r7, #7]
 8002b22:	4c17      	ldr	r4, [pc, #92]	; (8002b80 <gpioPinWrite+0xa0>)
 8002b24:	4613      	mov	r3, r2
 8002b26:	005b      	lsls	r3, r3, #1
 8002b28:	4413      	add	r3, r2
 8002b2a:	009b      	lsls	r3, r3, #2
 8002b2c:	4423      	add	r3, r4
 8002b2e:	3309      	adds	r3, #9
 8002b30:	781b      	ldrb	r3, [r3, #0]
 8002b32:	461a      	mov	r2, r3
 8002b34:	f001 fb5a 	bl	80041ec <HAL_GPIO_WritePin>
 8002b38:	e01f      	b.n	8002b7a <gpioPinWrite+0x9a>
	}
	else
	{
		HAL_GPIO_WritePin(gpio_tbl[ch].port, gpio_tbl[ch].pin, gpio_tbl[ch].off_state);
 8002b3a:	79fa      	ldrb	r2, [r7, #7]
 8002b3c:	4910      	ldr	r1, [pc, #64]	; (8002b80 <gpioPinWrite+0xa0>)
 8002b3e:	4613      	mov	r3, r2
 8002b40:	005b      	lsls	r3, r3, #1
 8002b42:	4413      	add	r3, r2
 8002b44:	009b      	lsls	r3, r3, #2
 8002b46:	440b      	add	r3, r1
 8002b48:	6818      	ldr	r0, [r3, #0]
 8002b4a:	79fa      	ldrb	r2, [r7, #7]
 8002b4c:	490c      	ldr	r1, [pc, #48]	; (8002b80 <gpioPinWrite+0xa0>)
 8002b4e:	4613      	mov	r3, r2
 8002b50:	005b      	lsls	r3, r3, #1
 8002b52:	4413      	add	r3, r2
 8002b54:	009b      	lsls	r3, r3, #2
 8002b56:	440b      	add	r3, r1
 8002b58:	3304      	adds	r3, #4
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	b299      	uxth	r1, r3
 8002b5e:	79fa      	ldrb	r2, [r7, #7]
 8002b60:	4c07      	ldr	r4, [pc, #28]	; (8002b80 <gpioPinWrite+0xa0>)
 8002b62:	4613      	mov	r3, r2
 8002b64:	005b      	lsls	r3, r3, #1
 8002b66:	4413      	add	r3, r2
 8002b68:	009b      	lsls	r3, r3, #2
 8002b6a:	4423      	add	r3, r4
 8002b6c:	330a      	adds	r3, #10
 8002b6e:	781b      	ldrb	r3, [r3, #0]
 8002b70:	461a      	mov	r2, r3
 8002b72:	f001 fb3b 	bl	80041ec <HAL_GPIO_WritePin>
 8002b76:	e000      	b.n	8002b7a <gpioPinWrite+0x9a>
		return;
 8002b78:	bf00      	nop
	}
}
 8002b7a:	370c      	adds	r7, #12
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	bd90      	pop	{r4, r7, pc}
 8002b80:	08013594 	.word	0x08013594

08002b84 <gpioPinRead>:

bool gpioPinRead(uint8_t ch)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b084      	sub	sp, #16
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	71fb      	strb	r3, [r7, #7]
	bool ret = false;
 8002b8e:	2300      	movs	r3, #0
 8002b90:	73fb      	strb	r3, [r7, #15]

	if(ch >= GPIO_MAX_CH)
 8002b92:	79fb      	ldrb	r3, [r7, #7]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d001      	beq.n	8002b9c <gpioPinRead+0x18>
	{
		return false;
 8002b98:	2300      	movs	r3, #0
 8002b9a:	e024      	b.n	8002be6 <gpioPinRead+0x62>
	}

	if(HAL_GPIO_ReadPin(gpio_tbl[ch].port, gpio_tbl[ch].pin) == gpio_tbl[ch].on_state)
 8002b9c:	79fa      	ldrb	r2, [r7, #7]
 8002b9e:	4914      	ldr	r1, [pc, #80]	; (8002bf0 <gpioPinRead+0x6c>)
 8002ba0:	4613      	mov	r3, r2
 8002ba2:	005b      	lsls	r3, r3, #1
 8002ba4:	4413      	add	r3, r2
 8002ba6:	009b      	lsls	r3, r3, #2
 8002ba8:	440b      	add	r3, r1
 8002baa:	6818      	ldr	r0, [r3, #0]
 8002bac:	79fa      	ldrb	r2, [r7, #7]
 8002bae:	4910      	ldr	r1, [pc, #64]	; (8002bf0 <gpioPinRead+0x6c>)
 8002bb0:	4613      	mov	r3, r2
 8002bb2:	005b      	lsls	r3, r3, #1
 8002bb4:	4413      	add	r3, r2
 8002bb6:	009b      	lsls	r3, r3, #2
 8002bb8:	440b      	add	r3, r1
 8002bba:	3304      	adds	r3, #4
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	b29b      	uxth	r3, r3
 8002bc0:	4619      	mov	r1, r3
 8002bc2:	f001 fafb 	bl	80041bc <HAL_GPIO_ReadPin>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	4618      	mov	r0, r3
 8002bca:	79fa      	ldrb	r2, [r7, #7]
 8002bcc:	4908      	ldr	r1, [pc, #32]	; (8002bf0 <gpioPinRead+0x6c>)
 8002bce:	4613      	mov	r3, r2
 8002bd0:	005b      	lsls	r3, r3, #1
 8002bd2:	4413      	add	r3, r2
 8002bd4:	009b      	lsls	r3, r3, #2
 8002bd6:	440b      	add	r3, r1
 8002bd8:	3309      	adds	r3, #9
 8002bda:	781b      	ldrb	r3, [r3, #0]
 8002bdc:	4298      	cmp	r0, r3
 8002bde:	d101      	bne.n	8002be4 <gpioPinRead+0x60>
	{
		ret = true;
 8002be0:	2301      	movs	r3, #1
 8002be2:	73fb      	strb	r3, [r7, #15]
	}

	return ret;
 8002be4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002be6:	4618      	mov	r0, r3
 8002be8:	3710      	adds	r7, #16
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bd80      	pop	{r7, pc}
 8002bee:	bf00      	nop
 8002bf0:	08013594 	.word	0x08013594

08002bf4 <cliGpio>:


#ifdef _USE_HW_CLI

void cliGpio(cli_args_t *args)
{
 8002bf4:	b590      	push	{r4, r7, lr}
 8002bf6:	b087      	sub	sp, #28
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
	bool ret = false;
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	75fb      	strb	r3, [r7, #23]

	if(args->argc == 1 && args->isStr(0, "show") == true)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	881b      	ldrh	r3, [r3, #0]
 8002c04:	2b01      	cmp	r3, #1
 8002c06:	d129      	bne.n	8002c5c <cliGpio+0x68>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	695b      	ldr	r3, [r3, #20]
 8002c0c:	4948      	ldr	r1, [pc, #288]	; (8002d30 <cliGpio+0x13c>)
 8002c0e:	2000      	movs	r0, #0
 8002c10:	4798      	blx	r3
 8002c12:	4603      	mov	r3, r0
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d021      	beq.n	8002c5c <cliGpio+0x68>
	{
		while(cliKeepLoop())
 8002c18:	e019      	b.n	8002c4e <cliGpio+0x5a>
		{
			for(int i=0; i<GPIO_MAX_CH; i++)
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	613b      	str	r3, [r7, #16]
 8002c1e:	e00c      	b.n	8002c3a <cliGpio+0x46>
			{
				cliPrintf("%d", gpioPinRead(i));
 8002c20:	693b      	ldr	r3, [r7, #16]
 8002c22:	b2db      	uxtb	r3, r3
 8002c24:	4618      	mov	r0, r3
 8002c26:	f7ff ffad 	bl	8002b84 <gpioPinRead>
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	4619      	mov	r1, r3
 8002c2e:	4841      	ldr	r0, [pc, #260]	; (8002d34 <cliGpio+0x140>)
 8002c30:	f7ff fb30 	bl	8002294 <cliPrintf>
			for(int i=0; i<GPIO_MAX_CH; i++)
 8002c34:	693b      	ldr	r3, [r7, #16]
 8002c36:	3301      	adds	r3, #1
 8002c38:	613b      	str	r3, [r7, #16]
 8002c3a:	693b      	ldr	r3, [r7, #16]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	ddef      	ble.n	8002c20 <cliGpio+0x2c>
			}
			cliPrintf("\n");
 8002c40:	483d      	ldr	r0, [pc, #244]	; (8002d38 <cliGpio+0x144>)
 8002c42:	f7ff fb27 	bl	8002294 <cliPrintf>
			delay(300);
 8002c46:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002c4a:	f7fe fd6e 	bl	800172a <delay>
		while(cliKeepLoop())
 8002c4e:	f7ff fc1b 	bl	8002488 <cliKeepLoop>
 8002c52:	4603      	mov	r3, r0
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d1e0      	bne.n	8002c1a <cliGpio+0x26>
		}

		ret = true;
 8002c58:	2301      	movs	r3, #1
 8002c5a:	75fb      	strb	r3, [r7, #23]
	}

	if(args->argc == 2 && args->isStr(0, "read") == true)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	881b      	ldrh	r3, [r3, #0]
 8002c60:	2b02      	cmp	r3, #2
 8002c62:	d124      	bne.n	8002cae <cliGpio+0xba>
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	695b      	ldr	r3, [r3, #20]
 8002c68:	4934      	ldr	r1, [pc, #208]	; (8002d3c <cliGpio+0x148>)
 8002c6a:	2000      	movs	r0, #0
 8002c6c:	4798      	blx	r3
 8002c6e:	4603      	mov	r3, r0
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d01c      	beq.n	8002cae <cliGpio+0xba>
	{
		uint8_t ch;

		ch = (uint8_t)args->getData(1);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	689b      	ldr	r3, [r3, #8]
 8002c78:	2001      	movs	r0, #1
 8002c7a:	4798      	blx	r3
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	73fb      	strb	r3, [r7, #15]

		while(cliKeepLoop())
 8002c80:	e00e      	b.n	8002ca0 <cliGpio+0xac>
		{
			cliPrintf("gpio read %d : %d\n", ch, gpioPinRead(ch));
 8002c82:	7bfc      	ldrb	r4, [r7, #15]
 8002c84:	7bfb      	ldrb	r3, [r7, #15]
 8002c86:	4618      	mov	r0, r3
 8002c88:	f7ff ff7c 	bl	8002b84 <gpioPinRead>
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	461a      	mov	r2, r3
 8002c90:	4621      	mov	r1, r4
 8002c92:	482b      	ldr	r0, [pc, #172]	; (8002d40 <cliGpio+0x14c>)
 8002c94:	f7ff fafe 	bl	8002294 <cliPrintf>
			delay(300);
 8002c98:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002c9c:	f7fe fd45 	bl	800172a <delay>
		while(cliKeepLoop())
 8002ca0:	f7ff fbf2 	bl	8002488 <cliKeepLoop>
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d1eb      	bne.n	8002c82 <cliGpio+0x8e>
		}

		ret = true;
 8002caa:	2301      	movs	r3, #1
 8002cac:	75fb      	strb	r3, [r7, #23]
	}

	if(args->argc == 3 && args->isStr(0, "write") == true)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	881b      	ldrh	r3, [r3, #0]
 8002cb2:	2b03      	cmp	r3, #3
 8002cb4:	d126      	bne.n	8002d04 <cliGpio+0x110>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	695b      	ldr	r3, [r3, #20]
 8002cba:	4922      	ldr	r1, [pc, #136]	; (8002d44 <cliGpio+0x150>)
 8002cbc:	2000      	movs	r0, #0
 8002cbe:	4798      	blx	r3
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d01e      	beq.n	8002d04 <cliGpio+0x110>
	{
		uint8_t ch;
		uint8_t data;

		ch = (uint8_t)args->getData(1);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	689b      	ldr	r3, [r3, #8]
 8002cca:	2001      	movs	r0, #1
 8002ccc:	4798      	blx	r3
 8002cce:	4603      	mov	r3, r0
 8002cd0:	73bb      	strb	r3, [r7, #14]
		data = (uint8_t)args->getData(2);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	689b      	ldr	r3, [r3, #8]
 8002cd6:	2002      	movs	r0, #2
 8002cd8:	4798      	blx	r3
 8002cda:	4603      	mov	r3, r0
 8002cdc:	737b      	strb	r3, [r7, #13]

		gpioPinWrite(ch, data);
 8002cde:	7b7b      	ldrb	r3, [r7, #13]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	bf14      	ite	ne
 8002ce4:	2301      	movne	r3, #1
 8002ce6:	2300      	moveq	r3, #0
 8002ce8:	b2da      	uxtb	r2, r3
 8002cea:	7bbb      	ldrb	r3, [r7, #14]
 8002cec:	4611      	mov	r1, r2
 8002cee:	4618      	mov	r0, r3
 8002cf0:	f7ff fef6 	bl	8002ae0 <gpioPinWrite>

		cliPrintf("gpio write %d : %d\n", ch, data);
 8002cf4:	7bbb      	ldrb	r3, [r7, #14]
 8002cf6:	7b7a      	ldrb	r2, [r7, #13]
 8002cf8:	4619      	mov	r1, r3
 8002cfa:	4813      	ldr	r0, [pc, #76]	; (8002d48 <cliGpio+0x154>)
 8002cfc:	f7ff faca 	bl	8002294 <cliPrintf>

		ret = true;
 8002d00:	2301      	movs	r3, #1
 8002d02:	75fb      	strb	r3, [r7, #23]
	}

	if(ret != true)
 8002d04:	7dfb      	ldrb	r3, [r7, #23]
 8002d06:	f083 0301 	eor.w	r3, r3, #1
 8002d0a:	b2db      	uxtb	r3, r3
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d00a      	beq.n	8002d26 <cliGpio+0x132>
	{
		cliPrintf("gpio show\n");
 8002d10:	480e      	ldr	r0, [pc, #56]	; (8002d4c <cliGpio+0x158>)
 8002d12:	f7ff fabf 	bl	8002294 <cliPrintf>
		cliPrintf("gpio read ch[0~%d]\n", GPIO_MAX_CH-1);
 8002d16:	2100      	movs	r1, #0
 8002d18:	480d      	ldr	r0, [pc, #52]	; (8002d50 <cliGpio+0x15c>)
 8002d1a:	f7ff fabb 	bl	8002294 <cliPrintf>
		cliPrintf("gpio write ch[0~%d]\n", GPIO_MAX_CH-1);
 8002d1e:	2100      	movs	r1, #0
 8002d20:	480c      	ldr	r0, [pc, #48]	; (8002d54 <cliGpio+0x160>)
 8002d22:	f7ff fab7 	bl	8002294 <cliPrintf>
	}
}
 8002d26:	bf00      	nop
 8002d28:	371c      	adds	r7, #28
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bd90      	pop	{r4, r7, pc}
 8002d2e:	bf00      	nop
 8002d30:	080132a0 	.word	0x080132a0
 8002d34:	080132a8 	.word	0x080132a8
 8002d38:	080132ac 	.word	0x080132ac
 8002d3c:	080132b0 	.word	0x080132b0
 8002d40:	080132b8 	.word	0x080132b8
 8002d44:	080132cc 	.word	0x080132cc
 8002d48:	080132d4 	.word	0x080132d4
 8002d4c:	080132e8 	.word	0x080132e8
 8002d50:	080132f4 	.word	0x080132f4
 8002d54:	08013308 	.word	0x08013308

08002d58 <ledInit>:
				{GPIOC, GPIO_PIN_13, GPIO_PIN_RESET, GPIO_PIN_SET},
		};


bool ledInit(void)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b082      	sub	sp, #8
 8002d5c:	af00      	add	r7, sp, #0
	for(int i=0; i<LED_MAX_CH; i++)
 8002d5e:	2300      	movs	r3, #0
 8002d60:	607b      	str	r3, [r7, #4]
 8002d62:	e007      	b.n	8002d74 <ledInit+0x1c>
	{
		ledOff(i);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	b2db      	uxtb	r3, r3
 8002d68:	4618      	mov	r0, r3
 8002d6a:	f000 f813 	bl	8002d94 <ledOff>
	for(int i=0; i<LED_MAX_CH; i++)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	3301      	adds	r3, #1
 8002d72:	607b      	str	r3, [r7, #4]
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	ddf4      	ble.n	8002d64 <ledInit+0xc>
	}

#ifdef _USE_HW_CLI
	cliAdd("led", cliLed);
 8002d7a:	4904      	ldr	r1, [pc, #16]	; (8002d8c <ledInit+0x34>)
 8002d7c:	4804      	ldr	r0, [pc, #16]	; (8002d90 <ledInit+0x38>)
 8002d7e:	f7ff fb99 	bl	80024b4 <cliAdd>
#endif

	return true;
 8002d82:	2301      	movs	r3, #1
}
 8002d84:	4618      	mov	r0, r3
 8002d86:	3708      	adds	r7, #8
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	bd80      	pop	{r7, pc}
 8002d8c:	08002e0d 	.word	0x08002e0d
 8002d90:	08013320 	.word	0x08013320

08002d94 <ledOff>:

	HAL_GPIO_WritePin(led_tbl[ch].port, led_tbl[ch].pin, led_tbl[ch].on_state);
}

void ledOff(uint8_t ch)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b082      	sub	sp, #8
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	71fb      	strb	r3, [r7, #7]
	if(ch >= LED_MAX_CH) return;
 8002d9e:	79fb      	ldrb	r3, [r7, #7]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d111      	bne.n	8002dc8 <ledOff+0x34>

	HAL_GPIO_WritePin(led_tbl[ch].port, led_tbl[ch].pin, led_tbl[ch].off_state);
 8002da4:	79fb      	ldrb	r3, [r7, #7]
 8002da6:	4a0a      	ldr	r2, [pc, #40]	; (8002dd0 <ledOff+0x3c>)
 8002da8:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8002dac:	79fb      	ldrb	r3, [r7, #7]
 8002dae:	4a08      	ldr	r2, [pc, #32]	; (8002dd0 <ledOff+0x3c>)
 8002db0:	00db      	lsls	r3, r3, #3
 8002db2:	4413      	add	r3, r2
 8002db4:	8899      	ldrh	r1, [r3, #4]
 8002db6:	79fb      	ldrb	r3, [r7, #7]
 8002db8:	4a05      	ldr	r2, [pc, #20]	; (8002dd0 <ledOff+0x3c>)
 8002dba:	00db      	lsls	r3, r3, #3
 8002dbc:	4413      	add	r3, r2
 8002dbe:	79db      	ldrb	r3, [r3, #7]
 8002dc0:	461a      	mov	r2, r3
 8002dc2:	f001 fa13 	bl	80041ec <HAL_GPIO_WritePin>
 8002dc6:	e000      	b.n	8002dca <ledOff+0x36>
	if(ch >= LED_MAX_CH) return;
 8002dc8:	bf00      	nop
}
 8002dca:	3708      	adds	r7, #8
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	bd80      	pop	{r7, pc}
 8002dd0:	20000008 	.word	0x20000008

08002dd4 <ledToggle>:

void ledToggle(uint8_t ch)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b082      	sub	sp, #8
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	4603      	mov	r3, r0
 8002ddc:	71fb      	strb	r3, [r7, #7]
	if(ch >= LED_MAX_CH) return;
 8002dde:	79fb      	ldrb	r3, [r7, #7]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d10d      	bne.n	8002e00 <ledToggle+0x2c>

	HAL_GPIO_TogglePin(led_tbl[ch].port, led_tbl[ch].pin);
 8002de4:	79fb      	ldrb	r3, [r7, #7]
 8002de6:	4a08      	ldr	r2, [pc, #32]	; (8002e08 <ledToggle+0x34>)
 8002de8:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8002dec:	79fb      	ldrb	r3, [r7, #7]
 8002dee:	4906      	ldr	r1, [pc, #24]	; (8002e08 <ledToggle+0x34>)
 8002df0:	00db      	lsls	r3, r3, #3
 8002df2:	440b      	add	r3, r1
 8002df4:	889b      	ldrh	r3, [r3, #4]
 8002df6:	4619      	mov	r1, r3
 8002df8:	4610      	mov	r0, r2
 8002dfa:	f001 fa10 	bl	800421e <HAL_GPIO_TogglePin>
 8002dfe:	e000      	b.n	8002e02 <ledToggle+0x2e>
	if(ch >= LED_MAX_CH) return;
 8002e00:	bf00      	nop
}
 8002e02:	3708      	adds	r7, #8
 8002e04:	46bd      	mov	sp, r7
 8002e06:	bd80      	pop	{r7, pc}
 8002e08:	20000008 	.word	0x20000008

08002e0c <cliLed>:


#ifdef _USE_HW_CLI

void cliLed(cli_args_t *args)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b086      	sub	sp, #24
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
	bool ret = false;
 8002e14:	2300      	movs	r3, #0
 8002e16:	75fb      	strb	r3, [r7, #23]

	if(args->argc == 3 && args->isStr(0, "toggle") == true)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	881b      	ldrh	r3, [r3, #0]
 8002e1c:	2b03      	cmp	r3, #3
 8002e1e:	d133      	bne.n	8002e88 <cliLed+0x7c>
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	695b      	ldr	r3, [r3, #20]
 8002e24:	491f      	ldr	r1, [pc, #124]	; (8002ea4 <cliLed+0x98>)
 8002e26:	2000      	movs	r0, #0
 8002e28:	4798      	blx	r3
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d02b      	beq.n	8002e88 <cliLed+0x7c>
	{
		uint8_t led_ch;
		uint32_t toggle_time;
		uint32_t pre_time;

		led_ch = (uint8_t)args->getData(1);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	689b      	ldr	r3, [r3, #8]
 8002e34:	2001      	movs	r0, #1
 8002e36:	4798      	blx	r3
 8002e38:	4603      	mov	r3, r0
 8002e3a:	75bb      	strb	r3, [r7, #22]
		toggle_time = (uint32_t)args->getData(2);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	689b      	ldr	r3, [r3, #8]
 8002e40:	2002      	movs	r0, #2
 8002e42:	4798      	blx	r3
 8002e44:	4603      	mov	r3, r0
 8002e46:	60fb      	str	r3, [r7, #12]

		if(led_ch > 0)
 8002e48:	7dbb      	ldrb	r3, [r7, #22]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d002      	beq.n	8002e54 <cliLed+0x48>
		{
			led_ch--;
 8002e4e:	7dbb      	ldrb	r3, [r7, #22]
 8002e50:	3b01      	subs	r3, #1
 8002e52:	75bb      	strb	r3, [r7, #22]
		}

		pre_time = millis();
 8002e54:	f7fe fc74 	bl	8001740 <millis>
 8002e58:	6138      	str	r0, [r7, #16]
		while(cliKeepLoop())
 8002e5a:	e00e      	b.n	8002e7a <cliLed+0x6e>
		{
			if(millis() - pre_time >= toggle_time)
 8002e5c:	f7fe fc70 	bl	8001740 <millis>
 8002e60:	4602      	mov	r2, r0
 8002e62:	693b      	ldr	r3, [r7, #16]
 8002e64:	1ad3      	subs	r3, r2, r3
 8002e66:	68fa      	ldr	r2, [r7, #12]
 8002e68:	429a      	cmp	r2, r3
 8002e6a:	d806      	bhi.n	8002e7a <cliLed+0x6e>
			{
				pre_time = millis();
 8002e6c:	f7fe fc68 	bl	8001740 <millis>
 8002e70:	6138      	str	r0, [r7, #16]
				ledToggle(led_ch);
 8002e72:	7dbb      	ldrb	r3, [r7, #22]
 8002e74:	4618      	mov	r0, r3
 8002e76:	f7ff ffad 	bl	8002dd4 <ledToggle>
		while(cliKeepLoop())
 8002e7a:	f7ff fb05 	bl	8002488 <cliKeepLoop>
 8002e7e:	4603      	mov	r3, r0
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d1eb      	bne.n	8002e5c <cliLed+0x50>
			}
		}

		ret = true;
 8002e84:	2301      	movs	r3, #1
 8002e86:	75fb      	strb	r3, [r7, #23]
	}

	if(ret != true)
 8002e88:	7dfb      	ldrb	r3, [r7, #23]
 8002e8a:	f083 0301 	eor.w	r3, r3, #1
 8002e8e:	b2db      	uxtb	r3, r3
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d003      	beq.n	8002e9c <cliLed+0x90>
	{
		cliPrintf("led toggle ch[1~%d] time_ms\n", LED_MAX_CH);
 8002e94:	2101      	movs	r1, #1
 8002e96:	4804      	ldr	r0, [pc, #16]	; (8002ea8 <cliLed+0x9c>)
 8002e98:	f7ff f9fc 	bl	8002294 <cliPrintf>
	}
}
 8002e9c:	bf00      	nop
 8002e9e:	3718      	adds	r7, #24
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	bd80      	pop	{r7, pc}
 8002ea4:	08013324 	.word	0x08013324
 8002ea8:	0801332c 	.word	0x0801332c

08002eac <sdInit>:
static void cliSd(cli_args_t *args);
#endif


bool sdInit(void)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b082      	sub	sp, #8
 8002eb0:	af00      	add	r7, sp, #0
	bool ret = false;
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	71fb      	strb	r3, [r7, #7]

	is_detected = false;
 8002eb6:	4b16      	ldr	r3, [pc, #88]	; (8002f10 <sdInit+0x64>)
 8002eb8:	2200      	movs	r2, #0
 8002eba:	701a      	strb	r2, [r3, #0]
	if(gpioPinRead(_PIN_GPIO_SDCARD_DETECT) == true)
 8002ebc:	2000      	movs	r0, #0
 8002ebe:	f7ff fe61 	bl	8002b84 <gpioPinRead>
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d002      	beq.n	8002ece <sdInit+0x22>
	{
		is_detected = true;
 8002ec8:	4b11      	ldr	r3, [pc, #68]	; (8002f10 <sdInit+0x64>)
 8002eca:	2201      	movs	r2, #1
 8002ecc:	701a      	strb	r2, [r3, #0]
	}

	if(is_detected == true)
 8002ece:	4b10      	ldr	r3, [pc, #64]	; (8002f10 <sdInit+0x64>)
 8002ed0:	781b      	ldrb	r3, [r3, #0]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d00f      	beq.n	8002ef6 <sdInit+0x4a>
	{
		if(HAL_SD_Init(&hsd) == HAL_OK)
 8002ed6:	480f      	ldr	r0, [pc, #60]	; (8002f14 <sdInit+0x68>)
 8002ed8:	f003 f83c 	bl	8005f54 <HAL_SD_Init>
 8002edc:	4603      	mov	r3, r0
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d109      	bne.n	8002ef6 <sdInit+0x4a>
		{
			if(HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) == HAL_OK)
 8002ee2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002ee6:	480b      	ldr	r0, [pc, #44]	; (8002f14 <sdInit+0x68>)
 8002ee8:	f004 f89a 	bl	8007020 <HAL_SD_ConfigWideBusOperation>
 8002eec:	4603      	mov	r3, r0
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d101      	bne.n	8002ef6 <sdInit+0x4a>
			{
				ret = true;
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	71fb      	strb	r3, [r7, #7]
			}
		}
	}

	is_init = ret;
 8002ef6:	4a08      	ldr	r2, [pc, #32]	; (8002f18 <sdInit+0x6c>)
 8002ef8:	79fb      	ldrb	r3, [r7, #7]
 8002efa:	7013      	strb	r3, [r2, #0]

	#ifdef _USE_HW_CLI
		cliAdd("sd", cliSd);
 8002efc:	4907      	ldr	r1, [pc, #28]	; (8002f1c <sdInit+0x70>)
 8002efe:	4808      	ldr	r0, [pc, #32]	; (8002f20 <sdInit+0x74>)
 8002f00:	f7ff fad8 	bl	80024b4 <cliAdd>
	#endif

	return ret;
 8002f04:	79fb      	ldrb	r3, [r7, #7]
}
 8002f06:	4618      	mov	r0, r3
 8002f08:	3708      	adds	r7, #8
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bd80      	pop	{r7, pc}
 8002f0e:	bf00      	nop
 8002f10:	20000cfd 	.word	0x20000cfd
 8002f14:	200002f4 	.word	0x200002f4
 8002f18:	20000cfc 	.word	0x20000cfc
 8002f1c:	08003095 	.word	0x08003095
 8002f20:	0801334c 	.word	0x0801334c

08002f24 <sdGetInfo>:

	return is_detected;
}

bool sdGetInfo(sd_info_t *p_info)
{
 8002f24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f28:	b08c      	sub	sp, #48	; 0x30
 8002f2a:	af00      	add	r7, sp, #0
 8002f2c:	6078      	str	r0, [r7, #4]
	bool ret = false;
 8002f2e:	2300      	movs	r3, #0
 8002f30:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	sd_info_t *p_sd_info = (sd_info_t *)p_info;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	62bb      	str	r3, [r7, #40]	; 0x28

	HAL_SD_CardInfoTypeDef card_info;

	if(is_init == true)
 8002f38:	4b24      	ldr	r3, [pc, #144]	; (8002fcc <sdGetInfo+0xa8>)
 8002f3a:	781b      	ldrb	r3, [r3, #0]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d03d      	beq.n	8002fbc <sdGetInfo+0x98>
	{
		HAL_SD_GetCardInfo(&hsd, &card_info);
 8002f40:	f107 0308 	add.w	r3, r7, #8
 8002f44:	4619      	mov	r1, r3
 8002f46:	4822      	ldr	r0, [pc, #136]	; (8002fd0 <sdGetInfo+0xac>)
 8002f48:	f004 f83e 	bl	8006fc8 <HAL_SD_GetCardInfo>

		p_sd_info->card_type 					= card_info.CardType;
 8002f4c:	68ba      	ldr	r2, [r7, #8]
 8002f4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f50:	601a      	str	r2, [r3, #0]
    p_sd_info->card_version       = card_info.CardVersion;
 8002f52:	68fa      	ldr	r2, [r7, #12]
 8002f54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f56:	605a      	str	r2, [r3, #4]
    p_sd_info->card_class         = card_info.Class;
 8002f58:	693a      	ldr	r2, [r7, #16]
 8002f5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f5c:	609a      	str	r2, [r3, #8]
    p_sd_info->rel_card_Add       = card_info.RelCardAdd;
 8002f5e:	697a      	ldr	r2, [r7, #20]
 8002f60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f62:	60da      	str	r2, [r3, #12]
    p_sd_info->block_numbers      = card_info.BlockNbr;
 8002f64:	69ba      	ldr	r2, [r7, #24]
 8002f66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f68:	611a      	str	r2, [r3, #16]
    p_sd_info->block_size         = card_info.BlockSize;
 8002f6a:	69fa      	ldr	r2, [r7, #28]
 8002f6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f6e:	615a      	str	r2, [r3, #20]
    p_sd_info->log_block_numbers  = card_info.LogBlockNbr;
 8002f70:	6a3a      	ldr	r2, [r7, #32]
 8002f72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f74:	619a      	str	r2, [r3, #24]
    p_sd_info->log_block_size     = card_info.LogBlockSize;
 8002f76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f7a:	61da      	str	r2, [r3, #28]
    p_sd_info->card_size          =  (uint32_t)((uint64_t)p_sd_info->block_numbers * (uint64_t) p_sd_info->block_size / (uint64_t)1024 / (uint64_t)1024);
 8002f7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f7e:	691b      	ldr	r3, [r3, #16]
 8002f80:	2200      	movs	r2, #0
 8002f82:	469a      	mov	sl, r3
 8002f84:	4693      	mov	fp, r2
 8002f86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f88:	695b      	ldr	r3, [r3, #20]
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	4698      	mov	r8, r3
 8002f8e:	4691      	mov	r9, r2
 8002f90:	fb08 f20b 	mul.w	r2, r8, fp
 8002f94:	fb0a f309 	mul.w	r3, sl, r9
 8002f98:	4413      	add	r3, r2
 8002f9a:	fbaa 4508 	umull	r4, r5, sl, r8
 8002f9e:	442b      	add	r3, r5
 8002fa0:	461d      	mov	r5, r3
 8002fa2:	f04f 0200 	mov.w	r2, #0
 8002fa6:	f04f 0300 	mov.w	r3, #0
 8002faa:	0d22      	lsrs	r2, r4, #20
 8002fac:	ea42 3205 	orr.w	r2, r2, r5, lsl #12
 8002fb0:	0d2b      	lsrs	r3, r5, #20
 8002fb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fb4:	621a      	str	r2, [r3, #32]

    ret = true;
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	}

	return ret;
 8002fbc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	3730      	adds	r7, #48	; 0x30
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002fca:	bf00      	nop
 8002fcc:	20000cfc 	.word	0x20000cfc
 8002fd0:	200002f4 	.word	0x200002f4

08002fd4 <sdIsBusy>:

bool sdIsBusy(void)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b082      	sub	sp, #8
 8002fd8:	af00      	add	r7, sp, #0
	bool is_busy;

	if(HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER)
 8002fda:	4808      	ldr	r0, [pc, #32]	; (8002ffc <sdIsBusy+0x28>)
 8002fdc:	f004 f8ba 	bl	8007154 <HAL_SD_GetCardState>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	2b04      	cmp	r3, #4
 8002fe4:	d102      	bne.n	8002fec <sdIsBusy+0x18>
	{
		is_busy = false;
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	71fb      	strb	r3, [r7, #7]
 8002fea:	e001      	b.n	8002ff0 <sdIsBusy+0x1c>
	}
	else
	{
		is_busy = true;
 8002fec:	2301      	movs	r3, #1
 8002fee:	71fb      	strb	r3, [r7, #7]
	}

	return is_busy;
 8002ff0:	79fb      	ldrb	r3, [r7, #7]
}
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	3708      	adds	r7, #8
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bd80      	pop	{r7, pc}
 8002ffa:	bf00      	nop
 8002ffc:	200002f4 	.word	0x200002f4

08003000 <sdReadBlocks>:

	return false;
}

bool sdReadBlocks(uint32_t block_addr, uint8_t *p_data, uint32_t num_of_blocks, uint32_t timeout_ms)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b086      	sub	sp, #24
 8003004:	af00      	add	r7, sp, #0
 8003006:	60f8      	str	r0, [r7, #12]
 8003008:	60b9      	str	r1, [r7, #8]
 800300a:	607a      	str	r2, [r7, #4]
 800300c:	603b      	str	r3, [r7, #0]
	bool ret = false;
 800300e:	2300      	movs	r3, #0
 8003010:	75fb      	strb	r3, [r7, #23]
	uint32_t pre_time;

	is_rx_done = false;
 8003012:	4b1e      	ldr	r3, [pc, #120]	; (800308c <sdReadBlocks+0x8c>)
 8003014:	2200      	movs	r2, #0
 8003016:	701a      	strb	r2, [r3, #0]
	if(HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)p_data, block_addr, num_of_blocks) == HAL_OK)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	68fa      	ldr	r2, [r7, #12]
 800301c:	68b9      	ldr	r1, [r7, #8]
 800301e:	481c      	ldr	r0, [pc, #112]	; (8003090 <sdReadBlocks+0x90>)
 8003020:	f003 fbbc 	bl	800679c <HAL_SD_ReadBlocks_DMA>
 8003024:	4603      	mov	r3, r0
 8003026:	2b00      	cmp	r3, #0
 8003028:	d12a      	bne.n	8003080 <sdReadBlocks+0x80>
	{
		pre_time = millis();
 800302a:	f7fe fb89 	bl	8001740 <millis>
 800302e:	6138      	str	r0, [r7, #16]
		while(is_rx_done == false)
 8003030:	e007      	b.n	8003042 <sdReadBlocks+0x42>
		{
			if(millis() - pre_time >= timeout_ms)
 8003032:	f7fe fb85 	bl	8001740 <millis>
 8003036:	4602      	mov	r2, r0
 8003038:	693b      	ldr	r3, [r7, #16]
 800303a:	1ad3      	subs	r3, r2, r3
 800303c:	683a      	ldr	r2, [r7, #0]
 800303e:	429a      	cmp	r2, r3
 8003040:	d908      	bls.n	8003054 <sdReadBlocks+0x54>
		while(is_rx_done == false)
 8003042:	4b12      	ldr	r3, [pc, #72]	; (800308c <sdReadBlocks+0x8c>)
 8003044:	781b      	ldrb	r3, [r3, #0]
 8003046:	b2db      	uxtb	r3, r3
 8003048:	f083 0301 	eor.w	r3, r3, #1
 800304c:	b2db      	uxtb	r3, r3
 800304e:	2b00      	cmp	r3, #0
 8003050:	d1ef      	bne.n	8003032 <sdReadBlocks+0x32>
 8003052:	e00d      	b.n	8003070 <sdReadBlocks+0x70>
			{
				break;
 8003054:	bf00      	nop
			}
		}

		while(sdIsBusy() == true)
 8003056:	e00b      	b.n	8003070 <sdReadBlocks+0x70>
			{
				if(millis() - pre_time >= timeout_ms)
 8003058:	f7fe fb72 	bl	8001740 <millis>
 800305c:	4602      	mov	r2, r0
 800305e:	693b      	ldr	r3, [r7, #16]
 8003060:	1ad3      	subs	r3, r2, r3
 8003062:	683a      	ldr	r2, [r7, #0]
 8003064:	429a      	cmp	r2, r3
 8003066:	d803      	bhi.n	8003070 <sdReadBlocks+0x70>
				{
					is_rx_done = false;
 8003068:	4b08      	ldr	r3, [pc, #32]	; (800308c <sdReadBlocks+0x8c>)
 800306a:	2200      	movs	r2, #0
 800306c:	701a      	strb	r2, [r3, #0]
					break;
 800306e:	e004      	b.n	800307a <sdReadBlocks+0x7a>
		while(sdIsBusy() == true)
 8003070:	f7ff ffb0 	bl	8002fd4 <sdIsBusy>
 8003074:	4603      	mov	r3, r0
 8003076:	2b00      	cmp	r3, #0
 8003078:	d1ee      	bne.n	8003058 <sdReadBlocks+0x58>
				}
			}

			ret = is_rx_done;
 800307a:	4b04      	ldr	r3, [pc, #16]	; (800308c <sdReadBlocks+0x8c>)
 800307c:	781b      	ldrb	r3, [r3, #0]
 800307e:	75fb      	strb	r3, [r7, #23]
	}

	return ret;
 8003080:	7dfb      	ldrb	r3, [r7, #23]
}
 8003082:	4618      	mov	r0, r3
 8003084:	3718      	adds	r7, #24
 8003086:	46bd      	mov	sp, r7
 8003088:	bd80      	pop	{r7, pc}
 800308a:	bf00      	nop
 800308c:	20000cfe 	.word	0x20000cfe
 8003090:	200002f4 	.word	0x200002f4

08003094 <cliSd>:
}

#ifdef _USE_HW_CLI

void cliSd(cli_args_t *args)
{
 8003094:	b590      	push	{r4, r7, lr}
 8003096:	f5ad 7d07 	sub.w	sp, sp, #540	; 0x21c
 800309a:	af00      	add	r7, sp, #0
 800309c:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80030a0:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 80030a4:	6018      	str	r0, [r3, #0]
	bool ret = false;
 80030a6:	2300      	movs	r3, #0
 80030a8:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217

	if(args->argc == 1 && args->isStr(0, "info") == true)
 80030ac:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80030b0:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	881b      	ldrh	r3, [r3, #0]
 80030b8:	2b01      	cmp	r3, #1
 80030ba:	f040 8094 	bne.w	80031e6 <cliSd+0x152>
 80030be:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80030c2:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	695b      	ldr	r3, [r3, #20]
 80030ca:	497a      	ldr	r1, [pc, #488]	; (80032b4 <cliSd+0x220>)
 80030cc:	2000      	movs	r0, #0
 80030ce:	4798      	blx	r3
 80030d0:	4603      	mov	r3, r0
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	f000 8087 	beq.w	80031e6 <cliSd+0x152>
	{
		sd_info_t sd_info;

		cliPrintf("sd init : %d\n", is_init);
 80030d8:	4b77      	ldr	r3, [pc, #476]	; (80032b8 <cliSd+0x224>)
 80030da:	781b      	ldrb	r3, [r3, #0]
 80030dc:	4619      	mov	r1, r3
 80030de:	4877      	ldr	r0, [pc, #476]	; (80032bc <cliSd+0x228>)
 80030e0:	f7ff f8d8 	bl	8002294 <cliPrintf>
		cliPrintf("sd connected : %d\n", is_detected);
 80030e4:	4b76      	ldr	r3, [pc, #472]	; (80032c0 <cliSd+0x22c>)
 80030e6:	781b      	ldrb	r3, [r3, #0]
 80030e8:	4619      	mov	r1, r3
 80030ea:	4876      	ldr	r0, [pc, #472]	; (80032c4 <cliSd+0x230>)
 80030ec:	f7ff f8d2 	bl	8002294 <cliPrintf>

		if(is_init == true)
 80030f0:	4b71      	ldr	r3, [pc, #452]	; (80032b8 <cliSd+0x224>)
 80030f2:	781b      	ldrb	r3, [r3, #0]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d073      	beq.n	80031e0 <cliSd+0x14c>
		{
			if(sdGetInfo(&sd_info) == true)
 80030f8:	f107 030c 	add.w	r3, r7, #12
 80030fc:	4618      	mov	r0, r3
 80030fe:	f7ff ff11 	bl	8002f24 <sdGetInfo>
 8003102:	4603      	mov	r3, r0
 8003104:	2b00      	cmp	r3, #0
 8003106:	d06b      	beq.n	80031e0 <cliSd+0x14c>
			{
        cliPrintf("   card_type            : %d\n", sd_info.card_type);
 8003108:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800310c:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4619      	mov	r1, r3
 8003114:	486c      	ldr	r0, [pc, #432]	; (80032c8 <cliSd+0x234>)
 8003116:	f7ff f8bd 	bl	8002294 <cliPrintf>
        cliPrintf("   card_version         : %d\n", sd_info.card_version);
 800311a:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800311e:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	4619      	mov	r1, r3
 8003126:	4869      	ldr	r0, [pc, #420]	; (80032cc <cliSd+0x238>)
 8003128:	f7ff f8b4 	bl	8002294 <cliPrintf>
        cliPrintf("   card_class           : %d\n", sd_info.card_class);
 800312c:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8003130:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8003134:	689b      	ldr	r3, [r3, #8]
 8003136:	4619      	mov	r1, r3
 8003138:	4865      	ldr	r0, [pc, #404]	; (80032d0 <cliSd+0x23c>)
 800313a:	f7ff f8ab 	bl	8002294 <cliPrintf>
        cliPrintf("   rel_card_Add         : %d\n", sd_info.rel_card_Add);
 800313e:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8003142:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8003146:	68db      	ldr	r3, [r3, #12]
 8003148:	4619      	mov	r1, r3
 800314a:	4862      	ldr	r0, [pc, #392]	; (80032d4 <cliSd+0x240>)
 800314c:	f7ff f8a2 	bl	8002294 <cliPrintf>
        cliPrintf("   block_numbers        : %d\n", sd_info.block_numbers);
 8003150:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8003154:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8003158:	691b      	ldr	r3, [r3, #16]
 800315a:	4619      	mov	r1, r3
 800315c:	485e      	ldr	r0, [pc, #376]	; (80032d8 <cliSd+0x244>)
 800315e:	f7ff f899 	bl	8002294 <cliPrintf>
        cliPrintf("   block_size           : %d\n", sd_info.block_size);
 8003162:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8003166:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 800316a:	695b      	ldr	r3, [r3, #20]
 800316c:	4619      	mov	r1, r3
 800316e:	485b      	ldr	r0, [pc, #364]	; (80032dc <cliSd+0x248>)
 8003170:	f7ff f890 	bl	8002294 <cliPrintf>
        cliPrintf("   log_block_numbers    : %d\n", sd_info.log_block_numbers);
 8003174:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8003178:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 800317c:	699b      	ldr	r3, [r3, #24]
 800317e:	4619      	mov	r1, r3
 8003180:	4857      	ldr	r0, [pc, #348]	; (80032e0 <cliSd+0x24c>)
 8003182:	f7ff f887 	bl	8002294 <cliPrintf>
        cliPrintf("   log_block_size       : %d\n", sd_info.log_block_size);
 8003186:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800318a:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 800318e:	69db      	ldr	r3, [r3, #28]
 8003190:	4619      	mov	r1, r3
 8003192:	4854      	ldr	r0, [pc, #336]	; (80032e4 <cliSd+0x250>)
 8003194:	f7ff f87e 	bl	8002294 <cliPrintf>
        cliPrintf("   card_size            : %d MB, %d.%d GB\n", sd_info.card_size, sd_info.card_size/1024, ((sd_info.card_size * 10)/1024) % 10);
 8003198:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800319c:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80031a0:	6a18      	ldr	r0, [r3, #32]
 80031a2:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80031a6:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80031aa:	6a1b      	ldr	r3, [r3, #32]
 80031ac:	0a9c      	lsrs	r4, r3, #10
 80031ae:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80031b2:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80031b6:	6a1a      	ldr	r2, [r3, #32]
 80031b8:	4613      	mov	r3, r2
 80031ba:	009b      	lsls	r3, r3, #2
 80031bc:	4413      	add	r3, r2
 80031be:	005b      	lsls	r3, r3, #1
 80031c0:	0a99      	lsrs	r1, r3, #10
 80031c2:	4b49      	ldr	r3, [pc, #292]	; (80032e8 <cliSd+0x254>)
 80031c4:	fba3 2301 	umull	r2, r3, r3, r1
 80031c8:	08da      	lsrs	r2, r3, #3
 80031ca:	4613      	mov	r3, r2
 80031cc:	009b      	lsls	r3, r3, #2
 80031ce:	4413      	add	r3, r2
 80031d0:	005b      	lsls	r3, r3, #1
 80031d2:	1aca      	subs	r2, r1, r3
 80031d4:	4613      	mov	r3, r2
 80031d6:	4622      	mov	r2, r4
 80031d8:	4601      	mov	r1, r0
 80031da:	4844      	ldr	r0, [pc, #272]	; (80032ec <cliSd+0x258>)
 80031dc:	f7ff f85a 	bl	8002294 <cliPrintf>
			}
		}

		ret = true;
 80031e0:	2301      	movs	r3, #1
 80031e2:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
	}

	if(args->argc == 2 && args->isStr(0, "read") == true)
 80031e6:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80031ea:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	881b      	ldrh	r3, [r3, #0]
 80031f2:	2b02      	cmp	r3, #2
 80031f4:	d147      	bne.n	8003286 <cliSd+0x1f2>
 80031f6:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80031fa:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	695b      	ldr	r3, [r3, #20]
 8003202:	493b      	ldr	r1, [pc, #236]	; (80032f0 <cliSd+0x25c>)
 8003204:	2000      	movs	r0, #0
 8003206:	4798      	blx	r3
 8003208:	4603      	mov	r3, r0
 800320a:	2b00      	cmp	r3, #0
 800320c:	d03b      	beq.n	8003286 <cliSd+0x1f2>
	{
		uint32_t number;
		uint32_t buf[512/4];

		number = args->getData(1);
 800320e:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8003212:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	689b      	ldr	r3, [r3, #8]
 800321a:	2001      	movs	r0, #1
 800321c:	4798      	blx	r3
 800321e:	4603      	mov	r3, r0
 8003220:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c

		if(sdReadBlocks(number, (uint8_t *)buf, 1, 1000) == true)
 8003224:	f107 010c 	add.w	r1, r7, #12
 8003228:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800322c:	2201      	movs	r2, #1
 800322e:	f8d7 020c 	ldr.w	r0, [r7, #524]	; 0x20c
 8003232:	f7ff fee5 	bl	8003000 <sdReadBlocks>
 8003236:	4603      	mov	r3, r0
 8003238:	2b00      	cmp	r3, #0
 800323a:	d01e      	beq.n	800327a <cliSd+0x1e6>
		{
			for(int i=0; i<512/4; i++)
 800323c:	2300      	movs	r3, #0
 800323e:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 8003242:	e015      	b.n	8003270 <cliSd+0x1dc>
			{
				cliPrintf("%d:%04d : 0x%08X\n", number, i*4, buf[i]);
 8003244:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8003248:	0099      	lsls	r1, r3, #2
 800324a:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800324e:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8003252:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 8003256:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800325a:	460a      	mov	r2, r1
 800325c:	f8d7 120c 	ldr.w	r1, [r7, #524]	; 0x20c
 8003260:	4824      	ldr	r0, [pc, #144]	; (80032f4 <cliSd+0x260>)
 8003262:	f7ff f817 	bl	8002294 <cliPrintf>
			for(int i=0; i<512/4; i++)
 8003266:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800326a:	3301      	adds	r3, #1
 800326c:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 8003270:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8003274:	2b7f      	cmp	r3, #127	; 0x7f
 8003276:	dde5      	ble.n	8003244 <cliSd+0x1b0>
 8003278:	e002      	b.n	8003280 <cliSd+0x1ec>
			}
		}
		else
		{
			cliPrintf("sdRead Fail\n");
 800327a:	481f      	ldr	r0, [pc, #124]	; (80032f8 <cliSd+0x264>)
 800327c:	f7ff f80a 	bl	8002294 <cliPrintf>
		}

		ret = true;
 8003280:	2301      	movs	r3, #1
 8003282:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
	}

	if(ret != true)
 8003286:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 800328a:	f083 0301 	eor.w	r3, r3, #1
 800328e:	b2db      	uxtb	r3, r3
 8003290:	2b00      	cmp	r3, #0
 8003292:	d009      	beq.n	80032a8 <cliSd+0x214>
	{
		cliPrintf("sd info\n");
 8003294:	4819      	ldr	r0, [pc, #100]	; (80032fc <cliSd+0x268>)
 8003296:	f7fe fffd 	bl	8002294 <cliPrintf>

		if(is_init == true)
 800329a:	4b07      	ldr	r3, [pc, #28]	; (80032b8 <cliSd+0x224>)
 800329c:	781b      	ldrb	r3, [r3, #0]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d002      	beq.n	80032a8 <cliSd+0x214>
		{
			cliPrintf("sd read block_number\n");
 80032a2:	4817      	ldr	r0, [pc, #92]	; (8003300 <cliSd+0x26c>)
 80032a4:	f7fe fff6 	bl	8002294 <cliPrintf>
		}
	}
}
 80032a8:	bf00      	nop
 80032aa:	f507 7707 	add.w	r7, r7, #540	; 0x21c
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bd90      	pop	{r4, r7, pc}
 80032b2:	bf00      	nop
 80032b4:	08013350 	.word	0x08013350
 80032b8:	20000cfc 	.word	0x20000cfc
 80032bc:	08013358 	.word	0x08013358
 80032c0:	20000cfd 	.word	0x20000cfd
 80032c4:	08013368 	.word	0x08013368
 80032c8:	0801337c 	.word	0x0801337c
 80032cc:	0801339c 	.word	0x0801339c
 80032d0:	080133bc 	.word	0x080133bc
 80032d4:	080133dc 	.word	0x080133dc
 80032d8:	080133fc 	.word	0x080133fc
 80032dc:	0801341c 	.word	0x0801341c
 80032e0:	0801343c 	.word	0x0801343c
 80032e4:	0801345c 	.word	0x0801345c
 80032e8:	cccccccd 	.word	0xcccccccd
 80032ec:	0801347c 	.word	0x0801347c
 80032f0:	080134a8 	.word	0x080134a8
 80032f4:	080134b0 	.word	0x080134b0
 80032f8:	080134c4 	.word	0x080134c4
 80032fc:	080134d4 	.word	0x080134d4
 8003300:	080134e0 	.word	0x080134e0

08003304 <uartOpen>:
{
	return true;
}

bool uartOpen(uint8_t ch, uint32_t baud)
{
 8003304:	b480      	push	{r7}
 8003306:	b085      	sub	sp, #20
 8003308:	af00      	add	r7, sp, #0
 800330a:	4603      	mov	r3, r0
 800330c:	6039      	str	r1, [r7, #0]
 800330e:	71fb      	strb	r3, [r7, #7]
	bool ret = false;
 8003310:	2300      	movs	r3, #0
 8003312:	73fb      	strb	r3, [r7, #15]

	switch(ch)
 8003314:	79fb      	ldrb	r3, [r7, #7]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d106      	bne.n	8003328 <uartOpen+0x24>
	{
		case _DEF_UART1:
			is_open[ch] = true;
 800331a:	79fb      	ldrb	r3, [r7, #7]
 800331c:	4a06      	ldr	r2, [pc, #24]	; (8003338 <uartOpen+0x34>)
 800331e:	2101      	movs	r1, #1
 8003320:	54d1      	strb	r1, [r2, r3]
			ret = true;
 8003322:	2301      	movs	r3, #1
 8003324:	73fb      	strb	r3, [r7, #15]
			break;
 8003326:	bf00      	nop
			qbuffer[ch].out = qbuffer[ch].in;
			break;
			#endif
	}

	return ret;
 8003328:	7bfb      	ldrb	r3, [r7, #15]
}
 800332a:	4618      	mov	r0, r3
 800332c:	3714      	adds	r7, #20
 800332e:	46bd      	mov	sp, r7
 8003330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003334:	4770      	bx	lr
 8003336:	bf00      	nop
 8003338:	20000d00 	.word	0x20000d00

0800333c <uartAvailable>:

uint32_t uartAvailable(uint8_t ch)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b084      	sub	sp, #16
 8003340:	af00      	add	r7, sp, #0
 8003342:	4603      	mov	r3, r0
 8003344:	71fb      	strb	r3, [r7, #7]
	uint32_t ret;

	switch(ch)
 8003346:	79fb      	ldrb	r3, [r7, #7]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d001      	beq.n	8003350 <uartAvailable+0x14>
 800334c:	2b01      	cmp	r3, #1
		case _DEF_UART2:
			#ifdef _USE_UART2
			qbuffer[ch].in = (qbuffer[ch].len - hdma_usart1_rx.Instance->NDTR);
			ret = qbufferAvailable(&qbuffer[ch]);
			#endif
			break;
 800334e:	e003      	b.n	8003358 <uartAvailable+0x1c>
			ret = cdcAvailable();
 8003350:	f7fe f9fe 	bl	8001750 <cdcAvailable>
 8003354:	60f8      	str	r0, [r7, #12]
			break;
 8003356:	bf00      	nop
	}

	return ret;
 8003358:	68fb      	ldr	r3, [r7, #12]
}
 800335a:	4618      	mov	r0, r3
 800335c:	3710      	adds	r7, #16
 800335e:	46bd      	mov	sp, r7
 8003360:	bd80      	pop	{r7, pc}

08003362 <uartRead>:

uint8_t uartRead(uint8_t ch)
{
 8003362:	b580      	push	{r7, lr}
 8003364:	b084      	sub	sp, #16
 8003366:	af00      	add	r7, sp, #0
 8003368:	4603      	mov	r3, r0
 800336a:	71fb      	strb	r3, [r7, #7]
	uint8_t ret;

	switch(ch)
 800336c:	79fb      	ldrb	r3, [r7, #7]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d001      	beq.n	8003376 <uartRead+0x14>
 8003372:	2b01      	cmp	r3, #1

		case _DEF_UART2:
			#ifdef _USE_UART2
			qbufferRead(&qbuffer[_DEF_UART2], &ret, 1);
			#endif
			break;
 8003374:	e004      	b.n	8003380 <uartRead+0x1e>
			ret = cdcRead();
 8003376:	f7fe fa01 	bl	800177c <cdcRead>
 800337a:	4603      	mov	r3, r0
 800337c:	73fb      	strb	r3, [r7, #15]
			break;
 800337e:	bf00      	nop
	}

	return ret;
 8003380:	7bfb      	ldrb	r3, [r7, #15]
}
 8003382:	4618      	mov	r0, r3
 8003384:	3710      	adds	r7, #16
 8003386:	46bd      	mov	sp, r7
 8003388:	bd80      	pop	{r7, pc}

0800338a <uartWrite>:

uint32_t uartWrite(uint8_t ch, uint8_t *p_data, uint32_t length)
{
 800338a:	b580      	push	{r7, lr}
 800338c:	b086      	sub	sp, #24
 800338e:	af00      	add	r7, sp, #0
 8003390:	4603      	mov	r3, r0
 8003392:	60b9      	str	r1, [r7, #8]
 8003394:	607a      	str	r2, [r7, #4]
 8003396:	73fb      	strb	r3, [r7, #15]

	#ifdef _USE_UART2
	HAL_StatusTypeDef status;
	#endif

	switch(ch)
 8003398:	7bfb      	ldrb	r3, [r7, #15]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d001      	beq.n	80033a2 <uartWrite+0x18>
 800339e:	2b01      	cmp	r3, #1
			if(status == HAL_OK)
			{
				ret = length;
			}
			#endif
			break;
 80033a0:	e005      	b.n	80033ae <uartWrite+0x24>
			ret = cdcWrite(p_data, length);
 80033a2:	6879      	ldr	r1, [r7, #4]
 80033a4:	68b8      	ldr	r0, [r7, #8]
 80033a6:	f7fe fa31 	bl	800180c <cdcWrite>
 80033aa:	6178      	str	r0, [r7, #20]
			break;
 80033ac:	bf00      	nop
	}

	return ret;
 80033ae:	697b      	ldr	r3, [r7, #20]
}
 80033b0:	4618      	mov	r0, r3
 80033b2:	3718      	adds	r7, #24
 80033b4:	46bd      	mov	sp, r7
 80033b6:	bd80      	pop	{r7, pc}

080033b8 <uartPrintf>:

uint32_t uartPrintf(uint8_t ch, char *fmt, ...)
{
 80033b8:	b40e      	push	{r1, r2, r3}
 80033ba:	b580      	push	{r7, lr}
 80033bc:	b0c7      	sub	sp, #284	; 0x11c
 80033be:	af00      	add	r7, sp, #0
 80033c0:	4602      	mov	r2, r0
 80033c2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80033c6:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 80033ca:	701a      	strb	r2, [r3, #0]
	char buf[256];
	va_list args;
	int len;
	uint32_t ret;

	va_start(args, fmt);
 80033cc:	f507 7294 	add.w	r2, r7, #296	; 0x128
 80033d0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80033d4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80033d8:	601a      	str	r2, [r3, #0]
	len = vsnprintf(buf, 256, fmt, args);
 80033da:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80033de:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80033e2:	f107 0010 	add.w	r0, r7, #16
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 80033ec:	f44f 7180 	mov.w	r1, #256	; 0x100
 80033f0:	f00d fd1c 	bl	8010e2c <vsniprintf>
 80033f4:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114

	ret = uartWrite(ch, (uint8_t *)buf, len);
 80033f8:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80033fc:	f107 0110 	add.w	r1, r7, #16
 8003400:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003404:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 8003408:	781b      	ldrb	r3, [r3, #0]
 800340a:	4618      	mov	r0, r3
 800340c:	f7ff ffbd 	bl	800338a <uartWrite>
 8003410:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

	va_end(args);

	return ret;
 8003414:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
}
 8003418:	4618      	mov	r0, r3
 800341a:	f507 778e 	add.w	r7, r7, #284	; 0x11c
 800341e:	46bd      	mov	sp, r7
 8003420:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003424:	b003      	add	sp, #12
 8003426:	4770      	bx	lr

08003428 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800342c:	4b0e      	ldr	r3, [pc, #56]	; (8003468 <HAL_Init+0x40>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4a0d      	ldr	r2, [pc, #52]	; (8003468 <HAL_Init+0x40>)
 8003432:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003436:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003438:	4b0b      	ldr	r3, [pc, #44]	; (8003468 <HAL_Init+0x40>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a0a      	ldr	r2, [pc, #40]	; (8003468 <HAL_Init+0x40>)
 800343e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003442:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003444:	4b08      	ldr	r3, [pc, #32]	; (8003468 <HAL_Init+0x40>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4a07      	ldr	r2, [pc, #28]	; (8003468 <HAL_Init+0x40>)
 800344a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800344e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003450:	2003      	movs	r0, #3
 8003452:	f000 f94f 	bl	80036f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003456:	200f      	movs	r0, #15
 8003458:	f000 f808 	bl	800346c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800345c:	f7fd ffea 	bl	8001434 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003460:	2300      	movs	r3, #0
}
 8003462:	4618      	mov	r0, r3
 8003464:	bd80      	pop	{r7, pc}
 8003466:	bf00      	nop
 8003468:	40023c00 	.word	0x40023c00

0800346c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b082      	sub	sp, #8
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003474:	4b12      	ldr	r3, [pc, #72]	; (80034c0 <HAL_InitTick+0x54>)
 8003476:	681a      	ldr	r2, [r3, #0]
 8003478:	4b12      	ldr	r3, [pc, #72]	; (80034c4 <HAL_InitTick+0x58>)
 800347a:	781b      	ldrb	r3, [r3, #0]
 800347c:	4619      	mov	r1, r3
 800347e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003482:	fbb3 f3f1 	udiv	r3, r3, r1
 8003486:	fbb2 f3f3 	udiv	r3, r2, r3
 800348a:	4618      	mov	r0, r3
 800348c:	f000 f967 	bl	800375e <HAL_SYSTICK_Config>
 8003490:	4603      	mov	r3, r0
 8003492:	2b00      	cmp	r3, #0
 8003494:	d001      	beq.n	800349a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003496:	2301      	movs	r3, #1
 8003498:	e00e      	b.n	80034b8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2b0f      	cmp	r3, #15
 800349e:	d80a      	bhi.n	80034b6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80034a0:	2200      	movs	r2, #0
 80034a2:	6879      	ldr	r1, [r7, #4]
 80034a4:	f04f 30ff 	mov.w	r0, #4294967295
 80034a8:	f000 f92f 	bl	800370a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80034ac:	4a06      	ldr	r2, [pc, #24]	; (80034c8 <HAL_InitTick+0x5c>)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80034b2:	2300      	movs	r3, #0
 80034b4:	e000      	b.n	80034b8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80034b6:	2301      	movs	r3, #1
}
 80034b8:	4618      	mov	r0, r3
 80034ba:	3708      	adds	r7, #8
 80034bc:	46bd      	mov	sp, r7
 80034be:	bd80      	pop	{r7, pc}
 80034c0:	20000000 	.word	0x20000000
 80034c4:	20000014 	.word	0x20000014
 80034c8:	20000010 	.word	0x20000010

080034cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80034cc:	b480      	push	{r7}
 80034ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80034d0:	4b06      	ldr	r3, [pc, #24]	; (80034ec <HAL_IncTick+0x20>)
 80034d2:	781b      	ldrb	r3, [r3, #0]
 80034d4:	461a      	mov	r2, r3
 80034d6:	4b06      	ldr	r3, [pc, #24]	; (80034f0 <HAL_IncTick+0x24>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4413      	add	r3, r2
 80034dc:	4a04      	ldr	r2, [pc, #16]	; (80034f0 <HAL_IncTick+0x24>)
 80034de:	6013      	str	r3, [r2, #0]
}
 80034e0:	bf00      	nop
 80034e2:	46bd      	mov	sp, r7
 80034e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e8:	4770      	bx	lr
 80034ea:	bf00      	nop
 80034ec:	20000014 	.word	0x20000014
 80034f0:	20000d04 	.word	0x20000d04

080034f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80034f4:	b480      	push	{r7}
 80034f6:	af00      	add	r7, sp, #0
  return uwTick;
 80034f8:	4b03      	ldr	r3, [pc, #12]	; (8003508 <HAL_GetTick+0x14>)
 80034fa:	681b      	ldr	r3, [r3, #0]
}
 80034fc:	4618      	mov	r0, r3
 80034fe:	46bd      	mov	sp, r7
 8003500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003504:	4770      	bx	lr
 8003506:	bf00      	nop
 8003508:	20000d04 	.word	0x20000d04

0800350c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b084      	sub	sp, #16
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003514:	f7ff ffee 	bl	80034f4 <HAL_GetTick>
 8003518:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003524:	d005      	beq.n	8003532 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003526:	4b0a      	ldr	r3, [pc, #40]	; (8003550 <HAL_Delay+0x44>)
 8003528:	781b      	ldrb	r3, [r3, #0]
 800352a:	461a      	mov	r2, r3
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	4413      	add	r3, r2
 8003530:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003532:	bf00      	nop
 8003534:	f7ff ffde 	bl	80034f4 <HAL_GetTick>
 8003538:	4602      	mov	r2, r0
 800353a:	68bb      	ldr	r3, [r7, #8]
 800353c:	1ad3      	subs	r3, r2, r3
 800353e:	68fa      	ldr	r2, [r7, #12]
 8003540:	429a      	cmp	r2, r3
 8003542:	d8f7      	bhi.n	8003534 <HAL_Delay+0x28>
  {
  }
}
 8003544:	bf00      	nop
 8003546:	bf00      	nop
 8003548:	3710      	adds	r7, #16
 800354a:	46bd      	mov	sp, r7
 800354c:	bd80      	pop	{r7, pc}
 800354e:	bf00      	nop
 8003550:	20000014 	.word	0x20000014

08003554 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003554:	b480      	push	{r7}
 8003556:	b085      	sub	sp, #20
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	f003 0307 	and.w	r3, r3, #7
 8003562:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003564:	4b0c      	ldr	r3, [pc, #48]	; (8003598 <__NVIC_SetPriorityGrouping+0x44>)
 8003566:	68db      	ldr	r3, [r3, #12]
 8003568:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800356a:	68ba      	ldr	r2, [r7, #8]
 800356c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003570:	4013      	ands	r3, r2
 8003572:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003578:	68bb      	ldr	r3, [r7, #8]
 800357a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800357c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003580:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003584:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003586:	4a04      	ldr	r2, [pc, #16]	; (8003598 <__NVIC_SetPriorityGrouping+0x44>)
 8003588:	68bb      	ldr	r3, [r7, #8]
 800358a:	60d3      	str	r3, [r2, #12]
}
 800358c:	bf00      	nop
 800358e:	3714      	adds	r7, #20
 8003590:	46bd      	mov	sp, r7
 8003592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003596:	4770      	bx	lr
 8003598:	e000ed00 	.word	0xe000ed00

0800359c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800359c:	b480      	push	{r7}
 800359e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80035a0:	4b04      	ldr	r3, [pc, #16]	; (80035b4 <__NVIC_GetPriorityGrouping+0x18>)
 80035a2:	68db      	ldr	r3, [r3, #12]
 80035a4:	0a1b      	lsrs	r3, r3, #8
 80035a6:	f003 0307 	and.w	r3, r3, #7
}
 80035aa:	4618      	mov	r0, r3
 80035ac:	46bd      	mov	sp, r7
 80035ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b2:	4770      	bx	lr
 80035b4:	e000ed00 	.word	0xe000ed00

080035b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035b8:	b480      	push	{r7}
 80035ba:	b083      	sub	sp, #12
 80035bc:	af00      	add	r7, sp, #0
 80035be:	4603      	mov	r3, r0
 80035c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	db0b      	blt.n	80035e2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80035ca:	79fb      	ldrb	r3, [r7, #7]
 80035cc:	f003 021f 	and.w	r2, r3, #31
 80035d0:	4907      	ldr	r1, [pc, #28]	; (80035f0 <__NVIC_EnableIRQ+0x38>)
 80035d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035d6:	095b      	lsrs	r3, r3, #5
 80035d8:	2001      	movs	r0, #1
 80035da:	fa00 f202 	lsl.w	r2, r0, r2
 80035de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80035e2:	bf00      	nop
 80035e4:	370c      	adds	r7, #12
 80035e6:	46bd      	mov	sp, r7
 80035e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ec:	4770      	bx	lr
 80035ee:	bf00      	nop
 80035f0:	e000e100 	.word	0xe000e100

080035f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80035f4:	b480      	push	{r7}
 80035f6:	b083      	sub	sp, #12
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	4603      	mov	r3, r0
 80035fc:	6039      	str	r1, [r7, #0]
 80035fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003600:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003604:	2b00      	cmp	r3, #0
 8003606:	db0a      	blt.n	800361e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	b2da      	uxtb	r2, r3
 800360c:	490c      	ldr	r1, [pc, #48]	; (8003640 <__NVIC_SetPriority+0x4c>)
 800360e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003612:	0112      	lsls	r2, r2, #4
 8003614:	b2d2      	uxtb	r2, r2
 8003616:	440b      	add	r3, r1
 8003618:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800361c:	e00a      	b.n	8003634 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	b2da      	uxtb	r2, r3
 8003622:	4908      	ldr	r1, [pc, #32]	; (8003644 <__NVIC_SetPriority+0x50>)
 8003624:	79fb      	ldrb	r3, [r7, #7]
 8003626:	f003 030f 	and.w	r3, r3, #15
 800362a:	3b04      	subs	r3, #4
 800362c:	0112      	lsls	r2, r2, #4
 800362e:	b2d2      	uxtb	r2, r2
 8003630:	440b      	add	r3, r1
 8003632:	761a      	strb	r2, [r3, #24]
}
 8003634:	bf00      	nop
 8003636:	370c      	adds	r7, #12
 8003638:	46bd      	mov	sp, r7
 800363a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363e:	4770      	bx	lr
 8003640:	e000e100 	.word	0xe000e100
 8003644:	e000ed00 	.word	0xe000ed00

08003648 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003648:	b480      	push	{r7}
 800364a:	b089      	sub	sp, #36	; 0x24
 800364c:	af00      	add	r7, sp, #0
 800364e:	60f8      	str	r0, [r7, #12]
 8003650:	60b9      	str	r1, [r7, #8]
 8003652:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	f003 0307 	and.w	r3, r3, #7
 800365a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800365c:	69fb      	ldr	r3, [r7, #28]
 800365e:	f1c3 0307 	rsb	r3, r3, #7
 8003662:	2b04      	cmp	r3, #4
 8003664:	bf28      	it	cs
 8003666:	2304      	movcs	r3, #4
 8003668:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800366a:	69fb      	ldr	r3, [r7, #28]
 800366c:	3304      	adds	r3, #4
 800366e:	2b06      	cmp	r3, #6
 8003670:	d902      	bls.n	8003678 <NVIC_EncodePriority+0x30>
 8003672:	69fb      	ldr	r3, [r7, #28]
 8003674:	3b03      	subs	r3, #3
 8003676:	e000      	b.n	800367a <NVIC_EncodePriority+0x32>
 8003678:	2300      	movs	r3, #0
 800367a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800367c:	f04f 32ff 	mov.w	r2, #4294967295
 8003680:	69bb      	ldr	r3, [r7, #24]
 8003682:	fa02 f303 	lsl.w	r3, r2, r3
 8003686:	43da      	mvns	r2, r3
 8003688:	68bb      	ldr	r3, [r7, #8]
 800368a:	401a      	ands	r2, r3
 800368c:	697b      	ldr	r3, [r7, #20]
 800368e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003690:	f04f 31ff 	mov.w	r1, #4294967295
 8003694:	697b      	ldr	r3, [r7, #20]
 8003696:	fa01 f303 	lsl.w	r3, r1, r3
 800369a:	43d9      	mvns	r1, r3
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036a0:	4313      	orrs	r3, r2
         );
}
 80036a2:	4618      	mov	r0, r3
 80036a4:	3724      	adds	r7, #36	; 0x24
 80036a6:	46bd      	mov	sp, r7
 80036a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ac:	4770      	bx	lr
	...

080036b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b082      	sub	sp, #8
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	3b01      	subs	r3, #1
 80036bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80036c0:	d301      	bcc.n	80036c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80036c2:	2301      	movs	r3, #1
 80036c4:	e00f      	b.n	80036e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80036c6:	4a0a      	ldr	r2, [pc, #40]	; (80036f0 <SysTick_Config+0x40>)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	3b01      	subs	r3, #1
 80036cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80036ce:	210f      	movs	r1, #15
 80036d0:	f04f 30ff 	mov.w	r0, #4294967295
 80036d4:	f7ff ff8e 	bl	80035f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80036d8:	4b05      	ldr	r3, [pc, #20]	; (80036f0 <SysTick_Config+0x40>)
 80036da:	2200      	movs	r2, #0
 80036dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80036de:	4b04      	ldr	r3, [pc, #16]	; (80036f0 <SysTick_Config+0x40>)
 80036e0:	2207      	movs	r2, #7
 80036e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80036e4:	2300      	movs	r3, #0
}
 80036e6:	4618      	mov	r0, r3
 80036e8:	3708      	adds	r7, #8
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bd80      	pop	{r7, pc}
 80036ee:	bf00      	nop
 80036f0:	e000e010 	.word	0xe000e010

080036f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b082      	sub	sp, #8
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80036fc:	6878      	ldr	r0, [r7, #4]
 80036fe:	f7ff ff29 	bl	8003554 <__NVIC_SetPriorityGrouping>
}
 8003702:	bf00      	nop
 8003704:	3708      	adds	r7, #8
 8003706:	46bd      	mov	sp, r7
 8003708:	bd80      	pop	{r7, pc}

0800370a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800370a:	b580      	push	{r7, lr}
 800370c:	b086      	sub	sp, #24
 800370e:	af00      	add	r7, sp, #0
 8003710:	4603      	mov	r3, r0
 8003712:	60b9      	str	r1, [r7, #8]
 8003714:	607a      	str	r2, [r7, #4]
 8003716:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003718:	2300      	movs	r3, #0
 800371a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800371c:	f7ff ff3e 	bl	800359c <__NVIC_GetPriorityGrouping>
 8003720:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003722:	687a      	ldr	r2, [r7, #4]
 8003724:	68b9      	ldr	r1, [r7, #8]
 8003726:	6978      	ldr	r0, [r7, #20]
 8003728:	f7ff ff8e 	bl	8003648 <NVIC_EncodePriority>
 800372c:	4602      	mov	r2, r0
 800372e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003732:	4611      	mov	r1, r2
 8003734:	4618      	mov	r0, r3
 8003736:	f7ff ff5d 	bl	80035f4 <__NVIC_SetPriority>
}
 800373a:	bf00      	nop
 800373c:	3718      	adds	r7, #24
 800373e:	46bd      	mov	sp, r7
 8003740:	bd80      	pop	{r7, pc}

08003742 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003742:	b580      	push	{r7, lr}
 8003744:	b082      	sub	sp, #8
 8003746:	af00      	add	r7, sp, #0
 8003748:	4603      	mov	r3, r0
 800374a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800374c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003750:	4618      	mov	r0, r3
 8003752:	f7ff ff31 	bl	80035b8 <__NVIC_EnableIRQ>
}
 8003756:	bf00      	nop
 8003758:	3708      	adds	r7, #8
 800375a:	46bd      	mov	sp, r7
 800375c:	bd80      	pop	{r7, pc}

0800375e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800375e:	b580      	push	{r7, lr}
 8003760:	b082      	sub	sp, #8
 8003762:	af00      	add	r7, sp, #0
 8003764:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003766:	6878      	ldr	r0, [r7, #4]
 8003768:	f7ff ffa2 	bl	80036b0 <SysTick_Config>
 800376c:	4603      	mov	r3, r0
}
 800376e:	4618      	mov	r0, r3
 8003770:	3708      	adds	r7, #8
 8003772:	46bd      	mov	sp, r7
 8003774:	bd80      	pop	{r7, pc}
	...

08003778 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b086      	sub	sp, #24
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003780:	2300      	movs	r3, #0
 8003782:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003784:	f7ff feb6 	bl	80034f4 <HAL_GetTick>
 8003788:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d101      	bne.n	8003794 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003790:	2301      	movs	r3, #1
 8003792:	e099      	b.n	80038c8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2202      	movs	r2, #2
 8003798:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2200      	movs	r2, #0
 80037a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	681a      	ldr	r2, [r3, #0]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f022 0201 	bic.w	r2, r2, #1
 80037b2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80037b4:	e00f      	b.n	80037d6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80037b6:	f7ff fe9d 	bl	80034f4 <HAL_GetTick>
 80037ba:	4602      	mov	r2, r0
 80037bc:	693b      	ldr	r3, [r7, #16]
 80037be:	1ad3      	subs	r3, r2, r3
 80037c0:	2b05      	cmp	r3, #5
 80037c2:	d908      	bls.n	80037d6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2220      	movs	r2, #32
 80037c8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2203      	movs	r2, #3
 80037ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80037d2:	2303      	movs	r3, #3
 80037d4:	e078      	b.n	80038c8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f003 0301 	and.w	r3, r3, #1
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d1e8      	bne.n	80037b6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80037ec:	697a      	ldr	r2, [r7, #20]
 80037ee:	4b38      	ldr	r3, [pc, #224]	; (80038d0 <HAL_DMA_Init+0x158>)
 80037f0:	4013      	ands	r3, r2
 80037f2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	685a      	ldr	r2, [r3, #4]
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	689b      	ldr	r3, [r3, #8]
 80037fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003802:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	691b      	ldr	r3, [r3, #16]
 8003808:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800380e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	699b      	ldr	r3, [r3, #24]
 8003814:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800381a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6a1b      	ldr	r3, [r3, #32]
 8003820:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003822:	697a      	ldr	r2, [r7, #20]
 8003824:	4313      	orrs	r3, r2
 8003826:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800382c:	2b04      	cmp	r3, #4
 800382e:	d107      	bne.n	8003840 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003838:	4313      	orrs	r3, r2
 800383a:	697a      	ldr	r2, [r7, #20]
 800383c:	4313      	orrs	r3, r2
 800383e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	697a      	ldr	r2, [r7, #20]
 8003846:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	695b      	ldr	r3, [r3, #20]
 800384e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003850:	697b      	ldr	r3, [r7, #20]
 8003852:	f023 0307 	bic.w	r3, r3, #7
 8003856:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800385c:	697a      	ldr	r2, [r7, #20]
 800385e:	4313      	orrs	r3, r2
 8003860:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003866:	2b04      	cmp	r3, #4
 8003868:	d117      	bne.n	800389a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800386e:	697a      	ldr	r2, [r7, #20]
 8003870:	4313      	orrs	r3, r2
 8003872:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003878:	2b00      	cmp	r3, #0
 800387a:	d00e      	beq.n	800389a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800387c:	6878      	ldr	r0, [r7, #4]
 800387e:	f000 fa9d 	bl	8003dbc <DMA_CheckFifoParam>
 8003882:	4603      	mov	r3, r0
 8003884:	2b00      	cmp	r3, #0
 8003886:	d008      	beq.n	800389a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2240      	movs	r2, #64	; 0x40
 800388c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2201      	movs	r2, #1
 8003892:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003896:	2301      	movs	r3, #1
 8003898:	e016      	b.n	80038c8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	697a      	ldr	r2, [r7, #20]
 80038a0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80038a2:	6878      	ldr	r0, [r7, #4]
 80038a4:	f000 fa54 	bl	8003d50 <DMA_CalcBaseAndBitshift>
 80038a8:	4603      	mov	r3, r0
 80038aa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038b0:	223f      	movs	r2, #63	; 0x3f
 80038b2:	409a      	lsls	r2, r3
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2200      	movs	r2, #0
 80038bc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2201      	movs	r2, #1
 80038c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80038c6:	2300      	movs	r3, #0
}
 80038c8:	4618      	mov	r0, r3
 80038ca:	3718      	adds	r7, #24
 80038cc:	46bd      	mov	sp, r7
 80038ce:	bd80      	pop	{r7, pc}
 80038d0:	f010803f 	.word	0xf010803f

080038d4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b086      	sub	sp, #24
 80038d8:	af00      	add	r7, sp, #0
 80038da:	60f8      	str	r0, [r7, #12]
 80038dc:	60b9      	str	r1, [r7, #8]
 80038de:	607a      	str	r2, [r7, #4]
 80038e0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80038e2:	2300      	movs	r3, #0
 80038e4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038ea:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80038f2:	2b01      	cmp	r3, #1
 80038f4:	d101      	bne.n	80038fa <HAL_DMA_Start_IT+0x26>
 80038f6:	2302      	movs	r3, #2
 80038f8:	e040      	b.n	800397c <HAL_DMA_Start_IT+0xa8>
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	2201      	movs	r2, #1
 80038fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003908:	b2db      	uxtb	r3, r3
 800390a:	2b01      	cmp	r3, #1
 800390c:	d12f      	bne.n	800396e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	2202      	movs	r2, #2
 8003912:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	2200      	movs	r2, #0
 800391a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	687a      	ldr	r2, [r7, #4]
 8003920:	68b9      	ldr	r1, [r7, #8]
 8003922:	68f8      	ldr	r0, [r7, #12]
 8003924:	f000 f9e6 	bl	8003cf4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800392c:	223f      	movs	r2, #63	; 0x3f
 800392e:	409a      	lsls	r2, r3
 8003930:	693b      	ldr	r3, [r7, #16]
 8003932:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	681a      	ldr	r2, [r3, #0]
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f042 0216 	orr.w	r2, r2, #22
 8003942:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003948:	2b00      	cmp	r3, #0
 800394a:	d007      	beq.n	800395c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	681a      	ldr	r2, [r3, #0]
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f042 0208 	orr.w	r2, r2, #8
 800395a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	681a      	ldr	r2, [r3, #0]
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f042 0201 	orr.w	r2, r2, #1
 800396a:	601a      	str	r2, [r3, #0]
 800396c:	e005      	b.n	800397a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	2200      	movs	r2, #0
 8003972:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003976:	2302      	movs	r3, #2
 8003978:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800397a:	7dfb      	ldrb	r3, [r7, #23]
}
 800397c:	4618      	mov	r0, r3
 800397e:	3718      	adds	r7, #24
 8003980:	46bd      	mov	sp, r7
 8003982:	bd80      	pop	{r7, pc}

08003984 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003984:	b480      	push	{r7}
 8003986:	b083      	sub	sp, #12
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003992:	b2db      	uxtb	r3, r3
 8003994:	2b02      	cmp	r3, #2
 8003996:	d004      	beq.n	80039a2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2280      	movs	r2, #128	; 0x80
 800399c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800399e:	2301      	movs	r3, #1
 80039a0:	e00c      	b.n	80039bc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2205      	movs	r2, #5
 80039a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	681a      	ldr	r2, [r3, #0]
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f022 0201 	bic.w	r2, r2, #1
 80039b8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80039ba:	2300      	movs	r3, #0
}
 80039bc:	4618      	mov	r0, r3
 80039be:	370c      	adds	r7, #12
 80039c0:	46bd      	mov	sp, r7
 80039c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c6:	4770      	bx	lr

080039c8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b086      	sub	sp, #24
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80039d0:	2300      	movs	r3, #0
 80039d2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80039d4:	4b8e      	ldr	r3, [pc, #568]	; (8003c10 <HAL_DMA_IRQHandler+0x248>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4a8e      	ldr	r2, [pc, #568]	; (8003c14 <HAL_DMA_IRQHandler+0x24c>)
 80039da:	fba2 2303 	umull	r2, r3, r2, r3
 80039de:	0a9b      	lsrs	r3, r3, #10
 80039e0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039e6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80039e8:	693b      	ldr	r3, [r7, #16]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039f2:	2208      	movs	r2, #8
 80039f4:	409a      	lsls	r2, r3
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	4013      	ands	r3, r2
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d01a      	beq.n	8003a34 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f003 0304 	and.w	r3, r3, #4
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d013      	beq.n	8003a34 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	681a      	ldr	r2, [r3, #0]
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f022 0204 	bic.w	r2, r2, #4
 8003a1a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a20:	2208      	movs	r2, #8
 8003a22:	409a      	lsls	r2, r3
 8003a24:	693b      	ldr	r3, [r7, #16]
 8003a26:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a2c:	f043 0201 	orr.w	r2, r3, #1
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a38:	2201      	movs	r2, #1
 8003a3a:	409a      	lsls	r2, r3
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	4013      	ands	r3, r2
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d012      	beq.n	8003a6a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	695b      	ldr	r3, [r3, #20]
 8003a4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d00b      	beq.n	8003a6a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a56:	2201      	movs	r2, #1
 8003a58:	409a      	lsls	r2, r3
 8003a5a:	693b      	ldr	r3, [r7, #16]
 8003a5c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a62:	f043 0202 	orr.w	r2, r3, #2
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a6e:	2204      	movs	r2, #4
 8003a70:	409a      	lsls	r2, r3
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	4013      	ands	r3, r2
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d012      	beq.n	8003aa0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f003 0302 	and.w	r3, r3, #2
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d00b      	beq.n	8003aa0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a8c:	2204      	movs	r2, #4
 8003a8e:	409a      	lsls	r2, r3
 8003a90:	693b      	ldr	r3, [r7, #16]
 8003a92:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a98:	f043 0204 	orr.w	r2, r3, #4
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003aa4:	2210      	movs	r2, #16
 8003aa6:	409a      	lsls	r2, r3
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	4013      	ands	r3, r2
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d043      	beq.n	8003b38 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f003 0308 	and.w	r3, r3, #8
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d03c      	beq.n	8003b38 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ac2:	2210      	movs	r2, #16
 8003ac4:	409a      	lsls	r2, r3
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d018      	beq.n	8003b0a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d108      	bne.n	8003af8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d024      	beq.n	8003b38 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003af2:	6878      	ldr	r0, [r7, #4]
 8003af4:	4798      	blx	r3
 8003af6:	e01f      	b.n	8003b38 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d01b      	beq.n	8003b38 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b04:	6878      	ldr	r0, [r7, #4]
 8003b06:	4798      	blx	r3
 8003b08:	e016      	b.n	8003b38 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d107      	bne.n	8003b28 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	681a      	ldr	r2, [r3, #0]
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f022 0208 	bic.w	r2, r2, #8
 8003b26:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d003      	beq.n	8003b38 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b34:	6878      	ldr	r0, [r7, #4]
 8003b36:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b3c:	2220      	movs	r2, #32
 8003b3e:	409a      	lsls	r2, r3
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	4013      	ands	r3, r2
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	f000 808f 	beq.w	8003c68 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f003 0310 	and.w	r3, r3, #16
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	f000 8087 	beq.w	8003c68 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b5e:	2220      	movs	r2, #32
 8003b60:	409a      	lsls	r2, r3
 8003b62:	693b      	ldr	r3, [r7, #16]
 8003b64:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003b6c:	b2db      	uxtb	r3, r3
 8003b6e:	2b05      	cmp	r3, #5
 8003b70:	d136      	bne.n	8003be0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	681a      	ldr	r2, [r3, #0]
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f022 0216 	bic.w	r2, r2, #22
 8003b80:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	695a      	ldr	r2, [r3, #20]
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003b90:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d103      	bne.n	8003ba2 <HAL_DMA_IRQHandler+0x1da>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d007      	beq.n	8003bb2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	681a      	ldr	r2, [r3, #0]
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f022 0208 	bic.w	r2, r2, #8
 8003bb0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bb6:	223f      	movs	r2, #63	; 0x3f
 8003bb8:	409a      	lsls	r2, r3
 8003bba:	693b      	ldr	r3, [r7, #16]
 8003bbc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2201      	movs	r2, #1
 8003bc2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2200      	movs	r2, #0
 8003bca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d07e      	beq.n	8003cd4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bda:	6878      	ldr	r0, [r7, #4]
 8003bdc:	4798      	blx	r3
        }
        return;
 8003bde:	e079      	b.n	8003cd4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d01d      	beq.n	8003c2a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d10d      	bne.n	8003c18 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d031      	beq.n	8003c68 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c08:	6878      	ldr	r0, [r7, #4]
 8003c0a:	4798      	blx	r3
 8003c0c:	e02c      	b.n	8003c68 <HAL_DMA_IRQHandler+0x2a0>
 8003c0e:	bf00      	nop
 8003c10:	20000000 	.word	0x20000000
 8003c14:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d023      	beq.n	8003c68 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c24:	6878      	ldr	r0, [r7, #4]
 8003c26:	4798      	blx	r3
 8003c28:	e01e      	b.n	8003c68 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d10f      	bne.n	8003c58 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	681a      	ldr	r2, [r3, #0]
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f022 0210 	bic.w	r2, r2, #16
 8003c46:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2201      	movs	r2, #1
 8003c4c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2200      	movs	r2, #0
 8003c54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d003      	beq.n	8003c68 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c64:	6878      	ldr	r0, [r7, #4]
 8003c66:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d032      	beq.n	8003cd6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c74:	f003 0301 	and.w	r3, r3, #1
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d022      	beq.n	8003cc2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2205      	movs	r2, #5
 8003c80:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	681a      	ldr	r2, [r3, #0]
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f022 0201 	bic.w	r2, r2, #1
 8003c92:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003c94:	68bb      	ldr	r3, [r7, #8]
 8003c96:	3301      	adds	r3, #1
 8003c98:	60bb      	str	r3, [r7, #8]
 8003c9a:	697a      	ldr	r2, [r7, #20]
 8003c9c:	429a      	cmp	r2, r3
 8003c9e:	d307      	bcc.n	8003cb0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f003 0301 	and.w	r3, r3, #1
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d1f2      	bne.n	8003c94 <HAL_DMA_IRQHandler+0x2cc>
 8003cae:	e000      	b.n	8003cb2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003cb0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2201      	movs	r2, #1
 8003cb6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d005      	beq.n	8003cd6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cce:	6878      	ldr	r0, [r7, #4]
 8003cd0:	4798      	blx	r3
 8003cd2:	e000      	b.n	8003cd6 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003cd4:	bf00      	nop
    }
  }
}
 8003cd6:	3718      	adds	r7, #24
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	bd80      	pop	{r7, pc}

08003cdc <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8003cdc:	b480      	push	{r7}
 8003cde:	b083      	sub	sp, #12
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8003ce8:	4618      	mov	r0, r3
 8003cea:	370c      	adds	r7, #12
 8003cec:	46bd      	mov	sp, r7
 8003cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf2:	4770      	bx	lr

08003cf4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003cf4:	b480      	push	{r7}
 8003cf6:	b085      	sub	sp, #20
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	60f8      	str	r0, [r7, #12]
 8003cfc:	60b9      	str	r1, [r7, #8]
 8003cfe:	607a      	str	r2, [r7, #4]
 8003d00:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	681a      	ldr	r2, [r3, #0]
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003d10:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	683a      	ldr	r2, [r7, #0]
 8003d18:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	689b      	ldr	r3, [r3, #8]
 8003d1e:	2b40      	cmp	r3, #64	; 0x40
 8003d20:	d108      	bne.n	8003d34 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	687a      	ldr	r2, [r7, #4]
 8003d28:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	68ba      	ldr	r2, [r7, #8]
 8003d30:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003d32:	e007      	b.n	8003d44 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	68ba      	ldr	r2, [r7, #8]
 8003d3a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	687a      	ldr	r2, [r7, #4]
 8003d42:	60da      	str	r2, [r3, #12]
}
 8003d44:	bf00      	nop
 8003d46:	3714      	adds	r7, #20
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4e:	4770      	bx	lr

08003d50 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003d50:	b480      	push	{r7}
 8003d52:	b085      	sub	sp, #20
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	b2db      	uxtb	r3, r3
 8003d5e:	3b10      	subs	r3, #16
 8003d60:	4a14      	ldr	r2, [pc, #80]	; (8003db4 <DMA_CalcBaseAndBitshift+0x64>)
 8003d62:	fba2 2303 	umull	r2, r3, r2, r3
 8003d66:	091b      	lsrs	r3, r3, #4
 8003d68:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003d6a:	4a13      	ldr	r2, [pc, #76]	; (8003db8 <DMA_CalcBaseAndBitshift+0x68>)
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	4413      	add	r3, r2
 8003d70:	781b      	ldrb	r3, [r3, #0]
 8003d72:	461a      	mov	r2, r3
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	2b03      	cmp	r3, #3
 8003d7c:	d909      	bls.n	8003d92 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003d86:	f023 0303 	bic.w	r3, r3, #3
 8003d8a:	1d1a      	adds	r2, r3, #4
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	659a      	str	r2, [r3, #88]	; 0x58
 8003d90:	e007      	b.n	8003da2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003d9a:	f023 0303 	bic.w	r3, r3, #3
 8003d9e:	687a      	ldr	r2, [r7, #4]
 8003da0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003da6:	4618      	mov	r0, r3
 8003da8:	3714      	adds	r7, #20
 8003daa:	46bd      	mov	sp, r7
 8003dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db0:	4770      	bx	lr
 8003db2:	bf00      	nop
 8003db4:	aaaaaaab 	.word	0xaaaaaaab
 8003db8:	080135a0 	.word	0x080135a0

08003dbc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003dbc:	b480      	push	{r7}
 8003dbe:	b085      	sub	sp, #20
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dcc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	699b      	ldr	r3, [r3, #24]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d11f      	bne.n	8003e16 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003dd6:	68bb      	ldr	r3, [r7, #8]
 8003dd8:	2b03      	cmp	r3, #3
 8003dda:	d856      	bhi.n	8003e8a <DMA_CheckFifoParam+0xce>
 8003ddc:	a201      	add	r2, pc, #4	; (adr r2, 8003de4 <DMA_CheckFifoParam+0x28>)
 8003dde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003de2:	bf00      	nop
 8003de4:	08003df5 	.word	0x08003df5
 8003de8:	08003e07 	.word	0x08003e07
 8003dec:	08003df5 	.word	0x08003df5
 8003df0:	08003e8b 	.word	0x08003e8b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003df8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d046      	beq.n	8003e8e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003e00:	2301      	movs	r3, #1
 8003e02:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e04:	e043      	b.n	8003e8e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e0a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003e0e:	d140      	bne.n	8003e92 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003e10:	2301      	movs	r3, #1
 8003e12:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e14:	e03d      	b.n	8003e92 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	699b      	ldr	r3, [r3, #24]
 8003e1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e1e:	d121      	bne.n	8003e64 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003e20:	68bb      	ldr	r3, [r7, #8]
 8003e22:	2b03      	cmp	r3, #3
 8003e24:	d837      	bhi.n	8003e96 <DMA_CheckFifoParam+0xda>
 8003e26:	a201      	add	r2, pc, #4	; (adr r2, 8003e2c <DMA_CheckFifoParam+0x70>)
 8003e28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e2c:	08003e3d 	.word	0x08003e3d
 8003e30:	08003e43 	.word	0x08003e43
 8003e34:	08003e3d 	.word	0x08003e3d
 8003e38:	08003e55 	.word	0x08003e55
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	73fb      	strb	r3, [r7, #15]
      break;
 8003e40:	e030      	b.n	8003ea4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e46:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d025      	beq.n	8003e9a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003e4e:	2301      	movs	r3, #1
 8003e50:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e52:	e022      	b.n	8003e9a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e58:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003e5c:	d11f      	bne.n	8003e9e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003e5e:	2301      	movs	r3, #1
 8003e60:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003e62:	e01c      	b.n	8003e9e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003e64:	68bb      	ldr	r3, [r7, #8]
 8003e66:	2b02      	cmp	r3, #2
 8003e68:	d903      	bls.n	8003e72 <DMA_CheckFifoParam+0xb6>
 8003e6a:	68bb      	ldr	r3, [r7, #8]
 8003e6c:	2b03      	cmp	r3, #3
 8003e6e:	d003      	beq.n	8003e78 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003e70:	e018      	b.n	8003ea4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003e72:	2301      	movs	r3, #1
 8003e74:	73fb      	strb	r3, [r7, #15]
      break;
 8003e76:	e015      	b.n	8003ea4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e7c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d00e      	beq.n	8003ea2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003e84:	2301      	movs	r3, #1
 8003e86:	73fb      	strb	r3, [r7, #15]
      break;
 8003e88:	e00b      	b.n	8003ea2 <DMA_CheckFifoParam+0xe6>
      break;
 8003e8a:	bf00      	nop
 8003e8c:	e00a      	b.n	8003ea4 <DMA_CheckFifoParam+0xe8>
      break;
 8003e8e:	bf00      	nop
 8003e90:	e008      	b.n	8003ea4 <DMA_CheckFifoParam+0xe8>
      break;
 8003e92:	bf00      	nop
 8003e94:	e006      	b.n	8003ea4 <DMA_CheckFifoParam+0xe8>
      break;
 8003e96:	bf00      	nop
 8003e98:	e004      	b.n	8003ea4 <DMA_CheckFifoParam+0xe8>
      break;
 8003e9a:	bf00      	nop
 8003e9c:	e002      	b.n	8003ea4 <DMA_CheckFifoParam+0xe8>
      break;   
 8003e9e:	bf00      	nop
 8003ea0:	e000      	b.n	8003ea4 <DMA_CheckFifoParam+0xe8>
      break;
 8003ea2:	bf00      	nop
    }
  } 
  
  return status; 
 8003ea4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	3714      	adds	r7, #20
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb0:	4770      	bx	lr
 8003eb2:	bf00      	nop

08003eb4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003eb4:	b480      	push	{r7}
 8003eb6:	b089      	sub	sp, #36	; 0x24
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
 8003ebc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003eca:	2300      	movs	r3, #0
 8003ecc:	61fb      	str	r3, [r7, #28]
 8003ece:	e159      	b.n	8004184 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003ed0:	2201      	movs	r2, #1
 8003ed2:	69fb      	ldr	r3, [r7, #28]
 8003ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ed8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	697a      	ldr	r2, [r7, #20]
 8003ee0:	4013      	ands	r3, r2
 8003ee2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003ee4:	693a      	ldr	r2, [r7, #16]
 8003ee6:	697b      	ldr	r3, [r7, #20]
 8003ee8:	429a      	cmp	r2, r3
 8003eea:	f040 8148 	bne.w	800417e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	685b      	ldr	r3, [r3, #4]
 8003ef2:	f003 0303 	and.w	r3, r3, #3
 8003ef6:	2b01      	cmp	r3, #1
 8003ef8:	d005      	beq.n	8003f06 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	685b      	ldr	r3, [r3, #4]
 8003efe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003f02:	2b02      	cmp	r3, #2
 8003f04:	d130      	bne.n	8003f68 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	689b      	ldr	r3, [r3, #8]
 8003f0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003f0c:	69fb      	ldr	r3, [r7, #28]
 8003f0e:	005b      	lsls	r3, r3, #1
 8003f10:	2203      	movs	r2, #3
 8003f12:	fa02 f303 	lsl.w	r3, r2, r3
 8003f16:	43db      	mvns	r3, r3
 8003f18:	69ba      	ldr	r2, [r7, #24]
 8003f1a:	4013      	ands	r3, r2
 8003f1c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	68da      	ldr	r2, [r3, #12]
 8003f22:	69fb      	ldr	r3, [r7, #28]
 8003f24:	005b      	lsls	r3, r3, #1
 8003f26:	fa02 f303 	lsl.w	r3, r2, r3
 8003f2a:	69ba      	ldr	r2, [r7, #24]
 8003f2c:	4313      	orrs	r3, r2
 8003f2e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	69ba      	ldr	r2, [r7, #24]
 8003f34:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	685b      	ldr	r3, [r3, #4]
 8003f3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003f3c:	2201      	movs	r2, #1
 8003f3e:	69fb      	ldr	r3, [r7, #28]
 8003f40:	fa02 f303 	lsl.w	r3, r2, r3
 8003f44:	43db      	mvns	r3, r3
 8003f46:	69ba      	ldr	r2, [r7, #24]
 8003f48:	4013      	ands	r3, r2
 8003f4a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	091b      	lsrs	r3, r3, #4
 8003f52:	f003 0201 	and.w	r2, r3, #1
 8003f56:	69fb      	ldr	r3, [r7, #28]
 8003f58:	fa02 f303 	lsl.w	r3, r2, r3
 8003f5c:	69ba      	ldr	r2, [r7, #24]
 8003f5e:	4313      	orrs	r3, r2
 8003f60:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	69ba      	ldr	r2, [r7, #24]
 8003f66:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	685b      	ldr	r3, [r3, #4]
 8003f6c:	f003 0303 	and.w	r3, r3, #3
 8003f70:	2b03      	cmp	r3, #3
 8003f72:	d017      	beq.n	8003fa4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	68db      	ldr	r3, [r3, #12]
 8003f78:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003f7a:	69fb      	ldr	r3, [r7, #28]
 8003f7c:	005b      	lsls	r3, r3, #1
 8003f7e:	2203      	movs	r2, #3
 8003f80:	fa02 f303 	lsl.w	r3, r2, r3
 8003f84:	43db      	mvns	r3, r3
 8003f86:	69ba      	ldr	r2, [r7, #24]
 8003f88:	4013      	ands	r3, r2
 8003f8a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	689a      	ldr	r2, [r3, #8]
 8003f90:	69fb      	ldr	r3, [r7, #28]
 8003f92:	005b      	lsls	r3, r3, #1
 8003f94:	fa02 f303 	lsl.w	r3, r2, r3
 8003f98:	69ba      	ldr	r2, [r7, #24]
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	69ba      	ldr	r2, [r7, #24]
 8003fa2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	685b      	ldr	r3, [r3, #4]
 8003fa8:	f003 0303 	and.w	r3, r3, #3
 8003fac:	2b02      	cmp	r3, #2
 8003fae:	d123      	bne.n	8003ff8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003fb0:	69fb      	ldr	r3, [r7, #28]
 8003fb2:	08da      	lsrs	r2, r3, #3
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	3208      	adds	r2, #8
 8003fb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003fbc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003fbe:	69fb      	ldr	r3, [r7, #28]
 8003fc0:	f003 0307 	and.w	r3, r3, #7
 8003fc4:	009b      	lsls	r3, r3, #2
 8003fc6:	220f      	movs	r2, #15
 8003fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8003fcc:	43db      	mvns	r3, r3
 8003fce:	69ba      	ldr	r2, [r7, #24]
 8003fd0:	4013      	ands	r3, r2
 8003fd2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	691a      	ldr	r2, [r3, #16]
 8003fd8:	69fb      	ldr	r3, [r7, #28]
 8003fda:	f003 0307 	and.w	r3, r3, #7
 8003fde:	009b      	lsls	r3, r3, #2
 8003fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8003fe4:	69ba      	ldr	r2, [r7, #24]
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003fea:	69fb      	ldr	r3, [r7, #28]
 8003fec:	08da      	lsrs	r2, r3, #3
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	3208      	adds	r2, #8
 8003ff2:	69b9      	ldr	r1, [r7, #24]
 8003ff4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003ffe:	69fb      	ldr	r3, [r7, #28]
 8004000:	005b      	lsls	r3, r3, #1
 8004002:	2203      	movs	r2, #3
 8004004:	fa02 f303 	lsl.w	r3, r2, r3
 8004008:	43db      	mvns	r3, r3
 800400a:	69ba      	ldr	r2, [r7, #24]
 800400c:	4013      	ands	r3, r2
 800400e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	685b      	ldr	r3, [r3, #4]
 8004014:	f003 0203 	and.w	r2, r3, #3
 8004018:	69fb      	ldr	r3, [r7, #28]
 800401a:	005b      	lsls	r3, r3, #1
 800401c:	fa02 f303 	lsl.w	r3, r2, r3
 8004020:	69ba      	ldr	r2, [r7, #24]
 8004022:	4313      	orrs	r3, r2
 8004024:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	69ba      	ldr	r2, [r7, #24]
 800402a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	685b      	ldr	r3, [r3, #4]
 8004030:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004034:	2b00      	cmp	r3, #0
 8004036:	f000 80a2 	beq.w	800417e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800403a:	2300      	movs	r3, #0
 800403c:	60fb      	str	r3, [r7, #12]
 800403e:	4b57      	ldr	r3, [pc, #348]	; (800419c <HAL_GPIO_Init+0x2e8>)
 8004040:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004042:	4a56      	ldr	r2, [pc, #344]	; (800419c <HAL_GPIO_Init+0x2e8>)
 8004044:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004048:	6453      	str	r3, [r2, #68]	; 0x44
 800404a:	4b54      	ldr	r3, [pc, #336]	; (800419c <HAL_GPIO_Init+0x2e8>)
 800404c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800404e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004052:	60fb      	str	r3, [r7, #12]
 8004054:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004056:	4a52      	ldr	r2, [pc, #328]	; (80041a0 <HAL_GPIO_Init+0x2ec>)
 8004058:	69fb      	ldr	r3, [r7, #28]
 800405a:	089b      	lsrs	r3, r3, #2
 800405c:	3302      	adds	r3, #2
 800405e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004062:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004064:	69fb      	ldr	r3, [r7, #28]
 8004066:	f003 0303 	and.w	r3, r3, #3
 800406a:	009b      	lsls	r3, r3, #2
 800406c:	220f      	movs	r2, #15
 800406e:	fa02 f303 	lsl.w	r3, r2, r3
 8004072:	43db      	mvns	r3, r3
 8004074:	69ba      	ldr	r2, [r7, #24]
 8004076:	4013      	ands	r3, r2
 8004078:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	4a49      	ldr	r2, [pc, #292]	; (80041a4 <HAL_GPIO_Init+0x2f0>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d019      	beq.n	80040b6 <HAL_GPIO_Init+0x202>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	4a48      	ldr	r2, [pc, #288]	; (80041a8 <HAL_GPIO_Init+0x2f4>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d013      	beq.n	80040b2 <HAL_GPIO_Init+0x1fe>
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	4a47      	ldr	r2, [pc, #284]	; (80041ac <HAL_GPIO_Init+0x2f8>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d00d      	beq.n	80040ae <HAL_GPIO_Init+0x1fa>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	4a46      	ldr	r2, [pc, #280]	; (80041b0 <HAL_GPIO_Init+0x2fc>)
 8004096:	4293      	cmp	r3, r2
 8004098:	d007      	beq.n	80040aa <HAL_GPIO_Init+0x1f6>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	4a45      	ldr	r2, [pc, #276]	; (80041b4 <HAL_GPIO_Init+0x300>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d101      	bne.n	80040a6 <HAL_GPIO_Init+0x1f2>
 80040a2:	2304      	movs	r3, #4
 80040a4:	e008      	b.n	80040b8 <HAL_GPIO_Init+0x204>
 80040a6:	2307      	movs	r3, #7
 80040a8:	e006      	b.n	80040b8 <HAL_GPIO_Init+0x204>
 80040aa:	2303      	movs	r3, #3
 80040ac:	e004      	b.n	80040b8 <HAL_GPIO_Init+0x204>
 80040ae:	2302      	movs	r3, #2
 80040b0:	e002      	b.n	80040b8 <HAL_GPIO_Init+0x204>
 80040b2:	2301      	movs	r3, #1
 80040b4:	e000      	b.n	80040b8 <HAL_GPIO_Init+0x204>
 80040b6:	2300      	movs	r3, #0
 80040b8:	69fa      	ldr	r2, [r7, #28]
 80040ba:	f002 0203 	and.w	r2, r2, #3
 80040be:	0092      	lsls	r2, r2, #2
 80040c0:	4093      	lsls	r3, r2
 80040c2:	69ba      	ldr	r2, [r7, #24]
 80040c4:	4313      	orrs	r3, r2
 80040c6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80040c8:	4935      	ldr	r1, [pc, #212]	; (80041a0 <HAL_GPIO_Init+0x2ec>)
 80040ca:	69fb      	ldr	r3, [r7, #28]
 80040cc:	089b      	lsrs	r3, r3, #2
 80040ce:	3302      	adds	r3, #2
 80040d0:	69ba      	ldr	r2, [r7, #24]
 80040d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80040d6:	4b38      	ldr	r3, [pc, #224]	; (80041b8 <HAL_GPIO_Init+0x304>)
 80040d8:	689b      	ldr	r3, [r3, #8]
 80040da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040dc:	693b      	ldr	r3, [r7, #16]
 80040de:	43db      	mvns	r3, r3
 80040e0:	69ba      	ldr	r2, [r7, #24]
 80040e2:	4013      	ands	r3, r2
 80040e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	685b      	ldr	r3, [r3, #4]
 80040ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d003      	beq.n	80040fa <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80040f2:	69ba      	ldr	r2, [r7, #24]
 80040f4:	693b      	ldr	r3, [r7, #16]
 80040f6:	4313      	orrs	r3, r2
 80040f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80040fa:	4a2f      	ldr	r2, [pc, #188]	; (80041b8 <HAL_GPIO_Init+0x304>)
 80040fc:	69bb      	ldr	r3, [r7, #24]
 80040fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004100:	4b2d      	ldr	r3, [pc, #180]	; (80041b8 <HAL_GPIO_Init+0x304>)
 8004102:	68db      	ldr	r3, [r3, #12]
 8004104:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004106:	693b      	ldr	r3, [r7, #16]
 8004108:	43db      	mvns	r3, r3
 800410a:	69ba      	ldr	r2, [r7, #24]
 800410c:	4013      	ands	r3, r2
 800410e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	685b      	ldr	r3, [r3, #4]
 8004114:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004118:	2b00      	cmp	r3, #0
 800411a:	d003      	beq.n	8004124 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800411c:	69ba      	ldr	r2, [r7, #24]
 800411e:	693b      	ldr	r3, [r7, #16]
 8004120:	4313      	orrs	r3, r2
 8004122:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004124:	4a24      	ldr	r2, [pc, #144]	; (80041b8 <HAL_GPIO_Init+0x304>)
 8004126:	69bb      	ldr	r3, [r7, #24]
 8004128:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800412a:	4b23      	ldr	r3, [pc, #140]	; (80041b8 <HAL_GPIO_Init+0x304>)
 800412c:	685b      	ldr	r3, [r3, #4]
 800412e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004130:	693b      	ldr	r3, [r7, #16]
 8004132:	43db      	mvns	r3, r3
 8004134:	69ba      	ldr	r2, [r7, #24]
 8004136:	4013      	ands	r3, r2
 8004138:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	685b      	ldr	r3, [r3, #4]
 800413e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004142:	2b00      	cmp	r3, #0
 8004144:	d003      	beq.n	800414e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8004146:	69ba      	ldr	r2, [r7, #24]
 8004148:	693b      	ldr	r3, [r7, #16]
 800414a:	4313      	orrs	r3, r2
 800414c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800414e:	4a1a      	ldr	r2, [pc, #104]	; (80041b8 <HAL_GPIO_Init+0x304>)
 8004150:	69bb      	ldr	r3, [r7, #24]
 8004152:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004154:	4b18      	ldr	r3, [pc, #96]	; (80041b8 <HAL_GPIO_Init+0x304>)
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800415a:	693b      	ldr	r3, [r7, #16]
 800415c:	43db      	mvns	r3, r3
 800415e:	69ba      	ldr	r2, [r7, #24]
 8004160:	4013      	ands	r3, r2
 8004162:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	685b      	ldr	r3, [r3, #4]
 8004168:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800416c:	2b00      	cmp	r3, #0
 800416e:	d003      	beq.n	8004178 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004170:	69ba      	ldr	r2, [r7, #24]
 8004172:	693b      	ldr	r3, [r7, #16]
 8004174:	4313      	orrs	r3, r2
 8004176:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004178:	4a0f      	ldr	r2, [pc, #60]	; (80041b8 <HAL_GPIO_Init+0x304>)
 800417a:	69bb      	ldr	r3, [r7, #24]
 800417c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800417e:	69fb      	ldr	r3, [r7, #28]
 8004180:	3301      	adds	r3, #1
 8004182:	61fb      	str	r3, [r7, #28]
 8004184:	69fb      	ldr	r3, [r7, #28]
 8004186:	2b0f      	cmp	r3, #15
 8004188:	f67f aea2 	bls.w	8003ed0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800418c:	bf00      	nop
 800418e:	bf00      	nop
 8004190:	3724      	adds	r7, #36	; 0x24
 8004192:	46bd      	mov	sp, r7
 8004194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004198:	4770      	bx	lr
 800419a:	bf00      	nop
 800419c:	40023800 	.word	0x40023800
 80041a0:	40013800 	.word	0x40013800
 80041a4:	40020000 	.word	0x40020000
 80041a8:	40020400 	.word	0x40020400
 80041ac:	40020800 	.word	0x40020800
 80041b0:	40020c00 	.word	0x40020c00
 80041b4:	40021000 	.word	0x40021000
 80041b8:	40013c00 	.word	0x40013c00

080041bc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80041bc:	b480      	push	{r7}
 80041be:	b085      	sub	sp, #20
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
 80041c4:	460b      	mov	r3, r1
 80041c6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	691a      	ldr	r2, [r3, #16]
 80041cc:	887b      	ldrh	r3, [r7, #2]
 80041ce:	4013      	ands	r3, r2
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d002      	beq.n	80041da <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80041d4:	2301      	movs	r3, #1
 80041d6:	73fb      	strb	r3, [r7, #15]
 80041d8:	e001      	b.n	80041de <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80041da:	2300      	movs	r3, #0
 80041dc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80041de:	7bfb      	ldrb	r3, [r7, #15]
}
 80041e0:	4618      	mov	r0, r3
 80041e2:	3714      	adds	r7, #20
 80041e4:	46bd      	mov	sp, r7
 80041e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ea:	4770      	bx	lr

080041ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80041ec:	b480      	push	{r7}
 80041ee:	b083      	sub	sp, #12
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
 80041f4:	460b      	mov	r3, r1
 80041f6:	807b      	strh	r3, [r7, #2]
 80041f8:	4613      	mov	r3, r2
 80041fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80041fc:	787b      	ldrb	r3, [r7, #1]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d003      	beq.n	800420a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004202:	887a      	ldrh	r2, [r7, #2]
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004208:	e003      	b.n	8004212 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800420a:	887b      	ldrh	r3, [r7, #2]
 800420c:	041a      	lsls	r2, r3, #16
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	619a      	str	r2, [r3, #24]
}
 8004212:	bf00      	nop
 8004214:	370c      	adds	r7, #12
 8004216:	46bd      	mov	sp, r7
 8004218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421c:	4770      	bx	lr

0800421e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800421e:	b480      	push	{r7}
 8004220:	b085      	sub	sp, #20
 8004222:	af00      	add	r7, sp, #0
 8004224:	6078      	str	r0, [r7, #4]
 8004226:	460b      	mov	r3, r1
 8004228:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	695b      	ldr	r3, [r3, #20]
 800422e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004230:	887a      	ldrh	r2, [r7, #2]
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	4013      	ands	r3, r2
 8004236:	041a      	lsls	r2, r3, #16
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	43d9      	mvns	r1, r3
 800423c:	887b      	ldrh	r3, [r7, #2]
 800423e:	400b      	ands	r3, r1
 8004240:	431a      	orrs	r2, r3
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	619a      	str	r2, [r3, #24]
}
 8004246:	bf00      	nop
 8004248:	3714      	adds	r7, #20
 800424a:	46bd      	mov	sp, r7
 800424c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004250:	4770      	bx	lr

08004252 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004252:	b580      	push	{r7, lr}
 8004254:	b086      	sub	sp, #24
 8004256:	af02      	add	r7, sp, #8
 8004258:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d101      	bne.n	8004264 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004260:	2301      	movs	r3, #1
 8004262:	e101      	b.n	8004468 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 8004270:	b2db      	uxtb	r3, r3
 8004272:	2b00      	cmp	r3, #0
 8004274:	d106      	bne.n	8004284 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2200      	movs	r2, #0
 800427a:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800427e:	6878      	ldr	r0, [r7, #4]
 8004280:	f00b faaa 	bl	800f7d8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2203      	movs	r2, #3
 8004288:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800428c:	68bb      	ldr	r3, [r7, #8]
 800428e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004292:	d102      	bne.n	800429a <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2200      	movs	r2, #0
 8004298:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	4618      	mov	r0, r3
 80042a0:	f004 fa95 	bl	80087ce <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6818      	ldr	r0, [r3, #0]
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	7c1a      	ldrb	r2, [r3, #16]
 80042ac:	f88d 2000 	strb.w	r2, [sp]
 80042b0:	3304      	adds	r3, #4
 80042b2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80042b4:	f004 f974 	bl	80085a0 <USB_CoreInit>
 80042b8:	4603      	mov	r3, r0
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d005      	beq.n	80042ca <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	2202      	movs	r2, #2
 80042c2:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 80042c6:	2301      	movs	r3, #1
 80042c8:	e0ce      	b.n	8004468 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	2100      	movs	r1, #0
 80042d0:	4618      	mov	r0, r3
 80042d2:	f004 fa8d 	bl	80087f0 <USB_SetCurrentMode>
 80042d6:	4603      	mov	r3, r0
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d005      	beq.n	80042e8 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2202      	movs	r2, #2
 80042e0:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 80042e4:	2301      	movs	r3, #1
 80042e6:	e0bf      	b.n	8004468 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80042e8:	2300      	movs	r3, #0
 80042ea:	73fb      	strb	r3, [r7, #15]
 80042ec:	e04a      	b.n	8004384 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80042ee:	7bfa      	ldrb	r2, [r7, #15]
 80042f0:	6879      	ldr	r1, [r7, #4]
 80042f2:	4613      	mov	r3, r2
 80042f4:	00db      	lsls	r3, r3, #3
 80042f6:	4413      	add	r3, r2
 80042f8:	009b      	lsls	r3, r3, #2
 80042fa:	440b      	add	r3, r1
 80042fc:	3315      	adds	r3, #21
 80042fe:	2201      	movs	r2, #1
 8004300:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004302:	7bfa      	ldrb	r2, [r7, #15]
 8004304:	6879      	ldr	r1, [r7, #4]
 8004306:	4613      	mov	r3, r2
 8004308:	00db      	lsls	r3, r3, #3
 800430a:	4413      	add	r3, r2
 800430c:	009b      	lsls	r3, r3, #2
 800430e:	440b      	add	r3, r1
 8004310:	3314      	adds	r3, #20
 8004312:	7bfa      	ldrb	r2, [r7, #15]
 8004314:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004316:	7bfa      	ldrb	r2, [r7, #15]
 8004318:	7bfb      	ldrb	r3, [r7, #15]
 800431a:	b298      	uxth	r0, r3
 800431c:	6879      	ldr	r1, [r7, #4]
 800431e:	4613      	mov	r3, r2
 8004320:	00db      	lsls	r3, r3, #3
 8004322:	4413      	add	r3, r2
 8004324:	009b      	lsls	r3, r3, #2
 8004326:	440b      	add	r3, r1
 8004328:	332e      	adds	r3, #46	; 0x2e
 800432a:	4602      	mov	r2, r0
 800432c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800432e:	7bfa      	ldrb	r2, [r7, #15]
 8004330:	6879      	ldr	r1, [r7, #4]
 8004332:	4613      	mov	r3, r2
 8004334:	00db      	lsls	r3, r3, #3
 8004336:	4413      	add	r3, r2
 8004338:	009b      	lsls	r3, r3, #2
 800433a:	440b      	add	r3, r1
 800433c:	3318      	adds	r3, #24
 800433e:	2200      	movs	r2, #0
 8004340:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004342:	7bfa      	ldrb	r2, [r7, #15]
 8004344:	6879      	ldr	r1, [r7, #4]
 8004346:	4613      	mov	r3, r2
 8004348:	00db      	lsls	r3, r3, #3
 800434a:	4413      	add	r3, r2
 800434c:	009b      	lsls	r3, r3, #2
 800434e:	440b      	add	r3, r1
 8004350:	331c      	adds	r3, #28
 8004352:	2200      	movs	r2, #0
 8004354:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004356:	7bfa      	ldrb	r2, [r7, #15]
 8004358:	6879      	ldr	r1, [r7, #4]
 800435a:	4613      	mov	r3, r2
 800435c:	00db      	lsls	r3, r3, #3
 800435e:	4413      	add	r3, r2
 8004360:	009b      	lsls	r3, r3, #2
 8004362:	440b      	add	r3, r1
 8004364:	3320      	adds	r3, #32
 8004366:	2200      	movs	r2, #0
 8004368:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800436a:	7bfa      	ldrb	r2, [r7, #15]
 800436c:	6879      	ldr	r1, [r7, #4]
 800436e:	4613      	mov	r3, r2
 8004370:	00db      	lsls	r3, r3, #3
 8004372:	4413      	add	r3, r2
 8004374:	009b      	lsls	r3, r3, #2
 8004376:	440b      	add	r3, r1
 8004378:	3324      	adds	r3, #36	; 0x24
 800437a:	2200      	movs	r2, #0
 800437c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800437e:	7bfb      	ldrb	r3, [r7, #15]
 8004380:	3301      	adds	r3, #1
 8004382:	73fb      	strb	r3, [r7, #15]
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	791b      	ldrb	r3, [r3, #4]
 8004388:	7bfa      	ldrb	r2, [r7, #15]
 800438a:	429a      	cmp	r2, r3
 800438c:	d3af      	bcc.n	80042ee <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800438e:	2300      	movs	r3, #0
 8004390:	73fb      	strb	r3, [r7, #15]
 8004392:	e044      	b.n	800441e <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004394:	7bfa      	ldrb	r2, [r7, #15]
 8004396:	6879      	ldr	r1, [r7, #4]
 8004398:	4613      	mov	r3, r2
 800439a:	00db      	lsls	r3, r3, #3
 800439c:	4413      	add	r3, r2
 800439e:	009b      	lsls	r3, r3, #2
 80043a0:	440b      	add	r3, r1
 80043a2:	f203 2355 	addw	r3, r3, #597	; 0x255
 80043a6:	2200      	movs	r2, #0
 80043a8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80043aa:	7bfa      	ldrb	r2, [r7, #15]
 80043ac:	6879      	ldr	r1, [r7, #4]
 80043ae:	4613      	mov	r3, r2
 80043b0:	00db      	lsls	r3, r3, #3
 80043b2:	4413      	add	r3, r2
 80043b4:	009b      	lsls	r3, r3, #2
 80043b6:	440b      	add	r3, r1
 80043b8:	f503 7315 	add.w	r3, r3, #596	; 0x254
 80043bc:	7bfa      	ldrb	r2, [r7, #15]
 80043be:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80043c0:	7bfa      	ldrb	r2, [r7, #15]
 80043c2:	6879      	ldr	r1, [r7, #4]
 80043c4:	4613      	mov	r3, r2
 80043c6:	00db      	lsls	r3, r3, #3
 80043c8:	4413      	add	r3, r2
 80043ca:	009b      	lsls	r3, r3, #2
 80043cc:	440b      	add	r3, r1
 80043ce:	f503 7316 	add.w	r3, r3, #600	; 0x258
 80043d2:	2200      	movs	r2, #0
 80043d4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80043d6:	7bfa      	ldrb	r2, [r7, #15]
 80043d8:	6879      	ldr	r1, [r7, #4]
 80043da:	4613      	mov	r3, r2
 80043dc:	00db      	lsls	r3, r3, #3
 80043de:	4413      	add	r3, r2
 80043e0:	009b      	lsls	r3, r3, #2
 80043e2:	440b      	add	r3, r1
 80043e4:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 80043e8:	2200      	movs	r2, #0
 80043ea:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80043ec:	7bfa      	ldrb	r2, [r7, #15]
 80043ee:	6879      	ldr	r1, [r7, #4]
 80043f0:	4613      	mov	r3, r2
 80043f2:	00db      	lsls	r3, r3, #3
 80043f4:	4413      	add	r3, r2
 80043f6:	009b      	lsls	r3, r3, #2
 80043f8:	440b      	add	r3, r1
 80043fa:	f503 7318 	add.w	r3, r3, #608	; 0x260
 80043fe:	2200      	movs	r2, #0
 8004400:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004402:	7bfa      	ldrb	r2, [r7, #15]
 8004404:	6879      	ldr	r1, [r7, #4]
 8004406:	4613      	mov	r3, r2
 8004408:	00db      	lsls	r3, r3, #3
 800440a:	4413      	add	r3, r2
 800440c:	009b      	lsls	r3, r3, #2
 800440e:	440b      	add	r3, r1
 8004410:	f503 7319 	add.w	r3, r3, #612	; 0x264
 8004414:	2200      	movs	r2, #0
 8004416:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004418:	7bfb      	ldrb	r3, [r7, #15]
 800441a:	3301      	adds	r3, #1
 800441c:	73fb      	strb	r3, [r7, #15]
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	791b      	ldrb	r3, [r3, #4]
 8004422:	7bfa      	ldrb	r2, [r7, #15]
 8004424:	429a      	cmp	r2, r3
 8004426:	d3b5      	bcc.n	8004394 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6818      	ldr	r0, [r3, #0]
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	7c1a      	ldrb	r2, [r3, #16]
 8004430:	f88d 2000 	strb.w	r2, [sp]
 8004434:	3304      	adds	r3, #4
 8004436:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004438:	f004 fa26 	bl	8008888 <USB_DevInit>
 800443c:	4603      	mov	r3, r0
 800443e:	2b00      	cmp	r3, #0
 8004440:	d005      	beq.n	800444e <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2202      	movs	r2, #2
 8004446:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 800444a:	2301      	movs	r3, #1
 800444c:	e00c      	b.n	8004468 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2200      	movs	r2, #0
 8004452:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2201      	movs	r2, #1
 8004458:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	4618      	mov	r0, r3
 8004462:	f005 fa6a 	bl	800993a <USB_DevDisconnect>

  return HAL_OK;
 8004466:	2300      	movs	r3, #0
}
 8004468:	4618      	mov	r0, r3
 800446a:	3710      	adds	r7, #16
 800446c:	46bd      	mov	sp, r7
 800446e:	bd80      	pop	{r7, pc}

08004470 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004470:	b580      	push	{r7, lr}
 8004472:	b084      	sub	sp, #16
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8004484:	2b01      	cmp	r3, #1
 8004486:	d101      	bne.n	800448c <HAL_PCD_Start+0x1c>
 8004488:	2302      	movs	r3, #2
 800448a:	e022      	b.n	80044d2 <HAL_PCD_Start+0x62>
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2201      	movs	r2, #1
 8004490:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	68db      	ldr	r3, [r3, #12]
 8004498:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800449c:	2b00      	cmp	r3, #0
 800449e:	d009      	beq.n	80044b4 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80044a4:	2b01      	cmp	r3, #1
 80044a6:	d105      	bne.n	80044b4 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044ac:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4618      	mov	r0, r3
 80044ba:	f004 f977 	bl	80087ac <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4618      	mov	r0, r3
 80044c4:	f005 fa18 	bl	80098f8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2200      	movs	r2, #0
 80044cc:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 80044d0:	2300      	movs	r3, #0
}
 80044d2:	4618      	mov	r0, r3
 80044d4:	3710      	adds	r7, #16
 80044d6:	46bd      	mov	sp, r7
 80044d8:	bd80      	pop	{r7, pc}

080044da <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80044da:	b590      	push	{r4, r7, lr}
 80044dc:	b08d      	sub	sp, #52	; 0x34
 80044de:	af00      	add	r7, sp, #0
 80044e0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044e8:	6a3b      	ldr	r3, [r7, #32]
 80044ea:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	4618      	mov	r0, r3
 80044f2:	f005 fad6 	bl	8009aa2 <USB_GetMode>
 80044f6:	4603      	mov	r3, r0
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	f040 848c 	bne.w	8004e16 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	4618      	mov	r0, r3
 8004504:	f005 fa3a 	bl	800997c <USB_ReadInterrupts>
 8004508:	4603      	mov	r3, r0
 800450a:	2b00      	cmp	r3, #0
 800450c:	f000 8482 	beq.w	8004e14 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8004510:	69fb      	ldr	r3, [r7, #28]
 8004512:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004516:	689b      	ldr	r3, [r3, #8]
 8004518:	0a1b      	lsrs	r3, r3, #8
 800451a:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	f8c3 24d4 	str.w	r2, [r3, #1236]	; 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4618      	mov	r0, r3
 800452a:	f005 fa27 	bl	800997c <USB_ReadInterrupts>
 800452e:	4603      	mov	r3, r0
 8004530:	f003 0302 	and.w	r3, r3, #2
 8004534:	2b02      	cmp	r3, #2
 8004536:	d107      	bne.n	8004548 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	695a      	ldr	r2, [r3, #20]
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f002 0202 	and.w	r2, r2, #2
 8004546:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	4618      	mov	r0, r3
 800454e:	f005 fa15 	bl	800997c <USB_ReadInterrupts>
 8004552:	4603      	mov	r3, r0
 8004554:	f003 0310 	and.w	r3, r3, #16
 8004558:	2b10      	cmp	r3, #16
 800455a:	d161      	bne.n	8004620 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	699a      	ldr	r2, [r3, #24]
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f022 0210 	bic.w	r2, r2, #16
 800456a:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800456c:	6a3b      	ldr	r3, [r7, #32]
 800456e:	6a1b      	ldr	r3, [r3, #32]
 8004570:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8004572:	69bb      	ldr	r3, [r7, #24]
 8004574:	f003 020f 	and.w	r2, r3, #15
 8004578:	4613      	mov	r3, r2
 800457a:	00db      	lsls	r3, r3, #3
 800457c:	4413      	add	r3, r2
 800457e:	009b      	lsls	r3, r3, #2
 8004580:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8004584:	687a      	ldr	r2, [r7, #4]
 8004586:	4413      	add	r3, r2
 8004588:	3304      	adds	r3, #4
 800458a:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800458c:	69bb      	ldr	r3, [r7, #24]
 800458e:	0c5b      	lsrs	r3, r3, #17
 8004590:	f003 030f 	and.w	r3, r3, #15
 8004594:	2b02      	cmp	r3, #2
 8004596:	d124      	bne.n	80045e2 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8004598:	69ba      	ldr	r2, [r7, #24]
 800459a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800459e:	4013      	ands	r3, r2
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d035      	beq.n	8004610 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80045a4:	697b      	ldr	r3, [r7, #20]
 80045a6:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80045a8:	69bb      	ldr	r3, [r7, #24]
 80045aa:	091b      	lsrs	r3, r3, #4
 80045ac:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80045ae:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80045b2:	b29b      	uxth	r3, r3
 80045b4:	461a      	mov	r2, r3
 80045b6:	6a38      	ldr	r0, [r7, #32]
 80045b8:	f005 f84c 	bl	8009654 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80045bc:	697b      	ldr	r3, [r7, #20]
 80045be:	68da      	ldr	r2, [r3, #12]
 80045c0:	69bb      	ldr	r3, [r7, #24]
 80045c2:	091b      	lsrs	r3, r3, #4
 80045c4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80045c8:	441a      	add	r2, r3
 80045ca:	697b      	ldr	r3, [r7, #20]
 80045cc:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80045ce:	697b      	ldr	r3, [r7, #20]
 80045d0:	695a      	ldr	r2, [r3, #20]
 80045d2:	69bb      	ldr	r3, [r7, #24]
 80045d4:	091b      	lsrs	r3, r3, #4
 80045d6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80045da:	441a      	add	r2, r3
 80045dc:	697b      	ldr	r3, [r7, #20]
 80045de:	615a      	str	r2, [r3, #20]
 80045e0:	e016      	b.n	8004610 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80045e2:	69bb      	ldr	r3, [r7, #24]
 80045e4:	0c5b      	lsrs	r3, r3, #17
 80045e6:	f003 030f 	and.w	r3, r3, #15
 80045ea:	2b06      	cmp	r3, #6
 80045ec:	d110      	bne.n	8004610 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 80045f4:	2208      	movs	r2, #8
 80045f6:	4619      	mov	r1, r3
 80045f8:	6a38      	ldr	r0, [r7, #32]
 80045fa:	f005 f82b 	bl	8009654 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80045fe:	697b      	ldr	r3, [r7, #20]
 8004600:	695a      	ldr	r2, [r3, #20]
 8004602:	69bb      	ldr	r3, [r7, #24]
 8004604:	091b      	lsrs	r3, r3, #4
 8004606:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800460a:	441a      	add	r2, r3
 800460c:	697b      	ldr	r3, [r7, #20]
 800460e:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	699a      	ldr	r2, [r3, #24]
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f042 0210 	orr.w	r2, r2, #16
 800461e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	4618      	mov	r0, r3
 8004626:	f005 f9a9 	bl	800997c <USB_ReadInterrupts>
 800462a:	4603      	mov	r3, r0
 800462c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004630:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004634:	f040 80a7 	bne.w	8004786 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8004638:	2300      	movs	r3, #0
 800463a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	4618      	mov	r0, r3
 8004642:	f005 f9ae 	bl	80099a2 <USB_ReadDevAllOutEpInterrupt>
 8004646:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8004648:	e099      	b.n	800477e <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800464a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800464c:	f003 0301 	and.w	r3, r3, #1
 8004650:	2b00      	cmp	r3, #0
 8004652:	f000 808e 	beq.w	8004772 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800465c:	b2d2      	uxtb	r2, r2
 800465e:	4611      	mov	r1, r2
 8004660:	4618      	mov	r0, r3
 8004662:	f005 f9d2 	bl	8009a0a <USB_ReadDevOutEPInterrupt>
 8004666:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8004668:	693b      	ldr	r3, [r7, #16]
 800466a:	f003 0301 	and.w	r3, r3, #1
 800466e:	2b00      	cmp	r3, #0
 8004670:	d00c      	beq.n	800468c <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8004672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004674:	015a      	lsls	r2, r3, #5
 8004676:	69fb      	ldr	r3, [r7, #28]
 8004678:	4413      	add	r3, r2
 800467a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800467e:	461a      	mov	r2, r3
 8004680:	2301      	movs	r3, #1
 8004682:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8004684:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004686:	6878      	ldr	r0, [r7, #4]
 8004688:	f000 fea2 	bl	80053d0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800468c:	693b      	ldr	r3, [r7, #16]
 800468e:	f003 0308 	and.w	r3, r3, #8
 8004692:	2b00      	cmp	r3, #0
 8004694:	d00c      	beq.n	80046b0 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8004696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004698:	015a      	lsls	r2, r3, #5
 800469a:	69fb      	ldr	r3, [r7, #28]
 800469c:	4413      	add	r3, r2
 800469e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046a2:	461a      	mov	r2, r3
 80046a4:	2308      	movs	r3, #8
 80046a6:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80046a8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80046aa:	6878      	ldr	r0, [r7, #4]
 80046ac:	f000 ff78 	bl	80055a0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80046b0:	693b      	ldr	r3, [r7, #16]
 80046b2:	f003 0310 	and.w	r3, r3, #16
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d008      	beq.n	80046cc <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80046ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046bc:	015a      	lsls	r2, r3, #5
 80046be:	69fb      	ldr	r3, [r7, #28]
 80046c0:	4413      	add	r3, r2
 80046c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046c6:	461a      	mov	r2, r3
 80046c8:	2310      	movs	r3, #16
 80046ca:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80046cc:	693b      	ldr	r3, [r7, #16]
 80046ce:	f003 0302 	and.w	r3, r3, #2
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d030      	beq.n	8004738 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80046d6:	6a3b      	ldr	r3, [r7, #32]
 80046d8:	695b      	ldr	r3, [r3, #20]
 80046da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046de:	2b80      	cmp	r3, #128	; 0x80
 80046e0:	d109      	bne.n	80046f6 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80046e2:	69fb      	ldr	r3, [r7, #28]
 80046e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046e8:	685b      	ldr	r3, [r3, #4]
 80046ea:	69fa      	ldr	r2, [r7, #28]
 80046ec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80046f0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80046f4:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80046f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046f8:	4613      	mov	r3, r2
 80046fa:	00db      	lsls	r3, r3, #3
 80046fc:	4413      	add	r3, r2
 80046fe:	009b      	lsls	r3, r3, #2
 8004700:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8004704:	687a      	ldr	r2, [r7, #4]
 8004706:	4413      	add	r3, r2
 8004708:	3304      	adds	r3, #4
 800470a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800470c:	697b      	ldr	r3, [r7, #20]
 800470e:	78db      	ldrb	r3, [r3, #3]
 8004710:	2b01      	cmp	r3, #1
 8004712:	d108      	bne.n	8004726 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8004714:	697b      	ldr	r3, [r7, #20]
 8004716:	2200      	movs	r2, #0
 8004718:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800471a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800471c:	b2db      	uxtb	r3, r3
 800471e:	4619      	mov	r1, r3
 8004720:	6878      	ldr	r0, [r7, #4]
 8004722:	f00b f955 	bl	800f9d0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8004726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004728:	015a      	lsls	r2, r3, #5
 800472a:	69fb      	ldr	r3, [r7, #28]
 800472c:	4413      	add	r3, r2
 800472e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004732:	461a      	mov	r2, r3
 8004734:	2302      	movs	r3, #2
 8004736:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004738:	693b      	ldr	r3, [r7, #16]
 800473a:	f003 0320 	and.w	r3, r3, #32
 800473e:	2b00      	cmp	r3, #0
 8004740:	d008      	beq.n	8004754 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004744:	015a      	lsls	r2, r3, #5
 8004746:	69fb      	ldr	r3, [r7, #28]
 8004748:	4413      	add	r3, r2
 800474a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800474e:	461a      	mov	r2, r3
 8004750:	2320      	movs	r3, #32
 8004752:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8004754:	693b      	ldr	r3, [r7, #16]
 8004756:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800475a:	2b00      	cmp	r3, #0
 800475c:	d009      	beq.n	8004772 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800475e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004760:	015a      	lsls	r2, r3, #5
 8004762:	69fb      	ldr	r3, [r7, #28]
 8004764:	4413      	add	r3, r2
 8004766:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800476a:	461a      	mov	r2, r3
 800476c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004770:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8004772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004774:	3301      	adds	r3, #1
 8004776:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004778:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800477a:	085b      	lsrs	r3, r3, #1
 800477c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800477e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004780:	2b00      	cmp	r3, #0
 8004782:	f47f af62 	bne.w	800464a <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	4618      	mov	r0, r3
 800478c:	f005 f8f6 	bl	800997c <USB_ReadInterrupts>
 8004790:	4603      	mov	r3, r0
 8004792:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004796:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800479a:	f040 80db 	bne.w	8004954 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	4618      	mov	r0, r3
 80047a4:	f005 f917 	bl	80099d6 <USB_ReadDevAllInEpInterrupt>
 80047a8:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80047aa:	2300      	movs	r3, #0
 80047ac:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80047ae:	e0cd      	b.n	800494c <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80047b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047b2:	f003 0301 	and.w	r3, r3, #1
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	f000 80c2 	beq.w	8004940 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047c2:	b2d2      	uxtb	r2, r2
 80047c4:	4611      	mov	r1, r2
 80047c6:	4618      	mov	r0, r3
 80047c8:	f005 f93d 	bl	8009a46 <USB_ReadDevInEPInterrupt>
 80047cc:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80047ce:	693b      	ldr	r3, [r7, #16]
 80047d0:	f003 0301 	and.w	r3, r3, #1
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d057      	beq.n	8004888 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80047d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047da:	f003 030f 	and.w	r3, r3, #15
 80047de:	2201      	movs	r2, #1
 80047e0:	fa02 f303 	lsl.w	r3, r2, r3
 80047e4:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80047e6:	69fb      	ldr	r3, [r7, #28]
 80047e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	43db      	mvns	r3, r3
 80047f2:	69f9      	ldr	r1, [r7, #28]
 80047f4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80047f8:	4013      	ands	r3, r2
 80047fa:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80047fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047fe:	015a      	lsls	r2, r3, #5
 8004800:	69fb      	ldr	r3, [r7, #28]
 8004802:	4413      	add	r3, r2
 8004804:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004808:	461a      	mov	r2, r3
 800480a:	2301      	movs	r3, #1
 800480c:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	799b      	ldrb	r3, [r3, #6]
 8004812:	2b01      	cmp	r3, #1
 8004814:	d132      	bne.n	800487c <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8004816:	6879      	ldr	r1, [r7, #4]
 8004818:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800481a:	4613      	mov	r3, r2
 800481c:	00db      	lsls	r3, r3, #3
 800481e:	4413      	add	r3, r2
 8004820:	009b      	lsls	r3, r3, #2
 8004822:	440b      	add	r3, r1
 8004824:	3320      	adds	r3, #32
 8004826:	6819      	ldr	r1, [r3, #0]
 8004828:	6878      	ldr	r0, [r7, #4]
 800482a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800482c:	4613      	mov	r3, r2
 800482e:	00db      	lsls	r3, r3, #3
 8004830:	4413      	add	r3, r2
 8004832:	009b      	lsls	r3, r3, #2
 8004834:	4403      	add	r3, r0
 8004836:	331c      	adds	r3, #28
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	4419      	add	r1, r3
 800483c:	6878      	ldr	r0, [r7, #4]
 800483e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004840:	4613      	mov	r3, r2
 8004842:	00db      	lsls	r3, r3, #3
 8004844:	4413      	add	r3, r2
 8004846:	009b      	lsls	r3, r3, #2
 8004848:	4403      	add	r3, r0
 800484a:	3320      	adds	r3, #32
 800484c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800484e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004850:	2b00      	cmp	r3, #0
 8004852:	d113      	bne.n	800487c <HAL_PCD_IRQHandler+0x3a2>
 8004854:	6879      	ldr	r1, [r7, #4]
 8004856:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004858:	4613      	mov	r3, r2
 800485a:	00db      	lsls	r3, r3, #3
 800485c:	4413      	add	r3, r2
 800485e:	009b      	lsls	r3, r3, #2
 8004860:	440b      	add	r3, r1
 8004862:	3324      	adds	r3, #36	; 0x24
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d108      	bne.n	800487c <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6818      	ldr	r0, [r3, #0]
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8004874:	461a      	mov	r2, r3
 8004876:	2101      	movs	r1, #1
 8004878:	f005 f944 	bl	8009b04 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800487c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800487e:	b2db      	uxtb	r3, r3
 8004880:	4619      	mov	r1, r3
 8004882:	6878      	ldr	r0, [r7, #4]
 8004884:	f00b f829 	bl	800f8da <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8004888:	693b      	ldr	r3, [r7, #16]
 800488a:	f003 0308 	and.w	r3, r3, #8
 800488e:	2b00      	cmp	r3, #0
 8004890:	d008      	beq.n	80048a4 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8004892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004894:	015a      	lsls	r2, r3, #5
 8004896:	69fb      	ldr	r3, [r7, #28]
 8004898:	4413      	add	r3, r2
 800489a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800489e:	461a      	mov	r2, r3
 80048a0:	2308      	movs	r3, #8
 80048a2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80048a4:	693b      	ldr	r3, [r7, #16]
 80048a6:	f003 0310 	and.w	r3, r3, #16
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d008      	beq.n	80048c0 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80048ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048b0:	015a      	lsls	r2, r3, #5
 80048b2:	69fb      	ldr	r3, [r7, #28]
 80048b4:	4413      	add	r3, r2
 80048b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048ba:	461a      	mov	r2, r3
 80048bc:	2310      	movs	r3, #16
 80048be:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80048c0:	693b      	ldr	r3, [r7, #16]
 80048c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d008      	beq.n	80048dc <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80048ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048cc:	015a      	lsls	r2, r3, #5
 80048ce:	69fb      	ldr	r3, [r7, #28]
 80048d0:	4413      	add	r3, r2
 80048d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048d6:	461a      	mov	r2, r3
 80048d8:	2340      	movs	r3, #64	; 0x40
 80048da:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80048dc:	693b      	ldr	r3, [r7, #16]
 80048de:	f003 0302 	and.w	r3, r3, #2
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d023      	beq.n	800492e <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80048e6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80048e8:	6a38      	ldr	r0, [r7, #32]
 80048ea:	f004 f931 	bl	8008b50 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80048ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048f0:	4613      	mov	r3, r2
 80048f2:	00db      	lsls	r3, r3, #3
 80048f4:	4413      	add	r3, r2
 80048f6:	009b      	lsls	r3, r3, #2
 80048f8:	3310      	adds	r3, #16
 80048fa:	687a      	ldr	r2, [r7, #4]
 80048fc:	4413      	add	r3, r2
 80048fe:	3304      	adds	r3, #4
 8004900:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004902:	697b      	ldr	r3, [r7, #20]
 8004904:	78db      	ldrb	r3, [r3, #3]
 8004906:	2b01      	cmp	r3, #1
 8004908:	d108      	bne.n	800491c <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800490a:	697b      	ldr	r3, [r7, #20]
 800490c:	2200      	movs	r2, #0
 800490e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8004910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004912:	b2db      	uxtb	r3, r3
 8004914:	4619      	mov	r1, r3
 8004916:	6878      	ldr	r0, [r7, #4]
 8004918:	f00b f86c 	bl	800f9f4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800491c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800491e:	015a      	lsls	r2, r3, #5
 8004920:	69fb      	ldr	r3, [r7, #28]
 8004922:	4413      	add	r3, r2
 8004924:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004928:	461a      	mov	r2, r3
 800492a:	2302      	movs	r3, #2
 800492c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800492e:	693b      	ldr	r3, [r7, #16]
 8004930:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004934:	2b00      	cmp	r3, #0
 8004936:	d003      	beq.n	8004940 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8004938:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800493a:	6878      	ldr	r0, [r7, #4]
 800493c:	f000 fcbb 	bl	80052b6 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8004940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004942:	3301      	adds	r3, #1
 8004944:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004946:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004948:	085b      	lsrs	r3, r3, #1
 800494a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800494c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800494e:	2b00      	cmp	r3, #0
 8004950:	f47f af2e 	bne.w	80047b0 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	4618      	mov	r0, r3
 800495a:	f005 f80f 	bl	800997c <USB_ReadInterrupts>
 800495e:	4603      	mov	r3, r0
 8004960:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004964:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004968:	d122      	bne.n	80049b0 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800496a:	69fb      	ldr	r3, [r7, #28]
 800496c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004970:	685b      	ldr	r3, [r3, #4]
 8004972:	69fa      	ldr	r2, [r7, #28]
 8004974:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004978:	f023 0301 	bic.w	r3, r3, #1
 800497c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	f893 34cc 	ldrb.w	r3, [r3, #1228]	; 0x4cc
 8004984:	2b01      	cmp	r3, #1
 8004986:	d108      	bne.n	800499a <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2200      	movs	r2, #0
 800498c:	f883 24cc 	strb.w	r2, [r3, #1228]	; 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004990:	2100      	movs	r1, #0
 8004992:	6878      	ldr	r0, [r7, #4]
 8004994:	f000 fea2 	bl	80056dc <HAL_PCDEx_LPM_Callback>
 8004998:	e002      	b.n	80049a0 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800499a:	6878      	ldr	r0, [r7, #4]
 800499c:	f00b f80a 	bl	800f9b4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	695a      	ldr	r2, [r3, #20]
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80049ae:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	4618      	mov	r0, r3
 80049b6:	f004 ffe1 	bl	800997c <USB_ReadInterrupts>
 80049ba:	4603      	mov	r3, r0
 80049bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80049c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80049c4:	d112      	bne.n	80049ec <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80049c6:	69fb      	ldr	r3, [r7, #28]
 80049c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049cc:	689b      	ldr	r3, [r3, #8]
 80049ce:	f003 0301 	and.w	r3, r3, #1
 80049d2:	2b01      	cmp	r3, #1
 80049d4:	d102      	bne.n	80049dc <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80049d6:	6878      	ldr	r0, [r7, #4]
 80049d8:	f00a ffc6 	bl	800f968 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	695a      	ldr	r2, [r3, #20]
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80049ea:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	4618      	mov	r0, r3
 80049f2:	f004 ffc3 	bl	800997c <USB_ReadInterrupts>
 80049f6:	4603      	mov	r3, r0
 80049f8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80049fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a00:	f040 80b7 	bne.w	8004b72 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004a04:	69fb      	ldr	r3, [r7, #28]
 8004a06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a0a:	685b      	ldr	r3, [r3, #4]
 8004a0c:	69fa      	ldr	r2, [r7, #28]
 8004a0e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004a12:	f023 0301 	bic.w	r3, r3, #1
 8004a16:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	2110      	movs	r1, #16
 8004a1e:	4618      	mov	r0, r3
 8004a20:	f004 f896 	bl	8008b50 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004a24:	2300      	movs	r3, #0
 8004a26:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a28:	e046      	b.n	8004ab8 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8004a2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a2c:	015a      	lsls	r2, r3, #5
 8004a2e:	69fb      	ldr	r3, [r7, #28]
 8004a30:	4413      	add	r3, r2
 8004a32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a36:	461a      	mov	r2, r3
 8004a38:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004a3c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004a3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a40:	015a      	lsls	r2, r3, #5
 8004a42:	69fb      	ldr	r3, [r7, #28]
 8004a44:	4413      	add	r3, r2
 8004a46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a4e:	0151      	lsls	r1, r2, #5
 8004a50:	69fa      	ldr	r2, [r7, #28]
 8004a52:	440a      	add	r2, r1
 8004a54:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a58:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004a5c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8004a5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a60:	015a      	lsls	r2, r3, #5
 8004a62:	69fb      	ldr	r3, [r7, #28]
 8004a64:	4413      	add	r3, r2
 8004a66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a6a:	461a      	mov	r2, r3
 8004a6c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004a70:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004a72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a74:	015a      	lsls	r2, r3, #5
 8004a76:	69fb      	ldr	r3, [r7, #28]
 8004a78:	4413      	add	r3, r2
 8004a7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a82:	0151      	lsls	r1, r2, #5
 8004a84:	69fa      	ldr	r2, [r7, #28]
 8004a86:	440a      	add	r2, r1
 8004a88:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a8c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004a90:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004a92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a94:	015a      	lsls	r2, r3, #5
 8004a96:	69fb      	ldr	r3, [r7, #28]
 8004a98:	4413      	add	r3, r2
 8004a9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004aa2:	0151      	lsls	r1, r2, #5
 8004aa4:	69fa      	ldr	r2, [r7, #28]
 8004aa6:	440a      	add	r2, r1
 8004aa8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004aac:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004ab0:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004ab2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ab4:	3301      	adds	r3, #1
 8004ab6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	791b      	ldrb	r3, [r3, #4]
 8004abc:	461a      	mov	r2, r3
 8004abe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	d3b2      	bcc.n	8004a2a <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8004ac4:	69fb      	ldr	r3, [r7, #28]
 8004ac6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004aca:	69db      	ldr	r3, [r3, #28]
 8004acc:	69fa      	ldr	r2, [r7, #28]
 8004ace:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004ad2:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8004ad6:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	7bdb      	ldrb	r3, [r3, #15]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d016      	beq.n	8004b0e <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8004ae0:	69fb      	ldr	r3, [r7, #28]
 8004ae2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ae6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004aea:	69fa      	ldr	r2, [r7, #28]
 8004aec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004af0:	f043 030b 	orr.w	r3, r3, #11
 8004af4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8004af8:	69fb      	ldr	r3, [r7, #28]
 8004afa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004afe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b00:	69fa      	ldr	r2, [r7, #28]
 8004b02:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004b06:	f043 030b 	orr.w	r3, r3, #11
 8004b0a:	6453      	str	r3, [r2, #68]	; 0x44
 8004b0c:	e015      	b.n	8004b3a <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004b0e:	69fb      	ldr	r3, [r7, #28]
 8004b10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b14:	695b      	ldr	r3, [r3, #20]
 8004b16:	69fa      	ldr	r2, [r7, #28]
 8004b18:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004b1c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004b20:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8004b24:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8004b26:	69fb      	ldr	r3, [r7, #28]
 8004b28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b2c:	691b      	ldr	r3, [r3, #16]
 8004b2e:	69fa      	ldr	r2, [r7, #28]
 8004b30:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004b34:	f043 030b 	orr.w	r3, r3, #11
 8004b38:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8004b3a:	69fb      	ldr	r3, [r7, #28]
 8004b3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	69fa      	ldr	r2, [r7, #28]
 8004b44:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004b48:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004b4c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6818      	ldr	r0, [r3, #0]
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	f203 439c 	addw	r3, r3, #1180	; 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004b5c:	461a      	mov	r2, r3
 8004b5e:	f004 ffd1 	bl	8009b04 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	695a      	ldr	r2, [r3, #20]
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8004b70:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	4618      	mov	r0, r3
 8004b78:	f004 ff00 	bl	800997c <USB_ReadInterrupts>
 8004b7c:	4603      	mov	r3, r0
 8004b7e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004b82:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b86:	d123      	bne.n	8004bd0 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	f004 ff96 	bl	8009abe <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	4618      	mov	r0, r3
 8004b98:	f004 f853 	bl	8008c42 <USB_GetDevSpeed>
 8004b9c:	4603      	mov	r3, r0
 8004b9e:	461a      	mov	r2, r3
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681c      	ldr	r4, [r3, #0]
 8004ba8:	f001 f9c8 	bl	8005f3c <HAL_RCC_GetHCLKFreq>
 8004bac:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004bb2:	461a      	mov	r2, r3
 8004bb4:	4620      	mov	r0, r4
 8004bb6:	f003 fd57 	bl	8008668 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004bba:	6878      	ldr	r0, [r7, #4]
 8004bbc:	f00a feb5 	bl	800f92a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	695a      	ldr	r2, [r3, #20]
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8004bce:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	f004 fed1 	bl	800997c <USB_ReadInterrupts>
 8004bda:	4603      	mov	r3, r0
 8004bdc:	f003 0308 	and.w	r3, r3, #8
 8004be0:	2b08      	cmp	r3, #8
 8004be2:	d10a      	bne.n	8004bfa <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8004be4:	6878      	ldr	r0, [r7, #4]
 8004be6:	f00a fe92 	bl	800f90e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	695a      	ldr	r2, [r3, #20]
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f002 0208 	and.w	r2, r2, #8
 8004bf8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	4618      	mov	r0, r3
 8004c00:	f004 febc 	bl	800997c <USB_ReadInterrupts>
 8004c04:	4603      	mov	r3, r0
 8004c06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c0a:	2b80      	cmp	r3, #128	; 0x80
 8004c0c:	d123      	bne.n	8004c56 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8004c0e:	6a3b      	ldr	r3, [r7, #32]
 8004c10:	699b      	ldr	r3, [r3, #24]
 8004c12:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004c16:	6a3b      	ldr	r3, [r7, #32]
 8004c18:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	627b      	str	r3, [r7, #36]	; 0x24
 8004c1e:	e014      	b.n	8004c4a <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8004c20:	6879      	ldr	r1, [r7, #4]
 8004c22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c24:	4613      	mov	r3, r2
 8004c26:	00db      	lsls	r3, r3, #3
 8004c28:	4413      	add	r3, r2
 8004c2a:	009b      	lsls	r3, r3, #2
 8004c2c:	440b      	add	r3, r1
 8004c2e:	f203 2357 	addw	r3, r3, #599	; 0x257
 8004c32:	781b      	ldrb	r3, [r3, #0]
 8004c34:	2b01      	cmp	r3, #1
 8004c36:	d105      	bne.n	8004c44 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8004c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c3a:	b2db      	uxtb	r3, r3
 8004c3c:	4619      	mov	r1, r3
 8004c3e:	6878      	ldr	r0, [r7, #4]
 8004c40:	f000 fb08 	bl	8005254 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c46:	3301      	adds	r3, #1
 8004c48:	627b      	str	r3, [r7, #36]	; 0x24
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	791b      	ldrb	r3, [r3, #4]
 8004c4e:	461a      	mov	r2, r3
 8004c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c52:	4293      	cmp	r3, r2
 8004c54:	d3e4      	bcc.n	8004c20 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	f004 fe8e 	bl	800997c <USB_ReadInterrupts>
 8004c60:	4603      	mov	r3, r0
 8004c62:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004c66:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c6a:	d13c      	bne.n	8004ce6 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004c6c:	2301      	movs	r3, #1
 8004c6e:	627b      	str	r3, [r7, #36]	; 0x24
 8004c70:	e02b      	b.n	8004cca <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8004c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c74:	015a      	lsls	r2, r3, #5
 8004c76:	69fb      	ldr	r3, [r7, #28]
 8004c78:	4413      	add	r3, r2
 8004c7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004c82:	6879      	ldr	r1, [r7, #4]
 8004c84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c86:	4613      	mov	r3, r2
 8004c88:	00db      	lsls	r3, r3, #3
 8004c8a:	4413      	add	r3, r2
 8004c8c:	009b      	lsls	r3, r3, #2
 8004c8e:	440b      	add	r3, r1
 8004c90:	3318      	adds	r3, #24
 8004c92:	781b      	ldrb	r3, [r3, #0]
 8004c94:	2b01      	cmp	r3, #1
 8004c96:	d115      	bne.n	8004cc4 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8004c98:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	da12      	bge.n	8004cc4 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8004c9e:	6879      	ldr	r1, [r7, #4]
 8004ca0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ca2:	4613      	mov	r3, r2
 8004ca4:	00db      	lsls	r3, r3, #3
 8004ca6:	4413      	add	r3, r2
 8004ca8:	009b      	lsls	r3, r3, #2
 8004caa:	440b      	add	r3, r1
 8004cac:	3317      	adds	r3, #23
 8004cae:	2201      	movs	r2, #1
 8004cb0:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8004cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cb4:	b2db      	uxtb	r3, r3
 8004cb6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004cba:	b2db      	uxtb	r3, r3
 8004cbc:	4619      	mov	r1, r3
 8004cbe:	6878      	ldr	r0, [r7, #4]
 8004cc0:	f000 fac8 	bl	8005254 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cc6:	3301      	adds	r3, #1
 8004cc8:	627b      	str	r3, [r7, #36]	; 0x24
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	791b      	ldrb	r3, [r3, #4]
 8004cce:	461a      	mov	r2, r3
 8004cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	d3cd      	bcc.n	8004c72 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	695a      	ldr	r2, [r3, #20]
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8004ce4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	4618      	mov	r0, r3
 8004cec:	f004 fe46 	bl	800997c <USB_ReadInterrupts>
 8004cf0:	4603      	mov	r3, r0
 8004cf2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004cf6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004cfa:	d156      	bne.n	8004daa <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004cfc:	2301      	movs	r3, #1
 8004cfe:	627b      	str	r3, [r7, #36]	; 0x24
 8004d00:	e045      	b.n	8004d8e <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8004d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d04:	015a      	lsls	r2, r3, #5
 8004d06:	69fb      	ldr	r3, [r7, #28]
 8004d08:	4413      	add	r3, r2
 8004d0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004d12:	6879      	ldr	r1, [r7, #4]
 8004d14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d16:	4613      	mov	r3, r2
 8004d18:	00db      	lsls	r3, r3, #3
 8004d1a:	4413      	add	r3, r2
 8004d1c:	009b      	lsls	r3, r3, #2
 8004d1e:	440b      	add	r3, r1
 8004d20:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8004d24:	781b      	ldrb	r3, [r3, #0]
 8004d26:	2b01      	cmp	r3, #1
 8004d28:	d12e      	bne.n	8004d88 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004d2a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	da2b      	bge.n	8004d88 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8004d30:	69bb      	ldr	r3, [r7, #24]
 8004d32:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 8004d3c:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004d40:	429a      	cmp	r2, r3
 8004d42:	d121      	bne.n	8004d88 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8004d44:	6879      	ldr	r1, [r7, #4]
 8004d46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d48:	4613      	mov	r3, r2
 8004d4a:	00db      	lsls	r3, r3, #3
 8004d4c:	4413      	add	r3, r2
 8004d4e:	009b      	lsls	r3, r3, #2
 8004d50:	440b      	add	r3, r1
 8004d52:	f203 2357 	addw	r3, r3, #599	; 0x257
 8004d56:	2201      	movs	r2, #1
 8004d58:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8004d5a:	6a3b      	ldr	r3, [r7, #32]
 8004d5c:	699b      	ldr	r3, [r3, #24]
 8004d5e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004d62:	6a3b      	ldr	r3, [r7, #32]
 8004d64:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8004d66:	6a3b      	ldr	r3, [r7, #32]
 8004d68:	695b      	ldr	r3, [r3, #20]
 8004d6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d10a      	bne.n	8004d88 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8004d72:	69fb      	ldr	r3, [r7, #28]
 8004d74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d78:	685b      	ldr	r3, [r3, #4]
 8004d7a:	69fa      	ldr	r2, [r7, #28]
 8004d7c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004d80:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004d84:	6053      	str	r3, [r2, #4]
            break;
 8004d86:	e008      	b.n	8004d9a <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d8a:	3301      	adds	r3, #1
 8004d8c:	627b      	str	r3, [r7, #36]	; 0x24
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	791b      	ldrb	r3, [r3, #4]
 8004d92:	461a      	mov	r2, r3
 8004d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d3b3      	bcc.n	8004d02 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	695a      	ldr	r2, [r3, #20]
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8004da8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	4618      	mov	r0, r3
 8004db0:	f004 fde4 	bl	800997c <USB_ReadInterrupts>
 8004db4:	4603      	mov	r3, r0
 8004db6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004dba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004dbe:	d10a      	bne.n	8004dd6 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004dc0:	6878      	ldr	r0, [r7, #4]
 8004dc2:	f00a fe29 	bl	800fa18 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	695a      	ldr	r2, [r3, #20]
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004dd4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	4618      	mov	r0, r3
 8004ddc:	f004 fdce 	bl	800997c <USB_ReadInterrupts>
 8004de0:	4603      	mov	r3, r0
 8004de2:	f003 0304 	and.w	r3, r3, #4
 8004de6:	2b04      	cmp	r3, #4
 8004de8:	d115      	bne.n	8004e16 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	685b      	ldr	r3, [r3, #4]
 8004df0:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004df2:	69bb      	ldr	r3, [r7, #24]
 8004df4:	f003 0304 	and.w	r3, r3, #4
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d002      	beq.n	8004e02 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004dfc:	6878      	ldr	r0, [r7, #4]
 8004dfe:	f00a fe19 	bl	800fa34 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	6859      	ldr	r1, [r3, #4]
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	69ba      	ldr	r2, [r7, #24]
 8004e0e:	430a      	orrs	r2, r1
 8004e10:	605a      	str	r2, [r3, #4]
 8004e12:	e000      	b.n	8004e16 <HAL_PCD_IRQHandler+0x93c>
      return;
 8004e14:	bf00      	nop
    }
  }
}
 8004e16:	3734      	adds	r7, #52	; 0x34
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	bd90      	pop	{r4, r7, pc}

08004e1c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b082      	sub	sp, #8
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
 8004e24:	460b      	mov	r3, r1
 8004e26:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8004e2e:	2b01      	cmp	r3, #1
 8004e30:	d101      	bne.n	8004e36 <HAL_PCD_SetAddress+0x1a>
 8004e32:	2302      	movs	r3, #2
 8004e34:	e012      	b.n	8004e5c <HAL_PCD_SetAddress+0x40>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2201      	movs	r2, #1
 8004e3a:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  hpcd->USB_Address = address;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	78fa      	ldrb	r2, [r7, #3]
 8004e42:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	78fa      	ldrb	r2, [r7, #3]
 8004e4a:	4611      	mov	r1, r2
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	f004 fd2d 	bl	80098ac <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2200      	movs	r2, #0
 8004e56:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8004e5a:	2300      	movs	r3, #0
}
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	3708      	adds	r7, #8
 8004e60:	46bd      	mov	sp, r7
 8004e62:	bd80      	pop	{r7, pc}

08004e64 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b084      	sub	sp, #16
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
 8004e6c:	4608      	mov	r0, r1
 8004e6e:	4611      	mov	r1, r2
 8004e70:	461a      	mov	r2, r3
 8004e72:	4603      	mov	r3, r0
 8004e74:	70fb      	strb	r3, [r7, #3]
 8004e76:	460b      	mov	r3, r1
 8004e78:	803b      	strh	r3, [r7, #0]
 8004e7a:	4613      	mov	r3, r2
 8004e7c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004e7e:	2300      	movs	r3, #0
 8004e80:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004e82:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	da0f      	bge.n	8004eaa <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004e8a:	78fb      	ldrb	r3, [r7, #3]
 8004e8c:	f003 020f 	and.w	r2, r3, #15
 8004e90:	4613      	mov	r3, r2
 8004e92:	00db      	lsls	r3, r3, #3
 8004e94:	4413      	add	r3, r2
 8004e96:	009b      	lsls	r3, r3, #2
 8004e98:	3310      	adds	r3, #16
 8004e9a:	687a      	ldr	r2, [r7, #4]
 8004e9c:	4413      	add	r3, r2
 8004e9e:	3304      	adds	r3, #4
 8004ea0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	2201      	movs	r2, #1
 8004ea6:	705a      	strb	r2, [r3, #1]
 8004ea8:	e00f      	b.n	8004eca <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004eaa:	78fb      	ldrb	r3, [r7, #3]
 8004eac:	f003 020f 	and.w	r2, r3, #15
 8004eb0:	4613      	mov	r3, r2
 8004eb2:	00db      	lsls	r3, r3, #3
 8004eb4:	4413      	add	r3, r2
 8004eb6:	009b      	lsls	r3, r3, #2
 8004eb8:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8004ebc:	687a      	ldr	r2, [r7, #4]
 8004ebe:	4413      	add	r3, r2
 8004ec0:	3304      	adds	r3, #4
 8004ec2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004eca:	78fb      	ldrb	r3, [r7, #3]
 8004ecc:	f003 030f 	and.w	r3, r3, #15
 8004ed0:	b2da      	uxtb	r2, r3
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004ed6:	883a      	ldrh	r2, [r7, #0]
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	78ba      	ldrb	r2, [r7, #2]
 8004ee0:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	785b      	ldrb	r3, [r3, #1]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d004      	beq.n	8004ef4 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	781b      	ldrb	r3, [r3, #0]
 8004eee:	b29a      	uxth	r2, r3
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004ef4:	78bb      	ldrb	r3, [r7, #2]
 8004ef6:	2b02      	cmp	r3, #2
 8004ef8:	d102      	bne.n	8004f00 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	2200      	movs	r2, #0
 8004efe:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8004f06:	2b01      	cmp	r3, #1
 8004f08:	d101      	bne.n	8004f0e <HAL_PCD_EP_Open+0xaa>
 8004f0a:	2302      	movs	r3, #2
 8004f0c:	e00e      	b.n	8004f2c <HAL_PCD_EP_Open+0xc8>
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2201      	movs	r2, #1
 8004f12:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	68f9      	ldr	r1, [r7, #12]
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	f003 feb5 	bl	8008c8c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2200      	movs	r2, #0
 8004f26:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return ret;
 8004f2a:	7afb      	ldrb	r3, [r7, #11]
}
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	3710      	adds	r7, #16
 8004f30:	46bd      	mov	sp, r7
 8004f32:	bd80      	pop	{r7, pc}

08004f34 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b084      	sub	sp, #16
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
 8004f3c:	460b      	mov	r3, r1
 8004f3e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004f40:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	da0f      	bge.n	8004f68 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004f48:	78fb      	ldrb	r3, [r7, #3]
 8004f4a:	f003 020f 	and.w	r2, r3, #15
 8004f4e:	4613      	mov	r3, r2
 8004f50:	00db      	lsls	r3, r3, #3
 8004f52:	4413      	add	r3, r2
 8004f54:	009b      	lsls	r3, r3, #2
 8004f56:	3310      	adds	r3, #16
 8004f58:	687a      	ldr	r2, [r7, #4]
 8004f5a:	4413      	add	r3, r2
 8004f5c:	3304      	adds	r3, #4
 8004f5e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	2201      	movs	r2, #1
 8004f64:	705a      	strb	r2, [r3, #1]
 8004f66:	e00f      	b.n	8004f88 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004f68:	78fb      	ldrb	r3, [r7, #3]
 8004f6a:	f003 020f 	and.w	r2, r3, #15
 8004f6e:	4613      	mov	r3, r2
 8004f70:	00db      	lsls	r3, r3, #3
 8004f72:	4413      	add	r3, r2
 8004f74:	009b      	lsls	r3, r3, #2
 8004f76:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8004f7a:	687a      	ldr	r2, [r7, #4]
 8004f7c:	4413      	add	r3, r2
 8004f7e:	3304      	adds	r3, #4
 8004f80:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	2200      	movs	r2, #0
 8004f86:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8004f88:	78fb      	ldrb	r3, [r7, #3]
 8004f8a:	f003 030f 	and.w	r3, r3, #15
 8004f8e:	b2da      	uxtb	r2, r3
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8004f9a:	2b01      	cmp	r3, #1
 8004f9c:	d101      	bne.n	8004fa2 <HAL_PCD_EP_Close+0x6e>
 8004f9e:	2302      	movs	r3, #2
 8004fa0:	e00e      	b.n	8004fc0 <HAL_PCD_EP_Close+0x8c>
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	2201      	movs	r2, #1
 8004fa6:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	68f9      	ldr	r1, [r7, #12]
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	f003 fef3 	bl	8008d9c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2200      	movs	r2, #0
 8004fba:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  return HAL_OK;
 8004fbe:	2300      	movs	r3, #0
}
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	3710      	adds	r7, #16
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	bd80      	pop	{r7, pc}

08004fc8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b086      	sub	sp, #24
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	60f8      	str	r0, [r7, #12]
 8004fd0:	607a      	str	r2, [r7, #4]
 8004fd2:	603b      	str	r3, [r7, #0]
 8004fd4:	460b      	mov	r3, r1
 8004fd6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004fd8:	7afb      	ldrb	r3, [r7, #11]
 8004fda:	f003 020f 	and.w	r2, r3, #15
 8004fde:	4613      	mov	r3, r2
 8004fe0:	00db      	lsls	r3, r3, #3
 8004fe2:	4413      	add	r3, r2
 8004fe4:	009b      	lsls	r3, r3, #2
 8004fe6:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8004fea:	68fa      	ldr	r2, [r7, #12]
 8004fec:	4413      	add	r3, r2
 8004fee:	3304      	adds	r3, #4
 8004ff0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004ff2:	697b      	ldr	r3, [r7, #20]
 8004ff4:	687a      	ldr	r2, [r7, #4]
 8004ff6:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004ff8:	697b      	ldr	r3, [r7, #20]
 8004ffa:	683a      	ldr	r2, [r7, #0]
 8004ffc:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8004ffe:	697b      	ldr	r3, [r7, #20]
 8005000:	2200      	movs	r2, #0
 8005002:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8005004:	697b      	ldr	r3, [r7, #20]
 8005006:	2200      	movs	r2, #0
 8005008:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800500a:	7afb      	ldrb	r3, [r7, #11]
 800500c:	f003 030f 	and.w	r3, r3, #15
 8005010:	b2da      	uxtb	r2, r3
 8005012:	697b      	ldr	r3, [r7, #20]
 8005014:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	799b      	ldrb	r3, [r3, #6]
 800501a:	2b01      	cmp	r3, #1
 800501c:	d102      	bne.n	8005024 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800501e:	687a      	ldr	r2, [r7, #4]
 8005020:	697b      	ldr	r3, [r7, #20]
 8005022:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	6818      	ldr	r0, [r3, #0]
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	799b      	ldrb	r3, [r3, #6]
 800502c:	461a      	mov	r2, r3
 800502e:	6979      	ldr	r1, [r7, #20]
 8005030:	f003 ff90 	bl	8008f54 <USB_EPStartXfer>

  return HAL_OK;
 8005034:	2300      	movs	r3, #0
}
 8005036:	4618      	mov	r0, r3
 8005038:	3718      	adds	r7, #24
 800503a:	46bd      	mov	sp, r7
 800503c:	bd80      	pop	{r7, pc}

0800503e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800503e:	b480      	push	{r7}
 8005040:	b083      	sub	sp, #12
 8005042:	af00      	add	r7, sp, #0
 8005044:	6078      	str	r0, [r7, #4]
 8005046:	460b      	mov	r3, r1
 8005048:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800504a:	78fb      	ldrb	r3, [r7, #3]
 800504c:	f003 020f 	and.w	r2, r3, #15
 8005050:	6879      	ldr	r1, [r7, #4]
 8005052:	4613      	mov	r3, r2
 8005054:	00db      	lsls	r3, r3, #3
 8005056:	4413      	add	r3, r2
 8005058:	009b      	lsls	r3, r3, #2
 800505a:	440b      	add	r3, r1
 800505c:	f503 731a 	add.w	r3, r3, #616	; 0x268
 8005060:	681b      	ldr	r3, [r3, #0]
}
 8005062:	4618      	mov	r0, r3
 8005064:	370c      	adds	r7, #12
 8005066:	46bd      	mov	sp, r7
 8005068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506c:	4770      	bx	lr

0800506e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800506e:	b580      	push	{r7, lr}
 8005070:	b086      	sub	sp, #24
 8005072:	af00      	add	r7, sp, #0
 8005074:	60f8      	str	r0, [r7, #12]
 8005076:	607a      	str	r2, [r7, #4]
 8005078:	603b      	str	r3, [r7, #0]
 800507a:	460b      	mov	r3, r1
 800507c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800507e:	7afb      	ldrb	r3, [r7, #11]
 8005080:	f003 020f 	and.w	r2, r3, #15
 8005084:	4613      	mov	r3, r2
 8005086:	00db      	lsls	r3, r3, #3
 8005088:	4413      	add	r3, r2
 800508a:	009b      	lsls	r3, r3, #2
 800508c:	3310      	adds	r3, #16
 800508e:	68fa      	ldr	r2, [r7, #12]
 8005090:	4413      	add	r3, r2
 8005092:	3304      	adds	r3, #4
 8005094:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005096:	697b      	ldr	r3, [r7, #20]
 8005098:	687a      	ldr	r2, [r7, #4]
 800509a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800509c:	697b      	ldr	r3, [r7, #20]
 800509e:	683a      	ldr	r2, [r7, #0]
 80050a0:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80050a2:	697b      	ldr	r3, [r7, #20]
 80050a4:	2200      	movs	r2, #0
 80050a6:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80050a8:	697b      	ldr	r3, [r7, #20]
 80050aa:	2201      	movs	r2, #1
 80050ac:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80050ae:	7afb      	ldrb	r3, [r7, #11]
 80050b0:	f003 030f 	and.w	r3, r3, #15
 80050b4:	b2da      	uxtb	r2, r3
 80050b6:	697b      	ldr	r3, [r7, #20]
 80050b8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	799b      	ldrb	r3, [r3, #6]
 80050be:	2b01      	cmp	r3, #1
 80050c0:	d102      	bne.n	80050c8 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80050c2:	687a      	ldr	r2, [r7, #4]
 80050c4:	697b      	ldr	r3, [r7, #20]
 80050c6:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	6818      	ldr	r0, [r3, #0]
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	799b      	ldrb	r3, [r3, #6]
 80050d0:	461a      	mov	r2, r3
 80050d2:	6979      	ldr	r1, [r7, #20]
 80050d4:	f003 ff3e 	bl	8008f54 <USB_EPStartXfer>

  return HAL_OK;
 80050d8:	2300      	movs	r3, #0
}
 80050da:	4618      	mov	r0, r3
 80050dc:	3718      	adds	r7, #24
 80050de:	46bd      	mov	sp, r7
 80050e0:	bd80      	pop	{r7, pc}

080050e2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80050e2:	b580      	push	{r7, lr}
 80050e4:	b084      	sub	sp, #16
 80050e6:	af00      	add	r7, sp, #0
 80050e8:	6078      	str	r0, [r7, #4]
 80050ea:	460b      	mov	r3, r1
 80050ec:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80050ee:	78fb      	ldrb	r3, [r7, #3]
 80050f0:	f003 030f 	and.w	r3, r3, #15
 80050f4:	687a      	ldr	r2, [r7, #4]
 80050f6:	7912      	ldrb	r2, [r2, #4]
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d901      	bls.n	8005100 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80050fc:	2301      	movs	r3, #1
 80050fe:	e04f      	b.n	80051a0 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005100:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005104:	2b00      	cmp	r3, #0
 8005106:	da0f      	bge.n	8005128 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005108:	78fb      	ldrb	r3, [r7, #3]
 800510a:	f003 020f 	and.w	r2, r3, #15
 800510e:	4613      	mov	r3, r2
 8005110:	00db      	lsls	r3, r3, #3
 8005112:	4413      	add	r3, r2
 8005114:	009b      	lsls	r3, r3, #2
 8005116:	3310      	adds	r3, #16
 8005118:	687a      	ldr	r2, [r7, #4]
 800511a:	4413      	add	r3, r2
 800511c:	3304      	adds	r3, #4
 800511e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	2201      	movs	r2, #1
 8005124:	705a      	strb	r2, [r3, #1]
 8005126:	e00d      	b.n	8005144 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005128:	78fa      	ldrb	r2, [r7, #3]
 800512a:	4613      	mov	r3, r2
 800512c:	00db      	lsls	r3, r3, #3
 800512e:	4413      	add	r3, r2
 8005130:	009b      	lsls	r3, r3, #2
 8005132:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8005136:	687a      	ldr	r2, [r7, #4]
 8005138:	4413      	add	r3, r2
 800513a:	3304      	adds	r3, #4
 800513c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	2200      	movs	r2, #0
 8005142:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	2201      	movs	r2, #1
 8005148:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800514a:	78fb      	ldrb	r3, [r7, #3]
 800514c:	f003 030f 	and.w	r3, r3, #15
 8005150:	b2da      	uxtb	r2, r3
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 800515c:	2b01      	cmp	r3, #1
 800515e:	d101      	bne.n	8005164 <HAL_PCD_EP_SetStall+0x82>
 8005160:	2302      	movs	r3, #2
 8005162:	e01d      	b.n	80051a0 <HAL_PCD_EP_SetStall+0xbe>
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2201      	movs	r2, #1
 8005168:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	68f9      	ldr	r1, [r7, #12]
 8005172:	4618      	mov	r0, r3
 8005174:	f004 fac6 	bl	8009704 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005178:	78fb      	ldrb	r3, [r7, #3]
 800517a:	f003 030f 	and.w	r3, r3, #15
 800517e:	2b00      	cmp	r3, #0
 8005180:	d109      	bne.n	8005196 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6818      	ldr	r0, [r3, #0]
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	7999      	ldrb	r1, [r3, #6]
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8005190:	461a      	mov	r2, r3
 8005192:	f004 fcb7 	bl	8009b04 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2200      	movs	r2, #0
 800519a:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 800519e:	2300      	movs	r3, #0
}
 80051a0:	4618      	mov	r0, r3
 80051a2:	3710      	adds	r7, #16
 80051a4:	46bd      	mov	sp, r7
 80051a6:	bd80      	pop	{r7, pc}

080051a8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80051a8:	b580      	push	{r7, lr}
 80051aa:	b084      	sub	sp, #16
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
 80051b0:	460b      	mov	r3, r1
 80051b2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80051b4:	78fb      	ldrb	r3, [r7, #3]
 80051b6:	f003 030f 	and.w	r3, r3, #15
 80051ba:	687a      	ldr	r2, [r7, #4]
 80051bc:	7912      	ldrb	r2, [r2, #4]
 80051be:	4293      	cmp	r3, r2
 80051c0:	d901      	bls.n	80051c6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80051c2:	2301      	movs	r3, #1
 80051c4:	e042      	b.n	800524c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80051c6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	da0f      	bge.n	80051ee <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80051ce:	78fb      	ldrb	r3, [r7, #3]
 80051d0:	f003 020f 	and.w	r2, r3, #15
 80051d4:	4613      	mov	r3, r2
 80051d6:	00db      	lsls	r3, r3, #3
 80051d8:	4413      	add	r3, r2
 80051da:	009b      	lsls	r3, r3, #2
 80051dc:	3310      	adds	r3, #16
 80051de:	687a      	ldr	r2, [r7, #4]
 80051e0:	4413      	add	r3, r2
 80051e2:	3304      	adds	r3, #4
 80051e4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	2201      	movs	r2, #1
 80051ea:	705a      	strb	r2, [r3, #1]
 80051ec:	e00f      	b.n	800520e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80051ee:	78fb      	ldrb	r3, [r7, #3]
 80051f0:	f003 020f 	and.w	r2, r3, #15
 80051f4:	4613      	mov	r3, r2
 80051f6:	00db      	lsls	r3, r3, #3
 80051f8:	4413      	add	r3, r2
 80051fa:	009b      	lsls	r3, r3, #2
 80051fc:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8005200:	687a      	ldr	r2, [r7, #4]
 8005202:	4413      	add	r3, r2
 8005204:	3304      	adds	r3, #4
 8005206:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	2200      	movs	r2, #0
 800520c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	2200      	movs	r2, #0
 8005212:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005214:	78fb      	ldrb	r3, [r7, #3]
 8005216:	f003 030f 	and.w	r3, r3, #15
 800521a:	b2da      	uxtb	r2, r3
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8005226:	2b01      	cmp	r3, #1
 8005228:	d101      	bne.n	800522e <HAL_PCD_EP_ClrStall+0x86>
 800522a:	2302      	movs	r3, #2
 800522c:	e00e      	b.n	800524c <HAL_PCD_EP_ClrStall+0xa4>
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2201      	movs	r2, #1
 8005232:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	68f9      	ldr	r1, [r7, #12]
 800523c:	4618      	mov	r0, r3
 800523e:	f004 facf 	bl	80097e0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	2200      	movs	r2, #0
 8005246:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 800524a:	2300      	movs	r3, #0
}
 800524c:	4618      	mov	r0, r3
 800524e:	3710      	adds	r7, #16
 8005250:	46bd      	mov	sp, r7
 8005252:	bd80      	pop	{r7, pc}

08005254 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005254:	b580      	push	{r7, lr}
 8005256:	b084      	sub	sp, #16
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
 800525c:	460b      	mov	r3, r1
 800525e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8005260:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005264:	2b00      	cmp	r3, #0
 8005266:	da0c      	bge.n	8005282 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005268:	78fb      	ldrb	r3, [r7, #3]
 800526a:	f003 020f 	and.w	r2, r3, #15
 800526e:	4613      	mov	r3, r2
 8005270:	00db      	lsls	r3, r3, #3
 8005272:	4413      	add	r3, r2
 8005274:	009b      	lsls	r3, r3, #2
 8005276:	3310      	adds	r3, #16
 8005278:	687a      	ldr	r2, [r7, #4]
 800527a:	4413      	add	r3, r2
 800527c:	3304      	adds	r3, #4
 800527e:	60fb      	str	r3, [r7, #12]
 8005280:	e00c      	b.n	800529c <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005282:	78fb      	ldrb	r3, [r7, #3]
 8005284:	f003 020f 	and.w	r2, r3, #15
 8005288:	4613      	mov	r3, r2
 800528a:	00db      	lsls	r3, r3, #3
 800528c:	4413      	add	r3, r2
 800528e:	009b      	lsls	r3, r3, #2
 8005290:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8005294:	687a      	ldr	r2, [r7, #4]
 8005296:	4413      	add	r3, r2
 8005298:	3304      	adds	r3, #4
 800529a:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	68f9      	ldr	r1, [r7, #12]
 80052a2:	4618      	mov	r0, r3
 80052a4:	f004 f8ee 	bl	8009484 <USB_EPStopXfer>
 80052a8:	4603      	mov	r3, r0
 80052aa:	72fb      	strb	r3, [r7, #11]

  return ret;
 80052ac:	7afb      	ldrb	r3, [r7, #11]
}
 80052ae:	4618      	mov	r0, r3
 80052b0:	3710      	adds	r7, #16
 80052b2:	46bd      	mov	sp, r7
 80052b4:	bd80      	pop	{r7, pc}

080052b6 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80052b6:	b580      	push	{r7, lr}
 80052b8:	b08a      	sub	sp, #40	; 0x28
 80052ba:	af02      	add	r7, sp, #8
 80052bc:	6078      	str	r0, [r7, #4]
 80052be:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052c6:	697b      	ldr	r3, [r7, #20]
 80052c8:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80052ca:	683a      	ldr	r2, [r7, #0]
 80052cc:	4613      	mov	r3, r2
 80052ce:	00db      	lsls	r3, r3, #3
 80052d0:	4413      	add	r3, r2
 80052d2:	009b      	lsls	r3, r3, #2
 80052d4:	3310      	adds	r3, #16
 80052d6:	687a      	ldr	r2, [r7, #4]
 80052d8:	4413      	add	r3, r2
 80052da:	3304      	adds	r3, #4
 80052dc:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	695a      	ldr	r2, [r3, #20]
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	691b      	ldr	r3, [r3, #16]
 80052e6:	429a      	cmp	r2, r3
 80052e8:	d901      	bls.n	80052ee <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80052ea:	2301      	movs	r3, #1
 80052ec:	e06b      	b.n	80053c6 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	691a      	ldr	r2, [r3, #16]
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	695b      	ldr	r3, [r3, #20]
 80052f6:	1ad3      	subs	r3, r2, r3
 80052f8:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	689b      	ldr	r3, [r3, #8]
 80052fe:	69fa      	ldr	r2, [r7, #28]
 8005300:	429a      	cmp	r2, r3
 8005302:	d902      	bls.n	800530a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	689b      	ldr	r3, [r3, #8]
 8005308:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800530a:	69fb      	ldr	r3, [r7, #28]
 800530c:	3303      	adds	r3, #3
 800530e:	089b      	lsrs	r3, r3, #2
 8005310:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005312:	e02a      	b.n	800536a <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	691a      	ldr	r2, [r3, #16]
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	695b      	ldr	r3, [r3, #20]
 800531c:	1ad3      	subs	r3, r2, r3
 800531e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	689b      	ldr	r3, [r3, #8]
 8005324:	69fa      	ldr	r2, [r7, #28]
 8005326:	429a      	cmp	r2, r3
 8005328:	d902      	bls.n	8005330 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	689b      	ldr	r3, [r3, #8]
 800532e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8005330:	69fb      	ldr	r3, [r7, #28]
 8005332:	3303      	adds	r3, #3
 8005334:	089b      	lsrs	r3, r3, #2
 8005336:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	68d9      	ldr	r1, [r3, #12]
 800533c:	683b      	ldr	r3, [r7, #0]
 800533e:	b2da      	uxtb	r2, r3
 8005340:	69fb      	ldr	r3, [r7, #28]
 8005342:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005348:	9300      	str	r3, [sp, #0]
 800534a:	4603      	mov	r3, r0
 800534c:	6978      	ldr	r0, [r7, #20]
 800534e:	f004 f943 	bl	80095d8 <USB_WritePacket>

    ep->xfer_buff  += len;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	68da      	ldr	r2, [r3, #12]
 8005356:	69fb      	ldr	r3, [r7, #28]
 8005358:	441a      	add	r2, r3
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	695a      	ldr	r2, [r3, #20]
 8005362:	69fb      	ldr	r3, [r7, #28]
 8005364:	441a      	add	r2, r3
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	015a      	lsls	r2, r3, #5
 800536e:	693b      	ldr	r3, [r7, #16]
 8005370:	4413      	add	r3, r2
 8005372:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005376:	699b      	ldr	r3, [r3, #24]
 8005378:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800537a:	69ba      	ldr	r2, [r7, #24]
 800537c:	429a      	cmp	r2, r3
 800537e:	d809      	bhi.n	8005394 <PCD_WriteEmptyTxFifo+0xde>
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	695a      	ldr	r2, [r3, #20]
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005388:	429a      	cmp	r2, r3
 800538a:	d203      	bcs.n	8005394 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	691b      	ldr	r3, [r3, #16]
 8005390:	2b00      	cmp	r3, #0
 8005392:	d1bf      	bne.n	8005314 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	691a      	ldr	r2, [r3, #16]
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	695b      	ldr	r3, [r3, #20]
 800539c:	429a      	cmp	r2, r3
 800539e:	d811      	bhi.n	80053c4 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	f003 030f 	and.w	r3, r3, #15
 80053a6:	2201      	movs	r2, #1
 80053a8:	fa02 f303 	lsl.w	r3, r2, r3
 80053ac:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80053ae:	693b      	ldr	r3, [r7, #16]
 80053b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80053b6:	68bb      	ldr	r3, [r7, #8]
 80053b8:	43db      	mvns	r3, r3
 80053ba:	6939      	ldr	r1, [r7, #16]
 80053bc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80053c0:	4013      	ands	r3, r2
 80053c2:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80053c4:	2300      	movs	r3, #0
}
 80053c6:	4618      	mov	r0, r3
 80053c8:	3720      	adds	r7, #32
 80053ca:	46bd      	mov	sp, r7
 80053cc:	bd80      	pop	{r7, pc}
	...

080053d0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b088      	sub	sp, #32
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
 80053d8:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053e0:	69fb      	ldr	r3, [r7, #28]
 80053e2:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80053e4:	69fb      	ldr	r3, [r7, #28]
 80053e6:	333c      	adds	r3, #60	; 0x3c
 80053e8:	3304      	adds	r3, #4
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	015a      	lsls	r2, r3, #5
 80053f2:	69bb      	ldr	r3, [r7, #24]
 80053f4:	4413      	add	r3, r2
 80053f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053fa:	689b      	ldr	r3, [r3, #8]
 80053fc:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	799b      	ldrb	r3, [r3, #6]
 8005402:	2b01      	cmp	r3, #1
 8005404:	d17b      	bne.n	80054fe <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8005406:	693b      	ldr	r3, [r7, #16]
 8005408:	f003 0308 	and.w	r3, r3, #8
 800540c:	2b00      	cmp	r3, #0
 800540e:	d015      	beq.n	800543c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005410:	697b      	ldr	r3, [r7, #20]
 8005412:	4a61      	ldr	r2, [pc, #388]	; (8005598 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005414:	4293      	cmp	r3, r2
 8005416:	f240 80b9 	bls.w	800558c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800541a:	693b      	ldr	r3, [r7, #16]
 800541c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005420:	2b00      	cmp	r3, #0
 8005422:	f000 80b3 	beq.w	800558c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005426:	683b      	ldr	r3, [r7, #0]
 8005428:	015a      	lsls	r2, r3, #5
 800542a:	69bb      	ldr	r3, [r7, #24]
 800542c:	4413      	add	r3, r2
 800542e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005432:	461a      	mov	r2, r3
 8005434:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005438:	6093      	str	r3, [r2, #8]
 800543a:	e0a7      	b.n	800558c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800543c:	693b      	ldr	r3, [r7, #16]
 800543e:	f003 0320 	and.w	r3, r3, #32
 8005442:	2b00      	cmp	r3, #0
 8005444:	d009      	beq.n	800545a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	015a      	lsls	r2, r3, #5
 800544a:	69bb      	ldr	r3, [r7, #24]
 800544c:	4413      	add	r3, r2
 800544e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005452:	461a      	mov	r2, r3
 8005454:	2320      	movs	r3, #32
 8005456:	6093      	str	r3, [r2, #8]
 8005458:	e098      	b.n	800558c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800545a:	693b      	ldr	r3, [r7, #16]
 800545c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005460:	2b00      	cmp	r3, #0
 8005462:	f040 8093 	bne.w	800558c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005466:	697b      	ldr	r3, [r7, #20]
 8005468:	4a4b      	ldr	r2, [pc, #300]	; (8005598 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800546a:	4293      	cmp	r3, r2
 800546c:	d90f      	bls.n	800548e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800546e:	693b      	ldr	r3, [r7, #16]
 8005470:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005474:	2b00      	cmp	r3, #0
 8005476:	d00a      	beq.n	800548e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	015a      	lsls	r2, r3, #5
 800547c:	69bb      	ldr	r3, [r7, #24]
 800547e:	4413      	add	r3, r2
 8005480:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005484:	461a      	mov	r2, r3
 8005486:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800548a:	6093      	str	r3, [r2, #8]
 800548c:	e07e      	b.n	800558c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800548e:	683a      	ldr	r2, [r7, #0]
 8005490:	4613      	mov	r3, r2
 8005492:	00db      	lsls	r3, r3, #3
 8005494:	4413      	add	r3, r2
 8005496:	009b      	lsls	r3, r3, #2
 8005498:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800549c:	687a      	ldr	r2, [r7, #4]
 800549e:	4413      	add	r3, r2
 80054a0:	3304      	adds	r3, #4
 80054a2:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	6a1a      	ldr	r2, [r3, #32]
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	0159      	lsls	r1, r3, #5
 80054ac:	69bb      	ldr	r3, [r7, #24]
 80054ae:	440b      	add	r3, r1
 80054b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054b4:	691b      	ldr	r3, [r3, #16]
 80054b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80054ba:	1ad2      	subs	r2, r2, r3
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d114      	bne.n	80054f0 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	691b      	ldr	r3, [r3, #16]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d109      	bne.n	80054e2 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6818      	ldr	r0, [r3, #0]
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 80054d8:	461a      	mov	r2, r3
 80054da:	2101      	movs	r1, #1
 80054dc:	f004 fb12 	bl	8009b04 <USB_EP0_OutStart>
 80054e0:	e006      	b.n	80054f0 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	68da      	ldr	r2, [r3, #12]
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	695b      	ldr	r3, [r3, #20]
 80054ea:	441a      	add	r2, r3
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80054f0:	683b      	ldr	r3, [r7, #0]
 80054f2:	b2db      	uxtb	r3, r3
 80054f4:	4619      	mov	r1, r3
 80054f6:	6878      	ldr	r0, [r7, #4]
 80054f8:	f00a f9d4 	bl	800f8a4 <HAL_PCD_DataOutStageCallback>
 80054fc:	e046      	b.n	800558c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80054fe:	697b      	ldr	r3, [r7, #20]
 8005500:	4a26      	ldr	r2, [pc, #152]	; (800559c <PCD_EP_OutXfrComplete_int+0x1cc>)
 8005502:	4293      	cmp	r3, r2
 8005504:	d124      	bne.n	8005550 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8005506:	693b      	ldr	r3, [r7, #16]
 8005508:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800550c:	2b00      	cmp	r3, #0
 800550e:	d00a      	beq.n	8005526 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	015a      	lsls	r2, r3, #5
 8005514:	69bb      	ldr	r3, [r7, #24]
 8005516:	4413      	add	r3, r2
 8005518:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800551c:	461a      	mov	r2, r3
 800551e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005522:	6093      	str	r3, [r2, #8]
 8005524:	e032      	b.n	800558c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005526:	693b      	ldr	r3, [r7, #16]
 8005528:	f003 0320 	and.w	r3, r3, #32
 800552c:	2b00      	cmp	r3, #0
 800552e:	d008      	beq.n	8005542 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	015a      	lsls	r2, r3, #5
 8005534:	69bb      	ldr	r3, [r7, #24]
 8005536:	4413      	add	r3, r2
 8005538:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800553c:	461a      	mov	r2, r3
 800553e:	2320      	movs	r3, #32
 8005540:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	b2db      	uxtb	r3, r3
 8005546:	4619      	mov	r1, r3
 8005548:	6878      	ldr	r0, [r7, #4]
 800554a:	f00a f9ab 	bl	800f8a4 <HAL_PCD_DataOutStageCallback>
 800554e:	e01d      	b.n	800558c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	2b00      	cmp	r3, #0
 8005554:	d114      	bne.n	8005580 <PCD_EP_OutXfrComplete_int+0x1b0>
 8005556:	6879      	ldr	r1, [r7, #4]
 8005558:	683a      	ldr	r2, [r7, #0]
 800555a:	4613      	mov	r3, r2
 800555c:	00db      	lsls	r3, r3, #3
 800555e:	4413      	add	r3, r2
 8005560:	009b      	lsls	r3, r3, #2
 8005562:	440b      	add	r3, r1
 8005564:	f503 7319 	add.w	r3, r3, #612	; 0x264
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	2b00      	cmp	r3, #0
 800556c:	d108      	bne.n	8005580 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6818      	ldr	r0, [r3, #0]
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8005578:	461a      	mov	r2, r3
 800557a:	2100      	movs	r1, #0
 800557c:	f004 fac2 	bl	8009b04 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	b2db      	uxtb	r3, r3
 8005584:	4619      	mov	r1, r3
 8005586:	6878      	ldr	r0, [r7, #4]
 8005588:	f00a f98c 	bl	800f8a4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800558c:	2300      	movs	r3, #0
}
 800558e:	4618      	mov	r0, r3
 8005590:	3720      	adds	r7, #32
 8005592:	46bd      	mov	sp, r7
 8005594:	bd80      	pop	{r7, pc}
 8005596:	bf00      	nop
 8005598:	4f54300a 	.word	0x4f54300a
 800559c:	4f54310a 	.word	0x4f54310a

080055a0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80055a0:	b580      	push	{r7, lr}
 80055a2:	b086      	sub	sp, #24
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
 80055a8:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055b0:	697b      	ldr	r3, [r7, #20]
 80055b2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80055b4:	697b      	ldr	r3, [r7, #20]
 80055b6:	333c      	adds	r3, #60	; 0x3c
 80055b8:	3304      	adds	r3, #4
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	015a      	lsls	r2, r3, #5
 80055c2:	693b      	ldr	r3, [r7, #16]
 80055c4:	4413      	add	r3, r2
 80055c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055ca:	689b      	ldr	r3, [r3, #8]
 80055cc:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	4a15      	ldr	r2, [pc, #84]	; (8005628 <PCD_EP_OutSetupPacket_int+0x88>)
 80055d2:	4293      	cmp	r3, r2
 80055d4:	d90e      	bls.n	80055f4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80055d6:	68bb      	ldr	r3, [r7, #8]
 80055d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d009      	beq.n	80055f4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	015a      	lsls	r2, r3, #5
 80055e4:	693b      	ldr	r3, [r7, #16]
 80055e6:	4413      	add	r3, r2
 80055e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055ec:	461a      	mov	r2, r3
 80055ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80055f2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80055f4:	6878      	ldr	r0, [r7, #4]
 80055f6:	f00a f943 	bl	800f880 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	4a0a      	ldr	r2, [pc, #40]	; (8005628 <PCD_EP_OutSetupPacket_int+0x88>)
 80055fe:	4293      	cmp	r3, r2
 8005600:	d90c      	bls.n	800561c <PCD_EP_OutSetupPacket_int+0x7c>
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	799b      	ldrb	r3, [r3, #6]
 8005606:	2b01      	cmp	r3, #1
 8005608:	d108      	bne.n	800561c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6818      	ldr	r0, [r3, #0]
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8005614:	461a      	mov	r2, r3
 8005616:	2101      	movs	r1, #1
 8005618:	f004 fa74 	bl	8009b04 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800561c:	2300      	movs	r3, #0
}
 800561e:	4618      	mov	r0, r3
 8005620:	3718      	adds	r7, #24
 8005622:	46bd      	mov	sp, r7
 8005624:	bd80      	pop	{r7, pc}
 8005626:	bf00      	nop
 8005628:	4f54300a 	.word	0x4f54300a

0800562c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800562c:	b480      	push	{r7}
 800562e:	b085      	sub	sp, #20
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]
 8005634:	460b      	mov	r3, r1
 8005636:	70fb      	strb	r3, [r7, #3]
 8005638:	4613      	mov	r3, r2
 800563a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005642:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8005644:	78fb      	ldrb	r3, [r7, #3]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d107      	bne.n	800565a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800564a:	883b      	ldrh	r3, [r7, #0]
 800564c:	0419      	lsls	r1, r3, #16
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	68ba      	ldr	r2, [r7, #8]
 8005654:	430a      	orrs	r2, r1
 8005656:	629a      	str	r2, [r3, #40]	; 0x28
 8005658:	e028      	b.n	80056ac <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005660:	0c1b      	lsrs	r3, r3, #16
 8005662:	68ba      	ldr	r2, [r7, #8]
 8005664:	4413      	add	r3, r2
 8005666:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005668:	2300      	movs	r3, #0
 800566a:	73fb      	strb	r3, [r7, #15]
 800566c:	e00d      	b.n	800568a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681a      	ldr	r2, [r3, #0]
 8005672:	7bfb      	ldrb	r3, [r7, #15]
 8005674:	3340      	adds	r3, #64	; 0x40
 8005676:	009b      	lsls	r3, r3, #2
 8005678:	4413      	add	r3, r2
 800567a:	685b      	ldr	r3, [r3, #4]
 800567c:	0c1b      	lsrs	r3, r3, #16
 800567e:	68ba      	ldr	r2, [r7, #8]
 8005680:	4413      	add	r3, r2
 8005682:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005684:	7bfb      	ldrb	r3, [r7, #15]
 8005686:	3301      	adds	r3, #1
 8005688:	73fb      	strb	r3, [r7, #15]
 800568a:	7bfa      	ldrb	r2, [r7, #15]
 800568c:	78fb      	ldrb	r3, [r7, #3]
 800568e:	3b01      	subs	r3, #1
 8005690:	429a      	cmp	r2, r3
 8005692:	d3ec      	bcc.n	800566e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8005694:	883b      	ldrh	r3, [r7, #0]
 8005696:	0418      	lsls	r0, r3, #16
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	6819      	ldr	r1, [r3, #0]
 800569c:	78fb      	ldrb	r3, [r7, #3]
 800569e:	3b01      	subs	r3, #1
 80056a0:	68ba      	ldr	r2, [r7, #8]
 80056a2:	4302      	orrs	r2, r0
 80056a4:	3340      	adds	r3, #64	; 0x40
 80056a6:	009b      	lsls	r3, r3, #2
 80056a8:	440b      	add	r3, r1
 80056aa:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80056ac:	2300      	movs	r3, #0
}
 80056ae:	4618      	mov	r0, r3
 80056b0:	3714      	adds	r7, #20
 80056b2:	46bd      	mov	sp, r7
 80056b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b8:	4770      	bx	lr

080056ba <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80056ba:	b480      	push	{r7}
 80056bc:	b083      	sub	sp, #12
 80056be:	af00      	add	r7, sp, #0
 80056c0:	6078      	str	r0, [r7, #4]
 80056c2:	460b      	mov	r3, r1
 80056c4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	887a      	ldrh	r2, [r7, #2]
 80056cc:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80056ce:	2300      	movs	r3, #0
}
 80056d0:	4618      	mov	r0, r3
 80056d2:	370c      	adds	r7, #12
 80056d4:	46bd      	mov	sp, r7
 80056d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056da:	4770      	bx	lr

080056dc <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80056dc:	b480      	push	{r7}
 80056de:	b083      	sub	sp, #12
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
 80056e4:	460b      	mov	r3, r1
 80056e6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80056e8:	bf00      	nop
 80056ea:	370c      	adds	r7, #12
 80056ec:	46bd      	mov	sp, r7
 80056ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f2:	4770      	bx	lr

080056f4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80056f4:	b580      	push	{r7, lr}
 80056f6:	b086      	sub	sp, #24
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d101      	bne.n	8005706 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005702:	2301      	movs	r3, #1
 8005704:	e267      	b.n	8005bd6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f003 0301 	and.w	r3, r3, #1
 800570e:	2b00      	cmp	r3, #0
 8005710:	d075      	beq.n	80057fe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005712:	4b88      	ldr	r3, [pc, #544]	; (8005934 <HAL_RCC_OscConfig+0x240>)
 8005714:	689b      	ldr	r3, [r3, #8]
 8005716:	f003 030c 	and.w	r3, r3, #12
 800571a:	2b04      	cmp	r3, #4
 800571c:	d00c      	beq.n	8005738 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800571e:	4b85      	ldr	r3, [pc, #532]	; (8005934 <HAL_RCC_OscConfig+0x240>)
 8005720:	689b      	ldr	r3, [r3, #8]
 8005722:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005726:	2b08      	cmp	r3, #8
 8005728:	d112      	bne.n	8005750 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800572a:	4b82      	ldr	r3, [pc, #520]	; (8005934 <HAL_RCC_OscConfig+0x240>)
 800572c:	685b      	ldr	r3, [r3, #4]
 800572e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005732:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005736:	d10b      	bne.n	8005750 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005738:	4b7e      	ldr	r3, [pc, #504]	; (8005934 <HAL_RCC_OscConfig+0x240>)
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005740:	2b00      	cmp	r3, #0
 8005742:	d05b      	beq.n	80057fc <HAL_RCC_OscConfig+0x108>
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	685b      	ldr	r3, [r3, #4]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d157      	bne.n	80057fc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800574c:	2301      	movs	r3, #1
 800574e:	e242      	b.n	8005bd6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	685b      	ldr	r3, [r3, #4]
 8005754:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005758:	d106      	bne.n	8005768 <HAL_RCC_OscConfig+0x74>
 800575a:	4b76      	ldr	r3, [pc, #472]	; (8005934 <HAL_RCC_OscConfig+0x240>)
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	4a75      	ldr	r2, [pc, #468]	; (8005934 <HAL_RCC_OscConfig+0x240>)
 8005760:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005764:	6013      	str	r3, [r2, #0]
 8005766:	e01d      	b.n	80057a4 <HAL_RCC_OscConfig+0xb0>
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	685b      	ldr	r3, [r3, #4]
 800576c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005770:	d10c      	bne.n	800578c <HAL_RCC_OscConfig+0x98>
 8005772:	4b70      	ldr	r3, [pc, #448]	; (8005934 <HAL_RCC_OscConfig+0x240>)
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	4a6f      	ldr	r2, [pc, #444]	; (8005934 <HAL_RCC_OscConfig+0x240>)
 8005778:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800577c:	6013      	str	r3, [r2, #0]
 800577e:	4b6d      	ldr	r3, [pc, #436]	; (8005934 <HAL_RCC_OscConfig+0x240>)
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	4a6c      	ldr	r2, [pc, #432]	; (8005934 <HAL_RCC_OscConfig+0x240>)
 8005784:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005788:	6013      	str	r3, [r2, #0]
 800578a:	e00b      	b.n	80057a4 <HAL_RCC_OscConfig+0xb0>
 800578c:	4b69      	ldr	r3, [pc, #420]	; (8005934 <HAL_RCC_OscConfig+0x240>)
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	4a68      	ldr	r2, [pc, #416]	; (8005934 <HAL_RCC_OscConfig+0x240>)
 8005792:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005796:	6013      	str	r3, [r2, #0]
 8005798:	4b66      	ldr	r3, [pc, #408]	; (8005934 <HAL_RCC_OscConfig+0x240>)
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	4a65      	ldr	r2, [pc, #404]	; (8005934 <HAL_RCC_OscConfig+0x240>)
 800579e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80057a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	685b      	ldr	r3, [r3, #4]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d013      	beq.n	80057d4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057ac:	f7fd fea2 	bl	80034f4 <HAL_GetTick>
 80057b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80057b2:	e008      	b.n	80057c6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80057b4:	f7fd fe9e 	bl	80034f4 <HAL_GetTick>
 80057b8:	4602      	mov	r2, r0
 80057ba:	693b      	ldr	r3, [r7, #16]
 80057bc:	1ad3      	subs	r3, r2, r3
 80057be:	2b64      	cmp	r3, #100	; 0x64
 80057c0:	d901      	bls.n	80057c6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80057c2:	2303      	movs	r3, #3
 80057c4:	e207      	b.n	8005bd6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80057c6:	4b5b      	ldr	r3, [pc, #364]	; (8005934 <HAL_RCC_OscConfig+0x240>)
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d0f0      	beq.n	80057b4 <HAL_RCC_OscConfig+0xc0>
 80057d2:	e014      	b.n	80057fe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057d4:	f7fd fe8e 	bl	80034f4 <HAL_GetTick>
 80057d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80057da:	e008      	b.n	80057ee <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80057dc:	f7fd fe8a 	bl	80034f4 <HAL_GetTick>
 80057e0:	4602      	mov	r2, r0
 80057e2:	693b      	ldr	r3, [r7, #16]
 80057e4:	1ad3      	subs	r3, r2, r3
 80057e6:	2b64      	cmp	r3, #100	; 0x64
 80057e8:	d901      	bls.n	80057ee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80057ea:	2303      	movs	r3, #3
 80057ec:	e1f3      	b.n	8005bd6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80057ee:	4b51      	ldr	r3, [pc, #324]	; (8005934 <HAL_RCC_OscConfig+0x240>)
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d1f0      	bne.n	80057dc <HAL_RCC_OscConfig+0xe8>
 80057fa:	e000      	b.n	80057fe <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80057fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f003 0302 	and.w	r3, r3, #2
 8005806:	2b00      	cmp	r3, #0
 8005808:	d063      	beq.n	80058d2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800580a:	4b4a      	ldr	r3, [pc, #296]	; (8005934 <HAL_RCC_OscConfig+0x240>)
 800580c:	689b      	ldr	r3, [r3, #8]
 800580e:	f003 030c 	and.w	r3, r3, #12
 8005812:	2b00      	cmp	r3, #0
 8005814:	d00b      	beq.n	800582e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005816:	4b47      	ldr	r3, [pc, #284]	; (8005934 <HAL_RCC_OscConfig+0x240>)
 8005818:	689b      	ldr	r3, [r3, #8]
 800581a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800581e:	2b08      	cmp	r3, #8
 8005820:	d11c      	bne.n	800585c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005822:	4b44      	ldr	r3, [pc, #272]	; (8005934 <HAL_RCC_OscConfig+0x240>)
 8005824:	685b      	ldr	r3, [r3, #4]
 8005826:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800582a:	2b00      	cmp	r3, #0
 800582c:	d116      	bne.n	800585c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800582e:	4b41      	ldr	r3, [pc, #260]	; (8005934 <HAL_RCC_OscConfig+0x240>)
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f003 0302 	and.w	r3, r3, #2
 8005836:	2b00      	cmp	r3, #0
 8005838:	d005      	beq.n	8005846 <HAL_RCC_OscConfig+0x152>
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	68db      	ldr	r3, [r3, #12]
 800583e:	2b01      	cmp	r3, #1
 8005840:	d001      	beq.n	8005846 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005842:	2301      	movs	r3, #1
 8005844:	e1c7      	b.n	8005bd6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005846:	4b3b      	ldr	r3, [pc, #236]	; (8005934 <HAL_RCC_OscConfig+0x240>)
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	691b      	ldr	r3, [r3, #16]
 8005852:	00db      	lsls	r3, r3, #3
 8005854:	4937      	ldr	r1, [pc, #220]	; (8005934 <HAL_RCC_OscConfig+0x240>)
 8005856:	4313      	orrs	r3, r2
 8005858:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800585a:	e03a      	b.n	80058d2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	68db      	ldr	r3, [r3, #12]
 8005860:	2b00      	cmp	r3, #0
 8005862:	d020      	beq.n	80058a6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005864:	4b34      	ldr	r3, [pc, #208]	; (8005938 <HAL_RCC_OscConfig+0x244>)
 8005866:	2201      	movs	r2, #1
 8005868:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800586a:	f7fd fe43 	bl	80034f4 <HAL_GetTick>
 800586e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005870:	e008      	b.n	8005884 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005872:	f7fd fe3f 	bl	80034f4 <HAL_GetTick>
 8005876:	4602      	mov	r2, r0
 8005878:	693b      	ldr	r3, [r7, #16]
 800587a:	1ad3      	subs	r3, r2, r3
 800587c:	2b02      	cmp	r3, #2
 800587e:	d901      	bls.n	8005884 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005880:	2303      	movs	r3, #3
 8005882:	e1a8      	b.n	8005bd6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005884:	4b2b      	ldr	r3, [pc, #172]	; (8005934 <HAL_RCC_OscConfig+0x240>)
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f003 0302 	and.w	r3, r3, #2
 800588c:	2b00      	cmp	r3, #0
 800588e:	d0f0      	beq.n	8005872 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005890:	4b28      	ldr	r3, [pc, #160]	; (8005934 <HAL_RCC_OscConfig+0x240>)
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	691b      	ldr	r3, [r3, #16]
 800589c:	00db      	lsls	r3, r3, #3
 800589e:	4925      	ldr	r1, [pc, #148]	; (8005934 <HAL_RCC_OscConfig+0x240>)
 80058a0:	4313      	orrs	r3, r2
 80058a2:	600b      	str	r3, [r1, #0]
 80058a4:	e015      	b.n	80058d2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80058a6:	4b24      	ldr	r3, [pc, #144]	; (8005938 <HAL_RCC_OscConfig+0x244>)
 80058a8:	2200      	movs	r2, #0
 80058aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058ac:	f7fd fe22 	bl	80034f4 <HAL_GetTick>
 80058b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80058b2:	e008      	b.n	80058c6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80058b4:	f7fd fe1e 	bl	80034f4 <HAL_GetTick>
 80058b8:	4602      	mov	r2, r0
 80058ba:	693b      	ldr	r3, [r7, #16]
 80058bc:	1ad3      	subs	r3, r2, r3
 80058be:	2b02      	cmp	r3, #2
 80058c0:	d901      	bls.n	80058c6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80058c2:	2303      	movs	r3, #3
 80058c4:	e187      	b.n	8005bd6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80058c6:	4b1b      	ldr	r3, [pc, #108]	; (8005934 <HAL_RCC_OscConfig+0x240>)
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f003 0302 	and.w	r3, r3, #2
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d1f0      	bne.n	80058b4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f003 0308 	and.w	r3, r3, #8
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d036      	beq.n	800594c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	695b      	ldr	r3, [r3, #20]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d016      	beq.n	8005914 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80058e6:	4b15      	ldr	r3, [pc, #84]	; (800593c <HAL_RCC_OscConfig+0x248>)
 80058e8:	2201      	movs	r2, #1
 80058ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058ec:	f7fd fe02 	bl	80034f4 <HAL_GetTick>
 80058f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80058f2:	e008      	b.n	8005906 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80058f4:	f7fd fdfe 	bl	80034f4 <HAL_GetTick>
 80058f8:	4602      	mov	r2, r0
 80058fa:	693b      	ldr	r3, [r7, #16]
 80058fc:	1ad3      	subs	r3, r2, r3
 80058fe:	2b02      	cmp	r3, #2
 8005900:	d901      	bls.n	8005906 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005902:	2303      	movs	r3, #3
 8005904:	e167      	b.n	8005bd6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005906:	4b0b      	ldr	r3, [pc, #44]	; (8005934 <HAL_RCC_OscConfig+0x240>)
 8005908:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800590a:	f003 0302 	and.w	r3, r3, #2
 800590e:	2b00      	cmp	r3, #0
 8005910:	d0f0      	beq.n	80058f4 <HAL_RCC_OscConfig+0x200>
 8005912:	e01b      	b.n	800594c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005914:	4b09      	ldr	r3, [pc, #36]	; (800593c <HAL_RCC_OscConfig+0x248>)
 8005916:	2200      	movs	r2, #0
 8005918:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800591a:	f7fd fdeb 	bl	80034f4 <HAL_GetTick>
 800591e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005920:	e00e      	b.n	8005940 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005922:	f7fd fde7 	bl	80034f4 <HAL_GetTick>
 8005926:	4602      	mov	r2, r0
 8005928:	693b      	ldr	r3, [r7, #16]
 800592a:	1ad3      	subs	r3, r2, r3
 800592c:	2b02      	cmp	r3, #2
 800592e:	d907      	bls.n	8005940 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005930:	2303      	movs	r3, #3
 8005932:	e150      	b.n	8005bd6 <HAL_RCC_OscConfig+0x4e2>
 8005934:	40023800 	.word	0x40023800
 8005938:	42470000 	.word	0x42470000
 800593c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005940:	4b88      	ldr	r3, [pc, #544]	; (8005b64 <HAL_RCC_OscConfig+0x470>)
 8005942:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005944:	f003 0302 	and.w	r3, r3, #2
 8005948:	2b00      	cmp	r3, #0
 800594a:	d1ea      	bne.n	8005922 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f003 0304 	and.w	r3, r3, #4
 8005954:	2b00      	cmp	r3, #0
 8005956:	f000 8097 	beq.w	8005a88 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800595a:	2300      	movs	r3, #0
 800595c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800595e:	4b81      	ldr	r3, [pc, #516]	; (8005b64 <HAL_RCC_OscConfig+0x470>)
 8005960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005962:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005966:	2b00      	cmp	r3, #0
 8005968:	d10f      	bne.n	800598a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800596a:	2300      	movs	r3, #0
 800596c:	60bb      	str	r3, [r7, #8]
 800596e:	4b7d      	ldr	r3, [pc, #500]	; (8005b64 <HAL_RCC_OscConfig+0x470>)
 8005970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005972:	4a7c      	ldr	r2, [pc, #496]	; (8005b64 <HAL_RCC_OscConfig+0x470>)
 8005974:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005978:	6413      	str	r3, [r2, #64]	; 0x40
 800597a:	4b7a      	ldr	r3, [pc, #488]	; (8005b64 <HAL_RCC_OscConfig+0x470>)
 800597c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800597e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005982:	60bb      	str	r3, [r7, #8]
 8005984:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005986:	2301      	movs	r3, #1
 8005988:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800598a:	4b77      	ldr	r3, [pc, #476]	; (8005b68 <HAL_RCC_OscConfig+0x474>)
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005992:	2b00      	cmp	r3, #0
 8005994:	d118      	bne.n	80059c8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005996:	4b74      	ldr	r3, [pc, #464]	; (8005b68 <HAL_RCC_OscConfig+0x474>)
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	4a73      	ldr	r2, [pc, #460]	; (8005b68 <HAL_RCC_OscConfig+0x474>)
 800599c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80059a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80059a2:	f7fd fda7 	bl	80034f4 <HAL_GetTick>
 80059a6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80059a8:	e008      	b.n	80059bc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80059aa:	f7fd fda3 	bl	80034f4 <HAL_GetTick>
 80059ae:	4602      	mov	r2, r0
 80059b0:	693b      	ldr	r3, [r7, #16]
 80059b2:	1ad3      	subs	r3, r2, r3
 80059b4:	2b02      	cmp	r3, #2
 80059b6:	d901      	bls.n	80059bc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80059b8:	2303      	movs	r3, #3
 80059ba:	e10c      	b.n	8005bd6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80059bc:	4b6a      	ldr	r3, [pc, #424]	; (8005b68 <HAL_RCC_OscConfig+0x474>)
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d0f0      	beq.n	80059aa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	689b      	ldr	r3, [r3, #8]
 80059cc:	2b01      	cmp	r3, #1
 80059ce:	d106      	bne.n	80059de <HAL_RCC_OscConfig+0x2ea>
 80059d0:	4b64      	ldr	r3, [pc, #400]	; (8005b64 <HAL_RCC_OscConfig+0x470>)
 80059d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059d4:	4a63      	ldr	r2, [pc, #396]	; (8005b64 <HAL_RCC_OscConfig+0x470>)
 80059d6:	f043 0301 	orr.w	r3, r3, #1
 80059da:	6713      	str	r3, [r2, #112]	; 0x70
 80059dc:	e01c      	b.n	8005a18 <HAL_RCC_OscConfig+0x324>
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	689b      	ldr	r3, [r3, #8]
 80059e2:	2b05      	cmp	r3, #5
 80059e4:	d10c      	bne.n	8005a00 <HAL_RCC_OscConfig+0x30c>
 80059e6:	4b5f      	ldr	r3, [pc, #380]	; (8005b64 <HAL_RCC_OscConfig+0x470>)
 80059e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059ea:	4a5e      	ldr	r2, [pc, #376]	; (8005b64 <HAL_RCC_OscConfig+0x470>)
 80059ec:	f043 0304 	orr.w	r3, r3, #4
 80059f0:	6713      	str	r3, [r2, #112]	; 0x70
 80059f2:	4b5c      	ldr	r3, [pc, #368]	; (8005b64 <HAL_RCC_OscConfig+0x470>)
 80059f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059f6:	4a5b      	ldr	r2, [pc, #364]	; (8005b64 <HAL_RCC_OscConfig+0x470>)
 80059f8:	f043 0301 	orr.w	r3, r3, #1
 80059fc:	6713      	str	r3, [r2, #112]	; 0x70
 80059fe:	e00b      	b.n	8005a18 <HAL_RCC_OscConfig+0x324>
 8005a00:	4b58      	ldr	r3, [pc, #352]	; (8005b64 <HAL_RCC_OscConfig+0x470>)
 8005a02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a04:	4a57      	ldr	r2, [pc, #348]	; (8005b64 <HAL_RCC_OscConfig+0x470>)
 8005a06:	f023 0301 	bic.w	r3, r3, #1
 8005a0a:	6713      	str	r3, [r2, #112]	; 0x70
 8005a0c:	4b55      	ldr	r3, [pc, #340]	; (8005b64 <HAL_RCC_OscConfig+0x470>)
 8005a0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a10:	4a54      	ldr	r2, [pc, #336]	; (8005b64 <HAL_RCC_OscConfig+0x470>)
 8005a12:	f023 0304 	bic.w	r3, r3, #4
 8005a16:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	689b      	ldr	r3, [r3, #8]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d015      	beq.n	8005a4c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a20:	f7fd fd68 	bl	80034f4 <HAL_GetTick>
 8005a24:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a26:	e00a      	b.n	8005a3e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005a28:	f7fd fd64 	bl	80034f4 <HAL_GetTick>
 8005a2c:	4602      	mov	r2, r0
 8005a2e:	693b      	ldr	r3, [r7, #16]
 8005a30:	1ad3      	subs	r3, r2, r3
 8005a32:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a36:	4293      	cmp	r3, r2
 8005a38:	d901      	bls.n	8005a3e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005a3a:	2303      	movs	r3, #3
 8005a3c:	e0cb      	b.n	8005bd6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a3e:	4b49      	ldr	r3, [pc, #292]	; (8005b64 <HAL_RCC_OscConfig+0x470>)
 8005a40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a42:	f003 0302 	and.w	r3, r3, #2
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d0ee      	beq.n	8005a28 <HAL_RCC_OscConfig+0x334>
 8005a4a:	e014      	b.n	8005a76 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005a4c:	f7fd fd52 	bl	80034f4 <HAL_GetTick>
 8005a50:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005a52:	e00a      	b.n	8005a6a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005a54:	f7fd fd4e 	bl	80034f4 <HAL_GetTick>
 8005a58:	4602      	mov	r2, r0
 8005a5a:	693b      	ldr	r3, [r7, #16]
 8005a5c:	1ad3      	subs	r3, r2, r3
 8005a5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a62:	4293      	cmp	r3, r2
 8005a64:	d901      	bls.n	8005a6a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005a66:	2303      	movs	r3, #3
 8005a68:	e0b5      	b.n	8005bd6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005a6a:	4b3e      	ldr	r3, [pc, #248]	; (8005b64 <HAL_RCC_OscConfig+0x470>)
 8005a6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a6e:	f003 0302 	and.w	r3, r3, #2
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d1ee      	bne.n	8005a54 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005a76:	7dfb      	ldrb	r3, [r7, #23]
 8005a78:	2b01      	cmp	r3, #1
 8005a7a:	d105      	bne.n	8005a88 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005a7c:	4b39      	ldr	r3, [pc, #228]	; (8005b64 <HAL_RCC_OscConfig+0x470>)
 8005a7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a80:	4a38      	ldr	r2, [pc, #224]	; (8005b64 <HAL_RCC_OscConfig+0x470>)
 8005a82:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005a86:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	699b      	ldr	r3, [r3, #24]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	f000 80a1 	beq.w	8005bd4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005a92:	4b34      	ldr	r3, [pc, #208]	; (8005b64 <HAL_RCC_OscConfig+0x470>)
 8005a94:	689b      	ldr	r3, [r3, #8]
 8005a96:	f003 030c 	and.w	r3, r3, #12
 8005a9a:	2b08      	cmp	r3, #8
 8005a9c:	d05c      	beq.n	8005b58 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	699b      	ldr	r3, [r3, #24]
 8005aa2:	2b02      	cmp	r3, #2
 8005aa4:	d141      	bne.n	8005b2a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005aa6:	4b31      	ldr	r3, [pc, #196]	; (8005b6c <HAL_RCC_OscConfig+0x478>)
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005aac:	f7fd fd22 	bl	80034f4 <HAL_GetTick>
 8005ab0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005ab2:	e008      	b.n	8005ac6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005ab4:	f7fd fd1e 	bl	80034f4 <HAL_GetTick>
 8005ab8:	4602      	mov	r2, r0
 8005aba:	693b      	ldr	r3, [r7, #16]
 8005abc:	1ad3      	subs	r3, r2, r3
 8005abe:	2b02      	cmp	r3, #2
 8005ac0:	d901      	bls.n	8005ac6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005ac2:	2303      	movs	r3, #3
 8005ac4:	e087      	b.n	8005bd6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005ac6:	4b27      	ldr	r3, [pc, #156]	; (8005b64 <HAL_RCC_OscConfig+0x470>)
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d1f0      	bne.n	8005ab4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	69da      	ldr	r2, [r3, #28]
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	6a1b      	ldr	r3, [r3, #32]
 8005ada:	431a      	orrs	r2, r3
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ae0:	019b      	lsls	r3, r3, #6
 8005ae2:	431a      	orrs	r2, r3
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ae8:	085b      	lsrs	r3, r3, #1
 8005aea:	3b01      	subs	r3, #1
 8005aec:	041b      	lsls	r3, r3, #16
 8005aee:	431a      	orrs	r2, r3
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005af4:	061b      	lsls	r3, r3, #24
 8005af6:	491b      	ldr	r1, [pc, #108]	; (8005b64 <HAL_RCC_OscConfig+0x470>)
 8005af8:	4313      	orrs	r3, r2
 8005afa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005afc:	4b1b      	ldr	r3, [pc, #108]	; (8005b6c <HAL_RCC_OscConfig+0x478>)
 8005afe:	2201      	movs	r2, #1
 8005b00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b02:	f7fd fcf7 	bl	80034f4 <HAL_GetTick>
 8005b06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005b08:	e008      	b.n	8005b1c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005b0a:	f7fd fcf3 	bl	80034f4 <HAL_GetTick>
 8005b0e:	4602      	mov	r2, r0
 8005b10:	693b      	ldr	r3, [r7, #16]
 8005b12:	1ad3      	subs	r3, r2, r3
 8005b14:	2b02      	cmp	r3, #2
 8005b16:	d901      	bls.n	8005b1c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005b18:	2303      	movs	r3, #3
 8005b1a:	e05c      	b.n	8005bd6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005b1c:	4b11      	ldr	r3, [pc, #68]	; (8005b64 <HAL_RCC_OscConfig+0x470>)
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d0f0      	beq.n	8005b0a <HAL_RCC_OscConfig+0x416>
 8005b28:	e054      	b.n	8005bd4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b2a:	4b10      	ldr	r3, [pc, #64]	; (8005b6c <HAL_RCC_OscConfig+0x478>)
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b30:	f7fd fce0 	bl	80034f4 <HAL_GetTick>
 8005b34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b36:	e008      	b.n	8005b4a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005b38:	f7fd fcdc 	bl	80034f4 <HAL_GetTick>
 8005b3c:	4602      	mov	r2, r0
 8005b3e:	693b      	ldr	r3, [r7, #16]
 8005b40:	1ad3      	subs	r3, r2, r3
 8005b42:	2b02      	cmp	r3, #2
 8005b44:	d901      	bls.n	8005b4a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005b46:	2303      	movs	r3, #3
 8005b48:	e045      	b.n	8005bd6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b4a:	4b06      	ldr	r3, [pc, #24]	; (8005b64 <HAL_RCC_OscConfig+0x470>)
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d1f0      	bne.n	8005b38 <HAL_RCC_OscConfig+0x444>
 8005b56:	e03d      	b.n	8005bd4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	699b      	ldr	r3, [r3, #24]
 8005b5c:	2b01      	cmp	r3, #1
 8005b5e:	d107      	bne.n	8005b70 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005b60:	2301      	movs	r3, #1
 8005b62:	e038      	b.n	8005bd6 <HAL_RCC_OscConfig+0x4e2>
 8005b64:	40023800 	.word	0x40023800
 8005b68:	40007000 	.word	0x40007000
 8005b6c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005b70:	4b1b      	ldr	r3, [pc, #108]	; (8005be0 <HAL_RCC_OscConfig+0x4ec>)
 8005b72:	685b      	ldr	r3, [r3, #4]
 8005b74:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	699b      	ldr	r3, [r3, #24]
 8005b7a:	2b01      	cmp	r3, #1
 8005b7c:	d028      	beq.n	8005bd0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005b88:	429a      	cmp	r2, r3
 8005b8a:	d121      	bne.n	8005bd0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b96:	429a      	cmp	r2, r3
 8005b98:	d11a      	bne.n	8005bd0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005b9a:	68fa      	ldr	r2, [r7, #12]
 8005b9c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005ba0:	4013      	ands	r3, r2
 8005ba2:	687a      	ldr	r2, [r7, #4]
 8005ba4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005ba6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005ba8:	4293      	cmp	r3, r2
 8005baa:	d111      	bne.n	8005bd0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bb6:	085b      	lsrs	r3, r3, #1
 8005bb8:	3b01      	subs	r3, #1
 8005bba:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005bbc:	429a      	cmp	r2, r3
 8005bbe:	d107      	bne.n	8005bd0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bca:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005bcc:	429a      	cmp	r2, r3
 8005bce:	d001      	beq.n	8005bd4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005bd0:	2301      	movs	r3, #1
 8005bd2:	e000      	b.n	8005bd6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005bd4:	2300      	movs	r3, #0
}
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	3718      	adds	r7, #24
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	bd80      	pop	{r7, pc}
 8005bde:	bf00      	nop
 8005be0:	40023800 	.word	0x40023800

08005be4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005be4:	b580      	push	{r7, lr}
 8005be6:	b084      	sub	sp, #16
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
 8005bec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d101      	bne.n	8005bf8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005bf4:	2301      	movs	r3, #1
 8005bf6:	e0cc      	b.n	8005d92 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005bf8:	4b68      	ldr	r3, [pc, #416]	; (8005d9c <HAL_RCC_ClockConfig+0x1b8>)
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f003 0307 	and.w	r3, r3, #7
 8005c00:	683a      	ldr	r2, [r7, #0]
 8005c02:	429a      	cmp	r2, r3
 8005c04:	d90c      	bls.n	8005c20 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c06:	4b65      	ldr	r3, [pc, #404]	; (8005d9c <HAL_RCC_ClockConfig+0x1b8>)
 8005c08:	683a      	ldr	r2, [r7, #0]
 8005c0a:	b2d2      	uxtb	r2, r2
 8005c0c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c0e:	4b63      	ldr	r3, [pc, #396]	; (8005d9c <HAL_RCC_ClockConfig+0x1b8>)
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f003 0307 	and.w	r3, r3, #7
 8005c16:	683a      	ldr	r2, [r7, #0]
 8005c18:	429a      	cmp	r2, r3
 8005c1a:	d001      	beq.n	8005c20 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005c1c:	2301      	movs	r3, #1
 8005c1e:	e0b8      	b.n	8005d92 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f003 0302 	and.w	r3, r3, #2
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d020      	beq.n	8005c6e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f003 0304 	and.w	r3, r3, #4
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d005      	beq.n	8005c44 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005c38:	4b59      	ldr	r3, [pc, #356]	; (8005da0 <HAL_RCC_ClockConfig+0x1bc>)
 8005c3a:	689b      	ldr	r3, [r3, #8]
 8005c3c:	4a58      	ldr	r2, [pc, #352]	; (8005da0 <HAL_RCC_ClockConfig+0x1bc>)
 8005c3e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005c42:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f003 0308 	and.w	r3, r3, #8
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d005      	beq.n	8005c5c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005c50:	4b53      	ldr	r3, [pc, #332]	; (8005da0 <HAL_RCC_ClockConfig+0x1bc>)
 8005c52:	689b      	ldr	r3, [r3, #8]
 8005c54:	4a52      	ldr	r2, [pc, #328]	; (8005da0 <HAL_RCC_ClockConfig+0x1bc>)
 8005c56:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005c5a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005c5c:	4b50      	ldr	r3, [pc, #320]	; (8005da0 <HAL_RCC_ClockConfig+0x1bc>)
 8005c5e:	689b      	ldr	r3, [r3, #8]
 8005c60:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	689b      	ldr	r3, [r3, #8]
 8005c68:	494d      	ldr	r1, [pc, #308]	; (8005da0 <HAL_RCC_ClockConfig+0x1bc>)
 8005c6a:	4313      	orrs	r3, r2
 8005c6c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f003 0301 	and.w	r3, r3, #1
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d044      	beq.n	8005d04 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	685b      	ldr	r3, [r3, #4]
 8005c7e:	2b01      	cmp	r3, #1
 8005c80:	d107      	bne.n	8005c92 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c82:	4b47      	ldr	r3, [pc, #284]	; (8005da0 <HAL_RCC_ClockConfig+0x1bc>)
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d119      	bne.n	8005cc2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005c8e:	2301      	movs	r3, #1
 8005c90:	e07f      	b.n	8005d92 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	685b      	ldr	r3, [r3, #4]
 8005c96:	2b02      	cmp	r3, #2
 8005c98:	d003      	beq.n	8005ca2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005c9e:	2b03      	cmp	r3, #3
 8005ca0:	d107      	bne.n	8005cb2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ca2:	4b3f      	ldr	r3, [pc, #252]	; (8005da0 <HAL_RCC_ClockConfig+0x1bc>)
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d109      	bne.n	8005cc2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005cae:	2301      	movs	r3, #1
 8005cb0:	e06f      	b.n	8005d92 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005cb2:	4b3b      	ldr	r3, [pc, #236]	; (8005da0 <HAL_RCC_ClockConfig+0x1bc>)
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f003 0302 	and.w	r3, r3, #2
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d101      	bne.n	8005cc2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005cbe:	2301      	movs	r3, #1
 8005cc0:	e067      	b.n	8005d92 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005cc2:	4b37      	ldr	r3, [pc, #220]	; (8005da0 <HAL_RCC_ClockConfig+0x1bc>)
 8005cc4:	689b      	ldr	r3, [r3, #8]
 8005cc6:	f023 0203 	bic.w	r2, r3, #3
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	685b      	ldr	r3, [r3, #4]
 8005cce:	4934      	ldr	r1, [pc, #208]	; (8005da0 <HAL_RCC_ClockConfig+0x1bc>)
 8005cd0:	4313      	orrs	r3, r2
 8005cd2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005cd4:	f7fd fc0e 	bl	80034f4 <HAL_GetTick>
 8005cd8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005cda:	e00a      	b.n	8005cf2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005cdc:	f7fd fc0a 	bl	80034f4 <HAL_GetTick>
 8005ce0:	4602      	mov	r2, r0
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	1ad3      	subs	r3, r2, r3
 8005ce6:	f241 3288 	movw	r2, #5000	; 0x1388
 8005cea:	4293      	cmp	r3, r2
 8005cec:	d901      	bls.n	8005cf2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005cee:	2303      	movs	r3, #3
 8005cf0:	e04f      	b.n	8005d92 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005cf2:	4b2b      	ldr	r3, [pc, #172]	; (8005da0 <HAL_RCC_ClockConfig+0x1bc>)
 8005cf4:	689b      	ldr	r3, [r3, #8]
 8005cf6:	f003 020c 	and.w	r2, r3, #12
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	685b      	ldr	r3, [r3, #4]
 8005cfe:	009b      	lsls	r3, r3, #2
 8005d00:	429a      	cmp	r2, r3
 8005d02:	d1eb      	bne.n	8005cdc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005d04:	4b25      	ldr	r3, [pc, #148]	; (8005d9c <HAL_RCC_ClockConfig+0x1b8>)
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f003 0307 	and.w	r3, r3, #7
 8005d0c:	683a      	ldr	r2, [r7, #0]
 8005d0e:	429a      	cmp	r2, r3
 8005d10:	d20c      	bcs.n	8005d2c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d12:	4b22      	ldr	r3, [pc, #136]	; (8005d9c <HAL_RCC_ClockConfig+0x1b8>)
 8005d14:	683a      	ldr	r2, [r7, #0]
 8005d16:	b2d2      	uxtb	r2, r2
 8005d18:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d1a:	4b20      	ldr	r3, [pc, #128]	; (8005d9c <HAL_RCC_ClockConfig+0x1b8>)
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f003 0307 	and.w	r3, r3, #7
 8005d22:	683a      	ldr	r2, [r7, #0]
 8005d24:	429a      	cmp	r2, r3
 8005d26:	d001      	beq.n	8005d2c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005d28:	2301      	movs	r3, #1
 8005d2a:	e032      	b.n	8005d92 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f003 0304 	and.w	r3, r3, #4
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d008      	beq.n	8005d4a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005d38:	4b19      	ldr	r3, [pc, #100]	; (8005da0 <HAL_RCC_ClockConfig+0x1bc>)
 8005d3a:	689b      	ldr	r3, [r3, #8]
 8005d3c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	68db      	ldr	r3, [r3, #12]
 8005d44:	4916      	ldr	r1, [pc, #88]	; (8005da0 <HAL_RCC_ClockConfig+0x1bc>)
 8005d46:	4313      	orrs	r3, r2
 8005d48:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f003 0308 	and.w	r3, r3, #8
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d009      	beq.n	8005d6a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005d56:	4b12      	ldr	r3, [pc, #72]	; (8005da0 <HAL_RCC_ClockConfig+0x1bc>)
 8005d58:	689b      	ldr	r3, [r3, #8]
 8005d5a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	691b      	ldr	r3, [r3, #16]
 8005d62:	00db      	lsls	r3, r3, #3
 8005d64:	490e      	ldr	r1, [pc, #56]	; (8005da0 <HAL_RCC_ClockConfig+0x1bc>)
 8005d66:	4313      	orrs	r3, r2
 8005d68:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005d6a:	f000 f821 	bl	8005db0 <HAL_RCC_GetSysClockFreq>
 8005d6e:	4602      	mov	r2, r0
 8005d70:	4b0b      	ldr	r3, [pc, #44]	; (8005da0 <HAL_RCC_ClockConfig+0x1bc>)
 8005d72:	689b      	ldr	r3, [r3, #8]
 8005d74:	091b      	lsrs	r3, r3, #4
 8005d76:	f003 030f 	and.w	r3, r3, #15
 8005d7a:	490a      	ldr	r1, [pc, #40]	; (8005da4 <HAL_RCC_ClockConfig+0x1c0>)
 8005d7c:	5ccb      	ldrb	r3, [r1, r3]
 8005d7e:	fa22 f303 	lsr.w	r3, r2, r3
 8005d82:	4a09      	ldr	r2, [pc, #36]	; (8005da8 <HAL_RCC_ClockConfig+0x1c4>)
 8005d84:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005d86:	4b09      	ldr	r3, [pc, #36]	; (8005dac <HAL_RCC_ClockConfig+0x1c8>)
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	f7fd fb6e 	bl	800346c <HAL_InitTick>

  return HAL_OK;
 8005d90:	2300      	movs	r3, #0
}
 8005d92:	4618      	mov	r0, r3
 8005d94:	3710      	adds	r7, #16
 8005d96:	46bd      	mov	sp, r7
 8005d98:	bd80      	pop	{r7, pc}
 8005d9a:	bf00      	nop
 8005d9c:	40023c00 	.word	0x40023c00
 8005da0:	40023800 	.word	0x40023800
 8005da4:	08013584 	.word	0x08013584
 8005da8:	20000000 	.word	0x20000000
 8005dac:	20000010 	.word	0x20000010

08005db0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005db0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005db4:	b090      	sub	sp, #64	; 0x40
 8005db6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005db8:	2300      	movs	r3, #0
 8005dba:	637b      	str	r3, [r7, #52]	; 0x34
 8005dbc:	2300      	movs	r3, #0
 8005dbe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005dc0:	2300      	movs	r3, #0
 8005dc2:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8005dc4:	2300      	movs	r3, #0
 8005dc6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005dc8:	4b59      	ldr	r3, [pc, #356]	; (8005f30 <HAL_RCC_GetSysClockFreq+0x180>)
 8005dca:	689b      	ldr	r3, [r3, #8]
 8005dcc:	f003 030c 	and.w	r3, r3, #12
 8005dd0:	2b08      	cmp	r3, #8
 8005dd2:	d00d      	beq.n	8005df0 <HAL_RCC_GetSysClockFreq+0x40>
 8005dd4:	2b08      	cmp	r3, #8
 8005dd6:	f200 80a1 	bhi.w	8005f1c <HAL_RCC_GetSysClockFreq+0x16c>
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d002      	beq.n	8005de4 <HAL_RCC_GetSysClockFreq+0x34>
 8005dde:	2b04      	cmp	r3, #4
 8005de0:	d003      	beq.n	8005dea <HAL_RCC_GetSysClockFreq+0x3a>
 8005de2:	e09b      	b.n	8005f1c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005de4:	4b53      	ldr	r3, [pc, #332]	; (8005f34 <HAL_RCC_GetSysClockFreq+0x184>)
 8005de6:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8005de8:	e09b      	b.n	8005f22 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005dea:	4b53      	ldr	r3, [pc, #332]	; (8005f38 <HAL_RCC_GetSysClockFreq+0x188>)
 8005dec:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005dee:	e098      	b.n	8005f22 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005df0:	4b4f      	ldr	r3, [pc, #316]	; (8005f30 <HAL_RCC_GetSysClockFreq+0x180>)
 8005df2:	685b      	ldr	r3, [r3, #4]
 8005df4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005df8:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005dfa:	4b4d      	ldr	r3, [pc, #308]	; (8005f30 <HAL_RCC_GetSysClockFreq+0x180>)
 8005dfc:	685b      	ldr	r3, [r3, #4]
 8005dfe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d028      	beq.n	8005e58 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005e06:	4b4a      	ldr	r3, [pc, #296]	; (8005f30 <HAL_RCC_GetSysClockFreq+0x180>)
 8005e08:	685b      	ldr	r3, [r3, #4]
 8005e0a:	099b      	lsrs	r3, r3, #6
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	623b      	str	r3, [r7, #32]
 8005e10:	627a      	str	r2, [r7, #36]	; 0x24
 8005e12:	6a3b      	ldr	r3, [r7, #32]
 8005e14:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005e18:	2100      	movs	r1, #0
 8005e1a:	4b47      	ldr	r3, [pc, #284]	; (8005f38 <HAL_RCC_GetSysClockFreq+0x188>)
 8005e1c:	fb03 f201 	mul.w	r2, r3, r1
 8005e20:	2300      	movs	r3, #0
 8005e22:	fb00 f303 	mul.w	r3, r0, r3
 8005e26:	4413      	add	r3, r2
 8005e28:	4a43      	ldr	r2, [pc, #268]	; (8005f38 <HAL_RCC_GetSysClockFreq+0x188>)
 8005e2a:	fba0 1202 	umull	r1, r2, r0, r2
 8005e2e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005e30:	460a      	mov	r2, r1
 8005e32:	62ba      	str	r2, [r7, #40]	; 0x28
 8005e34:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005e36:	4413      	add	r3, r2
 8005e38:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005e3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e3c:	2200      	movs	r2, #0
 8005e3e:	61bb      	str	r3, [r7, #24]
 8005e40:	61fa      	str	r2, [r7, #28]
 8005e42:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005e46:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8005e4a:	f7fa ff05 	bl	8000c58 <__aeabi_uldivmod>
 8005e4e:	4602      	mov	r2, r0
 8005e50:	460b      	mov	r3, r1
 8005e52:	4613      	mov	r3, r2
 8005e54:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005e56:	e053      	b.n	8005f00 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005e58:	4b35      	ldr	r3, [pc, #212]	; (8005f30 <HAL_RCC_GetSysClockFreq+0x180>)
 8005e5a:	685b      	ldr	r3, [r3, #4]
 8005e5c:	099b      	lsrs	r3, r3, #6
 8005e5e:	2200      	movs	r2, #0
 8005e60:	613b      	str	r3, [r7, #16]
 8005e62:	617a      	str	r2, [r7, #20]
 8005e64:	693b      	ldr	r3, [r7, #16]
 8005e66:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8005e6a:	f04f 0b00 	mov.w	fp, #0
 8005e6e:	4652      	mov	r2, sl
 8005e70:	465b      	mov	r3, fp
 8005e72:	f04f 0000 	mov.w	r0, #0
 8005e76:	f04f 0100 	mov.w	r1, #0
 8005e7a:	0159      	lsls	r1, r3, #5
 8005e7c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005e80:	0150      	lsls	r0, r2, #5
 8005e82:	4602      	mov	r2, r0
 8005e84:	460b      	mov	r3, r1
 8005e86:	ebb2 080a 	subs.w	r8, r2, sl
 8005e8a:	eb63 090b 	sbc.w	r9, r3, fp
 8005e8e:	f04f 0200 	mov.w	r2, #0
 8005e92:	f04f 0300 	mov.w	r3, #0
 8005e96:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8005e9a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8005e9e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8005ea2:	ebb2 0408 	subs.w	r4, r2, r8
 8005ea6:	eb63 0509 	sbc.w	r5, r3, r9
 8005eaa:	f04f 0200 	mov.w	r2, #0
 8005eae:	f04f 0300 	mov.w	r3, #0
 8005eb2:	00eb      	lsls	r3, r5, #3
 8005eb4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005eb8:	00e2      	lsls	r2, r4, #3
 8005eba:	4614      	mov	r4, r2
 8005ebc:	461d      	mov	r5, r3
 8005ebe:	eb14 030a 	adds.w	r3, r4, sl
 8005ec2:	603b      	str	r3, [r7, #0]
 8005ec4:	eb45 030b 	adc.w	r3, r5, fp
 8005ec8:	607b      	str	r3, [r7, #4]
 8005eca:	f04f 0200 	mov.w	r2, #0
 8005ece:	f04f 0300 	mov.w	r3, #0
 8005ed2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005ed6:	4629      	mov	r1, r5
 8005ed8:	028b      	lsls	r3, r1, #10
 8005eda:	4621      	mov	r1, r4
 8005edc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005ee0:	4621      	mov	r1, r4
 8005ee2:	028a      	lsls	r2, r1, #10
 8005ee4:	4610      	mov	r0, r2
 8005ee6:	4619      	mov	r1, r3
 8005ee8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005eea:	2200      	movs	r2, #0
 8005eec:	60bb      	str	r3, [r7, #8]
 8005eee:	60fa      	str	r2, [r7, #12]
 8005ef0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005ef4:	f7fa feb0 	bl	8000c58 <__aeabi_uldivmod>
 8005ef8:	4602      	mov	r2, r0
 8005efa:	460b      	mov	r3, r1
 8005efc:	4613      	mov	r3, r2
 8005efe:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005f00:	4b0b      	ldr	r3, [pc, #44]	; (8005f30 <HAL_RCC_GetSysClockFreq+0x180>)
 8005f02:	685b      	ldr	r3, [r3, #4]
 8005f04:	0c1b      	lsrs	r3, r3, #16
 8005f06:	f003 0303 	and.w	r3, r3, #3
 8005f0a:	3301      	adds	r3, #1
 8005f0c:	005b      	lsls	r3, r3, #1
 8005f0e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8005f10:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005f12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f14:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f18:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005f1a:	e002      	b.n	8005f22 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005f1c:	4b05      	ldr	r3, [pc, #20]	; (8005f34 <HAL_RCC_GetSysClockFreq+0x184>)
 8005f1e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005f20:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005f22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8005f24:	4618      	mov	r0, r3
 8005f26:	3740      	adds	r7, #64	; 0x40
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005f2e:	bf00      	nop
 8005f30:	40023800 	.word	0x40023800
 8005f34:	00f42400 	.word	0x00f42400
 8005f38:	017d7840 	.word	0x017d7840

08005f3c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005f3c:	b480      	push	{r7}
 8005f3e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005f40:	4b03      	ldr	r3, [pc, #12]	; (8005f50 <HAL_RCC_GetHCLKFreq+0x14>)
 8005f42:	681b      	ldr	r3, [r3, #0]
}
 8005f44:	4618      	mov	r0, r3
 8005f46:	46bd      	mov	sp, r7
 8005f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4c:	4770      	bx	lr
 8005f4e:	bf00      	nop
 8005f50:	20000000 	.word	0x20000000

08005f54 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8005f54:	b580      	push	{r7, lr}
 8005f56:	b082      	sub	sp, #8
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d101      	bne.n	8005f66 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8005f62:	2301      	movs	r3, #1
 8005f64:	e022      	b.n	8005fac <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005f6c:	b2db      	uxtb	r3, r3
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d105      	bne.n	8005f7e <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	2200      	movs	r2, #0
 8005f76:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8005f78:	6878      	ldr	r0, [r7, #4]
 8005f7a:	f7fb f96b 	bl	8001254 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	2203      	movs	r2, #3
 8005f82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8005f86:	6878      	ldr	r0, [r7, #4]
 8005f88:	f000 f814 	bl	8005fb4 <HAL_SD_InitCard>
 8005f8c:	4603      	mov	r3, r0
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d001      	beq.n	8005f96 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8005f92:	2301      	movs	r3, #1
 8005f94:	e00a      	b.n	8005fac <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	2200      	movs	r2, #0
 8005f9a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	2201      	movs	r2, #1
 8005fa6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005faa:	2300      	movs	r3, #0
}
 8005fac:	4618      	mov	r0, r3
 8005fae:	3708      	adds	r7, #8
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	bd80      	pop	{r7, pc}

08005fb4 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8005fb4:	b5b0      	push	{r4, r5, r7, lr}
 8005fb6:	b08e      	sub	sp, #56	; 0x38
 8005fb8:	af04      	add	r7, sp, #16
 8005fba:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8005fbc:	2300      	movs	r3, #0
 8005fbe:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8005fc0:	2300      	movs	r3, #0
 8005fc2:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8005fc4:	2300      	movs	r3, #0
 8005fc6:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8005fc8:	2300      	movs	r3, #0
 8005fca:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8005fcc:	2300      	movs	r3, #0
 8005fce:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8005fd0:	2376      	movs	r3, #118	; 0x76
 8005fd2:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681d      	ldr	r5, [r3, #0]
 8005fd8:	466c      	mov	r4, sp
 8005fda:	f107 0314 	add.w	r3, r7, #20
 8005fde:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005fe2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005fe6:	f107 0308 	add.w	r3, r7, #8
 8005fea:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005fec:	4628      	mov	r0, r5
 8005fee:	f001 fd63 	bl	8007ab8 <SDIO_Init>
 8005ff2:	4603      	mov	r3, r0
 8005ff4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8005ff8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d001      	beq.n	8006004 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8006000:	2301      	movs	r3, #1
 8006002:	e04f      	b.n	80060a4 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8006004:	4b29      	ldr	r3, [pc, #164]	; (80060ac <HAL_SD_InitCard+0xf8>)
 8006006:	2200      	movs	r2, #0
 8006008:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	4618      	mov	r0, r3
 8006010:	f001 fd9b 	bl	8007b4a <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8006014:	4b25      	ldr	r3, [pc, #148]	; (80060ac <HAL_SD_InitCard+0xf8>)
 8006016:	2201      	movs	r2, #1
 8006018:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 800601a:	2002      	movs	r0, #2
 800601c:	f7fd fa76 	bl	800350c <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8006020:	6878      	ldr	r0, [r7, #4]
 8006022:	f001 fa7d 	bl	8007520 <SD_PowerON>
 8006026:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006028:	6a3b      	ldr	r3, [r7, #32]
 800602a:	2b00      	cmp	r3, #0
 800602c:	d00b      	beq.n	8006046 <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	2201      	movs	r2, #1
 8006032:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800603a:	6a3b      	ldr	r3, [r7, #32]
 800603c:	431a      	orrs	r2, r3
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006042:	2301      	movs	r3, #1
 8006044:	e02e      	b.n	80060a4 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8006046:	6878      	ldr	r0, [r7, #4]
 8006048:	f001 f99c 	bl	8007384 <SD_InitCard>
 800604c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800604e:	6a3b      	ldr	r3, [r7, #32]
 8006050:	2b00      	cmp	r3, #0
 8006052:	d00b      	beq.n	800606c <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2201      	movs	r2, #1
 8006058:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006060:	6a3b      	ldr	r3, [r7, #32]
 8006062:	431a      	orrs	r2, r3
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006068:	2301      	movs	r3, #1
 800606a:	e01b      	b.n	80060a4 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006074:	4618      	mov	r0, r3
 8006076:	f001 fdfa 	bl	8007c6e <SDMMC_CmdBlockLength>
 800607a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800607c:	6a3b      	ldr	r3, [r7, #32]
 800607e:	2b00      	cmp	r3, #0
 8006080:	d00f      	beq.n	80060a2 <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	4a0a      	ldr	r2, [pc, #40]	; (80060b0 <HAL_SD_InitCard+0xfc>)
 8006088:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800608e:	6a3b      	ldr	r3, [r7, #32]
 8006090:	431a      	orrs	r2, r3
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	2201      	movs	r2, #1
 800609a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800609e:	2301      	movs	r3, #1
 80060a0:	e000      	b.n	80060a4 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 80060a2:	2300      	movs	r3, #0
}
 80060a4:	4618      	mov	r0, r3
 80060a6:	3728      	adds	r7, #40	; 0x28
 80060a8:	46bd      	mov	sp, r7
 80060aa:	bdb0      	pop	{r4, r5, r7, pc}
 80060ac:	422580a0 	.word	0x422580a0
 80060b0:	004005ff 	.word	0x004005ff

080060b4 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 80060b4:	b580      	push	{r7, lr}
 80060b6:	b092      	sub	sp, #72	; 0x48
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	60f8      	str	r0, [r7, #12]
 80060bc:	60b9      	str	r1, [r7, #8]
 80060be:	607a      	str	r2, [r7, #4]
 80060c0:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80060c2:	f7fd fa17 	bl	80034f4 <HAL_GetTick>
 80060c6:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 80060cc:	68bb      	ldr	r3, [r7, #8]
 80060ce:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 80060d0:	68bb      	ldr	r3, [r7, #8]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d107      	bne.n	80060e6 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060da:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80060e2:	2301      	movs	r3, #1
 80060e4:	e1c5      	b.n	8006472 <HAL_SD_ReadBlocks+0x3be>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80060ec:	b2db      	uxtb	r3, r3
 80060ee:	2b01      	cmp	r3, #1
 80060f0:	f040 81b8 	bne.w	8006464 <HAL_SD_ReadBlocks+0x3b0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	2200      	movs	r2, #0
 80060f8:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80060fa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80060fc:	683b      	ldr	r3, [r7, #0]
 80060fe:	441a      	add	r2, r3
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006104:	429a      	cmp	r2, r3
 8006106:	d907      	bls.n	8006118 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800610c:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8006114:	2301      	movs	r3, #1
 8006116:	e1ac      	b.n	8006472 <HAL_SD_ReadBlocks+0x3be>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	2203      	movs	r2, #3
 800611c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	2200      	movs	r2, #0
 8006126:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800612c:	2b01      	cmp	r3, #1
 800612e:	d002      	beq.n	8006136 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8006130:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006132:	025b      	lsls	r3, r3, #9
 8006134:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006136:	f04f 33ff 	mov.w	r3, #4294967295
 800613a:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800613c:	683b      	ldr	r3, [r7, #0]
 800613e:	025b      	lsls	r3, r3, #9
 8006140:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8006142:	2390      	movs	r3, #144	; 0x90
 8006144:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8006146:	2302      	movs	r3, #2
 8006148:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800614a:	2300      	movs	r3, #0
 800614c:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 800614e:	2301      	movs	r3, #1
 8006150:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	f107 0214 	add.w	r2, r7, #20
 800615a:	4611      	mov	r1, r2
 800615c:	4618      	mov	r0, r3
 800615e:	f001 fd5a 	bl	8007c16 <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8006162:	683b      	ldr	r3, [r7, #0]
 8006164:	2b01      	cmp	r3, #1
 8006166:	d90a      	bls.n	800617e <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	2202      	movs	r2, #2
 800616c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006174:	4618      	mov	r0, r3
 8006176:	f001 fdbe 	bl	8007cf6 <SDMMC_CmdReadMultiBlock>
 800617a:	6478      	str	r0, [r7, #68]	; 0x44
 800617c:	e009      	b.n	8006192 <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	2201      	movs	r2, #1
 8006182:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800618a:	4618      	mov	r0, r3
 800618c:	f001 fd91 	bl	8007cb2 <SDMMC_CmdReadSingleBlock>
 8006190:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8006192:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006194:	2b00      	cmp	r3, #0
 8006196:	d012      	beq.n	80061be <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	4a7e      	ldr	r2, [pc, #504]	; (8006398 <HAL_SD_ReadBlocks+0x2e4>)
 800619e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80061a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80061a6:	431a      	orrs	r2, r3
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	2201      	movs	r2, #1
 80061b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	2200      	movs	r2, #0
 80061b8:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80061ba:	2301      	movs	r3, #1
 80061bc:	e159      	b.n	8006472 <HAL_SD_ReadBlocks+0x3be>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 80061be:	69bb      	ldr	r3, [r7, #24]
 80061c0:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 80061c2:	e061      	b.n	8006288 <HAL_SD_ReadBlocks+0x1d4>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061ca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d03c      	beq.n	800624c <HAL_SD_ReadBlocks+0x198>
 80061d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d039      	beq.n	800624c <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 80061d8:	2300      	movs	r3, #0
 80061da:	643b      	str	r3, [r7, #64]	; 0x40
 80061dc:	e033      	b.n	8006246 <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	4618      	mov	r0, r3
 80061e4:	f001 fc93 	bl	8007b0e <SDIO_ReadFIFO>
 80061e8:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 80061ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061ec:	b2da      	uxtb	r2, r3
 80061ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061f0:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80061f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061f4:	3301      	adds	r3, #1
 80061f6:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80061f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061fa:	3b01      	subs	r3, #1
 80061fc:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 80061fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006200:	0a1b      	lsrs	r3, r3, #8
 8006202:	b2da      	uxtb	r2, r3
 8006204:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006206:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8006208:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800620a:	3301      	adds	r3, #1
 800620c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800620e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006210:	3b01      	subs	r3, #1
 8006212:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8006214:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006216:	0c1b      	lsrs	r3, r3, #16
 8006218:	b2da      	uxtb	r2, r3
 800621a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800621c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800621e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006220:	3301      	adds	r3, #1
 8006222:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8006224:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006226:	3b01      	subs	r3, #1
 8006228:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800622a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800622c:	0e1b      	lsrs	r3, r3, #24
 800622e:	b2da      	uxtb	r2, r3
 8006230:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006232:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8006234:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006236:	3301      	adds	r3, #1
 8006238:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800623a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800623c:	3b01      	subs	r3, #1
 800623e:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 8006240:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006242:	3301      	adds	r3, #1
 8006244:	643b      	str	r3, [r7, #64]	; 0x40
 8006246:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006248:	2b07      	cmp	r3, #7
 800624a:	d9c8      	bls.n	80061de <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800624c:	f7fd f952 	bl	80034f4 <HAL_GetTick>
 8006250:	4602      	mov	r2, r0
 8006252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006254:	1ad3      	subs	r3, r2, r3
 8006256:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006258:	429a      	cmp	r2, r3
 800625a:	d902      	bls.n	8006262 <HAL_SD_ReadBlocks+0x1ae>
 800625c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800625e:	2b00      	cmp	r3, #0
 8006260:	d112      	bne.n	8006288 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	4a4c      	ldr	r2, [pc, #304]	; (8006398 <HAL_SD_ReadBlocks+0x2e4>)
 8006268:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800626e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	2201      	movs	r2, #1
 800627a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	2200      	movs	r2, #0
 8006282:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8006284:	2303      	movs	r3, #3
 8006286:	e0f4      	b.n	8006472 <HAL_SD_ReadBlocks+0x3be>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800628e:	f240 332a 	movw	r3, #810	; 0x32a
 8006292:	4013      	ands	r3, r2
 8006294:	2b00      	cmp	r3, #0
 8006296:	d095      	beq.n	80061c4 <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800629e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d022      	beq.n	80062ec <HAL_SD_ReadBlocks+0x238>
 80062a6:	683b      	ldr	r3, [r7, #0]
 80062a8:	2b01      	cmp	r3, #1
 80062aa:	d91f      	bls.n	80062ec <HAL_SD_ReadBlocks+0x238>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062b0:	2b03      	cmp	r3, #3
 80062b2:	d01b      	beq.n	80062ec <HAL_SD_ReadBlocks+0x238>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	4618      	mov	r0, r3
 80062ba:	f001 fd83 	bl	8007dc4 <SDMMC_CmdStopTransfer>
 80062be:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 80062c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d012      	beq.n	80062ec <HAL_SD_ReadBlocks+0x238>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	4a33      	ldr	r2, [pc, #204]	; (8006398 <HAL_SD_ReadBlocks+0x2e4>)
 80062cc:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80062d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80062d4:	431a      	orrs	r2, r3
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	2201      	movs	r2, #1
 80062de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	2200      	movs	r2, #0
 80062e6:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 80062e8:	2301      	movs	r3, #1
 80062ea:	e0c2      	b.n	8006472 <HAL_SD_ReadBlocks+0x3be>
      }
    }

    /* Get error state */
#if defined(SDIO_STA_STBITERR)
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062f2:	f003 0308 	and.w	r3, r3, #8
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d106      	bne.n	8006308 <HAL_SD_ReadBlocks+0x254>
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006300:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006304:	2b00      	cmp	r3, #0
 8006306:	d012      	beq.n	800632e <HAL_SD_ReadBlocks+0x27a>
#else /* SDIO_STA_STBITERR not defined */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
#endif /* SDIO_STA_STBITERR */
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	4a22      	ldr	r2, [pc, #136]	; (8006398 <HAL_SD_ReadBlocks+0x2e4>)
 800630e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006314:	f043 0208 	orr.w	r2, r3, #8
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	2201      	movs	r2, #1
 8006320:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	2200      	movs	r2, #0
 8006328:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800632a:	2301      	movs	r3, #1
 800632c:	e0a1      	b.n	8006472 <HAL_SD_ReadBlocks+0x3be>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006334:	f003 0302 	and.w	r3, r3, #2
 8006338:	2b00      	cmp	r3, #0
 800633a:	d012      	beq.n	8006362 <HAL_SD_ReadBlocks+0x2ae>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	4a15      	ldr	r2, [pc, #84]	; (8006398 <HAL_SD_ReadBlocks+0x2e4>)
 8006342:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006348:	f043 0202 	orr.w	r2, r3, #2
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	2201      	movs	r2, #1
 8006354:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	2200      	movs	r2, #0
 800635c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800635e:	2301      	movs	r3, #1
 8006360:	e087      	b.n	8006472 <HAL_SD_ReadBlocks+0x3be>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006368:	f003 0320 	and.w	r3, r3, #32
 800636c:	2b00      	cmp	r3, #0
 800636e:	d064      	beq.n	800643a <HAL_SD_ReadBlocks+0x386>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	4a08      	ldr	r2, [pc, #32]	; (8006398 <HAL_SD_ReadBlocks+0x2e4>)
 8006376:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800637c:	f043 0220 	orr.w	r2, r3, #32
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	2201      	movs	r2, #1
 8006388:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	2200      	movs	r2, #0
 8006390:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006392:	2301      	movs	r3, #1
 8006394:	e06d      	b.n	8006472 <HAL_SD_ReadBlocks+0x3be>
 8006396:	bf00      	nop
 8006398:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	4618      	mov	r0, r3
 80063a2:	f001 fbb4 	bl	8007b0e <SDIO_ReadFIFO>
 80063a6:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 80063a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063aa:	b2da      	uxtb	r2, r3
 80063ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063ae:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80063b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063b2:	3301      	adds	r3, #1
 80063b4:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 80063b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063b8:	3b01      	subs	r3, #1
 80063ba:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 80063bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063be:	0a1b      	lsrs	r3, r3, #8
 80063c0:	b2da      	uxtb	r2, r3
 80063c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063c4:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80063c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063c8:	3301      	adds	r3, #1
 80063ca:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 80063cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063ce:	3b01      	subs	r3, #1
 80063d0:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 80063d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063d4:	0c1b      	lsrs	r3, r3, #16
 80063d6:	b2da      	uxtb	r2, r3
 80063d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063da:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80063dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063de:	3301      	adds	r3, #1
 80063e0:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 80063e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063e4:	3b01      	subs	r3, #1
 80063e6:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 80063e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063ea:	0e1b      	lsrs	r3, r3, #24
 80063ec:	b2da      	uxtb	r2, r3
 80063ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063f0:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80063f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063f4:	3301      	adds	r3, #1
 80063f6:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 80063f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063fa:	3b01      	subs	r3, #1
 80063fc:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80063fe:	f7fd f879 	bl	80034f4 <HAL_GetTick>
 8006402:	4602      	mov	r2, r0
 8006404:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006406:	1ad3      	subs	r3, r2, r3
 8006408:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800640a:	429a      	cmp	r2, r3
 800640c:	d902      	bls.n	8006414 <HAL_SD_ReadBlocks+0x360>
 800640e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006410:	2b00      	cmp	r3, #0
 8006412:	d112      	bne.n	800643a <HAL_SD_ReadBlocks+0x386>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	4a18      	ldr	r2, [pc, #96]	; (800647c <HAL_SD_ReadBlocks+0x3c8>)
 800641a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006420:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	2201      	movs	r2, #1
 800642c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	2200      	movs	r2, #0
 8006434:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8006436:	2301      	movs	r3, #1
 8006438:	e01b      	b.n	8006472 <HAL_SD_ReadBlocks+0x3be>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006440:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006444:	2b00      	cmp	r3, #0
 8006446:	d002      	beq.n	800644e <HAL_SD_ReadBlocks+0x39a>
 8006448:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800644a:	2b00      	cmp	r3, #0
 800644c:	d1a6      	bne.n	800639c <HAL_SD_ReadBlocks+0x2e8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f240 523a 	movw	r2, #1338	; 0x53a
 8006456:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	2201      	movs	r2, #1
 800645c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8006460:	2300      	movs	r3, #0
 8006462:	e006      	b.n	8006472 <HAL_SD_ReadBlocks+0x3be>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006468:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006470:	2301      	movs	r3, #1
  }
}
 8006472:	4618      	mov	r0, r3
 8006474:	3748      	adds	r7, #72	; 0x48
 8006476:	46bd      	mov	sp, r7
 8006478:	bd80      	pop	{r7, pc}
 800647a:	bf00      	nop
 800647c:	004005ff 	.word	0x004005ff

08006480 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8006480:	b580      	push	{r7, lr}
 8006482:	b092      	sub	sp, #72	; 0x48
 8006484:	af00      	add	r7, sp, #0
 8006486:	60f8      	str	r0, [r7, #12]
 8006488:	60b9      	str	r1, [r7, #8]
 800648a:	607a      	str	r2, [r7, #4]
 800648c:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800648e:	f7fd f831 	bl	80034f4 <HAL_GetTick>
 8006492:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8006498:	68bb      	ldr	r3, [r7, #8]
 800649a:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 800649c:	68bb      	ldr	r3, [r7, #8]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d107      	bne.n	80064b2 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064a6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80064ae:	2301      	movs	r3, #1
 80064b0:	e16d      	b.n	800678e <HAL_SD_WriteBlocks+0x30e>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80064b8:	b2db      	uxtb	r3, r3
 80064ba:	2b01      	cmp	r3, #1
 80064bc:	f040 8160 	bne.w	8006780 <HAL_SD_WriteBlocks+0x300>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	2200      	movs	r2, #0
 80064c4:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80064c6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80064c8:	683b      	ldr	r3, [r7, #0]
 80064ca:	441a      	add	r2, r3
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064d0:	429a      	cmp	r2, r3
 80064d2:	d907      	bls.n	80064e4 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064d8:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80064e0:	2301      	movs	r3, #1
 80064e2:	e154      	b.n	800678e <HAL_SD_WriteBlocks+0x30e>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	2203      	movs	r2, #3
 80064e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	2200      	movs	r2, #0
 80064f2:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064f8:	2b01      	cmp	r3, #1
 80064fa:	d002      	beq.n	8006502 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 80064fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064fe:	025b      	lsls	r3, r3, #9
 8006500:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006502:	f04f 33ff 	mov.w	r3, #4294967295
 8006506:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	025b      	lsls	r3, r3, #9
 800650c:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800650e:	2390      	movs	r3, #144	; 0x90
 8006510:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8006512:	2300      	movs	r3, #0
 8006514:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8006516:	2300      	movs	r3, #0
 8006518:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 800651a:	2301      	movs	r3, #1
 800651c:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	f107 0218 	add.w	r2, r7, #24
 8006526:	4611      	mov	r1, r2
 8006528:	4618      	mov	r0, r3
 800652a:	f001 fb74 	bl	8007c16 <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800652e:	683b      	ldr	r3, [r7, #0]
 8006530:	2b01      	cmp	r3, #1
 8006532:	d90a      	bls.n	800654a <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	2220      	movs	r2, #32
 8006538:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006540:	4618      	mov	r0, r3
 8006542:	f001 fc1c 	bl	8007d7e <SDMMC_CmdWriteMultiBlock>
 8006546:	6478      	str	r0, [r7, #68]	; 0x44
 8006548:	e009      	b.n	800655e <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	2210      	movs	r2, #16
 800654e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006556:	4618      	mov	r0, r3
 8006558:	f001 fbef 	bl	8007d3a <SDMMC_CmdWriteSingleBlock>
 800655c:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800655e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006560:	2b00      	cmp	r3, #0
 8006562:	d012      	beq.n	800658a <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	4a8b      	ldr	r2, [pc, #556]	; (8006798 <HAL_SD_WriteBlocks+0x318>)
 800656a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006570:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006572:	431a      	orrs	r2, r3
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	2201      	movs	r2, #1
 800657c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	2200      	movs	r2, #0
 8006584:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006586:	2301      	movs	r3, #1
 8006588:	e101      	b.n	800678e <HAL_SD_WriteBlocks+0x30e>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 800658a:	69fb      	ldr	r3, [r7, #28]
 800658c:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 800658e:	e065      	b.n	800665c <HAL_SD_WriteBlocks+0x1dc>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006596:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800659a:	2b00      	cmp	r3, #0
 800659c:	d040      	beq.n	8006620 <HAL_SD_WriteBlocks+0x1a0>
 800659e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d03d      	beq.n	8006620 <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 80065a4:	2300      	movs	r3, #0
 80065a6:	643b      	str	r3, [r7, #64]	; 0x40
 80065a8:	e037      	b.n	800661a <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 80065aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065ac:	781b      	ldrb	r3, [r3, #0]
 80065ae:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80065b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065b2:	3301      	adds	r3, #1
 80065b4:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80065b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065b8:	3b01      	subs	r3, #1
 80065ba:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 80065bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065be:	781b      	ldrb	r3, [r3, #0]
 80065c0:	021a      	lsls	r2, r3, #8
 80065c2:	697b      	ldr	r3, [r7, #20]
 80065c4:	4313      	orrs	r3, r2
 80065c6:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80065c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065ca:	3301      	adds	r3, #1
 80065cc:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80065ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065d0:	3b01      	subs	r3, #1
 80065d2:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 80065d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065d6:	781b      	ldrb	r3, [r3, #0]
 80065d8:	041a      	lsls	r2, r3, #16
 80065da:	697b      	ldr	r3, [r7, #20]
 80065dc:	4313      	orrs	r3, r2
 80065de:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80065e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065e2:	3301      	adds	r3, #1
 80065e4:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80065e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065e8:	3b01      	subs	r3, #1
 80065ea:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 80065ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065ee:	781b      	ldrb	r3, [r3, #0]
 80065f0:	061a      	lsls	r2, r3, #24
 80065f2:	697b      	ldr	r3, [r7, #20]
 80065f4:	4313      	orrs	r3, r2
 80065f6:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80065f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065fa:	3301      	adds	r3, #1
 80065fc:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80065fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006600:	3b01      	subs	r3, #1
 8006602:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	f107 0214 	add.w	r2, r7, #20
 800660c:	4611      	mov	r1, r2
 800660e:	4618      	mov	r0, r3
 8006610:	f001 fa8a 	bl	8007b28 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8006614:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006616:	3301      	adds	r3, #1
 8006618:	643b      	str	r3, [r7, #64]	; 0x40
 800661a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800661c:	2b07      	cmp	r3, #7
 800661e:	d9c4      	bls.n	80065aa <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8006620:	f7fc ff68 	bl	80034f4 <HAL_GetTick>
 8006624:	4602      	mov	r2, r0
 8006626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006628:	1ad3      	subs	r3, r2, r3
 800662a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800662c:	429a      	cmp	r2, r3
 800662e:	d902      	bls.n	8006636 <HAL_SD_WriteBlocks+0x1b6>
 8006630:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006632:	2b00      	cmp	r3, #0
 8006634:	d112      	bne.n	800665c <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	4a57      	ldr	r2, [pc, #348]	; (8006798 <HAL_SD_WriteBlocks+0x318>)
 800663c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006642:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006644:	431a      	orrs	r2, r3
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	2201      	movs	r2, #1
 800664e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	2200      	movs	r2, #0
 8006656:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8006658:	2303      	movs	r3, #3
 800665a:	e098      	b.n	800678e <HAL_SD_WriteBlocks+0x30e>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006662:	f240 331a 	movw	r3, #794	; 0x31a
 8006666:	4013      	ands	r3, r2
 8006668:	2b00      	cmp	r3, #0
 800666a:	d091      	beq.n	8006590 <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006672:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006676:	2b00      	cmp	r3, #0
 8006678:	d022      	beq.n	80066c0 <HAL_SD_WriteBlocks+0x240>
 800667a:	683b      	ldr	r3, [r7, #0]
 800667c:	2b01      	cmp	r3, #1
 800667e:	d91f      	bls.n	80066c0 <HAL_SD_WriteBlocks+0x240>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006684:	2b03      	cmp	r3, #3
 8006686:	d01b      	beq.n	80066c0 <HAL_SD_WriteBlocks+0x240>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	4618      	mov	r0, r3
 800668e:	f001 fb99 	bl	8007dc4 <SDMMC_CmdStopTransfer>
 8006692:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8006694:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006696:	2b00      	cmp	r3, #0
 8006698:	d012      	beq.n	80066c0 <HAL_SD_WriteBlocks+0x240>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	4a3e      	ldr	r2, [pc, #248]	; (8006798 <HAL_SD_WriteBlocks+0x318>)
 80066a0:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80066a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80066a8:	431a      	orrs	r2, r3
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	2201      	movs	r2, #1
 80066b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	2200      	movs	r2, #0
 80066ba:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 80066bc:	2301      	movs	r3, #1
 80066be:	e066      	b.n	800678e <HAL_SD_WriteBlocks+0x30e>
      }
    }

    /* Get error state */
#if defined(SDIO_STA_STBITERR)
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066c6:	f003 0308 	and.w	r3, r3, #8
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d106      	bne.n	80066dc <HAL_SD_WriteBlocks+0x25c>
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d012      	beq.n	8006702 <HAL_SD_WriteBlocks+0x282>
#else /* SDIO_STA_STBITERR not defined */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
#endif /* SDIO_STA_STBITERR */		
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	4a2d      	ldr	r2, [pc, #180]	; (8006798 <HAL_SD_WriteBlocks+0x318>)
 80066e2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066e8:	f043 0208 	orr.w	r2, r3, #8
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	2201      	movs	r2, #1
 80066f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	2200      	movs	r2, #0
 80066fc:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80066fe:	2301      	movs	r3, #1
 8006700:	e045      	b.n	800678e <HAL_SD_WriteBlocks+0x30e>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006708:	f003 0302 	and.w	r3, r3, #2
 800670c:	2b00      	cmp	r3, #0
 800670e:	d012      	beq.n	8006736 <HAL_SD_WriteBlocks+0x2b6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	4a20      	ldr	r2, [pc, #128]	; (8006798 <HAL_SD_WriteBlocks+0x318>)
 8006716:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800671c:	f043 0202 	orr.w	r2, r3, #2
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	2201      	movs	r2, #1
 8006728:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	2200      	movs	r2, #0
 8006730:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006732:	2301      	movs	r3, #1
 8006734:	e02b      	b.n	800678e <HAL_SD_WriteBlocks+0x30e>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800673c:	f003 0310 	and.w	r3, r3, #16
 8006740:	2b00      	cmp	r3, #0
 8006742:	d012      	beq.n	800676a <HAL_SD_WriteBlocks+0x2ea>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	4a13      	ldr	r2, [pc, #76]	; (8006798 <HAL_SD_WriteBlocks+0x318>)
 800674a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006750:	f043 0210 	orr.w	r2, r3, #16
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	2201      	movs	r2, #1
 800675c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	2200      	movs	r2, #0
 8006764:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006766:	2301      	movs	r3, #1
 8006768:	e011      	b.n	800678e <HAL_SD_WriteBlocks+0x30e>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	f240 523a 	movw	r2, #1338	; 0x53a
 8006772:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	2201      	movs	r2, #1
 8006778:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 800677c:	2300      	movs	r3, #0
 800677e:	e006      	b.n	800678e <HAL_SD_WriteBlocks+0x30e>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006784:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800678c:	2301      	movs	r3, #1
  }
}
 800678e:	4618      	mov	r0, r3
 8006790:	3748      	adds	r7, #72	; 0x48
 8006792:	46bd      	mov	sp, r7
 8006794:	bd80      	pop	{r7, pc}
 8006796:	bf00      	nop
 8006798:	004005ff 	.word	0x004005ff

0800679c <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800679c:	b580      	push	{r7, lr}
 800679e:	b08c      	sub	sp, #48	; 0x30
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	60f8      	str	r0, [r7, #12]
 80067a4:	60b9      	str	r1, [r7, #8]
 80067a6:	607a      	str	r2, [r7, #4]
 80067a8:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 80067ae:	68bb      	ldr	r3, [r7, #8]
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d107      	bne.n	80067c4 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067b8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80067c0:	2301      	movs	r3, #1
 80067c2:	e0c0      	b.n	8006946 <HAL_SD_ReadBlocks_DMA+0x1aa>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80067ca:	b2db      	uxtb	r3, r3
 80067cc:	2b01      	cmp	r3, #1
 80067ce:	f040 80b9 	bne.w	8006944 <HAL_SD_ReadBlocks_DMA+0x1a8>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	2200      	movs	r2, #0
 80067d6:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80067d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80067da:	683b      	ldr	r3, [r7, #0]
 80067dc:	441a      	add	r2, r3
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067e2:	429a      	cmp	r2, r3
 80067e4:	d907      	bls.n	80067f6 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067ea:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80067f2:	2301      	movs	r3, #1
 80067f4:	e0a7      	b.n	8006946 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	2203      	movs	r2, #3
 80067fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	2200      	movs	r2, #0
 8006804:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800680c:	68fa      	ldr	r2, [r7, #12]
 800680e:	6812      	ldr	r2, [r2, #0]
 8006810:	f443 734a 	orr.w	r3, r3, #808	; 0x328
 8006814:	f043 0302 	orr.w	r3, r3, #2
 8006818:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800681e:	4a4c      	ldr	r2, [pc, #304]	; (8006950 <HAL_SD_ReadBlocks_DMA+0x1b4>)
 8006820:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006826:	4a4b      	ldr	r2, [pc, #300]	; (8006954 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 8006828:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800682e:	2200      	movs	r2, #0
 8006830:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006836:	2200      	movs	r2, #0
 8006838:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800684a:	689a      	ldr	r2, [r3, #8]
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	430a      	orrs	r2, r1
 8006854:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	3380      	adds	r3, #128	; 0x80
 8006860:	4619      	mov	r1, r3
 8006862:	68ba      	ldr	r2, [r7, #8]
 8006864:	683b      	ldr	r3, [r7, #0]
 8006866:	025b      	lsls	r3, r3, #9
 8006868:	089b      	lsrs	r3, r3, #2
 800686a:	f7fd f833 	bl	80038d4 <HAL_DMA_Start_IT>
 800686e:	4603      	mov	r3, r0
 8006870:	2b00      	cmp	r3, #0
 8006872:	d017      	beq.n	80068a4 <HAL_SD_ReadBlocks_DMA+0x108>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 8006882:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	4a33      	ldr	r2, [pc, #204]	; (8006958 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 800688a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006890:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	2201      	movs	r2, #1
 800689c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80068a0:	2301      	movs	r3, #1
 80068a2:	e050      	b.n	8006946 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 80068a4:	4b2d      	ldr	r3, [pc, #180]	; (800695c <HAL_SD_ReadBlocks_DMA+0x1c0>)
 80068a6:	2201      	movs	r2, #1
 80068a8:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068ae:	2b01      	cmp	r3, #1
 80068b0:	d002      	beq.n	80068b8 <HAL_SD_ReadBlocks_DMA+0x11c>
      {
        add *= 512U;
 80068b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068b4:	025b      	lsls	r3, r3, #9
 80068b6:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80068b8:	f04f 33ff 	mov.w	r3, #4294967295
 80068bc:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80068be:	683b      	ldr	r3, [r7, #0]
 80068c0:	025b      	lsls	r3, r3, #9
 80068c2:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80068c4:	2390      	movs	r3, #144	; 0x90
 80068c6:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80068c8:	2302      	movs	r3, #2
 80068ca:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80068cc:	2300      	movs	r3, #0
 80068ce:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 80068d0:	2301      	movs	r3, #1
 80068d2:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	f107 0210 	add.w	r2, r7, #16
 80068dc:	4611      	mov	r1, r2
 80068de:	4618      	mov	r0, r3
 80068e0:	f001 f999 	bl	8007c16 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 80068e4:	683b      	ldr	r3, [r7, #0]
 80068e6:	2b01      	cmp	r3, #1
 80068e8:	d90a      	bls.n	8006900 <HAL_SD_ReadBlocks_DMA+0x164>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	2282      	movs	r2, #130	; 0x82
 80068ee:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80068f6:	4618      	mov	r0, r3
 80068f8:	f001 f9fd 	bl	8007cf6 <SDMMC_CmdReadMultiBlock>
 80068fc:	62f8      	str	r0, [r7, #44]	; 0x2c
 80068fe:	e009      	b.n	8006914 <HAL_SD_ReadBlocks_DMA+0x178>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	2281      	movs	r2, #129	; 0x81
 8006904:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800690c:	4618      	mov	r0, r3
 800690e:	f001 f9d0 	bl	8007cb2 <SDMMC_CmdReadSingleBlock>
 8006912:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8006914:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006916:	2b00      	cmp	r3, #0
 8006918:	d012      	beq.n	8006940 <HAL_SD_ReadBlocks_DMA+0x1a4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	4a0e      	ldr	r2, [pc, #56]	; (8006958 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8006920:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006926:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006928:	431a      	orrs	r2, r3
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	2201      	movs	r2, #1
 8006932:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	2200      	movs	r2, #0
 800693a:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800693c:	2301      	movs	r3, #1
 800693e:	e002      	b.n	8006946 <HAL_SD_ReadBlocks_DMA+0x1aa>
      }

      return HAL_OK;
 8006940:	2300      	movs	r3, #0
 8006942:	e000      	b.n	8006946 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
  }
  else
  {
    return HAL_BUSY;
 8006944:	2302      	movs	r3, #2
  }
}
 8006946:	4618      	mov	r0, r3
 8006948:	3730      	adds	r7, #48	; 0x30
 800694a:	46bd      	mov	sp, r7
 800694c:	bd80      	pop	{r7, pc}
 800694e:	bf00      	nop
 8006950:	08007195 	.word	0x08007195
 8006954:	08007205 	.word	0x08007205
 8006958:	004005ff 	.word	0x004005ff
 800695c:	4225858c 	.word	0x4225858c

08006960 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8006960:	b580      	push	{r7, lr}
 8006962:	b084      	sub	sp, #16
 8006964:	af00      	add	r7, sp, #0
 8006966:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800696c:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006974:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006978:	2b00      	cmp	r3, #0
 800697a:	d008      	beq.n	800698e <HAL_SD_IRQHandler+0x2e>
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	f003 0308 	and.w	r3, r3, #8
 8006982:	2b00      	cmp	r3, #0
 8006984:	d003      	beq.n	800698e <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8006986:	6878      	ldr	r0, [r7, #4]
 8006988:	f000 fff0 	bl	800796c <SD_Read_IT>
 800698c:	e165      	b.n	8006c5a <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006994:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006998:	2b00      	cmp	r3, #0
 800699a:	f000 808f 	beq.w	8006abc <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80069a6:	639a      	str	r2, [r3, #56]	; 0x38

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069ae:	687a      	ldr	r2, [r7, #4]
 80069b0:	6812      	ldr	r2, [r2, #0]
 80069b2:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 80069b6:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 80069ba:	63d3      	str	r3, [r2, #60]	; 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	f022 0201 	bic.w	r2, r2, #1
 80069ca:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	f003 0308 	and.w	r3, r3, #8
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d039      	beq.n	8006a4a <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	f003 0302 	and.w	r3, r3, #2
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d104      	bne.n	80069ea <HAL_SD_IRQHandler+0x8a>
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	f003 0320 	and.w	r3, r3, #32
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d011      	beq.n	8006a0e <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	4618      	mov	r0, r3
 80069f0:	f001 f9e8 	bl	8007dc4 <SDMMC_CmdStopTransfer>
 80069f4:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 80069f6:	68bb      	ldr	r3, [r7, #8]
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d008      	beq.n	8006a0e <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a00:	68bb      	ldr	r3, [r7, #8]
 8006a02:	431a      	orrs	r2, r3
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8006a08:	6878      	ldr	r0, [r7, #4]
 8006a0a:	f000 f92f 	bl	8006c6c <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	f240 523a 	movw	r2, #1338	; 0x53a
 8006a16:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	2201      	movs	r2, #1
 8006a1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	2200      	movs	r2, #0
 8006a24:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	f003 0301 	and.w	r3, r3, #1
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d104      	bne.n	8006a3a <HAL_SD_IRQHandler+0xda>
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	f003 0302 	and.w	r3, r3, #2
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d003      	beq.n	8006a42 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8006a3a:	6878      	ldr	r0, [r7, #4]
 8006a3c:	f003 f9a0 	bl	8009d80 <HAL_SD_RxCpltCallback>
 8006a40:	e10b      	b.n	8006c5a <HAL_SD_IRQHandler+0x2fa>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8006a42:	6878      	ldr	r0, [r7, #4]
 8006a44:	f003 f992 	bl	8009d6c <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8006a48:	e107      	b.n	8006c5a <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	f000 8102 	beq.w	8006c5a <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	f003 0320 	and.w	r3, r3, #32
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d011      	beq.n	8006a84 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	4618      	mov	r0, r3
 8006a66:	f001 f9ad 	bl	8007dc4 <SDMMC_CmdStopTransfer>
 8006a6a:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8006a6c:	68bb      	ldr	r3, [r7, #8]
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d008      	beq.n	8006a84 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a76:	68bb      	ldr	r3, [r7, #8]
 8006a78:	431a      	orrs	r2, r3
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8006a7e:	6878      	ldr	r0, [r7, #4]
 8006a80:	f000 f8f4 	bl	8006c6c <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	f003 0301 	and.w	r3, r3, #1
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	f040 80e5 	bne.w	8006c5a <HAL_SD_IRQHandler+0x2fa>
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	f003 0302 	and.w	r3, r3, #2
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	f040 80df 	bne.w	8006c5a <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	f022 0208 	bic.w	r2, r2, #8
 8006aaa:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	2201      	movs	r2, #1
 8006ab0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8006ab4:	6878      	ldr	r0, [r7, #4]
 8006ab6:	f003 f959 	bl	8009d6c <HAL_SD_TxCpltCallback>
}
 8006aba:	e0ce      	b.n	8006c5a <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ac2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d008      	beq.n	8006adc <HAL_SD_IRQHandler+0x17c>
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	f003 0308 	and.w	r3, r3, #8
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d003      	beq.n	8006adc <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 8006ad4:	6878      	ldr	r0, [r7, #4]
 8006ad6:	f000 ff9a 	bl	8007a0e <SD_Write_IT>
 8006ada:	e0be      	b.n	8006c5a <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006ae2:	f240 233a 	movw	r3, #570	; 0x23a
 8006ae6:	4013      	ands	r3, r2
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	f000 80b6 	beq.w	8006c5a <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006af4:	f003 0302 	and.w	r3, r3, #2
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d005      	beq.n	8006b08 <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b00:	f043 0202 	orr.w	r2, r3, #2
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b0e:	f003 0308 	and.w	r3, r3, #8
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d005      	beq.n	8006b22 <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b1a:	f043 0208 	orr.w	r2, r3, #8
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b28:	f003 0320 	and.w	r3, r3, #32
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d005      	beq.n	8006b3c <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b34:	f043 0220 	orr.w	r2, r3, #32
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b42:	f003 0310 	and.w	r3, r3, #16
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d005      	beq.n	8006b56 <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b4e:	f043 0210 	orr.w	r2, r3, #16
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b5c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d005      	beq.n	8006b70 <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b68:	f043 0208 	orr.w	r2, r3, #8
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	f240 723a 	movw	r2, #1850	; 0x73a
 8006b78:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b80:	687a      	ldr	r2, [r7, #4]
 8006b82:	6812      	ldr	r2, [r2, #0]
 8006b84:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 8006b88:	f023 0302 	bic.w	r3, r3, #2
 8006b8c:	63d3      	str	r3, [r2, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	4618      	mov	r0, r3
 8006b94:	f001 f916 	bl	8007dc4 <SDMMC_CmdStopTransfer>
 8006b98:	4602      	mov	r2, r0
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b9e:	431a      	orrs	r2, r3
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	f003 0308 	and.w	r3, r3, #8
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d00a      	beq.n	8006bc4 <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	2201      	movs	r2, #1
 8006bb2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	2200      	movs	r2, #0
 8006bba:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8006bbc:	6878      	ldr	r0, [r7, #4]
 8006bbe:	f000 f855 	bl	8006c6c <HAL_SD_ErrorCallback>
}
 8006bc2:	e04a      	b.n	8006c5a <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d045      	beq.n	8006c5a <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	f003 0310 	and.w	r3, r3, #16
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d104      	bne.n	8006be2 <HAL_SD_IRQHandler+0x282>
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	f003 0320 	and.w	r3, r3, #32
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d011      	beq.n	8006c06 <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006be6:	4a1f      	ldr	r2, [pc, #124]	; (8006c64 <HAL_SD_IRQHandler+0x304>)
 8006be8:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bee:	4618      	mov	r0, r3
 8006bf0:	f7fc fec8 	bl	8003984 <HAL_DMA_Abort_IT>
 8006bf4:	4603      	mov	r3, r0
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d02f      	beq.n	8006c5a <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bfe:	4618      	mov	r0, r3
 8006c00:	f000 fb52 	bl	80072a8 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8006c04:	e029      	b.n	8006c5a <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	f003 0301 	and.w	r3, r3, #1
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d104      	bne.n	8006c1a <HAL_SD_IRQHandler+0x2ba>
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	f003 0302 	and.w	r3, r3, #2
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d011      	beq.n	8006c3e <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c1e:	4a12      	ldr	r2, [pc, #72]	; (8006c68 <HAL_SD_IRQHandler+0x308>)
 8006c20:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c26:	4618      	mov	r0, r3
 8006c28:	f7fc feac 	bl	8003984 <HAL_DMA_Abort_IT>
 8006c2c:	4603      	mov	r3, r0
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d013      	beq.n	8006c5a <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c36:	4618      	mov	r0, r3
 8006c38:	f000 fb6d 	bl	8007316 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8006c3c:	e00d      	b.n	8006c5a <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	2200      	movs	r2, #0
 8006c42:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2201      	movs	r2, #1
 8006c48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2200      	movs	r2, #0
 8006c50:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 8006c52:	6878      	ldr	r0, [r7, #4]
 8006c54:	f003 f880 	bl	8009d58 <HAL_SD_AbortCallback>
}
 8006c58:	e7ff      	b.n	8006c5a <HAL_SD_IRQHandler+0x2fa>
 8006c5a:	bf00      	nop
 8006c5c:	3710      	adds	r7, #16
 8006c5e:	46bd      	mov	sp, r7
 8006c60:	bd80      	pop	{r7, pc}
 8006c62:	bf00      	nop
 8006c64:	080072a9 	.word	0x080072a9
 8006c68:	08007317 	.word	0x08007317

08006c6c <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8006c6c:	b480      	push	{r7}
 8006c6e:	b083      	sub	sp, #12
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8006c74:	bf00      	nop
 8006c76:	370c      	adds	r7, #12
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c7e:	4770      	bx	lr

08006c80 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8006c80:	b480      	push	{r7}
 8006c82:	b083      	sub	sp, #12
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	6078      	str	r0, [r7, #4]
 8006c88:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006c8e:	0f9b      	lsrs	r3, r3, #30
 8006c90:	b2da      	uxtb	r2, r3
 8006c92:	683b      	ldr	r3, [r7, #0]
 8006c94:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006c9a:	0e9b      	lsrs	r3, r3, #26
 8006c9c:	b2db      	uxtb	r3, r3
 8006c9e:	f003 030f 	and.w	r3, r3, #15
 8006ca2:	b2da      	uxtb	r2, r3
 8006ca4:	683b      	ldr	r3, [r7, #0]
 8006ca6:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006cac:	0e1b      	lsrs	r3, r3, #24
 8006cae:	b2db      	uxtb	r3, r3
 8006cb0:	f003 0303 	and.w	r3, r3, #3
 8006cb4:	b2da      	uxtb	r2, r3
 8006cb6:	683b      	ldr	r3, [r7, #0]
 8006cb8:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006cbe:	0c1b      	lsrs	r3, r3, #16
 8006cc0:	b2da      	uxtb	r2, r3
 8006cc2:	683b      	ldr	r3, [r7, #0]
 8006cc4:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006cca:	0a1b      	lsrs	r3, r3, #8
 8006ccc:	b2da      	uxtb	r2, r3
 8006cce:	683b      	ldr	r3, [r7, #0]
 8006cd0:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006cd6:	b2da      	uxtb	r2, r3
 8006cd8:	683b      	ldr	r3, [r7, #0]
 8006cda:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006ce0:	0d1b      	lsrs	r3, r3, #20
 8006ce2:	b29a      	uxth	r2, r3
 8006ce4:	683b      	ldr	r3, [r7, #0]
 8006ce6:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006cec:	0c1b      	lsrs	r3, r3, #16
 8006cee:	b2db      	uxtb	r3, r3
 8006cf0:	f003 030f 	and.w	r3, r3, #15
 8006cf4:	b2da      	uxtb	r2, r3
 8006cf6:	683b      	ldr	r3, [r7, #0]
 8006cf8:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006cfe:	0bdb      	lsrs	r3, r3, #15
 8006d00:	b2db      	uxtb	r3, r3
 8006d02:	f003 0301 	and.w	r3, r3, #1
 8006d06:	b2da      	uxtb	r2, r3
 8006d08:	683b      	ldr	r3, [r7, #0]
 8006d0a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006d10:	0b9b      	lsrs	r3, r3, #14
 8006d12:	b2db      	uxtb	r3, r3
 8006d14:	f003 0301 	and.w	r3, r3, #1
 8006d18:	b2da      	uxtb	r2, r3
 8006d1a:	683b      	ldr	r3, [r7, #0]
 8006d1c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006d22:	0b5b      	lsrs	r3, r3, #13
 8006d24:	b2db      	uxtb	r3, r3
 8006d26:	f003 0301 	and.w	r3, r3, #1
 8006d2a:	b2da      	uxtb	r2, r3
 8006d2c:	683b      	ldr	r3, [r7, #0]
 8006d2e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006d34:	0b1b      	lsrs	r3, r3, #12
 8006d36:	b2db      	uxtb	r3, r3
 8006d38:	f003 0301 	and.w	r3, r3, #1
 8006d3c:	b2da      	uxtb	r2, r3
 8006d3e:	683b      	ldr	r3, [r7, #0]
 8006d40:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8006d42:	683b      	ldr	r3, [r7, #0]
 8006d44:	2200      	movs	r2, #0
 8006d46:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d163      	bne.n	8006e18 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006d54:	009a      	lsls	r2, r3, #2
 8006d56:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006d5a:	4013      	ands	r3, r2
 8006d5c:	687a      	ldr	r2, [r7, #4]
 8006d5e:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8006d60:	0f92      	lsrs	r2, r2, #30
 8006d62:	431a      	orrs	r2, r3
 8006d64:	683b      	ldr	r3, [r7, #0]
 8006d66:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006d6c:	0edb      	lsrs	r3, r3, #27
 8006d6e:	b2db      	uxtb	r3, r3
 8006d70:	f003 0307 	and.w	r3, r3, #7
 8006d74:	b2da      	uxtb	r2, r3
 8006d76:	683b      	ldr	r3, [r7, #0]
 8006d78:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006d7e:	0e1b      	lsrs	r3, r3, #24
 8006d80:	b2db      	uxtb	r3, r3
 8006d82:	f003 0307 	and.w	r3, r3, #7
 8006d86:	b2da      	uxtb	r2, r3
 8006d88:	683b      	ldr	r3, [r7, #0]
 8006d8a:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006d90:	0d5b      	lsrs	r3, r3, #21
 8006d92:	b2db      	uxtb	r3, r3
 8006d94:	f003 0307 	and.w	r3, r3, #7
 8006d98:	b2da      	uxtb	r2, r3
 8006d9a:	683b      	ldr	r3, [r7, #0]
 8006d9c:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006da2:	0c9b      	lsrs	r3, r3, #18
 8006da4:	b2db      	uxtb	r3, r3
 8006da6:	f003 0307 	and.w	r3, r3, #7
 8006daa:	b2da      	uxtb	r2, r3
 8006dac:	683b      	ldr	r3, [r7, #0]
 8006dae:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006db4:	0bdb      	lsrs	r3, r3, #15
 8006db6:	b2db      	uxtb	r3, r3
 8006db8:	f003 0307 	and.w	r3, r3, #7
 8006dbc:	b2da      	uxtb	r2, r3
 8006dbe:	683b      	ldr	r3, [r7, #0]
 8006dc0:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8006dc2:	683b      	ldr	r3, [r7, #0]
 8006dc4:	691b      	ldr	r3, [r3, #16]
 8006dc6:	1c5a      	adds	r2, r3, #1
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8006dcc:	683b      	ldr	r3, [r7, #0]
 8006dce:	7e1b      	ldrb	r3, [r3, #24]
 8006dd0:	b2db      	uxtb	r3, r3
 8006dd2:	f003 0307 	and.w	r3, r3, #7
 8006dd6:	3302      	adds	r3, #2
 8006dd8:	2201      	movs	r2, #1
 8006dda:	fa02 f303 	lsl.w	r3, r2, r3
 8006dde:	687a      	ldr	r2, [r7, #4]
 8006de0:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8006de2:	fb03 f202 	mul.w	r2, r3, r2
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8006dea:	683b      	ldr	r3, [r7, #0]
 8006dec:	7a1b      	ldrb	r3, [r3, #8]
 8006dee:	b2db      	uxtb	r3, r3
 8006df0:	f003 030f 	and.w	r3, r3, #15
 8006df4:	2201      	movs	r2, #1
 8006df6:	409a      	lsls	r2, r3
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e00:	687a      	ldr	r2, [r7, #4]
 8006e02:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8006e04:	0a52      	lsrs	r2, r2, #9
 8006e06:	fb03 f202 	mul.w	r2, r3, r2
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006e14:	661a      	str	r2, [r3, #96]	; 0x60
 8006e16:	e031      	b.n	8006e7c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e1c:	2b01      	cmp	r3, #1
 8006e1e:	d11d      	bne.n	8006e5c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006e24:	041b      	lsls	r3, r3, #16
 8006e26:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006e2e:	0c1b      	lsrs	r3, r3, #16
 8006e30:	431a      	orrs	r2, r3
 8006e32:	683b      	ldr	r3, [r7, #0]
 8006e34:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8006e36:	683b      	ldr	r3, [r7, #0]
 8006e38:	691b      	ldr	r3, [r3, #16]
 8006e3a:	3301      	adds	r3, #1
 8006e3c:	029a      	lsls	r2, r3, #10
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006e50:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	661a      	str	r2, [r3, #96]	; 0x60
 8006e5a:	e00f      	b.n	8006e7c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	4a58      	ldr	r2, [pc, #352]	; (8006fc4 <HAL_SD_GetCardCSD+0x344>)
 8006e62:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e68:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	2201      	movs	r2, #1
 8006e74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8006e78:	2301      	movs	r3, #1
 8006e7a:	e09d      	b.n	8006fb8 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006e80:	0b9b      	lsrs	r3, r3, #14
 8006e82:	b2db      	uxtb	r3, r3
 8006e84:	f003 0301 	and.w	r3, r3, #1
 8006e88:	b2da      	uxtb	r2, r3
 8006e8a:	683b      	ldr	r3, [r7, #0]
 8006e8c:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006e92:	09db      	lsrs	r3, r3, #7
 8006e94:	b2db      	uxtb	r3, r3
 8006e96:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006e9a:	b2da      	uxtb	r2, r3
 8006e9c:	683b      	ldr	r3, [r7, #0]
 8006e9e:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006ea4:	b2db      	uxtb	r3, r3
 8006ea6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006eaa:	b2da      	uxtb	r2, r3
 8006eac:	683b      	ldr	r3, [r7, #0]
 8006eae:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006eb4:	0fdb      	lsrs	r3, r3, #31
 8006eb6:	b2da      	uxtb	r2, r3
 8006eb8:	683b      	ldr	r3, [r7, #0]
 8006eba:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ec0:	0f5b      	lsrs	r3, r3, #29
 8006ec2:	b2db      	uxtb	r3, r3
 8006ec4:	f003 0303 	and.w	r3, r3, #3
 8006ec8:	b2da      	uxtb	r2, r3
 8006eca:	683b      	ldr	r3, [r7, #0]
 8006ecc:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ed2:	0e9b      	lsrs	r3, r3, #26
 8006ed4:	b2db      	uxtb	r3, r3
 8006ed6:	f003 0307 	and.w	r3, r3, #7
 8006eda:	b2da      	uxtb	r2, r3
 8006edc:	683b      	ldr	r3, [r7, #0]
 8006ede:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ee4:	0d9b      	lsrs	r3, r3, #22
 8006ee6:	b2db      	uxtb	r3, r3
 8006ee8:	f003 030f 	and.w	r3, r3, #15
 8006eec:	b2da      	uxtb	r2, r3
 8006eee:	683b      	ldr	r3, [r7, #0]
 8006ef0:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ef6:	0d5b      	lsrs	r3, r3, #21
 8006ef8:	b2db      	uxtb	r3, r3
 8006efa:	f003 0301 	and.w	r3, r3, #1
 8006efe:	b2da      	uxtb	r2, r3
 8006f00:	683b      	ldr	r3, [r7, #0]
 8006f02:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8006f06:	683b      	ldr	r3, [r7, #0]
 8006f08:	2200      	movs	r2, #0
 8006f0a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f12:	0c1b      	lsrs	r3, r3, #16
 8006f14:	b2db      	uxtb	r3, r3
 8006f16:	f003 0301 	and.w	r3, r3, #1
 8006f1a:	b2da      	uxtb	r2, r3
 8006f1c:	683b      	ldr	r3, [r7, #0]
 8006f1e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f26:	0bdb      	lsrs	r3, r3, #15
 8006f28:	b2db      	uxtb	r3, r3
 8006f2a:	f003 0301 	and.w	r3, r3, #1
 8006f2e:	b2da      	uxtb	r2, r3
 8006f30:	683b      	ldr	r3, [r7, #0]
 8006f32:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f3a:	0b9b      	lsrs	r3, r3, #14
 8006f3c:	b2db      	uxtb	r3, r3
 8006f3e:	f003 0301 	and.w	r3, r3, #1
 8006f42:	b2da      	uxtb	r2, r3
 8006f44:	683b      	ldr	r3, [r7, #0]
 8006f46:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f4e:	0b5b      	lsrs	r3, r3, #13
 8006f50:	b2db      	uxtb	r3, r3
 8006f52:	f003 0301 	and.w	r3, r3, #1
 8006f56:	b2da      	uxtb	r2, r3
 8006f58:	683b      	ldr	r3, [r7, #0]
 8006f5a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f62:	0b1b      	lsrs	r3, r3, #12
 8006f64:	b2db      	uxtb	r3, r3
 8006f66:	f003 0301 	and.w	r3, r3, #1
 8006f6a:	b2da      	uxtb	r2, r3
 8006f6c:	683b      	ldr	r3, [r7, #0]
 8006f6e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f76:	0a9b      	lsrs	r3, r3, #10
 8006f78:	b2db      	uxtb	r3, r3
 8006f7a:	f003 0303 	and.w	r3, r3, #3
 8006f7e:	b2da      	uxtb	r2, r3
 8006f80:	683b      	ldr	r3, [r7, #0]
 8006f82:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f8a:	0a1b      	lsrs	r3, r3, #8
 8006f8c:	b2db      	uxtb	r3, r3
 8006f8e:	f003 0303 	and.w	r3, r3, #3
 8006f92:	b2da      	uxtb	r2, r3
 8006f94:	683b      	ldr	r3, [r7, #0]
 8006f96:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f9e:	085b      	lsrs	r3, r3, #1
 8006fa0:	b2db      	uxtb	r3, r3
 8006fa2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006fa6:	b2da      	uxtb	r2, r3
 8006fa8:	683b      	ldr	r3, [r7, #0]
 8006faa:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8006fae:	683b      	ldr	r3, [r7, #0]
 8006fb0:	2201      	movs	r2, #1
 8006fb2:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8006fb6:	2300      	movs	r3, #0
}
 8006fb8:	4618      	mov	r0, r3
 8006fba:	370c      	adds	r7, #12
 8006fbc:	46bd      	mov	sp, r7
 8006fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc2:	4770      	bx	lr
 8006fc4:	004005ff 	.word	0x004005ff

08006fc8 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8006fc8:	b480      	push	{r7}
 8006fca:	b083      	sub	sp, #12
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	6078      	str	r0, [r7, #4]
 8006fd0:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006fd6:	683b      	ldr	r3, [r7, #0]
 8006fd8:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006fde:	683b      	ldr	r3, [r7, #0]
 8006fe0:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006fe6:	683b      	ldr	r3, [r7, #0]
 8006fe8:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006fee:	683b      	ldr	r3, [r7, #0]
 8006ff0:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006ff6:	683b      	ldr	r3, [r7, #0]
 8006ff8:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006ffe:	683b      	ldr	r3, [r7, #0]
 8007000:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007006:	683b      	ldr	r3, [r7, #0]
 8007008:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800700e:	683b      	ldr	r3, [r7, #0]
 8007010:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8007012:	2300      	movs	r3, #0
}
 8007014:	4618      	mov	r0, r3
 8007016:	370c      	adds	r7, #12
 8007018:	46bd      	mov	sp, r7
 800701a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800701e:	4770      	bx	lr

08007020 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8007020:	b5b0      	push	{r4, r5, r7, lr}
 8007022:	b08e      	sub	sp, #56	; 0x38
 8007024:	af04      	add	r7, sp, #16
 8007026:	6078      	str	r0, [r7, #4]
 8007028:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800702a:	2300      	movs	r3, #0
 800702c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	2203      	movs	r2, #3
 8007034:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800703c:	2b03      	cmp	r3, #3
 800703e:	d02e      	beq.n	800709e <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8007040:	683b      	ldr	r3, [r7, #0]
 8007042:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007046:	d106      	bne.n	8007056 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800704c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	639a      	str	r2, [r3, #56]	; 0x38
 8007054:	e029      	b.n	80070aa <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8007056:	683b      	ldr	r3, [r7, #0]
 8007058:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800705c:	d10a      	bne.n	8007074 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800705e:	6878      	ldr	r0, [r7, #4]
 8007060:	f000 fb14 	bl	800768c <SD_WideBus_Enable>
 8007064:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800706a:	6a3b      	ldr	r3, [r7, #32]
 800706c:	431a      	orrs	r2, r3
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	639a      	str	r2, [r3, #56]	; 0x38
 8007072:	e01a      	b.n	80070aa <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8007074:	683b      	ldr	r3, [r7, #0]
 8007076:	2b00      	cmp	r3, #0
 8007078:	d10a      	bne.n	8007090 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800707a:	6878      	ldr	r0, [r7, #4]
 800707c:	f000 fb51 	bl	8007722 <SD_WideBus_Disable>
 8007080:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007086:	6a3b      	ldr	r3, [r7, #32]
 8007088:	431a      	orrs	r2, r3
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	639a      	str	r2, [r3, #56]	; 0x38
 800708e:	e00c      	b.n	80070aa <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007094:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	639a      	str	r2, [r3, #56]	; 0x38
 800709c:	e005      	b.n	80070aa <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070a2:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d00b      	beq.n	80070ca <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	4a26      	ldr	r2, [pc, #152]	; (8007150 <HAL_SD_ConfigWideBusOperation+0x130>)
 80070b8:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	2201      	movs	r2, #1
 80070be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 80070c2:	2301      	movs	r3, #1
 80070c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80070c8:	e01f      	b.n	800710a <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	685b      	ldr	r3, [r3, #4]
 80070ce:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	689b      	ldr	r3, [r3, #8]
 80070d4:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	68db      	ldr	r3, [r3, #12]
 80070da:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 80070dc:	683b      	ldr	r3, [r7, #0]
 80070de:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	695b      	ldr	r3, [r3, #20]
 80070e4:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	699b      	ldr	r3, [r3, #24]
 80070ea:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681d      	ldr	r5, [r3, #0]
 80070f0:	466c      	mov	r4, sp
 80070f2:	f107 0314 	add.w	r3, r7, #20
 80070f6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80070fa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80070fe:	f107 0308 	add.w	r3, r7, #8
 8007102:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007104:	4628      	mov	r0, r5
 8007106:	f000 fcd7 	bl	8007ab8 <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007112:	4618      	mov	r0, r3
 8007114:	f000 fdab 	bl	8007c6e <SDMMC_CmdBlockLength>
 8007118:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800711a:	6a3b      	ldr	r3, [r7, #32]
 800711c:	2b00      	cmp	r3, #0
 800711e:	d00c      	beq.n	800713a <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	4a0a      	ldr	r2, [pc, #40]	; (8007150 <HAL_SD_ConfigWideBusOperation+0x130>)
 8007126:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800712c:	6a3b      	ldr	r3, [r7, #32]
 800712e:	431a      	orrs	r2, r3
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8007134:	2301      	movs	r3, #1
 8007136:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	2201      	movs	r2, #1
 800713e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8007142:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8007146:	4618      	mov	r0, r3
 8007148:	3728      	adds	r7, #40	; 0x28
 800714a:	46bd      	mov	sp, r7
 800714c:	bdb0      	pop	{r4, r5, r7, pc}
 800714e:	bf00      	nop
 8007150:	004005ff 	.word	0x004005ff

08007154 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8007154:	b580      	push	{r7, lr}
 8007156:	b086      	sub	sp, #24
 8007158:	af00      	add	r7, sp, #0
 800715a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800715c:	2300      	movs	r3, #0
 800715e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8007160:	f107 030c 	add.w	r3, r7, #12
 8007164:	4619      	mov	r1, r3
 8007166:	6878      	ldr	r0, [r7, #4]
 8007168:	f000 fa68 	bl	800763c <SD_SendStatus>
 800716c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800716e:	697b      	ldr	r3, [r7, #20]
 8007170:	2b00      	cmp	r3, #0
 8007172:	d005      	beq.n	8007180 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007178:	697b      	ldr	r3, [r7, #20]
 800717a:	431a      	orrs	r2, r3
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	0a5b      	lsrs	r3, r3, #9
 8007184:	f003 030f 	and.w	r3, r3, #15
 8007188:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800718a:	693b      	ldr	r3, [r7, #16]
}
 800718c:	4618      	mov	r0, r3
 800718e:	3718      	adds	r7, #24
 8007190:	46bd      	mov	sp, r7
 8007192:	bd80      	pop	{r7, pc}

08007194 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007194:	b580      	push	{r7, lr}
 8007196:	b084      	sub	sp, #16
 8007198:	af00      	add	r7, sp, #0
 800719a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071a0:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071a6:	2b82      	cmp	r3, #130	; 0x82
 80071a8:	d111      	bne.n	80071ce <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	4618      	mov	r0, r3
 80071b0:	f000 fe08 	bl	8007dc4 <SDMMC_CmdStopTransfer>
 80071b4:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 80071b6:	68bb      	ldr	r3, [r7, #8]
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d008      	beq.n	80071ce <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80071c0:	68bb      	ldr	r3, [r7, #8]
 80071c2:	431a      	orrs	r2, r3
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 80071c8:	68f8      	ldr	r0, [r7, #12]
 80071ca:	f7ff fd4f 	bl	8006c6c <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	f022 0208 	bic.w	r2, r2, #8
 80071dc:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	f240 523a 	movw	r2, #1338	; 0x53a
 80071e6:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	2201      	movs	r2, #1
 80071ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	2200      	movs	r2, #0
 80071f4:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 80071f6:	68f8      	ldr	r0, [r7, #12]
 80071f8:	f002 fdc2 	bl	8009d80 <HAL_SD_RxCpltCallback>
#endif
}
 80071fc:	bf00      	nop
 80071fe:	3710      	adds	r7, #16
 8007200:	46bd      	mov	sp, r7
 8007202:	bd80      	pop	{r7, pc}

08007204 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8007204:	b580      	push	{r7, lr}
 8007206:	b086      	sub	sp, #24
 8007208:	af00      	add	r7, sp, #0
 800720a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007210:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8007212:	6878      	ldr	r0, [r7, #4]
 8007214:	f7fc fd62 	bl	8003cdc <HAL_DMA_GetError>
 8007218:	4603      	mov	r3, r0
 800721a:	2b02      	cmp	r3, #2
 800721c:	d03e      	beq.n	800729c <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800721e:	697b      	ldr	r3, [r7, #20]
 8007220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007222:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007224:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8007226:	697b      	ldr	r3, [r7, #20]
 8007228:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800722a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800722c:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800722e:	693b      	ldr	r3, [r7, #16]
 8007230:	2b01      	cmp	r3, #1
 8007232:	d002      	beq.n	800723a <SD_DMAError+0x36>
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	2b01      	cmp	r3, #1
 8007238:	d12d      	bne.n	8007296 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800723a:	697b      	ldr	r3, [r7, #20]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	4a19      	ldr	r2, [pc, #100]	; (80072a4 <SD_DMAError+0xa0>)
 8007240:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8007242:	697b      	ldr	r3, [r7, #20]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007248:	697b      	ldr	r3, [r7, #20]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8007250:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8007252:	697b      	ldr	r3, [r7, #20]
 8007254:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007256:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800725a:	697b      	ldr	r3, [r7, #20]
 800725c:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800725e:	6978      	ldr	r0, [r7, #20]
 8007260:	f7ff ff78 	bl	8007154 <HAL_SD_GetCardState>
 8007264:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8007266:	68bb      	ldr	r3, [r7, #8]
 8007268:	2b06      	cmp	r3, #6
 800726a:	d002      	beq.n	8007272 <SD_DMAError+0x6e>
 800726c:	68bb      	ldr	r3, [r7, #8]
 800726e:	2b05      	cmp	r3, #5
 8007270:	d10a      	bne.n	8007288 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8007272:	697b      	ldr	r3, [r7, #20]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	4618      	mov	r0, r3
 8007278:	f000 fda4 	bl	8007dc4 <SDMMC_CmdStopTransfer>
 800727c:	4602      	mov	r2, r0
 800727e:	697b      	ldr	r3, [r7, #20]
 8007280:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007282:	431a      	orrs	r2, r3
 8007284:	697b      	ldr	r3, [r7, #20]
 8007286:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8007288:	697b      	ldr	r3, [r7, #20]
 800728a:	2201      	movs	r2, #1
 800728c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007290:	697b      	ldr	r3, [r7, #20]
 8007292:	2200      	movs	r2, #0
 8007294:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8007296:	6978      	ldr	r0, [r7, #20]
 8007298:	f7ff fce8 	bl	8006c6c <HAL_SD_ErrorCallback>
#endif
  }
}
 800729c:	bf00      	nop
 800729e:	3718      	adds	r7, #24
 80072a0:	46bd      	mov	sp, r7
 80072a2:	bd80      	pop	{r7, pc}
 80072a4:	004005ff 	.word	0x004005ff

080072a8 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 80072a8:	b580      	push	{r7, lr}
 80072aa:	b084      	sub	sp, #16
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072b4:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	f240 523a 	movw	r2, #1338	; 0x53a
 80072be:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 80072c0:	68f8      	ldr	r0, [r7, #12]
 80072c2:	f7ff ff47 	bl	8007154 <HAL_SD_GetCardState>
 80072c6:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	2201      	movs	r2, #1
 80072cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	2200      	movs	r2, #0
 80072d4:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80072d6:	68bb      	ldr	r3, [r7, #8]
 80072d8:	2b06      	cmp	r3, #6
 80072da:	d002      	beq.n	80072e2 <SD_DMATxAbort+0x3a>
 80072dc:	68bb      	ldr	r3, [r7, #8]
 80072de:	2b05      	cmp	r3, #5
 80072e0:	d10a      	bne.n	80072f8 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	4618      	mov	r0, r3
 80072e8:	f000 fd6c 	bl	8007dc4 <SDMMC_CmdStopTransfer>
 80072ec:	4602      	mov	r2, r0
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072f2:	431a      	orrs	r2, r3
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d103      	bne.n	8007308 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8007300:	68f8      	ldr	r0, [r7, #12]
 8007302:	f002 fd29 	bl	8009d58 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8007306:	e002      	b.n	800730e <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8007308:	68f8      	ldr	r0, [r7, #12]
 800730a:	f7ff fcaf 	bl	8006c6c <HAL_SD_ErrorCallback>
}
 800730e:	bf00      	nop
 8007310:	3710      	adds	r7, #16
 8007312:	46bd      	mov	sp, r7
 8007314:	bd80      	pop	{r7, pc}

08007316 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8007316:	b580      	push	{r7, lr}
 8007318:	b084      	sub	sp, #16
 800731a:	af00      	add	r7, sp, #0
 800731c:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007322:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	f240 523a 	movw	r2, #1338	; 0x53a
 800732c:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800732e:	68f8      	ldr	r0, [r7, #12]
 8007330:	f7ff ff10 	bl	8007154 <HAL_SD_GetCardState>
 8007334:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	2201      	movs	r2, #1
 800733a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	2200      	movs	r2, #0
 8007342:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8007344:	68bb      	ldr	r3, [r7, #8]
 8007346:	2b06      	cmp	r3, #6
 8007348:	d002      	beq.n	8007350 <SD_DMARxAbort+0x3a>
 800734a:	68bb      	ldr	r3, [r7, #8]
 800734c:	2b05      	cmp	r3, #5
 800734e:	d10a      	bne.n	8007366 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	4618      	mov	r0, r3
 8007356:	f000 fd35 	bl	8007dc4 <SDMMC_CmdStopTransfer>
 800735a:	4602      	mov	r2, r0
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007360:	431a      	orrs	r2, r3
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800736a:	2b00      	cmp	r3, #0
 800736c:	d103      	bne.n	8007376 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800736e:	68f8      	ldr	r0, [r7, #12]
 8007370:	f002 fcf2 	bl	8009d58 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8007374:	e002      	b.n	800737c <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8007376:	68f8      	ldr	r0, [r7, #12]
 8007378:	f7ff fc78 	bl	8006c6c <HAL_SD_ErrorCallback>
}
 800737c:	bf00      	nop
 800737e:	3710      	adds	r7, #16
 8007380:	46bd      	mov	sp, r7
 8007382:	bd80      	pop	{r7, pc}

08007384 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8007384:	b5b0      	push	{r4, r5, r7, lr}
 8007386:	b094      	sub	sp, #80	; 0x50
 8007388:	af04      	add	r7, sp, #16
 800738a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800738c:	2301      	movs	r3, #1
 800738e:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	4618      	mov	r0, r3
 8007396:	f000 fbe6 	bl	8007b66 <SDIO_GetPowerState>
 800739a:	4603      	mov	r3, r0
 800739c:	2b00      	cmp	r3, #0
 800739e:	d102      	bne.n	80073a6 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80073a0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80073a4:	e0b8      	b.n	8007518 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073aa:	2b03      	cmp	r3, #3
 80073ac:	d02f      	beq.n	800740e <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	4618      	mov	r0, r3
 80073b4:	f000 fe10 	bl	8007fd8 <SDMMC_CmdSendCID>
 80073b8:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80073ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d001      	beq.n	80073c4 <SD_InitCard+0x40>
    {
      return errorstate;
 80073c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073c2:	e0a9      	b.n	8007518 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	2100      	movs	r1, #0
 80073ca:	4618      	mov	r0, r3
 80073cc:	f000 fc10 	bl	8007bf0 <SDIO_GetResponse>
 80073d0:	4602      	mov	r2, r0
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	2104      	movs	r1, #4
 80073dc:	4618      	mov	r0, r3
 80073de:	f000 fc07 	bl	8007bf0 <SDIO_GetResponse>
 80073e2:	4602      	mov	r2, r0
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	2108      	movs	r1, #8
 80073ee:	4618      	mov	r0, r3
 80073f0:	f000 fbfe 	bl	8007bf0 <SDIO_GetResponse>
 80073f4:	4602      	mov	r2, r0
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	210c      	movs	r1, #12
 8007400:	4618      	mov	r0, r3
 8007402:	f000 fbf5 	bl	8007bf0 <SDIO_GetResponse>
 8007406:	4602      	mov	r2, r0
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007412:	2b03      	cmp	r3, #3
 8007414:	d00d      	beq.n	8007432 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	f107 020e 	add.w	r2, r7, #14
 800741e:	4611      	mov	r1, r2
 8007420:	4618      	mov	r0, r3
 8007422:	f000 fe16 	bl	8008052 <SDMMC_CmdSetRelAdd>
 8007426:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007428:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800742a:	2b00      	cmp	r3, #0
 800742c:	d001      	beq.n	8007432 <SD_InitCard+0xae>
    {
      return errorstate;
 800742e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007430:	e072      	b.n	8007518 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007436:	2b03      	cmp	r3, #3
 8007438:	d036      	beq.n	80074a8 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800743a:	89fb      	ldrh	r3, [r7, #14]
 800743c:	461a      	mov	r2, r3
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681a      	ldr	r2, [r3, #0]
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800744a:	041b      	lsls	r3, r3, #16
 800744c:	4619      	mov	r1, r3
 800744e:	4610      	mov	r0, r2
 8007450:	f000 fde0 	bl	8008014 <SDMMC_CmdSendCSD>
 8007454:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007456:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007458:	2b00      	cmp	r3, #0
 800745a:	d001      	beq.n	8007460 <SD_InitCard+0xdc>
    {
      return errorstate;
 800745c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800745e:	e05b      	b.n	8007518 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	2100      	movs	r1, #0
 8007466:	4618      	mov	r0, r3
 8007468:	f000 fbc2 	bl	8007bf0 <SDIO_GetResponse>
 800746c:	4602      	mov	r2, r0
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	2104      	movs	r1, #4
 8007478:	4618      	mov	r0, r3
 800747a:	f000 fbb9 	bl	8007bf0 <SDIO_GetResponse>
 800747e:	4602      	mov	r2, r0
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	2108      	movs	r1, #8
 800748a:	4618      	mov	r0, r3
 800748c:	f000 fbb0 	bl	8007bf0 <SDIO_GetResponse>
 8007490:	4602      	mov	r2, r0
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	210c      	movs	r1, #12
 800749c:	4618      	mov	r0, r3
 800749e:	f000 fba7 	bl	8007bf0 <SDIO_GetResponse>
 80074a2:	4602      	mov	r2, r0
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	2104      	movs	r1, #4
 80074ae:	4618      	mov	r0, r3
 80074b0:	f000 fb9e 	bl	8007bf0 <SDIO_GetResponse>
 80074b4:	4603      	mov	r3, r0
 80074b6:	0d1a      	lsrs	r2, r3, #20
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80074bc:	f107 0310 	add.w	r3, r7, #16
 80074c0:	4619      	mov	r1, r3
 80074c2:	6878      	ldr	r0, [r7, #4]
 80074c4:	f7ff fbdc 	bl	8006c80 <HAL_SD_GetCardCSD>
 80074c8:	4603      	mov	r3, r0
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d002      	beq.n	80074d4 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80074ce:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80074d2:	e021      	b.n	8007518 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	6819      	ldr	r1, [r3, #0]
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80074dc:	041b      	lsls	r3, r3, #16
 80074de:	2200      	movs	r2, #0
 80074e0:	461c      	mov	r4, r3
 80074e2:	4615      	mov	r5, r2
 80074e4:	4622      	mov	r2, r4
 80074e6:	462b      	mov	r3, r5
 80074e8:	4608      	mov	r0, r1
 80074ea:	f000 fc8d 	bl	8007e08 <SDMMC_CmdSelDesel>
 80074ee:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 80074f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d001      	beq.n	80074fa <SD_InitCard+0x176>
  {
    return errorstate;
 80074f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074f8:	e00e      	b.n	8007518 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681d      	ldr	r5, [r3, #0]
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	466c      	mov	r4, sp
 8007502:	f103 0210 	add.w	r2, r3, #16
 8007506:	ca07      	ldmia	r2, {r0, r1, r2}
 8007508:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800750c:	3304      	adds	r3, #4
 800750e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007510:	4628      	mov	r0, r5
 8007512:	f000 fad1 	bl	8007ab8 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8007516:	2300      	movs	r3, #0
}
 8007518:	4618      	mov	r0, r3
 800751a:	3740      	adds	r7, #64	; 0x40
 800751c:	46bd      	mov	sp, r7
 800751e:	bdb0      	pop	{r4, r5, r7, pc}

08007520 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8007520:	b580      	push	{r7, lr}
 8007522:	b086      	sub	sp, #24
 8007524:	af00      	add	r7, sp, #0
 8007526:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007528:	2300      	movs	r3, #0
 800752a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800752c:	2300      	movs	r3, #0
 800752e:	617b      	str	r3, [r7, #20]
 8007530:	2300      	movs	r3, #0
 8007532:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	4618      	mov	r0, r3
 800753a:	f000 fc88 	bl	8007e4e <SDMMC_CmdGoIdleState>
 800753e:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	2b00      	cmp	r3, #0
 8007544:	d001      	beq.n	800754a <SD_PowerON+0x2a>
  {
    return errorstate;
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	e072      	b.n	8007630 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	4618      	mov	r0, r3
 8007550:	f000 fc9b 	bl	8007e8a <SDMMC_CmdOperCond>
 8007554:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	2b00      	cmp	r3, #0
 800755a:	d00d      	beq.n	8007578 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	2200      	movs	r2, #0
 8007560:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	4618      	mov	r0, r3
 8007568:	f000 fc71 	bl	8007e4e <SDMMC_CmdGoIdleState>
 800756c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	2b00      	cmp	r3, #0
 8007572:	d004      	beq.n	800757e <SD_PowerON+0x5e>
    {
      return errorstate;
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	e05b      	b.n	8007630 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	2201      	movs	r2, #1
 800757c:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007582:	2b01      	cmp	r3, #1
 8007584:	d137      	bne.n	80075f6 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	2100      	movs	r1, #0
 800758c:	4618      	mov	r0, r3
 800758e:	f000 fc9b 	bl	8007ec8 <SDMMC_CmdAppCommand>
 8007592:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	2b00      	cmp	r3, #0
 8007598:	d02d      	beq.n	80075f6 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800759a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800759e:	e047      	b.n	8007630 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	2100      	movs	r1, #0
 80075a6:	4618      	mov	r0, r3
 80075a8:	f000 fc8e 	bl	8007ec8 <SDMMC_CmdAppCommand>
 80075ac:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d001      	beq.n	80075b8 <SD_PowerON+0x98>
    {
      return errorstate;
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	e03b      	b.n	8007630 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	491e      	ldr	r1, [pc, #120]	; (8007638 <SD_PowerON+0x118>)
 80075be:	4618      	mov	r0, r3
 80075c0:	f000 fca4 	bl	8007f0c <SDMMC_CmdAppOperCommand>
 80075c4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d002      	beq.n	80075d2 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80075cc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80075d0:	e02e      	b.n	8007630 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	2100      	movs	r1, #0
 80075d8:	4618      	mov	r0, r3
 80075da:	f000 fb09 	bl	8007bf0 <SDIO_GetResponse>
 80075de:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80075e0:	697b      	ldr	r3, [r7, #20]
 80075e2:	0fdb      	lsrs	r3, r3, #31
 80075e4:	2b01      	cmp	r3, #1
 80075e6:	d101      	bne.n	80075ec <SD_PowerON+0xcc>
 80075e8:	2301      	movs	r3, #1
 80075ea:	e000      	b.n	80075ee <SD_PowerON+0xce>
 80075ec:	2300      	movs	r3, #0
 80075ee:	613b      	str	r3, [r7, #16]

    count++;
 80075f0:	68bb      	ldr	r3, [r7, #8]
 80075f2:	3301      	adds	r3, #1
 80075f4:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80075f6:	68bb      	ldr	r3, [r7, #8]
 80075f8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80075fc:	4293      	cmp	r3, r2
 80075fe:	d802      	bhi.n	8007606 <SD_PowerON+0xe6>
 8007600:	693b      	ldr	r3, [r7, #16]
 8007602:	2b00      	cmp	r3, #0
 8007604:	d0cc      	beq.n	80075a0 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8007606:	68bb      	ldr	r3, [r7, #8]
 8007608:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800760c:	4293      	cmp	r3, r2
 800760e:	d902      	bls.n	8007616 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8007610:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007614:	e00c      	b.n	8007630 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8007616:	697b      	ldr	r3, [r7, #20]
 8007618:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800761c:	2b00      	cmp	r3, #0
 800761e:	d003      	beq.n	8007628 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	2201      	movs	r2, #1
 8007624:	645a      	str	r2, [r3, #68]	; 0x44
 8007626:	e002      	b.n	800762e <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	2200      	movs	r2, #0
 800762c:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800762e:	2300      	movs	r3, #0
}
 8007630:	4618      	mov	r0, r3
 8007632:	3718      	adds	r7, #24
 8007634:	46bd      	mov	sp, r7
 8007636:	bd80      	pop	{r7, pc}
 8007638:	c1100000 	.word	0xc1100000

0800763c <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800763c:	b580      	push	{r7, lr}
 800763e:	b084      	sub	sp, #16
 8007640:	af00      	add	r7, sp, #0
 8007642:	6078      	str	r0, [r7, #4]
 8007644:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8007646:	683b      	ldr	r3, [r7, #0]
 8007648:	2b00      	cmp	r3, #0
 800764a:	d102      	bne.n	8007652 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800764c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007650:	e018      	b.n	8007684 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681a      	ldr	r2, [r3, #0]
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800765a:	041b      	lsls	r3, r3, #16
 800765c:	4619      	mov	r1, r3
 800765e:	4610      	mov	r0, r2
 8007660:	f000 fd18 	bl	8008094 <SDMMC_CmdSendStatus>
 8007664:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	2b00      	cmp	r3, #0
 800766a:	d001      	beq.n	8007670 <SD_SendStatus+0x34>
  {
    return errorstate;
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	e009      	b.n	8007684 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	2100      	movs	r1, #0
 8007676:	4618      	mov	r0, r3
 8007678:	f000 faba 	bl	8007bf0 <SDIO_GetResponse>
 800767c:	4602      	mov	r2, r0
 800767e:	683b      	ldr	r3, [r7, #0]
 8007680:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8007682:	2300      	movs	r3, #0
}
 8007684:	4618      	mov	r0, r3
 8007686:	3710      	adds	r7, #16
 8007688:	46bd      	mov	sp, r7
 800768a:	bd80      	pop	{r7, pc}

0800768c <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800768c:	b580      	push	{r7, lr}
 800768e:	b086      	sub	sp, #24
 8007690:	af00      	add	r7, sp, #0
 8007692:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8007694:	2300      	movs	r3, #0
 8007696:	60fb      	str	r3, [r7, #12]
 8007698:	2300      	movs	r3, #0
 800769a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	2100      	movs	r1, #0
 80076a2:	4618      	mov	r0, r3
 80076a4:	f000 faa4 	bl	8007bf0 <SDIO_GetResponse>
 80076a8:	4603      	mov	r3, r0
 80076aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80076ae:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80076b2:	d102      	bne.n	80076ba <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80076b4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80076b8:	e02f      	b.n	800771a <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80076ba:	f107 030c 	add.w	r3, r7, #12
 80076be:	4619      	mov	r1, r3
 80076c0:	6878      	ldr	r0, [r7, #4]
 80076c2:	f000 f879 	bl	80077b8 <SD_FindSCR>
 80076c6:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80076c8:	697b      	ldr	r3, [r7, #20]
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d001      	beq.n	80076d2 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 80076ce:	697b      	ldr	r3, [r7, #20]
 80076d0:	e023      	b.n	800771a <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80076d2:	693b      	ldr	r3, [r7, #16]
 80076d4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d01c      	beq.n	8007716 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681a      	ldr	r2, [r3, #0]
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80076e4:	041b      	lsls	r3, r3, #16
 80076e6:	4619      	mov	r1, r3
 80076e8:	4610      	mov	r0, r2
 80076ea:	f000 fbed 	bl	8007ec8 <SDMMC_CmdAppCommand>
 80076ee:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80076f0:	697b      	ldr	r3, [r7, #20]
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d001      	beq.n	80076fa <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 80076f6:	697b      	ldr	r3, [r7, #20]
 80076f8:	e00f      	b.n	800771a <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	2102      	movs	r1, #2
 8007700:	4618      	mov	r0, r3
 8007702:	f000 fc26 	bl	8007f52 <SDMMC_CmdBusWidth>
 8007706:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007708:	697b      	ldr	r3, [r7, #20]
 800770a:	2b00      	cmp	r3, #0
 800770c:	d001      	beq.n	8007712 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800770e:	697b      	ldr	r3, [r7, #20]
 8007710:	e003      	b.n	800771a <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8007712:	2300      	movs	r3, #0
 8007714:	e001      	b.n	800771a <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007716:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800771a:	4618      	mov	r0, r3
 800771c:	3718      	adds	r7, #24
 800771e:	46bd      	mov	sp, r7
 8007720:	bd80      	pop	{r7, pc}

08007722 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8007722:	b580      	push	{r7, lr}
 8007724:	b086      	sub	sp, #24
 8007726:	af00      	add	r7, sp, #0
 8007728:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800772a:	2300      	movs	r3, #0
 800772c:	60fb      	str	r3, [r7, #12]
 800772e:	2300      	movs	r3, #0
 8007730:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	2100      	movs	r1, #0
 8007738:	4618      	mov	r0, r3
 800773a:	f000 fa59 	bl	8007bf0 <SDIO_GetResponse>
 800773e:	4603      	mov	r3, r0
 8007740:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007744:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007748:	d102      	bne.n	8007750 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800774a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800774e:	e02f      	b.n	80077b0 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8007750:	f107 030c 	add.w	r3, r7, #12
 8007754:	4619      	mov	r1, r3
 8007756:	6878      	ldr	r0, [r7, #4]
 8007758:	f000 f82e 	bl	80077b8 <SD_FindSCR>
 800775c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800775e:	697b      	ldr	r3, [r7, #20]
 8007760:	2b00      	cmp	r3, #0
 8007762:	d001      	beq.n	8007768 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8007764:	697b      	ldr	r3, [r7, #20]
 8007766:	e023      	b.n	80077b0 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8007768:	693b      	ldr	r3, [r7, #16]
 800776a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800776e:	2b00      	cmp	r3, #0
 8007770:	d01c      	beq.n	80077ac <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681a      	ldr	r2, [r3, #0]
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800777a:	041b      	lsls	r3, r3, #16
 800777c:	4619      	mov	r1, r3
 800777e:	4610      	mov	r0, r2
 8007780:	f000 fba2 	bl	8007ec8 <SDMMC_CmdAppCommand>
 8007784:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007786:	697b      	ldr	r3, [r7, #20]
 8007788:	2b00      	cmp	r3, #0
 800778a:	d001      	beq.n	8007790 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800778c:	697b      	ldr	r3, [r7, #20]
 800778e:	e00f      	b.n	80077b0 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	2100      	movs	r1, #0
 8007796:	4618      	mov	r0, r3
 8007798:	f000 fbdb 	bl	8007f52 <SDMMC_CmdBusWidth>
 800779c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800779e:	697b      	ldr	r3, [r7, #20]
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d001      	beq.n	80077a8 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 80077a4:	697b      	ldr	r3, [r7, #20]
 80077a6:	e003      	b.n	80077b0 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80077a8:	2300      	movs	r3, #0
 80077aa:	e001      	b.n	80077b0 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80077ac:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80077b0:	4618      	mov	r0, r3
 80077b2:	3718      	adds	r7, #24
 80077b4:	46bd      	mov	sp, r7
 80077b6:	bd80      	pop	{r7, pc}

080077b8 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 80077b8:	b590      	push	{r4, r7, lr}
 80077ba:	b08f      	sub	sp, #60	; 0x3c
 80077bc:	af00      	add	r7, sp, #0
 80077be:	6078      	str	r0, [r7, #4]
 80077c0:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80077c2:	f7fb fe97 	bl	80034f4 <HAL_GetTick>
 80077c6:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 80077c8:	2300      	movs	r3, #0
 80077ca:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 80077cc:	2300      	movs	r3, #0
 80077ce:	60bb      	str	r3, [r7, #8]
 80077d0:	2300      	movs	r3, #0
 80077d2:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 80077d4:	683b      	ldr	r3, [r7, #0]
 80077d6:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	2108      	movs	r1, #8
 80077de:	4618      	mov	r0, r3
 80077e0:	f000 fa45 	bl	8007c6e <SDMMC_CmdBlockLength>
 80077e4:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80077e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d001      	beq.n	80077f0 <SD_FindSCR+0x38>
  {
    return errorstate;
 80077ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077ee:	e0b9      	b.n	8007964 <SD_FindSCR+0x1ac>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681a      	ldr	r2, [r3, #0]
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80077f8:	041b      	lsls	r3, r3, #16
 80077fa:	4619      	mov	r1, r3
 80077fc:	4610      	mov	r0, r2
 80077fe:	f000 fb63 	bl	8007ec8 <SDMMC_CmdAppCommand>
 8007802:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8007804:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007806:	2b00      	cmp	r3, #0
 8007808:	d001      	beq.n	800780e <SD_FindSCR+0x56>
  {
    return errorstate;
 800780a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800780c:	e0aa      	b.n	8007964 <SD_FindSCR+0x1ac>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800780e:	f04f 33ff 	mov.w	r3, #4294967295
 8007812:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8007814:	2308      	movs	r3, #8
 8007816:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8007818:	2330      	movs	r3, #48	; 0x30
 800781a:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800781c:	2302      	movs	r3, #2
 800781e:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8007820:	2300      	movs	r3, #0
 8007822:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8007824:	2301      	movs	r3, #1
 8007826:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	f107 0210 	add.w	r2, r7, #16
 8007830:	4611      	mov	r1, r2
 8007832:	4618      	mov	r0, r3
 8007834:	f000 f9ef 	bl	8007c16 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	4618      	mov	r0, r3
 800783e:	f000 fbaa 	bl	8007f96 <SDMMC_CmdSendSCR>
 8007842:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8007844:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007846:	2b00      	cmp	r3, #0
 8007848:	d02a      	beq.n	80078a0 <SD_FindSCR+0xe8>
  {
    return errorstate;
 800784a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800784c:	e08a      	b.n	8007964 <SD_FindSCR+0x1ac>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007854:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007858:	2b00      	cmp	r3, #0
 800785a:	d00f      	beq.n	800787c <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	6819      	ldr	r1, [r3, #0]
 8007860:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007862:	009b      	lsls	r3, r3, #2
 8007864:	f107 0208 	add.w	r2, r7, #8
 8007868:	18d4      	adds	r4, r2, r3
 800786a:	4608      	mov	r0, r1
 800786c:	f000 f94f 	bl	8007b0e <SDIO_ReadFIFO>
 8007870:	4603      	mov	r3, r0
 8007872:	6023      	str	r3, [r4, #0]
      index++;
 8007874:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007876:	3301      	adds	r3, #1
 8007878:	637b      	str	r3, [r7, #52]	; 0x34
 800787a:	e006      	b.n	800788a <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007882:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007886:	2b00      	cmp	r3, #0
 8007888:	d012      	beq.n	80078b0 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 800788a:	f7fb fe33 	bl	80034f4 <HAL_GetTick>
 800788e:	4602      	mov	r2, r0
 8007890:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007892:	1ad3      	subs	r3, r2, r3
 8007894:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007898:	d102      	bne.n	80078a0 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800789a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800789e:	e061      	b.n	8007964 <SD_FindSCR+0x1ac>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078a6:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d0cf      	beq.n	800784e <SD_FindSCR+0x96>
 80078ae:	e000      	b.n	80078b2 <SD_FindSCR+0xfa>
      break;
 80078b0:	bf00      	nop
    }
  }

#if defined(SDIO_STA_STBITERR)
  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078b8:	f003 0308 	and.w	r3, r3, #8
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d106      	bne.n	80078ce <SD_FindSCR+0x116>
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d005      	beq.n	80078da <SD_FindSCR+0x122>
#else /* SDIO_STA_STBITERR not defined */
  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
#endif /* SDIO_STA_STBITERR */
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	2208      	movs	r2, #8
 80078d4:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 80078d6:	2308      	movs	r3, #8
 80078d8:	e044      	b.n	8007964 <SD_FindSCR+0x1ac>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078e0:	f003 0302 	and.w	r3, r3, #2
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d005      	beq.n	80078f4 <SD_FindSCR+0x13c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	2202      	movs	r2, #2
 80078ee:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80078f0:	2302      	movs	r3, #2
 80078f2:	e037      	b.n	8007964 <SD_FindSCR+0x1ac>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078fa:	f003 0320 	and.w	r3, r3, #32
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d005      	beq.n	800790e <SD_FindSCR+0x156>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	2220      	movs	r2, #32
 8007908:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800790a:	2320      	movs	r3, #32
 800790c:	e02a      	b.n	8007964 <SD_FindSCR+0x1ac>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	f240 523a 	movw	r2, #1338	; 0x53a
 8007916:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	061a      	lsls	r2, r3, #24
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	021b      	lsls	r3, r3, #8
 8007920:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007924:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	0a1b      	lsrs	r3, r3, #8
 800792a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800792e:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	0e1b      	lsrs	r3, r3, #24
 8007934:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8007936:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007938:	601a      	str	r2, [r3, #0]
    scr++;
 800793a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800793c:	3304      	adds	r3, #4
 800793e:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8007940:	68bb      	ldr	r3, [r7, #8]
 8007942:	061a      	lsls	r2, r3, #24
 8007944:	68bb      	ldr	r3, [r7, #8]
 8007946:	021b      	lsls	r3, r3, #8
 8007948:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800794c:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800794e:	68bb      	ldr	r3, [r7, #8]
 8007950:	0a1b      	lsrs	r3, r3, #8
 8007952:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8007956:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8007958:	68bb      	ldr	r3, [r7, #8]
 800795a:	0e1b      	lsrs	r3, r3, #24
 800795c:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800795e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007960:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8007962:	2300      	movs	r3, #0
}
 8007964:	4618      	mov	r0, r3
 8007966:	373c      	adds	r7, #60	; 0x3c
 8007968:	46bd      	mov	sp, r7
 800796a:	bd90      	pop	{r4, r7, pc}

0800796c <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800796c:	b580      	push	{r7, lr}
 800796e:	b086      	sub	sp, #24
 8007970:	af00      	add	r7, sp, #0
 8007972:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007978:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800797e:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8007980:	693b      	ldr	r3, [r7, #16]
 8007982:	2b00      	cmp	r3, #0
 8007984:	d03f      	beq.n	8007a06 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8007986:	2300      	movs	r3, #0
 8007988:	617b      	str	r3, [r7, #20]
 800798a:	e033      	b.n	80079f4 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	4618      	mov	r0, r3
 8007992:	f000 f8bc 	bl	8007b0e <SDIO_ReadFIFO>
 8007996:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8007998:	68bb      	ldr	r3, [r7, #8]
 800799a:	b2da      	uxtb	r2, r3
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	701a      	strb	r2, [r3, #0]
      tmp++;
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	3301      	adds	r3, #1
 80079a4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80079a6:	693b      	ldr	r3, [r7, #16]
 80079a8:	3b01      	subs	r3, #1
 80079aa:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 80079ac:	68bb      	ldr	r3, [r7, #8]
 80079ae:	0a1b      	lsrs	r3, r3, #8
 80079b0:	b2da      	uxtb	r2, r3
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	701a      	strb	r2, [r3, #0]
      tmp++;
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	3301      	adds	r3, #1
 80079ba:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80079bc:	693b      	ldr	r3, [r7, #16]
 80079be:	3b01      	subs	r3, #1
 80079c0:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 80079c2:	68bb      	ldr	r3, [r7, #8]
 80079c4:	0c1b      	lsrs	r3, r3, #16
 80079c6:	b2da      	uxtb	r2, r3
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	701a      	strb	r2, [r3, #0]
      tmp++;
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	3301      	adds	r3, #1
 80079d0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80079d2:	693b      	ldr	r3, [r7, #16]
 80079d4:	3b01      	subs	r3, #1
 80079d6:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 80079d8:	68bb      	ldr	r3, [r7, #8]
 80079da:	0e1b      	lsrs	r3, r3, #24
 80079dc:	b2da      	uxtb	r2, r3
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	701a      	strb	r2, [r3, #0]
      tmp++;
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	3301      	adds	r3, #1
 80079e6:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80079e8:	693b      	ldr	r3, [r7, #16]
 80079ea:	3b01      	subs	r3, #1
 80079ec:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 80079ee:	697b      	ldr	r3, [r7, #20]
 80079f0:	3301      	adds	r3, #1
 80079f2:	617b      	str	r3, [r7, #20]
 80079f4:	697b      	ldr	r3, [r7, #20]
 80079f6:	2b07      	cmp	r3, #7
 80079f8:	d9c8      	bls.n	800798c <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	68fa      	ldr	r2, [r7, #12]
 80079fe:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	693a      	ldr	r2, [r7, #16]
 8007a04:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8007a06:	bf00      	nop
 8007a08:	3718      	adds	r7, #24
 8007a0a:	46bd      	mov	sp, r7
 8007a0c:	bd80      	pop	{r7, pc}

08007a0e <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8007a0e:	b580      	push	{r7, lr}
 8007a10:	b086      	sub	sp, #24
 8007a12:	af00      	add	r7, sp, #0
 8007a14:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	6a1b      	ldr	r3, [r3, #32]
 8007a1a:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a20:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8007a22:	693b      	ldr	r3, [r7, #16]
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d043      	beq.n	8007ab0 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8007a28:	2300      	movs	r3, #0
 8007a2a:	617b      	str	r3, [r7, #20]
 8007a2c:	e037      	b.n	8007a9e <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	781b      	ldrb	r3, [r3, #0]
 8007a32:	60bb      	str	r3, [r7, #8]
      tmp++;
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	3301      	adds	r3, #1
 8007a38:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007a3a:	693b      	ldr	r3, [r7, #16]
 8007a3c:	3b01      	subs	r3, #1
 8007a3e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	781b      	ldrb	r3, [r3, #0]
 8007a44:	021a      	lsls	r2, r3, #8
 8007a46:	68bb      	ldr	r3, [r7, #8]
 8007a48:	4313      	orrs	r3, r2
 8007a4a:	60bb      	str	r3, [r7, #8]
      tmp++;
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	3301      	adds	r3, #1
 8007a50:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007a52:	693b      	ldr	r3, [r7, #16]
 8007a54:	3b01      	subs	r3, #1
 8007a56:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	781b      	ldrb	r3, [r3, #0]
 8007a5c:	041a      	lsls	r2, r3, #16
 8007a5e:	68bb      	ldr	r3, [r7, #8]
 8007a60:	4313      	orrs	r3, r2
 8007a62:	60bb      	str	r3, [r7, #8]
      tmp++;
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	3301      	adds	r3, #1
 8007a68:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007a6a:	693b      	ldr	r3, [r7, #16]
 8007a6c:	3b01      	subs	r3, #1
 8007a6e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	781b      	ldrb	r3, [r3, #0]
 8007a74:	061a      	lsls	r2, r3, #24
 8007a76:	68bb      	ldr	r3, [r7, #8]
 8007a78:	4313      	orrs	r3, r2
 8007a7a:	60bb      	str	r3, [r7, #8]
      tmp++;
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	3301      	adds	r3, #1
 8007a80:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007a82:	693b      	ldr	r3, [r7, #16]
 8007a84:	3b01      	subs	r3, #1
 8007a86:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	f107 0208 	add.w	r2, r7, #8
 8007a90:	4611      	mov	r1, r2
 8007a92:	4618      	mov	r0, r3
 8007a94:	f000 f848 	bl	8007b28 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8007a98:	697b      	ldr	r3, [r7, #20]
 8007a9a:	3301      	adds	r3, #1
 8007a9c:	617b      	str	r3, [r7, #20]
 8007a9e:	697b      	ldr	r3, [r7, #20]
 8007aa0:	2b07      	cmp	r3, #7
 8007aa2:	d9c4      	bls.n	8007a2e <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	68fa      	ldr	r2, [r7, #12]
 8007aa8:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	693a      	ldr	r2, [r7, #16]
 8007aae:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8007ab0:	bf00      	nop
 8007ab2:	3718      	adds	r7, #24
 8007ab4:	46bd      	mov	sp, r7
 8007ab6:	bd80      	pop	{r7, pc}

08007ab8 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8007ab8:	b084      	sub	sp, #16
 8007aba:	b480      	push	{r7}
 8007abc:	b085      	sub	sp, #20
 8007abe:	af00      	add	r7, sp, #0
 8007ac0:	6078      	str	r0, [r7, #4]
 8007ac2:	f107 001c 	add.w	r0, r7, #28
 8007ac6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8007aca:	2300      	movs	r3, #0
 8007acc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8007ace:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8007ad0:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8007ad2:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8007ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8007ad6:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8007ad8:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8007ada:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8007adc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8007ade:	431a      	orrs	r2, r3
             Init.ClockDiv
 8007ae0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8007ae2:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8007ae4:	68fa      	ldr	r2, [r7, #12]
 8007ae6:	4313      	orrs	r3, r2
 8007ae8:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	685b      	ldr	r3, [r3, #4]
 8007aee:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8007af2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007af6:	68fa      	ldr	r2, [r7, #12]
 8007af8:	431a      	orrs	r2, r3
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8007afe:	2300      	movs	r3, #0
}
 8007b00:	4618      	mov	r0, r3
 8007b02:	3714      	adds	r7, #20
 8007b04:	46bd      	mov	sp, r7
 8007b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b0a:	b004      	add	sp, #16
 8007b0c:	4770      	bx	lr

08007b0e <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8007b0e:	b480      	push	{r7}
 8007b10:	b083      	sub	sp, #12
 8007b12:	af00      	add	r7, sp, #0
 8007b14:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8007b1c:	4618      	mov	r0, r3
 8007b1e:	370c      	adds	r7, #12
 8007b20:	46bd      	mov	sp, r7
 8007b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b26:	4770      	bx	lr

08007b28 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8007b28:	b480      	push	{r7}
 8007b2a:	b083      	sub	sp, #12
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	6078      	str	r0, [r7, #4]
 8007b30:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8007b32:	683b      	ldr	r3, [r7, #0]
 8007b34:	681a      	ldr	r2, [r3, #0]
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007b3c:	2300      	movs	r3, #0
}
 8007b3e:	4618      	mov	r0, r3
 8007b40:	370c      	adds	r7, #12
 8007b42:	46bd      	mov	sp, r7
 8007b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b48:	4770      	bx	lr

08007b4a <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8007b4a:	b480      	push	{r7}
 8007b4c:	b083      	sub	sp, #12
 8007b4e:	af00      	add	r7, sp, #0
 8007b50:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	2203      	movs	r2, #3
 8007b56:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8007b58:	2300      	movs	r3, #0
}
 8007b5a:	4618      	mov	r0, r3
 8007b5c:	370c      	adds	r7, #12
 8007b5e:	46bd      	mov	sp, r7
 8007b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b64:	4770      	bx	lr

08007b66 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8007b66:	b480      	push	{r7}
 8007b68:	b083      	sub	sp, #12
 8007b6a:	af00      	add	r7, sp, #0
 8007b6c:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	f003 0303 	and.w	r3, r3, #3
}
 8007b76:	4618      	mov	r0, r3
 8007b78:	370c      	adds	r7, #12
 8007b7a:	46bd      	mov	sp, r7
 8007b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b80:	4770      	bx	lr

08007b82 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8007b82:	b480      	push	{r7}
 8007b84:	b085      	sub	sp, #20
 8007b86:	af00      	add	r7, sp, #0
 8007b88:	6078      	str	r0, [r7, #4]
 8007b8a:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8007b8c:	2300      	movs	r3, #0
 8007b8e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8007b90:	683b      	ldr	r3, [r7, #0]
 8007b92:	681a      	ldr	r2, [r3, #0]
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8007b98:	683b      	ldr	r3, [r7, #0]
 8007b9a:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8007b9c:	683b      	ldr	r3, [r7, #0]
 8007b9e:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8007ba0:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8007ba2:	683b      	ldr	r3, [r7, #0]
 8007ba4:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8007ba6:	431a      	orrs	r2, r3
                       Command->CPSM);
 8007ba8:	683b      	ldr	r3, [r7, #0]
 8007baa:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8007bac:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8007bae:	68fa      	ldr	r2, [r7, #12]
 8007bb0:	4313      	orrs	r3, r2
 8007bb2:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	68db      	ldr	r3, [r3, #12]
 8007bb8:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8007bbc:	f023 030f 	bic.w	r3, r3, #15
 8007bc0:	68fa      	ldr	r2, [r7, #12]
 8007bc2:	431a      	orrs	r2, r3
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8007bc8:	2300      	movs	r3, #0
}
 8007bca:	4618      	mov	r0, r3
 8007bcc:	3714      	adds	r7, #20
 8007bce:	46bd      	mov	sp, r7
 8007bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd4:	4770      	bx	lr

08007bd6 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8007bd6:	b480      	push	{r7}
 8007bd8:	b083      	sub	sp, #12
 8007bda:	af00      	add	r7, sp, #0
 8007bdc:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	691b      	ldr	r3, [r3, #16]
 8007be2:	b2db      	uxtb	r3, r3
}
 8007be4:	4618      	mov	r0, r3
 8007be6:	370c      	adds	r7, #12
 8007be8:	46bd      	mov	sp, r7
 8007bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bee:	4770      	bx	lr

08007bf0 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8007bf0:	b480      	push	{r7}
 8007bf2:	b085      	sub	sp, #20
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	6078      	str	r0, [r7, #4]
 8007bf8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	3314      	adds	r3, #20
 8007bfe:	461a      	mov	r2, r3
 8007c00:	683b      	ldr	r3, [r7, #0]
 8007c02:	4413      	add	r3, r2
 8007c04:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	681b      	ldr	r3, [r3, #0]
}  
 8007c0a:	4618      	mov	r0, r3
 8007c0c:	3714      	adds	r7, #20
 8007c0e:	46bd      	mov	sp, r7
 8007c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c14:	4770      	bx	lr

08007c16 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8007c16:	b480      	push	{r7}
 8007c18:	b085      	sub	sp, #20
 8007c1a:	af00      	add	r7, sp, #0
 8007c1c:	6078      	str	r0, [r7, #4]
 8007c1e:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8007c20:	2300      	movs	r3, #0
 8007c22:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8007c24:	683b      	ldr	r3, [r7, #0]
 8007c26:	681a      	ldr	r2, [r3, #0]
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8007c2c:	683b      	ldr	r3, [r7, #0]
 8007c2e:	685a      	ldr	r2, [r3, #4]
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8007c34:	683b      	ldr	r3, [r7, #0]
 8007c36:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8007c38:	683b      	ldr	r3, [r7, #0]
 8007c3a:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8007c3c:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8007c3e:	683b      	ldr	r3, [r7, #0]
 8007c40:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8007c42:	431a      	orrs	r2, r3
                       Data->DPSM);
 8007c44:	683b      	ldr	r3, [r7, #0]
 8007c46:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8007c48:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8007c4a:	68fa      	ldr	r2, [r7, #12]
 8007c4c:	4313      	orrs	r3, r2
 8007c4e:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c54:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	431a      	orrs	r2, r3
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8007c60:	2300      	movs	r3, #0

}
 8007c62:	4618      	mov	r0, r3
 8007c64:	3714      	adds	r7, #20
 8007c66:	46bd      	mov	sp, r7
 8007c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c6c:	4770      	bx	lr

08007c6e <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8007c6e:	b580      	push	{r7, lr}
 8007c70:	b088      	sub	sp, #32
 8007c72:	af00      	add	r7, sp, #0
 8007c74:	6078      	str	r0, [r7, #4]
 8007c76:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8007c78:	683b      	ldr	r3, [r7, #0]
 8007c7a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8007c7c:	2310      	movs	r3, #16
 8007c7e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007c80:	2340      	movs	r3, #64	; 0x40
 8007c82:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007c84:	2300      	movs	r3, #0
 8007c86:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007c88:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007c8c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007c8e:	f107 0308 	add.w	r3, r7, #8
 8007c92:	4619      	mov	r1, r3
 8007c94:	6878      	ldr	r0, [r7, #4]
 8007c96:	f7ff ff74 	bl	8007b82 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8007c9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8007c9e:	2110      	movs	r1, #16
 8007ca0:	6878      	ldr	r0, [r7, #4]
 8007ca2:	f000 fa19 	bl	80080d8 <SDMMC_GetCmdResp1>
 8007ca6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007ca8:	69fb      	ldr	r3, [r7, #28]
}
 8007caa:	4618      	mov	r0, r3
 8007cac:	3720      	adds	r7, #32
 8007cae:	46bd      	mov	sp, r7
 8007cb0:	bd80      	pop	{r7, pc}

08007cb2 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8007cb2:	b580      	push	{r7, lr}
 8007cb4:	b088      	sub	sp, #32
 8007cb6:	af00      	add	r7, sp, #0
 8007cb8:	6078      	str	r0, [r7, #4]
 8007cba:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8007cbc:	683b      	ldr	r3, [r7, #0]
 8007cbe:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8007cc0:	2311      	movs	r3, #17
 8007cc2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007cc4:	2340      	movs	r3, #64	; 0x40
 8007cc6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007cc8:	2300      	movs	r3, #0
 8007cca:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007ccc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007cd0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007cd2:	f107 0308 	add.w	r3, r7, #8
 8007cd6:	4619      	mov	r1, r3
 8007cd8:	6878      	ldr	r0, [r7, #4]
 8007cda:	f7ff ff52 	bl	8007b82 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8007cde:	f241 3288 	movw	r2, #5000	; 0x1388
 8007ce2:	2111      	movs	r1, #17
 8007ce4:	6878      	ldr	r0, [r7, #4]
 8007ce6:	f000 f9f7 	bl	80080d8 <SDMMC_GetCmdResp1>
 8007cea:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007cec:	69fb      	ldr	r3, [r7, #28]
}
 8007cee:	4618      	mov	r0, r3
 8007cf0:	3720      	adds	r7, #32
 8007cf2:	46bd      	mov	sp, r7
 8007cf4:	bd80      	pop	{r7, pc}

08007cf6 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8007cf6:	b580      	push	{r7, lr}
 8007cf8:	b088      	sub	sp, #32
 8007cfa:	af00      	add	r7, sp, #0
 8007cfc:	6078      	str	r0, [r7, #4]
 8007cfe:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8007d00:	683b      	ldr	r3, [r7, #0]
 8007d02:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8007d04:	2312      	movs	r3, #18
 8007d06:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007d08:	2340      	movs	r3, #64	; 0x40
 8007d0a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007d0c:	2300      	movs	r3, #0
 8007d0e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007d10:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007d14:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007d16:	f107 0308 	add.w	r3, r7, #8
 8007d1a:	4619      	mov	r1, r3
 8007d1c:	6878      	ldr	r0, [r7, #4]
 8007d1e:	f7ff ff30 	bl	8007b82 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8007d22:	f241 3288 	movw	r2, #5000	; 0x1388
 8007d26:	2112      	movs	r1, #18
 8007d28:	6878      	ldr	r0, [r7, #4]
 8007d2a:	f000 f9d5 	bl	80080d8 <SDMMC_GetCmdResp1>
 8007d2e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007d30:	69fb      	ldr	r3, [r7, #28]
}
 8007d32:	4618      	mov	r0, r3
 8007d34:	3720      	adds	r7, #32
 8007d36:	46bd      	mov	sp, r7
 8007d38:	bd80      	pop	{r7, pc}

08007d3a <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8007d3a:	b580      	push	{r7, lr}
 8007d3c:	b088      	sub	sp, #32
 8007d3e:	af00      	add	r7, sp, #0
 8007d40:	6078      	str	r0, [r7, #4]
 8007d42:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8007d44:	683b      	ldr	r3, [r7, #0]
 8007d46:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8007d48:	2318      	movs	r3, #24
 8007d4a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007d4c:	2340      	movs	r3, #64	; 0x40
 8007d4e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007d50:	2300      	movs	r3, #0
 8007d52:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007d54:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007d58:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007d5a:	f107 0308 	add.w	r3, r7, #8
 8007d5e:	4619      	mov	r1, r3
 8007d60:	6878      	ldr	r0, [r7, #4]
 8007d62:	f7ff ff0e 	bl	8007b82 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8007d66:	f241 3288 	movw	r2, #5000	; 0x1388
 8007d6a:	2118      	movs	r1, #24
 8007d6c:	6878      	ldr	r0, [r7, #4]
 8007d6e:	f000 f9b3 	bl	80080d8 <SDMMC_GetCmdResp1>
 8007d72:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007d74:	69fb      	ldr	r3, [r7, #28]
}
 8007d76:	4618      	mov	r0, r3
 8007d78:	3720      	adds	r7, #32
 8007d7a:	46bd      	mov	sp, r7
 8007d7c:	bd80      	pop	{r7, pc}

08007d7e <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8007d7e:	b580      	push	{r7, lr}
 8007d80:	b088      	sub	sp, #32
 8007d82:	af00      	add	r7, sp, #0
 8007d84:	6078      	str	r0, [r7, #4]
 8007d86:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8007d88:	683b      	ldr	r3, [r7, #0]
 8007d8a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8007d8c:	2319      	movs	r3, #25
 8007d8e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007d90:	2340      	movs	r3, #64	; 0x40
 8007d92:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007d94:	2300      	movs	r3, #0
 8007d96:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007d98:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007d9c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007d9e:	f107 0308 	add.w	r3, r7, #8
 8007da2:	4619      	mov	r1, r3
 8007da4:	6878      	ldr	r0, [r7, #4]
 8007da6:	f7ff feec 	bl	8007b82 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8007daa:	f241 3288 	movw	r2, #5000	; 0x1388
 8007dae:	2119      	movs	r1, #25
 8007db0:	6878      	ldr	r0, [r7, #4]
 8007db2:	f000 f991 	bl	80080d8 <SDMMC_GetCmdResp1>
 8007db6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007db8:	69fb      	ldr	r3, [r7, #28]
}
 8007dba:	4618      	mov	r0, r3
 8007dbc:	3720      	adds	r7, #32
 8007dbe:	46bd      	mov	sp, r7
 8007dc0:	bd80      	pop	{r7, pc}
	...

08007dc4 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8007dc4:	b580      	push	{r7, lr}
 8007dc6:	b088      	sub	sp, #32
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8007dcc:	2300      	movs	r3, #0
 8007dce:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8007dd0:	230c      	movs	r3, #12
 8007dd2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007dd4:	2340      	movs	r3, #64	; 0x40
 8007dd6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007dd8:	2300      	movs	r3, #0
 8007dda:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007ddc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007de0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007de2:	f107 0308 	add.w	r3, r7, #8
 8007de6:	4619      	mov	r1, r3
 8007de8:	6878      	ldr	r0, [r7, #4]
 8007dea:	f7ff feca 	bl	8007b82 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8007dee:	4a05      	ldr	r2, [pc, #20]	; (8007e04 <SDMMC_CmdStopTransfer+0x40>)
 8007df0:	210c      	movs	r1, #12
 8007df2:	6878      	ldr	r0, [r7, #4]
 8007df4:	f000 f970 	bl	80080d8 <SDMMC_GetCmdResp1>
 8007df8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007dfa:	69fb      	ldr	r3, [r7, #28]
}
 8007dfc:	4618      	mov	r0, r3
 8007dfe:	3720      	adds	r7, #32
 8007e00:	46bd      	mov	sp, r7
 8007e02:	bd80      	pop	{r7, pc}
 8007e04:	05f5e100 	.word	0x05f5e100

08007e08 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8007e08:	b580      	push	{r7, lr}
 8007e0a:	b08a      	sub	sp, #40	; 0x28
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	60f8      	str	r0, [r7, #12]
 8007e10:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8007e14:	683b      	ldr	r3, [r7, #0]
 8007e16:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8007e18:	2307      	movs	r3, #7
 8007e1a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007e1c:	2340      	movs	r3, #64	; 0x40
 8007e1e:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007e20:	2300      	movs	r3, #0
 8007e22:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007e24:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007e28:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007e2a:	f107 0310 	add.w	r3, r7, #16
 8007e2e:	4619      	mov	r1, r3
 8007e30:	68f8      	ldr	r0, [r7, #12]
 8007e32:	f7ff fea6 	bl	8007b82 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8007e36:	f241 3288 	movw	r2, #5000	; 0x1388
 8007e3a:	2107      	movs	r1, #7
 8007e3c:	68f8      	ldr	r0, [r7, #12]
 8007e3e:	f000 f94b 	bl	80080d8 <SDMMC_GetCmdResp1>
 8007e42:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8007e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007e46:	4618      	mov	r0, r3
 8007e48:	3728      	adds	r7, #40	; 0x28
 8007e4a:	46bd      	mov	sp, r7
 8007e4c:	bd80      	pop	{r7, pc}

08007e4e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8007e4e:	b580      	push	{r7, lr}
 8007e50:	b088      	sub	sp, #32
 8007e52:	af00      	add	r7, sp, #0
 8007e54:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8007e56:	2300      	movs	r3, #0
 8007e58:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8007e5a:	2300      	movs	r3, #0
 8007e5c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8007e5e:	2300      	movs	r3, #0
 8007e60:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007e62:	2300      	movs	r3, #0
 8007e64:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007e66:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007e6a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007e6c:	f107 0308 	add.w	r3, r7, #8
 8007e70:	4619      	mov	r1, r3
 8007e72:	6878      	ldr	r0, [r7, #4]
 8007e74:	f7ff fe85 	bl	8007b82 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8007e78:	6878      	ldr	r0, [r7, #4]
 8007e7a:	f000 fb65 	bl	8008548 <SDMMC_GetCmdError>
 8007e7e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007e80:	69fb      	ldr	r3, [r7, #28]
}
 8007e82:	4618      	mov	r0, r3
 8007e84:	3720      	adds	r7, #32
 8007e86:	46bd      	mov	sp, r7
 8007e88:	bd80      	pop	{r7, pc}

08007e8a <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8007e8a:	b580      	push	{r7, lr}
 8007e8c:	b088      	sub	sp, #32
 8007e8e:	af00      	add	r7, sp, #0
 8007e90:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8007e92:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8007e96:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8007e98:	2308      	movs	r3, #8
 8007e9a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007e9c:	2340      	movs	r3, #64	; 0x40
 8007e9e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007ea0:	2300      	movs	r3, #0
 8007ea2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007ea4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007ea8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007eaa:	f107 0308 	add.w	r3, r7, #8
 8007eae:	4619      	mov	r1, r3
 8007eb0:	6878      	ldr	r0, [r7, #4]
 8007eb2:	f7ff fe66 	bl	8007b82 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8007eb6:	6878      	ldr	r0, [r7, #4]
 8007eb8:	f000 faf8 	bl	80084ac <SDMMC_GetCmdResp7>
 8007ebc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007ebe:	69fb      	ldr	r3, [r7, #28]
}
 8007ec0:	4618      	mov	r0, r3
 8007ec2:	3720      	adds	r7, #32
 8007ec4:	46bd      	mov	sp, r7
 8007ec6:	bd80      	pop	{r7, pc}

08007ec8 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8007ec8:	b580      	push	{r7, lr}
 8007eca:	b088      	sub	sp, #32
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	6078      	str	r0, [r7, #4]
 8007ed0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8007ed2:	683b      	ldr	r3, [r7, #0]
 8007ed4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8007ed6:	2337      	movs	r3, #55	; 0x37
 8007ed8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007eda:	2340      	movs	r3, #64	; 0x40
 8007edc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007ede:	2300      	movs	r3, #0
 8007ee0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007ee2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007ee6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007ee8:	f107 0308 	add.w	r3, r7, #8
 8007eec:	4619      	mov	r1, r3
 8007eee:	6878      	ldr	r0, [r7, #4]
 8007ef0:	f7ff fe47 	bl	8007b82 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8007ef4:	f241 3288 	movw	r2, #5000	; 0x1388
 8007ef8:	2137      	movs	r1, #55	; 0x37
 8007efa:	6878      	ldr	r0, [r7, #4]
 8007efc:	f000 f8ec 	bl	80080d8 <SDMMC_GetCmdResp1>
 8007f00:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007f02:	69fb      	ldr	r3, [r7, #28]
}
 8007f04:	4618      	mov	r0, r3
 8007f06:	3720      	adds	r7, #32
 8007f08:	46bd      	mov	sp, r7
 8007f0a:	bd80      	pop	{r7, pc}

08007f0c <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8007f0c:	b580      	push	{r7, lr}
 8007f0e:	b088      	sub	sp, #32
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	6078      	str	r0, [r7, #4]
 8007f14:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8007f16:	683b      	ldr	r3, [r7, #0]
 8007f18:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007f1c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007f20:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8007f22:	2329      	movs	r3, #41	; 0x29
 8007f24:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007f26:	2340      	movs	r3, #64	; 0x40
 8007f28:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007f2a:	2300      	movs	r3, #0
 8007f2c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007f2e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007f32:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007f34:	f107 0308 	add.w	r3, r7, #8
 8007f38:	4619      	mov	r1, r3
 8007f3a:	6878      	ldr	r0, [r7, #4]
 8007f3c:	f7ff fe21 	bl	8007b82 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8007f40:	6878      	ldr	r0, [r7, #4]
 8007f42:	f000 f9ff 	bl	8008344 <SDMMC_GetCmdResp3>
 8007f46:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007f48:	69fb      	ldr	r3, [r7, #28]
}
 8007f4a:	4618      	mov	r0, r3
 8007f4c:	3720      	adds	r7, #32
 8007f4e:	46bd      	mov	sp, r7
 8007f50:	bd80      	pop	{r7, pc}

08007f52 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 8007f52:	b580      	push	{r7, lr}
 8007f54:	b088      	sub	sp, #32
 8007f56:	af00      	add	r7, sp, #0
 8007f58:	6078      	str	r0, [r7, #4]
 8007f5a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8007f5c:	683b      	ldr	r3, [r7, #0]
 8007f5e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8007f60:	2306      	movs	r3, #6
 8007f62:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007f64:	2340      	movs	r3, #64	; 0x40
 8007f66:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007f68:	2300      	movs	r3, #0
 8007f6a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007f6c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007f70:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007f72:	f107 0308 	add.w	r3, r7, #8
 8007f76:	4619      	mov	r1, r3
 8007f78:	6878      	ldr	r0, [r7, #4]
 8007f7a:	f7ff fe02 	bl	8007b82 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8007f7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007f82:	2106      	movs	r1, #6
 8007f84:	6878      	ldr	r0, [r7, #4]
 8007f86:	f000 f8a7 	bl	80080d8 <SDMMC_GetCmdResp1>
 8007f8a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007f8c:	69fb      	ldr	r3, [r7, #28]
}
 8007f8e:	4618      	mov	r0, r3
 8007f90:	3720      	adds	r7, #32
 8007f92:	46bd      	mov	sp, r7
 8007f94:	bd80      	pop	{r7, pc}

08007f96 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 8007f96:	b580      	push	{r7, lr}
 8007f98:	b088      	sub	sp, #32
 8007f9a:	af00      	add	r7, sp, #0
 8007f9c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8007f9e:	2300      	movs	r3, #0
 8007fa0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8007fa2:	2333      	movs	r3, #51	; 0x33
 8007fa4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007fa6:	2340      	movs	r3, #64	; 0x40
 8007fa8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007faa:	2300      	movs	r3, #0
 8007fac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007fae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007fb2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007fb4:	f107 0308 	add.w	r3, r7, #8
 8007fb8:	4619      	mov	r1, r3
 8007fba:	6878      	ldr	r0, [r7, #4]
 8007fbc:	f7ff fde1 	bl	8007b82 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8007fc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8007fc4:	2133      	movs	r1, #51	; 0x33
 8007fc6:	6878      	ldr	r0, [r7, #4]
 8007fc8:	f000 f886 	bl	80080d8 <SDMMC_GetCmdResp1>
 8007fcc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007fce:	69fb      	ldr	r3, [r7, #28]
}
 8007fd0:	4618      	mov	r0, r3
 8007fd2:	3720      	adds	r7, #32
 8007fd4:	46bd      	mov	sp, r7
 8007fd6:	bd80      	pop	{r7, pc}

08007fd8 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8007fd8:	b580      	push	{r7, lr}
 8007fda:	b088      	sub	sp, #32
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8007fe0:	2300      	movs	r3, #0
 8007fe2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8007fe4:	2302      	movs	r3, #2
 8007fe6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8007fe8:	23c0      	movs	r3, #192	; 0xc0
 8007fea:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007fec:	2300      	movs	r3, #0
 8007fee:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007ff0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007ff4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007ff6:	f107 0308 	add.w	r3, r7, #8
 8007ffa:	4619      	mov	r1, r3
 8007ffc:	6878      	ldr	r0, [r7, #4]
 8007ffe:	f7ff fdc0 	bl	8007b82 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8008002:	6878      	ldr	r0, [r7, #4]
 8008004:	f000 f956 	bl	80082b4 <SDMMC_GetCmdResp2>
 8008008:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800800a:	69fb      	ldr	r3, [r7, #28]
}
 800800c:	4618      	mov	r0, r3
 800800e:	3720      	adds	r7, #32
 8008010:	46bd      	mov	sp, r7
 8008012:	bd80      	pop	{r7, pc}

08008014 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8008014:	b580      	push	{r7, lr}
 8008016:	b088      	sub	sp, #32
 8008018:	af00      	add	r7, sp, #0
 800801a:	6078      	str	r0, [r7, #4]
 800801c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800801e:	683b      	ldr	r3, [r7, #0]
 8008020:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8008022:	2309      	movs	r3, #9
 8008024:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8008026:	23c0      	movs	r3, #192	; 0xc0
 8008028:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800802a:	2300      	movs	r3, #0
 800802c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800802e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008032:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008034:	f107 0308 	add.w	r3, r7, #8
 8008038:	4619      	mov	r1, r3
 800803a:	6878      	ldr	r0, [r7, #4]
 800803c:	f7ff fda1 	bl	8007b82 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8008040:	6878      	ldr	r0, [r7, #4]
 8008042:	f000 f937 	bl	80082b4 <SDMMC_GetCmdResp2>
 8008046:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008048:	69fb      	ldr	r3, [r7, #28]
}
 800804a:	4618      	mov	r0, r3
 800804c:	3720      	adds	r7, #32
 800804e:	46bd      	mov	sp, r7
 8008050:	bd80      	pop	{r7, pc}

08008052 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8008052:	b580      	push	{r7, lr}
 8008054:	b088      	sub	sp, #32
 8008056:	af00      	add	r7, sp, #0
 8008058:	6078      	str	r0, [r7, #4]
 800805a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800805c:	2300      	movs	r3, #0
 800805e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8008060:	2303      	movs	r3, #3
 8008062:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008064:	2340      	movs	r3, #64	; 0x40
 8008066:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008068:	2300      	movs	r3, #0
 800806a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800806c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008070:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008072:	f107 0308 	add.w	r3, r7, #8
 8008076:	4619      	mov	r1, r3
 8008078:	6878      	ldr	r0, [r7, #4]
 800807a:	f7ff fd82 	bl	8007b82 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800807e:	683a      	ldr	r2, [r7, #0]
 8008080:	2103      	movs	r1, #3
 8008082:	6878      	ldr	r0, [r7, #4]
 8008084:	f000 f99c 	bl	80083c0 <SDMMC_GetCmdResp6>
 8008088:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800808a:	69fb      	ldr	r3, [r7, #28]
}
 800808c:	4618      	mov	r0, r3
 800808e:	3720      	adds	r7, #32
 8008090:	46bd      	mov	sp, r7
 8008092:	bd80      	pop	{r7, pc}

08008094 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8008094:	b580      	push	{r7, lr}
 8008096:	b088      	sub	sp, #32
 8008098:	af00      	add	r7, sp, #0
 800809a:	6078      	str	r0, [r7, #4]
 800809c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800809e:	683b      	ldr	r3, [r7, #0]
 80080a0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 80080a2:	230d      	movs	r3, #13
 80080a4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80080a6:	2340      	movs	r3, #64	; 0x40
 80080a8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80080aa:	2300      	movs	r3, #0
 80080ac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80080ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80080b2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80080b4:	f107 0308 	add.w	r3, r7, #8
 80080b8:	4619      	mov	r1, r3
 80080ba:	6878      	ldr	r0, [r7, #4]
 80080bc:	f7ff fd61 	bl	8007b82 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 80080c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80080c4:	210d      	movs	r1, #13
 80080c6:	6878      	ldr	r0, [r7, #4]
 80080c8:	f000 f806 	bl	80080d8 <SDMMC_GetCmdResp1>
 80080cc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80080ce:	69fb      	ldr	r3, [r7, #28]
}
 80080d0:	4618      	mov	r0, r3
 80080d2:	3720      	adds	r7, #32
 80080d4:	46bd      	mov	sp, r7
 80080d6:	bd80      	pop	{r7, pc}

080080d8 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 80080d8:	b580      	push	{r7, lr}
 80080da:	b088      	sub	sp, #32
 80080dc:	af00      	add	r7, sp, #0
 80080de:	60f8      	str	r0, [r7, #12]
 80080e0:	460b      	mov	r3, r1
 80080e2:	607a      	str	r2, [r7, #4]
 80080e4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80080e6:	4b70      	ldr	r3, [pc, #448]	; (80082a8 <SDMMC_GetCmdResp1+0x1d0>)
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	4a70      	ldr	r2, [pc, #448]	; (80082ac <SDMMC_GetCmdResp1+0x1d4>)
 80080ec:	fba2 2303 	umull	r2, r3, r2, r3
 80080f0:	0a5a      	lsrs	r2, r3, #9
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	fb02 f303 	mul.w	r3, r2, r3
 80080f8:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 80080fa:	69fb      	ldr	r3, [r7, #28]
 80080fc:	1e5a      	subs	r2, r3, #1
 80080fe:	61fa      	str	r2, [r7, #28]
 8008100:	2b00      	cmp	r3, #0
 8008102:	d102      	bne.n	800810a <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008104:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008108:	e0c9      	b.n	800829e <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800810e:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008110:	69bb      	ldr	r3, [r7, #24]
 8008112:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8008116:	2b00      	cmp	r3, #0
 8008118:	d0ef      	beq.n	80080fa <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800811a:	69bb      	ldr	r3, [r7, #24]
 800811c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008120:	2b00      	cmp	r3, #0
 8008122:	d1ea      	bne.n	80080fa <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008128:	f003 0304 	and.w	r3, r3, #4
 800812c:	2b00      	cmp	r3, #0
 800812e:	d004      	beq.n	800813a <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	2204      	movs	r2, #4
 8008134:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008136:	2304      	movs	r3, #4
 8008138:	e0b1      	b.n	800829e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800813e:	f003 0301 	and.w	r3, r3, #1
 8008142:	2b00      	cmp	r3, #0
 8008144:	d004      	beq.n	8008150 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	2201      	movs	r2, #1
 800814a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800814c:	2301      	movs	r3, #1
 800814e:	e0a6      	b.n	800829e <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	22c5      	movs	r2, #197	; 0xc5
 8008154:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8008156:	68f8      	ldr	r0, [r7, #12]
 8008158:	f7ff fd3d 	bl	8007bd6 <SDIO_GetCommandResponse>
 800815c:	4603      	mov	r3, r0
 800815e:	461a      	mov	r2, r3
 8008160:	7afb      	ldrb	r3, [r7, #11]
 8008162:	4293      	cmp	r3, r2
 8008164:	d001      	beq.n	800816a <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008166:	2301      	movs	r3, #1
 8008168:	e099      	b.n	800829e <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800816a:	2100      	movs	r1, #0
 800816c:	68f8      	ldr	r0, [r7, #12]
 800816e:	f7ff fd3f 	bl	8007bf0 <SDIO_GetResponse>
 8008172:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8008174:	697a      	ldr	r2, [r7, #20]
 8008176:	4b4e      	ldr	r3, [pc, #312]	; (80082b0 <SDMMC_GetCmdResp1+0x1d8>)
 8008178:	4013      	ands	r3, r2
 800817a:	2b00      	cmp	r3, #0
 800817c:	d101      	bne.n	8008182 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800817e:	2300      	movs	r3, #0
 8008180:	e08d      	b.n	800829e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8008182:	697b      	ldr	r3, [r7, #20]
 8008184:	2b00      	cmp	r3, #0
 8008186:	da02      	bge.n	800818e <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8008188:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800818c:	e087      	b.n	800829e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800818e:	697b      	ldr	r3, [r7, #20]
 8008190:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008194:	2b00      	cmp	r3, #0
 8008196:	d001      	beq.n	800819c <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8008198:	2340      	movs	r3, #64	; 0x40
 800819a:	e080      	b.n	800829e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800819c:	697b      	ldr	r3, [r7, #20]
 800819e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d001      	beq.n	80081aa <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80081a6:	2380      	movs	r3, #128	; 0x80
 80081a8:	e079      	b.n	800829e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80081aa:	697b      	ldr	r3, [r7, #20]
 80081ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d002      	beq.n	80081ba <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80081b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80081b8:	e071      	b.n	800829e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80081ba:	697b      	ldr	r3, [r7, #20]
 80081bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d002      	beq.n	80081ca <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80081c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80081c8:	e069      	b.n	800829e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80081ca:	697b      	ldr	r3, [r7, #20]
 80081cc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d002      	beq.n	80081da <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80081d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80081d8:	e061      	b.n	800829e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80081da:	697b      	ldr	r3, [r7, #20]
 80081dc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d002      	beq.n	80081ea <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80081e4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80081e8:	e059      	b.n	800829e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80081ea:	697b      	ldr	r3, [r7, #20]
 80081ec:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d002      	beq.n	80081fa <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80081f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80081f8:	e051      	b.n	800829e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80081fa:	697b      	ldr	r3, [r7, #20]
 80081fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008200:	2b00      	cmp	r3, #0
 8008202:	d002      	beq.n	800820a <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8008204:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008208:	e049      	b.n	800829e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800820a:	697b      	ldr	r3, [r7, #20]
 800820c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008210:	2b00      	cmp	r3, #0
 8008212:	d002      	beq.n	800821a <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8008214:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008218:	e041      	b.n	800829e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800821a:	697b      	ldr	r3, [r7, #20]
 800821c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008220:	2b00      	cmp	r3, #0
 8008222:	d002      	beq.n	800822a <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8008224:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008228:	e039      	b.n	800829e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800822a:	697b      	ldr	r3, [r7, #20]
 800822c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008230:	2b00      	cmp	r3, #0
 8008232:	d002      	beq.n	800823a <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8008234:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008238:	e031      	b.n	800829e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800823a:	697b      	ldr	r3, [r7, #20]
 800823c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008240:	2b00      	cmp	r3, #0
 8008242:	d002      	beq.n	800824a <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8008244:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8008248:	e029      	b.n	800829e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800824a:	697b      	ldr	r3, [r7, #20]
 800824c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008250:	2b00      	cmp	r3, #0
 8008252:	d002      	beq.n	800825a <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8008254:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8008258:	e021      	b.n	800829e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800825a:	697b      	ldr	r3, [r7, #20]
 800825c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008260:	2b00      	cmp	r3, #0
 8008262:	d002      	beq.n	800826a <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8008264:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008268:	e019      	b.n	800829e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800826a:	697b      	ldr	r3, [r7, #20]
 800826c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008270:	2b00      	cmp	r3, #0
 8008272:	d002      	beq.n	800827a <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8008274:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008278:	e011      	b.n	800829e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800827a:	697b      	ldr	r3, [r7, #20]
 800827c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008280:	2b00      	cmp	r3, #0
 8008282:	d002      	beq.n	800828a <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8008284:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8008288:	e009      	b.n	800829e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800828a:	697b      	ldr	r3, [r7, #20]
 800828c:	f003 0308 	and.w	r3, r3, #8
 8008290:	2b00      	cmp	r3, #0
 8008292:	d002      	beq.n	800829a <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8008294:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8008298:	e001      	b.n	800829e <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800829a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800829e:	4618      	mov	r0, r3
 80082a0:	3720      	adds	r7, #32
 80082a2:	46bd      	mov	sp, r7
 80082a4:	bd80      	pop	{r7, pc}
 80082a6:	bf00      	nop
 80082a8:	20000000 	.word	0x20000000
 80082ac:	10624dd3 	.word	0x10624dd3
 80082b0:	fdffe008 	.word	0xfdffe008

080082b4 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 80082b4:	b480      	push	{r7}
 80082b6:	b085      	sub	sp, #20
 80082b8:	af00      	add	r7, sp, #0
 80082ba:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80082bc:	4b1f      	ldr	r3, [pc, #124]	; (800833c <SDMMC_GetCmdResp2+0x88>)
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	4a1f      	ldr	r2, [pc, #124]	; (8008340 <SDMMC_GetCmdResp2+0x8c>)
 80082c2:	fba2 2303 	umull	r2, r3, r2, r3
 80082c6:	0a5b      	lsrs	r3, r3, #9
 80082c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80082cc:	fb02 f303 	mul.w	r3, r2, r3
 80082d0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	1e5a      	subs	r2, r3, #1
 80082d6:	60fa      	str	r2, [r7, #12]
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d102      	bne.n	80082e2 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80082dc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80082e0:	e026      	b.n	8008330 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80082e6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80082e8:	68bb      	ldr	r3, [r7, #8]
 80082ea:	f003 0345 	and.w	r3, r3, #69	; 0x45
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d0ef      	beq.n	80082d2 <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80082f2:	68bb      	ldr	r3, [r7, #8]
 80082f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d1ea      	bne.n	80082d2 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008300:	f003 0304 	and.w	r3, r3, #4
 8008304:	2b00      	cmp	r3, #0
 8008306:	d004      	beq.n	8008312 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	2204      	movs	r2, #4
 800830c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800830e:	2304      	movs	r3, #4
 8008310:	e00e      	b.n	8008330 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008316:	f003 0301 	and.w	r3, r3, #1
 800831a:	2b00      	cmp	r3, #0
 800831c:	d004      	beq.n	8008328 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	2201      	movs	r2, #1
 8008322:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008324:	2301      	movs	r3, #1
 8008326:	e003      	b.n	8008330 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	22c5      	movs	r2, #197	; 0xc5
 800832c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800832e:	2300      	movs	r3, #0
}
 8008330:	4618      	mov	r0, r3
 8008332:	3714      	adds	r7, #20
 8008334:	46bd      	mov	sp, r7
 8008336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800833a:	4770      	bx	lr
 800833c:	20000000 	.word	0x20000000
 8008340:	10624dd3 	.word	0x10624dd3

08008344 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8008344:	b480      	push	{r7}
 8008346:	b085      	sub	sp, #20
 8008348:	af00      	add	r7, sp, #0
 800834a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800834c:	4b1a      	ldr	r3, [pc, #104]	; (80083b8 <SDMMC_GetCmdResp3+0x74>)
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	4a1a      	ldr	r2, [pc, #104]	; (80083bc <SDMMC_GetCmdResp3+0x78>)
 8008352:	fba2 2303 	umull	r2, r3, r2, r3
 8008356:	0a5b      	lsrs	r3, r3, #9
 8008358:	f241 3288 	movw	r2, #5000	; 0x1388
 800835c:	fb02 f303 	mul.w	r3, r2, r3
 8008360:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	1e5a      	subs	r2, r3, #1
 8008366:	60fa      	str	r2, [r7, #12]
 8008368:	2b00      	cmp	r3, #0
 800836a:	d102      	bne.n	8008372 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800836c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008370:	e01b      	b.n	80083aa <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008376:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008378:	68bb      	ldr	r3, [r7, #8]
 800837a:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800837e:	2b00      	cmp	r3, #0
 8008380:	d0ef      	beq.n	8008362 <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8008382:	68bb      	ldr	r3, [r7, #8]
 8008384:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008388:	2b00      	cmp	r3, #0
 800838a:	d1ea      	bne.n	8008362 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008390:	f003 0304 	and.w	r3, r3, #4
 8008394:	2b00      	cmp	r3, #0
 8008396:	d004      	beq.n	80083a2 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	2204      	movs	r2, #4
 800839c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800839e:	2304      	movs	r3, #4
 80083a0:	e003      	b.n	80083aa <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	22c5      	movs	r2, #197	; 0xc5
 80083a6:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80083a8:	2300      	movs	r3, #0
}
 80083aa:	4618      	mov	r0, r3
 80083ac:	3714      	adds	r7, #20
 80083ae:	46bd      	mov	sp, r7
 80083b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b4:	4770      	bx	lr
 80083b6:	bf00      	nop
 80083b8:	20000000 	.word	0x20000000
 80083bc:	10624dd3 	.word	0x10624dd3

080083c0 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80083c0:	b580      	push	{r7, lr}
 80083c2:	b088      	sub	sp, #32
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	60f8      	str	r0, [r7, #12]
 80083c8:	460b      	mov	r3, r1
 80083ca:	607a      	str	r2, [r7, #4]
 80083cc:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80083ce:	4b35      	ldr	r3, [pc, #212]	; (80084a4 <SDMMC_GetCmdResp6+0xe4>)
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	4a35      	ldr	r2, [pc, #212]	; (80084a8 <SDMMC_GetCmdResp6+0xe8>)
 80083d4:	fba2 2303 	umull	r2, r3, r2, r3
 80083d8:	0a5b      	lsrs	r3, r3, #9
 80083da:	f241 3288 	movw	r2, #5000	; 0x1388
 80083de:	fb02 f303 	mul.w	r3, r2, r3
 80083e2:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 80083e4:	69fb      	ldr	r3, [r7, #28]
 80083e6:	1e5a      	subs	r2, r3, #1
 80083e8:	61fa      	str	r2, [r7, #28]
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d102      	bne.n	80083f4 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 80083ee:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80083f2:	e052      	b.n	800849a <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083f8:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80083fa:	69bb      	ldr	r3, [r7, #24]
 80083fc:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8008400:	2b00      	cmp	r3, #0
 8008402:	d0ef      	beq.n	80083e4 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8008404:	69bb      	ldr	r3, [r7, #24]
 8008406:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800840a:	2b00      	cmp	r3, #0
 800840c:	d1ea      	bne.n	80083e4 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008412:	f003 0304 	and.w	r3, r3, #4
 8008416:	2b00      	cmp	r3, #0
 8008418:	d004      	beq.n	8008424 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	2204      	movs	r2, #4
 800841e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008420:	2304      	movs	r3, #4
 8008422:	e03a      	b.n	800849a <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008428:	f003 0301 	and.w	r3, r3, #1
 800842c:	2b00      	cmp	r3, #0
 800842e:	d004      	beq.n	800843a <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	2201      	movs	r2, #1
 8008434:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008436:	2301      	movs	r3, #1
 8008438:	e02f      	b.n	800849a <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800843a:	68f8      	ldr	r0, [r7, #12]
 800843c:	f7ff fbcb 	bl	8007bd6 <SDIO_GetCommandResponse>
 8008440:	4603      	mov	r3, r0
 8008442:	461a      	mov	r2, r3
 8008444:	7afb      	ldrb	r3, [r7, #11]
 8008446:	4293      	cmp	r3, r2
 8008448:	d001      	beq.n	800844e <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800844a:	2301      	movs	r3, #1
 800844c:	e025      	b.n	800849a <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	22c5      	movs	r2, #197	; 0xc5
 8008452:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8008454:	2100      	movs	r1, #0
 8008456:	68f8      	ldr	r0, [r7, #12]
 8008458:	f7ff fbca 	bl	8007bf0 <SDIO_GetResponse>
 800845c:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800845e:	697b      	ldr	r3, [r7, #20]
 8008460:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8008464:	2b00      	cmp	r3, #0
 8008466:	d106      	bne.n	8008476 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8008468:	697b      	ldr	r3, [r7, #20]
 800846a:	0c1b      	lsrs	r3, r3, #16
 800846c:	b29a      	uxth	r2, r3
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8008472:	2300      	movs	r3, #0
 8008474:	e011      	b.n	800849a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8008476:	697b      	ldr	r3, [r7, #20]
 8008478:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800847c:	2b00      	cmp	r3, #0
 800847e:	d002      	beq.n	8008486 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8008480:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008484:	e009      	b.n	800849a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8008486:	697b      	ldr	r3, [r7, #20]
 8008488:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800848c:	2b00      	cmp	r3, #0
 800848e:	d002      	beq.n	8008496 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8008490:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008494:	e001      	b.n	800849a <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8008496:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800849a:	4618      	mov	r0, r3
 800849c:	3720      	adds	r7, #32
 800849e:	46bd      	mov	sp, r7
 80084a0:	bd80      	pop	{r7, pc}
 80084a2:	bf00      	nop
 80084a4:	20000000 	.word	0x20000000
 80084a8:	10624dd3 	.word	0x10624dd3

080084ac <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 80084ac:	b480      	push	{r7}
 80084ae:	b085      	sub	sp, #20
 80084b0:	af00      	add	r7, sp, #0
 80084b2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80084b4:	4b22      	ldr	r3, [pc, #136]	; (8008540 <SDMMC_GetCmdResp7+0x94>)
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	4a22      	ldr	r2, [pc, #136]	; (8008544 <SDMMC_GetCmdResp7+0x98>)
 80084ba:	fba2 2303 	umull	r2, r3, r2, r3
 80084be:	0a5b      	lsrs	r3, r3, #9
 80084c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80084c4:	fb02 f303 	mul.w	r3, r2, r3
 80084c8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	1e5a      	subs	r2, r3, #1
 80084ce:	60fa      	str	r2, [r7, #12]
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d102      	bne.n	80084da <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80084d4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80084d8:	e02c      	b.n	8008534 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80084de:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80084e0:	68bb      	ldr	r3, [r7, #8]
 80084e2:	f003 0345 	and.w	r3, r3, #69	; 0x45
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d0ef      	beq.n	80084ca <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80084ea:	68bb      	ldr	r3, [r7, #8]
 80084ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d1ea      	bne.n	80084ca <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80084f8:	f003 0304 	and.w	r3, r3, #4
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d004      	beq.n	800850a <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	2204      	movs	r2, #4
 8008504:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008506:	2304      	movs	r3, #4
 8008508:	e014      	b.n	8008534 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800850e:	f003 0301 	and.w	r3, r3, #1
 8008512:	2b00      	cmp	r3, #0
 8008514:	d004      	beq.n	8008520 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	2201      	movs	r2, #1
 800851a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800851c:	2301      	movs	r3, #1
 800851e:	e009      	b.n	8008534 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008524:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008528:	2b00      	cmp	r3, #0
 800852a:	d002      	beq.n	8008532 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	2240      	movs	r2, #64	; 0x40
 8008530:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8008532:	2300      	movs	r3, #0
  
}
 8008534:	4618      	mov	r0, r3
 8008536:	3714      	adds	r7, #20
 8008538:	46bd      	mov	sp, r7
 800853a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800853e:	4770      	bx	lr
 8008540:	20000000 	.word	0x20000000
 8008544:	10624dd3 	.word	0x10624dd3

08008548 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8008548:	b480      	push	{r7}
 800854a:	b085      	sub	sp, #20
 800854c:	af00      	add	r7, sp, #0
 800854e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008550:	4b11      	ldr	r3, [pc, #68]	; (8008598 <SDMMC_GetCmdError+0x50>)
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	4a11      	ldr	r2, [pc, #68]	; (800859c <SDMMC_GetCmdError+0x54>)
 8008556:	fba2 2303 	umull	r2, r3, r2, r3
 800855a:	0a5b      	lsrs	r3, r3, #9
 800855c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008560:	fb02 f303 	mul.w	r3, r2, r3
 8008564:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	1e5a      	subs	r2, r3, #1
 800856a:	60fa      	str	r2, [r7, #12]
 800856c:	2b00      	cmp	r3, #0
 800856e:	d102      	bne.n	8008576 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008570:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008574:	e009      	b.n	800858a <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800857a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800857e:	2b00      	cmp	r3, #0
 8008580:	d0f1      	beq.n	8008566 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	22c5      	movs	r2, #197	; 0xc5
 8008586:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8008588:	2300      	movs	r3, #0
}
 800858a:	4618      	mov	r0, r3
 800858c:	3714      	adds	r7, #20
 800858e:	46bd      	mov	sp, r7
 8008590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008594:	4770      	bx	lr
 8008596:	bf00      	nop
 8008598:	20000000 	.word	0x20000000
 800859c:	10624dd3 	.word	0x10624dd3

080085a0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80085a0:	b084      	sub	sp, #16
 80085a2:	b580      	push	{r7, lr}
 80085a4:	b084      	sub	sp, #16
 80085a6:	af00      	add	r7, sp, #0
 80085a8:	6078      	str	r0, [r7, #4]
 80085aa:	f107 001c 	add.w	r0, r7, #28
 80085ae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80085b2:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80085b6:	2b01      	cmp	r3, #1
 80085b8:	d123      	bne.n	8008602 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085be:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	68db      	ldr	r3, [r3, #12]
 80085ca:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80085ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80085d2:	687a      	ldr	r2, [r7, #4]
 80085d4:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	68db      	ldr	r3, [r3, #12]
 80085da:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80085e2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80085e6:	2b01      	cmp	r3, #1
 80085e8:	d105      	bne.n	80085f6 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	68db      	ldr	r3, [r3, #12]
 80085ee:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80085f6:	6878      	ldr	r0, [r7, #4]
 80085f8:	f001 fae2 	bl	8009bc0 <USB_CoreReset>
 80085fc:	4603      	mov	r3, r0
 80085fe:	73fb      	strb	r3, [r7, #15]
 8008600:	e01b      	b.n	800863a <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	68db      	ldr	r3, [r3, #12]
 8008606:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800860e:	6878      	ldr	r0, [r7, #4]
 8008610:	f001 fad6 	bl	8009bc0 <USB_CoreReset>
 8008614:	4603      	mov	r3, r0
 8008616:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008618:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800861c:	2b00      	cmp	r3, #0
 800861e:	d106      	bne.n	800862e <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008624:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	639a      	str	r2, [r3, #56]	; 0x38
 800862c:	e005      	b.n	800863a <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008632:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800863a:	7fbb      	ldrb	r3, [r7, #30]
 800863c:	2b01      	cmp	r3, #1
 800863e:	d10b      	bne.n	8008658 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	689b      	ldr	r3, [r3, #8]
 8008644:	f043 0206 	orr.w	r2, r3, #6
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	689b      	ldr	r3, [r3, #8]
 8008650:	f043 0220 	orr.w	r2, r3, #32
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008658:	7bfb      	ldrb	r3, [r7, #15]
}
 800865a:	4618      	mov	r0, r3
 800865c:	3710      	adds	r7, #16
 800865e:	46bd      	mov	sp, r7
 8008660:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008664:	b004      	add	sp, #16
 8008666:	4770      	bx	lr

08008668 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8008668:	b480      	push	{r7}
 800866a:	b087      	sub	sp, #28
 800866c:	af00      	add	r7, sp, #0
 800866e:	60f8      	str	r0, [r7, #12]
 8008670:	60b9      	str	r1, [r7, #8]
 8008672:	4613      	mov	r3, r2
 8008674:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8008676:	79fb      	ldrb	r3, [r7, #7]
 8008678:	2b02      	cmp	r3, #2
 800867a:	d165      	bne.n	8008748 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800867c:	68bb      	ldr	r3, [r7, #8]
 800867e:	4a41      	ldr	r2, [pc, #260]	; (8008784 <USB_SetTurnaroundTime+0x11c>)
 8008680:	4293      	cmp	r3, r2
 8008682:	d906      	bls.n	8008692 <USB_SetTurnaroundTime+0x2a>
 8008684:	68bb      	ldr	r3, [r7, #8]
 8008686:	4a40      	ldr	r2, [pc, #256]	; (8008788 <USB_SetTurnaroundTime+0x120>)
 8008688:	4293      	cmp	r3, r2
 800868a:	d202      	bcs.n	8008692 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800868c:	230f      	movs	r3, #15
 800868e:	617b      	str	r3, [r7, #20]
 8008690:	e062      	b.n	8008758 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8008692:	68bb      	ldr	r3, [r7, #8]
 8008694:	4a3c      	ldr	r2, [pc, #240]	; (8008788 <USB_SetTurnaroundTime+0x120>)
 8008696:	4293      	cmp	r3, r2
 8008698:	d306      	bcc.n	80086a8 <USB_SetTurnaroundTime+0x40>
 800869a:	68bb      	ldr	r3, [r7, #8]
 800869c:	4a3b      	ldr	r2, [pc, #236]	; (800878c <USB_SetTurnaroundTime+0x124>)
 800869e:	4293      	cmp	r3, r2
 80086a0:	d202      	bcs.n	80086a8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80086a2:	230e      	movs	r3, #14
 80086a4:	617b      	str	r3, [r7, #20]
 80086a6:	e057      	b.n	8008758 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80086a8:	68bb      	ldr	r3, [r7, #8]
 80086aa:	4a38      	ldr	r2, [pc, #224]	; (800878c <USB_SetTurnaroundTime+0x124>)
 80086ac:	4293      	cmp	r3, r2
 80086ae:	d306      	bcc.n	80086be <USB_SetTurnaroundTime+0x56>
 80086b0:	68bb      	ldr	r3, [r7, #8]
 80086b2:	4a37      	ldr	r2, [pc, #220]	; (8008790 <USB_SetTurnaroundTime+0x128>)
 80086b4:	4293      	cmp	r3, r2
 80086b6:	d202      	bcs.n	80086be <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80086b8:	230d      	movs	r3, #13
 80086ba:	617b      	str	r3, [r7, #20]
 80086bc:	e04c      	b.n	8008758 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80086be:	68bb      	ldr	r3, [r7, #8]
 80086c0:	4a33      	ldr	r2, [pc, #204]	; (8008790 <USB_SetTurnaroundTime+0x128>)
 80086c2:	4293      	cmp	r3, r2
 80086c4:	d306      	bcc.n	80086d4 <USB_SetTurnaroundTime+0x6c>
 80086c6:	68bb      	ldr	r3, [r7, #8]
 80086c8:	4a32      	ldr	r2, [pc, #200]	; (8008794 <USB_SetTurnaroundTime+0x12c>)
 80086ca:	4293      	cmp	r3, r2
 80086cc:	d802      	bhi.n	80086d4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80086ce:	230c      	movs	r3, #12
 80086d0:	617b      	str	r3, [r7, #20]
 80086d2:	e041      	b.n	8008758 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80086d4:	68bb      	ldr	r3, [r7, #8]
 80086d6:	4a2f      	ldr	r2, [pc, #188]	; (8008794 <USB_SetTurnaroundTime+0x12c>)
 80086d8:	4293      	cmp	r3, r2
 80086da:	d906      	bls.n	80086ea <USB_SetTurnaroundTime+0x82>
 80086dc:	68bb      	ldr	r3, [r7, #8]
 80086de:	4a2e      	ldr	r2, [pc, #184]	; (8008798 <USB_SetTurnaroundTime+0x130>)
 80086e0:	4293      	cmp	r3, r2
 80086e2:	d802      	bhi.n	80086ea <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80086e4:	230b      	movs	r3, #11
 80086e6:	617b      	str	r3, [r7, #20]
 80086e8:	e036      	b.n	8008758 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80086ea:	68bb      	ldr	r3, [r7, #8]
 80086ec:	4a2a      	ldr	r2, [pc, #168]	; (8008798 <USB_SetTurnaroundTime+0x130>)
 80086ee:	4293      	cmp	r3, r2
 80086f0:	d906      	bls.n	8008700 <USB_SetTurnaroundTime+0x98>
 80086f2:	68bb      	ldr	r3, [r7, #8]
 80086f4:	4a29      	ldr	r2, [pc, #164]	; (800879c <USB_SetTurnaroundTime+0x134>)
 80086f6:	4293      	cmp	r3, r2
 80086f8:	d802      	bhi.n	8008700 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80086fa:	230a      	movs	r3, #10
 80086fc:	617b      	str	r3, [r7, #20]
 80086fe:	e02b      	b.n	8008758 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8008700:	68bb      	ldr	r3, [r7, #8]
 8008702:	4a26      	ldr	r2, [pc, #152]	; (800879c <USB_SetTurnaroundTime+0x134>)
 8008704:	4293      	cmp	r3, r2
 8008706:	d906      	bls.n	8008716 <USB_SetTurnaroundTime+0xae>
 8008708:	68bb      	ldr	r3, [r7, #8]
 800870a:	4a25      	ldr	r2, [pc, #148]	; (80087a0 <USB_SetTurnaroundTime+0x138>)
 800870c:	4293      	cmp	r3, r2
 800870e:	d202      	bcs.n	8008716 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8008710:	2309      	movs	r3, #9
 8008712:	617b      	str	r3, [r7, #20]
 8008714:	e020      	b.n	8008758 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8008716:	68bb      	ldr	r3, [r7, #8]
 8008718:	4a21      	ldr	r2, [pc, #132]	; (80087a0 <USB_SetTurnaroundTime+0x138>)
 800871a:	4293      	cmp	r3, r2
 800871c:	d306      	bcc.n	800872c <USB_SetTurnaroundTime+0xc4>
 800871e:	68bb      	ldr	r3, [r7, #8]
 8008720:	4a20      	ldr	r2, [pc, #128]	; (80087a4 <USB_SetTurnaroundTime+0x13c>)
 8008722:	4293      	cmp	r3, r2
 8008724:	d802      	bhi.n	800872c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8008726:	2308      	movs	r3, #8
 8008728:	617b      	str	r3, [r7, #20]
 800872a:	e015      	b.n	8008758 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800872c:	68bb      	ldr	r3, [r7, #8]
 800872e:	4a1d      	ldr	r2, [pc, #116]	; (80087a4 <USB_SetTurnaroundTime+0x13c>)
 8008730:	4293      	cmp	r3, r2
 8008732:	d906      	bls.n	8008742 <USB_SetTurnaroundTime+0xda>
 8008734:	68bb      	ldr	r3, [r7, #8]
 8008736:	4a1c      	ldr	r2, [pc, #112]	; (80087a8 <USB_SetTurnaroundTime+0x140>)
 8008738:	4293      	cmp	r3, r2
 800873a:	d202      	bcs.n	8008742 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800873c:	2307      	movs	r3, #7
 800873e:	617b      	str	r3, [r7, #20]
 8008740:	e00a      	b.n	8008758 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8008742:	2306      	movs	r3, #6
 8008744:	617b      	str	r3, [r7, #20]
 8008746:	e007      	b.n	8008758 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8008748:	79fb      	ldrb	r3, [r7, #7]
 800874a:	2b00      	cmp	r3, #0
 800874c:	d102      	bne.n	8008754 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800874e:	2309      	movs	r3, #9
 8008750:	617b      	str	r3, [r7, #20]
 8008752:	e001      	b.n	8008758 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8008754:	2309      	movs	r3, #9
 8008756:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	68db      	ldr	r3, [r3, #12]
 800875c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	68da      	ldr	r2, [r3, #12]
 8008768:	697b      	ldr	r3, [r7, #20]
 800876a:	029b      	lsls	r3, r3, #10
 800876c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8008770:	431a      	orrs	r2, r3
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008776:	2300      	movs	r3, #0
}
 8008778:	4618      	mov	r0, r3
 800877a:	371c      	adds	r7, #28
 800877c:	46bd      	mov	sp, r7
 800877e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008782:	4770      	bx	lr
 8008784:	00d8acbf 	.word	0x00d8acbf
 8008788:	00e4e1c0 	.word	0x00e4e1c0
 800878c:	00f42400 	.word	0x00f42400
 8008790:	01067380 	.word	0x01067380
 8008794:	011a499f 	.word	0x011a499f
 8008798:	01312cff 	.word	0x01312cff
 800879c:	014ca43f 	.word	0x014ca43f
 80087a0:	016e3600 	.word	0x016e3600
 80087a4:	01a6ab1f 	.word	0x01a6ab1f
 80087a8:	01e84800 	.word	0x01e84800

080087ac <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80087ac:	b480      	push	{r7}
 80087ae:	b083      	sub	sp, #12
 80087b0:	af00      	add	r7, sp, #0
 80087b2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	689b      	ldr	r3, [r3, #8]
 80087b8:	f043 0201 	orr.w	r2, r3, #1
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80087c0:	2300      	movs	r3, #0
}
 80087c2:	4618      	mov	r0, r3
 80087c4:	370c      	adds	r7, #12
 80087c6:	46bd      	mov	sp, r7
 80087c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087cc:	4770      	bx	lr

080087ce <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80087ce:	b480      	push	{r7}
 80087d0:	b083      	sub	sp, #12
 80087d2:	af00      	add	r7, sp, #0
 80087d4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	689b      	ldr	r3, [r3, #8]
 80087da:	f023 0201 	bic.w	r2, r3, #1
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80087e2:	2300      	movs	r3, #0
}
 80087e4:	4618      	mov	r0, r3
 80087e6:	370c      	adds	r7, #12
 80087e8:	46bd      	mov	sp, r7
 80087ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ee:	4770      	bx	lr

080087f0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80087f0:	b580      	push	{r7, lr}
 80087f2:	b084      	sub	sp, #16
 80087f4:	af00      	add	r7, sp, #0
 80087f6:	6078      	str	r0, [r7, #4]
 80087f8:	460b      	mov	r3, r1
 80087fa:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80087fc:	2300      	movs	r3, #0
 80087fe:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	68db      	ldr	r3, [r3, #12]
 8008804:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800880c:	78fb      	ldrb	r3, [r7, #3]
 800880e:	2b01      	cmp	r3, #1
 8008810:	d115      	bne.n	800883e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	68db      	ldr	r3, [r3, #12]
 8008816:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800881e:	200a      	movs	r0, #10
 8008820:	f7fa fe74 	bl	800350c <HAL_Delay>
      ms += 10U;
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	330a      	adds	r3, #10
 8008828:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800882a:	6878      	ldr	r0, [r7, #4]
 800882c:	f001 f939 	bl	8009aa2 <USB_GetMode>
 8008830:	4603      	mov	r3, r0
 8008832:	2b01      	cmp	r3, #1
 8008834:	d01e      	beq.n	8008874 <USB_SetCurrentMode+0x84>
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	2bc7      	cmp	r3, #199	; 0xc7
 800883a:	d9f0      	bls.n	800881e <USB_SetCurrentMode+0x2e>
 800883c:	e01a      	b.n	8008874 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800883e:	78fb      	ldrb	r3, [r7, #3]
 8008840:	2b00      	cmp	r3, #0
 8008842:	d115      	bne.n	8008870 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	68db      	ldr	r3, [r3, #12]
 8008848:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8008850:	200a      	movs	r0, #10
 8008852:	f7fa fe5b 	bl	800350c <HAL_Delay>
      ms += 10U;
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	330a      	adds	r3, #10
 800885a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800885c:	6878      	ldr	r0, [r7, #4]
 800885e:	f001 f920 	bl	8009aa2 <USB_GetMode>
 8008862:	4603      	mov	r3, r0
 8008864:	2b00      	cmp	r3, #0
 8008866:	d005      	beq.n	8008874 <USB_SetCurrentMode+0x84>
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	2bc7      	cmp	r3, #199	; 0xc7
 800886c:	d9f0      	bls.n	8008850 <USB_SetCurrentMode+0x60>
 800886e:	e001      	b.n	8008874 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008870:	2301      	movs	r3, #1
 8008872:	e005      	b.n	8008880 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	2bc8      	cmp	r3, #200	; 0xc8
 8008878:	d101      	bne.n	800887e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800887a:	2301      	movs	r3, #1
 800887c:	e000      	b.n	8008880 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800887e:	2300      	movs	r3, #0
}
 8008880:	4618      	mov	r0, r3
 8008882:	3710      	adds	r7, #16
 8008884:	46bd      	mov	sp, r7
 8008886:	bd80      	pop	{r7, pc}

08008888 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008888:	b084      	sub	sp, #16
 800888a:	b580      	push	{r7, lr}
 800888c:	b086      	sub	sp, #24
 800888e:	af00      	add	r7, sp, #0
 8008890:	6078      	str	r0, [r7, #4]
 8008892:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8008896:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800889a:	2300      	movs	r3, #0
 800889c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80088a2:	2300      	movs	r3, #0
 80088a4:	613b      	str	r3, [r7, #16]
 80088a6:	e009      	b.n	80088bc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80088a8:	687a      	ldr	r2, [r7, #4]
 80088aa:	693b      	ldr	r3, [r7, #16]
 80088ac:	3340      	adds	r3, #64	; 0x40
 80088ae:	009b      	lsls	r3, r3, #2
 80088b0:	4413      	add	r3, r2
 80088b2:	2200      	movs	r2, #0
 80088b4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80088b6:	693b      	ldr	r3, [r7, #16]
 80088b8:	3301      	adds	r3, #1
 80088ba:	613b      	str	r3, [r7, #16]
 80088bc:	693b      	ldr	r3, [r7, #16]
 80088be:	2b0e      	cmp	r3, #14
 80088c0:	d9f2      	bls.n	80088a8 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80088c2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d11c      	bne.n	8008904 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80088d0:	685b      	ldr	r3, [r3, #4]
 80088d2:	68fa      	ldr	r2, [r7, #12]
 80088d4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80088d8:	f043 0302 	orr.w	r3, r3, #2
 80088dc:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088e2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088ee:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088fa:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	639a      	str	r2, [r3, #56]	; 0x38
 8008902:	e00b      	b.n	800891c <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008908:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008914:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008922:	461a      	mov	r2, r3
 8008924:	2300      	movs	r3, #0
 8008926:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008928:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800892c:	2b01      	cmp	r3, #1
 800892e:	d10d      	bne.n	800894c <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008930:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008934:	2b00      	cmp	r3, #0
 8008936:	d104      	bne.n	8008942 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8008938:	2100      	movs	r1, #0
 800893a:	6878      	ldr	r0, [r7, #4]
 800893c:	f000 f968 	bl	8008c10 <USB_SetDevSpeed>
 8008940:	e008      	b.n	8008954 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008942:	2101      	movs	r1, #1
 8008944:	6878      	ldr	r0, [r7, #4]
 8008946:	f000 f963 	bl	8008c10 <USB_SetDevSpeed>
 800894a:	e003      	b.n	8008954 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800894c:	2103      	movs	r1, #3
 800894e:	6878      	ldr	r0, [r7, #4]
 8008950:	f000 f95e 	bl	8008c10 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008954:	2110      	movs	r1, #16
 8008956:	6878      	ldr	r0, [r7, #4]
 8008958:	f000 f8fa 	bl	8008b50 <USB_FlushTxFifo>
 800895c:	4603      	mov	r3, r0
 800895e:	2b00      	cmp	r3, #0
 8008960:	d001      	beq.n	8008966 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8008962:	2301      	movs	r3, #1
 8008964:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008966:	6878      	ldr	r0, [r7, #4]
 8008968:	f000 f924 	bl	8008bb4 <USB_FlushRxFifo>
 800896c:	4603      	mov	r3, r0
 800896e:	2b00      	cmp	r3, #0
 8008970:	d001      	beq.n	8008976 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8008972:	2301      	movs	r3, #1
 8008974:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800897c:	461a      	mov	r2, r3
 800897e:	2300      	movs	r3, #0
 8008980:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008988:	461a      	mov	r2, r3
 800898a:	2300      	movs	r3, #0
 800898c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008994:	461a      	mov	r2, r3
 8008996:	2300      	movs	r3, #0
 8008998:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800899a:	2300      	movs	r3, #0
 800899c:	613b      	str	r3, [r7, #16]
 800899e:	e043      	b.n	8008a28 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80089a0:	693b      	ldr	r3, [r7, #16]
 80089a2:	015a      	lsls	r2, r3, #5
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	4413      	add	r3, r2
 80089a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80089b2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80089b6:	d118      	bne.n	80089ea <USB_DevInit+0x162>
    {
      if (i == 0U)
 80089b8:	693b      	ldr	r3, [r7, #16]
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d10a      	bne.n	80089d4 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80089be:	693b      	ldr	r3, [r7, #16]
 80089c0:	015a      	lsls	r2, r3, #5
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	4413      	add	r3, r2
 80089c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80089ca:	461a      	mov	r2, r3
 80089cc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80089d0:	6013      	str	r3, [r2, #0]
 80089d2:	e013      	b.n	80089fc <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80089d4:	693b      	ldr	r3, [r7, #16]
 80089d6:	015a      	lsls	r2, r3, #5
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	4413      	add	r3, r2
 80089dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80089e0:	461a      	mov	r2, r3
 80089e2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80089e6:	6013      	str	r3, [r2, #0]
 80089e8:	e008      	b.n	80089fc <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80089ea:	693b      	ldr	r3, [r7, #16]
 80089ec:	015a      	lsls	r2, r3, #5
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	4413      	add	r3, r2
 80089f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80089f6:	461a      	mov	r2, r3
 80089f8:	2300      	movs	r3, #0
 80089fa:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80089fc:	693b      	ldr	r3, [r7, #16]
 80089fe:	015a      	lsls	r2, r3, #5
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	4413      	add	r3, r2
 8008a04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a08:	461a      	mov	r2, r3
 8008a0a:	2300      	movs	r3, #0
 8008a0c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008a0e:	693b      	ldr	r3, [r7, #16]
 8008a10:	015a      	lsls	r2, r3, #5
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	4413      	add	r3, r2
 8008a16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a1a:	461a      	mov	r2, r3
 8008a1c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008a20:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008a22:	693b      	ldr	r3, [r7, #16]
 8008a24:	3301      	adds	r3, #1
 8008a26:	613b      	str	r3, [r7, #16]
 8008a28:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008a2c:	461a      	mov	r2, r3
 8008a2e:	693b      	ldr	r3, [r7, #16]
 8008a30:	4293      	cmp	r3, r2
 8008a32:	d3b5      	bcc.n	80089a0 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008a34:	2300      	movs	r3, #0
 8008a36:	613b      	str	r3, [r7, #16]
 8008a38:	e043      	b.n	8008ac2 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008a3a:	693b      	ldr	r3, [r7, #16]
 8008a3c:	015a      	lsls	r2, r3, #5
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	4413      	add	r3, r2
 8008a42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008a4c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008a50:	d118      	bne.n	8008a84 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8008a52:	693b      	ldr	r3, [r7, #16]
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d10a      	bne.n	8008a6e <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008a58:	693b      	ldr	r3, [r7, #16]
 8008a5a:	015a      	lsls	r2, r3, #5
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	4413      	add	r3, r2
 8008a60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a64:	461a      	mov	r2, r3
 8008a66:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008a6a:	6013      	str	r3, [r2, #0]
 8008a6c:	e013      	b.n	8008a96 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008a6e:	693b      	ldr	r3, [r7, #16]
 8008a70:	015a      	lsls	r2, r3, #5
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	4413      	add	r3, r2
 8008a76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a7a:	461a      	mov	r2, r3
 8008a7c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008a80:	6013      	str	r3, [r2, #0]
 8008a82:	e008      	b.n	8008a96 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008a84:	693b      	ldr	r3, [r7, #16]
 8008a86:	015a      	lsls	r2, r3, #5
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	4413      	add	r3, r2
 8008a8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a90:	461a      	mov	r2, r3
 8008a92:	2300      	movs	r3, #0
 8008a94:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008a96:	693b      	ldr	r3, [r7, #16]
 8008a98:	015a      	lsls	r2, r3, #5
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	4413      	add	r3, r2
 8008a9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008aa2:	461a      	mov	r2, r3
 8008aa4:	2300      	movs	r3, #0
 8008aa6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008aa8:	693b      	ldr	r3, [r7, #16]
 8008aaa:	015a      	lsls	r2, r3, #5
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	4413      	add	r3, r2
 8008ab0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ab4:	461a      	mov	r2, r3
 8008ab6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008aba:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008abc:	693b      	ldr	r3, [r7, #16]
 8008abe:	3301      	adds	r3, #1
 8008ac0:	613b      	str	r3, [r7, #16]
 8008ac2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008ac6:	461a      	mov	r2, r3
 8008ac8:	693b      	ldr	r3, [r7, #16]
 8008aca:	4293      	cmp	r3, r2
 8008acc:	d3b5      	bcc.n	8008a3a <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ad4:	691b      	ldr	r3, [r3, #16]
 8008ad6:	68fa      	ldr	r2, [r7, #12]
 8008ad8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008adc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008ae0:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	2200      	movs	r2, #0
 8008ae6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8008aee:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008af0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d105      	bne.n	8008b04 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	699b      	ldr	r3, [r3, #24]
 8008afc:	f043 0210 	orr.w	r2, r3, #16
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	699a      	ldr	r2, [r3, #24]
 8008b08:	4b10      	ldr	r3, [pc, #64]	; (8008b4c <USB_DevInit+0x2c4>)
 8008b0a:	4313      	orrs	r3, r2
 8008b0c:	687a      	ldr	r2, [r7, #4]
 8008b0e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008b10:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d005      	beq.n	8008b24 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	699b      	ldr	r3, [r3, #24]
 8008b1c:	f043 0208 	orr.w	r2, r3, #8
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008b24:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8008b28:	2b01      	cmp	r3, #1
 8008b2a:	d107      	bne.n	8008b3c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	699b      	ldr	r3, [r3, #24]
 8008b30:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008b34:	f043 0304 	orr.w	r3, r3, #4
 8008b38:	687a      	ldr	r2, [r7, #4]
 8008b3a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008b3c:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b3e:	4618      	mov	r0, r3
 8008b40:	3718      	adds	r7, #24
 8008b42:	46bd      	mov	sp, r7
 8008b44:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008b48:	b004      	add	sp, #16
 8008b4a:	4770      	bx	lr
 8008b4c:	803c3800 	.word	0x803c3800

08008b50 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008b50:	b480      	push	{r7}
 8008b52:	b085      	sub	sp, #20
 8008b54:	af00      	add	r7, sp, #0
 8008b56:	6078      	str	r0, [r7, #4]
 8008b58:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008b5a:	2300      	movs	r3, #0
 8008b5c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	3301      	adds	r3, #1
 8008b62:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8008b6a:	d901      	bls.n	8008b70 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008b6c:	2303      	movs	r3, #3
 8008b6e:	e01b      	b.n	8008ba8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	691b      	ldr	r3, [r3, #16]
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	daf2      	bge.n	8008b5e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008b78:	2300      	movs	r3, #0
 8008b7a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008b7c:	683b      	ldr	r3, [r7, #0]
 8008b7e:	019b      	lsls	r3, r3, #6
 8008b80:	f043 0220 	orr.w	r2, r3, #32
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	3301      	adds	r3, #1
 8008b8c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8008b94:	d901      	bls.n	8008b9a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8008b96:	2303      	movs	r3, #3
 8008b98:	e006      	b.n	8008ba8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	691b      	ldr	r3, [r3, #16]
 8008b9e:	f003 0320 	and.w	r3, r3, #32
 8008ba2:	2b20      	cmp	r3, #32
 8008ba4:	d0f0      	beq.n	8008b88 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8008ba6:	2300      	movs	r3, #0
}
 8008ba8:	4618      	mov	r0, r3
 8008baa:	3714      	adds	r7, #20
 8008bac:	46bd      	mov	sp, r7
 8008bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb2:	4770      	bx	lr

08008bb4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008bb4:	b480      	push	{r7}
 8008bb6:	b085      	sub	sp, #20
 8008bb8:	af00      	add	r7, sp, #0
 8008bba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008bbc:	2300      	movs	r3, #0
 8008bbe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	3301      	adds	r3, #1
 8008bc4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8008bcc:	d901      	bls.n	8008bd2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008bce:	2303      	movs	r3, #3
 8008bd0:	e018      	b.n	8008c04 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	691b      	ldr	r3, [r3, #16]
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	daf2      	bge.n	8008bc0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8008bda:	2300      	movs	r3, #0
 8008bdc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	2210      	movs	r2, #16
 8008be2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	3301      	adds	r3, #1
 8008be8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8008bf0:	d901      	bls.n	8008bf6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8008bf2:	2303      	movs	r3, #3
 8008bf4:	e006      	b.n	8008c04 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	691b      	ldr	r3, [r3, #16]
 8008bfa:	f003 0310 	and.w	r3, r3, #16
 8008bfe:	2b10      	cmp	r3, #16
 8008c00:	d0f0      	beq.n	8008be4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8008c02:	2300      	movs	r3, #0
}
 8008c04:	4618      	mov	r0, r3
 8008c06:	3714      	adds	r7, #20
 8008c08:	46bd      	mov	sp, r7
 8008c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c0e:	4770      	bx	lr

08008c10 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008c10:	b480      	push	{r7}
 8008c12:	b085      	sub	sp, #20
 8008c14:	af00      	add	r7, sp, #0
 8008c16:	6078      	str	r0, [r7, #4]
 8008c18:	460b      	mov	r3, r1
 8008c1a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c26:	681a      	ldr	r2, [r3, #0]
 8008c28:	78fb      	ldrb	r3, [r7, #3]
 8008c2a:	68f9      	ldr	r1, [r7, #12]
 8008c2c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008c30:	4313      	orrs	r3, r2
 8008c32:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008c34:	2300      	movs	r3, #0
}
 8008c36:	4618      	mov	r0, r3
 8008c38:	3714      	adds	r7, #20
 8008c3a:	46bd      	mov	sp, r7
 8008c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c40:	4770      	bx	lr

08008c42 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8008c42:	b480      	push	{r7}
 8008c44:	b087      	sub	sp, #28
 8008c46:	af00      	add	r7, sp, #0
 8008c48:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8008c4e:	693b      	ldr	r3, [r7, #16]
 8008c50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c54:	689b      	ldr	r3, [r3, #8]
 8008c56:	f003 0306 	and.w	r3, r3, #6
 8008c5a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d102      	bne.n	8008c68 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8008c62:	2300      	movs	r3, #0
 8008c64:	75fb      	strb	r3, [r7, #23]
 8008c66:	e00a      	b.n	8008c7e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	2b02      	cmp	r3, #2
 8008c6c:	d002      	beq.n	8008c74 <USB_GetDevSpeed+0x32>
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	2b06      	cmp	r3, #6
 8008c72:	d102      	bne.n	8008c7a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8008c74:	2302      	movs	r3, #2
 8008c76:	75fb      	strb	r3, [r7, #23]
 8008c78:	e001      	b.n	8008c7e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8008c7a:	230f      	movs	r3, #15
 8008c7c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8008c7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c80:	4618      	mov	r0, r3
 8008c82:	371c      	adds	r7, #28
 8008c84:	46bd      	mov	sp, r7
 8008c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c8a:	4770      	bx	lr

08008c8c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8008c8c:	b480      	push	{r7}
 8008c8e:	b085      	sub	sp, #20
 8008c90:	af00      	add	r7, sp, #0
 8008c92:	6078      	str	r0, [r7, #4]
 8008c94:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008c9a:	683b      	ldr	r3, [r7, #0]
 8008c9c:	781b      	ldrb	r3, [r3, #0]
 8008c9e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008ca0:	683b      	ldr	r3, [r7, #0]
 8008ca2:	785b      	ldrb	r3, [r3, #1]
 8008ca4:	2b01      	cmp	r3, #1
 8008ca6:	d13a      	bne.n	8008d1e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008cae:	69da      	ldr	r2, [r3, #28]
 8008cb0:	683b      	ldr	r3, [r7, #0]
 8008cb2:	781b      	ldrb	r3, [r3, #0]
 8008cb4:	f003 030f 	and.w	r3, r3, #15
 8008cb8:	2101      	movs	r1, #1
 8008cba:	fa01 f303 	lsl.w	r3, r1, r3
 8008cbe:	b29b      	uxth	r3, r3
 8008cc0:	68f9      	ldr	r1, [r7, #12]
 8008cc2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008cc6:	4313      	orrs	r3, r2
 8008cc8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8008cca:	68bb      	ldr	r3, [r7, #8]
 8008ccc:	015a      	lsls	r2, r3, #5
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	4413      	add	r3, r2
 8008cd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d155      	bne.n	8008d8c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008ce0:	68bb      	ldr	r3, [r7, #8]
 8008ce2:	015a      	lsls	r2, r3, #5
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	4413      	add	r3, r2
 8008ce8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008cec:	681a      	ldr	r2, [r3, #0]
 8008cee:	683b      	ldr	r3, [r7, #0]
 8008cf0:	689b      	ldr	r3, [r3, #8]
 8008cf2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008cf6:	683b      	ldr	r3, [r7, #0]
 8008cf8:	791b      	ldrb	r3, [r3, #4]
 8008cfa:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008cfc:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008cfe:	68bb      	ldr	r3, [r7, #8]
 8008d00:	059b      	lsls	r3, r3, #22
 8008d02:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008d04:	4313      	orrs	r3, r2
 8008d06:	68ba      	ldr	r2, [r7, #8]
 8008d08:	0151      	lsls	r1, r2, #5
 8008d0a:	68fa      	ldr	r2, [r7, #12]
 8008d0c:	440a      	add	r2, r1
 8008d0e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008d12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008d16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008d1a:	6013      	str	r3, [r2, #0]
 8008d1c:	e036      	b.n	8008d8c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d24:	69da      	ldr	r2, [r3, #28]
 8008d26:	683b      	ldr	r3, [r7, #0]
 8008d28:	781b      	ldrb	r3, [r3, #0]
 8008d2a:	f003 030f 	and.w	r3, r3, #15
 8008d2e:	2101      	movs	r1, #1
 8008d30:	fa01 f303 	lsl.w	r3, r1, r3
 8008d34:	041b      	lsls	r3, r3, #16
 8008d36:	68f9      	ldr	r1, [r7, #12]
 8008d38:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008d3c:	4313      	orrs	r3, r2
 8008d3e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8008d40:	68bb      	ldr	r3, [r7, #8]
 8008d42:	015a      	lsls	r2, r3, #5
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	4413      	add	r3, r2
 8008d48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d11a      	bne.n	8008d8c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008d56:	68bb      	ldr	r3, [r7, #8]
 8008d58:	015a      	lsls	r2, r3, #5
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	4413      	add	r3, r2
 8008d5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d62:	681a      	ldr	r2, [r3, #0]
 8008d64:	683b      	ldr	r3, [r7, #0]
 8008d66:	689b      	ldr	r3, [r3, #8]
 8008d68:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8008d6c:	683b      	ldr	r3, [r7, #0]
 8008d6e:	791b      	ldrb	r3, [r3, #4]
 8008d70:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008d72:	430b      	orrs	r3, r1
 8008d74:	4313      	orrs	r3, r2
 8008d76:	68ba      	ldr	r2, [r7, #8]
 8008d78:	0151      	lsls	r1, r2, #5
 8008d7a:	68fa      	ldr	r2, [r7, #12]
 8008d7c:	440a      	add	r2, r1
 8008d7e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008d82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008d86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008d8a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8008d8c:	2300      	movs	r3, #0
}
 8008d8e:	4618      	mov	r0, r3
 8008d90:	3714      	adds	r7, #20
 8008d92:	46bd      	mov	sp, r7
 8008d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d98:	4770      	bx	lr
	...

08008d9c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8008d9c:	b480      	push	{r7}
 8008d9e:	b085      	sub	sp, #20
 8008da0:	af00      	add	r7, sp, #0
 8008da2:	6078      	str	r0, [r7, #4]
 8008da4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008daa:	683b      	ldr	r3, [r7, #0]
 8008dac:	781b      	ldrb	r3, [r3, #0]
 8008dae:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8008db0:	683b      	ldr	r3, [r7, #0]
 8008db2:	785b      	ldrb	r3, [r3, #1]
 8008db4:	2b01      	cmp	r3, #1
 8008db6:	d161      	bne.n	8008e7c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008db8:	68bb      	ldr	r3, [r7, #8]
 8008dba:	015a      	lsls	r2, r3, #5
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	4413      	add	r3, r2
 8008dc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008dca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008dce:	d11f      	bne.n	8008e10 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8008dd0:	68bb      	ldr	r3, [r7, #8]
 8008dd2:	015a      	lsls	r2, r3, #5
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	4413      	add	r3, r2
 8008dd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	68ba      	ldr	r2, [r7, #8]
 8008de0:	0151      	lsls	r1, r2, #5
 8008de2:	68fa      	ldr	r2, [r7, #12]
 8008de4:	440a      	add	r2, r1
 8008de6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008dea:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008dee:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8008df0:	68bb      	ldr	r3, [r7, #8]
 8008df2:	015a      	lsls	r2, r3, #5
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	4413      	add	r3, r2
 8008df8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	68ba      	ldr	r2, [r7, #8]
 8008e00:	0151      	lsls	r1, r2, #5
 8008e02:	68fa      	ldr	r2, [r7, #12]
 8008e04:	440a      	add	r2, r1
 8008e06:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008e0a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008e0e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e16:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008e18:	683b      	ldr	r3, [r7, #0]
 8008e1a:	781b      	ldrb	r3, [r3, #0]
 8008e1c:	f003 030f 	and.w	r3, r3, #15
 8008e20:	2101      	movs	r1, #1
 8008e22:	fa01 f303 	lsl.w	r3, r1, r3
 8008e26:	b29b      	uxth	r3, r3
 8008e28:	43db      	mvns	r3, r3
 8008e2a:	68f9      	ldr	r1, [r7, #12]
 8008e2c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008e30:	4013      	ands	r3, r2
 8008e32:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e3a:	69da      	ldr	r2, [r3, #28]
 8008e3c:	683b      	ldr	r3, [r7, #0]
 8008e3e:	781b      	ldrb	r3, [r3, #0]
 8008e40:	f003 030f 	and.w	r3, r3, #15
 8008e44:	2101      	movs	r1, #1
 8008e46:	fa01 f303 	lsl.w	r3, r1, r3
 8008e4a:	b29b      	uxth	r3, r3
 8008e4c:	43db      	mvns	r3, r3
 8008e4e:	68f9      	ldr	r1, [r7, #12]
 8008e50:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008e54:	4013      	ands	r3, r2
 8008e56:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8008e58:	68bb      	ldr	r3, [r7, #8]
 8008e5a:	015a      	lsls	r2, r3, #5
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	4413      	add	r3, r2
 8008e60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e64:	681a      	ldr	r2, [r3, #0]
 8008e66:	68bb      	ldr	r3, [r7, #8]
 8008e68:	0159      	lsls	r1, r3, #5
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	440b      	add	r3, r1
 8008e6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e72:	4619      	mov	r1, r3
 8008e74:	4b35      	ldr	r3, [pc, #212]	; (8008f4c <USB_DeactivateEndpoint+0x1b0>)
 8008e76:	4013      	ands	r3, r2
 8008e78:	600b      	str	r3, [r1, #0]
 8008e7a:	e060      	b.n	8008f3e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008e7c:	68bb      	ldr	r3, [r7, #8]
 8008e7e:	015a      	lsls	r2, r3, #5
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	4413      	add	r3, r2
 8008e84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008e8e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008e92:	d11f      	bne.n	8008ed4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008e94:	68bb      	ldr	r3, [r7, #8]
 8008e96:	015a      	lsls	r2, r3, #5
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	4413      	add	r3, r2
 8008e9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	68ba      	ldr	r2, [r7, #8]
 8008ea4:	0151      	lsls	r1, r2, #5
 8008ea6:	68fa      	ldr	r2, [r7, #12]
 8008ea8:	440a      	add	r2, r1
 8008eaa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008eae:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008eb2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8008eb4:	68bb      	ldr	r3, [r7, #8]
 8008eb6:	015a      	lsls	r2, r3, #5
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	4413      	add	r3, r2
 8008ebc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	68ba      	ldr	r2, [r7, #8]
 8008ec4:	0151      	lsls	r1, r2, #5
 8008ec6:	68fa      	ldr	r2, [r7, #12]
 8008ec8:	440a      	add	r2, r1
 8008eca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008ece:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008ed2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008eda:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008edc:	683b      	ldr	r3, [r7, #0]
 8008ede:	781b      	ldrb	r3, [r3, #0]
 8008ee0:	f003 030f 	and.w	r3, r3, #15
 8008ee4:	2101      	movs	r1, #1
 8008ee6:	fa01 f303 	lsl.w	r3, r1, r3
 8008eea:	041b      	lsls	r3, r3, #16
 8008eec:	43db      	mvns	r3, r3
 8008eee:	68f9      	ldr	r1, [r7, #12]
 8008ef0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008ef4:	4013      	ands	r3, r2
 8008ef6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008efe:	69da      	ldr	r2, [r3, #28]
 8008f00:	683b      	ldr	r3, [r7, #0]
 8008f02:	781b      	ldrb	r3, [r3, #0]
 8008f04:	f003 030f 	and.w	r3, r3, #15
 8008f08:	2101      	movs	r1, #1
 8008f0a:	fa01 f303 	lsl.w	r3, r1, r3
 8008f0e:	041b      	lsls	r3, r3, #16
 8008f10:	43db      	mvns	r3, r3
 8008f12:	68f9      	ldr	r1, [r7, #12]
 8008f14:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008f18:	4013      	ands	r3, r2
 8008f1a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8008f1c:	68bb      	ldr	r3, [r7, #8]
 8008f1e:	015a      	lsls	r2, r3, #5
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	4413      	add	r3, r2
 8008f24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f28:	681a      	ldr	r2, [r3, #0]
 8008f2a:	68bb      	ldr	r3, [r7, #8]
 8008f2c:	0159      	lsls	r1, r3, #5
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	440b      	add	r3, r1
 8008f32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f36:	4619      	mov	r1, r3
 8008f38:	4b05      	ldr	r3, [pc, #20]	; (8008f50 <USB_DeactivateEndpoint+0x1b4>)
 8008f3a:	4013      	ands	r3, r2
 8008f3c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8008f3e:	2300      	movs	r3, #0
}
 8008f40:	4618      	mov	r0, r3
 8008f42:	3714      	adds	r7, #20
 8008f44:	46bd      	mov	sp, r7
 8008f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f4a:	4770      	bx	lr
 8008f4c:	ec337800 	.word	0xec337800
 8008f50:	eff37800 	.word	0xeff37800

08008f54 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008f54:	b580      	push	{r7, lr}
 8008f56:	b08a      	sub	sp, #40	; 0x28
 8008f58:	af02      	add	r7, sp, #8
 8008f5a:	60f8      	str	r0, [r7, #12]
 8008f5c:	60b9      	str	r1, [r7, #8]
 8008f5e:	4613      	mov	r3, r2
 8008f60:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8008f66:	68bb      	ldr	r3, [r7, #8]
 8008f68:	781b      	ldrb	r3, [r3, #0]
 8008f6a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008f6c:	68bb      	ldr	r3, [r7, #8]
 8008f6e:	785b      	ldrb	r3, [r3, #1]
 8008f70:	2b01      	cmp	r3, #1
 8008f72:	f040 817a 	bne.w	800926a <USB_EPStartXfer+0x316>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8008f76:	68bb      	ldr	r3, [r7, #8]
 8008f78:	691b      	ldr	r3, [r3, #16]
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d132      	bne.n	8008fe4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008f7e:	69bb      	ldr	r3, [r7, #24]
 8008f80:	015a      	lsls	r2, r3, #5
 8008f82:	69fb      	ldr	r3, [r7, #28]
 8008f84:	4413      	add	r3, r2
 8008f86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f8a:	691b      	ldr	r3, [r3, #16]
 8008f8c:	69ba      	ldr	r2, [r7, #24]
 8008f8e:	0151      	lsls	r1, r2, #5
 8008f90:	69fa      	ldr	r2, [r7, #28]
 8008f92:	440a      	add	r2, r1
 8008f94:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008f98:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008f9c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008fa0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008fa2:	69bb      	ldr	r3, [r7, #24]
 8008fa4:	015a      	lsls	r2, r3, #5
 8008fa6:	69fb      	ldr	r3, [r7, #28]
 8008fa8:	4413      	add	r3, r2
 8008faa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008fae:	691b      	ldr	r3, [r3, #16]
 8008fb0:	69ba      	ldr	r2, [r7, #24]
 8008fb2:	0151      	lsls	r1, r2, #5
 8008fb4:	69fa      	ldr	r2, [r7, #28]
 8008fb6:	440a      	add	r2, r1
 8008fb8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008fbc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008fc0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008fc2:	69bb      	ldr	r3, [r7, #24]
 8008fc4:	015a      	lsls	r2, r3, #5
 8008fc6:	69fb      	ldr	r3, [r7, #28]
 8008fc8:	4413      	add	r3, r2
 8008fca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008fce:	691b      	ldr	r3, [r3, #16]
 8008fd0:	69ba      	ldr	r2, [r7, #24]
 8008fd2:	0151      	lsls	r1, r2, #5
 8008fd4:	69fa      	ldr	r2, [r7, #28]
 8008fd6:	440a      	add	r2, r1
 8008fd8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008fdc:	0cdb      	lsrs	r3, r3, #19
 8008fde:	04db      	lsls	r3, r3, #19
 8008fe0:	6113      	str	r3, [r2, #16]
 8008fe2:	e092      	b.n	800910a <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008fe4:	69bb      	ldr	r3, [r7, #24]
 8008fe6:	015a      	lsls	r2, r3, #5
 8008fe8:	69fb      	ldr	r3, [r7, #28]
 8008fea:	4413      	add	r3, r2
 8008fec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ff0:	691b      	ldr	r3, [r3, #16]
 8008ff2:	69ba      	ldr	r2, [r7, #24]
 8008ff4:	0151      	lsls	r1, r2, #5
 8008ff6:	69fa      	ldr	r2, [r7, #28]
 8008ff8:	440a      	add	r2, r1
 8008ffa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008ffe:	0cdb      	lsrs	r3, r3, #19
 8009000:	04db      	lsls	r3, r3, #19
 8009002:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009004:	69bb      	ldr	r3, [r7, #24]
 8009006:	015a      	lsls	r2, r3, #5
 8009008:	69fb      	ldr	r3, [r7, #28]
 800900a:	4413      	add	r3, r2
 800900c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009010:	691b      	ldr	r3, [r3, #16]
 8009012:	69ba      	ldr	r2, [r7, #24]
 8009014:	0151      	lsls	r1, r2, #5
 8009016:	69fa      	ldr	r2, [r7, #28]
 8009018:	440a      	add	r2, r1
 800901a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800901e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009022:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009026:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8009028:	69bb      	ldr	r3, [r7, #24]
 800902a:	2b00      	cmp	r3, #0
 800902c:	d11a      	bne.n	8009064 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800902e:	68bb      	ldr	r3, [r7, #8]
 8009030:	691a      	ldr	r2, [r3, #16]
 8009032:	68bb      	ldr	r3, [r7, #8]
 8009034:	689b      	ldr	r3, [r3, #8]
 8009036:	429a      	cmp	r2, r3
 8009038:	d903      	bls.n	8009042 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800903a:	68bb      	ldr	r3, [r7, #8]
 800903c:	689a      	ldr	r2, [r3, #8]
 800903e:	68bb      	ldr	r3, [r7, #8]
 8009040:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009042:	69bb      	ldr	r3, [r7, #24]
 8009044:	015a      	lsls	r2, r3, #5
 8009046:	69fb      	ldr	r3, [r7, #28]
 8009048:	4413      	add	r3, r2
 800904a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800904e:	691b      	ldr	r3, [r3, #16]
 8009050:	69ba      	ldr	r2, [r7, #24]
 8009052:	0151      	lsls	r1, r2, #5
 8009054:	69fa      	ldr	r2, [r7, #28]
 8009056:	440a      	add	r2, r1
 8009058:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800905c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009060:	6113      	str	r3, [r2, #16]
 8009062:	e01b      	b.n	800909c <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8009064:	69bb      	ldr	r3, [r7, #24]
 8009066:	015a      	lsls	r2, r3, #5
 8009068:	69fb      	ldr	r3, [r7, #28]
 800906a:	4413      	add	r3, r2
 800906c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009070:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8009072:	68bb      	ldr	r3, [r7, #8]
 8009074:	6919      	ldr	r1, [r3, #16]
 8009076:	68bb      	ldr	r3, [r7, #8]
 8009078:	689b      	ldr	r3, [r3, #8]
 800907a:	440b      	add	r3, r1
 800907c:	1e59      	subs	r1, r3, #1
 800907e:	68bb      	ldr	r3, [r7, #8]
 8009080:	689b      	ldr	r3, [r3, #8]
 8009082:	fbb1 f3f3 	udiv	r3, r1, r3
 8009086:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8009088:	4ba2      	ldr	r3, [pc, #648]	; (8009314 <USB_EPStartXfer+0x3c0>)
 800908a:	400b      	ands	r3, r1
 800908c:	69b9      	ldr	r1, [r7, #24]
 800908e:	0148      	lsls	r0, r1, #5
 8009090:	69f9      	ldr	r1, [r7, #28]
 8009092:	4401      	add	r1, r0
 8009094:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8009098:	4313      	orrs	r3, r2
 800909a:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800909c:	69bb      	ldr	r3, [r7, #24]
 800909e:	015a      	lsls	r2, r3, #5
 80090a0:	69fb      	ldr	r3, [r7, #28]
 80090a2:	4413      	add	r3, r2
 80090a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80090a8:	691a      	ldr	r2, [r3, #16]
 80090aa:	68bb      	ldr	r3, [r7, #8]
 80090ac:	691b      	ldr	r3, [r3, #16]
 80090ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80090b2:	69b9      	ldr	r1, [r7, #24]
 80090b4:	0148      	lsls	r0, r1, #5
 80090b6:	69f9      	ldr	r1, [r7, #28]
 80090b8:	4401      	add	r1, r0
 80090ba:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80090be:	4313      	orrs	r3, r2
 80090c0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80090c2:	68bb      	ldr	r3, [r7, #8]
 80090c4:	791b      	ldrb	r3, [r3, #4]
 80090c6:	2b01      	cmp	r3, #1
 80090c8:	d11f      	bne.n	800910a <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80090ca:	69bb      	ldr	r3, [r7, #24]
 80090cc:	015a      	lsls	r2, r3, #5
 80090ce:	69fb      	ldr	r3, [r7, #28]
 80090d0:	4413      	add	r3, r2
 80090d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80090d6:	691b      	ldr	r3, [r3, #16]
 80090d8:	69ba      	ldr	r2, [r7, #24]
 80090da:	0151      	lsls	r1, r2, #5
 80090dc:	69fa      	ldr	r2, [r7, #28]
 80090de:	440a      	add	r2, r1
 80090e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80090e4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80090e8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80090ea:	69bb      	ldr	r3, [r7, #24]
 80090ec:	015a      	lsls	r2, r3, #5
 80090ee:	69fb      	ldr	r3, [r7, #28]
 80090f0:	4413      	add	r3, r2
 80090f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80090f6:	691b      	ldr	r3, [r3, #16]
 80090f8:	69ba      	ldr	r2, [r7, #24]
 80090fa:	0151      	lsls	r1, r2, #5
 80090fc:	69fa      	ldr	r2, [r7, #28]
 80090fe:	440a      	add	r2, r1
 8009100:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009104:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009108:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800910a:	79fb      	ldrb	r3, [r7, #7]
 800910c:	2b01      	cmp	r3, #1
 800910e:	d14b      	bne.n	80091a8 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8009110:	68bb      	ldr	r3, [r7, #8]
 8009112:	69db      	ldr	r3, [r3, #28]
 8009114:	2b00      	cmp	r3, #0
 8009116:	d009      	beq.n	800912c <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8009118:	69bb      	ldr	r3, [r7, #24]
 800911a:	015a      	lsls	r2, r3, #5
 800911c:	69fb      	ldr	r3, [r7, #28]
 800911e:	4413      	add	r3, r2
 8009120:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009124:	461a      	mov	r2, r3
 8009126:	68bb      	ldr	r3, [r7, #8]
 8009128:	69db      	ldr	r3, [r3, #28]
 800912a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800912c:	68bb      	ldr	r3, [r7, #8]
 800912e:	791b      	ldrb	r3, [r3, #4]
 8009130:	2b01      	cmp	r3, #1
 8009132:	d128      	bne.n	8009186 <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009134:	69fb      	ldr	r3, [r7, #28]
 8009136:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800913a:	689b      	ldr	r3, [r3, #8]
 800913c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009140:	2b00      	cmp	r3, #0
 8009142:	d110      	bne.n	8009166 <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009144:	69bb      	ldr	r3, [r7, #24]
 8009146:	015a      	lsls	r2, r3, #5
 8009148:	69fb      	ldr	r3, [r7, #28]
 800914a:	4413      	add	r3, r2
 800914c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	69ba      	ldr	r2, [r7, #24]
 8009154:	0151      	lsls	r1, r2, #5
 8009156:	69fa      	ldr	r2, [r7, #28]
 8009158:	440a      	add	r2, r1
 800915a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800915e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009162:	6013      	str	r3, [r2, #0]
 8009164:	e00f      	b.n	8009186 <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009166:	69bb      	ldr	r3, [r7, #24]
 8009168:	015a      	lsls	r2, r3, #5
 800916a:	69fb      	ldr	r3, [r7, #28]
 800916c:	4413      	add	r3, r2
 800916e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	69ba      	ldr	r2, [r7, #24]
 8009176:	0151      	lsls	r1, r2, #5
 8009178:	69fa      	ldr	r2, [r7, #28]
 800917a:	440a      	add	r2, r1
 800917c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009180:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009184:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009186:	69bb      	ldr	r3, [r7, #24]
 8009188:	015a      	lsls	r2, r3, #5
 800918a:	69fb      	ldr	r3, [r7, #28]
 800918c:	4413      	add	r3, r2
 800918e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	69ba      	ldr	r2, [r7, #24]
 8009196:	0151      	lsls	r1, r2, #5
 8009198:	69fa      	ldr	r2, [r7, #28]
 800919a:	440a      	add	r2, r1
 800919c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80091a0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80091a4:	6013      	str	r3, [r2, #0]
 80091a6:	e165      	b.n	8009474 <USB_EPStartXfer+0x520>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80091a8:	69bb      	ldr	r3, [r7, #24]
 80091aa:	015a      	lsls	r2, r3, #5
 80091ac:	69fb      	ldr	r3, [r7, #28]
 80091ae:	4413      	add	r3, r2
 80091b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	69ba      	ldr	r2, [r7, #24]
 80091b8:	0151      	lsls	r1, r2, #5
 80091ba:	69fa      	ldr	r2, [r7, #28]
 80091bc:	440a      	add	r2, r1
 80091be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80091c2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80091c6:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80091c8:	68bb      	ldr	r3, [r7, #8]
 80091ca:	791b      	ldrb	r3, [r3, #4]
 80091cc:	2b01      	cmp	r3, #1
 80091ce:	d015      	beq.n	80091fc <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80091d0:	68bb      	ldr	r3, [r7, #8]
 80091d2:	691b      	ldr	r3, [r3, #16]
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	f000 814d 	beq.w	8009474 <USB_EPStartXfer+0x520>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80091da:	69fb      	ldr	r3, [r7, #28]
 80091dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80091e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80091e2:	68bb      	ldr	r3, [r7, #8]
 80091e4:	781b      	ldrb	r3, [r3, #0]
 80091e6:	f003 030f 	and.w	r3, r3, #15
 80091ea:	2101      	movs	r1, #1
 80091ec:	fa01 f303 	lsl.w	r3, r1, r3
 80091f0:	69f9      	ldr	r1, [r7, #28]
 80091f2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80091f6:	4313      	orrs	r3, r2
 80091f8:	634b      	str	r3, [r1, #52]	; 0x34
 80091fa:	e13b      	b.n	8009474 <USB_EPStartXfer+0x520>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80091fc:	69fb      	ldr	r3, [r7, #28]
 80091fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009202:	689b      	ldr	r3, [r3, #8]
 8009204:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009208:	2b00      	cmp	r3, #0
 800920a:	d110      	bne.n	800922e <USB_EPStartXfer+0x2da>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800920c:	69bb      	ldr	r3, [r7, #24]
 800920e:	015a      	lsls	r2, r3, #5
 8009210:	69fb      	ldr	r3, [r7, #28]
 8009212:	4413      	add	r3, r2
 8009214:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	69ba      	ldr	r2, [r7, #24]
 800921c:	0151      	lsls	r1, r2, #5
 800921e:	69fa      	ldr	r2, [r7, #28]
 8009220:	440a      	add	r2, r1
 8009222:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009226:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800922a:	6013      	str	r3, [r2, #0]
 800922c:	e00f      	b.n	800924e <USB_EPStartXfer+0x2fa>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800922e:	69bb      	ldr	r3, [r7, #24]
 8009230:	015a      	lsls	r2, r3, #5
 8009232:	69fb      	ldr	r3, [r7, #28]
 8009234:	4413      	add	r3, r2
 8009236:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	69ba      	ldr	r2, [r7, #24]
 800923e:	0151      	lsls	r1, r2, #5
 8009240:	69fa      	ldr	r2, [r7, #28]
 8009242:	440a      	add	r2, r1
 8009244:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009248:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800924c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800924e:	68bb      	ldr	r3, [r7, #8]
 8009250:	68d9      	ldr	r1, [r3, #12]
 8009252:	68bb      	ldr	r3, [r7, #8]
 8009254:	781a      	ldrb	r2, [r3, #0]
 8009256:	68bb      	ldr	r3, [r7, #8]
 8009258:	691b      	ldr	r3, [r3, #16]
 800925a:	b298      	uxth	r0, r3
 800925c:	79fb      	ldrb	r3, [r7, #7]
 800925e:	9300      	str	r3, [sp, #0]
 8009260:	4603      	mov	r3, r0
 8009262:	68f8      	ldr	r0, [r7, #12]
 8009264:	f000 f9b8 	bl	80095d8 <USB_WritePacket>
 8009268:	e104      	b.n	8009474 <USB_EPStartXfer+0x520>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800926a:	69bb      	ldr	r3, [r7, #24]
 800926c:	015a      	lsls	r2, r3, #5
 800926e:	69fb      	ldr	r3, [r7, #28]
 8009270:	4413      	add	r3, r2
 8009272:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009276:	691b      	ldr	r3, [r3, #16]
 8009278:	69ba      	ldr	r2, [r7, #24]
 800927a:	0151      	lsls	r1, r2, #5
 800927c:	69fa      	ldr	r2, [r7, #28]
 800927e:	440a      	add	r2, r1
 8009280:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009284:	0cdb      	lsrs	r3, r3, #19
 8009286:	04db      	lsls	r3, r3, #19
 8009288:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800928a:	69bb      	ldr	r3, [r7, #24]
 800928c:	015a      	lsls	r2, r3, #5
 800928e:	69fb      	ldr	r3, [r7, #28]
 8009290:	4413      	add	r3, r2
 8009292:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009296:	691b      	ldr	r3, [r3, #16]
 8009298:	69ba      	ldr	r2, [r7, #24]
 800929a:	0151      	lsls	r1, r2, #5
 800929c:	69fa      	ldr	r2, [r7, #28]
 800929e:	440a      	add	r2, r1
 80092a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80092a4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80092a8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80092ac:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 80092ae:	69bb      	ldr	r3, [r7, #24]
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d131      	bne.n	8009318 <USB_EPStartXfer+0x3c4>
    {
      if (ep->xfer_len > 0U)
 80092b4:	68bb      	ldr	r3, [r7, #8]
 80092b6:	691b      	ldr	r3, [r3, #16]
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d003      	beq.n	80092c4 <USB_EPStartXfer+0x370>
      {
        ep->xfer_len = ep->maxpacket;
 80092bc:	68bb      	ldr	r3, [r7, #8]
 80092be:	689a      	ldr	r2, [r3, #8]
 80092c0:	68bb      	ldr	r3, [r7, #8]
 80092c2:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 80092c4:	68bb      	ldr	r3, [r7, #8]
 80092c6:	689a      	ldr	r2, [r3, #8]
 80092c8:	68bb      	ldr	r3, [r7, #8]
 80092ca:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80092cc:	69bb      	ldr	r3, [r7, #24]
 80092ce:	015a      	lsls	r2, r3, #5
 80092d0:	69fb      	ldr	r3, [r7, #28]
 80092d2:	4413      	add	r3, r2
 80092d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092d8:	691a      	ldr	r2, [r3, #16]
 80092da:	68bb      	ldr	r3, [r7, #8]
 80092dc:	6a1b      	ldr	r3, [r3, #32]
 80092de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80092e2:	69b9      	ldr	r1, [r7, #24]
 80092e4:	0148      	lsls	r0, r1, #5
 80092e6:	69f9      	ldr	r1, [r7, #28]
 80092e8:	4401      	add	r1, r0
 80092ea:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80092ee:	4313      	orrs	r3, r2
 80092f0:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80092f2:	69bb      	ldr	r3, [r7, #24]
 80092f4:	015a      	lsls	r2, r3, #5
 80092f6:	69fb      	ldr	r3, [r7, #28]
 80092f8:	4413      	add	r3, r2
 80092fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092fe:	691b      	ldr	r3, [r3, #16]
 8009300:	69ba      	ldr	r2, [r7, #24]
 8009302:	0151      	lsls	r1, r2, #5
 8009304:	69fa      	ldr	r2, [r7, #28]
 8009306:	440a      	add	r2, r1
 8009308:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800930c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009310:	6113      	str	r3, [r2, #16]
 8009312:	e061      	b.n	80093d8 <USB_EPStartXfer+0x484>
 8009314:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8009318:	68bb      	ldr	r3, [r7, #8]
 800931a:	691b      	ldr	r3, [r3, #16]
 800931c:	2b00      	cmp	r3, #0
 800931e:	d123      	bne.n	8009368 <USB_EPStartXfer+0x414>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8009320:	69bb      	ldr	r3, [r7, #24]
 8009322:	015a      	lsls	r2, r3, #5
 8009324:	69fb      	ldr	r3, [r7, #28]
 8009326:	4413      	add	r3, r2
 8009328:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800932c:	691a      	ldr	r2, [r3, #16]
 800932e:	68bb      	ldr	r3, [r7, #8]
 8009330:	689b      	ldr	r3, [r3, #8]
 8009332:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009336:	69b9      	ldr	r1, [r7, #24]
 8009338:	0148      	lsls	r0, r1, #5
 800933a:	69f9      	ldr	r1, [r7, #28]
 800933c:	4401      	add	r1, r0
 800933e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009342:	4313      	orrs	r3, r2
 8009344:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009346:	69bb      	ldr	r3, [r7, #24]
 8009348:	015a      	lsls	r2, r3, #5
 800934a:	69fb      	ldr	r3, [r7, #28]
 800934c:	4413      	add	r3, r2
 800934e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009352:	691b      	ldr	r3, [r3, #16]
 8009354:	69ba      	ldr	r2, [r7, #24]
 8009356:	0151      	lsls	r1, r2, #5
 8009358:	69fa      	ldr	r2, [r7, #28]
 800935a:	440a      	add	r2, r1
 800935c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009360:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009364:	6113      	str	r3, [r2, #16]
 8009366:	e037      	b.n	80093d8 <USB_EPStartXfer+0x484>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8009368:	68bb      	ldr	r3, [r7, #8]
 800936a:	691a      	ldr	r2, [r3, #16]
 800936c:	68bb      	ldr	r3, [r7, #8]
 800936e:	689b      	ldr	r3, [r3, #8]
 8009370:	4413      	add	r3, r2
 8009372:	1e5a      	subs	r2, r3, #1
 8009374:	68bb      	ldr	r3, [r7, #8]
 8009376:	689b      	ldr	r3, [r3, #8]
 8009378:	fbb2 f3f3 	udiv	r3, r2, r3
 800937c:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800937e:	68bb      	ldr	r3, [r7, #8]
 8009380:	689b      	ldr	r3, [r3, #8]
 8009382:	8afa      	ldrh	r2, [r7, #22]
 8009384:	fb03 f202 	mul.w	r2, r3, r2
 8009388:	68bb      	ldr	r3, [r7, #8]
 800938a:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800938c:	69bb      	ldr	r3, [r7, #24]
 800938e:	015a      	lsls	r2, r3, #5
 8009390:	69fb      	ldr	r3, [r7, #28]
 8009392:	4413      	add	r3, r2
 8009394:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009398:	691a      	ldr	r2, [r3, #16]
 800939a:	8afb      	ldrh	r3, [r7, #22]
 800939c:	04d9      	lsls	r1, r3, #19
 800939e:	4b38      	ldr	r3, [pc, #224]	; (8009480 <USB_EPStartXfer+0x52c>)
 80093a0:	400b      	ands	r3, r1
 80093a2:	69b9      	ldr	r1, [r7, #24]
 80093a4:	0148      	lsls	r0, r1, #5
 80093a6:	69f9      	ldr	r1, [r7, #28]
 80093a8:	4401      	add	r1, r0
 80093aa:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80093ae:	4313      	orrs	r3, r2
 80093b0:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80093b2:	69bb      	ldr	r3, [r7, #24]
 80093b4:	015a      	lsls	r2, r3, #5
 80093b6:	69fb      	ldr	r3, [r7, #28]
 80093b8:	4413      	add	r3, r2
 80093ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80093be:	691a      	ldr	r2, [r3, #16]
 80093c0:	68bb      	ldr	r3, [r7, #8]
 80093c2:	6a1b      	ldr	r3, [r3, #32]
 80093c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80093c8:	69b9      	ldr	r1, [r7, #24]
 80093ca:	0148      	lsls	r0, r1, #5
 80093cc:	69f9      	ldr	r1, [r7, #28]
 80093ce:	4401      	add	r1, r0
 80093d0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80093d4:	4313      	orrs	r3, r2
 80093d6:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 80093d8:	79fb      	ldrb	r3, [r7, #7]
 80093da:	2b01      	cmp	r3, #1
 80093dc:	d10d      	bne.n	80093fa <USB_EPStartXfer+0x4a6>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80093de:	68bb      	ldr	r3, [r7, #8]
 80093e0:	68db      	ldr	r3, [r3, #12]
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d009      	beq.n	80093fa <USB_EPStartXfer+0x4a6>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80093e6:	68bb      	ldr	r3, [r7, #8]
 80093e8:	68d9      	ldr	r1, [r3, #12]
 80093ea:	69bb      	ldr	r3, [r7, #24]
 80093ec:	015a      	lsls	r2, r3, #5
 80093ee:	69fb      	ldr	r3, [r7, #28]
 80093f0:	4413      	add	r3, r2
 80093f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80093f6:	460a      	mov	r2, r1
 80093f8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80093fa:	68bb      	ldr	r3, [r7, #8]
 80093fc:	791b      	ldrb	r3, [r3, #4]
 80093fe:	2b01      	cmp	r3, #1
 8009400:	d128      	bne.n	8009454 <USB_EPStartXfer+0x500>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009402:	69fb      	ldr	r3, [r7, #28]
 8009404:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009408:	689b      	ldr	r3, [r3, #8]
 800940a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800940e:	2b00      	cmp	r3, #0
 8009410:	d110      	bne.n	8009434 <USB_EPStartXfer+0x4e0>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8009412:	69bb      	ldr	r3, [r7, #24]
 8009414:	015a      	lsls	r2, r3, #5
 8009416:	69fb      	ldr	r3, [r7, #28]
 8009418:	4413      	add	r3, r2
 800941a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	69ba      	ldr	r2, [r7, #24]
 8009422:	0151      	lsls	r1, r2, #5
 8009424:	69fa      	ldr	r2, [r7, #28]
 8009426:	440a      	add	r2, r1
 8009428:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800942c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009430:	6013      	str	r3, [r2, #0]
 8009432:	e00f      	b.n	8009454 <USB_EPStartXfer+0x500>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8009434:	69bb      	ldr	r3, [r7, #24]
 8009436:	015a      	lsls	r2, r3, #5
 8009438:	69fb      	ldr	r3, [r7, #28]
 800943a:	4413      	add	r3, r2
 800943c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	69ba      	ldr	r2, [r7, #24]
 8009444:	0151      	lsls	r1, r2, #5
 8009446:	69fa      	ldr	r2, [r7, #28]
 8009448:	440a      	add	r2, r1
 800944a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800944e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009452:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009454:	69bb      	ldr	r3, [r7, #24]
 8009456:	015a      	lsls	r2, r3, #5
 8009458:	69fb      	ldr	r3, [r7, #28]
 800945a:	4413      	add	r3, r2
 800945c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	69ba      	ldr	r2, [r7, #24]
 8009464:	0151      	lsls	r1, r2, #5
 8009466:	69fa      	ldr	r2, [r7, #28]
 8009468:	440a      	add	r2, r1
 800946a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800946e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009472:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009474:	2300      	movs	r3, #0
}
 8009476:	4618      	mov	r0, r3
 8009478:	3720      	adds	r7, #32
 800947a:	46bd      	mov	sp, r7
 800947c:	bd80      	pop	{r7, pc}
 800947e:	bf00      	nop
 8009480:	1ff80000 	.word	0x1ff80000

08009484 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009484:	b480      	push	{r7}
 8009486:	b087      	sub	sp, #28
 8009488:	af00      	add	r7, sp, #0
 800948a:	6078      	str	r0, [r7, #4]
 800948c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800948e:	2300      	movs	r3, #0
 8009490:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8009492:	2300      	movs	r3, #0
 8009494:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800949a:	683b      	ldr	r3, [r7, #0]
 800949c:	785b      	ldrb	r3, [r3, #1]
 800949e:	2b01      	cmp	r3, #1
 80094a0:	d14a      	bne.n	8009538 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80094a2:	683b      	ldr	r3, [r7, #0]
 80094a4:	781b      	ldrb	r3, [r3, #0]
 80094a6:	015a      	lsls	r2, r3, #5
 80094a8:	693b      	ldr	r3, [r7, #16]
 80094aa:	4413      	add	r3, r2
 80094ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80094b6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80094ba:	f040 8086 	bne.w	80095ca <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80094be:	683b      	ldr	r3, [r7, #0]
 80094c0:	781b      	ldrb	r3, [r3, #0]
 80094c2:	015a      	lsls	r2, r3, #5
 80094c4:	693b      	ldr	r3, [r7, #16]
 80094c6:	4413      	add	r3, r2
 80094c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	683a      	ldr	r2, [r7, #0]
 80094d0:	7812      	ldrb	r2, [r2, #0]
 80094d2:	0151      	lsls	r1, r2, #5
 80094d4:	693a      	ldr	r2, [r7, #16]
 80094d6:	440a      	add	r2, r1
 80094d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80094dc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80094e0:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80094e2:	683b      	ldr	r3, [r7, #0]
 80094e4:	781b      	ldrb	r3, [r3, #0]
 80094e6:	015a      	lsls	r2, r3, #5
 80094e8:	693b      	ldr	r3, [r7, #16]
 80094ea:	4413      	add	r3, r2
 80094ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	683a      	ldr	r2, [r7, #0]
 80094f4:	7812      	ldrb	r2, [r2, #0]
 80094f6:	0151      	lsls	r1, r2, #5
 80094f8:	693a      	ldr	r2, [r7, #16]
 80094fa:	440a      	add	r2, r1
 80094fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009500:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009504:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	3301      	adds	r3, #1
 800950a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	f242 7210 	movw	r2, #10000	; 0x2710
 8009512:	4293      	cmp	r3, r2
 8009514:	d902      	bls.n	800951c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8009516:	2301      	movs	r3, #1
 8009518:	75fb      	strb	r3, [r7, #23]
          break;
 800951a:	e056      	b.n	80095ca <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800951c:	683b      	ldr	r3, [r7, #0]
 800951e:	781b      	ldrb	r3, [r3, #0]
 8009520:	015a      	lsls	r2, r3, #5
 8009522:	693b      	ldr	r3, [r7, #16]
 8009524:	4413      	add	r3, r2
 8009526:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009530:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009534:	d0e7      	beq.n	8009506 <USB_EPStopXfer+0x82>
 8009536:	e048      	b.n	80095ca <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009538:	683b      	ldr	r3, [r7, #0]
 800953a:	781b      	ldrb	r3, [r3, #0]
 800953c:	015a      	lsls	r2, r3, #5
 800953e:	693b      	ldr	r3, [r7, #16]
 8009540:	4413      	add	r3, r2
 8009542:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800954c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009550:	d13b      	bne.n	80095ca <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8009552:	683b      	ldr	r3, [r7, #0]
 8009554:	781b      	ldrb	r3, [r3, #0]
 8009556:	015a      	lsls	r2, r3, #5
 8009558:	693b      	ldr	r3, [r7, #16]
 800955a:	4413      	add	r3, r2
 800955c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	683a      	ldr	r2, [r7, #0]
 8009564:	7812      	ldrb	r2, [r2, #0]
 8009566:	0151      	lsls	r1, r2, #5
 8009568:	693a      	ldr	r2, [r7, #16]
 800956a:	440a      	add	r2, r1
 800956c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009570:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009574:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8009576:	683b      	ldr	r3, [r7, #0]
 8009578:	781b      	ldrb	r3, [r3, #0]
 800957a:	015a      	lsls	r2, r3, #5
 800957c:	693b      	ldr	r3, [r7, #16]
 800957e:	4413      	add	r3, r2
 8009580:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	683a      	ldr	r2, [r7, #0]
 8009588:	7812      	ldrb	r2, [r2, #0]
 800958a:	0151      	lsls	r1, r2, #5
 800958c:	693a      	ldr	r2, [r7, #16]
 800958e:	440a      	add	r2, r1
 8009590:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009594:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009598:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	3301      	adds	r3, #1
 800959e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	f242 7210 	movw	r2, #10000	; 0x2710
 80095a6:	4293      	cmp	r3, r2
 80095a8:	d902      	bls.n	80095b0 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80095aa:	2301      	movs	r3, #1
 80095ac:	75fb      	strb	r3, [r7, #23]
          break;
 80095ae:	e00c      	b.n	80095ca <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80095b0:	683b      	ldr	r3, [r7, #0]
 80095b2:	781b      	ldrb	r3, [r3, #0]
 80095b4:	015a      	lsls	r2, r3, #5
 80095b6:	693b      	ldr	r3, [r7, #16]
 80095b8:	4413      	add	r3, r2
 80095ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80095c4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80095c8:	d0e7      	beq.n	800959a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80095ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80095cc:	4618      	mov	r0, r3
 80095ce:	371c      	adds	r7, #28
 80095d0:	46bd      	mov	sp, r7
 80095d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d6:	4770      	bx	lr

080095d8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80095d8:	b480      	push	{r7}
 80095da:	b089      	sub	sp, #36	; 0x24
 80095dc:	af00      	add	r7, sp, #0
 80095de:	60f8      	str	r0, [r7, #12]
 80095e0:	60b9      	str	r1, [r7, #8]
 80095e2:	4611      	mov	r1, r2
 80095e4:	461a      	mov	r2, r3
 80095e6:	460b      	mov	r3, r1
 80095e8:	71fb      	strb	r3, [r7, #7]
 80095ea:	4613      	mov	r3, r2
 80095ec:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80095f2:	68bb      	ldr	r3, [r7, #8]
 80095f4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80095f6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d123      	bne.n	8009646 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80095fe:	88bb      	ldrh	r3, [r7, #4]
 8009600:	3303      	adds	r3, #3
 8009602:	089b      	lsrs	r3, r3, #2
 8009604:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8009606:	2300      	movs	r3, #0
 8009608:	61bb      	str	r3, [r7, #24]
 800960a:	e018      	b.n	800963e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800960c:	79fb      	ldrb	r3, [r7, #7]
 800960e:	031a      	lsls	r2, r3, #12
 8009610:	697b      	ldr	r3, [r7, #20]
 8009612:	4413      	add	r3, r2
 8009614:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009618:	461a      	mov	r2, r3
 800961a:	69fb      	ldr	r3, [r7, #28]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8009620:	69fb      	ldr	r3, [r7, #28]
 8009622:	3301      	adds	r3, #1
 8009624:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009626:	69fb      	ldr	r3, [r7, #28]
 8009628:	3301      	adds	r3, #1
 800962a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800962c:	69fb      	ldr	r3, [r7, #28]
 800962e:	3301      	adds	r3, #1
 8009630:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009632:	69fb      	ldr	r3, [r7, #28]
 8009634:	3301      	adds	r3, #1
 8009636:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8009638:	69bb      	ldr	r3, [r7, #24]
 800963a:	3301      	adds	r3, #1
 800963c:	61bb      	str	r3, [r7, #24]
 800963e:	69ba      	ldr	r2, [r7, #24]
 8009640:	693b      	ldr	r3, [r7, #16]
 8009642:	429a      	cmp	r2, r3
 8009644:	d3e2      	bcc.n	800960c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8009646:	2300      	movs	r3, #0
}
 8009648:	4618      	mov	r0, r3
 800964a:	3724      	adds	r7, #36	; 0x24
 800964c:	46bd      	mov	sp, r7
 800964e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009652:	4770      	bx	lr

08009654 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8009654:	b480      	push	{r7}
 8009656:	b08b      	sub	sp, #44	; 0x2c
 8009658:	af00      	add	r7, sp, #0
 800965a:	60f8      	str	r0, [r7, #12]
 800965c:	60b9      	str	r1, [r7, #8]
 800965e:	4613      	mov	r3, r2
 8009660:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8009666:	68bb      	ldr	r3, [r7, #8]
 8009668:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800966a:	88fb      	ldrh	r3, [r7, #6]
 800966c:	089b      	lsrs	r3, r3, #2
 800966e:	b29b      	uxth	r3, r3
 8009670:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8009672:	88fb      	ldrh	r3, [r7, #6]
 8009674:	f003 0303 	and.w	r3, r3, #3
 8009678:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800967a:	2300      	movs	r3, #0
 800967c:	623b      	str	r3, [r7, #32]
 800967e:	e014      	b.n	80096aa <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8009680:	69bb      	ldr	r3, [r7, #24]
 8009682:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009686:	681a      	ldr	r2, [r3, #0]
 8009688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800968a:	601a      	str	r2, [r3, #0]
    pDest++;
 800968c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800968e:	3301      	adds	r3, #1
 8009690:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009694:	3301      	adds	r3, #1
 8009696:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800969a:	3301      	adds	r3, #1
 800969c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800969e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096a0:	3301      	adds	r3, #1
 80096a2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80096a4:	6a3b      	ldr	r3, [r7, #32]
 80096a6:	3301      	adds	r3, #1
 80096a8:	623b      	str	r3, [r7, #32]
 80096aa:	6a3a      	ldr	r2, [r7, #32]
 80096ac:	697b      	ldr	r3, [r7, #20]
 80096ae:	429a      	cmp	r2, r3
 80096b0:	d3e6      	bcc.n	8009680 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80096b2:	8bfb      	ldrh	r3, [r7, #30]
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d01e      	beq.n	80096f6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80096b8:	2300      	movs	r3, #0
 80096ba:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80096bc:	69bb      	ldr	r3, [r7, #24]
 80096be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80096c2:	461a      	mov	r2, r3
 80096c4:	f107 0310 	add.w	r3, r7, #16
 80096c8:	6812      	ldr	r2, [r2, #0]
 80096ca:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80096cc:	693a      	ldr	r2, [r7, #16]
 80096ce:	6a3b      	ldr	r3, [r7, #32]
 80096d0:	b2db      	uxtb	r3, r3
 80096d2:	00db      	lsls	r3, r3, #3
 80096d4:	fa22 f303 	lsr.w	r3, r2, r3
 80096d8:	b2da      	uxtb	r2, r3
 80096da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096dc:	701a      	strb	r2, [r3, #0]
      i++;
 80096de:	6a3b      	ldr	r3, [r7, #32]
 80096e0:	3301      	adds	r3, #1
 80096e2:	623b      	str	r3, [r7, #32]
      pDest++;
 80096e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096e6:	3301      	adds	r3, #1
 80096e8:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80096ea:	8bfb      	ldrh	r3, [r7, #30]
 80096ec:	3b01      	subs	r3, #1
 80096ee:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80096f0:	8bfb      	ldrh	r3, [r7, #30]
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d1ea      	bne.n	80096cc <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80096f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80096f8:	4618      	mov	r0, r3
 80096fa:	372c      	adds	r7, #44	; 0x2c
 80096fc:	46bd      	mov	sp, r7
 80096fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009702:	4770      	bx	lr

08009704 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8009704:	b480      	push	{r7}
 8009706:	b085      	sub	sp, #20
 8009708:	af00      	add	r7, sp, #0
 800970a:	6078      	str	r0, [r7, #4]
 800970c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009712:	683b      	ldr	r3, [r7, #0]
 8009714:	781b      	ldrb	r3, [r3, #0]
 8009716:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009718:	683b      	ldr	r3, [r7, #0]
 800971a:	785b      	ldrb	r3, [r3, #1]
 800971c:	2b01      	cmp	r3, #1
 800971e:	d12c      	bne.n	800977a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009720:	68bb      	ldr	r3, [r7, #8]
 8009722:	015a      	lsls	r2, r3, #5
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	4413      	add	r3, r2
 8009728:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	2b00      	cmp	r3, #0
 8009730:	db12      	blt.n	8009758 <USB_EPSetStall+0x54>
 8009732:	68bb      	ldr	r3, [r7, #8]
 8009734:	2b00      	cmp	r3, #0
 8009736:	d00f      	beq.n	8009758 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8009738:	68bb      	ldr	r3, [r7, #8]
 800973a:	015a      	lsls	r2, r3, #5
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	4413      	add	r3, r2
 8009740:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	68ba      	ldr	r2, [r7, #8]
 8009748:	0151      	lsls	r1, r2, #5
 800974a:	68fa      	ldr	r2, [r7, #12]
 800974c:	440a      	add	r2, r1
 800974e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009752:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009756:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8009758:	68bb      	ldr	r3, [r7, #8]
 800975a:	015a      	lsls	r2, r3, #5
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	4413      	add	r3, r2
 8009760:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	68ba      	ldr	r2, [r7, #8]
 8009768:	0151      	lsls	r1, r2, #5
 800976a:	68fa      	ldr	r2, [r7, #12]
 800976c:	440a      	add	r2, r1
 800976e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009772:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009776:	6013      	str	r3, [r2, #0]
 8009778:	e02b      	b.n	80097d2 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800977a:	68bb      	ldr	r3, [r7, #8]
 800977c:	015a      	lsls	r2, r3, #5
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	4413      	add	r3, r2
 8009782:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	2b00      	cmp	r3, #0
 800978a:	db12      	blt.n	80097b2 <USB_EPSetStall+0xae>
 800978c:	68bb      	ldr	r3, [r7, #8]
 800978e:	2b00      	cmp	r3, #0
 8009790:	d00f      	beq.n	80097b2 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8009792:	68bb      	ldr	r3, [r7, #8]
 8009794:	015a      	lsls	r2, r3, #5
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	4413      	add	r3, r2
 800979a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	68ba      	ldr	r2, [r7, #8]
 80097a2:	0151      	lsls	r1, r2, #5
 80097a4:	68fa      	ldr	r2, [r7, #12]
 80097a6:	440a      	add	r2, r1
 80097a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80097ac:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80097b0:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80097b2:	68bb      	ldr	r3, [r7, #8]
 80097b4:	015a      	lsls	r2, r3, #5
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	4413      	add	r3, r2
 80097ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	68ba      	ldr	r2, [r7, #8]
 80097c2:	0151      	lsls	r1, r2, #5
 80097c4:	68fa      	ldr	r2, [r7, #12]
 80097c6:	440a      	add	r2, r1
 80097c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80097cc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80097d0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80097d2:	2300      	movs	r3, #0
}
 80097d4:	4618      	mov	r0, r3
 80097d6:	3714      	adds	r7, #20
 80097d8:	46bd      	mov	sp, r7
 80097da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097de:	4770      	bx	lr

080097e0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80097e0:	b480      	push	{r7}
 80097e2:	b085      	sub	sp, #20
 80097e4:	af00      	add	r7, sp, #0
 80097e6:	6078      	str	r0, [r7, #4]
 80097e8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80097ee:	683b      	ldr	r3, [r7, #0]
 80097f0:	781b      	ldrb	r3, [r3, #0]
 80097f2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80097f4:	683b      	ldr	r3, [r7, #0]
 80097f6:	785b      	ldrb	r3, [r3, #1]
 80097f8:	2b01      	cmp	r3, #1
 80097fa:	d128      	bne.n	800984e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80097fc:	68bb      	ldr	r3, [r7, #8]
 80097fe:	015a      	lsls	r2, r3, #5
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	4413      	add	r3, r2
 8009804:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	68ba      	ldr	r2, [r7, #8]
 800980c:	0151      	lsls	r1, r2, #5
 800980e:	68fa      	ldr	r2, [r7, #12]
 8009810:	440a      	add	r2, r1
 8009812:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009816:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800981a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800981c:	683b      	ldr	r3, [r7, #0]
 800981e:	791b      	ldrb	r3, [r3, #4]
 8009820:	2b03      	cmp	r3, #3
 8009822:	d003      	beq.n	800982c <USB_EPClearStall+0x4c>
 8009824:	683b      	ldr	r3, [r7, #0]
 8009826:	791b      	ldrb	r3, [r3, #4]
 8009828:	2b02      	cmp	r3, #2
 800982a:	d138      	bne.n	800989e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800982c:	68bb      	ldr	r3, [r7, #8]
 800982e:	015a      	lsls	r2, r3, #5
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	4413      	add	r3, r2
 8009834:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	68ba      	ldr	r2, [r7, #8]
 800983c:	0151      	lsls	r1, r2, #5
 800983e:	68fa      	ldr	r2, [r7, #12]
 8009840:	440a      	add	r2, r1
 8009842:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009846:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800984a:	6013      	str	r3, [r2, #0]
 800984c:	e027      	b.n	800989e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800984e:	68bb      	ldr	r3, [r7, #8]
 8009850:	015a      	lsls	r2, r3, #5
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	4413      	add	r3, r2
 8009856:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	68ba      	ldr	r2, [r7, #8]
 800985e:	0151      	lsls	r1, r2, #5
 8009860:	68fa      	ldr	r2, [r7, #12]
 8009862:	440a      	add	r2, r1
 8009864:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009868:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800986c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800986e:	683b      	ldr	r3, [r7, #0]
 8009870:	791b      	ldrb	r3, [r3, #4]
 8009872:	2b03      	cmp	r3, #3
 8009874:	d003      	beq.n	800987e <USB_EPClearStall+0x9e>
 8009876:	683b      	ldr	r3, [r7, #0]
 8009878:	791b      	ldrb	r3, [r3, #4]
 800987a:	2b02      	cmp	r3, #2
 800987c:	d10f      	bne.n	800989e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800987e:	68bb      	ldr	r3, [r7, #8]
 8009880:	015a      	lsls	r2, r3, #5
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	4413      	add	r3, r2
 8009886:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	68ba      	ldr	r2, [r7, #8]
 800988e:	0151      	lsls	r1, r2, #5
 8009890:	68fa      	ldr	r2, [r7, #12]
 8009892:	440a      	add	r2, r1
 8009894:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009898:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800989c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800989e:	2300      	movs	r3, #0
}
 80098a0:	4618      	mov	r0, r3
 80098a2:	3714      	adds	r7, #20
 80098a4:	46bd      	mov	sp, r7
 80098a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098aa:	4770      	bx	lr

080098ac <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80098ac:	b480      	push	{r7}
 80098ae:	b085      	sub	sp, #20
 80098b0:	af00      	add	r7, sp, #0
 80098b2:	6078      	str	r0, [r7, #4]
 80098b4:	460b      	mov	r3, r1
 80098b6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	68fa      	ldr	r2, [r7, #12]
 80098c6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80098ca:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80098ce:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80098d6:	681a      	ldr	r2, [r3, #0]
 80098d8:	78fb      	ldrb	r3, [r7, #3]
 80098da:	011b      	lsls	r3, r3, #4
 80098dc:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80098e0:	68f9      	ldr	r1, [r7, #12]
 80098e2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80098e6:	4313      	orrs	r3, r2
 80098e8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80098ea:	2300      	movs	r3, #0
}
 80098ec:	4618      	mov	r0, r3
 80098ee:	3714      	adds	r7, #20
 80098f0:	46bd      	mov	sp, r7
 80098f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098f6:	4770      	bx	lr

080098f8 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80098f8:	b480      	push	{r7}
 80098fa:	b085      	sub	sp, #20
 80098fc:	af00      	add	r7, sp, #0
 80098fe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	68fa      	ldr	r2, [r7, #12]
 800990e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009912:	f023 0303 	bic.w	r3, r3, #3
 8009916:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800991e:	685b      	ldr	r3, [r3, #4]
 8009920:	68fa      	ldr	r2, [r7, #12]
 8009922:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009926:	f023 0302 	bic.w	r3, r3, #2
 800992a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800992c:	2300      	movs	r3, #0
}
 800992e:	4618      	mov	r0, r3
 8009930:	3714      	adds	r7, #20
 8009932:	46bd      	mov	sp, r7
 8009934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009938:	4770      	bx	lr

0800993a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800993a:	b480      	push	{r7}
 800993c:	b085      	sub	sp, #20
 800993e:	af00      	add	r7, sp, #0
 8009940:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	68fa      	ldr	r2, [r7, #12]
 8009950:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009954:	f023 0303 	bic.w	r3, r3, #3
 8009958:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009960:	685b      	ldr	r3, [r3, #4]
 8009962:	68fa      	ldr	r2, [r7, #12]
 8009964:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009968:	f043 0302 	orr.w	r3, r3, #2
 800996c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800996e:	2300      	movs	r3, #0
}
 8009970:	4618      	mov	r0, r3
 8009972:	3714      	adds	r7, #20
 8009974:	46bd      	mov	sp, r7
 8009976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800997a:	4770      	bx	lr

0800997c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800997c:	b480      	push	{r7}
 800997e:	b085      	sub	sp, #20
 8009980:	af00      	add	r7, sp, #0
 8009982:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	695b      	ldr	r3, [r3, #20]
 8009988:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	699b      	ldr	r3, [r3, #24]
 800998e:	68fa      	ldr	r2, [r7, #12]
 8009990:	4013      	ands	r3, r2
 8009992:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8009994:	68fb      	ldr	r3, [r7, #12]
}
 8009996:	4618      	mov	r0, r3
 8009998:	3714      	adds	r7, #20
 800999a:	46bd      	mov	sp, r7
 800999c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a0:	4770      	bx	lr

080099a2 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80099a2:	b480      	push	{r7}
 80099a4:	b085      	sub	sp, #20
 80099a6:	af00      	add	r7, sp, #0
 80099a8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80099b4:	699b      	ldr	r3, [r3, #24]
 80099b6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80099be:	69db      	ldr	r3, [r3, #28]
 80099c0:	68ba      	ldr	r2, [r7, #8]
 80099c2:	4013      	ands	r3, r2
 80099c4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80099c6:	68bb      	ldr	r3, [r7, #8]
 80099c8:	0c1b      	lsrs	r3, r3, #16
}
 80099ca:	4618      	mov	r0, r3
 80099cc:	3714      	adds	r7, #20
 80099ce:	46bd      	mov	sp, r7
 80099d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099d4:	4770      	bx	lr

080099d6 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80099d6:	b480      	push	{r7}
 80099d8:	b085      	sub	sp, #20
 80099da:	af00      	add	r7, sp, #0
 80099dc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80099e8:	699b      	ldr	r3, [r3, #24]
 80099ea:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80099f2:	69db      	ldr	r3, [r3, #28]
 80099f4:	68ba      	ldr	r2, [r7, #8]
 80099f6:	4013      	ands	r3, r2
 80099f8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80099fa:	68bb      	ldr	r3, [r7, #8]
 80099fc:	b29b      	uxth	r3, r3
}
 80099fe:	4618      	mov	r0, r3
 8009a00:	3714      	adds	r7, #20
 8009a02:	46bd      	mov	sp, r7
 8009a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a08:	4770      	bx	lr

08009a0a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009a0a:	b480      	push	{r7}
 8009a0c:	b085      	sub	sp, #20
 8009a0e:	af00      	add	r7, sp, #0
 8009a10:	6078      	str	r0, [r7, #4]
 8009a12:	460b      	mov	r3, r1
 8009a14:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8009a1a:	78fb      	ldrb	r3, [r7, #3]
 8009a1c:	015a      	lsls	r2, r3, #5
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	4413      	add	r3, r2
 8009a22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a26:	689b      	ldr	r3, [r3, #8]
 8009a28:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009a30:	695b      	ldr	r3, [r3, #20]
 8009a32:	68ba      	ldr	r2, [r7, #8]
 8009a34:	4013      	ands	r3, r2
 8009a36:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009a38:	68bb      	ldr	r3, [r7, #8]
}
 8009a3a:	4618      	mov	r0, r3
 8009a3c:	3714      	adds	r7, #20
 8009a3e:	46bd      	mov	sp, r7
 8009a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a44:	4770      	bx	lr

08009a46 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009a46:	b480      	push	{r7}
 8009a48:	b087      	sub	sp, #28
 8009a4a:	af00      	add	r7, sp, #0
 8009a4c:	6078      	str	r0, [r7, #4]
 8009a4e:	460b      	mov	r3, r1
 8009a50:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8009a56:	697b      	ldr	r3, [r7, #20]
 8009a58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009a5c:	691b      	ldr	r3, [r3, #16]
 8009a5e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8009a60:	697b      	ldr	r3, [r7, #20]
 8009a62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009a66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a68:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8009a6a:	78fb      	ldrb	r3, [r7, #3]
 8009a6c:	f003 030f 	and.w	r3, r3, #15
 8009a70:	68fa      	ldr	r2, [r7, #12]
 8009a72:	fa22 f303 	lsr.w	r3, r2, r3
 8009a76:	01db      	lsls	r3, r3, #7
 8009a78:	b2db      	uxtb	r3, r3
 8009a7a:	693a      	ldr	r2, [r7, #16]
 8009a7c:	4313      	orrs	r3, r2
 8009a7e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8009a80:	78fb      	ldrb	r3, [r7, #3]
 8009a82:	015a      	lsls	r2, r3, #5
 8009a84:	697b      	ldr	r3, [r7, #20]
 8009a86:	4413      	add	r3, r2
 8009a88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a8c:	689b      	ldr	r3, [r3, #8]
 8009a8e:	693a      	ldr	r2, [r7, #16]
 8009a90:	4013      	ands	r3, r2
 8009a92:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009a94:	68bb      	ldr	r3, [r7, #8]
}
 8009a96:	4618      	mov	r0, r3
 8009a98:	371c      	adds	r7, #28
 8009a9a:	46bd      	mov	sp, r7
 8009a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aa0:	4770      	bx	lr

08009aa2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8009aa2:	b480      	push	{r7}
 8009aa4:	b083      	sub	sp, #12
 8009aa6:	af00      	add	r7, sp, #0
 8009aa8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	695b      	ldr	r3, [r3, #20]
 8009aae:	f003 0301 	and.w	r3, r3, #1
}
 8009ab2:	4618      	mov	r0, r3
 8009ab4:	370c      	adds	r7, #12
 8009ab6:	46bd      	mov	sp, r7
 8009ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009abc:	4770      	bx	lr

08009abe <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8009abe:	b480      	push	{r7}
 8009ac0:	b085      	sub	sp, #20
 8009ac2:	af00      	add	r7, sp, #0
 8009ac4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	68fa      	ldr	r2, [r7, #12]
 8009ad4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009ad8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8009adc:	f023 0307 	bic.w	r3, r3, #7
 8009ae0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009ae8:	685b      	ldr	r3, [r3, #4]
 8009aea:	68fa      	ldr	r2, [r7, #12]
 8009aec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009af0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009af4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009af6:	2300      	movs	r3, #0
}
 8009af8:	4618      	mov	r0, r3
 8009afa:	3714      	adds	r7, #20
 8009afc:	46bd      	mov	sp, r7
 8009afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b02:	4770      	bx	lr

08009b04 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8009b04:	b480      	push	{r7}
 8009b06:	b087      	sub	sp, #28
 8009b08:	af00      	add	r7, sp, #0
 8009b0a:	60f8      	str	r0, [r7, #12]
 8009b0c:	460b      	mov	r3, r1
 8009b0e:	607a      	str	r2, [r7, #4]
 8009b10:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	333c      	adds	r3, #60	; 0x3c
 8009b1a:	3304      	adds	r3, #4
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8009b20:	693b      	ldr	r3, [r7, #16]
 8009b22:	4a26      	ldr	r2, [pc, #152]	; (8009bbc <USB_EP0_OutStart+0xb8>)
 8009b24:	4293      	cmp	r3, r2
 8009b26:	d90a      	bls.n	8009b3e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009b28:	697b      	ldr	r3, [r7, #20]
 8009b2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009b34:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009b38:	d101      	bne.n	8009b3e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8009b3a:	2300      	movs	r3, #0
 8009b3c:	e037      	b.n	8009bae <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8009b3e:	697b      	ldr	r3, [r7, #20]
 8009b40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b44:	461a      	mov	r2, r3
 8009b46:	2300      	movs	r3, #0
 8009b48:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009b4a:	697b      	ldr	r3, [r7, #20]
 8009b4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b50:	691b      	ldr	r3, [r3, #16]
 8009b52:	697a      	ldr	r2, [r7, #20]
 8009b54:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009b58:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009b5c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8009b5e:	697b      	ldr	r3, [r7, #20]
 8009b60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b64:	691b      	ldr	r3, [r3, #16]
 8009b66:	697a      	ldr	r2, [r7, #20]
 8009b68:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009b6c:	f043 0318 	orr.w	r3, r3, #24
 8009b70:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8009b72:	697b      	ldr	r3, [r7, #20]
 8009b74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b78:	691b      	ldr	r3, [r3, #16]
 8009b7a:	697a      	ldr	r2, [r7, #20]
 8009b7c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009b80:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8009b84:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8009b86:	7afb      	ldrb	r3, [r7, #11]
 8009b88:	2b01      	cmp	r3, #1
 8009b8a:	d10f      	bne.n	8009bac <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8009b8c:	697b      	ldr	r3, [r7, #20]
 8009b8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b92:	461a      	mov	r2, r3
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8009b98:	697b      	ldr	r3, [r7, #20]
 8009b9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	697a      	ldr	r2, [r7, #20]
 8009ba2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009ba6:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8009baa:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009bac:	2300      	movs	r3, #0
}
 8009bae:	4618      	mov	r0, r3
 8009bb0:	371c      	adds	r7, #28
 8009bb2:	46bd      	mov	sp, r7
 8009bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bb8:	4770      	bx	lr
 8009bba:	bf00      	nop
 8009bbc:	4f54300a 	.word	0x4f54300a

08009bc0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009bc0:	b480      	push	{r7}
 8009bc2:	b085      	sub	sp, #20
 8009bc4:	af00      	add	r7, sp, #0
 8009bc6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009bc8:	2300      	movs	r3, #0
 8009bca:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	3301      	adds	r3, #1
 8009bd0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8009bd8:	d901      	bls.n	8009bde <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009bda:	2303      	movs	r3, #3
 8009bdc:	e01b      	b.n	8009c16 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	691b      	ldr	r3, [r3, #16]
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	daf2      	bge.n	8009bcc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009be6:	2300      	movs	r3, #0
 8009be8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	691b      	ldr	r3, [r3, #16]
 8009bee:	f043 0201 	orr.w	r2, r3, #1
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	3301      	adds	r3, #1
 8009bfa:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8009c02:	d901      	bls.n	8009c08 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009c04:	2303      	movs	r3, #3
 8009c06:	e006      	b.n	8009c16 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	691b      	ldr	r3, [r3, #16]
 8009c0c:	f003 0301 	and.w	r3, r3, #1
 8009c10:	2b01      	cmp	r3, #1
 8009c12:	d0f0      	beq.n	8009bf6 <USB_CoreReset+0x36>

  return HAL_OK;
 8009c14:	2300      	movs	r3, #0
}
 8009c16:	4618      	mov	r0, r3
 8009c18:	3714      	adds	r7, #20
 8009c1a:	46bd      	mov	sp, r7
 8009c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c20:	4770      	bx	lr
	...

08009c24 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8009c24:	b580      	push	{r7, lr}
 8009c26:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8009c28:	4904      	ldr	r1, [pc, #16]	; (8009c3c <MX_FATFS_Init+0x18>)
 8009c2a:	4805      	ldr	r0, [pc, #20]	; (8009c40 <MX_FATFS_Init+0x1c>)
 8009c2c:	f005 fb50 	bl	800f2d0 <FATFS_LinkDriver>
 8009c30:	4603      	mov	r3, r0
 8009c32:	461a      	mov	r2, r3
 8009c34:	4b03      	ldr	r3, [pc, #12]	; (8009c44 <MX_FATFS_Init+0x20>)
 8009c36:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8009c38:	bf00      	nop
 8009c3a:	bd80      	pop	{r7, pc}
 8009c3c:	20000d0c 	.word	0x20000d0c
 8009c40:	080135a8 	.word	0x080135a8
 8009c44:	20000d08 	.word	0x20000d08

08009c48 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8009c48:	b480      	push	{r7}
 8009c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8009c4c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8009c4e:	4618      	mov	r0, r3
 8009c50:	46bd      	mov	sp, r7
 8009c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c56:	4770      	bx	lr

08009c58 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8009c58:	b580      	push	{r7, lr}
 8009c5a:	b082      	sub	sp, #8
 8009c5c:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8009c5e:	2300      	movs	r3, #0
 8009c60:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8009c62:	f000 f8ac 	bl	8009dbe <BSP_SD_IsDetected>
 8009c66:	4603      	mov	r3, r0
 8009c68:	2b01      	cmp	r3, #1
 8009c6a:	d001      	beq.n	8009c70 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8009c6c:	2301      	movs	r3, #1
 8009c6e:	e012      	b.n	8009c96 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8009c70:	480b      	ldr	r0, [pc, #44]	; (8009ca0 <BSP_SD_Init+0x48>)
 8009c72:	f7fc f96f 	bl	8005f54 <HAL_SD_Init>
 8009c76:	4603      	mov	r3, r0
 8009c78:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8009c7a:	79fb      	ldrb	r3, [r7, #7]
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d109      	bne.n	8009c94 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8009c80:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8009c84:	4806      	ldr	r0, [pc, #24]	; (8009ca0 <BSP_SD_Init+0x48>)
 8009c86:	f7fd f9cb 	bl	8007020 <HAL_SD_ConfigWideBusOperation>
 8009c8a:	4603      	mov	r3, r0
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d001      	beq.n	8009c94 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8009c90:	2301      	movs	r3, #1
 8009c92:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8009c94:	79fb      	ldrb	r3, [r7, #7]
}
 8009c96:	4618      	mov	r0, r3
 8009c98:	3708      	adds	r7, #8
 8009c9a:	46bd      	mov	sp, r7
 8009c9c:	bd80      	pop	{r7, pc}
 8009c9e:	bf00      	nop
 8009ca0:	200002f4 	.word	0x200002f4

08009ca4 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8009ca4:	b580      	push	{r7, lr}
 8009ca6:	b088      	sub	sp, #32
 8009ca8:	af02      	add	r7, sp, #8
 8009caa:	60f8      	str	r0, [r7, #12]
 8009cac:	60b9      	str	r1, [r7, #8]
 8009cae:	607a      	str	r2, [r7, #4]
 8009cb0:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8009cb2:	2300      	movs	r3, #0
 8009cb4:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 8009cb6:	683b      	ldr	r3, [r7, #0]
 8009cb8:	9300      	str	r3, [sp, #0]
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	68ba      	ldr	r2, [r7, #8]
 8009cbe:	68f9      	ldr	r1, [r7, #12]
 8009cc0:	4806      	ldr	r0, [pc, #24]	; (8009cdc <BSP_SD_ReadBlocks+0x38>)
 8009cc2:	f7fc f9f7 	bl	80060b4 <HAL_SD_ReadBlocks>
 8009cc6:	4603      	mov	r3, r0
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d001      	beq.n	8009cd0 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8009ccc:	2301      	movs	r3, #1
 8009cce:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8009cd0:	7dfb      	ldrb	r3, [r7, #23]
}
 8009cd2:	4618      	mov	r0, r3
 8009cd4:	3718      	adds	r7, #24
 8009cd6:	46bd      	mov	sp, r7
 8009cd8:	bd80      	pop	{r7, pc}
 8009cda:	bf00      	nop
 8009cdc:	200002f4 	.word	0x200002f4

08009ce0 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8009ce0:	b580      	push	{r7, lr}
 8009ce2:	b088      	sub	sp, #32
 8009ce4:	af02      	add	r7, sp, #8
 8009ce6:	60f8      	str	r0, [r7, #12]
 8009ce8:	60b9      	str	r1, [r7, #8]
 8009cea:	607a      	str	r2, [r7, #4]
 8009cec:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8009cee:	2300      	movs	r3, #0
 8009cf0:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 8009cf2:	683b      	ldr	r3, [r7, #0]
 8009cf4:	9300      	str	r3, [sp, #0]
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	68ba      	ldr	r2, [r7, #8]
 8009cfa:	68f9      	ldr	r1, [r7, #12]
 8009cfc:	4806      	ldr	r0, [pc, #24]	; (8009d18 <BSP_SD_WriteBlocks+0x38>)
 8009cfe:	f7fc fbbf 	bl	8006480 <HAL_SD_WriteBlocks>
 8009d02:	4603      	mov	r3, r0
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d001      	beq.n	8009d0c <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8009d08:	2301      	movs	r3, #1
 8009d0a:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8009d0c:	7dfb      	ldrb	r3, [r7, #23]
}
 8009d0e:	4618      	mov	r0, r3
 8009d10:	3718      	adds	r7, #24
 8009d12:	46bd      	mov	sp, r7
 8009d14:	bd80      	pop	{r7, pc}
 8009d16:	bf00      	nop
 8009d18:	200002f4 	.word	0x200002f4

08009d1c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8009d1c:	b580      	push	{r7, lr}
 8009d1e:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8009d20:	4805      	ldr	r0, [pc, #20]	; (8009d38 <BSP_SD_GetCardState+0x1c>)
 8009d22:	f7fd fa17 	bl	8007154 <HAL_SD_GetCardState>
 8009d26:	4603      	mov	r3, r0
 8009d28:	2b04      	cmp	r3, #4
 8009d2a:	bf14      	ite	ne
 8009d2c:	2301      	movne	r3, #1
 8009d2e:	2300      	moveq	r3, #0
 8009d30:	b2db      	uxtb	r3, r3
}
 8009d32:	4618      	mov	r0, r3
 8009d34:	bd80      	pop	{r7, pc}
 8009d36:	bf00      	nop
 8009d38:	200002f4 	.word	0x200002f4

08009d3c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8009d3c:	b580      	push	{r7, lr}
 8009d3e:	b082      	sub	sp, #8
 8009d40:	af00      	add	r7, sp, #0
 8009d42:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8009d44:	6879      	ldr	r1, [r7, #4]
 8009d46:	4803      	ldr	r0, [pc, #12]	; (8009d54 <BSP_SD_GetCardInfo+0x18>)
 8009d48:	f7fd f93e 	bl	8006fc8 <HAL_SD_GetCardInfo>
}
 8009d4c:	bf00      	nop
 8009d4e:	3708      	adds	r7, #8
 8009d50:	46bd      	mov	sp, r7
 8009d52:	bd80      	pop	{r7, pc}
 8009d54:	200002f4 	.word	0x200002f4

08009d58 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8009d58:	b580      	push	{r7, lr}
 8009d5a:	b082      	sub	sp, #8
 8009d5c:	af00      	add	r7, sp, #0
 8009d5e:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 8009d60:	f000 f818 	bl	8009d94 <BSP_SD_AbortCallback>
}
 8009d64:	bf00      	nop
 8009d66:	3708      	adds	r7, #8
 8009d68:	46bd      	mov	sp, r7
 8009d6a:	bd80      	pop	{r7, pc}

08009d6c <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8009d6c:	b580      	push	{r7, lr}
 8009d6e:	b082      	sub	sp, #8
 8009d70:	af00      	add	r7, sp, #0
 8009d72:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8009d74:	f000 f815 	bl	8009da2 <BSP_SD_WriteCpltCallback>
}
 8009d78:	bf00      	nop
 8009d7a:	3708      	adds	r7, #8
 8009d7c:	46bd      	mov	sp, r7
 8009d7e:	bd80      	pop	{r7, pc}

08009d80 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8009d80:	b580      	push	{r7, lr}
 8009d82:	b082      	sub	sp, #8
 8009d84:	af00      	add	r7, sp, #0
 8009d86:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8009d88:	f000 f812 	bl	8009db0 <BSP_SD_ReadCpltCallback>
}
 8009d8c:	bf00      	nop
 8009d8e:	3708      	adds	r7, #8
 8009d90:	46bd      	mov	sp, r7
 8009d92:	bd80      	pop	{r7, pc}

08009d94 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 8009d94:	b480      	push	{r7}
 8009d96:	af00      	add	r7, sp, #0

}
 8009d98:	bf00      	nop
 8009d9a:	46bd      	mov	sp, r7
 8009d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009da0:	4770      	bx	lr

08009da2 <BSP_SD_WriteCpltCallback>:
  * @brief BSP Tx Transfer completed callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_WriteCpltCallback(void)
{
 8009da2:	b480      	push	{r7}
 8009da4:	af00      	add	r7, sp, #0

}
 8009da6:	bf00      	nop
 8009da8:	46bd      	mov	sp, r7
 8009daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dae:	4770      	bx	lr

08009db0 <BSP_SD_ReadCpltCallback>:
  * @brief BSP Rx Transfer completed callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_ReadCpltCallback(void)
{
 8009db0:	b480      	push	{r7}
 8009db2:	af00      	add	r7, sp, #0

}
 8009db4:	bf00      	nop
 8009db6:	46bd      	mov	sp, r7
 8009db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dbc:	4770      	bx	lr

08009dbe <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8009dbe:	b480      	push	{r7}
 8009dc0:	b083      	sub	sp, #12
 8009dc2:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8009dc4:	2301      	movs	r3, #1
 8009dc6:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 8009dc8:	79fb      	ldrb	r3, [r7, #7]
 8009dca:	b2db      	uxtb	r3, r3
}
 8009dcc:	4618      	mov	r0, r3
 8009dce:	370c      	adds	r7, #12
 8009dd0:	46bd      	mov	sp, r7
 8009dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dd6:	4770      	bx	lr

08009dd8 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8009dd8:	b580      	push	{r7, lr}
 8009dda:	b082      	sub	sp, #8
 8009ddc:	af00      	add	r7, sp, #0
 8009dde:	4603      	mov	r3, r0
 8009de0:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8009de2:	4b0b      	ldr	r3, [pc, #44]	; (8009e10 <SD_CheckStatus+0x38>)
 8009de4:	2201      	movs	r2, #1
 8009de6:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8009de8:	f7ff ff98 	bl	8009d1c <BSP_SD_GetCardState>
 8009dec:	4603      	mov	r3, r0
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d107      	bne.n	8009e02 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8009df2:	4b07      	ldr	r3, [pc, #28]	; (8009e10 <SD_CheckStatus+0x38>)
 8009df4:	781b      	ldrb	r3, [r3, #0]
 8009df6:	b2db      	uxtb	r3, r3
 8009df8:	f023 0301 	bic.w	r3, r3, #1
 8009dfc:	b2da      	uxtb	r2, r3
 8009dfe:	4b04      	ldr	r3, [pc, #16]	; (8009e10 <SD_CheckStatus+0x38>)
 8009e00:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8009e02:	4b03      	ldr	r3, [pc, #12]	; (8009e10 <SD_CheckStatus+0x38>)
 8009e04:	781b      	ldrb	r3, [r3, #0]
 8009e06:	b2db      	uxtb	r3, r3
}
 8009e08:	4618      	mov	r0, r3
 8009e0a:	3708      	adds	r7, #8
 8009e0c:	46bd      	mov	sp, r7
 8009e0e:	bd80      	pop	{r7, pc}
 8009e10:	20000015 	.word	0x20000015

08009e14 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8009e14:	b580      	push	{r7, lr}
 8009e16:	b082      	sub	sp, #8
 8009e18:	af00      	add	r7, sp, #0
 8009e1a:	4603      	mov	r3, r0
 8009e1c:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 8009e1e:	4b0b      	ldr	r3, [pc, #44]	; (8009e4c <SD_initialize+0x38>)
 8009e20:	2201      	movs	r2, #1
 8009e22:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8009e24:	f7ff ff18 	bl	8009c58 <BSP_SD_Init>
 8009e28:	4603      	mov	r3, r0
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d107      	bne.n	8009e3e <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 8009e2e:	79fb      	ldrb	r3, [r7, #7]
 8009e30:	4618      	mov	r0, r3
 8009e32:	f7ff ffd1 	bl	8009dd8 <SD_CheckStatus>
 8009e36:	4603      	mov	r3, r0
 8009e38:	461a      	mov	r2, r3
 8009e3a:	4b04      	ldr	r3, [pc, #16]	; (8009e4c <SD_initialize+0x38>)
 8009e3c:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8009e3e:	4b03      	ldr	r3, [pc, #12]	; (8009e4c <SD_initialize+0x38>)
 8009e40:	781b      	ldrb	r3, [r3, #0]
 8009e42:	b2db      	uxtb	r3, r3
}
 8009e44:	4618      	mov	r0, r3
 8009e46:	3708      	adds	r7, #8
 8009e48:	46bd      	mov	sp, r7
 8009e4a:	bd80      	pop	{r7, pc}
 8009e4c:	20000015 	.word	0x20000015

08009e50 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8009e50:	b580      	push	{r7, lr}
 8009e52:	b082      	sub	sp, #8
 8009e54:	af00      	add	r7, sp, #0
 8009e56:	4603      	mov	r3, r0
 8009e58:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8009e5a:	79fb      	ldrb	r3, [r7, #7]
 8009e5c:	4618      	mov	r0, r3
 8009e5e:	f7ff ffbb 	bl	8009dd8 <SD_CheckStatus>
 8009e62:	4603      	mov	r3, r0
}
 8009e64:	4618      	mov	r0, r3
 8009e66:	3708      	adds	r7, #8
 8009e68:	46bd      	mov	sp, r7
 8009e6a:	bd80      	pop	{r7, pc}

08009e6c <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8009e6c:	b580      	push	{r7, lr}
 8009e6e:	b086      	sub	sp, #24
 8009e70:	af00      	add	r7, sp, #0
 8009e72:	60b9      	str	r1, [r7, #8]
 8009e74:	607a      	str	r2, [r7, #4]
 8009e76:	603b      	str	r3, [r7, #0]
 8009e78:	4603      	mov	r3, r0
 8009e7a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8009e7c:	2301      	movs	r3, #1
 8009e7e:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 8009e80:	f04f 33ff 	mov.w	r3, #4294967295
 8009e84:	683a      	ldr	r2, [r7, #0]
 8009e86:	6879      	ldr	r1, [r7, #4]
 8009e88:	68b8      	ldr	r0, [r7, #8]
 8009e8a:	f7ff ff0b 	bl	8009ca4 <BSP_SD_ReadBlocks>
 8009e8e:	4603      	mov	r3, r0
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d107      	bne.n	8009ea4 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 8009e94:	bf00      	nop
 8009e96:	f7ff ff41 	bl	8009d1c <BSP_SD_GetCardState>
 8009e9a:	4603      	mov	r3, r0
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d1fa      	bne.n	8009e96 <SD_read+0x2a>
    {
    }
    res = RES_OK;
 8009ea0:	2300      	movs	r3, #0
 8009ea2:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8009ea4:	7dfb      	ldrb	r3, [r7, #23]
}
 8009ea6:	4618      	mov	r0, r3
 8009ea8:	3718      	adds	r7, #24
 8009eaa:	46bd      	mov	sp, r7
 8009eac:	bd80      	pop	{r7, pc}

08009eae <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8009eae:	b580      	push	{r7, lr}
 8009eb0:	b086      	sub	sp, #24
 8009eb2:	af00      	add	r7, sp, #0
 8009eb4:	60b9      	str	r1, [r7, #8]
 8009eb6:	607a      	str	r2, [r7, #4]
 8009eb8:	603b      	str	r3, [r7, #0]
 8009eba:	4603      	mov	r3, r0
 8009ebc:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8009ebe:	2301      	movs	r3, #1
 8009ec0:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 8009ec2:	f04f 33ff 	mov.w	r3, #4294967295
 8009ec6:	683a      	ldr	r2, [r7, #0]
 8009ec8:	6879      	ldr	r1, [r7, #4]
 8009eca:	68b8      	ldr	r0, [r7, #8]
 8009ecc:	f7ff ff08 	bl	8009ce0 <BSP_SD_WriteBlocks>
 8009ed0:	4603      	mov	r3, r0
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d107      	bne.n	8009ee6 <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 8009ed6:	bf00      	nop
 8009ed8:	f7ff ff20 	bl	8009d1c <BSP_SD_GetCardState>
 8009edc:	4603      	mov	r3, r0
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d1fa      	bne.n	8009ed8 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 8009ee2:	2300      	movs	r3, #0
 8009ee4:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8009ee6:	7dfb      	ldrb	r3, [r7, #23]
}
 8009ee8:	4618      	mov	r0, r3
 8009eea:	3718      	adds	r7, #24
 8009eec:	46bd      	mov	sp, r7
 8009eee:	bd80      	pop	{r7, pc}

08009ef0 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8009ef0:	b580      	push	{r7, lr}
 8009ef2:	b08c      	sub	sp, #48	; 0x30
 8009ef4:	af00      	add	r7, sp, #0
 8009ef6:	4603      	mov	r3, r0
 8009ef8:	603a      	str	r2, [r7, #0]
 8009efa:	71fb      	strb	r3, [r7, #7]
 8009efc:	460b      	mov	r3, r1
 8009efe:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8009f00:	2301      	movs	r3, #1
 8009f02:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8009f06:	4b25      	ldr	r3, [pc, #148]	; (8009f9c <SD_ioctl+0xac>)
 8009f08:	781b      	ldrb	r3, [r3, #0]
 8009f0a:	b2db      	uxtb	r3, r3
 8009f0c:	f003 0301 	and.w	r3, r3, #1
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d001      	beq.n	8009f18 <SD_ioctl+0x28>
 8009f14:	2303      	movs	r3, #3
 8009f16:	e03c      	b.n	8009f92 <SD_ioctl+0xa2>

  switch (cmd)
 8009f18:	79bb      	ldrb	r3, [r7, #6]
 8009f1a:	2b03      	cmp	r3, #3
 8009f1c:	d834      	bhi.n	8009f88 <SD_ioctl+0x98>
 8009f1e:	a201      	add	r2, pc, #4	; (adr r2, 8009f24 <SD_ioctl+0x34>)
 8009f20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f24:	08009f35 	.word	0x08009f35
 8009f28:	08009f3d 	.word	0x08009f3d
 8009f2c:	08009f55 	.word	0x08009f55
 8009f30:	08009f6f 	.word	0x08009f6f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8009f34:	2300      	movs	r3, #0
 8009f36:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8009f3a:	e028      	b.n	8009f8e <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8009f3c:	f107 030c 	add.w	r3, r7, #12
 8009f40:	4618      	mov	r0, r3
 8009f42:	f7ff fefb 	bl	8009d3c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8009f46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f48:	683b      	ldr	r3, [r7, #0]
 8009f4a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8009f4c:	2300      	movs	r3, #0
 8009f4e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8009f52:	e01c      	b.n	8009f8e <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8009f54:	f107 030c 	add.w	r3, r7, #12
 8009f58:	4618      	mov	r0, r3
 8009f5a:	f7ff feef 	bl	8009d3c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8009f5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f60:	b29a      	uxth	r2, r3
 8009f62:	683b      	ldr	r3, [r7, #0]
 8009f64:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8009f66:	2300      	movs	r3, #0
 8009f68:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8009f6c:	e00f      	b.n	8009f8e <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8009f6e:	f107 030c 	add.w	r3, r7, #12
 8009f72:	4618      	mov	r0, r3
 8009f74:	f7ff fee2 	bl	8009d3c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8009f78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f7a:	0a5a      	lsrs	r2, r3, #9
 8009f7c:	683b      	ldr	r3, [r7, #0]
 8009f7e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8009f80:	2300      	movs	r3, #0
 8009f82:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8009f86:	e002      	b.n	8009f8e <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8009f88:	2304      	movs	r3, #4
 8009f8a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8009f8e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8009f92:	4618      	mov	r0, r3
 8009f94:	3730      	adds	r7, #48	; 0x30
 8009f96:	46bd      	mov	sp, r7
 8009f98:	bd80      	pop	{r7, pc}
 8009f9a:	bf00      	nop
 8009f9c:	20000015 	.word	0x20000015

08009fa0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009fa0:	b580      	push	{r7, lr}
 8009fa2:	b084      	sub	sp, #16
 8009fa4:	af00      	add	r7, sp, #0
 8009fa6:	6078      	str	r0, [r7, #4]
 8009fa8:	460b      	mov	r3, r1
 8009faa:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8009fac:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8009fb0:	f005 fed8 	bl	800fd64 <USBD_static_malloc>
 8009fb4:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d109      	bne.n	8009fd0 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	32b0      	adds	r2, #176	; 0xb0
 8009fc6:	2100      	movs	r1, #0
 8009fc8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8009fcc:	2302      	movs	r3, #2
 8009fce:	e0d4      	b.n	800a17a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8009fd0:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8009fd4:	2100      	movs	r1, #0
 8009fd6:	68f8      	ldr	r0, [r7, #12]
 8009fd8:	f006 ff36 	bl	8010e48 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	32b0      	adds	r2, #176	; 0xb0
 8009fe6:	68f9      	ldr	r1, [r7, #12]
 8009fe8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	32b0      	adds	r2, #176	; 0xb0
 8009ff6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	7c1b      	ldrb	r3, [r3, #16]
 800a004:	2b00      	cmp	r3, #0
 800a006:	d138      	bne.n	800a07a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800a008:	4b5e      	ldr	r3, [pc, #376]	; (800a184 <USBD_CDC_Init+0x1e4>)
 800a00a:	7819      	ldrb	r1, [r3, #0]
 800a00c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a010:	2202      	movs	r2, #2
 800a012:	6878      	ldr	r0, [r7, #4]
 800a014:	f005 fd83 	bl	800fb1e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800a018:	4b5a      	ldr	r3, [pc, #360]	; (800a184 <USBD_CDC_Init+0x1e4>)
 800a01a:	781b      	ldrb	r3, [r3, #0]
 800a01c:	f003 020f 	and.w	r2, r3, #15
 800a020:	6879      	ldr	r1, [r7, #4]
 800a022:	4613      	mov	r3, r2
 800a024:	009b      	lsls	r3, r3, #2
 800a026:	4413      	add	r3, r2
 800a028:	009b      	lsls	r3, r3, #2
 800a02a:	440b      	add	r3, r1
 800a02c:	3324      	adds	r3, #36	; 0x24
 800a02e:	2201      	movs	r2, #1
 800a030:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800a032:	4b55      	ldr	r3, [pc, #340]	; (800a188 <USBD_CDC_Init+0x1e8>)
 800a034:	7819      	ldrb	r1, [r3, #0]
 800a036:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a03a:	2202      	movs	r2, #2
 800a03c:	6878      	ldr	r0, [r7, #4]
 800a03e:	f005 fd6e 	bl	800fb1e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800a042:	4b51      	ldr	r3, [pc, #324]	; (800a188 <USBD_CDC_Init+0x1e8>)
 800a044:	781b      	ldrb	r3, [r3, #0]
 800a046:	f003 020f 	and.w	r2, r3, #15
 800a04a:	6879      	ldr	r1, [r7, #4]
 800a04c:	4613      	mov	r3, r2
 800a04e:	009b      	lsls	r3, r3, #2
 800a050:	4413      	add	r3, r2
 800a052:	009b      	lsls	r3, r3, #2
 800a054:	440b      	add	r3, r1
 800a056:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a05a:	2201      	movs	r2, #1
 800a05c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800a05e:	4b4b      	ldr	r3, [pc, #300]	; (800a18c <USBD_CDC_Init+0x1ec>)
 800a060:	781b      	ldrb	r3, [r3, #0]
 800a062:	f003 020f 	and.w	r2, r3, #15
 800a066:	6879      	ldr	r1, [r7, #4]
 800a068:	4613      	mov	r3, r2
 800a06a:	009b      	lsls	r3, r3, #2
 800a06c:	4413      	add	r3, r2
 800a06e:	009b      	lsls	r3, r3, #2
 800a070:	440b      	add	r3, r1
 800a072:	3326      	adds	r3, #38	; 0x26
 800a074:	2210      	movs	r2, #16
 800a076:	801a      	strh	r2, [r3, #0]
 800a078:	e035      	b.n	800a0e6 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800a07a:	4b42      	ldr	r3, [pc, #264]	; (800a184 <USBD_CDC_Init+0x1e4>)
 800a07c:	7819      	ldrb	r1, [r3, #0]
 800a07e:	2340      	movs	r3, #64	; 0x40
 800a080:	2202      	movs	r2, #2
 800a082:	6878      	ldr	r0, [r7, #4]
 800a084:	f005 fd4b 	bl	800fb1e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800a088:	4b3e      	ldr	r3, [pc, #248]	; (800a184 <USBD_CDC_Init+0x1e4>)
 800a08a:	781b      	ldrb	r3, [r3, #0]
 800a08c:	f003 020f 	and.w	r2, r3, #15
 800a090:	6879      	ldr	r1, [r7, #4]
 800a092:	4613      	mov	r3, r2
 800a094:	009b      	lsls	r3, r3, #2
 800a096:	4413      	add	r3, r2
 800a098:	009b      	lsls	r3, r3, #2
 800a09a:	440b      	add	r3, r1
 800a09c:	3324      	adds	r3, #36	; 0x24
 800a09e:	2201      	movs	r2, #1
 800a0a0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800a0a2:	4b39      	ldr	r3, [pc, #228]	; (800a188 <USBD_CDC_Init+0x1e8>)
 800a0a4:	7819      	ldrb	r1, [r3, #0]
 800a0a6:	2340      	movs	r3, #64	; 0x40
 800a0a8:	2202      	movs	r2, #2
 800a0aa:	6878      	ldr	r0, [r7, #4]
 800a0ac:	f005 fd37 	bl	800fb1e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800a0b0:	4b35      	ldr	r3, [pc, #212]	; (800a188 <USBD_CDC_Init+0x1e8>)
 800a0b2:	781b      	ldrb	r3, [r3, #0]
 800a0b4:	f003 020f 	and.w	r2, r3, #15
 800a0b8:	6879      	ldr	r1, [r7, #4]
 800a0ba:	4613      	mov	r3, r2
 800a0bc:	009b      	lsls	r3, r3, #2
 800a0be:	4413      	add	r3, r2
 800a0c0:	009b      	lsls	r3, r3, #2
 800a0c2:	440b      	add	r3, r1
 800a0c4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a0c8:	2201      	movs	r2, #1
 800a0ca:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800a0cc:	4b2f      	ldr	r3, [pc, #188]	; (800a18c <USBD_CDC_Init+0x1ec>)
 800a0ce:	781b      	ldrb	r3, [r3, #0]
 800a0d0:	f003 020f 	and.w	r2, r3, #15
 800a0d4:	6879      	ldr	r1, [r7, #4]
 800a0d6:	4613      	mov	r3, r2
 800a0d8:	009b      	lsls	r3, r3, #2
 800a0da:	4413      	add	r3, r2
 800a0dc:	009b      	lsls	r3, r3, #2
 800a0de:	440b      	add	r3, r1
 800a0e0:	3326      	adds	r3, #38	; 0x26
 800a0e2:	2210      	movs	r2, #16
 800a0e4:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800a0e6:	4b29      	ldr	r3, [pc, #164]	; (800a18c <USBD_CDC_Init+0x1ec>)
 800a0e8:	7819      	ldrb	r1, [r3, #0]
 800a0ea:	2308      	movs	r3, #8
 800a0ec:	2203      	movs	r2, #3
 800a0ee:	6878      	ldr	r0, [r7, #4]
 800a0f0:	f005 fd15 	bl	800fb1e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800a0f4:	4b25      	ldr	r3, [pc, #148]	; (800a18c <USBD_CDC_Init+0x1ec>)
 800a0f6:	781b      	ldrb	r3, [r3, #0]
 800a0f8:	f003 020f 	and.w	r2, r3, #15
 800a0fc:	6879      	ldr	r1, [r7, #4]
 800a0fe:	4613      	mov	r3, r2
 800a100:	009b      	lsls	r3, r3, #2
 800a102:	4413      	add	r3, r2
 800a104:	009b      	lsls	r3, r3, #2
 800a106:	440b      	add	r3, r1
 800a108:	3324      	adds	r3, #36	; 0x24
 800a10a:	2201      	movs	r2, #1
 800a10c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	2200      	movs	r2, #0
 800a112:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a11c:	687a      	ldr	r2, [r7, #4]
 800a11e:	33b0      	adds	r3, #176	; 0xb0
 800a120:	009b      	lsls	r3, r3, #2
 800a122:	4413      	add	r3, r2
 800a124:	685b      	ldr	r3, [r3, #4]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	2200      	movs	r2, #0
 800a12e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	2200      	movs	r2, #0
 800a136:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800a140:	2b00      	cmp	r3, #0
 800a142:	d101      	bne.n	800a148 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800a144:	2302      	movs	r3, #2
 800a146:	e018      	b.n	800a17a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	7c1b      	ldrb	r3, [r3, #16]
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d10a      	bne.n	800a166 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a150:	4b0d      	ldr	r3, [pc, #52]	; (800a188 <USBD_CDC_Init+0x1e8>)
 800a152:	7819      	ldrb	r1, [r3, #0]
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a15a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a15e:	6878      	ldr	r0, [r7, #4]
 800a160:	f005 fdcc 	bl	800fcfc <USBD_LL_PrepareReceive>
 800a164:	e008      	b.n	800a178 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a166:	4b08      	ldr	r3, [pc, #32]	; (800a188 <USBD_CDC_Init+0x1e8>)
 800a168:	7819      	ldrb	r1, [r3, #0]
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a170:	2340      	movs	r3, #64	; 0x40
 800a172:	6878      	ldr	r0, [r7, #4]
 800a174:	f005 fdc2 	bl	800fcfc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a178:	2300      	movs	r3, #0
}
 800a17a:	4618      	mov	r0, r3
 800a17c:	3710      	adds	r7, #16
 800a17e:	46bd      	mov	sp, r7
 800a180:	bd80      	pop	{r7, pc}
 800a182:	bf00      	nop
 800a184:	2000009f 	.word	0x2000009f
 800a188:	200000a0 	.word	0x200000a0
 800a18c:	200000a1 	.word	0x200000a1

0800a190 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a190:	b580      	push	{r7, lr}
 800a192:	b082      	sub	sp, #8
 800a194:	af00      	add	r7, sp, #0
 800a196:	6078      	str	r0, [r7, #4]
 800a198:	460b      	mov	r3, r1
 800a19a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800a19c:	4b3a      	ldr	r3, [pc, #232]	; (800a288 <USBD_CDC_DeInit+0xf8>)
 800a19e:	781b      	ldrb	r3, [r3, #0]
 800a1a0:	4619      	mov	r1, r3
 800a1a2:	6878      	ldr	r0, [r7, #4]
 800a1a4:	f005 fce1 	bl	800fb6a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800a1a8:	4b37      	ldr	r3, [pc, #220]	; (800a288 <USBD_CDC_DeInit+0xf8>)
 800a1aa:	781b      	ldrb	r3, [r3, #0]
 800a1ac:	f003 020f 	and.w	r2, r3, #15
 800a1b0:	6879      	ldr	r1, [r7, #4]
 800a1b2:	4613      	mov	r3, r2
 800a1b4:	009b      	lsls	r3, r3, #2
 800a1b6:	4413      	add	r3, r2
 800a1b8:	009b      	lsls	r3, r3, #2
 800a1ba:	440b      	add	r3, r1
 800a1bc:	3324      	adds	r3, #36	; 0x24
 800a1be:	2200      	movs	r2, #0
 800a1c0:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800a1c2:	4b32      	ldr	r3, [pc, #200]	; (800a28c <USBD_CDC_DeInit+0xfc>)
 800a1c4:	781b      	ldrb	r3, [r3, #0]
 800a1c6:	4619      	mov	r1, r3
 800a1c8:	6878      	ldr	r0, [r7, #4]
 800a1ca:	f005 fcce 	bl	800fb6a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800a1ce:	4b2f      	ldr	r3, [pc, #188]	; (800a28c <USBD_CDC_DeInit+0xfc>)
 800a1d0:	781b      	ldrb	r3, [r3, #0]
 800a1d2:	f003 020f 	and.w	r2, r3, #15
 800a1d6:	6879      	ldr	r1, [r7, #4]
 800a1d8:	4613      	mov	r3, r2
 800a1da:	009b      	lsls	r3, r3, #2
 800a1dc:	4413      	add	r3, r2
 800a1de:	009b      	lsls	r3, r3, #2
 800a1e0:	440b      	add	r3, r1
 800a1e2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a1e6:	2200      	movs	r2, #0
 800a1e8:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800a1ea:	4b29      	ldr	r3, [pc, #164]	; (800a290 <USBD_CDC_DeInit+0x100>)
 800a1ec:	781b      	ldrb	r3, [r3, #0]
 800a1ee:	4619      	mov	r1, r3
 800a1f0:	6878      	ldr	r0, [r7, #4]
 800a1f2:	f005 fcba 	bl	800fb6a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800a1f6:	4b26      	ldr	r3, [pc, #152]	; (800a290 <USBD_CDC_DeInit+0x100>)
 800a1f8:	781b      	ldrb	r3, [r3, #0]
 800a1fa:	f003 020f 	and.w	r2, r3, #15
 800a1fe:	6879      	ldr	r1, [r7, #4]
 800a200:	4613      	mov	r3, r2
 800a202:	009b      	lsls	r3, r3, #2
 800a204:	4413      	add	r3, r2
 800a206:	009b      	lsls	r3, r3, #2
 800a208:	440b      	add	r3, r1
 800a20a:	3324      	adds	r3, #36	; 0x24
 800a20c:	2200      	movs	r2, #0
 800a20e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800a210:	4b1f      	ldr	r3, [pc, #124]	; (800a290 <USBD_CDC_DeInit+0x100>)
 800a212:	781b      	ldrb	r3, [r3, #0]
 800a214:	f003 020f 	and.w	r2, r3, #15
 800a218:	6879      	ldr	r1, [r7, #4]
 800a21a:	4613      	mov	r3, r2
 800a21c:	009b      	lsls	r3, r3, #2
 800a21e:	4413      	add	r3, r2
 800a220:	009b      	lsls	r3, r3, #2
 800a222:	440b      	add	r3, r1
 800a224:	3326      	adds	r3, #38	; 0x26
 800a226:	2200      	movs	r2, #0
 800a228:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	32b0      	adds	r2, #176	; 0xb0
 800a234:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d01f      	beq.n	800a27c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a242:	687a      	ldr	r2, [r7, #4]
 800a244:	33b0      	adds	r3, #176	; 0xb0
 800a246:	009b      	lsls	r3, r3, #2
 800a248:	4413      	add	r3, r2
 800a24a:	685b      	ldr	r3, [r3, #4]
 800a24c:	685b      	ldr	r3, [r3, #4]
 800a24e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	32b0      	adds	r2, #176	; 0xb0
 800a25a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a25e:	4618      	mov	r0, r3
 800a260:	f005 fd8e 	bl	800fd80 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	32b0      	adds	r2, #176	; 0xb0
 800a26e:	2100      	movs	r1, #0
 800a270:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	2200      	movs	r2, #0
 800a278:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800a27c:	2300      	movs	r3, #0
}
 800a27e:	4618      	mov	r0, r3
 800a280:	3708      	adds	r7, #8
 800a282:	46bd      	mov	sp, r7
 800a284:	bd80      	pop	{r7, pc}
 800a286:	bf00      	nop
 800a288:	2000009f 	.word	0x2000009f
 800a28c:	200000a0 	.word	0x200000a0
 800a290:	200000a1 	.word	0x200000a1

0800a294 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800a294:	b580      	push	{r7, lr}
 800a296:	b086      	sub	sp, #24
 800a298:	af00      	add	r7, sp, #0
 800a29a:	6078      	str	r0, [r7, #4]
 800a29c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	32b0      	adds	r2, #176	; 0xb0
 800a2a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a2ac:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800a2ae:	2300      	movs	r3, #0
 800a2b0:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800a2b2:	2300      	movs	r3, #0
 800a2b4:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800a2b6:	2300      	movs	r3, #0
 800a2b8:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800a2ba:	693b      	ldr	r3, [r7, #16]
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d101      	bne.n	800a2c4 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800a2c0:	2303      	movs	r3, #3
 800a2c2:	e0bf      	b.n	800a444 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a2c4:	683b      	ldr	r3, [r7, #0]
 800a2c6:	781b      	ldrb	r3, [r3, #0]
 800a2c8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d050      	beq.n	800a372 <USBD_CDC_Setup+0xde>
 800a2d0:	2b20      	cmp	r3, #32
 800a2d2:	f040 80af 	bne.w	800a434 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800a2d6:	683b      	ldr	r3, [r7, #0]
 800a2d8:	88db      	ldrh	r3, [r3, #6]
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d03a      	beq.n	800a354 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800a2de:	683b      	ldr	r3, [r7, #0]
 800a2e0:	781b      	ldrb	r3, [r3, #0]
 800a2e2:	b25b      	sxtb	r3, r3
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	da1b      	bge.n	800a320 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a2ee:	687a      	ldr	r2, [r7, #4]
 800a2f0:	33b0      	adds	r3, #176	; 0xb0
 800a2f2:	009b      	lsls	r3, r3, #2
 800a2f4:	4413      	add	r3, r2
 800a2f6:	685b      	ldr	r3, [r3, #4]
 800a2f8:	689b      	ldr	r3, [r3, #8]
 800a2fa:	683a      	ldr	r2, [r7, #0]
 800a2fc:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800a2fe:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a300:	683a      	ldr	r2, [r7, #0]
 800a302:	88d2      	ldrh	r2, [r2, #6]
 800a304:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800a306:	683b      	ldr	r3, [r7, #0]
 800a308:	88db      	ldrh	r3, [r3, #6]
 800a30a:	2b07      	cmp	r3, #7
 800a30c:	bf28      	it	cs
 800a30e:	2307      	movcs	r3, #7
 800a310:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800a312:	693b      	ldr	r3, [r7, #16]
 800a314:	89fa      	ldrh	r2, [r7, #14]
 800a316:	4619      	mov	r1, r3
 800a318:	6878      	ldr	r0, [r7, #4]
 800a31a:	f001 fd89 	bl	800be30 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800a31e:	e090      	b.n	800a442 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800a320:	683b      	ldr	r3, [r7, #0]
 800a322:	785a      	ldrb	r2, [r3, #1]
 800a324:	693b      	ldr	r3, [r7, #16]
 800a326:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800a32a:	683b      	ldr	r3, [r7, #0]
 800a32c:	88db      	ldrh	r3, [r3, #6]
 800a32e:	2b3f      	cmp	r3, #63	; 0x3f
 800a330:	d803      	bhi.n	800a33a <USBD_CDC_Setup+0xa6>
 800a332:	683b      	ldr	r3, [r7, #0]
 800a334:	88db      	ldrh	r3, [r3, #6]
 800a336:	b2da      	uxtb	r2, r3
 800a338:	e000      	b.n	800a33c <USBD_CDC_Setup+0xa8>
 800a33a:	2240      	movs	r2, #64	; 0x40
 800a33c:	693b      	ldr	r3, [r7, #16]
 800a33e:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800a342:	6939      	ldr	r1, [r7, #16]
 800a344:	693b      	ldr	r3, [r7, #16]
 800a346:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800a34a:	461a      	mov	r2, r3
 800a34c:	6878      	ldr	r0, [r7, #4]
 800a34e:	f001 fd9b 	bl	800be88 <USBD_CtlPrepareRx>
      break;
 800a352:	e076      	b.n	800a442 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a35a:	687a      	ldr	r2, [r7, #4]
 800a35c:	33b0      	adds	r3, #176	; 0xb0
 800a35e:	009b      	lsls	r3, r3, #2
 800a360:	4413      	add	r3, r2
 800a362:	685b      	ldr	r3, [r3, #4]
 800a364:	689b      	ldr	r3, [r3, #8]
 800a366:	683a      	ldr	r2, [r7, #0]
 800a368:	7850      	ldrb	r0, [r2, #1]
 800a36a:	2200      	movs	r2, #0
 800a36c:	6839      	ldr	r1, [r7, #0]
 800a36e:	4798      	blx	r3
      break;
 800a370:	e067      	b.n	800a442 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a372:	683b      	ldr	r3, [r7, #0]
 800a374:	785b      	ldrb	r3, [r3, #1]
 800a376:	2b0b      	cmp	r3, #11
 800a378:	d851      	bhi.n	800a41e <USBD_CDC_Setup+0x18a>
 800a37a:	a201      	add	r2, pc, #4	; (adr r2, 800a380 <USBD_CDC_Setup+0xec>)
 800a37c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a380:	0800a3b1 	.word	0x0800a3b1
 800a384:	0800a42d 	.word	0x0800a42d
 800a388:	0800a41f 	.word	0x0800a41f
 800a38c:	0800a41f 	.word	0x0800a41f
 800a390:	0800a41f 	.word	0x0800a41f
 800a394:	0800a41f 	.word	0x0800a41f
 800a398:	0800a41f 	.word	0x0800a41f
 800a39c:	0800a41f 	.word	0x0800a41f
 800a3a0:	0800a41f 	.word	0x0800a41f
 800a3a4:	0800a41f 	.word	0x0800a41f
 800a3a8:	0800a3db 	.word	0x0800a3db
 800a3ac:	0800a405 	.word	0x0800a405
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a3b6:	b2db      	uxtb	r3, r3
 800a3b8:	2b03      	cmp	r3, #3
 800a3ba:	d107      	bne.n	800a3cc <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800a3bc:	f107 030a 	add.w	r3, r7, #10
 800a3c0:	2202      	movs	r2, #2
 800a3c2:	4619      	mov	r1, r3
 800a3c4:	6878      	ldr	r0, [r7, #4]
 800a3c6:	f001 fd33 	bl	800be30 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a3ca:	e032      	b.n	800a432 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800a3cc:	6839      	ldr	r1, [r7, #0]
 800a3ce:	6878      	ldr	r0, [r7, #4]
 800a3d0:	f001 fcbd 	bl	800bd4e <USBD_CtlError>
            ret = USBD_FAIL;
 800a3d4:	2303      	movs	r3, #3
 800a3d6:	75fb      	strb	r3, [r7, #23]
          break;
 800a3d8:	e02b      	b.n	800a432 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a3e0:	b2db      	uxtb	r3, r3
 800a3e2:	2b03      	cmp	r3, #3
 800a3e4:	d107      	bne.n	800a3f6 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800a3e6:	f107 030d 	add.w	r3, r7, #13
 800a3ea:	2201      	movs	r2, #1
 800a3ec:	4619      	mov	r1, r3
 800a3ee:	6878      	ldr	r0, [r7, #4]
 800a3f0:	f001 fd1e 	bl	800be30 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a3f4:	e01d      	b.n	800a432 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800a3f6:	6839      	ldr	r1, [r7, #0]
 800a3f8:	6878      	ldr	r0, [r7, #4]
 800a3fa:	f001 fca8 	bl	800bd4e <USBD_CtlError>
            ret = USBD_FAIL;
 800a3fe:	2303      	movs	r3, #3
 800a400:	75fb      	strb	r3, [r7, #23]
          break;
 800a402:	e016      	b.n	800a432 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a40a:	b2db      	uxtb	r3, r3
 800a40c:	2b03      	cmp	r3, #3
 800a40e:	d00f      	beq.n	800a430 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800a410:	6839      	ldr	r1, [r7, #0]
 800a412:	6878      	ldr	r0, [r7, #4]
 800a414:	f001 fc9b 	bl	800bd4e <USBD_CtlError>
            ret = USBD_FAIL;
 800a418:	2303      	movs	r3, #3
 800a41a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800a41c:	e008      	b.n	800a430 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800a41e:	6839      	ldr	r1, [r7, #0]
 800a420:	6878      	ldr	r0, [r7, #4]
 800a422:	f001 fc94 	bl	800bd4e <USBD_CtlError>
          ret = USBD_FAIL;
 800a426:	2303      	movs	r3, #3
 800a428:	75fb      	strb	r3, [r7, #23]
          break;
 800a42a:	e002      	b.n	800a432 <USBD_CDC_Setup+0x19e>
          break;
 800a42c:	bf00      	nop
 800a42e:	e008      	b.n	800a442 <USBD_CDC_Setup+0x1ae>
          break;
 800a430:	bf00      	nop
      }
      break;
 800a432:	e006      	b.n	800a442 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800a434:	6839      	ldr	r1, [r7, #0]
 800a436:	6878      	ldr	r0, [r7, #4]
 800a438:	f001 fc89 	bl	800bd4e <USBD_CtlError>
      ret = USBD_FAIL;
 800a43c:	2303      	movs	r3, #3
 800a43e:	75fb      	strb	r3, [r7, #23]
      break;
 800a440:	bf00      	nop
  }

  return (uint8_t)ret;
 800a442:	7dfb      	ldrb	r3, [r7, #23]
}
 800a444:	4618      	mov	r0, r3
 800a446:	3718      	adds	r7, #24
 800a448:	46bd      	mov	sp, r7
 800a44a:	bd80      	pop	{r7, pc}

0800a44c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a44c:	b580      	push	{r7, lr}
 800a44e:	b084      	sub	sp, #16
 800a450:	af00      	add	r7, sp, #0
 800a452:	6078      	str	r0, [r7, #4]
 800a454:	460b      	mov	r3, r1
 800a456:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a45e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	32b0      	adds	r2, #176	; 0xb0
 800a46a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d101      	bne.n	800a476 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800a472:	2303      	movs	r3, #3
 800a474:	e065      	b.n	800a542 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	32b0      	adds	r2, #176	; 0xb0
 800a480:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a484:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800a486:	78fb      	ldrb	r3, [r7, #3]
 800a488:	f003 020f 	and.w	r2, r3, #15
 800a48c:	6879      	ldr	r1, [r7, #4]
 800a48e:	4613      	mov	r3, r2
 800a490:	009b      	lsls	r3, r3, #2
 800a492:	4413      	add	r3, r2
 800a494:	009b      	lsls	r3, r3, #2
 800a496:	440b      	add	r3, r1
 800a498:	3318      	adds	r3, #24
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d02f      	beq.n	800a500 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800a4a0:	78fb      	ldrb	r3, [r7, #3]
 800a4a2:	f003 020f 	and.w	r2, r3, #15
 800a4a6:	6879      	ldr	r1, [r7, #4]
 800a4a8:	4613      	mov	r3, r2
 800a4aa:	009b      	lsls	r3, r3, #2
 800a4ac:	4413      	add	r3, r2
 800a4ae:	009b      	lsls	r3, r3, #2
 800a4b0:	440b      	add	r3, r1
 800a4b2:	3318      	adds	r3, #24
 800a4b4:	681a      	ldr	r2, [r3, #0]
 800a4b6:	78fb      	ldrb	r3, [r7, #3]
 800a4b8:	f003 010f 	and.w	r1, r3, #15
 800a4bc:	68f8      	ldr	r0, [r7, #12]
 800a4be:	460b      	mov	r3, r1
 800a4c0:	00db      	lsls	r3, r3, #3
 800a4c2:	440b      	add	r3, r1
 800a4c4:	009b      	lsls	r3, r3, #2
 800a4c6:	4403      	add	r3, r0
 800a4c8:	331c      	adds	r3, #28
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	fbb2 f1f3 	udiv	r1, r2, r3
 800a4d0:	fb01 f303 	mul.w	r3, r1, r3
 800a4d4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d112      	bne.n	800a500 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800a4da:	78fb      	ldrb	r3, [r7, #3]
 800a4dc:	f003 020f 	and.w	r2, r3, #15
 800a4e0:	6879      	ldr	r1, [r7, #4]
 800a4e2:	4613      	mov	r3, r2
 800a4e4:	009b      	lsls	r3, r3, #2
 800a4e6:	4413      	add	r3, r2
 800a4e8:	009b      	lsls	r3, r3, #2
 800a4ea:	440b      	add	r3, r1
 800a4ec:	3318      	adds	r3, #24
 800a4ee:	2200      	movs	r2, #0
 800a4f0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800a4f2:	78f9      	ldrb	r1, [r7, #3]
 800a4f4:	2300      	movs	r3, #0
 800a4f6:	2200      	movs	r2, #0
 800a4f8:	6878      	ldr	r0, [r7, #4]
 800a4fa:	f005 fbde 	bl	800fcba <USBD_LL_Transmit>
 800a4fe:	e01f      	b.n	800a540 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800a500:	68bb      	ldr	r3, [r7, #8]
 800a502:	2200      	movs	r2, #0
 800a504:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a50e:	687a      	ldr	r2, [r7, #4]
 800a510:	33b0      	adds	r3, #176	; 0xb0
 800a512:	009b      	lsls	r3, r3, #2
 800a514:	4413      	add	r3, r2
 800a516:	685b      	ldr	r3, [r3, #4]
 800a518:	691b      	ldr	r3, [r3, #16]
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d010      	beq.n	800a540 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a524:	687a      	ldr	r2, [r7, #4]
 800a526:	33b0      	adds	r3, #176	; 0xb0
 800a528:	009b      	lsls	r3, r3, #2
 800a52a:	4413      	add	r3, r2
 800a52c:	685b      	ldr	r3, [r3, #4]
 800a52e:	691b      	ldr	r3, [r3, #16]
 800a530:	68ba      	ldr	r2, [r7, #8]
 800a532:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800a536:	68ba      	ldr	r2, [r7, #8]
 800a538:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800a53c:	78fa      	ldrb	r2, [r7, #3]
 800a53e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800a540:	2300      	movs	r3, #0
}
 800a542:	4618      	mov	r0, r3
 800a544:	3710      	adds	r7, #16
 800a546:	46bd      	mov	sp, r7
 800a548:	bd80      	pop	{r7, pc}

0800a54a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a54a:	b580      	push	{r7, lr}
 800a54c:	b084      	sub	sp, #16
 800a54e:	af00      	add	r7, sp, #0
 800a550:	6078      	str	r0, [r7, #4]
 800a552:	460b      	mov	r3, r1
 800a554:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	32b0      	adds	r2, #176	; 0xb0
 800a560:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a564:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	32b0      	adds	r2, #176	; 0xb0
 800a570:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a574:	2b00      	cmp	r3, #0
 800a576:	d101      	bne.n	800a57c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800a578:	2303      	movs	r3, #3
 800a57a:	e01a      	b.n	800a5b2 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800a57c:	78fb      	ldrb	r3, [r7, #3]
 800a57e:	4619      	mov	r1, r3
 800a580:	6878      	ldr	r0, [r7, #4]
 800a582:	f005 fbdc 	bl	800fd3e <USBD_LL_GetRxDataSize>
 800a586:	4602      	mov	r2, r0
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a594:	687a      	ldr	r2, [r7, #4]
 800a596:	33b0      	adds	r3, #176	; 0xb0
 800a598:	009b      	lsls	r3, r3, #2
 800a59a:	4413      	add	r3, r2
 800a59c:	685b      	ldr	r3, [r3, #4]
 800a59e:	68db      	ldr	r3, [r3, #12]
 800a5a0:	68fa      	ldr	r2, [r7, #12]
 800a5a2:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800a5a6:	68fa      	ldr	r2, [r7, #12]
 800a5a8:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800a5ac:	4611      	mov	r1, r2
 800a5ae:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800a5b0:	2300      	movs	r3, #0
}
 800a5b2:	4618      	mov	r0, r3
 800a5b4:	3710      	adds	r7, #16
 800a5b6:	46bd      	mov	sp, r7
 800a5b8:	bd80      	pop	{r7, pc}

0800a5ba <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800a5ba:	b580      	push	{r7, lr}
 800a5bc:	b084      	sub	sp, #16
 800a5be:	af00      	add	r7, sp, #0
 800a5c0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	32b0      	adds	r2, #176	; 0xb0
 800a5cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a5d0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d101      	bne.n	800a5dc <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800a5d8:	2303      	movs	r3, #3
 800a5da:	e025      	b.n	800a628 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a5e2:	687a      	ldr	r2, [r7, #4]
 800a5e4:	33b0      	adds	r3, #176	; 0xb0
 800a5e6:	009b      	lsls	r3, r3, #2
 800a5e8:	4413      	add	r3, r2
 800a5ea:	685b      	ldr	r3, [r3, #4]
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d01a      	beq.n	800a626 <USBD_CDC_EP0_RxReady+0x6c>
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800a5f6:	2bff      	cmp	r3, #255	; 0xff
 800a5f8:	d015      	beq.n	800a626 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a600:	687a      	ldr	r2, [r7, #4]
 800a602:	33b0      	adds	r3, #176	; 0xb0
 800a604:	009b      	lsls	r3, r3, #2
 800a606:	4413      	add	r3, r2
 800a608:	685b      	ldr	r3, [r3, #4]
 800a60a:	689b      	ldr	r3, [r3, #8]
 800a60c:	68fa      	ldr	r2, [r7, #12]
 800a60e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800a612:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800a614:	68fa      	ldr	r2, [r7, #12]
 800a616:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800a61a:	b292      	uxth	r2, r2
 800a61c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	22ff      	movs	r2, #255	; 0xff
 800a622:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800a626:	2300      	movs	r3, #0
}
 800a628:	4618      	mov	r0, r3
 800a62a:	3710      	adds	r7, #16
 800a62c:	46bd      	mov	sp, r7
 800a62e:	bd80      	pop	{r7, pc}

0800a630 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800a630:	b580      	push	{r7, lr}
 800a632:	b086      	sub	sp, #24
 800a634:	af00      	add	r7, sp, #0
 800a636:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a638:	2182      	movs	r1, #130	; 0x82
 800a63a:	4818      	ldr	r0, [pc, #96]	; (800a69c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a63c:	f000 fd4f 	bl	800b0de <USBD_GetEpDesc>
 800a640:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a642:	2101      	movs	r1, #1
 800a644:	4815      	ldr	r0, [pc, #84]	; (800a69c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a646:	f000 fd4a 	bl	800b0de <USBD_GetEpDesc>
 800a64a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a64c:	2181      	movs	r1, #129	; 0x81
 800a64e:	4813      	ldr	r0, [pc, #76]	; (800a69c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a650:	f000 fd45 	bl	800b0de <USBD_GetEpDesc>
 800a654:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a656:	697b      	ldr	r3, [r7, #20]
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d002      	beq.n	800a662 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800a65c:	697b      	ldr	r3, [r7, #20]
 800a65e:	2210      	movs	r2, #16
 800a660:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a662:	693b      	ldr	r3, [r7, #16]
 800a664:	2b00      	cmp	r3, #0
 800a666:	d006      	beq.n	800a676 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a668:	693b      	ldr	r3, [r7, #16]
 800a66a:	2200      	movs	r2, #0
 800a66c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a670:	711a      	strb	r2, [r3, #4]
 800a672:	2200      	movs	r2, #0
 800a674:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d006      	beq.n	800a68a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a67c:	68fb      	ldr	r3, [r7, #12]
 800a67e:	2200      	movs	r2, #0
 800a680:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a684:	711a      	strb	r2, [r3, #4]
 800a686:	2200      	movs	r2, #0
 800a688:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	2243      	movs	r2, #67	; 0x43
 800a68e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a690:	4b02      	ldr	r3, [pc, #8]	; (800a69c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800a692:	4618      	mov	r0, r3
 800a694:	3718      	adds	r7, #24
 800a696:	46bd      	mov	sp, r7
 800a698:	bd80      	pop	{r7, pc}
 800a69a:	bf00      	nop
 800a69c:	2000005c 	.word	0x2000005c

0800a6a0 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800a6a0:	b580      	push	{r7, lr}
 800a6a2:	b086      	sub	sp, #24
 800a6a4:	af00      	add	r7, sp, #0
 800a6a6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a6a8:	2182      	movs	r1, #130	; 0x82
 800a6aa:	4818      	ldr	r0, [pc, #96]	; (800a70c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a6ac:	f000 fd17 	bl	800b0de <USBD_GetEpDesc>
 800a6b0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a6b2:	2101      	movs	r1, #1
 800a6b4:	4815      	ldr	r0, [pc, #84]	; (800a70c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a6b6:	f000 fd12 	bl	800b0de <USBD_GetEpDesc>
 800a6ba:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a6bc:	2181      	movs	r1, #129	; 0x81
 800a6be:	4813      	ldr	r0, [pc, #76]	; (800a70c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a6c0:	f000 fd0d 	bl	800b0de <USBD_GetEpDesc>
 800a6c4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a6c6:	697b      	ldr	r3, [r7, #20]
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	d002      	beq.n	800a6d2 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800a6cc:	697b      	ldr	r3, [r7, #20]
 800a6ce:	2210      	movs	r2, #16
 800a6d0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a6d2:	693b      	ldr	r3, [r7, #16]
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d006      	beq.n	800a6e6 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800a6d8:	693b      	ldr	r3, [r7, #16]
 800a6da:	2200      	movs	r2, #0
 800a6dc:	711a      	strb	r2, [r3, #4]
 800a6de:	2200      	movs	r2, #0
 800a6e0:	f042 0202 	orr.w	r2, r2, #2
 800a6e4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d006      	beq.n	800a6fa <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	2200      	movs	r2, #0
 800a6f0:	711a      	strb	r2, [r3, #4]
 800a6f2:	2200      	movs	r2, #0
 800a6f4:	f042 0202 	orr.w	r2, r2, #2
 800a6f8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	2243      	movs	r2, #67	; 0x43
 800a6fe:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a700:	4b02      	ldr	r3, [pc, #8]	; (800a70c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800a702:	4618      	mov	r0, r3
 800a704:	3718      	adds	r7, #24
 800a706:	46bd      	mov	sp, r7
 800a708:	bd80      	pop	{r7, pc}
 800a70a:	bf00      	nop
 800a70c:	2000005c 	.word	0x2000005c

0800a710 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800a710:	b580      	push	{r7, lr}
 800a712:	b086      	sub	sp, #24
 800a714:	af00      	add	r7, sp, #0
 800a716:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a718:	2182      	movs	r1, #130	; 0x82
 800a71a:	4818      	ldr	r0, [pc, #96]	; (800a77c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a71c:	f000 fcdf 	bl	800b0de <USBD_GetEpDesc>
 800a720:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a722:	2101      	movs	r1, #1
 800a724:	4815      	ldr	r0, [pc, #84]	; (800a77c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a726:	f000 fcda 	bl	800b0de <USBD_GetEpDesc>
 800a72a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a72c:	2181      	movs	r1, #129	; 0x81
 800a72e:	4813      	ldr	r0, [pc, #76]	; (800a77c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a730:	f000 fcd5 	bl	800b0de <USBD_GetEpDesc>
 800a734:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a736:	697b      	ldr	r3, [r7, #20]
 800a738:	2b00      	cmp	r3, #0
 800a73a:	d002      	beq.n	800a742 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800a73c:	697b      	ldr	r3, [r7, #20]
 800a73e:	2210      	movs	r2, #16
 800a740:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a742:	693b      	ldr	r3, [r7, #16]
 800a744:	2b00      	cmp	r3, #0
 800a746:	d006      	beq.n	800a756 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a748:	693b      	ldr	r3, [r7, #16]
 800a74a:	2200      	movs	r2, #0
 800a74c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a750:	711a      	strb	r2, [r3, #4]
 800a752:	2200      	movs	r2, #0
 800a754:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d006      	beq.n	800a76a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	2200      	movs	r2, #0
 800a760:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a764:	711a      	strb	r2, [r3, #4]
 800a766:	2200      	movs	r2, #0
 800a768:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	2243      	movs	r2, #67	; 0x43
 800a76e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a770:	4b02      	ldr	r3, [pc, #8]	; (800a77c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800a772:	4618      	mov	r0, r3
 800a774:	3718      	adds	r7, #24
 800a776:	46bd      	mov	sp, r7
 800a778:	bd80      	pop	{r7, pc}
 800a77a:	bf00      	nop
 800a77c:	2000005c 	.word	0x2000005c

0800a780 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800a780:	b480      	push	{r7}
 800a782:	b083      	sub	sp, #12
 800a784:	af00      	add	r7, sp, #0
 800a786:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	220a      	movs	r2, #10
 800a78c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800a78e:	4b03      	ldr	r3, [pc, #12]	; (800a79c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800a790:	4618      	mov	r0, r3
 800a792:	370c      	adds	r7, #12
 800a794:	46bd      	mov	sp, r7
 800a796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a79a:	4770      	bx	lr
 800a79c:	20000018 	.word	0x20000018

0800a7a0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800a7a0:	b480      	push	{r7}
 800a7a2:	b083      	sub	sp, #12
 800a7a4:	af00      	add	r7, sp, #0
 800a7a6:	6078      	str	r0, [r7, #4]
 800a7a8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800a7aa:	683b      	ldr	r3, [r7, #0]
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d101      	bne.n	800a7b4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800a7b0:	2303      	movs	r3, #3
 800a7b2:	e009      	b.n	800a7c8 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a7ba:	687a      	ldr	r2, [r7, #4]
 800a7bc:	33b0      	adds	r3, #176	; 0xb0
 800a7be:	009b      	lsls	r3, r3, #2
 800a7c0:	4413      	add	r3, r2
 800a7c2:	683a      	ldr	r2, [r7, #0]
 800a7c4:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800a7c6:	2300      	movs	r3, #0
}
 800a7c8:	4618      	mov	r0, r3
 800a7ca:	370c      	adds	r7, #12
 800a7cc:	46bd      	mov	sp, r7
 800a7ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7d2:	4770      	bx	lr

0800a7d4 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800a7d4:	b480      	push	{r7}
 800a7d6:	b087      	sub	sp, #28
 800a7d8:	af00      	add	r7, sp, #0
 800a7da:	60f8      	str	r0, [r7, #12]
 800a7dc:	60b9      	str	r1, [r7, #8]
 800a7de:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	32b0      	adds	r2, #176	; 0xb0
 800a7ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a7ee:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800a7f0:	697b      	ldr	r3, [r7, #20]
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	d101      	bne.n	800a7fa <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800a7f6:	2303      	movs	r3, #3
 800a7f8:	e008      	b.n	800a80c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800a7fa:	697b      	ldr	r3, [r7, #20]
 800a7fc:	68ba      	ldr	r2, [r7, #8]
 800a7fe:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800a802:	697b      	ldr	r3, [r7, #20]
 800a804:	687a      	ldr	r2, [r7, #4]
 800a806:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800a80a:	2300      	movs	r3, #0
}
 800a80c:	4618      	mov	r0, r3
 800a80e:	371c      	adds	r7, #28
 800a810:	46bd      	mov	sp, r7
 800a812:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a816:	4770      	bx	lr

0800a818 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800a818:	b480      	push	{r7}
 800a81a:	b085      	sub	sp, #20
 800a81c:	af00      	add	r7, sp, #0
 800a81e:	6078      	str	r0, [r7, #4]
 800a820:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	32b0      	adds	r2, #176	; 0xb0
 800a82c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a830:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	2b00      	cmp	r3, #0
 800a836:	d101      	bne.n	800a83c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800a838:	2303      	movs	r3, #3
 800a83a:	e004      	b.n	800a846 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	683a      	ldr	r2, [r7, #0]
 800a840:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800a844:	2300      	movs	r3, #0
}
 800a846:	4618      	mov	r0, r3
 800a848:	3714      	adds	r7, #20
 800a84a:	46bd      	mov	sp, r7
 800a84c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a850:	4770      	bx	lr
	...

0800a854 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800a854:	b580      	push	{r7, lr}
 800a856:	b084      	sub	sp, #16
 800a858:	af00      	add	r7, sp, #0
 800a85a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	32b0      	adds	r2, #176	; 0xb0
 800a866:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a86a:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800a86c:	2301      	movs	r3, #1
 800a86e:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800a870:	68bb      	ldr	r3, [r7, #8]
 800a872:	2b00      	cmp	r3, #0
 800a874:	d101      	bne.n	800a87a <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800a876:	2303      	movs	r3, #3
 800a878:	e025      	b.n	800a8c6 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800a87a:	68bb      	ldr	r3, [r7, #8]
 800a87c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a880:	2b00      	cmp	r3, #0
 800a882:	d11f      	bne.n	800a8c4 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800a884:	68bb      	ldr	r3, [r7, #8]
 800a886:	2201      	movs	r2, #1
 800a888:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800a88c:	4b10      	ldr	r3, [pc, #64]	; (800a8d0 <USBD_CDC_TransmitPacket+0x7c>)
 800a88e:	781b      	ldrb	r3, [r3, #0]
 800a890:	f003 020f 	and.w	r2, r3, #15
 800a894:	68bb      	ldr	r3, [r7, #8]
 800a896:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800a89a:	6878      	ldr	r0, [r7, #4]
 800a89c:	4613      	mov	r3, r2
 800a89e:	009b      	lsls	r3, r3, #2
 800a8a0:	4413      	add	r3, r2
 800a8a2:	009b      	lsls	r3, r3, #2
 800a8a4:	4403      	add	r3, r0
 800a8a6:	3318      	adds	r3, #24
 800a8a8:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800a8aa:	4b09      	ldr	r3, [pc, #36]	; (800a8d0 <USBD_CDC_TransmitPacket+0x7c>)
 800a8ac:	7819      	ldrb	r1, [r3, #0]
 800a8ae:	68bb      	ldr	r3, [r7, #8]
 800a8b0:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800a8b4:	68bb      	ldr	r3, [r7, #8]
 800a8b6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800a8ba:	6878      	ldr	r0, [r7, #4]
 800a8bc:	f005 f9fd 	bl	800fcba <USBD_LL_Transmit>

    ret = USBD_OK;
 800a8c0:	2300      	movs	r3, #0
 800a8c2:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800a8c4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8c6:	4618      	mov	r0, r3
 800a8c8:	3710      	adds	r7, #16
 800a8ca:	46bd      	mov	sp, r7
 800a8cc:	bd80      	pop	{r7, pc}
 800a8ce:	bf00      	nop
 800a8d0:	2000009f 	.word	0x2000009f

0800a8d4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800a8d4:	b580      	push	{r7, lr}
 800a8d6:	b084      	sub	sp, #16
 800a8d8:	af00      	add	r7, sp, #0
 800a8da:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	32b0      	adds	r2, #176	; 0xb0
 800a8e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a8ea:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	32b0      	adds	r2, #176	; 0xb0
 800a8f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d101      	bne.n	800a902 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800a8fe:	2303      	movs	r3, #3
 800a900:	e018      	b.n	800a934 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	7c1b      	ldrb	r3, [r3, #16]
 800a906:	2b00      	cmp	r3, #0
 800a908:	d10a      	bne.n	800a920 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a90a:	4b0c      	ldr	r3, [pc, #48]	; (800a93c <USBD_CDC_ReceivePacket+0x68>)
 800a90c:	7819      	ldrb	r1, [r3, #0]
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a914:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a918:	6878      	ldr	r0, [r7, #4]
 800a91a:	f005 f9ef 	bl	800fcfc <USBD_LL_PrepareReceive>
 800a91e:	e008      	b.n	800a932 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a920:	4b06      	ldr	r3, [pc, #24]	; (800a93c <USBD_CDC_ReceivePacket+0x68>)
 800a922:	7819      	ldrb	r1, [r3, #0]
 800a924:	68fb      	ldr	r3, [r7, #12]
 800a926:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a92a:	2340      	movs	r3, #64	; 0x40
 800a92c:	6878      	ldr	r0, [r7, #4]
 800a92e:	f005 f9e5 	bl	800fcfc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a932:	2300      	movs	r3, #0
}
 800a934:	4618      	mov	r0, r3
 800a936:	3710      	adds	r7, #16
 800a938:	46bd      	mov	sp, r7
 800a93a:	bd80      	pop	{r7, pc}
 800a93c:	200000a0 	.word	0x200000a0

0800a940 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a940:	b580      	push	{r7, lr}
 800a942:	b086      	sub	sp, #24
 800a944:	af00      	add	r7, sp, #0
 800a946:	60f8      	str	r0, [r7, #12]
 800a948:	60b9      	str	r1, [r7, #8]
 800a94a:	4613      	mov	r3, r2
 800a94c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	2b00      	cmp	r3, #0
 800a952:	d101      	bne.n	800a958 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800a954:	2303      	movs	r3, #3
 800a956:	e01f      	b.n	800a998 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	2200      	movs	r2, #0
 800a95c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	2200      	movs	r2, #0
 800a964:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	2200      	movs	r2, #0
 800a96c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a970:	68bb      	ldr	r3, [r7, #8]
 800a972:	2b00      	cmp	r3, #0
 800a974:	d003      	beq.n	800a97e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	68ba      	ldr	r2, [r7, #8]
 800a97a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a97e:	68fb      	ldr	r3, [r7, #12]
 800a980:	2201      	movs	r2, #1
 800a982:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	79fa      	ldrb	r2, [r7, #7]
 800a98a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800a98c:	68f8      	ldr	r0, [r7, #12]
 800a98e:	f005 f85f 	bl	800fa50 <USBD_LL_Init>
 800a992:	4603      	mov	r3, r0
 800a994:	75fb      	strb	r3, [r7, #23]

  return ret;
 800a996:	7dfb      	ldrb	r3, [r7, #23]
}
 800a998:	4618      	mov	r0, r3
 800a99a:	3718      	adds	r7, #24
 800a99c:	46bd      	mov	sp, r7
 800a99e:	bd80      	pop	{r7, pc}

0800a9a0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a9a0:	b580      	push	{r7, lr}
 800a9a2:	b084      	sub	sp, #16
 800a9a4:	af00      	add	r7, sp, #0
 800a9a6:	6078      	str	r0, [r7, #4]
 800a9a8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a9aa:	2300      	movs	r3, #0
 800a9ac:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800a9ae:	683b      	ldr	r3, [r7, #0]
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d101      	bne.n	800a9b8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800a9b4:	2303      	movs	r3, #3
 800a9b6:	e025      	b.n	800aa04 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	683a      	ldr	r2, [r7, #0]
 800a9bc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	32ae      	adds	r2, #174	; 0xae
 800a9ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a9ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d00f      	beq.n	800a9f4 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	32ae      	adds	r2, #174	; 0xae
 800a9de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a9e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9e4:	f107 020e 	add.w	r2, r7, #14
 800a9e8:	4610      	mov	r0, r2
 800a9ea:	4798      	blx	r3
 800a9ec:	4602      	mov	r2, r0
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800a9fa:	1c5a      	adds	r2, r3, #1
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800aa02:	2300      	movs	r3, #0
}
 800aa04:	4618      	mov	r0, r3
 800aa06:	3710      	adds	r7, #16
 800aa08:	46bd      	mov	sp, r7
 800aa0a:	bd80      	pop	{r7, pc}

0800aa0c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800aa0c:	b580      	push	{r7, lr}
 800aa0e:	b082      	sub	sp, #8
 800aa10:	af00      	add	r7, sp, #0
 800aa12:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800aa14:	6878      	ldr	r0, [r7, #4]
 800aa16:	f005 f867 	bl	800fae8 <USBD_LL_Start>
 800aa1a:	4603      	mov	r3, r0
}
 800aa1c:	4618      	mov	r0, r3
 800aa1e:	3708      	adds	r7, #8
 800aa20:	46bd      	mov	sp, r7
 800aa22:	bd80      	pop	{r7, pc}

0800aa24 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800aa24:	b480      	push	{r7}
 800aa26:	b083      	sub	sp, #12
 800aa28:	af00      	add	r7, sp, #0
 800aa2a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800aa2c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800aa2e:	4618      	mov	r0, r3
 800aa30:	370c      	adds	r7, #12
 800aa32:	46bd      	mov	sp, r7
 800aa34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa38:	4770      	bx	lr

0800aa3a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800aa3a:	b580      	push	{r7, lr}
 800aa3c:	b084      	sub	sp, #16
 800aa3e:	af00      	add	r7, sp, #0
 800aa40:	6078      	str	r0, [r7, #4]
 800aa42:	460b      	mov	r3, r1
 800aa44:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800aa46:	2300      	movs	r3, #0
 800aa48:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d009      	beq.n	800aa68 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	78fa      	ldrb	r2, [r7, #3]
 800aa5e:	4611      	mov	r1, r2
 800aa60:	6878      	ldr	r0, [r7, #4]
 800aa62:	4798      	blx	r3
 800aa64:	4603      	mov	r3, r0
 800aa66:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800aa68:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa6a:	4618      	mov	r0, r3
 800aa6c:	3710      	adds	r7, #16
 800aa6e:	46bd      	mov	sp, r7
 800aa70:	bd80      	pop	{r7, pc}

0800aa72 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800aa72:	b580      	push	{r7, lr}
 800aa74:	b084      	sub	sp, #16
 800aa76:	af00      	add	r7, sp, #0
 800aa78:	6078      	str	r0, [r7, #4]
 800aa7a:	460b      	mov	r3, r1
 800aa7c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800aa7e:	2300      	movs	r3, #0
 800aa80:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa88:	685b      	ldr	r3, [r3, #4]
 800aa8a:	78fa      	ldrb	r2, [r7, #3]
 800aa8c:	4611      	mov	r1, r2
 800aa8e:	6878      	ldr	r0, [r7, #4]
 800aa90:	4798      	blx	r3
 800aa92:	4603      	mov	r3, r0
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	d001      	beq.n	800aa9c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800aa98:	2303      	movs	r3, #3
 800aa9a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800aa9c:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa9e:	4618      	mov	r0, r3
 800aaa0:	3710      	adds	r7, #16
 800aaa2:	46bd      	mov	sp, r7
 800aaa4:	bd80      	pop	{r7, pc}

0800aaa6 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800aaa6:	b580      	push	{r7, lr}
 800aaa8:	b084      	sub	sp, #16
 800aaaa:	af00      	add	r7, sp, #0
 800aaac:	6078      	str	r0, [r7, #4]
 800aaae:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800aab6:	6839      	ldr	r1, [r7, #0]
 800aab8:	4618      	mov	r0, r3
 800aaba:	f001 f90e 	bl	800bcda <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	2201      	movs	r2, #1
 800aac2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800aacc:	461a      	mov	r2, r3
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800aada:	f003 031f 	and.w	r3, r3, #31
 800aade:	2b02      	cmp	r3, #2
 800aae0:	d01a      	beq.n	800ab18 <USBD_LL_SetupStage+0x72>
 800aae2:	2b02      	cmp	r3, #2
 800aae4:	d822      	bhi.n	800ab2c <USBD_LL_SetupStage+0x86>
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d002      	beq.n	800aaf0 <USBD_LL_SetupStage+0x4a>
 800aaea:	2b01      	cmp	r3, #1
 800aaec:	d00a      	beq.n	800ab04 <USBD_LL_SetupStage+0x5e>
 800aaee:	e01d      	b.n	800ab2c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800aaf6:	4619      	mov	r1, r3
 800aaf8:	6878      	ldr	r0, [r7, #4]
 800aafa:	f000 fb65 	bl	800b1c8 <USBD_StdDevReq>
 800aafe:	4603      	mov	r3, r0
 800ab00:	73fb      	strb	r3, [r7, #15]
      break;
 800ab02:	e020      	b.n	800ab46 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ab0a:	4619      	mov	r1, r3
 800ab0c:	6878      	ldr	r0, [r7, #4]
 800ab0e:	f000 fbcd 	bl	800b2ac <USBD_StdItfReq>
 800ab12:	4603      	mov	r3, r0
 800ab14:	73fb      	strb	r3, [r7, #15]
      break;
 800ab16:	e016      	b.n	800ab46 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ab1e:	4619      	mov	r1, r3
 800ab20:	6878      	ldr	r0, [r7, #4]
 800ab22:	f000 fc2f 	bl	800b384 <USBD_StdEPReq>
 800ab26:	4603      	mov	r3, r0
 800ab28:	73fb      	strb	r3, [r7, #15]
      break;
 800ab2a:	e00c      	b.n	800ab46 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800ab32:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800ab36:	b2db      	uxtb	r3, r3
 800ab38:	4619      	mov	r1, r3
 800ab3a:	6878      	ldr	r0, [r7, #4]
 800ab3c:	f005 f834 	bl	800fba8 <USBD_LL_StallEP>
 800ab40:	4603      	mov	r3, r0
 800ab42:	73fb      	strb	r3, [r7, #15]
      break;
 800ab44:	bf00      	nop
  }

  return ret;
 800ab46:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab48:	4618      	mov	r0, r3
 800ab4a:	3710      	adds	r7, #16
 800ab4c:	46bd      	mov	sp, r7
 800ab4e:	bd80      	pop	{r7, pc}

0800ab50 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800ab50:	b580      	push	{r7, lr}
 800ab52:	b086      	sub	sp, #24
 800ab54:	af00      	add	r7, sp, #0
 800ab56:	60f8      	str	r0, [r7, #12]
 800ab58:	460b      	mov	r3, r1
 800ab5a:	607a      	str	r2, [r7, #4]
 800ab5c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800ab5e:	2300      	movs	r3, #0
 800ab60:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800ab62:	7afb      	ldrb	r3, [r7, #11]
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d16e      	bne.n	800ac46 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800ab68:	68fb      	ldr	r3, [r7, #12]
 800ab6a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800ab6e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800ab76:	2b03      	cmp	r3, #3
 800ab78:	f040 8098 	bne.w	800acac <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800ab7c:	693b      	ldr	r3, [r7, #16]
 800ab7e:	689a      	ldr	r2, [r3, #8]
 800ab80:	693b      	ldr	r3, [r7, #16]
 800ab82:	68db      	ldr	r3, [r3, #12]
 800ab84:	429a      	cmp	r2, r3
 800ab86:	d913      	bls.n	800abb0 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800ab88:	693b      	ldr	r3, [r7, #16]
 800ab8a:	689a      	ldr	r2, [r3, #8]
 800ab8c:	693b      	ldr	r3, [r7, #16]
 800ab8e:	68db      	ldr	r3, [r3, #12]
 800ab90:	1ad2      	subs	r2, r2, r3
 800ab92:	693b      	ldr	r3, [r7, #16]
 800ab94:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800ab96:	693b      	ldr	r3, [r7, #16]
 800ab98:	68da      	ldr	r2, [r3, #12]
 800ab9a:	693b      	ldr	r3, [r7, #16]
 800ab9c:	689b      	ldr	r3, [r3, #8]
 800ab9e:	4293      	cmp	r3, r2
 800aba0:	bf28      	it	cs
 800aba2:	4613      	movcs	r3, r2
 800aba4:	461a      	mov	r2, r3
 800aba6:	6879      	ldr	r1, [r7, #4]
 800aba8:	68f8      	ldr	r0, [r7, #12]
 800abaa:	f001 f98a 	bl	800bec2 <USBD_CtlContinueRx>
 800abae:	e07d      	b.n	800acac <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800abb6:	f003 031f 	and.w	r3, r3, #31
 800abba:	2b02      	cmp	r3, #2
 800abbc:	d014      	beq.n	800abe8 <USBD_LL_DataOutStage+0x98>
 800abbe:	2b02      	cmp	r3, #2
 800abc0:	d81d      	bhi.n	800abfe <USBD_LL_DataOutStage+0xae>
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	d002      	beq.n	800abcc <USBD_LL_DataOutStage+0x7c>
 800abc6:	2b01      	cmp	r3, #1
 800abc8:	d003      	beq.n	800abd2 <USBD_LL_DataOutStage+0x82>
 800abca:	e018      	b.n	800abfe <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800abcc:	2300      	movs	r3, #0
 800abce:	75bb      	strb	r3, [r7, #22]
            break;
 800abd0:	e018      	b.n	800ac04 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800abd8:	b2db      	uxtb	r3, r3
 800abda:	4619      	mov	r1, r3
 800abdc:	68f8      	ldr	r0, [r7, #12]
 800abde:	f000 fa64 	bl	800b0aa <USBD_CoreFindIF>
 800abe2:	4603      	mov	r3, r0
 800abe4:	75bb      	strb	r3, [r7, #22]
            break;
 800abe6:	e00d      	b.n	800ac04 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800abee:	b2db      	uxtb	r3, r3
 800abf0:	4619      	mov	r1, r3
 800abf2:	68f8      	ldr	r0, [r7, #12]
 800abf4:	f000 fa66 	bl	800b0c4 <USBD_CoreFindEP>
 800abf8:	4603      	mov	r3, r0
 800abfa:	75bb      	strb	r3, [r7, #22]
            break;
 800abfc:	e002      	b.n	800ac04 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800abfe:	2300      	movs	r3, #0
 800ac00:	75bb      	strb	r3, [r7, #22]
            break;
 800ac02:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800ac04:	7dbb      	ldrb	r3, [r7, #22]
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	d119      	bne.n	800ac3e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ac0a:	68fb      	ldr	r3, [r7, #12]
 800ac0c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ac10:	b2db      	uxtb	r3, r3
 800ac12:	2b03      	cmp	r3, #3
 800ac14:	d113      	bne.n	800ac3e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800ac16:	7dba      	ldrb	r2, [r7, #22]
 800ac18:	68fb      	ldr	r3, [r7, #12]
 800ac1a:	32ae      	adds	r2, #174	; 0xae
 800ac1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac20:	691b      	ldr	r3, [r3, #16]
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	d00b      	beq.n	800ac3e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800ac26:	7dba      	ldrb	r2, [r7, #22]
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800ac2e:	7dba      	ldrb	r2, [r7, #22]
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	32ae      	adds	r2, #174	; 0xae
 800ac34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac38:	691b      	ldr	r3, [r3, #16]
 800ac3a:	68f8      	ldr	r0, [r7, #12]
 800ac3c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800ac3e:	68f8      	ldr	r0, [r7, #12]
 800ac40:	f001 f950 	bl	800bee4 <USBD_CtlSendStatus>
 800ac44:	e032      	b.n	800acac <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800ac46:	7afb      	ldrb	r3, [r7, #11]
 800ac48:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ac4c:	b2db      	uxtb	r3, r3
 800ac4e:	4619      	mov	r1, r3
 800ac50:	68f8      	ldr	r0, [r7, #12]
 800ac52:	f000 fa37 	bl	800b0c4 <USBD_CoreFindEP>
 800ac56:	4603      	mov	r3, r0
 800ac58:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ac5a:	7dbb      	ldrb	r3, [r7, #22]
 800ac5c:	2bff      	cmp	r3, #255	; 0xff
 800ac5e:	d025      	beq.n	800acac <USBD_LL_DataOutStage+0x15c>
 800ac60:	7dbb      	ldrb	r3, [r7, #22]
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d122      	bne.n	800acac <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ac6c:	b2db      	uxtb	r3, r3
 800ac6e:	2b03      	cmp	r3, #3
 800ac70:	d117      	bne.n	800aca2 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800ac72:	7dba      	ldrb	r2, [r7, #22]
 800ac74:	68fb      	ldr	r3, [r7, #12]
 800ac76:	32ae      	adds	r2, #174	; 0xae
 800ac78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac7c:	699b      	ldr	r3, [r3, #24]
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d00f      	beq.n	800aca2 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800ac82:	7dba      	ldrb	r2, [r7, #22]
 800ac84:	68fb      	ldr	r3, [r7, #12]
 800ac86:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800ac8a:	7dba      	ldrb	r2, [r7, #22]
 800ac8c:	68fb      	ldr	r3, [r7, #12]
 800ac8e:	32ae      	adds	r2, #174	; 0xae
 800ac90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac94:	699b      	ldr	r3, [r3, #24]
 800ac96:	7afa      	ldrb	r2, [r7, #11]
 800ac98:	4611      	mov	r1, r2
 800ac9a:	68f8      	ldr	r0, [r7, #12]
 800ac9c:	4798      	blx	r3
 800ac9e:	4603      	mov	r3, r0
 800aca0:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800aca2:	7dfb      	ldrb	r3, [r7, #23]
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d001      	beq.n	800acac <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800aca8:	7dfb      	ldrb	r3, [r7, #23]
 800acaa:	e000      	b.n	800acae <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800acac:	2300      	movs	r3, #0
}
 800acae:	4618      	mov	r0, r3
 800acb0:	3718      	adds	r7, #24
 800acb2:	46bd      	mov	sp, r7
 800acb4:	bd80      	pop	{r7, pc}

0800acb6 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800acb6:	b580      	push	{r7, lr}
 800acb8:	b086      	sub	sp, #24
 800acba:	af00      	add	r7, sp, #0
 800acbc:	60f8      	str	r0, [r7, #12]
 800acbe:	460b      	mov	r3, r1
 800acc0:	607a      	str	r2, [r7, #4]
 800acc2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800acc4:	7afb      	ldrb	r3, [r7, #11]
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d16f      	bne.n	800adaa <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	3314      	adds	r3, #20
 800acce:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800acd6:	2b02      	cmp	r3, #2
 800acd8:	d15a      	bne.n	800ad90 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800acda:	693b      	ldr	r3, [r7, #16]
 800acdc:	689a      	ldr	r2, [r3, #8]
 800acde:	693b      	ldr	r3, [r7, #16]
 800ace0:	68db      	ldr	r3, [r3, #12]
 800ace2:	429a      	cmp	r2, r3
 800ace4:	d914      	bls.n	800ad10 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800ace6:	693b      	ldr	r3, [r7, #16]
 800ace8:	689a      	ldr	r2, [r3, #8]
 800acea:	693b      	ldr	r3, [r7, #16]
 800acec:	68db      	ldr	r3, [r3, #12]
 800acee:	1ad2      	subs	r2, r2, r3
 800acf0:	693b      	ldr	r3, [r7, #16]
 800acf2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800acf4:	693b      	ldr	r3, [r7, #16]
 800acf6:	689b      	ldr	r3, [r3, #8]
 800acf8:	461a      	mov	r2, r3
 800acfa:	6879      	ldr	r1, [r7, #4]
 800acfc:	68f8      	ldr	r0, [r7, #12]
 800acfe:	f001 f8b2 	bl	800be66 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ad02:	2300      	movs	r3, #0
 800ad04:	2200      	movs	r2, #0
 800ad06:	2100      	movs	r1, #0
 800ad08:	68f8      	ldr	r0, [r7, #12]
 800ad0a:	f004 fff7 	bl	800fcfc <USBD_LL_PrepareReceive>
 800ad0e:	e03f      	b.n	800ad90 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800ad10:	693b      	ldr	r3, [r7, #16]
 800ad12:	68da      	ldr	r2, [r3, #12]
 800ad14:	693b      	ldr	r3, [r7, #16]
 800ad16:	689b      	ldr	r3, [r3, #8]
 800ad18:	429a      	cmp	r2, r3
 800ad1a:	d11c      	bne.n	800ad56 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800ad1c:	693b      	ldr	r3, [r7, #16]
 800ad1e:	685a      	ldr	r2, [r3, #4]
 800ad20:	693b      	ldr	r3, [r7, #16]
 800ad22:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800ad24:	429a      	cmp	r2, r3
 800ad26:	d316      	bcc.n	800ad56 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800ad28:	693b      	ldr	r3, [r7, #16]
 800ad2a:	685a      	ldr	r2, [r3, #4]
 800ad2c:	68fb      	ldr	r3, [r7, #12]
 800ad2e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800ad32:	429a      	cmp	r2, r3
 800ad34:	d20f      	bcs.n	800ad56 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800ad36:	2200      	movs	r2, #0
 800ad38:	2100      	movs	r1, #0
 800ad3a:	68f8      	ldr	r0, [r7, #12]
 800ad3c:	f001 f893 	bl	800be66 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	2200      	movs	r2, #0
 800ad44:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ad48:	2300      	movs	r3, #0
 800ad4a:	2200      	movs	r2, #0
 800ad4c:	2100      	movs	r1, #0
 800ad4e:	68f8      	ldr	r0, [r7, #12]
 800ad50:	f004 ffd4 	bl	800fcfc <USBD_LL_PrepareReceive>
 800ad54:	e01c      	b.n	800ad90 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ad56:	68fb      	ldr	r3, [r7, #12]
 800ad58:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ad5c:	b2db      	uxtb	r3, r3
 800ad5e:	2b03      	cmp	r3, #3
 800ad60:	d10f      	bne.n	800ad82 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800ad62:	68fb      	ldr	r3, [r7, #12]
 800ad64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ad68:	68db      	ldr	r3, [r3, #12]
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	d009      	beq.n	800ad82 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800ad6e:	68fb      	ldr	r3, [r7, #12]
 800ad70:	2200      	movs	r2, #0
 800ad72:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ad7c:	68db      	ldr	r3, [r3, #12]
 800ad7e:	68f8      	ldr	r0, [r7, #12]
 800ad80:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800ad82:	2180      	movs	r1, #128	; 0x80
 800ad84:	68f8      	ldr	r0, [r7, #12]
 800ad86:	f004 ff0f 	bl	800fba8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800ad8a:	68f8      	ldr	r0, [r7, #12]
 800ad8c:	f001 f8bd 	bl	800bf0a <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800ad90:	68fb      	ldr	r3, [r7, #12]
 800ad92:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d03a      	beq.n	800ae10 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800ad9a:	68f8      	ldr	r0, [r7, #12]
 800ad9c:	f7ff fe42 	bl	800aa24 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	2200      	movs	r2, #0
 800ada4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800ada8:	e032      	b.n	800ae10 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800adaa:	7afb      	ldrb	r3, [r7, #11]
 800adac:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800adb0:	b2db      	uxtb	r3, r3
 800adb2:	4619      	mov	r1, r3
 800adb4:	68f8      	ldr	r0, [r7, #12]
 800adb6:	f000 f985 	bl	800b0c4 <USBD_CoreFindEP>
 800adba:	4603      	mov	r3, r0
 800adbc:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800adbe:	7dfb      	ldrb	r3, [r7, #23]
 800adc0:	2bff      	cmp	r3, #255	; 0xff
 800adc2:	d025      	beq.n	800ae10 <USBD_LL_DataInStage+0x15a>
 800adc4:	7dfb      	ldrb	r3, [r7, #23]
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	d122      	bne.n	800ae10 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800adca:	68fb      	ldr	r3, [r7, #12]
 800adcc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800add0:	b2db      	uxtb	r3, r3
 800add2:	2b03      	cmp	r3, #3
 800add4:	d11c      	bne.n	800ae10 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800add6:	7dfa      	ldrb	r2, [r7, #23]
 800add8:	68fb      	ldr	r3, [r7, #12]
 800adda:	32ae      	adds	r2, #174	; 0xae
 800addc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ade0:	695b      	ldr	r3, [r3, #20]
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d014      	beq.n	800ae10 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800ade6:	7dfa      	ldrb	r2, [r7, #23]
 800ade8:	68fb      	ldr	r3, [r7, #12]
 800adea:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800adee:	7dfa      	ldrb	r2, [r7, #23]
 800adf0:	68fb      	ldr	r3, [r7, #12]
 800adf2:	32ae      	adds	r2, #174	; 0xae
 800adf4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800adf8:	695b      	ldr	r3, [r3, #20]
 800adfa:	7afa      	ldrb	r2, [r7, #11]
 800adfc:	4611      	mov	r1, r2
 800adfe:	68f8      	ldr	r0, [r7, #12]
 800ae00:	4798      	blx	r3
 800ae02:	4603      	mov	r3, r0
 800ae04:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800ae06:	7dbb      	ldrb	r3, [r7, #22]
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d001      	beq.n	800ae10 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800ae0c:	7dbb      	ldrb	r3, [r7, #22]
 800ae0e:	e000      	b.n	800ae12 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800ae10:	2300      	movs	r3, #0
}
 800ae12:	4618      	mov	r0, r3
 800ae14:	3718      	adds	r7, #24
 800ae16:	46bd      	mov	sp, r7
 800ae18:	bd80      	pop	{r7, pc}

0800ae1a <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800ae1a:	b580      	push	{r7, lr}
 800ae1c:	b084      	sub	sp, #16
 800ae1e:	af00      	add	r7, sp, #0
 800ae20:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800ae22:	2300      	movs	r3, #0
 800ae24:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	2201      	movs	r2, #1
 800ae2a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	2200      	movs	r2, #0
 800ae32:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	2200      	movs	r2, #0
 800ae3a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	2200      	movs	r2, #0
 800ae40:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	2200      	movs	r2, #0
 800ae48:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d014      	beq.n	800ae80 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ae5c:	685b      	ldr	r3, [r3, #4]
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	d00e      	beq.n	800ae80 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ae68:	685b      	ldr	r3, [r3, #4]
 800ae6a:	687a      	ldr	r2, [r7, #4]
 800ae6c:	6852      	ldr	r2, [r2, #4]
 800ae6e:	b2d2      	uxtb	r2, r2
 800ae70:	4611      	mov	r1, r2
 800ae72:	6878      	ldr	r0, [r7, #4]
 800ae74:	4798      	blx	r3
 800ae76:	4603      	mov	r3, r0
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	d001      	beq.n	800ae80 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800ae7c:	2303      	movs	r3, #3
 800ae7e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ae80:	2340      	movs	r3, #64	; 0x40
 800ae82:	2200      	movs	r2, #0
 800ae84:	2100      	movs	r1, #0
 800ae86:	6878      	ldr	r0, [r7, #4]
 800ae88:	f004 fe49 	bl	800fb1e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	2201      	movs	r2, #1
 800ae90:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	2240      	movs	r2, #64	; 0x40
 800ae98:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ae9c:	2340      	movs	r3, #64	; 0x40
 800ae9e:	2200      	movs	r2, #0
 800aea0:	2180      	movs	r1, #128	; 0x80
 800aea2:	6878      	ldr	r0, [r7, #4]
 800aea4:	f004 fe3b 	bl	800fb1e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	2201      	movs	r2, #1
 800aeac:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	2240      	movs	r2, #64	; 0x40
 800aeb2:	621a      	str	r2, [r3, #32]

  return ret;
 800aeb4:	7bfb      	ldrb	r3, [r7, #15]
}
 800aeb6:	4618      	mov	r0, r3
 800aeb8:	3710      	adds	r7, #16
 800aeba:	46bd      	mov	sp, r7
 800aebc:	bd80      	pop	{r7, pc}

0800aebe <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800aebe:	b480      	push	{r7}
 800aec0:	b083      	sub	sp, #12
 800aec2:	af00      	add	r7, sp, #0
 800aec4:	6078      	str	r0, [r7, #4]
 800aec6:	460b      	mov	r3, r1
 800aec8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	78fa      	ldrb	r2, [r7, #3]
 800aece:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800aed0:	2300      	movs	r3, #0
}
 800aed2:	4618      	mov	r0, r3
 800aed4:	370c      	adds	r7, #12
 800aed6:	46bd      	mov	sp, r7
 800aed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aedc:	4770      	bx	lr

0800aede <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800aede:	b480      	push	{r7}
 800aee0:	b083      	sub	sp, #12
 800aee2:	af00      	add	r7, sp, #0
 800aee4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aeec:	b2db      	uxtb	r3, r3
 800aeee:	2b04      	cmp	r3, #4
 800aef0:	d006      	beq.n	800af00 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aef8:	b2da      	uxtb	r2, r3
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	2204      	movs	r2, #4
 800af04:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800af08:	2300      	movs	r3, #0
}
 800af0a:	4618      	mov	r0, r3
 800af0c:	370c      	adds	r7, #12
 800af0e:	46bd      	mov	sp, r7
 800af10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af14:	4770      	bx	lr

0800af16 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800af16:	b480      	push	{r7}
 800af18:	b083      	sub	sp, #12
 800af1a:	af00      	add	r7, sp, #0
 800af1c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800af24:	b2db      	uxtb	r3, r3
 800af26:	2b04      	cmp	r3, #4
 800af28:	d106      	bne.n	800af38 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800af30:	b2da      	uxtb	r2, r3
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800af38:	2300      	movs	r3, #0
}
 800af3a:	4618      	mov	r0, r3
 800af3c:	370c      	adds	r7, #12
 800af3e:	46bd      	mov	sp, r7
 800af40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af44:	4770      	bx	lr

0800af46 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800af46:	b580      	push	{r7, lr}
 800af48:	b082      	sub	sp, #8
 800af4a:	af00      	add	r7, sp, #0
 800af4c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800af54:	b2db      	uxtb	r3, r3
 800af56:	2b03      	cmp	r3, #3
 800af58:	d110      	bne.n	800af7c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800af60:	2b00      	cmp	r3, #0
 800af62:	d00b      	beq.n	800af7c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800af6a:	69db      	ldr	r3, [r3, #28]
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d005      	beq.n	800af7c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800af76:	69db      	ldr	r3, [r3, #28]
 800af78:	6878      	ldr	r0, [r7, #4]
 800af7a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800af7c:	2300      	movs	r3, #0
}
 800af7e:	4618      	mov	r0, r3
 800af80:	3708      	adds	r7, #8
 800af82:	46bd      	mov	sp, r7
 800af84:	bd80      	pop	{r7, pc}

0800af86 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800af86:	b580      	push	{r7, lr}
 800af88:	b082      	sub	sp, #8
 800af8a:	af00      	add	r7, sp, #0
 800af8c:	6078      	str	r0, [r7, #4]
 800af8e:	460b      	mov	r3, r1
 800af90:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	32ae      	adds	r2, #174	; 0xae
 800af9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d101      	bne.n	800afa8 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800afa4:	2303      	movs	r3, #3
 800afa6:	e01c      	b.n	800afe2 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800afae:	b2db      	uxtb	r3, r3
 800afb0:	2b03      	cmp	r3, #3
 800afb2:	d115      	bne.n	800afe0 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	32ae      	adds	r2, #174	; 0xae
 800afbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800afc2:	6a1b      	ldr	r3, [r3, #32]
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d00b      	beq.n	800afe0 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	32ae      	adds	r2, #174	; 0xae
 800afd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800afd6:	6a1b      	ldr	r3, [r3, #32]
 800afd8:	78fa      	ldrb	r2, [r7, #3]
 800afda:	4611      	mov	r1, r2
 800afdc:	6878      	ldr	r0, [r7, #4]
 800afde:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800afe0:	2300      	movs	r3, #0
}
 800afe2:	4618      	mov	r0, r3
 800afe4:	3708      	adds	r7, #8
 800afe6:	46bd      	mov	sp, r7
 800afe8:	bd80      	pop	{r7, pc}

0800afea <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800afea:	b580      	push	{r7, lr}
 800afec:	b082      	sub	sp, #8
 800afee:	af00      	add	r7, sp, #0
 800aff0:	6078      	str	r0, [r7, #4]
 800aff2:	460b      	mov	r3, r1
 800aff4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	32ae      	adds	r2, #174	; 0xae
 800b000:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b004:	2b00      	cmp	r3, #0
 800b006:	d101      	bne.n	800b00c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800b008:	2303      	movs	r3, #3
 800b00a:	e01c      	b.n	800b046 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b012:	b2db      	uxtb	r3, r3
 800b014:	2b03      	cmp	r3, #3
 800b016:	d115      	bne.n	800b044 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	32ae      	adds	r2, #174	; 0xae
 800b022:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b028:	2b00      	cmp	r3, #0
 800b02a:	d00b      	beq.n	800b044 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	32ae      	adds	r2, #174	; 0xae
 800b036:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b03a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b03c:	78fa      	ldrb	r2, [r7, #3]
 800b03e:	4611      	mov	r1, r2
 800b040:	6878      	ldr	r0, [r7, #4]
 800b042:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b044:	2300      	movs	r3, #0
}
 800b046:	4618      	mov	r0, r3
 800b048:	3708      	adds	r7, #8
 800b04a:	46bd      	mov	sp, r7
 800b04c:	bd80      	pop	{r7, pc}

0800b04e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800b04e:	b480      	push	{r7}
 800b050:	b083      	sub	sp, #12
 800b052:	af00      	add	r7, sp, #0
 800b054:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b056:	2300      	movs	r3, #0
}
 800b058:	4618      	mov	r0, r3
 800b05a:	370c      	adds	r7, #12
 800b05c:	46bd      	mov	sp, r7
 800b05e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b062:	4770      	bx	lr

0800b064 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800b064:	b580      	push	{r7, lr}
 800b066:	b084      	sub	sp, #16
 800b068:	af00      	add	r7, sp, #0
 800b06a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800b06c:	2300      	movs	r3, #0
 800b06e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	2201      	movs	r2, #1
 800b074:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b07e:	2b00      	cmp	r3, #0
 800b080:	d00e      	beq.n	800b0a0 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b088:	685b      	ldr	r3, [r3, #4]
 800b08a:	687a      	ldr	r2, [r7, #4]
 800b08c:	6852      	ldr	r2, [r2, #4]
 800b08e:	b2d2      	uxtb	r2, r2
 800b090:	4611      	mov	r1, r2
 800b092:	6878      	ldr	r0, [r7, #4]
 800b094:	4798      	blx	r3
 800b096:	4603      	mov	r3, r0
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d001      	beq.n	800b0a0 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800b09c:	2303      	movs	r3, #3
 800b09e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b0a0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b0a2:	4618      	mov	r0, r3
 800b0a4:	3710      	adds	r7, #16
 800b0a6:	46bd      	mov	sp, r7
 800b0a8:	bd80      	pop	{r7, pc}

0800b0aa <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800b0aa:	b480      	push	{r7}
 800b0ac:	b083      	sub	sp, #12
 800b0ae:	af00      	add	r7, sp, #0
 800b0b0:	6078      	str	r0, [r7, #4]
 800b0b2:	460b      	mov	r3, r1
 800b0b4:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800b0b6:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800b0b8:	4618      	mov	r0, r3
 800b0ba:	370c      	adds	r7, #12
 800b0bc:	46bd      	mov	sp, r7
 800b0be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0c2:	4770      	bx	lr

0800b0c4 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800b0c4:	b480      	push	{r7}
 800b0c6:	b083      	sub	sp, #12
 800b0c8:	af00      	add	r7, sp, #0
 800b0ca:	6078      	str	r0, [r7, #4]
 800b0cc:	460b      	mov	r3, r1
 800b0ce:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800b0d0:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800b0d2:	4618      	mov	r0, r3
 800b0d4:	370c      	adds	r7, #12
 800b0d6:	46bd      	mov	sp, r7
 800b0d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0dc:	4770      	bx	lr

0800b0de <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800b0de:	b580      	push	{r7, lr}
 800b0e0:	b086      	sub	sp, #24
 800b0e2:	af00      	add	r7, sp, #0
 800b0e4:	6078      	str	r0, [r7, #4]
 800b0e6:	460b      	mov	r3, r1
 800b0e8:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800b0f2:	2300      	movs	r3, #0
 800b0f4:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800b0f6:	68fb      	ldr	r3, [r7, #12]
 800b0f8:	885b      	ldrh	r3, [r3, #2]
 800b0fa:	b29a      	uxth	r2, r3
 800b0fc:	68fb      	ldr	r3, [r7, #12]
 800b0fe:	781b      	ldrb	r3, [r3, #0]
 800b100:	b29b      	uxth	r3, r3
 800b102:	429a      	cmp	r2, r3
 800b104:	d920      	bls.n	800b148 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800b106:	68fb      	ldr	r3, [r7, #12]
 800b108:	781b      	ldrb	r3, [r3, #0]
 800b10a:	b29b      	uxth	r3, r3
 800b10c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800b10e:	e013      	b.n	800b138 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800b110:	f107 030a 	add.w	r3, r7, #10
 800b114:	4619      	mov	r1, r3
 800b116:	6978      	ldr	r0, [r7, #20]
 800b118:	f000 f81b 	bl	800b152 <USBD_GetNextDesc>
 800b11c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800b11e:	697b      	ldr	r3, [r7, #20]
 800b120:	785b      	ldrb	r3, [r3, #1]
 800b122:	2b05      	cmp	r3, #5
 800b124:	d108      	bne.n	800b138 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800b126:	697b      	ldr	r3, [r7, #20]
 800b128:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800b12a:	693b      	ldr	r3, [r7, #16]
 800b12c:	789b      	ldrb	r3, [r3, #2]
 800b12e:	78fa      	ldrb	r2, [r7, #3]
 800b130:	429a      	cmp	r2, r3
 800b132:	d008      	beq.n	800b146 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800b134:	2300      	movs	r3, #0
 800b136:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800b138:	68fb      	ldr	r3, [r7, #12]
 800b13a:	885b      	ldrh	r3, [r3, #2]
 800b13c:	b29a      	uxth	r2, r3
 800b13e:	897b      	ldrh	r3, [r7, #10]
 800b140:	429a      	cmp	r2, r3
 800b142:	d8e5      	bhi.n	800b110 <USBD_GetEpDesc+0x32>
 800b144:	e000      	b.n	800b148 <USBD_GetEpDesc+0x6a>
          break;
 800b146:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800b148:	693b      	ldr	r3, [r7, #16]
}
 800b14a:	4618      	mov	r0, r3
 800b14c:	3718      	adds	r7, #24
 800b14e:	46bd      	mov	sp, r7
 800b150:	bd80      	pop	{r7, pc}

0800b152 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800b152:	b480      	push	{r7}
 800b154:	b085      	sub	sp, #20
 800b156:	af00      	add	r7, sp, #0
 800b158:	6078      	str	r0, [r7, #4]
 800b15a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800b160:	683b      	ldr	r3, [r7, #0]
 800b162:	881a      	ldrh	r2, [r3, #0]
 800b164:	68fb      	ldr	r3, [r7, #12]
 800b166:	781b      	ldrb	r3, [r3, #0]
 800b168:	b29b      	uxth	r3, r3
 800b16a:	4413      	add	r3, r2
 800b16c:	b29a      	uxth	r2, r3
 800b16e:	683b      	ldr	r3, [r7, #0]
 800b170:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800b172:	68fb      	ldr	r3, [r7, #12]
 800b174:	781b      	ldrb	r3, [r3, #0]
 800b176:	461a      	mov	r2, r3
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	4413      	add	r3, r2
 800b17c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800b17e:	68fb      	ldr	r3, [r7, #12]
}
 800b180:	4618      	mov	r0, r3
 800b182:	3714      	adds	r7, #20
 800b184:	46bd      	mov	sp, r7
 800b186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b18a:	4770      	bx	lr

0800b18c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800b18c:	b480      	push	{r7}
 800b18e:	b087      	sub	sp, #28
 800b190:	af00      	add	r7, sp, #0
 800b192:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800b198:	697b      	ldr	r3, [r7, #20]
 800b19a:	781b      	ldrb	r3, [r3, #0]
 800b19c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800b19e:	697b      	ldr	r3, [r7, #20]
 800b1a0:	3301      	adds	r3, #1
 800b1a2:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800b1a4:	697b      	ldr	r3, [r7, #20]
 800b1a6:	781b      	ldrb	r3, [r3, #0]
 800b1a8:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800b1aa:	8a3b      	ldrh	r3, [r7, #16]
 800b1ac:	021b      	lsls	r3, r3, #8
 800b1ae:	b21a      	sxth	r2, r3
 800b1b0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b1b4:	4313      	orrs	r3, r2
 800b1b6:	b21b      	sxth	r3, r3
 800b1b8:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800b1ba:	89fb      	ldrh	r3, [r7, #14]
}
 800b1bc:	4618      	mov	r0, r3
 800b1be:	371c      	adds	r7, #28
 800b1c0:	46bd      	mov	sp, r7
 800b1c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1c6:	4770      	bx	lr

0800b1c8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b1c8:	b580      	push	{r7, lr}
 800b1ca:	b084      	sub	sp, #16
 800b1cc:	af00      	add	r7, sp, #0
 800b1ce:	6078      	str	r0, [r7, #4]
 800b1d0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b1d2:	2300      	movs	r3, #0
 800b1d4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b1d6:	683b      	ldr	r3, [r7, #0]
 800b1d8:	781b      	ldrb	r3, [r3, #0]
 800b1da:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b1de:	2b40      	cmp	r3, #64	; 0x40
 800b1e0:	d005      	beq.n	800b1ee <USBD_StdDevReq+0x26>
 800b1e2:	2b40      	cmp	r3, #64	; 0x40
 800b1e4:	d857      	bhi.n	800b296 <USBD_StdDevReq+0xce>
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	d00f      	beq.n	800b20a <USBD_StdDevReq+0x42>
 800b1ea:	2b20      	cmp	r3, #32
 800b1ec:	d153      	bne.n	800b296 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	32ae      	adds	r2, #174	; 0xae
 800b1f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b1fc:	689b      	ldr	r3, [r3, #8]
 800b1fe:	6839      	ldr	r1, [r7, #0]
 800b200:	6878      	ldr	r0, [r7, #4]
 800b202:	4798      	blx	r3
 800b204:	4603      	mov	r3, r0
 800b206:	73fb      	strb	r3, [r7, #15]
      break;
 800b208:	e04a      	b.n	800b2a0 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b20a:	683b      	ldr	r3, [r7, #0]
 800b20c:	785b      	ldrb	r3, [r3, #1]
 800b20e:	2b09      	cmp	r3, #9
 800b210:	d83b      	bhi.n	800b28a <USBD_StdDevReq+0xc2>
 800b212:	a201      	add	r2, pc, #4	; (adr r2, 800b218 <USBD_StdDevReq+0x50>)
 800b214:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b218:	0800b26d 	.word	0x0800b26d
 800b21c:	0800b281 	.word	0x0800b281
 800b220:	0800b28b 	.word	0x0800b28b
 800b224:	0800b277 	.word	0x0800b277
 800b228:	0800b28b 	.word	0x0800b28b
 800b22c:	0800b24b 	.word	0x0800b24b
 800b230:	0800b241 	.word	0x0800b241
 800b234:	0800b28b 	.word	0x0800b28b
 800b238:	0800b263 	.word	0x0800b263
 800b23c:	0800b255 	.word	0x0800b255
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800b240:	6839      	ldr	r1, [r7, #0]
 800b242:	6878      	ldr	r0, [r7, #4]
 800b244:	f000 fa3c 	bl	800b6c0 <USBD_GetDescriptor>
          break;
 800b248:	e024      	b.n	800b294 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800b24a:	6839      	ldr	r1, [r7, #0]
 800b24c:	6878      	ldr	r0, [r7, #4]
 800b24e:	f000 fba1 	bl	800b994 <USBD_SetAddress>
          break;
 800b252:	e01f      	b.n	800b294 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800b254:	6839      	ldr	r1, [r7, #0]
 800b256:	6878      	ldr	r0, [r7, #4]
 800b258:	f000 fbe0 	bl	800ba1c <USBD_SetConfig>
 800b25c:	4603      	mov	r3, r0
 800b25e:	73fb      	strb	r3, [r7, #15]
          break;
 800b260:	e018      	b.n	800b294 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800b262:	6839      	ldr	r1, [r7, #0]
 800b264:	6878      	ldr	r0, [r7, #4]
 800b266:	f000 fc83 	bl	800bb70 <USBD_GetConfig>
          break;
 800b26a:	e013      	b.n	800b294 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800b26c:	6839      	ldr	r1, [r7, #0]
 800b26e:	6878      	ldr	r0, [r7, #4]
 800b270:	f000 fcb4 	bl	800bbdc <USBD_GetStatus>
          break;
 800b274:	e00e      	b.n	800b294 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800b276:	6839      	ldr	r1, [r7, #0]
 800b278:	6878      	ldr	r0, [r7, #4]
 800b27a:	f000 fce3 	bl	800bc44 <USBD_SetFeature>
          break;
 800b27e:	e009      	b.n	800b294 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800b280:	6839      	ldr	r1, [r7, #0]
 800b282:	6878      	ldr	r0, [r7, #4]
 800b284:	f000 fd07 	bl	800bc96 <USBD_ClrFeature>
          break;
 800b288:	e004      	b.n	800b294 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800b28a:	6839      	ldr	r1, [r7, #0]
 800b28c:	6878      	ldr	r0, [r7, #4]
 800b28e:	f000 fd5e 	bl	800bd4e <USBD_CtlError>
          break;
 800b292:	bf00      	nop
      }
      break;
 800b294:	e004      	b.n	800b2a0 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800b296:	6839      	ldr	r1, [r7, #0]
 800b298:	6878      	ldr	r0, [r7, #4]
 800b29a:	f000 fd58 	bl	800bd4e <USBD_CtlError>
      break;
 800b29e:	bf00      	nop
  }

  return ret;
 800b2a0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b2a2:	4618      	mov	r0, r3
 800b2a4:	3710      	adds	r7, #16
 800b2a6:	46bd      	mov	sp, r7
 800b2a8:	bd80      	pop	{r7, pc}
 800b2aa:	bf00      	nop

0800b2ac <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b2ac:	b580      	push	{r7, lr}
 800b2ae:	b084      	sub	sp, #16
 800b2b0:	af00      	add	r7, sp, #0
 800b2b2:	6078      	str	r0, [r7, #4]
 800b2b4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b2b6:	2300      	movs	r3, #0
 800b2b8:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b2ba:	683b      	ldr	r3, [r7, #0]
 800b2bc:	781b      	ldrb	r3, [r3, #0]
 800b2be:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b2c2:	2b40      	cmp	r3, #64	; 0x40
 800b2c4:	d005      	beq.n	800b2d2 <USBD_StdItfReq+0x26>
 800b2c6:	2b40      	cmp	r3, #64	; 0x40
 800b2c8:	d852      	bhi.n	800b370 <USBD_StdItfReq+0xc4>
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	d001      	beq.n	800b2d2 <USBD_StdItfReq+0x26>
 800b2ce:	2b20      	cmp	r3, #32
 800b2d0:	d14e      	bne.n	800b370 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b2d8:	b2db      	uxtb	r3, r3
 800b2da:	3b01      	subs	r3, #1
 800b2dc:	2b02      	cmp	r3, #2
 800b2de:	d840      	bhi.n	800b362 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800b2e0:	683b      	ldr	r3, [r7, #0]
 800b2e2:	889b      	ldrh	r3, [r3, #4]
 800b2e4:	b2db      	uxtb	r3, r3
 800b2e6:	2b01      	cmp	r3, #1
 800b2e8:	d836      	bhi.n	800b358 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800b2ea:	683b      	ldr	r3, [r7, #0]
 800b2ec:	889b      	ldrh	r3, [r3, #4]
 800b2ee:	b2db      	uxtb	r3, r3
 800b2f0:	4619      	mov	r1, r3
 800b2f2:	6878      	ldr	r0, [r7, #4]
 800b2f4:	f7ff fed9 	bl	800b0aa <USBD_CoreFindIF>
 800b2f8:	4603      	mov	r3, r0
 800b2fa:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b2fc:	7bbb      	ldrb	r3, [r7, #14]
 800b2fe:	2bff      	cmp	r3, #255	; 0xff
 800b300:	d01d      	beq.n	800b33e <USBD_StdItfReq+0x92>
 800b302:	7bbb      	ldrb	r3, [r7, #14]
 800b304:	2b00      	cmp	r3, #0
 800b306:	d11a      	bne.n	800b33e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800b308:	7bba      	ldrb	r2, [r7, #14]
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	32ae      	adds	r2, #174	; 0xae
 800b30e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b312:	689b      	ldr	r3, [r3, #8]
 800b314:	2b00      	cmp	r3, #0
 800b316:	d00f      	beq.n	800b338 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800b318:	7bba      	ldrb	r2, [r7, #14]
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800b320:	7bba      	ldrb	r2, [r7, #14]
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	32ae      	adds	r2, #174	; 0xae
 800b326:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b32a:	689b      	ldr	r3, [r3, #8]
 800b32c:	6839      	ldr	r1, [r7, #0]
 800b32e:	6878      	ldr	r0, [r7, #4]
 800b330:	4798      	blx	r3
 800b332:	4603      	mov	r3, r0
 800b334:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800b336:	e004      	b.n	800b342 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800b338:	2303      	movs	r3, #3
 800b33a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800b33c:	e001      	b.n	800b342 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800b33e:	2303      	movs	r3, #3
 800b340:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800b342:	683b      	ldr	r3, [r7, #0]
 800b344:	88db      	ldrh	r3, [r3, #6]
 800b346:	2b00      	cmp	r3, #0
 800b348:	d110      	bne.n	800b36c <USBD_StdItfReq+0xc0>
 800b34a:	7bfb      	ldrb	r3, [r7, #15]
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	d10d      	bne.n	800b36c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800b350:	6878      	ldr	r0, [r7, #4]
 800b352:	f000 fdc7 	bl	800bee4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800b356:	e009      	b.n	800b36c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800b358:	6839      	ldr	r1, [r7, #0]
 800b35a:	6878      	ldr	r0, [r7, #4]
 800b35c:	f000 fcf7 	bl	800bd4e <USBD_CtlError>
          break;
 800b360:	e004      	b.n	800b36c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800b362:	6839      	ldr	r1, [r7, #0]
 800b364:	6878      	ldr	r0, [r7, #4]
 800b366:	f000 fcf2 	bl	800bd4e <USBD_CtlError>
          break;
 800b36a:	e000      	b.n	800b36e <USBD_StdItfReq+0xc2>
          break;
 800b36c:	bf00      	nop
      }
      break;
 800b36e:	e004      	b.n	800b37a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800b370:	6839      	ldr	r1, [r7, #0]
 800b372:	6878      	ldr	r0, [r7, #4]
 800b374:	f000 fceb 	bl	800bd4e <USBD_CtlError>
      break;
 800b378:	bf00      	nop
  }

  return ret;
 800b37a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b37c:	4618      	mov	r0, r3
 800b37e:	3710      	adds	r7, #16
 800b380:	46bd      	mov	sp, r7
 800b382:	bd80      	pop	{r7, pc}

0800b384 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b384:	b580      	push	{r7, lr}
 800b386:	b084      	sub	sp, #16
 800b388:	af00      	add	r7, sp, #0
 800b38a:	6078      	str	r0, [r7, #4]
 800b38c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800b38e:	2300      	movs	r3, #0
 800b390:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800b392:	683b      	ldr	r3, [r7, #0]
 800b394:	889b      	ldrh	r3, [r3, #4]
 800b396:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b398:	683b      	ldr	r3, [r7, #0]
 800b39a:	781b      	ldrb	r3, [r3, #0]
 800b39c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b3a0:	2b40      	cmp	r3, #64	; 0x40
 800b3a2:	d007      	beq.n	800b3b4 <USBD_StdEPReq+0x30>
 800b3a4:	2b40      	cmp	r3, #64	; 0x40
 800b3a6:	f200 817f 	bhi.w	800b6a8 <USBD_StdEPReq+0x324>
 800b3aa:	2b00      	cmp	r3, #0
 800b3ac:	d02a      	beq.n	800b404 <USBD_StdEPReq+0x80>
 800b3ae:	2b20      	cmp	r3, #32
 800b3b0:	f040 817a 	bne.w	800b6a8 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800b3b4:	7bbb      	ldrb	r3, [r7, #14]
 800b3b6:	4619      	mov	r1, r3
 800b3b8:	6878      	ldr	r0, [r7, #4]
 800b3ba:	f7ff fe83 	bl	800b0c4 <USBD_CoreFindEP>
 800b3be:	4603      	mov	r3, r0
 800b3c0:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b3c2:	7b7b      	ldrb	r3, [r7, #13]
 800b3c4:	2bff      	cmp	r3, #255	; 0xff
 800b3c6:	f000 8174 	beq.w	800b6b2 <USBD_StdEPReq+0x32e>
 800b3ca:	7b7b      	ldrb	r3, [r7, #13]
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	f040 8170 	bne.w	800b6b2 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800b3d2:	7b7a      	ldrb	r2, [r7, #13]
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800b3da:	7b7a      	ldrb	r2, [r7, #13]
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	32ae      	adds	r2, #174	; 0xae
 800b3e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b3e4:	689b      	ldr	r3, [r3, #8]
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	f000 8163 	beq.w	800b6b2 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800b3ec:	7b7a      	ldrb	r2, [r7, #13]
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	32ae      	adds	r2, #174	; 0xae
 800b3f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b3f6:	689b      	ldr	r3, [r3, #8]
 800b3f8:	6839      	ldr	r1, [r7, #0]
 800b3fa:	6878      	ldr	r0, [r7, #4]
 800b3fc:	4798      	blx	r3
 800b3fe:	4603      	mov	r3, r0
 800b400:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800b402:	e156      	b.n	800b6b2 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b404:	683b      	ldr	r3, [r7, #0]
 800b406:	785b      	ldrb	r3, [r3, #1]
 800b408:	2b03      	cmp	r3, #3
 800b40a:	d008      	beq.n	800b41e <USBD_StdEPReq+0x9a>
 800b40c:	2b03      	cmp	r3, #3
 800b40e:	f300 8145 	bgt.w	800b69c <USBD_StdEPReq+0x318>
 800b412:	2b00      	cmp	r3, #0
 800b414:	f000 809b 	beq.w	800b54e <USBD_StdEPReq+0x1ca>
 800b418:	2b01      	cmp	r3, #1
 800b41a:	d03c      	beq.n	800b496 <USBD_StdEPReq+0x112>
 800b41c:	e13e      	b.n	800b69c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b424:	b2db      	uxtb	r3, r3
 800b426:	2b02      	cmp	r3, #2
 800b428:	d002      	beq.n	800b430 <USBD_StdEPReq+0xac>
 800b42a:	2b03      	cmp	r3, #3
 800b42c:	d016      	beq.n	800b45c <USBD_StdEPReq+0xd8>
 800b42e:	e02c      	b.n	800b48a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b430:	7bbb      	ldrb	r3, [r7, #14]
 800b432:	2b00      	cmp	r3, #0
 800b434:	d00d      	beq.n	800b452 <USBD_StdEPReq+0xce>
 800b436:	7bbb      	ldrb	r3, [r7, #14]
 800b438:	2b80      	cmp	r3, #128	; 0x80
 800b43a:	d00a      	beq.n	800b452 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b43c:	7bbb      	ldrb	r3, [r7, #14]
 800b43e:	4619      	mov	r1, r3
 800b440:	6878      	ldr	r0, [r7, #4]
 800b442:	f004 fbb1 	bl	800fba8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b446:	2180      	movs	r1, #128	; 0x80
 800b448:	6878      	ldr	r0, [r7, #4]
 800b44a:	f004 fbad 	bl	800fba8 <USBD_LL_StallEP>
 800b44e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b450:	e020      	b.n	800b494 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800b452:	6839      	ldr	r1, [r7, #0]
 800b454:	6878      	ldr	r0, [r7, #4]
 800b456:	f000 fc7a 	bl	800bd4e <USBD_CtlError>
              break;
 800b45a:	e01b      	b.n	800b494 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b45c:	683b      	ldr	r3, [r7, #0]
 800b45e:	885b      	ldrh	r3, [r3, #2]
 800b460:	2b00      	cmp	r3, #0
 800b462:	d10e      	bne.n	800b482 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800b464:	7bbb      	ldrb	r3, [r7, #14]
 800b466:	2b00      	cmp	r3, #0
 800b468:	d00b      	beq.n	800b482 <USBD_StdEPReq+0xfe>
 800b46a:	7bbb      	ldrb	r3, [r7, #14]
 800b46c:	2b80      	cmp	r3, #128	; 0x80
 800b46e:	d008      	beq.n	800b482 <USBD_StdEPReq+0xfe>
 800b470:	683b      	ldr	r3, [r7, #0]
 800b472:	88db      	ldrh	r3, [r3, #6]
 800b474:	2b00      	cmp	r3, #0
 800b476:	d104      	bne.n	800b482 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800b478:	7bbb      	ldrb	r3, [r7, #14]
 800b47a:	4619      	mov	r1, r3
 800b47c:	6878      	ldr	r0, [r7, #4]
 800b47e:	f004 fb93 	bl	800fba8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800b482:	6878      	ldr	r0, [r7, #4]
 800b484:	f000 fd2e 	bl	800bee4 <USBD_CtlSendStatus>

              break;
 800b488:	e004      	b.n	800b494 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800b48a:	6839      	ldr	r1, [r7, #0]
 800b48c:	6878      	ldr	r0, [r7, #4]
 800b48e:	f000 fc5e 	bl	800bd4e <USBD_CtlError>
              break;
 800b492:	bf00      	nop
          }
          break;
 800b494:	e107      	b.n	800b6a6 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b49c:	b2db      	uxtb	r3, r3
 800b49e:	2b02      	cmp	r3, #2
 800b4a0:	d002      	beq.n	800b4a8 <USBD_StdEPReq+0x124>
 800b4a2:	2b03      	cmp	r3, #3
 800b4a4:	d016      	beq.n	800b4d4 <USBD_StdEPReq+0x150>
 800b4a6:	e04b      	b.n	800b540 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b4a8:	7bbb      	ldrb	r3, [r7, #14]
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	d00d      	beq.n	800b4ca <USBD_StdEPReq+0x146>
 800b4ae:	7bbb      	ldrb	r3, [r7, #14]
 800b4b0:	2b80      	cmp	r3, #128	; 0x80
 800b4b2:	d00a      	beq.n	800b4ca <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b4b4:	7bbb      	ldrb	r3, [r7, #14]
 800b4b6:	4619      	mov	r1, r3
 800b4b8:	6878      	ldr	r0, [r7, #4]
 800b4ba:	f004 fb75 	bl	800fba8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b4be:	2180      	movs	r1, #128	; 0x80
 800b4c0:	6878      	ldr	r0, [r7, #4]
 800b4c2:	f004 fb71 	bl	800fba8 <USBD_LL_StallEP>
 800b4c6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b4c8:	e040      	b.n	800b54c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800b4ca:	6839      	ldr	r1, [r7, #0]
 800b4cc:	6878      	ldr	r0, [r7, #4]
 800b4ce:	f000 fc3e 	bl	800bd4e <USBD_CtlError>
              break;
 800b4d2:	e03b      	b.n	800b54c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b4d4:	683b      	ldr	r3, [r7, #0]
 800b4d6:	885b      	ldrh	r3, [r3, #2]
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	d136      	bne.n	800b54a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800b4dc:	7bbb      	ldrb	r3, [r7, #14]
 800b4de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	d004      	beq.n	800b4f0 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800b4e6:	7bbb      	ldrb	r3, [r7, #14]
 800b4e8:	4619      	mov	r1, r3
 800b4ea:	6878      	ldr	r0, [r7, #4]
 800b4ec:	f004 fb7b 	bl	800fbe6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800b4f0:	6878      	ldr	r0, [r7, #4]
 800b4f2:	f000 fcf7 	bl	800bee4 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800b4f6:	7bbb      	ldrb	r3, [r7, #14]
 800b4f8:	4619      	mov	r1, r3
 800b4fa:	6878      	ldr	r0, [r7, #4]
 800b4fc:	f7ff fde2 	bl	800b0c4 <USBD_CoreFindEP>
 800b500:	4603      	mov	r3, r0
 800b502:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b504:	7b7b      	ldrb	r3, [r7, #13]
 800b506:	2bff      	cmp	r3, #255	; 0xff
 800b508:	d01f      	beq.n	800b54a <USBD_StdEPReq+0x1c6>
 800b50a:	7b7b      	ldrb	r3, [r7, #13]
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d11c      	bne.n	800b54a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800b510:	7b7a      	ldrb	r2, [r7, #13]
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800b518:	7b7a      	ldrb	r2, [r7, #13]
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	32ae      	adds	r2, #174	; 0xae
 800b51e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b522:	689b      	ldr	r3, [r3, #8]
 800b524:	2b00      	cmp	r3, #0
 800b526:	d010      	beq.n	800b54a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800b528:	7b7a      	ldrb	r2, [r7, #13]
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	32ae      	adds	r2, #174	; 0xae
 800b52e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b532:	689b      	ldr	r3, [r3, #8]
 800b534:	6839      	ldr	r1, [r7, #0]
 800b536:	6878      	ldr	r0, [r7, #4]
 800b538:	4798      	blx	r3
 800b53a:	4603      	mov	r3, r0
 800b53c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800b53e:	e004      	b.n	800b54a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800b540:	6839      	ldr	r1, [r7, #0]
 800b542:	6878      	ldr	r0, [r7, #4]
 800b544:	f000 fc03 	bl	800bd4e <USBD_CtlError>
              break;
 800b548:	e000      	b.n	800b54c <USBD_StdEPReq+0x1c8>
              break;
 800b54a:	bf00      	nop
          }
          break;
 800b54c:	e0ab      	b.n	800b6a6 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b554:	b2db      	uxtb	r3, r3
 800b556:	2b02      	cmp	r3, #2
 800b558:	d002      	beq.n	800b560 <USBD_StdEPReq+0x1dc>
 800b55a:	2b03      	cmp	r3, #3
 800b55c:	d032      	beq.n	800b5c4 <USBD_StdEPReq+0x240>
 800b55e:	e097      	b.n	800b690 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b560:	7bbb      	ldrb	r3, [r7, #14]
 800b562:	2b00      	cmp	r3, #0
 800b564:	d007      	beq.n	800b576 <USBD_StdEPReq+0x1f2>
 800b566:	7bbb      	ldrb	r3, [r7, #14]
 800b568:	2b80      	cmp	r3, #128	; 0x80
 800b56a:	d004      	beq.n	800b576 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800b56c:	6839      	ldr	r1, [r7, #0]
 800b56e:	6878      	ldr	r0, [r7, #4]
 800b570:	f000 fbed 	bl	800bd4e <USBD_CtlError>
                break;
 800b574:	e091      	b.n	800b69a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b576:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	da0b      	bge.n	800b596 <USBD_StdEPReq+0x212>
 800b57e:	7bbb      	ldrb	r3, [r7, #14]
 800b580:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b584:	4613      	mov	r3, r2
 800b586:	009b      	lsls	r3, r3, #2
 800b588:	4413      	add	r3, r2
 800b58a:	009b      	lsls	r3, r3, #2
 800b58c:	3310      	adds	r3, #16
 800b58e:	687a      	ldr	r2, [r7, #4]
 800b590:	4413      	add	r3, r2
 800b592:	3304      	adds	r3, #4
 800b594:	e00b      	b.n	800b5ae <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b596:	7bbb      	ldrb	r3, [r7, #14]
 800b598:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b59c:	4613      	mov	r3, r2
 800b59e:	009b      	lsls	r3, r3, #2
 800b5a0:	4413      	add	r3, r2
 800b5a2:	009b      	lsls	r3, r3, #2
 800b5a4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b5a8:	687a      	ldr	r2, [r7, #4]
 800b5aa:	4413      	add	r3, r2
 800b5ac:	3304      	adds	r3, #4
 800b5ae:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800b5b0:	68bb      	ldr	r3, [r7, #8]
 800b5b2:	2200      	movs	r2, #0
 800b5b4:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b5b6:	68bb      	ldr	r3, [r7, #8]
 800b5b8:	2202      	movs	r2, #2
 800b5ba:	4619      	mov	r1, r3
 800b5bc:	6878      	ldr	r0, [r7, #4]
 800b5be:	f000 fc37 	bl	800be30 <USBD_CtlSendData>
              break;
 800b5c2:	e06a      	b.n	800b69a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800b5c4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	da11      	bge.n	800b5f0 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800b5cc:	7bbb      	ldrb	r3, [r7, #14]
 800b5ce:	f003 020f 	and.w	r2, r3, #15
 800b5d2:	6879      	ldr	r1, [r7, #4]
 800b5d4:	4613      	mov	r3, r2
 800b5d6:	009b      	lsls	r3, r3, #2
 800b5d8:	4413      	add	r3, r2
 800b5da:	009b      	lsls	r3, r3, #2
 800b5dc:	440b      	add	r3, r1
 800b5de:	3324      	adds	r3, #36	; 0x24
 800b5e0:	881b      	ldrh	r3, [r3, #0]
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	d117      	bne.n	800b616 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800b5e6:	6839      	ldr	r1, [r7, #0]
 800b5e8:	6878      	ldr	r0, [r7, #4]
 800b5ea:	f000 fbb0 	bl	800bd4e <USBD_CtlError>
                  break;
 800b5ee:	e054      	b.n	800b69a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800b5f0:	7bbb      	ldrb	r3, [r7, #14]
 800b5f2:	f003 020f 	and.w	r2, r3, #15
 800b5f6:	6879      	ldr	r1, [r7, #4]
 800b5f8:	4613      	mov	r3, r2
 800b5fa:	009b      	lsls	r3, r3, #2
 800b5fc:	4413      	add	r3, r2
 800b5fe:	009b      	lsls	r3, r3, #2
 800b600:	440b      	add	r3, r1
 800b602:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800b606:	881b      	ldrh	r3, [r3, #0]
 800b608:	2b00      	cmp	r3, #0
 800b60a:	d104      	bne.n	800b616 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800b60c:	6839      	ldr	r1, [r7, #0]
 800b60e:	6878      	ldr	r0, [r7, #4]
 800b610:	f000 fb9d 	bl	800bd4e <USBD_CtlError>
                  break;
 800b614:	e041      	b.n	800b69a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b616:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b61a:	2b00      	cmp	r3, #0
 800b61c:	da0b      	bge.n	800b636 <USBD_StdEPReq+0x2b2>
 800b61e:	7bbb      	ldrb	r3, [r7, #14]
 800b620:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b624:	4613      	mov	r3, r2
 800b626:	009b      	lsls	r3, r3, #2
 800b628:	4413      	add	r3, r2
 800b62a:	009b      	lsls	r3, r3, #2
 800b62c:	3310      	adds	r3, #16
 800b62e:	687a      	ldr	r2, [r7, #4]
 800b630:	4413      	add	r3, r2
 800b632:	3304      	adds	r3, #4
 800b634:	e00b      	b.n	800b64e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b636:	7bbb      	ldrb	r3, [r7, #14]
 800b638:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b63c:	4613      	mov	r3, r2
 800b63e:	009b      	lsls	r3, r3, #2
 800b640:	4413      	add	r3, r2
 800b642:	009b      	lsls	r3, r3, #2
 800b644:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b648:	687a      	ldr	r2, [r7, #4]
 800b64a:	4413      	add	r3, r2
 800b64c:	3304      	adds	r3, #4
 800b64e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800b650:	7bbb      	ldrb	r3, [r7, #14]
 800b652:	2b00      	cmp	r3, #0
 800b654:	d002      	beq.n	800b65c <USBD_StdEPReq+0x2d8>
 800b656:	7bbb      	ldrb	r3, [r7, #14]
 800b658:	2b80      	cmp	r3, #128	; 0x80
 800b65a:	d103      	bne.n	800b664 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800b65c:	68bb      	ldr	r3, [r7, #8]
 800b65e:	2200      	movs	r2, #0
 800b660:	601a      	str	r2, [r3, #0]
 800b662:	e00e      	b.n	800b682 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800b664:	7bbb      	ldrb	r3, [r7, #14]
 800b666:	4619      	mov	r1, r3
 800b668:	6878      	ldr	r0, [r7, #4]
 800b66a:	f004 fadb 	bl	800fc24 <USBD_LL_IsStallEP>
 800b66e:	4603      	mov	r3, r0
 800b670:	2b00      	cmp	r3, #0
 800b672:	d003      	beq.n	800b67c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800b674:	68bb      	ldr	r3, [r7, #8]
 800b676:	2201      	movs	r2, #1
 800b678:	601a      	str	r2, [r3, #0]
 800b67a:	e002      	b.n	800b682 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800b67c:	68bb      	ldr	r3, [r7, #8]
 800b67e:	2200      	movs	r2, #0
 800b680:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b682:	68bb      	ldr	r3, [r7, #8]
 800b684:	2202      	movs	r2, #2
 800b686:	4619      	mov	r1, r3
 800b688:	6878      	ldr	r0, [r7, #4]
 800b68a:	f000 fbd1 	bl	800be30 <USBD_CtlSendData>
              break;
 800b68e:	e004      	b.n	800b69a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800b690:	6839      	ldr	r1, [r7, #0]
 800b692:	6878      	ldr	r0, [r7, #4]
 800b694:	f000 fb5b 	bl	800bd4e <USBD_CtlError>
              break;
 800b698:	bf00      	nop
          }
          break;
 800b69a:	e004      	b.n	800b6a6 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800b69c:	6839      	ldr	r1, [r7, #0]
 800b69e:	6878      	ldr	r0, [r7, #4]
 800b6a0:	f000 fb55 	bl	800bd4e <USBD_CtlError>
          break;
 800b6a4:	bf00      	nop
      }
      break;
 800b6a6:	e005      	b.n	800b6b4 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800b6a8:	6839      	ldr	r1, [r7, #0]
 800b6aa:	6878      	ldr	r0, [r7, #4]
 800b6ac:	f000 fb4f 	bl	800bd4e <USBD_CtlError>
      break;
 800b6b0:	e000      	b.n	800b6b4 <USBD_StdEPReq+0x330>
      break;
 800b6b2:	bf00      	nop
  }

  return ret;
 800b6b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b6b6:	4618      	mov	r0, r3
 800b6b8:	3710      	adds	r7, #16
 800b6ba:	46bd      	mov	sp, r7
 800b6bc:	bd80      	pop	{r7, pc}
	...

0800b6c0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b6c0:	b580      	push	{r7, lr}
 800b6c2:	b084      	sub	sp, #16
 800b6c4:	af00      	add	r7, sp, #0
 800b6c6:	6078      	str	r0, [r7, #4]
 800b6c8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b6ca:	2300      	movs	r3, #0
 800b6cc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800b6ce:	2300      	movs	r3, #0
 800b6d0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800b6d2:	2300      	movs	r3, #0
 800b6d4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800b6d6:	683b      	ldr	r3, [r7, #0]
 800b6d8:	885b      	ldrh	r3, [r3, #2]
 800b6da:	0a1b      	lsrs	r3, r3, #8
 800b6dc:	b29b      	uxth	r3, r3
 800b6de:	3b01      	subs	r3, #1
 800b6e0:	2b06      	cmp	r3, #6
 800b6e2:	f200 8128 	bhi.w	800b936 <USBD_GetDescriptor+0x276>
 800b6e6:	a201      	add	r2, pc, #4	; (adr r2, 800b6ec <USBD_GetDescriptor+0x2c>)
 800b6e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6ec:	0800b709 	.word	0x0800b709
 800b6f0:	0800b721 	.word	0x0800b721
 800b6f4:	0800b761 	.word	0x0800b761
 800b6f8:	0800b937 	.word	0x0800b937
 800b6fc:	0800b937 	.word	0x0800b937
 800b700:	0800b8d7 	.word	0x0800b8d7
 800b704:	0800b903 	.word	0x0800b903
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b70e:	681b      	ldr	r3, [r3, #0]
 800b710:	687a      	ldr	r2, [r7, #4]
 800b712:	7c12      	ldrb	r2, [r2, #16]
 800b714:	f107 0108 	add.w	r1, r7, #8
 800b718:	4610      	mov	r0, r2
 800b71a:	4798      	blx	r3
 800b71c:	60f8      	str	r0, [r7, #12]
      break;
 800b71e:	e112      	b.n	800b946 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	7c1b      	ldrb	r3, [r3, #16]
 800b724:	2b00      	cmp	r3, #0
 800b726:	d10d      	bne.n	800b744 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b72e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b730:	f107 0208 	add.w	r2, r7, #8
 800b734:	4610      	mov	r0, r2
 800b736:	4798      	blx	r3
 800b738:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b73a:	68fb      	ldr	r3, [r7, #12]
 800b73c:	3301      	adds	r3, #1
 800b73e:	2202      	movs	r2, #2
 800b740:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800b742:	e100      	b.n	800b946 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b74a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b74c:	f107 0208 	add.w	r2, r7, #8
 800b750:	4610      	mov	r0, r2
 800b752:	4798      	blx	r3
 800b754:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b756:	68fb      	ldr	r3, [r7, #12]
 800b758:	3301      	adds	r3, #1
 800b75a:	2202      	movs	r2, #2
 800b75c:	701a      	strb	r2, [r3, #0]
      break;
 800b75e:	e0f2      	b.n	800b946 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800b760:	683b      	ldr	r3, [r7, #0]
 800b762:	885b      	ldrh	r3, [r3, #2]
 800b764:	b2db      	uxtb	r3, r3
 800b766:	2b05      	cmp	r3, #5
 800b768:	f200 80ac 	bhi.w	800b8c4 <USBD_GetDescriptor+0x204>
 800b76c:	a201      	add	r2, pc, #4	; (adr r2, 800b774 <USBD_GetDescriptor+0xb4>)
 800b76e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b772:	bf00      	nop
 800b774:	0800b78d 	.word	0x0800b78d
 800b778:	0800b7c1 	.word	0x0800b7c1
 800b77c:	0800b7f5 	.word	0x0800b7f5
 800b780:	0800b829 	.word	0x0800b829
 800b784:	0800b85d 	.word	0x0800b85d
 800b788:	0800b891 	.word	0x0800b891
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b792:	685b      	ldr	r3, [r3, #4]
 800b794:	2b00      	cmp	r3, #0
 800b796:	d00b      	beq.n	800b7b0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b79e:	685b      	ldr	r3, [r3, #4]
 800b7a0:	687a      	ldr	r2, [r7, #4]
 800b7a2:	7c12      	ldrb	r2, [r2, #16]
 800b7a4:	f107 0108 	add.w	r1, r7, #8
 800b7a8:	4610      	mov	r0, r2
 800b7aa:	4798      	blx	r3
 800b7ac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b7ae:	e091      	b.n	800b8d4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b7b0:	6839      	ldr	r1, [r7, #0]
 800b7b2:	6878      	ldr	r0, [r7, #4]
 800b7b4:	f000 facb 	bl	800bd4e <USBD_CtlError>
            err++;
 800b7b8:	7afb      	ldrb	r3, [r7, #11]
 800b7ba:	3301      	adds	r3, #1
 800b7bc:	72fb      	strb	r3, [r7, #11]
          break;
 800b7be:	e089      	b.n	800b8d4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b7c6:	689b      	ldr	r3, [r3, #8]
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	d00b      	beq.n	800b7e4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b7d2:	689b      	ldr	r3, [r3, #8]
 800b7d4:	687a      	ldr	r2, [r7, #4]
 800b7d6:	7c12      	ldrb	r2, [r2, #16]
 800b7d8:	f107 0108 	add.w	r1, r7, #8
 800b7dc:	4610      	mov	r0, r2
 800b7de:	4798      	blx	r3
 800b7e0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b7e2:	e077      	b.n	800b8d4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b7e4:	6839      	ldr	r1, [r7, #0]
 800b7e6:	6878      	ldr	r0, [r7, #4]
 800b7e8:	f000 fab1 	bl	800bd4e <USBD_CtlError>
            err++;
 800b7ec:	7afb      	ldrb	r3, [r7, #11]
 800b7ee:	3301      	adds	r3, #1
 800b7f0:	72fb      	strb	r3, [r7, #11]
          break;
 800b7f2:	e06f      	b.n	800b8d4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b7fa:	68db      	ldr	r3, [r3, #12]
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	d00b      	beq.n	800b818 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b806:	68db      	ldr	r3, [r3, #12]
 800b808:	687a      	ldr	r2, [r7, #4]
 800b80a:	7c12      	ldrb	r2, [r2, #16]
 800b80c:	f107 0108 	add.w	r1, r7, #8
 800b810:	4610      	mov	r0, r2
 800b812:	4798      	blx	r3
 800b814:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b816:	e05d      	b.n	800b8d4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b818:	6839      	ldr	r1, [r7, #0]
 800b81a:	6878      	ldr	r0, [r7, #4]
 800b81c:	f000 fa97 	bl	800bd4e <USBD_CtlError>
            err++;
 800b820:	7afb      	ldrb	r3, [r7, #11]
 800b822:	3301      	adds	r3, #1
 800b824:	72fb      	strb	r3, [r7, #11]
          break;
 800b826:	e055      	b.n	800b8d4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b82e:	691b      	ldr	r3, [r3, #16]
 800b830:	2b00      	cmp	r3, #0
 800b832:	d00b      	beq.n	800b84c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b83a:	691b      	ldr	r3, [r3, #16]
 800b83c:	687a      	ldr	r2, [r7, #4]
 800b83e:	7c12      	ldrb	r2, [r2, #16]
 800b840:	f107 0108 	add.w	r1, r7, #8
 800b844:	4610      	mov	r0, r2
 800b846:	4798      	blx	r3
 800b848:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b84a:	e043      	b.n	800b8d4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b84c:	6839      	ldr	r1, [r7, #0]
 800b84e:	6878      	ldr	r0, [r7, #4]
 800b850:	f000 fa7d 	bl	800bd4e <USBD_CtlError>
            err++;
 800b854:	7afb      	ldrb	r3, [r7, #11]
 800b856:	3301      	adds	r3, #1
 800b858:	72fb      	strb	r3, [r7, #11]
          break;
 800b85a:	e03b      	b.n	800b8d4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b862:	695b      	ldr	r3, [r3, #20]
 800b864:	2b00      	cmp	r3, #0
 800b866:	d00b      	beq.n	800b880 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b86e:	695b      	ldr	r3, [r3, #20]
 800b870:	687a      	ldr	r2, [r7, #4]
 800b872:	7c12      	ldrb	r2, [r2, #16]
 800b874:	f107 0108 	add.w	r1, r7, #8
 800b878:	4610      	mov	r0, r2
 800b87a:	4798      	blx	r3
 800b87c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b87e:	e029      	b.n	800b8d4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b880:	6839      	ldr	r1, [r7, #0]
 800b882:	6878      	ldr	r0, [r7, #4]
 800b884:	f000 fa63 	bl	800bd4e <USBD_CtlError>
            err++;
 800b888:	7afb      	ldrb	r3, [r7, #11]
 800b88a:	3301      	adds	r3, #1
 800b88c:	72fb      	strb	r3, [r7, #11]
          break;
 800b88e:	e021      	b.n	800b8d4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b896:	699b      	ldr	r3, [r3, #24]
 800b898:	2b00      	cmp	r3, #0
 800b89a:	d00b      	beq.n	800b8b4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b8a2:	699b      	ldr	r3, [r3, #24]
 800b8a4:	687a      	ldr	r2, [r7, #4]
 800b8a6:	7c12      	ldrb	r2, [r2, #16]
 800b8a8:	f107 0108 	add.w	r1, r7, #8
 800b8ac:	4610      	mov	r0, r2
 800b8ae:	4798      	blx	r3
 800b8b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b8b2:	e00f      	b.n	800b8d4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b8b4:	6839      	ldr	r1, [r7, #0]
 800b8b6:	6878      	ldr	r0, [r7, #4]
 800b8b8:	f000 fa49 	bl	800bd4e <USBD_CtlError>
            err++;
 800b8bc:	7afb      	ldrb	r3, [r7, #11]
 800b8be:	3301      	adds	r3, #1
 800b8c0:	72fb      	strb	r3, [r7, #11]
          break;
 800b8c2:	e007      	b.n	800b8d4 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800b8c4:	6839      	ldr	r1, [r7, #0]
 800b8c6:	6878      	ldr	r0, [r7, #4]
 800b8c8:	f000 fa41 	bl	800bd4e <USBD_CtlError>
          err++;
 800b8cc:	7afb      	ldrb	r3, [r7, #11]
 800b8ce:	3301      	adds	r3, #1
 800b8d0:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800b8d2:	bf00      	nop
      }
      break;
 800b8d4:	e037      	b.n	800b946 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	7c1b      	ldrb	r3, [r3, #16]
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d109      	bne.n	800b8f2 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b8e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b8e6:	f107 0208 	add.w	r2, r7, #8
 800b8ea:	4610      	mov	r0, r2
 800b8ec:	4798      	blx	r3
 800b8ee:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b8f0:	e029      	b.n	800b946 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b8f2:	6839      	ldr	r1, [r7, #0]
 800b8f4:	6878      	ldr	r0, [r7, #4]
 800b8f6:	f000 fa2a 	bl	800bd4e <USBD_CtlError>
        err++;
 800b8fa:	7afb      	ldrb	r3, [r7, #11]
 800b8fc:	3301      	adds	r3, #1
 800b8fe:	72fb      	strb	r3, [r7, #11]
      break;
 800b900:	e021      	b.n	800b946 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	7c1b      	ldrb	r3, [r3, #16]
 800b906:	2b00      	cmp	r3, #0
 800b908:	d10d      	bne.n	800b926 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b912:	f107 0208 	add.w	r2, r7, #8
 800b916:	4610      	mov	r0, r2
 800b918:	4798      	blx	r3
 800b91a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b91c:	68fb      	ldr	r3, [r7, #12]
 800b91e:	3301      	adds	r3, #1
 800b920:	2207      	movs	r2, #7
 800b922:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b924:	e00f      	b.n	800b946 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b926:	6839      	ldr	r1, [r7, #0]
 800b928:	6878      	ldr	r0, [r7, #4]
 800b92a:	f000 fa10 	bl	800bd4e <USBD_CtlError>
        err++;
 800b92e:	7afb      	ldrb	r3, [r7, #11]
 800b930:	3301      	adds	r3, #1
 800b932:	72fb      	strb	r3, [r7, #11]
      break;
 800b934:	e007      	b.n	800b946 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800b936:	6839      	ldr	r1, [r7, #0]
 800b938:	6878      	ldr	r0, [r7, #4]
 800b93a:	f000 fa08 	bl	800bd4e <USBD_CtlError>
      err++;
 800b93e:	7afb      	ldrb	r3, [r7, #11]
 800b940:	3301      	adds	r3, #1
 800b942:	72fb      	strb	r3, [r7, #11]
      break;
 800b944:	bf00      	nop
  }

  if (err != 0U)
 800b946:	7afb      	ldrb	r3, [r7, #11]
 800b948:	2b00      	cmp	r3, #0
 800b94a:	d11e      	bne.n	800b98a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800b94c:	683b      	ldr	r3, [r7, #0]
 800b94e:	88db      	ldrh	r3, [r3, #6]
 800b950:	2b00      	cmp	r3, #0
 800b952:	d016      	beq.n	800b982 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800b954:	893b      	ldrh	r3, [r7, #8]
 800b956:	2b00      	cmp	r3, #0
 800b958:	d00e      	beq.n	800b978 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800b95a:	683b      	ldr	r3, [r7, #0]
 800b95c:	88da      	ldrh	r2, [r3, #6]
 800b95e:	893b      	ldrh	r3, [r7, #8]
 800b960:	4293      	cmp	r3, r2
 800b962:	bf28      	it	cs
 800b964:	4613      	movcs	r3, r2
 800b966:	b29b      	uxth	r3, r3
 800b968:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800b96a:	893b      	ldrh	r3, [r7, #8]
 800b96c:	461a      	mov	r2, r3
 800b96e:	68f9      	ldr	r1, [r7, #12]
 800b970:	6878      	ldr	r0, [r7, #4]
 800b972:	f000 fa5d 	bl	800be30 <USBD_CtlSendData>
 800b976:	e009      	b.n	800b98c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800b978:	6839      	ldr	r1, [r7, #0]
 800b97a:	6878      	ldr	r0, [r7, #4]
 800b97c:	f000 f9e7 	bl	800bd4e <USBD_CtlError>
 800b980:	e004      	b.n	800b98c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800b982:	6878      	ldr	r0, [r7, #4]
 800b984:	f000 faae 	bl	800bee4 <USBD_CtlSendStatus>
 800b988:	e000      	b.n	800b98c <USBD_GetDescriptor+0x2cc>
    return;
 800b98a:	bf00      	nop
  }
}
 800b98c:	3710      	adds	r7, #16
 800b98e:	46bd      	mov	sp, r7
 800b990:	bd80      	pop	{r7, pc}
 800b992:	bf00      	nop

0800b994 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b994:	b580      	push	{r7, lr}
 800b996:	b084      	sub	sp, #16
 800b998:	af00      	add	r7, sp, #0
 800b99a:	6078      	str	r0, [r7, #4]
 800b99c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b99e:	683b      	ldr	r3, [r7, #0]
 800b9a0:	889b      	ldrh	r3, [r3, #4]
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	d131      	bne.n	800ba0a <USBD_SetAddress+0x76>
 800b9a6:	683b      	ldr	r3, [r7, #0]
 800b9a8:	88db      	ldrh	r3, [r3, #6]
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	d12d      	bne.n	800ba0a <USBD_SetAddress+0x76>
 800b9ae:	683b      	ldr	r3, [r7, #0]
 800b9b0:	885b      	ldrh	r3, [r3, #2]
 800b9b2:	2b7f      	cmp	r3, #127	; 0x7f
 800b9b4:	d829      	bhi.n	800ba0a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b9b6:	683b      	ldr	r3, [r7, #0]
 800b9b8:	885b      	ldrh	r3, [r3, #2]
 800b9ba:	b2db      	uxtb	r3, r3
 800b9bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b9c0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b9c8:	b2db      	uxtb	r3, r3
 800b9ca:	2b03      	cmp	r3, #3
 800b9cc:	d104      	bne.n	800b9d8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800b9ce:	6839      	ldr	r1, [r7, #0]
 800b9d0:	6878      	ldr	r0, [r7, #4]
 800b9d2:	f000 f9bc 	bl	800bd4e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b9d6:	e01d      	b.n	800ba14 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	7bfa      	ldrb	r2, [r7, #15]
 800b9dc:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b9e0:	7bfb      	ldrb	r3, [r7, #15]
 800b9e2:	4619      	mov	r1, r3
 800b9e4:	6878      	ldr	r0, [r7, #4]
 800b9e6:	f004 f949 	bl	800fc7c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800b9ea:	6878      	ldr	r0, [r7, #4]
 800b9ec:	f000 fa7a 	bl	800bee4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b9f0:	7bfb      	ldrb	r3, [r7, #15]
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	d004      	beq.n	800ba00 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	2202      	movs	r2, #2
 800b9fa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b9fe:	e009      	b.n	800ba14 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	2201      	movs	r2, #1
 800ba04:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ba08:	e004      	b.n	800ba14 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800ba0a:	6839      	ldr	r1, [r7, #0]
 800ba0c:	6878      	ldr	r0, [r7, #4]
 800ba0e:	f000 f99e 	bl	800bd4e <USBD_CtlError>
  }
}
 800ba12:	bf00      	nop
 800ba14:	bf00      	nop
 800ba16:	3710      	adds	r7, #16
 800ba18:	46bd      	mov	sp, r7
 800ba1a:	bd80      	pop	{r7, pc}

0800ba1c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ba1c:	b580      	push	{r7, lr}
 800ba1e:	b084      	sub	sp, #16
 800ba20:	af00      	add	r7, sp, #0
 800ba22:	6078      	str	r0, [r7, #4]
 800ba24:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ba26:	2300      	movs	r3, #0
 800ba28:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800ba2a:	683b      	ldr	r3, [r7, #0]
 800ba2c:	885b      	ldrh	r3, [r3, #2]
 800ba2e:	b2da      	uxtb	r2, r3
 800ba30:	4b4e      	ldr	r3, [pc, #312]	; (800bb6c <USBD_SetConfig+0x150>)
 800ba32:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800ba34:	4b4d      	ldr	r3, [pc, #308]	; (800bb6c <USBD_SetConfig+0x150>)
 800ba36:	781b      	ldrb	r3, [r3, #0]
 800ba38:	2b01      	cmp	r3, #1
 800ba3a:	d905      	bls.n	800ba48 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800ba3c:	6839      	ldr	r1, [r7, #0]
 800ba3e:	6878      	ldr	r0, [r7, #4]
 800ba40:	f000 f985 	bl	800bd4e <USBD_CtlError>
    return USBD_FAIL;
 800ba44:	2303      	movs	r3, #3
 800ba46:	e08c      	b.n	800bb62 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ba4e:	b2db      	uxtb	r3, r3
 800ba50:	2b02      	cmp	r3, #2
 800ba52:	d002      	beq.n	800ba5a <USBD_SetConfig+0x3e>
 800ba54:	2b03      	cmp	r3, #3
 800ba56:	d029      	beq.n	800baac <USBD_SetConfig+0x90>
 800ba58:	e075      	b.n	800bb46 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800ba5a:	4b44      	ldr	r3, [pc, #272]	; (800bb6c <USBD_SetConfig+0x150>)
 800ba5c:	781b      	ldrb	r3, [r3, #0]
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	d020      	beq.n	800baa4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800ba62:	4b42      	ldr	r3, [pc, #264]	; (800bb6c <USBD_SetConfig+0x150>)
 800ba64:	781b      	ldrb	r3, [r3, #0]
 800ba66:	461a      	mov	r2, r3
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800ba6c:	4b3f      	ldr	r3, [pc, #252]	; (800bb6c <USBD_SetConfig+0x150>)
 800ba6e:	781b      	ldrb	r3, [r3, #0]
 800ba70:	4619      	mov	r1, r3
 800ba72:	6878      	ldr	r0, [r7, #4]
 800ba74:	f7fe ffe1 	bl	800aa3a <USBD_SetClassConfig>
 800ba78:	4603      	mov	r3, r0
 800ba7a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800ba7c:	7bfb      	ldrb	r3, [r7, #15]
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	d008      	beq.n	800ba94 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800ba82:	6839      	ldr	r1, [r7, #0]
 800ba84:	6878      	ldr	r0, [r7, #4]
 800ba86:	f000 f962 	bl	800bd4e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	2202      	movs	r2, #2
 800ba8e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800ba92:	e065      	b.n	800bb60 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800ba94:	6878      	ldr	r0, [r7, #4]
 800ba96:	f000 fa25 	bl	800bee4 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	2203      	movs	r2, #3
 800ba9e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800baa2:	e05d      	b.n	800bb60 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800baa4:	6878      	ldr	r0, [r7, #4]
 800baa6:	f000 fa1d 	bl	800bee4 <USBD_CtlSendStatus>
      break;
 800baaa:	e059      	b.n	800bb60 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800baac:	4b2f      	ldr	r3, [pc, #188]	; (800bb6c <USBD_SetConfig+0x150>)
 800baae:	781b      	ldrb	r3, [r3, #0]
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	d112      	bne.n	800bada <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	2202      	movs	r2, #2
 800bab8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800babc:	4b2b      	ldr	r3, [pc, #172]	; (800bb6c <USBD_SetConfig+0x150>)
 800babe:	781b      	ldrb	r3, [r3, #0]
 800bac0:	461a      	mov	r2, r3
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800bac6:	4b29      	ldr	r3, [pc, #164]	; (800bb6c <USBD_SetConfig+0x150>)
 800bac8:	781b      	ldrb	r3, [r3, #0]
 800baca:	4619      	mov	r1, r3
 800bacc:	6878      	ldr	r0, [r7, #4]
 800bace:	f7fe ffd0 	bl	800aa72 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800bad2:	6878      	ldr	r0, [r7, #4]
 800bad4:	f000 fa06 	bl	800bee4 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800bad8:	e042      	b.n	800bb60 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800bada:	4b24      	ldr	r3, [pc, #144]	; (800bb6c <USBD_SetConfig+0x150>)
 800badc:	781b      	ldrb	r3, [r3, #0]
 800bade:	461a      	mov	r2, r3
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	685b      	ldr	r3, [r3, #4]
 800bae4:	429a      	cmp	r2, r3
 800bae6:	d02a      	beq.n	800bb3e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	685b      	ldr	r3, [r3, #4]
 800baec:	b2db      	uxtb	r3, r3
 800baee:	4619      	mov	r1, r3
 800baf0:	6878      	ldr	r0, [r7, #4]
 800baf2:	f7fe ffbe 	bl	800aa72 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800baf6:	4b1d      	ldr	r3, [pc, #116]	; (800bb6c <USBD_SetConfig+0x150>)
 800baf8:	781b      	ldrb	r3, [r3, #0]
 800bafa:	461a      	mov	r2, r3
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800bb00:	4b1a      	ldr	r3, [pc, #104]	; (800bb6c <USBD_SetConfig+0x150>)
 800bb02:	781b      	ldrb	r3, [r3, #0]
 800bb04:	4619      	mov	r1, r3
 800bb06:	6878      	ldr	r0, [r7, #4]
 800bb08:	f7fe ff97 	bl	800aa3a <USBD_SetClassConfig>
 800bb0c:	4603      	mov	r3, r0
 800bb0e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800bb10:	7bfb      	ldrb	r3, [r7, #15]
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	d00f      	beq.n	800bb36 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800bb16:	6839      	ldr	r1, [r7, #0]
 800bb18:	6878      	ldr	r0, [r7, #4]
 800bb1a:	f000 f918 	bl	800bd4e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	685b      	ldr	r3, [r3, #4]
 800bb22:	b2db      	uxtb	r3, r3
 800bb24:	4619      	mov	r1, r3
 800bb26:	6878      	ldr	r0, [r7, #4]
 800bb28:	f7fe ffa3 	bl	800aa72 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	2202      	movs	r2, #2
 800bb30:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800bb34:	e014      	b.n	800bb60 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800bb36:	6878      	ldr	r0, [r7, #4]
 800bb38:	f000 f9d4 	bl	800bee4 <USBD_CtlSendStatus>
      break;
 800bb3c:	e010      	b.n	800bb60 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800bb3e:	6878      	ldr	r0, [r7, #4]
 800bb40:	f000 f9d0 	bl	800bee4 <USBD_CtlSendStatus>
      break;
 800bb44:	e00c      	b.n	800bb60 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800bb46:	6839      	ldr	r1, [r7, #0]
 800bb48:	6878      	ldr	r0, [r7, #4]
 800bb4a:	f000 f900 	bl	800bd4e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800bb4e:	4b07      	ldr	r3, [pc, #28]	; (800bb6c <USBD_SetConfig+0x150>)
 800bb50:	781b      	ldrb	r3, [r3, #0]
 800bb52:	4619      	mov	r1, r3
 800bb54:	6878      	ldr	r0, [r7, #4]
 800bb56:	f7fe ff8c 	bl	800aa72 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800bb5a:	2303      	movs	r3, #3
 800bb5c:	73fb      	strb	r3, [r7, #15]
      break;
 800bb5e:	bf00      	nop
  }

  return ret;
 800bb60:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb62:	4618      	mov	r0, r3
 800bb64:	3710      	adds	r7, #16
 800bb66:	46bd      	mov	sp, r7
 800bb68:	bd80      	pop	{r7, pc}
 800bb6a:	bf00      	nop
 800bb6c:	20000d10 	.word	0x20000d10

0800bb70 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bb70:	b580      	push	{r7, lr}
 800bb72:	b082      	sub	sp, #8
 800bb74:	af00      	add	r7, sp, #0
 800bb76:	6078      	str	r0, [r7, #4]
 800bb78:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800bb7a:	683b      	ldr	r3, [r7, #0]
 800bb7c:	88db      	ldrh	r3, [r3, #6]
 800bb7e:	2b01      	cmp	r3, #1
 800bb80:	d004      	beq.n	800bb8c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800bb82:	6839      	ldr	r1, [r7, #0]
 800bb84:	6878      	ldr	r0, [r7, #4]
 800bb86:	f000 f8e2 	bl	800bd4e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800bb8a:	e023      	b.n	800bbd4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bb92:	b2db      	uxtb	r3, r3
 800bb94:	2b02      	cmp	r3, #2
 800bb96:	dc02      	bgt.n	800bb9e <USBD_GetConfig+0x2e>
 800bb98:	2b00      	cmp	r3, #0
 800bb9a:	dc03      	bgt.n	800bba4 <USBD_GetConfig+0x34>
 800bb9c:	e015      	b.n	800bbca <USBD_GetConfig+0x5a>
 800bb9e:	2b03      	cmp	r3, #3
 800bba0:	d00b      	beq.n	800bbba <USBD_GetConfig+0x4a>
 800bba2:	e012      	b.n	800bbca <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	2200      	movs	r2, #0
 800bba8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	3308      	adds	r3, #8
 800bbae:	2201      	movs	r2, #1
 800bbb0:	4619      	mov	r1, r3
 800bbb2:	6878      	ldr	r0, [r7, #4]
 800bbb4:	f000 f93c 	bl	800be30 <USBD_CtlSendData>
        break;
 800bbb8:	e00c      	b.n	800bbd4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	3304      	adds	r3, #4
 800bbbe:	2201      	movs	r2, #1
 800bbc0:	4619      	mov	r1, r3
 800bbc2:	6878      	ldr	r0, [r7, #4]
 800bbc4:	f000 f934 	bl	800be30 <USBD_CtlSendData>
        break;
 800bbc8:	e004      	b.n	800bbd4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800bbca:	6839      	ldr	r1, [r7, #0]
 800bbcc:	6878      	ldr	r0, [r7, #4]
 800bbce:	f000 f8be 	bl	800bd4e <USBD_CtlError>
        break;
 800bbd2:	bf00      	nop
}
 800bbd4:	bf00      	nop
 800bbd6:	3708      	adds	r7, #8
 800bbd8:	46bd      	mov	sp, r7
 800bbda:	bd80      	pop	{r7, pc}

0800bbdc <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bbdc:	b580      	push	{r7, lr}
 800bbde:	b082      	sub	sp, #8
 800bbe0:	af00      	add	r7, sp, #0
 800bbe2:	6078      	str	r0, [r7, #4]
 800bbe4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bbec:	b2db      	uxtb	r3, r3
 800bbee:	3b01      	subs	r3, #1
 800bbf0:	2b02      	cmp	r3, #2
 800bbf2:	d81e      	bhi.n	800bc32 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800bbf4:	683b      	ldr	r3, [r7, #0]
 800bbf6:	88db      	ldrh	r3, [r3, #6]
 800bbf8:	2b02      	cmp	r3, #2
 800bbfa:	d004      	beq.n	800bc06 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800bbfc:	6839      	ldr	r1, [r7, #0]
 800bbfe:	6878      	ldr	r0, [r7, #4]
 800bc00:	f000 f8a5 	bl	800bd4e <USBD_CtlError>
        break;
 800bc04:	e01a      	b.n	800bc3c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	2201      	movs	r2, #1
 800bc0a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800bc12:	2b00      	cmp	r3, #0
 800bc14:	d005      	beq.n	800bc22 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	68db      	ldr	r3, [r3, #12]
 800bc1a:	f043 0202 	orr.w	r2, r3, #2
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	330c      	adds	r3, #12
 800bc26:	2202      	movs	r2, #2
 800bc28:	4619      	mov	r1, r3
 800bc2a:	6878      	ldr	r0, [r7, #4]
 800bc2c:	f000 f900 	bl	800be30 <USBD_CtlSendData>
      break;
 800bc30:	e004      	b.n	800bc3c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800bc32:	6839      	ldr	r1, [r7, #0]
 800bc34:	6878      	ldr	r0, [r7, #4]
 800bc36:	f000 f88a 	bl	800bd4e <USBD_CtlError>
      break;
 800bc3a:	bf00      	nop
  }
}
 800bc3c:	bf00      	nop
 800bc3e:	3708      	adds	r7, #8
 800bc40:	46bd      	mov	sp, r7
 800bc42:	bd80      	pop	{r7, pc}

0800bc44 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bc44:	b580      	push	{r7, lr}
 800bc46:	b082      	sub	sp, #8
 800bc48:	af00      	add	r7, sp, #0
 800bc4a:	6078      	str	r0, [r7, #4]
 800bc4c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800bc4e:	683b      	ldr	r3, [r7, #0]
 800bc50:	885b      	ldrh	r3, [r3, #2]
 800bc52:	2b01      	cmp	r3, #1
 800bc54:	d107      	bne.n	800bc66 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	2201      	movs	r2, #1
 800bc5a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800bc5e:	6878      	ldr	r0, [r7, #4]
 800bc60:	f000 f940 	bl	800bee4 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800bc64:	e013      	b.n	800bc8e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800bc66:	683b      	ldr	r3, [r7, #0]
 800bc68:	885b      	ldrh	r3, [r3, #2]
 800bc6a:	2b02      	cmp	r3, #2
 800bc6c:	d10b      	bne.n	800bc86 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800bc6e:	683b      	ldr	r3, [r7, #0]
 800bc70:	889b      	ldrh	r3, [r3, #4]
 800bc72:	0a1b      	lsrs	r3, r3, #8
 800bc74:	b29b      	uxth	r3, r3
 800bc76:	b2da      	uxtb	r2, r3
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800bc7e:	6878      	ldr	r0, [r7, #4]
 800bc80:	f000 f930 	bl	800bee4 <USBD_CtlSendStatus>
}
 800bc84:	e003      	b.n	800bc8e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800bc86:	6839      	ldr	r1, [r7, #0]
 800bc88:	6878      	ldr	r0, [r7, #4]
 800bc8a:	f000 f860 	bl	800bd4e <USBD_CtlError>
}
 800bc8e:	bf00      	nop
 800bc90:	3708      	adds	r7, #8
 800bc92:	46bd      	mov	sp, r7
 800bc94:	bd80      	pop	{r7, pc}

0800bc96 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bc96:	b580      	push	{r7, lr}
 800bc98:	b082      	sub	sp, #8
 800bc9a:	af00      	add	r7, sp, #0
 800bc9c:	6078      	str	r0, [r7, #4]
 800bc9e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bca6:	b2db      	uxtb	r3, r3
 800bca8:	3b01      	subs	r3, #1
 800bcaa:	2b02      	cmp	r3, #2
 800bcac:	d80b      	bhi.n	800bcc6 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800bcae:	683b      	ldr	r3, [r7, #0]
 800bcb0:	885b      	ldrh	r3, [r3, #2]
 800bcb2:	2b01      	cmp	r3, #1
 800bcb4:	d10c      	bne.n	800bcd0 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	2200      	movs	r2, #0
 800bcba:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800bcbe:	6878      	ldr	r0, [r7, #4]
 800bcc0:	f000 f910 	bl	800bee4 <USBD_CtlSendStatus>
      }
      break;
 800bcc4:	e004      	b.n	800bcd0 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800bcc6:	6839      	ldr	r1, [r7, #0]
 800bcc8:	6878      	ldr	r0, [r7, #4]
 800bcca:	f000 f840 	bl	800bd4e <USBD_CtlError>
      break;
 800bcce:	e000      	b.n	800bcd2 <USBD_ClrFeature+0x3c>
      break;
 800bcd0:	bf00      	nop
  }
}
 800bcd2:	bf00      	nop
 800bcd4:	3708      	adds	r7, #8
 800bcd6:	46bd      	mov	sp, r7
 800bcd8:	bd80      	pop	{r7, pc}

0800bcda <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800bcda:	b580      	push	{r7, lr}
 800bcdc:	b084      	sub	sp, #16
 800bcde:	af00      	add	r7, sp, #0
 800bce0:	6078      	str	r0, [r7, #4]
 800bce2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800bce4:	683b      	ldr	r3, [r7, #0]
 800bce6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800bce8:	68fb      	ldr	r3, [r7, #12]
 800bcea:	781a      	ldrb	r2, [r3, #0]
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800bcf0:	68fb      	ldr	r3, [r7, #12]
 800bcf2:	3301      	adds	r3, #1
 800bcf4:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800bcf6:	68fb      	ldr	r3, [r7, #12]
 800bcf8:	781a      	ldrb	r2, [r3, #0]
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800bcfe:	68fb      	ldr	r3, [r7, #12]
 800bd00:	3301      	adds	r3, #1
 800bd02:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800bd04:	68f8      	ldr	r0, [r7, #12]
 800bd06:	f7ff fa41 	bl	800b18c <SWAPBYTE>
 800bd0a:	4603      	mov	r3, r0
 800bd0c:	461a      	mov	r2, r3
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800bd12:	68fb      	ldr	r3, [r7, #12]
 800bd14:	3301      	adds	r3, #1
 800bd16:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800bd18:	68fb      	ldr	r3, [r7, #12]
 800bd1a:	3301      	adds	r3, #1
 800bd1c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800bd1e:	68f8      	ldr	r0, [r7, #12]
 800bd20:	f7ff fa34 	bl	800b18c <SWAPBYTE>
 800bd24:	4603      	mov	r3, r0
 800bd26:	461a      	mov	r2, r3
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800bd2c:	68fb      	ldr	r3, [r7, #12]
 800bd2e:	3301      	adds	r3, #1
 800bd30:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800bd32:	68fb      	ldr	r3, [r7, #12]
 800bd34:	3301      	adds	r3, #1
 800bd36:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800bd38:	68f8      	ldr	r0, [r7, #12]
 800bd3a:	f7ff fa27 	bl	800b18c <SWAPBYTE>
 800bd3e:	4603      	mov	r3, r0
 800bd40:	461a      	mov	r2, r3
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	80da      	strh	r2, [r3, #6]
}
 800bd46:	bf00      	nop
 800bd48:	3710      	adds	r7, #16
 800bd4a:	46bd      	mov	sp, r7
 800bd4c:	bd80      	pop	{r7, pc}

0800bd4e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bd4e:	b580      	push	{r7, lr}
 800bd50:	b082      	sub	sp, #8
 800bd52:	af00      	add	r7, sp, #0
 800bd54:	6078      	str	r0, [r7, #4]
 800bd56:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800bd58:	2180      	movs	r1, #128	; 0x80
 800bd5a:	6878      	ldr	r0, [r7, #4]
 800bd5c:	f003 ff24 	bl	800fba8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800bd60:	2100      	movs	r1, #0
 800bd62:	6878      	ldr	r0, [r7, #4]
 800bd64:	f003 ff20 	bl	800fba8 <USBD_LL_StallEP>
}
 800bd68:	bf00      	nop
 800bd6a:	3708      	adds	r7, #8
 800bd6c:	46bd      	mov	sp, r7
 800bd6e:	bd80      	pop	{r7, pc}

0800bd70 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800bd70:	b580      	push	{r7, lr}
 800bd72:	b086      	sub	sp, #24
 800bd74:	af00      	add	r7, sp, #0
 800bd76:	60f8      	str	r0, [r7, #12]
 800bd78:	60b9      	str	r1, [r7, #8]
 800bd7a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800bd7c:	2300      	movs	r3, #0
 800bd7e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800bd80:	68fb      	ldr	r3, [r7, #12]
 800bd82:	2b00      	cmp	r3, #0
 800bd84:	d036      	beq.n	800bdf4 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800bd86:	68fb      	ldr	r3, [r7, #12]
 800bd88:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800bd8a:	6938      	ldr	r0, [r7, #16]
 800bd8c:	f000 f836 	bl	800bdfc <USBD_GetLen>
 800bd90:	4603      	mov	r3, r0
 800bd92:	3301      	adds	r3, #1
 800bd94:	b29b      	uxth	r3, r3
 800bd96:	005b      	lsls	r3, r3, #1
 800bd98:	b29a      	uxth	r2, r3
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800bd9e:	7dfb      	ldrb	r3, [r7, #23]
 800bda0:	68ba      	ldr	r2, [r7, #8]
 800bda2:	4413      	add	r3, r2
 800bda4:	687a      	ldr	r2, [r7, #4]
 800bda6:	7812      	ldrb	r2, [r2, #0]
 800bda8:	701a      	strb	r2, [r3, #0]
  idx++;
 800bdaa:	7dfb      	ldrb	r3, [r7, #23]
 800bdac:	3301      	adds	r3, #1
 800bdae:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800bdb0:	7dfb      	ldrb	r3, [r7, #23]
 800bdb2:	68ba      	ldr	r2, [r7, #8]
 800bdb4:	4413      	add	r3, r2
 800bdb6:	2203      	movs	r2, #3
 800bdb8:	701a      	strb	r2, [r3, #0]
  idx++;
 800bdba:	7dfb      	ldrb	r3, [r7, #23]
 800bdbc:	3301      	adds	r3, #1
 800bdbe:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800bdc0:	e013      	b.n	800bdea <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800bdc2:	7dfb      	ldrb	r3, [r7, #23]
 800bdc4:	68ba      	ldr	r2, [r7, #8]
 800bdc6:	4413      	add	r3, r2
 800bdc8:	693a      	ldr	r2, [r7, #16]
 800bdca:	7812      	ldrb	r2, [r2, #0]
 800bdcc:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800bdce:	693b      	ldr	r3, [r7, #16]
 800bdd0:	3301      	adds	r3, #1
 800bdd2:	613b      	str	r3, [r7, #16]
    idx++;
 800bdd4:	7dfb      	ldrb	r3, [r7, #23]
 800bdd6:	3301      	adds	r3, #1
 800bdd8:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800bdda:	7dfb      	ldrb	r3, [r7, #23]
 800bddc:	68ba      	ldr	r2, [r7, #8]
 800bdde:	4413      	add	r3, r2
 800bde0:	2200      	movs	r2, #0
 800bde2:	701a      	strb	r2, [r3, #0]
    idx++;
 800bde4:	7dfb      	ldrb	r3, [r7, #23]
 800bde6:	3301      	adds	r3, #1
 800bde8:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800bdea:	693b      	ldr	r3, [r7, #16]
 800bdec:	781b      	ldrb	r3, [r3, #0]
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	d1e7      	bne.n	800bdc2 <USBD_GetString+0x52>
 800bdf2:	e000      	b.n	800bdf6 <USBD_GetString+0x86>
    return;
 800bdf4:	bf00      	nop
  }
}
 800bdf6:	3718      	adds	r7, #24
 800bdf8:	46bd      	mov	sp, r7
 800bdfa:	bd80      	pop	{r7, pc}

0800bdfc <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800bdfc:	b480      	push	{r7}
 800bdfe:	b085      	sub	sp, #20
 800be00:	af00      	add	r7, sp, #0
 800be02:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800be04:	2300      	movs	r3, #0
 800be06:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800be0c:	e005      	b.n	800be1a <USBD_GetLen+0x1e>
  {
    len++;
 800be0e:	7bfb      	ldrb	r3, [r7, #15]
 800be10:	3301      	adds	r3, #1
 800be12:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800be14:	68bb      	ldr	r3, [r7, #8]
 800be16:	3301      	adds	r3, #1
 800be18:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800be1a:	68bb      	ldr	r3, [r7, #8]
 800be1c:	781b      	ldrb	r3, [r3, #0]
 800be1e:	2b00      	cmp	r3, #0
 800be20:	d1f5      	bne.n	800be0e <USBD_GetLen+0x12>
  }

  return len;
 800be22:	7bfb      	ldrb	r3, [r7, #15]
}
 800be24:	4618      	mov	r0, r3
 800be26:	3714      	adds	r7, #20
 800be28:	46bd      	mov	sp, r7
 800be2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be2e:	4770      	bx	lr

0800be30 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800be30:	b580      	push	{r7, lr}
 800be32:	b084      	sub	sp, #16
 800be34:	af00      	add	r7, sp, #0
 800be36:	60f8      	str	r0, [r7, #12]
 800be38:	60b9      	str	r1, [r7, #8]
 800be3a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800be3c:	68fb      	ldr	r3, [r7, #12]
 800be3e:	2202      	movs	r2, #2
 800be40:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800be44:	68fb      	ldr	r3, [r7, #12]
 800be46:	687a      	ldr	r2, [r7, #4]
 800be48:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800be4a:	68fb      	ldr	r3, [r7, #12]
 800be4c:	687a      	ldr	r2, [r7, #4]
 800be4e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	68ba      	ldr	r2, [r7, #8]
 800be54:	2100      	movs	r1, #0
 800be56:	68f8      	ldr	r0, [r7, #12]
 800be58:	f003 ff2f 	bl	800fcba <USBD_LL_Transmit>

  return USBD_OK;
 800be5c:	2300      	movs	r3, #0
}
 800be5e:	4618      	mov	r0, r3
 800be60:	3710      	adds	r7, #16
 800be62:	46bd      	mov	sp, r7
 800be64:	bd80      	pop	{r7, pc}

0800be66 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800be66:	b580      	push	{r7, lr}
 800be68:	b084      	sub	sp, #16
 800be6a:	af00      	add	r7, sp, #0
 800be6c:	60f8      	str	r0, [r7, #12]
 800be6e:	60b9      	str	r1, [r7, #8]
 800be70:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	68ba      	ldr	r2, [r7, #8]
 800be76:	2100      	movs	r1, #0
 800be78:	68f8      	ldr	r0, [r7, #12]
 800be7a:	f003 ff1e 	bl	800fcba <USBD_LL_Transmit>

  return USBD_OK;
 800be7e:	2300      	movs	r3, #0
}
 800be80:	4618      	mov	r0, r3
 800be82:	3710      	adds	r7, #16
 800be84:	46bd      	mov	sp, r7
 800be86:	bd80      	pop	{r7, pc}

0800be88 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800be88:	b580      	push	{r7, lr}
 800be8a:	b084      	sub	sp, #16
 800be8c:	af00      	add	r7, sp, #0
 800be8e:	60f8      	str	r0, [r7, #12]
 800be90:	60b9      	str	r1, [r7, #8]
 800be92:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800be94:	68fb      	ldr	r3, [r7, #12]
 800be96:	2203      	movs	r2, #3
 800be98:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800be9c:	68fb      	ldr	r3, [r7, #12]
 800be9e:	687a      	ldr	r2, [r7, #4]
 800bea0:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800bea4:	68fb      	ldr	r3, [r7, #12]
 800bea6:	687a      	ldr	r2, [r7, #4]
 800bea8:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	68ba      	ldr	r2, [r7, #8]
 800beb0:	2100      	movs	r1, #0
 800beb2:	68f8      	ldr	r0, [r7, #12]
 800beb4:	f003 ff22 	bl	800fcfc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800beb8:	2300      	movs	r3, #0
}
 800beba:	4618      	mov	r0, r3
 800bebc:	3710      	adds	r7, #16
 800bebe:	46bd      	mov	sp, r7
 800bec0:	bd80      	pop	{r7, pc}

0800bec2 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800bec2:	b580      	push	{r7, lr}
 800bec4:	b084      	sub	sp, #16
 800bec6:	af00      	add	r7, sp, #0
 800bec8:	60f8      	str	r0, [r7, #12]
 800beca:	60b9      	str	r1, [r7, #8]
 800becc:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	68ba      	ldr	r2, [r7, #8]
 800bed2:	2100      	movs	r1, #0
 800bed4:	68f8      	ldr	r0, [r7, #12]
 800bed6:	f003 ff11 	bl	800fcfc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800beda:	2300      	movs	r3, #0
}
 800bedc:	4618      	mov	r0, r3
 800bede:	3710      	adds	r7, #16
 800bee0:	46bd      	mov	sp, r7
 800bee2:	bd80      	pop	{r7, pc}

0800bee4 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800bee4:	b580      	push	{r7, lr}
 800bee6:	b082      	sub	sp, #8
 800bee8:	af00      	add	r7, sp, #0
 800beea:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	2204      	movs	r2, #4
 800bef0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800bef4:	2300      	movs	r3, #0
 800bef6:	2200      	movs	r2, #0
 800bef8:	2100      	movs	r1, #0
 800befa:	6878      	ldr	r0, [r7, #4]
 800befc:	f003 fedd 	bl	800fcba <USBD_LL_Transmit>

  return USBD_OK;
 800bf00:	2300      	movs	r3, #0
}
 800bf02:	4618      	mov	r0, r3
 800bf04:	3708      	adds	r7, #8
 800bf06:	46bd      	mov	sp, r7
 800bf08:	bd80      	pop	{r7, pc}

0800bf0a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800bf0a:	b580      	push	{r7, lr}
 800bf0c:	b082      	sub	sp, #8
 800bf0e:	af00      	add	r7, sp, #0
 800bf10:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	2205      	movs	r2, #5
 800bf16:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bf1a:	2300      	movs	r3, #0
 800bf1c:	2200      	movs	r2, #0
 800bf1e:	2100      	movs	r1, #0
 800bf20:	6878      	ldr	r0, [r7, #4]
 800bf22:	f003 feeb 	bl	800fcfc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bf26:	2300      	movs	r3, #0
}
 800bf28:	4618      	mov	r0, r3
 800bf2a:	3708      	adds	r7, #8
 800bf2c:	46bd      	mov	sp, r7
 800bf2e:	bd80      	pop	{r7, pc}

0800bf30 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800bf30:	b580      	push	{r7, lr}
 800bf32:	b084      	sub	sp, #16
 800bf34:	af00      	add	r7, sp, #0
 800bf36:	4603      	mov	r3, r0
 800bf38:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800bf3a:	79fb      	ldrb	r3, [r7, #7]
 800bf3c:	4a08      	ldr	r2, [pc, #32]	; (800bf60 <disk_status+0x30>)
 800bf3e:	009b      	lsls	r3, r3, #2
 800bf40:	4413      	add	r3, r2
 800bf42:	685b      	ldr	r3, [r3, #4]
 800bf44:	685b      	ldr	r3, [r3, #4]
 800bf46:	79fa      	ldrb	r2, [r7, #7]
 800bf48:	4905      	ldr	r1, [pc, #20]	; (800bf60 <disk_status+0x30>)
 800bf4a:	440a      	add	r2, r1
 800bf4c:	7a12      	ldrb	r2, [r2, #8]
 800bf4e:	4610      	mov	r0, r2
 800bf50:	4798      	blx	r3
 800bf52:	4603      	mov	r3, r0
 800bf54:	73fb      	strb	r3, [r7, #15]
  return stat;
 800bf56:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf58:	4618      	mov	r0, r3
 800bf5a:	3710      	adds	r7, #16
 800bf5c:	46bd      	mov	sp, r7
 800bf5e:	bd80      	pop	{r7, pc}
 800bf60:	20000d3c 	.word	0x20000d3c

0800bf64 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800bf64:	b580      	push	{r7, lr}
 800bf66:	b084      	sub	sp, #16
 800bf68:	af00      	add	r7, sp, #0
 800bf6a:	4603      	mov	r3, r0
 800bf6c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800bf6e:	2300      	movs	r3, #0
 800bf70:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800bf72:	79fb      	ldrb	r3, [r7, #7]
 800bf74:	4a0e      	ldr	r2, [pc, #56]	; (800bfb0 <disk_initialize+0x4c>)
 800bf76:	5cd3      	ldrb	r3, [r2, r3]
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	d114      	bne.n	800bfa6 <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800bf7c:	79fb      	ldrb	r3, [r7, #7]
 800bf7e:	4a0c      	ldr	r2, [pc, #48]	; (800bfb0 <disk_initialize+0x4c>)
 800bf80:	009b      	lsls	r3, r3, #2
 800bf82:	4413      	add	r3, r2
 800bf84:	685b      	ldr	r3, [r3, #4]
 800bf86:	681b      	ldr	r3, [r3, #0]
 800bf88:	79fa      	ldrb	r2, [r7, #7]
 800bf8a:	4909      	ldr	r1, [pc, #36]	; (800bfb0 <disk_initialize+0x4c>)
 800bf8c:	440a      	add	r2, r1
 800bf8e:	7a12      	ldrb	r2, [r2, #8]
 800bf90:	4610      	mov	r0, r2
 800bf92:	4798      	blx	r3
 800bf94:	4603      	mov	r3, r0
 800bf96:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 800bf98:	7bfb      	ldrb	r3, [r7, #15]
 800bf9a:	2b00      	cmp	r3, #0
 800bf9c:	d103      	bne.n	800bfa6 <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 800bf9e:	79fb      	ldrb	r3, [r7, #7]
 800bfa0:	4a03      	ldr	r2, [pc, #12]	; (800bfb0 <disk_initialize+0x4c>)
 800bfa2:	2101      	movs	r1, #1
 800bfa4:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 800bfa6:	7bfb      	ldrb	r3, [r7, #15]
}
 800bfa8:	4618      	mov	r0, r3
 800bfaa:	3710      	adds	r7, #16
 800bfac:	46bd      	mov	sp, r7
 800bfae:	bd80      	pop	{r7, pc}
 800bfb0:	20000d3c 	.word	0x20000d3c

0800bfb4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800bfb4:	b590      	push	{r4, r7, lr}
 800bfb6:	b087      	sub	sp, #28
 800bfb8:	af00      	add	r7, sp, #0
 800bfba:	60b9      	str	r1, [r7, #8]
 800bfbc:	607a      	str	r2, [r7, #4]
 800bfbe:	603b      	str	r3, [r7, #0]
 800bfc0:	4603      	mov	r3, r0
 800bfc2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800bfc4:	7bfb      	ldrb	r3, [r7, #15]
 800bfc6:	4a0a      	ldr	r2, [pc, #40]	; (800bff0 <disk_read+0x3c>)
 800bfc8:	009b      	lsls	r3, r3, #2
 800bfca:	4413      	add	r3, r2
 800bfcc:	685b      	ldr	r3, [r3, #4]
 800bfce:	689c      	ldr	r4, [r3, #8]
 800bfd0:	7bfb      	ldrb	r3, [r7, #15]
 800bfd2:	4a07      	ldr	r2, [pc, #28]	; (800bff0 <disk_read+0x3c>)
 800bfd4:	4413      	add	r3, r2
 800bfd6:	7a18      	ldrb	r0, [r3, #8]
 800bfd8:	683b      	ldr	r3, [r7, #0]
 800bfda:	687a      	ldr	r2, [r7, #4]
 800bfdc:	68b9      	ldr	r1, [r7, #8]
 800bfde:	47a0      	blx	r4
 800bfe0:	4603      	mov	r3, r0
 800bfe2:	75fb      	strb	r3, [r7, #23]
  return res;
 800bfe4:	7dfb      	ldrb	r3, [r7, #23]
}
 800bfe6:	4618      	mov	r0, r3
 800bfe8:	371c      	adds	r7, #28
 800bfea:	46bd      	mov	sp, r7
 800bfec:	bd90      	pop	{r4, r7, pc}
 800bfee:	bf00      	nop
 800bff0:	20000d3c 	.word	0x20000d3c

0800bff4 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800bff4:	b590      	push	{r4, r7, lr}
 800bff6:	b087      	sub	sp, #28
 800bff8:	af00      	add	r7, sp, #0
 800bffa:	60b9      	str	r1, [r7, #8]
 800bffc:	607a      	str	r2, [r7, #4]
 800bffe:	603b      	str	r3, [r7, #0]
 800c000:	4603      	mov	r3, r0
 800c002:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800c004:	7bfb      	ldrb	r3, [r7, #15]
 800c006:	4a0a      	ldr	r2, [pc, #40]	; (800c030 <disk_write+0x3c>)
 800c008:	009b      	lsls	r3, r3, #2
 800c00a:	4413      	add	r3, r2
 800c00c:	685b      	ldr	r3, [r3, #4]
 800c00e:	68dc      	ldr	r4, [r3, #12]
 800c010:	7bfb      	ldrb	r3, [r7, #15]
 800c012:	4a07      	ldr	r2, [pc, #28]	; (800c030 <disk_write+0x3c>)
 800c014:	4413      	add	r3, r2
 800c016:	7a18      	ldrb	r0, [r3, #8]
 800c018:	683b      	ldr	r3, [r7, #0]
 800c01a:	687a      	ldr	r2, [r7, #4]
 800c01c:	68b9      	ldr	r1, [r7, #8]
 800c01e:	47a0      	blx	r4
 800c020:	4603      	mov	r3, r0
 800c022:	75fb      	strb	r3, [r7, #23]
  return res;
 800c024:	7dfb      	ldrb	r3, [r7, #23]
}
 800c026:	4618      	mov	r0, r3
 800c028:	371c      	adds	r7, #28
 800c02a:	46bd      	mov	sp, r7
 800c02c:	bd90      	pop	{r4, r7, pc}
 800c02e:	bf00      	nop
 800c030:	20000d3c 	.word	0x20000d3c

0800c034 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800c034:	b580      	push	{r7, lr}
 800c036:	b084      	sub	sp, #16
 800c038:	af00      	add	r7, sp, #0
 800c03a:	4603      	mov	r3, r0
 800c03c:	603a      	str	r2, [r7, #0]
 800c03e:	71fb      	strb	r3, [r7, #7]
 800c040:	460b      	mov	r3, r1
 800c042:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800c044:	79fb      	ldrb	r3, [r7, #7]
 800c046:	4a09      	ldr	r2, [pc, #36]	; (800c06c <disk_ioctl+0x38>)
 800c048:	009b      	lsls	r3, r3, #2
 800c04a:	4413      	add	r3, r2
 800c04c:	685b      	ldr	r3, [r3, #4]
 800c04e:	691b      	ldr	r3, [r3, #16]
 800c050:	79fa      	ldrb	r2, [r7, #7]
 800c052:	4906      	ldr	r1, [pc, #24]	; (800c06c <disk_ioctl+0x38>)
 800c054:	440a      	add	r2, r1
 800c056:	7a10      	ldrb	r0, [r2, #8]
 800c058:	79b9      	ldrb	r1, [r7, #6]
 800c05a:	683a      	ldr	r2, [r7, #0]
 800c05c:	4798      	blx	r3
 800c05e:	4603      	mov	r3, r0
 800c060:	73fb      	strb	r3, [r7, #15]
  return res;
 800c062:	7bfb      	ldrb	r3, [r7, #15]
}
 800c064:	4618      	mov	r0, r3
 800c066:	3710      	adds	r7, #16
 800c068:	46bd      	mov	sp, r7
 800c06a:	bd80      	pop	{r7, pc}
 800c06c:	20000d3c 	.word	0x20000d3c

0800c070 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800c070:	b480      	push	{r7}
 800c072:	b085      	sub	sp, #20
 800c074:	af00      	add	r7, sp, #0
 800c076:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	3301      	adds	r3, #1
 800c07c:	781b      	ldrb	r3, [r3, #0]
 800c07e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800c080:	89fb      	ldrh	r3, [r7, #14]
 800c082:	021b      	lsls	r3, r3, #8
 800c084:	b21a      	sxth	r2, r3
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	781b      	ldrb	r3, [r3, #0]
 800c08a:	b21b      	sxth	r3, r3
 800c08c:	4313      	orrs	r3, r2
 800c08e:	b21b      	sxth	r3, r3
 800c090:	81fb      	strh	r3, [r7, #14]
	return rv;
 800c092:	89fb      	ldrh	r3, [r7, #14]
}
 800c094:	4618      	mov	r0, r3
 800c096:	3714      	adds	r7, #20
 800c098:	46bd      	mov	sp, r7
 800c09a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c09e:	4770      	bx	lr

0800c0a0 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800c0a0:	b480      	push	{r7}
 800c0a2:	b085      	sub	sp, #20
 800c0a4:	af00      	add	r7, sp, #0
 800c0a6:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	3303      	adds	r3, #3
 800c0ac:	781b      	ldrb	r3, [r3, #0]
 800c0ae:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800c0b0:	68fb      	ldr	r3, [r7, #12]
 800c0b2:	021b      	lsls	r3, r3, #8
 800c0b4:	687a      	ldr	r2, [r7, #4]
 800c0b6:	3202      	adds	r2, #2
 800c0b8:	7812      	ldrb	r2, [r2, #0]
 800c0ba:	4313      	orrs	r3, r2
 800c0bc:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800c0be:	68fb      	ldr	r3, [r7, #12]
 800c0c0:	021b      	lsls	r3, r3, #8
 800c0c2:	687a      	ldr	r2, [r7, #4]
 800c0c4:	3201      	adds	r2, #1
 800c0c6:	7812      	ldrb	r2, [r2, #0]
 800c0c8:	4313      	orrs	r3, r2
 800c0ca:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800c0cc:	68fb      	ldr	r3, [r7, #12]
 800c0ce:	021b      	lsls	r3, r3, #8
 800c0d0:	687a      	ldr	r2, [r7, #4]
 800c0d2:	7812      	ldrb	r2, [r2, #0]
 800c0d4:	4313      	orrs	r3, r2
 800c0d6:	60fb      	str	r3, [r7, #12]
	return rv;
 800c0d8:	68fb      	ldr	r3, [r7, #12]
}
 800c0da:	4618      	mov	r0, r3
 800c0dc:	3714      	adds	r7, #20
 800c0de:	46bd      	mov	sp, r7
 800c0e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0e4:	4770      	bx	lr

0800c0e6 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800c0e6:	b480      	push	{r7}
 800c0e8:	b083      	sub	sp, #12
 800c0ea:	af00      	add	r7, sp, #0
 800c0ec:	6078      	str	r0, [r7, #4]
 800c0ee:	460b      	mov	r3, r1
 800c0f0:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	1c5a      	adds	r2, r3, #1
 800c0f6:	607a      	str	r2, [r7, #4]
 800c0f8:	887a      	ldrh	r2, [r7, #2]
 800c0fa:	b2d2      	uxtb	r2, r2
 800c0fc:	701a      	strb	r2, [r3, #0]
 800c0fe:	887b      	ldrh	r3, [r7, #2]
 800c100:	0a1b      	lsrs	r3, r3, #8
 800c102:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	1c5a      	adds	r2, r3, #1
 800c108:	607a      	str	r2, [r7, #4]
 800c10a:	887a      	ldrh	r2, [r7, #2]
 800c10c:	b2d2      	uxtb	r2, r2
 800c10e:	701a      	strb	r2, [r3, #0]
}
 800c110:	bf00      	nop
 800c112:	370c      	adds	r7, #12
 800c114:	46bd      	mov	sp, r7
 800c116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c11a:	4770      	bx	lr

0800c11c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800c11c:	b480      	push	{r7}
 800c11e:	b083      	sub	sp, #12
 800c120:	af00      	add	r7, sp, #0
 800c122:	6078      	str	r0, [r7, #4]
 800c124:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	1c5a      	adds	r2, r3, #1
 800c12a:	607a      	str	r2, [r7, #4]
 800c12c:	683a      	ldr	r2, [r7, #0]
 800c12e:	b2d2      	uxtb	r2, r2
 800c130:	701a      	strb	r2, [r3, #0]
 800c132:	683b      	ldr	r3, [r7, #0]
 800c134:	0a1b      	lsrs	r3, r3, #8
 800c136:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	1c5a      	adds	r2, r3, #1
 800c13c:	607a      	str	r2, [r7, #4]
 800c13e:	683a      	ldr	r2, [r7, #0]
 800c140:	b2d2      	uxtb	r2, r2
 800c142:	701a      	strb	r2, [r3, #0]
 800c144:	683b      	ldr	r3, [r7, #0]
 800c146:	0a1b      	lsrs	r3, r3, #8
 800c148:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	1c5a      	adds	r2, r3, #1
 800c14e:	607a      	str	r2, [r7, #4]
 800c150:	683a      	ldr	r2, [r7, #0]
 800c152:	b2d2      	uxtb	r2, r2
 800c154:	701a      	strb	r2, [r3, #0]
 800c156:	683b      	ldr	r3, [r7, #0]
 800c158:	0a1b      	lsrs	r3, r3, #8
 800c15a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	1c5a      	adds	r2, r3, #1
 800c160:	607a      	str	r2, [r7, #4]
 800c162:	683a      	ldr	r2, [r7, #0]
 800c164:	b2d2      	uxtb	r2, r2
 800c166:	701a      	strb	r2, [r3, #0]
}
 800c168:	bf00      	nop
 800c16a:	370c      	adds	r7, #12
 800c16c:	46bd      	mov	sp, r7
 800c16e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c172:	4770      	bx	lr

0800c174 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800c174:	b480      	push	{r7}
 800c176:	b087      	sub	sp, #28
 800c178:	af00      	add	r7, sp, #0
 800c17a:	60f8      	str	r0, [r7, #12]
 800c17c:	60b9      	str	r1, [r7, #8]
 800c17e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800c180:	68fb      	ldr	r3, [r7, #12]
 800c182:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800c184:	68bb      	ldr	r3, [r7, #8]
 800c186:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	2b00      	cmp	r3, #0
 800c18c:	d00d      	beq.n	800c1aa <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800c18e:	693a      	ldr	r2, [r7, #16]
 800c190:	1c53      	adds	r3, r2, #1
 800c192:	613b      	str	r3, [r7, #16]
 800c194:	697b      	ldr	r3, [r7, #20]
 800c196:	1c59      	adds	r1, r3, #1
 800c198:	6179      	str	r1, [r7, #20]
 800c19a:	7812      	ldrb	r2, [r2, #0]
 800c19c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	3b01      	subs	r3, #1
 800c1a2:	607b      	str	r3, [r7, #4]
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	2b00      	cmp	r3, #0
 800c1a8:	d1f1      	bne.n	800c18e <mem_cpy+0x1a>
	}
}
 800c1aa:	bf00      	nop
 800c1ac:	371c      	adds	r7, #28
 800c1ae:	46bd      	mov	sp, r7
 800c1b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1b4:	4770      	bx	lr

0800c1b6 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800c1b6:	b480      	push	{r7}
 800c1b8:	b087      	sub	sp, #28
 800c1ba:	af00      	add	r7, sp, #0
 800c1bc:	60f8      	str	r0, [r7, #12]
 800c1be:	60b9      	str	r1, [r7, #8]
 800c1c0:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800c1c2:	68fb      	ldr	r3, [r7, #12]
 800c1c4:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800c1c6:	697b      	ldr	r3, [r7, #20]
 800c1c8:	1c5a      	adds	r2, r3, #1
 800c1ca:	617a      	str	r2, [r7, #20]
 800c1cc:	68ba      	ldr	r2, [r7, #8]
 800c1ce:	b2d2      	uxtb	r2, r2
 800c1d0:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	3b01      	subs	r3, #1
 800c1d6:	607b      	str	r3, [r7, #4]
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	2b00      	cmp	r3, #0
 800c1dc:	d1f3      	bne.n	800c1c6 <mem_set+0x10>
}
 800c1de:	bf00      	nop
 800c1e0:	bf00      	nop
 800c1e2:	371c      	adds	r7, #28
 800c1e4:	46bd      	mov	sp, r7
 800c1e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1ea:	4770      	bx	lr

0800c1ec <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800c1ec:	b480      	push	{r7}
 800c1ee:	b089      	sub	sp, #36	; 0x24
 800c1f0:	af00      	add	r7, sp, #0
 800c1f2:	60f8      	str	r0, [r7, #12]
 800c1f4:	60b9      	str	r1, [r7, #8]
 800c1f6:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800c1f8:	68fb      	ldr	r3, [r7, #12]
 800c1fa:	61fb      	str	r3, [r7, #28]
 800c1fc:	68bb      	ldr	r3, [r7, #8]
 800c1fe:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800c200:	2300      	movs	r3, #0
 800c202:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800c204:	69fb      	ldr	r3, [r7, #28]
 800c206:	1c5a      	adds	r2, r3, #1
 800c208:	61fa      	str	r2, [r7, #28]
 800c20a:	781b      	ldrb	r3, [r3, #0]
 800c20c:	4619      	mov	r1, r3
 800c20e:	69bb      	ldr	r3, [r7, #24]
 800c210:	1c5a      	adds	r2, r3, #1
 800c212:	61ba      	str	r2, [r7, #24]
 800c214:	781b      	ldrb	r3, [r3, #0]
 800c216:	1acb      	subs	r3, r1, r3
 800c218:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	3b01      	subs	r3, #1
 800c21e:	607b      	str	r3, [r7, #4]
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	2b00      	cmp	r3, #0
 800c224:	d002      	beq.n	800c22c <mem_cmp+0x40>
 800c226:	697b      	ldr	r3, [r7, #20]
 800c228:	2b00      	cmp	r3, #0
 800c22a:	d0eb      	beq.n	800c204 <mem_cmp+0x18>

	return r;
 800c22c:	697b      	ldr	r3, [r7, #20]
}
 800c22e:	4618      	mov	r0, r3
 800c230:	3724      	adds	r7, #36	; 0x24
 800c232:	46bd      	mov	sp, r7
 800c234:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c238:	4770      	bx	lr

0800c23a <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800c23a:	b480      	push	{r7}
 800c23c:	b083      	sub	sp, #12
 800c23e:	af00      	add	r7, sp, #0
 800c240:	6078      	str	r0, [r7, #4]
 800c242:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800c244:	e002      	b.n	800c24c <chk_chr+0x12>
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	3301      	adds	r3, #1
 800c24a:	607b      	str	r3, [r7, #4]
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	781b      	ldrb	r3, [r3, #0]
 800c250:	2b00      	cmp	r3, #0
 800c252:	d005      	beq.n	800c260 <chk_chr+0x26>
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	781b      	ldrb	r3, [r3, #0]
 800c258:	461a      	mov	r2, r3
 800c25a:	683b      	ldr	r3, [r7, #0]
 800c25c:	4293      	cmp	r3, r2
 800c25e:	d1f2      	bne.n	800c246 <chk_chr+0xc>
	return *str;
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	781b      	ldrb	r3, [r3, #0]
}
 800c264:	4618      	mov	r0, r3
 800c266:	370c      	adds	r7, #12
 800c268:	46bd      	mov	sp, r7
 800c26a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c26e:	4770      	bx	lr

0800c270 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800c270:	b480      	push	{r7}
 800c272:	b085      	sub	sp, #20
 800c274:	af00      	add	r7, sp, #0
 800c276:	6078      	str	r0, [r7, #4]
 800c278:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800c27a:	2300      	movs	r3, #0
 800c27c:	60bb      	str	r3, [r7, #8]
 800c27e:	68bb      	ldr	r3, [r7, #8]
 800c280:	60fb      	str	r3, [r7, #12]
 800c282:	e029      	b.n	800c2d8 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800c284:	4a27      	ldr	r2, [pc, #156]	; (800c324 <chk_lock+0xb4>)
 800c286:	68fb      	ldr	r3, [r7, #12]
 800c288:	011b      	lsls	r3, r3, #4
 800c28a:	4413      	add	r3, r2
 800c28c:	681b      	ldr	r3, [r3, #0]
 800c28e:	2b00      	cmp	r3, #0
 800c290:	d01d      	beq.n	800c2ce <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800c292:	4a24      	ldr	r2, [pc, #144]	; (800c324 <chk_lock+0xb4>)
 800c294:	68fb      	ldr	r3, [r7, #12]
 800c296:	011b      	lsls	r3, r3, #4
 800c298:	4413      	add	r3, r2
 800c29a:	681a      	ldr	r2, [r3, #0]
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	681b      	ldr	r3, [r3, #0]
 800c2a0:	429a      	cmp	r2, r3
 800c2a2:	d116      	bne.n	800c2d2 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800c2a4:	4a1f      	ldr	r2, [pc, #124]	; (800c324 <chk_lock+0xb4>)
 800c2a6:	68fb      	ldr	r3, [r7, #12]
 800c2a8:	011b      	lsls	r3, r3, #4
 800c2aa:	4413      	add	r3, r2
 800c2ac:	3304      	adds	r3, #4
 800c2ae:	681a      	ldr	r2, [r3, #0]
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800c2b4:	429a      	cmp	r2, r3
 800c2b6:	d10c      	bne.n	800c2d2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800c2b8:	4a1a      	ldr	r2, [pc, #104]	; (800c324 <chk_lock+0xb4>)
 800c2ba:	68fb      	ldr	r3, [r7, #12]
 800c2bc:	011b      	lsls	r3, r3, #4
 800c2be:	4413      	add	r3, r2
 800c2c0:	3308      	adds	r3, #8
 800c2c2:	681a      	ldr	r2, [r3, #0]
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800c2c8:	429a      	cmp	r2, r3
 800c2ca:	d102      	bne.n	800c2d2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800c2cc:	e007      	b.n	800c2de <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800c2ce:	2301      	movs	r3, #1
 800c2d0:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800c2d2:	68fb      	ldr	r3, [r7, #12]
 800c2d4:	3301      	adds	r3, #1
 800c2d6:	60fb      	str	r3, [r7, #12]
 800c2d8:	68fb      	ldr	r3, [r7, #12]
 800c2da:	2b01      	cmp	r3, #1
 800c2dc:	d9d2      	bls.n	800c284 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800c2de:	68fb      	ldr	r3, [r7, #12]
 800c2e0:	2b02      	cmp	r3, #2
 800c2e2:	d109      	bne.n	800c2f8 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800c2e4:	68bb      	ldr	r3, [r7, #8]
 800c2e6:	2b00      	cmp	r3, #0
 800c2e8:	d102      	bne.n	800c2f0 <chk_lock+0x80>
 800c2ea:	683b      	ldr	r3, [r7, #0]
 800c2ec:	2b02      	cmp	r3, #2
 800c2ee:	d101      	bne.n	800c2f4 <chk_lock+0x84>
 800c2f0:	2300      	movs	r3, #0
 800c2f2:	e010      	b.n	800c316 <chk_lock+0xa6>
 800c2f4:	2312      	movs	r3, #18
 800c2f6:	e00e      	b.n	800c316 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800c2f8:	683b      	ldr	r3, [r7, #0]
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	d108      	bne.n	800c310 <chk_lock+0xa0>
 800c2fe:	4a09      	ldr	r2, [pc, #36]	; (800c324 <chk_lock+0xb4>)
 800c300:	68fb      	ldr	r3, [r7, #12]
 800c302:	011b      	lsls	r3, r3, #4
 800c304:	4413      	add	r3, r2
 800c306:	330c      	adds	r3, #12
 800c308:	881b      	ldrh	r3, [r3, #0]
 800c30a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c30e:	d101      	bne.n	800c314 <chk_lock+0xa4>
 800c310:	2310      	movs	r3, #16
 800c312:	e000      	b.n	800c316 <chk_lock+0xa6>
 800c314:	2300      	movs	r3, #0
}
 800c316:	4618      	mov	r0, r3
 800c318:	3714      	adds	r7, #20
 800c31a:	46bd      	mov	sp, r7
 800c31c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c320:	4770      	bx	lr
 800c322:	bf00      	nop
 800c324:	20000d1c 	.word	0x20000d1c

0800c328 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800c328:	b480      	push	{r7}
 800c32a:	b083      	sub	sp, #12
 800c32c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800c32e:	2300      	movs	r3, #0
 800c330:	607b      	str	r3, [r7, #4]
 800c332:	e002      	b.n	800c33a <enq_lock+0x12>
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	3301      	adds	r3, #1
 800c338:	607b      	str	r3, [r7, #4]
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	2b01      	cmp	r3, #1
 800c33e:	d806      	bhi.n	800c34e <enq_lock+0x26>
 800c340:	4a09      	ldr	r2, [pc, #36]	; (800c368 <enq_lock+0x40>)
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	011b      	lsls	r3, r3, #4
 800c346:	4413      	add	r3, r2
 800c348:	681b      	ldr	r3, [r3, #0]
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	d1f2      	bne.n	800c334 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	2b02      	cmp	r3, #2
 800c352:	bf14      	ite	ne
 800c354:	2301      	movne	r3, #1
 800c356:	2300      	moveq	r3, #0
 800c358:	b2db      	uxtb	r3, r3
}
 800c35a:	4618      	mov	r0, r3
 800c35c:	370c      	adds	r7, #12
 800c35e:	46bd      	mov	sp, r7
 800c360:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c364:	4770      	bx	lr
 800c366:	bf00      	nop
 800c368:	20000d1c 	.word	0x20000d1c

0800c36c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800c36c:	b480      	push	{r7}
 800c36e:	b085      	sub	sp, #20
 800c370:	af00      	add	r7, sp, #0
 800c372:	6078      	str	r0, [r7, #4]
 800c374:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800c376:	2300      	movs	r3, #0
 800c378:	60fb      	str	r3, [r7, #12]
 800c37a:	e01f      	b.n	800c3bc <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800c37c:	4a41      	ldr	r2, [pc, #260]	; (800c484 <inc_lock+0x118>)
 800c37e:	68fb      	ldr	r3, [r7, #12]
 800c380:	011b      	lsls	r3, r3, #4
 800c382:	4413      	add	r3, r2
 800c384:	681a      	ldr	r2, [r3, #0]
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	681b      	ldr	r3, [r3, #0]
 800c38a:	429a      	cmp	r2, r3
 800c38c:	d113      	bne.n	800c3b6 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800c38e:	4a3d      	ldr	r2, [pc, #244]	; (800c484 <inc_lock+0x118>)
 800c390:	68fb      	ldr	r3, [r7, #12]
 800c392:	011b      	lsls	r3, r3, #4
 800c394:	4413      	add	r3, r2
 800c396:	3304      	adds	r3, #4
 800c398:	681a      	ldr	r2, [r3, #0]
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800c39e:	429a      	cmp	r2, r3
 800c3a0:	d109      	bne.n	800c3b6 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800c3a2:	4a38      	ldr	r2, [pc, #224]	; (800c484 <inc_lock+0x118>)
 800c3a4:	68fb      	ldr	r3, [r7, #12]
 800c3a6:	011b      	lsls	r3, r3, #4
 800c3a8:	4413      	add	r3, r2
 800c3aa:	3308      	adds	r3, #8
 800c3ac:	681a      	ldr	r2, [r3, #0]
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800c3b2:	429a      	cmp	r2, r3
 800c3b4:	d006      	beq.n	800c3c4 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800c3b6:	68fb      	ldr	r3, [r7, #12]
 800c3b8:	3301      	adds	r3, #1
 800c3ba:	60fb      	str	r3, [r7, #12]
 800c3bc:	68fb      	ldr	r3, [r7, #12]
 800c3be:	2b01      	cmp	r3, #1
 800c3c0:	d9dc      	bls.n	800c37c <inc_lock+0x10>
 800c3c2:	e000      	b.n	800c3c6 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800c3c4:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800c3c6:	68fb      	ldr	r3, [r7, #12]
 800c3c8:	2b02      	cmp	r3, #2
 800c3ca:	d132      	bne.n	800c432 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800c3cc:	2300      	movs	r3, #0
 800c3ce:	60fb      	str	r3, [r7, #12]
 800c3d0:	e002      	b.n	800c3d8 <inc_lock+0x6c>
 800c3d2:	68fb      	ldr	r3, [r7, #12]
 800c3d4:	3301      	adds	r3, #1
 800c3d6:	60fb      	str	r3, [r7, #12]
 800c3d8:	68fb      	ldr	r3, [r7, #12]
 800c3da:	2b01      	cmp	r3, #1
 800c3dc:	d806      	bhi.n	800c3ec <inc_lock+0x80>
 800c3de:	4a29      	ldr	r2, [pc, #164]	; (800c484 <inc_lock+0x118>)
 800c3e0:	68fb      	ldr	r3, [r7, #12]
 800c3e2:	011b      	lsls	r3, r3, #4
 800c3e4:	4413      	add	r3, r2
 800c3e6:	681b      	ldr	r3, [r3, #0]
 800c3e8:	2b00      	cmp	r3, #0
 800c3ea:	d1f2      	bne.n	800c3d2 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800c3ec:	68fb      	ldr	r3, [r7, #12]
 800c3ee:	2b02      	cmp	r3, #2
 800c3f0:	d101      	bne.n	800c3f6 <inc_lock+0x8a>
 800c3f2:	2300      	movs	r3, #0
 800c3f4:	e040      	b.n	800c478 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	681a      	ldr	r2, [r3, #0]
 800c3fa:	4922      	ldr	r1, [pc, #136]	; (800c484 <inc_lock+0x118>)
 800c3fc:	68fb      	ldr	r3, [r7, #12]
 800c3fe:	011b      	lsls	r3, r3, #4
 800c400:	440b      	add	r3, r1
 800c402:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	689a      	ldr	r2, [r3, #8]
 800c408:	491e      	ldr	r1, [pc, #120]	; (800c484 <inc_lock+0x118>)
 800c40a:	68fb      	ldr	r3, [r7, #12]
 800c40c:	011b      	lsls	r3, r3, #4
 800c40e:	440b      	add	r3, r1
 800c410:	3304      	adds	r3, #4
 800c412:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	695a      	ldr	r2, [r3, #20]
 800c418:	491a      	ldr	r1, [pc, #104]	; (800c484 <inc_lock+0x118>)
 800c41a:	68fb      	ldr	r3, [r7, #12]
 800c41c:	011b      	lsls	r3, r3, #4
 800c41e:	440b      	add	r3, r1
 800c420:	3308      	adds	r3, #8
 800c422:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800c424:	4a17      	ldr	r2, [pc, #92]	; (800c484 <inc_lock+0x118>)
 800c426:	68fb      	ldr	r3, [r7, #12]
 800c428:	011b      	lsls	r3, r3, #4
 800c42a:	4413      	add	r3, r2
 800c42c:	330c      	adds	r3, #12
 800c42e:	2200      	movs	r2, #0
 800c430:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800c432:	683b      	ldr	r3, [r7, #0]
 800c434:	2b00      	cmp	r3, #0
 800c436:	d009      	beq.n	800c44c <inc_lock+0xe0>
 800c438:	4a12      	ldr	r2, [pc, #72]	; (800c484 <inc_lock+0x118>)
 800c43a:	68fb      	ldr	r3, [r7, #12]
 800c43c:	011b      	lsls	r3, r3, #4
 800c43e:	4413      	add	r3, r2
 800c440:	330c      	adds	r3, #12
 800c442:	881b      	ldrh	r3, [r3, #0]
 800c444:	2b00      	cmp	r3, #0
 800c446:	d001      	beq.n	800c44c <inc_lock+0xe0>
 800c448:	2300      	movs	r3, #0
 800c44a:	e015      	b.n	800c478 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800c44c:	683b      	ldr	r3, [r7, #0]
 800c44e:	2b00      	cmp	r3, #0
 800c450:	d108      	bne.n	800c464 <inc_lock+0xf8>
 800c452:	4a0c      	ldr	r2, [pc, #48]	; (800c484 <inc_lock+0x118>)
 800c454:	68fb      	ldr	r3, [r7, #12]
 800c456:	011b      	lsls	r3, r3, #4
 800c458:	4413      	add	r3, r2
 800c45a:	330c      	adds	r3, #12
 800c45c:	881b      	ldrh	r3, [r3, #0]
 800c45e:	3301      	adds	r3, #1
 800c460:	b29a      	uxth	r2, r3
 800c462:	e001      	b.n	800c468 <inc_lock+0xfc>
 800c464:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c468:	4906      	ldr	r1, [pc, #24]	; (800c484 <inc_lock+0x118>)
 800c46a:	68fb      	ldr	r3, [r7, #12]
 800c46c:	011b      	lsls	r3, r3, #4
 800c46e:	440b      	add	r3, r1
 800c470:	330c      	adds	r3, #12
 800c472:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800c474:	68fb      	ldr	r3, [r7, #12]
 800c476:	3301      	adds	r3, #1
}
 800c478:	4618      	mov	r0, r3
 800c47a:	3714      	adds	r7, #20
 800c47c:	46bd      	mov	sp, r7
 800c47e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c482:	4770      	bx	lr
 800c484:	20000d1c 	.word	0x20000d1c

0800c488 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800c488:	b480      	push	{r7}
 800c48a:	b085      	sub	sp, #20
 800c48c:	af00      	add	r7, sp, #0
 800c48e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	3b01      	subs	r3, #1
 800c494:	607b      	str	r3, [r7, #4]
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	2b01      	cmp	r3, #1
 800c49a:	d825      	bhi.n	800c4e8 <dec_lock+0x60>
		n = Files[i].ctr;
 800c49c:	4a17      	ldr	r2, [pc, #92]	; (800c4fc <dec_lock+0x74>)
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	011b      	lsls	r3, r3, #4
 800c4a2:	4413      	add	r3, r2
 800c4a4:	330c      	adds	r3, #12
 800c4a6:	881b      	ldrh	r3, [r3, #0]
 800c4a8:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800c4aa:	89fb      	ldrh	r3, [r7, #14]
 800c4ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c4b0:	d101      	bne.n	800c4b6 <dec_lock+0x2e>
 800c4b2:	2300      	movs	r3, #0
 800c4b4:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800c4b6:	89fb      	ldrh	r3, [r7, #14]
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	d002      	beq.n	800c4c2 <dec_lock+0x3a>
 800c4bc:	89fb      	ldrh	r3, [r7, #14]
 800c4be:	3b01      	subs	r3, #1
 800c4c0:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800c4c2:	4a0e      	ldr	r2, [pc, #56]	; (800c4fc <dec_lock+0x74>)
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	011b      	lsls	r3, r3, #4
 800c4c8:	4413      	add	r3, r2
 800c4ca:	330c      	adds	r3, #12
 800c4cc:	89fa      	ldrh	r2, [r7, #14]
 800c4ce:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800c4d0:	89fb      	ldrh	r3, [r7, #14]
 800c4d2:	2b00      	cmp	r3, #0
 800c4d4:	d105      	bne.n	800c4e2 <dec_lock+0x5a>
 800c4d6:	4a09      	ldr	r2, [pc, #36]	; (800c4fc <dec_lock+0x74>)
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	011b      	lsls	r3, r3, #4
 800c4dc:	4413      	add	r3, r2
 800c4de:	2200      	movs	r2, #0
 800c4e0:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800c4e2:	2300      	movs	r3, #0
 800c4e4:	737b      	strb	r3, [r7, #13]
 800c4e6:	e001      	b.n	800c4ec <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800c4e8:	2302      	movs	r3, #2
 800c4ea:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800c4ec:	7b7b      	ldrb	r3, [r7, #13]
}
 800c4ee:	4618      	mov	r0, r3
 800c4f0:	3714      	adds	r7, #20
 800c4f2:	46bd      	mov	sp, r7
 800c4f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4f8:	4770      	bx	lr
 800c4fa:	bf00      	nop
 800c4fc:	20000d1c 	.word	0x20000d1c

0800c500 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800c500:	b480      	push	{r7}
 800c502:	b085      	sub	sp, #20
 800c504:	af00      	add	r7, sp, #0
 800c506:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800c508:	2300      	movs	r3, #0
 800c50a:	60fb      	str	r3, [r7, #12]
 800c50c:	e010      	b.n	800c530 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800c50e:	4a0d      	ldr	r2, [pc, #52]	; (800c544 <clear_lock+0x44>)
 800c510:	68fb      	ldr	r3, [r7, #12]
 800c512:	011b      	lsls	r3, r3, #4
 800c514:	4413      	add	r3, r2
 800c516:	681b      	ldr	r3, [r3, #0]
 800c518:	687a      	ldr	r2, [r7, #4]
 800c51a:	429a      	cmp	r2, r3
 800c51c:	d105      	bne.n	800c52a <clear_lock+0x2a>
 800c51e:	4a09      	ldr	r2, [pc, #36]	; (800c544 <clear_lock+0x44>)
 800c520:	68fb      	ldr	r3, [r7, #12]
 800c522:	011b      	lsls	r3, r3, #4
 800c524:	4413      	add	r3, r2
 800c526:	2200      	movs	r2, #0
 800c528:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800c52a:	68fb      	ldr	r3, [r7, #12]
 800c52c:	3301      	adds	r3, #1
 800c52e:	60fb      	str	r3, [r7, #12]
 800c530:	68fb      	ldr	r3, [r7, #12]
 800c532:	2b01      	cmp	r3, #1
 800c534:	d9eb      	bls.n	800c50e <clear_lock+0xe>
	}
}
 800c536:	bf00      	nop
 800c538:	bf00      	nop
 800c53a:	3714      	adds	r7, #20
 800c53c:	46bd      	mov	sp, r7
 800c53e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c542:	4770      	bx	lr
 800c544:	20000d1c 	.word	0x20000d1c

0800c548 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800c548:	b580      	push	{r7, lr}
 800c54a:	b086      	sub	sp, #24
 800c54c:	af00      	add	r7, sp, #0
 800c54e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800c550:	2300      	movs	r3, #0
 800c552:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	78db      	ldrb	r3, [r3, #3]
 800c558:	2b00      	cmp	r3, #0
 800c55a:	d034      	beq.n	800c5c6 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c560:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	7858      	ldrb	r0, [r3, #1]
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c56c:	2301      	movs	r3, #1
 800c56e:	697a      	ldr	r2, [r7, #20]
 800c570:	f7ff fd40 	bl	800bff4 <disk_write>
 800c574:	4603      	mov	r3, r0
 800c576:	2b00      	cmp	r3, #0
 800c578:	d002      	beq.n	800c580 <sync_window+0x38>
			res = FR_DISK_ERR;
 800c57a:	2301      	movs	r3, #1
 800c57c:	73fb      	strb	r3, [r7, #15]
 800c57e:	e022      	b.n	800c5c6 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	2200      	movs	r2, #0
 800c584:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	6a1b      	ldr	r3, [r3, #32]
 800c58a:	697a      	ldr	r2, [r7, #20]
 800c58c:	1ad2      	subs	r2, r2, r3
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	699b      	ldr	r3, [r3, #24]
 800c592:	429a      	cmp	r2, r3
 800c594:	d217      	bcs.n	800c5c6 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	789b      	ldrb	r3, [r3, #2]
 800c59a:	613b      	str	r3, [r7, #16]
 800c59c:	e010      	b.n	800c5c0 <sync_window+0x78>
					wsect += fs->fsize;
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	699b      	ldr	r3, [r3, #24]
 800c5a2:	697a      	ldr	r2, [r7, #20]
 800c5a4:	4413      	add	r3, r2
 800c5a6:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	7858      	ldrb	r0, [r3, #1]
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c5b2:	2301      	movs	r3, #1
 800c5b4:	697a      	ldr	r2, [r7, #20]
 800c5b6:	f7ff fd1d 	bl	800bff4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800c5ba:	693b      	ldr	r3, [r7, #16]
 800c5bc:	3b01      	subs	r3, #1
 800c5be:	613b      	str	r3, [r7, #16]
 800c5c0:	693b      	ldr	r3, [r7, #16]
 800c5c2:	2b01      	cmp	r3, #1
 800c5c4:	d8eb      	bhi.n	800c59e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800c5c6:	7bfb      	ldrb	r3, [r7, #15]
}
 800c5c8:	4618      	mov	r0, r3
 800c5ca:	3718      	adds	r7, #24
 800c5cc:	46bd      	mov	sp, r7
 800c5ce:	bd80      	pop	{r7, pc}

0800c5d0 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800c5d0:	b580      	push	{r7, lr}
 800c5d2:	b084      	sub	sp, #16
 800c5d4:	af00      	add	r7, sp, #0
 800c5d6:	6078      	str	r0, [r7, #4]
 800c5d8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800c5da:	2300      	movs	r3, #0
 800c5dc:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c5e2:	683a      	ldr	r2, [r7, #0]
 800c5e4:	429a      	cmp	r2, r3
 800c5e6:	d01b      	beq.n	800c620 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800c5e8:	6878      	ldr	r0, [r7, #4]
 800c5ea:	f7ff ffad 	bl	800c548 <sync_window>
 800c5ee:	4603      	mov	r3, r0
 800c5f0:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800c5f2:	7bfb      	ldrb	r3, [r7, #15]
 800c5f4:	2b00      	cmp	r3, #0
 800c5f6:	d113      	bne.n	800c620 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	7858      	ldrb	r0, [r3, #1]
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c602:	2301      	movs	r3, #1
 800c604:	683a      	ldr	r2, [r7, #0]
 800c606:	f7ff fcd5 	bl	800bfb4 <disk_read>
 800c60a:	4603      	mov	r3, r0
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	d004      	beq.n	800c61a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800c610:	f04f 33ff 	mov.w	r3, #4294967295
 800c614:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800c616:	2301      	movs	r3, #1
 800c618:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	683a      	ldr	r2, [r7, #0]
 800c61e:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 800c620:	7bfb      	ldrb	r3, [r7, #15]
}
 800c622:	4618      	mov	r0, r3
 800c624:	3710      	adds	r7, #16
 800c626:	46bd      	mov	sp, r7
 800c628:	bd80      	pop	{r7, pc}
	...

0800c62c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800c62c:	b580      	push	{r7, lr}
 800c62e:	b084      	sub	sp, #16
 800c630:	af00      	add	r7, sp, #0
 800c632:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800c634:	6878      	ldr	r0, [r7, #4]
 800c636:	f7ff ff87 	bl	800c548 <sync_window>
 800c63a:	4603      	mov	r3, r0
 800c63c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800c63e:	7bfb      	ldrb	r3, [r7, #15]
 800c640:	2b00      	cmp	r3, #0
 800c642:	d158      	bne.n	800c6f6 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	781b      	ldrb	r3, [r3, #0]
 800c648:	2b03      	cmp	r3, #3
 800c64a:	d148      	bne.n	800c6de <sync_fs+0xb2>
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	791b      	ldrb	r3, [r3, #4]
 800c650:	2b01      	cmp	r3, #1
 800c652:	d144      	bne.n	800c6de <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	3330      	adds	r3, #48	; 0x30
 800c658:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c65c:	2100      	movs	r1, #0
 800c65e:	4618      	mov	r0, r3
 800c660:	f7ff fda9 	bl	800c1b6 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	3330      	adds	r3, #48	; 0x30
 800c668:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800c66c:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800c670:	4618      	mov	r0, r3
 800c672:	f7ff fd38 	bl	800c0e6 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	3330      	adds	r3, #48	; 0x30
 800c67a:	4921      	ldr	r1, [pc, #132]	; (800c700 <sync_fs+0xd4>)
 800c67c:	4618      	mov	r0, r3
 800c67e:	f7ff fd4d 	bl	800c11c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	3330      	adds	r3, #48	; 0x30
 800c686:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800c68a:	491e      	ldr	r1, [pc, #120]	; (800c704 <sync_fs+0xd8>)
 800c68c:	4618      	mov	r0, r3
 800c68e:	f7ff fd45 	bl	800c11c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	3330      	adds	r3, #48	; 0x30
 800c696:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	691b      	ldr	r3, [r3, #16]
 800c69e:	4619      	mov	r1, r3
 800c6a0:	4610      	mov	r0, r2
 800c6a2:	f7ff fd3b 	bl	800c11c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	3330      	adds	r3, #48	; 0x30
 800c6aa:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	68db      	ldr	r3, [r3, #12]
 800c6b2:	4619      	mov	r1, r3
 800c6b4:	4610      	mov	r0, r2
 800c6b6:	f7ff fd31 	bl	800c11c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	69db      	ldr	r3, [r3, #28]
 800c6be:	1c5a      	adds	r2, r3, #1
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	7858      	ldrb	r0, [r3, #1]
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c6d2:	2301      	movs	r3, #1
 800c6d4:	f7ff fc8e 	bl	800bff4 <disk_write>
			fs->fsi_flag = 0;
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	2200      	movs	r2, #0
 800c6dc:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	785b      	ldrb	r3, [r3, #1]
 800c6e2:	2200      	movs	r2, #0
 800c6e4:	2100      	movs	r1, #0
 800c6e6:	4618      	mov	r0, r3
 800c6e8:	f7ff fca4 	bl	800c034 <disk_ioctl>
 800c6ec:	4603      	mov	r3, r0
 800c6ee:	2b00      	cmp	r3, #0
 800c6f0:	d001      	beq.n	800c6f6 <sync_fs+0xca>
 800c6f2:	2301      	movs	r3, #1
 800c6f4:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800c6f6:	7bfb      	ldrb	r3, [r7, #15]
}
 800c6f8:	4618      	mov	r0, r3
 800c6fa:	3710      	adds	r7, #16
 800c6fc:	46bd      	mov	sp, r7
 800c6fe:	bd80      	pop	{r7, pc}
 800c700:	41615252 	.word	0x41615252
 800c704:	61417272 	.word	0x61417272

0800c708 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800c708:	b480      	push	{r7}
 800c70a:	b083      	sub	sp, #12
 800c70c:	af00      	add	r7, sp, #0
 800c70e:	6078      	str	r0, [r7, #4]
 800c710:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800c712:	683b      	ldr	r3, [r7, #0]
 800c714:	3b02      	subs	r3, #2
 800c716:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	695b      	ldr	r3, [r3, #20]
 800c71c:	3b02      	subs	r3, #2
 800c71e:	683a      	ldr	r2, [r7, #0]
 800c720:	429a      	cmp	r2, r3
 800c722:	d301      	bcc.n	800c728 <clust2sect+0x20>
 800c724:	2300      	movs	r3, #0
 800c726:	e008      	b.n	800c73a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	895b      	ldrh	r3, [r3, #10]
 800c72c:	461a      	mov	r2, r3
 800c72e:	683b      	ldr	r3, [r7, #0]
 800c730:	fb03 f202 	mul.w	r2, r3, r2
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c738:	4413      	add	r3, r2
}
 800c73a:	4618      	mov	r0, r3
 800c73c:	370c      	adds	r7, #12
 800c73e:	46bd      	mov	sp, r7
 800c740:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c744:	4770      	bx	lr

0800c746 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800c746:	b580      	push	{r7, lr}
 800c748:	b086      	sub	sp, #24
 800c74a:	af00      	add	r7, sp, #0
 800c74c:	6078      	str	r0, [r7, #4]
 800c74e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	681b      	ldr	r3, [r3, #0]
 800c754:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800c756:	683b      	ldr	r3, [r7, #0]
 800c758:	2b01      	cmp	r3, #1
 800c75a:	d904      	bls.n	800c766 <get_fat+0x20>
 800c75c:	693b      	ldr	r3, [r7, #16]
 800c75e:	695b      	ldr	r3, [r3, #20]
 800c760:	683a      	ldr	r2, [r7, #0]
 800c762:	429a      	cmp	r2, r3
 800c764:	d302      	bcc.n	800c76c <get_fat+0x26>
		val = 1;	/* Internal error */
 800c766:	2301      	movs	r3, #1
 800c768:	617b      	str	r3, [r7, #20]
 800c76a:	e08f      	b.n	800c88c <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800c76c:	f04f 33ff 	mov.w	r3, #4294967295
 800c770:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800c772:	693b      	ldr	r3, [r7, #16]
 800c774:	781b      	ldrb	r3, [r3, #0]
 800c776:	2b03      	cmp	r3, #3
 800c778:	d062      	beq.n	800c840 <get_fat+0xfa>
 800c77a:	2b03      	cmp	r3, #3
 800c77c:	dc7c      	bgt.n	800c878 <get_fat+0x132>
 800c77e:	2b01      	cmp	r3, #1
 800c780:	d002      	beq.n	800c788 <get_fat+0x42>
 800c782:	2b02      	cmp	r3, #2
 800c784:	d042      	beq.n	800c80c <get_fat+0xc6>
 800c786:	e077      	b.n	800c878 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800c788:	683b      	ldr	r3, [r7, #0]
 800c78a:	60fb      	str	r3, [r7, #12]
 800c78c:	68fb      	ldr	r3, [r7, #12]
 800c78e:	085b      	lsrs	r3, r3, #1
 800c790:	68fa      	ldr	r2, [r7, #12]
 800c792:	4413      	add	r3, r2
 800c794:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c796:	693b      	ldr	r3, [r7, #16]
 800c798:	6a1a      	ldr	r2, [r3, #32]
 800c79a:	68fb      	ldr	r3, [r7, #12]
 800c79c:	0a5b      	lsrs	r3, r3, #9
 800c79e:	4413      	add	r3, r2
 800c7a0:	4619      	mov	r1, r3
 800c7a2:	6938      	ldr	r0, [r7, #16]
 800c7a4:	f7ff ff14 	bl	800c5d0 <move_window>
 800c7a8:	4603      	mov	r3, r0
 800c7aa:	2b00      	cmp	r3, #0
 800c7ac:	d167      	bne.n	800c87e <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800c7ae:	68fb      	ldr	r3, [r7, #12]
 800c7b0:	1c5a      	adds	r2, r3, #1
 800c7b2:	60fa      	str	r2, [r7, #12]
 800c7b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c7b8:	693a      	ldr	r2, [r7, #16]
 800c7ba:	4413      	add	r3, r2
 800c7bc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c7c0:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c7c2:	693b      	ldr	r3, [r7, #16]
 800c7c4:	6a1a      	ldr	r2, [r3, #32]
 800c7c6:	68fb      	ldr	r3, [r7, #12]
 800c7c8:	0a5b      	lsrs	r3, r3, #9
 800c7ca:	4413      	add	r3, r2
 800c7cc:	4619      	mov	r1, r3
 800c7ce:	6938      	ldr	r0, [r7, #16]
 800c7d0:	f7ff fefe 	bl	800c5d0 <move_window>
 800c7d4:	4603      	mov	r3, r0
 800c7d6:	2b00      	cmp	r3, #0
 800c7d8:	d153      	bne.n	800c882 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800c7da:	68fb      	ldr	r3, [r7, #12]
 800c7dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c7e0:	693a      	ldr	r2, [r7, #16]
 800c7e2:	4413      	add	r3, r2
 800c7e4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c7e8:	021b      	lsls	r3, r3, #8
 800c7ea:	461a      	mov	r2, r3
 800c7ec:	68bb      	ldr	r3, [r7, #8]
 800c7ee:	4313      	orrs	r3, r2
 800c7f0:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800c7f2:	683b      	ldr	r3, [r7, #0]
 800c7f4:	f003 0301 	and.w	r3, r3, #1
 800c7f8:	2b00      	cmp	r3, #0
 800c7fa:	d002      	beq.n	800c802 <get_fat+0xbc>
 800c7fc:	68bb      	ldr	r3, [r7, #8]
 800c7fe:	091b      	lsrs	r3, r3, #4
 800c800:	e002      	b.n	800c808 <get_fat+0xc2>
 800c802:	68bb      	ldr	r3, [r7, #8]
 800c804:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c808:	617b      	str	r3, [r7, #20]
			break;
 800c80a:	e03f      	b.n	800c88c <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800c80c:	693b      	ldr	r3, [r7, #16]
 800c80e:	6a1a      	ldr	r2, [r3, #32]
 800c810:	683b      	ldr	r3, [r7, #0]
 800c812:	0a1b      	lsrs	r3, r3, #8
 800c814:	4413      	add	r3, r2
 800c816:	4619      	mov	r1, r3
 800c818:	6938      	ldr	r0, [r7, #16]
 800c81a:	f7ff fed9 	bl	800c5d0 <move_window>
 800c81e:	4603      	mov	r3, r0
 800c820:	2b00      	cmp	r3, #0
 800c822:	d130      	bne.n	800c886 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800c824:	693b      	ldr	r3, [r7, #16]
 800c826:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c82a:	683b      	ldr	r3, [r7, #0]
 800c82c:	005b      	lsls	r3, r3, #1
 800c82e:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800c832:	4413      	add	r3, r2
 800c834:	4618      	mov	r0, r3
 800c836:	f7ff fc1b 	bl	800c070 <ld_word>
 800c83a:	4603      	mov	r3, r0
 800c83c:	617b      	str	r3, [r7, #20]
			break;
 800c83e:	e025      	b.n	800c88c <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800c840:	693b      	ldr	r3, [r7, #16]
 800c842:	6a1a      	ldr	r2, [r3, #32]
 800c844:	683b      	ldr	r3, [r7, #0]
 800c846:	09db      	lsrs	r3, r3, #7
 800c848:	4413      	add	r3, r2
 800c84a:	4619      	mov	r1, r3
 800c84c:	6938      	ldr	r0, [r7, #16]
 800c84e:	f7ff febf 	bl	800c5d0 <move_window>
 800c852:	4603      	mov	r3, r0
 800c854:	2b00      	cmp	r3, #0
 800c856:	d118      	bne.n	800c88a <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800c858:	693b      	ldr	r3, [r7, #16]
 800c85a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c85e:	683b      	ldr	r3, [r7, #0]
 800c860:	009b      	lsls	r3, r3, #2
 800c862:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800c866:	4413      	add	r3, r2
 800c868:	4618      	mov	r0, r3
 800c86a:	f7ff fc19 	bl	800c0a0 <ld_dword>
 800c86e:	4603      	mov	r3, r0
 800c870:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800c874:	617b      	str	r3, [r7, #20]
			break;
 800c876:	e009      	b.n	800c88c <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800c878:	2301      	movs	r3, #1
 800c87a:	617b      	str	r3, [r7, #20]
 800c87c:	e006      	b.n	800c88c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c87e:	bf00      	nop
 800c880:	e004      	b.n	800c88c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c882:	bf00      	nop
 800c884:	e002      	b.n	800c88c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800c886:	bf00      	nop
 800c888:	e000      	b.n	800c88c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800c88a:	bf00      	nop
		}
	}

	return val;
 800c88c:	697b      	ldr	r3, [r7, #20]
}
 800c88e:	4618      	mov	r0, r3
 800c890:	3718      	adds	r7, #24
 800c892:	46bd      	mov	sp, r7
 800c894:	bd80      	pop	{r7, pc}

0800c896 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800c896:	b590      	push	{r4, r7, lr}
 800c898:	b089      	sub	sp, #36	; 0x24
 800c89a:	af00      	add	r7, sp, #0
 800c89c:	60f8      	str	r0, [r7, #12]
 800c89e:	60b9      	str	r1, [r7, #8]
 800c8a0:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800c8a2:	2302      	movs	r3, #2
 800c8a4:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800c8a6:	68bb      	ldr	r3, [r7, #8]
 800c8a8:	2b01      	cmp	r3, #1
 800c8aa:	f240 80d9 	bls.w	800ca60 <put_fat+0x1ca>
 800c8ae:	68fb      	ldr	r3, [r7, #12]
 800c8b0:	695b      	ldr	r3, [r3, #20]
 800c8b2:	68ba      	ldr	r2, [r7, #8]
 800c8b4:	429a      	cmp	r2, r3
 800c8b6:	f080 80d3 	bcs.w	800ca60 <put_fat+0x1ca>
		switch (fs->fs_type) {
 800c8ba:	68fb      	ldr	r3, [r7, #12]
 800c8bc:	781b      	ldrb	r3, [r3, #0]
 800c8be:	2b03      	cmp	r3, #3
 800c8c0:	f000 8096 	beq.w	800c9f0 <put_fat+0x15a>
 800c8c4:	2b03      	cmp	r3, #3
 800c8c6:	f300 80cb 	bgt.w	800ca60 <put_fat+0x1ca>
 800c8ca:	2b01      	cmp	r3, #1
 800c8cc:	d002      	beq.n	800c8d4 <put_fat+0x3e>
 800c8ce:	2b02      	cmp	r3, #2
 800c8d0:	d06e      	beq.n	800c9b0 <put_fat+0x11a>
 800c8d2:	e0c5      	b.n	800ca60 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800c8d4:	68bb      	ldr	r3, [r7, #8]
 800c8d6:	61bb      	str	r3, [r7, #24]
 800c8d8:	69bb      	ldr	r3, [r7, #24]
 800c8da:	085b      	lsrs	r3, r3, #1
 800c8dc:	69ba      	ldr	r2, [r7, #24]
 800c8de:	4413      	add	r3, r2
 800c8e0:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800c8e2:	68fb      	ldr	r3, [r7, #12]
 800c8e4:	6a1a      	ldr	r2, [r3, #32]
 800c8e6:	69bb      	ldr	r3, [r7, #24]
 800c8e8:	0a5b      	lsrs	r3, r3, #9
 800c8ea:	4413      	add	r3, r2
 800c8ec:	4619      	mov	r1, r3
 800c8ee:	68f8      	ldr	r0, [r7, #12]
 800c8f0:	f7ff fe6e 	bl	800c5d0 <move_window>
 800c8f4:	4603      	mov	r3, r0
 800c8f6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c8f8:	7ffb      	ldrb	r3, [r7, #31]
 800c8fa:	2b00      	cmp	r3, #0
 800c8fc:	f040 80a9 	bne.w	800ca52 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800c900:	68fb      	ldr	r3, [r7, #12]
 800c902:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c906:	69bb      	ldr	r3, [r7, #24]
 800c908:	1c59      	adds	r1, r3, #1
 800c90a:	61b9      	str	r1, [r7, #24]
 800c90c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c910:	4413      	add	r3, r2
 800c912:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800c914:	68bb      	ldr	r3, [r7, #8]
 800c916:	f003 0301 	and.w	r3, r3, #1
 800c91a:	2b00      	cmp	r3, #0
 800c91c:	d00d      	beq.n	800c93a <put_fat+0xa4>
 800c91e:	697b      	ldr	r3, [r7, #20]
 800c920:	781b      	ldrb	r3, [r3, #0]
 800c922:	b25b      	sxtb	r3, r3
 800c924:	f003 030f 	and.w	r3, r3, #15
 800c928:	b25a      	sxtb	r2, r3
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	b2db      	uxtb	r3, r3
 800c92e:	011b      	lsls	r3, r3, #4
 800c930:	b25b      	sxtb	r3, r3
 800c932:	4313      	orrs	r3, r2
 800c934:	b25b      	sxtb	r3, r3
 800c936:	b2db      	uxtb	r3, r3
 800c938:	e001      	b.n	800c93e <put_fat+0xa8>
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	b2db      	uxtb	r3, r3
 800c93e:	697a      	ldr	r2, [r7, #20]
 800c940:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800c942:	68fb      	ldr	r3, [r7, #12]
 800c944:	2201      	movs	r2, #1
 800c946:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800c948:	68fb      	ldr	r3, [r7, #12]
 800c94a:	6a1a      	ldr	r2, [r3, #32]
 800c94c:	69bb      	ldr	r3, [r7, #24]
 800c94e:	0a5b      	lsrs	r3, r3, #9
 800c950:	4413      	add	r3, r2
 800c952:	4619      	mov	r1, r3
 800c954:	68f8      	ldr	r0, [r7, #12]
 800c956:	f7ff fe3b 	bl	800c5d0 <move_window>
 800c95a:	4603      	mov	r3, r0
 800c95c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c95e:	7ffb      	ldrb	r3, [r7, #31]
 800c960:	2b00      	cmp	r3, #0
 800c962:	d178      	bne.n	800ca56 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800c964:	68fb      	ldr	r3, [r7, #12]
 800c966:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c96a:	69bb      	ldr	r3, [r7, #24]
 800c96c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c970:	4413      	add	r3, r2
 800c972:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800c974:	68bb      	ldr	r3, [r7, #8]
 800c976:	f003 0301 	and.w	r3, r3, #1
 800c97a:	2b00      	cmp	r3, #0
 800c97c:	d003      	beq.n	800c986 <put_fat+0xf0>
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	091b      	lsrs	r3, r3, #4
 800c982:	b2db      	uxtb	r3, r3
 800c984:	e00e      	b.n	800c9a4 <put_fat+0x10e>
 800c986:	697b      	ldr	r3, [r7, #20]
 800c988:	781b      	ldrb	r3, [r3, #0]
 800c98a:	b25b      	sxtb	r3, r3
 800c98c:	f023 030f 	bic.w	r3, r3, #15
 800c990:	b25a      	sxtb	r2, r3
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	0a1b      	lsrs	r3, r3, #8
 800c996:	b25b      	sxtb	r3, r3
 800c998:	f003 030f 	and.w	r3, r3, #15
 800c99c:	b25b      	sxtb	r3, r3
 800c99e:	4313      	orrs	r3, r2
 800c9a0:	b25b      	sxtb	r3, r3
 800c9a2:	b2db      	uxtb	r3, r3
 800c9a4:	697a      	ldr	r2, [r7, #20]
 800c9a6:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800c9a8:	68fb      	ldr	r3, [r7, #12]
 800c9aa:	2201      	movs	r2, #1
 800c9ac:	70da      	strb	r2, [r3, #3]
			break;
 800c9ae:	e057      	b.n	800ca60 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800c9b0:	68fb      	ldr	r3, [r7, #12]
 800c9b2:	6a1a      	ldr	r2, [r3, #32]
 800c9b4:	68bb      	ldr	r3, [r7, #8]
 800c9b6:	0a1b      	lsrs	r3, r3, #8
 800c9b8:	4413      	add	r3, r2
 800c9ba:	4619      	mov	r1, r3
 800c9bc:	68f8      	ldr	r0, [r7, #12]
 800c9be:	f7ff fe07 	bl	800c5d0 <move_window>
 800c9c2:	4603      	mov	r3, r0
 800c9c4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c9c6:	7ffb      	ldrb	r3, [r7, #31]
 800c9c8:	2b00      	cmp	r3, #0
 800c9ca:	d146      	bne.n	800ca5a <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800c9cc:	68fb      	ldr	r3, [r7, #12]
 800c9ce:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c9d2:	68bb      	ldr	r3, [r7, #8]
 800c9d4:	005b      	lsls	r3, r3, #1
 800c9d6:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800c9da:	4413      	add	r3, r2
 800c9dc:	687a      	ldr	r2, [r7, #4]
 800c9de:	b292      	uxth	r2, r2
 800c9e0:	4611      	mov	r1, r2
 800c9e2:	4618      	mov	r0, r3
 800c9e4:	f7ff fb7f 	bl	800c0e6 <st_word>
			fs->wflag = 1;
 800c9e8:	68fb      	ldr	r3, [r7, #12]
 800c9ea:	2201      	movs	r2, #1
 800c9ec:	70da      	strb	r2, [r3, #3]
			break;
 800c9ee:	e037      	b.n	800ca60 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800c9f0:	68fb      	ldr	r3, [r7, #12]
 800c9f2:	6a1a      	ldr	r2, [r3, #32]
 800c9f4:	68bb      	ldr	r3, [r7, #8]
 800c9f6:	09db      	lsrs	r3, r3, #7
 800c9f8:	4413      	add	r3, r2
 800c9fa:	4619      	mov	r1, r3
 800c9fc:	68f8      	ldr	r0, [r7, #12]
 800c9fe:	f7ff fde7 	bl	800c5d0 <move_window>
 800ca02:	4603      	mov	r3, r0
 800ca04:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ca06:	7ffb      	ldrb	r3, [r7, #31]
 800ca08:	2b00      	cmp	r3, #0
 800ca0a:	d128      	bne.n	800ca5e <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800ca12:	68fb      	ldr	r3, [r7, #12]
 800ca14:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ca18:	68bb      	ldr	r3, [r7, #8]
 800ca1a:	009b      	lsls	r3, r3, #2
 800ca1c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800ca20:	4413      	add	r3, r2
 800ca22:	4618      	mov	r0, r3
 800ca24:	f7ff fb3c 	bl	800c0a0 <ld_dword>
 800ca28:	4603      	mov	r3, r0
 800ca2a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800ca2e:	4323      	orrs	r3, r4
 800ca30:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800ca32:	68fb      	ldr	r3, [r7, #12]
 800ca34:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ca38:	68bb      	ldr	r3, [r7, #8]
 800ca3a:	009b      	lsls	r3, r3, #2
 800ca3c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800ca40:	4413      	add	r3, r2
 800ca42:	6879      	ldr	r1, [r7, #4]
 800ca44:	4618      	mov	r0, r3
 800ca46:	f7ff fb69 	bl	800c11c <st_dword>
			fs->wflag = 1;
 800ca4a:	68fb      	ldr	r3, [r7, #12]
 800ca4c:	2201      	movs	r2, #1
 800ca4e:	70da      	strb	r2, [r3, #3]
			break;
 800ca50:	e006      	b.n	800ca60 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800ca52:	bf00      	nop
 800ca54:	e004      	b.n	800ca60 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800ca56:	bf00      	nop
 800ca58:	e002      	b.n	800ca60 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800ca5a:	bf00      	nop
 800ca5c:	e000      	b.n	800ca60 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800ca5e:	bf00      	nop
		}
	}
	return res;
 800ca60:	7ffb      	ldrb	r3, [r7, #31]
}
 800ca62:	4618      	mov	r0, r3
 800ca64:	3724      	adds	r7, #36	; 0x24
 800ca66:	46bd      	mov	sp, r7
 800ca68:	bd90      	pop	{r4, r7, pc}

0800ca6a <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800ca6a:	b580      	push	{r7, lr}
 800ca6c:	b088      	sub	sp, #32
 800ca6e:	af00      	add	r7, sp, #0
 800ca70:	60f8      	str	r0, [r7, #12]
 800ca72:	60b9      	str	r1, [r7, #8]
 800ca74:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800ca76:	2300      	movs	r3, #0
 800ca78:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800ca7a:	68fb      	ldr	r3, [r7, #12]
 800ca7c:	681b      	ldr	r3, [r3, #0]
 800ca7e:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800ca80:	68bb      	ldr	r3, [r7, #8]
 800ca82:	2b01      	cmp	r3, #1
 800ca84:	d904      	bls.n	800ca90 <remove_chain+0x26>
 800ca86:	69bb      	ldr	r3, [r7, #24]
 800ca88:	695b      	ldr	r3, [r3, #20]
 800ca8a:	68ba      	ldr	r2, [r7, #8]
 800ca8c:	429a      	cmp	r2, r3
 800ca8e:	d301      	bcc.n	800ca94 <remove_chain+0x2a>
 800ca90:	2302      	movs	r3, #2
 800ca92:	e04b      	b.n	800cb2c <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	2b00      	cmp	r3, #0
 800ca98:	d00c      	beq.n	800cab4 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800ca9a:	f04f 32ff 	mov.w	r2, #4294967295
 800ca9e:	6879      	ldr	r1, [r7, #4]
 800caa0:	69b8      	ldr	r0, [r7, #24]
 800caa2:	f7ff fef8 	bl	800c896 <put_fat>
 800caa6:	4603      	mov	r3, r0
 800caa8:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800caaa:	7ffb      	ldrb	r3, [r7, #31]
 800caac:	2b00      	cmp	r3, #0
 800caae:	d001      	beq.n	800cab4 <remove_chain+0x4a>
 800cab0:	7ffb      	ldrb	r3, [r7, #31]
 800cab2:	e03b      	b.n	800cb2c <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800cab4:	68b9      	ldr	r1, [r7, #8]
 800cab6:	68f8      	ldr	r0, [r7, #12]
 800cab8:	f7ff fe45 	bl	800c746 <get_fat>
 800cabc:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800cabe:	697b      	ldr	r3, [r7, #20]
 800cac0:	2b00      	cmp	r3, #0
 800cac2:	d031      	beq.n	800cb28 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800cac4:	697b      	ldr	r3, [r7, #20]
 800cac6:	2b01      	cmp	r3, #1
 800cac8:	d101      	bne.n	800cace <remove_chain+0x64>
 800caca:	2302      	movs	r3, #2
 800cacc:	e02e      	b.n	800cb2c <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800cace:	697b      	ldr	r3, [r7, #20]
 800cad0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cad4:	d101      	bne.n	800cada <remove_chain+0x70>
 800cad6:	2301      	movs	r3, #1
 800cad8:	e028      	b.n	800cb2c <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800cada:	2200      	movs	r2, #0
 800cadc:	68b9      	ldr	r1, [r7, #8]
 800cade:	69b8      	ldr	r0, [r7, #24]
 800cae0:	f7ff fed9 	bl	800c896 <put_fat>
 800cae4:	4603      	mov	r3, r0
 800cae6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800cae8:	7ffb      	ldrb	r3, [r7, #31]
 800caea:	2b00      	cmp	r3, #0
 800caec:	d001      	beq.n	800caf2 <remove_chain+0x88>
 800caee:	7ffb      	ldrb	r3, [r7, #31]
 800caf0:	e01c      	b.n	800cb2c <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800caf2:	69bb      	ldr	r3, [r7, #24]
 800caf4:	691a      	ldr	r2, [r3, #16]
 800caf6:	69bb      	ldr	r3, [r7, #24]
 800caf8:	695b      	ldr	r3, [r3, #20]
 800cafa:	3b02      	subs	r3, #2
 800cafc:	429a      	cmp	r2, r3
 800cafe:	d20b      	bcs.n	800cb18 <remove_chain+0xae>
			fs->free_clst++;
 800cb00:	69bb      	ldr	r3, [r7, #24]
 800cb02:	691b      	ldr	r3, [r3, #16]
 800cb04:	1c5a      	adds	r2, r3, #1
 800cb06:	69bb      	ldr	r3, [r7, #24]
 800cb08:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800cb0a:	69bb      	ldr	r3, [r7, #24]
 800cb0c:	791b      	ldrb	r3, [r3, #4]
 800cb0e:	f043 0301 	orr.w	r3, r3, #1
 800cb12:	b2da      	uxtb	r2, r3
 800cb14:	69bb      	ldr	r3, [r7, #24]
 800cb16:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800cb18:	697b      	ldr	r3, [r7, #20]
 800cb1a:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800cb1c:	69bb      	ldr	r3, [r7, #24]
 800cb1e:	695b      	ldr	r3, [r3, #20]
 800cb20:	68ba      	ldr	r2, [r7, #8]
 800cb22:	429a      	cmp	r2, r3
 800cb24:	d3c6      	bcc.n	800cab4 <remove_chain+0x4a>
 800cb26:	e000      	b.n	800cb2a <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800cb28:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800cb2a:	2300      	movs	r3, #0
}
 800cb2c:	4618      	mov	r0, r3
 800cb2e:	3720      	adds	r7, #32
 800cb30:	46bd      	mov	sp, r7
 800cb32:	bd80      	pop	{r7, pc}

0800cb34 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800cb34:	b580      	push	{r7, lr}
 800cb36:	b088      	sub	sp, #32
 800cb38:	af00      	add	r7, sp, #0
 800cb3a:	6078      	str	r0, [r7, #4]
 800cb3c:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	681b      	ldr	r3, [r3, #0]
 800cb42:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800cb44:	683b      	ldr	r3, [r7, #0]
 800cb46:	2b00      	cmp	r3, #0
 800cb48:	d10d      	bne.n	800cb66 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800cb4a:	693b      	ldr	r3, [r7, #16]
 800cb4c:	68db      	ldr	r3, [r3, #12]
 800cb4e:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800cb50:	69bb      	ldr	r3, [r7, #24]
 800cb52:	2b00      	cmp	r3, #0
 800cb54:	d004      	beq.n	800cb60 <create_chain+0x2c>
 800cb56:	693b      	ldr	r3, [r7, #16]
 800cb58:	695b      	ldr	r3, [r3, #20]
 800cb5a:	69ba      	ldr	r2, [r7, #24]
 800cb5c:	429a      	cmp	r2, r3
 800cb5e:	d31b      	bcc.n	800cb98 <create_chain+0x64>
 800cb60:	2301      	movs	r3, #1
 800cb62:	61bb      	str	r3, [r7, #24]
 800cb64:	e018      	b.n	800cb98 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800cb66:	6839      	ldr	r1, [r7, #0]
 800cb68:	6878      	ldr	r0, [r7, #4]
 800cb6a:	f7ff fdec 	bl	800c746 <get_fat>
 800cb6e:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800cb70:	68fb      	ldr	r3, [r7, #12]
 800cb72:	2b01      	cmp	r3, #1
 800cb74:	d801      	bhi.n	800cb7a <create_chain+0x46>
 800cb76:	2301      	movs	r3, #1
 800cb78:	e070      	b.n	800cc5c <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800cb7a:	68fb      	ldr	r3, [r7, #12]
 800cb7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb80:	d101      	bne.n	800cb86 <create_chain+0x52>
 800cb82:	68fb      	ldr	r3, [r7, #12]
 800cb84:	e06a      	b.n	800cc5c <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800cb86:	693b      	ldr	r3, [r7, #16]
 800cb88:	695b      	ldr	r3, [r3, #20]
 800cb8a:	68fa      	ldr	r2, [r7, #12]
 800cb8c:	429a      	cmp	r2, r3
 800cb8e:	d201      	bcs.n	800cb94 <create_chain+0x60>
 800cb90:	68fb      	ldr	r3, [r7, #12]
 800cb92:	e063      	b.n	800cc5c <create_chain+0x128>
		scl = clst;
 800cb94:	683b      	ldr	r3, [r7, #0]
 800cb96:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800cb98:	69bb      	ldr	r3, [r7, #24]
 800cb9a:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800cb9c:	69fb      	ldr	r3, [r7, #28]
 800cb9e:	3301      	adds	r3, #1
 800cba0:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800cba2:	693b      	ldr	r3, [r7, #16]
 800cba4:	695b      	ldr	r3, [r3, #20]
 800cba6:	69fa      	ldr	r2, [r7, #28]
 800cba8:	429a      	cmp	r2, r3
 800cbaa:	d307      	bcc.n	800cbbc <create_chain+0x88>
				ncl = 2;
 800cbac:	2302      	movs	r3, #2
 800cbae:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800cbb0:	69fa      	ldr	r2, [r7, #28]
 800cbb2:	69bb      	ldr	r3, [r7, #24]
 800cbb4:	429a      	cmp	r2, r3
 800cbb6:	d901      	bls.n	800cbbc <create_chain+0x88>
 800cbb8:	2300      	movs	r3, #0
 800cbba:	e04f      	b.n	800cc5c <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800cbbc:	69f9      	ldr	r1, [r7, #28]
 800cbbe:	6878      	ldr	r0, [r7, #4]
 800cbc0:	f7ff fdc1 	bl	800c746 <get_fat>
 800cbc4:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800cbc6:	68fb      	ldr	r3, [r7, #12]
 800cbc8:	2b00      	cmp	r3, #0
 800cbca:	d00e      	beq.n	800cbea <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800cbcc:	68fb      	ldr	r3, [r7, #12]
 800cbce:	2b01      	cmp	r3, #1
 800cbd0:	d003      	beq.n	800cbda <create_chain+0xa6>
 800cbd2:	68fb      	ldr	r3, [r7, #12]
 800cbd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cbd8:	d101      	bne.n	800cbde <create_chain+0xaa>
 800cbda:	68fb      	ldr	r3, [r7, #12]
 800cbdc:	e03e      	b.n	800cc5c <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800cbde:	69fa      	ldr	r2, [r7, #28]
 800cbe0:	69bb      	ldr	r3, [r7, #24]
 800cbe2:	429a      	cmp	r2, r3
 800cbe4:	d1da      	bne.n	800cb9c <create_chain+0x68>
 800cbe6:	2300      	movs	r3, #0
 800cbe8:	e038      	b.n	800cc5c <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800cbea:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800cbec:	f04f 32ff 	mov.w	r2, #4294967295
 800cbf0:	69f9      	ldr	r1, [r7, #28]
 800cbf2:	6938      	ldr	r0, [r7, #16]
 800cbf4:	f7ff fe4f 	bl	800c896 <put_fat>
 800cbf8:	4603      	mov	r3, r0
 800cbfa:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800cbfc:	7dfb      	ldrb	r3, [r7, #23]
 800cbfe:	2b00      	cmp	r3, #0
 800cc00:	d109      	bne.n	800cc16 <create_chain+0xe2>
 800cc02:	683b      	ldr	r3, [r7, #0]
 800cc04:	2b00      	cmp	r3, #0
 800cc06:	d006      	beq.n	800cc16 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800cc08:	69fa      	ldr	r2, [r7, #28]
 800cc0a:	6839      	ldr	r1, [r7, #0]
 800cc0c:	6938      	ldr	r0, [r7, #16]
 800cc0e:	f7ff fe42 	bl	800c896 <put_fat>
 800cc12:	4603      	mov	r3, r0
 800cc14:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800cc16:	7dfb      	ldrb	r3, [r7, #23]
 800cc18:	2b00      	cmp	r3, #0
 800cc1a:	d116      	bne.n	800cc4a <create_chain+0x116>
		fs->last_clst = ncl;
 800cc1c:	693b      	ldr	r3, [r7, #16]
 800cc1e:	69fa      	ldr	r2, [r7, #28]
 800cc20:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800cc22:	693b      	ldr	r3, [r7, #16]
 800cc24:	691a      	ldr	r2, [r3, #16]
 800cc26:	693b      	ldr	r3, [r7, #16]
 800cc28:	695b      	ldr	r3, [r3, #20]
 800cc2a:	3b02      	subs	r3, #2
 800cc2c:	429a      	cmp	r2, r3
 800cc2e:	d804      	bhi.n	800cc3a <create_chain+0x106>
 800cc30:	693b      	ldr	r3, [r7, #16]
 800cc32:	691b      	ldr	r3, [r3, #16]
 800cc34:	1e5a      	subs	r2, r3, #1
 800cc36:	693b      	ldr	r3, [r7, #16]
 800cc38:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800cc3a:	693b      	ldr	r3, [r7, #16]
 800cc3c:	791b      	ldrb	r3, [r3, #4]
 800cc3e:	f043 0301 	orr.w	r3, r3, #1
 800cc42:	b2da      	uxtb	r2, r3
 800cc44:	693b      	ldr	r3, [r7, #16]
 800cc46:	711a      	strb	r2, [r3, #4]
 800cc48:	e007      	b.n	800cc5a <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800cc4a:	7dfb      	ldrb	r3, [r7, #23]
 800cc4c:	2b01      	cmp	r3, #1
 800cc4e:	d102      	bne.n	800cc56 <create_chain+0x122>
 800cc50:	f04f 33ff 	mov.w	r3, #4294967295
 800cc54:	e000      	b.n	800cc58 <create_chain+0x124>
 800cc56:	2301      	movs	r3, #1
 800cc58:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800cc5a:	69fb      	ldr	r3, [r7, #28]
}
 800cc5c:	4618      	mov	r0, r3
 800cc5e:	3720      	adds	r7, #32
 800cc60:	46bd      	mov	sp, r7
 800cc62:	bd80      	pop	{r7, pc}

0800cc64 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800cc64:	b480      	push	{r7}
 800cc66:	b087      	sub	sp, #28
 800cc68:	af00      	add	r7, sp, #0
 800cc6a:	6078      	str	r0, [r7, #4]
 800cc6c:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	681b      	ldr	r3, [r3, #0]
 800cc72:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc78:	3304      	adds	r3, #4
 800cc7a:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800cc7c:	683b      	ldr	r3, [r7, #0]
 800cc7e:	0a5b      	lsrs	r3, r3, #9
 800cc80:	68fa      	ldr	r2, [r7, #12]
 800cc82:	8952      	ldrh	r2, [r2, #10]
 800cc84:	fbb3 f3f2 	udiv	r3, r3, r2
 800cc88:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800cc8a:	693b      	ldr	r3, [r7, #16]
 800cc8c:	1d1a      	adds	r2, r3, #4
 800cc8e:	613a      	str	r2, [r7, #16]
 800cc90:	681b      	ldr	r3, [r3, #0]
 800cc92:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800cc94:	68bb      	ldr	r3, [r7, #8]
 800cc96:	2b00      	cmp	r3, #0
 800cc98:	d101      	bne.n	800cc9e <clmt_clust+0x3a>
 800cc9a:	2300      	movs	r3, #0
 800cc9c:	e010      	b.n	800ccc0 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800cc9e:	697a      	ldr	r2, [r7, #20]
 800cca0:	68bb      	ldr	r3, [r7, #8]
 800cca2:	429a      	cmp	r2, r3
 800cca4:	d307      	bcc.n	800ccb6 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800cca6:	697a      	ldr	r2, [r7, #20]
 800cca8:	68bb      	ldr	r3, [r7, #8]
 800ccaa:	1ad3      	subs	r3, r2, r3
 800ccac:	617b      	str	r3, [r7, #20]
 800ccae:	693b      	ldr	r3, [r7, #16]
 800ccb0:	3304      	adds	r3, #4
 800ccb2:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800ccb4:	e7e9      	b.n	800cc8a <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800ccb6:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800ccb8:	693b      	ldr	r3, [r7, #16]
 800ccba:	681a      	ldr	r2, [r3, #0]
 800ccbc:	697b      	ldr	r3, [r7, #20]
 800ccbe:	4413      	add	r3, r2
}
 800ccc0:	4618      	mov	r0, r3
 800ccc2:	371c      	adds	r7, #28
 800ccc4:	46bd      	mov	sp, r7
 800ccc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccca:	4770      	bx	lr

0800cccc <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800cccc:	b580      	push	{r7, lr}
 800ccce:	b086      	sub	sp, #24
 800ccd0:	af00      	add	r7, sp, #0
 800ccd2:	6078      	str	r0, [r7, #4]
 800ccd4:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	681b      	ldr	r3, [r3, #0]
 800ccda:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800ccdc:	683b      	ldr	r3, [r7, #0]
 800ccde:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800cce2:	d204      	bcs.n	800ccee <dir_sdi+0x22>
 800cce4:	683b      	ldr	r3, [r7, #0]
 800cce6:	f003 031f 	and.w	r3, r3, #31
 800ccea:	2b00      	cmp	r3, #0
 800ccec:	d001      	beq.n	800ccf2 <dir_sdi+0x26>
		return FR_INT_ERR;
 800ccee:	2302      	movs	r3, #2
 800ccf0:	e063      	b.n	800cdba <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	683a      	ldr	r2, [r7, #0]
 800ccf6:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	689b      	ldr	r3, [r3, #8]
 800ccfc:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800ccfe:	697b      	ldr	r3, [r7, #20]
 800cd00:	2b00      	cmp	r3, #0
 800cd02:	d106      	bne.n	800cd12 <dir_sdi+0x46>
 800cd04:	693b      	ldr	r3, [r7, #16]
 800cd06:	781b      	ldrb	r3, [r3, #0]
 800cd08:	2b02      	cmp	r3, #2
 800cd0a:	d902      	bls.n	800cd12 <dir_sdi+0x46>
		clst = fs->dirbase;
 800cd0c:	693b      	ldr	r3, [r7, #16]
 800cd0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd10:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800cd12:	697b      	ldr	r3, [r7, #20]
 800cd14:	2b00      	cmp	r3, #0
 800cd16:	d10c      	bne.n	800cd32 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800cd18:	683b      	ldr	r3, [r7, #0]
 800cd1a:	095b      	lsrs	r3, r3, #5
 800cd1c:	693a      	ldr	r2, [r7, #16]
 800cd1e:	8912      	ldrh	r2, [r2, #8]
 800cd20:	4293      	cmp	r3, r2
 800cd22:	d301      	bcc.n	800cd28 <dir_sdi+0x5c>
 800cd24:	2302      	movs	r3, #2
 800cd26:	e048      	b.n	800cdba <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800cd28:	693b      	ldr	r3, [r7, #16]
 800cd2a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	61da      	str	r2, [r3, #28]
 800cd30:	e029      	b.n	800cd86 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800cd32:	693b      	ldr	r3, [r7, #16]
 800cd34:	895b      	ldrh	r3, [r3, #10]
 800cd36:	025b      	lsls	r3, r3, #9
 800cd38:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800cd3a:	e019      	b.n	800cd70 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	6979      	ldr	r1, [r7, #20]
 800cd40:	4618      	mov	r0, r3
 800cd42:	f7ff fd00 	bl	800c746 <get_fat>
 800cd46:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800cd48:	697b      	ldr	r3, [r7, #20]
 800cd4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd4e:	d101      	bne.n	800cd54 <dir_sdi+0x88>
 800cd50:	2301      	movs	r3, #1
 800cd52:	e032      	b.n	800cdba <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800cd54:	697b      	ldr	r3, [r7, #20]
 800cd56:	2b01      	cmp	r3, #1
 800cd58:	d904      	bls.n	800cd64 <dir_sdi+0x98>
 800cd5a:	693b      	ldr	r3, [r7, #16]
 800cd5c:	695b      	ldr	r3, [r3, #20]
 800cd5e:	697a      	ldr	r2, [r7, #20]
 800cd60:	429a      	cmp	r2, r3
 800cd62:	d301      	bcc.n	800cd68 <dir_sdi+0x9c>
 800cd64:	2302      	movs	r3, #2
 800cd66:	e028      	b.n	800cdba <dir_sdi+0xee>
			ofs -= csz;
 800cd68:	683a      	ldr	r2, [r7, #0]
 800cd6a:	68fb      	ldr	r3, [r7, #12]
 800cd6c:	1ad3      	subs	r3, r2, r3
 800cd6e:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800cd70:	683a      	ldr	r2, [r7, #0]
 800cd72:	68fb      	ldr	r3, [r7, #12]
 800cd74:	429a      	cmp	r2, r3
 800cd76:	d2e1      	bcs.n	800cd3c <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800cd78:	6979      	ldr	r1, [r7, #20]
 800cd7a:	6938      	ldr	r0, [r7, #16]
 800cd7c:	f7ff fcc4 	bl	800c708 <clust2sect>
 800cd80:	4602      	mov	r2, r0
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	697a      	ldr	r2, [r7, #20]
 800cd8a:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	69db      	ldr	r3, [r3, #28]
 800cd90:	2b00      	cmp	r3, #0
 800cd92:	d101      	bne.n	800cd98 <dir_sdi+0xcc>
 800cd94:	2302      	movs	r3, #2
 800cd96:	e010      	b.n	800cdba <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	69da      	ldr	r2, [r3, #28]
 800cd9c:	683b      	ldr	r3, [r7, #0]
 800cd9e:	0a5b      	lsrs	r3, r3, #9
 800cda0:	441a      	add	r2, r3
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800cda6:	693b      	ldr	r3, [r7, #16]
 800cda8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800cdac:	683b      	ldr	r3, [r7, #0]
 800cdae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cdb2:	441a      	add	r2, r3
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800cdb8:	2300      	movs	r3, #0
}
 800cdba:	4618      	mov	r0, r3
 800cdbc:	3718      	adds	r7, #24
 800cdbe:	46bd      	mov	sp, r7
 800cdc0:	bd80      	pop	{r7, pc}

0800cdc2 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800cdc2:	b580      	push	{r7, lr}
 800cdc4:	b086      	sub	sp, #24
 800cdc6:	af00      	add	r7, sp, #0
 800cdc8:	6078      	str	r0, [r7, #4]
 800cdca:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	681b      	ldr	r3, [r3, #0]
 800cdd0:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	695b      	ldr	r3, [r3, #20]
 800cdd6:	3320      	adds	r3, #32
 800cdd8:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	69db      	ldr	r3, [r3, #28]
 800cdde:	2b00      	cmp	r3, #0
 800cde0:	d003      	beq.n	800cdea <dir_next+0x28>
 800cde2:	68bb      	ldr	r3, [r7, #8]
 800cde4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800cde8:	d301      	bcc.n	800cdee <dir_next+0x2c>
 800cdea:	2304      	movs	r3, #4
 800cdec:	e0aa      	b.n	800cf44 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800cdee:	68bb      	ldr	r3, [r7, #8]
 800cdf0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cdf4:	2b00      	cmp	r3, #0
 800cdf6:	f040 8098 	bne.w	800cf2a <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	69db      	ldr	r3, [r3, #28]
 800cdfe:	1c5a      	adds	r2, r3, #1
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	699b      	ldr	r3, [r3, #24]
 800ce08:	2b00      	cmp	r3, #0
 800ce0a:	d10b      	bne.n	800ce24 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800ce0c:	68bb      	ldr	r3, [r7, #8]
 800ce0e:	095b      	lsrs	r3, r3, #5
 800ce10:	68fa      	ldr	r2, [r7, #12]
 800ce12:	8912      	ldrh	r2, [r2, #8]
 800ce14:	4293      	cmp	r3, r2
 800ce16:	f0c0 8088 	bcc.w	800cf2a <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	2200      	movs	r2, #0
 800ce1e:	61da      	str	r2, [r3, #28]
 800ce20:	2304      	movs	r3, #4
 800ce22:	e08f      	b.n	800cf44 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800ce24:	68bb      	ldr	r3, [r7, #8]
 800ce26:	0a5b      	lsrs	r3, r3, #9
 800ce28:	68fa      	ldr	r2, [r7, #12]
 800ce2a:	8952      	ldrh	r2, [r2, #10]
 800ce2c:	3a01      	subs	r2, #1
 800ce2e:	4013      	ands	r3, r2
 800ce30:	2b00      	cmp	r3, #0
 800ce32:	d17a      	bne.n	800cf2a <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800ce34:	687a      	ldr	r2, [r7, #4]
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	699b      	ldr	r3, [r3, #24]
 800ce3a:	4619      	mov	r1, r3
 800ce3c:	4610      	mov	r0, r2
 800ce3e:	f7ff fc82 	bl	800c746 <get_fat>
 800ce42:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800ce44:	697b      	ldr	r3, [r7, #20]
 800ce46:	2b01      	cmp	r3, #1
 800ce48:	d801      	bhi.n	800ce4e <dir_next+0x8c>
 800ce4a:	2302      	movs	r3, #2
 800ce4c:	e07a      	b.n	800cf44 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800ce4e:	697b      	ldr	r3, [r7, #20]
 800ce50:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce54:	d101      	bne.n	800ce5a <dir_next+0x98>
 800ce56:	2301      	movs	r3, #1
 800ce58:	e074      	b.n	800cf44 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800ce5a:	68fb      	ldr	r3, [r7, #12]
 800ce5c:	695b      	ldr	r3, [r3, #20]
 800ce5e:	697a      	ldr	r2, [r7, #20]
 800ce60:	429a      	cmp	r2, r3
 800ce62:	d358      	bcc.n	800cf16 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800ce64:	683b      	ldr	r3, [r7, #0]
 800ce66:	2b00      	cmp	r3, #0
 800ce68:	d104      	bne.n	800ce74 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	2200      	movs	r2, #0
 800ce6e:	61da      	str	r2, [r3, #28]
 800ce70:	2304      	movs	r3, #4
 800ce72:	e067      	b.n	800cf44 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800ce74:	687a      	ldr	r2, [r7, #4]
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	699b      	ldr	r3, [r3, #24]
 800ce7a:	4619      	mov	r1, r3
 800ce7c:	4610      	mov	r0, r2
 800ce7e:	f7ff fe59 	bl	800cb34 <create_chain>
 800ce82:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800ce84:	697b      	ldr	r3, [r7, #20]
 800ce86:	2b00      	cmp	r3, #0
 800ce88:	d101      	bne.n	800ce8e <dir_next+0xcc>
 800ce8a:	2307      	movs	r3, #7
 800ce8c:	e05a      	b.n	800cf44 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800ce8e:	697b      	ldr	r3, [r7, #20]
 800ce90:	2b01      	cmp	r3, #1
 800ce92:	d101      	bne.n	800ce98 <dir_next+0xd6>
 800ce94:	2302      	movs	r3, #2
 800ce96:	e055      	b.n	800cf44 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800ce98:	697b      	ldr	r3, [r7, #20]
 800ce9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce9e:	d101      	bne.n	800cea4 <dir_next+0xe2>
 800cea0:	2301      	movs	r3, #1
 800cea2:	e04f      	b.n	800cf44 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800cea4:	68f8      	ldr	r0, [r7, #12]
 800cea6:	f7ff fb4f 	bl	800c548 <sync_window>
 800ceaa:	4603      	mov	r3, r0
 800ceac:	2b00      	cmp	r3, #0
 800ceae:	d001      	beq.n	800ceb4 <dir_next+0xf2>
 800ceb0:	2301      	movs	r3, #1
 800ceb2:	e047      	b.n	800cf44 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800ceb4:	68fb      	ldr	r3, [r7, #12]
 800ceb6:	3330      	adds	r3, #48	; 0x30
 800ceb8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800cebc:	2100      	movs	r1, #0
 800cebe:	4618      	mov	r0, r3
 800cec0:	f7ff f979 	bl	800c1b6 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800cec4:	2300      	movs	r3, #0
 800cec6:	613b      	str	r3, [r7, #16]
 800cec8:	6979      	ldr	r1, [r7, #20]
 800ceca:	68f8      	ldr	r0, [r7, #12]
 800cecc:	f7ff fc1c 	bl	800c708 <clust2sect>
 800ced0:	4602      	mov	r2, r0
 800ced2:	68fb      	ldr	r3, [r7, #12]
 800ced4:	62da      	str	r2, [r3, #44]	; 0x2c
 800ced6:	e012      	b.n	800cefe <dir_next+0x13c>
						fs->wflag = 1;
 800ced8:	68fb      	ldr	r3, [r7, #12]
 800ceda:	2201      	movs	r2, #1
 800cedc:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800cede:	68f8      	ldr	r0, [r7, #12]
 800cee0:	f7ff fb32 	bl	800c548 <sync_window>
 800cee4:	4603      	mov	r3, r0
 800cee6:	2b00      	cmp	r3, #0
 800cee8:	d001      	beq.n	800ceee <dir_next+0x12c>
 800ceea:	2301      	movs	r3, #1
 800ceec:	e02a      	b.n	800cf44 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800ceee:	693b      	ldr	r3, [r7, #16]
 800cef0:	3301      	adds	r3, #1
 800cef2:	613b      	str	r3, [r7, #16]
 800cef4:	68fb      	ldr	r3, [r7, #12]
 800cef6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cef8:	1c5a      	adds	r2, r3, #1
 800cefa:	68fb      	ldr	r3, [r7, #12]
 800cefc:	62da      	str	r2, [r3, #44]	; 0x2c
 800cefe:	68fb      	ldr	r3, [r7, #12]
 800cf00:	895b      	ldrh	r3, [r3, #10]
 800cf02:	461a      	mov	r2, r3
 800cf04:	693b      	ldr	r3, [r7, #16]
 800cf06:	4293      	cmp	r3, r2
 800cf08:	d3e6      	bcc.n	800ced8 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800cf0a:	68fb      	ldr	r3, [r7, #12]
 800cf0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cf0e:	693b      	ldr	r3, [r7, #16]
 800cf10:	1ad2      	subs	r2, r2, r3
 800cf12:	68fb      	ldr	r3, [r7, #12]
 800cf14:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	697a      	ldr	r2, [r7, #20]
 800cf1a:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800cf1c:	6979      	ldr	r1, [r7, #20]
 800cf1e:	68f8      	ldr	r0, [r7, #12]
 800cf20:	f7ff fbf2 	bl	800c708 <clust2sect>
 800cf24:	4602      	mov	r2, r0
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	68ba      	ldr	r2, [r7, #8]
 800cf2e:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800cf30:	68fb      	ldr	r3, [r7, #12]
 800cf32:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800cf36:	68bb      	ldr	r3, [r7, #8]
 800cf38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cf3c:	441a      	add	r2, r3
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800cf42:	2300      	movs	r3, #0
}
 800cf44:	4618      	mov	r0, r3
 800cf46:	3718      	adds	r7, #24
 800cf48:	46bd      	mov	sp, r7
 800cf4a:	bd80      	pop	{r7, pc}

0800cf4c <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800cf4c:	b580      	push	{r7, lr}
 800cf4e:	b086      	sub	sp, #24
 800cf50:	af00      	add	r7, sp, #0
 800cf52:	6078      	str	r0, [r7, #4]
 800cf54:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	681b      	ldr	r3, [r3, #0]
 800cf5a:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800cf5c:	2100      	movs	r1, #0
 800cf5e:	6878      	ldr	r0, [r7, #4]
 800cf60:	f7ff feb4 	bl	800cccc <dir_sdi>
 800cf64:	4603      	mov	r3, r0
 800cf66:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800cf68:	7dfb      	ldrb	r3, [r7, #23]
 800cf6a:	2b00      	cmp	r3, #0
 800cf6c:	d12b      	bne.n	800cfc6 <dir_alloc+0x7a>
		n = 0;
 800cf6e:	2300      	movs	r3, #0
 800cf70:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	69db      	ldr	r3, [r3, #28]
 800cf76:	4619      	mov	r1, r3
 800cf78:	68f8      	ldr	r0, [r7, #12]
 800cf7a:	f7ff fb29 	bl	800c5d0 <move_window>
 800cf7e:	4603      	mov	r3, r0
 800cf80:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800cf82:	7dfb      	ldrb	r3, [r7, #23]
 800cf84:	2b00      	cmp	r3, #0
 800cf86:	d11d      	bne.n	800cfc4 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	6a1b      	ldr	r3, [r3, #32]
 800cf8c:	781b      	ldrb	r3, [r3, #0]
 800cf8e:	2be5      	cmp	r3, #229	; 0xe5
 800cf90:	d004      	beq.n	800cf9c <dir_alloc+0x50>
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	6a1b      	ldr	r3, [r3, #32]
 800cf96:	781b      	ldrb	r3, [r3, #0]
 800cf98:	2b00      	cmp	r3, #0
 800cf9a:	d107      	bne.n	800cfac <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800cf9c:	693b      	ldr	r3, [r7, #16]
 800cf9e:	3301      	adds	r3, #1
 800cfa0:	613b      	str	r3, [r7, #16]
 800cfa2:	693a      	ldr	r2, [r7, #16]
 800cfa4:	683b      	ldr	r3, [r7, #0]
 800cfa6:	429a      	cmp	r2, r3
 800cfa8:	d102      	bne.n	800cfb0 <dir_alloc+0x64>
 800cfaa:	e00c      	b.n	800cfc6 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800cfac:	2300      	movs	r3, #0
 800cfae:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800cfb0:	2101      	movs	r1, #1
 800cfb2:	6878      	ldr	r0, [r7, #4]
 800cfb4:	f7ff ff05 	bl	800cdc2 <dir_next>
 800cfb8:	4603      	mov	r3, r0
 800cfba:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800cfbc:	7dfb      	ldrb	r3, [r7, #23]
 800cfbe:	2b00      	cmp	r3, #0
 800cfc0:	d0d7      	beq.n	800cf72 <dir_alloc+0x26>
 800cfc2:	e000      	b.n	800cfc6 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800cfc4:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800cfc6:	7dfb      	ldrb	r3, [r7, #23]
 800cfc8:	2b04      	cmp	r3, #4
 800cfca:	d101      	bne.n	800cfd0 <dir_alloc+0x84>
 800cfcc:	2307      	movs	r3, #7
 800cfce:	75fb      	strb	r3, [r7, #23]
	return res;
 800cfd0:	7dfb      	ldrb	r3, [r7, #23]
}
 800cfd2:	4618      	mov	r0, r3
 800cfd4:	3718      	adds	r7, #24
 800cfd6:	46bd      	mov	sp, r7
 800cfd8:	bd80      	pop	{r7, pc}

0800cfda <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800cfda:	b580      	push	{r7, lr}
 800cfdc:	b084      	sub	sp, #16
 800cfde:	af00      	add	r7, sp, #0
 800cfe0:	6078      	str	r0, [r7, #4]
 800cfe2:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800cfe4:	683b      	ldr	r3, [r7, #0]
 800cfe6:	331a      	adds	r3, #26
 800cfe8:	4618      	mov	r0, r3
 800cfea:	f7ff f841 	bl	800c070 <ld_word>
 800cfee:	4603      	mov	r3, r0
 800cff0:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	781b      	ldrb	r3, [r3, #0]
 800cff6:	2b03      	cmp	r3, #3
 800cff8:	d109      	bne.n	800d00e <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800cffa:	683b      	ldr	r3, [r7, #0]
 800cffc:	3314      	adds	r3, #20
 800cffe:	4618      	mov	r0, r3
 800d000:	f7ff f836 	bl	800c070 <ld_word>
 800d004:	4603      	mov	r3, r0
 800d006:	041b      	lsls	r3, r3, #16
 800d008:	68fa      	ldr	r2, [r7, #12]
 800d00a:	4313      	orrs	r3, r2
 800d00c:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800d00e:	68fb      	ldr	r3, [r7, #12]
}
 800d010:	4618      	mov	r0, r3
 800d012:	3710      	adds	r7, #16
 800d014:	46bd      	mov	sp, r7
 800d016:	bd80      	pop	{r7, pc}

0800d018 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800d018:	b580      	push	{r7, lr}
 800d01a:	b084      	sub	sp, #16
 800d01c:	af00      	add	r7, sp, #0
 800d01e:	60f8      	str	r0, [r7, #12]
 800d020:	60b9      	str	r1, [r7, #8]
 800d022:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800d024:	68bb      	ldr	r3, [r7, #8]
 800d026:	331a      	adds	r3, #26
 800d028:	687a      	ldr	r2, [r7, #4]
 800d02a:	b292      	uxth	r2, r2
 800d02c:	4611      	mov	r1, r2
 800d02e:	4618      	mov	r0, r3
 800d030:	f7ff f859 	bl	800c0e6 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800d034:	68fb      	ldr	r3, [r7, #12]
 800d036:	781b      	ldrb	r3, [r3, #0]
 800d038:	2b03      	cmp	r3, #3
 800d03a:	d109      	bne.n	800d050 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800d03c:	68bb      	ldr	r3, [r7, #8]
 800d03e:	f103 0214 	add.w	r2, r3, #20
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	0c1b      	lsrs	r3, r3, #16
 800d046:	b29b      	uxth	r3, r3
 800d048:	4619      	mov	r1, r3
 800d04a:	4610      	mov	r0, r2
 800d04c:	f7ff f84b 	bl	800c0e6 <st_word>
	}
}
 800d050:	bf00      	nop
 800d052:	3710      	adds	r7, #16
 800d054:	46bd      	mov	sp, r7
 800d056:	bd80      	pop	{r7, pc}

0800d058 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800d058:	b580      	push	{r7, lr}
 800d05a:	b086      	sub	sp, #24
 800d05c:	af00      	add	r7, sp, #0
 800d05e:	6078      	str	r0, [r7, #4]
 800d060:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800d062:	2304      	movs	r3, #4
 800d064:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	681b      	ldr	r3, [r3, #0]
 800d06a:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 800d06c:	e03c      	b.n	800d0e8 <dir_read+0x90>
		res = move_window(fs, dp->sect);
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	69db      	ldr	r3, [r3, #28]
 800d072:	4619      	mov	r1, r3
 800d074:	6938      	ldr	r0, [r7, #16]
 800d076:	f7ff faab 	bl	800c5d0 <move_window>
 800d07a:	4603      	mov	r3, r0
 800d07c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800d07e:	7dfb      	ldrb	r3, [r7, #23]
 800d080:	2b00      	cmp	r3, #0
 800d082:	d136      	bne.n	800d0f2 <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	6a1b      	ldr	r3, [r3, #32]
 800d088:	781b      	ldrb	r3, [r3, #0]
 800d08a:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 800d08c:	7bfb      	ldrb	r3, [r7, #15]
 800d08e:	2b00      	cmp	r3, #0
 800d090:	d102      	bne.n	800d098 <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800d092:	2304      	movs	r3, #4
 800d094:	75fb      	strb	r3, [r7, #23]
 800d096:	e031      	b.n	800d0fc <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	6a1b      	ldr	r3, [r3, #32]
 800d09c:	330b      	adds	r3, #11
 800d09e:	781b      	ldrb	r3, [r3, #0]
 800d0a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d0a4:	73bb      	strb	r3, [r7, #14]
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	7bba      	ldrb	r2, [r7, #14]
 800d0aa:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 800d0ac:	7bfb      	ldrb	r3, [r7, #15]
 800d0ae:	2be5      	cmp	r3, #229	; 0xe5
 800d0b0:	d011      	beq.n	800d0d6 <dir_read+0x7e>
 800d0b2:	7bfb      	ldrb	r3, [r7, #15]
 800d0b4:	2b2e      	cmp	r3, #46	; 0x2e
 800d0b6:	d00e      	beq.n	800d0d6 <dir_read+0x7e>
 800d0b8:	7bbb      	ldrb	r3, [r7, #14]
 800d0ba:	2b0f      	cmp	r3, #15
 800d0bc:	d00b      	beq.n	800d0d6 <dir_read+0x7e>
 800d0be:	7bbb      	ldrb	r3, [r7, #14]
 800d0c0:	f023 0320 	bic.w	r3, r3, #32
 800d0c4:	2b08      	cmp	r3, #8
 800d0c6:	bf0c      	ite	eq
 800d0c8:	2301      	moveq	r3, #1
 800d0ca:	2300      	movne	r3, #0
 800d0cc:	b2db      	uxtb	r3, r3
 800d0ce:	461a      	mov	r2, r3
 800d0d0:	683b      	ldr	r3, [r7, #0]
 800d0d2:	4293      	cmp	r3, r2
 800d0d4:	d00f      	beq.n	800d0f6 <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800d0d6:	2100      	movs	r1, #0
 800d0d8:	6878      	ldr	r0, [r7, #4]
 800d0da:	f7ff fe72 	bl	800cdc2 <dir_next>
 800d0de:	4603      	mov	r3, r0
 800d0e0:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800d0e2:	7dfb      	ldrb	r3, [r7, #23]
 800d0e4:	2b00      	cmp	r3, #0
 800d0e6:	d108      	bne.n	800d0fa <dir_read+0xa2>
	while (dp->sect) {
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	69db      	ldr	r3, [r3, #28]
 800d0ec:	2b00      	cmp	r3, #0
 800d0ee:	d1be      	bne.n	800d06e <dir_read+0x16>
 800d0f0:	e004      	b.n	800d0fc <dir_read+0xa4>
		if (res != FR_OK) break;
 800d0f2:	bf00      	nop
 800d0f4:	e002      	b.n	800d0fc <dir_read+0xa4>
				break;
 800d0f6:	bf00      	nop
 800d0f8:	e000      	b.n	800d0fc <dir_read+0xa4>
		if (res != FR_OK) break;
 800d0fa:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800d0fc:	7dfb      	ldrb	r3, [r7, #23]
 800d0fe:	2b00      	cmp	r3, #0
 800d100:	d002      	beq.n	800d108 <dir_read+0xb0>
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	2200      	movs	r2, #0
 800d106:	61da      	str	r2, [r3, #28]
	return res;
 800d108:	7dfb      	ldrb	r3, [r7, #23]
}
 800d10a:	4618      	mov	r0, r3
 800d10c:	3718      	adds	r7, #24
 800d10e:	46bd      	mov	sp, r7
 800d110:	bd80      	pop	{r7, pc}

0800d112 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800d112:	b580      	push	{r7, lr}
 800d114:	b086      	sub	sp, #24
 800d116:	af00      	add	r7, sp, #0
 800d118:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	681b      	ldr	r3, [r3, #0]
 800d11e:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800d120:	2100      	movs	r1, #0
 800d122:	6878      	ldr	r0, [r7, #4]
 800d124:	f7ff fdd2 	bl	800cccc <dir_sdi>
 800d128:	4603      	mov	r3, r0
 800d12a:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800d12c:	7dfb      	ldrb	r3, [r7, #23]
 800d12e:	2b00      	cmp	r3, #0
 800d130:	d001      	beq.n	800d136 <dir_find+0x24>
 800d132:	7dfb      	ldrb	r3, [r7, #23]
 800d134:	e03e      	b.n	800d1b4 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	69db      	ldr	r3, [r3, #28]
 800d13a:	4619      	mov	r1, r3
 800d13c:	6938      	ldr	r0, [r7, #16]
 800d13e:	f7ff fa47 	bl	800c5d0 <move_window>
 800d142:	4603      	mov	r3, r0
 800d144:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800d146:	7dfb      	ldrb	r3, [r7, #23]
 800d148:	2b00      	cmp	r3, #0
 800d14a:	d12f      	bne.n	800d1ac <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	6a1b      	ldr	r3, [r3, #32]
 800d150:	781b      	ldrb	r3, [r3, #0]
 800d152:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800d154:	7bfb      	ldrb	r3, [r7, #15]
 800d156:	2b00      	cmp	r3, #0
 800d158:	d102      	bne.n	800d160 <dir_find+0x4e>
 800d15a:	2304      	movs	r3, #4
 800d15c:	75fb      	strb	r3, [r7, #23]
 800d15e:	e028      	b.n	800d1b2 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	6a1b      	ldr	r3, [r3, #32]
 800d164:	330b      	adds	r3, #11
 800d166:	781b      	ldrb	r3, [r3, #0]
 800d168:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d16c:	b2da      	uxtb	r2, r3
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	6a1b      	ldr	r3, [r3, #32]
 800d176:	330b      	adds	r3, #11
 800d178:	781b      	ldrb	r3, [r3, #0]
 800d17a:	f003 0308 	and.w	r3, r3, #8
 800d17e:	2b00      	cmp	r3, #0
 800d180:	d10a      	bne.n	800d198 <dir_find+0x86>
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	6a18      	ldr	r0, [r3, #32]
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	3324      	adds	r3, #36	; 0x24
 800d18a:	220b      	movs	r2, #11
 800d18c:	4619      	mov	r1, r3
 800d18e:	f7ff f82d 	bl	800c1ec <mem_cmp>
 800d192:	4603      	mov	r3, r0
 800d194:	2b00      	cmp	r3, #0
 800d196:	d00b      	beq.n	800d1b0 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800d198:	2100      	movs	r1, #0
 800d19a:	6878      	ldr	r0, [r7, #4]
 800d19c:	f7ff fe11 	bl	800cdc2 <dir_next>
 800d1a0:	4603      	mov	r3, r0
 800d1a2:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800d1a4:	7dfb      	ldrb	r3, [r7, #23]
 800d1a6:	2b00      	cmp	r3, #0
 800d1a8:	d0c5      	beq.n	800d136 <dir_find+0x24>
 800d1aa:	e002      	b.n	800d1b2 <dir_find+0xa0>
		if (res != FR_OK) break;
 800d1ac:	bf00      	nop
 800d1ae:	e000      	b.n	800d1b2 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800d1b0:	bf00      	nop

	return res;
 800d1b2:	7dfb      	ldrb	r3, [r7, #23]
}
 800d1b4:	4618      	mov	r0, r3
 800d1b6:	3718      	adds	r7, #24
 800d1b8:	46bd      	mov	sp, r7
 800d1ba:	bd80      	pop	{r7, pc}

0800d1bc <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800d1bc:	b580      	push	{r7, lr}
 800d1be:	b084      	sub	sp, #16
 800d1c0:	af00      	add	r7, sp, #0
 800d1c2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	681b      	ldr	r3, [r3, #0]
 800d1c8:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800d1ca:	2101      	movs	r1, #1
 800d1cc:	6878      	ldr	r0, [r7, #4]
 800d1ce:	f7ff febd 	bl	800cf4c <dir_alloc>
 800d1d2:	4603      	mov	r3, r0
 800d1d4:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800d1d6:	7bfb      	ldrb	r3, [r7, #15]
 800d1d8:	2b00      	cmp	r3, #0
 800d1da:	d11c      	bne.n	800d216 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	69db      	ldr	r3, [r3, #28]
 800d1e0:	4619      	mov	r1, r3
 800d1e2:	68b8      	ldr	r0, [r7, #8]
 800d1e4:	f7ff f9f4 	bl	800c5d0 <move_window>
 800d1e8:	4603      	mov	r3, r0
 800d1ea:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800d1ec:	7bfb      	ldrb	r3, [r7, #15]
 800d1ee:	2b00      	cmp	r3, #0
 800d1f0:	d111      	bne.n	800d216 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	6a1b      	ldr	r3, [r3, #32]
 800d1f6:	2220      	movs	r2, #32
 800d1f8:	2100      	movs	r1, #0
 800d1fa:	4618      	mov	r0, r3
 800d1fc:	f7fe ffdb 	bl	800c1b6 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	6a18      	ldr	r0, [r3, #32]
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	3324      	adds	r3, #36	; 0x24
 800d208:	220b      	movs	r2, #11
 800d20a:	4619      	mov	r1, r3
 800d20c:	f7fe ffb2 	bl	800c174 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800d210:	68bb      	ldr	r3, [r7, #8]
 800d212:	2201      	movs	r2, #1
 800d214:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800d216:	7bfb      	ldrb	r3, [r7, #15]
}
 800d218:	4618      	mov	r0, r3
 800d21a:	3710      	adds	r7, #16
 800d21c:	46bd      	mov	sp, r7
 800d21e:	bd80      	pop	{r7, pc}

0800d220 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800d220:	b580      	push	{r7, lr}
 800d222:	b086      	sub	sp, #24
 800d224:	af00      	add	r7, sp, #0
 800d226:	6078      	str	r0, [r7, #4]
 800d228:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 800d22a:	683b      	ldr	r3, [r7, #0]
 800d22c:	2200      	movs	r2, #0
 800d22e:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	69db      	ldr	r3, [r3, #28]
 800d234:	2b00      	cmp	r3, #0
 800d236:	d04e      	beq.n	800d2d6 <get_fileinfo+0xb6>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 800d238:	2300      	movs	r3, #0
 800d23a:	613b      	str	r3, [r7, #16]
 800d23c:	693b      	ldr	r3, [r7, #16]
 800d23e:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 800d240:	e021      	b.n	800d286 <get_fileinfo+0x66>
		c = (TCHAR)dp->dir[i++];
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	6a1a      	ldr	r2, [r3, #32]
 800d246:	697b      	ldr	r3, [r7, #20]
 800d248:	1c59      	adds	r1, r3, #1
 800d24a:	6179      	str	r1, [r7, #20]
 800d24c:	4413      	add	r3, r2
 800d24e:	781b      	ldrb	r3, [r3, #0]
 800d250:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 800d252:	7bfb      	ldrb	r3, [r7, #15]
 800d254:	2b20      	cmp	r3, #32
 800d256:	d100      	bne.n	800d25a <get_fileinfo+0x3a>
 800d258:	e015      	b.n	800d286 <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800d25a:	7bfb      	ldrb	r3, [r7, #15]
 800d25c:	2b05      	cmp	r3, #5
 800d25e:	d101      	bne.n	800d264 <get_fileinfo+0x44>
 800d260:	23e5      	movs	r3, #229	; 0xe5
 800d262:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 800d264:	697b      	ldr	r3, [r7, #20]
 800d266:	2b09      	cmp	r3, #9
 800d268:	d106      	bne.n	800d278 <get_fileinfo+0x58>
 800d26a:	693b      	ldr	r3, [r7, #16]
 800d26c:	1c5a      	adds	r2, r3, #1
 800d26e:	613a      	str	r2, [r7, #16]
 800d270:	683a      	ldr	r2, [r7, #0]
 800d272:	4413      	add	r3, r2
 800d274:	222e      	movs	r2, #46	; 0x2e
 800d276:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 800d278:	693b      	ldr	r3, [r7, #16]
 800d27a:	1c5a      	adds	r2, r3, #1
 800d27c:	613a      	str	r2, [r7, #16]
 800d27e:	683a      	ldr	r2, [r7, #0]
 800d280:	4413      	add	r3, r2
 800d282:	7bfa      	ldrb	r2, [r7, #15]
 800d284:	725a      	strb	r2, [r3, #9]
	while (i < 11) {		/* Copy name body and extension */
 800d286:	697b      	ldr	r3, [r7, #20]
 800d288:	2b0a      	cmp	r3, #10
 800d28a:	d9da      	bls.n	800d242 <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 800d28c:	683a      	ldr	r2, [r7, #0]
 800d28e:	693b      	ldr	r3, [r7, #16]
 800d290:	4413      	add	r3, r2
 800d292:	3309      	adds	r3, #9
 800d294:	2200      	movs	r2, #0
 800d296:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	6a1b      	ldr	r3, [r3, #32]
 800d29c:	7ada      	ldrb	r2, [r3, #11]
 800d29e:	683b      	ldr	r3, [r7, #0]
 800d2a0:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	6a1b      	ldr	r3, [r3, #32]
 800d2a6:	331c      	adds	r3, #28
 800d2a8:	4618      	mov	r0, r3
 800d2aa:	f7fe fef9 	bl	800c0a0 <ld_dword>
 800d2ae:	4602      	mov	r2, r0
 800d2b0:	683b      	ldr	r3, [r7, #0]
 800d2b2:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	6a1b      	ldr	r3, [r3, #32]
 800d2b8:	3316      	adds	r3, #22
 800d2ba:	4618      	mov	r0, r3
 800d2bc:	f7fe fef0 	bl	800c0a0 <ld_dword>
 800d2c0:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800d2c2:	68bb      	ldr	r3, [r7, #8]
 800d2c4:	b29a      	uxth	r2, r3
 800d2c6:	683b      	ldr	r3, [r7, #0]
 800d2c8:	80da      	strh	r2, [r3, #6]
 800d2ca:	68bb      	ldr	r3, [r7, #8]
 800d2cc:	0c1b      	lsrs	r3, r3, #16
 800d2ce:	b29a      	uxth	r2, r3
 800d2d0:	683b      	ldr	r3, [r7, #0]
 800d2d2:	809a      	strh	r2, [r3, #4]
 800d2d4:	e000      	b.n	800d2d8 <get_fileinfo+0xb8>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800d2d6:	bf00      	nop
}
 800d2d8:	3718      	adds	r7, #24
 800d2da:	46bd      	mov	sp, r7
 800d2dc:	bd80      	pop	{r7, pc}
	...

0800d2e0 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800d2e0:	b580      	push	{r7, lr}
 800d2e2:	b088      	sub	sp, #32
 800d2e4:	af00      	add	r7, sp, #0
 800d2e6:	6078      	str	r0, [r7, #4]
 800d2e8:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800d2ea:	683b      	ldr	r3, [r7, #0]
 800d2ec:	681b      	ldr	r3, [r3, #0]
 800d2ee:	60fb      	str	r3, [r7, #12]
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	3324      	adds	r3, #36	; 0x24
 800d2f4:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800d2f6:	220b      	movs	r2, #11
 800d2f8:	2120      	movs	r1, #32
 800d2fa:	68b8      	ldr	r0, [r7, #8]
 800d2fc:	f7fe ff5b 	bl	800c1b6 <mem_set>
	si = i = 0; ni = 8;
 800d300:	2300      	movs	r3, #0
 800d302:	613b      	str	r3, [r7, #16]
 800d304:	693b      	ldr	r3, [r7, #16]
 800d306:	61fb      	str	r3, [r7, #28]
 800d308:	2308      	movs	r3, #8
 800d30a:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800d30c:	69fb      	ldr	r3, [r7, #28]
 800d30e:	1c5a      	adds	r2, r3, #1
 800d310:	61fa      	str	r2, [r7, #28]
 800d312:	68fa      	ldr	r2, [r7, #12]
 800d314:	4413      	add	r3, r2
 800d316:	781b      	ldrb	r3, [r3, #0]
 800d318:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800d31a:	7efb      	ldrb	r3, [r7, #27]
 800d31c:	2b20      	cmp	r3, #32
 800d31e:	d94e      	bls.n	800d3be <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800d320:	7efb      	ldrb	r3, [r7, #27]
 800d322:	2b2f      	cmp	r3, #47	; 0x2f
 800d324:	d006      	beq.n	800d334 <create_name+0x54>
 800d326:	7efb      	ldrb	r3, [r7, #27]
 800d328:	2b5c      	cmp	r3, #92	; 0x5c
 800d32a:	d110      	bne.n	800d34e <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800d32c:	e002      	b.n	800d334 <create_name+0x54>
 800d32e:	69fb      	ldr	r3, [r7, #28]
 800d330:	3301      	adds	r3, #1
 800d332:	61fb      	str	r3, [r7, #28]
 800d334:	68fa      	ldr	r2, [r7, #12]
 800d336:	69fb      	ldr	r3, [r7, #28]
 800d338:	4413      	add	r3, r2
 800d33a:	781b      	ldrb	r3, [r3, #0]
 800d33c:	2b2f      	cmp	r3, #47	; 0x2f
 800d33e:	d0f6      	beq.n	800d32e <create_name+0x4e>
 800d340:	68fa      	ldr	r2, [r7, #12]
 800d342:	69fb      	ldr	r3, [r7, #28]
 800d344:	4413      	add	r3, r2
 800d346:	781b      	ldrb	r3, [r3, #0]
 800d348:	2b5c      	cmp	r3, #92	; 0x5c
 800d34a:	d0f0      	beq.n	800d32e <create_name+0x4e>
			break;
 800d34c:	e038      	b.n	800d3c0 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800d34e:	7efb      	ldrb	r3, [r7, #27]
 800d350:	2b2e      	cmp	r3, #46	; 0x2e
 800d352:	d003      	beq.n	800d35c <create_name+0x7c>
 800d354:	693a      	ldr	r2, [r7, #16]
 800d356:	697b      	ldr	r3, [r7, #20]
 800d358:	429a      	cmp	r2, r3
 800d35a:	d30c      	bcc.n	800d376 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800d35c:	697b      	ldr	r3, [r7, #20]
 800d35e:	2b0b      	cmp	r3, #11
 800d360:	d002      	beq.n	800d368 <create_name+0x88>
 800d362:	7efb      	ldrb	r3, [r7, #27]
 800d364:	2b2e      	cmp	r3, #46	; 0x2e
 800d366:	d001      	beq.n	800d36c <create_name+0x8c>
 800d368:	2306      	movs	r3, #6
 800d36a:	e044      	b.n	800d3f6 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800d36c:	2308      	movs	r3, #8
 800d36e:	613b      	str	r3, [r7, #16]
 800d370:	230b      	movs	r3, #11
 800d372:	617b      	str	r3, [r7, #20]
			continue;
 800d374:	e022      	b.n	800d3bc <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800d376:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800d37a:	2b00      	cmp	r3, #0
 800d37c:	da04      	bge.n	800d388 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800d37e:	7efb      	ldrb	r3, [r7, #27]
 800d380:	3b80      	subs	r3, #128	; 0x80
 800d382:	4a1f      	ldr	r2, [pc, #124]	; (800d400 <create_name+0x120>)
 800d384:	5cd3      	ldrb	r3, [r2, r3]
 800d386:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800d388:	7efb      	ldrb	r3, [r7, #27]
 800d38a:	4619      	mov	r1, r3
 800d38c:	481d      	ldr	r0, [pc, #116]	; (800d404 <create_name+0x124>)
 800d38e:	f7fe ff54 	bl	800c23a <chk_chr>
 800d392:	4603      	mov	r3, r0
 800d394:	2b00      	cmp	r3, #0
 800d396:	d001      	beq.n	800d39c <create_name+0xbc>
 800d398:	2306      	movs	r3, #6
 800d39a:	e02c      	b.n	800d3f6 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800d39c:	7efb      	ldrb	r3, [r7, #27]
 800d39e:	2b60      	cmp	r3, #96	; 0x60
 800d3a0:	d905      	bls.n	800d3ae <create_name+0xce>
 800d3a2:	7efb      	ldrb	r3, [r7, #27]
 800d3a4:	2b7a      	cmp	r3, #122	; 0x7a
 800d3a6:	d802      	bhi.n	800d3ae <create_name+0xce>
 800d3a8:	7efb      	ldrb	r3, [r7, #27]
 800d3aa:	3b20      	subs	r3, #32
 800d3ac:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800d3ae:	693b      	ldr	r3, [r7, #16]
 800d3b0:	1c5a      	adds	r2, r3, #1
 800d3b2:	613a      	str	r2, [r7, #16]
 800d3b4:	68ba      	ldr	r2, [r7, #8]
 800d3b6:	4413      	add	r3, r2
 800d3b8:	7efa      	ldrb	r2, [r7, #27]
 800d3ba:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800d3bc:	e7a6      	b.n	800d30c <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800d3be:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800d3c0:	68fa      	ldr	r2, [r7, #12]
 800d3c2:	69fb      	ldr	r3, [r7, #28]
 800d3c4:	441a      	add	r2, r3
 800d3c6:	683b      	ldr	r3, [r7, #0]
 800d3c8:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800d3ca:	693b      	ldr	r3, [r7, #16]
 800d3cc:	2b00      	cmp	r3, #0
 800d3ce:	d101      	bne.n	800d3d4 <create_name+0xf4>
 800d3d0:	2306      	movs	r3, #6
 800d3d2:	e010      	b.n	800d3f6 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800d3d4:	68bb      	ldr	r3, [r7, #8]
 800d3d6:	781b      	ldrb	r3, [r3, #0]
 800d3d8:	2be5      	cmp	r3, #229	; 0xe5
 800d3da:	d102      	bne.n	800d3e2 <create_name+0x102>
 800d3dc:	68bb      	ldr	r3, [r7, #8]
 800d3de:	2205      	movs	r2, #5
 800d3e0:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800d3e2:	7efb      	ldrb	r3, [r7, #27]
 800d3e4:	2b20      	cmp	r3, #32
 800d3e6:	d801      	bhi.n	800d3ec <create_name+0x10c>
 800d3e8:	2204      	movs	r2, #4
 800d3ea:	e000      	b.n	800d3ee <create_name+0x10e>
 800d3ec:	2200      	movs	r2, #0
 800d3ee:	68bb      	ldr	r3, [r7, #8]
 800d3f0:	330b      	adds	r3, #11
 800d3f2:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800d3f4:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800d3f6:	4618      	mov	r0, r3
 800d3f8:	3720      	adds	r7, #32
 800d3fa:	46bd      	mov	sp, r7
 800d3fc:	bd80      	pop	{r7, pc}
 800d3fe:	bf00      	nop
 800d400:	080135bc 	.word	0x080135bc
 800d404:	080134f8 	.word	0x080134f8

0800d408 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800d408:	b580      	push	{r7, lr}
 800d40a:	b086      	sub	sp, #24
 800d40c:	af00      	add	r7, sp, #0
 800d40e:	6078      	str	r0, [r7, #4]
 800d410:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800d416:	693b      	ldr	r3, [r7, #16]
 800d418:	681b      	ldr	r3, [r3, #0]
 800d41a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800d41c:	e002      	b.n	800d424 <follow_path+0x1c>
 800d41e:	683b      	ldr	r3, [r7, #0]
 800d420:	3301      	adds	r3, #1
 800d422:	603b      	str	r3, [r7, #0]
 800d424:	683b      	ldr	r3, [r7, #0]
 800d426:	781b      	ldrb	r3, [r3, #0]
 800d428:	2b2f      	cmp	r3, #47	; 0x2f
 800d42a:	d0f8      	beq.n	800d41e <follow_path+0x16>
 800d42c:	683b      	ldr	r3, [r7, #0]
 800d42e:	781b      	ldrb	r3, [r3, #0]
 800d430:	2b5c      	cmp	r3, #92	; 0x5c
 800d432:	d0f4      	beq.n	800d41e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800d434:	693b      	ldr	r3, [r7, #16]
 800d436:	2200      	movs	r2, #0
 800d438:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800d43a:	683b      	ldr	r3, [r7, #0]
 800d43c:	781b      	ldrb	r3, [r3, #0]
 800d43e:	2b1f      	cmp	r3, #31
 800d440:	d80a      	bhi.n	800d458 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	2280      	movs	r2, #128	; 0x80
 800d446:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800d44a:	2100      	movs	r1, #0
 800d44c:	6878      	ldr	r0, [r7, #4]
 800d44e:	f7ff fc3d 	bl	800cccc <dir_sdi>
 800d452:	4603      	mov	r3, r0
 800d454:	75fb      	strb	r3, [r7, #23]
 800d456:	e043      	b.n	800d4e0 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800d458:	463b      	mov	r3, r7
 800d45a:	4619      	mov	r1, r3
 800d45c:	6878      	ldr	r0, [r7, #4]
 800d45e:	f7ff ff3f 	bl	800d2e0 <create_name>
 800d462:	4603      	mov	r3, r0
 800d464:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800d466:	7dfb      	ldrb	r3, [r7, #23]
 800d468:	2b00      	cmp	r3, #0
 800d46a:	d134      	bne.n	800d4d6 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800d46c:	6878      	ldr	r0, [r7, #4]
 800d46e:	f7ff fe50 	bl	800d112 <dir_find>
 800d472:	4603      	mov	r3, r0
 800d474:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800d47c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800d47e:	7dfb      	ldrb	r3, [r7, #23]
 800d480:	2b00      	cmp	r3, #0
 800d482:	d00a      	beq.n	800d49a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800d484:	7dfb      	ldrb	r3, [r7, #23]
 800d486:	2b04      	cmp	r3, #4
 800d488:	d127      	bne.n	800d4da <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800d48a:	7afb      	ldrb	r3, [r7, #11]
 800d48c:	f003 0304 	and.w	r3, r3, #4
 800d490:	2b00      	cmp	r3, #0
 800d492:	d122      	bne.n	800d4da <follow_path+0xd2>
 800d494:	2305      	movs	r3, #5
 800d496:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800d498:	e01f      	b.n	800d4da <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800d49a:	7afb      	ldrb	r3, [r7, #11]
 800d49c:	f003 0304 	and.w	r3, r3, #4
 800d4a0:	2b00      	cmp	r3, #0
 800d4a2:	d11c      	bne.n	800d4de <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800d4a4:	693b      	ldr	r3, [r7, #16]
 800d4a6:	799b      	ldrb	r3, [r3, #6]
 800d4a8:	f003 0310 	and.w	r3, r3, #16
 800d4ac:	2b00      	cmp	r3, #0
 800d4ae:	d102      	bne.n	800d4b6 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800d4b0:	2305      	movs	r3, #5
 800d4b2:	75fb      	strb	r3, [r7, #23]
 800d4b4:	e014      	b.n	800d4e0 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800d4b6:	68fb      	ldr	r3, [r7, #12]
 800d4b8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	695b      	ldr	r3, [r3, #20]
 800d4c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d4c4:	4413      	add	r3, r2
 800d4c6:	4619      	mov	r1, r3
 800d4c8:	68f8      	ldr	r0, [r7, #12]
 800d4ca:	f7ff fd86 	bl	800cfda <ld_clust>
 800d4ce:	4602      	mov	r2, r0
 800d4d0:	693b      	ldr	r3, [r7, #16]
 800d4d2:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800d4d4:	e7c0      	b.n	800d458 <follow_path+0x50>
			if (res != FR_OK) break;
 800d4d6:	bf00      	nop
 800d4d8:	e002      	b.n	800d4e0 <follow_path+0xd8>
				break;
 800d4da:	bf00      	nop
 800d4dc:	e000      	b.n	800d4e0 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800d4de:	bf00      	nop
			}
		}
	}

	return res;
 800d4e0:	7dfb      	ldrb	r3, [r7, #23]
}
 800d4e2:	4618      	mov	r0, r3
 800d4e4:	3718      	adds	r7, #24
 800d4e6:	46bd      	mov	sp, r7
 800d4e8:	bd80      	pop	{r7, pc}

0800d4ea <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800d4ea:	b480      	push	{r7}
 800d4ec:	b087      	sub	sp, #28
 800d4ee:	af00      	add	r7, sp, #0
 800d4f0:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800d4f2:	f04f 33ff 	mov.w	r3, #4294967295
 800d4f6:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	681b      	ldr	r3, [r3, #0]
 800d4fc:	2b00      	cmp	r3, #0
 800d4fe:	d031      	beq.n	800d564 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	681b      	ldr	r3, [r3, #0]
 800d504:	617b      	str	r3, [r7, #20]
 800d506:	e002      	b.n	800d50e <get_ldnumber+0x24>
 800d508:	697b      	ldr	r3, [r7, #20]
 800d50a:	3301      	adds	r3, #1
 800d50c:	617b      	str	r3, [r7, #20]
 800d50e:	697b      	ldr	r3, [r7, #20]
 800d510:	781b      	ldrb	r3, [r3, #0]
 800d512:	2b20      	cmp	r3, #32
 800d514:	d903      	bls.n	800d51e <get_ldnumber+0x34>
 800d516:	697b      	ldr	r3, [r7, #20]
 800d518:	781b      	ldrb	r3, [r3, #0]
 800d51a:	2b3a      	cmp	r3, #58	; 0x3a
 800d51c:	d1f4      	bne.n	800d508 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800d51e:	697b      	ldr	r3, [r7, #20]
 800d520:	781b      	ldrb	r3, [r3, #0]
 800d522:	2b3a      	cmp	r3, #58	; 0x3a
 800d524:	d11c      	bne.n	800d560 <get_ldnumber+0x76>
			tp = *path;
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	681b      	ldr	r3, [r3, #0]
 800d52a:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800d52c:	68fb      	ldr	r3, [r7, #12]
 800d52e:	1c5a      	adds	r2, r3, #1
 800d530:	60fa      	str	r2, [r7, #12]
 800d532:	781b      	ldrb	r3, [r3, #0]
 800d534:	3b30      	subs	r3, #48	; 0x30
 800d536:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800d538:	68bb      	ldr	r3, [r7, #8]
 800d53a:	2b09      	cmp	r3, #9
 800d53c:	d80e      	bhi.n	800d55c <get_ldnumber+0x72>
 800d53e:	68fa      	ldr	r2, [r7, #12]
 800d540:	697b      	ldr	r3, [r7, #20]
 800d542:	429a      	cmp	r2, r3
 800d544:	d10a      	bne.n	800d55c <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800d546:	68bb      	ldr	r3, [r7, #8]
 800d548:	2b00      	cmp	r3, #0
 800d54a:	d107      	bne.n	800d55c <get_ldnumber+0x72>
					vol = (int)i;
 800d54c:	68bb      	ldr	r3, [r7, #8]
 800d54e:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800d550:	697b      	ldr	r3, [r7, #20]
 800d552:	3301      	adds	r3, #1
 800d554:	617b      	str	r3, [r7, #20]
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	697a      	ldr	r2, [r7, #20]
 800d55a:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800d55c:	693b      	ldr	r3, [r7, #16]
 800d55e:	e002      	b.n	800d566 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800d560:	2300      	movs	r3, #0
 800d562:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800d564:	693b      	ldr	r3, [r7, #16]
}
 800d566:	4618      	mov	r0, r3
 800d568:	371c      	adds	r7, #28
 800d56a:	46bd      	mov	sp, r7
 800d56c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d570:	4770      	bx	lr
	...

0800d574 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800d574:	b580      	push	{r7, lr}
 800d576:	b082      	sub	sp, #8
 800d578:	af00      	add	r7, sp, #0
 800d57a:	6078      	str	r0, [r7, #4]
 800d57c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	2200      	movs	r2, #0
 800d582:	70da      	strb	r2, [r3, #3]
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	f04f 32ff 	mov.w	r2, #4294967295
 800d58a:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800d58c:	6839      	ldr	r1, [r7, #0]
 800d58e:	6878      	ldr	r0, [r7, #4]
 800d590:	f7ff f81e 	bl	800c5d0 <move_window>
 800d594:	4603      	mov	r3, r0
 800d596:	2b00      	cmp	r3, #0
 800d598:	d001      	beq.n	800d59e <check_fs+0x2a>
 800d59a:	2304      	movs	r3, #4
 800d59c:	e038      	b.n	800d610 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	3330      	adds	r3, #48	; 0x30
 800d5a2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800d5a6:	4618      	mov	r0, r3
 800d5a8:	f7fe fd62 	bl	800c070 <ld_word>
 800d5ac:	4603      	mov	r3, r0
 800d5ae:	461a      	mov	r2, r3
 800d5b0:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800d5b4:	429a      	cmp	r2, r3
 800d5b6:	d001      	beq.n	800d5bc <check_fs+0x48>
 800d5b8:	2303      	movs	r3, #3
 800d5ba:	e029      	b.n	800d610 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d5c2:	2be9      	cmp	r3, #233	; 0xe9
 800d5c4:	d009      	beq.n	800d5da <check_fs+0x66>
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d5cc:	2beb      	cmp	r3, #235	; 0xeb
 800d5ce:	d11e      	bne.n	800d60e <check_fs+0x9a>
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800d5d6:	2b90      	cmp	r3, #144	; 0x90
 800d5d8:	d119      	bne.n	800d60e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	3330      	adds	r3, #48	; 0x30
 800d5de:	3336      	adds	r3, #54	; 0x36
 800d5e0:	4618      	mov	r0, r3
 800d5e2:	f7fe fd5d 	bl	800c0a0 <ld_dword>
 800d5e6:	4603      	mov	r3, r0
 800d5e8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800d5ec:	4a0a      	ldr	r2, [pc, #40]	; (800d618 <check_fs+0xa4>)
 800d5ee:	4293      	cmp	r3, r2
 800d5f0:	d101      	bne.n	800d5f6 <check_fs+0x82>
 800d5f2:	2300      	movs	r3, #0
 800d5f4:	e00c      	b.n	800d610 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	3330      	adds	r3, #48	; 0x30
 800d5fa:	3352      	adds	r3, #82	; 0x52
 800d5fc:	4618      	mov	r0, r3
 800d5fe:	f7fe fd4f 	bl	800c0a0 <ld_dword>
 800d602:	4603      	mov	r3, r0
 800d604:	4a05      	ldr	r2, [pc, #20]	; (800d61c <check_fs+0xa8>)
 800d606:	4293      	cmp	r3, r2
 800d608:	d101      	bne.n	800d60e <check_fs+0x9a>
 800d60a:	2300      	movs	r3, #0
 800d60c:	e000      	b.n	800d610 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800d60e:	2302      	movs	r3, #2
}
 800d610:	4618      	mov	r0, r3
 800d612:	3708      	adds	r7, #8
 800d614:	46bd      	mov	sp, r7
 800d616:	bd80      	pop	{r7, pc}
 800d618:	00544146 	.word	0x00544146
 800d61c:	33544146 	.word	0x33544146

0800d620 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800d620:	b580      	push	{r7, lr}
 800d622:	b096      	sub	sp, #88	; 0x58
 800d624:	af00      	add	r7, sp, #0
 800d626:	60f8      	str	r0, [r7, #12]
 800d628:	60b9      	str	r1, [r7, #8]
 800d62a:	4613      	mov	r3, r2
 800d62c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800d62e:	68bb      	ldr	r3, [r7, #8]
 800d630:	2200      	movs	r2, #0
 800d632:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800d634:	68f8      	ldr	r0, [r7, #12]
 800d636:	f7ff ff58 	bl	800d4ea <get_ldnumber>
 800d63a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800d63c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d63e:	2b00      	cmp	r3, #0
 800d640:	da01      	bge.n	800d646 <find_volume+0x26>
 800d642:	230b      	movs	r3, #11
 800d644:	e22d      	b.n	800daa2 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800d646:	4aa1      	ldr	r2, [pc, #644]	; (800d8cc <find_volume+0x2ac>)
 800d648:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d64a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d64e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800d650:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d652:	2b00      	cmp	r3, #0
 800d654:	d101      	bne.n	800d65a <find_volume+0x3a>
 800d656:	230c      	movs	r3, #12
 800d658:	e223      	b.n	800daa2 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800d65a:	68bb      	ldr	r3, [r7, #8]
 800d65c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d65e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800d660:	79fb      	ldrb	r3, [r7, #7]
 800d662:	f023 0301 	bic.w	r3, r3, #1
 800d666:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800d668:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d66a:	781b      	ldrb	r3, [r3, #0]
 800d66c:	2b00      	cmp	r3, #0
 800d66e:	d01a      	beq.n	800d6a6 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800d670:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d672:	785b      	ldrb	r3, [r3, #1]
 800d674:	4618      	mov	r0, r3
 800d676:	f7fe fc5b 	bl	800bf30 <disk_status>
 800d67a:	4603      	mov	r3, r0
 800d67c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800d680:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d684:	f003 0301 	and.w	r3, r3, #1
 800d688:	2b00      	cmp	r3, #0
 800d68a:	d10c      	bne.n	800d6a6 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800d68c:	79fb      	ldrb	r3, [r7, #7]
 800d68e:	2b00      	cmp	r3, #0
 800d690:	d007      	beq.n	800d6a2 <find_volume+0x82>
 800d692:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d696:	f003 0304 	and.w	r3, r3, #4
 800d69a:	2b00      	cmp	r3, #0
 800d69c:	d001      	beq.n	800d6a2 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800d69e:	230a      	movs	r3, #10
 800d6a0:	e1ff      	b.n	800daa2 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 800d6a2:	2300      	movs	r3, #0
 800d6a4:	e1fd      	b.n	800daa2 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800d6a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6a8:	2200      	movs	r2, #0
 800d6aa:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800d6ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d6ae:	b2da      	uxtb	r2, r3
 800d6b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6b2:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800d6b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6b6:	785b      	ldrb	r3, [r3, #1]
 800d6b8:	4618      	mov	r0, r3
 800d6ba:	f7fe fc53 	bl	800bf64 <disk_initialize>
 800d6be:	4603      	mov	r3, r0
 800d6c0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800d6c4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d6c8:	f003 0301 	and.w	r3, r3, #1
 800d6cc:	2b00      	cmp	r3, #0
 800d6ce:	d001      	beq.n	800d6d4 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800d6d0:	2303      	movs	r3, #3
 800d6d2:	e1e6      	b.n	800daa2 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800d6d4:	79fb      	ldrb	r3, [r7, #7]
 800d6d6:	2b00      	cmp	r3, #0
 800d6d8:	d007      	beq.n	800d6ea <find_volume+0xca>
 800d6da:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d6de:	f003 0304 	and.w	r3, r3, #4
 800d6e2:	2b00      	cmp	r3, #0
 800d6e4:	d001      	beq.n	800d6ea <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800d6e6:	230a      	movs	r3, #10
 800d6e8:	e1db      	b.n	800daa2 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800d6ea:	2300      	movs	r3, #0
 800d6ec:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800d6ee:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d6f0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d6f2:	f7ff ff3f 	bl	800d574 <check_fs>
 800d6f6:	4603      	mov	r3, r0
 800d6f8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800d6fc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d700:	2b02      	cmp	r3, #2
 800d702:	d149      	bne.n	800d798 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800d704:	2300      	movs	r3, #0
 800d706:	643b      	str	r3, [r7, #64]	; 0x40
 800d708:	e01e      	b.n	800d748 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800d70a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d70c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800d710:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d712:	011b      	lsls	r3, r3, #4
 800d714:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800d718:	4413      	add	r3, r2
 800d71a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800d71c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d71e:	3304      	adds	r3, #4
 800d720:	781b      	ldrb	r3, [r3, #0]
 800d722:	2b00      	cmp	r3, #0
 800d724:	d006      	beq.n	800d734 <find_volume+0x114>
 800d726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d728:	3308      	adds	r3, #8
 800d72a:	4618      	mov	r0, r3
 800d72c:	f7fe fcb8 	bl	800c0a0 <ld_dword>
 800d730:	4602      	mov	r2, r0
 800d732:	e000      	b.n	800d736 <find_volume+0x116>
 800d734:	2200      	movs	r2, #0
 800d736:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d738:	009b      	lsls	r3, r3, #2
 800d73a:	3358      	adds	r3, #88	; 0x58
 800d73c:	443b      	add	r3, r7
 800d73e:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800d742:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d744:	3301      	adds	r3, #1
 800d746:	643b      	str	r3, [r7, #64]	; 0x40
 800d748:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d74a:	2b03      	cmp	r3, #3
 800d74c:	d9dd      	bls.n	800d70a <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800d74e:	2300      	movs	r3, #0
 800d750:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800d752:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d754:	2b00      	cmp	r3, #0
 800d756:	d002      	beq.n	800d75e <find_volume+0x13e>
 800d758:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d75a:	3b01      	subs	r3, #1
 800d75c:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800d75e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d760:	009b      	lsls	r3, r3, #2
 800d762:	3358      	adds	r3, #88	; 0x58
 800d764:	443b      	add	r3, r7
 800d766:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800d76a:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800d76c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d76e:	2b00      	cmp	r3, #0
 800d770:	d005      	beq.n	800d77e <find_volume+0x15e>
 800d772:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d774:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d776:	f7ff fefd 	bl	800d574 <check_fs>
 800d77a:	4603      	mov	r3, r0
 800d77c:	e000      	b.n	800d780 <find_volume+0x160>
 800d77e:	2303      	movs	r3, #3
 800d780:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800d784:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d788:	2b01      	cmp	r3, #1
 800d78a:	d905      	bls.n	800d798 <find_volume+0x178>
 800d78c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d78e:	3301      	adds	r3, #1
 800d790:	643b      	str	r3, [r7, #64]	; 0x40
 800d792:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d794:	2b03      	cmp	r3, #3
 800d796:	d9e2      	bls.n	800d75e <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800d798:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d79c:	2b04      	cmp	r3, #4
 800d79e:	d101      	bne.n	800d7a4 <find_volume+0x184>
 800d7a0:	2301      	movs	r3, #1
 800d7a2:	e17e      	b.n	800daa2 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800d7a4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d7a8:	2b01      	cmp	r3, #1
 800d7aa:	d901      	bls.n	800d7b0 <find_volume+0x190>
 800d7ac:	230d      	movs	r3, #13
 800d7ae:	e178      	b.n	800daa2 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800d7b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7b2:	3330      	adds	r3, #48	; 0x30
 800d7b4:	330b      	adds	r3, #11
 800d7b6:	4618      	mov	r0, r3
 800d7b8:	f7fe fc5a 	bl	800c070 <ld_word>
 800d7bc:	4603      	mov	r3, r0
 800d7be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d7c2:	d001      	beq.n	800d7c8 <find_volume+0x1a8>
 800d7c4:	230d      	movs	r3, #13
 800d7c6:	e16c      	b.n	800daa2 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800d7c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7ca:	3330      	adds	r3, #48	; 0x30
 800d7cc:	3316      	adds	r3, #22
 800d7ce:	4618      	mov	r0, r3
 800d7d0:	f7fe fc4e 	bl	800c070 <ld_word>
 800d7d4:	4603      	mov	r3, r0
 800d7d6:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800d7d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d7da:	2b00      	cmp	r3, #0
 800d7dc:	d106      	bne.n	800d7ec <find_volume+0x1cc>
 800d7de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7e0:	3330      	adds	r3, #48	; 0x30
 800d7e2:	3324      	adds	r3, #36	; 0x24
 800d7e4:	4618      	mov	r0, r3
 800d7e6:	f7fe fc5b 	bl	800c0a0 <ld_dword>
 800d7ea:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800d7ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7ee:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d7f0:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800d7f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7f4:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800d7f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7fa:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800d7fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7fe:	789b      	ldrb	r3, [r3, #2]
 800d800:	2b01      	cmp	r3, #1
 800d802:	d005      	beq.n	800d810 <find_volume+0x1f0>
 800d804:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d806:	789b      	ldrb	r3, [r3, #2]
 800d808:	2b02      	cmp	r3, #2
 800d80a:	d001      	beq.n	800d810 <find_volume+0x1f0>
 800d80c:	230d      	movs	r3, #13
 800d80e:	e148      	b.n	800daa2 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800d810:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d812:	789b      	ldrb	r3, [r3, #2]
 800d814:	461a      	mov	r2, r3
 800d816:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d818:	fb02 f303 	mul.w	r3, r2, r3
 800d81c:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800d81e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d820:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d824:	b29a      	uxth	r2, r3
 800d826:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d828:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800d82a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d82c:	895b      	ldrh	r3, [r3, #10]
 800d82e:	2b00      	cmp	r3, #0
 800d830:	d008      	beq.n	800d844 <find_volume+0x224>
 800d832:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d834:	895b      	ldrh	r3, [r3, #10]
 800d836:	461a      	mov	r2, r3
 800d838:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d83a:	895b      	ldrh	r3, [r3, #10]
 800d83c:	3b01      	subs	r3, #1
 800d83e:	4013      	ands	r3, r2
 800d840:	2b00      	cmp	r3, #0
 800d842:	d001      	beq.n	800d848 <find_volume+0x228>
 800d844:	230d      	movs	r3, #13
 800d846:	e12c      	b.n	800daa2 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800d848:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d84a:	3330      	adds	r3, #48	; 0x30
 800d84c:	3311      	adds	r3, #17
 800d84e:	4618      	mov	r0, r3
 800d850:	f7fe fc0e 	bl	800c070 <ld_word>
 800d854:	4603      	mov	r3, r0
 800d856:	461a      	mov	r2, r3
 800d858:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d85a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800d85c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d85e:	891b      	ldrh	r3, [r3, #8]
 800d860:	f003 030f 	and.w	r3, r3, #15
 800d864:	b29b      	uxth	r3, r3
 800d866:	2b00      	cmp	r3, #0
 800d868:	d001      	beq.n	800d86e <find_volume+0x24e>
 800d86a:	230d      	movs	r3, #13
 800d86c:	e119      	b.n	800daa2 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800d86e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d870:	3330      	adds	r3, #48	; 0x30
 800d872:	3313      	adds	r3, #19
 800d874:	4618      	mov	r0, r3
 800d876:	f7fe fbfb 	bl	800c070 <ld_word>
 800d87a:	4603      	mov	r3, r0
 800d87c:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800d87e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d880:	2b00      	cmp	r3, #0
 800d882:	d106      	bne.n	800d892 <find_volume+0x272>
 800d884:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d886:	3330      	adds	r3, #48	; 0x30
 800d888:	3320      	adds	r3, #32
 800d88a:	4618      	mov	r0, r3
 800d88c:	f7fe fc08 	bl	800c0a0 <ld_dword>
 800d890:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800d892:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d894:	3330      	adds	r3, #48	; 0x30
 800d896:	330e      	adds	r3, #14
 800d898:	4618      	mov	r0, r3
 800d89a:	f7fe fbe9 	bl	800c070 <ld_word>
 800d89e:	4603      	mov	r3, r0
 800d8a0:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800d8a2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d8a4:	2b00      	cmp	r3, #0
 800d8a6:	d101      	bne.n	800d8ac <find_volume+0x28c>
 800d8a8:	230d      	movs	r3, #13
 800d8aa:	e0fa      	b.n	800daa2 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800d8ac:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800d8ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d8b0:	4413      	add	r3, r2
 800d8b2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d8b4:	8912      	ldrh	r2, [r2, #8]
 800d8b6:	0912      	lsrs	r2, r2, #4
 800d8b8:	b292      	uxth	r2, r2
 800d8ba:	4413      	add	r3, r2
 800d8bc:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800d8be:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d8c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8c2:	429a      	cmp	r2, r3
 800d8c4:	d204      	bcs.n	800d8d0 <find_volume+0x2b0>
 800d8c6:	230d      	movs	r3, #13
 800d8c8:	e0eb      	b.n	800daa2 <find_volume+0x482>
 800d8ca:	bf00      	nop
 800d8cc:	20000d14 	.word	0x20000d14
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800d8d0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d8d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8d4:	1ad3      	subs	r3, r2, r3
 800d8d6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d8d8:	8952      	ldrh	r2, [r2, #10]
 800d8da:	fbb3 f3f2 	udiv	r3, r3, r2
 800d8de:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800d8e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8e2:	2b00      	cmp	r3, #0
 800d8e4:	d101      	bne.n	800d8ea <find_volume+0x2ca>
 800d8e6:	230d      	movs	r3, #13
 800d8e8:	e0db      	b.n	800daa2 <find_volume+0x482>
		fmt = FS_FAT32;
 800d8ea:	2303      	movs	r3, #3
 800d8ec:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800d8f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8f2:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800d8f6:	4293      	cmp	r3, r2
 800d8f8:	d802      	bhi.n	800d900 <find_volume+0x2e0>
 800d8fa:	2302      	movs	r3, #2
 800d8fc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800d900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d902:	f640 72f5 	movw	r2, #4085	; 0xff5
 800d906:	4293      	cmp	r3, r2
 800d908:	d802      	bhi.n	800d910 <find_volume+0x2f0>
 800d90a:	2301      	movs	r3, #1
 800d90c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800d910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d912:	1c9a      	adds	r2, r3, #2
 800d914:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d916:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800d918:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d91a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d91c:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800d91e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800d920:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d922:	441a      	add	r2, r3
 800d924:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d926:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800d928:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d92a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d92c:	441a      	add	r2, r3
 800d92e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d930:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 800d932:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d936:	2b03      	cmp	r3, #3
 800d938:	d11e      	bne.n	800d978 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800d93a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d93c:	3330      	adds	r3, #48	; 0x30
 800d93e:	332a      	adds	r3, #42	; 0x2a
 800d940:	4618      	mov	r0, r3
 800d942:	f7fe fb95 	bl	800c070 <ld_word>
 800d946:	4603      	mov	r3, r0
 800d948:	2b00      	cmp	r3, #0
 800d94a:	d001      	beq.n	800d950 <find_volume+0x330>
 800d94c:	230d      	movs	r3, #13
 800d94e:	e0a8      	b.n	800daa2 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800d950:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d952:	891b      	ldrh	r3, [r3, #8]
 800d954:	2b00      	cmp	r3, #0
 800d956:	d001      	beq.n	800d95c <find_volume+0x33c>
 800d958:	230d      	movs	r3, #13
 800d95a:	e0a2      	b.n	800daa2 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800d95c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d95e:	3330      	adds	r3, #48	; 0x30
 800d960:	332c      	adds	r3, #44	; 0x2c
 800d962:	4618      	mov	r0, r3
 800d964:	f7fe fb9c 	bl	800c0a0 <ld_dword>
 800d968:	4602      	mov	r2, r0
 800d96a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d96c:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800d96e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d970:	695b      	ldr	r3, [r3, #20]
 800d972:	009b      	lsls	r3, r3, #2
 800d974:	647b      	str	r3, [r7, #68]	; 0x44
 800d976:	e01f      	b.n	800d9b8 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800d978:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d97a:	891b      	ldrh	r3, [r3, #8]
 800d97c:	2b00      	cmp	r3, #0
 800d97e:	d101      	bne.n	800d984 <find_volume+0x364>
 800d980:	230d      	movs	r3, #13
 800d982:	e08e      	b.n	800daa2 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800d984:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d986:	6a1a      	ldr	r2, [r3, #32]
 800d988:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d98a:	441a      	add	r2, r3
 800d98c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d98e:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800d990:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d994:	2b02      	cmp	r3, #2
 800d996:	d103      	bne.n	800d9a0 <find_volume+0x380>
 800d998:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d99a:	695b      	ldr	r3, [r3, #20]
 800d99c:	005b      	lsls	r3, r3, #1
 800d99e:	e00a      	b.n	800d9b6 <find_volume+0x396>
 800d9a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9a2:	695a      	ldr	r2, [r3, #20]
 800d9a4:	4613      	mov	r3, r2
 800d9a6:	005b      	lsls	r3, r3, #1
 800d9a8:	4413      	add	r3, r2
 800d9aa:	085a      	lsrs	r2, r3, #1
 800d9ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9ae:	695b      	ldr	r3, [r3, #20]
 800d9b0:	f003 0301 	and.w	r3, r3, #1
 800d9b4:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800d9b6:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800d9b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9ba:	699a      	ldr	r2, [r3, #24]
 800d9bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d9be:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800d9c2:	0a5b      	lsrs	r3, r3, #9
 800d9c4:	429a      	cmp	r2, r3
 800d9c6:	d201      	bcs.n	800d9cc <find_volume+0x3ac>
 800d9c8:	230d      	movs	r3, #13
 800d9ca:	e06a      	b.n	800daa2 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800d9cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9ce:	f04f 32ff 	mov.w	r2, #4294967295
 800d9d2:	611a      	str	r2, [r3, #16]
 800d9d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9d6:	691a      	ldr	r2, [r3, #16]
 800d9d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9da:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800d9dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9de:	2280      	movs	r2, #128	; 0x80
 800d9e0:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800d9e2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d9e6:	2b03      	cmp	r3, #3
 800d9e8:	d149      	bne.n	800da7e <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800d9ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9ec:	3330      	adds	r3, #48	; 0x30
 800d9ee:	3330      	adds	r3, #48	; 0x30
 800d9f0:	4618      	mov	r0, r3
 800d9f2:	f7fe fb3d 	bl	800c070 <ld_word>
 800d9f6:	4603      	mov	r3, r0
 800d9f8:	2b01      	cmp	r3, #1
 800d9fa:	d140      	bne.n	800da7e <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800d9fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d9fe:	3301      	adds	r3, #1
 800da00:	4619      	mov	r1, r3
 800da02:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800da04:	f7fe fde4 	bl	800c5d0 <move_window>
 800da08:	4603      	mov	r3, r0
 800da0a:	2b00      	cmp	r3, #0
 800da0c:	d137      	bne.n	800da7e <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800da0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da10:	2200      	movs	r2, #0
 800da12:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800da14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da16:	3330      	adds	r3, #48	; 0x30
 800da18:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800da1c:	4618      	mov	r0, r3
 800da1e:	f7fe fb27 	bl	800c070 <ld_word>
 800da22:	4603      	mov	r3, r0
 800da24:	461a      	mov	r2, r3
 800da26:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800da2a:	429a      	cmp	r2, r3
 800da2c:	d127      	bne.n	800da7e <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800da2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da30:	3330      	adds	r3, #48	; 0x30
 800da32:	4618      	mov	r0, r3
 800da34:	f7fe fb34 	bl	800c0a0 <ld_dword>
 800da38:	4603      	mov	r3, r0
 800da3a:	4a1c      	ldr	r2, [pc, #112]	; (800daac <find_volume+0x48c>)
 800da3c:	4293      	cmp	r3, r2
 800da3e:	d11e      	bne.n	800da7e <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800da40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da42:	3330      	adds	r3, #48	; 0x30
 800da44:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800da48:	4618      	mov	r0, r3
 800da4a:	f7fe fb29 	bl	800c0a0 <ld_dword>
 800da4e:	4603      	mov	r3, r0
 800da50:	4a17      	ldr	r2, [pc, #92]	; (800dab0 <find_volume+0x490>)
 800da52:	4293      	cmp	r3, r2
 800da54:	d113      	bne.n	800da7e <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800da56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da58:	3330      	adds	r3, #48	; 0x30
 800da5a:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800da5e:	4618      	mov	r0, r3
 800da60:	f7fe fb1e 	bl	800c0a0 <ld_dword>
 800da64:	4602      	mov	r2, r0
 800da66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da68:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800da6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da6c:	3330      	adds	r3, #48	; 0x30
 800da6e:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800da72:	4618      	mov	r0, r3
 800da74:	f7fe fb14 	bl	800c0a0 <ld_dword>
 800da78:	4602      	mov	r2, r0
 800da7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da7c:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800da7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da80:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800da84:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800da86:	4b0b      	ldr	r3, [pc, #44]	; (800dab4 <find_volume+0x494>)
 800da88:	881b      	ldrh	r3, [r3, #0]
 800da8a:	3301      	adds	r3, #1
 800da8c:	b29a      	uxth	r2, r3
 800da8e:	4b09      	ldr	r3, [pc, #36]	; (800dab4 <find_volume+0x494>)
 800da90:	801a      	strh	r2, [r3, #0]
 800da92:	4b08      	ldr	r3, [pc, #32]	; (800dab4 <find_volume+0x494>)
 800da94:	881a      	ldrh	r2, [r3, #0]
 800da96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da98:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800da9a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800da9c:	f7fe fd30 	bl	800c500 <clear_lock>
#endif
	return FR_OK;
 800daa0:	2300      	movs	r3, #0
}
 800daa2:	4618      	mov	r0, r3
 800daa4:	3758      	adds	r7, #88	; 0x58
 800daa6:	46bd      	mov	sp, r7
 800daa8:	bd80      	pop	{r7, pc}
 800daaa:	bf00      	nop
 800daac:	41615252 	.word	0x41615252
 800dab0:	61417272 	.word	0x61417272
 800dab4:	20000d18 	.word	0x20000d18

0800dab8 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800dab8:	b580      	push	{r7, lr}
 800daba:	b084      	sub	sp, #16
 800dabc:	af00      	add	r7, sp, #0
 800dabe:	6078      	str	r0, [r7, #4]
 800dac0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800dac2:	2309      	movs	r3, #9
 800dac4:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	2b00      	cmp	r3, #0
 800daca:	d01c      	beq.n	800db06 <validate+0x4e>
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	681b      	ldr	r3, [r3, #0]
 800dad0:	2b00      	cmp	r3, #0
 800dad2:	d018      	beq.n	800db06 <validate+0x4e>
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	681b      	ldr	r3, [r3, #0]
 800dad8:	781b      	ldrb	r3, [r3, #0]
 800dada:	2b00      	cmp	r3, #0
 800dadc:	d013      	beq.n	800db06 <validate+0x4e>
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	889a      	ldrh	r2, [r3, #4]
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	681b      	ldr	r3, [r3, #0]
 800dae6:	88db      	ldrh	r3, [r3, #6]
 800dae8:	429a      	cmp	r2, r3
 800daea:	d10c      	bne.n	800db06 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	681b      	ldr	r3, [r3, #0]
 800daf0:	785b      	ldrb	r3, [r3, #1]
 800daf2:	4618      	mov	r0, r3
 800daf4:	f7fe fa1c 	bl	800bf30 <disk_status>
 800daf8:	4603      	mov	r3, r0
 800dafa:	f003 0301 	and.w	r3, r3, #1
 800dafe:	2b00      	cmp	r3, #0
 800db00:	d101      	bne.n	800db06 <validate+0x4e>
			res = FR_OK;
 800db02:	2300      	movs	r3, #0
 800db04:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800db06:	7bfb      	ldrb	r3, [r7, #15]
 800db08:	2b00      	cmp	r3, #0
 800db0a:	d102      	bne.n	800db12 <validate+0x5a>
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	681b      	ldr	r3, [r3, #0]
 800db10:	e000      	b.n	800db14 <validate+0x5c>
 800db12:	2300      	movs	r3, #0
 800db14:	683a      	ldr	r2, [r7, #0]
 800db16:	6013      	str	r3, [r2, #0]
	return res;
 800db18:	7bfb      	ldrb	r3, [r7, #15]
}
 800db1a:	4618      	mov	r0, r3
 800db1c:	3710      	adds	r7, #16
 800db1e:	46bd      	mov	sp, r7
 800db20:	bd80      	pop	{r7, pc}
	...

0800db24 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800db24:	b580      	push	{r7, lr}
 800db26:	b088      	sub	sp, #32
 800db28:	af00      	add	r7, sp, #0
 800db2a:	60f8      	str	r0, [r7, #12]
 800db2c:	60b9      	str	r1, [r7, #8]
 800db2e:	4613      	mov	r3, r2
 800db30:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800db32:	68bb      	ldr	r3, [r7, #8]
 800db34:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800db36:	f107 0310 	add.w	r3, r7, #16
 800db3a:	4618      	mov	r0, r3
 800db3c:	f7ff fcd5 	bl	800d4ea <get_ldnumber>
 800db40:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800db42:	69fb      	ldr	r3, [r7, #28]
 800db44:	2b00      	cmp	r3, #0
 800db46:	da01      	bge.n	800db4c <f_mount+0x28>
 800db48:	230b      	movs	r3, #11
 800db4a:	e02b      	b.n	800dba4 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800db4c:	4a17      	ldr	r2, [pc, #92]	; (800dbac <f_mount+0x88>)
 800db4e:	69fb      	ldr	r3, [r7, #28]
 800db50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800db54:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800db56:	69bb      	ldr	r3, [r7, #24]
 800db58:	2b00      	cmp	r3, #0
 800db5a:	d005      	beq.n	800db68 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800db5c:	69b8      	ldr	r0, [r7, #24]
 800db5e:	f7fe fccf 	bl	800c500 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800db62:	69bb      	ldr	r3, [r7, #24]
 800db64:	2200      	movs	r2, #0
 800db66:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800db68:	68fb      	ldr	r3, [r7, #12]
 800db6a:	2b00      	cmp	r3, #0
 800db6c:	d002      	beq.n	800db74 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800db6e:	68fb      	ldr	r3, [r7, #12]
 800db70:	2200      	movs	r2, #0
 800db72:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800db74:	68fa      	ldr	r2, [r7, #12]
 800db76:	490d      	ldr	r1, [pc, #52]	; (800dbac <f_mount+0x88>)
 800db78:	69fb      	ldr	r3, [r7, #28]
 800db7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800db7e:	68fb      	ldr	r3, [r7, #12]
 800db80:	2b00      	cmp	r3, #0
 800db82:	d002      	beq.n	800db8a <f_mount+0x66>
 800db84:	79fb      	ldrb	r3, [r7, #7]
 800db86:	2b01      	cmp	r3, #1
 800db88:	d001      	beq.n	800db8e <f_mount+0x6a>
 800db8a:	2300      	movs	r3, #0
 800db8c:	e00a      	b.n	800dba4 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800db8e:	f107 010c 	add.w	r1, r7, #12
 800db92:	f107 0308 	add.w	r3, r7, #8
 800db96:	2200      	movs	r2, #0
 800db98:	4618      	mov	r0, r3
 800db9a:	f7ff fd41 	bl	800d620 <find_volume>
 800db9e:	4603      	mov	r3, r0
 800dba0:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800dba2:	7dfb      	ldrb	r3, [r7, #23]
}
 800dba4:	4618      	mov	r0, r3
 800dba6:	3720      	adds	r7, #32
 800dba8:	46bd      	mov	sp, r7
 800dbaa:	bd80      	pop	{r7, pc}
 800dbac:	20000d14 	.word	0x20000d14

0800dbb0 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800dbb0:	b580      	push	{r7, lr}
 800dbb2:	b098      	sub	sp, #96	; 0x60
 800dbb4:	af00      	add	r7, sp, #0
 800dbb6:	60f8      	str	r0, [r7, #12]
 800dbb8:	60b9      	str	r1, [r7, #8]
 800dbba:	4613      	mov	r3, r2
 800dbbc:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800dbbe:	68fb      	ldr	r3, [r7, #12]
 800dbc0:	2b00      	cmp	r3, #0
 800dbc2:	d101      	bne.n	800dbc8 <f_open+0x18>
 800dbc4:	2309      	movs	r3, #9
 800dbc6:	e1ad      	b.n	800df24 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800dbc8:	79fb      	ldrb	r3, [r7, #7]
 800dbca:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800dbce:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800dbd0:	79fa      	ldrb	r2, [r7, #7]
 800dbd2:	f107 0110 	add.w	r1, r7, #16
 800dbd6:	f107 0308 	add.w	r3, r7, #8
 800dbda:	4618      	mov	r0, r3
 800dbdc:	f7ff fd20 	bl	800d620 <find_volume>
 800dbe0:	4603      	mov	r3, r0
 800dbe2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800dbe6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800dbea:	2b00      	cmp	r3, #0
 800dbec:	f040 8191 	bne.w	800df12 <f_open+0x362>
		dj.obj.fs = fs;
 800dbf0:	693b      	ldr	r3, [r7, #16]
 800dbf2:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800dbf4:	68ba      	ldr	r2, [r7, #8]
 800dbf6:	f107 0314 	add.w	r3, r7, #20
 800dbfa:	4611      	mov	r1, r2
 800dbfc:	4618      	mov	r0, r3
 800dbfe:	f7ff fc03 	bl	800d408 <follow_path>
 800dc02:	4603      	mov	r3, r0
 800dc04:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800dc08:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800dc0c:	2b00      	cmp	r3, #0
 800dc0e:	d11a      	bne.n	800dc46 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800dc10:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800dc14:	b25b      	sxtb	r3, r3
 800dc16:	2b00      	cmp	r3, #0
 800dc18:	da03      	bge.n	800dc22 <f_open+0x72>
				res = FR_INVALID_NAME;
 800dc1a:	2306      	movs	r3, #6
 800dc1c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800dc20:	e011      	b.n	800dc46 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800dc22:	79fb      	ldrb	r3, [r7, #7]
 800dc24:	f023 0301 	bic.w	r3, r3, #1
 800dc28:	2b00      	cmp	r3, #0
 800dc2a:	bf14      	ite	ne
 800dc2c:	2301      	movne	r3, #1
 800dc2e:	2300      	moveq	r3, #0
 800dc30:	b2db      	uxtb	r3, r3
 800dc32:	461a      	mov	r2, r3
 800dc34:	f107 0314 	add.w	r3, r7, #20
 800dc38:	4611      	mov	r1, r2
 800dc3a:	4618      	mov	r0, r3
 800dc3c:	f7fe fb18 	bl	800c270 <chk_lock>
 800dc40:	4603      	mov	r3, r0
 800dc42:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800dc46:	79fb      	ldrb	r3, [r7, #7]
 800dc48:	f003 031c 	and.w	r3, r3, #28
 800dc4c:	2b00      	cmp	r3, #0
 800dc4e:	d07f      	beq.n	800dd50 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800dc50:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800dc54:	2b00      	cmp	r3, #0
 800dc56:	d017      	beq.n	800dc88 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800dc58:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800dc5c:	2b04      	cmp	r3, #4
 800dc5e:	d10e      	bne.n	800dc7e <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800dc60:	f7fe fb62 	bl	800c328 <enq_lock>
 800dc64:	4603      	mov	r3, r0
 800dc66:	2b00      	cmp	r3, #0
 800dc68:	d006      	beq.n	800dc78 <f_open+0xc8>
 800dc6a:	f107 0314 	add.w	r3, r7, #20
 800dc6e:	4618      	mov	r0, r3
 800dc70:	f7ff faa4 	bl	800d1bc <dir_register>
 800dc74:	4603      	mov	r3, r0
 800dc76:	e000      	b.n	800dc7a <f_open+0xca>
 800dc78:	2312      	movs	r3, #18
 800dc7a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800dc7e:	79fb      	ldrb	r3, [r7, #7]
 800dc80:	f043 0308 	orr.w	r3, r3, #8
 800dc84:	71fb      	strb	r3, [r7, #7]
 800dc86:	e010      	b.n	800dcaa <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800dc88:	7ebb      	ldrb	r3, [r7, #26]
 800dc8a:	f003 0311 	and.w	r3, r3, #17
 800dc8e:	2b00      	cmp	r3, #0
 800dc90:	d003      	beq.n	800dc9a <f_open+0xea>
					res = FR_DENIED;
 800dc92:	2307      	movs	r3, #7
 800dc94:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800dc98:	e007      	b.n	800dcaa <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800dc9a:	79fb      	ldrb	r3, [r7, #7]
 800dc9c:	f003 0304 	and.w	r3, r3, #4
 800dca0:	2b00      	cmp	r3, #0
 800dca2:	d002      	beq.n	800dcaa <f_open+0xfa>
 800dca4:	2308      	movs	r3, #8
 800dca6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800dcaa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800dcae:	2b00      	cmp	r3, #0
 800dcb0:	d168      	bne.n	800dd84 <f_open+0x1d4>
 800dcb2:	79fb      	ldrb	r3, [r7, #7]
 800dcb4:	f003 0308 	and.w	r3, r3, #8
 800dcb8:	2b00      	cmp	r3, #0
 800dcba:	d063      	beq.n	800dd84 <f_open+0x1d4>
				dw = GET_FATTIME();
 800dcbc:	f7fb ffc4 	bl	8009c48 <get_fattime>
 800dcc0:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800dcc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dcc4:	330e      	adds	r3, #14
 800dcc6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800dcc8:	4618      	mov	r0, r3
 800dcca:	f7fe fa27 	bl	800c11c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800dcce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dcd0:	3316      	adds	r3, #22
 800dcd2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800dcd4:	4618      	mov	r0, r3
 800dcd6:	f7fe fa21 	bl	800c11c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800dcda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dcdc:	330b      	adds	r3, #11
 800dcde:	2220      	movs	r2, #32
 800dce0:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800dce2:	693b      	ldr	r3, [r7, #16]
 800dce4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800dce6:	4611      	mov	r1, r2
 800dce8:	4618      	mov	r0, r3
 800dcea:	f7ff f976 	bl	800cfda <ld_clust>
 800dcee:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800dcf0:	693b      	ldr	r3, [r7, #16]
 800dcf2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800dcf4:	2200      	movs	r2, #0
 800dcf6:	4618      	mov	r0, r3
 800dcf8:	f7ff f98e 	bl	800d018 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800dcfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dcfe:	331c      	adds	r3, #28
 800dd00:	2100      	movs	r1, #0
 800dd02:	4618      	mov	r0, r3
 800dd04:	f7fe fa0a 	bl	800c11c <st_dword>
					fs->wflag = 1;
 800dd08:	693b      	ldr	r3, [r7, #16]
 800dd0a:	2201      	movs	r2, #1
 800dd0c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800dd0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dd10:	2b00      	cmp	r3, #0
 800dd12:	d037      	beq.n	800dd84 <f_open+0x1d4>
						dw = fs->winsect;
 800dd14:	693b      	ldr	r3, [r7, #16]
 800dd16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd18:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800dd1a:	f107 0314 	add.w	r3, r7, #20
 800dd1e:	2200      	movs	r2, #0
 800dd20:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800dd22:	4618      	mov	r0, r3
 800dd24:	f7fe fea1 	bl	800ca6a <remove_chain>
 800dd28:	4603      	mov	r3, r0
 800dd2a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800dd2e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800dd32:	2b00      	cmp	r3, #0
 800dd34:	d126      	bne.n	800dd84 <f_open+0x1d4>
							res = move_window(fs, dw);
 800dd36:	693b      	ldr	r3, [r7, #16]
 800dd38:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800dd3a:	4618      	mov	r0, r3
 800dd3c:	f7fe fc48 	bl	800c5d0 <move_window>
 800dd40:	4603      	mov	r3, r0
 800dd42:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800dd46:	693b      	ldr	r3, [r7, #16]
 800dd48:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800dd4a:	3a01      	subs	r2, #1
 800dd4c:	60da      	str	r2, [r3, #12]
 800dd4e:	e019      	b.n	800dd84 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800dd50:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800dd54:	2b00      	cmp	r3, #0
 800dd56:	d115      	bne.n	800dd84 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800dd58:	7ebb      	ldrb	r3, [r7, #26]
 800dd5a:	f003 0310 	and.w	r3, r3, #16
 800dd5e:	2b00      	cmp	r3, #0
 800dd60:	d003      	beq.n	800dd6a <f_open+0x1ba>
					res = FR_NO_FILE;
 800dd62:	2304      	movs	r3, #4
 800dd64:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800dd68:	e00c      	b.n	800dd84 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800dd6a:	79fb      	ldrb	r3, [r7, #7]
 800dd6c:	f003 0302 	and.w	r3, r3, #2
 800dd70:	2b00      	cmp	r3, #0
 800dd72:	d007      	beq.n	800dd84 <f_open+0x1d4>
 800dd74:	7ebb      	ldrb	r3, [r7, #26]
 800dd76:	f003 0301 	and.w	r3, r3, #1
 800dd7a:	2b00      	cmp	r3, #0
 800dd7c:	d002      	beq.n	800dd84 <f_open+0x1d4>
						res = FR_DENIED;
 800dd7e:	2307      	movs	r3, #7
 800dd80:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800dd84:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800dd88:	2b00      	cmp	r3, #0
 800dd8a:	d128      	bne.n	800ddde <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800dd8c:	79fb      	ldrb	r3, [r7, #7]
 800dd8e:	f003 0308 	and.w	r3, r3, #8
 800dd92:	2b00      	cmp	r3, #0
 800dd94:	d003      	beq.n	800dd9e <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800dd96:	79fb      	ldrb	r3, [r7, #7]
 800dd98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dd9c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800dd9e:	693b      	ldr	r3, [r7, #16]
 800dda0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dda2:	68fb      	ldr	r3, [r7, #12]
 800dda4:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800dda6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800dda8:	68fb      	ldr	r3, [r7, #12]
 800ddaa:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800ddac:	79fb      	ldrb	r3, [r7, #7]
 800ddae:	f023 0301 	bic.w	r3, r3, #1
 800ddb2:	2b00      	cmp	r3, #0
 800ddb4:	bf14      	ite	ne
 800ddb6:	2301      	movne	r3, #1
 800ddb8:	2300      	moveq	r3, #0
 800ddba:	b2db      	uxtb	r3, r3
 800ddbc:	461a      	mov	r2, r3
 800ddbe:	f107 0314 	add.w	r3, r7, #20
 800ddc2:	4611      	mov	r1, r2
 800ddc4:	4618      	mov	r0, r3
 800ddc6:	f7fe fad1 	bl	800c36c <inc_lock>
 800ddca:	4602      	mov	r2, r0
 800ddcc:	68fb      	ldr	r3, [r7, #12]
 800ddce:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800ddd0:	68fb      	ldr	r3, [r7, #12]
 800ddd2:	691b      	ldr	r3, [r3, #16]
 800ddd4:	2b00      	cmp	r3, #0
 800ddd6:	d102      	bne.n	800ddde <f_open+0x22e>
 800ddd8:	2302      	movs	r3, #2
 800ddda:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800ddde:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800dde2:	2b00      	cmp	r3, #0
 800dde4:	f040 8095 	bne.w	800df12 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800dde8:	693b      	ldr	r3, [r7, #16]
 800ddea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ddec:	4611      	mov	r1, r2
 800ddee:	4618      	mov	r0, r3
 800ddf0:	f7ff f8f3 	bl	800cfda <ld_clust>
 800ddf4:	4602      	mov	r2, r0
 800ddf6:	68fb      	ldr	r3, [r7, #12]
 800ddf8:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800ddfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ddfc:	331c      	adds	r3, #28
 800ddfe:	4618      	mov	r0, r3
 800de00:	f7fe f94e 	bl	800c0a0 <ld_dword>
 800de04:	4602      	mov	r2, r0
 800de06:	68fb      	ldr	r3, [r7, #12]
 800de08:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800de0a:	68fb      	ldr	r3, [r7, #12]
 800de0c:	2200      	movs	r2, #0
 800de0e:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800de10:	693a      	ldr	r2, [r7, #16]
 800de12:	68fb      	ldr	r3, [r7, #12]
 800de14:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800de16:	693b      	ldr	r3, [r7, #16]
 800de18:	88da      	ldrh	r2, [r3, #6]
 800de1a:	68fb      	ldr	r3, [r7, #12]
 800de1c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800de1e:	68fb      	ldr	r3, [r7, #12]
 800de20:	79fa      	ldrb	r2, [r7, #7]
 800de22:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800de24:	68fb      	ldr	r3, [r7, #12]
 800de26:	2200      	movs	r2, #0
 800de28:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800de2a:	68fb      	ldr	r3, [r7, #12]
 800de2c:	2200      	movs	r2, #0
 800de2e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800de30:	68fb      	ldr	r3, [r7, #12]
 800de32:	2200      	movs	r2, #0
 800de34:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800de36:	68fb      	ldr	r3, [r7, #12]
 800de38:	3330      	adds	r3, #48	; 0x30
 800de3a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800de3e:	2100      	movs	r1, #0
 800de40:	4618      	mov	r0, r3
 800de42:	f7fe f9b8 	bl	800c1b6 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800de46:	79fb      	ldrb	r3, [r7, #7]
 800de48:	f003 0320 	and.w	r3, r3, #32
 800de4c:	2b00      	cmp	r3, #0
 800de4e:	d060      	beq.n	800df12 <f_open+0x362>
 800de50:	68fb      	ldr	r3, [r7, #12]
 800de52:	68db      	ldr	r3, [r3, #12]
 800de54:	2b00      	cmp	r3, #0
 800de56:	d05c      	beq.n	800df12 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800de58:	68fb      	ldr	r3, [r7, #12]
 800de5a:	68da      	ldr	r2, [r3, #12]
 800de5c:	68fb      	ldr	r3, [r7, #12]
 800de5e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800de60:	693b      	ldr	r3, [r7, #16]
 800de62:	895b      	ldrh	r3, [r3, #10]
 800de64:	025b      	lsls	r3, r3, #9
 800de66:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800de68:	68fb      	ldr	r3, [r7, #12]
 800de6a:	689b      	ldr	r3, [r3, #8]
 800de6c:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800de6e:	68fb      	ldr	r3, [r7, #12]
 800de70:	68db      	ldr	r3, [r3, #12]
 800de72:	657b      	str	r3, [r7, #84]	; 0x54
 800de74:	e016      	b.n	800dea4 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800de76:	68fb      	ldr	r3, [r7, #12]
 800de78:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800de7a:	4618      	mov	r0, r3
 800de7c:	f7fe fc63 	bl	800c746 <get_fat>
 800de80:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800de82:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800de84:	2b01      	cmp	r3, #1
 800de86:	d802      	bhi.n	800de8e <f_open+0x2de>
 800de88:	2302      	movs	r3, #2
 800de8a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800de8e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800de90:	f1b3 3fff 	cmp.w	r3, #4294967295
 800de94:	d102      	bne.n	800de9c <f_open+0x2ec>
 800de96:	2301      	movs	r3, #1
 800de98:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800de9c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800de9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dea0:	1ad3      	subs	r3, r2, r3
 800dea2:	657b      	str	r3, [r7, #84]	; 0x54
 800dea4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800dea8:	2b00      	cmp	r3, #0
 800deaa:	d103      	bne.n	800deb4 <f_open+0x304>
 800deac:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800deae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800deb0:	429a      	cmp	r2, r3
 800deb2:	d8e0      	bhi.n	800de76 <f_open+0x2c6>
				}
				fp->clust = clst;
 800deb4:	68fb      	ldr	r3, [r7, #12]
 800deb6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800deb8:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800deba:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800debe:	2b00      	cmp	r3, #0
 800dec0:	d127      	bne.n	800df12 <f_open+0x362>
 800dec2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dec4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dec8:	2b00      	cmp	r3, #0
 800deca:	d022      	beq.n	800df12 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800decc:	693b      	ldr	r3, [r7, #16]
 800dece:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ded0:	4618      	mov	r0, r3
 800ded2:	f7fe fc19 	bl	800c708 <clust2sect>
 800ded6:	6478      	str	r0, [r7, #68]	; 0x44
 800ded8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800deda:	2b00      	cmp	r3, #0
 800dedc:	d103      	bne.n	800dee6 <f_open+0x336>
						res = FR_INT_ERR;
 800dede:	2302      	movs	r3, #2
 800dee0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800dee4:	e015      	b.n	800df12 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800dee6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dee8:	0a5a      	lsrs	r2, r3, #9
 800deea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800deec:	441a      	add	r2, r3
 800deee:	68fb      	ldr	r3, [r7, #12]
 800def0:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800def2:	693b      	ldr	r3, [r7, #16]
 800def4:	7858      	ldrb	r0, [r3, #1]
 800def6:	68fb      	ldr	r3, [r7, #12]
 800def8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800defc:	68fb      	ldr	r3, [r7, #12]
 800defe:	6a1a      	ldr	r2, [r3, #32]
 800df00:	2301      	movs	r3, #1
 800df02:	f7fe f857 	bl	800bfb4 <disk_read>
 800df06:	4603      	mov	r3, r0
 800df08:	2b00      	cmp	r3, #0
 800df0a:	d002      	beq.n	800df12 <f_open+0x362>
 800df0c:	2301      	movs	r3, #1
 800df0e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800df12:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800df16:	2b00      	cmp	r3, #0
 800df18:	d002      	beq.n	800df20 <f_open+0x370>
 800df1a:	68fb      	ldr	r3, [r7, #12]
 800df1c:	2200      	movs	r2, #0
 800df1e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800df20:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800df24:	4618      	mov	r0, r3
 800df26:	3760      	adds	r7, #96	; 0x60
 800df28:	46bd      	mov	sp, r7
 800df2a:	bd80      	pop	{r7, pc}

0800df2c <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800df2c:	b580      	push	{r7, lr}
 800df2e:	b08e      	sub	sp, #56	; 0x38
 800df30:	af00      	add	r7, sp, #0
 800df32:	60f8      	str	r0, [r7, #12]
 800df34:	60b9      	str	r1, [r7, #8]
 800df36:	607a      	str	r2, [r7, #4]
 800df38:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800df3a:	68bb      	ldr	r3, [r7, #8]
 800df3c:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800df3e:	683b      	ldr	r3, [r7, #0]
 800df40:	2200      	movs	r2, #0
 800df42:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800df44:	68fb      	ldr	r3, [r7, #12]
 800df46:	f107 0214 	add.w	r2, r7, #20
 800df4a:	4611      	mov	r1, r2
 800df4c:	4618      	mov	r0, r3
 800df4e:	f7ff fdb3 	bl	800dab8 <validate>
 800df52:	4603      	mov	r3, r0
 800df54:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800df58:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800df5c:	2b00      	cmp	r3, #0
 800df5e:	d107      	bne.n	800df70 <f_read+0x44>
 800df60:	68fb      	ldr	r3, [r7, #12]
 800df62:	7d5b      	ldrb	r3, [r3, #21]
 800df64:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800df68:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800df6c:	2b00      	cmp	r3, #0
 800df6e:	d002      	beq.n	800df76 <f_read+0x4a>
 800df70:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800df74:	e115      	b.n	800e1a2 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800df76:	68fb      	ldr	r3, [r7, #12]
 800df78:	7d1b      	ldrb	r3, [r3, #20]
 800df7a:	f003 0301 	and.w	r3, r3, #1
 800df7e:	2b00      	cmp	r3, #0
 800df80:	d101      	bne.n	800df86 <f_read+0x5a>
 800df82:	2307      	movs	r3, #7
 800df84:	e10d      	b.n	800e1a2 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 800df86:	68fb      	ldr	r3, [r7, #12]
 800df88:	68da      	ldr	r2, [r3, #12]
 800df8a:	68fb      	ldr	r3, [r7, #12]
 800df8c:	699b      	ldr	r3, [r3, #24]
 800df8e:	1ad3      	subs	r3, r2, r3
 800df90:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800df92:	687a      	ldr	r2, [r7, #4]
 800df94:	6a3b      	ldr	r3, [r7, #32]
 800df96:	429a      	cmp	r2, r3
 800df98:	f240 80fe 	bls.w	800e198 <f_read+0x26c>
 800df9c:	6a3b      	ldr	r3, [r7, #32]
 800df9e:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800dfa0:	e0fa      	b.n	800e198 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800dfa2:	68fb      	ldr	r3, [r7, #12]
 800dfa4:	699b      	ldr	r3, [r3, #24]
 800dfa6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dfaa:	2b00      	cmp	r3, #0
 800dfac:	f040 80c6 	bne.w	800e13c <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800dfb0:	68fb      	ldr	r3, [r7, #12]
 800dfb2:	699b      	ldr	r3, [r3, #24]
 800dfb4:	0a5b      	lsrs	r3, r3, #9
 800dfb6:	697a      	ldr	r2, [r7, #20]
 800dfb8:	8952      	ldrh	r2, [r2, #10]
 800dfba:	3a01      	subs	r2, #1
 800dfbc:	4013      	ands	r3, r2
 800dfbe:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800dfc0:	69fb      	ldr	r3, [r7, #28]
 800dfc2:	2b00      	cmp	r3, #0
 800dfc4:	d12f      	bne.n	800e026 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800dfc6:	68fb      	ldr	r3, [r7, #12]
 800dfc8:	699b      	ldr	r3, [r3, #24]
 800dfca:	2b00      	cmp	r3, #0
 800dfcc:	d103      	bne.n	800dfd6 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800dfce:	68fb      	ldr	r3, [r7, #12]
 800dfd0:	689b      	ldr	r3, [r3, #8]
 800dfd2:	633b      	str	r3, [r7, #48]	; 0x30
 800dfd4:	e013      	b.n	800dffe <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800dfd6:	68fb      	ldr	r3, [r7, #12]
 800dfd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dfda:	2b00      	cmp	r3, #0
 800dfdc:	d007      	beq.n	800dfee <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800dfde:	68fb      	ldr	r3, [r7, #12]
 800dfe0:	699b      	ldr	r3, [r3, #24]
 800dfe2:	4619      	mov	r1, r3
 800dfe4:	68f8      	ldr	r0, [r7, #12]
 800dfe6:	f7fe fe3d 	bl	800cc64 <clmt_clust>
 800dfea:	6338      	str	r0, [r7, #48]	; 0x30
 800dfec:	e007      	b.n	800dffe <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800dfee:	68fa      	ldr	r2, [r7, #12]
 800dff0:	68fb      	ldr	r3, [r7, #12]
 800dff2:	69db      	ldr	r3, [r3, #28]
 800dff4:	4619      	mov	r1, r3
 800dff6:	4610      	mov	r0, r2
 800dff8:	f7fe fba5 	bl	800c746 <get_fat>
 800dffc:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800dffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e000:	2b01      	cmp	r3, #1
 800e002:	d804      	bhi.n	800e00e <f_read+0xe2>
 800e004:	68fb      	ldr	r3, [r7, #12]
 800e006:	2202      	movs	r2, #2
 800e008:	755a      	strb	r2, [r3, #21]
 800e00a:	2302      	movs	r3, #2
 800e00c:	e0c9      	b.n	800e1a2 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800e00e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e010:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e014:	d104      	bne.n	800e020 <f_read+0xf4>
 800e016:	68fb      	ldr	r3, [r7, #12]
 800e018:	2201      	movs	r2, #1
 800e01a:	755a      	strb	r2, [r3, #21]
 800e01c:	2301      	movs	r3, #1
 800e01e:	e0c0      	b.n	800e1a2 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 800e020:	68fb      	ldr	r3, [r7, #12]
 800e022:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e024:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800e026:	697a      	ldr	r2, [r7, #20]
 800e028:	68fb      	ldr	r3, [r7, #12]
 800e02a:	69db      	ldr	r3, [r3, #28]
 800e02c:	4619      	mov	r1, r3
 800e02e:	4610      	mov	r0, r2
 800e030:	f7fe fb6a 	bl	800c708 <clust2sect>
 800e034:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800e036:	69bb      	ldr	r3, [r7, #24]
 800e038:	2b00      	cmp	r3, #0
 800e03a:	d104      	bne.n	800e046 <f_read+0x11a>
 800e03c:	68fb      	ldr	r3, [r7, #12]
 800e03e:	2202      	movs	r2, #2
 800e040:	755a      	strb	r2, [r3, #21]
 800e042:	2302      	movs	r3, #2
 800e044:	e0ad      	b.n	800e1a2 <f_read+0x276>
			sect += csect;
 800e046:	69ba      	ldr	r2, [r7, #24]
 800e048:	69fb      	ldr	r3, [r7, #28]
 800e04a:	4413      	add	r3, r2
 800e04c:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	0a5b      	lsrs	r3, r3, #9
 800e052:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800e054:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e056:	2b00      	cmp	r3, #0
 800e058:	d039      	beq.n	800e0ce <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800e05a:	69fa      	ldr	r2, [r7, #28]
 800e05c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e05e:	4413      	add	r3, r2
 800e060:	697a      	ldr	r2, [r7, #20]
 800e062:	8952      	ldrh	r2, [r2, #10]
 800e064:	4293      	cmp	r3, r2
 800e066:	d905      	bls.n	800e074 <f_read+0x148>
					cc = fs->csize - csect;
 800e068:	697b      	ldr	r3, [r7, #20]
 800e06a:	895b      	ldrh	r3, [r3, #10]
 800e06c:	461a      	mov	r2, r3
 800e06e:	69fb      	ldr	r3, [r7, #28]
 800e070:	1ad3      	subs	r3, r2, r3
 800e072:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e074:	697b      	ldr	r3, [r7, #20]
 800e076:	7858      	ldrb	r0, [r3, #1]
 800e078:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e07a:	69ba      	ldr	r2, [r7, #24]
 800e07c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e07e:	f7fd ff99 	bl	800bfb4 <disk_read>
 800e082:	4603      	mov	r3, r0
 800e084:	2b00      	cmp	r3, #0
 800e086:	d004      	beq.n	800e092 <f_read+0x166>
 800e088:	68fb      	ldr	r3, [r7, #12]
 800e08a:	2201      	movs	r2, #1
 800e08c:	755a      	strb	r2, [r3, #21]
 800e08e:	2301      	movs	r3, #1
 800e090:	e087      	b.n	800e1a2 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800e092:	68fb      	ldr	r3, [r7, #12]
 800e094:	7d1b      	ldrb	r3, [r3, #20]
 800e096:	b25b      	sxtb	r3, r3
 800e098:	2b00      	cmp	r3, #0
 800e09a:	da14      	bge.n	800e0c6 <f_read+0x19a>
 800e09c:	68fb      	ldr	r3, [r7, #12]
 800e09e:	6a1a      	ldr	r2, [r3, #32]
 800e0a0:	69bb      	ldr	r3, [r7, #24]
 800e0a2:	1ad3      	subs	r3, r2, r3
 800e0a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e0a6:	429a      	cmp	r2, r3
 800e0a8:	d90d      	bls.n	800e0c6 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800e0aa:	68fb      	ldr	r3, [r7, #12]
 800e0ac:	6a1a      	ldr	r2, [r3, #32]
 800e0ae:	69bb      	ldr	r3, [r7, #24]
 800e0b0:	1ad3      	subs	r3, r2, r3
 800e0b2:	025b      	lsls	r3, r3, #9
 800e0b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e0b6:	18d0      	adds	r0, r2, r3
 800e0b8:	68fb      	ldr	r3, [r7, #12]
 800e0ba:	3330      	adds	r3, #48	; 0x30
 800e0bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e0c0:	4619      	mov	r1, r3
 800e0c2:	f7fe f857 	bl	800c174 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800e0c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0c8:	025b      	lsls	r3, r3, #9
 800e0ca:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800e0cc:	e050      	b.n	800e170 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800e0ce:	68fb      	ldr	r3, [r7, #12]
 800e0d0:	6a1b      	ldr	r3, [r3, #32]
 800e0d2:	69ba      	ldr	r2, [r7, #24]
 800e0d4:	429a      	cmp	r2, r3
 800e0d6:	d02e      	beq.n	800e136 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800e0d8:	68fb      	ldr	r3, [r7, #12]
 800e0da:	7d1b      	ldrb	r3, [r3, #20]
 800e0dc:	b25b      	sxtb	r3, r3
 800e0de:	2b00      	cmp	r3, #0
 800e0e0:	da18      	bge.n	800e114 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e0e2:	697b      	ldr	r3, [r7, #20]
 800e0e4:	7858      	ldrb	r0, [r3, #1]
 800e0e6:	68fb      	ldr	r3, [r7, #12]
 800e0e8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e0ec:	68fb      	ldr	r3, [r7, #12]
 800e0ee:	6a1a      	ldr	r2, [r3, #32]
 800e0f0:	2301      	movs	r3, #1
 800e0f2:	f7fd ff7f 	bl	800bff4 <disk_write>
 800e0f6:	4603      	mov	r3, r0
 800e0f8:	2b00      	cmp	r3, #0
 800e0fa:	d004      	beq.n	800e106 <f_read+0x1da>
 800e0fc:	68fb      	ldr	r3, [r7, #12]
 800e0fe:	2201      	movs	r2, #1
 800e100:	755a      	strb	r2, [r3, #21]
 800e102:	2301      	movs	r3, #1
 800e104:	e04d      	b.n	800e1a2 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800e106:	68fb      	ldr	r3, [r7, #12]
 800e108:	7d1b      	ldrb	r3, [r3, #20]
 800e10a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e10e:	b2da      	uxtb	r2, r3
 800e110:	68fb      	ldr	r3, [r7, #12]
 800e112:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800e114:	697b      	ldr	r3, [r7, #20]
 800e116:	7858      	ldrb	r0, [r3, #1]
 800e118:	68fb      	ldr	r3, [r7, #12]
 800e11a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e11e:	2301      	movs	r3, #1
 800e120:	69ba      	ldr	r2, [r7, #24]
 800e122:	f7fd ff47 	bl	800bfb4 <disk_read>
 800e126:	4603      	mov	r3, r0
 800e128:	2b00      	cmp	r3, #0
 800e12a:	d004      	beq.n	800e136 <f_read+0x20a>
 800e12c:	68fb      	ldr	r3, [r7, #12]
 800e12e:	2201      	movs	r2, #1
 800e130:	755a      	strb	r2, [r3, #21]
 800e132:	2301      	movs	r3, #1
 800e134:	e035      	b.n	800e1a2 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 800e136:	68fb      	ldr	r3, [r7, #12]
 800e138:	69ba      	ldr	r2, [r7, #24]
 800e13a:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800e13c:	68fb      	ldr	r3, [r7, #12]
 800e13e:	699b      	ldr	r3, [r3, #24]
 800e140:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e144:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800e148:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800e14a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e14c:	687b      	ldr	r3, [r7, #4]
 800e14e:	429a      	cmp	r2, r3
 800e150:	d901      	bls.n	800e156 <f_read+0x22a>
 800e152:	687b      	ldr	r3, [r7, #4]
 800e154:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800e156:	68fb      	ldr	r3, [r7, #12]
 800e158:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e15c:	68fb      	ldr	r3, [r7, #12]
 800e15e:	699b      	ldr	r3, [r3, #24]
 800e160:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e164:	4413      	add	r3, r2
 800e166:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e168:	4619      	mov	r1, r3
 800e16a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e16c:	f7fe f802 	bl	800c174 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800e170:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e172:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e174:	4413      	add	r3, r2
 800e176:	627b      	str	r3, [r7, #36]	; 0x24
 800e178:	68fb      	ldr	r3, [r7, #12]
 800e17a:	699a      	ldr	r2, [r3, #24]
 800e17c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e17e:	441a      	add	r2, r3
 800e180:	68fb      	ldr	r3, [r7, #12]
 800e182:	619a      	str	r2, [r3, #24]
 800e184:	683b      	ldr	r3, [r7, #0]
 800e186:	681a      	ldr	r2, [r3, #0]
 800e188:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e18a:	441a      	add	r2, r3
 800e18c:	683b      	ldr	r3, [r7, #0]
 800e18e:	601a      	str	r2, [r3, #0]
 800e190:	687a      	ldr	r2, [r7, #4]
 800e192:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e194:	1ad3      	subs	r3, r2, r3
 800e196:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	2b00      	cmp	r3, #0
 800e19c:	f47f af01 	bne.w	800dfa2 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800e1a0:	2300      	movs	r3, #0
}
 800e1a2:	4618      	mov	r0, r3
 800e1a4:	3738      	adds	r7, #56	; 0x38
 800e1a6:	46bd      	mov	sp, r7
 800e1a8:	bd80      	pop	{r7, pc}

0800e1aa <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800e1aa:	b580      	push	{r7, lr}
 800e1ac:	b08c      	sub	sp, #48	; 0x30
 800e1ae:	af00      	add	r7, sp, #0
 800e1b0:	60f8      	str	r0, [r7, #12]
 800e1b2:	60b9      	str	r1, [r7, #8]
 800e1b4:	607a      	str	r2, [r7, #4]
 800e1b6:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800e1b8:	68bb      	ldr	r3, [r7, #8]
 800e1ba:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800e1bc:	683b      	ldr	r3, [r7, #0]
 800e1be:	2200      	movs	r2, #0
 800e1c0:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800e1c2:	68fb      	ldr	r3, [r7, #12]
 800e1c4:	f107 0210 	add.w	r2, r7, #16
 800e1c8:	4611      	mov	r1, r2
 800e1ca:	4618      	mov	r0, r3
 800e1cc:	f7ff fc74 	bl	800dab8 <validate>
 800e1d0:	4603      	mov	r3, r0
 800e1d2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800e1d6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e1da:	2b00      	cmp	r3, #0
 800e1dc:	d107      	bne.n	800e1ee <f_write+0x44>
 800e1de:	68fb      	ldr	r3, [r7, #12]
 800e1e0:	7d5b      	ldrb	r3, [r3, #21]
 800e1e2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800e1e6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e1ea:	2b00      	cmp	r3, #0
 800e1ec:	d002      	beq.n	800e1f4 <f_write+0x4a>
 800e1ee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e1f2:	e14b      	b.n	800e48c <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800e1f4:	68fb      	ldr	r3, [r7, #12]
 800e1f6:	7d1b      	ldrb	r3, [r3, #20]
 800e1f8:	f003 0302 	and.w	r3, r3, #2
 800e1fc:	2b00      	cmp	r3, #0
 800e1fe:	d101      	bne.n	800e204 <f_write+0x5a>
 800e200:	2307      	movs	r3, #7
 800e202:	e143      	b.n	800e48c <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800e204:	68fb      	ldr	r3, [r7, #12]
 800e206:	699a      	ldr	r2, [r3, #24]
 800e208:	687b      	ldr	r3, [r7, #4]
 800e20a:	441a      	add	r2, r3
 800e20c:	68fb      	ldr	r3, [r7, #12]
 800e20e:	699b      	ldr	r3, [r3, #24]
 800e210:	429a      	cmp	r2, r3
 800e212:	f080 812d 	bcs.w	800e470 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800e216:	68fb      	ldr	r3, [r7, #12]
 800e218:	699b      	ldr	r3, [r3, #24]
 800e21a:	43db      	mvns	r3, r3
 800e21c:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800e21e:	e127      	b.n	800e470 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800e220:	68fb      	ldr	r3, [r7, #12]
 800e222:	699b      	ldr	r3, [r3, #24]
 800e224:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e228:	2b00      	cmp	r3, #0
 800e22a:	f040 80e3 	bne.w	800e3f4 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800e22e:	68fb      	ldr	r3, [r7, #12]
 800e230:	699b      	ldr	r3, [r3, #24]
 800e232:	0a5b      	lsrs	r3, r3, #9
 800e234:	693a      	ldr	r2, [r7, #16]
 800e236:	8952      	ldrh	r2, [r2, #10]
 800e238:	3a01      	subs	r2, #1
 800e23a:	4013      	ands	r3, r2
 800e23c:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800e23e:	69bb      	ldr	r3, [r7, #24]
 800e240:	2b00      	cmp	r3, #0
 800e242:	d143      	bne.n	800e2cc <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800e244:	68fb      	ldr	r3, [r7, #12]
 800e246:	699b      	ldr	r3, [r3, #24]
 800e248:	2b00      	cmp	r3, #0
 800e24a:	d10c      	bne.n	800e266 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800e24c:	68fb      	ldr	r3, [r7, #12]
 800e24e:	689b      	ldr	r3, [r3, #8]
 800e250:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800e252:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e254:	2b00      	cmp	r3, #0
 800e256:	d11a      	bne.n	800e28e <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800e258:	68fb      	ldr	r3, [r7, #12]
 800e25a:	2100      	movs	r1, #0
 800e25c:	4618      	mov	r0, r3
 800e25e:	f7fe fc69 	bl	800cb34 <create_chain>
 800e262:	62b8      	str	r0, [r7, #40]	; 0x28
 800e264:	e013      	b.n	800e28e <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800e266:	68fb      	ldr	r3, [r7, #12]
 800e268:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e26a:	2b00      	cmp	r3, #0
 800e26c:	d007      	beq.n	800e27e <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800e26e:	68fb      	ldr	r3, [r7, #12]
 800e270:	699b      	ldr	r3, [r3, #24]
 800e272:	4619      	mov	r1, r3
 800e274:	68f8      	ldr	r0, [r7, #12]
 800e276:	f7fe fcf5 	bl	800cc64 <clmt_clust>
 800e27a:	62b8      	str	r0, [r7, #40]	; 0x28
 800e27c:	e007      	b.n	800e28e <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800e27e:	68fa      	ldr	r2, [r7, #12]
 800e280:	68fb      	ldr	r3, [r7, #12]
 800e282:	69db      	ldr	r3, [r3, #28]
 800e284:	4619      	mov	r1, r3
 800e286:	4610      	mov	r0, r2
 800e288:	f7fe fc54 	bl	800cb34 <create_chain>
 800e28c:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800e28e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e290:	2b00      	cmp	r3, #0
 800e292:	f000 80f2 	beq.w	800e47a <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800e296:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e298:	2b01      	cmp	r3, #1
 800e29a:	d104      	bne.n	800e2a6 <f_write+0xfc>
 800e29c:	68fb      	ldr	r3, [r7, #12]
 800e29e:	2202      	movs	r2, #2
 800e2a0:	755a      	strb	r2, [r3, #21]
 800e2a2:	2302      	movs	r3, #2
 800e2a4:	e0f2      	b.n	800e48c <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800e2a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e2ac:	d104      	bne.n	800e2b8 <f_write+0x10e>
 800e2ae:	68fb      	ldr	r3, [r7, #12]
 800e2b0:	2201      	movs	r2, #1
 800e2b2:	755a      	strb	r2, [r3, #21]
 800e2b4:	2301      	movs	r3, #1
 800e2b6:	e0e9      	b.n	800e48c <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800e2b8:	68fb      	ldr	r3, [r7, #12]
 800e2ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e2bc:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800e2be:	68fb      	ldr	r3, [r7, #12]
 800e2c0:	689b      	ldr	r3, [r3, #8]
 800e2c2:	2b00      	cmp	r3, #0
 800e2c4:	d102      	bne.n	800e2cc <f_write+0x122>
 800e2c6:	68fb      	ldr	r3, [r7, #12]
 800e2c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e2ca:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800e2cc:	68fb      	ldr	r3, [r7, #12]
 800e2ce:	7d1b      	ldrb	r3, [r3, #20]
 800e2d0:	b25b      	sxtb	r3, r3
 800e2d2:	2b00      	cmp	r3, #0
 800e2d4:	da18      	bge.n	800e308 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e2d6:	693b      	ldr	r3, [r7, #16]
 800e2d8:	7858      	ldrb	r0, [r3, #1]
 800e2da:	68fb      	ldr	r3, [r7, #12]
 800e2dc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e2e0:	68fb      	ldr	r3, [r7, #12]
 800e2e2:	6a1a      	ldr	r2, [r3, #32]
 800e2e4:	2301      	movs	r3, #1
 800e2e6:	f7fd fe85 	bl	800bff4 <disk_write>
 800e2ea:	4603      	mov	r3, r0
 800e2ec:	2b00      	cmp	r3, #0
 800e2ee:	d004      	beq.n	800e2fa <f_write+0x150>
 800e2f0:	68fb      	ldr	r3, [r7, #12]
 800e2f2:	2201      	movs	r2, #1
 800e2f4:	755a      	strb	r2, [r3, #21]
 800e2f6:	2301      	movs	r3, #1
 800e2f8:	e0c8      	b.n	800e48c <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800e2fa:	68fb      	ldr	r3, [r7, #12]
 800e2fc:	7d1b      	ldrb	r3, [r3, #20]
 800e2fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e302:	b2da      	uxtb	r2, r3
 800e304:	68fb      	ldr	r3, [r7, #12]
 800e306:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800e308:	693a      	ldr	r2, [r7, #16]
 800e30a:	68fb      	ldr	r3, [r7, #12]
 800e30c:	69db      	ldr	r3, [r3, #28]
 800e30e:	4619      	mov	r1, r3
 800e310:	4610      	mov	r0, r2
 800e312:	f7fe f9f9 	bl	800c708 <clust2sect>
 800e316:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800e318:	697b      	ldr	r3, [r7, #20]
 800e31a:	2b00      	cmp	r3, #0
 800e31c:	d104      	bne.n	800e328 <f_write+0x17e>
 800e31e:	68fb      	ldr	r3, [r7, #12]
 800e320:	2202      	movs	r2, #2
 800e322:	755a      	strb	r2, [r3, #21]
 800e324:	2302      	movs	r3, #2
 800e326:	e0b1      	b.n	800e48c <f_write+0x2e2>
			sect += csect;
 800e328:	697a      	ldr	r2, [r7, #20]
 800e32a:	69bb      	ldr	r3, [r7, #24]
 800e32c:	4413      	add	r3, r2
 800e32e:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	0a5b      	lsrs	r3, r3, #9
 800e334:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800e336:	6a3b      	ldr	r3, [r7, #32]
 800e338:	2b00      	cmp	r3, #0
 800e33a:	d03c      	beq.n	800e3b6 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800e33c:	69ba      	ldr	r2, [r7, #24]
 800e33e:	6a3b      	ldr	r3, [r7, #32]
 800e340:	4413      	add	r3, r2
 800e342:	693a      	ldr	r2, [r7, #16]
 800e344:	8952      	ldrh	r2, [r2, #10]
 800e346:	4293      	cmp	r3, r2
 800e348:	d905      	bls.n	800e356 <f_write+0x1ac>
					cc = fs->csize - csect;
 800e34a:	693b      	ldr	r3, [r7, #16]
 800e34c:	895b      	ldrh	r3, [r3, #10]
 800e34e:	461a      	mov	r2, r3
 800e350:	69bb      	ldr	r3, [r7, #24]
 800e352:	1ad3      	subs	r3, r2, r3
 800e354:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e356:	693b      	ldr	r3, [r7, #16]
 800e358:	7858      	ldrb	r0, [r3, #1]
 800e35a:	6a3b      	ldr	r3, [r7, #32]
 800e35c:	697a      	ldr	r2, [r7, #20]
 800e35e:	69f9      	ldr	r1, [r7, #28]
 800e360:	f7fd fe48 	bl	800bff4 <disk_write>
 800e364:	4603      	mov	r3, r0
 800e366:	2b00      	cmp	r3, #0
 800e368:	d004      	beq.n	800e374 <f_write+0x1ca>
 800e36a:	68fb      	ldr	r3, [r7, #12]
 800e36c:	2201      	movs	r2, #1
 800e36e:	755a      	strb	r2, [r3, #21]
 800e370:	2301      	movs	r3, #1
 800e372:	e08b      	b.n	800e48c <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800e374:	68fb      	ldr	r3, [r7, #12]
 800e376:	6a1a      	ldr	r2, [r3, #32]
 800e378:	697b      	ldr	r3, [r7, #20]
 800e37a:	1ad3      	subs	r3, r2, r3
 800e37c:	6a3a      	ldr	r2, [r7, #32]
 800e37e:	429a      	cmp	r2, r3
 800e380:	d915      	bls.n	800e3ae <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800e382:	68fb      	ldr	r3, [r7, #12]
 800e384:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800e388:	68fb      	ldr	r3, [r7, #12]
 800e38a:	6a1a      	ldr	r2, [r3, #32]
 800e38c:	697b      	ldr	r3, [r7, #20]
 800e38e:	1ad3      	subs	r3, r2, r3
 800e390:	025b      	lsls	r3, r3, #9
 800e392:	69fa      	ldr	r2, [r7, #28]
 800e394:	4413      	add	r3, r2
 800e396:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e39a:	4619      	mov	r1, r3
 800e39c:	f7fd feea 	bl	800c174 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800e3a0:	68fb      	ldr	r3, [r7, #12]
 800e3a2:	7d1b      	ldrb	r3, [r3, #20]
 800e3a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e3a8:	b2da      	uxtb	r2, r3
 800e3aa:	68fb      	ldr	r3, [r7, #12]
 800e3ac:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800e3ae:	6a3b      	ldr	r3, [r7, #32]
 800e3b0:	025b      	lsls	r3, r3, #9
 800e3b2:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800e3b4:	e03f      	b.n	800e436 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800e3b6:	68fb      	ldr	r3, [r7, #12]
 800e3b8:	6a1b      	ldr	r3, [r3, #32]
 800e3ba:	697a      	ldr	r2, [r7, #20]
 800e3bc:	429a      	cmp	r2, r3
 800e3be:	d016      	beq.n	800e3ee <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 800e3c0:	68fb      	ldr	r3, [r7, #12]
 800e3c2:	699a      	ldr	r2, [r3, #24]
 800e3c4:	68fb      	ldr	r3, [r7, #12]
 800e3c6:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800e3c8:	429a      	cmp	r2, r3
 800e3ca:	d210      	bcs.n	800e3ee <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800e3cc:	693b      	ldr	r3, [r7, #16]
 800e3ce:	7858      	ldrb	r0, [r3, #1]
 800e3d0:	68fb      	ldr	r3, [r7, #12]
 800e3d2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e3d6:	2301      	movs	r3, #1
 800e3d8:	697a      	ldr	r2, [r7, #20]
 800e3da:	f7fd fdeb 	bl	800bfb4 <disk_read>
 800e3de:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800e3e0:	2b00      	cmp	r3, #0
 800e3e2:	d004      	beq.n	800e3ee <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 800e3e4:	68fb      	ldr	r3, [r7, #12]
 800e3e6:	2201      	movs	r2, #1
 800e3e8:	755a      	strb	r2, [r3, #21]
 800e3ea:	2301      	movs	r3, #1
 800e3ec:	e04e      	b.n	800e48c <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 800e3ee:	68fb      	ldr	r3, [r7, #12]
 800e3f0:	697a      	ldr	r2, [r7, #20]
 800e3f2:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800e3f4:	68fb      	ldr	r3, [r7, #12]
 800e3f6:	699b      	ldr	r3, [r3, #24]
 800e3f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e3fc:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800e400:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800e402:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e404:	687b      	ldr	r3, [r7, #4]
 800e406:	429a      	cmp	r2, r3
 800e408:	d901      	bls.n	800e40e <f_write+0x264>
 800e40a:	687b      	ldr	r3, [r7, #4]
 800e40c:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800e40e:	68fb      	ldr	r3, [r7, #12]
 800e410:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e414:	68fb      	ldr	r3, [r7, #12]
 800e416:	699b      	ldr	r3, [r3, #24]
 800e418:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e41c:	4413      	add	r3, r2
 800e41e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e420:	69f9      	ldr	r1, [r7, #28]
 800e422:	4618      	mov	r0, r3
 800e424:	f7fd fea6 	bl	800c174 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800e428:	68fb      	ldr	r3, [r7, #12]
 800e42a:	7d1b      	ldrb	r3, [r3, #20]
 800e42c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800e430:	b2da      	uxtb	r2, r3
 800e432:	68fb      	ldr	r3, [r7, #12]
 800e434:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800e436:	69fa      	ldr	r2, [r7, #28]
 800e438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e43a:	4413      	add	r3, r2
 800e43c:	61fb      	str	r3, [r7, #28]
 800e43e:	68fb      	ldr	r3, [r7, #12]
 800e440:	699a      	ldr	r2, [r3, #24]
 800e442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e444:	441a      	add	r2, r3
 800e446:	68fb      	ldr	r3, [r7, #12]
 800e448:	619a      	str	r2, [r3, #24]
 800e44a:	68fb      	ldr	r3, [r7, #12]
 800e44c:	68da      	ldr	r2, [r3, #12]
 800e44e:	68fb      	ldr	r3, [r7, #12]
 800e450:	699b      	ldr	r3, [r3, #24]
 800e452:	429a      	cmp	r2, r3
 800e454:	bf38      	it	cc
 800e456:	461a      	movcc	r2, r3
 800e458:	68fb      	ldr	r3, [r7, #12]
 800e45a:	60da      	str	r2, [r3, #12]
 800e45c:	683b      	ldr	r3, [r7, #0]
 800e45e:	681a      	ldr	r2, [r3, #0]
 800e460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e462:	441a      	add	r2, r3
 800e464:	683b      	ldr	r3, [r7, #0]
 800e466:	601a      	str	r2, [r3, #0]
 800e468:	687a      	ldr	r2, [r7, #4]
 800e46a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e46c:	1ad3      	subs	r3, r2, r3
 800e46e:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800e470:	687b      	ldr	r3, [r7, #4]
 800e472:	2b00      	cmp	r3, #0
 800e474:	f47f aed4 	bne.w	800e220 <f_write+0x76>
 800e478:	e000      	b.n	800e47c <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800e47a:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800e47c:	68fb      	ldr	r3, [r7, #12]
 800e47e:	7d1b      	ldrb	r3, [r3, #20]
 800e480:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e484:	b2da      	uxtb	r2, r3
 800e486:	68fb      	ldr	r3, [r7, #12]
 800e488:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800e48a:	2300      	movs	r3, #0
}
 800e48c:	4618      	mov	r0, r3
 800e48e:	3730      	adds	r7, #48	; 0x30
 800e490:	46bd      	mov	sp, r7
 800e492:	bd80      	pop	{r7, pc}

0800e494 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800e494:	b580      	push	{r7, lr}
 800e496:	b086      	sub	sp, #24
 800e498:	af00      	add	r7, sp, #0
 800e49a:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	f107 0208 	add.w	r2, r7, #8
 800e4a2:	4611      	mov	r1, r2
 800e4a4:	4618      	mov	r0, r3
 800e4a6:	f7ff fb07 	bl	800dab8 <validate>
 800e4aa:	4603      	mov	r3, r0
 800e4ac:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800e4ae:	7dfb      	ldrb	r3, [r7, #23]
 800e4b0:	2b00      	cmp	r3, #0
 800e4b2:	d168      	bne.n	800e586 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800e4b4:	687b      	ldr	r3, [r7, #4]
 800e4b6:	7d1b      	ldrb	r3, [r3, #20]
 800e4b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e4bc:	2b00      	cmp	r3, #0
 800e4be:	d062      	beq.n	800e586 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	7d1b      	ldrb	r3, [r3, #20]
 800e4c4:	b25b      	sxtb	r3, r3
 800e4c6:	2b00      	cmp	r3, #0
 800e4c8:	da15      	bge.n	800e4f6 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800e4ca:	68bb      	ldr	r3, [r7, #8]
 800e4cc:	7858      	ldrb	r0, [r3, #1]
 800e4ce:	687b      	ldr	r3, [r7, #4]
 800e4d0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	6a1a      	ldr	r2, [r3, #32]
 800e4d8:	2301      	movs	r3, #1
 800e4da:	f7fd fd8b 	bl	800bff4 <disk_write>
 800e4de:	4603      	mov	r3, r0
 800e4e0:	2b00      	cmp	r3, #0
 800e4e2:	d001      	beq.n	800e4e8 <f_sync+0x54>
 800e4e4:	2301      	movs	r3, #1
 800e4e6:	e04f      	b.n	800e588 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	7d1b      	ldrb	r3, [r3, #20]
 800e4ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e4f0:	b2da      	uxtb	r2, r3
 800e4f2:	687b      	ldr	r3, [r7, #4]
 800e4f4:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800e4f6:	f7fb fba7 	bl	8009c48 <get_fattime>
 800e4fa:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800e4fc:	68ba      	ldr	r2, [r7, #8]
 800e4fe:	687b      	ldr	r3, [r7, #4]
 800e500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e502:	4619      	mov	r1, r3
 800e504:	4610      	mov	r0, r2
 800e506:	f7fe f863 	bl	800c5d0 <move_window>
 800e50a:	4603      	mov	r3, r0
 800e50c:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800e50e:	7dfb      	ldrb	r3, [r7, #23]
 800e510:	2b00      	cmp	r3, #0
 800e512:	d138      	bne.n	800e586 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e518:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800e51a:	68fb      	ldr	r3, [r7, #12]
 800e51c:	330b      	adds	r3, #11
 800e51e:	781a      	ldrb	r2, [r3, #0]
 800e520:	68fb      	ldr	r3, [r7, #12]
 800e522:	330b      	adds	r3, #11
 800e524:	f042 0220 	orr.w	r2, r2, #32
 800e528:	b2d2      	uxtb	r2, r2
 800e52a:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800e52c:	687b      	ldr	r3, [r7, #4]
 800e52e:	6818      	ldr	r0, [r3, #0]
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	689b      	ldr	r3, [r3, #8]
 800e534:	461a      	mov	r2, r3
 800e536:	68f9      	ldr	r1, [r7, #12]
 800e538:	f7fe fd6e 	bl	800d018 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800e53c:	68fb      	ldr	r3, [r7, #12]
 800e53e:	f103 021c 	add.w	r2, r3, #28
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	68db      	ldr	r3, [r3, #12]
 800e546:	4619      	mov	r1, r3
 800e548:	4610      	mov	r0, r2
 800e54a:	f7fd fde7 	bl	800c11c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800e54e:	68fb      	ldr	r3, [r7, #12]
 800e550:	3316      	adds	r3, #22
 800e552:	6939      	ldr	r1, [r7, #16]
 800e554:	4618      	mov	r0, r3
 800e556:	f7fd fde1 	bl	800c11c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800e55a:	68fb      	ldr	r3, [r7, #12]
 800e55c:	3312      	adds	r3, #18
 800e55e:	2100      	movs	r1, #0
 800e560:	4618      	mov	r0, r3
 800e562:	f7fd fdc0 	bl	800c0e6 <st_word>
					fs->wflag = 1;
 800e566:	68bb      	ldr	r3, [r7, #8]
 800e568:	2201      	movs	r2, #1
 800e56a:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800e56c:	68bb      	ldr	r3, [r7, #8]
 800e56e:	4618      	mov	r0, r3
 800e570:	f7fe f85c 	bl	800c62c <sync_fs>
 800e574:	4603      	mov	r3, r0
 800e576:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	7d1b      	ldrb	r3, [r3, #20]
 800e57c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e580:	b2da      	uxtb	r2, r3
 800e582:	687b      	ldr	r3, [r7, #4]
 800e584:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800e586:	7dfb      	ldrb	r3, [r7, #23]
}
 800e588:	4618      	mov	r0, r3
 800e58a:	3718      	adds	r7, #24
 800e58c:	46bd      	mov	sp, r7
 800e58e:	bd80      	pop	{r7, pc}

0800e590 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800e590:	b580      	push	{r7, lr}
 800e592:	b084      	sub	sp, #16
 800e594:	af00      	add	r7, sp, #0
 800e596:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800e598:	6878      	ldr	r0, [r7, #4]
 800e59a:	f7ff ff7b 	bl	800e494 <f_sync>
 800e59e:	4603      	mov	r3, r0
 800e5a0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800e5a2:	7bfb      	ldrb	r3, [r7, #15]
 800e5a4:	2b00      	cmp	r3, #0
 800e5a6:	d118      	bne.n	800e5da <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800e5a8:	687b      	ldr	r3, [r7, #4]
 800e5aa:	f107 0208 	add.w	r2, r7, #8
 800e5ae:	4611      	mov	r1, r2
 800e5b0:	4618      	mov	r0, r3
 800e5b2:	f7ff fa81 	bl	800dab8 <validate>
 800e5b6:	4603      	mov	r3, r0
 800e5b8:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800e5ba:	7bfb      	ldrb	r3, [r7, #15]
 800e5bc:	2b00      	cmp	r3, #0
 800e5be:	d10c      	bne.n	800e5da <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800e5c0:	687b      	ldr	r3, [r7, #4]
 800e5c2:	691b      	ldr	r3, [r3, #16]
 800e5c4:	4618      	mov	r0, r3
 800e5c6:	f7fd ff5f 	bl	800c488 <dec_lock>
 800e5ca:	4603      	mov	r3, r0
 800e5cc:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800e5ce:	7bfb      	ldrb	r3, [r7, #15]
 800e5d0:	2b00      	cmp	r3, #0
 800e5d2:	d102      	bne.n	800e5da <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	2200      	movs	r2, #0
 800e5d8:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800e5da:	7bfb      	ldrb	r3, [r7, #15]
}
 800e5dc:	4618      	mov	r0, r3
 800e5de:	3710      	adds	r7, #16
 800e5e0:	46bd      	mov	sp, r7
 800e5e2:	bd80      	pop	{r7, pc}

0800e5e4 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800e5e4:	b580      	push	{r7, lr}
 800e5e6:	b090      	sub	sp, #64	; 0x40
 800e5e8:	af00      	add	r7, sp, #0
 800e5ea:	6078      	str	r0, [r7, #4]
 800e5ec:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800e5ee:	687b      	ldr	r3, [r7, #4]
 800e5f0:	f107 0208 	add.w	r2, r7, #8
 800e5f4:	4611      	mov	r1, r2
 800e5f6:	4618      	mov	r0, r3
 800e5f8:	f7ff fa5e 	bl	800dab8 <validate>
 800e5fc:	4603      	mov	r3, r0
 800e5fe:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800e602:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800e606:	2b00      	cmp	r3, #0
 800e608:	d103      	bne.n	800e612 <f_lseek+0x2e>
 800e60a:	687b      	ldr	r3, [r7, #4]
 800e60c:	7d5b      	ldrb	r3, [r3, #21]
 800e60e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800e612:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800e616:	2b00      	cmp	r3, #0
 800e618:	d002      	beq.n	800e620 <f_lseek+0x3c>
 800e61a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800e61e:	e1e6      	b.n	800e9ee <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800e620:	687b      	ldr	r3, [r7, #4]
 800e622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e624:	2b00      	cmp	r3, #0
 800e626:	f000 80d1 	beq.w	800e7cc <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800e62a:	683b      	ldr	r3, [r7, #0]
 800e62c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e630:	d15a      	bne.n	800e6e8 <f_lseek+0x104>
			tbl = fp->cltbl;
 800e632:	687b      	ldr	r3, [r7, #4]
 800e634:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e636:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800e638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e63a:	1d1a      	adds	r2, r3, #4
 800e63c:	627a      	str	r2, [r7, #36]	; 0x24
 800e63e:	681b      	ldr	r3, [r3, #0]
 800e640:	617b      	str	r3, [r7, #20]
 800e642:	2302      	movs	r3, #2
 800e644:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800e646:	687b      	ldr	r3, [r7, #4]
 800e648:	689b      	ldr	r3, [r3, #8]
 800e64a:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 800e64c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e64e:	2b00      	cmp	r3, #0
 800e650:	d03a      	beq.n	800e6c8 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800e652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e654:	613b      	str	r3, [r7, #16]
 800e656:	2300      	movs	r3, #0
 800e658:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e65a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e65c:	3302      	adds	r3, #2
 800e65e:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 800e660:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e662:	60fb      	str	r3, [r7, #12]
 800e664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e666:	3301      	adds	r3, #1
 800e668:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 800e66a:	687b      	ldr	r3, [r7, #4]
 800e66c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e66e:	4618      	mov	r0, r3
 800e670:	f7fe f869 	bl	800c746 <get_fat>
 800e674:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800e676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e678:	2b01      	cmp	r3, #1
 800e67a:	d804      	bhi.n	800e686 <f_lseek+0xa2>
 800e67c:	687b      	ldr	r3, [r7, #4]
 800e67e:	2202      	movs	r2, #2
 800e680:	755a      	strb	r2, [r3, #21]
 800e682:	2302      	movs	r3, #2
 800e684:	e1b3      	b.n	800e9ee <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800e686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e688:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e68c:	d104      	bne.n	800e698 <f_lseek+0xb4>
 800e68e:	687b      	ldr	r3, [r7, #4]
 800e690:	2201      	movs	r2, #1
 800e692:	755a      	strb	r2, [r3, #21]
 800e694:	2301      	movs	r3, #1
 800e696:	e1aa      	b.n	800e9ee <f_lseek+0x40a>
					} while (cl == pcl + 1);
 800e698:	68fb      	ldr	r3, [r7, #12]
 800e69a:	3301      	adds	r3, #1
 800e69c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e69e:	429a      	cmp	r2, r3
 800e6a0:	d0de      	beq.n	800e660 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800e6a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e6a4:	697b      	ldr	r3, [r7, #20]
 800e6a6:	429a      	cmp	r2, r3
 800e6a8:	d809      	bhi.n	800e6be <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800e6aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6ac:	1d1a      	adds	r2, r3, #4
 800e6ae:	627a      	str	r2, [r7, #36]	; 0x24
 800e6b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e6b2:	601a      	str	r2, [r3, #0]
 800e6b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6b6:	1d1a      	adds	r2, r3, #4
 800e6b8:	627a      	str	r2, [r7, #36]	; 0x24
 800e6ba:	693a      	ldr	r2, [r7, #16]
 800e6bc:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800e6be:	68bb      	ldr	r3, [r7, #8]
 800e6c0:	695b      	ldr	r3, [r3, #20]
 800e6c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e6c4:	429a      	cmp	r2, r3
 800e6c6:	d3c4      	bcc.n	800e652 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e6cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e6ce:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800e6d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e6d2:	697b      	ldr	r3, [r7, #20]
 800e6d4:	429a      	cmp	r2, r3
 800e6d6:	d803      	bhi.n	800e6e0 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800e6d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6da:	2200      	movs	r2, #0
 800e6dc:	601a      	str	r2, [r3, #0]
 800e6de:	e184      	b.n	800e9ea <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800e6e0:	2311      	movs	r3, #17
 800e6e2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800e6e6:	e180      	b.n	800e9ea <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800e6e8:	687b      	ldr	r3, [r7, #4]
 800e6ea:	68db      	ldr	r3, [r3, #12]
 800e6ec:	683a      	ldr	r2, [r7, #0]
 800e6ee:	429a      	cmp	r2, r3
 800e6f0:	d902      	bls.n	800e6f8 <f_lseek+0x114>
 800e6f2:	687b      	ldr	r3, [r7, #4]
 800e6f4:	68db      	ldr	r3, [r3, #12]
 800e6f6:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800e6f8:	687b      	ldr	r3, [r7, #4]
 800e6fa:	683a      	ldr	r2, [r7, #0]
 800e6fc:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800e6fe:	683b      	ldr	r3, [r7, #0]
 800e700:	2b00      	cmp	r3, #0
 800e702:	f000 8172 	beq.w	800e9ea <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 800e706:	683b      	ldr	r3, [r7, #0]
 800e708:	3b01      	subs	r3, #1
 800e70a:	4619      	mov	r1, r3
 800e70c:	6878      	ldr	r0, [r7, #4]
 800e70e:	f7fe faa9 	bl	800cc64 <clmt_clust>
 800e712:	4602      	mov	r2, r0
 800e714:	687b      	ldr	r3, [r7, #4]
 800e716:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800e718:	68ba      	ldr	r2, [r7, #8]
 800e71a:	687b      	ldr	r3, [r7, #4]
 800e71c:	69db      	ldr	r3, [r3, #28]
 800e71e:	4619      	mov	r1, r3
 800e720:	4610      	mov	r0, r2
 800e722:	f7fd fff1 	bl	800c708 <clust2sect>
 800e726:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800e728:	69bb      	ldr	r3, [r7, #24]
 800e72a:	2b00      	cmp	r3, #0
 800e72c:	d104      	bne.n	800e738 <f_lseek+0x154>
 800e72e:	687b      	ldr	r3, [r7, #4]
 800e730:	2202      	movs	r2, #2
 800e732:	755a      	strb	r2, [r3, #21]
 800e734:	2302      	movs	r3, #2
 800e736:	e15a      	b.n	800e9ee <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800e738:	683b      	ldr	r3, [r7, #0]
 800e73a:	3b01      	subs	r3, #1
 800e73c:	0a5b      	lsrs	r3, r3, #9
 800e73e:	68ba      	ldr	r2, [r7, #8]
 800e740:	8952      	ldrh	r2, [r2, #10]
 800e742:	3a01      	subs	r2, #1
 800e744:	4013      	ands	r3, r2
 800e746:	69ba      	ldr	r2, [r7, #24]
 800e748:	4413      	add	r3, r2
 800e74a:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800e74c:	687b      	ldr	r3, [r7, #4]
 800e74e:	699b      	ldr	r3, [r3, #24]
 800e750:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e754:	2b00      	cmp	r3, #0
 800e756:	f000 8148 	beq.w	800e9ea <f_lseek+0x406>
 800e75a:	687b      	ldr	r3, [r7, #4]
 800e75c:	6a1b      	ldr	r3, [r3, #32]
 800e75e:	69ba      	ldr	r2, [r7, #24]
 800e760:	429a      	cmp	r2, r3
 800e762:	f000 8142 	beq.w	800e9ea <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800e766:	687b      	ldr	r3, [r7, #4]
 800e768:	7d1b      	ldrb	r3, [r3, #20]
 800e76a:	b25b      	sxtb	r3, r3
 800e76c:	2b00      	cmp	r3, #0
 800e76e:	da18      	bge.n	800e7a2 <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e770:	68bb      	ldr	r3, [r7, #8]
 800e772:	7858      	ldrb	r0, [r3, #1]
 800e774:	687b      	ldr	r3, [r7, #4]
 800e776:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e77a:	687b      	ldr	r3, [r7, #4]
 800e77c:	6a1a      	ldr	r2, [r3, #32]
 800e77e:	2301      	movs	r3, #1
 800e780:	f7fd fc38 	bl	800bff4 <disk_write>
 800e784:	4603      	mov	r3, r0
 800e786:	2b00      	cmp	r3, #0
 800e788:	d004      	beq.n	800e794 <f_lseek+0x1b0>
 800e78a:	687b      	ldr	r3, [r7, #4]
 800e78c:	2201      	movs	r2, #1
 800e78e:	755a      	strb	r2, [r3, #21]
 800e790:	2301      	movs	r3, #1
 800e792:	e12c      	b.n	800e9ee <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 800e794:	687b      	ldr	r3, [r7, #4]
 800e796:	7d1b      	ldrb	r3, [r3, #20]
 800e798:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e79c:	b2da      	uxtb	r2, r3
 800e79e:	687b      	ldr	r3, [r7, #4]
 800e7a0:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800e7a2:	68bb      	ldr	r3, [r7, #8]
 800e7a4:	7858      	ldrb	r0, [r3, #1]
 800e7a6:	687b      	ldr	r3, [r7, #4]
 800e7a8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e7ac:	2301      	movs	r3, #1
 800e7ae:	69ba      	ldr	r2, [r7, #24]
 800e7b0:	f7fd fc00 	bl	800bfb4 <disk_read>
 800e7b4:	4603      	mov	r3, r0
 800e7b6:	2b00      	cmp	r3, #0
 800e7b8:	d004      	beq.n	800e7c4 <f_lseek+0x1e0>
 800e7ba:	687b      	ldr	r3, [r7, #4]
 800e7bc:	2201      	movs	r2, #1
 800e7be:	755a      	strb	r2, [r3, #21]
 800e7c0:	2301      	movs	r3, #1
 800e7c2:	e114      	b.n	800e9ee <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	69ba      	ldr	r2, [r7, #24]
 800e7c8:	621a      	str	r2, [r3, #32]
 800e7ca:	e10e      	b.n	800e9ea <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800e7cc:	687b      	ldr	r3, [r7, #4]
 800e7ce:	68db      	ldr	r3, [r3, #12]
 800e7d0:	683a      	ldr	r2, [r7, #0]
 800e7d2:	429a      	cmp	r2, r3
 800e7d4:	d908      	bls.n	800e7e8 <f_lseek+0x204>
 800e7d6:	687b      	ldr	r3, [r7, #4]
 800e7d8:	7d1b      	ldrb	r3, [r3, #20]
 800e7da:	f003 0302 	and.w	r3, r3, #2
 800e7de:	2b00      	cmp	r3, #0
 800e7e0:	d102      	bne.n	800e7e8 <f_lseek+0x204>
			ofs = fp->obj.objsize;
 800e7e2:	687b      	ldr	r3, [r7, #4]
 800e7e4:	68db      	ldr	r3, [r3, #12]
 800e7e6:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800e7e8:	687b      	ldr	r3, [r7, #4]
 800e7ea:	699b      	ldr	r3, [r3, #24]
 800e7ec:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800e7ee:	2300      	movs	r3, #0
 800e7f0:	637b      	str	r3, [r7, #52]	; 0x34
 800e7f2:	687b      	ldr	r3, [r7, #4]
 800e7f4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e7f6:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800e7f8:	683b      	ldr	r3, [r7, #0]
 800e7fa:	2b00      	cmp	r3, #0
 800e7fc:	f000 80a7 	beq.w	800e94e <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800e800:	68bb      	ldr	r3, [r7, #8]
 800e802:	895b      	ldrh	r3, [r3, #10]
 800e804:	025b      	lsls	r3, r3, #9
 800e806:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800e808:	6a3b      	ldr	r3, [r7, #32]
 800e80a:	2b00      	cmp	r3, #0
 800e80c:	d01b      	beq.n	800e846 <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800e80e:	683b      	ldr	r3, [r7, #0]
 800e810:	1e5a      	subs	r2, r3, #1
 800e812:	69fb      	ldr	r3, [r7, #28]
 800e814:	fbb2 f2f3 	udiv	r2, r2, r3
 800e818:	6a3b      	ldr	r3, [r7, #32]
 800e81a:	1e59      	subs	r1, r3, #1
 800e81c:	69fb      	ldr	r3, [r7, #28]
 800e81e:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800e822:	429a      	cmp	r2, r3
 800e824:	d30f      	bcc.n	800e846 <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800e826:	6a3b      	ldr	r3, [r7, #32]
 800e828:	1e5a      	subs	r2, r3, #1
 800e82a:	69fb      	ldr	r3, [r7, #28]
 800e82c:	425b      	negs	r3, r3
 800e82e:	401a      	ands	r2, r3
 800e830:	687b      	ldr	r3, [r7, #4]
 800e832:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	699b      	ldr	r3, [r3, #24]
 800e838:	683a      	ldr	r2, [r7, #0]
 800e83a:	1ad3      	subs	r3, r2, r3
 800e83c:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800e83e:	687b      	ldr	r3, [r7, #4]
 800e840:	69db      	ldr	r3, [r3, #28]
 800e842:	63bb      	str	r3, [r7, #56]	; 0x38
 800e844:	e022      	b.n	800e88c <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800e846:	687b      	ldr	r3, [r7, #4]
 800e848:	689b      	ldr	r3, [r3, #8]
 800e84a:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800e84c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e84e:	2b00      	cmp	r3, #0
 800e850:	d119      	bne.n	800e886 <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 800e852:	687b      	ldr	r3, [r7, #4]
 800e854:	2100      	movs	r1, #0
 800e856:	4618      	mov	r0, r3
 800e858:	f7fe f96c 	bl	800cb34 <create_chain>
 800e85c:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800e85e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e860:	2b01      	cmp	r3, #1
 800e862:	d104      	bne.n	800e86e <f_lseek+0x28a>
 800e864:	687b      	ldr	r3, [r7, #4]
 800e866:	2202      	movs	r2, #2
 800e868:	755a      	strb	r2, [r3, #21]
 800e86a:	2302      	movs	r3, #2
 800e86c:	e0bf      	b.n	800e9ee <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800e86e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e870:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e874:	d104      	bne.n	800e880 <f_lseek+0x29c>
 800e876:	687b      	ldr	r3, [r7, #4]
 800e878:	2201      	movs	r2, #1
 800e87a:	755a      	strb	r2, [r3, #21]
 800e87c:	2301      	movs	r3, #1
 800e87e:	e0b6      	b.n	800e9ee <f_lseek+0x40a>
					fp->obj.sclust = clst;
 800e880:	687b      	ldr	r3, [r7, #4]
 800e882:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e884:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800e886:	687b      	ldr	r3, [r7, #4]
 800e888:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e88a:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800e88c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e88e:	2b00      	cmp	r3, #0
 800e890:	d05d      	beq.n	800e94e <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 800e892:	e03a      	b.n	800e90a <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 800e894:	683a      	ldr	r2, [r7, #0]
 800e896:	69fb      	ldr	r3, [r7, #28]
 800e898:	1ad3      	subs	r3, r2, r3
 800e89a:	603b      	str	r3, [r7, #0]
 800e89c:	687b      	ldr	r3, [r7, #4]
 800e89e:	699a      	ldr	r2, [r3, #24]
 800e8a0:	69fb      	ldr	r3, [r7, #28]
 800e8a2:	441a      	add	r2, r3
 800e8a4:	687b      	ldr	r3, [r7, #4]
 800e8a6:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800e8a8:	687b      	ldr	r3, [r7, #4]
 800e8aa:	7d1b      	ldrb	r3, [r3, #20]
 800e8ac:	f003 0302 	and.w	r3, r3, #2
 800e8b0:	2b00      	cmp	r3, #0
 800e8b2:	d00b      	beq.n	800e8cc <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800e8b4:	687b      	ldr	r3, [r7, #4]
 800e8b6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e8b8:	4618      	mov	r0, r3
 800e8ba:	f7fe f93b 	bl	800cb34 <create_chain>
 800e8be:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800e8c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8c2:	2b00      	cmp	r3, #0
 800e8c4:	d108      	bne.n	800e8d8 <f_lseek+0x2f4>
							ofs = 0; break;
 800e8c6:	2300      	movs	r3, #0
 800e8c8:	603b      	str	r3, [r7, #0]
 800e8ca:	e022      	b.n	800e912 <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e8d0:	4618      	mov	r0, r3
 800e8d2:	f7fd ff38 	bl	800c746 <get_fat>
 800e8d6:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800e8d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8da:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e8de:	d104      	bne.n	800e8ea <f_lseek+0x306>
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	2201      	movs	r2, #1
 800e8e4:	755a      	strb	r2, [r3, #21]
 800e8e6:	2301      	movs	r3, #1
 800e8e8:	e081      	b.n	800e9ee <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800e8ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8ec:	2b01      	cmp	r3, #1
 800e8ee:	d904      	bls.n	800e8fa <f_lseek+0x316>
 800e8f0:	68bb      	ldr	r3, [r7, #8]
 800e8f2:	695b      	ldr	r3, [r3, #20]
 800e8f4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e8f6:	429a      	cmp	r2, r3
 800e8f8:	d304      	bcc.n	800e904 <f_lseek+0x320>
 800e8fa:	687b      	ldr	r3, [r7, #4]
 800e8fc:	2202      	movs	r2, #2
 800e8fe:	755a      	strb	r2, [r3, #21]
 800e900:	2302      	movs	r3, #2
 800e902:	e074      	b.n	800e9ee <f_lseek+0x40a>
					fp->clust = clst;
 800e904:	687b      	ldr	r3, [r7, #4]
 800e906:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e908:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800e90a:	683a      	ldr	r2, [r7, #0]
 800e90c:	69fb      	ldr	r3, [r7, #28]
 800e90e:	429a      	cmp	r2, r3
 800e910:	d8c0      	bhi.n	800e894 <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 800e912:	687b      	ldr	r3, [r7, #4]
 800e914:	699a      	ldr	r2, [r3, #24]
 800e916:	683b      	ldr	r3, [r7, #0]
 800e918:	441a      	add	r2, r3
 800e91a:	687b      	ldr	r3, [r7, #4]
 800e91c:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800e91e:	683b      	ldr	r3, [r7, #0]
 800e920:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e924:	2b00      	cmp	r3, #0
 800e926:	d012      	beq.n	800e94e <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800e928:	68bb      	ldr	r3, [r7, #8]
 800e92a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e92c:	4618      	mov	r0, r3
 800e92e:	f7fd feeb 	bl	800c708 <clust2sect>
 800e932:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800e934:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e936:	2b00      	cmp	r3, #0
 800e938:	d104      	bne.n	800e944 <f_lseek+0x360>
 800e93a:	687b      	ldr	r3, [r7, #4]
 800e93c:	2202      	movs	r2, #2
 800e93e:	755a      	strb	r2, [r3, #21]
 800e940:	2302      	movs	r3, #2
 800e942:	e054      	b.n	800e9ee <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 800e944:	683b      	ldr	r3, [r7, #0]
 800e946:	0a5b      	lsrs	r3, r3, #9
 800e948:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e94a:	4413      	add	r3, r2
 800e94c:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800e94e:	687b      	ldr	r3, [r7, #4]
 800e950:	699a      	ldr	r2, [r3, #24]
 800e952:	687b      	ldr	r3, [r7, #4]
 800e954:	68db      	ldr	r3, [r3, #12]
 800e956:	429a      	cmp	r2, r3
 800e958:	d90a      	bls.n	800e970 <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 800e95a:	687b      	ldr	r3, [r7, #4]
 800e95c:	699a      	ldr	r2, [r3, #24]
 800e95e:	687b      	ldr	r3, [r7, #4]
 800e960:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800e962:	687b      	ldr	r3, [r7, #4]
 800e964:	7d1b      	ldrb	r3, [r3, #20]
 800e966:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e96a:	b2da      	uxtb	r2, r3
 800e96c:	687b      	ldr	r3, [r7, #4]
 800e96e:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800e970:	687b      	ldr	r3, [r7, #4]
 800e972:	699b      	ldr	r3, [r3, #24]
 800e974:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e978:	2b00      	cmp	r3, #0
 800e97a:	d036      	beq.n	800e9ea <f_lseek+0x406>
 800e97c:	687b      	ldr	r3, [r7, #4]
 800e97e:	6a1b      	ldr	r3, [r3, #32]
 800e980:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e982:	429a      	cmp	r2, r3
 800e984:	d031      	beq.n	800e9ea <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800e986:	687b      	ldr	r3, [r7, #4]
 800e988:	7d1b      	ldrb	r3, [r3, #20]
 800e98a:	b25b      	sxtb	r3, r3
 800e98c:	2b00      	cmp	r3, #0
 800e98e:	da18      	bge.n	800e9c2 <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e990:	68bb      	ldr	r3, [r7, #8]
 800e992:	7858      	ldrb	r0, [r3, #1]
 800e994:	687b      	ldr	r3, [r7, #4]
 800e996:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e99a:	687b      	ldr	r3, [r7, #4]
 800e99c:	6a1a      	ldr	r2, [r3, #32]
 800e99e:	2301      	movs	r3, #1
 800e9a0:	f7fd fb28 	bl	800bff4 <disk_write>
 800e9a4:	4603      	mov	r3, r0
 800e9a6:	2b00      	cmp	r3, #0
 800e9a8:	d004      	beq.n	800e9b4 <f_lseek+0x3d0>
 800e9aa:	687b      	ldr	r3, [r7, #4]
 800e9ac:	2201      	movs	r2, #1
 800e9ae:	755a      	strb	r2, [r3, #21]
 800e9b0:	2301      	movs	r3, #1
 800e9b2:	e01c      	b.n	800e9ee <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800e9b4:	687b      	ldr	r3, [r7, #4]
 800e9b6:	7d1b      	ldrb	r3, [r3, #20]
 800e9b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e9bc:	b2da      	uxtb	r2, r3
 800e9be:	687b      	ldr	r3, [r7, #4]
 800e9c0:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800e9c2:	68bb      	ldr	r3, [r7, #8]
 800e9c4:	7858      	ldrb	r0, [r3, #1]
 800e9c6:	687b      	ldr	r3, [r7, #4]
 800e9c8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e9cc:	2301      	movs	r3, #1
 800e9ce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e9d0:	f7fd faf0 	bl	800bfb4 <disk_read>
 800e9d4:	4603      	mov	r3, r0
 800e9d6:	2b00      	cmp	r3, #0
 800e9d8:	d004      	beq.n	800e9e4 <f_lseek+0x400>
 800e9da:	687b      	ldr	r3, [r7, #4]
 800e9dc:	2201      	movs	r2, #1
 800e9de:	755a      	strb	r2, [r3, #21]
 800e9e0:	2301      	movs	r3, #1
 800e9e2:	e004      	b.n	800e9ee <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e9e8:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800e9ea:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800e9ee:	4618      	mov	r0, r3
 800e9f0:	3740      	adds	r7, #64	; 0x40
 800e9f2:	46bd      	mov	sp, r7
 800e9f4:	bd80      	pop	{r7, pc}

0800e9f6 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 800e9f6:	b580      	push	{r7, lr}
 800e9f8:	b086      	sub	sp, #24
 800e9fa:	af00      	add	r7, sp, #0
 800e9fc:	6078      	str	r0, [r7, #4]
 800e9fe:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 800ea00:	687b      	ldr	r3, [r7, #4]
 800ea02:	2b00      	cmp	r3, #0
 800ea04:	d101      	bne.n	800ea0a <f_opendir+0x14>
 800ea06:	2309      	movs	r3, #9
 800ea08:	e064      	b.n	800ead4 <f_opendir+0xde>

	/* Get logical drive */
	obj = &dp->obj;
 800ea0a:	687b      	ldr	r3, [r7, #4]
 800ea0c:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 800ea0e:	f107 010c 	add.w	r1, r7, #12
 800ea12:	463b      	mov	r3, r7
 800ea14:	2200      	movs	r2, #0
 800ea16:	4618      	mov	r0, r3
 800ea18:	f7fe fe02 	bl	800d620 <find_volume>
 800ea1c:	4603      	mov	r3, r0
 800ea1e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800ea20:	7dfb      	ldrb	r3, [r7, #23]
 800ea22:	2b00      	cmp	r3, #0
 800ea24:	d14f      	bne.n	800eac6 <f_opendir+0xd0>
		obj->fs = fs;
 800ea26:	68fa      	ldr	r2, [r7, #12]
 800ea28:	693b      	ldr	r3, [r7, #16]
 800ea2a:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 800ea2c:	683b      	ldr	r3, [r7, #0]
 800ea2e:	4619      	mov	r1, r3
 800ea30:	6878      	ldr	r0, [r7, #4]
 800ea32:	f7fe fce9 	bl	800d408 <follow_path>
 800ea36:	4603      	mov	r3, r0
 800ea38:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 800ea3a:	7dfb      	ldrb	r3, [r7, #23]
 800ea3c:	2b00      	cmp	r3, #0
 800ea3e:	d13d      	bne.n	800eabc <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 800ea40:	687b      	ldr	r3, [r7, #4]
 800ea42:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800ea46:	b25b      	sxtb	r3, r3
 800ea48:	2b00      	cmp	r3, #0
 800ea4a:	db12      	blt.n	800ea72 <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 800ea4c:	693b      	ldr	r3, [r7, #16]
 800ea4e:	799b      	ldrb	r3, [r3, #6]
 800ea50:	f003 0310 	and.w	r3, r3, #16
 800ea54:	2b00      	cmp	r3, #0
 800ea56:	d00a      	beq.n	800ea6e <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 800ea58:	68fa      	ldr	r2, [r7, #12]
 800ea5a:	687b      	ldr	r3, [r7, #4]
 800ea5c:	6a1b      	ldr	r3, [r3, #32]
 800ea5e:	4619      	mov	r1, r3
 800ea60:	4610      	mov	r0, r2
 800ea62:	f7fe faba 	bl	800cfda <ld_clust>
 800ea66:	4602      	mov	r2, r0
 800ea68:	693b      	ldr	r3, [r7, #16]
 800ea6a:	609a      	str	r2, [r3, #8]
 800ea6c:	e001      	b.n	800ea72 <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 800ea6e:	2305      	movs	r3, #5
 800ea70:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 800ea72:	7dfb      	ldrb	r3, [r7, #23]
 800ea74:	2b00      	cmp	r3, #0
 800ea76:	d121      	bne.n	800eabc <f_opendir+0xc6>
				obj->id = fs->id;
 800ea78:	68fb      	ldr	r3, [r7, #12]
 800ea7a:	88da      	ldrh	r2, [r3, #6]
 800ea7c:	693b      	ldr	r3, [r7, #16]
 800ea7e:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 800ea80:	2100      	movs	r1, #0
 800ea82:	6878      	ldr	r0, [r7, #4]
 800ea84:	f7fe f922 	bl	800cccc <dir_sdi>
 800ea88:	4603      	mov	r3, r0
 800ea8a:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 800ea8c:	7dfb      	ldrb	r3, [r7, #23]
 800ea8e:	2b00      	cmp	r3, #0
 800ea90:	d114      	bne.n	800eabc <f_opendir+0xc6>
					if (obj->sclust) {
 800ea92:	693b      	ldr	r3, [r7, #16]
 800ea94:	689b      	ldr	r3, [r3, #8]
 800ea96:	2b00      	cmp	r3, #0
 800ea98:	d00d      	beq.n	800eab6 <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 800ea9a:	2100      	movs	r1, #0
 800ea9c:	6878      	ldr	r0, [r7, #4]
 800ea9e:	f7fd fc65 	bl	800c36c <inc_lock>
 800eaa2:	4602      	mov	r2, r0
 800eaa4:	693b      	ldr	r3, [r7, #16]
 800eaa6:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 800eaa8:	693b      	ldr	r3, [r7, #16]
 800eaaa:	691b      	ldr	r3, [r3, #16]
 800eaac:	2b00      	cmp	r3, #0
 800eaae:	d105      	bne.n	800eabc <f_opendir+0xc6>
 800eab0:	2312      	movs	r3, #18
 800eab2:	75fb      	strb	r3, [r7, #23]
 800eab4:	e002      	b.n	800eabc <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 800eab6:	693b      	ldr	r3, [r7, #16]
 800eab8:	2200      	movs	r2, #0
 800eaba:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 800eabc:	7dfb      	ldrb	r3, [r7, #23]
 800eabe:	2b04      	cmp	r3, #4
 800eac0:	d101      	bne.n	800eac6 <f_opendir+0xd0>
 800eac2:	2305      	movs	r3, #5
 800eac4:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 800eac6:	7dfb      	ldrb	r3, [r7, #23]
 800eac8:	2b00      	cmp	r3, #0
 800eaca:	d002      	beq.n	800ead2 <f_opendir+0xdc>
 800eacc:	693b      	ldr	r3, [r7, #16]
 800eace:	2200      	movs	r2, #0
 800ead0:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800ead2:	7dfb      	ldrb	r3, [r7, #23]
}
 800ead4:	4618      	mov	r0, r3
 800ead6:	3718      	adds	r7, #24
 800ead8:	46bd      	mov	sp, r7
 800eada:	bd80      	pop	{r7, pc}

0800eadc <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 800eadc:	b580      	push	{r7, lr}
 800eade:	b084      	sub	sp, #16
 800eae0:	af00      	add	r7, sp, #0
 800eae2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 800eae4:	687b      	ldr	r3, [r7, #4]
 800eae6:	f107 0208 	add.w	r2, r7, #8
 800eaea:	4611      	mov	r1, r2
 800eaec:	4618      	mov	r0, r3
 800eaee:	f7fe ffe3 	bl	800dab8 <validate>
 800eaf2:	4603      	mov	r3, r0
 800eaf4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800eaf6:	7bfb      	ldrb	r3, [r7, #15]
 800eaf8:	2b00      	cmp	r3, #0
 800eafa:	d110      	bne.n	800eb1e <f_closedir+0x42>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 800eafc:	687b      	ldr	r3, [r7, #4]
 800eafe:	691b      	ldr	r3, [r3, #16]
 800eb00:	2b00      	cmp	r3, #0
 800eb02:	d006      	beq.n	800eb12 <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 800eb04:	687b      	ldr	r3, [r7, #4]
 800eb06:	691b      	ldr	r3, [r3, #16]
 800eb08:	4618      	mov	r0, r3
 800eb0a:	f7fd fcbd 	bl	800c488 <dec_lock>
 800eb0e:	4603      	mov	r3, r0
 800eb10:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 800eb12:	7bfb      	ldrb	r3, [r7, #15]
 800eb14:	2b00      	cmp	r3, #0
 800eb16:	d102      	bne.n	800eb1e <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	2200      	movs	r2, #0
 800eb1c:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 800eb1e:	7bfb      	ldrb	r3, [r7, #15]
}
 800eb20:	4618      	mov	r0, r3
 800eb22:	3710      	adds	r7, #16
 800eb24:	46bd      	mov	sp, r7
 800eb26:	bd80      	pop	{r7, pc}

0800eb28 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800eb28:	b580      	push	{r7, lr}
 800eb2a:	b084      	sub	sp, #16
 800eb2c:	af00      	add	r7, sp, #0
 800eb2e:	6078      	str	r0, [r7, #4]
 800eb30:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 800eb32:	687b      	ldr	r3, [r7, #4]
 800eb34:	f107 0208 	add.w	r2, r7, #8
 800eb38:	4611      	mov	r1, r2
 800eb3a:	4618      	mov	r0, r3
 800eb3c:	f7fe ffbc 	bl	800dab8 <validate>
 800eb40:	4603      	mov	r3, r0
 800eb42:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800eb44:	7bfb      	ldrb	r3, [r7, #15]
 800eb46:	2b00      	cmp	r3, #0
 800eb48:	d126      	bne.n	800eb98 <f_readdir+0x70>
		if (!fno) {
 800eb4a:	683b      	ldr	r3, [r7, #0]
 800eb4c:	2b00      	cmp	r3, #0
 800eb4e:	d106      	bne.n	800eb5e <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 800eb50:	2100      	movs	r1, #0
 800eb52:	6878      	ldr	r0, [r7, #4]
 800eb54:	f7fe f8ba 	bl	800cccc <dir_sdi>
 800eb58:	4603      	mov	r3, r0
 800eb5a:	73fb      	strb	r3, [r7, #15]
 800eb5c:	e01c      	b.n	800eb98 <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 800eb5e:	2100      	movs	r1, #0
 800eb60:	6878      	ldr	r0, [r7, #4]
 800eb62:	f7fe fa79 	bl	800d058 <dir_read>
 800eb66:	4603      	mov	r3, r0
 800eb68:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 800eb6a:	7bfb      	ldrb	r3, [r7, #15]
 800eb6c:	2b04      	cmp	r3, #4
 800eb6e:	d101      	bne.n	800eb74 <f_readdir+0x4c>
 800eb70:	2300      	movs	r3, #0
 800eb72:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 800eb74:	7bfb      	ldrb	r3, [r7, #15]
 800eb76:	2b00      	cmp	r3, #0
 800eb78:	d10e      	bne.n	800eb98 <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 800eb7a:	6839      	ldr	r1, [r7, #0]
 800eb7c:	6878      	ldr	r0, [r7, #4]
 800eb7e:	f7fe fb4f 	bl	800d220 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 800eb82:	2100      	movs	r1, #0
 800eb84:	6878      	ldr	r0, [r7, #4]
 800eb86:	f7fe f91c 	bl	800cdc2 <dir_next>
 800eb8a:	4603      	mov	r3, r0
 800eb8c:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 800eb8e:	7bfb      	ldrb	r3, [r7, #15]
 800eb90:	2b04      	cmp	r3, #4
 800eb92:	d101      	bne.n	800eb98 <f_readdir+0x70>
 800eb94:	2300      	movs	r3, #0
 800eb96:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 800eb98:	7bfb      	ldrb	r3, [r7, #15]
}
 800eb9a:	4618      	mov	r0, r3
 800eb9c:	3710      	adds	r7, #16
 800eb9e:	46bd      	mov	sp, r7
 800eba0:	bd80      	pop	{r7, pc}

0800eba2 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 800eba2:	b580      	push	{r7, lr}
 800eba4:	b092      	sub	sp, #72	; 0x48
 800eba6:	af00      	add	r7, sp, #0
 800eba8:	60f8      	str	r0, [r7, #12]
 800ebaa:	60b9      	str	r1, [r7, #8]
 800ebac:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 800ebae:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800ebb2:	f107 030c 	add.w	r3, r7, #12
 800ebb6:	2200      	movs	r2, #0
 800ebb8:	4618      	mov	r0, r3
 800ebba:	f7fe fd31 	bl	800d620 <find_volume>
 800ebbe:	4603      	mov	r3, r0
 800ebc0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 800ebc4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800ebc8:	2b00      	cmp	r3, #0
 800ebca:	f040 8099 	bne.w	800ed00 <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 800ebce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ebd0:	687b      	ldr	r3, [r7, #4]
 800ebd2:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 800ebd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebd6:	691a      	ldr	r2, [r3, #16]
 800ebd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebda:	695b      	ldr	r3, [r3, #20]
 800ebdc:	3b02      	subs	r3, #2
 800ebde:	429a      	cmp	r2, r3
 800ebe0:	d804      	bhi.n	800ebec <f_getfree+0x4a>
			*nclst = fs->free_clst;
 800ebe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebe4:	691a      	ldr	r2, [r3, #16]
 800ebe6:	68bb      	ldr	r3, [r7, #8]
 800ebe8:	601a      	str	r2, [r3, #0]
 800ebea:	e089      	b.n	800ed00 <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 800ebec:	2300      	movs	r3, #0
 800ebee:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 800ebf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebf2:	781b      	ldrb	r3, [r3, #0]
 800ebf4:	2b01      	cmp	r3, #1
 800ebf6:	d128      	bne.n	800ec4a <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 800ebf8:	2302      	movs	r3, #2
 800ebfa:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ebfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebfe:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 800ec00:	f107 0314 	add.w	r3, r7, #20
 800ec04:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ec06:	4618      	mov	r0, r3
 800ec08:	f7fd fd9d 	bl	800c746 <get_fat>
 800ec0c:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 800ec0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec10:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ec14:	d103      	bne.n	800ec1e <f_getfree+0x7c>
 800ec16:	2301      	movs	r3, #1
 800ec18:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800ec1c:	e063      	b.n	800ece6 <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 800ec1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec20:	2b01      	cmp	r3, #1
 800ec22:	d103      	bne.n	800ec2c <f_getfree+0x8a>
 800ec24:	2302      	movs	r3, #2
 800ec26:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800ec2a:	e05c      	b.n	800ece6 <f_getfree+0x144>
					if (stat == 0) nfree++;
 800ec2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec2e:	2b00      	cmp	r3, #0
 800ec30:	d102      	bne.n	800ec38 <f_getfree+0x96>
 800ec32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ec34:	3301      	adds	r3, #1
 800ec36:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 800ec38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ec3a:	3301      	adds	r3, #1
 800ec3c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ec3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec40:	695b      	ldr	r3, [r3, #20]
 800ec42:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ec44:	429a      	cmp	r2, r3
 800ec46:	d3db      	bcc.n	800ec00 <f_getfree+0x5e>
 800ec48:	e04d      	b.n	800ece6 <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 800ec4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec4c:	695b      	ldr	r3, [r3, #20]
 800ec4e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ec50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec52:	6a1b      	ldr	r3, [r3, #32]
 800ec54:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 800ec56:	2300      	movs	r3, #0
 800ec58:	637b      	str	r3, [r7, #52]	; 0x34
 800ec5a:	2300      	movs	r3, #0
 800ec5c:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 800ec5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ec60:	2b00      	cmp	r3, #0
 800ec62:	d113      	bne.n	800ec8c <f_getfree+0xea>
							res = move_window(fs, sect++);
 800ec64:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ec66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec68:	1c5a      	adds	r2, r3, #1
 800ec6a:	63ba      	str	r2, [r7, #56]	; 0x38
 800ec6c:	4619      	mov	r1, r3
 800ec6e:	f7fd fcaf 	bl	800c5d0 <move_window>
 800ec72:	4603      	mov	r3, r0
 800ec74:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 800ec78:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800ec7c:	2b00      	cmp	r3, #0
 800ec7e:	d131      	bne.n	800ece4 <f_getfree+0x142>
							p = fs->win;
 800ec80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec82:	3330      	adds	r3, #48	; 0x30
 800ec84:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 800ec86:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ec8a:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 800ec8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec8e:	781b      	ldrb	r3, [r3, #0]
 800ec90:	2b02      	cmp	r3, #2
 800ec92:	d10f      	bne.n	800ecb4 <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 800ec94:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ec96:	f7fd f9eb 	bl	800c070 <ld_word>
 800ec9a:	4603      	mov	r3, r0
 800ec9c:	2b00      	cmp	r3, #0
 800ec9e:	d102      	bne.n	800eca6 <f_getfree+0x104>
 800eca0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800eca2:	3301      	adds	r3, #1
 800eca4:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 800eca6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eca8:	3302      	adds	r3, #2
 800ecaa:	633b      	str	r3, [r7, #48]	; 0x30
 800ecac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ecae:	3b02      	subs	r3, #2
 800ecb0:	637b      	str	r3, [r7, #52]	; 0x34
 800ecb2:	e010      	b.n	800ecd6 <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 800ecb4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ecb6:	f7fd f9f3 	bl	800c0a0 <ld_dword>
 800ecba:	4603      	mov	r3, r0
 800ecbc:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800ecc0:	2b00      	cmp	r3, #0
 800ecc2:	d102      	bne.n	800ecca <f_getfree+0x128>
 800ecc4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ecc6:	3301      	adds	r3, #1
 800ecc8:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 800ecca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eccc:	3304      	adds	r3, #4
 800ecce:	633b      	str	r3, [r7, #48]	; 0x30
 800ecd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ecd2:	3b04      	subs	r3, #4
 800ecd4:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 800ecd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ecd8:	3b01      	subs	r3, #1
 800ecda:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ecdc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ecde:	2b00      	cmp	r3, #0
 800ece0:	d1bd      	bne.n	800ec5e <f_getfree+0xbc>
 800ece2:	e000      	b.n	800ece6 <f_getfree+0x144>
							if (res != FR_OK) break;
 800ece4:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 800ece6:	68bb      	ldr	r3, [r7, #8]
 800ece8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ecea:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 800ecec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ecee:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ecf0:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 800ecf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ecf4:	791a      	ldrb	r2, [r3, #4]
 800ecf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ecf8:	f042 0201 	orr.w	r2, r2, #1
 800ecfc:	b2d2      	uxtb	r2, r2
 800ecfe:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 800ed00:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800ed04:	4618      	mov	r0, r3
 800ed06:	3748      	adds	r7, #72	; 0x48
 800ed08:	46bd      	mov	sp, r7
 800ed0a:	bd80      	pop	{r7, pc}

0800ed0c <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 800ed0c:	b580      	push	{r7, lr}
 800ed0e:	b084      	sub	sp, #16
 800ed10:	af00      	add	r7, sp, #0
 800ed12:	6078      	str	r0, [r7, #4]
 800ed14:	460b      	mov	r3, r1
 800ed16:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 800ed18:	78fb      	ldrb	r3, [r7, #3]
 800ed1a:	2b0a      	cmp	r3, #10
 800ed1c:	d103      	bne.n	800ed26 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 800ed1e:	210d      	movs	r1, #13
 800ed20:	6878      	ldr	r0, [r7, #4]
 800ed22:	f7ff fff3 	bl	800ed0c <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 800ed26:	687b      	ldr	r3, [r7, #4]
 800ed28:	685b      	ldr	r3, [r3, #4]
 800ed2a:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 800ed2c:	68fb      	ldr	r3, [r7, #12]
 800ed2e:	2b00      	cmp	r3, #0
 800ed30:	db25      	blt.n	800ed7e <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 800ed32:	68fb      	ldr	r3, [r7, #12]
 800ed34:	1c5a      	adds	r2, r3, #1
 800ed36:	60fa      	str	r2, [r7, #12]
 800ed38:	687a      	ldr	r2, [r7, #4]
 800ed3a:	4413      	add	r3, r2
 800ed3c:	78fa      	ldrb	r2, [r7, #3]
 800ed3e:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 800ed40:	68fb      	ldr	r3, [r7, #12]
 800ed42:	2b3c      	cmp	r3, #60	; 0x3c
 800ed44:	dd12      	ble.n	800ed6c <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 800ed46:	687b      	ldr	r3, [r7, #4]
 800ed48:	6818      	ldr	r0, [r3, #0]
 800ed4a:	687b      	ldr	r3, [r7, #4]
 800ed4c:	f103 010c 	add.w	r1, r3, #12
 800ed50:	68fa      	ldr	r2, [r7, #12]
 800ed52:	f107 0308 	add.w	r3, r7, #8
 800ed56:	f7ff fa28 	bl	800e1aa <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 800ed5a:	68ba      	ldr	r2, [r7, #8]
 800ed5c:	68fb      	ldr	r3, [r7, #12]
 800ed5e:	429a      	cmp	r2, r3
 800ed60:	d101      	bne.n	800ed66 <putc_bfd+0x5a>
 800ed62:	2300      	movs	r3, #0
 800ed64:	e001      	b.n	800ed6a <putc_bfd+0x5e>
 800ed66:	f04f 33ff 	mov.w	r3, #4294967295
 800ed6a:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 800ed6c:	687b      	ldr	r3, [r7, #4]
 800ed6e:	68fa      	ldr	r2, [r7, #12]
 800ed70:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 800ed72:	687b      	ldr	r3, [r7, #4]
 800ed74:	689b      	ldr	r3, [r3, #8]
 800ed76:	1c5a      	adds	r2, r3, #1
 800ed78:	687b      	ldr	r3, [r7, #4]
 800ed7a:	609a      	str	r2, [r3, #8]
 800ed7c:	e000      	b.n	800ed80 <putc_bfd+0x74>
	if (i < 0) return;
 800ed7e:	bf00      	nop
}
 800ed80:	3710      	adds	r7, #16
 800ed82:	46bd      	mov	sp, r7
 800ed84:	bd80      	pop	{r7, pc}

0800ed86 <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 800ed86:	b580      	push	{r7, lr}
 800ed88:	b084      	sub	sp, #16
 800ed8a:	af00      	add	r7, sp, #0
 800ed8c:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 800ed8e:	687b      	ldr	r3, [r7, #4]
 800ed90:	685b      	ldr	r3, [r3, #4]
 800ed92:	2b00      	cmp	r3, #0
 800ed94:	db16      	blt.n	800edc4 <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 800ed96:	687b      	ldr	r3, [r7, #4]
 800ed98:	6818      	ldr	r0, [r3, #0]
 800ed9a:	687b      	ldr	r3, [r7, #4]
 800ed9c:	f103 010c 	add.w	r1, r3, #12
 800eda0:	687b      	ldr	r3, [r7, #4]
 800eda2:	685b      	ldr	r3, [r3, #4]
 800eda4:	461a      	mov	r2, r3
 800eda6:	f107 030c 	add.w	r3, r7, #12
 800edaa:	f7ff f9fe 	bl	800e1aa <f_write>
 800edae:	4603      	mov	r3, r0
 800edb0:	2b00      	cmp	r3, #0
 800edb2:	d107      	bne.n	800edc4 <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 800edb4:	687b      	ldr	r3, [r7, #4]
 800edb6:	685b      	ldr	r3, [r3, #4]
 800edb8:	68fa      	ldr	r2, [r7, #12]
 800edba:	4293      	cmp	r3, r2
 800edbc:	d102      	bne.n	800edc4 <putc_flush+0x3e>
 800edbe:	687b      	ldr	r3, [r7, #4]
 800edc0:	689b      	ldr	r3, [r3, #8]
 800edc2:	e001      	b.n	800edc8 <putc_flush+0x42>
	return EOF;
 800edc4:	f04f 33ff 	mov.w	r3, #4294967295
}
 800edc8:	4618      	mov	r0, r3
 800edca:	3710      	adds	r7, #16
 800edcc:	46bd      	mov	sp, r7
 800edce:	bd80      	pop	{r7, pc}

0800edd0 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 800edd0:	b480      	push	{r7}
 800edd2:	b083      	sub	sp, #12
 800edd4:	af00      	add	r7, sp, #0
 800edd6:	6078      	str	r0, [r7, #4]
 800edd8:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 800edda:	687b      	ldr	r3, [r7, #4]
 800eddc:	683a      	ldr	r2, [r7, #0]
 800edde:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 800ede0:	687b      	ldr	r3, [r7, #4]
 800ede2:	2200      	movs	r2, #0
 800ede4:	605a      	str	r2, [r3, #4]
 800ede6:	687b      	ldr	r3, [r7, #4]
 800ede8:	685a      	ldr	r2, [r3, #4]
 800edea:	687b      	ldr	r3, [r7, #4]
 800edec:	609a      	str	r2, [r3, #8]
}
 800edee:	bf00      	nop
 800edf0:	370c      	adds	r7, #12
 800edf2:	46bd      	mov	sp, r7
 800edf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edf8:	4770      	bx	lr
	...

0800edfc <f_printf>:
int f_printf (
	FIL* fp,			/* Pointer to the file object */
	const TCHAR* fmt,	/* Pointer to the format string */
	...					/* Optional arguments... */
)
{
 800edfc:	b40e      	push	{r1, r2, r3}
 800edfe:	b580      	push	{r7, lr}
 800ee00:	b0a7      	sub	sp, #156	; 0x9c
 800ee02:	af00      	add	r7, sp, #0
 800ee04:	6078      	str	r0, [r7, #4]
	UINT i, j, w;
	DWORD v;
	TCHAR c, d, str[32], *p;


	putc_init(&pb, fp);
 800ee06:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800ee0a:	6879      	ldr	r1, [r7, #4]
 800ee0c:	4618      	mov	r0, r3
 800ee0e:	f7ff ffdf 	bl	800edd0 <putc_init>

	va_start(arp, fmt);
 800ee12:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800ee16:	67bb      	str	r3, [r7, #120]	; 0x78

	for (;;) {
		c = *fmt++;
 800ee18:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800ee1c:	1c5a      	adds	r2, r3, #1
 800ee1e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800ee22:	781b      	ldrb	r3, [r3, #0]
 800ee24:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		if (c == 0) break;			/* End of string */
 800ee28:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800ee2c:	2b00      	cmp	r3, #0
 800ee2e:	f000 81f2 	beq.w	800f216 <f_printf+0x41a>
		if (c != '%') {				/* Non escape character */
 800ee32:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800ee36:	2b25      	cmp	r3, #37	; 0x25
 800ee38:	d008      	beq.n	800ee4c <f_printf+0x50>
			putc_bfd(&pb, c);
 800ee3a:	f897 2083 	ldrb.w	r2, [r7, #131]	; 0x83
 800ee3e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800ee42:	4611      	mov	r1, r2
 800ee44:	4618      	mov	r0, r3
 800ee46:	f7ff ff61 	bl	800ed0c <putc_bfd>
			continue;
 800ee4a:	e1e3      	b.n	800f214 <f_printf+0x418>
		}
		w = f = 0;
 800ee4c:	2300      	movs	r3, #0
 800ee4e:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800ee52:	2300      	movs	r3, #0
 800ee54:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
		c = *fmt++;
 800ee58:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800ee5c:	1c5a      	adds	r2, r3, #1
 800ee5e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800ee62:	781b      	ldrb	r3, [r3, #0]
 800ee64:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		if (c == '0') {				/* Flag: '0' padding */
 800ee68:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800ee6c:	2b30      	cmp	r3, #48	; 0x30
 800ee6e:	d10b      	bne.n	800ee88 <f_printf+0x8c>
			f = 1; c = *fmt++;
 800ee70:	2301      	movs	r3, #1
 800ee72:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800ee76:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800ee7a:	1c5a      	adds	r2, r3, #1
 800ee7c:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800ee80:	781b      	ldrb	r3, [r3, #0]
 800ee82:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
 800ee86:	e024      	b.n	800eed2 <f_printf+0xd6>
		} else {
			if (c == '-') {			/* Flag: left justified */
 800ee88:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800ee8c:	2b2d      	cmp	r3, #45	; 0x2d
 800ee8e:	d120      	bne.n	800eed2 <f_printf+0xd6>
				f = 2; c = *fmt++;
 800ee90:	2302      	movs	r3, #2
 800ee92:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800ee96:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800ee9a:	1c5a      	adds	r2, r3, #1
 800ee9c:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800eea0:	781b      	ldrb	r3, [r3, #0]
 800eea2:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
			}
		}
		while (IsDigit(c)) {		/* Precision */
 800eea6:	e014      	b.n	800eed2 <f_printf+0xd6>
			w = w * 10 + c - '0';
 800eea8:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800eeac:	4613      	mov	r3, r2
 800eeae:	009b      	lsls	r3, r3, #2
 800eeb0:	4413      	add	r3, r2
 800eeb2:	005b      	lsls	r3, r3, #1
 800eeb4:	461a      	mov	r2, r3
 800eeb6:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800eeba:	4413      	add	r3, r2
 800eebc:	3b30      	subs	r3, #48	; 0x30
 800eebe:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
			c = *fmt++;
 800eec2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800eec6:	1c5a      	adds	r2, r3, #1
 800eec8:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800eecc:	781b      	ldrb	r3, [r3, #0]
 800eece:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		while (IsDigit(c)) {		/* Precision */
 800eed2:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800eed6:	2b2f      	cmp	r3, #47	; 0x2f
 800eed8:	d903      	bls.n	800eee2 <f_printf+0xe6>
 800eeda:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800eede:	2b39      	cmp	r3, #57	; 0x39
 800eee0:	d9e2      	bls.n	800eea8 <f_printf+0xac>
		}
		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
 800eee2:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800eee6:	2b6c      	cmp	r3, #108	; 0x6c
 800eee8:	d003      	beq.n	800eef2 <f_printf+0xf6>
 800eeea:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800eeee:	2b4c      	cmp	r3, #76	; 0x4c
 800eef0:	d10d      	bne.n	800ef0e <f_printf+0x112>
			f |= 4; c = *fmt++;
 800eef2:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800eef6:	f043 0304 	orr.w	r3, r3, #4
 800eefa:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800eefe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800ef02:	1c5a      	adds	r2, r3, #1
 800ef04:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800ef08:	781b      	ldrb	r3, [r3, #0]
 800ef0a:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		}
		if (!c) break;
 800ef0e:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800ef12:	2b00      	cmp	r3, #0
 800ef14:	f000 8181 	beq.w	800f21a <f_printf+0x41e>
		d = c;
 800ef18:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800ef1c:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		if (IsLower(d)) d -= 0x20;
 800ef20:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800ef24:	2b60      	cmp	r3, #96	; 0x60
 800ef26:	d908      	bls.n	800ef3a <f_printf+0x13e>
 800ef28:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800ef2c:	2b7a      	cmp	r3, #122	; 0x7a
 800ef2e:	d804      	bhi.n	800ef3a <f_printf+0x13e>
 800ef30:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800ef34:	3b20      	subs	r3, #32
 800ef36:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		switch (d) {				/* Type is... */
 800ef3a:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800ef3e:	3b42      	subs	r3, #66	; 0x42
 800ef40:	2b16      	cmp	r3, #22
 800ef42:	f200 8098 	bhi.w	800f076 <f_printf+0x27a>
 800ef46:	a201      	add	r2, pc, #4	; (adr r2, 800ef4c <f_printf+0x150>)
 800ef48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ef4c:	0800f057 	.word	0x0800f057
 800ef50:	0800f03f 	.word	0x0800f03f
 800ef54:	0800f067 	.word	0x0800f067
 800ef58:	0800f077 	.word	0x0800f077
 800ef5c:	0800f077 	.word	0x0800f077
 800ef60:	0800f077 	.word	0x0800f077
 800ef64:	0800f077 	.word	0x0800f077
 800ef68:	0800f077 	.word	0x0800f077
 800ef6c:	0800f077 	.word	0x0800f077
 800ef70:	0800f077 	.word	0x0800f077
 800ef74:	0800f077 	.word	0x0800f077
 800ef78:	0800f077 	.word	0x0800f077
 800ef7c:	0800f077 	.word	0x0800f077
 800ef80:	0800f05f 	.word	0x0800f05f
 800ef84:	0800f077 	.word	0x0800f077
 800ef88:	0800f077 	.word	0x0800f077
 800ef8c:	0800f077 	.word	0x0800f077
 800ef90:	0800efa9 	.word	0x0800efa9
 800ef94:	0800f077 	.word	0x0800f077
 800ef98:	0800f067 	.word	0x0800f067
 800ef9c:	0800f077 	.word	0x0800f077
 800efa0:	0800f077 	.word	0x0800f077
 800efa4:	0800f06f 	.word	0x0800f06f
		case 'S' :					/* String */
			p = va_arg(arp, TCHAR*);
 800efa8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800efaa:	1d1a      	adds	r2, r3, #4
 800efac:	67ba      	str	r2, [r7, #120]	; 0x78
 800efae:	681b      	ldr	r3, [r3, #0]
 800efb0:	67fb      	str	r3, [r7, #124]	; 0x7c
			for (j = 0; p[j]; j++) ;
 800efb2:	2300      	movs	r3, #0
 800efb4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800efb8:	e004      	b.n	800efc4 <f_printf+0x1c8>
 800efba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800efbe:	3301      	adds	r3, #1
 800efc0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800efc4:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800efc6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800efca:	4413      	add	r3, r2
 800efcc:	781b      	ldrb	r3, [r3, #0]
 800efce:	2b00      	cmp	r3, #0
 800efd0:	d1f3      	bne.n	800efba <f_printf+0x1be>
			if (!(f & 2)) {
 800efd2:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800efd6:	f003 0302 	and.w	r3, r3, #2
 800efda:	2b00      	cmp	r3, #0
 800efdc:	d11a      	bne.n	800f014 <f_printf+0x218>
				while (j++ < w) putc_bfd(&pb, ' ');
 800efde:	e005      	b.n	800efec <f_printf+0x1f0>
 800efe0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800efe4:	2120      	movs	r1, #32
 800efe6:	4618      	mov	r0, r3
 800efe8:	f7ff fe90 	bl	800ed0c <putc_bfd>
 800efec:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800eff0:	1c5a      	adds	r2, r3, #1
 800eff2:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800eff6:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800effa:	429a      	cmp	r2, r3
 800effc:	d8f0      	bhi.n	800efe0 <f_printf+0x1e4>
			}
			while (*p) putc_bfd(&pb, *p++);
 800effe:	e009      	b.n	800f014 <f_printf+0x218>
 800f000:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800f002:	1c5a      	adds	r2, r3, #1
 800f004:	67fa      	str	r2, [r7, #124]	; 0x7c
 800f006:	781a      	ldrb	r2, [r3, #0]
 800f008:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800f00c:	4611      	mov	r1, r2
 800f00e:	4618      	mov	r0, r3
 800f010:	f7ff fe7c 	bl	800ed0c <putc_bfd>
 800f014:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800f016:	781b      	ldrb	r3, [r3, #0]
 800f018:	2b00      	cmp	r3, #0
 800f01a:	d1f1      	bne.n	800f000 <f_printf+0x204>
			while (j++ < w) putc_bfd(&pb, ' ');
 800f01c:	e005      	b.n	800f02a <f_printf+0x22e>
 800f01e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800f022:	2120      	movs	r1, #32
 800f024:	4618      	mov	r0, r3
 800f026:	f7ff fe71 	bl	800ed0c <putc_bfd>
 800f02a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f02e:	1c5a      	adds	r2, r3, #1
 800f030:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800f034:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800f038:	429a      	cmp	r2, r3
 800f03a:	d8f0      	bhi.n	800f01e <f_printf+0x222>
			continue;
 800f03c:	e0ea      	b.n	800f214 <f_printf+0x418>

		case 'C' :					/* Character */
			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
 800f03e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f040:	1d1a      	adds	r2, r3, #4
 800f042:	67ba      	str	r2, [r7, #120]	; 0x78
 800f044:	681b      	ldr	r3, [r3, #0]
 800f046:	b2da      	uxtb	r2, r3
 800f048:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800f04c:	4611      	mov	r1, r2
 800f04e:	4618      	mov	r0, r3
 800f050:	f7ff fe5c 	bl	800ed0c <putc_bfd>
 800f054:	e0de      	b.n	800f214 <f_printf+0x418>

		case 'B' :					/* Binary */
			r = 2; break;
 800f056:	2302      	movs	r3, #2
 800f058:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 800f05c:	e014      	b.n	800f088 <f_printf+0x28c>

		case 'O' :					/* Octal */
			r = 8; break;
 800f05e:	2308      	movs	r3, #8
 800f060:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 800f064:	e010      	b.n	800f088 <f_printf+0x28c>

		case 'D' :					/* Signed decimal */
		case 'U' :					/* Unsigned decimal */
			r = 10; break;
 800f066:	230a      	movs	r3, #10
 800f068:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 800f06c:	e00c      	b.n	800f088 <f_printf+0x28c>

		case 'X' :					/* Hexdecimal */
			r = 16; break;
 800f06e:	2310      	movs	r3, #16
 800f070:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 800f074:	e008      	b.n	800f088 <f_printf+0x28c>

		default:					/* Unknown type (pass-through) */
			putc_bfd(&pb, c); continue;
 800f076:	f897 2083 	ldrb.w	r2, [r7, #131]	; 0x83
 800f07a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800f07e:	4611      	mov	r1, r2
 800f080:	4618      	mov	r0, r3
 800f082:	f7ff fe43 	bl	800ed0c <putc_bfd>
 800f086:	e0c5      	b.n	800f214 <f_printf+0x418>
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
 800f088:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800f08c:	f003 0304 	and.w	r3, r3, #4
 800f090:	2b00      	cmp	r3, #0
 800f092:	d004      	beq.n	800f09e <f_printf+0x2a2>
 800f094:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f096:	1d1a      	adds	r2, r3, #4
 800f098:	67ba      	str	r2, [r7, #120]	; 0x78
 800f09a:	681b      	ldr	r3, [r3, #0]
 800f09c:	e00c      	b.n	800f0b8 <f_printf+0x2bc>
 800f09e:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800f0a2:	2b44      	cmp	r3, #68	; 0x44
 800f0a4:	d104      	bne.n	800f0b0 <f_printf+0x2b4>
 800f0a6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f0a8:	1d1a      	adds	r2, r3, #4
 800f0aa:	67ba      	str	r2, [r7, #120]	; 0x78
 800f0ac:	681b      	ldr	r3, [r3, #0]
 800f0ae:	e003      	b.n	800f0b8 <f_printf+0x2bc>
 800f0b0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f0b2:	1d1a      	adds	r2, r3, #4
 800f0b4:	67ba      	str	r2, [r7, #120]	; 0x78
 800f0b6:	681b      	ldr	r3, [r3, #0]
 800f0b8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		if (d == 'D' && (v & 0x80000000)) {
 800f0bc:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800f0c0:	2b44      	cmp	r3, #68	; 0x44
 800f0c2:	d10e      	bne.n	800f0e2 <f_printf+0x2e6>
 800f0c4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800f0c8:	2b00      	cmp	r3, #0
 800f0ca:	da0a      	bge.n	800f0e2 <f_printf+0x2e6>
			v = 0 - v;
 800f0cc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800f0d0:	425b      	negs	r3, r3
 800f0d2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			f |= 8;
 800f0d6:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800f0da:	f043 0308 	orr.w	r3, r3, #8
 800f0de:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
		}
		i = 0;
 800f0e2:	2300      	movs	r3, #0
 800f0e4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
		do {
			d = (TCHAR)(v % r); v /= r;
 800f0e8:	f897 2096 	ldrb.w	r2, [r7, #150]	; 0x96
 800f0ec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800f0f0:	fbb3 f1f2 	udiv	r1, r3, r2
 800f0f4:	fb01 f202 	mul.w	r2, r1, r2
 800f0f8:	1a9b      	subs	r3, r3, r2
 800f0fa:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
 800f0fe:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 800f102:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800f106:	fbb2 f3f3 	udiv	r3, r2, r3
 800f10a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 800f10e:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800f112:	2b09      	cmp	r3, #9
 800f114:	d90b      	bls.n	800f12e <f_printf+0x332>
 800f116:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800f11a:	2b78      	cmp	r3, #120	; 0x78
 800f11c:	d101      	bne.n	800f122 <f_printf+0x326>
 800f11e:	2227      	movs	r2, #39	; 0x27
 800f120:	e000      	b.n	800f124 <f_printf+0x328>
 800f122:	2207      	movs	r2, #7
 800f124:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800f128:	4413      	add	r3, r2
 800f12a:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
			str[i++] = d + '0';
 800f12e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f132:	1c5a      	adds	r2, r3, #1
 800f134:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800f138:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 800f13c:	3230      	adds	r2, #48	; 0x30
 800f13e:	b2d2      	uxtb	r2, r2
 800f140:	3398      	adds	r3, #152	; 0x98
 800f142:	443b      	add	r3, r7
 800f144:	f803 2c8c 	strb.w	r2, [r3, #-140]
		} while (v && i < sizeof str / sizeof str[0]);
 800f148:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800f14c:	2b00      	cmp	r3, #0
 800f14e:	d003      	beq.n	800f158 <f_printf+0x35c>
 800f150:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f154:	2b1f      	cmp	r3, #31
 800f156:	d9c7      	bls.n	800f0e8 <f_printf+0x2ec>
		if (f & 8) str[i++] = '-';
 800f158:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800f15c:	f003 0308 	and.w	r3, r3, #8
 800f160:	2b00      	cmp	r3, #0
 800f162:	d009      	beq.n	800f178 <f_printf+0x37c>
 800f164:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f168:	1c5a      	adds	r2, r3, #1
 800f16a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800f16e:	3398      	adds	r3, #152	; 0x98
 800f170:	443b      	add	r3, r7
 800f172:	222d      	movs	r2, #45	; 0x2d
 800f174:	f803 2c8c 	strb.w	r2, [r3, #-140]
		j = i; d = (f & 1) ? '0' : ' ';
 800f178:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f17c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800f180:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800f184:	f003 0301 	and.w	r3, r3, #1
 800f188:	2b00      	cmp	r3, #0
 800f18a:	d001      	beq.n	800f190 <f_printf+0x394>
 800f18c:	2330      	movs	r3, #48	; 0x30
 800f18e:	e000      	b.n	800f192 <f_printf+0x396>
 800f190:	2320      	movs	r3, #32
 800f192:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
 800f196:	e007      	b.n	800f1a8 <f_printf+0x3ac>
 800f198:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 800f19c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800f1a0:	4611      	mov	r1, r2
 800f1a2:	4618      	mov	r0, r3
 800f1a4:	f7ff fdb2 	bl	800ed0c <putc_bfd>
 800f1a8:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800f1ac:	f003 0302 	and.w	r3, r3, #2
 800f1b0:	2b00      	cmp	r3, #0
 800f1b2:	d108      	bne.n	800f1c6 <f_printf+0x3ca>
 800f1b4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f1b8:	1c5a      	adds	r2, r3, #1
 800f1ba:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800f1be:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800f1c2:	429a      	cmp	r2, r3
 800f1c4:	d8e8      	bhi.n	800f198 <f_printf+0x39c>
		do {
			putc_bfd(&pb, str[--i]);
 800f1c6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f1ca:	3b01      	subs	r3, #1
 800f1cc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800f1d0:	f107 020c 	add.w	r2, r7, #12
 800f1d4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f1d8:	4413      	add	r3, r2
 800f1da:	781a      	ldrb	r2, [r3, #0]
 800f1dc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800f1e0:	4611      	mov	r1, r2
 800f1e2:	4618      	mov	r0, r3
 800f1e4:	f7ff fd92 	bl	800ed0c <putc_bfd>
		} while (i);
 800f1e8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f1ec:	2b00      	cmp	r3, #0
 800f1ee:	d1ea      	bne.n	800f1c6 <f_printf+0x3ca>
		while (j++ < w) putc_bfd(&pb, d);
 800f1f0:	e007      	b.n	800f202 <f_printf+0x406>
 800f1f2:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 800f1f6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800f1fa:	4611      	mov	r1, r2
 800f1fc:	4618      	mov	r0, r3
 800f1fe:	f7ff fd85 	bl	800ed0c <putc_bfd>
 800f202:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f206:	1c5a      	adds	r2, r3, #1
 800f208:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800f20c:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800f210:	429a      	cmp	r2, r3
 800f212:	d8ee      	bhi.n	800f1f2 <f_printf+0x3f6>
		c = *fmt++;
 800f214:	e600      	b.n	800ee18 <f_printf+0x1c>
		if (c == 0) break;			/* End of string */
 800f216:	bf00      	nop
 800f218:	e000      	b.n	800f21c <f_printf+0x420>
		if (!c) break;
 800f21a:	bf00      	nop
	}

	va_end(arp);

	return putc_flush(&pb);
 800f21c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800f220:	4618      	mov	r0, r3
 800f222:	f7ff fdb0 	bl	800ed86 <putc_flush>
 800f226:	4603      	mov	r3, r0
}
 800f228:	4618      	mov	r0, r3
 800f22a:	379c      	adds	r7, #156	; 0x9c
 800f22c:	46bd      	mov	sp, r7
 800f22e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800f232:	b003      	add	sp, #12
 800f234:	4770      	bx	lr
 800f236:	bf00      	nop

0800f238 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800f238:	b480      	push	{r7}
 800f23a:	b087      	sub	sp, #28
 800f23c:	af00      	add	r7, sp, #0
 800f23e:	60f8      	str	r0, [r7, #12]
 800f240:	60b9      	str	r1, [r7, #8]
 800f242:	4613      	mov	r3, r2
 800f244:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800f246:	2301      	movs	r3, #1
 800f248:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800f24a:	2300      	movs	r3, #0
 800f24c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800f24e:	4b1f      	ldr	r3, [pc, #124]	; (800f2cc <FATFS_LinkDriverEx+0x94>)
 800f250:	7a5b      	ldrb	r3, [r3, #9]
 800f252:	b2db      	uxtb	r3, r3
 800f254:	2b00      	cmp	r3, #0
 800f256:	d131      	bne.n	800f2bc <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800f258:	4b1c      	ldr	r3, [pc, #112]	; (800f2cc <FATFS_LinkDriverEx+0x94>)
 800f25a:	7a5b      	ldrb	r3, [r3, #9]
 800f25c:	b2db      	uxtb	r3, r3
 800f25e:	461a      	mov	r2, r3
 800f260:	4b1a      	ldr	r3, [pc, #104]	; (800f2cc <FATFS_LinkDriverEx+0x94>)
 800f262:	2100      	movs	r1, #0
 800f264:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800f266:	4b19      	ldr	r3, [pc, #100]	; (800f2cc <FATFS_LinkDriverEx+0x94>)
 800f268:	7a5b      	ldrb	r3, [r3, #9]
 800f26a:	b2db      	uxtb	r3, r3
 800f26c:	4a17      	ldr	r2, [pc, #92]	; (800f2cc <FATFS_LinkDriverEx+0x94>)
 800f26e:	009b      	lsls	r3, r3, #2
 800f270:	4413      	add	r3, r2
 800f272:	68fa      	ldr	r2, [r7, #12]
 800f274:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800f276:	4b15      	ldr	r3, [pc, #84]	; (800f2cc <FATFS_LinkDriverEx+0x94>)
 800f278:	7a5b      	ldrb	r3, [r3, #9]
 800f27a:	b2db      	uxtb	r3, r3
 800f27c:	461a      	mov	r2, r3
 800f27e:	4b13      	ldr	r3, [pc, #76]	; (800f2cc <FATFS_LinkDriverEx+0x94>)
 800f280:	4413      	add	r3, r2
 800f282:	79fa      	ldrb	r2, [r7, #7]
 800f284:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800f286:	4b11      	ldr	r3, [pc, #68]	; (800f2cc <FATFS_LinkDriverEx+0x94>)
 800f288:	7a5b      	ldrb	r3, [r3, #9]
 800f28a:	b2db      	uxtb	r3, r3
 800f28c:	1c5a      	adds	r2, r3, #1
 800f28e:	b2d1      	uxtb	r1, r2
 800f290:	4a0e      	ldr	r2, [pc, #56]	; (800f2cc <FATFS_LinkDriverEx+0x94>)
 800f292:	7251      	strb	r1, [r2, #9]
 800f294:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800f296:	7dbb      	ldrb	r3, [r7, #22]
 800f298:	3330      	adds	r3, #48	; 0x30
 800f29a:	b2da      	uxtb	r2, r3
 800f29c:	68bb      	ldr	r3, [r7, #8]
 800f29e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800f2a0:	68bb      	ldr	r3, [r7, #8]
 800f2a2:	3301      	adds	r3, #1
 800f2a4:	223a      	movs	r2, #58	; 0x3a
 800f2a6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800f2a8:	68bb      	ldr	r3, [r7, #8]
 800f2aa:	3302      	adds	r3, #2
 800f2ac:	222f      	movs	r2, #47	; 0x2f
 800f2ae:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800f2b0:	68bb      	ldr	r3, [r7, #8]
 800f2b2:	3303      	adds	r3, #3
 800f2b4:	2200      	movs	r2, #0
 800f2b6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800f2b8:	2300      	movs	r3, #0
 800f2ba:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800f2bc:	7dfb      	ldrb	r3, [r7, #23]
}
 800f2be:	4618      	mov	r0, r3
 800f2c0:	371c      	adds	r7, #28
 800f2c2:	46bd      	mov	sp, r7
 800f2c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2c8:	4770      	bx	lr
 800f2ca:	bf00      	nop
 800f2cc:	20000d3c 	.word	0x20000d3c

0800f2d0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800f2d0:	b580      	push	{r7, lr}
 800f2d2:	b082      	sub	sp, #8
 800f2d4:	af00      	add	r7, sp, #0
 800f2d6:	6078      	str	r0, [r7, #4]
 800f2d8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800f2da:	2200      	movs	r2, #0
 800f2dc:	6839      	ldr	r1, [r7, #0]
 800f2de:	6878      	ldr	r0, [r7, #4]
 800f2e0:	f7ff ffaa 	bl	800f238 <FATFS_LinkDriverEx>
 800f2e4:	4603      	mov	r3, r0
}
 800f2e6:	4618      	mov	r0, r3
 800f2e8:	3708      	adds	r7, #8
 800f2ea:	46bd      	mov	sp, r7
 800f2ec:	bd80      	pop	{r7, pc}
	...

0800f2f0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800f2f0:	b580      	push	{r7, lr}
 800f2f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800f2f4:	2200      	movs	r2, #0
 800f2f6:	4912      	ldr	r1, [pc, #72]	; (800f340 <MX_USB_DEVICE_Init+0x50>)
 800f2f8:	4812      	ldr	r0, [pc, #72]	; (800f344 <MX_USB_DEVICE_Init+0x54>)
 800f2fa:	f7fb fb21 	bl	800a940 <USBD_Init>
 800f2fe:	4603      	mov	r3, r0
 800f300:	2b00      	cmp	r3, #0
 800f302:	d001      	beq.n	800f308 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800f304:	f7f1 ff7e 	bl	8001204 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800f308:	490f      	ldr	r1, [pc, #60]	; (800f348 <MX_USB_DEVICE_Init+0x58>)
 800f30a:	480e      	ldr	r0, [pc, #56]	; (800f344 <MX_USB_DEVICE_Init+0x54>)
 800f30c:	f7fb fb48 	bl	800a9a0 <USBD_RegisterClass>
 800f310:	4603      	mov	r3, r0
 800f312:	2b00      	cmp	r3, #0
 800f314:	d001      	beq.n	800f31a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800f316:	f7f1 ff75 	bl	8001204 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800f31a:	490c      	ldr	r1, [pc, #48]	; (800f34c <MX_USB_DEVICE_Init+0x5c>)
 800f31c:	4809      	ldr	r0, [pc, #36]	; (800f344 <MX_USB_DEVICE_Init+0x54>)
 800f31e:	f7fb fa3f 	bl	800a7a0 <USBD_CDC_RegisterInterface>
 800f322:	4603      	mov	r3, r0
 800f324:	2b00      	cmp	r3, #0
 800f326:	d001      	beq.n	800f32c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800f328:	f7f1 ff6c 	bl	8001204 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800f32c:	4805      	ldr	r0, [pc, #20]	; (800f344 <MX_USB_DEVICE_Init+0x54>)
 800f32e:	f7fb fb6d 	bl	800aa0c <USBD_Start>
 800f332:	4603      	mov	r3, r0
 800f334:	2b00      	cmp	r3, #0
 800f336:	d001      	beq.n	800f33c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800f338:	f7f1 ff64 	bl	8001204 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800f33c:	bf00      	nop
 800f33e:	bd80      	pop	{r7, pc}
 800f340:	200000c0 	.word	0x200000c0
 800f344:	20000d48 	.word	0x20000d48
 800f348:	20000024 	.word	0x20000024
 800f34c:	200000ac 	.word	0x200000ac

0800f350 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800f350:	b580      	push	{r7, lr}
 800f352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800f354:	2200      	movs	r2, #0
 800f356:	4905      	ldr	r1, [pc, #20]	; (800f36c <CDC_Init_FS+0x1c>)
 800f358:	4805      	ldr	r0, [pc, #20]	; (800f370 <CDC_Init_FS+0x20>)
 800f35a:	f7fb fa3b 	bl	800a7d4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800f35e:	4905      	ldr	r1, [pc, #20]	; (800f374 <CDC_Init_FS+0x24>)
 800f360:	4803      	ldr	r0, [pc, #12]	; (800f370 <CDC_Init_FS+0x20>)
 800f362:	f7fb fa59 	bl	800a818 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800f366:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800f368:	4618      	mov	r0, r3
 800f36a:	bd80      	pop	{r7, pc}
 800f36c:	20001824 	.word	0x20001824
 800f370:	20000d48 	.word	0x20000d48
 800f374:	20001024 	.word	0x20001024

0800f378 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800f378:	b480      	push	{r7}
 800f37a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800f37c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800f37e:	4618      	mov	r0, r3
 800f380:	46bd      	mov	sp, r7
 800f382:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f386:	4770      	bx	lr

0800f388 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800f388:	b480      	push	{r7}
 800f38a:	b083      	sub	sp, #12
 800f38c:	af00      	add	r7, sp, #0
 800f38e:	4603      	mov	r3, r0
 800f390:	6039      	str	r1, [r7, #0]
 800f392:	71fb      	strb	r3, [r7, #7]
 800f394:	4613      	mov	r3, r2
 800f396:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800f398:	79fb      	ldrb	r3, [r7, #7]
 800f39a:	2b23      	cmp	r3, #35	; 0x23
 800f39c:	f200 80a3 	bhi.w	800f4e6 <CDC_Control_FS+0x15e>
 800f3a0:	a201      	add	r2, pc, #4	; (adr r2, 800f3a8 <CDC_Control_FS+0x20>)
 800f3a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f3a6:	bf00      	nop
 800f3a8:	0800f4e7 	.word	0x0800f4e7
 800f3ac:	0800f4e7 	.word	0x0800f4e7
 800f3b0:	0800f4e7 	.word	0x0800f4e7
 800f3b4:	0800f4e7 	.word	0x0800f4e7
 800f3b8:	0800f4e7 	.word	0x0800f4e7
 800f3bc:	0800f4e7 	.word	0x0800f4e7
 800f3c0:	0800f4e7 	.word	0x0800f4e7
 800f3c4:	0800f4e7 	.word	0x0800f4e7
 800f3c8:	0800f4e7 	.word	0x0800f4e7
 800f3cc:	0800f4e7 	.word	0x0800f4e7
 800f3d0:	0800f4e7 	.word	0x0800f4e7
 800f3d4:	0800f4e7 	.word	0x0800f4e7
 800f3d8:	0800f4e7 	.word	0x0800f4e7
 800f3dc:	0800f4e7 	.word	0x0800f4e7
 800f3e0:	0800f4e7 	.word	0x0800f4e7
 800f3e4:	0800f4e7 	.word	0x0800f4e7
 800f3e8:	0800f4e7 	.word	0x0800f4e7
 800f3ec:	0800f4e7 	.word	0x0800f4e7
 800f3f0:	0800f4e7 	.word	0x0800f4e7
 800f3f4:	0800f4e7 	.word	0x0800f4e7
 800f3f8:	0800f4e7 	.word	0x0800f4e7
 800f3fc:	0800f4e7 	.word	0x0800f4e7
 800f400:	0800f4e7 	.word	0x0800f4e7
 800f404:	0800f4e7 	.word	0x0800f4e7
 800f408:	0800f4e7 	.word	0x0800f4e7
 800f40c:	0800f4e7 	.word	0x0800f4e7
 800f410:	0800f4e7 	.word	0x0800f4e7
 800f414:	0800f4e7 	.word	0x0800f4e7
 800f418:	0800f4e7 	.word	0x0800f4e7
 800f41c:	0800f4e7 	.word	0x0800f4e7
 800f420:	0800f4e7 	.word	0x0800f4e7
 800f424:	0800f4e7 	.word	0x0800f4e7
 800f428:	0800f439 	.word	0x0800f439
 800f42c:	0800f493 	.word	0x0800f493
 800f430:	0800f4e7 	.word	0x0800f4e7
 800f434:	0800f4e7 	.word	0x0800f4e7
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	Linecoding.bitrate = (uint32_t)(pbuf[0]);
 800f438:	683b      	ldr	r3, [r7, #0]
 800f43a:	781b      	ldrb	r3, [r3, #0]
 800f43c:	461a      	mov	r2, r3
 800f43e:	4b2e      	ldr	r3, [pc, #184]	; (800f4f8 <CDC_Control_FS+0x170>)
 800f440:	601a      	str	r2, [r3, #0]
    	Linecoding.bitrate |= (uint32_t)(pbuf[1]<<8);
 800f442:	4b2d      	ldr	r3, [pc, #180]	; (800f4f8 <CDC_Control_FS+0x170>)
 800f444:	681b      	ldr	r3, [r3, #0]
 800f446:	683a      	ldr	r2, [r7, #0]
 800f448:	3201      	adds	r2, #1
 800f44a:	7812      	ldrb	r2, [r2, #0]
 800f44c:	0212      	lsls	r2, r2, #8
 800f44e:	4313      	orrs	r3, r2
 800f450:	4a29      	ldr	r2, [pc, #164]	; (800f4f8 <CDC_Control_FS+0x170>)
 800f452:	6013      	str	r3, [r2, #0]
    	Linecoding.bitrate |= (uint32_t)(pbuf[2]<<16);
 800f454:	4b28      	ldr	r3, [pc, #160]	; (800f4f8 <CDC_Control_FS+0x170>)
 800f456:	681b      	ldr	r3, [r3, #0]
 800f458:	683a      	ldr	r2, [r7, #0]
 800f45a:	3202      	adds	r2, #2
 800f45c:	7812      	ldrb	r2, [r2, #0]
 800f45e:	0412      	lsls	r2, r2, #16
 800f460:	4313      	orrs	r3, r2
 800f462:	4a25      	ldr	r2, [pc, #148]	; (800f4f8 <CDC_Control_FS+0x170>)
 800f464:	6013      	str	r3, [r2, #0]
    	Linecoding.bitrate |= (uint32_t)(pbuf[3]<<24);
 800f466:	4b24      	ldr	r3, [pc, #144]	; (800f4f8 <CDC_Control_FS+0x170>)
 800f468:	681b      	ldr	r3, [r3, #0]
 800f46a:	683a      	ldr	r2, [r7, #0]
 800f46c:	3203      	adds	r2, #3
 800f46e:	7812      	ldrb	r2, [r2, #0]
 800f470:	0612      	lsls	r2, r2, #24
 800f472:	4313      	orrs	r3, r2
 800f474:	4a20      	ldr	r2, [pc, #128]	; (800f4f8 <CDC_Control_FS+0x170>)
 800f476:	6013      	str	r3, [r2, #0]
    	Linecoding.format = pbuf[4];
 800f478:	683b      	ldr	r3, [r7, #0]
 800f47a:	791a      	ldrb	r2, [r3, #4]
 800f47c:	4b1e      	ldr	r3, [pc, #120]	; (800f4f8 <CDC_Control_FS+0x170>)
 800f47e:	711a      	strb	r2, [r3, #4]
    	Linecoding.paritytype = pbuf[5];
 800f480:	683b      	ldr	r3, [r7, #0]
 800f482:	795a      	ldrb	r2, [r3, #5]
 800f484:	4b1c      	ldr	r3, [pc, #112]	; (800f4f8 <CDC_Control_FS+0x170>)
 800f486:	715a      	strb	r2, [r3, #5]
    	Linecoding.datatype = pbuf[6];
 800f488:	683b      	ldr	r3, [r7, #0]
 800f48a:	799a      	ldrb	r2, [r3, #6]
 800f48c:	4b1a      	ldr	r3, [pc, #104]	; (800f4f8 <CDC_Control_FS+0x170>)
 800f48e:	719a      	strb	r2, [r3, #6]
    break;
 800f490:	e02a      	b.n	800f4e8 <CDC_Control_FS+0x160>

    case CDC_GET_LINE_CODING:
      pbuf[0] = (uint8_t)(Linecoding.bitrate);
 800f492:	4b19      	ldr	r3, [pc, #100]	; (800f4f8 <CDC_Control_FS+0x170>)
 800f494:	681b      	ldr	r3, [r3, #0]
 800f496:	b2da      	uxtb	r2, r3
 800f498:	683b      	ldr	r3, [r7, #0]
 800f49a:	701a      	strb	r2, [r3, #0]
      pbuf[1] = (uint8_t)(Linecoding.bitrate>>8);
 800f49c:	4b16      	ldr	r3, [pc, #88]	; (800f4f8 <CDC_Control_FS+0x170>)
 800f49e:	681b      	ldr	r3, [r3, #0]
 800f4a0:	0a1a      	lsrs	r2, r3, #8
 800f4a2:	683b      	ldr	r3, [r7, #0]
 800f4a4:	3301      	adds	r3, #1
 800f4a6:	b2d2      	uxtb	r2, r2
 800f4a8:	701a      	strb	r2, [r3, #0]
      pbuf[2] = (uint8_t)(Linecoding.bitrate>>16);
 800f4aa:	4b13      	ldr	r3, [pc, #76]	; (800f4f8 <CDC_Control_FS+0x170>)
 800f4ac:	681b      	ldr	r3, [r3, #0]
 800f4ae:	0c1a      	lsrs	r2, r3, #16
 800f4b0:	683b      	ldr	r3, [r7, #0]
 800f4b2:	3302      	adds	r3, #2
 800f4b4:	b2d2      	uxtb	r2, r2
 800f4b6:	701a      	strb	r2, [r3, #0]
      pbuf[3] = (uint8_t)(Linecoding.bitrate>>24);
 800f4b8:	4b0f      	ldr	r3, [pc, #60]	; (800f4f8 <CDC_Control_FS+0x170>)
 800f4ba:	681b      	ldr	r3, [r3, #0]
 800f4bc:	0e1a      	lsrs	r2, r3, #24
 800f4be:	683b      	ldr	r3, [r7, #0]
 800f4c0:	3303      	adds	r3, #3
 800f4c2:	b2d2      	uxtb	r2, r2
 800f4c4:	701a      	strb	r2, [r3, #0]
      pbuf[4] = Linecoding.format;
 800f4c6:	683b      	ldr	r3, [r7, #0]
 800f4c8:	3304      	adds	r3, #4
 800f4ca:	4a0b      	ldr	r2, [pc, #44]	; (800f4f8 <CDC_Control_FS+0x170>)
 800f4cc:	7912      	ldrb	r2, [r2, #4]
 800f4ce:	701a      	strb	r2, [r3, #0]
      pbuf[5] = Linecoding.paritytype;
 800f4d0:	683b      	ldr	r3, [r7, #0]
 800f4d2:	3305      	adds	r3, #5
 800f4d4:	4a08      	ldr	r2, [pc, #32]	; (800f4f8 <CDC_Control_FS+0x170>)
 800f4d6:	7952      	ldrb	r2, [r2, #5]
 800f4d8:	701a      	strb	r2, [r3, #0]
      pbuf[6] = Linecoding.datatype;
 800f4da:	683b      	ldr	r3, [r7, #0]
 800f4dc:	3306      	adds	r3, #6
 800f4de:	4a06      	ldr	r2, [pc, #24]	; (800f4f8 <CDC_Control_FS+0x170>)
 800f4e0:	7992      	ldrb	r2, [r2, #6]
 800f4e2:	701a      	strb	r2, [r3, #0]
    break;
 800f4e4:	e000      	b.n	800f4e8 <CDC_Control_FS+0x160>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800f4e6:	bf00      	nop
  }

  return (USBD_OK);
 800f4e8:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800f4ea:	4618      	mov	r0, r3
 800f4ec:	370c      	adds	r7, #12
 800f4ee:	46bd      	mov	sp, r7
 800f4f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4f4:	4770      	bx	lr
 800f4f6:	bf00      	nop
 800f4f8:	200000a4 	.word	0x200000a4

0800f4fc <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800f4fc:	b580      	push	{r7, lr}
 800f4fe:	b084      	sub	sp, #16
 800f500:	af00      	add	r7, sp, #0
 800f502:	6078      	str	r0, [r7, #4]
 800f504:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800f506:	6879      	ldr	r1, [r7, #4]
 800f508:	480e      	ldr	r0, [pc, #56]	; (800f544 <CDC_Receive_FS+0x48>)
 800f50a:	f7fb f985 	bl	800a818 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800f50e:	480d      	ldr	r0, [pc, #52]	; (800f544 <CDC_Receive_FS+0x48>)
 800f510:	f7fb f9e0 	bl	800a8d4 <USBD_CDC_ReceivePacket>

  for(int i=0; i<*Len; i++)
 800f514:	2300      	movs	r3, #0
 800f516:	60fb      	str	r3, [r7, #12]
 800f518:	e009      	b.n	800f52e <CDC_Receive_FS+0x32>
  {
  	cdcDataIn(Buf[i]);
 800f51a:	68fb      	ldr	r3, [r7, #12]
 800f51c:	687a      	ldr	r2, [r7, #4]
 800f51e:	4413      	add	r3, r2
 800f520:	781b      	ldrb	r3, [r3, #0]
 800f522:	4618      	mov	r0, r3
 800f524:	f7f2 f94e 	bl	80017c4 <cdcDataIn>
  for(int i=0; i<*Len; i++)
 800f528:	68fb      	ldr	r3, [r7, #12]
 800f52a:	3301      	adds	r3, #1
 800f52c:	60fb      	str	r3, [r7, #12]
 800f52e:	683b      	ldr	r3, [r7, #0]
 800f530:	681a      	ldr	r2, [r3, #0]
 800f532:	68fb      	ldr	r3, [r7, #12]
 800f534:	429a      	cmp	r2, r3
 800f536:	d8f0      	bhi.n	800f51a <CDC_Receive_FS+0x1e>
  }

  return (USBD_OK);
 800f538:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800f53a:	4618      	mov	r0, r3
 800f53c:	3710      	adds	r7, #16
 800f53e:	46bd      	mov	sp, r7
 800f540:	bd80      	pop	{r7, pc}
 800f542:	bf00      	nop
 800f544:	20000d48 	.word	0x20000d48

0800f548 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800f548:	b580      	push	{r7, lr}
 800f54a:	b084      	sub	sp, #16
 800f54c:	af00      	add	r7, sp, #0
 800f54e:	6078      	str	r0, [r7, #4]
 800f550:	460b      	mov	r3, r1
 800f552:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800f554:	2300      	movs	r3, #0
 800f556:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800f558:	4b0d      	ldr	r3, [pc, #52]	; (800f590 <CDC_Transmit_FS+0x48>)
 800f55a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f55e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800f560:	68bb      	ldr	r3, [r7, #8]
 800f562:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800f566:	2b00      	cmp	r3, #0
 800f568:	d001      	beq.n	800f56e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800f56a:	2301      	movs	r3, #1
 800f56c:	e00b      	b.n	800f586 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800f56e:	887b      	ldrh	r3, [r7, #2]
 800f570:	461a      	mov	r2, r3
 800f572:	6879      	ldr	r1, [r7, #4]
 800f574:	4806      	ldr	r0, [pc, #24]	; (800f590 <CDC_Transmit_FS+0x48>)
 800f576:	f7fb f92d 	bl	800a7d4 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800f57a:	4805      	ldr	r0, [pc, #20]	; (800f590 <CDC_Transmit_FS+0x48>)
 800f57c:	f7fb f96a 	bl	800a854 <USBD_CDC_TransmitPacket>
 800f580:	4603      	mov	r3, r0
 800f582:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800f584:	7bfb      	ldrb	r3, [r7, #15]
}
 800f586:	4618      	mov	r0, r3
 800f588:	3710      	adds	r7, #16
 800f58a:	46bd      	mov	sp, r7
 800f58c:	bd80      	pop	{r7, pc}
 800f58e:	bf00      	nop
 800f590:	20000d48 	.word	0x20000d48

0800f594 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800f594:	b480      	push	{r7}
 800f596:	b087      	sub	sp, #28
 800f598:	af00      	add	r7, sp, #0
 800f59a:	60f8      	str	r0, [r7, #12]
 800f59c:	60b9      	str	r1, [r7, #8]
 800f59e:	4613      	mov	r3, r2
 800f5a0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800f5a2:	2300      	movs	r3, #0
 800f5a4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800f5a6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f5aa:	4618      	mov	r0, r3
 800f5ac:	371c      	adds	r7, #28
 800f5ae:	46bd      	mov	sp, r7
 800f5b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5b4:	4770      	bx	lr
	...

0800f5b8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f5b8:	b480      	push	{r7}
 800f5ba:	b083      	sub	sp, #12
 800f5bc:	af00      	add	r7, sp, #0
 800f5be:	4603      	mov	r3, r0
 800f5c0:	6039      	str	r1, [r7, #0]
 800f5c2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800f5c4:	683b      	ldr	r3, [r7, #0]
 800f5c6:	2212      	movs	r2, #18
 800f5c8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800f5ca:	4b03      	ldr	r3, [pc, #12]	; (800f5d8 <USBD_FS_DeviceDescriptor+0x20>)
}
 800f5cc:	4618      	mov	r0, r3
 800f5ce:	370c      	adds	r7, #12
 800f5d0:	46bd      	mov	sp, r7
 800f5d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5d6:	4770      	bx	lr
 800f5d8:	200000dc 	.word	0x200000dc

0800f5dc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f5dc:	b480      	push	{r7}
 800f5de:	b083      	sub	sp, #12
 800f5e0:	af00      	add	r7, sp, #0
 800f5e2:	4603      	mov	r3, r0
 800f5e4:	6039      	str	r1, [r7, #0]
 800f5e6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800f5e8:	683b      	ldr	r3, [r7, #0]
 800f5ea:	2204      	movs	r2, #4
 800f5ec:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800f5ee:	4b03      	ldr	r3, [pc, #12]	; (800f5fc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800f5f0:	4618      	mov	r0, r3
 800f5f2:	370c      	adds	r7, #12
 800f5f4:	46bd      	mov	sp, r7
 800f5f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5fa:	4770      	bx	lr
 800f5fc:	200000f0 	.word	0x200000f0

0800f600 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f600:	b580      	push	{r7, lr}
 800f602:	b082      	sub	sp, #8
 800f604:	af00      	add	r7, sp, #0
 800f606:	4603      	mov	r3, r0
 800f608:	6039      	str	r1, [r7, #0]
 800f60a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800f60c:	79fb      	ldrb	r3, [r7, #7]
 800f60e:	2b00      	cmp	r3, #0
 800f610:	d105      	bne.n	800f61e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800f612:	683a      	ldr	r2, [r7, #0]
 800f614:	4907      	ldr	r1, [pc, #28]	; (800f634 <USBD_FS_ProductStrDescriptor+0x34>)
 800f616:	4808      	ldr	r0, [pc, #32]	; (800f638 <USBD_FS_ProductStrDescriptor+0x38>)
 800f618:	f7fc fbaa 	bl	800bd70 <USBD_GetString>
 800f61c:	e004      	b.n	800f628 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800f61e:	683a      	ldr	r2, [r7, #0]
 800f620:	4904      	ldr	r1, [pc, #16]	; (800f634 <USBD_FS_ProductStrDescriptor+0x34>)
 800f622:	4805      	ldr	r0, [pc, #20]	; (800f638 <USBD_FS_ProductStrDescriptor+0x38>)
 800f624:	f7fc fba4 	bl	800bd70 <USBD_GetString>
  }
  return USBD_StrDesc;
 800f628:	4b02      	ldr	r3, [pc, #8]	; (800f634 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800f62a:	4618      	mov	r0, r3
 800f62c:	3708      	adds	r7, #8
 800f62e:	46bd      	mov	sp, r7
 800f630:	bd80      	pop	{r7, pc}
 800f632:	bf00      	nop
 800f634:	20002024 	.word	0x20002024
 800f638:	0801353c 	.word	0x0801353c

0800f63c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f63c:	b580      	push	{r7, lr}
 800f63e:	b082      	sub	sp, #8
 800f640:	af00      	add	r7, sp, #0
 800f642:	4603      	mov	r3, r0
 800f644:	6039      	str	r1, [r7, #0]
 800f646:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800f648:	683a      	ldr	r2, [r7, #0]
 800f64a:	4904      	ldr	r1, [pc, #16]	; (800f65c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800f64c:	4804      	ldr	r0, [pc, #16]	; (800f660 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800f64e:	f7fc fb8f 	bl	800bd70 <USBD_GetString>
  return USBD_StrDesc;
 800f652:	4b02      	ldr	r3, [pc, #8]	; (800f65c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800f654:	4618      	mov	r0, r3
 800f656:	3708      	adds	r7, #8
 800f658:	46bd      	mov	sp, r7
 800f65a:	bd80      	pop	{r7, pc}
 800f65c:	20002024 	.word	0x20002024
 800f660:	08013554 	.word	0x08013554

0800f664 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f664:	b580      	push	{r7, lr}
 800f666:	b082      	sub	sp, #8
 800f668:	af00      	add	r7, sp, #0
 800f66a:	4603      	mov	r3, r0
 800f66c:	6039      	str	r1, [r7, #0]
 800f66e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800f670:	683b      	ldr	r3, [r7, #0]
 800f672:	221a      	movs	r2, #26
 800f674:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800f676:	f000 f843 	bl	800f700 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800f67a:	4b02      	ldr	r3, [pc, #8]	; (800f684 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800f67c:	4618      	mov	r0, r3
 800f67e:	3708      	adds	r7, #8
 800f680:	46bd      	mov	sp, r7
 800f682:	bd80      	pop	{r7, pc}
 800f684:	200000f4 	.word	0x200000f4

0800f688 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f688:	b580      	push	{r7, lr}
 800f68a:	b082      	sub	sp, #8
 800f68c:	af00      	add	r7, sp, #0
 800f68e:	4603      	mov	r3, r0
 800f690:	6039      	str	r1, [r7, #0]
 800f692:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800f694:	79fb      	ldrb	r3, [r7, #7]
 800f696:	2b00      	cmp	r3, #0
 800f698:	d105      	bne.n	800f6a6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800f69a:	683a      	ldr	r2, [r7, #0]
 800f69c:	4907      	ldr	r1, [pc, #28]	; (800f6bc <USBD_FS_ConfigStrDescriptor+0x34>)
 800f69e:	4808      	ldr	r0, [pc, #32]	; (800f6c0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800f6a0:	f7fc fb66 	bl	800bd70 <USBD_GetString>
 800f6a4:	e004      	b.n	800f6b0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800f6a6:	683a      	ldr	r2, [r7, #0]
 800f6a8:	4904      	ldr	r1, [pc, #16]	; (800f6bc <USBD_FS_ConfigStrDescriptor+0x34>)
 800f6aa:	4805      	ldr	r0, [pc, #20]	; (800f6c0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800f6ac:	f7fc fb60 	bl	800bd70 <USBD_GetString>
  }
  return USBD_StrDesc;
 800f6b0:	4b02      	ldr	r3, [pc, #8]	; (800f6bc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800f6b2:	4618      	mov	r0, r3
 800f6b4:	3708      	adds	r7, #8
 800f6b6:	46bd      	mov	sp, r7
 800f6b8:	bd80      	pop	{r7, pc}
 800f6ba:	bf00      	nop
 800f6bc:	20002024 	.word	0x20002024
 800f6c0:	08013568 	.word	0x08013568

0800f6c4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f6c4:	b580      	push	{r7, lr}
 800f6c6:	b082      	sub	sp, #8
 800f6c8:	af00      	add	r7, sp, #0
 800f6ca:	4603      	mov	r3, r0
 800f6cc:	6039      	str	r1, [r7, #0]
 800f6ce:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800f6d0:	79fb      	ldrb	r3, [r7, #7]
 800f6d2:	2b00      	cmp	r3, #0
 800f6d4:	d105      	bne.n	800f6e2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800f6d6:	683a      	ldr	r2, [r7, #0]
 800f6d8:	4907      	ldr	r1, [pc, #28]	; (800f6f8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800f6da:	4808      	ldr	r0, [pc, #32]	; (800f6fc <USBD_FS_InterfaceStrDescriptor+0x38>)
 800f6dc:	f7fc fb48 	bl	800bd70 <USBD_GetString>
 800f6e0:	e004      	b.n	800f6ec <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800f6e2:	683a      	ldr	r2, [r7, #0]
 800f6e4:	4904      	ldr	r1, [pc, #16]	; (800f6f8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800f6e6:	4805      	ldr	r0, [pc, #20]	; (800f6fc <USBD_FS_InterfaceStrDescriptor+0x38>)
 800f6e8:	f7fc fb42 	bl	800bd70 <USBD_GetString>
  }
  return USBD_StrDesc;
 800f6ec:	4b02      	ldr	r3, [pc, #8]	; (800f6f8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800f6ee:	4618      	mov	r0, r3
 800f6f0:	3708      	adds	r7, #8
 800f6f2:	46bd      	mov	sp, r7
 800f6f4:	bd80      	pop	{r7, pc}
 800f6f6:	bf00      	nop
 800f6f8:	20002024 	.word	0x20002024
 800f6fc:	08013574 	.word	0x08013574

0800f700 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800f700:	b580      	push	{r7, lr}
 800f702:	b084      	sub	sp, #16
 800f704:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800f706:	4b0f      	ldr	r3, [pc, #60]	; (800f744 <Get_SerialNum+0x44>)
 800f708:	681b      	ldr	r3, [r3, #0]
 800f70a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800f70c:	4b0e      	ldr	r3, [pc, #56]	; (800f748 <Get_SerialNum+0x48>)
 800f70e:	681b      	ldr	r3, [r3, #0]
 800f710:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800f712:	4b0e      	ldr	r3, [pc, #56]	; (800f74c <Get_SerialNum+0x4c>)
 800f714:	681b      	ldr	r3, [r3, #0]
 800f716:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800f718:	68fa      	ldr	r2, [r7, #12]
 800f71a:	687b      	ldr	r3, [r7, #4]
 800f71c:	4413      	add	r3, r2
 800f71e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800f720:	68fb      	ldr	r3, [r7, #12]
 800f722:	2b00      	cmp	r3, #0
 800f724:	d009      	beq.n	800f73a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800f726:	2208      	movs	r2, #8
 800f728:	4909      	ldr	r1, [pc, #36]	; (800f750 <Get_SerialNum+0x50>)
 800f72a:	68f8      	ldr	r0, [r7, #12]
 800f72c:	f000 f814 	bl	800f758 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800f730:	2204      	movs	r2, #4
 800f732:	4908      	ldr	r1, [pc, #32]	; (800f754 <Get_SerialNum+0x54>)
 800f734:	68b8      	ldr	r0, [r7, #8]
 800f736:	f000 f80f 	bl	800f758 <IntToUnicode>
  }
}
 800f73a:	bf00      	nop
 800f73c:	3710      	adds	r7, #16
 800f73e:	46bd      	mov	sp, r7
 800f740:	bd80      	pop	{r7, pc}
 800f742:	bf00      	nop
 800f744:	1fff7a10 	.word	0x1fff7a10
 800f748:	1fff7a14 	.word	0x1fff7a14
 800f74c:	1fff7a18 	.word	0x1fff7a18
 800f750:	200000f6 	.word	0x200000f6
 800f754:	20000106 	.word	0x20000106

0800f758 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800f758:	b480      	push	{r7}
 800f75a:	b087      	sub	sp, #28
 800f75c:	af00      	add	r7, sp, #0
 800f75e:	60f8      	str	r0, [r7, #12]
 800f760:	60b9      	str	r1, [r7, #8]
 800f762:	4613      	mov	r3, r2
 800f764:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800f766:	2300      	movs	r3, #0
 800f768:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800f76a:	2300      	movs	r3, #0
 800f76c:	75fb      	strb	r3, [r7, #23]
 800f76e:	e027      	b.n	800f7c0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800f770:	68fb      	ldr	r3, [r7, #12]
 800f772:	0f1b      	lsrs	r3, r3, #28
 800f774:	2b09      	cmp	r3, #9
 800f776:	d80b      	bhi.n	800f790 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800f778:	68fb      	ldr	r3, [r7, #12]
 800f77a:	0f1b      	lsrs	r3, r3, #28
 800f77c:	b2da      	uxtb	r2, r3
 800f77e:	7dfb      	ldrb	r3, [r7, #23]
 800f780:	005b      	lsls	r3, r3, #1
 800f782:	4619      	mov	r1, r3
 800f784:	68bb      	ldr	r3, [r7, #8]
 800f786:	440b      	add	r3, r1
 800f788:	3230      	adds	r2, #48	; 0x30
 800f78a:	b2d2      	uxtb	r2, r2
 800f78c:	701a      	strb	r2, [r3, #0]
 800f78e:	e00a      	b.n	800f7a6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800f790:	68fb      	ldr	r3, [r7, #12]
 800f792:	0f1b      	lsrs	r3, r3, #28
 800f794:	b2da      	uxtb	r2, r3
 800f796:	7dfb      	ldrb	r3, [r7, #23]
 800f798:	005b      	lsls	r3, r3, #1
 800f79a:	4619      	mov	r1, r3
 800f79c:	68bb      	ldr	r3, [r7, #8]
 800f79e:	440b      	add	r3, r1
 800f7a0:	3237      	adds	r2, #55	; 0x37
 800f7a2:	b2d2      	uxtb	r2, r2
 800f7a4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800f7a6:	68fb      	ldr	r3, [r7, #12]
 800f7a8:	011b      	lsls	r3, r3, #4
 800f7aa:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800f7ac:	7dfb      	ldrb	r3, [r7, #23]
 800f7ae:	005b      	lsls	r3, r3, #1
 800f7b0:	3301      	adds	r3, #1
 800f7b2:	68ba      	ldr	r2, [r7, #8]
 800f7b4:	4413      	add	r3, r2
 800f7b6:	2200      	movs	r2, #0
 800f7b8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800f7ba:	7dfb      	ldrb	r3, [r7, #23]
 800f7bc:	3301      	adds	r3, #1
 800f7be:	75fb      	strb	r3, [r7, #23]
 800f7c0:	7dfa      	ldrb	r2, [r7, #23]
 800f7c2:	79fb      	ldrb	r3, [r7, #7]
 800f7c4:	429a      	cmp	r2, r3
 800f7c6:	d3d3      	bcc.n	800f770 <IntToUnicode+0x18>
  }
}
 800f7c8:	bf00      	nop
 800f7ca:	bf00      	nop
 800f7cc:	371c      	adds	r7, #28
 800f7ce:	46bd      	mov	sp, r7
 800f7d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7d4:	4770      	bx	lr
	...

0800f7d8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800f7d8:	b580      	push	{r7, lr}
 800f7da:	b08a      	sub	sp, #40	; 0x28
 800f7dc:	af00      	add	r7, sp, #0
 800f7de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f7e0:	f107 0314 	add.w	r3, r7, #20
 800f7e4:	2200      	movs	r2, #0
 800f7e6:	601a      	str	r2, [r3, #0]
 800f7e8:	605a      	str	r2, [r3, #4]
 800f7ea:	609a      	str	r2, [r3, #8]
 800f7ec:	60da      	str	r2, [r3, #12]
 800f7ee:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800f7f0:	687b      	ldr	r3, [r7, #4]
 800f7f2:	681b      	ldr	r3, [r3, #0]
 800f7f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800f7f8:	d13a      	bne.n	800f870 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800f7fa:	2300      	movs	r3, #0
 800f7fc:	613b      	str	r3, [r7, #16]
 800f7fe:	4b1e      	ldr	r3, [pc, #120]	; (800f878 <HAL_PCD_MspInit+0xa0>)
 800f800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f802:	4a1d      	ldr	r2, [pc, #116]	; (800f878 <HAL_PCD_MspInit+0xa0>)
 800f804:	f043 0301 	orr.w	r3, r3, #1
 800f808:	6313      	str	r3, [r2, #48]	; 0x30
 800f80a:	4b1b      	ldr	r3, [pc, #108]	; (800f878 <HAL_PCD_MspInit+0xa0>)
 800f80c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f80e:	f003 0301 	and.w	r3, r3, #1
 800f812:	613b      	str	r3, [r7, #16]
 800f814:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800f816:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800f81a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f81c:	2302      	movs	r3, #2
 800f81e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f820:	2300      	movs	r3, #0
 800f822:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f824:	2303      	movs	r3, #3
 800f826:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800f828:	230a      	movs	r3, #10
 800f82a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f82c:	f107 0314 	add.w	r3, r7, #20
 800f830:	4619      	mov	r1, r3
 800f832:	4812      	ldr	r0, [pc, #72]	; (800f87c <HAL_PCD_MspInit+0xa4>)
 800f834:	f7f4 fb3e 	bl	8003eb4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800f838:	4b0f      	ldr	r3, [pc, #60]	; (800f878 <HAL_PCD_MspInit+0xa0>)
 800f83a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f83c:	4a0e      	ldr	r2, [pc, #56]	; (800f878 <HAL_PCD_MspInit+0xa0>)
 800f83e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f842:	6353      	str	r3, [r2, #52]	; 0x34
 800f844:	2300      	movs	r3, #0
 800f846:	60fb      	str	r3, [r7, #12]
 800f848:	4b0b      	ldr	r3, [pc, #44]	; (800f878 <HAL_PCD_MspInit+0xa0>)
 800f84a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f84c:	4a0a      	ldr	r2, [pc, #40]	; (800f878 <HAL_PCD_MspInit+0xa0>)
 800f84e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800f852:	6453      	str	r3, [r2, #68]	; 0x44
 800f854:	4b08      	ldr	r3, [pc, #32]	; (800f878 <HAL_PCD_MspInit+0xa0>)
 800f856:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f858:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f85c:	60fb      	str	r3, [r7, #12]
 800f85e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 6, 0);
 800f860:	2200      	movs	r2, #0
 800f862:	2106      	movs	r1, #6
 800f864:	2043      	movs	r0, #67	; 0x43
 800f866:	f7f3 ff50 	bl	800370a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800f86a:	2043      	movs	r0, #67	; 0x43
 800f86c:	f7f3 ff69 	bl	8003742 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800f870:	bf00      	nop
 800f872:	3728      	adds	r7, #40	; 0x28
 800f874:	46bd      	mov	sp, r7
 800f876:	bd80      	pop	{r7, pc}
 800f878:	40023800 	.word	0x40023800
 800f87c:	40020000 	.word	0x40020000

0800f880 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f880:	b580      	push	{r7, lr}
 800f882:	b082      	sub	sp, #8
 800f884:	af00      	add	r7, sp, #0
 800f886:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800f888:	687b      	ldr	r3, [r7, #4]
 800f88a:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	; 0x4e0
 800f88e:	687b      	ldr	r3, [r7, #4]
 800f890:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 800f894:	4619      	mov	r1, r3
 800f896:	4610      	mov	r0, r2
 800f898:	f7fb f905 	bl	800aaa6 <USBD_LL_SetupStage>
}
 800f89c:	bf00      	nop
 800f89e:	3708      	adds	r7, #8
 800f8a0:	46bd      	mov	sp, r7
 800f8a2:	bd80      	pop	{r7, pc}

0800f8a4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f8a4:	b580      	push	{r7, lr}
 800f8a6:	b082      	sub	sp, #8
 800f8a8:	af00      	add	r7, sp, #0
 800f8aa:	6078      	str	r0, [r7, #4]
 800f8ac:	460b      	mov	r3, r1
 800f8ae:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800f8b0:	687b      	ldr	r3, [r7, #4]
 800f8b2:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 800f8b6:	78fa      	ldrb	r2, [r7, #3]
 800f8b8:	6879      	ldr	r1, [r7, #4]
 800f8ba:	4613      	mov	r3, r2
 800f8bc:	00db      	lsls	r3, r3, #3
 800f8be:	4413      	add	r3, r2
 800f8c0:	009b      	lsls	r3, r3, #2
 800f8c2:	440b      	add	r3, r1
 800f8c4:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800f8c8:	681a      	ldr	r2, [r3, #0]
 800f8ca:	78fb      	ldrb	r3, [r7, #3]
 800f8cc:	4619      	mov	r1, r3
 800f8ce:	f7fb f93f 	bl	800ab50 <USBD_LL_DataOutStage>
}
 800f8d2:	bf00      	nop
 800f8d4:	3708      	adds	r7, #8
 800f8d6:	46bd      	mov	sp, r7
 800f8d8:	bd80      	pop	{r7, pc}

0800f8da <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f8da:	b580      	push	{r7, lr}
 800f8dc:	b082      	sub	sp, #8
 800f8de:	af00      	add	r7, sp, #0
 800f8e0:	6078      	str	r0, [r7, #4]
 800f8e2:	460b      	mov	r3, r1
 800f8e4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800f8e6:	687b      	ldr	r3, [r7, #4]
 800f8e8:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 800f8ec:	78fa      	ldrb	r2, [r7, #3]
 800f8ee:	6879      	ldr	r1, [r7, #4]
 800f8f0:	4613      	mov	r3, r2
 800f8f2:	00db      	lsls	r3, r3, #3
 800f8f4:	4413      	add	r3, r2
 800f8f6:	009b      	lsls	r3, r3, #2
 800f8f8:	440b      	add	r3, r1
 800f8fa:	3320      	adds	r3, #32
 800f8fc:	681a      	ldr	r2, [r3, #0]
 800f8fe:	78fb      	ldrb	r3, [r7, #3]
 800f900:	4619      	mov	r1, r3
 800f902:	f7fb f9d8 	bl	800acb6 <USBD_LL_DataInStage>
}
 800f906:	bf00      	nop
 800f908:	3708      	adds	r7, #8
 800f90a:	46bd      	mov	sp, r7
 800f90c:	bd80      	pop	{r7, pc}

0800f90e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f90e:	b580      	push	{r7, lr}
 800f910:	b082      	sub	sp, #8
 800f912:	af00      	add	r7, sp, #0
 800f914:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800f916:	687b      	ldr	r3, [r7, #4]
 800f918:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800f91c:	4618      	mov	r0, r3
 800f91e:	f7fb fb12 	bl	800af46 <USBD_LL_SOF>
}
 800f922:	bf00      	nop
 800f924:	3708      	adds	r7, #8
 800f926:	46bd      	mov	sp, r7
 800f928:	bd80      	pop	{r7, pc}

0800f92a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f92a:	b580      	push	{r7, lr}
 800f92c:	b084      	sub	sp, #16
 800f92e:	af00      	add	r7, sp, #0
 800f930:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800f932:	2301      	movs	r3, #1
 800f934:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800f936:	687b      	ldr	r3, [r7, #4]
 800f938:	79db      	ldrb	r3, [r3, #7]
 800f93a:	2b02      	cmp	r3, #2
 800f93c:	d001      	beq.n	800f942 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800f93e:	f7f1 fc61 	bl	8001204 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800f942:	687b      	ldr	r3, [r7, #4]
 800f944:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800f948:	7bfa      	ldrb	r2, [r7, #15]
 800f94a:	4611      	mov	r1, r2
 800f94c:	4618      	mov	r0, r3
 800f94e:	f7fb fab6 	bl	800aebe <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800f952:	687b      	ldr	r3, [r7, #4]
 800f954:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800f958:	4618      	mov	r0, r3
 800f95a:	f7fb fa5e 	bl	800ae1a <USBD_LL_Reset>
}
 800f95e:	bf00      	nop
 800f960:	3710      	adds	r7, #16
 800f962:	46bd      	mov	sp, r7
 800f964:	bd80      	pop	{r7, pc}
	...

0800f968 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f968:	b580      	push	{r7, lr}
 800f96a:	b082      	sub	sp, #8
 800f96c:	af00      	add	r7, sp, #0
 800f96e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800f970:	687b      	ldr	r3, [r7, #4]
 800f972:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800f976:	4618      	mov	r0, r3
 800f978:	f7fb fab1 	bl	800aede <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800f97c:	687b      	ldr	r3, [r7, #4]
 800f97e:	681b      	ldr	r3, [r3, #0]
 800f980:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800f984:	681b      	ldr	r3, [r3, #0]
 800f986:	687a      	ldr	r2, [r7, #4]
 800f988:	6812      	ldr	r2, [r2, #0]
 800f98a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800f98e:	f043 0301 	orr.w	r3, r3, #1
 800f992:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800f994:	687b      	ldr	r3, [r7, #4]
 800f996:	7adb      	ldrb	r3, [r3, #11]
 800f998:	2b00      	cmp	r3, #0
 800f99a:	d005      	beq.n	800f9a8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800f99c:	4b04      	ldr	r3, [pc, #16]	; (800f9b0 <HAL_PCD_SuspendCallback+0x48>)
 800f99e:	691b      	ldr	r3, [r3, #16]
 800f9a0:	4a03      	ldr	r2, [pc, #12]	; (800f9b0 <HAL_PCD_SuspendCallback+0x48>)
 800f9a2:	f043 0306 	orr.w	r3, r3, #6
 800f9a6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800f9a8:	bf00      	nop
 800f9aa:	3708      	adds	r7, #8
 800f9ac:	46bd      	mov	sp, r7
 800f9ae:	bd80      	pop	{r7, pc}
 800f9b0:	e000ed00 	.word	0xe000ed00

0800f9b4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f9b4:	b580      	push	{r7, lr}
 800f9b6:	b082      	sub	sp, #8
 800f9b8:	af00      	add	r7, sp, #0
 800f9ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800f9bc:	687b      	ldr	r3, [r7, #4]
 800f9be:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800f9c2:	4618      	mov	r0, r3
 800f9c4:	f7fb faa7 	bl	800af16 <USBD_LL_Resume>
}
 800f9c8:	bf00      	nop
 800f9ca:	3708      	adds	r7, #8
 800f9cc:	46bd      	mov	sp, r7
 800f9ce:	bd80      	pop	{r7, pc}

0800f9d0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f9d0:	b580      	push	{r7, lr}
 800f9d2:	b082      	sub	sp, #8
 800f9d4:	af00      	add	r7, sp, #0
 800f9d6:	6078      	str	r0, [r7, #4]
 800f9d8:	460b      	mov	r3, r1
 800f9da:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800f9dc:	687b      	ldr	r3, [r7, #4]
 800f9de:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800f9e2:	78fa      	ldrb	r2, [r7, #3]
 800f9e4:	4611      	mov	r1, r2
 800f9e6:	4618      	mov	r0, r3
 800f9e8:	f7fb faff 	bl	800afea <USBD_LL_IsoOUTIncomplete>
}
 800f9ec:	bf00      	nop
 800f9ee:	3708      	adds	r7, #8
 800f9f0:	46bd      	mov	sp, r7
 800f9f2:	bd80      	pop	{r7, pc}

0800f9f4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f9f4:	b580      	push	{r7, lr}
 800f9f6:	b082      	sub	sp, #8
 800f9f8:	af00      	add	r7, sp, #0
 800f9fa:	6078      	str	r0, [r7, #4]
 800f9fc:	460b      	mov	r3, r1
 800f9fe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800fa00:	687b      	ldr	r3, [r7, #4]
 800fa02:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800fa06:	78fa      	ldrb	r2, [r7, #3]
 800fa08:	4611      	mov	r1, r2
 800fa0a:	4618      	mov	r0, r3
 800fa0c:	f7fb fabb 	bl	800af86 <USBD_LL_IsoINIncomplete>
}
 800fa10:	bf00      	nop
 800fa12:	3708      	adds	r7, #8
 800fa14:	46bd      	mov	sp, r7
 800fa16:	bd80      	pop	{r7, pc}

0800fa18 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fa18:	b580      	push	{r7, lr}
 800fa1a:	b082      	sub	sp, #8
 800fa1c:	af00      	add	r7, sp, #0
 800fa1e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800fa20:	687b      	ldr	r3, [r7, #4]
 800fa22:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800fa26:	4618      	mov	r0, r3
 800fa28:	f7fb fb11 	bl	800b04e <USBD_LL_DevConnected>
}
 800fa2c:	bf00      	nop
 800fa2e:	3708      	adds	r7, #8
 800fa30:	46bd      	mov	sp, r7
 800fa32:	bd80      	pop	{r7, pc}

0800fa34 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fa34:	b580      	push	{r7, lr}
 800fa36:	b082      	sub	sp, #8
 800fa38:	af00      	add	r7, sp, #0
 800fa3a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800fa3c:	687b      	ldr	r3, [r7, #4]
 800fa3e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800fa42:	4618      	mov	r0, r3
 800fa44:	f7fb fb0e 	bl	800b064 <USBD_LL_DevDisconnected>
}
 800fa48:	bf00      	nop
 800fa4a:	3708      	adds	r7, #8
 800fa4c:	46bd      	mov	sp, r7
 800fa4e:	bd80      	pop	{r7, pc}

0800fa50 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800fa50:	b580      	push	{r7, lr}
 800fa52:	b082      	sub	sp, #8
 800fa54:	af00      	add	r7, sp, #0
 800fa56:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800fa58:	687b      	ldr	r3, [r7, #4]
 800fa5a:	781b      	ldrb	r3, [r3, #0]
 800fa5c:	2b00      	cmp	r3, #0
 800fa5e:	d13c      	bne.n	800fada <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800fa60:	4a20      	ldr	r2, [pc, #128]	; (800fae4 <USBD_LL_Init+0x94>)
 800fa62:	687b      	ldr	r3, [r7, #4]
 800fa64:	f8c2 34e0 	str.w	r3, [r2, #1248]	; 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800fa68:	687b      	ldr	r3, [r7, #4]
 800fa6a:	4a1e      	ldr	r2, [pc, #120]	; (800fae4 <USBD_LL_Init+0x94>)
 800fa6c:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800fa70:	4b1c      	ldr	r3, [pc, #112]	; (800fae4 <USBD_LL_Init+0x94>)
 800fa72:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800fa76:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800fa78:	4b1a      	ldr	r3, [pc, #104]	; (800fae4 <USBD_LL_Init+0x94>)
 800fa7a:	2204      	movs	r2, #4
 800fa7c:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800fa7e:	4b19      	ldr	r3, [pc, #100]	; (800fae4 <USBD_LL_Init+0x94>)
 800fa80:	2202      	movs	r2, #2
 800fa82:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800fa84:	4b17      	ldr	r3, [pc, #92]	; (800fae4 <USBD_LL_Init+0x94>)
 800fa86:	2200      	movs	r2, #0
 800fa88:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800fa8a:	4b16      	ldr	r3, [pc, #88]	; (800fae4 <USBD_LL_Init+0x94>)
 800fa8c:	2202      	movs	r2, #2
 800fa8e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800fa90:	4b14      	ldr	r3, [pc, #80]	; (800fae4 <USBD_LL_Init+0x94>)
 800fa92:	2200      	movs	r2, #0
 800fa94:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800fa96:	4b13      	ldr	r3, [pc, #76]	; (800fae4 <USBD_LL_Init+0x94>)
 800fa98:	2200      	movs	r2, #0
 800fa9a:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800fa9c:	4b11      	ldr	r3, [pc, #68]	; (800fae4 <USBD_LL_Init+0x94>)
 800fa9e:	2200      	movs	r2, #0
 800faa0:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800faa2:	4b10      	ldr	r3, [pc, #64]	; (800fae4 <USBD_LL_Init+0x94>)
 800faa4:	2200      	movs	r2, #0
 800faa6:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800faa8:	4b0e      	ldr	r3, [pc, #56]	; (800fae4 <USBD_LL_Init+0x94>)
 800faaa:	2200      	movs	r2, #0
 800faac:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800faae:	480d      	ldr	r0, [pc, #52]	; (800fae4 <USBD_LL_Init+0x94>)
 800fab0:	f7f4 fbcf 	bl	8004252 <HAL_PCD_Init>
 800fab4:	4603      	mov	r3, r0
 800fab6:	2b00      	cmp	r3, #0
 800fab8:	d001      	beq.n	800fabe <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800faba:	f7f1 fba3 	bl	8001204 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800fabe:	2180      	movs	r1, #128	; 0x80
 800fac0:	4808      	ldr	r0, [pc, #32]	; (800fae4 <USBD_LL_Init+0x94>)
 800fac2:	f7f5 fdfa 	bl	80056ba <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800fac6:	2240      	movs	r2, #64	; 0x40
 800fac8:	2100      	movs	r1, #0
 800faca:	4806      	ldr	r0, [pc, #24]	; (800fae4 <USBD_LL_Init+0x94>)
 800facc:	f7f5 fdae 	bl	800562c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800fad0:	2280      	movs	r2, #128	; 0x80
 800fad2:	2101      	movs	r1, #1
 800fad4:	4803      	ldr	r0, [pc, #12]	; (800fae4 <USBD_LL_Init+0x94>)
 800fad6:	f7f5 fda9 	bl	800562c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800fada:	2300      	movs	r3, #0
}
 800fadc:	4618      	mov	r0, r3
 800fade:	3708      	adds	r7, #8
 800fae0:	46bd      	mov	sp, r7
 800fae2:	bd80      	pop	{r7, pc}
 800fae4:	20002224 	.word	0x20002224

0800fae8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800fae8:	b580      	push	{r7, lr}
 800faea:	b084      	sub	sp, #16
 800faec:	af00      	add	r7, sp, #0
 800faee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800faf0:	2300      	movs	r3, #0
 800faf2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800faf4:	2300      	movs	r3, #0
 800faf6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800faf8:	687b      	ldr	r3, [r7, #4]
 800fafa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800fafe:	4618      	mov	r0, r3
 800fb00:	f7f4 fcb6 	bl	8004470 <HAL_PCD_Start>
 800fb04:	4603      	mov	r3, r0
 800fb06:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fb08:	7bfb      	ldrb	r3, [r7, #15]
 800fb0a:	4618      	mov	r0, r3
 800fb0c:	f000 f942 	bl	800fd94 <USBD_Get_USB_Status>
 800fb10:	4603      	mov	r3, r0
 800fb12:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fb14:	7bbb      	ldrb	r3, [r7, #14]
}
 800fb16:	4618      	mov	r0, r3
 800fb18:	3710      	adds	r7, #16
 800fb1a:	46bd      	mov	sp, r7
 800fb1c:	bd80      	pop	{r7, pc}

0800fb1e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800fb1e:	b580      	push	{r7, lr}
 800fb20:	b084      	sub	sp, #16
 800fb22:	af00      	add	r7, sp, #0
 800fb24:	6078      	str	r0, [r7, #4]
 800fb26:	4608      	mov	r0, r1
 800fb28:	4611      	mov	r1, r2
 800fb2a:	461a      	mov	r2, r3
 800fb2c:	4603      	mov	r3, r0
 800fb2e:	70fb      	strb	r3, [r7, #3]
 800fb30:	460b      	mov	r3, r1
 800fb32:	70bb      	strb	r3, [r7, #2]
 800fb34:	4613      	mov	r3, r2
 800fb36:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fb38:	2300      	movs	r3, #0
 800fb3a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fb3c:	2300      	movs	r3, #0
 800fb3e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800fb40:	687b      	ldr	r3, [r7, #4]
 800fb42:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800fb46:	78bb      	ldrb	r3, [r7, #2]
 800fb48:	883a      	ldrh	r2, [r7, #0]
 800fb4a:	78f9      	ldrb	r1, [r7, #3]
 800fb4c:	f7f5 f98a 	bl	8004e64 <HAL_PCD_EP_Open>
 800fb50:	4603      	mov	r3, r0
 800fb52:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fb54:	7bfb      	ldrb	r3, [r7, #15]
 800fb56:	4618      	mov	r0, r3
 800fb58:	f000 f91c 	bl	800fd94 <USBD_Get_USB_Status>
 800fb5c:	4603      	mov	r3, r0
 800fb5e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fb60:	7bbb      	ldrb	r3, [r7, #14]
}
 800fb62:	4618      	mov	r0, r3
 800fb64:	3710      	adds	r7, #16
 800fb66:	46bd      	mov	sp, r7
 800fb68:	bd80      	pop	{r7, pc}

0800fb6a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fb6a:	b580      	push	{r7, lr}
 800fb6c:	b084      	sub	sp, #16
 800fb6e:	af00      	add	r7, sp, #0
 800fb70:	6078      	str	r0, [r7, #4]
 800fb72:	460b      	mov	r3, r1
 800fb74:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fb76:	2300      	movs	r3, #0
 800fb78:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fb7a:	2300      	movs	r3, #0
 800fb7c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800fb7e:	687b      	ldr	r3, [r7, #4]
 800fb80:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800fb84:	78fa      	ldrb	r2, [r7, #3]
 800fb86:	4611      	mov	r1, r2
 800fb88:	4618      	mov	r0, r3
 800fb8a:	f7f5 f9d3 	bl	8004f34 <HAL_PCD_EP_Close>
 800fb8e:	4603      	mov	r3, r0
 800fb90:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fb92:	7bfb      	ldrb	r3, [r7, #15]
 800fb94:	4618      	mov	r0, r3
 800fb96:	f000 f8fd 	bl	800fd94 <USBD_Get_USB_Status>
 800fb9a:	4603      	mov	r3, r0
 800fb9c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fb9e:	7bbb      	ldrb	r3, [r7, #14]
}
 800fba0:	4618      	mov	r0, r3
 800fba2:	3710      	adds	r7, #16
 800fba4:	46bd      	mov	sp, r7
 800fba6:	bd80      	pop	{r7, pc}

0800fba8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fba8:	b580      	push	{r7, lr}
 800fbaa:	b084      	sub	sp, #16
 800fbac:	af00      	add	r7, sp, #0
 800fbae:	6078      	str	r0, [r7, #4]
 800fbb0:	460b      	mov	r3, r1
 800fbb2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fbb4:	2300      	movs	r3, #0
 800fbb6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fbb8:	2300      	movs	r3, #0
 800fbba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800fbbc:	687b      	ldr	r3, [r7, #4]
 800fbbe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800fbc2:	78fa      	ldrb	r2, [r7, #3]
 800fbc4:	4611      	mov	r1, r2
 800fbc6:	4618      	mov	r0, r3
 800fbc8:	f7f5 fa8b 	bl	80050e2 <HAL_PCD_EP_SetStall>
 800fbcc:	4603      	mov	r3, r0
 800fbce:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fbd0:	7bfb      	ldrb	r3, [r7, #15]
 800fbd2:	4618      	mov	r0, r3
 800fbd4:	f000 f8de 	bl	800fd94 <USBD_Get_USB_Status>
 800fbd8:	4603      	mov	r3, r0
 800fbda:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fbdc:	7bbb      	ldrb	r3, [r7, #14]
}
 800fbde:	4618      	mov	r0, r3
 800fbe0:	3710      	adds	r7, #16
 800fbe2:	46bd      	mov	sp, r7
 800fbe4:	bd80      	pop	{r7, pc}

0800fbe6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fbe6:	b580      	push	{r7, lr}
 800fbe8:	b084      	sub	sp, #16
 800fbea:	af00      	add	r7, sp, #0
 800fbec:	6078      	str	r0, [r7, #4]
 800fbee:	460b      	mov	r3, r1
 800fbf0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fbf2:	2300      	movs	r3, #0
 800fbf4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fbf6:	2300      	movs	r3, #0
 800fbf8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800fbfa:	687b      	ldr	r3, [r7, #4]
 800fbfc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800fc00:	78fa      	ldrb	r2, [r7, #3]
 800fc02:	4611      	mov	r1, r2
 800fc04:	4618      	mov	r0, r3
 800fc06:	f7f5 facf 	bl	80051a8 <HAL_PCD_EP_ClrStall>
 800fc0a:	4603      	mov	r3, r0
 800fc0c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fc0e:	7bfb      	ldrb	r3, [r7, #15]
 800fc10:	4618      	mov	r0, r3
 800fc12:	f000 f8bf 	bl	800fd94 <USBD_Get_USB_Status>
 800fc16:	4603      	mov	r3, r0
 800fc18:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fc1a:	7bbb      	ldrb	r3, [r7, #14]
}
 800fc1c:	4618      	mov	r0, r3
 800fc1e:	3710      	adds	r7, #16
 800fc20:	46bd      	mov	sp, r7
 800fc22:	bd80      	pop	{r7, pc}

0800fc24 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fc24:	b480      	push	{r7}
 800fc26:	b085      	sub	sp, #20
 800fc28:	af00      	add	r7, sp, #0
 800fc2a:	6078      	str	r0, [r7, #4]
 800fc2c:	460b      	mov	r3, r1
 800fc2e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800fc30:	687b      	ldr	r3, [r7, #4]
 800fc32:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800fc36:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800fc38:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800fc3c:	2b00      	cmp	r3, #0
 800fc3e:	da0b      	bge.n	800fc58 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800fc40:	78fb      	ldrb	r3, [r7, #3]
 800fc42:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800fc46:	68f9      	ldr	r1, [r7, #12]
 800fc48:	4613      	mov	r3, r2
 800fc4a:	00db      	lsls	r3, r3, #3
 800fc4c:	4413      	add	r3, r2
 800fc4e:	009b      	lsls	r3, r3, #2
 800fc50:	440b      	add	r3, r1
 800fc52:	3316      	adds	r3, #22
 800fc54:	781b      	ldrb	r3, [r3, #0]
 800fc56:	e00b      	b.n	800fc70 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800fc58:	78fb      	ldrb	r3, [r7, #3]
 800fc5a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800fc5e:	68f9      	ldr	r1, [r7, #12]
 800fc60:	4613      	mov	r3, r2
 800fc62:	00db      	lsls	r3, r3, #3
 800fc64:	4413      	add	r3, r2
 800fc66:	009b      	lsls	r3, r3, #2
 800fc68:	440b      	add	r3, r1
 800fc6a:	f203 2356 	addw	r3, r3, #598	; 0x256
 800fc6e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800fc70:	4618      	mov	r0, r3
 800fc72:	3714      	adds	r7, #20
 800fc74:	46bd      	mov	sp, r7
 800fc76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc7a:	4770      	bx	lr

0800fc7c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800fc7c:	b580      	push	{r7, lr}
 800fc7e:	b084      	sub	sp, #16
 800fc80:	af00      	add	r7, sp, #0
 800fc82:	6078      	str	r0, [r7, #4]
 800fc84:	460b      	mov	r3, r1
 800fc86:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fc88:	2300      	movs	r3, #0
 800fc8a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fc8c:	2300      	movs	r3, #0
 800fc8e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800fc90:	687b      	ldr	r3, [r7, #4]
 800fc92:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800fc96:	78fa      	ldrb	r2, [r7, #3]
 800fc98:	4611      	mov	r1, r2
 800fc9a:	4618      	mov	r0, r3
 800fc9c:	f7f5 f8be 	bl	8004e1c <HAL_PCD_SetAddress>
 800fca0:	4603      	mov	r3, r0
 800fca2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fca4:	7bfb      	ldrb	r3, [r7, #15]
 800fca6:	4618      	mov	r0, r3
 800fca8:	f000 f874 	bl	800fd94 <USBD_Get_USB_Status>
 800fcac:	4603      	mov	r3, r0
 800fcae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fcb0:	7bbb      	ldrb	r3, [r7, #14]
}
 800fcb2:	4618      	mov	r0, r3
 800fcb4:	3710      	adds	r7, #16
 800fcb6:	46bd      	mov	sp, r7
 800fcb8:	bd80      	pop	{r7, pc}

0800fcba <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800fcba:	b580      	push	{r7, lr}
 800fcbc:	b086      	sub	sp, #24
 800fcbe:	af00      	add	r7, sp, #0
 800fcc0:	60f8      	str	r0, [r7, #12]
 800fcc2:	607a      	str	r2, [r7, #4]
 800fcc4:	603b      	str	r3, [r7, #0]
 800fcc6:	460b      	mov	r3, r1
 800fcc8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fcca:	2300      	movs	r3, #0
 800fccc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fcce:	2300      	movs	r3, #0
 800fcd0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800fcd2:	68fb      	ldr	r3, [r7, #12]
 800fcd4:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800fcd8:	7af9      	ldrb	r1, [r7, #11]
 800fcda:	683b      	ldr	r3, [r7, #0]
 800fcdc:	687a      	ldr	r2, [r7, #4]
 800fcde:	f7f5 f9c6 	bl	800506e <HAL_PCD_EP_Transmit>
 800fce2:	4603      	mov	r3, r0
 800fce4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fce6:	7dfb      	ldrb	r3, [r7, #23]
 800fce8:	4618      	mov	r0, r3
 800fcea:	f000 f853 	bl	800fd94 <USBD_Get_USB_Status>
 800fcee:	4603      	mov	r3, r0
 800fcf0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800fcf2:	7dbb      	ldrb	r3, [r7, #22]
}
 800fcf4:	4618      	mov	r0, r3
 800fcf6:	3718      	adds	r7, #24
 800fcf8:	46bd      	mov	sp, r7
 800fcfa:	bd80      	pop	{r7, pc}

0800fcfc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800fcfc:	b580      	push	{r7, lr}
 800fcfe:	b086      	sub	sp, #24
 800fd00:	af00      	add	r7, sp, #0
 800fd02:	60f8      	str	r0, [r7, #12]
 800fd04:	607a      	str	r2, [r7, #4]
 800fd06:	603b      	str	r3, [r7, #0]
 800fd08:	460b      	mov	r3, r1
 800fd0a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fd0c:	2300      	movs	r3, #0
 800fd0e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fd10:	2300      	movs	r3, #0
 800fd12:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800fd14:	68fb      	ldr	r3, [r7, #12]
 800fd16:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800fd1a:	7af9      	ldrb	r1, [r7, #11]
 800fd1c:	683b      	ldr	r3, [r7, #0]
 800fd1e:	687a      	ldr	r2, [r7, #4]
 800fd20:	f7f5 f952 	bl	8004fc8 <HAL_PCD_EP_Receive>
 800fd24:	4603      	mov	r3, r0
 800fd26:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fd28:	7dfb      	ldrb	r3, [r7, #23]
 800fd2a:	4618      	mov	r0, r3
 800fd2c:	f000 f832 	bl	800fd94 <USBD_Get_USB_Status>
 800fd30:	4603      	mov	r3, r0
 800fd32:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800fd34:	7dbb      	ldrb	r3, [r7, #22]
}
 800fd36:	4618      	mov	r0, r3
 800fd38:	3718      	adds	r7, #24
 800fd3a:	46bd      	mov	sp, r7
 800fd3c:	bd80      	pop	{r7, pc}

0800fd3e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fd3e:	b580      	push	{r7, lr}
 800fd40:	b082      	sub	sp, #8
 800fd42:	af00      	add	r7, sp, #0
 800fd44:	6078      	str	r0, [r7, #4]
 800fd46:	460b      	mov	r3, r1
 800fd48:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800fd4a:	687b      	ldr	r3, [r7, #4]
 800fd4c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800fd50:	78fa      	ldrb	r2, [r7, #3]
 800fd52:	4611      	mov	r1, r2
 800fd54:	4618      	mov	r0, r3
 800fd56:	f7f5 f972 	bl	800503e <HAL_PCD_EP_GetRxCount>
 800fd5a:	4603      	mov	r3, r0
}
 800fd5c:	4618      	mov	r0, r3
 800fd5e:	3708      	adds	r7, #8
 800fd60:	46bd      	mov	sp, r7
 800fd62:	bd80      	pop	{r7, pc}

0800fd64 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800fd64:	b480      	push	{r7}
 800fd66:	b083      	sub	sp, #12
 800fd68:	af00      	add	r7, sp, #0
 800fd6a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800fd6c:	4b03      	ldr	r3, [pc, #12]	; (800fd7c <USBD_static_malloc+0x18>)
}
 800fd6e:	4618      	mov	r0, r3
 800fd70:	370c      	adds	r7, #12
 800fd72:	46bd      	mov	sp, r7
 800fd74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd78:	4770      	bx	lr
 800fd7a:	bf00      	nop
 800fd7c:	20002708 	.word	0x20002708

0800fd80 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800fd80:	b480      	push	{r7}
 800fd82:	b083      	sub	sp, #12
 800fd84:	af00      	add	r7, sp, #0
 800fd86:	6078      	str	r0, [r7, #4]

}
 800fd88:	bf00      	nop
 800fd8a:	370c      	adds	r7, #12
 800fd8c:	46bd      	mov	sp, r7
 800fd8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd92:	4770      	bx	lr

0800fd94 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800fd94:	b480      	push	{r7}
 800fd96:	b085      	sub	sp, #20
 800fd98:	af00      	add	r7, sp, #0
 800fd9a:	4603      	mov	r3, r0
 800fd9c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fd9e:	2300      	movs	r3, #0
 800fda0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800fda2:	79fb      	ldrb	r3, [r7, #7]
 800fda4:	2b03      	cmp	r3, #3
 800fda6:	d817      	bhi.n	800fdd8 <USBD_Get_USB_Status+0x44>
 800fda8:	a201      	add	r2, pc, #4	; (adr r2, 800fdb0 <USBD_Get_USB_Status+0x1c>)
 800fdaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fdae:	bf00      	nop
 800fdb0:	0800fdc1 	.word	0x0800fdc1
 800fdb4:	0800fdc7 	.word	0x0800fdc7
 800fdb8:	0800fdcd 	.word	0x0800fdcd
 800fdbc:	0800fdd3 	.word	0x0800fdd3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800fdc0:	2300      	movs	r3, #0
 800fdc2:	73fb      	strb	r3, [r7, #15]
    break;
 800fdc4:	e00b      	b.n	800fdde <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800fdc6:	2303      	movs	r3, #3
 800fdc8:	73fb      	strb	r3, [r7, #15]
    break;
 800fdca:	e008      	b.n	800fdde <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800fdcc:	2301      	movs	r3, #1
 800fdce:	73fb      	strb	r3, [r7, #15]
    break;
 800fdd0:	e005      	b.n	800fdde <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800fdd2:	2303      	movs	r3, #3
 800fdd4:	73fb      	strb	r3, [r7, #15]
    break;
 800fdd6:	e002      	b.n	800fdde <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800fdd8:	2303      	movs	r3, #3
 800fdda:	73fb      	strb	r3, [r7, #15]
    break;
 800fddc:	bf00      	nop
  }
  return usb_status;
 800fdde:	7bfb      	ldrb	r3, [r7, #15]
}
 800fde0:	4618      	mov	r0, r3
 800fde2:	3714      	adds	r7, #20
 800fde4:	46bd      	mov	sp, r7
 800fde6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdea:	4770      	bx	lr

0800fdec <sulp>:
 800fdec:	b570      	push	{r4, r5, r6, lr}
 800fdee:	4604      	mov	r4, r0
 800fdf0:	460d      	mov	r5, r1
 800fdf2:	ec45 4b10 	vmov	d0, r4, r5
 800fdf6:	4616      	mov	r6, r2
 800fdf8:	f002 f8d2 	bl	8011fa0 <__ulp>
 800fdfc:	ec51 0b10 	vmov	r0, r1, d0
 800fe00:	b17e      	cbz	r6, 800fe22 <sulp+0x36>
 800fe02:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800fe06:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800fe0a:	2b00      	cmp	r3, #0
 800fe0c:	dd09      	ble.n	800fe22 <sulp+0x36>
 800fe0e:	051b      	lsls	r3, r3, #20
 800fe10:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800fe14:	2400      	movs	r4, #0
 800fe16:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800fe1a:	4622      	mov	r2, r4
 800fe1c:	462b      	mov	r3, r5
 800fe1e:	f7f0 fbfb 	bl	8000618 <__aeabi_dmul>
 800fe22:	bd70      	pop	{r4, r5, r6, pc}
 800fe24:	0000      	movs	r0, r0
	...

0800fe28 <_strtod_l>:
 800fe28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe2c:	ed2d 8b02 	vpush	{d8}
 800fe30:	b09b      	sub	sp, #108	; 0x6c
 800fe32:	4604      	mov	r4, r0
 800fe34:	9213      	str	r2, [sp, #76]	; 0x4c
 800fe36:	2200      	movs	r2, #0
 800fe38:	9216      	str	r2, [sp, #88]	; 0x58
 800fe3a:	460d      	mov	r5, r1
 800fe3c:	f04f 0800 	mov.w	r8, #0
 800fe40:	f04f 0900 	mov.w	r9, #0
 800fe44:	460a      	mov	r2, r1
 800fe46:	9215      	str	r2, [sp, #84]	; 0x54
 800fe48:	7811      	ldrb	r1, [r2, #0]
 800fe4a:	292b      	cmp	r1, #43	; 0x2b
 800fe4c:	d04c      	beq.n	800fee8 <_strtod_l+0xc0>
 800fe4e:	d83a      	bhi.n	800fec6 <_strtod_l+0x9e>
 800fe50:	290d      	cmp	r1, #13
 800fe52:	d834      	bhi.n	800febe <_strtod_l+0x96>
 800fe54:	2908      	cmp	r1, #8
 800fe56:	d834      	bhi.n	800fec2 <_strtod_l+0x9a>
 800fe58:	2900      	cmp	r1, #0
 800fe5a:	d03d      	beq.n	800fed8 <_strtod_l+0xb0>
 800fe5c:	2200      	movs	r2, #0
 800fe5e:	920a      	str	r2, [sp, #40]	; 0x28
 800fe60:	9e15      	ldr	r6, [sp, #84]	; 0x54
 800fe62:	7832      	ldrb	r2, [r6, #0]
 800fe64:	2a30      	cmp	r2, #48	; 0x30
 800fe66:	f040 80b4 	bne.w	800ffd2 <_strtod_l+0x1aa>
 800fe6a:	7872      	ldrb	r2, [r6, #1]
 800fe6c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800fe70:	2a58      	cmp	r2, #88	; 0x58
 800fe72:	d170      	bne.n	800ff56 <_strtod_l+0x12e>
 800fe74:	9302      	str	r3, [sp, #8]
 800fe76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fe78:	9301      	str	r3, [sp, #4]
 800fe7a:	ab16      	add	r3, sp, #88	; 0x58
 800fe7c:	9300      	str	r3, [sp, #0]
 800fe7e:	4a8e      	ldr	r2, [pc, #568]	; (80100b8 <_strtod_l+0x290>)
 800fe80:	ab17      	add	r3, sp, #92	; 0x5c
 800fe82:	a915      	add	r1, sp, #84	; 0x54
 800fe84:	4620      	mov	r0, r4
 800fe86:	f001 f971 	bl	801116c <__gethex>
 800fe8a:	f010 070f 	ands.w	r7, r0, #15
 800fe8e:	4605      	mov	r5, r0
 800fe90:	d005      	beq.n	800fe9e <_strtod_l+0x76>
 800fe92:	2f06      	cmp	r7, #6
 800fe94:	d12a      	bne.n	800feec <_strtod_l+0xc4>
 800fe96:	3601      	adds	r6, #1
 800fe98:	2300      	movs	r3, #0
 800fe9a:	9615      	str	r6, [sp, #84]	; 0x54
 800fe9c:	930a      	str	r3, [sp, #40]	; 0x28
 800fe9e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800fea0:	2b00      	cmp	r3, #0
 800fea2:	f040 857f 	bne.w	80109a4 <_strtod_l+0xb7c>
 800fea6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fea8:	b1db      	cbz	r3, 800fee2 <_strtod_l+0xba>
 800feaa:	4642      	mov	r2, r8
 800feac:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800feb0:	ec43 2b10 	vmov	d0, r2, r3
 800feb4:	b01b      	add	sp, #108	; 0x6c
 800feb6:	ecbd 8b02 	vpop	{d8}
 800feba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800febe:	2920      	cmp	r1, #32
 800fec0:	d1cc      	bne.n	800fe5c <_strtod_l+0x34>
 800fec2:	3201      	adds	r2, #1
 800fec4:	e7bf      	b.n	800fe46 <_strtod_l+0x1e>
 800fec6:	292d      	cmp	r1, #45	; 0x2d
 800fec8:	d1c8      	bne.n	800fe5c <_strtod_l+0x34>
 800feca:	2101      	movs	r1, #1
 800fecc:	910a      	str	r1, [sp, #40]	; 0x28
 800fece:	1c51      	adds	r1, r2, #1
 800fed0:	9115      	str	r1, [sp, #84]	; 0x54
 800fed2:	7852      	ldrb	r2, [r2, #1]
 800fed4:	2a00      	cmp	r2, #0
 800fed6:	d1c3      	bne.n	800fe60 <_strtod_l+0x38>
 800fed8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800feda:	9515      	str	r5, [sp, #84]	; 0x54
 800fedc:	2b00      	cmp	r3, #0
 800fede:	f040 855f 	bne.w	80109a0 <_strtod_l+0xb78>
 800fee2:	4642      	mov	r2, r8
 800fee4:	464b      	mov	r3, r9
 800fee6:	e7e3      	b.n	800feb0 <_strtod_l+0x88>
 800fee8:	2100      	movs	r1, #0
 800feea:	e7ef      	b.n	800fecc <_strtod_l+0xa4>
 800feec:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800feee:	b13a      	cbz	r2, 800ff00 <_strtod_l+0xd8>
 800fef0:	2135      	movs	r1, #53	; 0x35
 800fef2:	a818      	add	r0, sp, #96	; 0x60
 800fef4:	f002 f951 	bl	801219a <__copybits>
 800fef8:	9916      	ldr	r1, [sp, #88]	; 0x58
 800fefa:	4620      	mov	r0, r4
 800fefc:	f001 fd24 	bl	8011948 <_Bfree>
 800ff00:	3f01      	subs	r7, #1
 800ff02:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800ff04:	2f04      	cmp	r7, #4
 800ff06:	d806      	bhi.n	800ff16 <_strtod_l+0xee>
 800ff08:	e8df f007 	tbb	[pc, r7]
 800ff0c:	201d0314 	.word	0x201d0314
 800ff10:	14          	.byte	0x14
 800ff11:	00          	.byte	0x00
 800ff12:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 800ff16:	05e9      	lsls	r1, r5, #23
 800ff18:	bf48      	it	mi
 800ff1a:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800ff1e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800ff22:	0d1b      	lsrs	r3, r3, #20
 800ff24:	051b      	lsls	r3, r3, #20
 800ff26:	2b00      	cmp	r3, #0
 800ff28:	d1b9      	bne.n	800fe9e <_strtod_l+0x76>
 800ff2a:	f001 f819 	bl	8010f60 <__errno>
 800ff2e:	2322      	movs	r3, #34	; 0x22
 800ff30:	6003      	str	r3, [r0, #0]
 800ff32:	e7b4      	b.n	800fe9e <_strtod_l+0x76>
 800ff34:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 800ff38:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800ff3c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800ff40:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800ff44:	e7e7      	b.n	800ff16 <_strtod_l+0xee>
 800ff46:	f8df 9178 	ldr.w	r9, [pc, #376]	; 80100c0 <_strtod_l+0x298>
 800ff4a:	e7e4      	b.n	800ff16 <_strtod_l+0xee>
 800ff4c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800ff50:	f04f 38ff 	mov.w	r8, #4294967295
 800ff54:	e7df      	b.n	800ff16 <_strtod_l+0xee>
 800ff56:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ff58:	1c5a      	adds	r2, r3, #1
 800ff5a:	9215      	str	r2, [sp, #84]	; 0x54
 800ff5c:	785b      	ldrb	r3, [r3, #1]
 800ff5e:	2b30      	cmp	r3, #48	; 0x30
 800ff60:	d0f9      	beq.n	800ff56 <_strtod_l+0x12e>
 800ff62:	2b00      	cmp	r3, #0
 800ff64:	d09b      	beq.n	800fe9e <_strtod_l+0x76>
 800ff66:	2301      	movs	r3, #1
 800ff68:	f04f 0a00 	mov.w	sl, #0
 800ff6c:	9304      	str	r3, [sp, #16]
 800ff6e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ff70:	930b      	str	r3, [sp, #44]	; 0x2c
 800ff72:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800ff76:	46d3      	mov	fp, sl
 800ff78:	220a      	movs	r2, #10
 800ff7a:	9815      	ldr	r0, [sp, #84]	; 0x54
 800ff7c:	7806      	ldrb	r6, [r0, #0]
 800ff7e:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800ff82:	b2d9      	uxtb	r1, r3
 800ff84:	2909      	cmp	r1, #9
 800ff86:	d926      	bls.n	800ffd6 <_strtod_l+0x1ae>
 800ff88:	494c      	ldr	r1, [pc, #304]	; (80100bc <_strtod_l+0x294>)
 800ff8a:	2201      	movs	r2, #1
 800ff8c:	f000 ff64 	bl	8010e58 <strncmp>
 800ff90:	2800      	cmp	r0, #0
 800ff92:	d030      	beq.n	800fff6 <_strtod_l+0x1ce>
 800ff94:	2000      	movs	r0, #0
 800ff96:	4632      	mov	r2, r6
 800ff98:	9005      	str	r0, [sp, #20]
 800ff9a:	465e      	mov	r6, fp
 800ff9c:	4603      	mov	r3, r0
 800ff9e:	2a65      	cmp	r2, #101	; 0x65
 800ffa0:	d001      	beq.n	800ffa6 <_strtod_l+0x17e>
 800ffa2:	2a45      	cmp	r2, #69	; 0x45
 800ffa4:	d113      	bne.n	800ffce <_strtod_l+0x1a6>
 800ffa6:	b91e      	cbnz	r6, 800ffb0 <_strtod_l+0x188>
 800ffa8:	9a04      	ldr	r2, [sp, #16]
 800ffaa:	4302      	orrs	r2, r0
 800ffac:	d094      	beq.n	800fed8 <_strtod_l+0xb0>
 800ffae:	2600      	movs	r6, #0
 800ffb0:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800ffb2:	1c6a      	adds	r2, r5, #1
 800ffb4:	9215      	str	r2, [sp, #84]	; 0x54
 800ffb6:	786a      	ldrb	r2, [r5, #1]
 800ffb8:	2a2b      	cmp	r2, #43	; 0x2b
 800ffba:	d074      	beq.n	80100a6 <_strtod_l+0x27e>
 800ffbc:	2a2d      	cmp	r2, #45	; 0x2d
 800ffbe:	d078      	beq.n	80100b2 <_strtod_l+0x28a>
 800ffc0:	f04f 0c00 	mov.w	ip, #0
 800ffc4:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800ffc8:	2909      	cmp	r1, #9
 800ffca:	d97f      	bls.n	80100cc <_strtod_l+0x2a4>
 800ffcc:	9515      	str	r5, [sp, #84]	; 0x54
 800ffce:	2700      	movs	r7, #0
 800ffd0:	e09e      	b.n	8010110 <_strtod_l+0x2e8>
 800ffd2:	2300      	movs	r3, #0
 800ffd4:	e7c8      	b.n	800ff68 <_strtod_l+0x140>
 800ffd6:	f1bb 0f08 	cmp.w	fp, #8
 800ffda:	bfd8      	it	le
 800ffdc:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800ffde:	f100 0001 	add.w	r0, r0, #1
 800ffe2:	bfda      	itte	le
 800ffe4:	fb02 3301 	mlale	r3, r2, r1, r3
 800ffe8:	9309      	strle	r3, [sp, #36]	; 0x24
 800ffea:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800ffee:	f10b 0b01 	add.w	fp, fp, #1
 800fff2:	9015      	str	r0, [sp, #84]	; 0x54
 800fff4:	e7c1      	b.n	800ff7a <_strtod_l+0x152>
 800fff6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800fff8:	1c5a      	adds	r2, r3, #1
 800fffa:	9215      	str	r2, [sp, #84]	; 0x54
 800fffc:	785a      	ldrb	r2, [r3, #1]
 800fffe:	f1bb 0f00 	cmp.w	fp, #0
 8010002:	d037      	beq.n	8010074 <_strtod_l+0x24c>
 8010004:	9005      	str	r0, [sp, #20]
 8010006:	465e      	mov	r6, fp
 8010008:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 801000c:	2b09      	cmp	r3, #9
 801000e:	d912      	bls.n	8010036 <_strtod_l+0x20e>
 8010010:	2301      	movs	r3, #1
 8010012:	e7c4      	b.n	800ff9e <_strtod_l+0x176>
 8010014:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010016:	1c5a      	adds	r2, r3, #1
 8010018:	9215      	str	r2, [sp, #84]	; 0x54
 801001a:	785a      	ldrb	r2, [r3, #1]
 801001c:	3001      	adds	r0, #1
 801001e:	2a30      	cmp	r2, #48	; 0x30
 8010020:	d0f8      	beq.n	8010014 <_strtod_l+0x1ec>
 8010022:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8010026:	2b08      	cmp	r3, #8
 8010028:	f200 84c1 	bhi.w	80109ae <_strtod_l+0xb86>
 801002c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801002e:	9005      	str	r0, [sp, #20]
 8010030:	2000      	movs	r0, #0
 8010032:	930b      	str	r3, [sp, #44]	; 0x2c
 8010034:	4606      	mov	r6, r0
 8010036:	3a30      	subs	r2, #48	; 0x30
 8010038:	f100 0301 	add.w	r3, r0, #1
 801003c:	d014      	beq.n	8010068 <_strtod_l+0x240>
 801003e:	9905      	ldr	r1, [sp, #20]
 8010040:	4419      	add	r1, r3
 8010042:	9105      	str	r1, [sp, #20]
 8010044:	4633      	mov	r3, r6
 8010046:	eb00 0c06 	add.w	ip, r0, r6
 801004a:	210a      	movs	r1, #10
 801004c:	4563      	cmp	r3, ip
 801004e:	d113      	bne.n	8010078 <_strtod_l+0x250>
 8010050:	1833      	adds	r3, r6, r0
 8010052:	2b08      	cmp	r3, #8
 8010054:	f106 0601 	add.w	r6, r6, #1
 8010058:	4406      	add	r6, r0
 801005a:	dc1a      	bgt.n	8010092 <_strtod_l+0x26a>
 801005c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801005e:	230a      	movs	r3, #10
 8010060:	fb03 2301 	mla	r3, r3, r1, r2
 8010064:	9309      	str	r3, [sp, #36]	; 0x24
 8010066:	2300      	movs	r3, #0
 8010068:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801006a:	1c51      	adds	r1, r2, #1
 801006c:	9115      	str	r1, [sp, #84]	; 0x54
 801006e:	7852      	ldrb	r2, [r2, #1]
 8010070:	4618      	mov	r0, r3
 8010072:	e7c9      	b.n	8010008 <_strtod_l+0x1e0>
 8010074:	4658      	mov	r0, fp
 8010076:	e7d2      	b.n	801001e <_strtod_l+0x1f6>
 8010078:	2b08      	cmp	r3, #8
 801007a:	f103 0301 	add.w	r3, r3, #1
 801007e:	dc03      	bgt.n	8010088 <_strtod_l+0x260>
 8010080:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8010082:	434f      	muls	r7, r1
 8010084:	9709      	str	r7, [sp, #36]	; 0x24
 8010086:	e7e1      	b.n	801004c <_strtod_l+0x224>
 8010088:	2b10      	cmp	r3, #16
 801008a:	bfd8      	it	le
 801008c:	fb01 fa0a 	mulle.w	sl, r1, sl
 8010090:	e7dc      	b.n	801004c <_strtod_l+0x224>
 8010092:	2e10      	cmp	r6, #16
 8010094:	bfdc      	itt	le
 8010096:	230a      	movle	r3, #10
 8010098:	fb03 2a0a 	mlale	sl, r3, sl, r2
 801009c:	e7e3      	b.n	8010066 <_strtod_l+0x23e>
 801009e:	2300      	movs	r3, #0
 80100a0:	9305      	str	r3, [sp, #20]
 80100a2:	2301      	movs	r3, #1
 80100a4:	e780      	b.n	800ffa8 <_strtod_l+0x180>
 80100a6:	f04f 0c00 	mov.w	ip, #0
 80100aa:	1caa      	adds	r2, r5, #2
 80100ac:	9215      	str	r2, [sp, #84]	; 0x54
 80100ae:	78aa      	ldrb	r2, [r5, #2]
 80100b0:	e788      	b.n	800ffc4 <_strtod_l+0x19c>
 80100b2:	f04f 0c01 	mov.w	ip, #1
 80100b6:	e7f8      	b.n	80100aa <_strtod_l+0x282>
 80100b8:	0801364c 	.word	0x0801364c
 80100bc:	0801363c 	.word	0x0801363c
 80100c0:	7ff00000 	.word	0x7ff00000
 80100c4:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80100c6:	1c51      	adds	r1, r2, #1
 80100c8:	9115      	str	r1, [sp, #84]	; 0x54
 80100ca:	7852      	ldrb	r2, [r2, #1]
 80100cc:	2a30      	cmp	r2, #48	; 0x30
 80100ce:	d0f9      	beq.n	80100c4 <_strtod_l+0x29c>
 80100d0:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80100d4:	2908      	cmp	r1, #8
 80100d6:	f63f af7a 	bhi.w	800ffce <_strtod_l+0x1a6>
 80100da:	3a30      	subs	r2, #48	; 0x30
 80100dc:	9208      	str	r2, [sp, #32]
 80100de:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80100e0:	920c      	str	r2, [sp, #48]	; 0x30
 80100e2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80100e4:	1c57      	adds	r7, r2, #1
 80100e6:	9715      	str	r7, [sp, #84]	; 0x54
 80100e8:	7852      	ldrb	r2, [r2, #1]
 80100ea:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 80100ee:	f1be 0f09 	cmp.w	lr, #9
 80100f2:	d938      	bls.n	8010166 <_strtod_l+0x33e>
 80100f4:	990c      	ldr	r1, [sp, #48]	; 0x30
 80100f6:	1a7f      	subs	r7, r7, r1
 80100f8:	2f08      	cmp	r7, #8
 80100fa:	f644 671f 	movw	r7, #19999	; 0x4e1f
 80100fe:	dc03      	bgt.n	8010108 <_strtod_l+0x2e0>
 8010100:	9908      	ldr	r1, [sp, #32]
 8010102:	428f      	cmp	r7, r1
 8010104:	bfa8      	it	ge
 8010106:	460f      	movge	r7, r1
 8010108:	f1bc 0f00 	cmp.w	ip, #0
 801010c:	d000      	beq.n	8010110 <_strtod_l+0x2e8>
 801010e:	427f      	negs	r7, r7
 8010110:	2e00      	cmp	r6, #0
 8010112:	d14f      	bne.n	80101b4 <_strtod_l+0x38c>
 8010114:	9904      	ldr	r1, [sp, #16]
 8010116:	4301      	orrs	r1, r0
 8010118:	f47f aec1 	bne.w	800fe9e <_strtod_l+0x76>
 801011c:	2b00      	cmp	r3, #0
 801011e:	f47f aedb 	bne.w	800fed8 <_strtod_l+0xb0>
 8010122:	2a69      	cmp	r2, #105	; 0x69
 8010124:	d029      	beq.n	801017a <_strtod_l+0x352>
 8010126:	dc26      	bgt.n	8010176 <_strtod_l+0x34e>
 8010128:	2a49      	cmp	r2, #73	; 0x49
 801012a:	d026      	beq.n	801017a <_strtod_l+0x352>
 801012c:	2a4e      	cmp	r2, #78	; 0x4e
 801012e:	f47f aed3 	bne.w	800fed8 <_strtod_l+0xb0>
 8010132:	499b      	ldr	r1, [pc, #620]	; (80103a0 <_strtod_l+0x578>)
 8010134:	a815      	add	r0, sp, #84	; 0x54
 8010136:	f001 fa59 	bl	80115ec <__match>
 801013a:	2800      	cmp	r0, #0
 801013c:	f43f aecc 	beq.w	800fed8 <_strtod_l+0xb0>
 8010140:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010142:	781b      	ldrb	r3, [r3, #0]
 8010144:	2b28      	cmp	r3, #40	; 0x28
 8010146:	d12f      	bne.n	80101a8 <_strtod_l+0x380>
 8010148:	4996      	ldr	r1, [pc, #600]	; (80103a4 <_strtod_l+0x57c>)
 801014a:	aa18      	add	r2, sp, #96	; 0x60
 801014c:	a815      	add	r0, sp, #84	; 0x54
 801014e:	f001 fa61 	bl	8011614 <__hexnan>
 8010152:	2805      	cmp	r0, #5
 8010154:	d128      	bne.n	80101a8 <_strtod_l+0x380>
 8010156:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8010158:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 801015c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8010160:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8010164:	e69b      	b.n	800fe9e <_strtod_l+0x76>
 8010166:	9f08      	ldr	r7, [sp, #32]
 8010168:	210a      	movs	r1, #10
 801016a:	fb01 2107 	mla	r1, r1, r7, r2
 801016e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8010172:	9208      	str	r2, [sp, #32]
 8010174:	e7b5      	b.n	80100e2 <_strtod_l+0x2ba>
 8010176:	2a6e      	cmp	r2, #110	; 0x6e
 8010178:	e7d9      	b.n	801012e <_strtod_l+0x306>
 801017a:	498b      	ldr	r1, [pc, #556]	; (80103a8 <_strtod_l+0x580>)
 801017c:	a815      	add	r0, sp, #84	; 0x54
 801017e:	f001 fa35 	bl	80115ec <__match>
 8010182:	2800      	cmp	r0, #0
 8010184:	f43f aea8 	beq.w	800fed8 <_strtod_l+0xb0>
 8010188:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801018a:	4988      	ldr	r1, [pc, #544]	; (80103ac <_strtod_l+0x584>)
 801018c:	3b01      	subs	r3, #1
 801018e:	a815      	add	r0, sp, #84	; 0x54
 8010190:	9315      	str	r3, [sp, #84]	; 0x54
 8010192:	f001 fa2b 	bl	80115ec <__match>
 8010196:	b910      	cbnz	r0, 801019e <_strtod_l+0x376>
 8010198:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801019a:	3301      	adds	r3, #1
 801019c:	9315      	str	r3, [sp, #84]	; 0x54
 801019e:	f8df 921c 	ldr.w	r9, [pc, #540]	; 80103bc <_strtod_l+0x594>
 80101a2:	f04f 0800 	mov.w	r8, #0
 80101a6:	e67a      	b.n	800fe9e <_strtod_l+0x76>
 80101a8:	4881      	ldr	r0, [pc, #516]	; (80103b0 <_strtod_l+0x588>)
 80101aa:	f000 ff1d 	bl	8010fe8 <nan>
 80101ae:	ec59 8b10 	vmov	r8, r9, d0
 80101b2:	e674      	b.n	800fe9e <_strtod_l+0x76>
 80101b4:	9b05      	ldr	r3, [sp, #20]
 80101b6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80101b8:	1afb      	subs	r3, r7, r3
 80101ba:	f1bb 0f00 	cmp.w	fp, #0
 80101be:	bf08      	it	eq
 80101c0:	46b3      	moveq	fp, r6
 80101c2:	2e10      	cmp	r6, #16
 80101c4:	9308      	str	r3, [sp, #32]
 80101c6:	4635      	mov	r5, r6
 80101c8:	bfa8      	it	ge
 80101ca:	2510      	movge	r5, #16
 80101cc:	f7f0 f9aa 	bl	8000524 <__aeabi_ui2d>
 80101d0:	2e09      	cmp	r6, #9
 80101d2:	4680      	mov	r8, r0
 80101d4:	4689      	mov	r9, r1
 80101d6:	dd13      	ble.n	8010200 <_strtod_l+0x3d8>
 80101d8:	4b76      	ldr	r3, [pc, #472]	; (80103b4 <_strtod_l+0x58c>)
 80101da:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80101de:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80101e2:	f7f0 fa19 	bl	8000618 <__aeabi_dmul>
 80101e6:	4680      	mov	r8, r0
 80101e8:	4650      	mov	r0, sl
 80101ea:	4689      	mov	r9, r1
 80101ec:	f7f0 f99a 	bl	8000524 <__aeabi_ui2d>
 80101f0:	4602      	mov	r2, r0
 80101f2:	460b      	mov	r3, r1
 80101f4:	4640      	mov	r0, r8
 80101f6:	4649      	mov	r1, r9
 80101f8:	f7f0 f858 	bl	80002ac <__adddf3>
 80101fc:	4680      	mov	r8, r0
 80101fe:	4689      	mov	r9, r1
 8010200:	2e0f      	cmp	r6, #15
 8010202:	dc38      	bgt.n	8010276 <_strtod_l+0x44e>
 8010204:	9b08      	ldr	r3, [sp, #32]
 8010206:	2b00      	cmp	r3, #0
 8010208:	f43f ae49 	beq.w	800fe9e <_strtod_l+0x76>
 801020c:	dd24      	ble.n	8010258 <_strtod_l+0x430>
 801020e:	2b16      	cmp	r3, #22
 8010210:	dc0b      	bgt.n	801022a <_strtod_l+0x402>
 8010212:	4968      	ldr	r1, [pc, #416]	; (80103b4 <_strtod_l+0x58c>)
 8010214:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8010218:	e9d1 0100 	ldrd	r0, r1, [r1]
 801021c:	4642      	mov	r2, r8
 801021e:	464b      	mov	r3, r9
 8010220:	f7f0 f9fa 	bl	8000618 <__aeabi_dmul>
 8010224:	4680      	mov	r8, r0
 8010226:	4689      	mov	r9, r1
 8010228:	e639      	b.n	800fe9e <_strtod_l+0x76>
 801022a:	9a08      	ldr	r2, [sp, #32]
 801022c:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8010230:	4293      	cmp	r3, r2
 8010232:	db20      	blt.n	8010276 <_strtod_l+0x44e>
 8010234:	4c5f      	ldr	r4, [pc, #380]	; (80103b4 <_strtod_l+0x58c>)
 8010236:	f1c6 060f 	rsb	r6, r6, #15
 801023a:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 801023e:	4642      	mov	r2, r8
 8010240:	464b      	mov	r3, r9
 8010242:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010246:	f7f0 f9e7 	bl	8000618 <__aeabi_dmul>
 801024a:	9b08      	ldr	r3, [sp, #32]
 801024c:	1b9e      	subs	r6, r3, r6
 801024e:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8010252:	e9d4 2300 	ldrd	r2, r3, [r4]
 8010256:	e7e3      	b.n	8010220 <_strtod_l+0x3f8>
 8010258:	9b08      	ldr	r3, [sp, #32]
 801025a:	3316      	adds	r3, #22
 801025c:	db0b      	blt.n	8010276 <_strtod_l+0x44e>
 801025e:	9b05      	ldr	r3, [sp, #20]
 8010260:	1bdf      	subs	r7, r3, r7
 8010262:	4b54      	ldr	r3, [pc, #336]	; (80103b4 <_strtod_l+0x58c>)
 8010264:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8010268:	e9d7 2300 	ldrd	r2, r3, [r7]
 801026c:	4640      	mov	r0, r8
 801026e:	4649      	mov	r1, r9
 8010270:	f7f0 fafc 	bl	800086c <__aeabi_ddiv>
 8010274:	e7d6      	b.n	8010224 <_strtod_l+0x3fc>
 8010276:	9b08      	ldr	r3, [sp, #32]
 8010278:	1b75      	subs	r5, r6, r5
 801027a:	441d      	add	r5, r3
 801027c:	2d00      	cmp	r5, #0
 801027e:	dd70      	ble.n	8010362 <_strtod_l+0x53a>
 8010280:	f015 030f 	ands.w	r3, r5, #15
 8010284:	d00a      	beq.n	801029c <_strtod_l+0x474>
 8010286:	494b      	ldr	r1, [pc, #300]	; (80103b4 <_strtod_l+0x58c>)
 8010288:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801028c:	4642      	mov	r2, r8
 801028e:	464b      	mov	r3, r9
 8010290:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010294:	f7f0 f9c0 	bl	8000618 <__aeabi_dmul>
 8010298:	4680      	mov	r8, r0
 801029a:	4689      	mov	r9, r1
 801029c:	f035 050f 	bics.w	r5, r5, #15
 80102a0:	d04d      	beq.n	801033e <_strtod_l+0x516>
 80102a2:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 80102a6:	dd22      	ble.n	80102ee <_strtod_l+0x4c6>
 80102a8:	2500      	movs	r5, #0
 80102aa:	46ab      	mov	fp, r5
 80102ac:	9509      	str	r5, [sp, #36]	; 0x24
 80102ae:	9505      	str	r5, [sp, #20]
 80102b0:	2322      	movs	r3, #34	; 0x22
 80102b2:	f8df 9108 	ldr.w	r9, [pc, #264]	; 80103bc <_strtod_l+0x594>
 80102b6:	6023      	str	r3, [r4, #0]
 80102b8:	f04f 0800 	mov.w	r8, #0
 80102bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80102be:	2b00      	cmp	r3, #0
 80102c0:	f43f aded 	beq.w	800fe9e <_strtod_l+0x76>
 80102c4:	9916      	ldr	r1, [sp, #88]	; 0x58
 80102c6:	4620      	mov	r0, r4
 80102c8:	f001 fb3e 	bl	8011948 <_Bfree>
 80102cc:	9905      	ldr	r1, [sp, #20]
 80102ce:	4620      	mov	r0, r4
 80102d0:	f001 fb3a 	bl	8011948 <_Bfree>
 80102d4:	4659      	mov	r1, fp
 80102d6:	4620      	mov	r0, r4
 80102d8:	f001 fb36 	bl	8011948 <_Bfree>
 80102dc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80102de:	4620      	mov	r0, r4
 80102e0:	f001 fb32 	bl	8011948 <_Bfree>
 80102e4:	4629      	mov	r1, r5
 80102e6:	4620      	mov	r0, r4
 80102e8:	f001 fb2e 	bl	8011948 <_Bfree>
 80102ec:	e5d7      	b.n	800fe9e <_strtod_l+0x76>
 80102ee:	4b32      	ldr	r3, [pc, #200]	; (80103b8 <_strtod_l+0x590>)
 80102f0:	9304      	str	r3, [sp, #16]
 80102f2:	2300      	movs	r3, #0
 80102f4:	112d      	asrs	r5, r5, #4
 80102f6:	4640      	mov	r0, r8
 80102f8:	4649      	mov	r1, r9
 80102fa:	469a      	mov	sl, r3
 80102fc:	2d01      	cmp	r5, #1
 80102fe:	dc21      	bgt.n	8010344 <_strtod_l+0x51c>
 8010300:	b10b      	cbz	r3, 8010306 <_strtod_l+0x4de>
 8010302:	4680      	mov	r8, r0
 8010304:	4689      	mov	r9, r1
 8010306:	492c      	ldr	r1, [pc, #176]	; (80103b8 <_strtod_l+0x590>)
 8010308:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 801030c:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8010310:	4642      	mov	r2, r8
 8010312:	464b      	mov	r3, r9
 8010314:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010318:	f7f0 f97e 	bl	8000618 <__aeabi_dmul>
 801031c:	4b27      	ldr	r3, [pc, #156]	; (80103bc <_strtod_l+0x594>)
 801031e:	460a      	mov	r2, r1
 8010320:	400b      	ands	r3, r1
 8010322:	4927      	ldr	r1, [pc, #156]	; (80103c0 <_strtod_l+0x598>)
 8010324:	428b      	cmp	r3, r1
 8010326:	4680      	mov	r8, r0
 8010328:	d8be      	bhi.n	80102a8 <_strtod_l+0x480>
 801032a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 801032e:	428b      	cmp	r3, r1
 8010330:	bf86      	itte	hi
 8010332:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 80103c4 <_strtod_l+0x59c>
 8010336:	f04f 38ff 	movhi.w	r8, #4294967295
 801033a:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 801033e:	2300      	movs	r3, #0
 8010340:	9304      	str	r3, [sp, #16]
 8010342:	e07b      	b.n	801043c <_strtod_l+0x614>
 8010344:	07ea      	lsls	r2, r5, #31
 8010346:	d505      	bpl.n	8010354 <_strtod_l+0x52c>
 8010348:	9b04      	ldr	r3, [sp, #16]
 801034a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801034e:	f7f0 f963 	bl	8000618 <__aeabi_dmul>
 8010352:	2301      	movs	r3, #1
 8010354:	9a04      	ldr	r2, [sp, #16]
 8010356:	3208      	adds	r2, #8
 8010358:	f10a 0a01 	add.w	sl, sl, #1
 801035c:	106d      	asrs	r5, r5, #1
 801035e:	9204      	str	r2, [sp, #16]
 8010360:	e7cc      	b.n	80102fc <_strtod_l+0x4d4>
 8010362:	d0ec      	beq.n	801033e <_strtod_l+0x516>
 8010364:	426d      	negs	r5, r5
 8010366:	f015 020f 	ands.w	r2, r5, #15
 801036a:	d00a      	beq.n	8010382 <_strtod_l+0x55a>
 801036c:	4b11      	ldr	r3, [pc, #68]	; (80103b4 <_strtod_l+0x58c>)
 801036e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010372:	4640      	mov	r0, r8
 8010374:	4649      	mov	r1, r9
 8010376:	e9d3 2300 	ldrd	r2, r3, [r3]
 801037a:	f7f0 fa77 	bl	800086c <__aeabi_ddiv>
 801037e:	4680      	mov	r8, r0
 8010380:	4689      	mov	r9, r1
 8010382:	112d      	asrs	r5, r5, #4
 8010384:	d0db      	beq.n	801033e <_strtod_l+0x516>
 8010386:	2d1f      	cmp	r5, #31
 8010388:	dd1e      	ble.n	80103c8 <_strtod_l+0x5a0>
 801038a:	2500      	movs	r5, #0
 801038c:	46ab      	mov	fp, r5
 801038e:	9509      	str	r5, [sp, #36]	; 0x24
 8010390:	9505      	str	r5, [sp, #20]
 8010392:	2322      	movs	r3, #34	; 0x22
 8010394:	f04f 0800 	mov.w	r8, #0
 8010398:	f04f 0900 	mov.w	r9, #0
 801039c:	6023      	str	r3, [r4, #0]
 801039e:	e78d      	b.n	80102bc <_strtod_l+0x494>
 80103a0:	08013647 	.word	0x08013647
 80103a4:	08013660 	.word	0x08013660
 80103a8:	0801363e 	.word	0x0801363e
 80103ac:	08013641 	.word	0x08013641
 80103b0:	080139fa 	.word	0x080139fa
 80103b4:	080138b8 	.word	0x080138b8
 80103b8:	08013890 	.word	0x08013890
 80103bc:	7ff00000 	.word	0x7ff00000
 80103c0:	7ca00000 	.word	0x7ca00000
 80103c4:	7fefffff 	.word	0x7fefffff
 80103c8:	f015 0310 	ands.w	r3, r5, #16
 80103cc:	bf18      	it	ne
 80103ce:	236a      	movne	r3, #106	; 0x6a
 80103d0:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 8010774 <_strtod_l+0x94c>
 80103d4:	9304      	str	r3, [sp, #16]
 80103d6:	4640      	mov	r0, r8
 80103d8:	4649      	mov	r1, r9
 80103da:	2300      	movs	r3, #0
 80103dc:	07ea      	lsls	r2, r5, #31
 80103de:	d504      	bpl.n	80103ea <_strtod_l+0x5c2>
 80103e0:	e9da 2300 	ldrd	r2, r3, [sl]
 80103e4:	f7f0 f918 	bl	8000618 <__aeabi_dmul>
 80103e8:	2301      	movs	r3, #1
 80103ea:	106d      	asrs	r5, r5, #1
 80103ec:	f10a 0a08 	add.w	sl, sl, #8
 80103f0:	d1f4      	bne.n	80103dc <_strtod_l+0x5b4>
 80103f2:	b10b      	cbz	r3, 80103f8 <_strtod_l+0x5d0>
 80103f4:	4680      	mov	r8, r0
 80103f6:	4689      	mov	r9, r1
 80103f8:	9b04      	ldr	r3, [sp, #16]
 80103fa:	b1bb      	cbz	r3, 801042c <_strtod_l+0x604>
 80103fc:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8010400:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8010404:	2b00      	cmp	r3, #0
 8010406:	4649      	mov	r1, r9
 8010408:	dd10      	ble.n	801042c <_strtod_l+0x604>
 801040a:	2b1f      	cmp	r3, #31
 801040c:	f340 811e 	ble.w	801064c <_strtod_l+0x824>
 8010410:	2b34      	cmp	r3, #52	; 0x34
 8010412:	bfde      	ittt	le
 8010414:	f04f 33ff 	movle.w	r3, #4294967295
 8010418:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 801041c:	4093      	lslle	r3, r2
 801041e:	f04f 0800 	mov.w	r8, #0
 8010422:	bfcc      	ite	gt
 8010424:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8010428:	ea03 0901 	andle.w	r9, r3, r1
 801042c:	2200      	movs	r2, #0
 801042e:	2300      	movs	r3, #0
 8010430:	4640      	mov	r0, r8
 8010432:	4649      	mov	r1, r9
 8010434:	f7f0 fb58 	bl	8000ae8 <__aeabi_dcmpeq>
 8010438:	2800      	cmp	r0, #0
 801043a:	d1a6      	bne.n	801038a <_strtod_l+0x562>
 801043c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801043e:	9300      	str	r3, [sp, #0]
 8010440:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8010442:	4633      	mov	r3, r6
 8010444:	465a      	mov	r2, fp
 8010446:	4620      	mov	r0, r4
 8010448:	f001 fae6 	bl	8011a18 <__s2b>
 801044c:	9009      	str	r0, [sp, #36]	; 0x24
 801044e:	2800      	cmp	r0, #0
 8010450:	f43f af2a 	beq.w	80102a8 <_strtod_l+0x480>
 8010454:	9a08      	ldr	r2, [sp, #32]
 8010456:	9b05      	ldr	r3, [sp, #20]
 8010458:	2a00      	cmp	r2, #0
 801045a:	eba3 0307 	sub.w	r3, r3, r7
 801045e:	bfa8      	it	ge
 8010460:	2300      	movge	r3, #0
 8010462:	930c      	str	r3, [sp, #48]	; 0x30
 8010464:	2500      	movs	r5, #0
 8010466:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 801046a:	9312      	str	r3, [sp, #72]	; 0x48
 801046c:	46ab      	mov	fp, r5
 801046e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010470:	4620      	mov	r0, r4
 8010472:	6859      	ldr	r1, [r3, #4]
 8010474:	f001 fa28 	bl	80118c8 <_Balloc>
 8010478:	9005      	str	r0, [sp, #20]
 801047a:	2800      	cmp	r0, #0
 801047c:	f43f af18 	beq.w	80102b0 <_strtod_l+0x488>
 8010480:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010482:	691a      	ldr	r2, [r3, #16]
 8010484:	3202      	adds	r2, #2
 8010486:	f103 010c 	add.w	r1, r3, #12
 801048a:	0092      	lsls	r2, r2, #2
 801048c:	300c      	adds	r0, #12
 801048e:	f000 fd9c 	bl	8010fca <memcpy>
 8010492:	ec49 8b10 	vmov	d0, r8, r9
 8010496:	aa18      	add	r2, sp, #96	; 0x60
 8010498:	a917      	add	r1, sp, #92	; 0x5c
 801049a:	4620      	mov	r0, r4
 801049c:	f001 fdf0 	bl	8012080 <__d2b>
 80104a0:	ec49 8b18 	vmov	d8, r8, r9
 80104a4:	9016      	str	r0, [sp, #88]	; 0x58
 80104a6:	2800      	cmp	r0, #0
 80104a8:	f43f af02 	beq.w	80102b0 <_strtod_l+0x488>
 80104ac:	2101      	movs	r1, #1
 80104ae:	4620      	mov	r0, r4
 80104b0:	f001 fb4a 	bl	8011b48 <__i2b>
 80104b4:	4683      	mov	fp, r0
 80104b6:	2800      	cmp	r0, #0
 80104b8:	f43f aefa 	beq.w	80102b0 <_strtod_l+0x488>
 80104bc:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 80104be:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80104c0:	2e00      	cmp	r6, #0
 80104c2:	bfab      	itete	ge
 80104c4:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 80104c6:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 80104c8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 80104ca:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 80104ce:	bfac      	ite	ge
 80104d0:	eb06 0a03 	addge.w	sl, r6, r3
 80104d4:	1b9f      	sublt	r7, r3, r6
 80104d6:	9b04      	ldr	r3, [sp, #16]
 80104d8:	1af6      	subs	r6, r6, r3
 80104da:	4416      	add	r6, r2
 80104dc:	4ba0      	ldr	r3, [pc, #640]	; (8010760 <_strtod_l+0x938>)
 80104de:	3e01      	subs	r6, #1
 80104e0:	429e      	cmp	r6, r3
 80104e2:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80104e6:	f280 80c4 	bge.w	8010672 <_strtod_l+0x84a>
 80104ea:	1b9b      	subs	r3, r3, r6
 80104ec:	2b1f      	cmp	r3, #31
 80104ee:	eba2 0203 	sub.w	r2, r2, r3
 80104f2:	f04f 0101 	mov.w	r1, #1
 80104f6:	f300 80b0 	bgt.w	801065a <_strtod_l+0x832>
 80104fa:	fa01 f303 	lsl.w	r3, r1, r3
 80104fe:	930e      	str	r3, [sp, #56]	; 0x38
 8010500:	2300      	movs	r3, #0
 8010502:	930d      	str	r3, [sp, #52]	; 0x34
 8010504:	eb0a 0602 	add.w	r6, sl, r2
 8010508:	9b04      	ldr	r3, [sp, #16]
 801050a:	45b2      	cmp	sl, r6
 801050c:	4417      	add	r7, r2
 801050e:	441f      	add	r7, r3
 8010510:	4653      	mov	r3, sl
 8010512:	bfa8      	it	ge
 8010514:	4633      	movge	r3, r6
 8010516:	42bb      	cmp	r3, r7
 8010518:	bfa8      	it	ge
 801051a:	463b      	movge	r3, r7
 801051c:	2b00      	cmp	r3, #0
 801051e:	bfc2      	ittt	gt
 8010520:	1af6      	subgt	r6, r6, r3
 8010522:	1aff      	subgt	r7, r7, r3
 8010524:	ebaa 0a03 	subgt.w	sl, sl, r3
 8010528:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801052a:	2b00      	cmp	r3, #0
 801052c:	dd17      	ble.n	801055e <_strtod_l+0x736>
 801052e:	4659      	mov	r1, fp
 8010530:	461a      	mov	r2, r3
 8010532:	4620      	mov	r0, r4
 8010534:	f001 fbc8 	bl	8011cc8 <__pow5mult>
 8010538:	4683      	mov	fp, r0
 801053a:	2800      	cmp	r0, #0
 801053c:	f43f aeb8 	beq.w	80102b0 <_strtod_l+0x488>
 8010540:	4601      	mov	r1, r0
 8010542:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8010544:	4620      	mov	r0, r4
 8010546:	f001 fb15 	bl	8011b74 <__multiply>
 801054a:	900b      	str	r0, [sp, #44]	; 0x2c
 801054c:	2800      	cmp	r0, #0
 801054e:	f43f aeaf 	beq.w	80102b0 <_strtod_l+0x488>
 8010552:	9916      	ldr	r1, [sp, #88]	; 0x58
 8010554:	4620      	mov	r0, r4
 8010556:	f001 f9f7 	bl	8011948 <_Bfree>
 801055a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801055c:	9316      	str	r3, [sp, #88]	; 0x58
 801055e:	2e00      	cmp	r6, #0
 8010560:	f300 808c 	bgt.w	801067c <_strtod_l+0x854>
 8010564:	9b08      	ldr	r3, [sp, #32]
 8010566:	2b00      	cmp	r3, #0
 8010568:	dd08      	ble.n	801057c <_strtod_l+0x754>
 801056a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801056c:	9905      	ldr	r1, [sp, #20]
 801056e:	4620      	mov	r0, r4
 8010570:	f001 fbaa 	bl	8011cc8 <__pow5mult>
 8010574:	9005      	str	r0, [sp, #20]
 8010576:	2800      	cmp	r0, #0
 8010578:	f43f ae9a 	beq.w	80102b0 <_strtod_l+0x488>
 801057c:	2f00      	cmp	r7, #0
 801057e:	dd08      	ble.n	8010592 <_strtod_l+0x76a>
 8010580:	9905      	ldr	r1, [sp, #20]
 8010582:	463a      	mov	r2, r7
 8010584:	4620      	mov	r0, r4
 8010586:	f001 fbf9 	bl	8011d7c <__lshift>
 801058a:	9005      	str	r0, [sp, #20]
 801058c:	2800      	cmp	r0, #0
 801058e:	f43f ae8f 	beq.w	80102b0 <_strtod_l+0x488>
 8010592:	f1ba 0f00 	cmp.w	sl, #0
 8010596:	dd08      	ble.n	80105aa <_strtod_l+0x782>
 8010598:	4659      	mov	r1, fp
 801059a:	4652      	mov	r2, sl
 801059c:	4620      	mov	r0, r4
 801059e:	f001 fbed 	bl	8011d7c <__lshift>
 80105a2:	4683      	mov	fp, r0
 80105a4:	2800      	cmp	r0, #0
 80105a6:	f43f ae83 	beq.w	80102b0 <_strtod_l+0x488>
 80105aa:	9a05      	ldr	r2, [sp, #20]
 80105ac:	9916      	ldr	r1, [sp, #88]	; 0x58
 80105ae:	4620      	mov	r0, r4
 80105b0:	f001 fc6c 	bl	8011e8c <__mdiff>
 80105b4:	4605      	mov	r5, r0
 80105b6:	2800      	cmp	r0, #0
 80105b8:	f43f ae7a 	beq.w	80102b0 <_strtod_l+0x488>
 80105bc:	68c3      	ldr	r3, [r0, #12]
 80105be:	930b      	str	r3, [sp, #44]	; 0x2c
 80105c0:	2300      	movs	r3, #0
 80105c2:	60c3      	str	r3, [r0, #12]
 80105c4:	4659      	mov	r1, fp
 80105c6:	f001 fc45 	bl	8011e54 <__mcmp>
 80105ca:	2800      	cmp	r0, #0
 80105cc:	da60      	bge.n	8010690 <_strtod_l+0x868>
 80105ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80105d0:	ea53 0308 	orrs.w	r3, r3, r8
 80105d4:	f040 8084 	bne.w	80106e0 <_strtod_l+0x8b8>
 80105d8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80105dc:	2b00      	cmp	r3, #0
 80105de:	d17f      	bne.n	80106e0 <_strtod_l+0x8b8>
 80105e0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80105e4:	0d1b      	lsrs	r3, r3, #20
 80105e6:	051b      	lsls	r3, r3, #20
 80105e8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80105ec:	d978      	bls.n	80106e0 <_strtod_l+0x8b8>
 80105ee:	696b      	ldr	r3, [r5, #20]
 80105f0:	b913      	cbnz	r3, 80105f8 <_strtod_l+0x7d0>
 80105f2:	692b      	ldr	r3, [r5, #16]
 80105f4:	2b01      	cmp	r3, #1
 80105f6:	dd73      	ble.n	80106e0 <_strtod_l+0x8b8>
 80105f8:	4629      	mov	r1, r5
 80105fa:	2201      	movs	r2, #1
 80105fc:	4620      	mov	r0, r4
 80105fe:	f001 fbbd 	bl	8011d7c <__lshift>
 8010602:	4659      	mov	r1, fp
 8010604:	4605      	mov	r5, r0
 8010606:	f001 fc25 	bl	8011e54 <__mcmp>
 801060a:	2800      	cmp	r0, #0
 801060c:	dd68      	ble.n	80106e0 <_strtod_l+0x8b8>
 801060e:	9904      	ldr	r1, [sp, #16]
 8010610:	4a54      	ldr	r2, [pc, #336]	; (8010764 <_strtod_l+0x93c>)
 8010612:	464b      	mov	r3, r9
 8010614:	2900      	cmp	r1, #0
 8010616:	f000 8084 	beq.w	8010722 <_strtod_l+0x8fa>
 801061a:	ea02 0109 	and.w	r1, r2, r9
 801061e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8010622:	dc7e      	bgt.n	8010722 <_strtod_l+0x8fa>
 8010624:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8010628:	f77f aeb3 	ble.w	8010392 <_strtod_l+0x56a>
 801062c:	4b4e      	ldr	r3, [pc, #312]	; (8010768 <_strtod_l+0x940>)
 801062e:	4640      	mov	r0, r8
 8010630:	4649      	mov	r1, r9
 8010632:	2200      	movs	r2, #0
 8010634:	f7ef fff0 	bl	8000618 <__aeabi_dmul>
 8010638:	4b4a      	ldr	r3, [pc, #296]	; (8010764 <_strtod_l+0x93c>)
 801063a:	400b      	ands	r3, r1
 801063c:	4680      	mov	r8, r0
 801063e:	4689      	mov	r9, r1
 8010640:	2b00      	cmp	r3, #0
 8010642:	f47f ae3f 	bne.w	80102c4 <_strtod_l+0x49c>
 8010646:	2322      	movs	r3, #34	; 0x22
 8010648:	6023      	str	r3, [r4, #0]
 801064a:	e63b      	b.n	80102c4 <_strtod_l+0x49c>
 801064c:	f04f 32ff 	mov.w	r2, #4294967295
 8010650:	fa02 f303 	lsl.w	r3, r2, r3
 8010654:	ea03 0808 	and.w	r8, r3, r8
 8010658:	e6e8      	b.n	801042c <_strtod_l+0x604>
 801065a:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 801065e:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8010662:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8010666:	36e2      	adds	r6, #226	; 0xe2
 8010668:	fa01 f306 	lsl.w	r3, r1, r6
 801066c:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 8010670:	e748      	b.n	8010504 <_strtod_l+0x6dc>
 8010672:	2100      	movs	r1, #0
 8010674:	2301      	movs	r3, #1
 8010676:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 801067a:	e743      	b.n	8010504 <_strtod_l+0x6dc>
 801067c:	9916      	ldr	r1, [sp, #88]	; 0x58
 801067e:	4632      	mov	r2, r6
 8010680:	4620      	mov	r0, r4
 8010682:	f001 fb7b 	bl	8011d7c <__lshift>
 8010686:	9016      	str	r0, [sp, #88]	; 0x58
 8010688:	2800      	cmp	r0, #0
 801068a:	f47f af6b 	bne.w	8010564 <_strtod_l+0x73c>
 801068e:	e60f      	b.n	80102b0 <_strtod_l+0x488>
 8010690:	46ca      	mov	sl, r9
 8010692:	d171      	bne.n	8010778 <_strtod_l+0x950>
 8010694:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010696:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801069a:	b352      	cbz	r2, 80106f2 <_strtod_l+0x8ca>
 801069c:	4a33      	ldr	r2, [pc, #204]	; (801076c <_strtod_l+0x944>)
 801069e:	4293      	cmp	r3, r2
 80106a0:	d12a      	bne.n	80106f8 <_strtod_l+0x8d0>
 80106a2:	9b04      	ldr	r3, [sp, #16]
 80106a4:	4641      	mov	r1, r8
 80106a6:	b1fb      	cbz	r3, 80106e8 <_strtod_l+0x8c0>
 80106a8:	4b2e      	ldr	r3, [pc, #184]	; (8010764 <_strtod_l+0x93c>)
 80106aa:	ea09 0303 	and.w	r3, r9, r3
 80106ae:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80106b2:	f04f 32ff 	mov.w	r2, #4294967295
 80106b6:	d81a      	bhi.n	80106ee <_strtod_l+0x8c6>
 80106b8:	0d1b      	lsrs	r3, r3, #20
 80106ba:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80106be:	fa02 f303 	lsl.w	r3, r2, r3
 80106c2:	4299      	cmp	r1, r3
 80106c4:	d118      	bne.n	80106f8 <_strtod_l+0x8d0>
 80106c6:	4b2a      	ldr	r3, [pc, #168]	; (8010770 <_strtod_l+0x948>)
 80106c8:	459a      	cmp	sl, r3
 80106ca:	d102      	bne.n	80106d2 <_strtod_l+0x8aa>
 80106cc:	3101      	adds	r1, #1
 80106ce:	f43f adef 	beq.w	80102b0 <_strtod_l+0x488>
 80106d2:	4b24      	ldr	r3, [pc, #144]	; (8010764 <_strtod_l+0x93c>)
 80106d4:	ea0a 0303 	and.w	r3, sl, r3
 80106d8:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 80106dc:	f04f 0800 	mov.w	r8, #0
 80106e0:	9b04      	ldr	r3, [sp, #16]
 80106e2:	2b00      	cmp	r3, #0
 80106e4:	d1a2      	bne.n	801062c <_strtod_l+0x804>
 80106e6:	e5ed      	b.n	80102c4 <_strtod_l+0x49c>
 80106e8:	f04f 33ff 	mov.w	r3, #4294967295
 80106ec:	e7e9      	b.n	80106c2 <_strtod_l+0x89a>
 80106ee:	4613      	mov	r3, r2
 80106f0:	e7e7      	b.n	80106c2 <_strtod_l+0x89a>
 80106f2:	ea53 0308 	orrs.w	r3, r3, r8
 80106f6:	d08a      	beq.n	801060e <_strtod_l+0x7e6>
 80106f8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80106fa:	b1e3      	cbz	r3, 8010736 <_strtod_l+0x90e>
 80106fc:	ea13 0f0a 	tst.w	r3, sl
 8010700:	d0ee      	beq.n	80106e0 <_strtod_l+0x8b8>
 8010702:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010704:	9a04      	ldr	r2, [sp, #16]
 8010706:	4640      	mov	r0, r8
 8010708:	4649      	mov	r1, r9
 801070a:	b1c3      	cbz	r3, 801073e <_strtod_l+0x916>
 801070c:	f7ff fb6e 	bl	800fdec <sulp>
 8010710:	4602      	mov	r2, r0
 8010712:	460b      	mov	r3, r1
 8010714:	ec51 0b18 	vmov	r0, r1, d8
 8010718:	f7ef fdc8 	bl	80002ac <__adddf3>
 801071c:	4680      	mov	r8, r0
 801071e:	4689      	mov	r9, r1
 8010720:	e7de      	b.n	80106e0 <_strtod_l+0x8b8>
 8010722:	4013      	ands	r3, r2
 8010724:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8010728:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 801072c:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8010730:	f04f 38ff 	mov.w	r8, #4294967295
 8010734:	e7d4      	b.n	80106e0 <_strtod_l+0x8b8>
 8010736:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010738:	ea13 0f08 	tst.w	r3, r8
 801073c:	e7e0      	b.n	8010700 <_strtod_l+0x8d8>
 801073e:	f7ff fb55 	bl	800fdec <sulp>
 8010742:	4602      	mov	r2, r0
 8010744:	460b      	mov	r3, r1
 8010746:	ec51 0b18 	vmov	r0, r1, d8
 801074a:	f7ef fdad 	bl	80002a8 <__aeabi_dsub>
 801074e:	2200      	movs	r2, #0
 8010750:	2300      	movs	r3, #0
 8010752:	4680      	mov	r8, r0
 8010754:	4689      	mov	r9, r1
 8010756:	f7f0 f9c7 	bl	8000ae8 <__aeabi_dcmpeq>
 801075a:	2800      	cmp	r0, #0
 801075c:	d0c0      	beq.n	80106e0 <_strtod_l+0x8b8>
 801075e:	e618      	b.n	8010392 <_strtod_l+0x56a>
 8010760:	fffffc02 	.word	0xfffffc02
 8010764:	7ff00000 	.word	0x7ff00000
 8010768:	39500000 	.word	0x39500000
 801076c:	000fffff 	.word	0x000fffff
 8010770:	7fefffff 	.word	0x7fefffff
 8010774:	08013678 	.word	0x08013678
 8010778:	4659      	mov	r1, fp
 801077a:	4628      	mov	r0, r5
 801077c:	f001 fcda 	bl	8012134 <__ratio>
 8010780:	ec57 6b10 	vmov	r6, r7, d0
 8010784:	ee10 0a10 	vmov	r0, s0
 8010788:	2200      	movs	r2, #0
 801078a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801078e:	4639      	mov	r1, r7
 8010790:	f7f0 f9be 	bl	8000b10 <__aeabi_dcmple>
 8010794:	2800      	cmp	r0, #0
 8010796:	d071      	beq.n	801087c <_strtod_l+0xa54>
 8010798:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801079a:	2b00      	cmp	r3, #0
 801079c:	d17c      	bne.n	8010898 <_strtod_l+0xa70>
 801079e:	f1b8 0f00 	cmp.w	r8, #0
 80107a2:	d15a      	bne.n	801085a <_strtod_l+0xa32>
 80107a4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80107a8:	2b00      	cmp	r3, #0
 80107aa:	d15d      	bne.n	8010868 <_strtod_l+0xa40>
 80107ac:	4b90      	ldr	r3, [pc, #576]	; (80109f0 <_strtod_l+0xbc8>)
 80107ae:	2200      	movs	r2, #0
 80107b0:	4630      	mov	r0, r6
 80107b2:	4639      	mov	r1, r7
 80107b4:	f7f0 f9a2 	bl	8000afc <__aeabi_dcmplt>
 80107b8:	2800      	cmp	r0, #0
 80107ba:	d15c      	bne.n	8010876 <_strtod_l+0xa4e>
 80107bc:	4630      	mov	r0, r6
 80107be:	4639      	mov	r1, r7
 80107c0:	4b8c      	ldr	r3, [pc, #560]	; (80109f4 <_strtod_l+0xbcc>)
 80107c2:	2200      	movs	r2, #0
 80107c4:	f7ef ff28 	bl	8000618 <__aeabi_dmul>
 80107c8:	4606      	mov	r6, r0
 80107ca:	460f      	mov	r7, r1
 80107cc:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 80107d0:	9606      	str	r6, [sp, #24]
 80107d2:	9307      	str	r3, [sp, #28]
 80107d4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80107d8:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 80107dc:	4b86      	ldr	r3, [pc, #536]	; (80109f8 <_strtod_l+0xbd0>)
 80107de:	ea0a 0303 	and.w	r3, sl, r3
 80107e2:	930d      	str	r3, [sp, #52]	; 0x34
 80107e4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80107e6:	4b85      	ldr	r3, [pc, #532]	; (80109fc <_strtod_l+0xbd4>)
 80107e8:	429a      	cmp	r2, r3
 80107ea:	f040 8090 	bne.w	801090e <_strtod_l+0xae6>
 80107ee:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 80107f2:	ec49 8b10 	vmov	d0, r8, r9
 80107f6:	f001 fbd3 	bl	8011fa0 <__ulp>
 80107fa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80107fe:	ec51 0b10 	vmov	r0, r1, d0
 8010802:	f7ef ff09 	bl	8000618 <__aeabi_dmul>
 8010806:	4642      	mov	r2, r8
 8010808:	464b      	mov	r3, r9
 801080a:	f7ef fd4f 	bl	80002ac <__adddf3>
 801080e:	460b      	mov	r3, r1
 8010810:	4979      	ldr	r1, [pc, #484]	; (80109f8 <_strtod_l+0xbd0>)
 8010812:	4a7b      	ldr	r2, [pc, #492]	; (8010a00 <_strtod_l+0xbd8>)
 8010814:	4019      	ands	r1, r3
 8010816:	4291      	cmp	r1, r2
 8010818:	4680      	mov	r8, r0
 801081a:	d944      	bls.n	80108a6 <_strtod_l+0xa7e>
 801081c:	ee18 2a90 	vmov	r2, s17
 8010820:	4b78      	ldr	r3, [pc, #480]	; (8010a04 <_strtod_l+0xbdc>)
 8010822:	429a      	cmp	r2, r3
 8010824:	d104      	bne.n	8010830 <_strtod_l+0xa08>
 8010826:	ee18 3a10 	vmov	r3, s16
 801082a:	3301      	adds	r3, #1
 801082c:	f43f ad40 	beq.w	80102b0 <_strtod_l+0x488>
 8010830:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 8010a04 <_strtod_l+0xbdc>
 8010834:	f04f 38ff 	mov.w	r8, #4294967295
 8010838:	9916      	ldr	r1, [sp, #88]	; 0x58
 801083a:	4620      	mov	r0, r4
 801083c:	f001 f884 	bl	8011948 <_Bfree>
 8010840:	9905      	ldr	r1, [sp, #20]
 8010842:	4620      	mov	r0, r4
 8010844:	f001 f880 	bl	8011948 <_Bfree>
 8010848:	4659      	mov	r1, fp
 801084a:	4620      	mov	r0, r4
 801084c:	f001 f87c 	bl	8011948 <_Bfree>
 8010850:	4629      	mov	r1, r5
 8010852:	4620      	mov	r0, r4
 8010854:	f001 f878 	bl	8011948 <_Bfree>
 8010858:	e609      	b.n	801046e <_strtod_l+0x646>
 801085a:	f1b8 0f01 	cmp.w	r8, #1
 801085e:	d103      	bne.n	8010868 <_strtod_l+0xa40>
 8010860:	f1b9 0f00 	cmp.w	r9, #0
 8010864:	f43f ad95 	beq.w	8010392 <_strtod_l+0x56a>
 8010868:	ed9f 7b55 	vldr	d7, [pc, #340]	; 80109c0 <_strtod_l+0xb98>
 801086c:	4f60      	ldr	r7, [pc, #384]	; (80109f0 <_strtod_l+0xbc8>)
 801086e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8010872:	2600      	movs	r6, #0
 8010874:	e7ae      	b.n	80107d4 <_strtod_l+0x9ac>
 8010876:	4f5f      	ldr	r7, [pc, #380]	; (80109f4 <_strtod_l+0xbcc>)
 8010878:	2600      	movs	r6, #0
 801087a:	e7a7      	b.n	80107cc <_strtod_l+0x9a4>
 801087c:	4b5d      	ldr	r3, [pc, #372]	; (80109f4 <_strtod_l+0xbcc>)
 801087e:	4630      	mov	r0, r6
 8010880:	4639      	mov	r1, r7
 8010882:	2200      	movs	r2, #0
 8010884:	f7ef fec8 	bl	8000618 <__aeabi_dmul>
 8010888:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801088a:	4606      	mov	r6, r0
 801088c:	460f      	mov	r7, r1
 801088e:	2b00      	cmp	r3, #0
 8010890:	d09c      	beq.n	80107cc <_strtod_l+0x9a4>
 8010892:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8010896:	e79d      	b.n	80107d4 <_strtod_l+0x9ac>
 8010898:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 80109c8 <_strtod_l+0xba0>
 801089c:	ed8d 7b06 	vstr	d7, [sp, #24]
 80108a0:	ec57 6b17 	vmov	r6, r7, d7
 80108a4:	e796      	b.n	80107d4 <_strtod_l+0x9ac>
 80108a6:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 80108aa:	9b04      	ldr	r3, [sp, #16]
 80108ac:	46ca      	mov	sl, r9
 80108ae:	2b00      	cmp	r3, #0
 80108b0:	d1c2      	bne.n	8010838 <_strtod_l+0xa10>
 80108b2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80108b6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80108b8:	0d1b      	lsrs	r3, r3, #20
 80108ba:	051b      	lsls	r3, r3, #20
 80108bc:	429a      	cmp	r2, r3
 80108be:	d1bb      	bne.n	8010838 <_strtod_l+0xa10>
 80108c0:	4630      	mov	r0, r6
 80108c2:	4639      	mov	r1, r7
 80108c4:	f7f0 f9e0 	bl	8000c88 <__aeabi_d2lz>
 80108c8:	f7ef fe78 	bl	80005bc <__aeabi_l2d>
 80108cc:	4602      	mov	r2, r0
 80108ce:	460b      	mov	r3, r1
 80108d0:	4630      	mov	r0, r6
 80108d2:	4639      	mov	r1, r7
 80108d4:	f7ef fce8 	bl	80002a8 <__aeabi_dsub>
 80108d8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80108da:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80108de:	ea43 0308 	orr.w	r3, r3, r8
 80108e2:	4313      	orrs	r3, r2
 80108e4:	4606      	mov	r6, r0
 80108e6:	460f      	mov	r7, r1
 80108e8:	d054      	beq.n	8010994 <_strtod_l+0xb6c>
 80108ea:	a339      	add	r3, pc, #228	; (adr r3, 80109d0 <_strtod_l+0xba8>)
 80108ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108f0:	f7f0 f904 	bl	8000afc <__aeabi_dcmplt>
 80108f4:	2800      	cmp	r0, #0
 80108f6:	f47f ace5 	bne.w	80102c4 <_strtod_l+0x49c>
 80108fa:	a337      	add	r3, pc, #220	; (adr r3, 80109d8 <_strtod_l+0xbb0>)
 80108fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010900:	4630      	mov	r0, r6
 8010902:	4639      	mov	r1, r7
 8010904:	f7f0 f918 	bl	8000b38 <__aeabi_dcmpgt>
 8010908:	2800      	cmp	r0, #0
 801090a:	d095      	beq.n	8010838 <_strtod_l+0xa10>
 801090c:	e4da      	b.n	80102c4 <_strtod_l+0x49c>
 801090e:	9b04      	ldr	r3, [sp, #16]
 8010910:	b333      	cbz	r3, 8010960 <_strtod_l+0xb38>
 8010912:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010914:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8010918:	d822      	bhi.n	8010960 <_strtod_l+0xb38>
 801091a:	a331      	add	r3, pc, #196	; (adr r3, 80109e0 <_strtod_l+0xbb8>)
 801091c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010920:	4630      	mov	r0, r6
 8010922:	4639      	mov	r1, r7
 8010924:	f7f0 f8f4 	bl	8000b10 <__aeabi_dcmple>
 8010928:	b1a0      	cbz	r0, 8010954 <_strtod_l+0xb2c>
 801092a:	4639      	mov	r1, r7
 801092c:	4630      	mov	r0, r6
 801092e:	f7f0 f923 	bl	8000b78 <__aeabi_d2uiz>
 8010932:	2801      	cmp	r0, #1
 8010934:	bf38      	it	cc
 8010936:	2001      	movcc	r0, #1
 8010938:	f7ef fdf4 	bl	8000524 <__aeabi_ui2d>
 801093c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801093e:	4606      	mov	r6, r0
 8010940:	460f      	mov	r7, r1
 8010942:	bb23      	cbnz	r3, 801098e <_strtod_l+0xb66>
 8010944:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010948:	9010      	str	r0, [sp, #64]	; 0x40
 801094a:	9311      	str	r3, [sp, #68]	; 0x44
 801094c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8010950:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8010954:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010956:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010958:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 801095c:	1a9b      	subs	r3, r3, r2
 801095e:	930f      	str	r3, [sp, #60]	; 0x3c
 8010960:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8010964:	eeb0 0a48 	vmov.f32	s0, s16
 8010968:	eef0 0a68 	vmov.f32	s1, s17
 801096c:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8010970:	f001 fb16 	bl	8011fa0 <__ulp>
 8010974:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8010978:	ec53 2b10 	vmov	r2, r3, d0
 801097c:	f7ef fe4c 	bl	8000618 <__aeabi_dmul>
 8010980:	ec53 2b18 	vmov	r2, r3, d8
 8010984:	f7ef fc92 	bl	80002ac <__adddf3>
 8010988:	4680      	mov	r8, r0
 801098a:	4689      	mov	r9, r1
 801098c:	e78d      	b.n	80108aa <_strtod_l+0xa82>
 801098e:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8010992:	e7db      	b.n	801094c <_strtod_l+0xb24>
 8010994:	a314      	add	r3, pc, #80	; (adr r3, 80109e8 <_strtod_l+0xbc0>)
 8010996:	e9d3 2300 	ldrd	r2, r3, [r3]
 801099a:	f7f0 f8af 	bl	8000afc <__aeabi_dcmplt>
 801099e:	e7b3      	b.n	8010908 <_strtod_l+0xae0>
 80109a0:	2300      	movs	r3, #0
 80109a2:	930a      	str	r3, [sp, #40]	; 0x28
 80109a4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80109a6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80109a8:	6013      	str	r3, [r2, #0]
 80109aa:	f7ff ba7c 	b.w	800fea6 <_strtod_l+0x7e>
 80109ae:	2a65      	cmp	r2, #101	; 0x65
 80109b0:	f43f ab75 	beq.w	801009e <_strtod_l+0x276>
 80109b4:	2a45      	cmp	r2, #69	; 0x45
 80109b6:	f43f ab72 	beq.w	801009e <_strtod_l+0x276>
 80109ba:	2301      	movs	r3, #1
 80109bc:	f7ff bbaa 	b.w	8010114 <_strtod_l+0x2ec>
 80109c0:	00000000 	.word	0x00000000
 80109c4:	bff00000 	.word	0xbff00000
 80109c8:	00000000 	.word	0x00000000
 80109cc:	3ff00000 	.word	0x3ff00000
 80109d0:	94a03595 	.word	0x94a03595
 80109d4:	3fdfffff 	.word	0x3fdfffff
 80109d8:	35afe535 	.word	0x35afe535
 80109dc:	3fe00000 	.word	0x3fe00000
 80109e0:	ffc00000 	.word	0xffc00000
 80109e4:	41dfffff 	.word	0x41dfffff
 80109e8:	94a03595 	.word	0x94a03595
 80109ec:	3fcfffff 	.word	0x3fcfffff
 80109f0:	3ff00000 	.word	0x3ff00000
 80109f4:	3fe00000 	.word	0x3fe00000
 80109f8:	7ff00000 	.word	0x7ff00000
 80109fc:	7fe00000 	.word	0x7fe00000
 8010a00:	7c9fffff 	.word	0x7c9fffff
 8010a04:	7fefffff 	.word	0x7fefffff

08010a08 <strtof>:
 8010a08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010a0c:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 8010ad0 <strtof+0xc8>
 8010a10:	4b2a      	ldr	r3, [pc, #168]	; (8010abc <strtof+0xb4>)
 8010a12:	460a      	mov	r2, r1
 8010a14:	ed2d 8b02 	vpush	{d8}
 8010a18:	4601      	mov	r1, r0
 8010a1a:	f8d8 0000 	ldr.w	r0, [r8]
 8010a1e:	f7ff fa03 	bl	800fe28 <_strtod_l>
 8010a22:	ec55 4b10 	vmov	r4, r5, d0
 8010a26:	ee10 2a10 	vmov	r2, s0
 8010a2a:	ee10 0a10 	vmov	r0, s0
 8010a2e:	462b      	mov	r3, r5
 8010a30:	4629      	mov	r1, r5
 8010a32:	f7f0 f88b 	bl	8000b4c <__aeabi_dcmpun>
 8010a36:	b190      	cbz	r0, 8010a5e <strtof+0x56>
 8010a38:	2d00      	cmp	r5, #0
 8010a3a:	4821      	ldr	r0, [pc, #132]	; (8010ac0 <strtof+0xb8>)
 8010a3c:	da09      	bge.n	8010a52 <strtof+0x4a>
 8010a3e:	f000 fadb 	bl	8010ff8 <nanf>
 8010a42:	eeb1 8a40 	vneg.f32	s16, s0
 8010a46:	eeb0 0a48 	vmov.f32	s0, s16
 8010a4a:	ecbd 8b02 	vpop	{d8}
 8010a4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010a52:	ecbd 8b02 	vpop	{d8}
 8010a56:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010a5a:	f000 bacd 	b.w	8010ff8 <nanf>
 8010a5e:	4620      	mov	r0, r4
 8010a60:	4629      	mov	r1, r5
 8010a62:	f7f0 f8a9 	bl	8000bb8 <__aeabi_d2f>
 8010a66:	ee08 0a10 	vmov	s16, r0
 8010a6a:	eddf 7a16 	vldr	s15, [pc, #88]	; 8010ac4 <strtof+0xbc>
 8010a6e:	eeb0 7ac8 	vabs.f32	s14, s16
 8010a72:	eeb4 7a67 	vcmp.f32	s14, s15
 8010a76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010a7a:	dd11      	ble.n	8010aa0 <strtof+0x98>
 8010a7c:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
 8010a80:	4b11      	ldr	r3, [pc, #68]	; (8010ac8 <strtof+0xc0>)
 8010a82:	f04f 32ff 	mov.w	r2, #4294967295
 8010a86:	4620      	mov	r0, r4
 8010a88:	4639      	mov	r1, r7
 8010a8a:	f7f0 f85f 	bl	8000b4c <__aeabi_dcmpun>
 8010a8e:	b980      	cbnz	r0, 8010ab2 <strtof+0xaa>
 8010a90:	4b0d      	ldr	r3, [pc, #52]	; (8010ac8 <strtof+0xc0>)
 8010a92:	f04f 32ff 	mov.w	r2, #4294967295
 8010a96:	4620      	mov	r0, r4
 8010a98:	4639      	mov	r1, r7
 8010a9a:	f7f0 f839 	bl	8000b10 <__aeabi_dcmple>
 8010a9e:	b940      	cbnz	r0, 8010ab2 <strtof+0xaa>
 8010aa0:	ee18 3a10 	vmov	r3, s16
 8010aa4:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8010aa8:	d1cd      	bne.n	8010a46 <strtof+0x3e>
 8010aaa:	4b08      	ldr	r3, [pc, #32]	; (8010acc <strtof+0xc4>)
 8010aac:	402b      	ands	r3, r5
 8010aae:	2b00      	cmp	r3, #0
 8010ab0:	d0c9      	beq.n	8010a46 <strtof+0x3e>
 8010ab2:	f8d8 3000 	ldr.w	r3, [r8]
 8010ab6:	2222      	movs	r2, #34	; 0x22
 8010ab8:	601a      	str	r2, [r3, #0]
 8010aba:	e7c4      	b.n	8010a46 <strtof+0x3e>
 8010abc:	2000011c 	.word	0x2000011c
 8010ac0:	080139fa 	.word	0x080139fa
 8010ac4:	7f7fffff 	.word	0x7f7fffff
 8010ac8:	7fefffff 	.word	0x7fefffff
 8010acc:	7ff00000 	.word	0x7ff00000
 8010ad0:	200002d4 	.word	0x200002d4

08010ad4 <_strtoul_l.constprop.0>:
 8010ad4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010ad8:	4f36      	ldr	r7, [pc, #216]	; (8010bb4 <_strtoul_l.constprop.0+0xe0>)
 8010ada:	4686      	mov	lr, r0
 8010adc:	460d      	mov	r5, r1
 8010ade:	4628      	mov	r0, r5
 8010ae0:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010ae4:	5d3e      	ldrb	r6, [r7, r4]
 8010ae6:	f016 0608 	ands.w	r6, r6, #8
 8010aea:	d1f8      	bne.n	8010ade <_strtoul_l.constprop.0+0xa>
 8010aec:	2c2d      	cmp	r4, #45	; 0x2d
 8010aee:	d130      	bne.n	8010b52 <_strtoul_l.constprop.0+0x7e>
 8010af0:	782c      	ldrb	r4, [r5, #0]
 8010af2:	2601      	movs	r6, #1
 8010af4:	1c85      	adds	r5, r0, #2
 8010af6:	2b00      	cmp	r3, #0
 8010af8:	d057      	beq.n	8010baa <_strtoul_l.constprop.0+0xd6>
 8010afa:	2b10      	cmp	r3, #16
 8010afc:	d109      	bne.n	8010b12 <_strtoul_l.constprop.0+0x3e>
 8010afe:	2c30      	cmp	r4, #48	; 0x30
 8010b00:	d107      	bne.n	8010b12 <_strtoul_l.constprop.0+0x3e>
 8010b02:	7828      	ldrb	r0, [r5, #0]
 8010b04:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8010b08:	2858      	cmp	r0, #88	; 0x58
 8010b0a:	d149      	bne.n	8010ba0 <_strtoul_l.constprop.0+0xcc>
 8010b0c:	786c      	ldrb	r4, [r5, #1]
 8010b0e:	2310      	movs	r3, #16
 8010b10:	3502      	adds	r5, #2
 8010b12:	f04f 38ff 	mov.w	r8, #4294967295
 8010b16:	2700      	movs	r7, #0
 8010b18:	fbb8 f8f3 	udiv	r8, r8, r3
 8010b1c:	fb03 f908 	mul.w	r9, r3, r8
 8010b20:	ea6f 0909 	mvn.w	r9, r9
 8010b24:	4638      	mov	r0, r7
 8010b26:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8010b2a:	f1bc 0f09 	cmp.w	ip, #9
 8010b2e:	d815      	bhi.n	8010b5c <_strtoul_l.constprop.0+0x88>
 8010b30:	4664      	mov	r4, ip
 8010b32:	42a3      	cmp	r3, r4
 8010b34:	dd23      	ble.n	8010b7e <_strtoul_l.constprop.0+0xaa>
 8010b36:	f1b7 3fff 	cmp.w	r7, #4294967295
 8010b3a:	d007      	beq.n	8010b4c <_strtoul_l.constprop.0+0x78>
 8010b3c:	4580      	cmp	r8, r0
 8010b3e:	d31b      	bcc.n	8010b78 <_strtoul_l.constprop.0+0xa4>
 8010b40:	d101      	bne.n	8010b46 <_strtoul_l.constprop.0+0x72>
 8010b42:	45a1      	cmp	r9, r4
 8010b44:	db18      	blt.n	8010b78 <_strtoul_l.constprop.0+0xa4>
 8010b46:	fb00 4003 	mla	r0, r0, r3, r4
 8010b4a:	2701      	movs	r7, #1
 8010b4c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010b50:	e7e9      	b.n	8010b26 <_strtoul_l.constprop.0+0x52>
 8010b52:	2c2b      	cmp	r4, #43	; 0x2b
 8010b54:	bf04      	itt	eq
 8010b56:	782c      	ldrbeq	r4, [r5, #0]
 8010b58:	1c85      	addeq	r5, r0, #2
 8010b5a:	e7cc      	b.n	8010af6 <_strtoul_l.constprop.0+0x22>
 8010b5c:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8010b60:	f1bc 0f19 	cmp.w	ip, #25
 8010b64:	d801      	bhi.n	8010b6a <_strtoul_l.constprop.0+0x96>
 8010b66:	3c37      	subs	r4, #55	; 0x37
 8010b68:	e7e3      	b.n	8010b32 <_strtoul_l.constprop.0+0x5e>
 8010b6a:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8010b6e:	f1bc 0f19 	cmp.w	ip, #25
 8010b72:	d804      	bhi.n	8010b7e <_strtoul_l.constprop.0+0xaa>
 8010b74:	3c57      	subs	r4, #87	; 0x57
 8010b76:	e7dc      	b.n	8010b32 <_strtoul_l.constprop.0+0x5e>
 8010b78:	f04f 37ff 	mov.w	r7, #4294967295
 8010b7c:	e7e6      	b.n	8010b4c <_strtoul_l.constprop.0+0x78>
 8010b7e:	1c7b      	adds	r3, r7, #1
 8010b80:	d106      	bne.n	8010b90 <_strtoul_l.constprop.0+0xbc>
 8010b82:	2322      	movs	r3, #34	; 0x22
 8010b84:	f8ce 3000 	str.w	r3, [lr]
 8010b88:	4638      	mov	r0, r7
 8010b8a:	b932      	cbnz	r2, 8010b9a <_strtoul_l.constprop.0+0xc6>
 8010b8c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010b90:	b106      	cbz	r6, 8010b94 <_strtoul_l.constprop.0+0xc0>
 8010b92:	4240      	negs	r0, r0
 8010b94:	2a00      	cmp	r2, #0
 8010b96:	d0f9      	beq.n	8010b8c <_strtoul_l.constprop.0+0xb8>
 8010b98:	b107      	cbz	r7, 8010b9c <_strtoul_l.constprop.0+0xc8>
 8010b9a:	1e69      	subs	r1, r5, #1
 8010b9c:	6011      	str	r1, [r2, #0]
 8010b9e:	e7f5      	b.n	8010b8c <_strtoul_l.constprop.0+0xb8>
 8010ba0:	2430      	movs	r4, #48	; 0x30
 8010ba2:	2b00      	cmp	r3, #0
 8010ba4:	d1b5      	bne.n	8010b12 <_strtoul_l.constprop.0+0x3e>
 8010ba6:	2308      	movs	r3, #8
 8010ba8:	e7b3      	b.n	8010b12 <_strtoul_l.constprop.0+0x3e>
 8010baa:	2c30      	cmp	r4, #48	; 0x30
 8010bac:	d0a9      	beq.n	8010b02 <_strtoul_l.constprop.0+0x2e>
 8010bae:	230a      	movs	r3, #10
 8010bb0:	e7af      	b.n	8010b12 <_strtoul_l.constprop.0+0x3e>
 8010bb2:	bf00      	nop
 8010bb4:	080136a1 	.word	0x080136a1

08010bb8 <strtoul>:
 8010bb8:	4613      	mov	r3, r2
 8010bba:	460a      	mov	r2, r1
 8010bbc:	4601      	mov	r1, r0
 8010bbe:	4802      	ldr	r0, [pc, #8]	; (8010bc8 <strtoul+0x10>)
 8010bc0:	6800      	ldr	r0, [r0, #0]
 8010bc2:	f7ff bf87 	b.w	8010ad4 <_strtoul_l.constprop.0>
 8010bc6:	bf00      	nop
 8010bc8:	200002d4 	.word	0x200002d4

08010bcc <std>:
 8010bcc:	2300      	movs	r3, #0
 8010bce:	b510      	push	{r4, lr}
 8010bd0:	4604      	mov	r4, r0
 8010bd2:	e9c0 3300 	strd	r3, r3, [r0]
 8010bd6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010bda:	6083      	str	r3, [r0, #8]
 8010bdc:	8181      	strh	r1, [r0, #12]
 8010bde:	6643      	str	r3, [r0, #100]	; 0x64
 8010be0:	81c2      	strh	r2, [r0, #14]
 8010be2:	6183      	str	r3, [r0, #24]
 8010be4:	4619      	mov	r1, r3
 8010be6:	2208      	movs	r2, #8
 8010be8:	305c      	adds	r0, #92	; 0x5c
 8010bea:	f000 f92d 	bl	8010e48 <memset>
 8010bee:	4b0d      	ldr	r3, [pc, #52]	; (8010c24 <std+0x58>)
 8010bf0:	6263      	str	r3, [r4, #36]	; 0x24
 8010bf2:	4b0d      	ldr	r3, [pc, #52]	; (8010c28 <std+0x5c>)
 8010bf4:	62a3      	str	r3, [r4, #40]	; 0x28
 8010bf6:	4b0d      	ldr	r3, [pc, #52]	; (8010c2c <std+0x60>)
 8010bf8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8010bfa:	4b0d      	ldr	r3, [pc, #52]	; (8010c30 <std+0x64>)
 8010bfc:	6323      	str	r3, [r4, #48]	; 0x30
 8010bfe:	4b0d      	ldr	r3, [pc, #52]	; (8010c34 <std+0x68>)
 8010c00:	6224      	str	r4, [r4, #32]
 8010c02:	429c      	cmp	r4, r3
 8010c04:	d006      	beq.n	8010c14 <std+0x48>
 8010c06:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8010c0a:	4294      	cmp	r4, r2
 8010c0c:	d002      	beq.n	8010c14 <std+0x48>
 8010c0e:	33d0      	adds	r3, #208	; 0xd0
 8010c10:	429c      	cmp	r4, r3
 8010c12:	d105      	bne.n	8010c20 <std+0x54>
 8010c14:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8010c18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010c1c:	f000 b9ca 	b.w	8010fb4 <__retarget_lock_init_recursive>
 8010c20:	bd10      	pop	{r4, pc}
 8010c22:	bf00      	nop
 8010c24:	08010d51 	.word	0x08010d51
 8010c28:	08010d73 	.word	0x08010d73
 8010c2c:	08010dab 	.word	0x08010dab
 8010c30:	08010dcf 	.word	0x08010dcf
 8010c34:	20002928 	.word	0x20002928

08010c38 <stdio_exit_handler>:
 8010c38:	4a02      	ldr	r2, [pc, #8]	; (8010c44 <stdio_exit_handler+0xc>)
 8010c3a:	4903      	ldr	r1, [pc, #12]	; (8010c48 <stdio_exit_handler+0x10>)
 8010c3c:	4803      	ldr	r0, [pc, #12]	; (8010c4c <stdio_exit_handler+0x14>)
 8010c3e:	f000 b869 	b.w	8010d14 <_fwalk_sglue>
 8010c42:	bf00      	nop
 8010c44:	20000110 	.word	0x20000110
 8010c48:	08012919 	.word	0x08012919
 8010c4c:	20000288 	.word	0x20000288

08010c50 <cleanup_stdio>:
 8010c50:	6841      	ldr	r1, [r0, #4]
 8010c52:	4b0c      	ldr	r3, [pc, #48]	; (8010c84 <cleanup_stdio+0x34>)
 8010c54:	4299      	cmp	r1, r3
 8010c56:	b510      	push	{r4, lr}
 8010c58:	4604      	mov	r4, r0
 8010c5a:	d001      	beq.n	8010c60 <cleanup_stdio+0x10>
 8010c5c:	f001 fe5c 	bl	8012918 <_fflush_r>
 8010c60:	68a1      	ldr	r1, [r4, #8]
 8010c62:	4b09      	ldr	r3, [pc, #36]	; (8010c88 <cleanup_stdio+0x38>)
 8010c64:	4299      	cmp	r1, r3
 8010c66:	d002      	beq.n	8010c6e <cleanup_stdio+0x1e>
 8010c68:	4620      	mov	r0, r4
 8010c6a:	f001 fe55 	bl	8012918 <_fflush_r>
 8010c6e:	68e1      	ldr	r1, [r4, #12]
 8010c70:	4b06      	ldr	r3, [pc, #24]	; (8010c8c <cleanup_stdio+0x3c>)
 8010c72:	4299      	cmp	r1, r3
 8010c74:	d004      	beq.n	8010c80 <cleanup_stdio+0x30>
 8010c76:	4620      	mov	r0, r4
 8010c78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010c7c:	f001 be4c 	b.w	8012918 <_fflush_r>
 8010c80:	bd10      	pop	{r4, pc}
 8010c82:	bf00      	nop
 8010c84:	20002928 	.word	0x20002928
 8010c88:	20002990 	.word	0x20002990
 8010c8c:	200029f8 	.word	0x200029f8

08010c90 <global_stdio_init.part.0>:
 8010c90:	b510      	push	{r4, lr}
 8010c92:	4b0b      	ldr	r3, [pc, #44]	; (8010cc0 <global_stdio_init.part.0+0x30>)
 8010c94:	4c0b      	ldr	r4, [pc, #44]	; (8010cc4 <global_stdio_init.part.0+0x34>)
 8010c96:	4a0c      	ldr	r2, [pc, #48]	; (8010cc8 <global_stdio_init.part.0+0x38>)
 8010c98:	601a      	str	r2, [r3, #0]
 8010c9a:	4620      	mov	r0, r4
 8010c9c:	2200      	movs	r2, #0
 8010c9e:	2104      	movs	r1, #4
 8010ca0:	f7ff ff94 	bl	8010bcc <std>
 8010ca4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8010ca8:	2201      	movs	r2, #1
 8010caa:	2109      	movs	r1, #9
 8010cac:	f7ff ff8e 	bl	8010bcc <std>
 8010cb0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8010cb4:	2202      	movs	r2, #2
 8010cb6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010cba:	2112      	movs	r1, #18
 8010cbc:	f7ff bf86 	b.w	8010bcc <std>
 8010cc0:	20002a60 	.word	0x20002a60
 8010cc4:	20002928 	.word	0x20002928
 8010cc8:	08010c39 	.word	0x08010c39

08010ccc <__sfp_lock_acquire>:
 8010ccc:	4801      	ldr	r0, [pc, #4]	; (8010cd4 <__sfp_lock_acquire+0x8>)
 8010cce:	f000 b972 	b.w	8010fb6 <__retarget_lock_acquire_recursive>
 8010cd2:	bf00      	nop
 8010cd4:	20002a69 	.word	0x20002a69

08010cd8 <__sfp_lock_release>:
 8010cd8:	4801      	ldr	r0, [pc, #4]	; (8010ce0 <__sfp_lock_release+0x8>)
 8010cda:	f000 b96d 	b.w	8010fb8 <__retarget_lock_release_recursive>
 8010cde:	bf00      	nop
 8010ce0:	20002a69 	.word	0x20002a69

08010ce4 <__sinit>:
 8010ce4:	b510      	push	{r4, lr}
 8010ce6:	4604      	mov	r4, r0
 8010ce8:	f7ff fff0 	bl	8010ccc <__sfp_lock_acquire>
 8010cec:	6a23      	ldr	r3, [r4, #32]
 8010cee:	b11b      	cbz	r3, 8010cf8 <__sinit+0x14>
 8010cf0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010cf4:	f7ff bff0 	b.w	8010cd8 <__sfp_lock_release>
 8010cf8:	4b04      	ldr	r3, [pc, #16]	; (8010d0c <__sinit+0x28>)
 8010cfa:	6223      	str	r3, [r4, #32]
 8010cfc:	4b04      	ldr	r3, [pc, #16]	; (8010d10 <__sinit+0x2c>)
 8010cfe:	681b      	ldr	r3, [r3, #0]
 8010d00:	2b00      	cmp	r3, #0
 8010d02:	d1f5      	bne.n	8010cf0 <__sinit+0xc>
 8010d04:	f7ff ffc4 	bl	8010c90 <global_stdio_init.part.0>
 8010d08:	e7f2      	b.n	8010cf0 <__sinit+0xc>
 8010d0a:	bf00      	nop
 8010d0c:	08010c51 	.word	0x08010c51
 8010d10:	20002a60 	.word	0x20002a60

08010d14 <_fwalk_sglue>:
 8010d14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010d18:	4607      	mov	r7, r0
 8010d1a:	4688      	mov	r8, r1
 8010d1c:	4614      	mov	r4, r2
 8010d1e:	2600      	movs	r6, #0
 8010d20:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010d24:	f1b9 0901 	subs.w	r9, r9, #1
 8010d28:	d505      	bpl.n	8010d36 <_fwalk_sglue+0x22>
 8010d2a:	6824      	ldr	r4, [r4, #0]
 8010d2c:	2c00      	cmp	r4, #0
 8010d2e:	d1f7      	bne.n	8010d20 <_fwalk_sglue+0xc>
 8010d30:	4630      	mov	r0, r6
 8010d32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010d36:	89ab      	ldrh	r3, [r5, #12]
 8010d38:	2b01      	cmp	r3, #1
 8010d3a:	d907      	bls.n	8010d4c <_fwalk_sglue+0x38>
 8010d3c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010d40:	3301      	adds	r3, #1
 8010d42:	d003      	beq.n	8010d4c <_fwalk_sglue+0x38>
 8010d44:	4629      	mov	r1, r5
 8010d46:	4638      	mov	r0, r7
 8010d48:	47c0      	blx	r8
 8010d4a:	4306      	orrs	r6, r0
 8010d4c:	3568      	adds	r5, #104	; 0x68
 8010d4e:	e7e9      	b.n	8010d24 <_fwalk_sglue+0x10>

08010d50 <__sread>:
 8010d50:	b510      	push	{r4, lr}
 8010d52:	460c      	mov	r4, r1
 8010d54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010d58:	f000 f8de 	bl	8010f18 <_read_r>
 8010d5c:	2800      	cmp	r0, #0
 8010d5e:	bfab      	itete	ge
 8010d60:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8010d62:	89a3      	ldrhlt	r3, [r4, #12]
 8010d64:	181b      	addge	r3, r3, r0
 8010d66:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8010d6a:	bfac      	ite	ge
 8010d6c:	6563      	strge	r3, [r4, #84]	; 0x54
 8010d6e:	81a3      	strhlt	r3, [r4, #12]
 8010d70:	bd10      	pop	{r4, pc}

08010d72 <__swrite>:
 8010d72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010d76:	461f      	mov	r7, r3
 8010d78:	898b      	ldrh	r3, [r1, #12]
 8010d7a:	05db      	lsls	r3, r3, #23
 8010d7c:	4605      	mov	r5, r0
 8010d7e:	460c      	mov	r4, r1
 8010d80:	4616      	mov	r6, r2
 8010d82:	d505      	bpl.n	8010d90 <__swrite+0x1e>
 8010d84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010d88:	2302      	movs	r3, #2
 8010d8a:	2200      	movs	r2, #0
 8010d8c:	f000 f8b2 	bl	8010ef4 <_lseek_r>
 8010d90:	89a3      	ldrh	r3, [r4, #12]
 8010d92:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010d96:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8010d9a:	81a3      	strh	r3, [r4, #12]
 8010d9c:	4632      	mov	r2, r6
 8010d9e:	463b      	mov	r3, r7
 8010da0:	4628      	mov	r0, r5
 8010da2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010da6:	f000 b8c9 	b.w	8010f3c <_write_r>

08010daa <__sseek>:
 8010daa:	b510      	push	{r4, lr}
 8010dac:	460c      	mov	r4, r1
 8010dae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010db2:	f000 f89f 	bl	8010ef4 <_lseek_r>
 8010db6:	1c43      	adds	r3, r0, #1
 8010db8:	89a3      	ldrh	r3, [r4, #12]
 8010dba:	bf15      	itete	ne
 8010dbc:	6560      	strne	r0, [r4, #84]	; 0x54
 8010dbe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8010dc2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8010dc6:	81a3      	strheq	r3, [r4, #12]
 8010dc8:	bf18      	it	ne
 8010dca:	81a3      	strhne	r3, [r4, #12]
 8010dcc:	bd10      	pop	{r4, pc}

08010dce <__sclose>:
 8010dce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010dd2:	f000 b87f 	b.w	8010ed4 <_close_r>

08010dd6 <_vsniprintf_r>:
 8010dd6:	b530      	push	{r4, r5, lr}
 8010dd8:	4614      	mov	r4, r2
 8010dda:	2c00      	cmp	r4, #0
 8010ddc:	b09b      	sub	sp, #108	; 0x6c
 8010dde:	4605      	mov	r5, r0
 8010de0:	461a      	mov	r2, r3
 8010de2:	da05      	bge.n	8010df0 <_vsniprintf_r+0x1a>
 8010de4:	238b      	movs	r3, #139	; 0x8b
 8010de6:	6003      	str	r3, [r0, #0]
 8010de8:	f04f 30ff 	mov.w	r0, #4294967295
 8010dec:	b01b      	add	sp, #108	; 0x6c
 8010dee:	bd30      	pop	{r4, r5, pc}
 8010df0:	f44f 7302 	mov.w	r3, #520	; 0x208
 8010df4:	f8ad 300c 	strh.w	r3, [sp, #12]
 8010df8:	bf14      	ite	ne
 8010dfa:	f104 33ff 	addne.w	r3, r4, #4294967295
 8010dfe:	4623      	moveq	r3, r4
 8010e00:	9302      	str	r3, [sp, #8]
 8010e02:	9305      	str	r3, [sp, #20]
 8010e04:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010e08:	9100      	str	r1, [sp, #0]
 8010e0a:	9104      	str	r1, [sp, #16]
 8010e0c:	f8ad 300e 	strh.w	r3, [sp, #14]
 8010e10:	4669      	mov	r1, sp
 8010e12:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8010e14:	f001 fa6c 	bl	80122f0 <_svfiprintf_r>
 8010e18:	1c43      	adds	r3, r0, #1
 8010e1a:	bfbc      	itt	lt
 8010e1c:	238b      	movlt	r3, #139	; 0x8b
 8010e1e:	602b      	strlt	r3, [r5, #0]
 8010e20:	2c00      	cmp	r4, #0
 8010e22:	d0e3      	beq.n	8010dec <_vsniprintf_r+0x16>
 8010e24:	9b00      	ldr	r3, [sp, #0]
 8010e26:	2200      	movs	r2, #0
 8010e28:	701a      	strb	r2, [r3, #0]
 8010e2a:	e7df      	b.n	8010dec <_vsniprintf_r+0x16>

08010e2c <vsniprintf>:
 8010e2c:	b507      	push	{r0, r1, r2, lr}
 8010e2e:	9300      	str	r3, [sp, #0]
 8010e30:	4613      	mov	r3, r2
 8010e32:	460a      	mov	r2, r1
 8010e34:	4601      	mov	r1, r0
 8010e36:	4803      	ldr	r0, [pc, #12]	; (8010e44 <vsniprintf+0x18>)
 8010e38:	6800      	ldr	r0, [r0, #0]
 8010e3a:	f7ff ffcc 	bl	8010dd6 <_vsniprintf_r>
 8010e3e:	b003      	add	sp, #12
 8010e40:	f85d fb04 	ldr.w	pc, [sp], #4
 8010e44:	200002d4 	.word	0x200002d4

08010e48 <memset>:
 8010e48:	4402      	add	r2, r0
 8010e4a:	4603      	mov	r3, r0
 8010e4c:	4293      	cmp	r3, r2
 8010e4e:	d100      	bne.n	8010e52 <memset+0xa>
 8010e50:	4770      	bx	lr
 8010e52:	f803 1b01 	strb.w	r1, [r3], #1
 8010e56:	e7f9      	b.n	8010e4c <memset+0x4>

08010e58 <strncmp>:
 8010e58:	b510      	push	{r4, lr}
 8010e5a:	b16a      	cbz	r2, 8010e78 <strncmp+0x20>
 8010e5c:	3901      	subs	r1, #1
 8010e5e:	1884      	adds	r4, r0, r2
 8010e60:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010e64:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8010e68:	429a      	cmp	r2, r3
 8010e6a:	d103      	bne.n	8010e74 <strncmp+0x1c>
 8010e6c:	42a0      	cmp	r0, r4
 8010e6e:	d001      	beq.n	8010e74 <strncmp+0x1c>
 8010e70:	2a00      	cmp	r2, #0
 8010e72:	d1f5      	bne.n	8010e60 <strncmp+0x8>
 8010e74:	1ad0      	subs	r0, r2, r3
 8010e76:	bd10      	pop	{r4, pc}
 8010e78:	4610      	mov	r0, r2
 8010e7a:	e7fc      	b.n	8010e76 <strncmp+0x1e>

08010e7c <__strtok_r>:
 8010e7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010e7e:	b908      	cbnz	r0, 8010e84 <__strtok_r+0x8>
 8010e80:	6810      	ldr	r0, [r2, #0]
 8010e82:	b188      	cbz	r0, 8010ea8 <__strtok_r+0x2c>
 8010e84:	4604      	mov	r4, r0
 8010e86:	4620      	mov	r0, r4
 8010e88:	f814 5b01 	ldrb.w	r5, [r4], #1
 8010e8c:	460f      	mov	r7, r1
 8010e8e:	f817 6b01 	ldrb.w	r6, [r7], #1
 8010e92:	b91e      	cbnz	r6, 8010e9c <__strtok_r+0x20>
 8010e94:	b965      	cbnz	r5, 8010eb0 <__strtok_r+0x34>
 8010e96:	6015      	str	r5, [r2, #0]
 8010e98:	4628      	mov	r0, r5
 8010e9a:	e005      	b.n	8010ea8 <__strtok_r+0x2c>
 8010e9c:	42b5      	cmp	r5, r6
 8010e9e:	d1f6      	bne.n	8010e8e <__strtok_r+0x12>
 8010ea0:	2b00      	cmp	r3, #0
 8010ea2:	d1f0      	bne.n	8010e86 <__strtok_r+0xa>
 8010ea4:	6014      	str	r4, [r2, #0]
 8010ea6:	7003      	strb	r3, [r0, #0]
 8010ea8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010eaa:	461c      	mov	r4, r3
 8010eac:	e00c      	b.n	8010ec8 <__strtok_r+0x4c>
 8010eae:	b915      	cbnz	r5, 8010eb6 <__strtok_r+0x3a>
 8010eb0:	f814 3b01 	ldrb.w	r3, [r4], #1
 8010eb4:	460e      	mov	r6, r1
 8010eb6:	f816 5b01 	ldrb.w	r5, [r6], #1
 8010eba:	42ab      	cmp	r3, r5
 8010ebc:	d1f7      	bne.n	8010eae <__strtok_r+0x32>
 8010ebe:	2b00      	cmp	r3, #0
 8010ec0:	d0f3      	beq.n	8010eaa <__strtok_r+0x2e>
 8010ec2:	2300      	movs	r3, #0
 8010ec4:	f804 3c01 	strb.w	r3, [r4, #-1]
 8010ec8:	6014      	str	r4, [r2, #0]
 8010eca:	e7ed      	b.n	8010ea8 <__strtok_r+0x2c>

08010ecc <strtok_r>:
 8010ecc:	2301      	movs	r3, #1
 8010ece:	f7ff bfd5 	b.w	8010e7c <__strtok_r>
	...

08010ed4 <_close_r>:
 8010ed4:	b538      	push	{r3, r4, r5, lr}
 8010ed6:	4d06      	ldr	r5, [pc, #24]	; (8010ef0 <_close_r+0x1c>)
 8010ed8:	2300      	movs	r3, #0
 8010eda:	4604      	mov	r4, r0
 8010edc:	4608      	mov	r0, r1
 8010ede:	602b      	str	r3, [r5, #0]
 8010ee0:	f7f0 fb7d 	bl	80015de <_close>
 8010ee4:	1c43      	adds	r3, r0, #1
 8010ee6:	d102      	bne.n	8010eee <_close_r+0x1a>
 8010ee8:	682b      	ldr	r3, [r5, #0]
 8010eea:	b103      	cbz	r3, 8010eee <_close_r+0x1a>
 8010eec:	6023      	str	r3, [r4, #0]
 8010eee:	bd38      	pop	{r3, r4, r5, pc}
 8010ef0:	20002a64 	.word	0x20002a64

08010ef4 <_lseek_r>:
 8010ef4:	b538      	push	{r3, r4, r5, lr}
 8010ef6:	4d07      	ldr	r5, [pc, #28]	; (8010f14 <_lseek_r+0x20>)
 8010ef8:	4604      	mov	r4, r0
 8010efa:	4608      	mov	r0, r1
 8010efc:	4611      	mov	r1, r2
 8010efe:	2200      	movs	r2, #0
 8010f00:	602a      	str	r2, [r5, #0]
 8010f02:	461a      	mov	r2, r3
 8010f04:	f7f0 fb92 	bl	800162c <_lseek>
 8010f08:	1c43      	adds	r3, r0, #1
 8010f0a:	d102      	bne.n	8010f12 <_lseek_r+0x1e>
 8010f0c:	682b      	ldr	r3, [r5, #0]
 8010f0e:	b103      	cbz	r3, 8010f12 <_lseek_r+0x1e>
 8010f10:	6023      	str	r3, [r4, #0]
 8010f12:	bd38      	pop	{r3, r4, r5, pc}
 8010f14:	20002a64 	.word	0x20002a64

08010f18 <_read_r>:
 8010f18:	b538      	push	{r3, r4, r5, lr}
 8010f1a:	4d07      	ldr	r5, [pc, #28]	; (8010f38 <_read_r+0x20>)
 8010f1c:	4604      	mov	r4, r0
 8010f1e:	4608      	mov	r0, r1
 8010f20:	4611      	mov	r1, r2
 8010f22:	2200      	movs	r2, #0
 8010f24:	602a      	str	r2, [r5, #0]
 8010f26:	461a      	mov	r2, r3
 8010f28:	f7f0 fb20 	bl	800156c <_read>
 8010f2c:	1c43      	adds	r3, r0, #1
 8010f2e:	d102      	bne.n	8010f36 <_read_r+0x1e>
 8010f30:	682b      	ldr	r3, [r5, #0]
 8010f32:	b103      	cbz	r3, 8010f36 <_read_r+0x1e>
 8010f34:	6023      	str	r3, [r4, #0]
 8010f36:	bd38      	pop	{r3, r4, r5, pc}
 8010f38:	20002a64 	.word	0x20002a64

08010f3c <_write_r>:
 8010f3c:	b538      	push	{r3, r4, r5, lr}
 8010f3e:	4d07      	ldr	r5, [pc, #28]	; (8010f5c <_write_r+0x20>)
 8010f40:	4604      	mov	r4, r0
 8010f42:	4608      	mov	r0, r1
 8010f44:	4611      	mov	r1, r2
 8010f46:	2200      	movs	r2, #0
 8010f48:	602a      	str	r2, [r5, #0]
 8010f4a:	461a      	mov	r2, r3
 8010f4c:	f7f0 fb2b 	bl	80015a6 <_write>
 8010f50:	1c43      	adds	r3, r0, #1
 8010f52:	d102      	bne.n	8010f5a <_write_r+0x1e>
 8010f54:	682b      	ldr	r3, [r5, #0]
 8010f56:	b103      	cbz	r3, 8010f5a <_write_r+0x1e>
 8010f58:	6023      	str	r3, [r4, #0]
 8010f5a:	bd38      	pop	{r3, r4, r5, pc}
 8010f5c:	20002a64 	.word	0x20002a64

08010f60 <__errno>:
 8010f60:	4b01      	ldr	r3, [pc, #4]	; (8010f68 <__errno+0x8>)
 8010f62:	6818      	ldr	r0, [r3, #0]
 8010f64:	4770      	bx	lr
 8010f66:	bf00      	nop
 8010f68:	200002d4 	.word	0x200002d4

08010f6c <__libc_init_array>:
 8010f6c:	b570      	push	{r4, r5, r6, lr}
 8010f6e:	4d0d      	ldr	r5, [pc, #52]	; (8010fa4 <__libc_init_array+0x38>)
 8010f70:	4c0d      	ldr	r4, [pc, #52]	; (8010fa8 <__libc_init_array+0x3c>)
 8010f72:	1b64      	subs	r4, r4, r5
 8010f74:	10a4      	asrs	r4, r4, #2
 8010f76:	2600      	movs	r6, #0
 8010f78:	42a6      	cmp	r6, r4
 8010f7a:	d109      	bne.n	8010f90 <__libc_init_array+0x24>
 8010f7c:	4d0b      	ldr	r5, [pc, #44]	; (8010fac <__libc_init_array+0x40>)
 8010f7e:	4c0c      	ldr	r4, [pc, #48]	; (8010fb0 <__libc_init_array+0x44>)
 8010f80:	f002 f84a 	bl	8013018 <_init>
 8010f84:	1b64      	subs	r4, r4, r5
 8010f86:	10a4      	asrs	r4, r4, #2
 8010f88:	2600      	movs	r6, #0
 8010f8a:	42a6      	cmp	r6, r4
 8010f8c:	d105      	bne.n	8010f9a <__libc_init_array+0x2e>
 8010f8e:	bd70      	pop	{r4, r5, r6, pc}
 8010f90:	f855 3b04 	ldr.w	r3, [r5], #4
 8010f94:	4798      	blx	r3
 8010f96:	3601      	adds	r6, #1
 8010f98:	e7ee      	b.n	8010f78 <__libc_init_array+0xc>
 8010f9a:	f855 3b04 	ldr.w	r3, [r5], #4
 8010f9e:	4798      	blx	r3
 8010fa0:	3601      	adds	r6, #1
 8010fa2:	e7f2      	b.n	8010f8a <__libc_init_array+0x1e>
 8010fa4:	08013a04 	.word	0x08013a04
 8010fa8:	08013a04 	.word	0x08013a04
 8010fac:	08013a04 	.word	0x08013a04
 8010fb0:	08013a08 	.word	0x08013a08

08010fb4 <__retarget_lock_init_recursive>:
 8010fb4:	4770      	bx	lr

08010fb6 <__retarget_lock_acquire_recursive>:
 8010fb6:	4770      	bx	lr

08010fb8 <__retarget_lock_release_recursive>:
 8010fb8:	4770      	bx	lr

08010fba <strcpy>:
 8010fba:	4603      	mov	r3, r0
 8010fbc:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010fc0:	f803 2b01 	strb.w	r2, [r3], #1
 8010fc4:	2a00      	cmp	r2, #0
 8010fc6:	d1f9      	bne.n	8010fbc <strcpy+0x2>
 8010fc8:	4770      	bx	lr

08010fca <memcpy>:
 8010fca:	440a      	add	r2, r1
 8010fcc:	4291      	cmp	r1, r2
 8010fce:	f100 33ff 	add.w	r3, r0, #4294967295
 8010fd2:	d100      	bne.n	8010fd6 <memcpy+0xc>
 8010fd4:	4770      	bx	lr
 8010fd6:	b510      	push	{r4, lr}
 8010fd8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010fdc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010fe0:	4291      	cmp	r1, r2
 8010fe2:	d1f9      	bne.n	8010fd8 <memcpy+0xe>
 8010fe4:	bd10      	pop	{r4, pc}
	...

08010fe8 <nan>:
 8010fe8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8010ff0 <nan+0x8>
 8010fec:	4770      	bx	lr
 8010fee:	bf00      	nop
 8010ff0:	00000000 	.word	0x00000000
 8010ff4:	7ff80000 	.word	0x7ff80000

08010ff8 <nanf>:
 8010ff8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8011000 <nanf+0x8>
 8010ffc:	4770      	bx	lr
 8010ffe:	bf00      	nop
 8011000:	7fc00000 	.word	0x7fc00000

08011004 <_free_r>:
 8011004:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011006:	2900      	cmp	r1, #0
 8011008:	d044      	beq.n	8011094 <_free_r+0x90>
 801100a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801100e:	9001      	str	r0, [sp, #4]
 8011010:	2b00      	cmp	r3, #0
 8011012:	f1a1 0404 	sub.w	r4, r1, #4
 8011016:	bfb8      	it	lt
 8011018:	18e4      	addlt	r4, r4, r3
 801101a:	f000 fc49 	bl	80118b0 <__malloc_lock>
 801101e:	4a1e      	ldr	r2, [pc, #120]	; (8011098 <_free_r+0x94>)
 8011020:	9801      	ldr	r0, [sp, #4]
 8011022:	6813      	ldr	r3, [r2, #0]
 8011024:	b933      	cbnz	r3, 8011034 <_free_r+0x30>
 8011026:	6063      	str	r3, [r4, #4]
 8011028:	6014      	str	r4, [r2, #0]
 801102a:	b003      	add	sp, #12
 801102c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011030:	f000 bc44 	b.w	80118bc <__malloc_unlock>
 8011034:	42a3      	cmp	r3, r4
 8011036:	d908      	bls.n	801104a <_free_r+0x46>
 8011038:	6825      	ldr	r5, [r4, #0]
 801103a:	1961      	adds	r1, r4, r5
 801103c:	428b      	cmp	r3, r1
 801103e:	bf01      	itttt	eq
 8011040:	6819      	ldreq	r1, [r3, #0]
 8011042:	685b      	ldreq	r3, [r3, #4]
 8011044:	1949      	addeq	r1, r1, r5
 8011046:	6021      	streq	r1, [r4, #0]
 8011048:	e7ed      	b.n	8011026 <_free_r+0x22>
 801104a:	461a      	mov	r2, r3
 801104c:	685b      	ldr	r3, [r3, #4]
 801104e:	b10b      	cbz	r3, 8011054 <_free_r+0x50>
 8011050:	42a3      	cmp	r3, r4
 8011052:	d9fa      	bls.n	801104a <_free_r+0x46>
 8011054:	6811      	ldr	r1, [r2, #0]
 8011056:	1855      	adds	r5, r2, r1
 8011058:	42a5      	cmp	r5, r4
 801105a:	d10b      	bne.n	8011074 <_free_r+0x70>
 801105c:	6824      	ldr	r4, [r4, #0]
 801105e:	4421      	add	r1, r4
 8011060:	1854      	adds	r4, r2, r1
 8011062:	42a3      	cmp	r3, r4
 8011064:	6011      	str	r1, [r2, #0]
 8011066:	d1e0      	bne.n	801102a <_free_r+0x26>
 8011068:	681c      	ldr	r4, [r3, #0]
 801106a:	685b      	ldr	r3, [r3, #4]
 801106c:	6053      	str	r3, [r2, #4]
 801106e:	440c      	add	r4, r1
 8011070:	6014      	str	r4, [r2, #0]
 8011072:	e7da      	b.n	801102a <_free_r+0x26>
 8011074:	d902      	bls.n	801107c <_free_r+0x78>
 8011076:	230c      	movs	r3, #12
 8011078:	6003      	str	r3, [r0, #0]
 801107a:	e7d6      	b.n	801102a <_free_r+0x26>
 801107c:	6825      	ldr	r5, [r4, #0]
 801107e:	1961      	adds	r1, r4, r5
 8011080:	428b      	cmp	r3, r1
 8011082:	bf04      	itt	eq
 8011084:	6819      	ldreq	r1, [r3, #0]
 8011086:	685b      	ldreq	r3, [r3, #4]
 8011088:	6063      	str	r3, [r4, #4]
 801108a:	bf04      	itt	eq
 801108c:	1949      	addeq	r1, r1, r5
 801108e:	6021      	streq	r1, [r4, #0]
 8011090:	6054      	str	r4, [r2, #4]
 8011092:	e7ca      	b.n	801102a <_free_r+0x26>
 8011094:	b003      	add	sp, #12
 8011096:	bd30      	pop	{r4, r5, pc}
 8011098:	20002a6c 	.word	0x20002a6c

0801109c <rshift>:
 801109c:	6903      	ldr	r3, [r0, #16]
 801109e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80110a2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80110a6:	ea4f 1261 	mov.w	r2, r1, asr #5
 80110aa:	f100 0414 	add.w	r4, r0, #20
 80110ae:	dd45      	ble.n	801113c <rshift+0xa0>
 80110b0:	f011 011f 	ands.w	r1, r1, #31
 80110b4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80110b8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80110bc:	d10c      	bne.n	80110d8 <rshift+0x3c>
 80110be:	f100 0710 	add.w	r7, r0, #16
 80110c2:	4629      	mov	r1, r5
 80110c4:	42b1      	cmp	r1, r6
 80110c6:	d334      	bcc.n	8011132 <rshift+0x96>
 80110c8:	1a9b      	subs	r3, r3, r2
 80110ca:	009b      	lsls	r3, r3, #2
 80110cc:	1eea      	subs	r2, r5, #3
 80110ce:	4296      	cmp	r6, r2
 80110d0:	bf38      	it	cc
 80110d2:	2300      	movcc	r3, #0
 80110d4:	4423      	add	r3, r4
 80110d6:	e015      	b.n	8011104 <rshift+0x68>
 80110d8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80110dc:	f1c1 0820 	rsb	r8, r1, #32
 80110e0:	40cf      	lsrs	r7, r1
 80110e2:	f105 0e04 	add.w	lr, r5, #4
 80110e6:	46a1      	mov	r9, r4
 80110e8:	4576      	cmp	r6, lr
 80110ea:	46f4      	mov	ip, lr
 80110ec:	d815      	bhi.n	801111a <rshift+0x7e>
 80110ee:	1a9a      	subs	r2, r3, r2
 80110f0:	0092      	lsls	r2, r2, #2
 80110f2:	3a04      	subs	r2, #4
 80110f4:	3501      	adds	r5, #1
 80110f6:	42ae      	cmp	r6, r5
 80110f8:	bf38      	it	cc
 80110fa:	2200      	movcc	r2, #0
 80110fc:	18a3      	adds	r3, r4, r2
 80110fe:	50a7      	str	r7, [r4, r2]
 8011100:	b107      	cbz	r7, 8011104 <rshift+0x68>
 8011102:	3304      	adds	r3, #4
 8011104:	1b1a      	subs	r2, r3, r4
 8011106:	42a3      	cmp	r3, r4
 8011108:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801110c:	bf08      	it	eq
 801110e:	2300      	moveq	r3, #0
 8011110:	6102      	str	r2, [r0, #16]
 8011112:	bf08      	it	eq
 8011114:	6143      	streq	r3, [r0, #20]
 8011116:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801111a:	f8dc c000 	ldr.w	ip, [ip]
 801111e:	fa0c fc08 	lsl.w	ip, ip, r8
 8011122:	ea4c 0707 	orr.w	r7, ip, r7
 8011126:	f849 7b04 	str.w	r7, [r9], #4
 801112a:	f85e 7b04 	ldr.w	r7, [lr], #4
 801112e:	40cf      	lsrs	r7, r1
 8011130:	e7da      	b.n	80110e8 <rshift+0x4c>
 8011132:	f851 cb04 	ldr.w	ip, [r1], #4
 8011136:	f847 cf04 	str.w	ip, [r7, #4]!
 801113a:	e7c3      	b.n	80110c4 <rshift+0x28>
 801113c:	4623      	mov	r3, r4
 801113e:	e7e1      	b.n	8011104 <rshift+0x68>

08011140 <__hexdig_fun>:
 8011140:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8011144:	2b09      	cmp	r3, #9
 8011146:	d802      	bhi.n	801114e <__hexdig_fun+0xe>
 8011148:	3820      	subs	r0, #32
 801114a:	b2c0      	uxtb	r0, r0
 801114c:	4770      	bx	lr
 801114e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8011152:	2b05      	cmp	r3, #5
 8011154:	d801      	bhi.n	801115a <__hexdig_fun+0x1a>
 8011156:	3847      	subs	r0, #71	; 0x47
 8011158:	e7f7      	b.n	801114a <__hexdig_fun+0xa>
 801115a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801115e:	2b05      	cmp	r3, #5
 8011160:	d801      	bhi.n	8011166 <__hexdig_fun+0x26>
 8011162:	3827      	subs	r0, #39	; 0x27
 8011164:	e7f1      	b.n	801114a <__hexdig_fun+0xa>
 8011166:	2000      	movs	r0, #0
 8011168:	4770      	bx	lr
	...

0801116c <__gethex>:
 801116c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011170:	4617      	mov	r7, r2
 8011172:	680a      	ldr	r2, [r1, #0]
 8011174:	b085      	sub	sp, #20
 8011176:	f102 0b02 	add.w	fp, r2, #2
 801117a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 801117e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8011182:	4681      	mov	r9, r0
 8011184:	468a      	mov	sl, r1
 8011186:	9302      	str	r3, [sp, #8]
 8011188:	32fe      	adds	r2, #254	; 0xfe
 801118a:	eb02 030b 	add.w	r3, r2, fp
 801118e:	46d8      	mov	r8, fp
 8011190:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8011194:	9301      	str	r3, [sp, #4]
 8011196:	2830      	cmp	r0, #48	; 0x30
 8011198:	d0f7      	beq.n	801118a <__gethex+0x1e>
 801119a:	f7ff ffd1 	bl	8011140 <__hexdig_fun>
 801119e:	4604      	mov	r4, r0
 80111a0:	2800      	cmp	r0, #0
 80111a2:	d138      	bne.n	8011216 <__gethex+0xaa>
 80111a4:	49a7      	ldr	r1, [pc, #668]	; (8011444 <__gethex+0x2d8>)
 80111a6:	2201      	movs	r2, #1
 80111a8:	4640      	mov	r0, r8
 80111aa:	f7ff fe55 	bl	8010e58 <strncmp>
 80111ae:	4606      	mov	r6, r0
 80111b0:	2800      	cmp	r0, #0
 80111b2:	d169      	bne.n	8011288 <__gethex+0x11c>
 80111b4:	f898 0001 	ldrb.w	r0, [r8, #1]
 80111b8:	465d      	mov	r5, fp
 80111ba:	f7ff ffc1 	bl	8011140 <__hexdig_fun>
 80111be:	2800      	cmp	r0, #0
 80111c0:	d064      	beq.n	801128c <__gethex+0x120>
 80111c2:	465a      	mov	r2, fp
 80111c4:	7810      	ldrb	r0, [r2, #0]
 80111c6:	2830      	cmp	r0, #48	; 0x30
 80111c8:	4690      	mov	r8, r2
 80111ca:	f102 0201 	add.w	r2, r2, #1
 80111ce:	d0f9      	beq.n	80111c4 <__gethex+0x58>
 80111d0:	f7ff ffb6 	bl	8011140 <__hexdig_fun>
 80111d4:	2301      	movs	r3, #1
 80111d6:	fab0 f480 	clz	r4, r0
 80111da:	0964      	lsrs	r4, r4, #5
 80111dc:	465e      	mov	r6, fp
 80111de:	9301      	str	r3, [sp, #4]
 80111e0:	4642      	mov	r2, r8
 80111e2:	4615      	mov	r5, r2
 80111e4:	3201      	adds	r2, #1
 80111e6:	7828      	ldrb	r0, [r5, #0]
 80111e8:	f7ff ffaa 	bl	8011140 <__hexdig_fun>
 80111ec:	2800      	cmp	r0, #0
 80111ee:	d1f8      	bne.n	80111e2 <__gethex+0x76>
 80111f0:	4994      	ldr	r1, [pc, #592]	; (8011444 <__gethex+0x2d8>)
 80111f2:	2201      	movs	r2, #1
 80111f4:	4628      	mov	r0, r5
 80111f6:	f7ff fe2f 	bl	8010e58 <strncmp>
 80111fa:	b978      	cbnz	r0, 801121c <__gethex+0xb0>
 80111fc:	b946      	cbnz	r6, 8011210 <__gethex+0xa4>
 80111fe:	1c6e      	adds	r6, r5, #1
 8011200:	4632      	mov	r2, r6
 8011202:	4615      	mov	r5, r2
 8011204:	3201      	adds	r2, #1
 8011206:	7828      	ldrb	r0, [r5, #0]
 8011208:	f7ff ff9a 	bl	8011140 <__hexdig_fun>
 801120c:	2800      	cmp	r0, #0
 801120e:	d1f8      	bne.n	8011202 <__gethex+0x96>
 8011210:	1b73      	subs	r3, r6, r5
 8011212:	009e      	lsls	r6, r3, #2
 8011214:	e004      	b.n	8011220 <__gethex+0xb4>
 8011216:	2400      	movs	r4, #0
 8011218:	4626      	mov	r6, r4
 801121a:	e7e1      	b.n	80111e0 <__gethex+0x74>
 801121c:	2e00      	cmp	r6, #0
 801121e:	d1f7      	bne.n	8011210 <__gethex+0xa4>
 8011220:	782b      	ldrb	r3, [r5, #0]
 8011222:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8011226:	2b50      	cmp	r3, #80	; 0x50
 8011228:	d13d      	bne.n	80112a6 <__gethex+0x13a>
 801122a:	786b      	ldrb	r3, [r5, #1]
 801122c:	2b2b      	cmp	r3, #43	; 0x2b
 801122e:	d02f      	beq.n	8011290 <__gethex+0x124>
 8011230:	2b2d      	cmp	r3, #45	; 0x2d
 8011232:	d031      	beq.n	8011298 <__gethex+0x12c>
 8011234:	1c69      	adds	r1, r5, #1
 8011236:	f04f 0b00 	mov.w	fp, #0
 801123a:	7808      	ldrb	r0, [r1, #0]
 801123c:	f7ff ff80 	bl	8011140 <__hexdig_fun>
 8011240:	1e42      	subs	r2, r0, #1
 8011242:	b2d2      	uxtb	r2, r2
 8011244:	2a18      	cmp	r2, #24
 8011246:	d82e      	bhi.n	80112a6 <__gethex+0x13a>
 8011248:	f1a0 0210 	sub.w	r2, r0, #16
 801124c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8011250:	f7ff ff76 	bl	8011140 <__hexdig_fun>
 8011254:	f100 3cff 	add.w	ip, r0, #4294967295
 8011258:	fa5f fc8c 	uxtb.w	ip, ip
 801125c:	f1bc 0f18 	cmp.w	ip, #24
 8011260:	d91d      	bls.n	801129e <__gethex+0x132>
 8011262:	f1bb 0f00 	cmp.w	fp, #0
 8011266:	d000      	beq.n	801126a <__gethex+0xfe>
 8011268:	4252      	negs	r2, r2
 801126a:	4416      	add	r6, r2
 801126c:	f8ca 1000 	str.w	r1, [sl]
 8011270:	b1dc      	cbz	r4, 80112aa <__gethex+0x13e>
 8011272:	9b01      	ldr	r3, [sp, #4]
 8011274:	2b00      	cmp	r3, #0
 8011276:	bf14      	ite	ne
 8011278:	f04f 0800 	movne.w	r8, #0
 801127c:	f04f 0806 	moveq.w	r8, #6
 8011280:	4640      	mov	r0, r8
 8011282:	b005      	add	sp, #20
 8011284:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011288:	4645      	mov	r5, r8
 801128a:	4626      	mov	r6, r4
 801128c:	2401      	movs	r4, #1
 801128e:	e7c7      	b.n	8011220 <__gethex+0xb4>
 8011290:	f04f 0b00 	mov.w	fp, #0
 8011294:	1ca9      	adds	r1, r5, #2
 8011296:	e7d0      	b.n	801123a <__gethex+0xce>
 8011298:	f04f 0b01 	mov.w	fp, #1
 801129c:	e7fa      	b.n	8011294 <__gethex+0x128>
 801129e:	230a      	movs	r3, #10
 80112a0:	fb03 0002 	mla	r0, r3, r2, r0
 80112a4:	e7d0      	b.n	8011248 <__gethex+0xdc>
 80112a6:	4629      	mov	r1, r5
 80112a8:	e7e0      	b.n	801126c <__gethex+0x100>
 80112aa:	eba5 0308 	sub.w	r3, r5, r8
 80112ae:	3b01      	subs	r3, #1
 80112b0:	4621      	mov	r1, r4
 80112b2:	2b07      	cmp	r3, #7
 80112b4:	dc0a      	bgt.n	80112cc <__gethex+0x160>
 80112b6:	4648      	mov	r0, r9
 80112b8:	f000 fb06 	bl	80118c8 <_Balloc>
 80112bc:	4604      	mov	r4, r0
 80112be:	b940      	cbnz	r0, 80112d2 <__gethex+0x166>
 80112c0:	4b61      	ldr	r3, [pc, #388]	; (8011448 <__gethex+0x2dc>)
 80112c2:	4602      	mov	r2, r0
 80112c4:	21e4      	movs	r1, #228	; 0xe4
 80112c6:	4861      	ldr	r0, [pc, #388]	; (801144c <__gethex+0x2e0>)
 80112c8:	f001 fb78 	bl	80129bc <__assert_func>
 80112cc:	3101      	adds	r1, #1
 80112ce:	105b      	asrs	r3, r3, #1
 80112d0:	e7ef      	b.n	80112b2 <__gethex+0x146>
 80112d2:	f100 0a14 	add.w	sl, r0, #20
 80112d6:	2300      	movs	r3, #0
 80112d8:	495a      	ldr	r1, [pc, #360]	; (8011444 <__gethex+0x2d8>)
 80112da:	f8cd a004 	str.w	sl, [sp, #4]
 80112de:	469b      	mov	fp, r3
 80112e0:	45a8      	cmp	r8, r5
 80112e2:	d342      	bcc.n	801136a <__gethex+0x1fe>
 80112e4:	9801      	ldr	r0, [sp, #4]
 80112e6:	f840 bb04 	str.w	fp, [r0], #4
 80112ea:	eba0 000a 	sub.w	r0, r0, sl
 80112ee:	1080      	asrs	r0, r0, #2
 80112f0:	6120      	str	r0, [r4, #16]
 80112f2:	ea4f 1840 	mov.w	r8, r0, lsl #5
 80112f6:	4658      	mov	r0, fp
 80112f8:	f000 fbd8 	bl	8011aac <__hi0bits>
 80112fc:	683d      	ldr	r5, [r7, #0]
 80112fe:	eba8 0000 	sub.w	r0, r8, r0
 8011302:	42a8      	cmp	r0, r5
 8011304:	dd59      	ble.n	80113ba <__gethex+0x24e>
 8011306:	eba0 0805 	sub.w	r8, r0, r5
 801130a:	4641      	mov	r1, r8
 801130c:	4620      	mov	r0, r4
 801130e:	f000 ff67 	bl	80121e0 <__any_on>
 8011312:	4683      	mov	fp, r0
 8011314:	b1b8      	cbz	r0, 8011346 <__gethex+0x1da>
 8011316:	f108 33ff 	add.w	r3, r8, #4294967295
 801131a:	1159      	asrs	r1, r3, #5
 801131c:	f003 021f 	and.w	r2, r3, #31
 8011320:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8011324:	f04f 0b01 	mov.w	fp, #1
 8011328:	fa0b f202 	lsl.w	r2, fp, r2
 801132c:	420a      	tst	r2, r1
 801132e:	d00a      	beq.n	8011346 <__gethex+0x1da>
 8011330:	455b      	cmp	r3, fp
 8011332:	dd06      	ble.n	8011342 <__gethex+0x1d6>
 8011334:	f1a8 0102 	sub.w	r1, r8, #2
 8011338:	4620      	mov	r0, r4
 801133a:	f000 ff51 	bl	80121e0 <__any_on>
 801133e:	2800      	cmp	r0, #0
 8011340:	d138      	bne.n	80113b4 <__gethex+0x248>
 8011342:	f04f 0b02 	mov.w	fp, #2
 8011346:	4641      	mov	r1, r8
 8011348:	4620      	mov	r0, r4
 801134a:	f7ff fea7 	bl	801109c <rshift>
 801134e:	4446      	add	r6, r8
 8011350:	68bb      	ldr	r3, [r7, #8]
 8011352:	42b3      	cmp	r3, r6
 8011354:	da41      	bge.n	80113da <__gethex+0x26e>
 8011356:	4621      	mov	r1, r4
 8011358:	4648      	mov	r0, r9
 801135a:	f000 faf5 	bl	8011948 <_Bfree>
 801135e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011360:	2300      	movs	r3, #0
 8011362:	6013      	str	r3, [r2, #0]
 8011364:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8011368:	e78a      	b.n	8011280 <__gethex+0x114>
 801136a:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 801136e:	2a2e      	cmp	r2, #46	; 0x2e
 8011370:	d014      	beq.n	801139c <__gethex+0x230>
 8011372:	2b20      	cmp	r3, #32
 8011374:	d106      	bne.n	8011384 <__gethex+0x218>
 8011376:	9b01      	ldr	r3, [sp, #4]
 8011378:	f843 bb04 	str.w	fp, [r3], #4
 801137c:	f04f 0b00 	mov.w	fp, #0
 8011380:	9301      	str	r3, [sp, #4]
 8011382:	465b      	mov	r3, fp
 8011384:	7828      	ldrb	r0, [r5, #0]
 8011386:	9303      	str	r3, [sp, #12]
 8011388:	f7ff feda 	bl	8011140 <__hexdig_fun>
 801138c:	9b03      	ldr	r3, [sp, #12]
 801138e:	f000 000f 	and.w	r0, r0, #15
 8011392:	4098      	lsls	r0, r3
 8011394:	ea4b 0b00 	orr.w	fp, fp, r0
 8011398:	3304      	adds	r3, #4
 801139a:	e7a1      	b.n	80112e0 <__gethex+0x174>
 801139c:	45a8      	cmp	r8, r5
 801139e:	d8e8      	bhi.n	8011372 <__gethex+0x206>
 80113a0:	2201      	movs	r2, #1
 80113a2:	4628      	mov	r0, r5
 80113a4:	9303      	str	r3, [sp, #12]
 80113a6:	f7ff fd57 	bl	8010e58 <strncmp>
 80113aa:	4926      	ldr	r1, [pc, #152]	; (8011444 <__gethex+0x2d8>)
 80113ac:	9b03      	ldr	r3, [sp, #12]
 80113ae:	2800      	cmp	r0, #0
 80113b0:	d1df      	bne.n	8011372 <__gethex+0x206>
 80113b2:	e795      	b.n	80112e0 <__gethex+0x174>
 80113b4:	f04f 0b03 	mov.w	fp, #3
 80113b8:	e7c5      	b.n	8011346 <__gethex+0x1da>
 80113ba:	da0b      	bge.n	80113d4 <__gethex+0x268>
 80113bc:	eba5 0800 	sub.w	r8, r5, r0
 80113c0:	4621      	mov	r1, r4
 80113c2:	4642      	mov	r2, r8
 80113c4:	4648      	mov	r0, r9
 80113c6:	f000 fcd9 	bl	8011d7c <__lshift>
 80113ca:	eba6 0608 	sub.w	r6, r6, r8
 80113ce:	4604      	mov	r4, r0
 80113d0:	f100 0a14 	add.w	sl, r0, #20
 80113d4:	f04f 0b00 	mov.w	fp, #0
 80113d8:	e7ba      	b.n	8011350 <__gethex+0x1e4>
 80113da:	687b      	ldr	r3, [r7, #4]
 80113dc:	42b3      	cmp	r3, r6
 80113de:	dd73      	ble.n	80114c8 <__gethex+0x35c>
 80113e0:	1b9e      	subs	r6, r3, r6
 80113e2:	42b5      	cmp	r5, r6
 80113e4:	dc34      	bgt.n	8011450 <__gethex+0x2e4>
 80113e6:	68fb      	ldr	r3, [r7, #12]
 80113e8:	2b02      	cmp	r3, #2
 80113ea:	d023      	beq.n	8011434 <__gethex+0x2c8>
 80113ec:	2b03      	cmp	r3, #3
 80113ee:	d025      	beq.n	801143c <__gethex+0x2d0>
 80113f0:	2b01      	cmp	r3, #1
 80113f2:	d115      	bne.n	8011420 <__gethex+0x2b4>
 80113f4:	42b5      	cmp	r5, r6
 80113f6:	d113      	bne.n	8011420 <__gethex+0x2b4>
 80113f8:	2d01      	cmp	r5, #1
 80113fa:	d10b      	bne.n	8011414 <__gethex+0x2a8>
 80113fc:	9a02      	ldr	r2, [sp, #8]
 80113fe:	687b      	ldr	r3, [r7, #4]
 8011400:	6013      	str	r3, [r2, #0]
 8011402:	2301      	movs	r3, #1
 8011404:	6123      	str	r3, [r4, #16]
 8011406:	f8ca 3000 	str.w	r3, [sl]
 801140a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801140c:	f04f 0862 	mov.w	r8, #98	; 0x62
 8011410:	601c      	str	r4, [r3, #0]
 8011412:	e735      	b.n	8011280 <__gethex+0x114>
 8011414:	1e69      	subs	r1, r5, #1
 8011416:	4620      	mov	r0, r4
 8011418:	f000 fee2 	bl	80121e0 <__any_on>
 801141c:	2800      	cmp	r0, #0
 801141e:	d1ed      	bne.n	80113fc <__gethex+0x290>
 8011420:	4621      	mov	r1, r4
 8011422:	4648      	mov	r0, r9
 8011424:	f000 fa90 	bl	8011948 <_Bfree>
 8011428:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801142a:	2300      	movs	r3, #0
 801142c:	6013      	str	r3, [r2, #0]
 801142e:	f04f 0850 	mov.w	r8, #80	; 0x50
 8011432:	e725      	b.n	8011280 <__gethex+0x114>
 8011434:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011436:	2b00      	cmp	r3, #0
 8011438:	d1f2      	bne.n	8011420 <__gethex+0x2b4>
 801143a:	e7df      	b.n	80113fc <__gethex+0x290>
 801143c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801143e:	2b00      	cmp	r3, #0
 8011440:	d1dc      	bne.n	80113fc <__gethex+0x290>
 8011442:	e7ed      	b.n	8011420 <__gethex+0x2b4>
 8011444:	0801363c 	.word	0x0801363c
 8011448:	080137a9 	.word	0x080137a9
 801144c:	080137ba 	.word	0x080137ba
 8011450:	f106 38ff 	add.w	r8, r6, #4294967295
 8011454:	f1bb 0f00 	cmp.w	fp, #0
 8011458:	d133      	bne.n	80114c2 <__gethex+0x356>
 801145a:	f1b8 0f00 	cmp.w	r8, #0
 801145e:	d004      	beq.n	801146a <__gethex+0x2fe>
 8011460:	4641      	mov	r1, r8
 8011462:	4620      	mov	r0, r4
 8011464:	f000 febc 	bl	80121e0 <__any_on>
 8011468:	4683      	mov	fp, r0
 801146a:	ea4f 1268 	mov.w	r2, r8, asr #5
 801146e:	2301      	movs	r3, #1
 8011470:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8011474:	f008 081f 	and.w	r8, r8, #31
 8011478:	fa03 f308 	lsl.w	r3, r3, r8
 801147c:	4213      	tst	r3, r2
 801147e:	4631      	mov	r1, r6
 8011480:	4620      	mov	r0, r4
 8011482:	bf18      	it	ne
 8011484:	f04b 0b02 	orrne.w	fp, fp, #2
 8011488:	1bad      	subs	r5, r5, r6
 801148a:	f7ff fe07 	bl	801109c <rshift>
 801148e:	687e      	ldr	r6, [r7, #4]
 8011490:	f04f 0802 	mov.w	r8, #2
 8011494:	f1bb 0f00 	cmp.w	fp, #0
 8011498:	d04a      	beq.n	8011530 <__gethex+0x3c4>
 801149a:	68fb      	ldr	r3, [r7, #12]
 801149c:	2b02      	cmp	r3, #2
 801149e:	d016      	beq.n	80114ce <__gethex+0x362>
 80114a0:	2b03      	cmp	r3, #3
 80114a2:	d018      	beq.n	80114d6 <__gethex+0x36a>
 80114a4:	2b01      	cmp	r3, #1
 80114a6:	d109      	bne.n	80114bc <__gethex+0x350>
 80114a8:	f01b 0f02 	tst.w	fp, #2
 80114ac:	d006      	beq.n	80114bc <__gethex+0x350>
 80114ae:	f8da 3000 	ldr.w	r3, [sl]
 80114b2:	ea4b 0b03 	orr.w	fp, fp, r3
 80114b6:	f01b 0f01 	tst.w	fp, #1
 80114ba:	d10f      	bne.n	80114dc <__gethex+0x370>
 80114bc:	f048 0810 	orr.w	r8, r8, #16
 80114c0:	e036      	b.n	8011530 <__gethex+0x3c4>
 80114c2:	f04f 0b01 	mov.w	fp, #1
 80114c6:	e7d0      	b.n	801146a <__gethex+0x2fe>
 80114c8:	f04f 0801 	mov.w	r8, #1
 80114cc:	e7e2      	b.n	8011494 <__gethex+0x328>
 80114ce:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80114d0:	f1c3 0301 	rsb	r3, r3, #1
 80114d4:	930f      	str	r3, [sp, #60]	; 0x3c
 80114d6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80114d8:	2b00      	cmp	r3, #0
 80114da:	d0ef      	beq.n	80114bc <__gethex+0x350>
 80114dc:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80114e0:	f104 0214 	add.w	r2, r4, #20
 80114e4:	ea4f 038b 	mov.w	r3, fp, lsl #2
 80114e8:	9301      	str	r3, [sp, #4]
 80114ea:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 80114ee:	2300      	movs	r3, #0
 80114f0:	4694      	mov	ip, r2
 80114f2:	f852 1b04 	ldr.w	r1, [r2], #4
 80114f6:	f1b1 3fff 	cmp.w	r1, #4294967295
 80114fa:	d01e      	beq.n	801153a <__gethex+0x3ce>
 80114fc:	3101      	adds	r1, #1
 80114fe:	f8cc 1000 	str.w	r1, [ip]
 8011502:	f1b8 0f02 	cmp.w	r8, #2
 8011506:	f104 0214 	add.w	r2, r4, #20
 801150a:	d13d      	bne.n	8011588 <__gethex+0x41c>
 801150c:	683b      	ldr	r3, [r7, #0]
 801150e:	3b01      	subs	r3, #1
 8011510:	42ab      	cmp	r3, r5
 8011512:	d10b      	bne.n	801152c <__gethex+0x3c0>
 8011514:	1169      	asrs	r1, r5, #5
 8011516:	2301      	movs	r3, #1
 8011518:	f005 051f 	and.w	r5, r5, #31
 801151c:	fa03 f505 	lsl.w	r5, r3, r5
 8011520:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011524:	421d      	tst	r5, r3
 8011526:	bf18      	it	ne
 8011528:	f04f 0801 	movne.w	r8, #1
 801152c:	f048 0820 	orr.w	r8, r8, #32
 8011530:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011532:	601c      	str	r4, [r3, #0]
 8011534:	9b02      	ldr	r3, [sp, #8]
 8011536:	601e      	str	r6, [r3, #0]
 8011538:	e6a2      	b.n	8011280 <__gethex+0x114>
 801153a:	4290      	cmp	r0, r2
 801153c:	f842 3c04 	str.w	r3, [r2, #-4]
 8011540:	d8d6      	bhi.n	80114f0 <__gethex+0x384>
 8011542:	68a2      	ldr	r2, [r4, #8]
 8011544:	4593      	cmp	fp, r2
 8011546:	db17      	blt.n	8011578 <__gethex+0x40c>
 8011548:	6861      	ldr	r1, [r4, #4]
 801154a:	4648      	mov	r0, r9
 801154c:	3101      	adds	r1, #1
 801154e:	f000 f9bb 	bl	80118c8 <_Balloc>
 8011552:	4682      	mov	sl, r0
 8011554:	b918      	cbnz	r0, 801155e <__gethex+0x3f2>
 8011556:	4b1b      	ldr	r3, [pc, #108]	; (80115c4 <__gethex+0x458>)
 8011558:	4602      	mov	r2, r0
 801155a:	2184      	movs	r1, #132	; 0x84
 801155c:	e6b3      	b.n	80112c6 <__gethex+0x15a>
 801155e:	6922      	ldr	r2, [r4, #16]
 8011560:	3202      	adds	r2, #2
 8011562:	f104 010c 	add.w	r1, r4, #12
 8011566:	0092      	lsls	r2, r2, #2
 8011568:	300c      	adds	r0, #12
 801156a:	f7ff fd2e 	bl	8010fca <memcpy>
 801156e:	4621      	mov	r1, r4
 8011570:	4648      	mov	r0, r9
 8011572:	f000 f9e9 	bl	8011948 <_Bfree>
 8011576:	4654      	mov	r4, sl
 8011578:	6922      	ldr	r2, [r4, #16]
 801157a:	1c51      	adds	r1, r2, #1
 801157c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8011580:	6121      	str	r1, [r4, #16]
 8011582:	2101      	movs	r1, #1
 8011584:	6151      	str	r1, [r2, #20]
 8011586:	e7bc      	b.n	8011502 <__gethex+0x396>
 8011588:	6921      	ldr	r1, [r4, #16]
 801158a:	4559      	cmp	r1, fp
 801158c:	dd0b      	ble.n	80115a6 <__gethex+0x43a>
 801158e:	2101      	movs	r1, #1
 8011590:	4620      	mov	r0, r4
 8011592:	f7ff fd83 	bl	801109c <rshift>
 8011596:	68bb      	ldr	r3, [r7, #8]
 8011598:	3601      	adds	r6, #1
 801159a:	42b3      	cmp	r3, r6
 801159c:	f6ff aedb 	blt.w	8011356 <__gethex+0x1ea>
 80115a0:	f04f 0801 	mov.w	r8, #1
 80115a4:	e7c2      	b.n	801152c <__gethex+0x3c0>
 80115a6:	f015 051f 	ands.w	r5, r5, #31
 80115aa:	d0f9      	beq.n	80115a0 <__gethex+0x434>
 80115ac:	9b01      	ldr	r3, [sp, #4]
 80115ae:	441a      	add	r2, r3
 80115b0:	f1c5 0520 	rsb	r5, r5, #32
 80115b4:	f852 0c04 	ldr.w	r0, [r2, #-4]
 80115b8:	f000 fa78 	bl	8011aac <__hi0bits>
 80115bc:	42a8      	cmp	r0, r5
 80115be:	dbe6      	blt.n	801158e <__gethex+0x422>
 80115c0:	e7ee      	b.n	80115a0 <__gethex+0x434>
 80115c2:	bf00      	nop
 80115c4:	080137a9 	.word	0x080137a9

080115c8 <L_shift>:
 80115c8:	f1c2 0208 	rsb	r2, r2, #8
 80115cc:	0092      	lsls	r2, r2, #2
 80115ce:	b570      	push	{r4, r5, r6, lr}
 80115d0:	f1c2 0620 	rsb	r6, r2, #32
 80115d4:	6843      	ldr	r3, [r0, #4]
 80115d6:	6804      	ldr	r4, [r0, #0]
 80115d8:	fa03 f506 	lsl.w	r5, r3, r6
 80115dc:	432c      	orrs	r4, r5
 80115de:	40d3      	lsrs	r3, r2
 80115e0:	6004      	str	r4, [r0, #0]
 80115e2:	f840 3f04 	str.w	r3, [r0, #4]!
 80115e6:	4288      	cmp	r0, r1
 80115e8:	d3f4      	bcc.n	80115d4 <L_shift+0xc>
 80115ea:	bd70      	pop	{r4, r5, r6, pc}

080115ec <__match>:
 80115ec:	b530      	push	{r4, r5, lr}
 80115ee:	6803      	ldr	r3, [r0, #0]
 80115f0:	3301      	adds	r3, #1
 80115f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80115f6:	b914      	cbnz	r4, 80115fe <__match+0x12>
 80115f8:	6003      	str	r3, [r0, #0]
 80115fa:	2001      	movs	r0, #1
 80115fc:	bd30      	pop	{r4, r5, pc}
 80115fe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011602:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8011606:	2d19      	cmp	r5, #25
 8011608:	bf98      	it	ls
 801160a:	3220      	addls	r2, #32
 801160c:	42a2      	cmp	r2, r4
 801160e:	d0f0      	beq.n	80115f2 <__match+0x6>
 8011610:	2000      	movs	r0, #0
 8011612:	e7f3      	b.n	80115fc <__match+0x10>

08011614 <__hexnan>:
 8011614:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011618:	680b      	ldr	r3, [r1, #0]
 801161a:	6801      	ldr	r1, [r0, #0]
 801161c:	115e      	asrs	r6, r3, #5
 801161e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8011622:	f013 031f 	ands.w	r3, r3, #31
 8011626:	b087      	sub	sp, #28
 8011628:	bf18      	it	ne
 801162a:	3604      	addne	r6, #4
 801162c:	2500      	movs	r5, #0
 801162e:	1f37      	subs	r7, r6, #4
 8011630:	4682      	mov	sl, r0
 8011632:	4690      	mov	r8, r2
 8011634:	9301      	str	r3, [sp, #4]
 8011636:	f846 5c04 	str.w	r5, [r6, #-4]
 801163a:	46b9      	mov	r9, r7
 801163c:	463c      	mov	r4, r7
 801163e:	9502      	str	r5, [sp, #8]
 8011640:	46ab      	mov	fp, r5
 8011642:	784a      	ldrb	r2, [r1, #1]
 8011644:	1c4b      	adds	r3, r1, #1
 8011646:	9303      	str	r3, [sp, #12]
 8011648:	b342      	cbz	r2, 801169c <__hexnan+0x88>
 801164a:	4610      	mov	r0, r2
 801164c:	9105      	str	r1, [sp, #20]
 801164e:	9204      	str	r2, [sp, #16]
 8011650:	f7ff fd76 	bl	8011140 <__hexdig_fun>
 8011654:	2800      	cmp	r0, #0
 8011656:	d14f      	bne.n	80116f8 <__hexnan+0xe4>
 8011658:	9a04      	ldr	r2, [sp, #16]
 801165a:	9905      	ldr	r1, [sp, #20]
 801165c:	2a20      	cmp	r2, #32
 801165e:	d818      	bhi.n	8011692 <__hexnan+0x7e>
 8011660:	9b02      	ldr	r3, [sp, #8]
 8011662:	459b      	cmp	fp, r3
 8011664:	dd13      	ble.n	801168e <__hexnan+0x7a>
 8011666:	454c      	cmp	r4, r9
 8011668:	d206      	bcs.n	8011678 <__hexnan+0x64>
 801166a:	2d07      	cmp	r5, #7
 801166c:	dc04      	bgt.n	8011678 <__hexnan+0x64>
 801166e:	462a      	mov	r2, r5
 8011670:	4649      	mov	r1, r9
 8011672:	4620      	mov	r0, r4
 8011674:	f7ff ffa8 	bl	80115c8 <L_shift>
 8011678:	4544      	cmp	r4, r8
 801167a:	d950      	bls.n	801171e <__hexnan+0x10a>
 801167c:	2300      	movs	r3, #0
 801167e:	f1a4 0904 	sub.w	r9, r4, #4
 8011682:	f844 3c04 	str.w	r3, [r4, #-4]
 8011686:	f8cd b008 	str.w	fp, [sp, #8]
 801168a:	464c      	mov	r4, r9
 801168c:	461d      	mov	r5, r3
 801168e:	9903      	ldr	r1, [sp, #12]
 8011690:	e7d7      	b.n	8011642 <__hexnan+0x2e>
 8011692:	2a29      	cmp	r2, #41	; 0x29
 8011694:	d155      	bne.n	8011742 <__hexnan+0x12e>
 8011696:	3102      	adds	r1, #2
 8011698:	f8ca 1000 	str.w	r1, [sl]
 801169c:	f1bb 0f00 	cmp.w	fp, #0
 80116a0:	d04f      	beq.n	8011742 <__hexnan+0x12e>
 80116a2:	454c      	cmp	r4, r9
 80116a4:	d206      	bcs.n	80116b4 <__hexnan+0xa0>
 80116a6:	2d07      	cmp	r5, #7
 80116a8:	dc04      	bgt.n	80116b4 <__hexnan+0xa0>
 80116aa:	462a      	mov	r2, r5
 80116ac:	4649      	mov	r1, r9
 80116ae:	4620      	mov	r0, r4
 80116b0:	f7ff ff8a 	bl	80115c8 <L_shift>
 80116b4:	4544      	cmp	r4, r8
 80116b6:	d934      	bls.n	8011722 <__hexnan+0x10e>
 80116b8:	f1a8 0204 	sub.w	r2, r8, #4
 80116bc:	4623      	mov	r3, r4
 80116be:	f853 1b04 	ldr.w	r1, [r3], #4
 80116c2:	f842 1f04 	str.w	r1, [r2, #4]!
 80116c6:	429f      	cmp	r7, r3
 80116c8:	d2f9      	bcs.n	80116be <__hexnan+0xaa>
 80116ca:	1b3b      	subs	r3, r7, r4
 80116cc:	f023 0303 	bic.w	r3, r3, #3
 80116d0:	3304      	adds	r3, #4
 80116d2:	3e03      	subs	r6, #3
 80116d4:	3401      	adds	r4, #1
 80116d6:	42a6      	cmp	r6, r4
 80116d8:	bf38      	it	cc
 80116da:	2304      	movcc	r3, #4
 80116dc:	4443      	add	r3, r8
 80116de:	2200      	movs	r2, #0
 80116e0:	f843 2b04 	str.w	r2, [r3], #4
 80116e4:	429f      	cmp	r7, r3
 80116e6:	d2fb      	bcs.n	80116e0 <__hexnan+0xcc>
 80116e8:	683b      	ldr	r3, [r7, #0]
 80116ea:	b91b      	cbnz	r3, 80116f4 <__hexnan+0xe0>
 80116ec:	4547      	cmp	r7, r8
 80116ee:	d126      	bne.n	801173e <__hexnan+0x12a>
 80116f0:	2301      	movs	r3, #1
 80116f2:	603b      	str	r3, [r7, #0]
 80116f4:	2005      	movs	r0, #5
 80116f6:	e025      	b.n	8011744 <__hexnan+0x130>
 80116f8:	3501      	adds	r5, #1
 80116fa:	2d08      	cmp	r5, #8
 80116fc:	f10b 0b01 	add.w	fp, fp, #1
 8011700:	dd06      	ble.n	8011710 <__hexnan+0xfc>
 8011702:	4544      	cmp	r4, r8
 8011704:	d9c3      	bls.n	801168e <__hexnan+0x7a>
 8011706:	2300      	movs	r3, #0
 8011708:	f844 3c04 	str.w	r3, [r4, #-4]
 801170c:	2501      	movs	r5, #1
 801170e:	3c04      	subs	r4, #4
 8011710:	6822      	ldr	r2, [r4, #0]
 8011712:	f000 000f 	and.w	r0, r0, #15
 8011716:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 801171a:	6020      	str	r0, [r4, #0]
 801171c:	e7b7      	b.n	801168e <__hexnan+0x7a>
 801171e:	2508      	movs	r5, #8
 8011720:	e7b5      	b.n	801168e <__hexnan+0x7a>
 8011722:	9b01      	ldr	r3, [sp, #4]
 8011724:	2b00      	cmp	r3, #0
 8011726:	d0df      	beq.n	80116e8 <__hexnan+0xd4>
 8011728:	f1c3 0320 	rsb	r3, r3, #32
 801172c:	f04f 32ff 	mov.w	r2, #4294967295
 8011730:	40da      	lsrs	r2, r3
 8011732:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8011736:	4013      	ands	r3, r2
 8011738:	f846 3c04 	str.w	r3, [r6, #-4]
 801173c:	e7d4      	b.n	80116e8 <__hexnan+0xd4>
 801173e:	3f04      	subs	r7, #4
 8011740:	e7d2      	b.n	80116e8 <__hexnan+0xd4>
 8011742:	2004      	movs	r0, #4
 8011744:	b007      	add	sp, #28
 8011746:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801174c <sbrk_aligned>:
 801174c:	b570      	push	{r4, r5, r6, lr}
 801174e:	4e0e      	ldr	r6, [pc, #56]	; (8011788 <sbrk_aligned+0x3c>)
 8011750:	460c      	mov	r4, r1
 8011752:	6831      	ldr	r1, [r6, #0]
 8011754:	4605      	mov	r5, r0
 8011756:	b911      	cbnz	r1, 801175e <sbrk_aligned+0x12>
 8011758:	f001 f920 	bl	801299c <_sbrk_r>
 801175c:	6030      	str	r0, [r6, #0]
 801175e:	4621      	mov	r1, r4
 8011760:	4628      	mov	r0, r5
 8011762:	f001 f91b 	bl	801299c <_sbrk_r>
 8011766:	1c43      	adds	r3, r0, #1
 8011768:	d00a      	beq.n	8011780 <sbrk_aligned+0x34>
 801176a:	1cc4      	adds	r4, r0, #3
 801176c:	f024 0403 	bic.w	r4, r4, #3
 8011770:	42a0      	cmp	r0, r4
 8011772:	d007      	beq.n	8011784 <sbrk_aligned+0x38>
 8011774:	1a21      	subs	r1, r4, r0
 8011776:	4628      	mov	r0, r5
 8011778:	f001 f910 	bl	801299c <_sbrk_r>
 801177c:	3001      	adds	r0, #1
 801177e:	d101      	bne.n	8011784 <sbrk_aligned+0x38>
 8011780:	f04f 34ff 	mov.w	r4, #4294967295
 8011784:	4620      	mov	r0, r4
 8011786:	bd70      	pop	{r4, r5, r6, pc}
 8011788:	20002a70 	.word	0x20002a70

0801178c <_malloc_r>:
 801178c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011790:	1ccd      	adds	r5, r1, #3
 8011792:	f025 0503 	bic.w	r5, r5, #3
 8011796:	3508      	adds	r5, #8
 8011798:	2d0c      	cmp	r5, #12
 801179a:	bf38      	it	cc
 801179c:	250c      	movcc	r5, #12
 801179e:	2d00      	cmp	r5, #0
 80117a0:	4607      	mov	r7, r0
 80117a2:	db01      	blt.n	80117a8 <_malloc_r+0x1c>
 80117a4:	42a9      	cmp	r1, r5
 80117a6:	d905      	bls.n	80117b4 <_malloc_r+0x28>
 80117a8:	230c      	movs	r3, #12
 80117aa:	603b      	str	r3, [r7, #0]
 80117ac:	2600      	movs	r6, #0
 80117ae:	4630      	mov	r0, r6
 80117b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80117b4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8011888 <_malloc_r+0xfc>
 80117b8:	f000 f87a 	bl	80118b0 <__malloc_lock>
 80117bc:	f8d8 3000 	ldr.w	r3, [r8]
 80117c0:	461c      	mov	r4, r3
 80117c2:	bb5c      	cbnz	r4, 801181c <_malloc_r+0x90>
 80117c4:	4629      	mov	r1, r5
 80117c6:	4638      	mov	r0, r7
 80117c8:	f7ff ffc0 	bl	801174c <sbrk_aligned>
 80117cc:	1c43      	adds	r3, r0, #1
 80117ce:	4604      	mov	r4, r0
 80117d0:	d155      	bne.n	801187e <_malloc_r+0xf2>
 80117d2:	f8d8 4000 	ldr.w	r4, [r8]
 80117d6:	4626      	mov	r6, r4
 80117d8:	2e00      	cmp	r6, #0
 80117da:	d145      	bne.n	8011868 <_malloc_r+0xdc>
 80117dc:	2c00      	cmp	r4, #0
 80117de:	d048      	beq.n	8011872 <_malloc_r+0xe6>
 80117e0:	6823      	ldr	r3, [r4, #0]
 80117e2:	4631      	mov	r1, r6
 80117e4:	4638      	mov	r0, r7
 80117e6:	eb04 0903 	add.w	r9, r4, r3
 80117ea:	f001 f8d7 	bl	801299c <_sbrk_r>
 80117ee:	4581      	cmp	r9, r0
 80117f0:	d13f      	bne.n	8011872 <_malloc_r+0xe6>
 80117f2:	6821      	ldr	r1, [r4, #0]
 80117f4:	1a6d      	subs	r5, r5, r1
 80117f6:	4629      	mov	r1, r5
 80117f8:	4638      	mov	r0, r7
 80117fa:	f7ff ffa7 	bl	801174c <sbrk_aligned>
 80117fe:	3001      	adds	r0, #1
 8011800:	d037      	beq.n	8011872 <_malloc_r+0xe6>
 8011802:	6823      	ldr	r3, [r4, #0]
 8011804:	442b      	add	r3, r5
 8011806:	6023      	str	r3, [r4, #0]
 8011808:	f8d8 3000 	ldr.w	r3, [r8]
 801180c:	2b00      	cmp	r3, #0
 801180e:	d038      	beq.n	8011882 <_malloc_r+0xf6>
 8011810:	685a      	ldr	r2, [r3, #4]
 8011812:	42a2      	cmp	r2, r4
 8011814:	d12b      	bne.n	801186e <_malloc_r+0xe2>
 8011816:	2200      	movs	r2, #0
 8011818:	605a      	str	r2, [r3, #4]
 801181a:	e00f      	b.n	801183c <_malloc_r+0xb0>
 801181c:	6822      	ldr	r2, [r4, #0]
 801181e:	1b52      	subs	r2, r2, r5
 8011820:	d41f      	bmi.n	8011862 <_malloc_r+0xd6>
 8011822:	2a0b      	cmp	r2, #11
 8011824:	d917      	bls.n	8011856 <_malloc_r+0xca>
 8011826:	1961      	adds	r1, r4, r5
 8011828:	42a3      	cmp	r3, r4
 801182a:	6025      	str	r5, [r4, #0]
 801182c:	bf18      	it	ne
 801182e:	6059      	strne	r1, [r3, #4]
 8011830:	6863      	ldr	r3, [r4, #4]
 8011832:	bf08      	it	eq
 8011834:	f8c8 1000 	streq.w	r1, [r8]
 8011838:	5162      	str	r2, [r4, r5]
 801183a:	604b      	str	r3, [r1, #4]
 801183c:	4638      	mov	r0, r7
 801183e:	f104 060b 	add.w	r6, r4, #11
 8011842:	f000 f83b 	bl	80118bc <__malloc_unlock>
 8011846:	f026 0607 	bic.w	r6, r6, #7
 801184a:	1d23      	adds	r3, r4, #4
 801184c:	1af2      	subs	r2, r6, r3
 801184e:	d0ae      	beq.n	80117ae <_malloc_r+0x22>
 8011850:	1b9b      	subs	r3, r3, r6
 8011852:	50a3      	str	r3, [r4, r2]
 8011854:	e7ab      	b.n	80117ae <_malloc_r+0x22>
 8011856:	42a3      	cmp	r3, r4
 8011858:	6862      	ldr	r2, [r4, #4]
 801185a:	d1dd      	bne.n	8011818 <_malloc_r+0x8c>
 801185c:	f8c8 2000 	str.w	r2, [r8]
 8011860:	e7ec      	b.n	801183c <_malloc_r+0xb0>
 8011862:	4623      	mov	r3, r4
 8011864:	6864      	ldr	r4, [r4, #4]
 8011866:	e7ac      	b.n	80117c2 <_malloc_r+0x36>
 8011868:	4634      	mov	r4, r6
 801186a:	6876      	ldr	r6, [r6, #4]
 801186c:	e7b4      	b.n	80117d8 <_malloc_r+0x4c>
 801186e:	4613      	mov	r3, r2
 8011870:	e7cc      	b.n	801180c <_malloc_r+0x80>
 8011872:	230c      	movs	r3, #12
 8011874:	603b      	str	r3, [r7, #0]
 8011876:	4638      	mov	r0, r7
 8011878:	f000 f820 	bl	80118bc <__malloc_unlock>
 801187c:	e797      	b.n	80117ae <_malloc_r+0x22>
 801187e:	6025      	str	r5, [r4, #0]
 8011880:	e7dc      	b.n	801183c <_malloc_r+0xb0>
 8011882:	605b      	str	r3, [r3, #4]
 8011884:	deff      	udf	#255	; 0xff
 8011886:	bf00      	nop
 8011888:	20002a6c 	.word	0x20002a6c

0801188c <__ascii_mbtowc>:
 801188c:	b082      	sub	sp, #8
 801188e:	b901      	cbnz	r1, 8011892 <__ascii_mbtowc+0x6>
 8011890:	a901      	add	r1, sp, #4
 8011892:	b142      	cbz	r2, 80118a6 <__ascii_mbtowc+0x1a>
 8011894:	b14b      	cbz	r3, 80118aa <__ascii_mbtowc+0x1e>
 8011896:	7813      	ldrb	r3, [r2, #0]
 8011898:	600b      	str	r3, [r1, #0]
 801189a:	7812      	ldrb	r2, [r2, #0]
 801189c:	1e10      	subs	r0, r2, #0
 801189e:	bf18      	it	ne
 80118a0:	2001      	movne	r0, #1
 80118a2:	b002      	add	sp, #8
 80118a4:	4770      	bx	lr
 80118a6:	4610      	mov	r0, r2
 80118a8:	e7fb      	b.n	80118a2 <__ascii_mbtowc+0x16>
 80118aa:	f06f 0001 	mvn.w	r0, #1
 80118ae:	e7f8      	b.n	80118a2 <__ascii_mbtowc+0x16>

080118b0 <__malloc_lock>:
 80118b0:	4801      	ldr	r0, [pc, #4]	; (80118b8 <__malloc_lock+0x8>)
 80118b2:	f7ff bb80 	b.w	8010fb6 <__retarget_lock_acquire_recursive>
 80118b6:	bf00      	nop
 80118b8:	20002a68 	.word	0x20002a68

080118bc <__malloc_unlock>:
 80118bc:	4801      	ldr	r0, [pc, #4]	; (80118c4 <__malloc_unlock+0x8>)
 80118be:	f7ff bb7b 	b.w	8010fb8 <__retarget_lock_release_recursive>
 80118c2:	bf00      	nop
 80118c4:	20002a68 	.word	0x20002a68

080118c8 <_Balloc>:
 80118c8:	b570      	push	{r4, r5, r6, lr}
 80118ca:	69c6      	ldr	r6, [r0, #28]
 80118cc:	4604      	mov	r4, r0
 80118ce:	460d      	mov	r5, r1
 80118d0:	b976      	cbnz	r6, 80118f0 <_Balloc+0x28>
 80118d2:	2010      	movs	r0, #16
 80118d4:	f001 f8a6 	bl	8012a24 <malloc>
 80118d8:	4602      	mov	r2, r0
 80118da:	61e0      	str	r0, [r4, #28]
 80118dc:	b920      	cbnz	r0, 80118e8 <_Balloc+0x20>
 80118de:	4b18      	ldr	r3, [pc, #96]	; (8011940 <_Balloc+0x78>)
 80118e0:	4818      	ldr	r0, [pc, #96]	; (8011944 <_Balloc+0x7c>)
 80118e2:	216b      	movs	r1, #107	; 0x6b
 80118e4:	f001 f86a 	bl	80129bc <__assert_func>
 80118e8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80118ec:	6006      	str	r6, [r0, #0]
 80118ee:	60c6      	str	r6, [r0, #12]
 80118f0:	69e6      	ldr	r6, [r4, #28]
 80118f2:	68f3      	ldr	r3, [r6, #12]
 80118f4:	b183      	cbz	r3, 8011918 <_Balloc+0x50>
 80118f6:	69e3      	ldr	r3, [r4, #28]
 80118f8:	68db      	ldr	r3, [r3, #12]
 80118fa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80118fe:	b9b8      	cbnz	r0, 8011930 <_Balloc+0x68>
 8011900:	2101      	movs	r1, #1
 8011902:	fa01 f605 	lsl.w	r6, r1, r5
 8011906:	1d72      	adds	r2, r6, #5
 8011908:	0092      	lsls	r2, r2, #2
 801190a:	4620      	mov	r0, r4
 801190c:	f001 f874 	bl	80129f8 <_calloc_r>
 8011910:	b160      	cbz	r0, 801192c <_Balloc+0x64>
 8011912:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8011916:	e00e      	b.n	8011936 <_Balloc+0x6e>
 8011918:	2221      	movs	r2, #33	; 0x21
 801191a:	2104      	movs	r1, #4
 801191c:	4620      	mov	r0, r4
 801191e:	f001 f86b 	bl	80129f8 <_calloc_r>
 8011922:	69e3      	ldr	r3, [r4, #28]
 8011924:	60f0      	str	r0, [r6, #12]
 8011926:	68db      	ldr	r3, [r3, #12]
 8011928:	2b00      	cmp	r3, #0
 801192a:	d1e4      	bne.n	80118f6 <_Balloc+0x2e>
 801192c:	2000      	movs	r0, #0
 801192e:	bd70      	pop	{r4, r5, r6, pc}
 8011930:	6802      	ldr	r2, [r0, #0]
 8011932:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8011936:	2300      	movs	r3, #0
 8011938:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801193c:	e7f7      	b.n	801192e <_Balloc+0x66>
 801193e:	bf00      	nop
 8011940:	0801381a 	.word	0x0801381a
 8011944:	08013831 	.word	0x08013831

08011948 <_Bfree>:
 8011948:	b570      	push	{r4, r5, r6, lr}
 801194a:	69c6      	ldr	r6, [r0, #28]
 801194c:	4605      	mov	r5, r0
 801194e:	460c      	mov	r4, r1
 8011950:	b976      	cbnz	r6, 8011970 <_Bfree+0x28>
 8011952:	2010      	movs	r0, #16
 8011954:	f001 f866 	bl	8012a24 <malloc>
 8011958:	4602      	mov	r2, r0
 801195a:	61e8      	str	r0, [r5, #28]
 801195c:	b920      	cbnz	r0, 8011968 <_Bfree+0x20>
 801195e:	4b09      	ldr	r3, [pc, #36]	; (8011984 <_Bfree+0x3c>)
 8011960:	4809      	ldr	r0, [pc, #36]	; (8011988 <_Bfree+0x40>)
 8011962:	218f      	movs	r1, #143	; 0x8f
 8011964:	f001 f82a 	bl	80129bc <__assert_func>
 8011968:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801196c:	6006      	str	r6, [r0, #0]
 801196e:	60c6      	str	r6, [r0, #12]
 8011970:	b13c      	cbz	r4, 8011982 <_Bfree+0x3a>
 8011972:	69eb      	ldr	r3, [r5, #28]
 8011974:	6862      	ldr	r2, [r4, #4]
 8011976:	68db      	ldr	r3, [r3, #12]
 8011978:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801197c:	6021      	str	r1, [r4, #0]
 801197e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8011982:	bd70      	pop	{r4, r5, r6, pc}
 8011984:	0801381a 	.word	0x0801381a
 8011988:	08013831 	.word	0x08013831

0801198c <__multadd>:
 801198c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011990:	690d      	ldr	r5, [r1, #16]
 8011992:	4607      	mov	r7, r0
 8011994:	460c      	mov	r4, r1
 8011996:	461e      	mov	r6, r3
 8011998:	f101 0c14 	add.w	ip, r1, #20
 801199c:	2000      	movs	r0, #0
 801199e:	f8dc 3000 	ldr.w	r3, [ip]
 80119a2:	b299      	uxth	r1, r3
 80119a4:	fb02 6101 	mla	r1, r2, r1, r6
 80119a8:	0c1e      	lsrs	r6, r3, #16
 80119aa:	0c0b      	lsrs	r3, r1, #16
 80119ac:	fb02 3306 	mla	r3, r2, r6, r3
 80119b0:	b289      	uxth	r1, r1
 80119b2:	3001      	adds	r0, #1
 80119b4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80119b8:	4285      	cmp	r5, r0
 80119ba:	f84c 1b04 	str.w	r1, [ip], #4
 80119be:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80119c2:	dcec      	bgt.n	801199e <__multadd+0x12>
 80119c4:	b30e      	cbz	r6, 8011a0a <__multadd+0x7e>
 80119c6:	68a3      	ldr	r3, [r4, #8]
 80119c8:	42ab      	cmp	r3, r5
 80119ca:	dc19      	bgt.n	8011a00 <__multadd+0x74>
 80119cc:	6861      	ldr	r1, [r4, #4]
 80119ce:	4638      	mov	r0, r7
 80119d0:	3101      	adds	r1, #1
 80119d2:	f7ff ff79 	bl	80118c8 <_Balloc>
 80119d6:	4680      	mov	r8, r0
 80119d8:	b928      	cbnz	r0, 80119e6 <__multadd+0x5a>
 80119da:	4602      	mov	r2, r0
 80119dc:	4b0c      	ldr	r3, [pc, #48]	; (8011a10 <__multadd+0x84>)
 80119de:	480d      	ldr	r0, [pc, #52]	; (8011a14 <__multadd+0x88>)
 80119e0:	21ba      	movs	r1, #186	; 0xba
 80119e2:	f000 ffeb 	bl	80129bc <__assert_func>
 80119e6:	6922      	ldr	r2, [r4, #16]
 80119e8:	3202      	adds	r2, #2
 80119ea:	f104 010c 	add.w	r1, r4, #12
 80119ee:	0092      	lsls	r2, r2, #2
 80119f0:	300c      	adds	r0, #12
 80119f2:	f7ff faea 	bl	8010fca <memcpy>
 80119f6:	4621      	mov	r1, r4
 80119f8:	4638      	mov	r0, r7
 80119fa:	f7ff ffa5 	bl	8011948 <_Bfree>
 80119fe:	4644      	mov	r4, r8
 8011a00:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8011a04:	3501      	adds	r5, #1
 8011a06:	615e      	str	r6, [r3, #20]
 8011a08:	6125      	str	r5, [r4, #16]
 8011a0a:	4620      	mov	r0, r4
 8011a0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011a10:	080137a9 	.word	0x080137a9
 8011a14:	08013831 	.word	0x08013831

08011a18 <__s2b>:
 8011a18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011a1c:	460c      	mov	r4, r1
 8011a1e:	4615      	mov	r5, r2
 8011a20:	461f      	mov	r7, r3
 8011a22:	2209      	movs	r2, #9
 8011a24:	3308      	adds	r3, #8
 8011a26:	4606      	mov	r6, r0
 8011a28:	fb93 f3f2 	sdiv	r3, r3, r2
 8011a2c:	2100      	movs	r1, #0
 8011a2e:	2201      	movs	r2, #1
 8011a30:	429a      	cmp	r2, r3
 8011a32:	db09      	blt.n	8011a48 <__s2b+0x30>
 8011a34:	4630      	mov	r0, r6
 8011a36:	f7ff ff47 	bl	80118c8 <_Balloc>
 8011a3a:	b940      	cbnz	r0, 8011a4e <__s2b+0x36>
 8011a3c:	4602      	mov	r2, r0
 8011a3e:	4b19      	ldr	r3, [pc, #100]	; (8011aa4 <__s2b+0x8c>)
 8011a40:	4819      	ldr	r0, [pc, #100]	; (8011aa8 <__s2b+0x90>)
 8011a42:	21d3      	movs	r1, #211	; 0xd3
 8011a44:	f000 ffba 	bl	80129bc <__assert_func>
 8011a48:	0052      	lsls	r2, r2, #1
 8011a4a:	3101      	adds	r1, #1
 8011a4c:	e7f0      	b.n	8011a30 <__s2b+0x18>
 8011a4e:	9b08      	ldr	r3, [sp, #32]
 8011a50:	6143      	str	r3, [r0, #20]
 8011a52:	2d09      	cmp	r5, #9
 8011a54:	f04f 0301 	mov.w	r3, #1
 8011a58:	6103      	str	r3, [r0, #16]
 8011a5a:	dd16      	ble.n	8011a8a <__s2b+0x72>
 8011a5c:	f104 0909 	add.w	r9, r4, #9
 8011a60:	46c8      	mov	r8, r9
 8011a62:	442c      	add	r4, r5
 8011a64:	f818 3b01 	ldrb.w	r3, [r8], #1
 8011a68:	4601      	mov	r1, r0
 8011a6a:	3b30      	subs	r3, #48	; 0x30
 8011a6c:	220a      	movs	r2, #10
 8011a6e:	4630      	mov	r0, r6
 8011a70:	f7ff ff8c 	bl	801198c <__multadd>
 8011a74:	45a0      	cmp	r8, r4
 8011a76:	d1f5      	bne.n	8011a64 <__s2b+0x4c>
 8011a78:	f1a5 0408 	sub.w	r4, r5, #8
 8011a7c:	444c      	add	r4, r9
 8011a7e:	1b2d      	subs	r5, r5, r4
 8011a80:	1963      	adds	r3, r4, r5
 8011a82:	42bb      	cmp	r3, r7
 8011a84:	db04      	blt.n	8011a90 <__s2b+0x78>
 8011a86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011a8a:	340a      	adds	r4, #10
 8011a8c:	2509      	movs	r5, #9
 8011a8e:	e7f6      	b.n	8011a7e <__s2b+0x66>
 8011a90:	f814 3b01 	ldrb.w	r3, [r4], #1
 8011a94:	4601      	mov	r1, r0
 8011a96:	3b30      	subs	r3, #48	; 0x30
 8011a98:	220a      	movs	r2, #10
 8011a9a:	4630      	mov	r0, r6
 8011a9c:	f7ff ff76 	bl	801198c <__multadd>
 8011aa0:	e7ee      	b.n	8011a80 <__s2b+0x68>
 8011aa2:	bf00      	nop
 8011aa4:	080137a9 	.word	0x080137a9
 8011aa8:	08013831 	.word	0x08013831

08011aac <__hi0bits>:
 8011aac:	0c03      	lsrs	r3, r0, #16
 8011aae:	041b      	lsls	r3, r3, #16
 8011ab0:	b9d3      	cbnz	r3, 8011ae8 <__hi0bits+0x3c>
 8011ab2:	0400      	lsls	r0, r0, #16
 8011ab4:	2310      	movs	r3, #16
 8011ab6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8011aba:	bf04      	itt	eq
 8011abc:	0200      	lsleq	r0, r0, #8
 8011abe:	3308      	addeq	r3, #8
 8011ac0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8011ac4:	bf04      	itt	eq
 8011ac6:	0100      	lsleq	r0, r0, #4
 8011ac8:	3304      	addeq	r3, #4
 8011aca:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8011ace:	bf04      	itt	eq
 8011ad0:	0080      	lsleq	r0, r0, #2
 8011ad2:	3302      	addeq	r3, #2
 8011ad4:	2800      	cmp	r0, #0
 8011ad6:	db05      	blt.n	8011ae4 <__hi0bits+0x38>
 8011ad8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8011adc:	f103 0301 	add.w	r3, r3, #1
 8011ae0:	bf08      	it	eq
 8011ae2:	2320      	moveq	r3, #32
 8011ae4:	4618      	mov	r0, r3
 8011ae6:	4770      	bx	lr
 8011ae8:	2300      	movs	r3, #0
 8011aea:	e7e4      	b.n	8011ab6 <__hi0bits+0xa>

08011aec <__lo0bits>:
 8011aec:	6803      	ldr	r3, [r0, #0]
 8011aee:	f013 0207 	ands.w	r2, r3, #7
 8011af2:	d00c      	beq.n	8011b0e <__lo0bits+0x22>
 8011af4:	07d9      	lsls	r1, r3, #31
 8011af6:	d422      	bmi.n	8011b3e <__lo0bits+0x52>
 8011af8:	079a      	lsls	r2, r3, #30
 8011afa:	bf49      	itett	mi
 8011afc:	085b      	lsrmi	r3, r3, #1
 8011afe:	089b      	lsrpl	r3, r3, #2
 8011b00:	6003      	strmi	r3, [r0, #0]
 8011b02:	2201      	movmi	r2, #1
 8011b04:	bf5c      	itt	pl
 8011b06:	6003      	strpl	r3, [r0, #0]
 8011b08:	2202      	movpl	r2, #2
 8011b0a:	4610      	mov	r0, r2
 8011b0c:	4770      	bx	lr
 8011b0e:	b299      	uxth	r1, r3
 8011b10:	b909      	cbnz	r1, 8011b16 <__lo0bits+0x2a>
 8011b12:	0c1b      	lsrs	r3, r3, #16
 8011b14:	2210      	movs	r2, #16
 8011b16:	b2d9      	uxtb	r1, r3
 8011b18:	b909      	cbnz	r1, 8011b1e <__lo0bits+0x32>
 8011b1a:	3208      	adds	r2, #8
 8011b1c:	0a1b      	lsrs	r3, r3, #8
 8011b1e:	0719      	lsls	r1, r3, #28
 8011b20:	bf04      	itt	eq
 8011b22:	091b      	lsreq	r3, r3, #4
 8011b24:	3204      	addeq	r2, #4
 8011b26:	0799      	lsls	r1, r3, #30
 8011b28:	bf04      	itt	eq
 8011b2a:	089b      	lsreq	r3, r3, #2
 8011b2c:	3202      	addeq	r2, #2
 8011b2e:	07d9      	lsls	r1, r3, #31
 8011b30:	d403      	bmi.n	8011b3a <__lo0bits+0x4e>
 8011b32:	085b      	lsrs	r3, r3, #1
 8011b34:	f102 0201 	add.w	r2, r2, #1
 8011b38:	d003      	beq.n	8011b42 <__lo0bits+0x56>
 8011b3a:	6003      	str	r3, [r0, #0]
 8011b3c:	e7e5      	b.n	8011b0a <__lo0bits+0x1e>
 8011b3e:	2200      	movs	r2, #0
 8011b40:	e7e3      	b.n	8011b0a <__lo0bits+0x1e>
 8011b42:	2220      	movs	r2, #32
 8011b44:	e7e1      	b.n	8011b0a <__lo0bits+0x1e>
	...

08011b48 <__i2b>:
 8011b48:	b510      	push	{r4, lr}
 8011b4a:	460c      	mov	r4, r1
 8011b4c:	2101      	movs	r1, #1
 8011b4e:	f7ff febb 	bl	80118c8 <_Balloc>
 8011b52:	4602      	mov	r2, r0
 8011b54:	b928      	cbnz	r0, 8011b62 <__i2b+0x1a>
 8011b56:	4b05      	ldr	r3, [pc, #20]	; (8011b6c <__i2b+0x24>)
 8011b58:	4805      	ldr	r0, [pc, #20]	; (8011b70 <__i2b+0x28>)
 8011b5a:	f240 1145 	movw	r1, #325	; 0x145
 8011b5e:	f000 ff2d 	bl	80129bc <__assert_func>
 8011b62:	2301      	movs	r3, #1
 8011b64:	6144      	str	r4, [r0, #20]
 8011b66:	6103      	str	r3, [r0, #16]
 8011b68:	bd10      	pop	{r4, pc}
 8011b6a:	bf00      	nop
 8011b6c:	080137a9 	.word	0x080137a9
 8011b70:	08013831 	.word	0x08013831

08011b74 <__multiply>:
 8011b74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011b78:	4691      	mov	r9, r2
 8011b7a:	690a      	ldr	r2, [r1, #16]
 8011b7c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8011b80:	429a      	cmp	r2, r3
 8011b82:	bfb8      	it	lt
 8011b84:	460b      	movlt	r3, r1
 8011b86:	460c      	mov	r4, r1
 8011b88:	bfbc      	itt	lt
 8011b8a:	464c      	movlt	r4, r9
 8011b8c:	4699      	movlt	r9, r3
 8011b8e:	6927      	ldr	r7, [r4, #16]
 8011b90:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8011b94:	68a3      	ldr	r3, [r4, #8]
 8011b96:	6861      	ldr	r1, [r4, #4]
 8011b98:	eb07 060a 	add.w	r6, r7, sl
 8011b9c:	42b3      	cmp	r3, r6
 8011b9e:	b085      	sub	sp, #20
 8011ba0:	bfb8      	it	lt
 8011ba2:	3101      	addlt	r1, #1
 8011ba4:	f7ff fe90 	bl	80118c8 <_Balloc>
 8011ba8:	b930      	cbnz	r0, 8011bb8 <__multiply+0x44>
 8011baa:	4602      	mov	r2, r0
 8011bac:	4b44      	ldr	r3, [pc, #272]	; (8011cc0 <__multiply+0x14c>)
 8011bae:	4845      	ldr	r0, [pc, #276]	; (8011cc4 <__multiply+0x150>)
 8011bb0:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8011bb4:	f000 ff02 	bl	80129bc <__assert_func>
 8011bb8:	f100 0514 	add.w	r5, r0, #20
 8011bbc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8011bc0:	462b      	mov	r3, r5
 8011bc2:	2200      	movs	r2, #0
 8011bc4:	4543      	cmp	r3, r8
 8011bc6:	d321      	bcc.n	8011c0c <__multiply+0x98>
 8011bc8:	f104 0314 	add.w	r3, r4, #20
 8011bcc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8011bd0:	f109 0314 	add.w	r3, r9, #20
 8011bd4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8011bd8:	9202      	str	r2, [sp, #8]
 8011bda:	1b3a      	subs	r2, r7, r4
 8011bdc:	3a15      	subs	r2, #21
 8011bde:	f022 0203 	bic.w	r2, r2, #3
 8011be2:	3204      	adds	r2, #4
 8011be4:	f104 0115 	add.w	r1, r4, #21
 8011be8:	428f      	cmp	r7, r1
 8011bea:	bf38      	it	cc
 8011bec:	2204      	movcc	r2, #4
 8011bee:	9201      	str	r2, [sp, #4]
 8011bf0:	9a02      	ldr	r2, [sp, #8]
 8011bf2:	9303      	str	r3, [sp, #12]
 8011bf4:	429a      	cmp	r2, r3
 8011bf6:	d80c      	bhi.n	8011c12 <__multiply+0x9e>
 8011bf8:	2e00      	cmp	r6, #0
 8011bfa:	dd03      	ble.n	8011c04 <__multiply+0x90>
 8011bfc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8011c00:	2b00      	cmp	r3, #0
 8011c02:	d05b      	beq.n	8011cbc <__multiply+0x148>
 8011c04:	6106      	str	r6, [r0, #16]
 8011c06:	b005      	add	sp, #20
 8011c08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011c0c:	f843 2b04 	str.w	r2, [r3], #4
 8011c10:	e7d8      	b.n	8011bc4 <__multiply+0x50>
 8011c12:	f8b3 a000 	ldrh.w	sl, [r3]
 8011c16:	f1ba 0f00 	cmp.w	sl, #0
 8011c1a:	d024      	beq.n	8011c66 <__multiply+0xf2>
 8011c1c:	f104 0e14 	add.w	lr, r4, #20
 8011c20:	46a9      	mov	r9, r5
 8011c22:	f04f 0c00 	mov.w	ip, #0
 8011c26:	f85e 2b04 	ldr.w	r2, [lr], #4
 8011c2a:	f8d9 1000 	ldr.w	r1, [r9]
 8011c2e:	fa1f fb82 	uxth.w	fp, r2
 8011c32:	b289      	uxth	r1, r1
 8011c34:	fb0a 110b 	mla	r1, sl, fp, r1
 8011c38:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8011c3c:	f8d9 2000 	ldr.w	r2, [r9]
 8011c40:	4461      	add	r1, ip
 8011c42:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8011c46:	fb0a c20b 	mla	r2, sl, fp, ip
 8011c4a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8011c4e:	b289      	uxth	r1, r1
 8011c50:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8011c54:	4577      	cmp	r7, lr
 8011c56:	f849 1b04 	str.w	r1, [r9], #4
 8011c5a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8011c5e:	d8e2      	bhi.n	8011c26 <__multiply+0xb2>
 8011c60:	9a01      	ldr	r2, [sp, #4]
 8011c62:	f845 c002 	str.w	ip, [r5, r2]
 8011c66:	9a03      	ldr	r2, [sp, #12]
 8011c68:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8011c6c:	3304      	adds	r3, #4
 8011c6e:	f1b9 0f00 	cmp.w	r9, #0
 8011c72:	d021      	beq.n	8011cb8 <__multiply+0x144>
 8011c74:	6829      	ldr	r1, [r5, #0]
 8011c76:	f104 0c14 	add.w	ip, r4, #20
 8011c7a:	46ae      	mov	lr, r5
 8011c7c:	f04f 0a00 	mov.w	sl, #0
 8011c80:	f8bc b000 	ldrh.w	fp, [ip]
 8011c84:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8011c88:	fb09 220b 	mla	r2, r9, fp, r2
 8011c8c:	4452      	add	r2, sl
 8011c8e:	b289      	uxth	r1, r1
 8011c90:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8011c94:	f84e 1b04 	str.w	r1, [lr], #4
 8011c98:	f85c 1b04 	ldr.w	r1, [ip], #4
 8011c9c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8011ca0:	f8be 1000 	ldrh.w	r1, [lr]
 8011ca4:	fb09 110a 	mla	r1, r9, sl, r1
 8011ca8:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8011cac:	4567      	cmp	r7, ip
 8011cae:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8011cb2:	d8e5      	bhi.n	8011c80 <__multiply+0x10c>
 8011cb4:	9a01      	ldr	r2, [sp, #4]
 8011cb6:	50a9      	str	r1, [r5, r2]
 8011cb8:	3504      	adds	r5, #4
 8011cba:	e799      	b.n	8011bf0 <__multiply+0x7c>
 8011cbc:	3e01      	subs	r6, #1
 8011cbe:	e79b      	b.n	8011bf8 <__multiply+0x84>
 8011cc0:	080137a9 	.word	0x080137a9
 8011cc4:	08013831 	.word	0x08013831

08011cc8 <__pow5mult>:
 8011cc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011ccc:	4615      	mov	r5, r2
 8011cce:	f012 0203 	ands.w	r2, r2, #3
 8011cd2:	4606      	mov	r6, r0
 8011cd4:	460f      	mov	r7, r1
 8011cd6:	d007      	beq.n	8011ce8 <__pow5mult+0x20>
 8011cd8:	4c25      	ldr	r4, [pc, #148]	; (8011d70 <__pow5mult+0xa8>)
 8011cda:	3a01      	subs	r2, #1
 8011cdc:	2300      	movs	r3, #0
 8011cde:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8011ce2:	f7ff fe53 	bl	801198c <__multadd>
 8011ce6:	4607      	mov	r7, r0
 8011ce8:	10ad      	asrs	r5, r5, #2
 8011cea:	d03d      	beq.n	8011d68 <__pow5mult+0xa0>
 8011cec:	69f4      	ldr	r4, [r6, #28]
 8011cee:	b97c      	cbnz	r4, 8011d10 <__pow5mult+0x48>
 8011cf0:	2010      	movs	r0, #16
 8011cf2:	f000 fe97 	bl	8012a24 <malloc>
 8011cf6:	4602      	mov	r2, r0
 8011cf8:	61f0      	str	r0, [r6, #28]
 8011cfa:	b928      	cbnz	r0, 8011d08 <__pow5mult+0x40>
 8011cfc:	4b1d      	ldr	r3, [pc, #116]	; (8011d74 <__pow5mult+0xac>)
 8011cfe:	481e      	ldr	r0, [pc, #120]	; (8011d78 <__pow5mult+0xb0>)
 8011d00:	f240 11b3 	movw	r1, #435	; 0x1b3
 8011d04:	f000 fe5a 	bl	80129bc <__assert_func>
 8011d08:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8011d0c:	6004      	str	r4, [r0, #0]
 8011d0e:	60c4      	str	r4, [r0, #12]
 8011d10:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8011d14:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8011d18:	b94c      	cbnz	r4, 8011d2e <__pow5mult+0x66>
 8011d1a:	f240 2171 	movw	r1, #625	; 0x271
 8011d1e:	4630      	mov	r0, r6
 8011d20:	f7ff ff12 	bl	8011b48 <__i2b>
 8011d24:	2300      	movs	r3, #0
 8011d26:	f8c8 0008 	str.w	r0, [r8, #8]
 8011d2a:	4604      	mov	r4, r0
 8011d2c:	6003      	str	r3, [r0, #0]
 8011d2e:	f04f 0900 	mov.w	r9, #0
 8011d32:	07eb      	lsls	r3, r5, #31
 8011d34:	d50a      	bpl.n	8011d4c <__pow5mult+0x84>
 8011d36:	4639      	mov	r1, r7
 8011d38:	4622      	mov	r2, r4
 8011d3a:	4630      	mov	r0, r6
 8011d3c:	f7ff ff1a 	bl	8011b74 <__multiply>
 8011d40:	4639      	mov	r1, r7
 8011d42:	4680      	mov	r8, r0
 8011d44:	4630      	mov	r0, r6
 8011d46:	f7ff fdff 	bl	8011948 <_Bfree>
 8011d4a:	4647      	mov	r7, r8
 8011d4c:	106d      	asrs	r5, r5, #1
 8011d4e:	d00b      	beq.n	8011d68 <__pow5mult+0xa0>
 8011d50:	6820      	ldr	r0, [r4, #0]
 8011d52:	b938      	cbnz	r0, 8011d64 <__pow5mult+0x9c>
 8011d54:	4622      	mov	r2, r4
 8011d56:	4621      	mov	r1, r4
 8011d58:	4630      	mov	r0, r6
 8011d5a:	f7ff ff0b 	bl	8011b74 <__multiply>
 8011d5e:	6020      	str	r0, [r4, #0]
 8011d60:	f8c0 9000 	str.w	r9, [r0]
 8011d64:	4604      	mov	r4, r0
 8011d66:	e7e4      	b.n	8011d32 <__pow5mult+0x6a>
 8011d68:	4638      	mov	r0, r7
 8011d6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011d6e:	bf00      	nop
 8011d70:	08013980 	.word	0x08013980
 8011d74:	0801381a 	.word	0x0801381a
 8011d78:	08013831 	.word	0x08013831

08011d7c <__lshift>:
 8011d7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011d80:	460c      	mov	r4, r1
 8011d82:	6849      	ldr	r1, [r1, #4]
 8011d84:	6923      	ldr	r3, [r4, #16]
 8011d86:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8011d8a:	68a3      	ldr	r3, [r4, #8]
 8011d8c:	4607      	mov	r7, r0
 8011d8e:	4691      	mov	r9, r2
 8011d90:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8011d94:	f108 0601 	add.w	r6, r8, #1
 8011d98:	42b3      	cmp	r3, r6
 8011d9a:	db0b      	blt.n	8011db4 <__lshift+0x38>
 8011d9c:	4638      	mov	r0, r7
 8011d9e:	f7ff fd93 	bl	80118c8 <_Balloc>
 8011da2:	4605      	mov	r5, r0
 8011da4:	b948      	cbnz	r0, 8011dba <__lshift+0x3e>
 8011da6:	4602      	mov	r2, r0
 8011da8:	4b28      	ldr	r3, [pc, #160]	; (8011e4c <__lshift+0xd0>)
 8011daa:	4829      	ldr	r0, [pc, #164]	; (8011e50 <__lshift+0xd4>)
 8011dac:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8011db0:	f000 fe04 	bl	80129bc <__assert_func>
 8011db4:	3101      	adds	r1, #1
 8011db6:	005b      	lsls	r3, r3, #1
 8011db8:	e7ee      	b.n	8011d98 <__lshift+0x1c>
 8011dba:	2300      	movs	r3, #0
 8011dbc:	f100 0114 	add.w	r1, r0, #20
 8011dc0:	f100 0210 	add.w	r2, r0, #16
 8011dc4:	4618      	mov	r0, r3
 8011dc6:	4553      	cmp	r3, sl
 8011dc8:	db33      	blt.n	8011e32 <__lshift+0xb6>
 8011dca:	6920      	ldr	r0, [r4, #16]
 8011dcc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8011dd0:	f104 0314 	add.w	r3, r4, #20
 8011dd4:	f019 091f 	ands.w	r9, r9, #31
 8011dd8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8011ddc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8011de0:	d02b      	beq.n	8011e3a <__lshift+0xbe>
 8011de2:	f1c9 0e20 	rsb	lr, r9, #32
 8011de6:	468a      	mov	sl, r1
 8011de8:	2200      	movs	r2, #0
 8011dea:	6818      	ldr	r0, [r3, #0]
 8011dec:	fa00 f009 	lsl.w	r0, r0, r9
 8011df0:	4310      	orrs	r0, r2
 8011df2:	f84a 0b04 	str.w	r0, [sl], #4
 8011df6:	f853 2b04 	ldr.w	r2, [r3], #4
 8011dfa:	459c      	cmp	ip, r3
 8011dfc:	fa22 f20e 	lsr.w	r2, r2, lr
 8011e00:	d8f3      	bhi.n	8011dea <__lshift+0x6e>
 8011e02:	ebac 0304 	sub.w	r3, ip, r4
 8011e06:	3b15      	subs	r3, #21
 8011e08:	f023 0303 	bic.w	r3, r3, #3
 8011e0c:	3304      	adds	r3, #4
 8011e0e:	f104 0015 	add.w	r0, r4, #21
 8011e12:	4584      	cmp	ip, r0
 8011e14:	bf38      	it	cc
 8011e16:	2304      	movcc	r3, #4
 8011e18:	50ca      	str	r2, [r1, r3]
 8011e1a:	b10a      	cbz	r2, 8011e20 <__lshift+0xa4>
 8011e1c:	f108 0602 	add.w	r6, r8, #2
 8011e20:	3e01      	subs	r6, #1
 8011e22:	4638      	mov	r0, r7
 8011e24:	612e      	str	r6, [r5, #16]
 8011e26:	4621      	mov	r1, r4
 8011e28:	f7ff fd8e 	bl	8011948 <_Bfree>
 8011e2c:	4628      	mov	r0, r5
 8011e2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011e32:	f842 0f04 	str.w	r0, [r2, #4]!
 8011e36:	3301      	adds	r3, #1
 8011e38:	e7c5      	b.n	8011dc6 <__lshift+0x4a>
 8011e3a:	3904      	subs	r1, #4
 8011e3c:	f853 2b04 	ldr.w	r2, [r3], #4
 8011e40:	f841 2f04 	str.w	r2, [r1, #4]!
 8011e44:	459c      	cmp	ip, r3
 8011e46:	d8f9      	bhi.n	8011e3c <__lshift+0xc0>
 8011e48:	e7ea      	b.n	8011e20 <__lshift+0xa4>
 8011e4a:	bf00      	nop
 8011e4c:	080137a9 	.word	0x080137a9
 8011e50:	08013831 	.word	0x08013831

08011e54 <__mcmp>:
 8011e54:	b530      	push	{r4, r5, lr}
 8011e56:	6902      	ldr	r2, [r0, #16]
 8011e58:	690c      	ldr	r4, [r1, #16]
 8011e5a:	1b12      	subs	r2, r2, r4
 8011e5c:	d10e      	bne.n	8011e7c <__mcmp+0x28>
 8011e5e:	f100 0314 	add.w	r3, r0, #20
 8011e62:	3114      	adds	r1, #20
 8011e64:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8011e68:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8011e6c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8011e70:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8011e74:	42a5      	cmp	r5, r4
 8011e76:	d003      	beq.n	8011e80 <__mcmp+0x2c>
 8011e78:	d305      	bcc.n	8011e86 <__mcmp+0x32>
 8011e7a:	2201      	movs	r2, #1
 8011e7c:	4610      	mov	r0, r2
 8011e7e:	bd30      	pop	{r4, r5, pc}
 8011e80:	4283      	cmp	r3, r0
 8011e82:	d3f3      	bcc.n	8011e6c <__mcmp+0x18>
 8011e84:	e7fa      	b.n	8011e7c <__mcmp+0x28>
 8011e86:	f04f 32ff 	mov.w	r2, #4294967295
 8011e8a:	e7f7      	b.n	8011e7c <__mcmp+0x28>

08011e8c <__mdiff>:
 8011e8c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011e90:	460c      	mov	r4, r1
 8011e92:	4606      	mov	r6, r0
 8011e94:	4611      	mov	r1, r2
 8011e96:	4620      	mov	r0, r4
 8011e98:	4690      	mov	r8, r2
 8011e9a:	f7ff ffdb 	bl	8011e54 <__mcmp>
 8011e9e:	1e05      	subs	r5, r0, #0
 8011ea0:	d110      	bne.n	8011ec4 <__mdiff+0x38>
 8011ea2:	4629      	mov	r1, r5
 8011ea4:	4630      	mov	r0, r6
 8011ea6:	f7ff fd0f 	bl	80118c8 <_Balloc>
 8011eaa:	b930      	cbnz	r0, 8011eba <__mdiff+0x2e>
 8011eac:	4b3a      	ldr	r3, [pc, #232]	; (8011f98 <__mdiff+0x10c>)
 8011eae:	4602      	mov	r2, r0
 8011eb0:	f240 2137 	movw	r1, #567	; 0x237
 8011eb4:	4839      	ldr	r0, [pc, #228]	; (8011f9c <__mdiff+0x110>)
 8011eb6:	f000 fd81 	bl	80129bc <__assert_func>
 8011eba:	2301      	movs	r3, #1
 8011ebc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8011ec0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011ec4:	bfa4      	itt	ge
 8011ec6:	4643      	movge	r3, r8
 8011ec8:	46a0      	movge	r8, r4
 8011eca:	4630      	mov	r0, r6
 8011ecc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8011ed0:	bfa6      	itte	ge
 8011ed2:	461c      	movge	r4, r3
 8011ed4:	2500      	movge	r5, #0
 8011ed6:	2501      	movlt	r5, #1
 8011ed8:	f7ff fcf6 	bl	80118c8 <_Balloc>
 8011edc:	b920      	cbnz	r0, 8011ee8 <__mdiff+0x5c>
 8011ede:	4b2e      	ldr	r3, [pc, #184]	; (8011f98 <__mdiff+0x10c>)
 8011ee0:	4602      	mov	r2, r0
 8011ee2:	f240 2145 	movw	r1, #581	; 0x245
 8011ee6:	e7e5      	b.n	8011eb4 <__mdiff+0x28>
 8011ee8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8011eec:	6926      	ldr	r6, [r4, #16]
 8011eee:	60c5      	str	r5, [r0, #12]
 8011ef0:	f104 0914 	add.w	r9, r4, #20
 8011ef4:	f108 0514 	add.w	r5, r8, #20
 8011ef8:	f100 0e14 	add.w	lr, r0, #20
 8011efc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8011f00:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8011f04:	f108 0210 	add.w	r2, r8, #16
 8011f08:	46f2      	mov	sl, lr
 8011f0a:	2100      	movs	r1, #0
 8011f0c:	f859 3b04 	ldr.w	r3, [r9], #4
 8011f10:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8011f14:	fa11 f88b 	uxtah	r8, r1, fp
 8011f18:	b299      	uxth	r1, r3
 8011f1a:	0c1b      	lsrs	r3, r3, #16
 8011f1c:	eba8 0801 	sub.w	r8, r8, r1
 8011f20:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8011f24:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8011f28:	fa1f f888 	uxth.w	r8, r8
 8011f2c:	1419      	asrs	r1, r3, #16
 8011f2e:	454e      	cmp	r6, r9
 8011f30:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8011f34:	f84a 3b04 	str.w	r3, [sl], #4
 8011f38:	d8e8      	bhi.n	8011f0c <__mdiff+0x80>
 8011f3a:	1b33      	subs	r3, r6, r4
 8011f3c:	3b15      	subs	r3, #21
 8011f3e:	f023 0303 	bic.w	r3, r3, #3
 8011f42:	3304      	adds	r3, #4
 8011f44:	3415      	adds	r4, #21
 8011f46:	42a6      	cmp	r6, r4
 8011f48:	bf38      	it	cc
 8011f4a:	2304      	movcc	r3, #4
 8011f4c:	441d      	add	r5, r3
 8011f4e:	4473      	add	r3, lr
 8011f50:	469e      	mov	lr, r3
 8011f52:	462e      	mov	r6, r5
 8011f54:	4566      	cmp	r6, ip
 8011f56:	d30e      	bcc.n	8011f76 <__mdiff+0xea>
 8011f58:	f10c 0203 	add.w	r2, ip, #3
 8011f5c:	1b52      	subs	r2, r2, r5
 8011f5e:	f022 0203 	bic.w	r2, r2, #3
 8011f62:	3d03      	subs	r5, #3
 8011f64:	45ac      	cmp	ip, r5
 8011f66:	bf38      	it	cc
 8011f68:	2200      	movcc	r2, #0
 8011f6a:	4413      	add	r3, r2
 8011f6c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8011f70:	b17a      	cbz	r2, 8011f92 <__mdiff+0x106>
 8011f72:	6107      	str	r7, [r0, #16]
 8011f74:	e7a4      	b.n	8011ec0 <__mdiff+0x34>
 8011f76:	f856 8b04 	ldr.w	r8, [r6], #4
 8011f7a:	fa11 f288 	uxtah	r2, r1, r8
 8011f7e:	1414      	asrs	r4, r2, #16
 8011f80:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8011f84:	b292      	uxth	r2, r2
 8011f86:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8011f8a:	f84e 2b04 	str.w	r2, [lr], #4
 8011f8e:	1421      	asrs	r1, r4, #16
 8011f90:	e7e0      	b.n	8011f54 <__mdiff+0xc8>
 8011f92:	3f01      	subs	r7, #1
 8011f94:	e7ea      	b.n	8011f6c <__mdiff+0xe0>
 8011f96:	bf00      	nop
 8011f98:	080137a9 	.word	0x080137a9
 8011f9c:	08013831 	.word	0x08013831

08011fa0 <__ulp>:
 8011fa0:	b082      	sub	sp, #8
 8011fa2:	ed8d 0b00 	vstr	d0, [sp]
 8011fa6:	9a01      	ldr	r2, [sp, #4]
 8011fa8:	4b0f      	ldr	r3, [pc, #60]	; (8011fe8 <__ulp+0x48>)
 8011faa:	4013      	ands	r3, r2
 8011fac:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8011fb0:	2b00      	cmp	r3, #0
 8011fb2:	dc08      	bgt.n	8011fc6 <__ulp+0x26>
 8011fb4:	425b      	negs	r3, r3
 8011fb6:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8011fba:	ea4f 5223 	mov.w	r2, r3, asr #20
 8011fbe:	da04      	bge.n	8011fca <__ulp+0x2a>
 8011fc0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8011fc4:	4113      	asrs	r3, r2
 8011fc6:	2200      	movs	r2, #0
 8011fc8:	e008      	b.n	8011fdc <__ulp+0x3c>
 8011fca:	f1a2 0314 	sub.w	r3, r2, #20
 8011fce:	2b1e      	cmp	r3, #30
 8011fd0:	bfda      	itte	le
 8011fd2:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8011fd6:	40da      	lsrle	r2, r3
 8011fd8:	2201      	movgt	r2, #1
 8011fda:	2300      	movs	r3, #0
 8011fdc:	4619      	mov	r1, r3
 8011fde:	4610      	mov	r0, r2
 8011fe0:	ec41 0b10 	vmov	d0, r0, r1
 8011fe4:	b002      	add	sp, #8
 8011fe6:	4770      	bx	lr
 8011fe8:	7ff00000 	.word	0x7ff00000

08011fec <__b2d>:
 8011fec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011ff0:	6906      	ldr	r6, [r0, #16]
 8011ff2:	f100 0814 	add.w	r8, r0, #20
 8011ff6:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8011ffa:	1f37      	subs	r7, r6, #4
 8011ffc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8012000:	4610      	mov	r0, r2
 8012002:	f7ff fd53 	bl	8011aac <__hi0bits>
 8012006:	f1c0 0320 	rsb	r3, r0, #32
 801200a:	280a      	cmp	r0, #10
 801200c:	600b      	str	r3, [r1, #0]
 801200e:	491b      	ldr	r1, [pc, #108]	; (801207c <__b2d+0x90>)
 8012010:	dc15      	bgt.n	801203e <__b2d+0x52>
 8012012:	f1c0 0c0b 	rsb	ip, r0, #11
 8012016:	fa22 f30c 	lsr.w	r3, r2, ip
 801201a:	45b8      	cmp	r8, r7
 801201c:	ea43 0501 	orr.w	r5, r3, r1
 8012020:	bf34      	ite	cc
 8012022:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8012026:	2300      	movcs	r3, #0
 8012028:	3015      	adds	r0, #21
 801202a:	fa02 f000 	lsl.w	r0, r2, r0
 801202e:	fa23 f30c 	lsr.w	r3, r3, ip
 8012032:	4303      	orrs	r3, r0
 8012034:	461c      	mov	r4, r3
 8012036:	ec45 4b10 	vmov	d0, r4, r5
 801203a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801203e:	45b8      	cmp	r8, r7
 8012040:	bf3a      	itte	cc
 8012042:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8012046:	f1a6 0708 	subcc.w	r7, r6, #8
 801204a:	2300      	movcs	r3, #0
 801204c:	380b      	subs	r0, #11
 801204e:	d012      	beq.n	8012076 <__b2d+0x8a>
 8012050:	f1c0 0120 	rsb	r1, r0, #32
 8012054:	fa23 f401 	lsr.w	r4, r3, r1
 8012058:	4082      	lsls	r2, r0
 801205a:	4322      	orrs	r2, r4
 801205c:	4547      	cmp	r7, r8
 801205e:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 8012062:	bf8c      	ite	hi
 8012064:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8012068:	2200      	movls	r2, #0
 801206a:	4083      	lsls	r3, r0
 801206c:	40ca      	lsrs	r2, r1
 801206e:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8012072:	4313      	orrs	r3, r2
 8012074:	e7de      	b.n	8012034 <__b2d+0x48>
 8012076:	ea42 0501 	orr.w	r5, r2, r1
 801207a:	e7db      	b.n	8012034 <__b2d+0x48>
 801207c:	3ff00000 	.word	0x3ff00000

08012080 <__d2b>:
 8012080:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8012084:	460f      	mov	r7, r1
 8012086:	2101      	movs	r1, #1
 8012088:	ec59 8b10 	vmov	r8, r9, d0
 801208c:	4616      	mov	r6, r2
 801208e:	f7ff fc1b 	bl	80118c8 <_Balloc>
 8012092:	4604      	mov	r4, r0
 8012094:	b930      	cbnz	r0, 80120a4 <__d2b+0x24>
 8012096:	4602      	mov	r2, r0
 8012098:	4b24      	ldr	r3, [pc, #144]	; (801212c <__d2b+0xac>)
 801209a:	4825      	ldr	r0, [pc, #148]	; (8012130 <__d2b+0xb0>)
 801209c:	f240 310f 	movw	r1, #783	; 0x30f
 80120a0:	f000 fc8c 	bl	80129bc <__assert_func>
 80120a4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80120a8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80120ac:	bb2d      	cbnz	r5, 80120fa <__d2b+0x7a>
 80120ae:	9301      	str	r3, [sp, #4]
 80120b0:	f1b8 0300 	subs.w	r3, r8, #0
 80120b4:	d026      	beq.n	8012104 <__d2b+0x84>
 80120b6:	4668      	mov	r0, sp
 80120b8:	9300      	str	r3, [sp, #0]
 80120ba:	f7ff fd17 	bl	8011aec <__lo0bits>
 80120be:	e9dd 1200 	ldrd	r1, r2, [sp]
 80120c2:	b1e8      	cbz	r0, 8012100 <__d2b+0x80>
 80120c4:	f1c0 0320 	rsb	r3, r0, #32
 80120c8:	fa02 f303 	lsl.w	r3, r2, r3
 80120cc:	430b      	orrs	r3, r1
 80120ce:	40c2      	lsrs	r2, r0
 80120d0:	6163      	str	r3, [r4, #20]
 80120d2:	9201      	str	r2, [sp, #4]
 80120d4:	9b01      	ldr	r3, [sp, #4]
 80120d6:	61a3      	str	r3, [r4, #24]
 80120d8:	2b00      	cmp	r3, #0
 80120da:	bf14      	ite	ne
 80120dc:	2202      	movne	r2, #2
 80120de:	2201      	moveq	r2, #1
 80120e0:	6122      	str	r2, [r4, #16]
 80120e2:	b1bd      	cbz	r5, 8012114 <__d2b+0x94>
 80120e4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80120e8:	4405      	add	r5, r0
 80120ea:	603d      	str	r5, [r7, #0]
 80120ec:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80120f0:	6030      	str	r0, [r6, #0]
 80120f2:	4620      	mov	r0, r4
 80120f4:	b003      	add	sp, #12
 80120f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80120fa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80120fe:	e7d6      	b.n	80120ae <__d2b+0x2e>
 8012100:	6161      	str	r1, [r4, #20]
 8012102:	e7e7      	b.n	80120d4 <__d2b+0x54>
 8012104:	a801      	add	r0, sp, #4
 8012106:	f7ff fcf1 	bl	8011aec <__lo0bits>
 801210a:	9b01      	ldr	r3, [sp, #4]
 801210c:	6163      	str	r3, [r4, #20]
 801210e:	3020      	adds	r0, #32
 8012110:	2201      	movs	r2, #1
 8012112:	e7e5      	b.n	80120e0 <__d2b+0x60>
 8012114:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8012118:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801211c:	6038      	str	r0, [r7, #0]
 801211e:	6918      	ldr	r0, [r3, #16]
 8012120:	f7ff fcc4 	bl	8011aac <__hi0bits>
 8012124:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8012128:	e7e2      	b.n	80120f0 <__d2b+0x70>
 801212a:	bf00      	nop
 801212c:	080137a9 	.word	0x080137a9
 8012130:	08013831 	.word	0x08013831

08012134 <__ratio>:
 8012134:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012138:	4688      	mov	r8, r1
 801213a:	4669      	mov	r1, sp
 801213c:	4681      	mov	r9, r0
 801213e:	f7ff ff55 	bl	8011fec <__b2d>
 8012142:	a901      	add	r1, sp, #4
 8012144:	4640      	mov	r0, r8
 8012146:	ec55 4b10 	vmov	r4, r5, d0
 801214a:	f7ff ff4f 	bl	8011fec <__b2d>
 801214e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8012152:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8012156:	eba3 0c02 	sub.w	ip, r3, r2
 801215a:	e9dd 3200 	ldrd	r3, r2, [sp]
 801215e:	1a9b      	subs	r3, r3, r2
 8012160:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8012164:	ec51 0b10 	vmov	r0, r1, d0
 8012168:	2b00      	cmp	r3, #0
 801216a:	bfd6      	itet	le
 801216c:	460a      	movle	r2, r1
 801216e:	462a      	movgt	r2, r5
 8012170:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8012174:	468b      	mov	fp, r1
 8012176:	462f      	mov	r7, r5
 8012178:	bfd4      	ite	le
 801217a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 801217e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8012182:	4620      	mov	r0, r4
 8012184:	ee10 2a10 	vmov	r2, s0
 8012188:	465b      	mov	r3, fp
 801218a:	4639      	mov	r1, r7
 801218c:	f7ee fb6e 	bl	800086c <__aeabi_ddiv>
 8012190:	ec41 0b10 	vmov	d0, r0, r1
 8012194:	b003      	add	sp, #12
 8012196:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801219a <__copybits>:
 801219a:	3901      	subs	r1, #1
 801219c:	b570      	push	{r4, r5, r6, lr}
 801219e:	1149      	asrs	r1, r1, #5
 80121a0:	6914      	ldr	r4, [r2, #16]
 80121a2:	3101      	adds	r1, #1
 80121a4:	f102 0314 	add.w	r3, r2, #20
 80121a8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80121ac:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80121b0:	1f05      	subs	r5, r0, #4
 80121b2:	42a3      	cmp	r3, r4
 80121b4:	d30c      	bcc.n	80121d0 <__copybits+0x36>
 80121b6:	1aa3      	subs	r3, r4, r2
 80121b8:	3b11      	subs	r3, #17
 80121ba:	f023 0303 	bic.w	r3, r3, #3
 80121be:	3211      	adds	r2, #17
 80121c0:	42a2      	cmp	r2, r4
 80121c2:	bf88      	it	hi
 80121c4:	2300      	movhi	r3, #0
 80121c6:	4418      	add	r0, r3
 80121c8:	2300      	movs	r3, #0
 80121ca:	4288      	cmp	r0, r1
 80121cc:	d305      	bcc.n	80121da <__copybits+0x40>
 80121ce:	bd70      	pop	{r4, r5, r6, pc}
 80121d0:	f853 6b04 	ldr.w	r6, [r3], #4
 80121d4:	f845 6f04 	str.w	r6, [r5, #4]!
 80121d8:	e7eb      	b.n	80121b2 <__copybits+0x18>
 80121da:	f840 3b04 	str.w	r3, [r0], #4
 80121de:	e7f4      	b.n	80121ca <__copybits+0x30>

080121e0 <__any_on>:
 80121e0:	f100 0214 	add.w	r2, r0, #20
 80121e4:	6900      	ldr	r0, [r0, #16]
 80121e6:	114b      	asrs	r3, r1, #5
 80121e8:	4298      	cmp	r0, r3
 80121ea:	b510      	push	{r4, lr}
 80121ec:	db11      	blt.n	8012212 <__any_on+0x32>
 80121ee:	dd0a      	ble.n	8012206 <__any_on+0x26>
 80121f0:	f011 011f 	ands.w	r1, r1, #31
 80121f4:	d007      	beq.n	8012206 <__any_on+0x26>
 80121f6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80121fa:	fa24 f001 	lsr.w	r0, r4, r1
 80121fe:	fa00 f101 	lsl.w	r1, r0, r1
 8012202:	428c      	cmp	r4, r1
 8012204:	d10b      	bne.n	801221e <__any_on+0x3e>
 8012206:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801220a:	4293      	cmp	r3, r2
 801220c:	d803      	bhi.n	8012216 <__any_on+0x36>
 801220e:	2000      	movs	r0, #0
 8012210:	bd10      	pop	{r4, pc}
 8012212:	4603      	mov	r3, r0
 8012214:	e7f7      	b.n	8012206 <__any_on+0x26>
 8012216:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801221a:	2900      	cmp	r1, #0
 801221c:	d0f5      	beq.n	801220a <__any_on+0x2a>
 801221e:	2001      	movs	r0, #1
 8012220:	e7f6      	b.n	8012210 <__any_on+0x30>

08012222 <__ascii_wctomb>:
 8012222:	b149      	cbz	r1, 8012238 <__ascii_wctomb+0x16>
 8012224:	2aff      	cmp	r2, #255	; 0xff
 8012226:	bf85      	ittet	hi
 8012228:	238a      	movhi	r3, #138	; 0x8a
 801222a:	6003      	strhi	r3, [r0, #0]
 801222c:	700a      	strbls	r2, [r1, #0]
 801222e:	f04f 30ff 	movhi.w	r0, #4294967295
 8012232:	bf98      	it	ls
 8012234:	2001      	movls	r0, #1
 8012236:	4770      	bx	lr
 8012238:	4608      	mov	r0, r1
 801223a:	4770      	bx	lr

0801223c <__ssputs_r>:
 801223c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012240:	688e      	ldr	r6, [r1, #8]
 8012242:	461f      	mov	r7, r3
 8012244:	42be      	cmp	r6, r7
 8012246:	680b      	ldr	r3, [r1, #0]
 8012248:	4682      	mov	sl, r0
 801224a:	460c      	mov	r4, r1
 801224c:	4690      	mov	r8, r2
 801224e:	d82c      	bhi.n	80122aa <__ssputs_r+0x6e>
 8012250:	898a      	ldrh	r2, [r1, #12]
 8012252:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8012256:	d026      	beq.n	80122a6 <__ssputs_r+0x6a>
 8012258:	6965      	ldr	r5, [r4, #20]
 801225a:	6909      	ldr	r1, [r1, #16]
 801225c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8012260:	eba3 0901 	sub.w	r9, r3, r1
 8012264:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8012268:	1c7b      	adds	r3, r7, #1
 801226a:	444b      	add	r3, r9
 801226c:	106d      	asrs	r5, r5, #1
 801226e:	429d      	cmp	r5, r3
 8012270:	bf38      	it	cc
 8012272:	461d      	movcc	r5, r3
 8012274:	0553      	lsls	r3, r2, #21
 8012276:	d527      	bpl.n	80122c8 <__ssputs_r+0x8c>
 8012278:	4629      	mov	r1, r5
 801227a:	f7ff fa87 	bl	801178c <_malloc_r>
 801227e:	4606      	mov	r6, r0
 8012280:	b360      	cbz	r0, 80122dc <__ssputs_r+0xa0>
 8012282:	6921      	ldr	r1, [r4, #16]
 8012284:	464a      	mov	r2, r9
 8012286:	f7fe fea0 	bl	8010fca <memcpy>
 801228a:	89a3      	ldrh	r3, [r4, #12]
 801228c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8012290:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012294:	81a3      	strh	r3, [r4, #12]
 8012296:	6126      	str	r6, [r4, #16]
 8012298:	6165      	str	r5, [r4, #20]
 801229a:	444e      	add	r6, r9
 801229c:	eba5 0509 	sub.w	r5, r5, r9
 80122a0:	6026      	str	r6, [r4, #0]
 80122a2:	60a5      	str	r5, [r4, #8]
 80122a4:	463e      	mov	r6, r7
 80122a6:	42be      	cmp	r6, r7
 80122a8:	d900      	bls.n	80122ac <__ssputs_r+0x70>
 80122aa:	463e      	mov	r6, r7
 80122ac:	6820      	ldr	r0, [r4, #0]
 80122ae:	4632      	mov	r2, r6
 80122b0:	4641      	mov	r1, r8
 80122b2:	f000 fb59 	bl	8012968 <memmove>
 80122b6:	68a3      	ldr	r3, [r4, #8]
 80122b8:	1b9b      	subs	r3, r3, r6
 80122ba:	60a3      	str	r3, [r4, #8]
 80122bc:	6823      	ldr	r3, [r4, #0]
 80122be:	4433      	add	r3, r6
 80122c0:	6023      	str	r3, [r4, #0]
 80122c2:	2000      	movs	r0, #0
 80122c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80122c8:	462a      	mov	r2, r5
 80122ca:	f000 fbb3 	bl	8012a34 <_realloc_r>
 80122ce:	4606      	mov	r6, r0
 80122d0:	2800      	cmp	r0, #0
 80122d2:	d1e0      	bne.n	8012296 <__ssputs_r+0x5a>
 80122d4:	6921      	ldr	r1, [r4, #16]
 80122d6:	4650      	mov	r0, sl
 80122d8:	f7fe fe94 	bl	8011004 <_free_r>
 80122dc:	230c      	movs	r3, #12
 80122de:	f8ca 3000 	str.w	r3, [sl]
 80122e2:	89a3      	ldrh	r3, [r4, #12]
 80122e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80122e8:	81a3      	strh	r3, [r4, #12]
 80122ea:	f04f 30ff 	mov.w	r0, #4294967295
 80122ee:	e7e9      	b.n	80122c4 <__ssputs_r+0x88>

080122f0 <_svfiprintf_r>:
 80122f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80122f4:	4698      	mov	r8, r3
 80122f6:	898b      	ldrh	r3, [r1, #12]
 80122f8:	061b      	lsls	r3, r3, #24
 80122fa:	b09d      	sub	sp, #116	; 0x74
 80122fc:	4607      	mov	r7, r0
 80122fe:	460d      	mov	r5, r1
 8012300:	4614      	mov	r4, r2
 8012302:	d50e      	bpl.n	8012322 <_svfiprintf_r+0x32>
 8012304:	690b      	ldr	r3, [r1, #16]
 8012306:	b963      	cbnz	r3, 8012322 <_svfiprintf_r+0x32>
 8012308:	2140      	movs	r1, #64	; 0x40
 801230a:	f7ff fa3f 	bl	801178c <_malloc_r>
 801230e:	6028      	str	r0, [r5, #0]
 8012310:	6128      	str	r0, [r5, #16]
 8012312:	b920      	cbnz	r0, 801231e <_svfiprintf_r+0x2e>
 8012314:	230c      	movs	r3, #12
 8012316:	603b      	str	r3, [r7, #0]
 8012318:	f04f 30ff 	mov.w	r0, #4294967295
 801231c:	e0d0      	b.n	80124c0 <_svfiprintf_r+0x1d0>
 801231e:	2340      	movs	r3, #64	; 0x40
 8012320:	616b      	str	r3, [r5, #20]
 8012322:	2300      	movs	r3, #0
 8012324:	9309      	str	r3, [sp, #36]	; 0x24
 8012326:	2320      	movs	r3, #32
 8012328:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801232c:	f8cd 800c 	str.w	r8, [sp, #12]
 8012330:	2330      	movs	r3, #48	; 0x30
 8012332:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80124d8 <_svfiprintf_r+0x1e8>
 8012336:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801233a:	f04f 0901 	mov.w	r9, #1
 801233e:	4623      	mov	r3, r4
 8012340:	469a      	mov	sl, r3
 8012342:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012346:	b10a      	cbz	r2, 801234c <_svfiprintf_r+0x5c>
 8012348:	2a25      	cmp	r2, #37	; 0x25
 801234a:	d1f9      	bne.n	8012340 <_svfiprintf_r+0x50>
 801234c:	ebba 0b04 	subs.w	fp, sl, r4
 8012350:	d00b      	beq.n	801236a <_svfiprintf_r+0x7a>
 8012352:	465b      	mov	r3, fp
 8012354:	4622      	mov	r2, r4
 8012356:	4629      	mov	r1, r5
 8012358:	4638      	mov	r0, r7
 801235a:	f7ff ff6f 	bl	801223c <__ssputs_r>
 801235e:	3001      	adds	r0, #1
 8012360:	f000 80a9 	beq.w	80124b6 <_svfiprintf_r+0x1c6>
 8012364:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012366:	445a      	add	r2, fp
 8012368:	9209      	str	r2, [sp, #36]	; 0x24
 801236a:	f89a 3000 	ldrb.w	r3, [sl]
 801236e:	2b00      	cmp	r3, #0
 8012370:	f000 80a1 	beq.w	80124b6 <_svfiprintf_r+0x1c6>
 8012374:	2300      	movs	r3, #0
 8012376:	f04f 32ff 	mov.w	r2, #4294967295
 801237a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801237e:	f10a 0a01 	add.w	sl, sl, #1
 8012382:	9304      	str	r3, [sp, #16]
 8012384:	9307      	str	r3, [sp, #28]
 8012386:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801238a:	931a      	str	r3, [sp, #104]	; 0x68
 801238c:	4654      	mov	r4, sl
 801238e:	2205      	movs	r2, #5
 8012390:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012394:	4850      	ldr	r0, [pc, #320]	; (80124d8 <_svfiprintf_r+0x1e8>)
 8012396:	f7ed ff33 	bl	8000200 <memchr>
 801239a:	9a04      	ldr	r2, [sp, #16]
 801239c:	b9d8      	cbnz	r0, 80123d6 <_svfiprintf_r+0xe6>
 801239e:	06d0      	lsls	r0, r2, #27
 80123a0:	bf44      	itt	mi
 80123a2:	2320      	movmi	r3, #32
 80123a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80123a8:	0711      	lsls	r1, r2, #28
 80123aa:	bf44      	itt	mi
 80123ac:	232b      	movmi	r3, #43	; 0x2b
 80123ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80123b2:	f89a 3000 	ldrb.w	r3, [sl]
 80123b6:	2b2a      	cmp	r3, #42	; 0x2a
 80123b8:	d015      	beq.n	80123e6 <_svfiprintf_r+0xf6>
 80123ba:	9a07      	ldr	r2, [sp, #28]
 80123bc:	4654      	mov	r4, sl
 80123be:	2000      	movs	r0, #0
 80123c0:	f04f 0c0a 	mov.w	ip, #10
 80123c4:	4621      	mov	r1, r4
 80123c6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80123ca:	3b30      	subs	r3, #48	; 0x30
 80123cc:	2b09      	cmp	r3, #9
 80123ce:	d94d      	bls.n	801246c <_svfiprintf_r+0x17c>
 80123d0:	b1b0      	cbz	r0, 8012400 <_svfiprintf_r+0x110>
 80123d2:	9207      	str	r2, [sp, #28]
 80123d4:	e014      	b.n	8012400 <_svfiprintf_r+0x110>
 80123d6:	eba0 0308 	sub.w	r3, r0, r8
 80123da:	fa09 f303 	lsl.w	r3, r9, r3
 80123de:	4313      	orrs	r3, r2
 80123e0:	9304      	str	r3, [sp, #16]
 80123e2:	46a2      	mov	sl, r4
 80123e4:	e7d2      	b.n	801238c <_svfiprintf_r+0x9c>
 80123e6:	9b03      	ldr	r3, [sp, #12]
 80123e8:	1d19      	adds	r1, r3, #4
 80123ea:	681b      	ldr	r3, [r3, #0]
 80123ec:	9103      	str	r1, [sp, #12]
 80123ee:	2b00      	cmp	r3, #0
 80123f0:	bfbb      	ittet	lt
 80123f2:	425b      	neglt	r3, r3
 80123f4:	f042 0202 	orrlt.w	r2, r2, #2
 80123f8:	9307      	strge	r3, [sp, #28]
 80123fa:	9307      	strlt	r3, [sp, #28]
 80123fc:	bfb8      	it	lt
 80123fe:	9204      	strlt	r2, [sp, #16]
 8012400:	7823      	ldrb	r3, [r4, #0]
 8012402:	2b2e      	cmp	r3, #46	; 0x2e
 8012404:	d10c      	bne.n	8012420 <_svfiprintf_r+0x130>
 8012406:	7863      	ldrb	r3, [r4, #1]
 8012408:	2b2a      	cmp	r3, #42	; 0x2a
 801240a:	d134      	bne.n	8012476 <_svfiprintf_r+0x186>
 801240c:	9b03      	ldr	r3, [sp, #12]
 801240e:	1d1a      	adds	r2, r3, #4
 8012410:	681b      	ldr	r3, [r3, #0]
 8012412:	9203      	str	r2, [sp, #12]
 8012414:	2b00      	cmp	r3, #0
 8012416:	bfb8      	it	lt
 8012418:	f04f 33ff 	movlt.w	r3, #4294967295
 801241c:	3402      	adds	r4, #2
 801241e:	9305      	str	r3, [sp, #20]
 8012420:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80124e8 <_svfiprintf_r+0x1f8>
 8012424:	7821      	ldrb	r1, [r4, #0]
 8012426:	2203      	movs	r2, #3
 8012428:	4650      	mov	r0, sl
 801242a:	f7ed fee9 	bl	8000200 <memchr>
 801242e:	b138      	cbz	r0, 8012440 <_svfiprintf_r+0x150>
 8012430:	9b04      	ldr	r3, [sp, #16]
 8012432:	eba0 000a 	sub.w	r0, r0, sl
 8012436:	2240      	movs	r2, #64	; 0x40
 8012438:	4082      	lsls	r2, r0
 801243a:	4313      	orrs	r3, r2
 801243c:	3401      	adds	r4, #1
 801243e:	9304      	str	r3, [sp, #16]
 8012440:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012444:	4825      	ldr	r0, [pc, #148]	; (80124dc <_svfiprintf_r+0x1ec>)
 8012446:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801244a:	2206      	movs	r2, #6
 801244c:	f7ed fed8 	bl	8000200 <memchr>
 8012450:	2800      	cmp	r0, #0
 8012452:	d038      	beq.n	80124c6 <_svfiprintf_r+0x1d6>
 8012454:	4b22      	ldr	r3, [pc, #136]	; (80124e0 <_svfiprintf_r+0x1f0>)
 8012456:	bb1b      	cbnz	r3, 80124a0 <_svfiprintf_r+0x1b0>
 8012458:	9b03      	ldr	r3, [sp, #12]
 801245a:	3307      	adds	r3, #7
 801245c:	f023 0307 	bic.w	r3, r3, #7
 8012460:	3308      	adds	r3, #8
 8012462:	9303      	str	r3, [sp, #12]
 8012464:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012466:	4433      	add	r3, r6
 8012468:	9309      	str	r3, [sp, #36]	; 0x24
 801246a:	e768      	b.n	801233e <_svfiprintf_r+0x4e>
 801246c:	fb0c 3202 	mla	r2, ip, r2, r3
 8012470:	460c      	mov	r4, r1
 8012472:	2001      	movs	r0, #1
 8012474:	e7a6      	b.n	80123c4 <_svfiprintf_r+0xd4>
 8012476:	2300      	movs	r3, #0
 8012478:	3401      	adds	r4, #1
 801247a:	9305      	str	r3, [sp, #20]
 801247c:	4619      	mov	r1, r3
 801247e:	f04f 0c0a 	mov.w	ip, #10
 8012482:	4620      	mov	r0, r4
 8012484:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012488:	3a30      	subs	r2, #48	; 0x30
 801248a:	2a09      	cmp	r2, #9
 801248c:	d903      	bls.n	8012496 <_svfiprintf_r+0x1a6>
 801248e:	2b00      	cmp	r3, #0
 8012490:	d0c6      	beq.n	8012420 <_svfiprintf_r+0x130>
 8012492:	9105      	str	r1, [sp, #20]
 8012494:	e7c4      	b.n	8012420 <_svfiprintf_r+0x130>
 8012496:	fb0c 2101 	mla	r1, ip, r1, r2
 801249a:	4604      	mov	r4, r0
 801249c:	2301      	movs	r3, #1
 801249e:	e7f0      	b.n	8012482 <_svfiprintf_r+0x192>
 80124a0:	ab03      	add	r3, sp, #12
 80124a2:	9300      	str	r3, [sp, #0]
 80124a4:	462a      	mov	r2, r5
 80124a6:	4b0f      	ldr	r3, [pc, #60]	; (80124e4 <_svfiprintf_r+0x1f4>)
 80124a8:	a904      	add	r1, sp, #16
 80124aa:	4638      	mov	r0, r7
 80124ac:	f3af 8000 	nop.w
 80124b0:	1c42      	adds	r2, r0, #1
 80124b2:	4606      	mov	r6, r0
 80124b4:	d1d6      	bne.n	8012464 <_svfiprintf_r+0x174>
 80124b6:	89ab      	ldrh	r3, [r5, #12]
 80124b8:	065b      	lsls	r3, r3, #25
 80124ba:	f53f af2d 	bmi.w	8012318 <_svfiprintf_r+0x28>
 80124be:	9809      	ldr	r0, [sp, #36]	; 0x24
 80124c0:	b01d      	add	sp, #116	; 0x74
 80124c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80124c6:	ab03      	add	r3, sp, #12
 80124c8:	9300      	str	r3, [sp, #0]
 80124ca:	462a      	mov	r2, r5
 80124cc:	4b05      	ldr	r3, [pc, #20]	; (80124e4 <_svfiprintf_r+0x1f4>)
 80124ce:	a904      	add	r1, sp, #16
 80124d0:	4638      	mov	r0, r7
 80124d2:	f000 f879 	bl	80125c8 <_printf_i>
 80124d6:	e7eb      	b.n	80124b0 <_svfiprintf_r+0x1c0>
 80124d8:	0801398c 	.word	0x0801398c
 80124dc:	08013996 	.word	0x08013996
 80124e0:	00000000 	.word	0x00000000
 80124e4:	0801223d 	.word	0x0801223d
 80124e8:	08013992 	.word	0x08013992

080124ec <_printf_common>:
 80124ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80124f0:	4616      	mov	r6, r2
 80124f2:	4699      	mov	r9, r3
 80124f4:	688a      	ldr	r2, [r1, #8]
 80124f6:	690b      	ldr	r3, [r1, #16]
 80124f8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80124fc:	4293      	cmp	r3, r2
 80124fe:	bfb8      	it	lt
 8012500:	4613      	movlt	r3, r2
 8012502:	6033      	str	r3, [r6, #0]
 8012504:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8012508:	4607      	mov	r7, r0
 801250a:	460c      	mov	r4, r1
 801250c:	b10a      	cbz	r2, 8012512 <_printf_common+0x26>
 801250e:	3301      	adds	r3, #1
 8012510:	6033      	str	r3, [r6, #0]
 8012512:	6823      	ldr	r3, [r4, #0]
 8012514:	0699      	lsls	r1, r3, #26
 8012516:	bf42      	ittt	mi
 8012518:	6833      	ldrmi	r3, [r6, #0]
 801251a:	3302      	addmi	r3, #2
 801251c:	6033      	strmi	r3, [r6, #0]
 801251e:	6825      	ldr	r5, [r4, #0]
 8012520:	f015 0506 	ands.w	r5, r5, #6
 8012524:	d106      	bne.n	8012534 <_printf_common+0x48>
 8012526:	f104 0a19 	add.w	sl, r4, #25
 801252a:	68e3      	ldr	r3, [r4, #12]
 801252c:	6832      	ldr	r2, [r6, #0]
 801252e:	1a9b      	subs	r3, r3, r2
 8012530:	42ab      	cmp	r3, r5
 8012532:	dc26      	bgt.n	8012582 <_printf_common+0x96>
 8012534:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8012538:	1e13      	subs	r3, r2, #0
 801253a:	6822      	ldr	r2, [r4, #0]
 801253c:	bf18      	it	ne
 801253e:	2301      	movne	r3, #1
 8012540:	0692      	lsls	r2, r2, #26
 8012542:	d42b      	bmi.n	801259c <_printf_common+0xb0>
 8012544:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8012548:	4649      	mov	r1, r9
 801254a:	4638      	mov	r0, r7
 801254c:	47c0      	blx	r8
 801254e:	3001      	adds	r0, #1
 8012550:	d01e      	beq.n	8012590 <_printf_common+0xa4>
 8012552:	6823      	ldr	r3, [r4, #0]
 8012554:	6922      	ldr	r2, [r4, #16]
 8012556:	f003 0306 	and.w	r3, r3, #6
 801255a:	2b04      	cmp	r3, #4
 801255c:	bf02      	ittt	eq
 801255e:	68e5      	ldreq	r5, [r4, #12]
 8012560:	6833      	ldreq	r3, [r6, #0]
 8012562:	1aed      	subeq	r5, r5, r3
 8012564:	68a3      	ldr	r3, [r4, #8]
 8012566:	bf0c      	ite	eq
 8012568:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801256c:	2500      	movne	r5, #0
 801256e:	4293      	cmp	r3, r2
 8012570:	bfc4      	itt	gt
 8012572:	1a9b      	subgt	r3, r3, r2
 8012574:	18ed      	addgt	r5, r5, r3
 8012576:	2600      	movs	r6, #0
 8012578:	341a      	adds	r4, #26
 801257a:	42b5      	cmp	r5, r6
 801257c:	d11a      	bne.n	80125b4 <_printf_common+0xc8>
 801257e:	2000      	movs	r0, #0
 8012580:	e008      	b.n	8012594 <_printf_common+0xa8>
 8012582:	2301      	movs	r3, #1
 8012584:	4652      	mov	r2, sl
 8012586:	4649      	mov	r1, r9
 8012588:	4638      	mov	r0, r7
 801258a:	47c0      	blx	r8
 801258c:	3001      	adds	r0, #1
 801258e:	d103      	bne.n	8012598 <_printf_common+0xac>
 8012590:	f04f 30ff 	mov.w	r0, #4294967295
 8012594:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012598:	3501      	adds	r5, #1
 801259a:	e7c6      	b.n	801252a <_printf_common+0x3e>
 801259c:	18e1      	adds	r1, r4, r3
 801259e:	1c5a      	adds	r2, r3, #1
 80125a0:	2030      	movs	r0, #48	; 0x30
 80125a2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80125a6:	4422      	add	r2, r4
 80125a8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80125ac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80125b0:	3302      	adds	r3, #2
 80125b2:	e7c7      	b.n	8012544 <_printf_common+0x58>
 80125b4:	2301      	movs	r3, #1
 80125b6:	4622      	mov	r2, r4
 80125b8:	4649      	mov	r1, r9
 80125ba:	4638      	mov	r0, r7
 80125bc:	47c0      	blx	r8
 80125be:	3001      	adds	r0, #1
 80125c0:	d0e6      	beq.n	8012590 <_printf_common+0xa4>
 80125c2:	3601      	adds	r6, #1
 80125c4:	e7d9      	b.n	801257a <_printf_common+0x8e>
	...

080125c8 <_printf_i>:
 80125c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80125cc:	7e0f      	ldrb	r7, [r1, #24]
 80125ce:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80125d0:	2f78      	cmp	r7, #120	; 0x78
 80125d2:	4691      	mov	r9, r2
 80125d4:	4680      	mov	r8, r0
 80125d6:	460c      	mov	r4, r1
 80125d8:	469a      	mov	sl, r3
 80125da:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80125de:	d807      	bhi.n	80125f0 <_printf_i+0x28>
 80125e0:	2f62      	cmp	r7, #98	; 0x62
 80125e2:	d80a      	bhi.n	80125fa <_printf_i+0x32>
 80125e4:	2f00      	cmp	r7, #0
 80125e6:	f000 80d4 	beq.w	8012792 <_printf_i+0x1ca>
 80125ea:	2f58      	cmp	r7, #88	; 0x58
 80125ec:	f000 80c0 	beq.w	8012770 <_printf_i+0x1a8>
 80125f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80125f4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80125f8:	e03a      	b.n	8012670 <_printf_i+0xa8>
 80125fa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80125fe:	2b15      	cmp	r3, #21
 8012600:	d8f6      	bhi.n	80125f0 <_printf_i+0x28>
 8012602:	a101      	add	r1, pc, #4	; (adr r1, 8012608 <_printf_i+0x40>)
 8012604:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8012608:	08012661 	.word	0x08012661
 801260c:	08012675 	.word	0x08012675
 8012610:	080125f1 	.word	0x080125f1
 8012614:	080125f1 	.word	0x080125f1
 8012618:	080125f1 	.word	0x080125f1
 801261c:	080125f1 	.word	0x080125f1
 8012620:	08012675 	.word	0x08012675
 8012624:	080125f1 	.word	0x080125f1
 8012628:	080125f1 	.word	0x080125f1
 801262c:	080125f1 	.word	0x080125f1
 8012630:	080125f1 	.word	0x080125f1
 8012634:	08012779 	.word	0x08012779
 8012638:	080126a1 	.word	0x080126a1
 801263c:	08012733 	.word	0x08012733
 8012640:	080125f1 	.word	0x080125f1
 8012644:	080125f1 	.word	0x080125f1
 8012648:	0801279b 	.word	0x0801279b
 801264c:	080125f1 	.word	0x080125f1
 8012650:	080126a1 	.word	0x080126a1
 8012654:	080125f1 	.word	0x080125f1
 8012658:	080125f1 	.word	0x080125f1
 801265c:	0801273b 	.word	0x0801273b
 8012660:	682b      	ldr	r3, [r5, #0]
 8012662:	1d1a      	adds	r2, r3, #4
 8012664:	681b      	ldr	r3, [r3, #0]
 8012666:	602a      	str	r2, [r5, #0]
 8012668:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801266c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8012670:	2301      	movs	r3, #1
 8012672:	e09f      	b.n	80127b4 <_printf_i+0x1ec>
 8012674:	6820      	ldr	r0, [r4, #0]
 8012676:	682b      	ldr	r3, [r5, #0]
 8012678:	0607      	lsls	r7, r0, #24
 801267a:	f103 0104 	add.w	r1, r3, #4
 801267e:	6029      	str	r1, [r5, #0]
 8012680:	d501      	bpl.n	8012686 <_printf_i+0xbe>
 8012682:	681e      	ldr	r6, [r3, #0]
 8012684:	e003      	b.n	801268e <_printf_i+0xc6>
 8012686:	0646      	lsls	r6, r0, #25
 8012688:	d5fb      	bpl.n	8012682 <_printf_i+0xba>
 801268a:	f9b3 6000 	ldrsh.w	r6, [r3]
 801268e:	2e00      	cmp	r6, #0
 8012690:	da03      	bge.n	801269a <_printf_i+0xd2>
 8012692:	232d      	movs	r3, #45	; 0x2d
 8012694:	4276      	negs	r6, r6
 8012696:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801269a:	485a      	ldr	r0, [pc, #360]	; (8012804 <_printf_i+0x23c>)
 801269c:	230a      	movs	r3, #10
 801269e:	e012      	b.n	80126c6 <_printf_i+0xfe>
 80126a0:	682b      	ldr	r3, [r5, #0]
 80126a2:	6820      	ldr	r0, [r4, #0]
 80126a4:	1d19      	adds	r1, r3, #4
 80126a6:	6029      	str	r1, [r5, #0]
 80126a8:	0605      	lsls	r5, r0, #24
 80126aa:	d501      	bpl.n	80126b0 <_printf_i+0xe8>
 80126ac:	681e      	ldr	r6, [r3, #0]
 80126ae:	e002      	b.n	80126b6 <_printf_i+0xee>
 80126b0:	0641      	lsls	r1, r0, #25
 80126b2:	d5fb      	bpl.n	80126ac <_printf_i+0xe4>
 80126b4:	881e      	ldrh	r6, [r3, #0]
 80126b6:	4853      	ldr	r0, [pc, #332]	; (8012804 <_printf_i+0x23c>)
 80126b8:	2f6f      	cmp	r7, #111	; 0x6f
 80126ba:	bf0c      	ite	eq
 80126bc:	2308      	moveq	r3, #8
 80126be:	230a      	movne	r3, #10
 80126c0:	2100      	movs	r1, #0
 80126c2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80126c6:	6865      	ldr	r5, [r4, #4]
 80126c8:	60a5      	str	r5, [r4, #8]
 80126ca:	2d00      	cmp	r5, #0
 80126cc:	bfa2      	ittt	ge
 80126ce:	6821      	ldrge	r1, [r4, #0]
 80126d0:	f021 0104 	bicge.w	r1, r1, #4
 80126d4:	6021      	strge	r1, [r4, #0]
 80126d6:	b90e      	cbnz	r6, 80126dc <_printf_i+0x114>
 80126d8:	2d00      	cmp	r5, #0
 80126da:	d04b      	beq.n	8012774 <_printf_i+0x1ac>
 80126dc:	4615      	mov	r5, r2
 80126de:	fbb6 f1f3 	udiv	r1, r6, r3
 80126e2:	fb03 6711 	mls	r7, r3, r1, r6
 80126e6:	5dc7      	ldrb	r7, [r0, r7]
 80126e8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80126ec:	4637      	mov	r7, r6
 80126ee:	42bb      	cmp	r3, r7
 80126f0:	460e      	mov	r6, r1
 80126f2:	d9f4      	bls.n	80126de <_printf_i+0x116>
 80126f4:	2b08      	cmp	r3, #8
 80126f6:	d10b      	bne.n	8012710 <_printf_i+0x148>
 80126f8:	6823      	ldr	r3, [r4, #0]
 80126fa:	07de      	lsls	r6, r3, #31
 80126fc:	d508      	bpl.n	8012710 <_printf_i+0x148>
 80126fe:	6923      	ldr	r3, [r4, #16]
 8012700:	6861      	ldr	r1, [r4, #4]
 8012702:	4299      	cmp	r1, r3
 8012704:	bfde      	ittt	le
 8012706:	2330      	movle	r3, #48	; 0x30
 8012708:	f805 3c01 	strble.w	r3, [r5, #-1]
 801270c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8012710:	1b52      	subs	r2, r2, r5
 8012712:	6122      	str	r2, [r4, #16]
 8012714:	f8cd a000 	str.w	sl, [sp]
 8012718:	464b      	mov	r3, r9
 801271a:	aa03      	add	r2, sp, #12
 801271c:	4621      	mov	r1, r4
 801271e:	4640      	mov	r0, r8
 8012720:	f7ff fee4 	bl	80124ec <_printf_common>
 8012724:	3001      	adds	r0, #1
 8012726:	d14a      	bne.n	80127be <_printf_i+0x1f6>
 8012728:	f04f 30ff 	mov.w	r0, #4294967295
 801272c:	b004      	add	sp, #16
 801272e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012732:	6823      	ldr	r3, [r4, #0]
 8012734:	f043 0320 	orr.w	r3, r3, #32
 8012738:	6023      	str	r3, [r4, #0]
 801273a:	4833      	ldr	r0, [pc, #204]	; (8012808 <_printf_i+0x240>)
 801273c:	2778      	movs	r7, #120	; 0x78
 801273e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8012742:	6823      	ldr	r3, [r4, #0]
 8012744:	6829      	ldr	r1, [r5, #0]
 8012746:	061f      	lsls	r7, r3, #24
 8012748:	f851 6b04 	ldr.w	r6, [r1], #4
 801274c:	d402      	bmi.n	8012754 <_printf_i+0x18c>
 801274e:	065f      	lsls	r7, r3, #25
 8012750:	bf48      	it	mi
 8012752:	b2b6      	uxthmi	r6, r6
 8012754:	07df      	lsls	r7, r3, #31
 8012756:	bf48      	it	mi
 8012758:	f043 0320 	orrmi.w	r3, r3, #32
 801275c:	6029      	str	r1, [r5, #0]
 801275e:	bf48      	it	mi
 8012760:	6023      	strmi	r3, [r4, #0]
 8012762:	b91e      	cbnz	r6, 801276c <_printf_i+0x1a4>
 8012764:	6823      	ldr	r3, [r4, #0]
 8012766:	f023 0320 	bic.w	r3, r3, #32
 801276a:	6023      	str	r3, [r4, #0]
 801276c:	2310      	movs	r3, #16
 801276e:	e7a7      	b.n	80126c0 <_printf_i+0xf8>
 8012770:	4824      	ldr	r0, [pc, #144]	; (8012804 <_printf_i+0x23c>)
 8012772:	e7e4      	b.n	801273e <_printf_i+0x176>
 8012774:	4615      	mov	r5, r2
 8012776:	e7bd      	b.n	80126f4 <_printf_i+0x12c>
 8012778:	682b      	ldr	r3, [r5, #0]
 801277a:	6826      	ldr	r6, [r4, #0]
 801277c:	6961      	ldr	r1, [r4, #20]
 801277e:	1d18      	adds	r0, r3, #4
 8012780:	6028      	str	r0, [r5, #0]
 8012782:	0635      	lsls	r5, r6, #24
 8012784:	681b      	ldr	r3, [r3, #0]
 8012786:	d501      	bpl.n	801278c <_printf_i+0x1c4>
 8012788:	6019      	str	r1, [r3, #0]
 801278a:	e002      	b.n	8012792 <_printf_i+0x1ca>
 801278c:	0670      	lsls	r0, r6, #25
 801278e:	d5fb      	bpl.n	8012788 <_printf_i+0x1c0>
 8012790:	8019      	strh	r1, [r3, #0]
 8012792:	2300      	movs	r3, #0
 8012794:	6123      	str	r3, [r4, #16]
 8012796:	4615      	mov	r5, r2
 8012798:	e7bc      	b.n	8012714 <_printf_i+0x14c>
 801279a:	682b      	ldr	r3, [r5, #0]
 801279c:	1d1a      	adds	r2, r3, #4
 801279e:	602a      	str	r2, [r5, #0]
 80127a0:	681d      	ldr	r5, [r3, #0]
 80127a2:	6862      	ldr	r2, [r4, #4]
 80127a4:	2100      	movs	r1, #0
 80127a6:	4628      	mov	r0, r5
 80127a8:	f7ed fd2a 	bl	8000200 <memchr>
 80127ac:	b108      	cbz	r0, 80127b2 <_printf_i+0x1ea>
 80127ae:	1b40      	subs	r0, r0, r5
 80127b0:	6060      	str	r0, [r4, #4]
 80127b2:	6863      	ldr	r3, [r4, #4]
 80127b4:	6123      	str	r3, [r4, #16]
 80127b6:	2300      	movs	r3, #0
 80127b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80127bc:	e7aa      	b.n	8012714 <_printf_i+0x14c>
 80127be:	6923      	ldr	r3, [r4, #16]
 80127c0:	462a      	mov	r2, r5
 80127c2:	4649      	mov	r1, r9
 80127c4:	4640      	mov	r0, r8
 80127c6:	47d0      	blx	sl
 80127c8:	3001      	adds	r0, #1
 80127ca:	d0ad      	beq.n	8012728 <_printf_i+0x160>
 80127cc:	6823      	ldr	r3, [r4, #0]
 80127ce:	079b      	lsls	r3, r3, #30
 80127d0:	d413      	bmi.n	80127fa <_printf_i+0x232>
 80127d2:	68e0      	ldr	r0, [r4, #12]
 80127d4:	9b03      	ldr	r3, [sp, #12]
 80127d6:	4298      	cmp	r0, r3
 80127d8:	bfb8      	it	lt
 80127da:	4618      	movlt	r0, r3
 80127dc:	e7a6      	b.n	801272c <_printf_i+0x164>
 80127de:	2301      	movs	r3, #1
 80127e0:	4632      	mov	r2, r6
 80127e2:	4649      	mov	r1, r9
 80127e4:	4640      	mov	r0, r8
 80127e6:	47d0      	blx	sl
 80127e8:	3001      	adds	r0, #1
 80127ea:	d09d      	beq.n	8012728 <_printf_i+0x160>
 80127ec:	3501      	adds	r5, #1
 80127ee:	68e3      	ldr	r3, [r4, #12]
 80127f0:	9903      	ldr	r1, [sp, #12]
 80127f2:	1a5b      	subs	r3, r3, r1
 80127f4:	42ab      	cmp	r3, r5
 80127f6:	dcf2      	bgt.n	80127de <_printf_i+0x216>
 80127f8:	e7eb      	b.n	80127d2 <_printf_i+0x20a>
 80127fa:	2500      	movs	r5, #0
 80127fc:	f104 0619 	add.w	r6, r4, #25
 8012800:	e7f5      	b.n	80127ee <_printf_i+0x226>
 8012802:	bf00      	nop
 8012804:	0801399d 	.word	0x0801399d
 8012808:	080139ae 	.word	0x080139ae

0801280c <__sflush_r>:
 801280c:	898a      	ldrh	r2, [r1, #12]
 801280e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012812:	4605      	mov	r5, r0
 8012814:	0710      	lsls	r0, r2, #28
 8012816:	460c      	mov	r4, r1
 8012818:	d458      	bmi.n	80128cc <__sflush_r+0xc0>
 801281a:	684b      	ldr	r3, [r1, #4]
 801281c:	2b00      	cmp	r3, #0
 801281e:	dc05      	bgt.n	801282c <__sflush_r+0x20>
 8012820:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8012822:	2b00      	cmp	r3, #0
 8012824:	dc02      	bgt.n	801282c <__sflush_r+0x20>
 8012826:	2000      	movs	r0, #0
 8012828:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801282c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801282e:	2e00      	cmp	r6, #0
 8012830:	d0f9      	beq.n	8012826 <__sflush_r+0x1a>
 8012832:	2300      	movs	r3, #0
 8012834:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8012838:	682f      	ldr	r7, [r5, #0]
 801283a:	6a21      	ldr	r1, [r4, #32]
 801283c:	602b      	str	r3, [r5, #0]
 801283e:	d032      	beq.n	80128a6 <__sflush_r+0x9a>
 8012840:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8012842:	89a3      	ldrh	r3, [r4, #12]
 8012844:	075a      	lsls	r2, r3, #29
 8012846:	d505      	bpl.n	8012854 <__sflush_r+0x48>
 8012848:	6863      	ldr	r3, [r4, #4]
 801284a:	1ac0      	subs	r0, r0, r3
 801284c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801284e:	b10b      	cbz	r3, 8012854 <__sflush_r+0x48>
 8012850:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8012852:	1ac0      	subs	r0, r0, r3
 8012854:	2300      	movs	r3, #0
 8012856:	4602      	mov	r2, r0
 8012858:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801285a:	6a21      	ldr	r1, [r4, #32]
 801285c:	4628      	mov	r0, r5
 801285e:	47b0      	blx	r6
 8012860:	1c43      	adds	r3, r0, #1
 8012862:	89a3      	ldrh	r3, [r4, #12]
 8012864:	d106      	bne.n	8012874 <__sflush_r+0x68>
 8012866:	6829      	ldr	r1, [r5, #0]
 8012868:	291d      	cmp	r1, #29
 801286a:	d82b      	bhi.n	80128c4 <__sflush_r+0xb8>
 801286c:	4a29      	ldr	r2, [pc, #164]	; (8012914 <__sflush_r+0x108>)
 801286e:	410a      	asrs	r2, r1
 8012870:	07d6      	lsls	r6, r2, #31
 8012872:	d427      	bmi.n	80128c4 <__sflush_r+0xb8>
 8012874:	2200      	movs	r2, #0
 8012876:	6062      	str	r2, [r4, #4]
 8012878:	04d9      	lsls	r1, r3, #19
 801287a:	6922      	ldr	r2, [r4, #16]
 801287c:	6022      	str	r2, [r4, #0]
 801287e:	d504      	bpl.n	801288a <__sflush_r+0x7e>
 8012880:	1c42      	adds	r2, r0, #1
 8012882:	d101      	bne.n	8012888 <__sflush_r+0x7c>
 8012884:	682b      	ldr	r3, [r5, #0]
 8012886:	b903      	cbnz	r3, 801288a <__sflush_r+0x7e>
 8012888:	6560      	str	r0, [r4, #84]	; 0x54
 801288a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801288c:	602f      	str	r7, [r5, #0]
 801288e:	2900      	cmp	r1, #0
 8012890:	d0c9      	beq.n	8012826 <__sflush_r+0x1a>
 8012892:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012896:	4299      	cmp	r1, r3
 8012898:	d002      	beq.n	80128a0 <__sflush_r+0x94>
 801289a:	4628      	mov	r0, r5
 801289c:	f7fe fbb2 	bl	8011004 <_free_r>
 80128a0:	2000      	movs	r0, #0
 80128a2:	6360      	str	r0, [r4, #52]	; 0x34
 80128a4:	e7c0      	b.n	8012828 <__sflush_r+0x1c>
 80128a6:	2301      	movs	r3, #1
 80128a8:	4628      	mov	r0, r5
 80128aa:	47b0      	blx	r6
 80128ac:	1c41      	adds	r1, r0, #1
 80128ae:	d1c8      	bne.n	8012842 <__sflush_r+0x36>
 80128b0:	682b      	ldr	r3, [r5, #0]
 80128b2:	2b00      	cmp	r3, #0
 80128b4:	d0c5      	beq.n	8012842 <__sflush_r+0x36>
 80128b6:	2b1d      	cmp	r3, #29
 80128b8:	d001      	beq.n	80128be <__sflush_r+0xb2>
 80128ba:	2b16      	cmp	r3, #22
 80128bc:	d101      	bne.n	80128c2 <__sflush_r+0xb6>
 80128be:	602f      	str	r7, [r5, #0]
 80128c0:	e7b1      	b.n	8012826 <__sflush_r+0x1a>
 80128c2:	89a3      	ldrh	r3, [r4, #12]
 80128c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80128c8:	81a3      	strh	r3, [r4, #12]
 80128ca:	e7ad      	b.n	8012828 <__sflush_r+0x1c>
 80128cc:	690f      	ldr	r7, [r1, #16]
 80128ce:	2f00      	cmp	r7, #0
 80128d0:	d0a9      	beq.n	8012826 <__sflush_r+0x1a>
 80128d2:	0793      	lsls	r3, r2, #30
 80128d4:	680e      	ldr	r6, [r1, #0]
 80128d6:	bf08      	it	eq
 80128d8:	694b      	ldreq	r3, [r1, #20]
 80128da:	600f      	str	r7, [r1, #0]
 80128dc:	bf18      	it	ne
 80128de:	2300      	movne	r3, #0
 80128e0:	eba6 0807 	sub.w	r8, r6, r7
 80128e4:	608b      	str	r3, [r1, #8]
 80128e6:	f1b8 0f00 	cmp.w	r8, #0
 80128ea:	dd9c      	ble.n	8012826 <__sflush_r+0x1a>
 80128ec:	6a21      	ldr	r1, [r4, #32]
 80128ee:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80128f0:	4643      	mov	r3, r8
 80128f2:	463a      	mov	r2, r7
 80128f4:	4628      	mov	r0, r5
 80128f6:	47b0      	blx	r6
 80128f8:	2800      	cmp	r0, #0
 80128fa:	dc06      	bgt.n	801290a <__sflush_r+0xfe>
 80128fc:	89a3      	ldrh	r3, [r4, #12]
 80128fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012902:	81a3      	strh	r3, [r4, #12]
 8012904:	f04f 30ff 	mov.w	r0, #4294967295
 8012908:	e78e      	b.n	8012828 <__sflush_r+0x1c>
 801290a:	4407      	add	r7, r0
 801290c:	eba8 0800 	sub.w	r8, r8, r0
 8012910:	e7e9      	b.n	80128e6 <__sflush_r+0xda>
 8012912:	bf00      	nop
 8012914:	dfbffffe 	.word	0xdfbffffe

08012918 <_fflush_r>:
 8012918:	b538      	push	{r3, r4, r5, lr}
 801291a:	690b      	ldr	r3, [r1, #16]
 801291c:	4605      	mov	r5, r0
 801291e:	460c      	mov	r4, r1
 8012920:	b913      	cbnz	r3, 8012928 <_fflush_r+0x10>
 8012922:	2500      	movs	r5, #0
 8012924:	4628      	mov	r0, r5
 8012926:	bd38      	pop	{r3, r4, r5, pc}
 8012928:	b118      	cbz	r0, 8012932 <_fflush_r+0x1a>
 801292a:	6a03      	ldr	r3, [r0, #32]
 801292c:	b90b      	cbnz	r3, 8012932 <_fflush_r+0x1a>
 801292e:	f7fe f9d9 	bl	8010ce4 <__sinit>
 8012932:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012936:	2b00      	cmp	r3, #0
 8012938:	d0f3      	beq.n	8012922 <_fflush_r+0xa>
 801293a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801293c:	07d0      	lsls	r0, r2, #31
 801293e:	d404      	bmi.n	801294a <_fflush_r+0x32>
 8012940:	0599      	lsls	r1, r3, #22
 8012942:	d402      	bmi.n	801294a <_fflush_r+0x32>
 8012944:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012946:	f7fe fb36 	bl	8010fb6 <__retarget_lock_acquire_recursive>
 801294a:	4628      	mov	r0, r5
 801294c:	4621      	mov	r1, r4
 801294e:	f7ff ff5d 	bl	801280c <__sflush_r>
 8012952:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012954:	07da      	lsls	r2, r3, #31
 8012956:	4605      	mov	r5, r0
 8012958:	d4e4      	bmi.n	8012924 <_fflush_r+0xc>
 801295a:	89a3      	ldrh	r3, [r4, #12]
 801295c:	059b      	lsls	r3, r3, #22
 801295e:	d4e1      	bmi.n	8012924 <_fflush_r+0xc>
 8012960:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012962:	f7fe fb29 	bl	8010fb8 <__retarget_lock_release_recursive>
 8012966:	e7dd      	b.n	8012924 <_fflush_r+0xc>

08012968 <memmove>:
 8012968:	4288      	cmp	r0, r1
 801296a:	b510      	push	{r4, lr}
 801296c:	eb01 0402 	add.w	r4, r1, r2
 8012970:	d902      	bls.n	8012978 <memmove+0x10>
 8012972:	4284      	cmp	r4, r0
 8012974:	4623      	mov	r3, r4
 8012976:	d807      	bhi.n	8012988 <memmove+0x20>
 8012978:	1e43      	subs	r3, r0, #1
 801297a:	42a1      	cmp	r1, r4
 801297c:	d008      	beq.n	8012990 <memmove+0x28>
 801297e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012982:	f803 2f01 	strb.w	r2, [r3, #1]!
 8012986:	e7f8      	b.n	801297a <memmove+0x12>
 8012988:	4402      	add	r2, r0
 801298a:	4601      	mov	r1, r0
 801298c:	428a      	cmp	r2, r1
 801298e:	d100      	bne.n	8012992 <memmove+0x2a>
 8012990:	bd10      	pop	{r4, pc}
 8012992:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8012996:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801299a:	e7f7      	b.n	801298c <memmove+0x24>

0801299c <_sbrk_r>:
 801299c:	b538      	push	{r3, r4, r5, lr}
 801299e:	4d06      	ldr	r5, [pc, #24]	; (80129b8 <_sbrk_r+0x1c>)
 80129a0:	2300      	movs	r3, #0
 80129a2:	4604      	mov	r4, r0
 80129a4:	4608      	mov	r0, r1
 80129a6:	602b      	str	r3, [r5, #0]
 80129a8:	f7ee fe4e 	bl	8001648 <_sbrk>
 80129ac:	1c43      	adds	r3, r0, #1
 80129ae:	d102      	bne.n	80129b6 <_sbrk_r+0x1a>
 80129b0:	682b      	ldr	r3, [r5, #0]
 80129b2:	b103      	cbz	r3, 80129b6 <_sbrk_r+0x1a>
 80129b4:	6023      	str	r3, [r4, #0]
 80129b6:	bd38      	pop	{r3, r4, r5, pc}
 80129b8:	20002a64 	.word	0x20002a64

080129bc <__assert_func>:
 80129bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80129be:	4614      	mov	r4, r2
 80129c0:	461a      	mov	r2, r3
 80129c2:	4b09      	ldr	r3, [pc, #36]	; (80129e8 <__assert_func+0x2c>)
 80129c4:	681b      	ldr	r3, [r3, #0]
 80129c6:	4605      	mov	r5, r0
 80129c8:	68d8      	ldr	r0, [r3, #12]
 80129ca:	b14c      	cbz	r4, 80129e0 <__assert_func+0x24>
 80129cc:	4b07      	ldr	r3, [pc, #28]	; (80129ec <__assert_func+0x30>)
 80129ce:	9100      	str	r1, [sp, #0]
 80129d0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80129d4:	4906      	ldr	r1, [pc, #24]	; (80129f0 <__assert_func+0x34>)
 80129d6:	462b      	mov	r3, r5
 80129d8:	f000 f85c 	bl	8012a94 <fiprintf>
 80129dc:	f000 f86c 	bl	8012ab8 <abort>
 80129e0:	4b04      	ldr	r3, [pc, #16]	; (80129f4 <__assert_func+0x38>)
 80129e2:	461c      	mov	r4, r3
 80129e4:	e7f3      	b.n	80129ce <__assert_func+0x12>
 80129e6:	bf00      	nop
 80129e8:	200002d4 	.word	0x200002d4
 80129ec:	080139bf 	.word	0x080139bf
 80129f0:	080139cc 	.word	0x080139cc
 80129f4:	080139fa 	.word	0x080139fa

080129f8 <_calloc_r>:
 80129f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80129fa:	fba1 2402 	umull	r2, r4, r1, r2
 80129fe:	b94c      	cbnz	r4, 8012a14 <_calloc_r+0x1c>
 8012a00:	4611      	mov	r1, r2
 8012a02:	9201      	str	r2, [sp, #4]
 8012a04:	f7fe fec2 	bl	801178c <_malloc_r>
 8012a08:	9a01      	ldr	r2, [sp, #4]
 8012a0a:	4605      	mov	r5, r0
 8012a0c:	b930      	cbnz	r0, 8012a1c <_calloc_r+0x24>
 8012a0e:	4628      	mov	r0, r5
 8012a10:	b003      	add	sp, #12
 8012a12:	bd30      	pop	{r4, r5, pc}
 8012a14:	220c      	movs	r2, #12
 8012a16:	6002      	str	r2, [r0, #0]
 8012a18:	2500      	movs	r5, #0
 8012a1a:	e7f8      	b.n	8012a0e <_calloc_r+0x16>
 8012a1c:	4621      	mov	r1, r4
 8012a1e:	f7fe fa13 	bl	8010e48 <memset>
 8012a22:	e7f4      	b.n	8012a0e <_calloc_r+0x16>

08012a24 <malloc>:
 8012a24:	4b02      	ldr	r3, [pc, #8]	; (8012a30 <malloc+0xc>)
 8012a26:	4601      	mov	r1, r0
 8012a28:	6818      	ldr	r0, [r3, #0]
 8012a2a:	f7fe beaf 	b.w	801178c <_malloc_r>
 8012a2e:	bf00      	nop
 8012a30:	200002d4 	.word	0x200002d4

08012a34 <_realloc_r>:
 8012a34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012a38:	4680      	mov	r8, r0
 8012a3a:	4614      	mov	r4, r2
 8012a3c:	460e      	mov	r6, r1
 8012a3e:	b921      	cbnz	r1, 8012a4a <_realloc_r+0x16>
 8012a40:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012a44:	4611      	mov	r1, r2
 8012a46:	f7fe bea1 	b.w	801178c <_malloc_r>
 8012a4a:	b92a      	cbnz	r2, 8012a58 <_realloc_r+0x24>
 8012a4c:	f7fe fada 	bl	8011004 <_free_r>
 8012a50:	4625      	mov	r5, r4
 8012a52:	4628      	mov	r0, r5
 8012a54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012a58:	f000 f835 	bl	8012ac6 <_malloc_usable_size_r>
 8012a5c:	4284      	cmp	r4, r0
 8012a5e:	4607      	mov	r7, r0
 8012a60:	d802      	bhi.n	8012a68 <_realloc_r+0x34>
 8012a62:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8012a66:	d812      	bhi.n	8012a8e <_realloc_r+0x5a>
 8012a68:	4621      	mov	r1, r4
 8012a6a:	4640      	mov	r0, r8
 8012a6c:	f7fe fe8e 	bl	801178c <_malloc_r>
 8012a70:	4605      	mov	r5, r0
 8012a72:	2800      	cmp	r0, #0
 8012a74:	d0ed      	beq.n	8012a52 <_realloc_r+0x1e>
 8012a76:	42bc      	cmp	r4, r7
 8012a78:	4622      	mov	r2, r4
 8012a7a:	4631      	mov	r1, r6
 8012a7c:	bf28      	it	cs
 8012a7e:	463a      	movcs	r2, r7
 8012a80:	f7fe faa3 	bl	8010fca <memcpy>
 8012a84:	4631      	mov	r1, r6
 8012a86:	4640      	mov	r0, r8
 8012a88:	f7fe fabc 	bl	8011004 <_free_r>
 8012a8c:	e7e1      	b.n	8012a52 <_realloc_r+0x1e>
 8012a8e:	4635      	mov	r5, r6
 8012a90:	e7df      	b.n	8012a52 <_realloc_r+0x1e>
	...

08012a94 <fiprintf>:
 8012a94:	b40e      	push	{r1, r2, r3}
 8012a96:	b503      	push	{r0, r1, lr}
 8012a98:	4601      	mov	r1, r0
 8012a9a:	ab03      	add	r3, sp, #12
 8012a9c:	4805      	ldr	r0, [pc, #20]	; (8012ab4 <fiprintf+0x20>)
 8012a9e:	f853 2b04 	ldr.w	r2, [r3], #4
 8012aa2:	6800      	ldr	r0, [r0, #0]
 8012aa4:	9301      	str	r3, [sp, #4]
 8012aa6:	f000 f83f 	bl	8012b28 <_vfiprintf_r>
 8012aaa:	b002      	add	sp, #8
 8012aac:	f85d eb04 	ldr.w	lr, [sp], #4
 8012ab0:	b003      	add	sp, #12
 8012ab2:	4770      	bx	lr
 8012ab4:	200002d4 	.word	0x200002d4

08012ab8 <abort>:
 8012ab8:	b508      	push	{r3, lr}
 8012aba:	2006      	movs	r0, #6
 8012abc:	f000 fa0c 	bl	8012ed8 <raise>
 8012ac0:	2001      	movs	r0, #1
 8012ac2:	f7ee fd49 	bl	8001558 <_exit>

08012ac6 <_malloc_usable_size_r>:
 8012ac6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012aca:	1f18      	subs	r0, r3, #4
 8012acc:	2b00      	cmp	r3, #0
 8012ace:	bfbc      	itt	lt
 8012ad0:	580b      	ldrlt	r3, [r1, r0]
 8012ad2:	18c0      	addlt	r0, r0, r3
 8012ad4:	4770      	bx	lr

08012ad6 <__sfputc_r>:
 8012ad6:	6893      	ldr	r3, [r2, #8]
 8012ad8:	3b01      	subs	r3, #1
 8012ada:	2b00      	cmp	r3, #0
 8012adc:	b410      	push	{r4}
 8012ade:	6093      	str	r3, [r2, #8]
 8012ae0:	da08      	bge.n	8012af4 <__sfputc_r+0x1e>
 8012ae2:	6994      	ldr	r4, [r2, #24]
 8012ae4:	42a3      	cmp	r3, r4
 8012ae6:	db01      	blt.n	8012aec <__sfputc_r+0x16>
 8012ae8:	290a      	cmp	r1, #10
 8012aea:	d103      	bne.n	8012af4 <__sfputc_r+0x1e>
 8012aec:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012af0:	f000 b934 	b.w	8012d5c <__swbuf_r>
 8012af4:	6813      	ldr	r3, [r2, #0]
 8012af6:	1c58      	adds	r0, r3, #1
 8012af8:	6010      	str	r0, [r2, #0]
 8012afa:	7019      	strb	r1, [r3, #0]
 8012afc:	4608      	mov	r0, r1
 8012afe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012b02:	4770      	bx	lr

08012b04 <__sfputs_r>:
 8012b04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012b06:	4606      	mov	r6, r0
 8012b08:	460f      	mov	r7, r1
 8012b0a:	4614      	mov	r4, r2
 8012b0c:	18d5      	adds	r5, r2, r3
 8012b0e:	42ac      	cmp	r4, r5
 8012b10:	d101      	bne.n	8012b16 <__sfputs_r+0x12>
 8012b12:	2000      	movs	r0, #0
 8012b14:	e007      	b.n	8012b26 <__sfputs_r+0x22>
 8012b16:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012b1a:	463a      	mov	r2, r7
 8012b1c:	4630      	mov	r0, r6
 8012b1e:	f7ff ffda 	bl	8012ad6 <__sfputc_r>
 8012b22:	1c43      	adds	r3, r0, #1
 8012b24:	d1f3      	bne.n	8012b0e <__sfputs_r+0xa>
 8012b26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08012b28 <_vfiprintf_r>:
 8012b28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012b2c:	460d      	mov	r5, r1
 8012b2e:	b09d      	sub	sp, #116	; 0x74
 8012b30:	4614      	mov	r4, r2
 8012b32:	4698      	mov	r8, r3
 8012b34:	4606      	mov	r6, r0
 8012b36:	b118      	cbz	r0, 8012b40 <_vfiprintf_r+0x18>
 8012b38:	6a03      	ldr	r3, [r0, #32]
 8012b3a:	b90b      	cbnz	r3, 8012b40 <_vfiprintf_r+0x18>
 8012b3c:	f7fe f8d2 	bl	8010ce4 <__sinit>
 8012b40:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012b42:	07d9      	lsls	r1, r3, #31
 8012b44:	d405      	bmi.n	8012b52 <_vfiprintf_r+0x2a>
 8012b46:	89ab      	ldrh	r3, [r5, #12]
 8012b48:	059a      	lsls	r2, r3, #22
 8012b4a:	d402      	bmi.n	8012b52 <_vfiprintf_r+0x2a>
 8012b4c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012b4e:	f7fe fa32 	bl	8010fb6 <__retarget_lock_acquire_recursive>
 8012b52:	89ab      	ldrh	r3, [r5, #12]
 8012b54:	071b      	lsls	r3, r3, #28
 8012b56:	d501      	bpl.n	8012b5c <_vfiprintf_r+0x34>
 8012b58:	692b      	ldr	r3, [r5, #16]
 8012b5a:	b99b      	cbnz	r3, 8012b84 <_vfiprintf_r+0x5c>
 8012b5c:	4629      	mov	r1, r5
 8012b5e:	4630      	mov	r0, r6
 8012b60:	f000 f93a 	bl	8012dd8 <__swsetup_r>
 8012b64:	b170      	cbz	r0, 8012b84 <_vfiprintf_r+0x5c>
 8012b66:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012b68:	07dc      	lsls	r4, r3, #31
 8012b6a:	d504      	bpl.n	8012b76 <_vfiprintf_r+0x4e>
 8012b6c:	f04f 30ff 	mov.w	r0, #4294967295
 8012b70:	b01d      	add	sp, #116	; 0x74
 8012b72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012b76:	89ab      	ldrh	r3, [r5, #12]
 8012b78:	0598      	lsls	r0, r3, #22
 8012b7a:	d4f7      	bmi.n	8012b6c <_vfiprintf_r+0x44>
 8012b7c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012b7e:	f7fe fa1b 	bl	8010fb8 <__retarget_lock_release_recursive>
 8012b82:	e7f3      	b.n	8012b6c <_vfiprintf_r+0x44>
 8012b84:	2300      	movs	r3, #0
 8012b86:	9309      	str	r3, [sp, #36]	; 0x24
 8012b88:	2320      	movs	r3, #32
 8012b8a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012b8e:	f8cd 800c 	str.w	r8, [sp, #12]
 8012b92:	2330      	movs	r3, #48	; 0x30
 8012b94:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8012d48 <_vfiprintf_r+0x220>
 8012b98:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012b9c:	f04f 0901 	mov.w	r9, #1
 8012ba0:	4623      	mov	r3, r4
 8012ba2:	469a      	mov	sl, r3
 8012ba4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012ba8:	b10a      	cbz	r2, 8012bae <_vfiprintf_r+0x86>
 8012baa:	2a25      	cmp	r2, #37	; 0x25
 8012bac:	d1f9      	bne.n	8012ba2 <_vfiprintf_r+0x7a>
 8012bae:	ebba 0b04 	subs.w	fp, sl, r4
 8012bb2:	d00b      	beq.n	8012bcc <_vfiprintf_r+0xa4>
 8012bb4:	465b      	mov	r3, fp
 8012bb6:	4622      	mov	r2, r4
 8012bb8:	4629      	mov	r1, r5
 8012bba:	4630      	mov	r0, r6
 8012bbc:	f7ff ffa2 	bl	8012b04 <__sfputs_r>
 8012bc0:	3001      	adds	r0, #1
 8012bc2:	f000 80a9 	beq.w	8012d18 <_vfiprintf_r+0x1f0>
 8012bc6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012bc8:	445a      	add	r2, fp
 8012bca:	9209      	str	r2, [sp, #36]	; 0x24
 8012bcc:	f89a 3000 	ldrb.w	r3, [sl]
 8012bd0:	2b00      	cmp	r3, #0
 8012bd2:	f000 80a1 	beq.w	8012d18 <_vfiprintf_r+0x1f0>
 8012bd6:	2300      	movs	r3, #0
 8012bd8:	f04f 32ff 	mov.w	r2, #4294967295
 8012bdc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012be0:	f10a 0a01 	add.w	sl, sl, #1
 8012be4:	9304      	str	r3, [sp, #16]
 8012be6:	9307      	str	r3, [sp, #28]
 8012be8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012bec:	931a      	str	r3, [sp, #104]	; 0x68
 8012bee:	4654      	mov	r4, sl
 8012bf0:	2205      	movs	r2, #5
 8012bf2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012bf6:	4854      	ldr	r0, [pc, #336]	; (8012d48 <_vfiprintf_r+0x220>)
 8012bf8:	f7ed fb02 	bl	8000200 <memchr>
 8012bfc:	9a04      	ldr	r2, [sp, #16]
 8012bfe:	b9d8      	cbnz	r0, 8012c38 <_vfiprintf_r+0x110>
 8012c00:	06d1      	lsls	r1, r2, #27
 8012c02:	bf44      	itt	mi
 8012c04:	2320      	movmi	r3, #32
 8012c06:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012c0a:	0713      	lsls	r3, r2, #28
 8012c0c:	bf44      	itt	mi
 8012c0e:	232b      	movmi	r3, #43	; 0x2b
 8012c10:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012c14:	f89a 3000 	ldrb.w	r3, [sl]
 8012c18:	2b2a      	cmp	r3, #42	; 0x2a
 8012c1a:	d015      	beq.n	8012c48 <_vfiprintf_r+0x120>
 8012c1c:	9a07      	ldr	r2, [sp, #28]
 8012c1e:	4654      	mov	r4, sl
 8012c20:	2000      	movs	r0, #0
 8012c22:	f04f 0c0a 	mov.w	ip, #10
 8012c26:	4621      	mov	r1, r4
 8012c28:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012c2c:	3b30      	subs	r3, #48	; 0x30
 8012c2e:	2b09      	cmp	r3, #9
 8012c30:	d94d      	bls.n	8012cce <_vfiprintf_r+0x1a6>
 8012c32:	b1b0      	cbz	r0, 8012c62 <_vfiprintf_r+0x13a>
 8012c34:	9207      	str	r2, [sp, #28]
 8012c36:	e014      	b.n	8012c62 <_vfiprintf_r+0x13a>
 8012c38:	eba0 0308 	sub.w	r3, r0, r8
 8012c3c:	fa09 f303 	lsl.w	r3, r9, r3
 8012c40:	4313      	orrs	r3, r2
 8012c42:	9304      	str	r3, [sp, #16]
 8012c44:	46a2      	mov	sl, r4
 8012c46:	e7d2      	b.n	8012bee <_vfiprintf_r+0xc6>
 8012c48:	9b03      	ldr	r3, [sp, #12]
 8012c4a:	1d19      	adds	r1, r3, #4
 8012c4c:	681b      	ldr	r3, [r3, #0]
 8012c4e:	9103      	str	r1, [sp, #12]
 8012c50:	2b00      	cmp	r3, #0
 8012c52:	bfbb      	ittet	lt
 8012c54:	425b      	neglt	r3, r3
 8012c56:	f042 0202 	orrlt.w	r2, r2, #2
 8012c5a:	9307      	strge	r3, [sp, #28]
 8012c5c:	9307      	strlt	r3, [sp, #28]
 8012c5e:	bfb8      	it	lt
 8012c60:	9204      	strlt	r2, [sp, #16]
 8012c62:	7823      	ldrb	r3, [r4, #0]
 8012c64:	2b2e      	cmp	r3, #46	; 0x2e
 8012c66:	d10c      	bne.n	8012c82 <_vfiprintf_r+0x15a>
 8012c68:	7863      	ldrb	r3, [r4, #1]
 8012c6a:	2b2a      	cmp	r3, #42	; 0x2a
 8012c6c:	d134      	bne.n	8012cd8 <_vfiprintf_r+0x1b0>
 8012c6e:	9b03      	ldr	r3, [sp, #12]
 8012c70:	1d1a      	adds	r2, r3, #4
 8012c72:	681b      	ldr	r3, [r3, #0]
 8012c74:	9203      	str	r2, [sp, #12]
 8012c76:	2b00      	cmp	r3, #0
 8012c78:	bfb8      	it	lt
 8012c7a:	f04f 33ff 	movlt.w	r3, #4294967295
 8012c7e:	3402      	adds	r4, #2
 8012c80:	9305      	str	r3, [sp, #20]
 8012c82:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8012d58 <_vfiprintf_r+0x230>
 8012c86:	7821      	ldrb	r1, [r4, #0]
 8012c88:	2203      	movs	r2, #3
 8012c8a:	4650      	mov	r0, sl
 8012c8c:	f7ed fab8 	bl	8000200 <memchr>
 8012c90:	b138      	cbz	r0, 8012ca2 <_vfiprintf_r+0x17a>
 8012c92:	9b04      	ldr	r3, [sp, #16]
 8012c94:	eba0 000a 	sub.w	r0, r0, sl
 8012c98:	2240      	movs	r2, #64	; 0x40
 8012c9a:	4082      	lsls	r2, r0
 8012c9c:	4313      	orrs	r3, r2
 8012c9e:	3401      	adds	r4, #1
 8012ca0:	9304      	str	r3, [sp, #16]
 8012ca2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012ca6:	4829      	ldr	r0, [pc, #164]	; (8012d4c <_vfiprintf_r+0x224>)
 8012ca8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012cac:	2206      	movs	r2, #6
 8012cae:	f7ed faa7 	bl	8000200 <memchr>
 8012cb2:	2800      	cmp	r0, #0
 8012cb4:	d03f      	beq.n	8012d36 <_vfiprintf_r+0x20e>
 8012cb6:	4b26      	ldr	r3, [pc, #152]	; (8012d50 <_vfiprintf_r+0x228>)
 8012cb8:	bb1b      	cbnz	r3, 8012d02 <_vfiprintf_r+0x1da>
 8012cba:	9b03      	ldr	r3, [sp, #12]
 8012cbc:	3307      	adds	r3, #7
 8012cbe:	f023 0307 	bic.w	r3, r3, #7
 8012cc2:	3308      	adds	r3, #8
 8012cc4:	9303      	str	r3, [sp, #12]
 8012cc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012cc8:	443b      	add	r3, r7
 8012cca:	9309      	str	r3, [sp, #36]	; 0x24
 8012ccc:	e768      	b.n	8012ba0 <_vfiprintf_r+0x78>
 8012cce:	fb0c 3202 	mla	r2, ip, r2, r3
 8012cd2:	460c      	mov	r4, r1
 8012cd4:	2001      	movs	r0, #1
 8012cd6:	e7a6      	b.n	8012c26 <_vfiprintf_r+0xfe>
 8012cd8:	2300      	movs	r3, #0
 8012cda:	3401      	adds	r4, #1
 8012cdc:	9305      	str	r3, [sp, #20]
 8012cde:	4619      	mov	r1, r3
 8012ce0:	f04f 0c0a 	mov.w	ip, #10
 8012ce4:	4620      	mov	r0, r4
 8012ce6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012cea:	3a30      	subs	r2, #48	; 0x30
 8012cec:	2a09      	cmp	r2, #9
 8012cee:	d903      	bls.n	8012cf8 <_vfiprintf_r+0x1d0>
 8012cf0:	2b00      	cmp	r3, #0
 8012cf2:	d0c6      	beq.n	8012c82 <_vfiprintf_r+0x15a>
 8012cf4:	9105      	str	r1, [sp, #20]
 8012cf6:	e7c4      	b.n	8012c82 <_vfiprintf_r+0x15a>
 8012cf8:	fb0c 2101 	mla	r1, ip, r1, r2
 8012cfc:	4604      	mov	r4, r0
 8012cfe:	2301      	movs	r3, #1
 8012d00:	e7f0      	b.n	8012ce4 <_vfiprintf_r+0x1bc>
 8012d02:	ab03      	add	r3, sp, #12
 8012d04:	9300      	str	r3, [sp, #0]
 8012d06:	462a      	mov	r2, r5
 8012d08:	4b12      	ldr	r3, [pc, #72]	; (8012d54 <_vfiprintf_r+0x22c>)
 8012d0a:	a904      	add	r1, sp, #16
 8012d0c:	4630      	mov	r0, r6
 8012d0e:	f3af 8000 	nop.w
 8012d12:	4607      	mov	r7, r0
 8012d14:	1c78      	adds	r0, r7, #1
 8012d16:	d1d6      	bne.n	8012cc6 <_vfiprintf_r+0x19e>
 8012d18:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012d1a:	07d9      	lsls	r1, r3, #31
 8012d1c:	d405      	bmi.n	8012d2a <_vfiprintf_r+0x202>
 8012d1e:	89ab      	ldrh	r3, [r5, #12]
 8012d20:	059a      	lsls	r2, r3, #22
 8012d22:	d402      	bmi.n	8012d2a <_vfiprintf_r+0x202>
 8012d24:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012d26:	f7fe f947 	bl	8010fb8 <__retarget_lock_release_recursive>
 8012d2a:	89ab      	ldrh	r3, [r5, #12]
 8012d2c:	065b      	lsls	r3, r3, #25
 8012d2e:	f53f af1d 	bmi.w	8012b6c <_vfiprintf_r+0x44>
 8012d32:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012d34:	e71c      	b.n	8012b70 <_vfiprintf_r+0x48>
 8012d36:	ab03      	add	r3, sp, #12
 8012d38:	9300      	str	r3, [sp, #0]
 8012d3a:	462a      	mov	r2, r5
 8012d3c:	4b05      	ldr	r3, [pc, #20]	; (8012d54 <_vfiprintf_r+0x22c>)
 8012d3e:	a904      	add	r1, sp, #16
 8012d40:	4630      	mov	r0, r6
 8012d42:	f7ff fc41 	bl	80125c8 <_printf_i>
 8012d46:	e7e4      	b.n	8012d12 <_vfiprintf_r+0x1ea>
 8012d48:	0801398c 	.word	0x0801398c
 8012d4c:	08013996 	.word	0x08013996
 8012d50:	00000000 	.word	0x00000000
 8012d54:	08012b05 	.word	0x08012b05
 8012d58:	08013992 	.word	0x08013992

08012d5c <__swbuf_r>:
 8012d5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012d5e:	460e      	mov	r6, r1
 8012d60:	4614      	mov	r4, r2
 8012d62:	4605      	mov	r5, r0
 8012d64:	b118      	cbz	r0, 8012d6e <__swbuf_r+0x12>
 8012d66:	6a03      	ldr	r3, [r0, #32]
 8012d68:	b90b      	cbnz	r3, 8012d6e <__swbuf_r+0x12>
 8012d6a:	f7fd ffbb 	bl	8010ce4 <__sinit>
 8012d6e:	69a3      	ldr	r3, [r4, #24]
 8012d70:	60a3      	str	r3, [r4, #8]
 8012d72:	89a3      	ldrh	r3, [r4, #12]
 8012d74:	071a      	lsls	r2, r3, #28
 8012d76:	d525      	bpl.n	8012dc4 <__swbuf_r+0x68>
 8012d78:	6923      	ldr	r3, [r4, #16]
 8012d7a:	b31b      	cbz	r3, 8012dc4 <__swbuf_r+0x68>
 8012d7c:	6823      	ldr	r3, [r4, #0]
 8012d7e:	6922      	ldr	r2, [r4, #16]
 8012d80:	1a98      	subs	r0, r3, r2
 8012d82:	6963      	ldr	r3, [r4, #20]
 8012d84:	b2f6      	uxtb	r6, r6
 8012d86:	4283      	cmp	r3, r0
 8012d88:	4637      	mov	r7, r6
 8012d8a:	dc04      	bgt.n	8012d96 <__swbuf_r+0x3a>
 8012d8c:	4621      	mov	r1, r4
 8012d8e:	4628      	mov	r0, r5
 8012d90:	f7ff fdc2 	bl	8012918 <_fflush_r>
 8012d94:	b9e0      	cbnz	r0, 8012dd0 <__swbuf_r+0x74>
 8012d96:	68a3      	ldr	r3, [r4, #8]
 8012d98:	3b01      	subs	r3, #1
 8012d9a:	60a3      	str	r3, [r4, #8]
 8012d9c:	6823      	ldr	r3, [r4, #0]
 8012d9e:	1c5a      	adds	r2, r3, #1
 8012da0:	6022      	str	r2, [r4, #0]
 8012da2:	701e      	strb	r6, [r3, #0]
 8012da4:	6962      	ldr	r2, [r4, #20]
 8012da6:	1c43      	adds	r3, r0, #1
 8012da8:	429a      	cmp	r2, r3
 8012daa:	d004      	beq.n	8012db6 <__swbuf_r+0x5a>
 8012dac:	89a3      	ldrh	r3, [r4, #12]
 8012dae:	07db      	lsls	r3, r3, #31
 8012db0:	d506      	bpl.n	8012dc0 <__swbuf_r+0x64>
 8012db2:	2e0a      	cmp	r6, #10
 8012db4:	d104      	bne.n	8012dc0 <__swbuf_r+0x64>
 8012db6:	4621      	mov	r1, r4
 8012db8:	4628      	mov	r0, r5
 8012dba:	f7ff fdad 	bl	8012918 <_fflush_r>
 8012dbe:	b938      	cbnz	r0, 8012dd0 <__swbuf_r+0x74>
 8012dc0:	4638      	mov	r0, r7
 8012dc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012dc4:	4621      	mov	r1, r4
 8012dc6:	4628      	mov	r0, r5
 8012dc8:	f000 f806 	bl	8012dd8 <__swsetup_r>
 8012dcc:	2800      	cmp	r0, #0
 8012dce:	d0d5      	beq.n	8012d7c <__swbuf_r+0x20>
 8012dd0:	f04f 37ff 	mov.w	r7, #4294967295
 8012dd4:	e7f4      	b.n	8012dc0 <__swbuf_r+0x64>
	...

08012dd8 <__swsetup_r>:
 8012dd8:	b538      	push	{r3, r4, r5, lr}
 8012dda:	4b2a      	ldr	r3, [pc, #168]	; (8012e84 <__swsetup_r+0xac>)
 8012ddc:	4605      	mov	r5, r0
 8012dde:	6818      	ldr	r0, [r3, #0]
 8012de0:	460c      	mov	r4, r1
 8012de2:	b118      	cbz	r0, 8012dec <__swsetup_r+0x14>
 8012de4:	6a03      	ldr	r3, [r0, #32]
 8012de6:	b90b      	cbnz	r3, 8012dec <__swsetup_r+0x14>
 8012de8:	f7fd ff7c 	bl	8010ce4 <__sinit>
 8012dec:	89a3      	ldrh	r3, [r4, #12]
 8012dee:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012df2:	0718      	lsls	r0, r3, #28
 8012df4:	d422      	bmi.n	8012e3c <__swsetup_r+0x64>
 8012df6:	06d9      	lsls	r1, r3, #27
 8012df8:	d407      	bmi.n	8012e0a <__swsetup_r+0x32>
 8012dfa:	2309      	movs	r3, #9
 8012dfc:	602b      	str	r3, [r5, #0]
 8012dfe:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8012e02:	81a3      	strh	r3, [r4, #12]
 8012e04:	f04f 30ff 	mov.w	r0, #4294967295
 8012e08:	e034      	b.n	8012e74 <__swsetup_r+0x9c>
 8012e0a:	0758      	lsls	r0, r3, #29
 8012e0c:	d512      	bpl.n	8012e34 <__swsetup_r+0x5c>
 8012e0e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012e10:	b141      	cbz	r1, 8012e24 <__swsetup_r+0x4c>
 8012e12:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012e16:	4299      	cmp	r1, r3
 8012e18:	d002      	beq.n	8012e20 <__swsetup_r+0x48>
 8012e1a:	4628      	mov	r0, r5
 8012e1c:	f7fe f8f2 	bl	8011004 <_free_r>
 8012e20:	2300      	movs	r3, #0
 8012e22:	6363      	str	r3, [r4, #52]	; 0x34
 8012e24:	89a3      	ldrh	r3, [r4, #12]
 8012e26:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8012e2a:	81a3      	strh	r3, [r4, #12]
 8012e2c:	2300      	movs	r3, #0
 8012e2e:	6063      	str	r3, [r4, #4]
 8012e30:	6923      	ldr	r3, [r4, #16]
 8012e32:	6023      	str	r3, [r4, #0]
 8012e34:	89a3      	ldrh	r3, [r4, #12]
 8012e36:	f043 0308 	orr.w	r3, r3, #8
 8012e3a:	81a3      	strh	r3, [r4, #12]
 8012e3c:	6923      	ldr	r3, [r4, #16]
 8012e3e:	b94b      	cbnz	r3, 8012e54 <__swsetup_r+0x7c>
 8012e40:	89a3      	ldrh	r3, [r4, #12]
 8012e42:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8012e46:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012e4a:	d003      	beq.n	8012e54 <__swsetup_r+0x7c>
 8012e4c:	4621      	mov	r1, r4
 8012e4e:	4628      	mov	r0, r5
 8012e50:	f000 f884 	bl	8012f5c <__smakebuf_r>
 8012e54:	89a0      	ldrh	r0, [r4, #12]
 8012e56:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012e5a:	f010 0301 	ands.w	r3, r0, #1
 8012e5e:	d00a      	beq.n	8012e76 <__swsetup_r+0x9e>
 8012e60:	2300      	movs	r3, #0
 8012e62:	60a3      	str	r3, [r4, #8]
 8012e64:	6963      	ldr	r3, [r4, #20]
 8012e66:	425b      	negs	r3, r3
 8012e68:	61a3      	str	r3, [r4, #24]
 8012e6a:	6923      	ldr	r3, [r4, #16]
 8012e6c:	b943      	cbnz	r3, 8012e80 <__swsetup_r+0xa8>
 8012e6e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8012e72:	d1c4      	bne.n	8012dfe <__swsetup_r+0x26>
 8012e74:	bd38      	pop	{r3, r4, r5, pc}
 8012e76:	0781      	lsls	r1, r0, #30
 8012e78:	bf58      	it	pl
 8012e7a:	6963      	ldrpl	r3, [r4, #20]
 8012e7c:	60a3      	str	r3, [r4, #8]
 8012e7e:	e7f4      	b.n	8012e6a <__swsetup_r+0x92>
 8012e80:	2000      	movs	r0, #0
 8012e82:	e7f7      	b.n	8012e74 <__swsetup_r+0x9c>
 8012e84:	200002d4 	.word	0x200002d4

08012e88 <_raise_r>:
 8012e88:	291f      	cmp	r1, #31
 8012e8a:	b538      	push	{r3, r4, r5, lr}
 8012e8c:	4604      	mov	r4, r0
 8012e8e:	460d      	mov	r5, r1
 8012e90:	d904      	bls.n	8012e9c <_raise_r+0x14>
 8012e92:	2316      	movs	r3, #22
 8012e94:	6003      	str	r3, [r0, #0]
 8012e96:	f04f 30ff 	mov.w	r0, #4294967295
 8012e9a:	bd38      	pop	{r3, r4, r5, pc}
 8012e9c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8012e9e:	b112      	cbz	r2, 8012ea6 <_raise_r+0x1e>
 8012ea0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012ea4:	b94b      	cbnz	r3, 8012eba <_raise_r+0x32>
 8012ea6:	4620      	mov	r0, r4
 8012ea8:	f000 f830 	bl	8012f0c <_getpid_r>
 8012eac:	462a      	mov	r2, r5
 8012eae:	4601      	mov	r1, r0
 8012eb0:	4620      	mov	r0, r4
 8012eb2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012eb6:	f000 b817 	b.w	8012ee8 <_kill_r>
 8012eba:	2b01      	cmp	r3, #1
 8012ebc:	d00a      	beq.n	8012ed4 <_raise_r+0x4c>
 8012ebe:	1c59      	adds	r1, r3, #1
 8012ec0:	d103      	bne.n	8012eca <_raise_r+0x42>
 8012ec2:	2316      	movs	r3, #22
 8012ec4:	6003      	str	r3, [r0, #0]
 8012ec6:	2001      	movs	r0, #1
 8012ec8:	e7e7      	b.n	8012e9a <_raise_r+0x12>
 8012eca:	2400      	movs	r4, #0
 8012ecc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8012ed0:	4628      	mov	r0, r5
 8012ed2:	4798      	blx	r3
 8012ed4:	2000      	movs	r0, #0
 8012ed6:	e7e0      	b.n	8012e9a <_raise_r+0x12>

08012ed8 <raise>:
 8012ed8:	4b02      	ldr	r3, [pc, #8]	; (8012ee4 <raise+0xc>)
 8012eda:	4601      	mov	r1, r0
 8012edc:	6818      	ldr	r0, [r3, #0]
 8012ede:	f7ff bfd3 	b.w	8012e88 <_raise_r>
 8012ee2:	bf00      	nop
 8012ee4:	200002d4 	.word	0x200002d4

08012ee8 <_kill_r>:
 8012ee8:	b538      	push	{r3, r4, r5, lr}
 8012eea:	4d07      	ldr	r5, [pc, #28]	; (8012f08 <_kill_r+0x20>)
 8012eec:	2300      	movs	r3, #0
 8012eee:	4604      	mov	r4, r0
 8012ef0:	4608      	mov	r0, r1
 8012ef2:	4611      	mov	r1, r2
 8012ef4:	602b      	str	r3, [r5, #0]
 8012ef6:	f7ee fb1f 	bl	8001538 <_kill>
 8012efa:	1c43      	adds	r3, r0, #1
 8012efc:	d102      	bne.n	8012f04 <_kill_r+0x1c>
 8012efe:	682b      	ldr	r3, [r5, #0]
 8012f00:	b103      	cbz	r3, 8012f04 <_kill_r+0x1c>
 8012f02:	6023      	str	r3, [r4, #0]
 8012f04:	bd38      	pop	{r3, r4, r5, pc}
 8012f06:	bf00      	nop
 8012f08:	20002a64 	.word	0x20002a64

08012f0c <_getpid_r>:
 8012f0c:	f7ee bb0c 	b.w	8001528 <_getpid>

08012f10 <__swhatbuf_r>:
 8012f10:	b570      	push	{r4, r5, r6, lr}
 8012f12:	460c      	mov	r4, r1
 8012f14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012f18:	2900      	cmp	r1, #0
 8012f1a:	b096      	sub	sp, #88	; 0x58
 8012f1c:	4615      	mov	r5, r2
 8012f1e:	461e      	mov	r6, r3
 8012f20:	da0d      	bge.n	8012f3e <__swhatbuf_r+0x2e>
 8012f22:	89a3      	ldrh	r3, [r4, #12]
 8012f24:	f013 0f80 	tst.w	r3, #128	; 0x80
 8012f28:	f04f 0100 	mov.w	r1, #0
 8012f2c:	bf0c      	ite	eq
 8012f2e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8012f32:	2340      	movne	r3, #64	; 0x40
 8012f34:	2000      	movs	r0, #0
 8012f36:	6031      	str	r1, [r6, #0]
 8012f38:	602b      	str	r3, [r5, #0]
 8012f3a:	b016      	add	sp, #88	; 0x58
 8012f3c:	bd70      	pop	{r4, r5, r6, pc}
 8012f3e:	466a      	mov	r2, sp
 8012f40:	f000 f848 	bl	8012fd4 <_fstat_r>
 8012f44:	2800      	cmp	r0, #0
 8012f46:	dbec      	blt.n	8012f22 <__swhatbuf_r+0x12>
 8012f48:	9901      	ldr	r1, [sp, #4]
 8012f4a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8012f4e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8012f52:	4259      	negs	r1, r3
 8012f54:	4159      	adcs	r1, r3
 8012f56:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012f5a:	e7eb      	b.n	8012f34 <__swhatbuf_r+0x24>

08012f5c <__smakebuf_r>:
 8012f5c:	898b      	ldrh	r3, [r1, #12]
 8012f5e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8012f60:	079d      	lsls	r5, r3, #30
 8012f62:	4606      	mov	r6, r0
 8012f64:	460c      	mov	r4, r1
 8012f66:	d507      	bpl.n	8012f78 <__smakebuf_r+0x1c>
 8012f68:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8012f6c:	6023      	str	r3, [r4, #0]
 8012f6e:	6123      	str	r3, [r4, #16]
 8012f70:	2301      	movs	r3, #1
 8012f72:	6163      	str	r3, [r4, #20]
 8012f74:	b002      	add	sp, #8
 8012f76:	bd70      	pop	{r4, r5, r6, pc}
 8012f78:	ab01      	add	r3, sp, #4
 8012f7a:	466a      	mov	r2, sp
 8012f7c:	f7ff ffc8 	bl	8012f10 <__swhatbuf_r>
 8012f80:	9900      	ldr	r1, [sp, #0]
 8012f82:	4605      	mov	r5, r0
 8012f84:	4630      	mov	r0, r6
 8012f86:	f7fe fc01 	bl	801178c <_malloc_r>
 8012f8a:	b948      	cbnz	r0, 8012fa0 <__smakebuf_r+0x44>
 8012f8c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012f90:	059a      	lsls	r2, r3, #22
 8012f92:	d4ef      	bmi.n	8012f74 <__smakebuf_r+0x18>
 8012f94:	f023 0303 	bic.w	r3, r3, #3
 8012f98:	f043 0302 	orr.w	r3, r3, #2
 8012f9c:	81a3      	strh	r3, [r4, #12]
 8012f9e:	e7e3      	b.n	8012f68 <__smakebuf_r+0xc>
 8012fa0:	89a3      	ldrh	r3, [r4, #12]
 8012fa2:	6020      	str	r0, [r4, #0]
 8012fa4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012fa8:	81a3      	strh	r3, [r4, #12]
 8012faa:	9b00      	ldr	r3, [sp, #0]
 8012fac:	6163      	str	r3, [r4, #20]
 8012fae:	9b01      	ldr	r3, [sp, #4]
 8012fb0:	6120      	str	r0, [r4, #16]
 8012fb2:	b15b      	cbz	r3, 8012fcc <__smakebuf_r+0x70>
 8012fb4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012fb8:	4630      	mov	r0, r6
 8012fba:	f000 f81d 	bl	8012ff8 <_isatty_r>
 8012fbe:	b128      	cbz	r0, 8012fcc <__smakebuf_r+0x70>
 8012fc0:	89a3      	ldrh	r3, [r4, #12]
 8012fc2:	f023 0303 	bic.w	r3, r3, #3
 8012fc6:	f043 0301 	orr.w	r3, r3, #1
 8012fca:	81a3      	strh	r3, [r4, #12]
 8012fcc:	89a3      	ldrh	r3, [r4, #12]
 8012fce:	431d      	orrs	r5, r3
 8012fd0:	81a5      	strh	r5, [r4, #12]
 8012fd2:	e7cf      	b.n	8012f74 <__smakebuf_r+0x18>

08012fd4 <_fstat_r>:
 8012fd4:	b538      	push	{r3, r4, r5, lr}
 8012fd6:	4d07      	ldr	r5, [pc, #28]	; (8012ff4 <_fstat_r+0x20>)
 8012fd8:	2300      	movs	r3, #0
 8012fda:	4604      	mov	r4, r0
 8012fdc:	4608      	mov	r0, r1
 8012fde:	4611      	mov	r1, r2
 8012fe0:	602b      	str	r3, [r5, #0]
 8012fe2:	f7ee fb08 	bl	80015f6 <_fstat>
 8012fe6:	1c43      	adds	r3, r0, #1
 8012fe8:	d102      	bne.n	8012ff0 <_fstat_r+0x1c>
 8012fea:	682b      	ldr	r3, [r5, #0]
 8012fec:	b103      	cbz	r3, 8012ff0 <_fstat_r+0x1c>
 8012fee:	6023      	str	r3, [r4, #0]
 8012ff0:	bd38      	pop	{r3, r4, r5, pc}
 8012ff2:	bf00      	nop
 8012ff4:	20002a64 	.word	0x20002a64

08012ff8 <_isatty_r>:
 8012ff8:	b538      	push	{r3, r4, r5, lr}
 8012ffa:	4d06      	ldr	r5, [pc, #24]	; (8013014 <_isatty_r+0x1c>)
 8012ffc:	2300      	movs	r3, #0
 8012ffe:	4604      	mov	r4, r0
 8013000:	4608      	mov	r0, r1
 8013002:	602b      	str	r3, [r5, #0]
 8013004:	f7ee fb07 	bl	8001616 <_isatty>
 8013008:	1c43      	adds	r3, r0, #1
 801300a:	d102      	bne.n	8013012 <_isatty_r+0x1a>
 801300c:	682b      	ldr	r3, [r5, #0]
 801300e:	b103      	cbz	r3, 8013012 <_isatty_r+0x1a>
 8013010:	6023      	str	r3, [r4, #0]
 8013012:	bd38      	pop	{r3, r4, r5, pc}
 8013014:	20002a64 	.word	0x20002a64

08013018 <_init>:
 8013018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801301a:	bf00      	nop
 801301c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801301e:	bc08      	pop	{r3}
 8013020:	469e      	mov	lr, r3
 8013022:	4770      	bx	lr

08013024 <_fini>:
 8013024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013026:	bf00      	nop
 8013028:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801302a:	bc08      	pop	{r3}
 801302c:	469e      	mov	lr, r3
 801302e:	4770      	bx	lr
